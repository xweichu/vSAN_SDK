{"version":3,"sources":["webpack:///src/app/vsan/common/component/inventory/inventory-nodes.html","webpack:///src/app/vsan/common/component/inventory/inventory-node.component.ts","webpack:///src/app/vsan/common/component/inventory/inventory-nodes.component.ts","webpack:///src/app/vsan/common/component/inventory/inventory-node.html","webpack:///src/app/vsan/common/component/inventory/inventory-browser.html","webpack:///src/app/vsan/common/component/inventory/inventory-browser.component.ts","webpack:///src/app/vsan/common/component/inventory/inventory-node.ts","webpack:///src/app/vsan/common/directive/reactive-forms/disable-control.directive.ts"],"names":["InventoryNodeComponent","dcService","changeDetector","nodeSelected","nodePreselected","nodeVisibilityChanged","loading","useDatacenterServiceForDcFolders","disableSelection","handleNodes","val","node","childNodes","map","e","childrenFetched","setTimeout","filter","refreshFilter","detectChanges","$","css","_preselectedNodes","value","isSelected","selected","active","updateParentSelectedState","expanded","inventoryService","fetchInventoryTree","_filter","trim","length","showCheckBoxes","showCheckboxesOnlyOnLeafNode","data","isLeafNode","showCheckboxSelection","areEqual","nodeRef","emit","forEach","child","parent","allSiblingsSelected","every","preselectedNodes","some","preselected","visible","recursiveNameCheck","name","toLowerCase","includes","parentRef","type","FOLDER","startsWith","DATACENTER_FOLDER_PREFIX","getNodeChildren","toObject","filterContext","then","InventoryNodesComponent","onNodeSelect","onNodeVisibilityChange","InventoryBrowserComponent","selectAllNodes","showSelectAllNodes","maxListHeight","disabled","isBusy","selectAllNodesChanged","updateSelectedNodes","nodes","selectedNodesChanged","getSelectedNodes","showCheckBoxesOnlyOnLeafNodes","rootNodesReceived","selectNode","event","hanldePreselectedNodes","areAllNodesSelected","preselectNode","onNodeVisibilityChanged","_filterContext","Map","set","CONTEXT_REF","contextObject","size","keys","key","get","_objRefs","rootRefs","requestRootNodes","_inventoryService","objRefs","getNodeInfo","inventoryData","handleRootNodes","error","nodeIndex","findIndex","isPreselected","push","splice","InventoryNode","icon","iconShape","isDisabled","_childNodes","InventorySelectionEvent","DisableControlDirective","ngControl","isInit","_disableControl","control","setDisabled","disableControl","disable","enable"],"mappings":"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","file":"23-es5.js","sourcesContent":["<!--Copyright 2021 VMware, Inc. All rights reserved. -- VMware Confidential-->\n<vsan-inventory-node *ngFor=\"let childNode of node.childNodes\"\n                     [class.disable-action]=\"!childNode.active\"\n                     [node]=\"childNode\"\n                     [filter]=\"filter\"\n                     [inventoryService]=\"inventoryService\"\n                     [filterContext]=\"filterContext\"\n                     [preselectedNodes]=\"preselectedNodes\"\n                     [showCheckBoxes]=\"showCheckBoxes\"\n                     [showCheckboxesOnlyOnLeafNode]=\"showCheckboxesOnlyOnLeafNode\"\n                     [useDatacenterServiceForDcFolders]=\"useDatacenterServiceForDcFolders\"\n                     [disableSelection]=\"disableSelection\"\n                     [expanded]=\"childNode.expanded\"\n                     (nodeSelected)=\"onNodeSelect.emit($event.node)\"\n                     (nodeVisibilityChanged)=\"onNodeVisibilityChange.emit()\"\n                     class=\"clr-tree-node\"\n                     ngProjectAs=\"clr-tree-node\"><!-- This is needed for the proper expanding/collapsing of nested nodes-->\n</vsan-inventory-node>","/* Copyright 2017-2022 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {\n   ChangeDetectorRef,\n   Component,\n   EventEmitter,\n   Input,\n   OnInit,\n   Output,\n} from \"@angular/core\";\nimport {ManagedObject, ManagedObjectUtils} from \"@service/managed-object\";\nimport {InventoryBrowserService} from \"@generated/inventory-browser-service\";\nimport {InventoryEntryData} from \"@generated/inventory-entry-data\";\nimport {DatacenterInventoryService} from \"@generated/datacenter-inventory-service\";\nimport {MapUtil} from \"@util/map-util\";\nimport {InventoryNode, InventorySelectionEvent} from \"./inventory-node\";\nimport {FilterContextKey} from \"@generated/filter-context-key\";\n\n@Component({\n   selector: \"vsan-inventory-node\",\n   templateUrl: \"inventory-node.html\",\n   styleUrls: [\"inventory-node.scss\"],\n})\nexport class InventoryNodeComponent implements OnInit {\n   @Input()\n   node: InventoryNode;\n\n   _preselectedNodes: ManagedObject[];\n\n   @Input()\n   set preselectedNodes(value: ManagedObject[]) {\n      this._preselectedNodes = value;\n      // set the model's select property if the node is marked as preselected and is not disabled\n      if (this.isSelected(this.node)) {\n         this.node.selected = this.node.active;\n         this.updateParentSelectedState(this.node);\n      }\n   }\n\n   get preselectedNodes(): ManagedObject[] {\n      return this._preselectedNodes;\n   }\n\n   @Input()\n   filterContext: Map<FilterContextKey, ManagedObject>;\n\n   @Input()\n   inventoryService: InventoryBrowserService;\n\n   @Input()\n   showCheckBoxes: boolean;\n\n   @Input()\n   showCheckboxesOnlyOnLeafNode: boolean;\n\n   @Output()\n   nodeSelected: EventEmitter<InventorySelectionEvent> = new EventEmitter<InventorySelectionEvent>();\n\n   @Output()\n   nodePreselected: EventEmitter<InventorySelectionEvent> = new EventEmitter<InventorySelectionEvent>();\n\n   @Output()\n   nodeVisibilityChanged: EventEmitter<void> = new EventEmitter<void>();\n\n   loading: boolean = false;\n\n   @Input()\n   useDatacenterServiceForDcFolders: boolean = true;\n\n   /* Expose control over whether to allow selecting more items. */\n   @Input()\n   disableSelection: boolean = false;\n\n   private _filter: string;\n\n   get expanded(): boolean {\n      return this.node.expanded;\n   }\n\n   @Input()\n   set expanded(value: boolean) {\n      this.node.expanded = value;\n\n      if (!value || !this.inventoryService) {\n         return;\n      }\n\n      this.fetchInventoryTree();\n   }\n\n   get filter(): string {\n      return this._filter;\n   }\n\n   @Input()\n   set filter(value: string) {\n      if (value) {\n         value = value.trim();\n      }\n      this._filter = value;\n\n      if (this.filter) {\n         this.expanded = true;\n      }\n\n      this.refreshFilter();\n   }\n\n   get isExpandable(): boolean {\n      if (!this.node.childrenFetched) {\n         return true;\n      }\n      return this.node.childNodes.length > 0;\n   }\n\n   get showCheckboxSelection(): boolean {\n      return (this.showCheckBoxes && !this.showCheckboxesOnlyOnLeafNode) ||\n            (this.showCheckBoxes && this.showCheckboxesOnlyOnLeafNode && this.node.data.isLeafNode);\n   }\n\n   get disableCheckbox(): boolean {\n      return this.disableSelection && !this.node.selected;\n   }\n\n   constructor(private dcService: DatacenterInventoryService, private changeDetector: ChangeDetectorRef) {}\n\n   selectNode(node: InventoryNode): void {\n      // If current node has been selected/deselected and checkbox selection is shown for it\n      // Return and prevent node selected event emit\n      if (this.showCheckboxSelection && ManagedObject.areEqual(node.data.nodeRef, this.node.data.nodeRef)) {\n         return;\n      }\n\n      this.nodeSelected.emit(new InventorySelectionEvent(node));\n   }\n\n   checkedStateChanged(node: InventoryNode): void {\n      this.updateParentSelectedState(node);\n\n      if (node.childrenFetched) {\n         // if this is parent node, update selected state of all children\n         node.childNodes.forEach(child => child.selected = node.selected && child.active);\n      }\n      this.nodeSelected.emit(new InventorySelectionEvent(node));\n   }\n\n   private updateParentSelectedState(node: InventoryNode): void {\n      if (!node.parent) {\n         return;\n      }\n\n      // If this is a child node, check if all siblings are selected and update the parent selected state\n      if (node.selected) {\n         const allSiblingsSelected: boolean = node.parent.childNodes.every(child => child.selected);\n         node.parent.selected = allSiblingsSelected;\n      } else {\n         node.parent.selected = false;\n      }\n   }\n\n   isSelected(node: InventoryNode): boolean {\n      return !!node\n            && this.preselectedNodes?.some(preselected => ManagedObject.areEqual(preselected, node.data.nodeRef));\n   }\n\n   ngOnInit(): void {\n      if (this.isSelected(this.node)) {\n         if (!!this.node.parent) {\n            this.node.parent.expanded = true;\n         }\n\n         this.nodePreselected.emit(new InventorySelectionEvent(this.node));\n      }\n   }\n\n   refreshFilter(): void {\n      if (!this.filter) {\n         this.node.visible = true;\n      } else {\n         const recursiveNameCheck: (node: InventoryNode) => boolean = (node: InventoryNode): boolean => {\n            if (node.data.name.toLowerCase().includes(this.filter.toLowerCase())) {\n               return true;\n            }\n\n            return node.childNodes.some(child => recursiveNameCheck(child));\n\n            return false;\n         };\n\n         this.node.visible = recursiveNameCheck(this.node);\n      }\n\n      this.nodeVisibilityChanged.emit();\n   }\n\n   private fetchInventoryTree(): void {\n      if (this.loading || this.node.childrenFetched) {\n         return;\n      }\n      this.loading = true;\n      const parentRef: ManagedObject = this.node.data.nodeRef;\n      if (parentRef.type === ManagedObjectUtils.FOLDER &&\n            parentRef.value.startsWith(ManagedObjectUtils.DATACENTER_FOLDER_PREFIX) &&\n            this.useDatacenterServiceForDcFolders) {\n         this.dcService.getNodeChildren(parentRef, MapUtil.toObject(this.filterContext))\n               .then(this.handleNodes);\n      } else {\n         this.inventoryService.getNodeChildren(parentRef, MapUtil.toObject(this.filterContext))\n               .then(this.handleNodes);\n      }\n   }\n\n   private handleNodes = (val: InventoryEntryData[]) => {\n      this.node.childNodes = val.map(e => new InventoryNode(e));\n      this.node.childrenFetched = true;\n\n      setTimeout(() => {\n         this.loading = false;\n\n         if (this.filter) {\n            this.refreshFilter();\n         }\n         this.changeDetector.detectChanges();\n         // Fix for wrong height set by clarity.\n         setTimeout(() => {\n            $(\"div.clr-treenode-children\").css(\"height\", \"auto\");\n         }, 100);\n      }, 100);\n   };\n}","/* Copyright 2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {\n   Component,\n   EventEmitter,\n   Input,\n   Output,\n} from \"@angular/core\";\nimport {ManagedObject} from \"@service/managed-object\";\nimport {InventoryBrowserService} from \"@generated/inventory-browser-service\";\nimport {InventoryNode} from \"./inventory-node\";\nimport {FilterContextKey} from \"@generated/filter-context-key\";\n/**\n * A separate component is required because of https://github.com/vmware/clarity/issues/5514\n */\n@Component({\n   selector: \"vsan-inventory-nodes\",\n   templateUrl: \"inventory-nodes.html\",\n   styleUrls: [\"inventory-nodes.scss\"],\n})\nexport class InventoryNodesComponent {\n   @Input()\n   node: InventoryNode;\n\n   @Input()\n   filter: string;\n\n   @Input()\n   inventoryService: InventoryBrowserService;\n\n   @Input()\n   filterContext: Map<FilterContextKey, ManagedObject>;\n\n   @Input()\n   preselectedNodes: ManagedObject[];\n\n   @Input()\n   showCheckBoxes: boolean;\n\n   @Input()\n   showCheckboxesOnlyOnLeafNode: boolean;\n\n   @Input()\n   useDatacenterServiceForDcFolders: boolean;\n\n   @Input()\n   disableSelection: boolean;\n\n   @Output()\n   onNodeSelect: EventEmitter<InventoryNode> = new EventEmitter<InventoryNode>();\n\n   @Output()\n   onNodeVisibilityChange: EventEmitter<void> = new EventEmitter<void>();\n}","<!--Copyright 2017-2021 VMware, Inc. All rights reserved. -- VMware Confidential-->\n<clr-tree-node id=\"{{'inventoryNode' + node.data.name}}\"\n               [class.disable-action]=\"!node.active\"\n               class=\"inventory-node\"\n               *ngIf=\"node.visible\">\n   <div class=\"inventory-node-content\">\n      <clr-checkbox-container *ngIf=\"showCheckboxSelection\">\n         <clr-checkbox-wrapper>\n            <input type=\"checkbox\"\n                   clrCheckbox\n                   [vsan-disable-form-control]=\"disableCheckbox\"\n                   id=\"{{node.data.name}}\"\n                   [(ngModel)]=\"node.selected\"\n                   (ngModelChange)=\"checkedStateChanged(node)\"/>\n         </clr-checkbox-wrapper>\n      </clr-checkbox-container>\n      <button class=\"clr-treenode-link\"\n              [disabled]=\"showCheckboxSelection\"\n              [class.active]=\"!showCheckboxSelection && isSelected(node)\"\n              (click)=\"selectNode(node)\">\n         <div class=\"inventory-node-content\">\n            <clr-icon [attr.shape]=\"node.icon\" size=\"16\">\n            </clr-icon>\n            <div class=\"inventory-node-label\" title=\"{{node.data.name}}\">{{node.data.name}}</div>\n         </div>\n      </button>\n   </div>\n   <vsan-inventory-nodes [(clrIfExpanded)]=\"node.expanded\" [clrLoading]=\"loading\" *ngIf=\"isExpandable\"\n                         [node]=\"node\"\n                         [filter]=\"filter\"\n                         [inventoryService]=\"inventoryService\"\n                         [filterContext]=\"filterContext\"\n                         [preselectedNodes]=\"preselectedNodes\"\n                         [showCheckBoxes]=\"showCheckBoxes\"\n                         [showCheckboxesOnlyOnLeafNode]=\"showCheckboxesOnlyOnLeafNode\"\n                         [useDatacenterServiceForDcFolders]=\"useDatacenterServiceForDcFolders\"\n                         [disableSelection]=\"disableSelection\"\n                         (onNodeSelect)=\"selectNode($event)\"\n                         (onNodeVisibilityChange)=\"refreshFilter()\">\n   </vsan-inventory-nodes>\n</clr-tree-node>","<!--Copyright 2017-2021 VMware, Inc. All rights reserved. -- VMware Confidential-->\n<span class=\"busy-backdrop\" *ngIf=\"isBusy\"></span>\n<div class=\"select-all-nodes-container\" *ngIf=\"showSelectAllNodes || selectAllNodesHeader\">\n   <clr-checkbox-wrapper *ngIf=\"showSelectAllNodes\">\n      <input id=\"select-all-nodes\"\n             type=\"checkbox\"\n             clrCheckbox\n             [(ngModel)]=\"selectAllNodes\"\n             (change)=\"selectAllNodesChanged()\"/>\n   </clr-checkbox-wrapper>\n   <div *ngIf=\"selectAllNodesHeader\">\n      <ng-container *ngTemplateOutlet=\"selectAllNodesHeader\"></ng-container>\n   </div>\n</div>\n\n<!-- Search box -->\n<vsan-search-input (filterChange)=\"filter=$event\" [inputAriaLabelKey]=\"searchInputAriaLabelKey\"></vsan-search-input>\n\n<div class=\"inventory-browser-container\">\n   <span *ngIf=\"isBusy\" class=\"spinner spinner-lg central-spinner\"></span>\n   <div *ngIf=\"!isBusy && !hasNodes\" class=\"no-items-available\">\n      {{\"inventory.browser.dialog.no.items\" | localized}}\n   </div>\n   <clr-tree>\n      <vsan-inventory-node\n            [ngClass]=\"{'full-width': hasNodes}\"\n            [class.disable-action]=\"!node.active\"\n            *ngFor=\"let node of nodes\"\n            [node]=\"node\"\n            [filter]=\"filter\"\n            [inventoryService]=\"inventoryService\"\n            [preselectedNodes]=\"preselectedNodes\"\n            [showCheckBoxes]=\"showCheckBoxes\"\n            [showCheckboxesOnlyOnLeafNode]=\"showCheckBoxesOnlyOnLeafNodes\"\n            [useDatacenterServiceForDcFolders]=\"useDatacenterServiceForDcFolders\"\n            [disableSelection]=\"disableSelection\"\n            [filterContext]=\"filterContext\"\n            [expanded]=\"node.expanded\"\n            (nodeSelected)=\"selectNode($event)\"\n            (nodeVisibilityChanged)=\"onNodeVisibilityChanged()\"\n            (nodePreselected)=\"preselectNode($event)\"\n            ngProjectAs=\"clr-tree-node\">\n      </vsan-inventory-node>\n   </clr-tree>\n</div>","/* Copyright 2017-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {\n   ChangeDetectionStrategy,\n   ChangeDetectorRef,\n   Component,\n   EventEmitter,\n   HostBinding,\n   Input,\n   Output,\n   TemplateRef,\n} from \"@angular/core\";\nimport {FilterContextKey} from \"@generated/filter-context-key\";\nimport {InventoryBrowserService} from \"@generated/inventory-browser-service\";\nimport {InventoryEntryData} from \"@generated/inventory-entry-data\";\nimport {ManagedObject} from \"@service/managed-object\";\nimport {Logger} from \"@util/logger\";\nimport {InventoryNode, InventorySelectionEvent} from \"./inventory-node\";\n\n@Component({\n   selector: \"vsan-inventory-browser\",\n   styleUrls: [\"inventory-browser.scss\"],\n   templateUrl: \"inventory-browser.html\",\n   changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class InventoryBrowserComponent {\n\n   // The root nodes to display in the inventory component\n   private _objRefs: ManagedObject[];\n   private _inventoryService: InventoryBrowserService;\n\n   /**\n    * If set to true, the select all nodes checkbox will be checked, and all visible nodes will be checked too.\n    */\n   @Input()\n   selectAllNodes: boolean = false;\n\n   @Input()\n   selectAllNodesHeader: TemplateRef<any>;\n\n   @Input()\n   showSelectAllNodes: boolean = false;\n\n   @Input()\n   maxListHeight: number = 240;\n\n   @Input()\n   searchInputAriaLabelKey: string;\n\n   _filterContext: Map<FilterContextKey, ManagedObject>;\n\n   @Input()\n   set filterContext(value: Map<FilterContextKey, ManagedObject>) {\n      if (!value || !value.size) {\n         return;\n      }\n      for (const key of value.keys()) {\n         this._filterContext.set(key, value.get(key));\n      }\n   }\n\n   get filterContext(): Map<FilterContextKey, ManagedObject> {\n      return this._filterContext;\n   }\n\n   @Input()\n   useDatacenterServiceForDcFolders: boolean = true;\n\n   /* Expose control over whether to allow selecting more items. */\n   @Input()\n   disableSelection: boolean = false;\n\n   /**\n    * When set to true disables the whole component by not allowing any interaction with the DOM elements and also\n    * adds a dim effect\n    */\n   @Input()\n   @HostBinding(\"class.disable-action\")\n   disabled: boolean = false;\n\n   isBusy: boolean = false;\n\n   @Input()\n   set objRefs(rootRefs: ManagedObject[]) {\n      if (!this._objRefs && !!rootRefs) {\n         this._objRefs = rootRefs;\n         this.requestRootNodes();\n      }\n   }\n\n   get objRefs(): ManagedObject[] {\n      return this._objRefs;\n   }\n\n   selectAllNodesChanged = () => {\n      this.updateSelectedNodes(this.nodes);\n      this.selectedNodesChanged.emit(this.getSelectedNodes());\n   };\n\n   @Input()\n   showCheckBoxes: boolean = false;\n\n   @Input()\n   showCheckBoxesOnlyOnLeafNodes: boolean = false;\n\n   // Nodes to be preselected in the inventory browser\n   @Input()\n   preselectedNodes: ManagedObject[] = [];\n\n   @Input()\n   set inventoryService(value: InventoryBrowserService) {\n      if (value !== this._inventoryService) {\n         this._inventoryService = value;\n         this.requestRootNodes();\n      }\n   }\n\n   get inventoryService(): InventoryBrowserService {\n      return this._inventoryService;\n   }\n\n   // To be used when the tree structure is already available, and there is no need to be queried with inventoryService.\n   @Input()\n   set predefinedNodes(value: InventoryNode[]) {\n      this.nodes = value;\n   }\n\n   get predefinedNodes(): InventoryNode[] {\n      return this.nodes;\n   }\n\n   @Output()\n   nodeSelected: EventEmitter<InventorySelectionEvent> = new EventEmitter<InventorySelectionEvent>();\n\n   @Output()\n   nodePreselected: EventEmitter<InventorySelectionEvent> = new EventEmitter<InventorySelectionEvent>();\n\n   @Output()\n   rootNodesReceived: EventEmitter<InventoryNode[]> = new EventEmitter<InventoryNode[]>();\n\n   constructor(private changeDetector: ChangeDetectorRef) {\n      this._filterContext = new Map();\n      this._filterContext.set(FilterContextKey.CONTEXT_REF, ManagedObject.contextObject);\n   }\n\n   nodes: InventoryNode[] = [];\n\n   @Output()\n   selectedNodesChanged: EventEmitter<InventoryNode[]> = new EventEmitter<InventoryNode[]>();\n\n   filter: string;\n\n   private async requestRootNodes(): Promise<void> {\n      if (!this.inventoryService || !this.objRefs) {\n         return;\n      }\n      this.isBusy = true;\n      try {\n         const inventoryData: InventoryEntryData[] = await this.inventoryService.getNodeInfo(this.objRefs);\n         this.handleRootNodes(inventoryData);\n      } catch (err) {\n         Logger.error(err, \"Cannot load inventory browser's root nodes\", err);\n      } finally {\n         this.isBusy = false;\n         this.changeDetector.detectChanges();\n      }\n   }\n\n   private handleRootNodes(val: InventoryEntryData[]): void {\n      this.nodes = val.map(e => new InventoryNode(e));\n      this.updateSelectedNodes(this.nodes);\n      this.rootNodesReceived.emit(this.nodes);\n      this.selectedNodesChanged.emit(this.getSelectedNodes());\n      this.changeDetector.detectChanges();\n   }\n\n   private updateSelectedNodes(nodes: InventoryNode[]): void {\n      // select/unselect only active nodes based on selectAllNodes prop\n      nodes.forEach(node => {\n         node.selected = this.selectAllNodes && node.active;\n         this.updateSelectedNodes(node.childNodes);\n      });\n   }\n\n   selectNode = (event: InventorySelectionEvent): void => {\n      this.nodeSelected.emit(event);\n\n      this.hanldePreselectedNodes(event.node);\n\n      this.selectedNodesChanged.emit(this.getSelectedNodes());\n      if (!event.node.selected) {\n         this.selectAllNodes = false;\n      } else {\n         this.selectAllNodes = this.areAllNodesSelected();\n      }\n   };\n\n   private hanldePreselectedNodes(node: InventoryNode): void {\n      // for single selection use only the first element of the preselected array\n      if (!this.showCheckBoxes) {\n         this.preselectedNodes[0] = node.data.nodeRef;\n         return;\n      }\n\n      const nodeIndex: number = this.preselectedNodes\n            .findIndex(preselected => ManagedObject.areEqual(preselected, node.data.nodeRef));\n      const isPreselected: boolean = nodeIndex !== -1;\n      if (node.selected && !isPreselected) {\n         this.preselectedNodes.push(node.data.nodeRef);\n      } else if (!node.selected && isPreselected) {\n         this.preselectedNodes.splice(nodeIndex, 1);\n      }\n\n      if (node.parent && !this.showCheckBoxesOnlyOnLeafNodes) {\n         this.hanldePreselectedNodes(node.parent);\n      }\n   }\n\n   preselectNode = (event: InventorySelectionEvent): void => {\n      this.nodePreselected.emit(event);\n   };\n\n   // Fired when there is change in the node visibility affected from the filter input.\n   // This is needed to trigger \"hasNodes\" function which will not be executed\n   // when any item from this.nodes changes it's visibility status.\n   // Needed when there are multiple root nodes\n   onNodeVisibilityChanged = () => {\n      setTimeout(() => {\n         this.changeDetector.detectChanges();\n      }, 0);\n      this.selectedNodesChanged.emit(this.getSelectedNodes());\n   };\n\n   get hasNodes(): boolean {\n      return !!this.nodes?.length\n            && (!!this.preselectedNodes?.length || this.nodes.some((value: InventoryNode) => value.visible));\n   }\n\n   // Returns all of the checked parent nodes and those that are unchecked but having at least one child checked\n   getSelectedNodes(): InventoryNode[] {\n      return this.nodes.filter(node =>\n            (node.selected || node.childNodes.some(child => child.selected)));\n   }\n\n   areAllNodesSelected(): boolean {\n      return this.nodes\n            .every(node => (node.selected && node.childNodes.every(child => child.selected)) || !node.active);\n   }\n}","/* Copyright 2019 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {InventoryEntryData} from \"@generated/inventory-entry-data\";\n\nexport class InventoryNode {\n   data: InventoryEntryData;\n   icon: string;\n   active: boolean;\n   visible: boolean;\n   parent: InventoryNode;\n   childrenFetched: boolean;\n   selected: boolean;\n   expanded: boolean;\n\n   private _childNodes: InventoryNode[];\n\n   constructor(data: InventoryEntryData) {\n      this.data = data;\n      this.icon = data.iconShape;\n      this.active = !data.isDisabled;\n      this._childNodes = [];\n      this.childrenFetched = data.isLeafNode;\n      this.visible = true;\n   }\n\n   get childNodes(): InventoryNode[] {\n      return this._childNodes;\n   }\n\n   set childNodes(childNodes: InventoryNode[]) {\n      this._childNodes = childNodes;\n      for (let child of childNodes) {\n         child.parent = this;\n         child.selected = this.selected && child.active;\n      }\n   }\n}\n\nexport class InventorySelectionEvent {\n   constructor(public node: InventoryNode) {\n   }\n}","/* Copyright 2019-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport { NgControl } from '@angular/forms';\nimport {Directive, Input, OnInit} from \"@angular/core\";\n\n/**\n * This directive is used to provide declarative style disabling for angular reactive forms's input elements.\n * This is required since the reactive forms only provide a way to disable them initially,\n * but there is no binding as it seems and subsequent changes to the argument doesn't affect the\n * input's disabled element.\n * Here is a stackoverflow thread with the given issue and some more details on the current approach:\n * https://stackoverflow.com/questions/40494968/reactive-forms-disabled-attribute\n */\n@Directive({\n   selector: \"[vsan-disable-form-control]\"\n})\nexport class DisableControlDirective implements OnInit {\n\n   private isInit: boolean = false;\n\n   constructor( private ngControl : NgControl ) {\n   }\n\n   private _disableControl: boolean;\n\n   @Input(\"vsan-disable-form-control\")\n   set disableControl(value: boolean ) {\n      this._disableControl = value;\n      if (!this.ngControl.control || !this.isInit) {\n         return;\n      }\n      this.setDisabled();\n   }\n\n   get disableControl(): boolean {\n      return this._disableControl;\n   }\n\n   ngOnInit(): void {\n      this.setDisabled();\n      this.isInit = true;\n   }\n\n   private setDisabled(): void {\n      this.disableControl ? this.ngControl.control.disable() : this.ngControl.control.enable();\n   }\n}"]}