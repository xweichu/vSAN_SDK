{"version":3,"sources":["webpack:///src/app/vsan/common/component/chart/pie-chart/pie-chart.html","webpack:///src/app/vsan/common/component/chart/pie-chart/pie-chart.component.ts"],"names":["PieChartComponent","highchartsService","highchartsThemeService","changeDetector","refWatcher","startAngle","showLabels","totalLabel","getString","showTooltips","selection","totalClick","applyHighchartOptions","highchartOptions","getPieChartOptions","event","onChartSelection","updateChartCustomSettings","plotOptions","pie","innerSize","chart","height","chartSize","dataLabels","enabled","tooltip","updateSectionsData","sections","chartData","total","filter","section","showValue","forEach","sectionData","name","sectionLabel","id","y","sectionValueInBytes","color","customSectionColor","custom","tooltipValue","showTooltipLabels","Map","formatFileSize","push","series","data","showTotal","sectionsTotal","detectChanges","watchSubscriptionRef","whenThemeChanged","subscribe","theme","onThemeChanged","configureChartOptions","render","hasTotalClickSubscribers","observers","length","update","chartElement","renderTo","nativeElement","applyScreenReaderMessage","watchChartRef","point","emit","target"],"mappings":"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","file":"51-es5.js","sourcesContent":["<!--Copyright 2018-2021 VMware, Inc. All rights reserved. -- VMware Confidential-->\n<div class=\"pie-chart-container\">\n   <div #pieChart class=\"pie-chart\"></div>\n   <div class=\"total-section\"\n        tabindex=\"0\"\n        *ngIf=\"showTotal\"\n        [ngClass]=\"{'clickable-middle': hasTotalClickSubscribers}\"\n        (keyup.enter)=\"onTotalClick($event)\"\n        (click)=\"onTotalClick($event)\">\n      <div>{{totalLabel}}</div>\n      <div>{{sectionsTotal}}</div>\n   </div>\n</div>","/* Copyright 2018-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {\n   AfterViewInit,\n   ChangeDetectorRef,\n   Component,\n   ElementRef,\n   EventEmitter,\n   Input,\n   Output,\n   ViewChild,\n} from \"@angular/core\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {ChartSectionData} from \"../model/chart-section.data\";\nimport {HighchartsPropertiesService} from \"../highcharts-properties.service\";\nimport {HighchartsThemeService} from \"../highcharts-theme.service\";\nimport * as Highcharts from \"highcharts\";\nimport {ReferenceWatcher} from \"@util/reference-watcher\";\n\n/**\n * Displays a pie chart based on Highcharts pie chart.\n */\n@Component({\n   selector: \"vsan-pie-chart\",\n   templateUrl: \"pie-chart.html\",\n   styleUrls: [\"pie-chart.scss\"],\n   providers: [ReferenceWatcher],\n})\nexport class PieChartComponent implements AfterViewInit {\n   highchartOptions: any;\n\n   /**\n    * Sections with value/label data to be displayed in the pie chart\n    */\n   @Input()\n   sections: ChartSectionData[];\n\n   /**\n    * The size of the inner diameter for the pie. A size greater than 0 renders a donut chart.\n    * Percentages are relative to the pie size.\n    */\n   @Input()\n   innerSize: string;\n\n   /**\n    * Controls the height of the chart area around the pie.\n    * Default is 400px.\n    */\n   @Input()\n   chartSize: number;\n\n   /**\n    * The angle from which to start the first section in the pie chart. Defaults to 0.\n    */\n   @Input()\n   startAngle: number = 0;\n\n   /**\n    * Whether to display the pie chart labels for the data series.\n    * Defaults to true.\n    */\n   @Input()\n   showLabels: boolean = true;\n\n   /**\n    * Whether to include the pie chart labels as part of the tooltips of the series.\n    * Defaults to false, meaning that only the value will be displayed in the tooltip.\n    */\n   @Input()\n   showTooltipLabels: boolean;\n\n   /**\n    * Whether to include a \"Total XX\" label in the middle of the pie-chart.\n    */\n   @Input()\n   showTotal: boolean;\n\n   @Input()\n   totalLabel: string = VsanUiUtils.getString(\"vsan.common.pie.chart.total.label\");\n\n   /**\n    * Whether hovering over the pie chart will show tooltip for the series.\n    */\n   @Input()\n   showTooltips: boolean = true;\n\n   /**\n    * Upon clicking on the chart, emit event containing the id of the ChartSectionData that is clicked.\n    */\n   @Output()\n   selection: EventEmitter<string> = new EventEmitter();\n\n   @Output()\n   totalClick: EventEmitter<void> = new EventEmitter();\n\n   /**\n    * Label containing the total from all sections. Evaluated if showTotal is set to true;\n    */\n   sectionsTotal: string;\n   hasTotalClickSubscribers: boolean;\n\n   @ViewChild(\"pieChart\")\n   chartElement: ElementRef;\n   chart: Highcharts.Chart;\n\n   constructor(private highchartsService: HighchartsPropertiesService,\n         private highchartsThemeService: HighchartsThemeService,\n         private changeDetector: ChangeDetectorRef,\n         private refWatcher: ReferenceWatcher) {\n      // Set the chart options by extending the basic ones with pie chart specific ones.\n      this.applyHighchartOptions();\n      this.refWatcher.watchSubscriptionRef(\n            this.highchartsThemeService.whenThemeChanged.subscribe(theme => this.onThemeChanged()));\n   }\n\n   ngAfterViewInit(): void {\n      this.configureChartOptions();\n      this.render();\n      this.hasTotalClickSubscribers = this.showTotal && this.totalClick.observers.length > 0;\n      this.changeDetector.detectChanges();\n   }\n\n   private configureChartOptions(): void {\n      this.updateChartCustomSettings();\n      this.updateSectionsData();\n   }\n\n   private onThemeChanged(): void {\n      this.applyHighchartOptions();\n      this.configureChartOptions();\n      this.update();\n   }\n\n   private applyHighchartOptions = () => {\n      this.highchartOptions = this.highchartsService.getPieChartOptions((event: any) => this.onChartSelection(event));\n   };\n\n   private updateChartCustomSettings = () => {\n      this.highchartOptions.plotOptions.pie.innerSize = this.innerSize;\n      this.highchartOptions.chart.height = this.chartSize;\n      this.highchartOptions.plotOptions.pie.startAngle = this.startAngle;\n      this.highchartOptions.plotOptions.pie.dataLabels.enabled = this.showLabels;\n      this.highchartOptions.tooltip.enabled = this.showTooltips;\n   };\n\n   private updateSectionsData = () => {\n      if (!this.sections) {\n         return;\n      }\n      const chartData: any[] = [];\n      let total: number = 0;\n      this.sections\n            .filter(section => section.showValue)\n            .forEach((sectionData: ChartSectionData) => {\n         const section: any = {\n            name: sectionData.sectionLabel,\n            id: sectionData.id,\n            y: sectionData.sectionValueInBytes,\n            color: sectionData.customSectionColor,\n            custom: {\n               tooltipValue: sectionData.tooltipValue,\n            },\n         };\n         if (this.showTooltipLabels) {\n            /**\n             * Tooltip will be displayed in format \"label: value\"\n             */\n            section.custom.tooltipValue = new Map<string, string>([\n                  [section.name, VsanUiUtils.formatFileSize(section.y)],\n            ]);\n         }\n         chartData.push(section);\n         total += sectionData.sectionValueInBytes;\n      });\n      const series: any[] = [{\n         name: VsanUiUtils.getString(\"vsan.monitor.capacity.usage.breakdown.category.pie.series.label\"),\n         data: chartData,\n      }];\n\n      if (this.showTotal) {\n         // Update the total label if we are supposed to show it.\n         this.sectionsTotal = VsanUiUtils.formatFileSize(total);\n      }\n\n      this.highchartOptions.series = series;\n      // Avoid \"expression changed after it was checked error\"\n      this.changeDetector.detectChanges();\n   };\n\n   private update(): void {\n      if (this.chart) {\n         this.chart.update(this.highchartOptions);\n      }\n   }\n\n   private render(): void {\n      if (this.chartElement) {\n         this.highchartOptions.chart.renderTo = this.chartElement.nativeElement;\n         this.chart = Highcharts.chart(this.highchartOptions);\n         this.highchartsService.applyScreenReaderMessage(this.chartElement.nativeElement);\n         this.refWatcher.watchChartRef(this.chart);\n      }\n   }\n\n   onChartSelection(event: any): void {\n      if (event.point) {\n         this.selection.emit(event.point.id);\n      } else if (event.target) {\n         this.selection.emit(event.target.id);\n      }\n   }\n\n   onTotalClick(event: any): void {\n      this.totalClick.emit();\n   }\n}\n"]}