(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[19],{

/***/ "2CYb":
/*!*************************************************************************************!*\
  !*** ./src/app/vsan/common/component/datagrid/tree-expander.component.ngfactory.js ***!
  \*************************************************************************************/
/*! exports provided: RenderType_TreeExpanderComponent, View_TreeExpanderComponent_0, View_TreeExpanderComponent_Host_0, TreeExpanderComponentNgFactory */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RenderType_TreeExpanderComponent", function() { return RenderType_TreeExpanderComponent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "View_TreeExpanderComponent_0", function() { return View_TreeExpanderComponent_0; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "View_TreeExpanderComponent_Host_0", function() { return View_TreeExpanderComponent_Host_0; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TreeExpanderComponentNgFactory", function() { return TreeExpanderComponentNgFactory; });
/* harmony import */ var _tree_expander_scss_shim_ngstyle__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./tree-expander.scss.shim.ngstyle */ "JCel");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "8Y7J");
/* harmony import */ var _clr_angular__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @clr/angular */ "X69f");
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/common */ "SVse");
/* harmony import */ var _tree_expander_component__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./tree-expander.component */ "8Y4q");
/**
 * @fileoverview This file was generated by the Angular template compiler. Do not edit.
 *
 * @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride,checkTypes,extraRequire}
 * tslint:disable
 */





var styles_TreeExpanderComponent = [_tree_expander_scss_shim_ngstyle__WEBPACK_IMPORTED_MODULE_0__["styles"]];
var RenderType_TreeExpanderComponent = /*@__PURE__*/ _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵcrt"]({ encapsulation: 0, styles: styles_TreeExpanderComponent, data: {} });

function View_TreeExpanderComponent_1(_l) { return _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵvid"](0, [(_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵeld"](0, 0, null, null, 3, "span", [], null, null, null, null, null)), (_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵted"](-1, null, ["\n   "])), (_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵeld"](2, 0, null, null, 0, "span", [["class", "depth-padding"]], null, null, null, null, null)), (_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵted"](-1, null, ["\n"]))], null, null); }
function View_TreeExpanderComponent_2(_l) { return _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵvid"](0, [(_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵeld"](0, 0, null, null, 1, "span", [["class", "depth-padding"]], null, null, null, null, null)), (_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵted"](-1, null, ["\n"]))], null, null); }
function View_TreeExpanderComponent_3(_l) {
    return _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵvid"](0, [(_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵeld"](0, 0, null, null, 2, "clr-icon", [["class", "hand-cursor"], ["id", "expand-collapse"], ["tabindex", "0"]], [[1, "shape", 0]], [[null, "click"], [null, "keyup.enter"], [null, "keyup.space"]], function (_v, en, $event) {
            var ad = true;
            var _co = _v.component;
            if (("click" === en)) {
                var pd_0 = (_co.row.toggle() !== false);
                ad = (pd_0 && ad);
            }
            if (("keyup.enter" === en)) {
                var pd_1 = (_co.toggleRow($event.target) !== false);
                ad = (pd_1 && ad);
            }
            if (("keyup.space" === en)) {
                var pd_2 = (_co.toggleRow($event.target) !== false);
                ad = (pd_2 && ad);
            }
            return ad;
        }, null, null)), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵdid"](1, 16384, null, 0, _clr_angular__WEBPACK_IMPORTED_MODULE_2__["ClrIconCustomTag"], [], null, null), (_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵted"](-1, null, ["\n"]))], null, function (_ck, _v) { var _co = _v.component; var currVal_0 = _co.iconShape; _ck(_v, 0, 0, currVal_0); });
}
function View_TreeExpanderComponent_0(_l) { return _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵvid"](0, [(_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵted"](-1, null, ["\n"])), (_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵand"](16777216, null, null, 1, null, View_TreeExpanderComponent_1)), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵdid"](2, 278528, null, 0, _angular_common__WEBPACK_IMPORTED_MODULE_3__["NgForOf"], [_angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewContainerRef"], _angular_core__WEBPACK_IMPORTED_MODULE_1__["TemplateRef"], _angular_core__WEBPACK_IMPORTED_MODULE_1__["IterableDiffers"]], { ngForOf: [0, "ngForOf"] }, null), (_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵted"](-1, null, ["\n\n"])), (_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵand"](16777216, null, null, 1, null, View_TreeExpanderComponent_2)), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵdid"](5, 16384, null, 0, _angular_common__WEBPACK_IMPORTED_MODULE_3__["NgIf"], [_angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewContainerRef"], _angular_core__WEBPACK_IMPORTED_MODULE_1__["TemplateRef"]], { ngIf: [0, "ngIf"] }, null), (_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵted"](-1, null, ["\n\n"])), (_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵand"](16777216, null, null, 1, null, View_TreeExpanderComponent_3)), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵdid"](8, 16384, null, 0, _angular_common__WEBPACK_IMPORTED_MODULE_3__["NgIf"], [_angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewContainerRef"], _angular_core__WEBPACK_IMPORTED_MODULE_1__["TemplateRef"]], { ngIf: [0, "ngIf"] }, null), (_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵted"](-1, null, ["\n"]))], function (_ck, _v) { var _co = _v.component; var currVal_0 = _co.depthPadding; _ck(_v, 2, 0, currVal_0); var currVal_1 = !_co.row.isExpandable; _ck(_v, 5, 0, currVal_1); var currVal_2 = _co.row.isExpandable; _ck(_v, 8, 0, currVal_2); }, null); }
function View_TreeExpanderComponent_Host_0(_l) { return _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵvid"](0, [(_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵeld"](0, 0, null, null, 1, "vsan-expand", [], null, null, null, View_TreeExpanderComponent_0, RenderType_TreeExpanderComponent)), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵdid"](1, 49152, null, 0, _tree_expander_component__WEBPACK_IMPORTED_MODULE_4__["TreeExpanderComponent"], [], null, null)], null, null); }
var TreeExpanderComponentNgFactory = /*@__PURE__*/ _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵccf"]("vsan-expand", _tree_expander_component__WEBPACK_IMPORTED_MODULE_4__["TreeExpanderComponent"], View_TreeExpanderComponent_Host_0, { row: "row" }, {}, []);




/***/ }),

/***/ "8Y4q":
/*!***************************************************************************!*\
  !*** ./src/app/vsan/common/component/datagrid/tree-expander.component.ts ***!
  \***************************************************************************/
/*! exports provided: TreeExpanderComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TreeExpanderComponent", function() { return TreeExpanderComponent; });
let TreeExpanderComponent = /*@__PURE__*/ (() => {
    class TreeExpanderComponent {
        get depthPadding() {
            const result = [];
            for (let i = 0; i < this.row.depth; i++) {
                result.push(i);
            }
            return result;
        }
        /**
         * Determines the icon of the expandable component.
         */
        get iconShape() {
            if (this.row.isExpandable) {
                return this.row.isExpanded ?
                    TreeExpanderComponent.expandedShape :
                    TreeExpanderComponent.collapsedShape;
            }
            return "";
        }
        toggleRow(caretIcon) {
            this.row.toggle();
            // Focus the caret icon after clicking Enter/Space, because it goes out of focus
            setTimeout(() => caretIcon.focus());
        }
    }
    TreeExpanderComponent.expandedShape = "caret down";
    TreeExpanderComponent.collapsedShape = "caret right";
    return TreeExpanderComponent;
})();



/***/ }),

/***/ "JCel":
/*!***********************************************************************************!*\
  !*** ./src/app/vsan/common/component/datagrid/tree-expander.scss.shim.ngstyle.js ***!
  \***********************************************************************************/
/*! exports provided: styles */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "styles", function() { return styles; });
/**
 * @fileoverview This file was generated by the Angular template compiler. Do not edit.
 *
 * @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride,checkTypes,extraRequire}
 * tslint:disable
 */
var styles = [".depth-padding[_ngcontent-%COMP%] {\n  padding-left: 0.8rem;\n}\n.hand-cursor[_ngcontent-%COMP%] {\n  cursor: pointer;\n}\nclr-icon[_ngcontent-%COMP%]:focus {\n  outline-offset: 0.05rem !important;\n  outline: 0.1rem solid var(--vsan-focus-outline-color) !important;\n}\n  .datagrid-selected clr-icon:focus {\n  outline-offset: 0.05rem !important;\n  outline: 0.1rem solid var(--vsan-focus-outline-selected-row-color) !important;\n}\n/*# sourceMappingURL=data:application/json;base64, */"];




/***/ }),

/***/ "zgjC":
/*!*****************************************************************!*\
  !*** ./src/app/vsan/common/component/datagrid/tree-datagrid.ts ***!
  \*****************************************************************/
/*! exports provided: TreeDatagrid, TreeDatagridRow, TreeFilter */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TreeDatagrid", function() { return TreeDatagrid; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TreeDatagridRow", function() { return TreeDatagridRow; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TreeFilter", function() { return TreeFilter; });
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! rxjs */ "qCKp");
/* Copyright 2016 VMware, Inc. All rights reserved. -- VMware Confidential */

/**
 * Hierarchical data provider.
 * This is a additional structure to the Clarity Datagrid that supports hierarchical data rendering.
 */
class TreeDatagrid {
    /**
     * @param childItems lambda for extracting the children of a given data object
     * @param rootItems (optional) the initial data objects
     */
    constructor(childItems, rootItems) {
        this.childItems = childItems;
        /**
         * List of filters to be applied on the data.
         */
        this.filters = [];
        /**
         * Removes all items.
         */
        this.clear = () => this.rootItems = [];
        /**
         * Sets the given data objects as content.
         */
        this.refreshGrid = (rowData) => this.rootItems = rowData;
        this.collapseAll = () => this.rows.forEach(r => this.collapse(r));
        this.expandAll = () => this.rows.forEach(r => this.expand(r));
        this.rootItems = rootItems;
    }
    static forChildProperty(childField, rowData) {
        return new TreeDatagrid(item => item[childField], rowData);
    }
    set rootItems(value) {
        this.roots = value ? value : [];
        this.content = this.flatten(this.roots);
    }
    /**
     * root data objects
     */
    get rootItems() {
        return this.roots;
    }
    /**
     * The flat row structure consisting of the root objects and their children
     * in case the parents are expanded. Sorting and filtering are reflected here.
     */
    get rows() {
        return this.content;
    }
    /**
     * Registers a new filter in the data provider.
     * Initially the filter will accept all items.
     * The consumer can assign a predicate to the TreeFilter object
     * to add filtering rule. All registered filters' predicates are
     * evaluated using AND operator.
     */
    registerFilter() {
        let filter = new TreeFilter(() => this.content = this.flatten(this.rootItems));
        this.filters.push(filter);
        return filter;
    }
    unregisterFilter(value) {
        let index = this.filters.indexOf(value);
        if (index != -1) {
            this.filters.splice(index, 1);
        }
    }
    /**
     * Applies sorting comparator and direction for the data provider.
     */
    sort(comparator, ascending = true) {
        this.comparator = comparator;
        this.sortAscending = ascending;
        // refresh content, will expand all nodes
        this.content = this.flatten(this.rootItems);
    }
    expand(row) {
        if (row.isExpanded) {
            // already expanded
            return;
        }
        let rowIndex = this.content.indexOf(row);
        if (rowIndex == -1) {
            // row is filtered out
            return;
        }
        let flattenedChildren = this.flatten(this.childItems(row.data), row.depth + 1);
        if (flattenedChildren.length > 0) {
            this.content.splice(rowIndex + 1, 0, ...flattenedChildren);
        }
        row.isExpanded = true;
    }
    collapse(row) {
        if (!row.isExpanded) {
            // already collapsed
            row.isExpanded = false;
            return;
        }
        let rowIndex = this.content.indexOf(row);
        if (rowIndex == -1) {
            // row is filtered out
            return;
        }
        let removeCount = 0;
        for (let i = rowIndex + 1; i < this.content.length && row.depth < this.content[i].depth; i++) {
            removeCount++;
        }
        this.content.splice(rowIndex + 1, removeCount);
        row.isExpanded = false;
    }
    // returns flattened list of the specified items and their children (and their children);
    // sorting and filter are applied;
    // items are returned in expanded state
    flatten(items, depth = 0, parent) {
        if (!items) {
            return [];
        }
        let sortedItems = [...items];
        if (this.comparator) {
            sortedItems.sort((item1, item2) => (this.sortAscending ? 1 : -1) * this.comparator(item1, item2));
        }
        let result = [];
        for (let item of sortedItems) {
            let childItems = this.childItems(item);
            // flattened children, including their children
            let children = this.flatten(childItems, depth + 1, item);
            let filteredOut = false;
            for (let filter of this.filters) {
                // filter out items only if the filter is not applicable for the item or it's parent
                const matchFilter = filter.predicate(item) || (!!parent && filter.predicate(parent));
                if (!matchFilter) {
                    filteredOut = true;
                }
            }
            if (!filteredOut || children.length > 0) {
                let row = new TreeDatagridRow();
                row.data = item;
                row.toggle = () => row.isExpanded ? this.collapse(row) : this.expand(row);
                row.depth = depth;
                row.isExpanded = true;
                row.isExpandable = childItems && childItems.length > 0;
                result.push(row, ...children);
            }
        }
        return result;
    }
}
/**
 * Represents a single row in a flattened tree data provider.
 */
class TreeDatagridRow {
}
/**
 * Allows specifying filtering predicate for the data provider.
 * @see TreeDatagrid.registerFilter
 */
class TreeFilter {
    constructor(apply) {
        this.apply = apply;
        this.changes = new rxjs__WEBPACK_IMPORTED_MODULE_0__["BehaviorSubject"](false);
        this.clear();
    }
    clear() {
        this._predicate = (item) => true;
        this.apply();
    }
    set predicate(predicate) {
        if (!predicate) {
            this.clear();
        }
        else {
            this._predicate = predicate;
            this.apply();
        }
    }
    get predicate() {
        return this._predicate;
    }
    // Used by clarity filter
    isActive() {
        return this.changes.getValue();
    }
    // Used by clarity filter
    accepts(val) {
        return true;
    }
}



/***/ })

}]);
//# sourceMappingURL=19-es2015.js.map