{"version":3,"sources":["webpack:///src/app/vsan/common/directive/signpost-title/signpost-title.directive.ts","webpack:///src/app/vsan/common/component/precheck/precheck-dialog.module.ts","webpack:///src/app/vsan/common/component/precheck/pre-check-evacuation-dialog.html","webpack:///src/app/vsan/common/component/precheck/pre-check-evacuation-dialog.component.ts","webpack:///src/app/vsan/common/component/datagrid/filter/base-filter.ts","webpack:///src/app/vsan/common/component/inventory/inventory-browser.module.ts","webpack:///src/app/vsan/common/component/search/search.module.ts","webpack:///src/app/vsan/common/component/datagrid/tree-datagrid.ts"],"names":["SignpostTitleDirective","el","renderer","BUTTON_TAG_NAME","CLR_ICON_TAG_NAME","TITLE_ATTRIBUTE","ARIA_EXPANDED_ATTRIBUTE","ARIA_LABEL_ATTRIBUTE","signpostTitle","signpostIcon","nativeElement","getElementsByTagName","item","setAttribute","getString","button","routes","path","component","PrecheckDialogModule","PreCheckEvacuationDialogComponent","clusterId","evacuationEntityUuid","primaryTitle","secondaryTitle","isDecommissionModeChangeAllowed","onDecommissionModeSummaryChanged","summary","isPrecheckWithObjects","setModalDialogHeight","HEIGHT_WITH_OBJECTS","HEIGHT_WITHOUT_OBJECTS","context","getModalContext","hostMor","objectUid","entityName","objectName","selectedDecommisionMode","decommissionMode","evacuateAllData","ensureObjectAccessibility","noAction","error","BaseFilter","data","search","label","stringify","toLowerCase","indexOf","accepts","InventoryBrowserModule","SearchModule","TreeDatagrid","childItems","rootItems","filters","clear","refreshGrid","rowData","collapseAll","rows","forEach","r","collapse","expandAll","expand","roots","value","content","flatten","filter","TreeFilter","push","index","splice","comparator","ascending","sortAscending","row","isExpanded","rowIndex","flattenedChildren","depth","length","removeCount","i","items","parent","sortedItems","sort","item1","item2","result","children","filteredOut","matchFilter","predicate","TreeDatagridRow","toggle","isExpandable","childField","apply","changes","_predicate","getValue","val"],"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","file":"134-es5.js","sourcesContent":["/* Copyright 2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {AfterViewInit, Directive, ElementRef, Input, Renderer2} from \"@angular/core\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\n\n/**\n * Attribute directive for setting a custom title to the clr-icon inside a clr-signpost.\n * It also adds aria-label with the same value and aria-expanded=\"false\" to the button, holding the icon.\n * Used for changing the title when a clr-icon is not explicitly added inside a clr-signpost.\n */\n@Directive({\n   selector: \"clr-signpost\",\n})\nexport class SignpostTitleDirective implements AfterViewInit {\n   private readonly BUTTON_TAG_NAME: string = \"button\";\n   private readonly CLR_ICON_TAG_NAME: string = \"clr-icon\";\n\n   private readonly TITLE_ATTRIBUTE: string = \"title\";\n   private readonly ARIA_EXPANDED_ATTRIBUTE: string = \"aria-expanded\";\n   private readonly ARIA_LABEL_ATTRIBUTE: string = \"aria-label\";\n\n   @Input(\"vsan-signpost-title\")\n   signpostTitle: string;\n\n   constructor(private el: ElementRef<HTMLElement>,\n         private renderer: Renderer2) {\n   }\n\n   ngAfterViewInit(): void {\n      if (!this.signpostTitle) {\n         return;\n      }\n\n      const signpostIcon: Element = this.el.nativeElement.getElementsByTagName(this.CLR_ICON_TAG_NAME).item(0);\n      if (signpostIcon) {\n         this.renderer.setAttribute(signpostIcon, this.TITLE_ATTRIBUTE, VsanUiUtils.getString(this.signpostTitle));\n      }\n      const button: Element = this.el.nativeElement.getElementsByTagName(this.BUTTON_TAG_NAME).item(0);\n      if (button) {\n         this.renderer.setAttribute(button, this.ARIA_EXPANDED_ATTRIBUTE, \"false\");\n         this.renderer.setAttribute(button, this.ARIA_LABEL_ATTRIBUTE, VsanUiUtils.getString(this.signpostTitle));\n      }\n   }\n}\n","import {RouterModule, Routes} from \"@angular/router\";\nimport {PreCheckEvacuationDialogComponent} from \"@component/precheck/pre-check-evacuation-dialog.component\";\nimport {NgModule} from \"@angular/core\";\nimport {CommonModule} from \"@angular/common\";\nimport {FormsModule} from \"@angular/forms\";\nimport {ClarityModule} from \"@clr/angular\";\nimport {VsanCommonModule} from \"../../vsan-common.module\";\nimport {PrecheckModule} from \"@component/precheck/pre-check.module\";\n\nconst routes: Routes = [\n   {\n      path: \"\",\n      component: PreCheckEvacuationDialogComponent\n   }\n];\n\n@NgModule({\n   imports: [\n      CommonModule,\n      FormsModule,\n      ClarityModule,\n      VsanCommonModule,\n      PrecheckModule,\n      RouterModule.forChild(routes)\n   ],\n   declarations: [\n      PreCheckEvacuationDialogComponent\n   ],\n   exports: [\n      PreCheckEvacuationDialogComponent\n   ]\n})\nexport class PrecheckDialogModule {\n}","<!--Copyright 2017-2020 VMware, Inc. All rights reserved. -- VMware Confidential-->\n<vsan-info-prompt [title]=\"primaryTitle\"\n                  [subtitle]=\"secondaryTitle\">\n   <vsan-pre-check-evacuation-summary [clusterId]=\"clusterId\"\n                                      [hostMor]=\"hostMor\"\n                                      [evacuationEntityUuid]=\"evacuationEntityUuid\"\n                                      [selectedDecommissionMode]=\"decommissionMode\"\n                                      [isDecommissionModeChangeAllowed]=\"isDecommissionModeChangeAllowed\"\n                                      (selectedDecommissionModeSummaryChanged)=\"onDecommissionModeSummaryChanged($event)\">\n   </vsan-pre-check-evacuation-summary>\n</vsan-info-prompt>","/* Copyright 2017-2020 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, OnInit} from \"@angular/core\";\nimport {ManagedObject} from \"@service/managed-object\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {Logger} from \"@util/logger\";\nimport {DecommissionModeSummary} from \"@component/precheck/pre-check-evacuation-summary.component\";\nimport {DecommissionMode} from \"@generated/decommission-mode\";\nimport {VsanDiskMgmtActionsUtil} from \"@util/vsan-disk-mgmt-actions-util\";\nimport {PreCheckEvacuationDialogSize} from \"@component/precheck/pre-check-evacuation-dialog-size\";\n\n@Component({\n   templateUrl: \"pre-check-evacuation-dialog.html\",\n   selector: \"vsan-pre-check-evacuation-dialog\",\n})\nexport class PreCheckEvacuationDialogComponent implements OnInit {\n   hostMor: ManagedObject;\n   clusterId: string = \"\";\n   evacuationEntityUuid: string = \"\";\n   entityName: string;\n   decommissionMode: DecommissionMode;\n   primaryTitle: string = \"\";\n   secondaryTitle: string = \"\";\n   isDecommissionModeChangeAllowed: boolean = true;\n\n   async ngOnInit() {\n      const context: any = VsanUiUtils.getModalContext();\n      this.hostMor = context.hostMor;\n      this.evacuationEntityUuid = context.objectUid;\n      this.entityName = context.objectName;\n      this.clusterId = context.clusterId;\n      if (context.selectedDecommisionMode) {\n         // Dialog is opened from the context of Enter Maintenance Mode and has preselected decommission mode\n         // Showing the \"Detailed report\" dialog here, which doesn't allow changing the selected decommission mode\n         this.isDecommissionModeChangeAllowed = false;\n         this.primaryTitle = VsanUiUtils.getString(\"vsan.dialog.precheckEvacuation.detailedReport.title\");\n         switch (context.selectedDecommisionMode) {\n            case \"evacuateAllData\":\n               this.decommissionMode = DecommissionMode.evacuateAllData;\n               this.secondaryTitle = VsanUiUtils.getString(\n                     \"vsan.dialog.precheckEvacuation.detailedReport.secondaryTitle.fullDataMigration\");\n               break;\n            case \"ensureObjectAccessibility\":\n               this.decommissionMode = DecommissionMode.ensureObjectAccessibility;\n               this.secondaryTitle = VsanUiUtils.getString(\n                     \"vsan.dialog.precheckEvacuation.detailedReport.secondaryTitle.ensureAccessibility\");\n               break;\n            case \"noAction\":\n               this.decommissionMode = DecommissionMode.noAction;\n               this.secondaryTitle = VsanUiUtils.getString(\n                     \"vsan.dialog.precheckEvacuation.detailedReport.secondaryTitle.noDataMigration\");\n               break;\n            default:\n               Logger.error(\"Unknown decommissionMode type passed: \" + context.selectedDecommisionMode);\n               break;\n         }\n      } else {\n         // Dialog is opened via Disk Management \"Pre-check\" action\n         this.decommissionMode = DecommissionMode.ensureObjectAccessibility;\n         this.primaryTitle = VsanUiUtils.getString(\"vsan.dialog.precheckEvacuation.title\");\n         this.secondaryTitle = this.entityName;\n      }\n   }\n\n   onDecommissionModeSummaryChanged = (summary: DecommissionModeSummary) => {\n      // In case the precheck dialog doesn't show any objects, decrease the height\n      if  (VsanDiskMgmtActionsUtil.isPrecheckWithObjects(summary)) {\n         VsanUiUtils.setModalDialogHeight(PreCheckEvacuationDialogSize.HEIGHT_WITH_OBJECTS);\n      } else {\n         VsanUiUtils.setModalDialogHeight(PreCheckEvacuationDialogSize.HEIGHT_WITHOUT_OBJECTS);\n      }\n   };\n}","/* Copyright 2017-2020 VMware, Inc. All rights reserved. -- VMware Confidential */\n\nimport {Filter, TreeDatagridRow} from \"../tree-datagrid\";\nimport {ClrDatagridStringFilterInterface} from \"@clr/angular\";\n\n/**\n * Abstract filter class that needs to be extended in order to implement custom filtration.\n * The class has a single abstract method that takes an object of type T and returns its\n * string representation.\n */\nexport class BaseFilter<T> implements ClrDatagridStringFilterInterface<T>, Filter {\n\n   accepts(data: T, search: string): boolean {\n      // Handle correctly TreeDatagrid components\n      if (data instanceof TreeDatagridRow) {\n         data = data.data;\n      }\n\n      let label: string = this.stringify(data);\n      if (label) {\n         // Compare ignoring the case\n         return label.toLowerCase().indexOf(search.toLowerCase()) != -1;\n      } else {\n         return false;\n      }\n   }\n\n   match(data: T, search: string): boolean {\n      return this.accepts(data, search);\n   }\n\n   protected stringify(data: T): string  {\n      return data + \"\";\n   }\n\n}\n\n","/* Copyright 2019-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {NgModule} from \"@angular/core\";\nimport {CommonModule} from \"@angular/common\";\nimport {FormsModule} from \"@angular/forms\";\nimport {ClarityModule} from \"@clr/angular\";\nimport {CommonPipeModule} from \"@pipe/common-pipe.module\";\nimport {InventoryBrowserComponent} from \"@component/inventory/inventory-browser.component\";\nimport {InventoryNodeComponent} from \"@component/inventory/inventory-node.component\";\nimport {WitnessCandidateInventoryService} from \"@generated/witness-candidate-inventory-service\";\nimport {DatacenterInventoryService} from \"@generated/datacenter-inventory-service\";\nimport {NetworkInventoryService} from \"@generated/network-inventory-service\";\nimport {ComputeInventoryService} from \"@generated/compute-inventory-service\";\nimport {IoInsightInventoryService} from \"@generated/io-insight-inventory-service\";\nimport {SearchModule} from \"@component/search/search.module\";\nimport {TreeNodeComponent} from \"@component/inventory/tree-view/tree-node.component\";\nimport {TreeViewComponent} from \"@component/inventory/tree-view/tree-view.component\";\nimport {DropdownObjectSelectorComponent} from \"@component/inventory/dropdown-object-selector/dropdown-object-selector.component\";\nimport {CommonDirectiveModule} from \"@directive/common-directive.module\";\nimport {InventoryNodesComponent} from \"@component/inventory/inventory-nodes.component\";\nimport {TreeNodesComponent} from \"@component/inventory/tree-view/tree-nodes.component\";\n\n@NgModule({\n   imports: [\n      CommonModule,\n      FormsModule,\n      ClarityModule,\n      CommonPipeModule,\n      SearchModule,\n      CommonDirectiveModule,\n   ],\n   declarations: [\n      InventoryBrowserComponent,\n      InventoryNodesComponent,\n      InventoryNodeComponent,\n      TreeNodeComponent,\n      TreeNodesComponent,\n      TreeViewComponent,\n      DropdownObjectSelectorComponent,\n   ],\n   exports: [\n      InventoryBrowserComponent,\n      DropdownObjectSelectorComponent,\n      TreeViewComponent,\n   ],\n   providers: [\n      WitnessCandidateInventoryService,\n      DatacenterInventoryService,\n      NetworkInventoryService,\n      ComputeInventoryService,\n      IoInsightInventoryService,\n   ],\n})\nexport class InventoryBrowserModule {\n}","/* Copyright 2019 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {NgModule} from \"@angular/core\";\nimport {CommonModule} from \"@angular/common\";\nimport {FormsModule} from \"@angular/forms\";\nimport {ClarityModule} from \"@clr/angular\";\nimport {CommonPipeModule} from \"@pipe/common-pipe.module\";\nimport {SearchComponent} from \"@component/search/search.component\";\n\n@NgModule({\n   imports: [\n      CommonModule,\n      FormsModule,\n      ClarityModule,\n      CommonPipeModule\n   ],\n   declarations: [\n      SearchComponent\n   ],\n   exports: [\n      SearchComponent\n   ],\n})\nexport class SearchModule {\n}\n","/* Copyright 2016 VMware, Inc. All rights reserved. -- VMware Confidential */\n\nimport {BehaviorSubject} from \"rxjs\";\nimport {ClrDatagridFilterInterface} from \"@clr/angular\";\n\n/**\n * Hierarchical data provider.\n * This is a additional structure to the Clarity Datagrid that supports hierarchical data rendering.\n */\nexport class TreeDatagrid {\n\n   public static forChildProperty(childField: string, rowData?: any[]) {\n      return new TreeDatagrid(item => item[childField], rowData);\n   }\n\n   /**\n    * The data objects that are to be rendered as first-level rows.\n    */\n   protected roots: any[];\n\n   /**\n    * The flat row structure consisting of the root objects and their children\n    * in case the parents are expanded. Sorting and filtering are reflected here.\n    */\n   protected content: TreeDatagridRow[];\n\n   /**\n    * List of filters to be applied on the data.\n    */\n   protected filters: TreeFilter[] = [];\n\n   /**\n    * The comparator to be used to sort the items and their children.\n    */\n   public comparator: (item1: any, item2: any) => number;\n\n   /**\n    * Sorting direction.\n    */\n   public sortAscending: boolean;\n\n   /**\n    * @param childItems lambda for extracting the children of a given data object\n    * @param rootItems (optional) the initial data objects\n    */\n   constructor(private childItems: (parent: any) => any[], rootItems?: any[]) {\n      this.rootItems = rootItems;\n   }\n\n   /**\n    * Removes all items.\n    */\n   public clear = () => this.rootItems = [];\n\n   /**\n    * Sets the given data objects as content.\n    */\n   public refreshGrid = (rowData: any[]) => this.rootItems = rowData;\n\n   public set rootItems(value: any[]) {\n      this.roots = value ? value : [];\n      this.content = this.flatten(this.roots);\n   }\n\n   /**\n    * root data objects\n    */\n   public get rootItems(): any[] {\n      return this.roots;\n   }\n\n   /**\n    * The flat row structure consisting of the root objects and their children\n    * in case the parents are expanded. Sorting and filtering are reflected here.\n    */\n   public get rows(): TreeDatagridRow[] {\n      return this.content;\n   }\n\n   /**\n    * Registers a new filter in the data provider.\n    * Initially the filter will accept all items.\n    * The consumer can assign a predicate to the TreeFilter object\n    * to add filtering rule. All registered filters' predicates are\n    * evaluated using AND operator.\n    */\n   public registerFilter(): TreeFilter {\n      let filter: TreeFilter = new TreeFilter(() => this.content = this.flatten(this.rootItems));\n      this.filters.push(filter);\n      return filter;\n   }\n\n   public unregisterFilter(value: TreeFilter) {\n      let index: number = this.filters.indexOf(value);\n      if (index != -1) {\n         this.filters.splice(index, 1);\n      }\n   }\n\n   /**\n    * Applies sorting comparator and direction for the data provider.\n    */\n   public sort(comparator: (item1: any, item2: any) => number, ascending: boolean = true) {\n      this.comparator = comparator;\n      this.sortAscending = ascending;\n\n      // refresh content, will expand all nodes\n      this.content = this.flatten(this.rootItems);\n   }\n\n   public collapseAll = () => this.rows.forEach(r => this.collapse(r));\n\n   public expandAll = () => this.rows.forEach(r => this.expand(r));\n\n   protected expand(row: TreeDatagridRow) {\n      if (row.isExpanded) {\n         // already expanded\n         return;\n      }\n\n      let rowIndex = this.content.indexOf(row);\n      if (rowIndex == -1) {\n         // row is filtered out\n         return;\n      }\n\n      let flattenedChildren: TreeDatagridRow[] = this.flatten(this.childItems(row.data), row.depth + 1);\n      if (flattenedChildren.length > 0) {\n         this.content.splice(rowIndex + 1, 0, ... flattenedChildren);\n      }\n\n      row.isExpanded = true;\n   }\n\n   protected collapse(row: TreeDatagridRow) {\n      if (!row.isExpanded) {\n         // already collapsed\n         row.isExpanded = false;\n         return;\n      }\n\n      let rowIndex = this.content.indexOf(row);\n      if (rowIndex == -1) {\n         // row is filtered out\n         return;\n      }\n\n      let removeCount: number = 0;\n      for (let i = rowIndex + 1; i < this.content.length && row.depth < this.content[i].depth; i++) {\n         removeCount ++;\n      }\n\n      this.content.splice(rowIndex + 1, removeCount);\n      row.isExpanded = false;\n   }\n\n   // returns flattened list of the specified items and their children (and their children);\n   // sorting and filter are applied;\n   // items are returned in expanded state\n   protected flatten(items: any[], depth: number = 0, parent?: any): TreeDatagridRow[] {\n      if (!items) {\n         return [];\n      }\n\n      let sortedItems: any[] = [... items];\n      if (this.comparator) {\n         sortedItems.sort((item1: any, item2: any) => (this.sortAscending ? 1 : -1) * this.comparator(item1, item2));\n      }\n\n      let result: TreeDatagridRow[] = [];\n\n      for (let item of sortedItems) {\n\n         let childItems: any[] = this.childItems(item);\n\n         // flattened children, including their children\n         let children: TreeDatagridRow[] = this.flatten(childItems, depth + 1, item);\n\n         let filteredOut: boolean = false;\n         for (let filter of this.filters) {\n            // filter out items only if the filter is not applicable for the item or it's parent\n            const matchFilter: boolean = filter.predicate(item) || (!!parent && filter.predicate(parent));\n            if (!matchFilter) {\n               filteredOut = true;\n            }\n         }\n         if (!filteredOut || children.length > 0) {\n            let row: TreeDatagridRow = new TreeDatagridRow();\n            row.data = item;\n            row.toggle = () => row.isExpanded ? this.collapse(row) : this.expand(row);\n            row.depth = depth;\n            row.isExpanded = true;\n            row.isExpandable = childItems && childItems.length > 0;\n\n            result.push(row, ... children);\n         }\n      }\n\n      return result;\n   }\n\n}\n\n/**\n * Represents a single row in a flattened tree data provider.\n */\nexport class TreeDatagridRow {\n\n   /**\n    * The data object for the row\n    */\n   public data: any;\n\n   /**\n    * Will be true if the row has children\n    */\n   public isExpandable: boolean;\n\n   /**\n    * Will be true if the row is currently expanded\n    */\n   public isExpanded: boolean;\n\n   /**\n    * Will flip the row's expanded/collapsed state\n    */\n   public toggle: () => void;\n\n   /**\n    * The nesting level the row is rendered at\n    */\n   public depth: number;\n\n}\n\nexport interface Filter  {\n   match(data: any, filter:string): boolean;\n}\n\n/**\n * Allows specifying filtering predicate for the data provider.\n * @see TreeDatagrid.registerFilter\n */\nexport class TreeFilter implements ClrDatagridFilterInterface<any> {\n\n   private _predicate: (item: any) => boolean;\n   changes = new BehaviorSubject<boolean>(false);\n\n   constructor(private apply: () => void) {\n      this.clear();\n   }\n\n   public clear() {\n      this._predicate = (item: any) => true;\n      this.apply();\n   }\n\n   public set predicate(predicate: (item: any) => boolean) {\n      if (!predicate) {\n         this.clear();\n      } else {\n         this._predicate = predicate;\n         this.apply();\n      }\n   }\n\n   public get predicate(): (item: any) => boolean {\n      return this._predicate;\n   }\n\n   // Used by clarity filter\n   isActive(): boolean {\n      return this.changes.getValue();\n   }\n\n   // Used by clarity filter\n   accepts(val: any): boolean {\n      return true;\n   }\n}"]}