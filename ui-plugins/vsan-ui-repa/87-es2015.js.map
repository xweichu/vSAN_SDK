{"version":3,"sources":["./src/app/vsan/common/component/precheck/pre-check-evacuation-dialog-size.ts","./src/app/vsan/common/component/precheck/pre-check-evacuation-summary.component.ts","./src/app/generated/what-if-spec.ts","./src/app/vsan/common/component/precheck/pre-check-evacuation-summary.html"],"names":[],"mappings":"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","file":"87-es2015.js","sourcesContent":["/* Copyright 2020 VMware, Inc. All rights reserved. -- VMware Confidential */\nexport enum PreCheckEvacuationDialogSize {\n   HEIGHT_WITH_OBJECTS = 580,\n   HEIGHT_WITHOUT_OBJECTS = 280,\n   WIDTH = 1100,\n}","/* Copyright 2017-2019 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, EventEmitter, Input, Output, OnInit} from \"@angular/core\";\nimport {ManagedObject} from \"@service/managed-object\";\nimport {Logger} from \"@util/logger\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {Icon} from \"@util/icon\";\nimport {AlertType} from \"@component/validation/alert-type\";\nimport {WhatIfPropertyProvider} from \"@generated/what-if-property-provider\";\nimport {WhatIfSpec} from \"@generated/what-if-spec\";\nimport {WhatIfResult} from \"@generated/what-if-result\";\nimport {WhatIfData} from \"@generated/what-if-data\";\nimport {VirtualObjectModel} from \"@generated/virtual-object-model\";\nimport {VsanCapabilityProvider} from \"@generated/vsan-capability-provider\";\nimport {DecommissionMode} from \"@generated/decommission-mode\";\n\n@Component({\n   templateUrl: \"pre-check-evacuation-summary.html\",\n   styleUrls: [\"pre-check-evacuation-summary.scss\"],\n   selector: \"vsan-pre-check-evacuation-summary\"\n})\nexport class PreCheckEvacuationSummaryComponent implements OnInit {\n   Icon = Icon;\n   loading: boolean;\n   // used for holding the result data\n   decommissionModeSummaries: DecommissionModeSummary[] = [];\n   selectedDecommissionModeSummary: DecommissionModeSummary;\n\n   noDataMigrationObjects: VirtualObjectModel[] = [];\n   showErrorMessage: boolean = false;\n   isDiskResourcePrecheckSupported: boolean;\n\n   @Input()\n   hostMor: ManagedObject;\n\n   @Input()\n   clusterId: string;\n\n   @Input()\n   evacuationEntityUuid: string;\n\n   @Input()\n   selectedDecommissionMode: DecommissionMode = DecommissionMode.ensureObjectAccessibility;\n\n   @Input()\n   isDecommissionModeChangeAllowed: boolean = true;\n\n   @Input()\n   preCheckRecommendationMessage: string;\n\n   @Output()\n   selectedDecommissionModeSummaryChanged: EventEmitter<DecommissionModeSummary> =\n         new EventEmitter<DecommissionModeSummary>();\n\n   @Output()\n   isDiskResourcePrecheckSupportedRetrieved: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n   constructor(private whatIfPropertyProvider: WhatIfPropertyProvider,\n         private capabilityProvider: VsanCapabilityProvider) {\n   }\n\n   async ngOnInit() {\n      let contextObj: ManagedObject;\n\n      // When opening this via the Enter maintenance mode, the ManagedObject's contextObject is null, so we use the\n      // clusterId we get from it to build the contextObject.\n      if (this.clusterId) {\n         contextObj = ManagedObject.fromUid(this.clusterId);\n      } else {\n         contextObj = ManagedObject.contextObject;\n      }\n      let preCheckEvacuationSpec: WhatIfSpec = WhatIfSpec.Factory.create(\n            this.evacuationEntityUuid, contextObj, true);\n      try {\n         this.loading = true;\n         let whatIfResult: WhatIfResult;\n         [this.isDiskResourcePrecheckSupported, whatIfResult] = await Promise.all([\n            this.capabilityProvider.getIsDiskResourcePrecheckSupported(contextObj),\n            this.whatIfPropertyProvider.getWhatIfResult(this.hostMor, preCheckEvacuationSpec)\n         ]);\n\n         this.isDiskResourcePrecheckSupportedRetrieved.emit(this.isDiskResourcePrecheckSupported);\n         this.onPreCheckEvacuationDataRetrieved(whatIfResult);\n      } catch (error) {\n         this.onError(error);\n      } finally {\n         this.loading = false;\n      }\n   }\n\n   private onPreCheckEvacuationDataRetrieved = (result: WhatIfResult) => {\n      if (!result || !result.isWhatIfSupported) {\n         Logger.error(\"Failed to retrieve pre-check status or pre-check operation is unsupported.\");\n         this.showErrorMessage = true;\n         return;\n      }\n\n      this.decommissionModeSummaries.push(this.getDecommissionModeInfo(result.fullDataMigration,\n            DecommissionMode.evacuateAllData));\n      this.decommissionModeSummaries.push(this.getDecommissionModeInfo(result.ensureAccessibility,\n            DecommissionMode.ensureObjectAccessibility));\n      this.decommissionModeSummaries.push(this.getDecommissionModeInfo(result.noDataMigration,\n            DecommissionMode.noAction));\n\n      this.onSelectedDecommissionModeChanged(this.selectedDecommissionMode);\n   };\n\n   private getDecommissionModeInfo = (whatIfData: WhatIfData, value: DecommissionMode): DecommissionModeSummary => {\n      let summary: DecommissionModeSummary = new DecommissionModeSummary();\n      summary.value = value;\n\n      if (!whatIfData.summary || whatIfData.summary.length == 0) {\n         summary.summary = VsanUiUtils.getString(\"vsan.dialog.precheckEvacuation.result.unavailable\");\n      } else {\n         summary.summary = whatIfData.summary;\n      }\n\n      if (whatIfData.successWithoutDataLoss) {\n         if (whatIfData.successWithInaccessibleOrNonCompliantObjects) {\n            summary.alertType = AlertType.WARNING;\n         } else {\n            summary.alertType = AlertType.SUCCESS;\n         }\n      } else {\n         summary.alertType = AlertType.DANGER;\n      }\n\n      summary.inaccessibleIncompliantObjects = whatIfData.objects;\n      // Indicates whether the the data migration task will succeed or not\n      summary.isValidDecommissionMode = whatIfData.success;\n\n      return summary;\n   };\n\n   onSelectedDecommissionModeChanged = (value: DecommissionMode) => {\n      this.selectedDecommissionMode = value;\n      if (this.decommissionModeSummaries.length === 0) {\n         // No data has been found/retrieved yet\n         return;\n      }\n      this.selectedDecommissionModeSummary = this.getSelectedDecommissionModeSummary();\n      this.noDataMigrationObjects = this.selectedDecommissionModeSummary.inaccessibleIncompliantObjects;\n      this.selectedDecommissionModeSummaryChanged.emit(this.selectedDecommissionModeSummary);\n   };\n\n   getDiskResourcePrecheckAlertType = (): string => {\n     return this.showPrecheckRecommendationMessage() ? AlertType.WARNING : AlertType.DANGER;\n   };\n\n   getDiskResourcePrecheckAlertMessage = (): string => {\n     return this.showPrecheckRecommendationMessage() ? this.preCheckRecommendationMessage\n           : this.selectedDecommissionModeSummary.summary;\n   };\n\n   // When disk resource precheck is supported, error message is shown only when the operation will not succeed\n   // (e.g. there is insufficient space or there are currently inaccessible VMs),\n   // otherwise a recommendation message is shown in a warning banner\n   private showPrecheckRecommendationMessage = (): boolean => {\n      return this.isDiskResourcePrecheckSupported && this.selectedDecommissionModeSummary.isValidDecommissionMode;\n   };\n\n   private getSelectedDecommissionModeSummary = (): DecommissionModeSummary => {\n      return this.decommissionModeSummaries.find((decommissionModeSummary: DecommissionModeSummary) => {\n         return decommissionModeSummary.value === this.selectedDecommissionMode;\n      });\n   };\n\n   private onError = (error: any) => {\n      this.decommissionModeSummaries = [];\n      Logger.error(\"Retrieving precheck status failed with error:\" + error);\n      this.showErrorMessage = true;\n   };\n}\n\nexport class DecommissionModeSummary {\n   value: DecommissionMode;\n   alertType: AlertType;\n   summary: string;\n   inaccessibleIncompliantObjects: VirtualObjectModel[];\n   isValidDecommissionMode: boolean;\n}","\nexport interface WhatIfSpec {\n\n   entityUuid: string;\n   clusterRef: any;\n   detailed: boolean;\n} //class WhatIfSpec\n\nexport module WhatIfSpec{\nexport class Factory {\n\n   static create = (entityUuid: string, clusterRef: any, detailed: boolean): WhatIfSpec => {\n      return { entityUuid: entityUuid, clusterRef: clusterRef, detailed: detailed, };\n   }\n\n\n} //class Factory\n\n} //module WhatIfSpec\n","<vsan-validation id=\"common-status-error\"\n                 *ngIf=\"showErrorMessage\"\n                 [alertType]=\"'warning'\"\n                 [alert]=\"'vsan.dialog.precheckEvacuation.result.unavailable' | localized\"\n                 [allowClose]=\"false\">\n</vsan-validation>\n\n<!-- vSAN data migration select options -->\n<ng-container *ngIf=\"isDecommissionModeChangeAllowed\">\n   <vsan-pre-check-evacuation-select [selectedDecommissionMode]=\"selectedDecommissionMode\"\n                                     (selectedDecommisionModeChange)=\"onSelectedDecommissionModeChanged($event)\">\n   </vsan-pre-check-evacuation-select>\n</ng-container>\n<!-- vSAN data migration Selected migration summary -->\n<ng-container *ngIf=\"!loading\">\n   <!--Disk precheck is supported and summary is not invoked from EMM/Reboot dialog-->\n   <vsan-validation *ngIf=\"isDiskResourcePrecheckSupported && isDecommissionModeChangeAllowed\"\n                    [alertType]=\"getDiskResourcePrecheckAlertType()\"\n                    [alert]=\"getDiskResourcePrecheckAlertMessage()\"\n                    [allowClose]=\"false\"\n                    id=\"resource-precheck-message-container\">\n   </vsan-validation>\n   <!--Disk precheck is not supported or summary is invoked from EMM/Reboot dialog-->\n   <ng-container *ngIf=\"!isDiskResourcePrecheckSupported || !isDecommissionModeChangeAllowed\">\n      <vsan-validation id=\"selected-decommision-mode-summary\"\n                       *ngIf=\"selectedDecommissionModeSummary\"\n                       [alertType]=\"selectedDecommissionModeSummary.alertType\"\n                       [alert]=\"selectedDecommissionModeSummary.summary\"\n                       [isSmall]=\"true\"\n                       [allowClose]=\"false\">\n      </vsan-validation>\n      <vsan-virtual-objects-table *ngIf=\"noDataMigrationObjects?.length > 0\"\n                                  [loading]=\"loading\"\n                                  [isWhatIfData]=\"true\"\n                                  [hideRowSelection]=\"true\"\n                                  [clusterId]=\"clusterId\"\n                                  [virtualObjects]=\"noDataMigrationObjects\">\n      </vsan-virtual-objects-table>\n   </ng-container>\n</ng-container>\n<span *ngIf=\"loading\" class=\"spinner spinner-md\"></span>\n"],"sourceRoot":"webpack:///"}