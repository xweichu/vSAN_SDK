{"version":3,"sources":["webpack:///src/app/vsan/common/service/flow/error-handler.decorator.ts","webpack:///src/app/vsan/common/component/upgrade/upgrade.component.ts","webpack:///src/app/vsan/common/component/upgrade/upgrade.html","webpack:///src/app/vsan/common/component/inventory/inventory-browser.module.ts","webpack:///src/app/vsan/common/component/search/search.module.ts"],"names":["ErrorHandler","props","targetClass","functionName","descriptor","name","errorHandler","value","UpgradeComponent","dataService","upgradeService","taskService","showCompatibilityWarning","visibleWhenUpToDate","upgradeComplete","precheckComplete","Icon","upgradeActionRelevant","blockContent","precheckActionRelevant","isInit","isVisible","handleUpgradeVsanTask","setTimeout","refreshUpgradeProgressBar","PROGRESS_BAR_REFRESH_INTERVAL_MS","handleUpgradeStatus","reloadPageUponUpgradeCompletion","upgradeData","isUpgradeInProgress","emit","getUpgradeStatus","contextObject","then","upgradeStatus","inProgress","error","onPrecheckUpgrade","task","getAwaitResult","openIssuesDetails","issues","PRE_CHECK_ISSUES_DIALOG_HEIGHT","PRE_CHECK_ISSUES_DIALOG_INITIAL_HEIGHT","PRE_CHECK_ISSUES_DIALOG_ALERT_ITEM_HEIGHT","length","context","clusterName","setSize","open","_upgradeData","data","onUpgradeDataSet","getProperty","resetData","updateViewState","alertMessage","upgradeDiskData","hasDisks","isAsyncPrecheckSupported","isUpgraded","hasOldVsanObject","diskFormatVersionIcon","getFormatVersionIcon","overallUpgradePrecheckStatusIcon","getPrecheckUpgradeStatusIcon","isUpToDate","isUpgradeNeeded","CLR_WARN_STANDARD_ICON_SHAPE","CLR_SUCCESS_STANDARD_ICON_SHAPE","hasPrecheckRunInformation","status","COMPLETED","hasPrecheckIssues","shape","clrIconShapeClassMap","CLR_SOLID_ICON_CLASS","precheckUpgrade","InventoryBrowserModule","SearchModule"],"mappings":"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","file":"59-es5.js","sourcesContent":["/* Copyright 2021 VMware, Inc. All rights reserved. -- VMware Confidential */\n\nimport {LoadingFlowWrapper} from \"@service/flow/loading-flow-wrapper.data\";\n\n/**\n * This property decorator is supposed to be used along with the @Loader decorator.\n * If an exception is thrown during the execution of the method decorated with @Loader\n * the ErrorHandler method will be invoked. You can define as many ErrorHandlers as you want,\n * but they must be with different names. The name can be provided as input to the decorator.\n * If a name is set to the ErrorHandler it will handle only the errors thrown by Loader functions\n * with the same name. If no name is passed to the ErrorHandler, it will handle only the errors\n * from Loader functions with no name.\n *\n * <pre>\n * // Example 1:\n * @Loader()\n * loadSyncData(): any {\n *    throw new Error(\"Failed to load sync data\");\n * }\n *\n * @ErrorHandler()\n * handleError(err: any) {\n *    // handle the error.\n * }\n *...\n *\n * // Example 2\n *\n * @Loader({name: \"data-loading-flow})\n * async loadAsyncData(): Promise<any> {\n *    return Promise.reject(\"Failed to load async data\");\n * }\n *\n * @ErrorHandler({name: \"data-loading-flow})\n * handleError(err: any) {\n *    // handle the error.\n * }\n * ...\n * </pre>\n */\nexport function ErrorHandler(props?: ErrorHandlerProperties): MethodDecorator {\n   props = props || {};\n   return (targetClass: any, functionName: string, descriptor: PropertyDescriptor): void => {\n      (new LoadingFlowWrapper(targetClass, props.name)).errorHandler = descriptor.value;\n   };\n}\n\n/**\n * Properties of the ErrorHandler decorator.\n */\nexport interface ErrorHandlerProperties {\n\n   /**\n    * Indicates which @Loder should be handled by this @ErrorHandler\n    */\n   name?: string;\n}\n","/* Copyright 2016-2022 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, EventEmitter, HostBinding, Input, OnInit, Output} from \"@angular/core\";\nimport {UpgradeService} from \"@component/upgrade/upgrade.service\";\nimport {VsanUpgradeStatusData} from \"@generated/vsan-upgrade-status-data\";\nimport {ClusterComputeResource} from \"@service/client/dataservice/data-service-property\";\nimport {DataServiceClient} from \"@service/client/dataservice/data-service.service\";\nimport {ManagedObject} from \"@service/managed-object\";\nimport {TaskMonitorService} from \"@service/task-monitor-service\";\nimport {Icon} from \"@util/icon\";\nimport {Logger} from \"@util/logger\";\nimport {ModalBuilder} from \"@util/modal-builder\";\nimport {UpgradeData, VsanUpgradeStatus} from \"./upgrade.data\";\n\n@Component({\n   templateUrl: \"upgrade.html\",\n   styleUrls: [\"upgrade.scss\"],\n   selector: \"vsan-upgrade\",\n})\nexport class UpgradeComponent implements OnInit {\n\n   @Input()\n   hasUpgradePermission: boolean;\n\n   /**\n    * If this is true, we show an extra warning text, when there are disks or objects with old format.\n    */\n   @Input()\n   showCompatibilityWarning: boolean = false;\n\n   /**\n    * Whether to show the status, e.g. \"All 12 disks on 12.0 (latest)\", when all disks and objects are\n    * at latest version.\n    * Also applied, when there are no disks.\n    */\n   @Input()\n   visibleWhenUpToDate: boolean = true;\n\n   /* Holds the cluster's disks upgrade status data */\n   private _upgradeData: UpgradeData;\n\n   @Input()\n   set upgradeData(data: UpgradeData) {\n      this._upgradeData = data;\n      if (this.isInit) {\n         this.onUpgradeDataSet();\n      }\n   }\n\n   get upgradeData(): UpgradeData {\n      return this._upgradeData;\n   }\n\n   @Output()\n   upgradeComplete: EventEmitter<void> = new EventEmitter<void>();\n\n   @Output()\n   precheckComplete: EventEmitter<void> = new EventEmitter<void>();\n\n   @HostBinding(\"style.display\")\n   get display(): string {\n      return this.isVisible\n            ? \"flex\"\n            : \"none\";\n   }\n\n   Icon: typeof Icon = Icon;\n\n   upgradeActionRelevant: boolean = false;\n   overallUpgradePrecheckStatusIcon: string;\n   blockContent: boolean = false;\n   diskFormatVersionIcon: string;\n   precheckActionRelevant: boolean = false;\n   alertMessage: string;\n\n   private isInit: boolean = false;\n   private clusterName: string;\n   private isVisible: boolean = true;\n   private static readonly PROGRESS_BAR_REFRESH_INTERVAL_MS: number = 5000;\n   private static readonly PRE_CHECK_ISSUES_DIALOG_ALERT_ITEM_HEIGHT: number = 35;\n   private static readonly PRE_CHECK_ISSUES_DIALOG_INITIAL_HEIGHT: number = 200;\n\n   constructor(private dataService: DataServiceClient,\n         private upgradeService: UpgradeService,\n         private taskService: TaskMonitorService) {\n   }\n\n   async ngOnInit(): Promise<void> {\n      this.clusterName = await this.dataService.getProperty(ClusterComputeResource.name, ManagedObject.contextObject);\n      this.onUpgradeDataSet();\n      this.isInit = true;\n   }\n\n   private onUpgradeDataSet(): void {\n      this.resetData();\n      if (!this.upgradeData) {\n         return;\n      }\n      this.updateViewState();\n      this.handleUpgradeStatus();\n   }\n\n   resetData(): void {\n      this.alertMessage = null;\n      this.isVisible = true;\n   }\n\n   private updateViewState(): void {\n      this.precheckActionRelevant = this.upgradeData.upgradeDiskData.hasDisks &&\n            this.upgradeData.isAsyncPrecheckSupported &&\n            !this.upgradeData.isUpgraded;\n      this.upgradeActionRelevant = this.upgradeData.upgradeDiskData.hasDisks &&\n            (!this.upgradeData.isUpgraded || this.upgradeData.hasOldVsanObject);\n\n      this.diskFormatVersionIcon = this.getFormatVersionIcon();\n      this.overallUpgradePrecheckStatusIcon = this.getPrecheckUpgradeStatusIcon();\n      if (!this.visibleWhenUpToDate) {\n         // We only want to show the view, when there are old disks/objects, otherwise hide it.\n         this.isVisible = !this.upgradeData.isUpToDate;\n      }\n   }\n\n   /**\n    * Gets the icon for the on-disk-format version status icon.\n    */\n   private getFormatVersionIcon(): string {\n      if (this.upgradeService.isUpgradeNeeded(this.upgradeData)) {\n         return Icon.CLR_WARN_STANDARD_ICON_SHAPE;\n      }\n      return Icon.CLR_SUCCESS_STANDARD_ICON_SHAPE;\n   }\n\n   /**\n    * Gets the icon displayed for the vsan Upgrade Pre-checks row.\n    */\n   private getPrecheckUpgradeStatusIcon(): string {\n      if (!this.upgradeData.hasPrecheckRunInformation\n            || this.upgradeData.status !== VsanUpgradeStatus.COMPLETED\n            || this.upgradeData.hasPrecheckIssues) {\n         return Icon.CLR_WARN_STANDARD_ICON_SHAPE;\n      }\n      return Icon.CLR_SUCCESS_STANDARD_ICON_SHAPE;\n   }\n\n   getIconShapeClass(shape: string): string {\n      return Icon.clrIconShapeClassMap[shape] + \" \" + Icon.CLR_SOLID_ICON_CLASS;\n   }\n\n   /*\n    * Upgrade action\n    */\n   upgradeVsan(): void {\n      const context: any = {\n         clusterName: this.clusterName,\n         upgradeData: this.upgradeData,\n      };\n      new ModalBuilder(\"upgrade/upgrade\")\n            .setSize(700, 350)\n            .open(context)\n            .then(this.handleUpgradeVsanTask)\n            .catch(error => {\n               Logger.error(error);\n            });\n   }\n\n   /**\n    * Upon triggering upgrade task we want to monitor the progress and display it in the UI.\n    * @param taskRef - the upgrade task, used to monitor the upgrade completion and notify the parent view.\n    */\n   private handleUpgradeVsanTask = () => {\n      // Show upgrade current progress in progress bar\n      setTimeout(this.refreshUpgradeProgressBar, UpgradeComponent.PROGRESS_BAR_REFRESH_INTERVAL_MS);\n   };\n\n   private handleUpgradeStatus = (reloadPageUponUpgradeCompletion: boolean = false): void => {\n      if (this.upgradeData.isUpgradeInProgress) {\n         // Upgrade ongoing, keep refreshing the progress bar\n         setTimeout(this.refreshUpgradeProgressBar, UpgradeComponent.PROGRESS_BAR_REFRESH_INTERVAL_MS);\n      } else if (reloadPageUponUpgradeCompletion) {\n         // When the upgrade task completes reload the view, otherwise it shows the old disks upgrade info.\n         this.upgradeComplete.emit();\n      }\n   };\n\n   private refreshUpgradeProgressBar = (): void => {\n      this.upgradeService.getUpgradeStatus(ManagedObject.contextObject)\n            .then((upgradeStatus: VsanUpgradeStatusData) => {\n               if (this.upgradeData) {\n                  this.upgradeData.upgradeStatus = upgradeStatus;\n                  this.upgradeData.isUpgradeInProgress = upgradeStatus.inProgress;\n               }\n               this.handleUpgradeStatus(true);\n            })\n            .catch(error => {\n               Logger.error(error);\n            });\n   };\n\n   /*\n    * Pre-check upgrade action\n    */\n   async precheckUpgrade(): Promise<void> {\n      try {\n         this.alertMessage = null;\n         this.blockContent = true;\n         const task: ManagedObject = await this.upgradeService.precheckUpgrade(ManagedObject.contextObject);\n         await this.onPrecheckUpgrade(task);\n      } catch (error) {\n         this.alertMessage = error;\n      } finally {\n         this.blockContent = false;\n      }\n   }\n\n   private onPrecheckUpgrade = async (task: ManagedObject) => {\n      await this.taskService.getAwaitResult(task);\n      await this.precheckComplete.emit();\n      this.openIssuesDetails();\n   };\n\n   openIssuesDetails = () => {\n      if (!this.upgradeData.upgradeStatus || !this.upgradeData.upgradeStatus.issues) {\n         return;\n      }\n      const PRE_CHECK_ISSUES_DIALOG_HEIGHT: number =\n            UpgradeComponent.PRE_CHECK_ISSUES_DIALOG_INITIAL_HEIGHT +\n            UpgradeComponent.PRE_CHECK_ISSUES_DIALOG_ALERT_ITEM_HEIGHT\n            * this.upgradeData.upgradeStatus.issues.length;\n      const context: any = {\n         clusterName: this.clusterName,\n         issues: this.upgradeData.upgradeStatus.issues,\n      };\n      new ModalBuilder(\"diskManagement/preCheckIssues\")\n            .setSize(600, PRE_CHECK_ISSUES_DIALOG_HEIGHT)\n            .open(context);\n   };\n}\n","<!--Copyright 2016-2022 VMware, Inc. All rights reserved. -- VMware Confidential-->\n<div class=\"busy-backdrop\" *ngIf=\"blockContent\">\n   <span id=\"busy-spinner\" class=\"spinner spinner-md central-spinner\"></span>\n</div>\n\n<vsan-validation id=\"validation-message\"\n                 *ngIf=\"alertMessage\"\n                 [alert]=\"alertMessage\"\n                 (onClosed)=\"alertMessage = null\">\n</vsan-validation>\n\n<div *ngIf=\"!upgradeData\">\n   <span class=\"spinner spinner-sm spinner-inline\"></span>\n   <span>{{\"vsan.manage.diskManagement.upgradeComponent.loading\" | localized}}</span>\n</div>\n\n<!-- If upgrade is not currently in progress, show the current disks upgrade and precheck info -->\n<ng-container *ngIf=\"upgradeData\">\n   <ng-container *ngIf=\"!upgradeData.isUpgradeInProgress\">\n      <div id=\"vsanDiskFormatVersionRow\" class=\"icon-name-container\">\n         <clr-icon *ngIf=\"upgradeData.upgradeDiskData.hasDisks\"\n                   aria-hidden=\"true\"\n                   [attr.shape]=\"diskFormatVersionIcon\"\n                   class=\"{{getIconShapeClass(diskFormatVersionIcon)}}\">\n         </clr-icon>\n         <span>{{upgradeData.getOverallUpgradeStatus(showCompatibilityWarning)}}</span>\n         <div class=\"buttons-container\">\n            <button id=\"upgradeButton\"\n                    *ngIf=\"upgradeActionRelevant\"\n                    class=\"btn btn-sm btn-outline\"\n                    (click)=\"upgradeVsan()\"\n                    [disabled]=\"!hasUpgradePermission\"\n                    type=\"button\">\n               {{\"vsan.upgrade.manage.action.upgrade\" | localized}}\n            </button>\n            <button id=\"precheckButton\"\n                    *ngIf=\"precheckActionRelevant\"\n                    class=\"btn btn-sm btn-outline\"\n                    (click)=\"precheckUpgrade()\"\n                    [disabled]=\"!hasUpgradePermission\"\n                    type=\"button\">\n               {{\"vsan.upgrade.manage.action.precheckUpgrade\" | localized}}\n            </button>\n         </div>\n      </div>\n\n      <!-- Precheck has been run, show results -->\n      <div id=\"vsanUpgradePrechecksRow\" *ngIf=\"!upgradeData.isUpgraded\" class=\"icon-name-container\">\n         <clr-icon aria-hidden=\"true\"\n                   [attr.shape]=\"overallUpgradePrecheckStatusIcon\"\n                   class=\"{{getIconShapeClass(overallUpgradePrecheckStatusIcon)}}\">\n         </clr-icon>\n         <span>{{upgradeData.precheckStatus}}</span>\n         <a id=\"detailsButton\"\n            *ngIf=\"upgradeData.hasPrecheckIssues\"\n            [title]=\"'vsan.common.dialogOpen.title' | localized : ('vsan.upgrade.manage.upgrade.confirm.title' | localized)\"\n            href=\"javascript://\"\n            (click)=\"openIssuesDetails()\">\n            {{\"vsan.upgrade.manage.precheckDetailsButtonLabel\" | localized}}\n         </a>\n      </div>\n   </ng-container>\n\n   <!-- Upgrade in progress, only show upgrade task info -->\n   <div id=\"vsanUpgradeRow\" *ngIf=\"upgradeData.isUpgradeInProgress\">\n      <div *ngIf=\"showCompatibilityWarning\"\n           id=\"upgrade-inprogress-warning\"\n           class=\"icon-name-container\">\n         <clr-icon class=\"is-solid\"\n                   aria-hidden=\"true\"\n                   [attr.shape]=\"Icon.CLR_WARN_STANDARD_ICON_SHAPE\"\n                   [ngClass]=\"Icon.CLR_WARN_ICON_CLASS\">\n         </clr-icon>\n         <span>{{\"vsan.manage.upgrade.inprogress.compatibility.warning\" | localized}}</span>\n      </div>\n      <div>{{\"vsan.manage.upgrade.inProgress\" | localized : upgradeData.latestVersionAsString}}</div>\n\n      <div *ngIf=\"upgradeData.upgradeStatus.currentOperationName\">\n         {{\"vsan.upgrade.manage.progress.currentTaskFormat\" | localized : upgradeData.upgradeStatus.currentOperationName}}\n      </div>\n      <div class=\"progress labeled\" *ngIf=\"upgradeData.upgradeStatus.progress\">\n         <progress max=\"100\" value=\"0\" data-value=\"{{upgradeData.upgradeStatus.progress}}\"></progress>\n         <span>{{\"vsan.common.percentage\" | localized: upgradeData.upgradeStatus.progress}}</span>\n      </div>\n   </div>\n</ng-container>","/* Copyright 2019-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {NgModule} from \"@angular/core\";\nimport {CommonModule} from \"@angular/common\";\nimport {FormsModule} from \"@angular/forms\";\nimport {ClarityModule} from \"@clr/angular\";\nimport {CommonPipeModule} from \"@pipe/common-pipe.module\";\nimport {InventoryBrowserComponent} from \"@component/inventory/inventory-browser.component\";\nimport {InventoryNodeComponent} from \"@component/inventory/inventory-node.component\";\nimport {WitnessCandidateInventoryService} from \"@generated/witness-candidate-inventory-service\";\nimport {DatacenterInventoryService} from \"@generated/datacenter-inventory-service\";\nimport {NetworkInventoryService} from \"@generated/network-inventory-service\";\nimport {ComputeInventoryService} from \"@generated/compute-inventory-service\";\nimport {IoInsightInventoryService} from \"@generated/io-insight-inventory-service\";\nimport {SearchModule} from \"@component/search/search.module\";\nimport {TreeNodeComponent} from \"@component/inventory/tree-view/tree-node.component\";\nimport {TreeViewComponent} from \"@component/inventory/tree-view/tree-view.component\";\nimport {DropdownObjectSelectorComponent} from \"@component/inventory/dropdown-object-selector/dropdown-object-selector.component\";\nimport {CommonDirectiveModule} from \"@directive/common-directive.module\";\nimport {InventoryNodesComponent} from \"@component/inventory/inventory-nodes.component\";\nimport {TreeNodesComponent} from \"@component/inventory/tree-view/tree-nodes.component\";\n\n@NgModule({\n   imports: [\n      CommonModule,\n      FormsModule,\n      ClarityModule,\n      CommonPipeModule,\n      SearchModule,\n      CommonDirectiveModule,\n   ],\n   declarations: [\n      InventoryBrowserComponent,\n      InventoryNodesComponent,\n      InventoryNodeComponent,\n      TreeNodeComponent,\n      TreeNodesComponent,\n      TreeViewComponent,\n      DropdownObjectSelectorComponent,\n   ],\n   exports: [\n      InventoryBrowserComponent,\n      DropdownObjectSelectorComponent,\n      TreeViewComponent,\n   ],\n   providers: [\n      WitnessCandidateInventoryService,\n      DatacenterInventoryService,\n      NetworkInventoryService,\n      ComputeInventoryService,\n      IoInsightInventoryService,\n   ],\n})\nexport class InventoryBrowserModule {\n}","/* Copyright 2019 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {NgModule} from \"@angular/core\";\nimport {CommonModule} from \"@angular/common\";\nimport {FormsModule} from \"@angular/forms\";\nimport {ClarityModule} from \"@clr/angular\";\nimport {CommonPipeModule} from \"@pipe/common-pipe.module\";\nimport {SearchComponent} from \"@component/search/search.component\";\n\n@NgModule({\n   imports: [\n      CommonModule,\n      FormsModule,\n      ClarityModule,\n      CommonPipeModule\n   ],\n   declarations: [\n      SearchComponent\n   ],\n   exports: [\n      SearchComponent\n   ],\n})\nexport class SearchModule {\n}\n"]}