{"version":3,"sources":["webpack:///src/app/vsan/performance-diagnostics/performance-diagnostics.module.ts","webpack:///src/app/vsan/performance-diagnostics/view/performance-diagnostics.html","webpack:///src/app/vsan/performance-diagnostics/view/performance-diagnostics.component.ts","webpack:///src/app/vsan/common/component/datagrid/tree-datagrid.module.ts","webpack:///src/app/vsan/common/service/navigation/model/knowledge-base-id.ts","webpack:///src/app/generated/perf-diagnostic-query-spec.ts","webpack:///src/app/vsan/common/component/popup-list/popup-list.module.ts","webpack:///src/app/vsan/performance-diagnostics/view/issues-list.html","webpack:///src/app/vsan/performance-diagnostics/model/aggregated-entity.data.ts","webpack:///src/app/vsan/common/component/navigation/vsan-breadcrumb.module.ts","webpack:///src/app/vsan/performance-diagnostics/view/performance-diagnostics-feedback.html","webpack:///src/app/vsan/performance-diagnostics/model/single-issue-entity.data.ts","webpack:///src/app/vsan/performance-diagnostics/model/diagnostics-issue.data.ts","webpack:///src/app/generated/feedback-spec.ts","webpack:///src/app/vsan/performance-diagnostics/view/performance-diagnostics-feedback.component.ts","webpack:///src/app/vsan/common/component/cell/common-cells.module.ts","webpack:///src/app/vsan/common/component/inventory/inventory-browser.module.ts","webpack:///src/app/generated/perf-diagnostic-type.ts","webpack:///src/app/vsan/performance-diagnostics/view/issues-list.component.ts","webpack:///src/app/vsan/common/vsan-common.module.ts","webpack:///src/app/vsan/common/component/search/search.module.ts","webpack:///src/app/vsan/common/component/action-button/action-button.module.ts"],"names":["performanceDiagnosticsRoutes","path","component","PerformanceDiagnosticsModule","PerformanceDiagnosticsComponent","perfDiagnosticsProvider","perfProvider","permissionService","ceipService","capabilityProvider","taskSvc","navigationService","changeDetector","perfPersistenceService","KnowledgeBaseId","loading","loadingIssues","chartsData","isPerfDiagnosticsFeedbackSupported","hasEditPrivilege","hasReadPolicyPrivilege","disabledService","PERF_DIAGNOSTICS_VIEW_DISABLED_SERVICES","configurationFailedMessage","getString","requestExceptionsData","getPerformanceExceptionsData","clusterRef","then","result","entityTypes","performanceEntityTypes","aggregatedEntityTypes","performanceAggregatedEntityTypes","exceptionTypes","performanceExceptionIdToException","srOnlyMessage","handleError","error","alertMessage","requestEntityInfos","entityRefIds","length","entityRefIdToEntityRefDataMap","notRequestedRefIds","slice","ids","i","MAX_REQUEST","id","shift","push","getPerfEntitiesInfo","entityRefIdToEntityRefData","key","hasOwnProperty","onGoalChanged","goal","createChartsDataFromSingleIssue","issue","metricName","refData","entityType","metrics","metric","graphs","map","graph","getGraphDefinition","graphMetric","chartData","ChartData","data","isShowAllDataAvailable","createChartsDataFromAggregatedIssue","aggregatedGraphMetricsMap","aggregateGraphMetrics","chartTitles","Set","aggregatedEntity","entity","entityRefId","AGGREGATED_METRIC_NAME","rawGraphs","add","name","entityId","entry","has","timeRangePickerComponent","setTimeout","initializePersistedSelections","persistedSelection","getPersistedSelection","timeRange","state","currentTimeRange","from","to","setTimerange","changeRange","emit","contextObject","goals","Goal","iops","tput","lat","fetch","promises","getPerfServiceEnabled","getCeipServiceEnabled","getIsPerfDiagnosticsFeedbackSupportedOnVc","hasPermissions","EDIT_CLUSTER","hasVcPermissions","READ_POLICIES","Promise","all","isPerfEnabled","isCeipEnabled","setRequiredServiceStatus","PERF_DISABLED","PERF_DIAGNOSTICS_VIEW_CEIP_DISABLED","allRequiredServicesAreEnabled","requestData","GLOBAL_DIAGNOSTICS","hasDiagnosticsPermissions","range","saveSelection","currentPickerState","issues","selectedIssue","noDataView","spec","Factory","create","type","getPerformanceDiagnosticTask","perfDiagnosticTaskRef","getAwaitResult","transactionId","isRecentTimeRange","PERF_VIEW_NO_DATA","PERF_VIEW_NO_DATA_FOR_SELECTED_PERIOD","getPerformanceDiagnosticData","forEach","exceptionData","exceptionId","issuePO","entityInfos","issuesWithEntities","addEntities","populateIssuesSummary","startTime","formatDate","endTime","perspective","getDiagnosticTypeLabel","queryType","issuesCount","statusIconShape","CLR_SUCCESS_STANDARD_ICON_SHAPE","statusIconClass","clrIconShapeClassMap","statusText","CLR_WARN_STANDARD_ICON_SHAPE","diagnosticType","eval","isParentIssueSelected","detectChanges","feedback","entities","undefined","metricsSeries","timeStamps","metricsCollectInterval","parentIssue","description","recommendation","trim","moRef","managedObjectRef","objectType","performanceObjectType","extensionId","viewType","clusterVmConsumption","CLUSTER_PERFORMANCE","CLUSTER_VM_CONSUMPTION","clusterBackend","CLUSTER_BACKEND","clusterDomOwner","CLUSTER_ISCSI","clusterIoInsight","CLUSTER_IO_INSIGHT","hostBackend","HOST_PERFORMANCE","HOST_BACKEND","hostVmConsumption","HOST_VM_CONSUMPTION","hostPnic","HOST_PHYSICAL_ADAPTER","hostVnic","HOST_VIRTUAL_ADAPTER","hostNet","diskGroup","cacheDisk","capacityDisk","HOST_DISK","hostIoInsight","HOST_IO_INSIGHT","vm","VM_PERFORMANCE","VM_CONSUMPTION","virtualDisk","vscsi","VM_VIRTUAL_DISK","Error","props","timeRangeFrom","timeRangeTo","timeRangeName","pickerState","timeRangePicker","pickerInterval","hourInterval","pickerFromDate","fromDate","toString","entityUuid","vsanUuid","navigateTo","includes","isEntityMissing","isLinkSupported","date","formatter","getLocaleForDecimal","transform","title","TreeDatagridModule","PerfDiagnosticQuerySpec","PopupListModule","AggregatedIssueEntity","aggregatedRefIds","metricIdLabel","aggrregatedEntityName","getAggregatedEntityRefIdName","usingSingleMetricForAllEntities","vsanPerfEntityType","reduce","prev","current","currentIndex","concat","find","label","performanceTypes","diagnosticIssue","aggregatedIssue","hasSingleEntityInside","childEntity","singleEntity","firstEntity","icon","updateName","aggregatedRefId","DISK_GROUP","CLUSTER","CAPACITY_DISK","HOST_DOMCOMPMGR","HOST_DOMCLIENT","CLUSTER_DOMCLIENT","CACHE_DISK","VsanBreadcrumbModule","SingleIssueEntity","singleIssue","getIcon","getEntityName","VSAN_SSD_DISK_IMAGE","VSAN_NON_SSD_DISK_IMAGE","DISK_GROUP_IMAGE","HOST","objectName","managedObjectName","vnicName","split","pop","cmmds","clomDiskStats","clomHostStats","DiagnosticIssue","diagnosticException","exceptionDefinition","message","helpUrl","exceptionUrl","issueEntities","exceptionEntities","addAggregatedIssueEntity","addSingleIssueEntity","aggregatedIssueEntity","singleIssueEntity","FeedbackSpec","PerformanceDiagnosticsFeedbackComponent","feedbackSubmitting","feedbackError","feedbackSubmit","_selectedIssue","val","feedbackValue","feedbackSpec","submitFeedbackForDiagnosisResult","CommonCellsModule","InventoryBrowserModule","PerfDiagnosticType","IssuesListComponent","selectIssue","initData","target","event","VsanCommonModule","SearchModule","ActionButtonModule"],"mappings":"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","file":"111-es5.js","sourcesContent":["/* Copyright 2020 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {NgModule} from \"@angular/core\";\nimport {ClarityModule} from \"@clr/angular\";\nimport {CommonModule} from \"@angular/common\";\nimport {RouterModule, Routes} from \"@angular/router\";\nimport {VsanCommonModule} from \"../common/vsan-common.module\";\nimport {VsanChartModule} from \"@component/chart/chart.module\";\nimport {UnavailableViewModule} from \"@component/unavailable-view/unavailable-view.module\";\nimport {IssuesListComponent} from \"./view/issues-list.component\";\nimport {PerformanceDiagnosticsComponent} from \"./view/performance-diagnostics.component\";\nimport {PerformanceDiagnosticsFeedbackComponent} from \"./view/performance-diagnostics-feedback.component\";\nimport {PerformancePersistenceService} from \"@service/performance-persistence.service\";\nimport {PersistentStorageService} from \"@service/browser-storage.service\";\n\nconst performanceDiagnosticsRoutes: Routes = [\n   {\n      path: \"\",\n      component: PerformanceDiagnosticsComponent,\n   },\n];\n\n@NgModule({\n   imports: [\n      CommonModule,\n      ClarityModule,\n      VsanChartModule,\n      VsanCommonModule,\n      UnavailableViewModule,\n      RouterModule.forChild(performanceDiagnosticsRoutes),\n   ],\n   declarations: [\n      IssuesListComponent,\n      PerformanceDiagnosticsComponent,\n      PerformanceDiagnosticsFeedbackComponent,\n   ],\n   providers: [\n      PerformancePersistenceService,\n      PersistentStorageService,\n   ],\n})\nexport class PerformanceDiagnosticsModule {\n}\n","<!-- Copyright 2017-2021 VMware, Inc. All rights reserved. -- VMware Confidential -->\n<h5 vsan-auto-focus>\n   {{\"vsan.cluster.monitor.performance.diagnostics.title\" | localized}}\n</h5>\n<!-- busy indicator -->\n<span class=\"busy-backdrop\" *ngIf=\"loading\">\n   <span class=\"spinner central-spinner\"></span>\n</span>\n\n<vsan-validation id=\"configuration-falied-message\"\n                 *ngIf=\"configurationFailedMessage\"\n                 [alert]=\"configurationFailedMessage\"\n                 [allowReload]=\"false\"\n                 [allowClose]=\"false\">\n</vsan-validation>\n\n<vsan-unavailable-view *ngIf=\"!loading && !disabledService.allRequiredServicesAreEnabled\"\n                       [unavailableViewSpec]=\"disabledService\"\n                       [hasEditPrivilege]=\"hasEditPrivilege && hasReadPolicyPrivilege\"\n                       [clusterRef]=\"clusterRef\">\n</vsan-unavailable-view>\n\n<ng-container *ngIf=\"!loading && isPerfEnabled && isCeipEnabled\">\n\n   <vsan-validation id=\"validation-message\"\n                    *ngIf=\"alertMessage\"\n                    [alert]=\"alertMessage\"\n                    [allowReload]=\"false\"\n                    (onClosed)=\"alertMessage = null\">\n   </vsan-validation>\n   <vsan-validation id=\"no-permissions\"\n                    *ngIf=\"!hasDiagnosticsPermissions\"\n                    [alert]=\"getString('vsan.perf.diagnosticts.nopermissions')\"\n                    [allowClose]=\"false\">\n   </vsan-validation>\n\n   <div id=\"header\" *ngIf=\"!noDataView\">\n      <span id=\"description\">{{'vsan.cluster.monitor.performance.diagnostics.description' | localized}}</span>\n      <a [external-link]=\"'vsan.cluster.monitor.performance.diagnostics.link' | localized\"\n         [articleId]=\"KnowledgeBaseId.PERFORMANCE_DIAGNOSTICS\"></a>\n   </div>\n\n   <div id=\"filters\" class=\"filters-container\" *ngIf=\"hasDiagnosticsPermissions\">\n      <label id=\"label-goal\" for=\"goal\">{{'vsan.perf.diagnostics.perspectiveLabel' | localized}}</label>\n      <clr-dropdown id=\"goal\" class=\"range-dropdown\">\n         <button class=\"dropdown-toggle btn btn-sm btn-link\" clrDropdownToggle>\n            {{goal.title}}\n            <clr-icon shape=\"caret down\"></clr-icon>\n         </button>\n         <clr-dropdown-menu\n               clrPosition=\"bottom-left\"\n               [attr.aria-label]=\"'vsan.perf.diagnostics.perspectiveLabel.srMessage.dropdownMenu.label' | localized\">\n            <div *ngFor=\"let goal of goals\">\n               <button clrDropdownItem (click)=\"onGoalChanged(goal)\" [title]=\"goal.title\">\n                  {{goal.title}}\n               </button>\n            </div>\n         </clr-dropdown-menu>\n      </clr-dropdown>\n\n      <vsan-time-range-picker id=\"time-range-picker\"\n                              role=\"group\"\n                              aria-labelledby=\"time-range-label\"\n                              [clusterRef]=\"clusterRef\"\n                              [enabled]=\"!loadingIssues\"\n                              (changeRange)=\"requestDiagnosticsData($event)\">\n      </vsan-time-range-picker>\n   </div>\n\n   <vsan-unavailable-view *ngIf=\"noDataView\"\n                          [unavailableViewSpec]=\"noDataView\">\n   </vsan-unavailable-view>\n\n   <ng-container *ngIf=\"!noDataView\">\n      <div id=\"summary\" *ngIf=\"statusText && !loadingIssues\">\n         <span>{{'vsan.perf.diagnostics.summaryLabel' | localized}}</span>\n         <clr-icon [attr.shape]=\"statusIconShape\" class=\"{{statusIconClass}} is-solid\"></clr-icon>\n         <span>{{statusText}}</span>\n      </div>\n\n      <vsan-issues-list id=\"issuesList\"\n                        *ngIf=\"hasDiagnosticsPermissions\"\n                        [data]=\"issues\"\n                        [loading]=\"loadingIssues\"\n                        (selectIssue)=\"onIssueSelected($event)\">\n      </vsan-issues-list>\n\n      <div id=\"details\" class=\"details-container\">\n         <ng-container *ngIf=\"issues && issues.length && !loadingIssues\">\n            <div id=\"selection-warning-message\"\n                 *ngIf=\"!selectedIssue || isParentIssueSelected\"\n                 class=\"bold-no-selection\">\n               {{'vsan.perf.diagnostic.noEntitySelectedLabel' | localized}}\n            </div>\n         </ng-container>\n\n         <ng-container *ngIf=\"selectedIssue && !isParentIssueSelected\">\n            <span id=\"parent-issue-name\">{{parentIssueTitle}}</span>\n            <span id=\"parent-issue-description\">{{parentIssueDescription}}</span>\n            <vsan-validation id=\"recommendation\"\n                             *ngIf=\"isRecommendationShown\"\n                             alertType=\"info\"\n                             [allowClose]=\"false\"\n                             [alert]=\"getSelectedIssueRecommendation()\">\n            </vsan-validation>\n            <vsan-perf-charts-container *ngFor=\"let data of chartsData; let i=index\"\n                                        id=\"charts-container-{{i}}\"\n                                        [data]=\"[data.data]\"\n                                        [title]=\"data.issue?.name\"\n                                        [subtitle]=\"data.issue?.description\"\n                                        (clickShowAllLink)=\"onShowAllMetricsLinkClicked(data.issue)\"\n                                        [isShowAllLinkVisible]=\"isShowAllLinkVisible(data)\"\n                                        [isEmptyChartsVisible]=\"!alertMessage\">\n            </vsan-perf-charts-container>\n            <vsan-performance-diagnostics-feedback *ngIf=\"isPerfDiagnosticsFeedbackSupported\"\n                                                   [clusterRef]=\"clusterRef\"\n                                                   [transactionId]=\"transactionId\"\n                                                   [selectedIssue]=\"selectedIssue\"\n                                                   (feedbackSubmit)=\"onFeedbackSubmit($event)\">\n            </vsan-performance-diagnostics-feedback>\n         </ng-container>\n      </div>\n   </ng-container>\n</ng-container>\n","/* Copyright 2017-2022 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {DatePipe} from \"@angular/common\";\nimport {ChangeDetectorRef, Component, OnInit, ViewChild} from \"@angular/core\";\nimport {GraphMetric} from \"@component/chart/performance/graph-metrics.data\";\nimport {PerfChartUtil} from \"@component/chart/performance/perf-chart-util\";\nimport {PerfGraph} from \"@component/chart/performance/perf-graph\";\nimport {RangePickerState} from \"@component/datetime-picker/time-range-picker/range-picker-state\";\nimport {VsanTimeRangePickerComponent} from \"@component/datetime-picker/time-range-picker/time-range-picker.component\";\nimport {UnavailableViewSpec} from \"@component/unavailable-view/unavailable-view-spec\";\nimport {CeipService} from \"@generated/ceip-service\";\nimport {DiagnosticException} from \"@generated/diagnostic-exception\";\nimport {PerfDiagnosticQuerySpec} from \"@generated/perf-diagnostic-query-spec\";\nimport {PerfDiagnosticType} from \"@generated/perf-diagnostic-type\";\nimport {PerfEntityStateData} from \"@generated/perf-entity-state-data\";\nimport {PerfTimeRangeData} from \"@generated/perf-time-range-data\";\nimport {PerformanceDiagnosticData} from \"@generated/performance-diagnostic-data\";\nimport {PerformanceDiagnosticsPropertyProvider} from \"@generated/performance-diagnostics-property-provider\";\nimport {PerformanceEntitiesData} from \"@generated/performance-entities-data\";\nimport {PerformanceExceptionsData} from \"@generated/performance-exceptions-data\";\nimport {PerformanceObjectType} from \"@generated/performance-object-type\";\nimport {PermissionService} from \"@generated/permission-service\";\nimport {Privileges} from \"@generated/privileges\";\nimport {VsanCapabilityProvider} from \"@generated/vsan-capability-provider\";\nimport {VsanPerfPropertyProvider} from \"@generated/vsan-perf-property-provider\";\nimport {FullTimeRangeSelectionData} from \"@model/full-time-range-selection.data\";\nimport {PerformanceContext} from \"@navigation/context/performance-context\";\nimport {KnowledgeBaseId} from \"@navigation/model/knowledge-base-id\";\nimport {NavigationService, PlatformExtension} from \"@navigation/navigation.service\";\nimport {RefreshHandler} from \"@service/global-refresh.service\";\nimport {ManagedObject} from \"@service/managed-object\";\nimport {PerformancePersistenceService} from \"@service/performance-persistence.service\";\nimport {ScreenReaderAnnouncer} from \"@service/screen-reader-announcer.service\";\nimport {TaskMonitorService} from \"@service/task-monitor-service\";\nimport {Icon} from \"@util/icon\";\nimport {Logger} from \"@util/logger\";\nimport {VsanDateTimeUtils} from \"@util/vsan-dateteime-util\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {PerfMonitorViewType} from \"../../performance/model/perf-monitor-view-type.model\";\nimport {AggregatedIssueEntity} from \"../model/aggregated-entity.data\";\nimport {DiagnosticIssue} from \"../model/diagnostics-issue.data\";\nimport {SingleIssueEntity} from \"../model/single-issue-entity.data\";\n\n@Component({\n   templateUrl: \"performance-diagnostics.html\",\n   styleUrls: [\"performance-diagnostics.scss\"],\n   selector: \"vsan-performance-diagnostics\",\n})\nexport class PerformanceDiagnosticsComponent implements OnInit {\n\n   readonly KnowledgeBaseId: typeof KnowledgeBaseId = KnowledgeBaseId;\n   private static readonly MAX_REQUEST: number = 256;\n   private static readonly AGGREGATED_METRIC_NAME: string = \"aggregate\";\n\n   loading: boolean = true;\n   loadingIssues: boolean = false;\n   alertMessage: string;\n   goals: Goal[];\n   goal: Goal;\n   issues: DiagnosticIssue[];\n   chartsData: ChartData[] = [];\n   selectedIssue: DiagnosticIssue | AggregatedIssueEntity | SingleIssueEntity;\n   statusIconShape: string;\n   statusIconClass: string;\n   statusText: string;\n   clusterRef: ManagedObject;\n   hasDiagnosticsPermissions: boolean;\n\n   isPerfEnabled: boolean;\n   isCeipEnabled: boolean;\n   isPerfDiagnosticsFeedbackSupported: boolean = false;\n   hasEditPrivilege: boolean = false;\n   hasReadPolicyPrivilege: boolean = false;\n   disabledService: UnavailableViewSpec = UnavailableViewSpec.PERF_DIAGNOSTICS_VIEW_DISABLED_SERVICES;\n   noDataView: UnavailableViewSpec;\n   configurationFailedMessage: string = null;\n\n   getString: (key: string, ...params: any[]) => string = VsanUiUtils.getString;\n\n   private entityTypes: any; // A map containing entity types definitions\n   private aggregatedEntityTypes: any; // A map containing aggregated entity types definitions\n\n   private exceptionTypes: any; // A map containg entityRed id to entityRef data\n   private timeRange: PerfTimeRangeData;\n\n   transactionId: string;\n\n   @ViewChild(VsanTimeRangePickerComponent)\n   private timeRangePicker: VsanTimeRangePickerComponent;\n\n   @ScreenReaderAnnouncer()\n   srOnlyMessage: string;\n\n   constructor(private perfDiagnosticsProvider: PerformanceDiagnosticsPropertyProvider,\n         private perfProvider: VsanPerfPropertyProvider,\n         private permissionService: PermissionService,\n         private ceipService: CeipService,\n         private capabilityProvider: VsanCapabilityProvider,\n         private taskSvc: TaskMonitorService,\n         private navigationService: NavigationService,\n         private changeDetector: ChangeDetectorRef,\n         private perfPersistenceService: PerformancePersistenceService) {\n   }\n\n   @ViewChild(VsanTimeRangePickerComponent)\n   timeRangePickerComponent: VsanTimeRangePickerComponent;\n\n   private initializePersistedSelections(): void {\n      if (this.timeRangePickerComponent == null) {\n         setTimeout(() => {\n            this.initializePersistedSelections();\n         }, 1000);\n         return;\n      }\n\n      // Try to get persisted selection.\n      const persistedSelection: FullTimeRangeSelectionData =\n            this.perfPersistenceService.getPersistedSelection();\n      /*\n       * If there is persisted time range selection, then wait for time-range-picker component\n       * initialization and pass the cached range into it.\n      * */\n      if (persistedSelection != null) {\n         const timeRange: PerfTimeRangeData = persistedSelection.timeRange;\n         const state: RangePickerState = persistedSelection.state;\n\n         if (this.timeRangePickerComponent.currentTimeRange.from !== timeRange.from ||\n               this.timeRangePickerComponent.currentTimeRange.to !== timeRange.to) {\n            this.timeRange = timeRange;\n            this.timeRangePickerComponent.setTimerange(this.timeRange, state);\n            this.timeRangePickerComponent.changeRange.emit(this.timeRange);\n         }\n      }\n   }\n\n   ngOnInit(): void {\n      this.initializePersistedSelections();\n\n      this.clusterRef = ManagedObject.contextObject;\n\n      // Init predefined goals\n      this.goals = [];\n      this.goals.push(new Goal(PerfDiagnosticType.iops,\n            VsanUiUtils.getString(\"vsan.perf.diagnostics.perspective.iops\")));\n      this.goals.push(new Goal(PerfDiagnosticType.tput,\n            VsanUiUtils.getString(\"vsan.perf.diagnostics.perspective.throughput\")));\n      this.goals.push(new Goal(PerfDiagnosticType.lat,\n            VsanUiUtils.getString(\"vsan.perf.diagnostics.perspective.latency\")));\n\n      // Select the first one\n      this.goal = this.goals[0];\n\n      this.fetch();\n   }\n\n   @RefreshHandler\n   async fetch(): Promise<void> {\n      const promises: Promise<any>[] = [\n         this.perfProvider.getPerfServiceEnabled(this.clusterRef),\n         this.ceipService.getCeipServiceEnabled(this.clusterRef),\n         this.capabilityProvider.getIsPerfDiagnosticsFeedbackSupportedOnVc(this.clusterRef),\n         this.permissionService.hasPermissions(this.clusterRef, [Privileges.EDIT_CLUSTER()]),\n         this.permissionService.hasVcPermissions(this.clusterRef, [Privileges.READ_POLICIES()]),\n      ];\n\n      try {\n         this.loading = true;\n         [\n            this.isPerfEnabled,\n            this.isCeipEnabled,\n            this.isPerfDiagnosticsFeedbackSupported,\n            this.hasEditPrivilege,\n            this.hasReadPolicyPrivilege,\n         ] = await Promise.all(promises);\n\n         this.disabledService.setRequiredServiceStatus(UnavailableViewSpec.PERF_DISABLED, this.isPerfEnabled);\n         this.disabledService.setRequiredServiceStatus(UnavailableViewSpec.PERF_DIAGNOSTICS_VIEW_CEIP_DISABLED,\n               this.isCeipEnabled);\n         if (this.disabledService.allRequiredServicesAreEnabled) {\n            this.requestData();\n         } else {\n            this.loading = false;\n         }\n\n         this.alertMessage = null;\n      } catch (ex) {\n         this.loading = false;\n         this.alertMessage = ex;\n         Logger.error(ex);\n      }\n   }\n\n   private requestData(): void {\n      this.permissionService.hasPermissions(this.clusterRef, [Privileges.GLOBAL_DIAGNOSTICS()])\n            .then((result: boolean) => {\n               this.hasDiagnosticsPermissions = result;\n\n               // Request this data only once as it won\"t change unless the vSAN service us upgraded on the server.\n               this.requestExceptionsData();\n            })\n            .catch(this.handleError);\n   }\n\n   /**\n    * Request the exceptions definitions and cache them in the memory as they don\"t change.\n    */\n   private requestExceptionsData = () => {\n      this.loading = true;\n\n      this.perfDiagnosticsProvider.getPerformanceExceptionsData(this.clusterRef).then(\n            (result: PerformanceExceptionsData) => {\n               // Cache result\n               this.entityTypes = result.performanceEntityTypes;\n               this.aggregatedEntityTypes = result.performanceAggregatedEntityTypes;\n               this.exceptionTypes = result.performanceExceptionIdToException;\n\n               this.loading = false;\n               this.srOnlyMessage = VsanUiUtils.getString(\"vsan.screenReader.message.page.loaded\",\n                     VsanUiUtils.getString(\"vsan.cluster.monitor.performance.diagnostics.title\"));\n            }).catch(this.handleError);\n   };\n\n   /**\n    * Requests performance diagnostics data and entity infos\n    */\n   async requestDiagnosticsData(range: PerfTimeRangeData): Promise<void> {\n      this.perfPersistenceService.saveSelection(range, this.timeRangePickerComponent.currentPickerState);\n      this.timeRange = range;\n      this.loadingIssues = true;\n      this.issues = [];\n      this.chartsData = [];\n      this.selectedIssue = null;\n      this.noDataView = null;\n\n      let perfDiagnosticTaskRef: ManagedObject;\n      const spec: PerfDiagnosticQuerySpec = PerfDiagnosticQuerySpec.Factory\n            .create(range.from, range.to, this.goal.type);\n      try {\n         perfDiagnosticTaskRef = await this.perfDiagnosticsProvider.getPerformanceDiagnosticTask(this.clusterRef, spec);\n         this.transactionId = await this.taskSvc.getAwaitResult(perfDiagnosticTaskRef);\n      } catch (e) {\n         // No data is available when the error is thrown.\n         this.loadingIssues = false;\n         this.noDataView = VsanDateTimeUtils.isRecentTimeRange(this.timeRange)\n               ? UnavailableViewSpec.PERF_VIEW_NO_DATA\n               : UnavailableViewSpec.PERF_VIEW_NO_DATA_FOR_SELECTED_PERIOD;\n         return;\n      }\n      this.perfDiagnosticsProvider.getPerformanceDiagnosticData(this.clusterRef, perfDiagnosticTaskRef, spec).then(\n            (result: PerformanceDiagnosticData) => {\n               this.alertMessage = null;\n\n               // Save only unique issues\n               if (result && result.issues) {\n                  result.issues.forEach((issue: DiagnosticException) => {\n                     const exceptionData: any = this.exceptionTypes[issue.exceptionId];\n                     if (exceptionData) {\n                        const issuePO: DiagnosticIssue = new DiagnosticIssue(issue, exceptionData);\n                        this.issues.push(issuePO);\n                     }\n                  });\n               }\n\n               if (result && result.entityRefIds) {\n                  this.requestEntityInfos(result.entityRefIds).then((entityInfos: any) => {\n                     const issuesWithEntities: DiagnosticIssue[] = [];\n\n                     // Remove issues without entities as we\n                     // cannot show information for them\n                     this.issues.forEach((issue: DiagnosticIssue) => {\n                        issue.addEntities(this.entityTypes, entityInfos);\n                        if (issue.issues.length > 0) {\n                           issuesWithEntities.push(issue);\n                        }\n                     });\n                     this.issues = issuesWithEntities;\n                     this.populateIssuesSummary(spec);\n\n                     this.loadingIssues = false;\n                  }, this.handleError);\n               } else {\n                  this.populateIssuesSummary(spec);\n                  this.loadingIssues = false;\n               }\n            }, this.handleError);\n   }\n\n   /**\n    * Generic error handler\n    */\n   private handleError = (error: any) => {\n      Logger.error(\"Unable to retrieve performance diagnostics data.\", error);\n      this.alertMessage = VsanUiUtils.getString(\"vsan.perf.diagnostics.errorLoadingData\");\n      this.loadingIssues = false;\n      this.loading = false;\n   };\n\n   /**\n    * Loads the data about all entityRefIds in portions as the server API\n    * does not support more than 256 IDs in a single request.\n    */\n   private requestEntityInfos = async (entityRefIds: string[]) => {\n      if (!entityRefIds || entityRefIds.length === 0) {\n         return;\n      }\n\n      const entityRefIdToEntityRefDataMap: any = {};\n      const notRequestedRefIds: string[] = entityRefIds.slice();\n\n      // Load the data in portions\n      while (notRequestedRefIds.length > 0) {\n         const ids: string[] = [];\n         for (let i: number = 0; i < PerformanceDiagnosticsComponent.MAX_REQUEST && notRequestedRefIds.length > 0;\n               ++i) {\n            const id: string = notRequestedRefIds.shift();\n            ids.push(id);\n         }\n\n         const result: PerformanceEntitiesData = await this.perfDiagnosticsProvider\n               .getPerfEntitiesInfo(this.clusterRef, ids);\n\n         for (const key in result.entityRefIdToEntityRefData) {\n            if (!result.entityRefIdToEntityRefData.hasOwnProperty(key)) {\n               continue;\n            }\n            entityRefIdToEntityRefDataMap[key] = result.entityRefIdToEntityRefData[key];\n         }\n      }\n\n      return entityRefIdToEntityRefDataMap;\n   };\n\n   /**\n    * Updates the summary label according to the retrieved issues.\n    */\n   private populateIssuesSummary(spec: PerfDiagnosticQuerySpec): void {\n      const startTime: string = PerformanceDiagnosticsComponent.formatDate(spec.startTime);\n      const endTime: string = PerformanceDiagnosticsComponent.formatDate(spec.endTime);\n      const perspective: string = this.getDiagnosticTypeLabel(spec.queryType);\n      const issuesCount: number = this.issues == null\n            ? 0\n            : this.issues.length;\n\n      if (issuesCount === 0) {\n         this.statusIconShape = Icon.CLR_SUCCESS_STANDARD_ICON_SHAPE;\n         this.statusIconClass = Icon.clrIconShapeClassMap[Icon.CLR_SUCCESS_STANDARD_ICON_SHAPE];\n         this.statusText = VsanUiUtils.getString(\"vsan.perf.diagnostics.noIssuesFoundLabel\",\n               startTime, endTime, perspective);\n      } else {\n         this.statusIconShape = Icon.CLR_WARN_STANDARD_ICON_SHAPE;\n         this.statusIconClass = Icon.clrIconShapeClassMap[Icon.CLR_WARN_STANDARD_ICON_SHAPE];\n         this.statusText = VsanUiUtils.getString(\"vsan.perf.diagnostics.foundIssuesLabel\",\n               issuesCount, startTime, endTime, perspective);\n      }\n   }\n\n   private getDiagnosticTypeLabel(diagnosticType: PerfDiagnosticType): string {\n      let result: string;\n      switch (diagnosticType) {\n         case PerfDiagnosticType.eval:\n            result = VsanUiUtils.getString(\"vsan.perf.diagnostics.perspective.eval\");\n            break;\n         case PerfDiagnosticType.iops:\n            result = VsanUiUtils.getString(\"vsan.perf.diagnostics.perspective.iops\");\n            break;\n         case PerfDiagnosticType.tput:\n            result = VsanUiUtils.getString(\"vsan.perf.diagnostics.perspective.throughput\");\n            break;\n         case PerfDiagnosticType.lat:\n            result = VsanUiUtils.getString(\"vsan.perf.diagnostics.perspective.latency\");\n            break;\n         default:\n            Logger.error(\"Uknown diagnostic type: \" + diagnosticType);\n      }\n      return result;\n   }\n\n   /**\n    * Formats the given date in the \"yMdjm\" format (e.g. `9/3/2010, 12:05 PM` for `en-US`)\n    */\n   private static formatDate(date: number): string {\n      const formatter: DatePipe = new DatePipe(VsanUiUtils.getLocaleForDecimal());\n      return formatter.transform(date, VsanUiUtils.getString(\"vsan.common.datePipe.platform.format\"));\n   }\n\n   onGoalChanged = (goal: Goal) => {\n      this.goal = goal;\n   };\n\n   onIssueSelected(issue: any): void {\n      this.selectedIssue = issue;\n\n      // Do nothing for parent issues as they are just\n      // logical groups and there is no charts defined for them\n      if (this.isParentIssueSelected) {\n         return;\n      }\n\n      if (issue instanceof SingleIssueEntity) {\n         this.chartsData = this.createChartsDataFromSingleIssue(issue as SingleIssueEntity);\n      } else if (issue instanceof AggregatedIssueEntity) {\n         this.chartsData = this.createChartsDataFromAggregatedIssue(issue as AggregatedIssueEntity);\n      } else {\n         Logger.error(\"Unknown issueEntity type: \" + issue);\n      }\n\n      this.changeDetector.detectChanges();\n   }\n\n   onFeedbackSubmit(feedback: any): void {\n      (this.selectedIssue as any).feedback = feedback;\n   }\n\n   private createChartsDataFromSingleIssue = (issue: SingleIssueEntity): ChartData[] => {\n      const metricName: string = issue.refData.metricName;\n      const entityType: any = this.entityTypes[metricName];\n\n      // The charts component works with an array of metrics so\n      // if we have a single metrics objects, wrap it in an array\n      const metrics: PerfEntityStateData = issue.metric;\n      const graphs: PerfGraph[] = entityType.graphs.map(graph => PerfChartUtil.getGraphDefinition(graph));\n      const graphMetric: GraphMetric = new GraphMetric(metrics, graphs);\n\n      const chartData: ChartData = new ChartData();\n      chartData.issue = issue;\n      chartData.data = graphMetric;\n      chartData.isShowAllDataAvailable = true;\n      return [chartData];\n   };\n\n   private createChartsDataFromAggregatedIssue = (issue: AggregatedIssueEntity): ChartData[] => {\n      const aggregatedGraphMetricsMap: any = this.aggregateGraphMetrics(issue);\n      const chartsData: ChartData[] = [];\n      const chartTitles: Set<string> = new Set<string>();\n      if (issue.aggregatedEntity) {\n         const entity: SingleIssueEntity = issue.aggregatedEntity;\n         const id: string = entity.metric.entityRefId;\n         const metrics: PerfEntityStateData = entity.metric;\n         const metricName: string = PerformanceDiagnosticsComponent.AGGREGATED_METRIC_NAME;\n         const rawGraphs: any[] = this.aggregatedEntityTypes[metricName].graphs;\n         const graphs: PerfGraph[] = rawGraphs.map(graph => PerfChartUtil.getGraphDefinition(graph));\n\n         const data: ChartData = new ChartData();\n         data.issue = issue;\n         data.isShowAllDataAvailable = false;\n         data.data = new GraphMetric(metrics, graphs, id);\n         if (!!data.data.graphs && data.data.graphs.length > 0) {\n            // Show the aggregated chart only if we can draw it!\n            chartsData.push(data);\n            chartTitles.add(data.issue.name);\n         }\n      }\n\n      for (const entityId in aggregatedGraphMetricsMap) {\n         if (!aggregatedGraphMetricsMap.hasOwnProperty(entityId)) {\n            continue;\n         }\n         const entry: any = aggregatedGraphMetricsMap[entityId];\n         const data: ChartData = new ChartData();\n         data.isShowAllDataAvailable = true;\n         data.issue = entry.issue;\n         data.data = new GraphMetric(entry.metrics, entry.graphs, entityId);\n         // Don't set the same title on each chart within the same entity\n         if (chartTitles.has(data.issue.name)) {\n            data.issue.name = null;\n         } else {\n            chartTitles.add(data.issue.name);\n         }\n         chartsData.push(data);\n      }\n\n      return chartsData;\n   };\n\n   private aggregateGraphMetrics(issue: AggregatedIssueEntity): void {\n      const aggregatedGraphMetricsMap: any = {};\n      issue.entities.forEach((entity: SingleIssueEntity) => {\n         const id: string = entity.refData.entityRefId;\n         let data: any = aggregatedGraphMetricsMap[id];\n\n         if (!data) {\n            data = {\n               issue: undefined,\n               graphs: [],\n               metrics: undefined,\n            };\n            aggregatedGraphMetricsMap[id] = data;\n         }\n\n         if (data) {\n            if (!data.issue) {\n               data.issue = entity;\n            }\n            if (data.graphs.length === 0) {\n               const metricName: string = entity.refData.metricName;\n               const entityType: any = this.entityTypes[metricName];\n               data.graphs = entityType.graphs.map(graph => PerfChartUtil.getGraphDefinition(graph));\n            }\n            if (data.metrics && entity.metric.entityRefId === data.metrics.entityRefId) {\n               // aggregate the metrics series so we can have the entire chart\n               data.metrics.metricsSeries.push(...entity.metric.metricsSeries);\n            } else {\n               // Shallow copy metricsSeries to avoid multiple last series adding on each selection.\n               data.metrics = {\n                  entityRefId: entity.metric.entityRefId,\n                  timeStamps: entity.metric.timeStamps,\n                  metricsCollectInterval: entity.metric.metricsCollectInterval,\n                  metricsSeries: [...entity.metric.metricsSeries],\n               };\n            }\n         }\n      });\n      return aggregatedGraphMetricsMap;\n   }\n\n   /**\n    * If the issue is a parent - return its name\n    * If the issue is a child - return its parent\"s name\n    */\n   get parentIssueTitle(): string {\n      if (this.selectedIssue instanceof DiagnosticIssue) {\n         return this.selectedIssue.name;\n      } else {\n         return this.selectedIssue.parentIssue.name;\n      }\n   }\n\n   /**\n    * If the issue is a parent - return its descriptions\n    * If the issue is a child - return its parent\"s description\n    */\n   get parentIssueDescription(): string {\n      if (this.selectedIssue instanceof DiagnosticIssue) {\n         return this.selectedIssue.description;\n      } else {\n         return this.selectedIssue.parentIssue.description;\n      }\n   }\n\n   get isParentIssueSelected(): boolean {\n      return this.selectedIssue instanceof DiagnosticIssue;\n   }\n\n   get isRecommendationShown(): boolean {\n      return this.selectedIssue\n            && (this.selectedIssue instanceof SingleIssueEntity || this.selectedIssue instanceof AggregatedIssueEntity)\n            && this.selectedIssue.recommendation\n            && this.selectedIssue.recommendation.trim() !== \"\";\n   }\n\n   getSelectedIssueRecommendation(): string {\n      return VsanUiUtils.getString(\"vsan.perf.diagnosticts.recommendation\", this.selectedIssue &&\n            (this.selectedIssue as SingleIssueEntity | AggregatedIssueEntity).recommendation);\n   }\n\n   onShowAllMetricsLinkClicked(issue: SingleIssueEntity): void {\n      const moRef: ManagedObject = issue.refData.managedObjectRef;\n      const objectType: PerformanceObjectType = issue.refData.performanceObjectType;\n\n      let extensionId: string;\n      let viewType: PerfMonitorViewType;\n      switch (objectType) {\n            // Cluster\n         case PerformanceObjectType.clusterVmConsumption:\n            extensionId = PlatformExtension.CLUSTER_PERFORMANCE;\n            viewType = PerfMonitorViewType.CLUSTER_VM_CONSUMPTION;\n            break;\n         case PerformanceObjectType.clusterBackend:\n            extensionId = PlatformExtension.CLUSTER_PERFORMANCE;\n            viewType = PerfMonitorViewType.CLUSTER_BACKEND;\n            break;\n         case PerformanceObjectType.clusterDomOwner:\n            extensionId = PlatformExtension.CLUSTER_PERFORMANCE;\n            viewType = PerfMonitorViewType.CLUSTER_ISCSI;\n            break;\n         case PerformanceObjectType.clusterIoInsight:\n            extensionId = PlatformExtension.CLUSTER_PERFORMANCE;\n            viewType = PerfMonitorViewType.CLUSTER_IO_INSIGHT;\n            break;\n\n            // Host\n         case PerformanceObjectType.hostBackend:\n            extensionId = PlatformExtension.HOST_PERFORMANCE;\n            viewType = PerfMonitorViewType.HOST_BACKEND;\n            break;\n         case PerformanceObjectType.hostVmConsumption:\n            extensionId = PlatformExtension.HOST_PERFORMANCE;\n            viewType = PerfMonitorViewType.HOST_VM_CONSUMPTION;\n            break;\n         case PerformanceObjectType.hostPnic:\n            extensionId = PlatformExtension.HOST_PERFORMANCE;\n            viewType = PerfMonitorViewType.HOST_PHYSICAL_ADAPTER;\n            break;\n         case PerformanceObjectType.hostVnic:\n            extensionId = PlatformExtension.HOST_PERFORMANCE;\n            viewType = PerfMonitorViewType.HOST_VIRTUAL_ADAPTER;\n            break;\n         case PerformanceObjectType.hostNet:\n            extensionId = PlatformExtension.HOST_PERFORMANCE;\n            viewType = PerfMonitorViewType.HOST_VIRTUAL_ADAPTER;\n            break;\n         case PerformanceObjectType.diskGroup:\n         case PerformanceObjectType.cacheDisk:\n         case PerformanceObjectType.capacityDisk:\n            extensionId = PlatformExtension.HOST_PERFORMANCE;\n            viewType = PerfMonitorViewType.HOST_DISK;\n            break;\n         case PerformanceObjectType.hostIoInsight:\n            extensionId = PlatformExtension.HOST_PERFORMANCE;\n            viewType = PerfMonitorViewType.HOST_IO_INSIGHT;\n            break;\n\n            // Virtual Machine\n         case PerformanceObjectType.vm:\n            extensionId = PlatformExtension.VM_PERFORMANCE;\n            viewType = PerfMonitorViewType.VM_CONSUMPTION;\n            break;\n         case PerformanceObjectType.virtualDisk:\n         case PerformanceObjectType.vscsi:\n            extensionId = PlatformExtension.VM_PERFORMANCE;\n            viewType = PerfMonitorViewType.VM_VIRTUAL_DISK;\n            break;\n         default:\n            throw new Error(\"Unsupported PefrormanceObjectType: \" + objectType);\n      }\n\n      const props: PerformanceContext = {\n         timeRangeFrom: this.timeRange.from,\n         timeRangeTo: this.timeRange.to,\n         timeRangeName: this.timeRange.name,\n         viewType: PerfMonitorViewType[viewType],\n         pickerState: RangePickerState[this.timeRangePicker.currentPickerState],\n         pickerInterval: this.timeRangePicker.hourInterval,\n         pickerFromDate: this.timeRangePicker.fromDate\n               ? this.timeRangePicker.fromDate.toString()\n               : null,\n         entityUuid: issue.vsanUuid,\n      };\n\n      this.navigationService.navigateTo(extensionId, moRef, props);\n   }\n\n   isLinkSupported(type: PerformanceObjectType): boolean {\n      return [\n         PerformanceObjectType.clusterVmConsumption,\n         PerformanceObjectType.clusterBackend,\n         PerformanceObjectType.clusterDomOwner,\n         PerformanceObjectType.clusterIoInsight,\n         PerformanceObjectType.hostBackend,\n         PerformanceObjectType.hostVmConsumption,\n         PerformanceObjectType.hostPnic,\n         PerformanceObjectType.hostVnic,\n         PerformanceObjectType.hostNet,\n         PerformanceObjectType.hostIoInsight,\n         PerformanceObjectType.diskGroup,\n         PerformanceObjectType.cacheDisk,\n         PerformanceObjectType.capacityDisk,\n         PerformanceObjectType.vm,\n         PerformanceObjectType.virtualDisk,\n         PerformanceObjectType.vscsi,\n      ].includes(type);\n   }\n\n   isShowAllLinkVisible(chartData: ChartData): boolean {\n      const issue: SingleIssueEntity = chartData.issue as SingleIssueEntity;\n      return issue\n            && issue.refData\n            && !issue.refData.isEntityMissing\n            && this.isLinkSupported(issue.refData.performanceObjectType)\n            && chartData.isShowAllDataAvailable;\n   }\n}\n\n/**\n * Represents the goal for which the exceptions data is loaded\n */\nclass Goal {\n   constructor(public type: PerfDiagnosticType, public title: string) {\n   }\n}\n\nclass ChartData {\n   issue: SingleIssueEntity | AggregatedIssueEntity;\n   data: GraphMetric;\n   isShowAllDataAvailable: boolean;\n}\n","/* Copyright 2019-2020 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {NgModule} from \"@angular/core\";\nimport {CommonModule} from \"@angular/common\";\nimport {FormsModule} from \"@angular/forms\";\nimport {ClarityModule} from \"@clr/angular\";\nimport {ValidationModule} from \"@component/validation/validation.module\";\nimport {CommonPipeModule} from \"@pipe/common-pipe.module\";\nimport {TreeExpanderComponent} from \"@component/datagrid/tree-expander.component\";\nimport {TreeColumnComponent} from \"@component/datagrid/tree-column.component\";\nimport {EnumeratedFilterComponent} from \"./filter/enumerated-filter.component\";\nimport {EnumeratedFilterItemComponent} from \"./filter/enumerated-filter-item.component\";\nimport {EnumFilterComponent} from \"@component/datagrid/filter/enum-filter.component\";\n\n@NgModule({\n   imports: [\n      CommonModule,\n      FormsModule,\n      ClarityModule,\n      ValidationModule,\n      CommonPipeModule,\n   ],\n   declarations: [\n      TreeColumnComponent,\n      TreeExpanderComponent,\n      EnumeratedFilterComponent,\n      EnumeratedFilterItemComponent,\n      EnumeratedFilterComponent,\n      EnumFilterComponent,\n   ],\n   exports: [\n      TreeColumnComponent,\n      TreeExpanderComponent,\n      EnumeratedFilterComponent,\n      EnumeratedFilterItemComponent,\n      EnumFilterComponent,\n   ],\n})\nexport class TreeDatagridModule {\n}\n","/* Copyright 2021 VMware, Inc. All rights reserved. -- VMware Confidential */\n/**\n * IDs used in external KB link navigation\n */\nexport enum KnowledgeBaseId {\n   PRECHECK_PCP = \"83954\",\n   VIRTUAL_OBJECTS = \"2108319\",\n   UPGRADE = \"2148493\",\n   PERFORMANCE_DIAGNOSTICS = \"2148770\",\n   SUPPORT_INSIGHT = \"60206\",\n}\n","import {PerfDiagnosticType} from '@generated/perf-diagnostic-type';\n\nexport interface PerfDiagnosticQuerySpec {\n\n   startTime: any;\n   endTime: any;\n   queryType: PerfDiagnosticType;\n} //class PerfDiagnosticQuerySpec\n\nexport module PerfDiagnosticQuerySpec{\nexport class Factory {\n\n   static create = (startTime: any, endTime: any, queryType: PerfDiagnosticType): PerfDiagnosticQuerySpec => {\n      return { startTime: startTime, endTime: endTime, queryType: queryType, };\n   }\n\n\n} //class Factory\n\n} //module PerfDiagnosticQuerySpec\n","/* Copyright 2019 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {NgModule} from \"@angular/core\";\nimport {CommonModule} from \"@angular/common\";\nimport {ClarityModule} from \"@clr/angular\";\nimport {CommonPipeModule} from \"@pipe/common-pipe.module\";\nimport {PopupListComponent} from \"@component/popup-list/popup-list.component\";\nimport {PopupListItemDirective} from \"@component/popup-list/popup-list-item.directive\";\n\n@NgModule({\n   imports: [\n      CommonModule,\n      ClarityModule,\n      CommonPipeModule\n   ],\n   declarations: [\n      PopupListComponent,\n      PopupListItemDirective\n   ],\n   exports: [\n      PopupListComponent,\n      PopupListItemDirective\n   ]\n})\nexport class PopupListModule {\n}\n","<clr-datagrid id=\"issues\" [clrDgLoading]=\"loading\">\n   <!-- Header columns -->\n   <clr-dg-column>\n      <vsan-tree-column id=\"issue-column\"\n                        [dataField]=\"'name'\"\n                        [dataProvider]=\"datagrid\"\n                        title=\"{{'vsan.perf.diagnostics.issueNameColumn' | localized}}\">\n      </vsan-tree-column>\n   </clr-dg-column>\n   <clr-dg-column>\n      <vsan-tree-column id=\"more-column\"\n                        [dataProvider]=\"datagrid\"\n                        title=\"{{'vsan.perf.diagnostics.moreInfoColumn' | localized}}\">\n      </vsan-tree-column>\n   </clr-dg-column>\n\n   <!-- Datagrid Content -->\n   <clr-dg-row *clrDgItems=\"let row of datagrid.rows\"\n               (click)=\"onRowSelected(row, $event)\"\n               [class.datagrid-selected]=\"isRowSelected(row)\">\n      <clr-dg-cell>\n         <vsan-expand [row]=\"row\"></vsan-expand>\n         {{row.data.name}}\n      </clr-dg-cell>\n      <clr-dg-cell>\n         <a href=\"{{row.data.helpUrl}}\"\n            *ngIf=\"row.data.hasOwnProperty('helpUrl')\"\n            target=\"_blank\">\n            {{'vsan.perf.diagnosticts.askVmware' | localized}}\n         </a>\n      </clr-dg-cell>\n   </clr-dg-row>\n\n   <!-- Datagrid Footer -->\n   <clr-dg-footer>{{datagridFooterLabel}}</clr-dg-footer>\n</clr-datagrid>","/* Copyright 2017-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {SingleIssueEntity} from \"./single-issue-entity.data\";\nimport {AggregatedDiagnosticIssueEntity} from \"@generated/aggregated-diagnostic-issue-entity\";\nimport {DiagnosticIssueEntity} from \"@generated/diagnostic-issue-entity\";\nimport {SingleDiagnosticIssueEntity} from \"@generated/single-diagnostic-issue-entity\";\nimport {DiagnosticIssue} from \"./diagnostics-issue.data\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {EntityRefData} from \"@generated/entity-ref-data\";\nimport {EntityRefType} from \"@generated/entity-ref-type\";\n\n/**\n * Presentation object for AggregatedDiagnosticIssueEntity. Used in the issues grid.\n */\nexport class AggregatedIssueEntity {\n\n   name: string;\n   icon: any;\n   aggregatedRefIds: string[];\n   recommendation: string;\n   refData: EntityRefData;\n   aggregatedEntity: SingleIssueEntity;\n   entities: SingleIssueEntity[];\n   hasSingleEntityInside: boolean;\n   parentIssue: DiagnosticIssue;\n   feedback: boolean | undefined; // undefined - not set; true - thumbs up; false - thumbs down;\n\n   static create(entity: any, // AggregatedDiagnosticIssueEntity\n                        performanceTypes: { }, // A map containing entity types definitions\n                        entityRefIdToEntityRefDataMap: {}, // A map containing entityRed id to entityRef data\n                        issue: DiagnosticIssue): AggregatedIssueEntity { // The parent issue\n      const result: AggregatedIssueEntity = new AggregatedIssueEntity();\n\n      // Casting to two different types because the two interfaces\n      // don't extend each other.\n      const diagnosticIssue: DiagnosticIssueEntity = entity as DiagnosticIssueEntity;\n      const aggregatedIssue: AggregatedDiagnosticIssueEntity = entity as AggregatedDiagnosticIssueEntity;\n\n      result.aggregatedRefIds = aggregatedIssue.aggregatedRefIds;\n      result.recommendation = diagnosticIssue.recommendation;\n      result.hasSingleEntityInside = aggregatedIssue.hasSingleEntityInside;\n      result.parentIssue = issue;\n      result.aggregatedEntity = SingleIssueEntity.create(aggregatedIssue.aggregatedEntity,\n            entityRefIdToEntityRefDataMap, issue);\n      // entityRefId is required for sending diagnostics feedback.\n      result.refData = EntityRefData.Factory.create(\n            aggregatedIssue.aggregatedEntity.entityRefId, null, null, null, null, null, null, null);\n      result.entities = [];\n      aggregatedIssue.entities.forEach((childEntity: SingleDiagnosticIssueEntity) => {\n         const singleEntity: SingleIssueEntity = SingleIssueEntity.create(\n               childEntity, entityRefIdToEntityRefDataMap, issue);\n\n         if (singleEntity) {\n            result.entities.push(singleEntity);\n         }\n      });\n\n      if (result.entities.length === 0) {\n         return null;\n      }\n\n      if (result.hasSingleEntityInside) {\n         const firstEntity: SingleIssueEntity = result.entities[0];\n         result.name = firstEntity.name;\n         result.icon = firstEntity.icon;\n      } else {\n      result.updateName(aggregatedIssue, performanceTypes);\n      result.icon = \"\";\n      }\n\n      return result;\n   }\n\n   /**\n    * Updates the entities name according to the other entities that it aggregates.\n    */\n   private updateName(aggregatedEntity: AggregatedDiagnosticIssueEntity,\n         performanceEntityTypes: {}): void {\n\n      if (!this.aggregatedRefIds || this.aggregatedRefIds.length === 0) {\n         this.name = \"\";\n      }\n\n      if (this.aggregatedRefIds.length === 1 && aggregatedEntity.metricIdLabel) {\n         const aggrregatedEntityName: string = AggregatedIssueEntity.getAggregatedEntityRefIdName(\n               this.aggregatedRefIds[0]);\n\n         if (aggregatedEntity.usingSingleMetricForAllEntities) {\n            // now get the user friendly name for this metricId label\n            const issue: SingleIssueEntity = this.entities[0] as SingleIssueEntity;\n            const vsanPerfEntityType: any = performanceEntityTypes[issue.refData.metricName];\n            const metric = vsanPerfEntityType.graphs.reduce((prev: any, current: any, currentIndex: number) => {\n               // The first index is 1. Create the new\n               // array on the first step of the reducing\n               if (currentIndex === 1) {\n                  return [].concat(prev.metrics, current.metrics);\n               } else {\n                  return prev.concat(current.metrics);\n               }\n            }).find((metric) => {\n               return metric.label === aggregatedEntity.metricIdLabel;\n            });\n\n            if (metric) {\n               this.name = VsanUiUtils.getString(\"vsan.perf.diagnostics.aggregatedEntityForMetric\",\n                     metric.name,\n                     aggrregatedEntityName);\n               return;\n            }\n         }\n      }\n\n      this.name = VsanUiUtils.getString(\"vsan.perf.diagnostics.aggregated.multiEntityAggregation\",\n            AggregatedIssueEntity.getAggregatedEntityRefIdName(this.aggregatedRefIds[0]),\n            AggregatedIssueEntity.getAggregatedEntityRefIdName(this.aggregatedRefIds[1]));\n   }\n\n   private static getAggregatedEntityRefIdName(aggregatedRefId: string): string {\n      let name: string;\n      switch (aggregatedRefId) {\n         case EntityRefType.DISK_GROUP():\n            name = VsanUiUtils.getString(\"vsan.perf.diagnostics.aggregated.diskGroup\");\n            break;\n         case EntityRefType.CLUSTER():\n            name = VsanUiUtils.getString(\"vsan.perf.diagnostics.aggregated.cluster\");\n            break;\n         case EntityRefType.CAPACITY_DISK():\n            name = VsanUiUtils.getString(\"vsan.perf.diagnostics.aggregated.capacityDisk\");\n            break;\n         case EntityRefType.HOST_DOMCOMPMGR():\n            name = VsanUiUtils.getString(\"vsan.perf.diagnostics.aggregated.hostDomCompMgr\");\n            break;\n         case EntityRefType.HOST_DOMCLIENT():\n            name = VsanUiUtils.getString(\"vsan.perf.diagnostics.aggregated.hostDomClient\");\n            break;\n         case EntityRefType.CLUSTER_DOMCLIENT():\n            name = VsanUiUtils.getString(\"vsan.perf.diagnostics.aggregated.clusterDomClient\");\n            break;\n         case EntityRefType.CACHE_DISK():\n            name = VsanUiUtils.getString(\"vsan.perf.diagnostics.aggregated.cacheDisk\");\n            break;\n         default:\n            name = aggregatedRefId;\n            break;\n      }\n      return name;\n   }\n}","/* Copyright 2020 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {NgModule} from \"@angular/core\";\nimport {VsanBreadcrumbNavComponent} from \"./vsan-breadcrumb-nav.component\";\nimport {ClarityModule} from \"@clr/angular\";\nimport {CommonModule} from \"@angular/common\";\nimport {CommonDirectiveModule} from \"@directive/common-directive.module\";\nimport {CommonPipeModule} from \"@pipe/common-pipe.module\";\n\n@NgModule({\n   imports: [CommonModule, ClarityModule, CommonDirectiveModule, CommonPipeModule],\n   declarations: [VsanBreadcrumbNavComponent],\n   exports: [\n      VsanBreadcrumbNavComponent,\n   ],\n})\nexport class VsanBreadcrumbModule {}\n","<clr-alert id=\"parent-issue-feedback\"\n           [clrAlertClosable]=\"false\"\n           [clrAlertType]=\"'info'\">\n   <clr-alert-item>\n      <span class=\"alert-text\">\n         <span id=\"feedback-ask\">\n            {{'vsan.cluster.monitor.performance.diagnostics.feedback.ask' | localized}}\n         </span>\n         <button class=\"btn btn-icon btn-link\"\n                 (click)=\"submitFeedback(true)\"\n                 [attr.aria-label]=\"'vsan.cluster.monitor.performance.diagnostics.feedback.thumbsUp'|localized\">\n            <clr-icon id=\"thumbs-up\"\n                      shape=\"thumbs-up\"\n                      size=\"23\"\n                      class=\"feedback-item\"\n                      [ngClass]=\"{'is-solid' : selectedIssue.feedback}\">\n            </clr-icon>\n         </button>\n         <button class=\"btn btn-icon btn-link\"\n                 (click)=\"submitFeedback(false)\"\n                 [attr.aria-label]=\"'vsan.cluster.monitor.performance.diagnostics.feedback.thumbsDown'|localized\">\n            <clr-icon id=\"thumbs-down\"\n                      shape=\"thumbs-down\"\n                      size=\"23\"\n                      class=\"feedback-item\"\n                      [ngClass]=\"{'is-solid' : selectedIssue.feedback === false}\">\n            </clr-icon>\n         </button>\n         <span id=\"feedback-acknowledgement\"\n               *ngIf=\"(selectedIssue.feedback !== undefined) && !feedbackError\"\n               class=\"feedback-item\">\n            {{'vsan.cluster.monitor.performance.diagnostics.feedback.acknowledgement' | localized}}\n         </span>\n         <span id=\"feedback-error\"\n               *ngIf=\"feedbackError\"\n               class=\"feedback-item\">\n            {{feedbackError}}\n         </span>\n         <span id=\"busy-spinner\" class=\"spinner spinner-inline\" *ngIf=\"feedbackSubmitting\"></span>\n      </span>\n   </clr-alert-item>\n</clr-alert>","/* Copyright 2017-2018 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {EntityRefData} from \"@generated/entity-ref-data\";\nimport {DiagnosticIssueEntity} from \"@generated/diagnostic-issue-entity\";\nimport {SingleDiagnosticIssueEntity} from \"@generated/single-diagnostic-issue-entity\";\nimport {DiagnosticIssue} from \"./diagnostics-issue.data\";\nimport {PerformanceObjectType} from \"@generated/performance-object-type\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {PerfEntityStateData} from \"@generated/perf-entity-state-data\";\nimport {Icon} from \"@util/icon\";\n\n/**\n * Presentation object for SingleDiagnosticIssueEntity class. Used in the issues grid.\n */\nexport class SingleIssueEntity {\n\n   icon: string;\n   name: string;\n   recommendation: string;\n   refData: EntityRefData;\n   vsanUuid: string;\n   metric: PerfEntityStateData;\n   isEntityMissing: boolean;\n   parentIssue: DiagnosticIssue;\n   feedback: boolean | undefined; // undefined - not set; true - thumbs up; false - thumbs down;\n\n   static create(entity: any, // SingleDiagnosticIssueEntity\n         entityRefIdToEntityRefDataMap: any, // A map containing entityRed id to entityRef data\n         issue: DiagnosticIssue) { // The parent issue\n      // Casting to two different types because the two interfaces\n      // don't extend each other.\n      const diagnosticIssue: DiagnosticIssueEntity = entity as DiagnosticIssueEntity;\n      const singleIssue: SingleDiagnosticIssueEntity = entity as SingleDiagnosticIssueEntity;\n\n      const result = new SingleIssueEntity();\n\n      if (entityRefIdToEntityRefDataMap.hasOwnProperty(singleIssue.entityRefId)) {\n         result.refData = entityRefIdToEntityRefDataMap[singleIssue.entityRefId] as EntityRefData;\n         result.vsanUuid = result.refData.vsanUuid;\n         result.icon = SingleIssueEntity.getIcon(result.refData);\n         result.name = SingleIssueEntity.getEntityName(result.refData, result.vsanUuid);\n         result.isEntityMissing = result.refData.isEntityMissing;\n      }\n\n      result.metric = singleIssue.metric;\n      result.recommendation = diagnosticIssue.recommendation;\n      result.parentIssue = issue;\n\n      return result;\n   }\n\n   static getIcon(refData: EntityRefData): string {\n      let icon: string = \"\";\n      if (refData.performanceObjectType == null) {\n         return icon;\n      }\n\n      switch (refData.performanceObjectType) {\n         case PerformanceObjectType.cacheDisk:\n            icon = Icon.VSAN_SSD_DISK_IMAGE;\n            break;\n         case PerformanceObjectType.capacityDisk:\n            icon = Icon.VSAN_NON_SSD_DISK_IMAGE;\n            break;\n         case PerformanceObjectType.diskGroup:\n            icon = Icon.DISK_GROUP_IMAGE;\n            break;\n         case PerformanceObjectType.hostBackend:\n         case PerformanceObjectType.hostVmConsumption:\n            icon = Icon.HOST;\n            break;\n      }\n      return icon;\n   }\n\n   private static getEntityName(refData: EntityRefData,\n         vsanUuid: string): string {\n      let objectName: string;\n      if (refData.performanceObjectType == null) {\n         return refData.entityRefId;\n      }\n      switch (refData.performanceObjectType) {\n         case PerformanceObjectType.hostPnic:\n            if (refData.isEntityMissing) {\n               objectName = VsanUiUtils.getString(\"vsan.perf.diagnostics.entityType.missingHostPnic\", vsanUuid);\n            } else {\n               objectName = VsanUiUtils.getString(\"vsan.perf.diagnostics.entityType.hostPnic\",\n                     refData.managedObjectName,\n                     refData.objectName);\n            }\n            break;\n         case PerformanceObjectType.hostVnic:\n            if (refData.isEntityMissing) {\n               objectName = VsanUiUtils.getString(\"vsan.perf.diagnostics.entityType.missingHostVnic\", vsanUuid);\n            } else {\n               // The VNIC comes prefixed by its TCP layer\n               // https://opengrok.eng.vmware.com/source/xref/storage-main.perforce.1666/bora/vsan/pyvmodl/VsanPerformanceManager.py#1549\n               let vnicName: string = refData.objectName;\n               if (refData.objectName) {\n                  vnicName = refData.objectName.split(\"|\").pop();\n               }\n               objectName = VsanUiUtils.getString(\"vsan.perf.diagnostics.entityType.hostVnic\",\n                     refData.managedObjectName,\n                     vnicName);\n            }\n            break;\n         case PerformanceObjectType.hostNet:\n            if (refData.isEntityMissing) {\n               objectName = VsanUiUtils.getString(\"vsan.perf.diagnostics.entityType.missingHostNet\", vsanUuid);\n            } else {\n               objectName = VsanUiUtils.getString(\"vsan.perf.diagnostics.entityType.hostNet\",\n                     refData.managedObjectName);\n            }\n            break;\n         case PerformanceObjectType.virtualDisk:\n            if (refData.isEntityMissing) {\n               objectName = VsanUiUtils.getString(\"vsan.perf.diagnostics.entityType.missingVmDisk\", vsanUuid);\n            } else {\n               objectName = VsanUiUtils.getString(\"vsan.perf.diagnostics.entityType.vmDisk\",\n                     refData.managedObjectName,\n                     refData.objectName);\n            }\n            break;\n         case PerformanceObjectType.cacheDisk:\n            if (refData.isEntityMissing) {\n               objectName = VsanUiUtils.getString(\"vsan.perf.diagnostics.entityType.missingCacheDisk\", vsanUuid);\n            } else {\n               objectName = VsanUiUtils.getString(\"vsan.perf.diagnostics.entityType.cacheDisk\",\n                     refData.managedObjectName,\n                     refData.objectName);\n            }\n            break;\n         case PerformanceObjectType.capacityDisk:\n            if (refData.isEntityMissing) {\n               objectName = VsanUiUtils.getString(\"vsan.perf.diagnostics.entityType.missingCapacityDisk\", vsanUuid);\n            } else {\n               objectName = VsanUiUtils.getString(\n                     \"vsan.perf.diagnostics.entityType.capacityDisk\",\n                     refData.managedObjectName,\n                     refData.objectName);\n            }\n            break;\n         case PerformanceObjectType.diskGroup:\n            if (refData.isEntityMissing) {\n               objectName = VsanUiUtils.getString(\"vsan.perf.diagnostics.entityType.missingDiskGroup\", vsanUuid);\n            } else {\n               objectName = VsanUiUtils.getString(\n                     \"vsan.perf.diagnostics.entityType.diskGroup\",\n                     refData.managedObjectName,\n                     refData.vsanUuid);\n            }\n            break;\n         case PerformanceObjectType.clusterBackend:\n            objectName = VsanUiUtils.getString(\n                  \"vsan.perf.diagnostics.entityType.vsanBackend\");\n            break;\n         case PerformanceObjectType.clusterVmConsumption:\n            objectName = VsanUiUtils.getString(\n                  \"vsan.perf.diagnostics.entityType.vsanVmConsumption\");\n            break;\n         case PerformanceObjectType.hostBackend:\n            if (refData.isEntityMissing) {\n               objectName = VsanUiUtils.getString(\"vsan.perf.diagnostics.entityType.missingHostVsanBackend\", vsanUuid);\n            } else {\n               objectName = VsanUiUtils.getString(\n                     \"vsan.perf.diagnostics.entityType.hostVsanBackend\",\n                     refData.managedObjectName);\n            }\n            break;\n         case PerformanceObjectType.hostVmConsumption:\n            if (refData.isEntityMissing) {\n               objectName = VsanUiUtils.getString(\n                     \"vsan.perf.diagnostics.entityType.missingHostVmConsumption\", vsanUuid);\n            } else {\n               objectName = VsanUiUtils.getString(\n                     \"vsan.perf.diagnostics.entityType.hostVmConsumption\", refData.managedObjectName);\n            }\n            break;\n         case PerformanceObjectType.vm:\n            if (refData.isEntityMissing) {\n               objectName = VsanUiUtils.getString(\n                     \"vsan.perf.diagnostics.entityType.missingVmVsanVmConsumption\", vsanUuid);\n            } else {\n               objectName = VsanUiUtils.getString(\n                     \"vsan.perf.diagnostics.entityType.vmVsanVmConsumption\", refData.managedObjectName);\n            }\n            break;\n         case PerformanceObjectType.vscsi:\n            if (refData.isEntityMissing) {\n               objectName = VsanUiUtils.getString(\"vsan.perf.diagnostics.entityType.missingVscsi\", vsanUuid);\n            } else {\n               objectName = VsanUiUtils.getString(\"vsan.perf.diagnostics.entityType.vscsi\",\n                     refData.managedObjectName,\n                     refData.objectName);\n            }\n            break;\n         case PerformanceObjectType.cmmds:\n            objectName = refData.managedObjectName;\n            break;\n         case PerformanceObjectType.clomDiskStats:\n            objectName = refData.managedObjectName;\n            break;\n         case PerformanceObjectType.clomHostStats:\n            objectName = refData.managedObjectName;\n            break;\n         case PerformanceObjectType.clusterDomOwner:\n            objectName = refData.managedObjectName;\n            break;\n      }\n      if (!objectName) {\n         objectName = refData.entityRefId;\n      }\n      if (refData.isEntityMissing) {\n         objectName = VsanUiUtils.getString(\"vsan.perf.diagnostics.missingEntityFormat\",\n               objectName);\n      }\n      return objectName;\n   }\n}","/* Copyright 2017 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {DiagnosticException} from \"@generated/diagnostic-exception\";\nimport {DiagnosticIssueEntity} from \"@generated/diagnostic-issue-entity\";\nimport {AggregatedDiagnosticIssueEntity} from \"@generated/aggregated-diagnostic-issue-entity\";\nimport {SingleDiagnosticIssueEntity} from \"@generated/single-diagnostic-issue-entity\";\nimport {SingleIssueEntity} from \"./single-issue-entity.data\";\nimport {AggregatedIssueEntity} from \"./aggregated-entity.data\";\n\n/**\n * Presentation object for DiagnosticsException class. Used in the issues grid.\n */\nexport class DiagnosticIssue {\n\n   public name: string;\n   public description: string;\n   public helpUrl: string;\n   public issues: any[];\n   private diagnosticException: DiagnosticException;\n\n   public constructor(diagnosticException: DiagnosticException,\n                      exceptionDefinition: any) { //PerformanceDiagnosticException\n      this.diagnosticException = diagnosticException;\n      this.name = exceptionDefinition.message;\n      this.description = exceptionDefinition.description;\n      this.helpUrl = exceptionDefinition.exceptionUrl;\n      this.issues = [];\n   }\n\n   public addEntities(performanceEntityTypes: Object, entityRefIdToEntityRefDataMap: Object): void {\n      let issueEntities: any[] = [];\n\n      this.diagnosticException.exceptionEntities.forEach((entity: DiagnosticIssueEntity) => {\n         if ('aggregatedRefIds' in entity) {\n            // AgregatedDiagnosticIssueEntity\n            this.addAggregatedIssueEntity(entity, performanceEntityTypes, entityRefIdToEntityRefDataMap);\n         } else {\n            // SingleDiagnosticIssueEntity\n            this.addSingleIssueEntity(entity, entityRefIdToEntityRefDataMap);\n         }\n      });\n   }\n\n   private addAggregatedIssueEntity(entity: any,\n                                    performanceEntityTypes: Object,\n                                    entityRefIdToEntityRefDataMap: Object): void {\n      let aggregatedIssueEntity: AggregatedDiagnosticIssueEntity = entity as AggregatedDiagnosticIssueEntity;\n      let aggregatedEntity: AggregatedIssueEntity = AggregatedIssueEntity.create(aggregatedIssueEntity,\n            performanceEntityTypes,\n            entityRefIdToEntityRefDataMap,\n            this);\n      if (aggregatedEntity) {\n         this.issues.push(aggregatedEntity);\n      }\n   }\n\n   private addSingleIssueEntity(entity: any, entityRefIdToEntityRefDataMap: Object): void {\n      let singleIssueEntity: SingleDiagnosticIssueEntity = entity as SingleDiagnosticIssueEntity;\n\n      let singleEntity: SingleIssueEntity = SingleIssueEntity.create(singleIssueEntity, entityRefIdToEntityRefDataMap, this);\n      if (singleEntity) {\n         this.issues.push(singleEntity);\n      }\n   }\n}","\nexport interface FeedbackSpec {\n\n   transactionId: string;\n   exceptionId: string;\n   entityRefId: string;\n} //class FeedbackSpec\n\nexport module FeedbackSpec{\nexport class Factory {\n\n   static create = (transactionId: string, exceptionId: string, entityRefId: string): FeedbackSpec => {\n      return { transactionId: transactionId, exceptionId: exceptionId, entityRefId: entityRefId, };\n   }\n\n\n} //class Factory\n\n} //module FeedbackSpec\n","/* Copyright 2018 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, EventEmitter, Input, Output} from \"@angular/core\";\nimport {ManagedObject} from \"@service/managed-object\";\nimport {PerformanceDiagnosticsPropertyProvider} from \"@generated/performance-diagnostics-property-provider\";\nimport {Logger} from \"@util/logger\";\nimport {FeedbackSpec} from \"@generated/feedback-spec\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\n\n@Component({\n   templateUrl: \"performance-diagnostics-feedback.html\",\n   styleUrls: [\"performance-diagnostics-feedback.scss\"],\n   selector: \"vsan-performance-diagnostics-feedback\",\n})\n\nexport class PerformanceDiagnosticsFeedbackComponent {\n\n   feedbackSubmitting: boolean = false;\n   feedbackError: string = null;\n\n   @Input()\n   set selectedIssue(val: any) {\n      if (this._selectedIssue === val) {\n         return;\n      }\n      this.feedbackError = null;\n      this._selectedIssue = val;\n   }\n\n   get selectedIssue(){\n      return this._selectedIssue;\n   }\n\n   private _selectedIssue: any;\n\n   @Input()\n   clusterRef: ManagedObject;\n\n   @Input()\n   transactionId: string;\n\n   @Output()\n   feedbackSubmit: EventEmitter<boolean> = new EventEmitter();\n\n   constructor(private perfDiagnosticsProvider: PerformanceDiagnosticsPropertyProvider) {\n   }\n\n   async submitFeedback(feedbackValue: boolean) {\n      if (this.selectedIssue.feedback !== feedbackValue) {\n         this.feedbackSubmitting = true;\n\n         try {\n            const exceptionId: string = this.selectedIssue.parentIssue.diagnosticException.exceptionId;\n            const entityRefId: string = this.selectedIssue.refData.entityRefId;\n            const feedbackSpec: FeedbackSpec = FeedbackSpec.Factory.create(this.transactionId, exceptionId, entityRefId);\n            await this.perfDiagnosticsProvider.submitFeedbackForDiagnosisResult(\n                  this.clusterRef, feedbackSpec, feedbackValue);\n            this.feedbackError = null;\n            this.feedbackSubmit.emit(feedbackValue);\n            this.feedbackSubmitting = false;\n         } catch(e) {\n            this.handleError(VsanUiUtils.getString(\"vsan.cluster.monitor.performance.diagnostics.feedback.error\"));\n         }\n      }\n   }\n\n   handleError = (error: any) => {\n      Logger.error(error);\n      this.feedbackError = error;\n      this.feedbackSubmitting = false;\n   };\n}\n","/* Copyright 2019-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {NgModule} from \"@angular/core\";\nimport {CommonModule} from \"@angular/common\";\nimport {FormsModule} from \"@angular/forms\";\nimport {ClarityModule} from \"@clr/angular\";\nimport {ValidationModule} from \"@component/validation/validation.module\";\nimport {CommonPipeModule} from \"@pipe/common-pipe.module\";\nimport {CommonDirectiveModule} from \"@directive/common-directive.module\";\nimport {HealthStatusCell} from \"@component/cell/health-status-cell.component\";\nimport {LabelCell} from \"@component/cell/label-cell.component\";\nimport {StoragePolicyCell} from \"@component/cell/storage-policy-cell.component\";\nimport {MorCell} from \"@component/cell/mor-cell.component\";\nimport {IconItemComponent} from \"@component/cell/icon-item.component\";\nimport {HealthStateItemComponent} from \"@component/cell/health-state-item.component\";\nimport {ListCell} from \"@component/cell/list-cell.component\";\nimport {PspHealthStateItemComponent} from \"@component/cell/psp-health-state-item.component\";\nimport {HealthTestValueComponent} from \"@component/cell/health-test-value.component\";\nimport {HealthLinkCellComponent} from \"@component/cell/health-link-cell.component\";\nimport {HealthMorCellComponent} from \"@component/cell/health-mor-cell.component\";\n\n@NgModule({\n   imports: [\n      CommonModule,\n      FormsModule,\n      ClarityModule,\n      ValidationModule,\n      CommonPipeModule,\n      CommonDirectiveModule,\n   ],\n   // TODO: (vasilevd) Move health specific components to a separate common health module\n   declarations: [\n      HealthStatusCell,\n      HealthTestValueComponent,\n      LabelCell,\n      StoragePolicyCell,\n      MorCell,\n      HealthMorCellComponent,\n      ListCell,\n      IconItemComponent,\n      HealthStateItemComponent,\n      PspHealthStateItemComponent,\n      HealthLinkCellComponent,\n   ],\n   exports: [\n      HealthStatusCell,\n      HealthTestValueComponent,\n      LabelCell,\n      StoragePolicyCell,\n      MorCell,\n      HealthMorCellComponent,\n      ListCell,\n      IconItemComponent,\n      HealthStateItemComponent,\n      PspHealthStateItemComponent,\n      HealthLinkCellComponent,\n   ],\n})\nexport class CommonCellsModule {\n}\n","/* Copyright 2019-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {NgModule} from \"@angular/core\";\nimport {CommonModule} from \"@angular/common\";\nimport {FormsModule} from \"@angular/forms\";\nimport {ClarityModule} from \"@clr/angular\";\nimport {CommonPipeModule} from \"@pipe/common-pipe.module\";\nimport {InventoryBrowserComponent} from \"@component/inventory/inventory-browser.component\";\nimport {InventoryNodeComponent} from \"@component/inventory/inventory-node.component\";\nimport {WitnessCandidateInventoryService} from \"@generated/witness-candidate-inventory-service\";\nimport {DatacenterInventoryService} from \"@generated/datacenter-inventory-service\";\nimport {NetworkInventoryService} from \"@generated/network-inventory-service\";\nimport {ComputeInventoryService} from \"@generated/compute-inventory-service\";\nimport {IoInsightInventoryService} from \"@generated/io-insight-inventory-service\";\nimport {SearchModule} from \"@component/search/search.module\";\nimport {TreeNodeComponent} from \"@component/inventory/tree-view/tree-node.component\";\nimport {TreeViewComponent} from \"@component/inventory/tree-view/tree-view.component\";\nimport {DropdownObjectSelectorComponent} from \"@component/inventory/dropdown-object-selector/dropdown-object-selector.component\";\nimport {CommonDirectiveModule} from \"@directive/common-directive.module\";\nimport {InventoryNodesComponent} from \"@component/inventory/inventory-nodes.component\";\nimport {TreeNodesComponent} from \"@component/inventory/tree-view/tree-nodes.component\";\n\n@NgModule({\n   imports: [\n      CommonModule,\n      FormsModule,\n      ClarityModule,\n      CommonPipeModule,\n      SearchModule,\n      CommonDirectiveModule,\n   ],\n   declarations: [\n      InventoryBrowserComponent,\n      InventoryNodesComponent,\n      InventoryNodeComponent,\n      TreeNodeComponent,\n      TreeNodesComponent,\n      TreeViewComponent,\n      DropdownObjectSelectorComponent,\n   ],\n   exports: [\n      InventoryBrowserComponent,\n      DropdownObjectSelectorComponent,\n      TreeViewComponent,\n   ],\n   providers: [\n      WitnessCandidateInventoryService,\n      DatacenterInventoryService,\n      NetworkInventoryService,\n      ComputeInventoryService,\n      IoInsightInventoryService,\n   ],\n})\nexport class InventoryBrowserModule {\n}","export enum PerfDiagnosticType {\n   eval = \"eval\",\n   tput = \"tput\",\n   iops = \"iops\",\n   lat = \"lat\",\n}\n","/* Copyright 2017 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, Input, Output, EventEmitter} from \"@angular/core\";\nimport {TreeDatagridView} from \"../../common/component/datagrid/tree-datagrid-view\";\nimport {ResyncComponent} from \"@generated/resync-component\";\nimport {DiagnosticIssue} from \"../model/diagnostics-issue.data\";\nimport ResyncReasonCode = ResyncComponent.ResyncReasonCode;\nimport {TreeDatagridRow} from \"../../common/component/datagrid/tree-datagrid\";\n\n@Component({\n   templateUrl: 'issues-list.html',\n   selector: 'vsan-issues-list',\n   styleUrls: ['issues-list.scss'],\n})\nexport class IssuesListComponent extends TreeDatagridView {\n\n   @Input()\n   public set data(data: DiagnosticIssue[]) {\n      this.initData(data);\n   }\n\n   @Input()\n   public loading: boolean;\n\n   @Output()\n   public selectIssue:EventEmitter<DiagnosticIssue> = new EventEmitter();\n\n   constructor() {\n      super(\"issues\");\n   };\n\n   public onRowSelected(target: TreeDatagridRow, event: any):void {\n      super.selectTarget(target, event);\n      this.selectIssue.emit(target.data)\n   }\n}","/* Copyright 2019 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {NgModule} from \"@angular/core\";\nimport {CommonDirectiveModule} from \"@directive/common-directive.module\";\nimport {CommonPipeModule} from \"@pipe/common-pipe.module\";\nimport {ValidationModule} from \"@component/validation/validation.module\";\nimport {ActionButtonModule} from \"@component/action-button/action-button.module\";\nimport {PromptModule} from \"@component/dialog/prompt/prompt.module\";\nimport {CommonCellsModule} from \"@component/cell/common-cells.module\";\nimport {InventoryBrowserModule} from \"@component/inventory/inventory-browser.module\";\nimport {SearchModule} from \"@component/search/search.module\";\nimport {TreeDatagridModule} from \"@component/datagrid/tree-datagrid.module\";\nimport {DatetimePickerModule} from \"@component/datetime-picker/datetime-picker.module\";\nimport {PopupListModule} from \"@component/popup-list/popup-list.module\";\nimport {VsanBreadcrumbModule} from \"@component/navigation/vsan-breadcrumb.module\";\n\n@NgModule({\n   imports: [\n         CommonDirectiveModule,\n         CommonPipeModule,\n         ValidationModule,\n         ActionButtonModule,\n         PromptModule,\n         CommonCellsModule,\n         InventoryBrowserModule,\n         SearchModule,\n         TreeDatagridModule,\n         DatetimePickerModule,\n         PopupListModule,\n         VsanBreadcrumbModule,\n   ],\n   exports: [\n      CommonDirectiveModule,\n      CommonPipeModule,\n      ValidationModule,\n      ActionButtonModule,\n      PromptModule,\n      CommonCellsModule,\n      InventoryBrowserModule,\n      SearchModule,\n      TreeDatagridModule,\n      DatetimePickerModule,\n      PopupListModule,\n      VsanBreadcrumbModule,\n   ],\n})\nexport class VsanCommonModule { }","/* Copyright 2019 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {NgModule} from \"@angular/core\";\nimport {CommonModule} from \"@angular/common\";\nimport {FormsModule} from \"@angular/forms\";\nimport {ClarityModule} from \"@clr/angular\";\nimport {CommonPipeModule} from \"@pipe/common-pipe.module\";\nimport {SearchComponent} from \"@component/search/search.component\";\n\n@NgModule({\n   imports: [\n      CommonModule,\n      FormsModule,\n      ClarityModule,\n      CommonPipeModule\n   ],\n   declarations: [\n      SearchComponent\n   ],\n   exports: [\n      SearchComponent\n   ],\n})\nexport class SearchModule {\n}\n","/* Copyright 2019-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {NgModule} from \"@angular/core\";\nimport {CommonModule} from \"@angular/common\";\nimport {ClarityModule} from \"@clr/angular\";\nimport {ActionButtonSeparatorComponent} from \"@component/action-button/action-button-separator.component\";\nimport {ButtonTitleDirective} from \"@component/action-button/button-title.directive\";\nimport {ButtonGroupDirective} from \"@component/action-button/button-group.directive\";\nimport {ButtonGroupWrapDirective} from \"@component/action-button/button-group-wrap.directive\";\n\n@NgModule({\n   imports: [\n      CommonModule,\n      ClarityModule,\n   ],\n   declarations: [\n      ActionButtonSeparatorComponent,\n      ButtonGroupDirective,\n      ButtonGroupWrapDirective,\n      ButtonTitleDirective,\n   ],\n   exports: [\n      ActionButtonSeparatorComponent,\n      ButtonGroupDirective,\n      ButtonGroupWrapDirective,\n      ButtonTitleDirective,\n   ]\n})\nexport class ActionButtonModule {\n}\n"]}