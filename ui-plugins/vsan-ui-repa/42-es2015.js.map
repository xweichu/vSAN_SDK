{"version":3,"sources":["./src/app/vsan/common/component/upgrade/upgrade.data.ts","./src/app/vsan/common/util/disk-mgmt-host.util.ts","./src/app/vsan/common/service/navigation/model/knowledge-base-id.ts","./src/app/vsan/common/util/disk-mgmt-disk-group.util.ts","./src/app/vsan/common/component/upgrade/upgrade.service.ts","./src/app/vsan/common/component/diskmgmt/model/storage-identifier.ts"],"names":[],"mappings":"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","file":"42-es2015.js","sourcesContent":["/* Copyright 2016-2022 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {DiskData} from \"@generated/disk-data\";\nimport {VsanUpgradeStatusData} from \"@generated/vsan-upgrade-status-data\";\nimport {DiskMgmtDiskUtil} from \"@util/disk-mgmt-disk.util\";\nimport {VsanDateTimeUtils} from \"@util/vsan-dateteime-util\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\n\nexport class UpgradeData {\n\n   upgradeDiskData: UpgradeDisksData;\n   hasPrecheckRunInformation: boolean;\n   isDataMovementRequired: boolean;\n   // Is vSAN cluster is upgraded.\n   isUpgraded: boolean;\n   hasPrecheckIssues: boolean;\n   isUpgradeInProgress: boolean;\n   isAsyncPrecheckSupported: boolean;\n   isUpToDate: boolean;\n   latestVersionAsString: string;\n   status: VsanUpgradeStatus;\n   precheckStatus: string;\n\n   constructor(public diskData: DiskData[],\n         public upgradeStatus: VsanUpgradeStatusData,\n         public hasOldVsanObject: boolean,\n         public latestVersion: number) {\n      // Populate the upgrade data, based on the input disks\n      const versions: Map<string, number> = this.getVersions();\n      this.upgradeDiskData = UpgradeDisksData.create(versions, latestVersion);\n      this.hasPrecheckRunInformation = !!this.upgradeStatus?.isPrecheck;\n      this.isDataMovementRequired = this.upgradeDiskData && this.upgradeStatus?.isDataMovementRequired;\n      this.isUpgraded = !this.upgradeDiskData.hasDisks || (this.upgradeDiskData.minVersion >= this.latestVersion);\n      this.hasPrecheckIssues = this.upgradeStatus && !this.upgradeStatus.inProgress && this.upgradeStatus.isPrecheck\n            && !!this.upgradeStatus.issues?.length;\n      this.status = this.getStatus();\n      this.isUpgradeInProgress =\n            this.upgradeStatus && !this.upgradeStatus.isPrecheck && this.status === VsanUpgradeStatus.IN_PROGRESS;\n      this.isAsyncPrecheckSupported = !!this.upgradeStatus?.isAsyncPrecheckSupported;\n      this.isUpToDate = this.getIsUpToDate();\n      this.latestVersionAsString = this.latestVersion?.toFixed(1);\n      this.precheckStatus = this.getPrecheckStatus();\n   }\n\n   /**\n    * Gets the disks versions, it is a simple map, key is vsan formatted version string,\n    * value is the total count of disks which has this version.\n    */\n   private getVersions(): Map<string, number> {\n      const versions: Map<string, number> = new Map<string, number>();\n      // aggregate all host disk versions here.\n      this.diskData.filter(disk => disk.disk.vsanDiskInfo).forEach(disk => {\n         if (DiskMgmtDiskUtil.isHealthy(disk)) {\n            const formatVersion: string = DiskMgmtDiskUtil.getFormatVersion(disk.diskStatus);\n            const count: number = versions.get(formatVersion);\n            if (count) {\n               versions.set(formatVersion, count + 1);\n            } else {\n               versions.set(formatVersion, 1);\n            }\n         }\n      });\n      return versions;\n   }\n\n   getNewInstance(upgradeStatus: VsanUpgradeStatusData): UpgradeData {\n      return new UpgradeData(this.diskData,\n            upgradeStatus, this.hasOldVsanObject, this.latestVersion);\n   }\n\n   private getIsUpToDate(): boolean {\n      if (!this.upgradeDiskData.hasDisks) {\n         // No disks, nothing to check, so assume up to date.\n         return true;\n      }\n      if (this.upgradeDiskData.minVersion >= this.latestVersion &&\n            this.upgradeDiskData.maxVersion >= this.latestVersion &&\n            !this.hasOldVsanObject) {\n         return true;\n      }\n      return false;\n   }\n\n   /**\n    * Gets formatted string for overall upgrade status.\n    */\n   getOverallUpgradeStatus(includeCompatibilityWarning: boolean): string {\n      let statusText: string;\n      if (!this.upgradeDiskData.hasDisks) {\n         // there are no claimed disks\n         return VsanUiUtils.getString(\"vsan.upgrade.manage.no.data\");\n      } else if (this.upgradeDiskData.hasMixedDiskVersions) {\n         // there are disks from different versions, show something like:\n         // 4 of 12 disks on older version\n         statusText = VsanUiUtils.getString(\"vsan.manage.upgrade.mixed.upgradeSuggested\",\n               this.upgradeDiskData.olderNumOfDisks, this.upgradeDiskData.totalNumOfDisks);\n         return this.getUpgradeWithIssuesStatus(statusText, includeCompatibilityWarning);\n      } else if (this.upgradeDiskData.minVersion === this.latestVersion &&\n            this.upgradeDiskData.maxVersion === this.latestVersion) {\n         if (this.hasOldVsanObject) {\n            // the disk format version is latest but there are objects with older version\n            // display something like: \"All 12 disk on 3.0 (latest) but with old VSAN objects\n            statusText = VsanUiUtils.getString(\"vsan.manage.upgrade.latestVersion.oldVsanObjects\",\n                  this.upgradeDiskData.totalNumOfDisks, this.latestVersionAsString);\n            return this.getUpgradeWithIssuesStatus(statusText, includeCompatibilityWarning);\n         } else {\n            // everything is latest, show something like: All 12 disks on 3.0 (latest)\n            return VsanUiUtils.getString(\"vsan.manage.upgrade.latestVersion\",\n                  this.upgradeDiskData.totalNumOfDisks, this.latestVersionAsString);\n         }\n      } else if (this.upgradeDiskData.maxVersion > this.latestVersion) {\n         if (this.hasOldVsanObject) {\n            // the disk format version is latest or higher but there are objects with older version\n            // display something like: \"All 12 disk on 3.0 (latest) or higher but with old VSAN objects\n            statusText = VsanUiUtils.getString(\"vsan.manage.upgrade.latestOrHigherVersion.oldVsanObjects\",\n                  this.upgradeDiskData.totalNumOfDisks, this.latestVersionAsString);\n            return this.getUpgradeWithIssuesStatus(statusText, includeCompatibilityWarning);\n\n         } else {\n            // everything is latest or higher, show something like: All 12 disks on 3.0 (latest) or higher\n            return VsanUiUtils.getString(\"vsan.manage.upgrade.latestOrHigherVersion\",\n                  this.upgradeDiskData.totalNumOfDisks, this.latestVersionAsString);\n         }\n      } else {\n         // all disks are on older versions, show something like:\n         // All 12 disks on 2.0\n         const minVersionAsString: string = (this.upgradeDiskData.minVersion as number).toFixed(1);\n         statusText = VsanUiUtils.getString(\"vsan.manage.upgrade.singleVersion.upgradeSuggested\",\n               this.upgradeDiskData.totalNumOfDisks, minVersionAsString);\n         return this.getUpgradeWithIssuesStatus(statusText, includeCompatibilityWarning);\n      }\n   }\n\n   private getUpgradeWithIssuesStatus(statusText: string, includeCompatibilityWarning: boolean): string {\n      return includeCompatibilityWarning\n            ? VsanUiUtils.getString(\"vsan.manage.upgrade.compatibility.warning\", statusText)\n            : statusText;\n   }\n\n   private getStatus(): VsanUpgradeStatus {\n      if (!this.upgradeStatus) {\n         // it probably means we don't have any information and we can't display anything\n         // about prechecks or actual upgrade\n         return VsanUpgradeStatus.UNKNOWN;\n      }\n\n      // NOTE: at least one of below conditions should be true, maybe here backend\n      // miss one status which is for \"not begin\".\n      if (this.upgradeStatus) {\n         if (this.upgradeStatus.completed) {\n            return VsanUpgradeStatus.COMPLETED;\n         } else if (this.upgradeStatus.aborted) {\n            return VsanUpgradeStatus.ABORTED;\n         } else if (this.upgradeStatus.inProgress) {\n            return VsanUpgradeStatus.IN_PROGRESS;\n         }\n      }\n      return VsanUpgradeStatus.UNKNOWN;\n   }\n\n   private getPrecheckStatus(): string {\n      if (!this.hasPrecheckRunInformation) {\n         // show something like: \"Run pre-check before upgrading.\".\n         return VsanUiUtils.getString(\"vsan.manage.upgrade.precheckSuggested\");\n      } else if (this.status === VsanUpgradeStatus.IN_PROGRESS) {\n         return VsanUiUtils.getString(\"vsan.manage.upgrade.precheckInProgress\");\n      } else {\n         if (this.status === VsanUpgradeStatus.ABORTED) {\n            // show something like: \"Pre-check was aborted.\"\n            return this.getStatusLabelWithTime(\"vsan.manage.upgrade.precheckAborted\");\n         } else if (this.status === VsanUpgradeStatus.COMPLETED) {\n            // prechecks passed successfully\n            if (!this.upgradeStatus.issues || this.upgradeStatus.issues.length === 0) {\n               // No issues, display something like - \"Ready to upgrade - precheck completed\n               // successfully.\"\n               return this.getStatusLabelWithTime(\"vsan.manage.upgrade.precheckCompletedOk\");\n            } else {\n               // Have issues, display something like - \"Pre-check completed with issues.\"\n               return this.getStatusLabelWithTime(\"vsan.manage.upgrade.precheckCompletedWithErrors\");\n            }\n         }\n      }\n   }\n\n   private getStatusLabelWithTime(operationLabelKey: string): string {\n      const operationLabel: string = VsanUiUtils.getString(operationLabelKey);\n      if (!this.upgradeStatus.lastOperationDate) {\n         // There is no timestamp of the operation, append a dot.\n         return operationLabel + \".\";\n      }\n      const lastOperationTime: string = VsanDateTimeUtils.formatDate(this.upgradeStatus.lastOperationDate);\n      return VsanUiUtils.getString(\"vsan.manage.upgrade.precheck.formatWithTime\",\n            operationLabel, lastOperationTime);\n   }\n}\n\nexport enum VsanUpgradeStatus {\n   UNKNOWN = -1,\n   IN_PROGRESS = 0,\n   ABORTED = 1,\n   COMPLETED = 2,\n}\n\nclass UpgradeDisksData {\n   hasDisks: boolean;\n   hasMixedDiskVersions: boolean;\n   minVersionAsString: string;\n   minVersion: number = Number.MAX_VALUE;\n   minVersionKey: string;\n   totalVersionsInCluster: number = 0;\n   maxVersion: number = Number.MIN_VALUE;\n   maxVersionKey: string;\n   totalNumOfDisks: number = 0;\n   olderNumOfDisks: number = 0;\n\n   static create(versions: Map<string, number>, latestVersion: number): UpgradeDisksData {\n      const result: UpgradeDisksData = new UpgradeDisksData();\n      versions.forEach((value, key) => {\n         const versionNum: number = parseInt(key, 10);\n         if (result.minVersion > versionNum) {\n            result.minVersion = versionNum;\n            result.minVersionKey = key;\n         }\n         if (result.maxVersion < versionNum) {\n            result.maxVersion = versionNum;\n            result.maxVersionKey = key;\n         }\n         result.totalNumOfDisks += value;\n         result.olderNumOfDisks += (versionNum < latestVersion)\n               ? value\n               : 0;\n         result.totalVersionsInCluster++;\n      });\n      result.hasDisks = result.totalVersionsInCluster > 0;\n      result.hasMixedDiskVersions = result.totalVersionsInCluster > 1 && result.olderNumOfDisks > 0;\n      result.minVersionAsString = (result.minVersion as number).toFixed(1);\n      return result;\n   }\n}\n","/* Copyright 2020-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {HostData} from \"@generated/host-data\";\nimport {ConnectionState} from \"@generated/connection-state\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {VsanCapabilityData} from \"@generated/vsan-capability-data\";\nimport {DiskMgmtDiskGroupUtil} from \"@util/disk-mgmt-disk-group.util\";\nimport {DiskData} from \"@generated/disk-data\";\nimport {ClaimableState} from \"@util/disk-mgmt.util\";\nimport {AvailabilityState} from \"@generated/availability-state\";\nimport {PmemDiskData} from \"@generated/pmem-disk-data\";\n\nexport class DiskMgmtHostUtil {\n   static readonly HEALTHY_MSG_KEY: string = \"vsan.host.healthy\";\n   static readonly UNHEALTHY_MSG_KEY: string = \"vsan.host.unhealthy\";\n   static readonly UNKNOWN_MSG_KEY: string = \"vsan.host.unknown\";\n\n   static getState(host: HostData): string {\n      if (host.state === ConnectionState.notResponding) {\n         return VsanUiUtils.getString(\"vsan.disk.state.notResponding\");\n      }\n      if (host.state === ConnectionState.disconnected) {\n         return VsanUiUtils.getString(\"vsan.disk.state.disconnected\");\n      }\n      if (host.isInMaintenanceMode) {\n         return VsanUiUtils.getString(\"vsan.disk.state.inMaintenanceMode\");\n      }\n      return VsanUiUtils.getString(\"vsan.disk.state.connected\");\n   }\n\n   static getHealthKey(host: HostData): string {\n      for (const group of host.diskGroups) {\n         if (!DiskMgmtDiskGroupUtil.isVsanDiskGroup(group)) {\n            continue;\n         }\n         const groupHealthKey: string = DiskMgmtDiskGroupUtil.getHealthKey(group);\n         if (groupHealthKey !== DiskMgmtDiskGroupUtil.HEALTHY_MSG_KEY) {\n            return groupHealthKey;\n         }\n      }\n\n      switch (host.healthStatus) {\n         case HostData.HealthStatus.HEALTHY:\n            return DiskMgmtHostUtil.HEALTHY_MSG_KEY;\n         case HostData.HealthStatus.UNHEALTHY:\n            return DiskMgmtHostUtil.UNHEALTHY_MSG_KEY;\n         default:\n            return DiskMgmtHostUtil.UNKNOWN_MSG_KEY;\n      }\n   }\n\n   /**\n    * Returns unique group keys of a host, excluding unused group(represented as undefined)\n    */\n   static getGroupTypeKeys = (host: HostData): string[] => {\n      return host.diskGroups\n            .map(group => DiskMgmtDiskGroupUtil.getKey(group))\n            .filter((v, i, a) => v && a.indexOf(v) === i); // removes empty and duplicate keys.\n   };\n\n   static getDataMigrationPrecheckLabel(clusterCapabilities: VsanCapabilityData): string {\n      return clusterCapabilities.isHostResourcePrecheckSupported\n            ? VsanUiUtils.getString(\"vsan.actions.goToPrecheckDataMigration.label\")\n            : VsanUiUtils.getString(\"vsan.actions.precheckDiskGroupEvacuation.label\");\n   }\n\n   static getDisks(host: HostData, claimableState: ClaimableState): DiskData[] {\n      switch (claimableState) {\n         case ClaimableState.IN_USE:\n            return host.disks[AvailabilityState.IN_USE_BY_VSAN]\n                  .concat(host.disks[AvailabilityState.ONLY_MANAGED_BY_VSAN]);\n         case ClaimableState.USABLE:\n            return host.disks[AvailabilityState.ELIGIBLE];\n         case ClaimableState.NOT_USABLE:\n            return host.disks[AvailabilityState.INELIGIBLE];\n      }\n   }\n\n   static getPmemStorage(host: HostData, claimableState: ClaimableState): PmemDiskData[] {\n      switch (claimableState) {\n         case ClaimableState.IN_USE:\n            return host.pmemStorage[AvailabilityState.ONLY_MANAGED_BY_VSAN];\n         case ClaimableState.USABLE:\n            return host.pmemStorage[AvailabilityState.ELIGIBLE];\n         case ClaimableState.NOT_USABLE:\n            return host.pmemStorage[AvailabilityState.INELIGIBLE];\n      }\n   }\n\n   static getClaimDistribution(host: HostData): Map<ClaimableState, number> {\n      const claimDistribution: Map<ClaimableState, number> = new Map<ClaimableState, number>();\n\n      [ClaimableState.IN_USE, ClaimableState.USABLE, ClaimableState.NOT_USABLE].forEach(claimableState =>\n            claimDistribution.set(claimableState, DiskMgmtHostUtil.getDistributionCount(host, claimableState)));\n\n      return claimDistribution;\n   }\n\n   static getClaimedDisksLabel = (host: HostData): string => {\n      const claimDistribution: Map<ClaimableState, number> = DiskMgmtHostUtil.getClaimDistribution(host);\n      return VsanUiUtils.getString(\"vsan.manage.diskManagement.hostList.disksInUse.label\",\n            claimDistribution.get(ClaimableState.IN_USE),\n            claimDistribution.get(ClaimableState.IN_USE) + claimDistribution.get(ClaimableState.USABLE));\n   };\n\n   static orderHostsByHealth(hosts: HostData[]): void {\n      hosts.sort((h1: HostData, h2: HostData) => {\n         return DiskMgmtHostUtil.getHealthKeyOrderPriority(DiskMgmtHostUtil.getHealthKey(h1)) -\n               DiskMgmtHostUtil.getHealthKeyOrderPriority(DiskMgmtHostUtil.getHealthKey(h2));\n      });\n   }\n\n   private static getDistributionCount(host: HostData, claimableState: ClaimableState): number {\n      return DiskMgmtHostUtil.getDisks(host, claimableState).length +\n            DiskMgmtHostUtil.getPmemStorage(host, claimableState).length;\n   }\n\n   private static getHealthKeyOrderPriority(healthKey: string): number {\n      switch (healthKey) {\n         case DiskMgmtHostUtil.UNHEALTHY_MSG_KEY: return 1;\n         case DiskMgmtDiskGroupUtil.LOCKED_MSG_KEY: return 2;\n         case DiskMgmtHostUtil.UNKNOWN_MSG_KEY: return 3;\n         case DiskMgmtDiskGroupUtil.UNMOUNTED_MSG_KEY: return 4;\n         case DiskMgmtHostUtil.HEALTHY_MSG_KEY: return 5;\n         default: return Number.MAX_SAFE_INTEGER;\n      }\n   }\n\n   static getEligibleDiskCount(hostList: HostData[]): number {\n      if (VsanUiUtils.isEmpty(hostList)) {\n         return 0;\n      }\n      return hostList\n            .filter(host => host.state === ConnectionState.connected)\n            .filter(host => !host.isWitnessHost)\n            .reduce((sum, host) => sum +=\n                  DiskMgmtHostUtil.getClaimDistribution(host).get(ClaimableState.USABLE), 0);\n   }\n}","/* Copyright 2021 VMware, Inc. All rights reserved. -- VMware Confidential */\n/**\n * IDs used in external KB link navigation\n */\nexport enum KnowledgeBaseId {\n   PRECHECK_PCP = \"83954\",\n   VIRTUAL_OBJECTS = \"2108319\",\n   UPGRADE = \"2148493\",\n   PERFORMANCE_DIAGNOSTICS = \"2148770\",\n   SUPPORT_INSIGHT = \"60206\",\n}\n","/* Copyright 2020-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {DiskGroupData} from \"@generated/disk-group-data\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {DiskGroupType} from \"@generated/disk-group-type\";\nimport {VsanCapabilityData} from \"@generated/vsan-capability-data\";\nimport {DiskMgmtDiskUtil} from \"@util/disk-mgmt-disk.util\";\nimport {StorageGroupData} from \"../../disk-management/views/model/storage-group-data\";\nimport {StorageGroupIdentifier} from \"@component/diskmgmt/model/storage-group-identifier\";\nimport {StorageIdentifier} from \"@component/diskmgmt/model/storage-identifier\";\nimport {DiskData} from \"@generated/disk-data\";\nimport {HostData} from \"@generated/host-data\";\n\nexport class DiskMgmtDiskGroupUtil {\n   static readonly HEALTHY_MSG_KEY: string = \"vsan.host.healthy\";\n   private static readonly UNHEALTHY_MSG_KEY: string = \"vsan.host.unhealthy\";\n   static readonly LOCKED_MSG_KEY: string = \"vsan.host.locked\";\n   static readonly UNMOUNTED_MSG_KEY: string = \"vsan.na.label\";\n\n   static isVsanDiskGroup(diskGroup: DiskGroupData): boolean {\n      return [DiskGroupType.ALL_FLASH, DiskGroupType.HYBRID].includes(diskGroup.diskGroupType);\n   }\n\n   static isAllFlashDiskGroup(diskGroup: DiskGroupData): boolean {\n      return diskGroup.diskGroupType === DiskGroupType.ALL_FLASH;\n   }\n\n   static isVsanDirectDiskGroup(diskGroup: DiskGroupData): boolean {\n      return diskGroup.diskGroupType === DiskGroupType.VSAN_DIRECT;\n   }\n\n   static isPmemDiskGroup(diskGroup: DiskGroupData): boolean {\n      return diskGroup.diskGroupType === DiskGroupType.PMEM;\n   }\n\n   static isVsanMaxSingleTier(diskGroup: DiskGroupData): boolean {\n      return diskGroup.diskGroupType === DiskGroupType.SINGLE_TIER;\n   }\n\n   static isUnusedDiskGroup(storageGroup: StorageGroupData | DiskGroupData): boolean {\n      return storageGroup.diskGroupType === DiskGroupType.UNUSED;\n   }\n\n   static getState(diskGroup: DiskGroupData): string {\n      if (!DiskMgmtDiskGroupUtil.isVsanDiskGroup(diskGroup)) {\n         return \"\";\n      }\n\n      return diskGroup.isMounted\n            ? VsanUiUtils.getString(\"vsan.diskGroup.mounted\")\n            : VsanUiUtils.getString(\"vsan.diskGroup.unmounted\");\n   }\n\n   static getHealthKey(group: DiskGroupData): string {\n      if (!DiskMgmtDiskGroupUtil.isVsanDiskGroup(group)) {\n         return \"\";\n      }\n      if (group.isLocked) {\n         return DiskMgmtDiskGroupUtil.LOCKED_MSG_KEY;\n      }\n      if (!group.isMounted) {\n         return DiskMgmtDiskGroupUtil.UNMOUNTED_MSG_KEY;\n      }\n\n      return group.disks.every(DiskMgmtDiskUtil.isHealthy)\n            ? DiskMgmtDiskGroupUtil.HEALTHY_MSG_KEY\n            : DiskMgmtDiskGroupUtil.UNHEALTHY_MSG_KEY;\n   }\n\n   static getKey(group: DiskGroupData): string {\n      if (DiskMgmtDiskGroupUtil.isVsanDiskGroup(group) || DiskMgmtDiskGroupUtil.isVsanMaxSingleTier(group)) {\n         return DiskGroupKey.VSAN;\n      } else if (DiskMgmtDiskGroupUtil.isVsanDirectDiskGroup(group)) {\n         return DiskGroupKey.VSAN_DIRECT;\n      } else if (DiskMgmtDiskGroupUtil.isPmemDiskGroup(group)) {\n         return DiskGroupKey.PMEM;\n      }\n   }\n\n   static getLabel(diskGroup: DiskGroupData | StorageGroupIdentifier, labelFormat: VsanDiskGroupLabelFormat): string {\n      switch (diskGroup.diskGroupType) {\n         case DiskGroupType.ALL_FLASH:\n         case DiskGroupType.HYBRID:\n            return DiskMgmtDiskGroupUtil.getVsanLabel(diskGroup.name, labelFormat);\n         case DiskGroupType.VSAN_DIRECT:\n            return VsanUiUtils.getString(\"vsan.diskGroup.type.vsanDirect\");\n         case DiskGroupType.PMEM:\n            return VsanUiUtils.getString(\"vsan.diskGroup.type.pmem\");\n         case DiskGroupType.SINGLE_TIER:\n            return VsanUiUtils.getString(\"vsan.diskGroup.type.vsanMax\");\n         case DiskGroupType.UNUSED:\n            return VsanUiUtils.getString(\"vsan.diskGroup.type.ineligibleAndUnclaimed\");\n      }\n   }\n\n   static getVsanLabel(uuid: string, labelFormat: VsanDiskGroupLabelFormat): string {\n      switch (labelFormat) {\n         case VsanDiskGroupLabelFormat.TYPE:\n            return VsanUiUtils.getString(\"vsan.diskGroup.type.vsan\");\n         case VsanDiskGroupLabelFormat.TYPE_AND_UUID:\n            return VsanUiUtils.getString(\"vsan.diskGroup.type.vsan.uuid\", uuid);\n         case VsanDiskGroupLabelFormat.UUID:\n         default:\n            return uuid;\n      }\n   }\n\n   static getType(diskGroup: DiskGroupData): string {\n      switch (diskGroup.diskGroupType) {\n         case DiskGroupType.ALL_FLASH:\n            return VsanUiUtils.getString(\"vsan.diskGroup.type.allFlash\");\n         case DiskGroupType.HYBRID:\n            return VsanUiUtils.getString(\"vsan.diskGroup.type.hybrid\");\n         default:\n            return \"\";\n      }\n   }\n\n   static getAggregatedFsVersion(diskGroup: DiskGroupData): string {\n      if (!DiskMgmtDiskGroupUtil.isVsanDiskGroup(diskGroup)) {\n         return \"\";\n      }\n\n      const cacheDisk: DiskData = diskGroup.disks.find(disk => disk.isMappedAsCache);\n      return cacheDisk ? DiskMgmtDiskUtil.getFormatVersion(cacheDisk.diskStatus) : \"\";\n   }\n\n   static getDataMigrationPrecheckLabel(clusterCapabilities: VsanCapabilityData): string {\n      return clusterCapabilities.isDiskResourcePrecheckSupported\n            ? VsanUiUtils.getString(\"vsan.actions.goToPrecheckDataMigration.label\")\n            : VsanUiUtils.getString(\"vsan.actions.precheckDiskGroupEvacuation.label\");\n   }\n\n   static findGroupByStorage(diskGroups: DiskGroupData[], storage: StorageIdentifier): DiskGroupData {\n      return diskGroups.find(group =>\n            (group.disks && group.disks.some(disk => StorageIdentifier.areEqual(disk, storage))) ||\n            (group.pmemStorage && group.pmemStorage.some(disk => StorageIdentifier.areEqual(disk, storage))));\n   }\n\n   static getBreadcrumbPreselectedDiskGroup = (host: HostData): DiskGroupData | null => {\n      return host?.isSingleTierEnabled ? host.diskGroups[0] : null;\n   };\n}\n\nexport enum DiskGroupKey {\n   VSAN = \"vsan.manage.diskManagement.hostList.contributesTo.label.vsan\",\n   VSAN_DIRECT = \"vsan.manage.diskManagement.hostList.contributesTo.label.vsanDirect\",\n   PMEM = \"vsan.manage.diskManagement.hostList.contributesTo.label.pmem\",\n}\n\nexport enum VsanDiskGroupLabelFormat {\n   TYPE, UUID, TYPE_AND_UUID,\n}","/* Copyright 2020-2022 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Injectable} from \"@angular/core\";\nimport {UpgradeData} from \"@component/upgrade/upgrade.data\";\nimport {DiskData} from \"@generated/disk-data\";\nimport {DiskManagementService} from \"@generated/disk-management-service\";\nimport {HostData} from \"@generated/host-data\";\nimport {VsanUpgradeMutationProvider} from \"@generated/vsan-upgrade-mutation-provider\";\nimport {VsanUpgradePropertyProvider} from \"@generated/vsan-upgrade-property-provider\";\nimport {VsanUpgradeStatusData} from \"@generated/vsan-upgrade-status-data\";\nimport {ManagedObject} from \"@service/managed-object\";\nimport {DiskMgmtHostUtil} from \"@util/disk-mgmt-host.util\";\nimport {ClaimableState} from \"@util/disk-mgmt.util\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\n\n/**\n * Provides data for disks and objects format version.\n */\n@Injectable()\nexport class UpgradeService {\n\n   constructor(private upgradePropertyProvider: VsanUpgradePropertyProvider,\n         private upgradeMutationProvider: VsanUpgradeMutationProvider,\n         private diskMgmtService: DiskManagementService) {\n   }\n\n   getUpgradeData(clusterRef: ManagedObject): Promise<UpgradeData> {\n      return new Promise<UpgradeData>((accept, reject) => {\n         this.diskMgmtService.listHosts(clusterRef).then((hostDisksData: HostData[]) => {\n            accept(this.getUpgradeOnlyData(clusterRef, hostDisksData));\n         }).catch(error => reject(error));\n      });\n   }\n\n   async getUpgradeOnlyData(clusterRef: ManagedObject, hostDisks: HostData[]): Promise<UpgradeData> {\n      const claimedDisks: DiskData[] = this.getClaimedDisks(hostDisks);\n\n      if (VsanUiUtils.isEmpty(claimedDisks)) {\n         // No disks claimed, no need to query upgrade status\n         return new UpgradeData(claimedDisks, null, null, null);\n      }\n\n      let upgradeStatusData: VsanUpgradeStatusData;\n      let hasOldVsanObject: boolean;\n      let latestVersion: number;\n\n      [upgradeStatusData, hasOldVsanObject, latestVersion] = await Promise.all([\n         this.getUpgradeStatus(clusterRef),\n         this.hasOldFormatObjects(clusterRef),\n         this.getLatestVsanVersion(clusterRef),\n      ]);\n      return new UpgradeData(claimedDisks, upgradeStatusData, hasOldVsanObject, latestVersion);\n   }\n\n   getUpgradeStatus(clusterRef: ManagedObject): Promise<VsanUpgradeStatusData> {\n      return this.upgradePropertyProvider.getVsanUpgradeStatus(clusterRef);\n   }\n\n   hasOldFormatObjects(clusterRef: ManagedObject): Promise<boolean> {\n      return this.upgradePropertyProvider.getHasOldVsanObject(clusterRef);\n   }\n\n   getLatestVsanVersion(clusterRef: ManagedObject): Promise<number> {\n      return this.upgradePropertyProvider.getLatestVsanVersion(clusterRef);\n   }\n\n   isUpgradeNeeded(upgradeData: UpgradeData): boolean {\n      if (upgradeData.upgradeDiskData.hasMixedDiskVersions) {\n         // there are older disks\n         return true;\n      } else if (upgradeData.upgradeDiskData.minVersion >= upgradeData.latestVersion) {\n         // disks are at latest version, check for old objects\n         return upgradeData.hasOldVsanObject;\n      }\n\n      // All disks are on older versions\n      return true;\n   }\n\n   precheckUpgrade(contextObject: ManagedObject): Promise<ManagedObject> {\n      return this.upgradeMutationProvider.performUpgradePreflightAsyncCheck(contextObject);\n   }\n\n   private getClaimedDisks(hostDisksData: HostData[]): DiskData[] {\n      let disks: DiskData[] = [];\n      hostDisksData.forEach(host => {\n         disks = disks.concat(DiskMgmtHostUtil.getDisks(host, ClaimableState.IN_USE));\n      });\n      return disks;\n   }\n}\n","/* Copyright 2020-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\n/**\n * uuid is required for identification. Name is required for screen reader\n */\nexport class StorageIdentifier {\n   constructor(public uuid: string, public name: string) {\n   }\n   static areEqual(value1: StorageIdentifier, value2: StorageIdentifier): boolean {\n      return value1 && value2 && (value1.uuid === value2.uuid);\n   }\n}"],"sourceRoot":"webpack:///"}