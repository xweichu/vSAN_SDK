{"version":3,"sources":["webpack:///src/app/vsan/common/util/vsan-data-migration-util.ts","webpack:///src/app/vsan/vm/io-diagnostics/graph-view/model/graph-node-details.ts","webpack:///src/app/vsan/common/pipe/TimePipe.ts","webpack:///src/app/generated/ip-addresses-request-spec.ts","webpack:///src/app/vsan/common/directive/clr-accordion/clr-accordion-panel.directive.ts","webpack:///src/app/vsan/common/model/host-action.data.ts","webpack:///src/app/vsan/common/component/datagrid/filter/pipe-filter.ts","webpack:///src/app/vsan/common/component/diskmgmt/model/storage-group-identifier.ts","webpack:///src/app/vsan/resync/resync-objects-util.ts","webpack:///src/app/vsan/common/pipe/not-empty.pipe.ts","webpack:///src/app/vsan/common/component/datagrid/comparator/string-comparator.ts","webpack:///src/app/vsan/common/model/disk-group-action.data.ts","webpack:///src/app/generated/perf-states-obj-spec.ts"],"names":["VsanDataMigrationUtil","getLocalizedDecommissionMode","decommissionMode","noAction","getString","ensureObjectAccessibility","evacuateAllData","GraphNodeDetails","id","entityName","hostName","hostUuid","type","node","nodeData","data","nodeClasses","classes","nodeType","getGraphNodeType","GraphNodeType","DISK","detailedInfo","physicalDiskUuid","diskGroupUuid","includes","NIC_NODE","NIC","DISK_GROUP_NODE","DISK_GROUP","DISK_NODE","TimePipe","time","s","m","h","d","IpAddressesRequestSpec","Factory","create","ipAddress","subnetMask","hostsNumber","ClrAccordionPanelDirective","accordionPanel","el","accordionPanelToggleExpand","panelOpenChange","subscribe","isExpanded","onExpandCollapse","model","nativeElement","panelId","panelIdDOM","findAccordionPanelId","event","currentTarget","emit","AccordionPanelToggleExpandEventArg","targetEl","parentCount","nodeName","ACCORDION_PANEL_TAG","getAttribute","parentElement","HostActionData","host","hostData","hostRef","isWitnessHost","isInMaintenanceMode","isWhatIfSupported","fromPrecheckEntity","entity","PipeFilter","pipe","dataField","transform","StorageGroupIdentifier","diskGroupType","name","diskGroup","value1","value2","diskGroupTypeOptionalCheck","ResyncObjectsUtil","resyncData","isResyncETAImprovementSupported","repairTimerData","isSupported","objectsCount","getFormattedScheduledResync","minTimer","maxTimer","startTime","endTime","isToday","applyFormatting","SHORT_TIME","isTomorrow","FULL_DATE_TIME","isSameTime","getNoSecondsTime","NotEmptyPipe","value","toString","trim","length","StringComparator","a","b","stringify","toLowerCase","localeCompare","DiskGroupActionData","fromDiskGroupData","group","groupData","isLocked","diskGroupName","isMounted","diskMapping","getVsanDiskMapping","vsanUuid","disks","find","disk","isMappedAsCache","precheckEntity","uuid","diskGroupData","PerfStatesObjSpec","clusterRef","profileId","isVerboseEnabled","isNetworkDiagnosticModeEnabled"],"mappings":"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","file":"common-es5.js","sourcesContent":["/* Copyright 2019 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {VsanUiUtils} from \"./vsan-util\";\nimport {DecommissionMode} from \"@generated/decommission-mode\";\n\n/**\n * vSAN data migration utilities.\n */\nexport class VsanDataMigrationUtil {\n   static getLocalizedDecommissionMode = (decommissionMode: DecommissionMode): string => {\n      if (!decommissionMode) {\n         return \"\";\n      }\n\n      switch (decommissionMode) {\n         case DecommissionMode.noAction :\n            return VsanUiUtils.getString(\"vsan.dialog.precheckEvacuation.noDataMigration\");\n         case DecommissionMode.ensureObjectAccessibility :\n            return VsanUiUtils.getString(\"vsan.dialog.precheckEvacuation.ensureAccessibility\");\n         case DecommissionMode.evacuateAllData :\n            return VsanUiUtils.getString(\"vsan.dialog.precheckEvacuation.fullDataMigration\");\n      }\n   };\n}","/* Copyright 2021 VMware, Inc. All rights reserved. -- VMware Confidential */\n\nimport {GraphNode} from \"@generated/graph-node\";\nimport {GraphClasses} from \"@generated/graph-classes\";\nimport {GraphNodeData} from \"@generated/graph-node-data\";\n\n/**\n * Contains all needed data for fetching the object details data.\n */\nexport class GraphNodeDetails {\n   constructor(public id: string,\n               public entityName: string,\n               public hostName: string,\n               public hostUuid: string,\n               public type: GraphNodeType) {\n   }\n\n   static fromGraphNode(node: GraphNode & any): GraphNodeDetails {\n      const nodeData: GraphNodeData = node.data();\n      const nodeClasses: string[] = node.classes();\n      const nodeType: GraphNodeType = GraphNodeDetails.getGraphNodeType(nodeClasses);\n      const entityName: string = nodeType === GraphNodeType.DISK\n            ? nodeData.detailedInfo?.physicalDiskUuid\n            : nodeData.detailedInfo?.diskGroupUuid;\n      return new GraphNodeDetails(nodeData.id,\n            entityName,\n            nodeData.detailedInfo?.hostName,\n            nodeData.detailedInfo?.hostUuid,\n            nodeType);\n   }\n\n   private static getGraphNodeType(nodeClasses: string[]): GraphNodeType {\n      if (nodeClasses.includes(GraphClasses.NIC_NODE())) {\n         return GraphNodeType.NIC;\n      } else if (nodeClasses.includes(GraphClasses.DISK_GROUP_NODE())) {\n         return GraphNodeType.DISK_GROUP;\n      } else if (nodeClasses.includes(GraphClasses.DISK_NODE())) {\n         return GraphNodeType.DISK;\n      }\n   }\n}\n\nexport enum GraphNodeType {\n   DISK_GROUP,\n   DISK,\n   NIC,\n}\n","/* Copyright 2018-2019 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Pipe, PipeTransform} from '@angular/core';\nimport {VsanUiUtils} from \"@util/vsan-util\";\n\n/**\n * Returns the time as a single integer in the closest largest unit.\n *\n * @param seconds\n *    time in seconds.\n * @return\n *    String like \"Unknown\" if t &lt; 0.\n *    time in seconds if t &lt; 119 seconds.\n *    time in minutes if 119 seconds &lt; t &lt; 119 minutes.\n *    time in hours if 119 minutes &lt; t &lt; 24 hours.\n *    time in days if 24 hours &lt; t\n */\n@Pipe({\n   name: 'timeSpan'\n})\nexport class TimePipe implements PipeTransform {\n\n   public transform(time: number | string,  ...args: string[]): string {\n      if (typeof time === \"string\") {\n         return time;\n      }\n      if (time < 0) {\n         return VsanUiUtils.getString(\"vsan.common.unknown\");\n      }\n      let s: number = time % 60;\n      time = (time - s) / 60;\n      let m: number = time % 60;\n      time = (time - m) / 60;\n      let h: number = time % 24;\n      time = (time - h) / 24;\n      let d: number = time;\n      // return seconds up to 119\n      if (m < 2 && h < 1 && d < 1) {\n         s = s + (m * 60);\n         return VsanUiUtils.getString(s === 1 ? \"vsan.common.second\" : \"vsan.common.seconds\", s);\n      }\n\n      // return minutes up to 119\n      if (h < 2 && d < 1) {\n         return VsanUiUtils.getString(\"vsan.common.minutes\", m + (h * 60));\n      }\n\n      // return hours up to 24\n      if (d < 1) {\n         return VsanUiUtils.getString(\"vsan.common.hours\", h + (d * 24));\n      }\n      return  VsanUiUtils.getString(d === 1 ? \"vsan.common.day\" : \"vsan.common.days\", d);\n   }\n\n}","\nexport interface IpAddressesRequestSpec {\n\n   ipAddress: string;\n   subnetMask: string;\n   hostsNumber: number;\n} //class IpAddressesRequestSpec\n\nexport module IpAddressesRequestSpec{\nexport class Factory {\n\n   static create = (ipAddress: string, subnetMask: string, hostsNumber: number): IpAddressesRequestSpec => {\n      return { ipAddress: ipAddress, subnetMask: subnetMask, hostsNumber: hostsNumber, };\n   }\n\n\n} //class Factory\n\n} //module IpAddressesRequestSpec\n","/* Copyright 2020 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {AfterContentInit, Directive, ElementRef, EventEmitter, Input, Output} from \"@angular/core\";\nimport {ClrAccordionPanel} from \"@clr/angular\";\n\n/**\n * Generally, panelOpenChange event is triggered for all the accordion's panels, no matter which panel is\n * collapsed/expanded. This directive provides {@link accordionPanelToggleExpand} event that is triggered\n * only by the target panel. Directive requires to set an id of the panel via vsan-panel-id property.\n * How it works:\n *    - Directive attaches to the panelOpenChange event where:\n *    - The panel DOM element's id is obtained by traversing parent elements of the clicked target.\n *    - If the panel's model id equals the id of the DOM element then the custom event is emitted.\n */\n@Directive({\n   selector: \"clr-accordion-panel[vsan-panel-id]\",\n})\nexport class ClrAccordionPanelDirective<T> implements AfterContentInit {\n   static ACCORDION_PANEL_TAG: string = \"CLR-ACCORDION-PANEL\";\n\n   constructor(private accordionPanel: ClrAccordionPanel, private el: ElementRef<HTMLElement>) {\n      this.accordionPanel.panelOpenChange.subscribe(isExpanded => {\n         this.onExpandCollapse(isExpanded, this.model);\n      });\n   }\n\n   @Input(\"vsan-panel-id\")\n   panelId: string;\n\n   @Input(\"vsan-panel-model\")\n   model: T;\n\n   @Output()\n   accordionPanelToggleExpand: EventEmitter<AccordionPanelToggleExpandEventArg<T>> =\n         new EventEmitter<AccordionPanelToggleExpandEventArg<T>>();\n\n   ngAfterContentInit(): void {\n      this.el.nativeElement.id = this.panelId;\n   }\n\n   onExpandCollapse(isExpanded: boolean, model: any) {\n      const panelIdDOM: string = this.findAccordionPanelId(event.currentTarget as HTMLElement, 5);\n      if (this.panelId === panelIdDOM) {\n         this.accordionPanelToggleExpand.emit(new AccordionPanelToggleExpandEventArg<T>(isExpanded, model));\n      }\n   }\n\n   findAccordionPanelId(targetEl: HTMLElement, parentCount: number): string {\n      if (targetEl.nodeName === ClrAccordionPanelDirective.ACCORDION_PANEL_TAG) {\n         return targetEl.getAttribute(\"id\");\n      }\n      if (targetEl && targetEl.parentElement && parentCount) {\n         return this.findAccordionPanelId(targetEl.parentElement, --parentCount);\n      }\n   }\n}\n\nexport class AccordionPanelToggleExpandEventArg<T> {\n   constructor(public isExpanded: boolean, public model: T) {}\n}","/* Copyright 2019-2022 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {ManagedObject} from \"@service/managed-object\";\nimport {HostData} from \"@generated/host-data\";\nimport {PrecheckEntity} from \"@generated/precheck-entity\";\n\n/**\n * Host data required for disk and group actions.\n */\nexport class HostActionData {\n   hostRef: ManagedObject;\n   isWitnessHost: boolean;\n   isWhatIfSupported: boolean;\n   isInMaintenanceMode: boolean;\n\n   static fromHostData(host: HostData): HostActionData {\n      const hostData: HostActionData = new HostActionData();\n      hostData.hostRef = host.hostRef;\n      hostData.isWitnessHost = host.isWitnessHost;\n      hostData.isInMaintenanceMode = host.isInMaintenanceMode;\n      hostData.isWhatIfSupported = true;\n      return hostData;\n   }\n\n   static fromPrecheckEntity = (entity: PrecheckEntity): HostActionData => {\n      const hostData: HostActionData = new HostActionData();\n      hostData.isWitnessHost = false;\n      hostData.isWhatIfSupported = true;\n      hostData.hostRef = entity.hostRef;\n      hostData.isInMaintenanceMode = entity.isInMaintenanceMode;\n      return hostData;\n   };\n}","/* Copyright 2017 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {BaseFilter} from \"./base-filter\";\nimport {PipeTransform} from \"@angular/core\";\n\n/**\n * Extends BaseFilter by allowing the consumer to provide a\n pipe that will be used in the comparison process.\n */\nexport class PipeFilter<T> extends BaseFilter<T> {\n\n   constructor(private pipe: PipeTransform, private dataField: string = null) {\n      super();\n   }\n\n   protected stringify(data: T): string {\n      if (this.dataField && data) {\n         return this.pipe.transform(data[this.dataField]);\n      }\n      return this.pipe.transform(data);\n   }\n}\n","/* Copyright 2021 VMware, Inc. All rights reserved. -- VMware Confidential */\n\nimport {DiskGroupType} from \"@generated/disk-group-type\";\nimport {DiskGroupData} from \"@generated/disk-group-data\";\n\n/**\n * Disk group identifier by type and name, used for passing preselection context from\n * other pages' navigation or page refresh. vSAN Direct, PMEM and Unused groups have null name.\n */\nexport class StorageGroupIdentifier {\n   constructor(public diskGroupType: DiskGroupType = null, public name: string = null) {}\n\n   static fromDiskGroupName(name: string): StorageGroupIdentifier {\n      return new StorageGroupIdentifier(null, name);\n   }\n\n   static fromDiskGroup(diskGroup: DiskGroupData): StorageGroupIdentifier {\n      return new StorageGroupIdentifier(diskGroup.diskGroupType, diskGroup.name);\n   }\n   static areEqual(value1: StorageGroupIdentifier, value2: StorageGroupIdentifier): boolean {\n      // Disk group type is an optional argument,\n      // so it should be taken into account only if both diskGroupTypes are not null.\n      const diskGroupTypeOptionalCheck: boolean =\n            (!value1.diskGroupType || !value2.diskGroupType)\n            || value1.diskGroupType === value2.diskGroupType;\n      return value1 && value2 && diskGroupTypeOptionalCheck && (value1.name === value2.name);\n   }\n}","/* Copyright 2021-2022 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {RepairTimerData} from \"@generated/repair-timer-data\";\nimport {ResyncMonitorData} from \"@generated/resync-monitor-data\";\nimport {DateFormat} from \"@util/date-time\";\nimport {VsanDateTimeUtils} from \"@util/vsan-dateteime-util\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\n\nexport class ResyncObjectsUtil {\n   static getScheduledResync(resyncData: ResyncMonitorData, isResyncETAImprovementSupported: boolean): string {\n      if (!resyncData) {\n         return VsanUiUtils.getString(\"vsan.loading\");\n      } else if (!resyncData.repairTimerData) {\n         return VsanUiUtils.getString(\"vsan.na.label\");\n      } else if (!resyncData.repairTimerData.isSupported) {\n         return VsanUiUtils.getString(\"vsan.monitor.resyncSummary.scheduledResync.message.notSupported\");\n      }\n\n      const repairTimerData: RepairTimerData = resyncData.repairTimerData;\n\n      if (isResyncETAImprovementSupported) {\n         if (!repairTimerData.objectsCount) {\n            return VsanUiUtils.getString(\"vsan.monitor.resyncSummary.scheduledResync.message.none\");\n         }\n\n         return repairTimerData.objectsCount === 1\n               ? VsanUiUtils.getString(\"vsan.monitor.resyncSummary.scheduledResync.message.total.one.object\")\n               : VsanUiUtils.getString(\"vsan.monitor.resyncSummary.scheduledResync.message.total.many.objects\",\n                     repairTimerData.objectsCount);\n      }\n\n      return this.getFormattedScheduledResync(repairTimerData.objectsCount,\n            resyncData.repairTimerData.minTimer,\n            resyncData.repairTimerData.maxTimer);\n   }\n\n   static getFormattedScheduledResync(objectsCount: number, minTimer: number, maxTimer: number): string {\n      if (!objectsCount) {\n         return VsanUiUtils.getString(\"vsan.monitor.resyncSummary.scheduledResync.message.none\");\n      }\n\n      let startTime: string;\n      let endTime: string;\n      // handle the case when only 1 object is scheduled for resync\n      if (objectsCount === 1) {\n         if (VsanDateTimeUtils.isToday(minTimer)) {\n            startTime = VsanDateTimeUtils.applyFormatting(minTimer, DateFormat.SHORT_TIME);\n            return VsanUiUtils.getString(\"vsan.monitor.resyncSummary.scheduledResync.message.one.today\", startTime);\n         }\n\n         if (VsanDateTimeUtils.isTomorrow(minTimer)) {\n            startTime = VsanDateTimeUtils.applyFormatting(minTimer, DateFormat.SHORT_TIME);\n            return VsanUiUtils.getString(\"vsan.monitor.resyncSummary.scheduledResync.message.one.tomorrow\", startTime);\n         }\n\n         startTime = VsanDateTimeUtils.applyFormatting(minTimer, DateFormat.FULL_DATE_TIME);\n         return VsanUiUtils.getString(\"vsan.monitor.resyncSummary.scheduledResync.message.one.differentDays\",\n               startTime);\n      }\n\n      // when minTimer === maxTimer, or maxTimer < 0, consider only minTimer for displaying the scheduled resync\n      const isSameTime: boolean =\n            VsanDateTimeUtils.getNoSecondsTime(minTimer) === VsanDateTimeUtils.getNoSecondsTime(maxTimer);\n      if (isSameTime || maxTimer < 0) {\n         if (VsanDateTimeUtils.isToday(minTimer)) {\n            startTime = VsanDateTimeUtils.applyFormatting(minTimer, DateFormat.SHORT_TIME);\n            return VsanUiUtils.getString(\"vsan.monitor.resyncSummary.scheduledResync.message.many.today\",\n                  objectsCount, startTime);\n         }\n\n         if (VsanDateTimeUtils.isTomorrow(minTimer)) {\n            startTime = VsanDateTimeUtils.applyFormatting(minTimer, DateFormat.SHORT_TIME);\n            return VsanUiUtils.getString(\"vsan.monitor.resyncSummary.scheduledResync.message.many.tomorrow\",\n                  objectsCount, startTime);\n         }\n\n         startTime = VsanDateTimeUtils.applyFormatting(minTimer, DateFormat.FULL_DATE_TIME);\n         return VsanUiUtils.getString(\"vsan.monitor.resyncSummary.scheduledResync.message.many.differentDays\",\n               objectsCount, startTime);\n      }\n\n      // display the scheduled resync in the form \"between minTimer and maxTimer\"\n      if (VsanDateTimeUtils.isToday(minTimer) && VsanDateTimeUtils.isToday(maxTimer)) {\n         startTime = VsanDateTimeUtils.applyFormatting(minTimer, DateFormat.SHORT_TIME);\n         endTime = VsanDateTimeUtils.applyFormatting(maxTimer, DateFormat.SHORT_TIME);\n         return VsanUiUtils.getString(\"vsan.monitor.resyncSummary.scheduledResync.message.some.today\",\n               objectsCount, startTime, endTime);\n      }\n\n      if (VsanDateTimeUtils.isTomorrow(minTimer) && VsanDateTimeUtils.isTomorrow(maxTimer)) {\n         startTime = VsanDateTimeUtils.applyFormatting(minTimer, DateFormat.SHORT_TIME);\n         endTime = VsanDateTimeUtils.applyFormatting(maxTimer, DateFormat.SHORT_TIME);\n         return VsanUiUtils.getString(\"vsan.monitor.resyncSummary.scheduledResync.message.some.tomorrow\",\n               objectsCount, startTime, endTime);\n      }\n\n      startTime = VsanDateTimeUtils.applyFormatting(minTimer, DateFormat.FULL_DATE_TIME);\n      endTime = VsanDateTimeUtils.applyFormatting(maxTimer, DateFormat.FULL_DATE_TIME);\n      return VsanUiUtils.getString(\"vsan.monitor.resyncSummary.scheduledResync.message.some.differentDays\",\n            objectsCount, startTime, endTime);\n   }\n}\n","/* Copyright 2019-2020 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Pipe, PipeTransform} from \"@angular/core\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\n\n/**\n * If the original value is null or an empty string, shows \"--\" instead.\n */\n@Pipe({\n   name: 'notEmpty'\n})\nexport class NotEmptyPipe implements PipeTransform {\n\n   public transform(value: any): any {\n      if (value != null && value.toString().trim().length != 0) {\n         return value;\n      } else {\n         return VsanUiUtils.getString(\"vsan.na.label\");\n      }\n   }\n\n}","/* Copyright 2019 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {BaseComparator} from \"@component/datagrid/comparator/base-comparator\";\n\nexport class StringComparator<T> extends BaseComparator<T> {\n   constructor(private dataField: string) {\n      super();\n   }\n\n   protected compareValue(a: T, b: T): number {\n      return this.stringify(a, this.dataField).toLowerCase()\n            .localeCompare(this.stringify(b, this.dataField).toLowerCase());\n   }\n}\n","/* Copyright 2019-2020 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {DiskGroupData} from \"@generated/disk-group-data\";\nimport {VsanDiskMapping} from \"@generated/vsan-disk-mapping\";\nimport {VsanDiskMgmtActionsUtil} from \"@util/vsan-disk-mgmt-actions-util\";\nimport {PrecheckEntity} from \"@generated/precheck-entity\";\n\n/**\n * The disk group data required for disk and disk group actions,\n * such as: remove/recreate/unmount disk group and remove disks.\n */\nexport class DiskGroupActionData {\n   vsanUuid: string;\n   isLocked: boolean;\n   isMounted: boolean;\n   diskGroupName: string;\n   diskMapping: VsanDiskMapping;\n\n   static fromDiskGroupData = (group: DiskGroupData): DiskGroupActionData => {\n      const groupData: DiskGroupActionData = new DiskGroupActionData();\n      groupData.isLocked = group.isLocked;\n      groupData.diskGroupName = group.name;\n      groupData.isMounted = group.isMounted;\n      groupData.diskMapping = VsanDiskMgmtActionsUtil.getVsanDiskMapping(group);\n      groupData.vsanUuid = group.disks.find(disk => disk.isMappedAsCache).vsanUuid;\n      return groupData;\n   };\n\n   static fromPrecheckEntity = (precheckEntity: PrecheckEntity) => {\n      const groupData: DiskGroupActionData = new DiskGroupActionData();\n      groupData.vsanUuid = precheckEntity.uuid;\n      groupData.diskGroupName = precheckEntity.name;\n      groupData.isLocked = precheckEntity.diskGroupData.isLocked;\n      groupData.isMounted = precheckEntity.diskGroupData.isMounted;\n      groupData.diskMapping = precheckEntity.diskGroupData.diskMapping;\n      return groupData;\n   };\n}","\nexport interface PerfStatesObjSpec {\n\n   clusterRef: any;\n   profileId: string;\n   isVerboseEnabled: boolean;\n   isNetworkDiagnosticModeEnabled: boolean;\n} //class PerfStatesObjSpec\n\nexport module PerfStatesObjSpec{\nexport class Factory {\n\n   static create = (clusterRef: any, profileId: string, isVerboseEnabled: boolean, isNetworkDiagnosticModeEnabled: boolean): PerfStatesObjSpec => {\n      return { clusterRef: clusterRef, profileId: profileId, isVerboseEnabled: isVerboseEnabled, isNetworkDiagnosticModeEnabled: isNetworkDiagnosticModeEnabled, };\n   }\n\n\n} //class Factory\n\n} //module PerfStatesObjSpec\n"]}