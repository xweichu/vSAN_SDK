{"version":3,"sources":["./src/app/vsan/common/component/unavailable-view/unavailable-view.html","./src/app/vsan/common/component/unavailable-view/unavailable-view.component.ts"],"names":[],"mappings":"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","file":"10-es2015.js","sourcesContent":["<!--Copyright 2020-2021 VMware, Inc. All rights reserved. -- VMware Confidential-->\n<div id=\"feature-description\" *ngIf=\"unavailableViewSpec?.featureDescription\">\n   <span>{{unavailableViewSpec.featureDescription}}</span>\n   <a *ngIf=\"unavailableViewSpec?.kbArticleId\" [external-link] [articleId]=\"unavailableViewSpec.kbArticleId\"></a>\n</div>\n\n<div *ngIf=\"loading\" class=\"spinner central-spinner\"></div>\n<vsan-validation *ngIf=\"!loading && errorMessage\" [alert]=\"errorMessage\"></vsan-validation>\n\n<div class=\"content-container\" *ngIf=\"!loading && unavailableViewSpec\">\n   <div *ngIf=\"imagePath\"\n        class=\"image\"\n        [ngStyle]=\"{'background-image':'url(' + imagePath + ')'}\">\n   </div>\n\n   <div class=\"status\">\n      <label id=\"status-label\" class=\"clr-control-label\">\n         {{unavailableViewSpec.statusLabel}}\n      </label>\n      <div class=\"horizontally-centered-content\">\n         <span class=\"spinner spinner-inline\" *ngIf=\"isTaskRunning\"></span>\n         <span id=\"status-description\" *ngIf=\"unavailableViewSpec.statusDescription || isTaskRunning\">\n            {{ descriptionLabel }}\n         </span>\n      </div>\n   </div>\n\n   <ng-container *ngIf=\"displayQuickstartBtn && quickstartNotCompleted else actionBtn\">\n      <ng-container *ngTemplateOutlet=\"quickstartBtn\"></ng-container>\n   </ng-container>\n   <ng-template #actionBtn>\n      <ng-container *ngTemplateOutlet=\"btn; context: {index: 0, styles: 'btn-primary', service: unavailableViewSpec,\n                    signpostPosition: 'top-right'}\">\n      </ng-container>\n   </ng-template>\n</div>\n\n<ng-container *ngIf=\"!loading && unavailableViewSpec?.multipleServicesRequired\">\n   <span id=\"multiple-services-description\"\n         *ngIf=\"unavailableViewSpec.requiredServicesData.multipleServicesDescription\">\n         {{unavailableViewSpec.requiredServicesData.multipleServicesDescription}}\n   </span>\n   <div class=\"clr-row\"\n        *ngFor=\"let service of unavailableViewSpec.requiredServicesData.requiredServices; let index=index\">\n      <div class=\"clr-col\">\n         <div class=\"card\">\n            <div class=\"card-block\">\n               <div class=\"card-text\">\n                  {{service.name}}\n               </div>\n               <div *ngIf=\"service.isEnabled\" class=\"clr-timeline-step\">\n                  <clr-icon size=\"24\" shape=\"success-standard\"></clr-icon>\n               </div>\n               <ng-container *ngIf=\"!service.isEnabled\">\n                  <ng-container *ngTemplateOutlet=\"btn; context: {index: index, styles: 'btn-sm btn-link',\n                                service: service.unavailableViewSpec, signpostPosition: 'top-left'}\">\n                  </ng-container>\n               </ng-container>\n            </div>\n         </div>\n      </div>\n   </div>\n</ng-container>\n\n<ng-template #btn let-index=\"index\" let-styles=\"styles\" let-unavailableService=\"service\"\n             let-signpostPosition=\"signpostPosition\">\n   <clr-tooltip *ngIf=\"displayActionButton && unavailableService.actionLabel\">\n      <span clrTooltipTrigger\n            [vsan-ignore-focus]=\"!disabledActionButton(unavailableService)\">\n         <!-- wrapped in span, because disabled element could not be clrTooltipTrigger for the tooltip -->\n         <button vsan-show-title\n                 id=\"action-button-{{index}}\"\n                 class=\"btn no-margin\"\n                 [ngClass]=\"styles\"\n                 (click)=\"btnClick(unavailableService)\"\n                 [disabled]=\"disabledActionButton(unavailableService)\">\n            {{unavailableService.actionLabel}}\n         </button>\n      </span>\n      <clr-tooltip-content *ngIf=\"!hasEditPrivilege\"\n                           clrPosition=\"top-left\"\n                           clrSize=\"lg\">\n         {{\"vsan.common.nopermissions\" | localized}}\n      </clr-tooltip-content>\n      <clr-tooltip-content *ngIf=\"hasEditPrivilege && unavailableService.actionDisable\"\n                           clrPosition=\"top-left\"\n                           clrSize=\"lg\">\n         {{unavailableService.actionDisableReason}}\n      </clr-tooltip-content>\n   </clr-tooltip>\n</ng-template>\n\n<ng-template #quickstartBtn>\n   <clr-tooltip>\n      <span clrTooltipTrigger\n            [vsan-ignore-focus]=\"hasEditPrivilege\">\n         <!-- wrapped in span, because disabled element could not be clrTooltipTrigger for the tooltip -->\n         <button vsan-show-title\n                 id=\"go-to-quickstart\"\n                 class=\"btn btn-primary\"\n                 (click)=\"goToQuickstart()\"\n                 [disabled]=\"!hasEditPrivilege\">\n            {{\"vsan.disabledService.common.goToQuickstart\" | localized}}\n         </button>\n      </span>\n      <ng-container *ngIf=\"!hasEditPrivilege\">\n         <clr-tooltip-content clrPosition=\"top-right\" clrSize=\"lg\" *clrIfOpen>\n            <span>{{\"vsan.common.nopermissions\" | localized}}</span>\n         </clr-tooltip-content>\n      </ng-container>\n   </clr-tooltip>\n</ng-template>\n","/* Copyright 2020-2022 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, EventEmitter, Input, OnInit, Output} from \"@angular/core\";\nimport {UnavailableViewSpec} from \"@component/unavailable-view/unavailable-view-spec\";\nimport {environment} from \"@env/environment\";\nimport {HciQuickstartStatusService} from \"@generated/hci-quickstart-status-service\";\nimport {VsanPerfPropertyProvider} from \"@generated/vsan-perf-property-provider\";\nimport {NavigationService, PlatformExtension} from \"@navigation/navigation.service\";\nimport {RefreshHandler} from \"@service/global-refresh.service\";\nimport {ManagedObject} from \"@service/managed-object\";\nimport {TaskMonitorService} from \"@service/task-monitor-service\";\nimport {Logger} from \"@util/logger\";\nimport {ModalBuilder} from \"@util/modal-builder\";\nimport {VsanQuickstartUtil} from \"@util/vsan-quickstart-util\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\n\n@Component({\n   templateUrl: \"unavailable-view.html\",\n   styleUrls: [\"unavailable-view.scss\"],\n   selector: \"vsan-unavailable-view\",\n})\nexport class UnavailableViewComponent implements OnInit {\n   private static readonly SERVICE_ENABLE_REFRESH_INTERVAL_MS: number = 2000;\n   private static readonly IMAGES_FOLDER: string = (environment.repa && environment.repaExtension)\n         ? \"images/svg/\"\n         : \"/ui/h5-vsan-ui/images/svg/\";\n   loading: boolean;\n   quickstartNotCompleted: boolean;\n   errorMessage: string;\n   isTaskRunning: boolean = false;\n\n   @Input()\n   unavailableViewSpec: UnavailableViewSpec;\n\n   @Input()\n   hasEditPrivilege: boolean;\n\n   @Input()\n   clusterRef: ManagedObject;\n\n   @Input()\n   dialogContext: any;\n\n   /**\n    * In cases where the service has external dependancy and it cannot be enabled.\n    * In such a case the user of this component is responsible for providing means to enable the service.\n    */\n   @Input()\n   displayActionButton: boolean = true;\n\n   // Set it to true if we need to display Go TO Quickstart button when quickstart is not completed.\n   @Input()\n   displayQuickstartBtn: boolean = false;\n\n   /**\n    * Ensure master node is elected after perf service is enabled.\n    */\n   _ensureMasterNodeElected: boolean = false;\n   @Input()\n   set ensureMasterNodeElected(value: boolean) {\n      this._ensureMasterNodeElected = value;\n   }\n\n   get ensureMasterNodeElected(): boolean {\n      return !!(this._ensureMasterNodeElected || this.masterNodeElectedCallBack);\n   }\n\n   /**\n    * A callback function that is executed after master node is elected.\n    */\n   @Input()\n   masterNodeElectedCallBack: () => any;\n\n   // Set it to true if global refresh is required after the task is completed.\n   @Input()\n   refreshAfterCompletion: boolean = true;\n\n   @Output()\n   configureComplete: EventEmitter<void> = new EventEmitter<void>();\n\n   constructor(private taskService: TaskMonitorService,\n         private navigationService: NavigationService,\n         private quickstartStatusService: HciQuickstartStatusService,\n         private perfProvider: VsanPerfPropertyProvider) {\n   }\n\n   ngOnInit(): void {\n      this.fetch();\n   }\n\n   @RefreshHandler\n   fetch(): void {\n      if (!this.clusterRef) {\n         return;\n      }\n      this.loading = true;\n      this.quickstartStatusService.getHciDataWithStatus(this.clusterRef)\n            .then(fetched => {\n               this.quickstartNotCompleted = fetched.isVsanEnabled &&\n                     VsanQuickstartUtil.isHciWorkflowInProgress(fetched.clusterData.hciWorkflowState);\n            })\n            .catch(e => Logger.error(\"Unable to retrieve HCI cluster data.\", e))\n            .finally(() => {\n               this.loading = false;\n            });\n   }\n\n   get imagePath(): string {\n      return UnavailableViewComponent.IMAGES_FOLDER +\n            (VsanUiUtils.isLightTheme()\n                  ? this.unavailableViewSpec.lightThemeImage\n                  : this.unavailableViewSpec.darkThemeImage);\n   }\n\n   get descriptionLabel(): string {\n      return this.unavailableViewSpec.statusDescription\n            ? this.unavailableViewSpec.statusDescription\n            : VsanUiUtils.getString(\"vsan.common.configuring\");\n   }\n\n   disabledActionButton(unavailableService: UnavailableViewSpec): boolean {\n      return !this.hasEditPrivilege || unavailableService.actionDisable || this.isTaskRunning;\n   }\n\n   btnClick(spec: UnavailableViewSpec): void {\n      if (spec.externalExtensionId) {\n         this.navigateTo(spec);\n      } else {\n         this.openVsanDialog(spec);\n      }\n   }\n\n   private navigateTo(spec: UnavailableViewSpec): void {\n      if (spec.externalExtensionId === PlatformExtension.CEIP_VIEW) {\n         this.navigationService.navigateWithoutContextObject(spec.externalExtensionId);\n      } else {\n         this.navigationService.navigateTo(spec.externalExtensionId, this.clusterRef);\n      }\n   }\n\n   private openVsanDialog(spec: UnavailableViewSpec): void {\n      this.errorMessage = null;\n      const context: any = this.dialogContext\n            ? this.dialogContext\n            : {clusterRef: this.clusterRef};\n      new ModalBuilder(spec.actionModuleId)\n            .setSize(spec.actionDialogWidth, spec.actionDialogHeight)\n            .open(context)\n            .then(async (tasks: ManagedObject | ManagedObject[]) => {\n               this.isTaskRunning = true;\n               await this.handleTasks(tasks);\n               if (this.ensureMasterNodeElected) {\n                  this.isTaskRunning = true;\n                  setTimeout(this.onMasterNodeElected, UnavailableViewComponent.SERVICE_ENABLE_REFRESH_INTERVAL_MS);\n               }\n            })\n            .catch((error) => this.handleError(error));\n   }\n\n   goToQuickstart(): void {\n      this.navigationService.navigateTo(PlatformExtension.QUICKSTART, this.clusterRef);\n   }\n\n   private async handleTasks(tasks: ManagedObject | ManagedObject[]): Promise<void> {\n      const runningTasks: ManagedObject[] = this.getTasks(tasks);\n\n      if (VsanUiUtils.isEmpty(runningTasks)) {\n         this.isTaskRunning = false;\n         return;\n      }\n\n      const promises: Promise<any>[] = runningTasks.map(t => this.taskService.getAwaitResult(t));\n      try {\n         await Promise.all(promises);\n         if (!this.ensureMasterNodeElected) {\n            this.onConfigureComplete();\n         }\n      } catch (error) {\n         this.handleError(error);\n      }\n   }\n\n   private getTasks(tasks: ManagedObject | ManagedObject[]): ManagedObject[] {\n      if (!tasks) {\n         return null;\n      }\n      if (!Array.isArray(tasks)) {\n         return [tasks];\n      }\n      return tasks;\n   }\n\n   private handleError(error: string): void {\n      this.errorMessage = error;\n      this.isTaskRunning = false;\n   }\n\n   private onMasterNodeElected = async (): Promise<void> => {\n      const hasMasterNode: boolean = await this.perfProvider.hasMasterNodeElected(this.clusterRef);\n      if (hasMasterNode) {\n         if (this.masterNodeElectedCallBack) {\n            this.masterNodeElectedCallBack();\n         }\n         this.onConfigureComplete();\n         return;\n      }\n      setTimeout(this.onMasterNodeElected, UnavailableViewComponent.SERVICE_ENABLE_REFRESH_INTERVAL_MS);\n   };\n\n   private onConfigureComplete(): void {\n      this.isTaskRunning = false;\n      this.configureComplete.emit();\n      if (this.refreshAfterCompletion) {\n         VsanUiUtils.globalRefresh();\n      }\n   }\n}\n"],"sourceRoot":"webpack:///"}