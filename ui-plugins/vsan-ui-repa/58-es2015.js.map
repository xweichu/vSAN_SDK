{"version":3,"sources":["./src/app/vsan/common/directive/clr-button-group/clr-button-base.directive.ts","./src/app/vsan/common/component/datetime-picker/time-range-picker/time-range-picker.html","./src/app/vsan/common/service/performance-persistence.service.ts","./src/app/vsan/common/component/datetime-picker/time-range-picker/time-range-picker.component.ts","./src/app/vsan/common/util/vsan-dialog-util.ts","./src/app/vsan/common/directive/external-link/external-link.directive.ts"],"names":[],"mappings":"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","file":"58-es2015.js","sourcesContent":["/* Copyright 2020 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {ClrButton} from \"@clr/angular\";\n\n/**\n * Use this class as base class for directive, which handles clr-button. It will help to link the rendered button with\n * the clr-button on which the directive is applied.\n */\nexport abstract class ClrButtonBaseDirective {\n\n   constructor(private clrButton: ClrButton) {\n      if (!clrButton) {\n         return;\n      }\n      // name should be set, if not provided in template - generate one. ClrButtom#name is used to generate the name\n      // attribute of the markup button. Later the name is used to match the generated markup with the directive.\n      if (!clrButton.name) {\n         clrButton.name = Math.random().toString();\n      }\n\n      const directiveHolder: DirectiveHolder = (clrButton as DirectiveHolder);\n      directiveHolder.directives = directiveHolder.directives || [];\n      directiveHolder.directives.push(this);\n   }\n\n   /**\n    * This method will be called when the actual html button is rendered.\n    */\n   abstract resolveButton(clrButton: ClrButton, button: HTMLButtonElement, index: number);\n}\n\nexport interface DirectiveHolder extends ClrButton {\n   directives: ClrButtonBaseDirective[];\n}","<!--Copyright 2017-2022 VMware, Inc. All rights reserved. -- VMware Confidential-->\n<span id=\"time-range-label\" class=\"clr-control-label\">\n   {{\"vsan.perf.chart.timerange.label\" | localized}}\n</span>\n<clr-dropdown>\n   <button class=\"dropdown-toggle btn btn-sm btn-link\" clrDropdownToggle>\n      {{currentOptionLabel}}\n      <clr-icon shape=\"caret down\"></clr-icon>\n   </button>\n   <clr-dropdown-menu clrPosition=\"bottom-left\"\n                      [attr.aria-label]=\"'vsan.perf.chart.timerange.srMessage.dropdownMenu.label' | localized\">\n      <button *ngIf=\"realtimeSupported\"\n              clrDropdownItem (click)=\"onRealtimeClick()\">\n         {{\"vsan.perf.chart.timerange.realtime\" | localized}}\n      </button>\n      <button clrDropdownItem (click)=\"onRangeLastXHoursClick()\">\n         {{\"vsan.perf.chart.timerange.last\" | localized}}\n      </button>\n      <button clrDropdownItem (click)=\"onRangeCustomClick()\">\n         {{\"vsan.perf.chart.timerange.custom\" | localized}}\n      </button>\n      <button *ngIf=\"allowSaving\"\n              [disabled]=\"fromDateError || toDateError || hourIntervalInvalid\"\n              clrDropdownItem\n              (click)=\"onSaveRangeClick()\">\n         {{\"vsan.perf.chart.timerange.save\" | localized}}\n      </button>\n      <div class=\"dropdown-divider\" *ngIf=\"savedTimeRanges?.length > 0 || loading\"></div>\n      <button *ngIf=\"loading\" clrDropdownItem>\n         <div class=\"spinner spinner-inline\"></div>\n         {{\"vsan.loading\" | localized}}\n      </button>\n      <div *ngFor=\"let range of savedTimeRanges\" class=\"saved-range-container\">\n         <button clrDropdownItem\n                 (click)=\"onSelectTimeRange(range)\"\n                 [title]=\"range.name\">\n            {{range.name}}\n         </button>\n         <a href=\"javascript://\"\n            (click)=\"onDeleteTimeRange(range)\"\n            clrDropdownItem\n            title=\"{{'vsan.common.dialogOpen.title' | localized :\n               ('vsan.perf.chart.timerange.btn.del.tooltip' | localized)}}\">\n            <clr-icon shape=\"remove\" class=\"is-error\"></clr-icon>\n         </a>\n      </div>\n   </clr-dropdown-menu>\n</clr-dropdown>\n<clr-signpost *ngIf=\"isRealtime()\">\n   <clr-signpost-content *clrIfOpen clrPosition=\"right-bottom\">\n      <span id=\"real-time-description\">\n         {{\"vsan.perf.chart.timerange.realtime.info\" | localized}}\n      </span>\n   </clr-signpost-content>\n</clr-signpost>\n<div *ngIf=\"currentPickerState == RangePickerState.LAST_X_HOURS\"\n     class=\"clr-control-container clr-form-control hour-interval-container\"\n     [class.clr-error]=\"hourIntervalInvalid\">\n   <div class=\"clr-input-wrapper\">\n      <!--Place the input and unit text in the label to ensure that they are properly associated for accessibility.-->\n      <label>\n         <input id=\"hour-interval\"\n                name=\"hour-interval\"\n                [(ngModel)]=\"hourInterval\"\n                type=\"number\"\n                min=\"1\"\n                max=\"24\"\n                class=\"clr-input hour-interval-input\"\n                aria-describedby=\"hour-interval-error\">\n         <clr-icon class=\"clr-validate-icon\"\n                   shape=\"exclamation-circle\"\n                   title=\"{{'vsan.common.srMessage.error' | localized}}\"\n                   [attr.aria-label]=\"'vsan.common.srMessage.error' | localized\">\n         </clr-icon>\n         {{\"vsan.perf.chart.timerange.hours.label\" | localized}}\n      </label>\n   </div>\n   <span id=\"hour-interval-error\" class=\"clr-subtext\" *ngIf=\"hourIntervalInvalid\">\n      {{hourIntervalError}}\n   </span>\n</div>\n<span *ngIf=\"currentPickerState == RangePickerState.SAVED_RANGE\">\n   {{\"vsan.perf.chart.timerange.saved.from.label\" | localized}}\n   <span class=\"formatted-date\">\n      {{currentTimeRange.from | l10nDate:DateFormat.NO_SECONDS}}\n   </span>\n   {{\"vsan.perf.chart.timerange.saved.to.label\" | localized}}\n   <span class=\"formatted-date\">\n      {{currentTimeRange.to | l10nDate:DateFormat.NO_SECONDS}}\n   </span>\n</span>\n<ng-container *ngIf=\"currentPickerState == RangePickerState.CUSTOM_RANGE\">\n   <vsan-datetime-picker id=\"from-date-input\"\n                         [(datetime)]=\"fromDate\"\n                         [errorMessage]=\"fromDateError\"\n                         [disabled]=\"hourIntervalInvalid\"\n                         label=\"{{'vsan.perf.chart.timerange.custom.from' | localized}}\">\n   </vsan-datetime-picker>\n   <vsan-datetime-picker id=\"to-date-input\"\n                         [(datetime)]=\"toDate\"\n                         [errorMessage]=\"toDateError\"\n                         [disabled]=\"hourIntervalInvalid\"\n                         label=\"{{'vsan.perf.chart.timerange.custom.to' | localized}}\">\n   </vsan-datetime-picker>\n</ng-container>\n<button id=\"query-data-by-range-btn\"\n        *ngIf=\"currentPickerState == RangePickerState.LAST_X_HOURS || currentPickerState == RangePickerState.CUSTOM_RANGE\"\n        (click)=\"onRefreshBtnClick()\"\n        [disabled]=\"!enabled || fromDateError || toDateError || hourIntervalInvalid\"\n        class=\"btn btn-sm query-button\">\n   {{\"vsan.perf.chart.timerange.btn.refresh.label\" | localized}}\n</button>","/* Copyright 2020 VMware, Inc. All rights reserved. -- VMware Confidential */\n\nimport {PerfTimeRangeData} from \"@generated/perf-time-range-data\";\nimport {Injectable} from \"@angular/core\";\nimport {FullTimeRangeSelectionData} from \"@model/full-time-range-selection.data\";\nimport {PersistentStorageService} from \"@service/browser-storage.service\";\nimport {VsanDateTimeUtils} from \"@util/vsan-dateteime-util\";\nimport {RangePickerState} from \"@component/datetime-picker/time-range-picker/range-picker-state\";\n\nexport class PersistedSelection {\n   fullTimeRangeSelection: FullTimeRangeSelectionData;\n   expiresIn: number;\n}\n\n/**\n * Persist data which is needed between multiple performance views.\n */\n@Injectable()\nexport class PerformancePersistenceService {\n   /**\n    * Cached time range selection is kept for 1 hour.\n    */\n   private readonly CACHE_DURATION_IN_MS: number = VsanDateTimeUtils.HOUR_IN_MILLISECONDS;\n   private readonly CACHE_KEY: string = \"performance-timerange-selection\";\n\n   constructor(private storageService: PersistentStorageService) {\n   }\n\n   saveSelection(timeRange: PerfTimeRangeData, state: RangePickerState) {\n      const expiresIn: number =\n            new Date().getTime() + this.CACHE_DURATION_IN_MS;\n      const fullTimeRangeData: FullTimeRangeSelectionData = {\n         timeRange: timeRange,\n         state: state,\n      };\n      const savedObject: PersistedSelection = {\n         fullTimeRangeSelection: fullTimeRangeData,\n         expiresIn: expiresIn,\n      };\n      this.storageService.set(this.CACHE_KEY, savedObject);\n   }\n\n   getPersistedSelection(): FullTimeRangeSelectionData {\n      const persistedSelection: PersistedSelection =\n            this.storageService.get<PersistedSelection>(this.CACHE_KEY);\n\n      if (persistedSelection == null || persistedSelection.fullTimeRangeSelection == null) {\n         return null;\n      }\n\n      const isCacheExpired: boolean =\n            this.clearCacheIfExpired(persistedSelection);\n      if (isCacheExpired) {\n         return null;\n      }\n\n      return persistedSelection.fullTimeRangeSelection;\n   }\n\n   /**\n    * Check if deleted timeRange is persisted in the browser storage, if so then it should be removed as well.\n    */\n   onTimeRangeDeletion(timeRange: PerfTimeRangeData) {\n      const persistedTimeRange = this.getPersistedSelection();\n      if (persistedTimeRange != null && timeRange.name === persistedTimeRange.timeRange.name) {\n         this.storageService.remove(this.CACHE_KEY);\n      }\n   }\n\n   private clearCacheIfExpired(persistedSelection: PersistedSelection): boolean {\n      const nowTimestamp = new Date().getTime();\n      // If more then 1 hour has passed, then delete persisted selection\n      if (persistedSelection.expiresIn < nowTimestamp) {\n         this.storageService.remove(this.CACHE_KEY);\n         return true;\n      }\n\n      return false;\n   }\n}\n","/* Copyright 2017-2022 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, EventEmitter, Input, OnDestroy, OnInit, Output} from \"@angular/core\";\nimport {PerfTimeRangeData} from \"@generated/perf-time-range-data\";\nimport {VsanPerfPropertyProvider} from \"@generated/vsan-perf-property-provider\";\nimport {DateFormat} from \"@pipe/VsanDateFormatterPipe\";\nimport {ManagedObject} from \"@service/managed-object\";\nimport {PerformancePersistenceService} from \"@service/performance-persistence.service\";\nimport {Logger} from \"@util/logger\";\nimport {ModalBuilder} from \"@util/modal-builder\";\nimport {ReferenceWatcher} from \"@util/reference-watcher\";\nimport {TimeRangeUtil} from \"@util/time-range-util\";\nimport {VsanDateTimeUtils} from \"@util/vsan-dateteime-util\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {RangePickerState} from \"./range-picker-state\";\n\n@Component({\n   selector: \"vsan-time-range-picker\",\n   templateUrl: \"time-range-picker.html\",\n   styleUrls: [\"time-range-picker.scss\"],\n   providers: [ReferenceWatcher],\n})\nexport class VsanTimeRangePickerComponent implements OnInit, OnDestroy {\n   // high resolution auto refresh interval\n   private readonly HR_AUTO_REFRESH_INTERVAL_MS: number = 30 * 1000;\n   // high resolution time range hour interval\n   private readonly HR_INTERVAL_HOUR: number = 1;\n\n   RangePickerState: typeof RangePickerState = RangePickerState;\n\n   currentOptionLabel: string;\n   savedTimeRanges: PerfTimeRangeData[] = [];\n   hourIntervalInvalid: boolean;\n   hourIntervalError: string = VsanUiUtils.getString(\"vsan.perf.chart.timerange.last.hourInterval.error\");\n   fromDateError: string;\n   toDateError: string;\n   loading: boolean = false;\n   DateFormat: typeof DateFormat = DateFormat;\n\n   private _currentTimeRange: PerfTimeRangeData;\n\n   get currentTimeRange(): PerfTimeRangeData {\n      return this._currentTimeRange;\n   }\n\n   @Input()\n   set currentTimeRange(value: PerfTimeRangeData) {\n      this._currentTimeRange = value;\n      if (this._currentPickerState) {\n         this._setTimerange(this._currentTimeRange);\n      }\n   }\n\n   _clusterRef: ManagedObject;\n\n   get clusterRef(): ManagedObject {\n      return this._clusterRef;\n   }\n\n   @Input()\n   set clusterRef(value: ManagedObject) {\n      this._clusterRef = value;\n      if (value) {\n         this.fetch();\n      }\n   }\n\n   private _fromDate: Date;\n\n   get fromDate(): Date {\n      return this._fromDate;\n   }\n\n   @Input()\n   set fromDate(val: Date) {\n      this._fromDate = val;\n      this.validate();\n   }\n\n   private _toDate: Date;\n\n   get toDate(): Date {\n      return this._toDate;\n   }\n\n   @Input()\n   set toDate(val: Date) {\n      this._toDate = val;\n      this.validate();\n   }\n\n   private _hourInterval: number;\n\n   get hourInterval(): number {\n      return this._hourInterval;\n   }\n\n   @Input()\n   set hourInterval(value: number) {\n      this._hourInterval = value;\n      this.validate();\n   }\n\n   @Input()\n   enabled: boolean = true;\n\n   @Input()\n   allowSaving: boolean = true;\n\n   private _realtimeSupported: boolean = false;\n\n   get realtimeSupported(): boolean {\n      return this._realtimeSupported;\n   }\n\n   @Input()\n   set realtimeSupported(val: boolean) {\n      // change the picker state when user chooses top contributors or per vm charts\n      // because in the 2 views we don't support realtime, but before user can select them the view supports realtime\n      if (this.realtimeSupported && this.isRealtime() && !val) {\n         this.currentPickerState = RangePickerState.LAST_X_HOURS;\n      }\n      this._realtimeSupported = val;\n   }\n\n   private _currentPickerState: RangePickerState;\n\n   get currentPickerState(): RangePickerState {\n      return this._currentPickerState;\n   }\n\n   @Input()\n   set currentPickerState(value: RangePickerState) {\n      const noStateChange: boolean = this._currentPickerState === value;\n      if (noStateChange || this.isUnsupportedState(value)) {\n         return;\n      }\n\n      const isLeavingRealtime: boolean = this.isRealtime();\n      if (isLeavingRealtime) {\n         this.refWatcher.clearIntervals();\n      }\n      this._setCurrentPickerState(value);\n      if (this.isRealtime()) {\n         this.refWatcher.setInterval(() => this.extendCurrentTimeRange(), this.HR_AUTO_REFRESH_INTERVAL_MS);\n         this._currentTimeRange = this.createTimeRange(this.createDefaultStartTime());\n      }\n\n      if (this.currentTimeRange) {\n         this._setTimerange(this._currentTimeRange);\n         this.changeRange.emit(this.currentTimeRange);\n         this.validate();\n      }\n   }\n\n   /*\n   * Set persisted time range\n   * */\n   setTimerange(timerange: PerfTimeRangeData, state: RangePickerState): void {\n      if (state === RangePickerState.REAL_TIME && this.isUnsupportedState(state)) {\n         // If there is a persisted time range for REAL_TIME,\n         // but the current view doesn't support it, then use default time range.\n         this.initDefaultPicker();\n         return;\n      }\n\n      this._setTimerange(timerange);\n      this._setCurrentPickerState(state);\n      this.initRange.emit(this.currentTimeRange);\n   }\n\n   private _setTimerange(timerange: PerfTimeRangeData): void {\n      this._currentTimeRange = timerange;\n      this.fromDate = new Date(this.currentTimeRange.from);\n      this.toDate = new Date(this.currentTimeRange.to);\n\n      if (this.currentPickerState === RangePickerState.LAST_X_HOURS) {\n         // Get difference between 'from' and 'to' date in hours\n         this.hourInterval = (timerange.to - timerange.from) / VsanDateTimeUtils.HOUR_IN_MILLISECONDS;\n      }\n   }\n\n   private _setCurrentPickerState(state: RangePickerState): void {\n      if (this.isUnsupportedState(state)) {\n         return;\n      }\n      this._currentPickerState = state;\n      switch (state) {\n         case RangePickerState.REAL_TIME:\n            this.currentOptionLabel = VsanUiUtils.getString(\"vsan.perf.chart.timerange.realtime\");\n            return;\n         case RangePickerState.LAST_X_HOURS:\n            this.currentOptionLabel = VsanUiUtils.getString(\"vsan.perf.chart.timerange.last\");\n            break;\n         case RangePickerState.CUSTOM_RANGE:\n            this.currentOptionLabel = VsanUiUtils.getString(\"vsan.perf.chart.timerange.custom\");\n            break;\n         case RangePickerState.SAVED_RANGE:\n            this.currentOptionLabel = this.currentTimeRange.name;\n            break;\n         default:\n            Logger.error(\"Unknown RangePickerState: \" + state);\n      }\n   }\n\n   private isUnsupportedState(state: RangePickerState): boolean {\n      return !this.realtimeSupported && state === RangePickerState.REAL_TIME;\n   }\n\n   /**\n    * Triggered as a result of time change because of user interaction\n    */\n   @Output()\n   changeRange: EventEmitter<PerfTimeRangeData> = new EventEmitter<PerfTimeRangeData>(true);\n\n   /**\n    * Triggered as a result of time change because of automated process, i.e. set default value during initialization\n    * of component\n    */\n   @Output()\n   initRange: EventEmitter<PerfTimeRangeData> = new EventEmitter<PerfTimeRangeData>(true);\n\n   constructor(private perfProvider: VsanPerfPropertyProvider,\n         // private cdRef: ChangeDetectorRef,\n         private refWatcher: ReferenceWatcher,\n         private perfPersistenceService: PerformancePersistenceService) {\n   }\n\n   ngOnInit(): void {\n      if (this.currentTimeRange) {\n         this._setTimerange(this._currentTimeRange);\n         return;\n      }\n      this.initDefaultPicker();\n   }\n\n   private initDefaultPicker(): void {\n      if (!this.hourInterval) {\n         this.hourInterval = 1;\n      }\n\n      if (!this.currentPickerState || this.isUnsupportedState(this.currentPickerState)) {\n         this.currentPickerState = this.realtimeSupported ? RangePickerState.REAL_TIME : RangePickerState.LAST_X_HOURS;\n      }\n\n      this.fromDate = this.createDefaultStartTime();\n      this.toDate = VsanTimeRangePickerComponent.createDefaultEndTime();\n\n      if (!this.currentTimeRange) {\n         this.setDefaultTimeRange();\n      }\n   }\n\n   ngOnDestroy(): void {\n      this.refWatcher.clearIntervals();\n   }\n\n   fetch(): void {\n      this.loading = true;\n      this.perfProvider.getSavedTimeRanges(this.clusterRef).then((result: PerfTimeRangeData[]) => {\n         this.loading = false;\n         this.savedTimeRanges = result;\n      }, (error) => {\n         Logger.error(\"Cannot load saved time ranges: \", error);\n         this.loading = false;\n      });\n   }\n\n   isRealtime(): boolean {\n      return this.currentPickerState === RangePickerState.REAL_TIME;\n   }\n\n   private setDefaultTimeRange(): void {\n      const defaultSelectedTimeStart: Date = this.createDefaultStartTime();\n      this.currentTimeRange = this.createTimeRange(defaultSelectedTimeStart);\n      this.initRange.emit(this.currentTimeRange);\n   }\n\n   private createDefaultStartTime(): Date {\n      return VsanDateTimeUtils.createNoSecondsDate(this.getHourInterval());\n   }\n\n   private static createDefaultEndTime(): Date {\n      return VsanDateTimeUtils.createNoSecondsDate();\n   }\n\n   private createTimeRange(startTime: Date, endTime?: Date): PerfTimeRangeData {\n      return VsanDateTimeUtils.createTimeRange(this.currentPickerState, this.getHourInterval(), startTime, endTime);\n   }\n\n   private getHourInterval(): number {\n      return this.isRealtime() ? this.HR_INTERVAL_HOUR : this.hourInterval;\n   }\n\n   /**\n    * Move the current time range to 30s later. Used for high-resolution charts\n    */\n   private extendCurrentTimeRange(): void {\n      const range: PerfTimeRangeData = this.currentTimeRange;\n      if (!range) {\n         return;\n      }\n      this.currentTimeRange = this.createTimeRange(\n            new Date(range.from + this.HR_AUTO_REFRESH_INTERVAL_MS),\n            new Date(range.to + this.HR_AUTO_REFRESH_INTERVAL_MS));\n      this.changeRange.emit(this.currentTimeRange);\n   }\n\n   private updateCurrentTimeRange(): void {\n      if (this.currentPickerState === RangePickerState.CUSTOM_RANGE) {\n         const startTime: Date = new Date(this.fromDate);\n         const endTime: Date = new Date(this.toDate);\n         this.currentTimeRange = this.createTimeRange(startTime, endTime);\n      } else if (this.currentPickerState === RangePickerState.LAST_X_HOURS) {\n         /*\n            Have to reset the default because the time range is not correct\n            if user clicks the query button 30 minutes later after the page opened.\n         */\n         const defaultSelectedTimeStart: Date = this.createDefaultStartTime();\n         this.currentTimeRange = this.createTimeRange(defaultSelectedTimeStart);\n      }\n   }\n\n   onRealtimeClick(): void {\n      this.currentPickerState = RangePickerState.REAL_TIME;\n   }\n\n   onRangeLastXHoursClick(): void {\n      this.currentPickerState = RangePickerState.LAST_X_HOURS;\n   }\n\n   onSelectTimeRange(range: PerfTimeRangeData): void {\n      this.currentTimeRange = range;\n      this._setCurrentPickerState(RangePickerState.SAVED_RANGE);\n      this.changeRange.emit(range);\n   }\n\n   onRefreshBtnClick(): void {\n      this.updateCurrentTimeRange();\n      this.changeRange.emit(this.currentTimeRange);\n   }\n\n   onRangeCustomClick(): void {\n      this.currentPickerState = RangePickerState.CUSTOM_RANGE;\n   }\n\n   onDeleteTimeRange(range: PerfTimeRangeData): void {\n      new ModalBuilder(\"datePicker/deleteTimeRange\")\n            .setSize(500, 220)\n            .open({\n               clusterRef: this.clusterRef,\n               range: range,\n            })\n            .then((timeRange: PerfTimeRangeData) => {\n               let timeRangeIndex: number = this.savedTimeRanges\n                     .findIndex(savedTimeRange => TimeRangeUtil.areEqual(timeRange, savedTimeRange));\n               this.savedTimeRanges.splice(timeRangeIndex, 1);\n               this.perfPersistenceService.onTimeRangeDeletion(timeRange);\n\n               if (this.currentPickerState !== RangePickerState.SAVED_RANGE ||\n                     !TimeRangeUtil.areEqual(this.currentTimeRange, timeRange)) {\n                  return;\n               }\n\n               if (this.savedTimeRanges.length === 0) {\n                  // Choose LAST when there is no custom time range.\n                  this.onRangeLastXHoursClick();\n               } else {\n                  if (timeRangeIndex === this.savedTimeRanges.length) {\n                     // The deleted time range is the last one, then choose the first one.\n                     timeRangeIndex = 0;\n                  }\n                  this.onSelectTimeRange(this.savedTimeRanges[timeRangeIndex]);\n               }\n            });\n   }\n\n   onSaveRangeClick(): void {\n      this.updateCurrentTimeRange();\n      new ModalBuilder(\"datePicker/addTimeRange\")\n            .setSize(500, 280)\n            .open({\n               clusterRef: this.clusterRef,\n               from: this.currentTimeRange.from,\n               to: this.currentTimeRange.to,\n            })\n            .then((range: PerfTimeRangeData) => {\n               this.savedTimeRanges.push(range);\n               this.onSelectTimeRange(range);\n            });\n   }\n\n   private validate(): void {\n      this.fromDateError = \"\";\n      this.toDateError = \"\";\n      this.hourIntervalInvalid = false;\n\n      if (this.currentPickerState === RangePickerState.LAST_X_HOURS) {\n         if (this._hourInterval <= 0 || this._hourInterval > 24 || VsanUiUtils.isDecimal(this._hourInterval)) {\n            this.hourIntervalInvalid = true;\n            this.hourIntervalError = VsanUiUtils.isDecimal(this._hourInterval)\n                  ? VsanUiUtils.getString(\"vsan.perf.chart.timerange.last.hourInterval.decimal.error\")\n                  : VsanUiUtils.getString(\"vsan.perf.chart.timerange.last.hourInterval.error\");\n            return;\n         } else {\n            this.hourIntervalInvalid = false;\n         }\n      } else {\n         if (!this.fromDate) {\n            this.fromDateError = VsanUiUtils.getString(\"vsan.perf.chart.timerange.custom.startTime.empty.error\");\n            return;\n         }\n\n         if (!this.toDate) {\n            this.toDateError = VsanUiUtils.getString(\"vsan.perf.chart.timerange.custom.endTime.empty.error\");\n            return;\n         }\n\n         const currentTime: number = VsanDateTimeUtils.createNoSecondsDate().getTime();\n         const startTime: number = this.fromDate.getTime();\n         const endTime: number = this.toDate.getTime();\n\n         if (endTime - currentTime > 0) {\n            // The end time can not be greater than the current time.\n            this.toDateError = VsanUiUtils.getString(\"vsan.perf.chart.timerange.custom.endTime.error\");\n         } else if (endTime - startTime <= 0) {\n            // The end time should be greater than the start time.\n            this.fromDateError = VsanUiUtils.getString(\"vsan.perf.chart.timerange.custom.startTime.error\");\n         } else if ((endTime - startTime) / VsanDateTimeUtils.HOUR_IN_MILLISECONDS > 24) {\n            this.fromDateError = this.toDateError = VsanUiUtils.getString(\"vsan.perf.chart.timerange.last.hourInterval.error\");\n         }\n      }\n   }\n}","/* Copyright 2020-2022 VMware, Inc. All rights reserved. -- VMware Confidential */\nexport class VsanDialogUtil {\n   static readonly CAPACITY_MANAGEMENT_DIALOG: VsanDialogProperties = {\n      width: 800,\n      height: 700,\n   };\n\n   static readonly DELETE_VOLUME_DIALOG: VsanDialogProperties = {\n      width: 500,\n      height: 250,\n   };\n\n   static readonly MIGRATE_VOLUME_DIALOG: VsanDialogProperties = {\n      width: 1030,\n      height: 710,\n   };\n\n   static readonly REAPPLY_VOLUME_POLICY_DIALOG: VsanDialogProperties = {\n      width: 700,\n      height: 250,\n   };\n\n   static readonly DUPLICATE_PCI_ID_MODEL_SELECTION_DIALOG: VsanDialogProperties = {\n      width: 800,\n      height: 500,\n   };\n\n   static readonly HEALTH_RESTORE_ACTION_DIALOG: VsanDialogProperties = {\n      width: 550,\n      height: 250,\n   };\n\n   // Keep in sync with plugin.xml extension point\n   static readonly CLUSTER_POWER_ON_DIALOG: VsanDialogProperties = {\n      width: 600,\n      height: 230,\n   };\n\n   static readonly VM_IO_DIAGNOSTICS_METRICS_DIALOG: VsanDialogProperties = {\n      width: 900,\n      height: 700,\n   };\n\n   static readonly VM_IO_DIAGNOSTICS_LATENCY_DIALOG: VsanDialogProperties = {\n      width: 1000,\n      height: 500,\n   };\n\n   static readonly VM_IO_DIAGNOSTICS_DOM_OWNER_LATENCY_DIALOG: VsanDialogProperties = {\n      width: 1000,\n      height: 400,\n   };\n\n   static readonly PERF_SVC_EDIT_ACTION_DIALOG: VsanDialogProperties = {\n      width: 800,\n      height: 450,\n   };\n\n   static readonly PERF_SVC_ENABLE_ACTION_DIALOG: VsanDialogProperties = {\n      width: 800,\n      height: 250,\n   };\n\n   static readonly CLAIM_DISKS_ACTION_DIALOG: VsanDialogProperties = {\n      width: 1200,\n      height: 650,\n   };\n\n   static readonly VSAN_DISK_CLAIM_ACTION_DIALOG: VsanDialogProperties = {\n      width: 670,\n      height: 300,\n   };\n}\n\nexport class VsanDialogProperties {\n   width: number;\n   height: number;\n}\n","/* Copyright 2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {\n   AfterViewInit,\n   ComponentFactoryResolver,\n   Directive,\n   ElementRef,\n   Host,\n   Input,\n   Optional,\n   Renderer2,\n   Self,\n} from \"@angular/core\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {NavigationService} from \"@navigation/navigation.service\";\nimport {ClrButtonBaseDirective} from \"@directive/clr-button-group/clr-button-base.directive\";\nimport {ClrButton} from \"@clr/angular\";\n\n/**\n * Decorates a button or an anchor as external link. Requires one of the optional parameters articleId, helpId or url.\n *\n * @param external-link: Optional. Localization key of the text label of the external link. If omitted default label\n * will be used - \"Learn more\" for anchors or \"Ask VMWare\" for buttons.\n * @param articleId - Optional. Id of article in knowledge base.\n * @param helpId - Optional. Help id which will redirect to Knowledge Base.\n * @param url - Optional. External URL.\n */\n@Directive({\n   selector: \"a[external-link], button[external-link], clr-button[external-link]\",\n})\nexport class ExternalLinkDirective extends ClrButtonBaseDirective implements AfterViewInit {\n   private readonly ASK_VMWARE_DEFAULT_TEXT_KEY: string = \"vsan.common.askVMware\";\n   private readonly LEARN_MORE_DEFAULT_TEXT_KEY: string = \"vsan.common.learnMore\";\n\n   private readonly CONTAINER_CLASS: string = \"icon-name-container\";\n   private readonly NAVIGATION_EVENT_TYPE: string = \"click\";\n   private readonly LEAD_TO_NOWHERE_URL: string = \"javascript://\";\n   private readonly HTML_ELEMENT_SPAN_NAME: string = \"span\";\n   private readonly HTML_ELEMENT_ICON_NAME: string = \"clr-icon\";\n   private readonly HTML_ELEMENT_ROLE_ATTR_NAME: string = \"role\";\n   private readonly HTML_ELEMENT_ROLE_ATTR_VALUE: string = \"link\";\n   private readonly ICON_SHAPE_ATTR_NAME: string = \"shape\";\n   private readonly ICON_SHAPE_ATTR_VALUE: string = \"pop-out\";\n   private readonly ICON_SIZE_ATTR_NAME: string = \"size\";\n   private readonly ICON_SIZE_ATTR_VALUE: string = \"16\";\n   private readonly ICON_CLASS_ATTR_NAME: string = \"class\";\n   private readonly ICON_CLASS_ATTR_VALUE: string = \"link\";\n   private readonly ICON_TITLE_ATTR_NAME: string = \"title\";\n\n   private readonly KB_URL: string = \"http://kb.vmware.com/kb/\";\n\n   @Input(\"external-link\")\n   anchorText: string;\n\n   @Input()\n   articleId: string;\n\n   @Input()\n   helpId: string;\n\n   @Input()\n   url: string;\n\n   constructor(private el: ElementRef<HTMLElement>,\n         private resolver: ComponentFactoryResolver,\n         private renderer: Renderer2,\n         private navigationService: NavigationService,\n         // this variable will be initialized only if the host is clr-button\n         @Host() @Self() @Optional() clrButton: ClrButton) {\n      super(clrButton);\n   }\n\n   ngAfterViewInit(): void {\n      const element: HTMLElement = this.el.nativeElement;\n      // continue only if element is HTML link or button\n      if (!this.isLink(element) && !this.isButton(element)) {\n         // element is clr-button, wait until html button for it is resolved - handled by resloveButton\n         return;\n      }\n      this.prepareExternalLink(element);\n   }\n\n   resolveButton(clrButton: ClrButton, button: HTMLButtonElement, index: number): void {\n      // only if element is clr-button. At this point the html button is already resolved. Apply on it.\n      this.prepareExternalLink(button);\n   }\n\n   private prepareExternalLink(element: HTMLElement): void {\n      this.renderer.addClass(element, this.CONTAINER_CLASS);\n\n      this.setText(element);\n      if (this.isLink(element)) {\n         this.decorateLink(element);\n      } else {\n         this.addLinkRole(element);\n      }\n\n      this.initializeNavigationHandler(element);\n   }\n\n   private isButton(element: HTMLElement): boolean {\n      return element instanceof HTMLButtonElement;\n   }\n\n   private isLink(element: HTMLElement): boolean {\n      return element instanceof HTMLAnchorElement;\n   }\n\n   private setText(element: HTMLElement): void {\n      const span: HTMLSpanElement = this.renderer.createElement(this.HTML_ELEMENT_SPAN_NAME);\n      span.innerText = this.getText(element);\n      this.renderer.appendChild(element, span);\n\n      const icon: HTMLSpanElement = this.renderer.createElement(this.HTML_ELEMENT_ICON_NAME);\n      icon.setAttribute(this.ICON_SHAPE_ATTR_NAME, this.ICON_SHAPE_ATTR_VALUE);\n      icon.setAttribute(this.ICON_SIZE_ATTR_NAME, this.ICON_SIZE_ATTR_VALUE);\n      icon.setAttribute(this.ICON_CLASS_ATTR_NAME, this.ICON_CLASS_ATTR_VALUE);\n      // Set title of the icon for screen readers clarity\n      icon.setAttribute(this.ICON_TITLE_ATTR_NAME, VsanUiUtils.getString(\"vsan.screenReader.label.externalLink.icon\"));\n      this.renderer.appendChild(element, icon);\n   }\n\n   private getText(element: HTMLElement): string {\n      if (this.anchorText) {\n         return this.anchorText;\n      }\n      const key: string = this.isButton(element) ? this.ASK_VMWARE_DEFAULT_TEXT_KEY : this.LEARN_MORE_DEFAULT_TEXT_KEY;\n      return VsanUiUtils.getString(key);\n   }\n\n   private decorateLink(element: HTMLElement): void {\n      const linkElement: HTMLLinkElement = element as HTMLLinkElement;\n      // don't use href attribute. If omitted, the link will be not visualized properly.\n      linkElement.href = this.LEAD_TO_NOWHERE_URL;\n      // display link on same line\n      linkElement.style.display = \"inline-flex\";\n   }\n\n   private initializeNavigationHandler(element: HTMLElement): void {\n      element.addEventListener(this.NAVIGATION_EVENT_TYPE, () => {\n         if (this.helpId) {\n            this.navigationService.askVMware(this.helpId);\n            return;\n         }\n         if (this.articleId) {\n            this.navigationService.navigateToAddress(`${this.KB_URL}${this.articleId}`);\n            return;\n         }\n         if (this.url) {\n            this.navigationService.navigateToAddress(this.url);\n         }\n      });\n   }\n\n   // Indicate external navigation by assigning \"link\" role\n   private addLinkRole(element: HTMLElement): void {\n      this.renderer.setAttribute(element, this.HTML_ELEMENT_ROLE_ATTR_NAME, this.HTML_ELEMENT_ROLE_ATTR_VALUE);\n   }\n}"],"sourceRoot":"webpack:///"}