{"version":3,"sources":["webpack:///src/app/vsan/performance/view/io-insight-instance.html","webpack:///src/app/vsan/performance/view/perf-vm-mode-selector/perf-vm-mode-selector.component.ts","webpack:///src/app/vsan/performance/view/consolidated-dialog.component.ts","webpack:///src/app/vsan/performance/view/multi-entities-data-perf.html","webpack:///src/app/vsan/performance/view/consolidated-vm-selector.component.ts","webpack:///src/app/vsan/performance/view/perf-graphics.component.ts","webpack:///src/app/vsan/performance/view/perf-vm-mode-selector/perf-vm-mode-selector.html","webpack:///src/app/vsan/performance/view/perf-multi-entities-metrics.component.ts","webpack:///src/app/vsan/performance/view/perf-graphics.html","webpack:///src/app/vsan/performance/view/consolidated-vm-selector.html","webpack:///src/app/vsan/performance/view/perf-vm-mode-selector/perf-vm-mode-selection.data.ts","webpack:///src/app/vsan/performance/performance.module.ts","webpack:///src/app/vsan/common/service/navigation/model/documentation-id.ts","webpack:///src/app/vsan/performance/view/io-insight-data-perf.html","webpack:///src/app/vsan/performance/view/ioinsight-running-status.pipe.ts","webpack:///src/app/vsan/performance/view/file-share-selector.html","webpack:///src/app/vsan/common/component/dialog/prompt/prompt-light-info.component.ts","webpack:///src/app/vsan/performance/view/file-share-selector.component.ts","webpack:///src/app/vsan/performance/view/perf-vm-data.service.ts","webpack:///src/app/vsan/performance/view/io-insight-data-perf.component.ts","webpack:///src/app/vsan/performance/model/top-contributor-entity.ts","webpack:///src/app/vsan/performance/view/consolidated-entities-data.data.ts","webpack:///src/app/vsan/performance/view/io-insight-metrics.html","webpack:///src/app/vsan/performance/view/multi-entities-data-perf.component.ts","webpack:///src/app/vsan/performance/view/perf-multi-entities-metrics.html","webpack:///src/app/vsan/performance/view/file-share-data-perf.html","webpack:///src/app/vsan/performance/view/top-contributors-data-perf.html","webpack:///src/app/vsan/performance/view/file-share-data-perf.component.ts","webpack:///src/app/vsan/common/component/action-button/button-group-wrap.directive.ts","webpack:///src/app/vsan/performance/view/io-insight-instance.component.ts","webpack:///src/app/vsan/performance/view/io-insight-metrics.component.ts","webpack:///src/app/vsan/performance/util/perf-support-util.ts","webpack:///src/app/vsan/performance/view/consolidated-dialog.html","webpack:///src/app/vsan/performance/model/perf-entities.ts","webpack:///src/app/vsan/performance/model/metric-col-obj.ts","webpack:///src/app/vsan/common/component/dialog/prompt/prompt.html","webpack:///src/app/generated/perf-top-contributors-query-spec.ts","webpack:///src/app/vsan/common/util/vsan-signpost-util.ts","webpack:///src/app/vsan/performance/view/top-contributors-data-perf.component.ts"],"names":["PerfVmModeSelectorComponent","vmInventoryService","SPECIFIED_ENTITIES_SELECTION_LIMIT","perfModeTypes","vmModeSelectionChange","_perfVmModeSelection","vmInventoryNodes","isSeparateCharts","val","raiseChangeEvent","mode","root","contextObject","initDefault","CLUSTER_AGGREGATION","HOST_AGGREGATION","aggregatedLevelMetricsLabel","PER_VM","selectedCount","vmNodes","length","getString","TOP_CONTRIBUTORS","Error","aggregatedVsanPerfVmMode","getAggregatedVsanPerfVmMode","event","node","data","isLeafNode","selected","undefined","push","index","findIndex","vmNode","nodeRef","value","splice","$event","stopImmediatePropagation","stopPropagation","emit","ConsolidatedDialogComponent","perfOrchestrator","vmDataService","consolidatedEntitiesData","context","getModalContext","commonPerfData","visibleGraphId","timePickerRange","title","entityType","VIRTUAL_MACHINE","singleEntityType","CLUSTER_VM_CONSUMPTION_ENTITY","HOST_DISK_GROUP_ENTITY","parentEntityType","entityTypes","VM_CONSUMPTION_ENTITY","SHOW_SPECIFICS","state","SPECIFIC_MODE_SHOW_CONSOLIDATED","changeTimeRange","timeRangeData","entitiesWithoutData","getEntitiesWithoutData","virtualMachines","remainingEntitiesToLoad","specifiedEntityTypeId","configSpec","loadBasePerfEntities","perfEntities","createDiskGroupsPerfEntities","setSelectedSpecifiedEntities","entities","filter","entity","entitySelectionStateMap","get","entityIdentifier","diskGroups","dgMap","Map","forEach","diskGroup","set","name","key","map","selectedPerfEntity","createBasePerfEntity","diskGroupUuid","entityMap","entityId","entityUuid","entityName","icon","iconShape","selectedEntities","e","change","next","FILTERED_ENTITIES","entitiesMap","isEntitySelected","has","entityIdentifierToVisibility","isSelected","entityIdentifierToColor","closeModalDialog","ConsolidatedVmSelectorComponent","perfOrchestratorService","COLORS","entitiesReady","entitySelect","entityVisibilityStateMap","_entities","notifyEntitiesLoaded","consolidatedViewHelper","toggle","notifyEntitySelectionChange","EntitySelectEvent","EntitiesReadyEvent","PerfGraphicsComponent","perfProvider","capabilityProvider","permissionService","perfPersistenceService","dataService","refWatcher","csdService","inventoryHelper","csdVmService","errorType","DANGER","isRemoteVmView","currentSelectedView","CLUSTER_VM_REMOTE_CONSUMPTION","CLUSTER_COMPUTE_ONLY_VM_REMOTE_CONSUMPTION","isIscsiServiceEnabled","isTopContributorsSupported","showIoInsightData","PerfMonitorViewType","getPerfViewSelectOptionLabel","performanceAvailable","hasEditPrivilege","vmModeSelection","perfModeTypesNew","loadContext","getNavigationData","initTimeRangePicker","hasOwnProperty","multiEntitiesViewEntityUuid","_currentSelectedView","String","viewType","selectedEntityName","isEmpty","selectedRemoteClustersInfos","remoteClustersTreeNodes","objectInfo","availPerfViews","getSupportedPerfViews","type","isTopContributorsNavigationContext","topContributorsNavigationContext","selectedTimePoint","selectedGraphId","handleError","errMsg","errType","errorMsg","updatePerfView","isIscsiRelatedViews","isSingleEntityViewSelected","singleEntityTypeId","getEntityTypeIdByPerfView","getSpecifiedEntityIdByPerfView","isSet","isMultipleEntityPerfEnabled","tooltipActionLinkClicked","timePoint","graphId","_selectedRemoteClustersInfos","objectInfos","moRef","view","getCluster","clusterRef","getClusterCapabilityData","clusterCapabilities","warn","checkViewAvailability","unavailableView","fetch","initializePersistedSelections","SHOW_AVERAGE","isMultiVmPerfSupported","isMultipleEntityPerfSupportedByView","reset","isShowSpecificModeEnabled","isConsolidatedViewStateEnabled","persistedSelection","getPersistedSelection","timeRange","timeRangePickerComponent","setTimeout","timePickerState","currentTimeRange","from","to","currentPickerState","setTimerange","getPerfMonitorCommonPropsData","handleCommonPropsResponse","error","isCluster","contextObjectUid","getNumberOfHosts","hasPermissions","EDIT_CLUSTER","isComputeOnlyCluster","PERF_VIEW_COMPUTE_ONLY_NO_HOSTS","PERF_VIEW_NO_HOSTS","isHost","isHostFromComputeOnlyCluster","HOST_PERF_COMPUTE_ONLY_NOT_SUPPORTED","isVm","isVmRunningOnComputeOnlyCluster","VM_PERF_COMPUTE_ONLY_NOT_SUPPORTED","getProperty","host","cluster","clusterMoId","moIdToManagedObject","getVmCsdConfig","vmCsdConfig","computeCluster","result","getRemoteClustersTreeNodes","mountedRemoteDatastores","PERF_COMPUTE_ONLY_NO_MOUNTED_DATASTORES","isPerformanceServiceEnabled","PERF_DISABLED","isPerformanceServiceHealthy","PERF_UNHEALTHY","isIoInsightSupported","hasIoInsightViewPrivilege","networkDiagnostics","masterNodeTimeDiffMessage","validateMasterNodeTime","currentTimeOnMasterNode","WARNING","Factory","create","timeRangeName","Number","timeRangeFrom","timeRangeTo","pickerState","timePickerHourInterval","pickerInterval","timePickerFromDate","pickerFromDate","Date","isOnInit","isPersistedSelectionInitialized","saveSelection","realtimeChartSupported","REAL_TIME","isPerfHighResolutionSupported","isRealtimeSupportedView","showEntitiesData","isIoInsightRelatedView","isFileShareView","CLUSTER_VM_CONSUMPTION","CLUSTER_ISCSI","HOST_ISCSI","HOST_IO_INSIGHT","CLUSTER_IO_INSIGHT","CLUSTER_FILE_SERVICE","VM_VIRTUAL_DISK","setSize","open","networkDiagnostic","errorTime","formatDate","createdTime","errorMessage","replace","indexOf","slice","label","action","networkDiagnosticActionClicked","startTime","MINUTE_IN_MILLISECONDS","endTime","now","roundToMinuteStart","getTime","CUSTOM_RANGE","eventTypeId","includes","NETWORK_DIAGNOSTICS_EVENT_RDT","changeViewSelection","HOST_VIRTUAL_ADAPTER","nicname","HOST_PHYSICAL_ADAPTER","modeSelection","SPECIFIC_MODE_SHOW_SEPARATELY","vmsWithoutData","getVmsWithoutData","vms","vmMap","vm","isVmSelected","PerfMultiEntitiesMetricsComponent","entitySelected","parentEntityChanging","_selectedChildEntityIndex","isParentDropdownOpened","isChildDropdownOpened","childEntityClicked","selectedParentEntity","children","_selectedParentEntityIndex","parentEntityClicked","objs","init","initialEntityId","preselectEntityById","preselectParentEntityByName","selectedParentEntityIndex","selectedChildEntityIndex","childIndex","parentIndex","find","expandableEntity","child","changes","selectedChildEntity","CLUSTER_ISCSI_TARGET_ENTITY","getSubEntityLabel","searchBoxFocused","isParentDropdown","selectedIndex","parentDropdownElement","nativeElement","contains","target","childDropdownElement","VsanPerfVmModeSelection","selection","performanceRoutes","path","component","PerformanceModule","DocumentationId","IoinsightRunningStatusPipe","status","RUNNING","COMPLETED","LightInfoPrompt","el","focusTrap","confirmText","FileShareSelectorComponent","shareSelected","searchIconVisible","selectShare","share","_searchKeyword","config","isDropdownOpened","selectedShare","getShareIcon","openDropdownMenu","setFullDropdownItemsList","shares","matchedShares","toLowerCase","preselectShare","shareToSelect","getFileShareEntityUuid","fileShareDropdownElement","PerfVmDataService","uid","getPropertyForObjects","VM_CONFIG_INSTANCE_UUID_PROPERTY","queryResult","resultItems","ri","resourceObject","vmRef","vmUuid","vmId","specifiedObjectRef","VsanIoInsightPerfComponent","ioInsightService","taskSvc","navigationService","InstanceField","IoInsightRunningState","enumToArray","loading","showMetricsView","targetInstance","originalIoInsightInstances","filteredIoInsightInstance","isInTimePerspective","ALL","IllustratedMessageType","getAllIOInsightInstances","showLoading","getIoInsightInstances","sort","a","b","filterInstances","refreshOnRunningInstances","newIoInsightClicked","then","refreshWhenTaskDone","togglePerspective","showInTimePerspetive","task","getAwaitResult","refreshView","watchGlobalRefreshSubscription","prototype","constructor","documentationUrl","getVmwareHelpUrl","MONITORING_URL","IO_INSIGHT_DOCUMENTATION","CLUSTER","filters","filteredInstancesByProperties","instance","some","passFilter","filterItemsByTimeRange","field","INSTANCE_NAME","HOST_NAME","hostIoInsightInfos","INSTANCE_STATE","hostItems","hostInfo","Array","values","hostItem","updatedInstance","updateIndex","clearTimeouts","REFRESH_INTERVAL_MS","deleteOperation","hasOtherRunningInstance","isAnotherInstanceRunningOnSameHosts","hostRefs","getHostRefsFromInstance","runningInstance","checkForDuplicateMoRefs","hostIoInsightInfo","TopContributorEntity","parent","readMetricValue","readMetricKey","readMetricLabel","writeMetricValue","writeMetricKey","writeMetricLabel","entityRefId","isVmOnVsanDatastore","diskGroupType","vsanTopContributor","metricsSeries","readMetric","series","writeMetric","ConsolidatedEntitiesData","MultiEntitiesDataPerfComponent","queryService","perfPropProvider","changeDetector","showLoadingChange","selectedSubEntityIndexes","Set","allChartsLoaded","fetchingEntities","entityToMetricsMap","exportData","handleResponse","col","getMetricsColumnByView","extraDesc","getExtraDesc","currentView","HOST_DISK","isVsanMaxEnabled","ENTITY_NAME","err","initSelectedSubEntities","isRealtime","chartsView","chartMetrics","currentEntity","currentValue","fetchChartsData","showMultipleSubEntities","queryEntitiesData","isRdtChecksumSupported","updatePerfEntityType","requestThresholdsForRdtChecksum","entityTypeId","HOST_NETWORK_ENTITY","combinedEntity","getPerfGraphThresholds","customizableThresholds","clear","add","detectChanges","fetchMultipleSubEntitiesChartsData","fetchSingleEntityChartsData","waitForChartsContainer","toggleHighResolutionSpecName","queryChartsDataByTimeRange","domElementExists","Promise","resolve","chartsEntities","updateChartsEntities","getEntityPerfState","vmDisksPerfEntity","nestedPerfEntity","diskPerfEntity","querySpecs","createQuerySpec","updateMetrics","perfEntity","hasEntities","isLoading","size","VsanFileShareDataPerfComponent","fileServiceConfigService","fileServiceShareService","layerSignpostId","LAYER_SIGNPOST_WIDTH","LAYER_SIGNPOST_HEIGHT","smbTooltipVisible","vdfsSignpostVisible","initChartProperties","queryFeatureSwitches","sharePaginationSupported","listAllShares","spec","MAX_SHARE_QUERY_SIZE","filterShares","isFeatureSupportedOnRuntime","PAGINATION","SMB","SMB_PERFORMANCE","featureSupportedMap","smbShareSupported","fileSystemGraphsSupported","smbProtocolLayerPerformanceSupported","fileShareEntity","getFileShareEntity","protocolEntity","prepareOrchestrator","protocol","getPosition","setConsolidatedEntitiesData","CLUSTER_FILE_SERVICE_ENTITY","setOrchestratorEntityData","srMessage","srMessageType","DATA","ButtonGroupWrapDirective","elRef","ARIA_SELECTED_ATTRIBUTE","STYLE_ATTRIBUTE","FIRST_BUTTON_ATTRIBUTE_VALUE","FIRST_BUTTON_SELECTED_ATTRIBUTE_VALUE","ONE_BUTTON_AT_ROW_ATTRIBUTE_VALUE","ONE_BUTTON_AT_ROW_SELECTED_ATTRIBUTE_VALUE","MIDDLE_BUTTON_ATTRIBUTE_VALUE","LAST_BUTTON_ATTRIBUTE_VALUE","updateButtonsBorder","allButtons","querySelectorAll","ALL_BUTTON_ELEMENTS_SELECTOR","isUnset","buttons","button","updateButtonsAtRowStyle","firstBtn","updateButtonAtRowStyle","updateFirstButtonAtRowStyle","lastBtnAtRow","btn","areOnSameRow","updateMiddleButtonStyle","updateLastButtonAtRowStyle","btn1","btn2","getBoundingClientRect","top","setStyle","lastBtn","onlyOneButton","getAttributeNode","style","setAttribute","IoInsightInstanceComponent","viewMetrics","stopInstance","rerunInstance","deleteInstance","renameInstance","ioInsightInstance","applyFormatting","NO_SECONDS","duration","remainingTimeLocalizedTimeUnit","IoInsightMetricsComponent","refreshInterval","REFRESH_INTERVAL_10S_IN_MS","visible","refreshWhenChartsLoaded","back","ioInsightInstanceChange","updateInstance","isCompletedState","getIoInsightInstanceInfo","_instance","refreshOnRunningInstance","setAutoRefreshInterval","durationInMinutes","infoLabel","remainingTimeInMinutes","PerformanceSupportUtil","CLUSTER_VSAN_DIRECT_ENTITY","HOST_VSAN_DIRECT_ENTITY","objectType","remoteClusterTreeNodes","availViews","isIscsiSupported","isEmptyClusterForIscsi","CLUSTER_BACKEND","isFileServiceEnabled","isPmemManagedByVsan","CLUSTER_PMEM","isVsanDirectSupported","CLUSTER_VSAN_DIRECT","HOST","HOST_VM_CONSUMPTION","HOST_BACKEND","HOST_VSAN_DIRECT","HOST_PMEM","VM","VM_CONSUMPTION","PerfEntities","MetricColObj","MetricKeyType","PerfTopContributorsQuerySpec","metricId","timeStamp","VsanSignpostUtil","elementId","signpostWidth","signpostHeight","isInModal","elementBox","document","getElementById","modalVerticalPadding","MODAL_VERTICAL_PADDING","verticalPosition","getVerticalPosition","ARROW_SIZE","modalHorizontalPadding","MODAL_HORIZONTAL_PADDING","horizontalPosition","getHorizontalPosition","elementHeight","bodyBox","body","bottom","height","BOTTOM","TOP","MIDDLE","elementWidth","right","width","RIGHT","left","LEFT","VsanTopContributorsDataPerfComponent","vsanConfigService","DEFAULT_ITEMS_PER_PAGE","MAX_SELECTED_TOP_CONTRIBUTORS","AskVmwareId","propertiesLoading","clusterChartLoading","topContributorsLoading","clusterGraphs","diskGroupGraphs","vmGraphs","_selectedEntityType","updateTopContributorsOnPlotLineClick","updateTopContributorsOnTimePickerClick","topContributorsData","selectedTopContributorItems","perfTopContributorsEntityTypeKeys","PerfTopContributorsEntityType","PerfChartUtil","UnavailableViewSpec","PickerType","Icon","handleProperty","properties","currentEntityId","configurationEx","vsanConfigInfo","defaultConfig","uuid","clusterName","clusterIcon","getObjectTypeIcon","handleTopContributorsError","handleTopContributors","topContributor","fromVmodl","selectedReadMetric","metricLabel","selectedWriteMetric","sortBySelectedMetric","sortByMetric","selectedClusterMetric","keys","updateSelectedTopContributorsGraphs","getKey","_selectedTimePoint","selectedTimePointDate","convertDateToIso8601","retrieveTopContributors","Object","DISK_GROUP","toString","getProperties","unsubscribeTopContributorsSubscription","onEntitySelect","createDefaultMetrics","clusterGraph","graphs","graph","id","selectedClusterGraph","metrics","metric","metricKey","useReadMetricToSortBy","LAST_X_HOURS","updateCurrentTimeRange","areEqual","dateError","selectionData","seriesValues","startIndex","substring","selectedEntityType","getSelectedMetricId","topContributorsSubscription","getTopContributors","subscribe","unsubscribe","selectedVmGraph","selectedDiskGroupGraph","getTopContributorGraph","date","isDateValid","month","getUTCMonth","getUTCFullYear","convertToTwoDigits","getUTCDate","getUTCHours","getUTCMinutes","minDate","maxDate","TIMESTAMP_OPTIONS","navigateTo","VM_PERFORMANCE","topContributorEntity","props","HOST_PERFORMANCE","hostRef","isVirtualObjectsView","DISK_MANAGEMENT","getSelectedVmInvNodes","isGrouped","selectedVirtualMachines","getSelectedVms","setDimensions","WIZARD_XL","allLoadersCompleted","every","item","topContributorItem","formatYAxisLabel","getGraphDefinition","graphsData","timeStamps","minTimeStamp","maxTimeStamp","createVmInventoryNode","vmTopContributorItem","invData","primaryIconId","year","DEFAULT_YEAR_FORMAT","DEFAULT_MONTH_FORMAT","day","DEFAULT_DAY_FORMAT","hour","DEFAULT_HOUR_FORMAT","minute","DEFAULT_MINUTE_FORMAT"],"mappings":"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","file":"104-es5.js","sourcesContent":["<!-- Copyright 2019-2020 VMware, Inc. All rights reserved. -- VMware Confidential -->\n<div class=\"card\" id=\"io-insight-instance-card\">\n   <div class=\"card-header instance-header\">\n      <h4 class=\"instance-title\">\n         {{ioInsightInstance?.name}}\n      </h4>\n      <span class=\"alert\"\n            [ngClass]=getAlertStyle()>\n         {{getStatusLabel()}}\n      </span>\n      <clr-dropdown>\n         <button class=\"dropdown-toggle btn btn-sm btn-link\" clrDropdownToggle>\n            <clr-icon shape=\"ellipsis-vertical\"></clr-icon>\n         </button>\n         <clr-dropdown-menu\n               clrPosition=\"bottom-right\"\n               [attr.aria-label]=\"'vsan.io.insight.actions.srMessage.dropdownMenu.label' | localized\">\n            <button clrDropdownItem (click)=\"this.viewMetrics.emit(ioInsightInstance)\">\n               {{'vsan.io.insight.actions.view.metrics' | localized}}\n            </button>\n<!--            TODO: bbambalo uncomment this when the implementation is ready-->\n<!--            <button clrDropdownItem *ngIf=\"ioInsightInstance.state == IoInsightRunningState.COMPLETED\">-->\n<!--               {{'vsan.io.insight.actions.export' | localized}}</button>-->\n            <button clrDropdownItem *ngIf=\"ioInsightInstance?.state == IoInsightRunningState.COMPLETED\"\n                                    (click)=\"this.renameInstance.emit(ioInsightInstance)\">\n               {{'vsan.io.insight.actions.rename' | localized}}\n            </button>\n            <button clrDropdownItem *ngIf=\"ioInsightInstance?.state == IoInsightRunningState.RUNNING\"\n                                    (click)=\"this.stopInstance.emit(ioInsightInstance)\">\n               {{'vsan.io.insight.actions.stop' | localized}}\n            </button>\n            <button clrDropdownItem *ngIf=\"ioInsightInstance?.state == IoInsightRunningState.COMPLETED\"\n                                    (click)=\"this.rerunInstance.emit(ioInsightInstance)\">\n               {{'vsan.io.insight.actions.rerun' | localized}}\n            </button>\n            <button clrDropdownItem *ngIf=\"ioInsightInstance?.state == IoInsightRunningState.COMPLETED\"\n                                    (click)=\"this.deleteInstance.emit(ioInsightInstance)\">\n               {{'vsan.io.insight.actions.delete' | localized}}\n            </button>\n         </clr-dropdown-menu>\n      </clr-dropdown>\n   </div>\n   <div class=\"card-block\">\n      <span id=\"duration-label\">\n         {{getDurationLabel}}\n      </span>\n\n   </div>\n</div>\n","/* Copyright 2020-2022 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, EventEmitter, Input, OnInit, Output} from \"@angular/core\";\nimport {PerfChartUtil} from \"@component/chart/performance/perf-chart-util\";\nimport {InventoryNode, InventorySelectionEvent} from \"@component/inventory/inventory-node\";\nimport {VmPerformanceInventoryService} from \"@generated/vm-performance-inventory-service\";\nimport {ManagedObject} from \"@service/managed-object\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {VsanPerfVmMode} from \"./perf-vm-mode\";\nimport {VsanPerfVmModeSelection} from \"./perf-vm-mode-selection.data\";\n\n@Component({\n   templateUrl: \"perf-vm-mode-selector.html\",\n   styleUrls: [\"perf-vm-mode-selector.scss\"],\n   selector: \"vsan-perf-vm-mode-selector\",\n})\nexport class PerfVmModeSelectorComponent implements OnInit {\n\n   readonly SPECIFIED_ENTITIES_SELECTION_LIMIT: number = 10;\n   readonly perfModeTypes: typeof VsanPerfVmMode = VsanPerfVmMode;\n\n   private _perfVmModeSelection: VsanPerfVmModeSelection;\n\n   /**\n    * The root objects for the InventoryBrowser\n    */\n   root: ManagedObject[];\n\n   /**\n    * The selected VM nodes\n    */\n   get vmNodes(): InventoryNode[] {\n      return this._perfVmModeSelection.vmInventoryNodes;\n   }\n\n   /**\n    * Indicates if Top Contributors will be shown\n    */\n   @Input()\n   showTopContributors: boolean;\n\n   /**\n    * Emits the new selection state on every change. The event is emitted with the default initialization value\n    * when the component is initialized.\n    */\n   @Output()\n   vmModeSelectionChange: EventEmitter<VsanPerfVmModeSelection> = new EventEmitter<VsanPerfVmModeSelection>();\n\n   /**\n    * Indicates if the \"show separate charts\" toggle is checked.\n    */\n   get isSeparateCharts(): boolean {\n      return this._perfVmModeSelection.isSeparateCharts;\n   }\n\n   set isSeparateCharts(val: boolean) {\n      this._perfVmModeSelection.isSeparateCharts = val;\n      this.raiseChangeEvent();\n   }\n\n   /**\n    * The current radio button selection\n    */\n   get mode(): VsanPerfVmMode {\n      return this._perfVmModeSelection.mode;\n   }\n\n   @Input()\n   set mode(val: VsanPerfVmMode) {\n      this._perfVmModeSelection.mode = val;\n      this.raiseChangeEvent();\n   }\n\n   @Input()\n   set vmModeSelection(val: VsanPerfVmModeSelection) {\n      this._perfVmModeSelection = val;\n   }\n\n   get vmModeSelection(): VsanPerfVmModeSelection {\n      return this._perfVmModeSelection;\n   }\n\n   constructor(public vmInventoryService: VmPerformanceInventoryService) {\n   }\n\n   ngOnInit(): void {\n      this.root = [ManagedObject.contextObject];\n      if (!this._perfVmModeSelection) {\n         this._perfVmModeSelection = VsanPerfVmModeSelection.initDefault(ManagedObject.contextObject);\n         this.raiseChangeEvent();\n      }\n   }\n\n   get dropdownLabel(): string {\n      switch (this._perfVmModeSelection.mode) {\n         case VsanPerfVmMode.CLUSTER_AGGREGATION:\n         case VsanPerfVmMode.HOST_AGGREGATION:\n            return this.aggregatedLevelMetricsLabel;\n         case VsanPerfVmMode.PER_VM:\n            const selectedCount: number = this.vmNodes.length;\n            return VsanUiUtils.getString(\"vsan.monitor.cluster.performance.showSpecificVMs.template\",\n                  selectedCount > 0\n                        ? \"(\" + selectedCount + \")\"\n                        : \"\");\n         case VsanPerfVmMode.TOP_CONTRIBUTORS:\n            return VsanUiUtils.getString(\"vsan.monitor.cluster.performance.topContributors.title\");\n         default:\n            throw new Error(\"Unknown VsanPerfVmMode!\");\n      }\n   }\n\n   get aggregatedLevelMetricsLabel(): string {\n      switch (this.aggregatedVsanPerfVmMode) {\n         case VsanPerfVmMode.HOST_AGGREGATION:\n            return VsanUiUtils.getString(\"vsan.monitor.host.performance.hostLevelMetrics.title\");\n         case VsanPerfVmMode.CLUSTER_AGGREGATION:\n         default:\n            return VsanUiUtils.getString(\"vsan.monitor.cluster.performance.clusterLevelMetrics.title\");\n      }\n   }\n\n   get aggregatedVsanPerfVmMode(): VsanPerfVmMode {\n      return PerfChartUtil.getAggregatedVsanPerfVmMode(ManagedObject.contextObject);\n   }\n\n   get isPerVmMode(): boolean {\n      return this._perfVmModeSelection.mode === VsanPerfVmMode.PER_VM;\n   }\n\n   selectNode(event: InventorySelectionEvent): void {\n      if (!event.node.data.isLeafNode || event.node.selected === undefined) {\n         // Don't select anything if non-leaf node is clicked.\n         return;\n      }\n\n      if (event.node.selected) {\n         // Add the node to the list of selected nodes\n         this._perfVmModeSelection.vmInventoryNodes.push(event.node);\n      } else {\n         // Find the index of the deselected node\n         const index: number = this._perfVmModeSelection.vmInventoryNodes\n               .findIndex((vmNode: InventoryNode) => vmNode.data.nodeRef.value === event.node.data.nodeRef.value);\n         // If found, remove if from the collection\n         if (index !== -1) {\n            this._perfVmModeSelection.vmInventoryNodes.splice(index, 1);\n         }\n      }\n\n      this.raiseChangeEvent();\n   }\n\n   get isVmSelectionAllowed(): boolean {\n      return this.vmNodes.length < this.SPECIFIED_ENTITIES_SELECTION_LIMIT;\n   }\n\n   get isVmSelectorStateEnabled(): boolean {\n      return this._perfVmModeSelection.mode === VsanPerfVmMode.PER_VM;\n   }\n\n   setIsConsolidatedView(val: boolean): void {\n      this.isSeparateCharts = val;\n      this.raiseChangeEvent();\n   }\n\n   stopPropagation($event: any): void {\n      $event.stopImmediatePropagation();\n      $event.stopPropagation();\n   }\n\n   private raiseChangeEvent(): void {\n      this.vmModeSelectionChange.emit(this._perfVmModeSelection);\n   }\n}\n","/* Copyright 2020 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, OnInit} from \"@angular/core\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {ConsolidatedEntitiesData} from \"./consolidated-entities-data.data\";\nimport {BasePerfEntity} from \"../model/base-perf-entity\";\nimport {PerfModeState, PerfModeType, PerfOrchestratorService} from \"@util/performance/perf-orchestrator-service\";\nimport {PerfChartDataConstants} from \"@component/chart/performance/perf-chart-util\";\nimport {PerfMonitorCommonPropsData} from \"@generated/perf-monitor-common-props-data\";\nimport {PerfTimeRangeData} from \"@generated/perf-time-range-data\";\nimport {EntitiesReadyEvent, EntitySelectEvent} from \"./consolidated-vm-selector.component\";\nimport {ConsolidatedContextData} from \"./consolidated-context.data\";\nimport {InventoryNode} from \"@component/inventory/inventory-node\";\nimport {PerfChangeContext} from \"@util/performance/perf-data\";\nimport {PerfVmDataService} from \"./perf-vm-data.service\";\nimport {PerfTopContributorsEntityType} from \"@generated/perf-top-contributors-entity-type\";\n\n@Component({\n   templateUrl: \"consolidated-dialog.html\",\n   selector: \"consolidated-dialog\",\n   styleUrls: [\"consolidated-dialog.scss\"]\n})\nexport class ConsolidatedDialogComponent implements OnInit {\n   consolidatedEntitiesData: ConsolidatedEntitiesData = new ConsolidatedEntitiesData();\n   commonPerfData: PerfMonitorCommonPropsData;\n   timePickerRange: PerfTimeRangeData;\n   singleEntityType: string;\n   visibleGraphId: string;\n   title: string;\n\n   constructor(public perfOrchestrator: PerfOrchestratorService,\n         private vmDataService: PerfVmDataService,) {}\n\n   async ngOnInit() {\n      const context: ConsolidatedContextData = VsanUiUtils.getModalContext() as ConsolidatedContextData;\n      this.commonPerfData = context.commonPerfData;\n      this.visibleGraphId = context.visibleGraphId;\n      this.timePickerRange = context.timePickerRange;\n      this.title = context.entityType === PerfTopContributorsEntityType.VIRTUAL_MACHINE ?\n            VsanUiUtils.getString(\"consolidated.vm.dialog.title\") :\n            VsanUiUtils.getString(\"consolidated.disk.group.dialog.title\");\n\n      this.singleEntityType = context.entityType === PerfTopContributorsEntityType.VIRTUAL_MACHINE ?\n            PerfChartDataConstants.CLUSTER_VM_CONSUMPTION_ENTITY:\n            PerfChartDataConstants.HOST_DISK_GROUP_ENTITY;\n      this.perfOrchestrator.data.parentEntityType = this.singleEntityType;\n      this.perfOrchestrator.data.entityTypes = this.commonPerfData.entityTypes;\n      this.perfOrchestrator.data.entityType = context.entityType === PerfTopContributorsEntityType.VIRTUAL_MACHINE ?\n            PerfChartDataConstants.VM_CONSUMPTION_ENTITY:\n            PerfChartDataConstants.HOST_DISK_GROUP_ENTITY;\n      this.perfOrchestrator.mode = PerfModeType.SHOW_SPECIFICS;\n      this.perfOrchestrator.state = PerfModeState.SPECIFIC_MODE_SHOW_CONSOLIDATED;\n\n      this.perfOrchestrator.changeTimeRange(this.timePickerRange);\n      // TODO [kaleksandrov] Leftover workaround. Remove it once the perf orchestrator is gone\n      this.perfOrchestrator.data.timeRangeData = this.timePickerRange;\n\n      const entitiesWithoutData: InventoryNode[] = this.getEntitiesWithoutData(context.virtualMachines);\n      // TODO [kaleksandrov] This \"remainingEntitiesToLoad\" prop is used to handle the loading spinner in other\n      // views. Pass the loading flag as input instead.\n      this.perfOrchestrator.remainingEntitiesToLoad = entitiesWithoutData.length;\n      const specifiedEntityTypeId: string = context.entityType === PerfTopContributorsEntityType.VIRTUAL_MACHINE ?\n            PerfChartDataConstants.VM_CONSUMPTION_ENTITY:\n            PerfChartDataConstants.HOST_DISK_GROUP_ENTITY;\n      const configSpec: any = this.commonPerfData.entityTypes[specifiedEntityTypeId];\n      let perfEntities: BasePerfEntity[];\n      if (context.entityType === PerfTopContributorsEntityType.VIRTUAL_MACHINE) {\n         perfEntities = await this.vmDataService.loadBasePerfEntities(entitiesWithoutData, configSpec);\n      } else {\n         perfEntities = await this.createDiskGroupsPerfEntities(entitiesWithoutData, configSpec);\n      }\n      this.setSelectedSpecifiedEntities(perfEntities);\n\n      this.consolidatedEntitiesData.entities = this.perfOrchestrator.data.entities\n            .filter((entity: BasePerfEntity) => this.perfOrchestrator.data.entitySelectionStateMap\n                  .get(entity.entityIdentifier));\n   }\n\n   createDiskGroupsPerfEntities(diskGroups: InventoryNode[], configSpec: any): BasePerfEntity[] {\n      if (!diskGroups || diskGroups.length === 0) {\n         return [];\n      }\n\n      const dgMap: Map<string, InventoryNode> = new Map<string, InventoryNode>();\n      diskGroups.forEach((diskGroup: InventoryNode) => dgMap.set(diskGroup.data.name, diskGroup));\n\n      const perfEntities: BasePerfEntity[] = [];\n      dgMap.forEach((value, key, map) => {\n         const selectedPerfEntity: BasePerfEntity = this.createBasePerfEntity(key, map, configSpec);\n         perfEntities.push(selectedPerfEntity);\n      });\n\n      return perfEntities;\n   }\n\n   private createBasePerfEntity(diskGroupUuid: string, entityMap: Map<string,\n         InventoryNode>, configSpec: any): BasePerfEntity {\n      const selectedPerfEntity = new BasePerfEntity();\n      selectedPerfEntity.entityId = PerfChartDataConstants.HOST_DISK_GROUP_ENTITY;\n      selectedPerfEntity.entityUuid = diskGroupUuid;\n\n      const node: InventoryNode = entityMap.get(diskGroupUuid);\n      selectedPerfEntity.entityName = node.data.name;\n      selectedPerfEntity.icon = node.data.iconShape;\n      selectedPerfEntity.configSpec = configSpec;\n      return selectedPerfEntity;\n   }\n\n   private setSelectedSpecifiedEntities(perfEntities: BasePerfEntity[]): void {\n      // TODO [kaleksandrov] Once the perfOrchestrator is gone this data will be kept in the current compoennt\n      // and this whole method won't be needed.\n      this.perfOrchestrator.data.entities.push(...perfEntities);\n      if (this.perfOrchestrator.data.entities == null || this.perfOrchestrator.data.entitySelectionStateMap == null) {\n         return;\n      }\n      this.perfOrchestrator.data.selectedEntities = this.perfOrchestrator.data.entities\n            .filter((e: BasePerfEntity) => this.perfOrchestrator.data.entitySelectionStateMap.get(e.entityIdentifier));\n      this.perfOrchestrator.change.next(PerfChangeContext.FILTERED_ENTITIES);\n\n      this.consolidatedEntitiesData.entities = this.perfOrchestrator.data.entities\n            .filter((entity: BasePerfEntity) => this.perfOrchestrator.data.entitySelectionStateMap\n                  .get(entity.entityIdentifier));\n   }\n\n   /**\n    * Filters out only the VMs/Disk Groups for which we don't have data.\n    */\n   private getEntitiesWithoutData(entities: InventoryNode[]): InventoryNode[] {\n      // Convert the VM/Disk Group list to a set of MoRef IDs for easier and faster lookup\n      const entitiesMap: Map<string, InventoryNode> = new Map<string, InventoryNode>();\n      entities.forEach((entity: InventoryNode) => {\n         if (entity.data.nodeRef) {\n            entitiesMap.set(entity.data.nodeRef.value, entity);\n         } else {\n            // disk group doesn't have node ref, use its uuid as key\n            entitiesMap.set(entity.data.name, entity);\n         }\n      });\n\n      const entitiesWithoutData: InventoryNode[] = [];\n\n      entitiesMap.forEach((value: InventoryNode, key: string) => {\n         this.perfOrchestrator.data.entitySelectionStateMap.set(key, true);\n         const node: InventoryNode = entitiesMap.get(key);\n         const index: number = this.perfOrchestrator.data.entities\n               .findIndex(entity => entity.entityIdentifier === node.data.nodeRef.value);\n         if (index === -1) {\n            entitiesWithoutData.push(node);\n         }\n      });\n\n      // Update the selection state of the VMs/Disk Groups in the cache\n      this.perfOrchestrator.data.entitySelectionStateMap.forEach((value: boolean, key: string) => {\n         const isEntitySelected: boolean = entitiesMap.has(key);\n         this.perfOrchestrator.data.entitySelectionStateMap.set(key, isEntitySelected);\n      });\n\n      return entitiesWithoutData;\n   }\n\n   onEntitySelect(event: EntitySelectEvent): void {\n      // TODO [kaleksandrov] Delete once the selection state is read from the\n      // this.perfOrchestrator.consolidatedViewHelper.toggle(event.entity.entityIdentifier, event.isSelected);\n      //\n      // !!!!!!!!!!!!!!!!!\n      // this.consolidatedEntitiesData.entityVisibilityStateMap =\n      //       this.perfOrchestrator.consolidatedViewHelper.entityVisibilityStateMap;\n      this.consolidatedEntitiesData.entityIdentifierToVisibility[event.entity.entityIdentifier] = event.isSelected;\n   }\n\n   onEntitiesReady(event: EntitiesReadyEvent): void {\n      this.consolidatedEntitiesData.entityIdentifierToColor = event.entityIdentifierToColor;\n   }\n\n   close(): void {\n      VsanUiUtils.closeModalDialog();\n   }\n}\n","<!-- Copyright 2017-2021 VMware, Inc. All rights reserved. -- VMware Confidential -->\n<div class=\"spinner spinner-lg central-spinner\"\n     *ngIf=\"fetchingEntities\">\n</div>\n<div class=\"entities-selection\" *ngIf=\"hasEntities\">\n   <vsan-perf-multi-entities-metrics [entities]=\"entities\"\n                                     [initialEntityId]=\"initialEntityId\"\n                                     [selectedEntityName]=\"selectedEntityName\"\n                                     (entitySelected)=\"currentEntity = $event\"\n                                     (parentEntityChanging)=\"initSelectedSubEntities()\">\n   </vsan-perf-multi-entities-metrics>\n   <vsan-perf-chart-export *ngIf=\"showMultipleEntitiesCharts || showSingleEntityCharts\"\n                           [extraDesc]=\"extraDesc\"\n                           [commonPerfData]=\"commonPerfData\"\n                           [entityToMetricsMap]=\"entityToMetricsMap\"\n                           [entity]=\"currentEntity\"\n                           [data]=\"exportData\"\n                           [showSubEntities]=\"showMultipleSubEntities\">\n   </vsan-perf-chart-export>\n</div>\n<vsan-illustrated-message *ngIf=\"!fetchingEntities && !hasEntities && !hasCurrentEntity\"\n                          [type]=\"IllustratedMessageType.MISSING_DATA\"\n                          [message]=\"noEntitiesMessage\">\n</vsan-illustrated-message>\n<vsan-perf-detail-charts *ngIf=\"showSingleEntityCharts\"\n                         id=\"singleSubEntityChartsContainer\"\n                         [commonPerfData]=\"commonPerfData\"\n                         [parentLoading]=\"!hasCurrentEntity\"\n                         [isRealtime]=\"isRealtime\"\n                         [extraDesc]=\"extraDesc\"\n                         (allChartsLoaded)=\"onAllChartsLoaded($event)\"\n                         [customizableThresholds]=\"customizableThresholds\">\n</vsan-perf-detail-charts>\n\n<clr-accordion *ngIf=\"showMultipleEntitiesCharts\"\n               [clrAccordionMultiPanel]=\"true\">\n   <clr-accordion-panel *ngFor=\"let perfEntity of chartsEntities; let i = index;\"\n                        [clrAccordionPanelOpen]=\"selectedSubEntityIndexes.has(i)\"\n                        (clrAccordionPanelOpenChange)=\"onSubEntitySelectionChanged($event, i)\">\n      <clr-accordion-title>{{perfEntity.entityLabelName}}</clr-accordion-title>\n      <clr-accordion-content>\n         <vsan-perf-detail-charts\n               [parentLoading]=\"!hasCurrentEntity\"\n               [commonPerfData]=\"commonPerfData\"\n               [extraDesc]=\"extraDesc\"\n               [chartMetrics]=\"entityToMetricsMap.get(perfEntity)\"\n               [entity]=\"perfEntity\"\n               [isRealtime]=\"isIoInsightRealtime\"\n               [collapsible]=\"true\"\n               (allChartsLoaded)=\"allChartsLoaded.emit($event)\">\n         </vsan-perf-detail-charts>\n      </clr-accordion-content>\n   </clr-accordion-panel>\n</clr-accordion>","/* Copyright 2020 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, EventEmitter, Input, Output} from \"@angular/core\";\nimport {PerfOrchestratorService} from \"@util/performance/perf-orchestrator-service\";\nimport {BasePerfEntity} from \"../model/base-perf-entity\";\n\n@Component({\n   templateUrl: \"consolidated-vm-selector.html\",\n   styleUrls: [\"consolidated-vm-selector.scss\"],\n   selector: \"vsan-consolidated-vm-selector\",\n})\nexport class ConsolidatedVmSelectorComponent {\n\n   private readonly COLORS: string[] = [\n      \"#71229F\", // Purple\n      \"#298678\", // Dark Green\n      \"#EE3A00\", // Dark Red\n      \"#1F519D\", // Dark Blue\n      \"#7A73C5\", // Violet\n      \"#9ED0E2\", // Light Blue\n      \"#F6C02C\", // Orange\n      \"#F4A27A\", // Light Red\n      \"#02ff06\", // Light Green\n      \"#fcb0d6\", // Pink\n   ];\n\n   private _entities: BasePerfEntity[];\n\n   get entities(): BasePerfEntity[] {\n      return this._entities;\n   }\n\n   @Input()\n   set entities(val: BasePerfEntity[]) {\n      this._entities = val;\n      this.entityIdentifierToColor = {};\n      this.entityVisibilityStateMap = {};\n\n      val.forEach((entity: BasePerfEntity, index: number) => {\n         this.entityIdentifierToColor[entity.entityIdentifier] = this.COLORS[index];\n         this.entityVisibilityStateMap[entity.entityIdentifier] = true;\n      });\n      this.notifyEntitiesLoaded();\n   }\n\n   entityIdentifierToColor: { [key: string]: string } = {};\n\n   @Output()\n   entitiesReady: EventEmitter<EntitiesReadyEvent> = new EventEmitter<EntitiesReadyEvent>();\n\n   @Output()\n   entitySelect: EventEmitter<EntitySelectEvent> = new EventEmitter<EntitySelectEvent>();\n\n   @Input()\n   entityVisibilityStateMap: { [key: string]: boolean } = {};\n\n   constructor(private perfOrchestratorService: PerfOrchestratorService) {\n   }\n\n   onEntitySelect(entity: BasePerfEntity, isSelected: boolean): void {\n      // TODO [kaleksandrov] Delete once the PerfView component is refactored to not read charts data\n      // directly from the PerfOrchestrator\n      // FROM HERE\n      this.perfOrchestratorService.consolidatedViewHelper.toggle(entity.entityIdentifier, isSelected);\n      // TO HERE\n\n      this.entityVisibilityStateMap[entity.entityIdentifier] = isSelected;\n      this.notifyEntitySelectionChange(entity, isSelected);\n   }\n\n   private notifyEntitySelectionChange(entity: BasePerfEntity, isSelected: boolean): void {\n      const event: EntitySelectEvent = new EntitySelectEvent();\n      event.entity = entity;\n      event.isSelected = isSelected;\n      this.entitySelect.emit(event);\n   }\n\n   private notifyEntitiesLoaded(): void {\n      const event: EntitiesReadyEvent = new EntitiesReadyEvent();\n      event.entityIdentifierToColor = this.entityIdentifierToColor;\n      this.entitiesReady.emit(event);\n   }\n}\n\nexport class EntitySelectEvent {\n   entity: BasePerfEntity;\n   isSelected: boolean;\n}\n\nexport class EntitiesReadyEvent {\n   entityIdentifierToColor: { [key: string]: string };\n}\n","/* Copyright 2017-2022 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, OnInit, ViewChild} from \"@angular/core\";\nimport {ChartPlotLineSelectionData} from \"@component/chart/model/chart-plot-line-selection.data\";\nimport {PerfChartUtil} from \"@component/chart/performance/perf-chart-util\";\nimport {RangePickerState} from \"@component/datetime-picker/time-range-picker/range-picker-state\";\nimport {VsanTimeRangePickerComponent} from \"@component/datetime-picker/time-range-picker/time-range-picker.component\";\nimport {InventoryNode as InvNode} from \"@component/inventory/inventory-node\";\nimport {TreeNode} from \"@component/inventory/tree-view/tree-node\";\nimport {UnavailableViewSpec} from \"@component/unavailable-view/unavailable-view-spec\";\nimport {AlertActionLink} from \"@component/validation/alert-action-link\";\nimport {AlertType} from \"@component/validation/alert-type\";\nimport {CsdService} from \"@generated/csd-service\";\nimport {CsdVmService} from \"@generated/csd-vm-service\";\nimport {InventoryNode} from \"@generated/inventory-node\";\nimport {NetworkDiagnostic} from \"@generated/network-diagnostic\";\nimport {PerfMonitorCommonPropsData} from \"@generated/perf-monitor-common-props-data\";\nimport {PerfTimeRangeData} from \"@generated/perf-time-range-data\";\nimport {PermissionService} from \"@generated/permission-service\";\nimport {Privileges} from \"@generated/privileges\";\nimport {VmCsdConfig} from \"@generated/vm-csd-config\";\nimport {VsanCapabilityData} from \"@generated/vsan-capability-data\";\nimport {VsanCapabilityProvider} from \"@generated/vsan-capability-provider\";\nimport {VsanInventoryHelper} from \"@generated/vsan-inventory-helper\";\nimport {VsanPerfPropertyProvider} from \"@generated/vsan-perf-property-provider\";\nimport {FullTimeRangeSelectionData} from \"@model/full-time-range-selection.data\";\nimport {TopContributorsContext} from \"@navigation/context/top-contributors-context\";\nimport {ClusterComputeResource, HostSystem} from \"@service/client/dataservice/data-service-property\";\nimport {DataServiceUtil} from \"@service/client/dataservice/data-service-util\";\nimport {DataServiceClient} from \"@service/client/dataservice/data-service.service\";\nimport {ErrorMessage} from \"@service/flow/error-message.decorator\";\nimport {Loader} from \"@service/flow/loader.decorator\";\nimport {LoadingIndicator} from \"@service/flow/loading-indicator.decorator\";\nimport {RefreshHandler} from \"@service/global-refresh.service\";\nimport {ManagedObject, ManagedObjectUtils} from \"@service/managed-object\";\nimport {PerformancePersistenceService} from \"@service/performance-persistence.service\";\nimport {Logger} from \"@util/logger\";\nimport {ModalBuilder} from \"@util/modal-builder\";\nimport {PerfChangeContext} from \"@util/performance/perf-data\";\nimport {PerfModeState, PerfModeType, PerfOrchestratorService} from \"@util/performance/perf-orchestrator-service\";\nimport {ReferenceWatcher} from \"@util/reference-watcher\";\nimport {VsanDateTimeUtils} from \"@util/vsan-dateteime-util\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {BasePerfEntity} from \"../model/base-perf-entity\";\nimport {PerfMonitorViewType} from \"../model/perf-monitor-view-type.model\";\nimport {PerformanceSupportUtil} from \"../util/perf-support-util\";\nimport {PerformanceUtils} from \"../util/perf-utils\";\nimport {ConsolidatedEntitiesData} from \"./consolidated-entities-data.data\";\nimport {EntitiesReadyEvent, EntitySelectEvent} from \"./consolidated-vm-selector.component\";\nimport {PerfVmDataService} from \"./perf-vm-data.service\";\nimport {VsanPerfVmMode} from \"./perf-vm-mode-selector/perf-vm-mode\";\nimport {VsanPerfVmModeSelection} from \"./perf-vm-mode-selector/perf-vm-mode-selection.data\";\n\n@Component({\n   templateUrl: \"perf-graphics.html\",\n   styleUrls: [\"perf-graphics.scss\"],\n   selector: \"vsan-performance\",\n   providers: [ReferenceWatcher],\n})\nexport class PerfGraphicsComponent implements OnInit {\n   private static readonly NETWORK_DIAGNOSTICS_EVENT_RDT: string = \"rdt\";\n\n   @LoadingIndicator()\n   loading: boolean;\n\n   @ErrorMessage()\n   errorMsg: string;\n\n   errorType: string = AlertType.DANGER;\n   availPerfViews: PerfMonitorViewType[];\n\n   isRemoteVmView = () => this.currentSelectedView === PerfMonitorViewType.CLUSTER_VM_REMOTE_CONSUMPTION ||\n         this.currentSelectedView === PerfMonitorViewType.CLUSTER_COMPUTE_ONLY_VM_REMOTE_CONSUMPTION;\n\n   isComputeOnlyCluster: boolean;\n\n   private isIscsiServiceEnabled: boolean = false;\n   isTopContributorsSupported: boolean = false;\n\n   clusterCapabilities: VsanCapabilityData;\n\n   root: ManagedObject[];\n\n   // Properties used for monitoring the performance to a remote server cluster in the case of CSD\n   remoteClustersTreeNodes: TreeNode[];\n\n   // whether the ioinsight is supported and user has Global.Diagnostics permission\n   showIoInsightData: boolean = false;\n\n   networkDiagnostics: NetworkDiagnostic[];\n\n   selectedEntityName: string;\n\n   private _selectedRemoteClustersInfos: InventoryNode[];\n\n   PerfMonitorViewType: typeof PerfMonitorViewType = PerfMonitorViewType;\n\n   get selectedRemoteClustersInfos(): InventoryNode[] {\n      return this._selectedRemoteClustersInfos;\n   }\n\n   set selectedRemoteClustersInfos(objectInfos: InventoryNode[]) {\n      this._selectedRemoteClustersInfos = objectInfos;\n      this.updatePerfView();\n   }\n\n   get selectedRemoteClusterRef(): ManagedObject {\n      return !VsanUiUtils.isEmpty(this.selectedRemoteClustersInfos) ? this.selectedRemoteClustersInfos[0].moRef : null;\n   }\n\n   commonPerfData: PerfMonitorCommonPropsData;\n   getPerfViewSelectOptionLabel: (view: PerfMonitorViewType) => string = PerformanceUtils.getPerfViewSelectOptionLabel;\n   clusterRef: ManagedObject;\n\n   performanceAvailable: boolean = false;\n   unavailableView: UnavailableViewSpec;\n   hasEditPrivilege: boolean = false;\n\n   multiEntitiesViewEntityUuid: string;\n   singleEntityTypeId: string;\n   timePickerRange: PerfTimeRangeData;\n   timePickerState: RangePickerState;\n   timePickerHourInterval: number;\n   timePickerFromDate: Date;\n\n   vmModeSelection: VsanPerfVmModeSelection = VsanPerfVmModeSelection.initDefault(ManagedObject.contextObject);\n\n   consolidatedEntitiesData: ConsolidatedEntitiesData = new ConsolidatedEntitiesData();\n\n   // chart's tooltip data\n   selectedGraphId: string;\n   selectedTimePoint: string;\n\n   /*\n   * For now only when CLUSTER_VM_CONSUMPTION / HOST_VM_CONSUMPTION view is multi entity perf\n   */\n   isMultipleEntityPerfEnabled: boolean;\n\n   // TODO [kaleksandrov] Rename once the other perfModeTypes is remvoed\n   readonly perfModeTypesNew: typeof VsanPerfVmMode = VsanPerfVmMode;\n\n   private _currentSelectedView: PerfMonitorViewType;\n\n   get currentSelectedView(): PerfMonitorViewType {\n      return this._currentSelectedView;\n   }\n\n   set currentSelectedView(view: PerfMonitorViewType) {\n      if (view === this._currentSelectedView) {\n         return;\n      }\n      this._currentSelectedView = view;\n      this.updatePerfView();\n   }\n\n   @ViewChild(VsanTimeRangePickerComponent)\n   timeRangePickerComponent: VsanTimeRangePickerComponent;\n\n   constructor(private perfProvider: VsanPerfPropertyProvider,\n         public perfOrchestrator: PerfOrchestratorService,\n         private capabilityProvider: VsanCapabilityProvider,\n         private permissionService: PermissionService,\n         private perfPersistenceService: PerformancePersistenceService,\n         private dataService: DataServiceClient,\n         private vmDataService: PerfVmDataService,\n         private refWatcher: ReferenceWatcher,\n         private csdService: CsdService,\n         private inventoryHelper: VsanInventoryHelper,\n         private csdVmService: CsdVmService) {\n   }\n\n   @Loader()\n   async ngOnInit(): Promise<void> {\n      try {\n         this.clusterRef = await this.inventoryHelper.getCluster(ManagedObject.contextObject);\n         this.clusterCapabilities = await this.capabilityProvider.getClusterCapabilityData(this.clusterRef);\n      } catch (error) {\n         Logger.warn(\"Unable to get cluster capabilities: \", error);\n      }\n\n      this.root = [ManagedObject.contextObject];\n      await this.checkViewAvailability();\n      if (this.unavailableView) {\n         return;\n      }\n      await this.fetch();\n      this.initializePersistedSelections();\n   }\n\n   changeViewSelection(view: PerfMonitorViewType): void {\n      // reset the vm perf. composite view components to defaults\n      this.vmModeSelection = VsanPerfVmModeSelection.initDefault(ManagedObject.contextObject);\n      this.perfOrchestrator.mode = PerfModeType.SHOW_AVERAGE;\n\n      this.currentSelectedView = view;\n\n      if (this.clusterCapabilities?.isMultiVmPerfSupported) {\n         this.isMultipleEntityPerfEnabled =\n               PerformanceUtils.isMultipleEntityPerfSupportedByView(this.currentSelectedView);\n\n         if (!this.isMultipleEntityPerfEnabled) {\n            this.perfOrchestrator.reset();\n         }\n      }\n\n      this.initializePersistedSelections();\n   }\n\n   get isConsolidatedVmSelectorVisible(): boolean {\n      return this.isMultipleEntityPerfEnabled\n            && this.perfOrchestrator.isShowSpecificModeEnabled\n            && this.perfOrchestrator.isConsolidatedViewStateEnabled\n            && !!this.consolidatedEntitiesData.entities?.length;\n   }\n\n   get isPersistedSelectionInitialized(): boolean {\n      const persistedSelection: FullTimeRangeSelectionData =\n            this.perfPersistenceService.getPersistedSelection();\n\n      // If there is no persisted selection. it's replaced by view's default one\n      if (persistedSelection == null) {\n         return true;\n      }\n\n      return this.timePickerRange === persistedSelection.timeRange;\n   }\n\n   private initializePersistedSelections(): void {\n      if (this.timeRangePickerComponent == null) {\n         this.refWatcher.setTimeout(() => {\n            this.initializePersistedSelections();\n         }, 1000);\n         return;\n      }\n\n      const persistedSelection: FullTimeRangeSelectionData =\n            this.perfPersistenceService.getPersistedSelection();\n\n      if (persistedSelection != null) {\n         const state: RangePickerState = persistedSelection.state;\n         this.timePickerState = state;\n\n         const timeRange: PerfTimeRangeData = persistedSelection.timeRange;\n         if (!timeRange) {\n            return;\n         }\n         if (this.timeRangePickerComponent.currentTimeRange.from !== timeRange.from ||\n               this.timeRangePickerComponent.currentTimeRange.to !== timeRange.to ||\n               this.timeRangePickerComponent.currentPickerState !== state) {\n            this.timePickerRange = timeRange;\n            this.timeRangePickerComponent.setTimerange(timeRange, state);\n         }\n      }\n   }\n\n   @Loader()\n   @RefreshHandler\n   async fetch(): Promise<void> {\n      if (this.performanceAvailable) {\n         /**\n          * If performanceAvailable is true, it means that page was already loaded - performance service\n          * is enabled or the cluster is compute-only. So, the trigger comes from Global Refresh.\n          * On Global Refresh trigger, the page\n          * must be reloaded only if performance service was not enabled previously.\n          */\n         return;\n      }\n\n      this.errorMsg = null;\n      try {\n         const data: PerfMonitorCommonPropsData =\n               await this.perfProvider.getPerfMonitorCommonPropsData(ManagedObject.contextObject);\n         await this.handleCommonPropsResponse(data);\n      } catch (err) {\n         Logger.error(\"error when fetching PerfChartAggregationData, \", err);\n         this.handleError(VsanUiUtils.getString(\"vsan.perf.service.chart.common.error\"));\n      }\n   }\n\n   @Loader()\n   private async checkViewAvailability(): Promise<void> {\n      if (ManagedObjectUtils.isCluster(ManagedObject.contextObjectUid) && !(await this.getNumberOfHosts())) {\n         // Load only permissions in order to enable/disable \"go to quickstart\" button\n         this.hasEditPrivilege = await this.permissionService.hasPermissions(\n               ManagedObject.contextObject, [Privileges.EDIT_CLUSTER()]);\n         if (await this.csdService.isComputeOnlyCluster(ManagedObject.contextObject)) {\n            this.unavailableView = UnavailableViewSpec.PERF_VIEW_COMPUTE_ONLY_NO_HOSTS;\n         } else {\n            this.unavailableView = UnavailableViewSpec.PERF_VIEW_NO_HOSTS;\n         }\n      }\n\n      if (ManagedObjectUtils.isHost(ManagedObject.contextObjectUid) &&\n            await this.isHostFromComputeOnlyCluster()) {\n         this.unavailableView = UnavailableViewSpec.HOST_PERF_COMPUTE_ONLY_NOT_SUPPORTED;\n      }\n\n      if (ManagedObjectUtils.isVm(ManagedObject.contextObjectUid) &&\n            await this.isVmRunningOnComputeOnlyCluster()) {\n         this.unavailableView = UnavailableViewSpec.VM_PERF_COMPUTE_ONLY_NOT_SUPPORTED;\n      }\n   }\n\n   private async getNumberOfHosts(): Promise<number> {\n      try {\n         return await this.dataService.getProperty(ClusterComputeResource.host.length, ManagedObject.contextObject);\n      } catch (err) {\n         this.handleError(err);\n      }\n   }\n\n   private async isHostFromComputeOnlyCluster(): Promise<boolean> {\n      try {\n         const clusterMoId: string = await this.dataService.getProperty(HostSystem.cluster, ManagedObject.contextObject);\n         const clusterRef: ManagedObject = DataServiceUtil.moIdToManagedObject(ClusterComputeResource.type, clusterMoId);\n         return await this.csdService.isComputeOnlyCluster(clusterRef);\n      } catch (err) {\n         this.handleError(err);\n      }\n   }\n\n   private async isVmRunningOnComputeOnlyCluster(): Promise<boolean> {\n      try {\n         const vmCsdConfig: VmCsdConfig = await this.csdVmService.getVmCsdConfig(ManagedObject.contextObject);\n         return await this.csdService.isComputeOnlyCluster(vmCsdConfig.computeCluster.moRef);\n      } catch (err) {\n         this.handleError(err);\n      }\n   }\n\n   private async handleCommonPropsResponse(result: PerfMonitorCommonPropsData): Promise<void> {\n      this.commonPerfData = result;\n\n      this.isComputeOnlyCluster = result.isComputeOnlyCluster;\n      this.remoteClustersTreeNodes =\n            PerformanceUtils.getRemoteClustersTreeNodes(result.mountedRemoteDatastores);\n\n      if (this.isComputeOnlyCluster && VsanUiUtils.isEmpty(this.remoteClustersTreeNodes)) {\n         this.unavailableView = UnavailableViewSpec.PERF_COMPUTE_ONLY_NO_MOUNTED_DATASTORES;\n         this.performanceAvailable = false;\n      } else if (!result.isComputeOnlyCluster && !result.isPerformanceServiceEnabled) {\n         this.unavailableView = UnavailableViewSpec.PERF_DISABLED;\n         this.performanceAvailable = false;\n      } else if (!result.isComputeOnlyCluster &&\n            !(await this.perfProvider.isPerformanceServiceHealthy(ManagedObject.contextObject))) {\n         this.unavailableView = UnavailableViewSpec.PERF_UNHEALTHY;\n      } else {\n         this.unavailableView = null;\n         this.performanceAvailable = true;\n      }\n\n      this.hasEditPrivilege = result.hasEditPrivilege;\n      this.isIscsiServiceEnabled = result.isIscsiServiceEnabled;\n      this.showIoInsightData = result.isIoInsightSupported && result.hasIoInsightViewPrivilege;\n      this.isTopContributorsSupported = result.isTopContributorsSupported;\n\n      this.networkDiagnostics = result.networkDiagnostics;\n\n      if (this.performanceAvailable) {\n         this.loadContext();\n      }\n\n      this.perfOrchestrator.data.entityTypes = this.commonPerfData.entityTypes;\n\n      if (result.clusterRef == null) {\n         this.handleError(VsanUiUtils.getString(\"vsan.perf.service.chart.nocluster.error\"));\n         return;\n      }\n      /**\n       * display a warning message on the UI when the difference between\n       * client browser time and Master Node host time is more than 1 hour\n       */\n      const masterNodeTimeDiffMessage: string = PerformanceUtils.validateMasterNodeTime(result.currentTimeOnMasterNode);\n      if (masterNodeTimeDiffMessage) {\n         this.handleError(masterNodeTimeDiffMessage, AlertType.WARNING);\n      }\n\n      this.updatePerfView();\n   }\n\n   private loadContext = () => {\n      // Check the PluginContext object if we have just been navigated here\n      // from the Performance Diagnostics view. If so, extract the context data\n      // and preselect the correct context object and time range\n\n      const context: any = VsanUiUtils.getNavigationData();\n      if (context != null) {\n         this.initTimeRangePicker(context);\n\n         if (context.hasOwnProperty(\"entityUuid\")) {\n            this.multiEntitiesViewEntityUuid = context.entityUuid;\n         }\n\n         if (context.hasOwnProperty(\"viewType\")) {\n            // Get the current view type\n            this._currentSelectedView = PerfMonitorViewType[String(context.viewType)];\n         }\n\n         if (context.hasOwnProperty(\"selectedEntityName\")) {\n            this.selectedEntityName = context.selectedEntityName;\n         }\n      }\n\n      if (VsanUiUtils.isEmpty(this.selectedRemoteClustersInfos)) {\n         this.selectedRemoteClustersInfos = !VsanUiUtils.isEmpty(this.remoteClustersTreeNodes)\n               ? [this.remoteClustersTreeNodes[0].objectInfo as InventoryNode]\n               : [];\n      }\n\n      this.availPerfViews =\n            PerformanceSupportUtil.getSupportedPerfViews(ManagedObject.contextObject.type, this.commonPerfData);\n      if (this.currentSelectedView === undefined) {\n         this.currentSelectedView = this.availPerfViews[0];\n      }\n\n      // we have just been navigated from cluster summary performance portlet, so initialize the top contributors view\n      if (PerfGraphicsComponent.isTopContributorsNavigationContext(context)) {\n         const topContributorsNavigationContext: TopContributorsContext = context as TopContributorsContext;\n         this.selectedTimePoint = topContributorsNavigationContext.selectedTimePoint;\n         this.selectedGraphId = topContributorsNavigationContext.selectedGraphId;\n         this.timePickerRange = topContributorsNavigationContext.timePickerRange;\n         this.vmModeSelection.mode = VsanPerfVmMode.TOP_CONTRIBUTORS;\n         this.perfOrchestrator.mode = PerfModeType.TOP_CONTRIBUTORS;\n      }\n   };\n\n   private static isTopContributorsNavigationContext(context: any): boolean {\n      return context && context.hasOwnProperty(\"selectedTimePoint\") && context.hasOwnProperty(\"selectedGraphId\")\n            && context.hasOwnProperty(\"timePickerRange\");\n   }\n\n   private initTimeRangePicker(context: any): void {\n      if (context.hasOwnProperty(\"timeRangeFrom\")\n            && context.hasOwnProperty(\"timeRangeTo\")\n            && context.hasOwnProperty(\"timeRangeName\")\n            && context.hasOwnProperty(\"pickerState\")\n            && context.hasOwnProperty(\"pickerInterval\")\n            && context.hasOwnProperty(\"pickerFromDate\")) {\n         this.timePickerRange = PerfTimeRangeData.Factory.create(context.timeRangeName,\n               Number(context.timeRangeFrom),\n               Number(context.timeRangeTo), null);\n         this.timePickerState = RangePickerState[String(context.pickerState)];\n         this.timePickerHourInterval = Number(context.pickerInterval);\n         this.timePickerFromDate = context.pickerFromDate ? new Date(context.pickerFromDate) : null;\n      }\n   }\n\n   handleError = (errMsg: string, errType: string = AlertType.DANGER) => {\n      this.errorMsg = errMsg;\n      this.errorType = errType;\n   };\n\n   private updatePerfView = () => {\n      if (!this.performanceAvailable || (this.isIscsiRelatedViews && !this.isIscsiServiceEnabled)) {\n         return;\n      }\n      if (this.isSingleEntityViewSelected) {\n         this.singleEntityTypeId = PerformanceUtils.getEntityTypeIdByPerfView(this.currentSelectedView);\n         this.perfOrchestrator.data.parentEntityType = this.singleEntityTypeId;\n      }\n      const specifiedEntityTypeId: string = PerformanceUtils.getSpecifiedEntityIdByPerfView(this.currentSelectedView);\n      if (VsanUiUtils.isSet(specifiedEntityTypeId)) {\n         this.perfOrchestrator.data.entityType = specifiedEntityTypeId;\n         this.isMultipleEntityPerfEnabled = true;\n      }\n   };\n\n   onPerfTimeRangeChange(timeRange?: PerfTimeRangeData, isOnInit?: boolean): void {\n      if (this.isMultipleEntityPerfEnabled) {\n         this.perfOrchestrator.changeTimeRange(timeRange);\n      }\n\n      if (isOnInit && !this.isPersistedSelectionInitialized) {\n         return;\n      }\n\n      this.timePickerRange = timeRange;\n      this.timePickerState = this.timeRangePickerComponent.currentPickerState;\n\n      if (!isOnInit) {\n         this.perfPersistenceService.saveSelection(timeRange, this.timeRangePickerComponent.currentPickerState);\n      }\n   }\n\n   get isRealtime(): boolean {\n      return this.realtimeChartSupported && this.timePickerState === RangePickerState.REAL_TIME;\n   }\n\n   get realtimeChartSupported(): boolean {\n      return this.clusterCapabilities?.isPerfHighResolutionSupported\n            && this.vmModeSelection?.mode !== VsanPerfVmMode.PER_VM\n            && this.vmModeSelection?.mode !== VsanPerfVmMode.TOP_CONTRIBUTORS\n            && PerfChartUtil.isRealtimeSupportedView(this.currentSelectedView);\n   }\n\n   get showSingleEntityData(): boolean {\n      return this.showEntitiesData\n            && this.isSingleEntityViewSelected\n            && this.perfOrchestrator.mode !== PerfModeType.TOP_CONTRIBUTORS;\n   }\n\n   get showTimeRangePicker(): boolean {\n      return VsanUiUtils.isSet(this.currentSelectedView)\n            && !this.isIoInsightRelatedView\n            && !this.isFileShareView\n            && this.perfOrchestrator.mode !== PerfModeType.TOP_CONTRIBUTORS;\n   }\n\n   get showMultiEntitiesData(): boolean {\n      return this.showEntitiesData && !this.isSingleEntityViewSelected;\n   }\n\n   get showTopContributors(): boolean {\n      return this.currentSelectedView === PerfMonitorViewType.CLUSTER_VM_CONSUMPTION\n            && this.commonPerfData.isTopContributorsSupported\n            && this.vmModeSelection?.mode === this.perfModeTypesNew.TOP_CONTRIBUTORS;\n   }\n\n   private get showEntitiesData(): boolean {\n      return !this.isIscsiRelatedViews || (this.isIscsiRelatedViews && this.isIscsiServiceEnabled);\n   }\n\n   private get isIscsiRelatedViews(): boolean {\n      return this.currentSelectedView === PerfMonitorViewType.CLUSTER_ISCSI\n            || this.currentSelectedView === PerfMonitorViewType.HOST_ISCSI;\n   }\n\n   private get isSingleEntityViewSelected(): boolean {\n      return PerformanceUtils.isSingleEntityViewSelected(this.currentSelectedView);\n   }\n\n   get isIoInsightRelatedView(): boolean {\n      return this.currentSelectedView === PerfMonitorViewType.HOST_IO_INSIGHT\n            || this.currentSelectedView === PerfMonitorViewType.CLUSTER_IO_INSIGHT;\n   }\n\n   get isFileShareView(): boolean {\n      return this.currentSelectedView === PerfMonitorViewType.CLUSTER_FILE_SERVICE;\n   }\n\n   get isVmVirtualDisksView(): boolean {\n      return this.currentSelectedView === PerfMonitorViewType.VM_VIRTUAL_DISK;\n   }\n\n   startNewIOinsightInstance(): void {\n      new ModalBuilder(\"ioInsightWizard/newIoInsightWizard\")\n            .setSize(900, 530)\n            .open();\n   }\n\n   getNetworkDiagnosticErrorMessage(): string[] {\n      return this.networkDiagnostics.map(networkDiagnostic => {\n         const errorTime: string = VsanDateTimeUtils.formatDate(networkDiagnostic.createdTime);\n         return networkDiagnostic.errorMessage.replace(\"{0}\", errorTime);\n      });\n   }\n\n   removeNetworkDiagnostic(networkDiagnostic: NetworkDiagnostic): void {\n      const index: number = this.networkDiagnostics.indexOf(networkDiagnostic);\n      this.networkDiagnostics = this.networkDiagnostics.slice(index, 1);\n   }\n\n   getNetworkDiagnosticActionLink(): AlertActionLink[] {\n      return this.networkDiagnostics.map(networkDiagnostic => {\n         return {\n            label: VsanUiUtils.getString(\"vsan.monitor.host.performance.network.diagnostics.showerrors\"),\n            action: () => this.networkDiagnosticActionClicked(networkDiagnostic),\n         };\n      });\n   }\n\n   /**\n    * Open the Physical Adapters tab, preselect the nic and the time range. The time range should be 30 minutes before\n    * the network diagnostic error's time and 30 minutes after it, so the user can observe what might has caused the\n    * error and what is the negative effect of it.\n    * @param networkDiagnostic\n    */\n   networkDiagnosticActionClicked(networkDiagnostic: NetworkDiagnostic): void {\n      const startTime: number = networkDiagnostic.createdTime - VsanDateTimeUtils.MINUTE_IN_MILLISECONDS * 30;\n      let endTime: number = networkDiagnostic.createdTime + VsanDateTimeUtils.MINUTE_IN_MILLISECONDS * 30;\n      const now: number = VsanDateTimeUtils.roundToMinuteStart(new Date().getTime());\n      if (endTime > now) {\n         endTime = now;\n      }\n      this.timePickerRange = PerfTimeRangeData.Factory.create(\n            \"\", startTime, endTime, null);\n      this.timeRangePickerComponent.setTimerange(this.timePickerRange, RangePickerState.CUSTOM_RANGE);\n      if (networkDiagnostic.eventTypeId.includes(PerfGraphicsComponent.NETWORK_DIAGNOSTICS_EVENT_RDT)) {\n         this.changeViewSelection(PerfMonitorViewType.HOST_VIRTUAL_ADAPTER);\n      } else {\n         this.selectedEntityName = networkDiagnostic.nicname;\n         this.changeViewSelection(PerfMonitorViewType.HOST_PHYSICAL_ADAPTER);\n      }\n   }\n\n   async onVsanPerfVmModeSelectionChange(modeSelection: VsanPerfVmModeSelection): Promise<void> {\n      this.vmModeSelection = modeSelection;\n\n      // TODO [kaleksandrov] Leftover workaround. Remove it once the perf orchestrator is gone\n      this.perfOrchestrator.data.timeRangeData = this.timePickerRange;\n\n      // TODO [kaleksandrov] This logic is just ot map the new enums and component models to the\n      // old orchestrator's properties. Remove this mapping once the other views are uncoupled\n      // from the orchestrator service\n      switch (modeSelection.mode) {\n         case VsanPerfVmMode.CLUSTER_AGGREGATION:\n         case VsanPerfVmMode.HOST_AGGREGATION:\n            this.perfOrchestrator.mode = PerfModeType.SHOW_AVERAGE;\n            break;\n         case VsanPerfVmMode.PER_VM:\n            this.perfOrchestrator.mode = PerfModeType.SHOW_SPECIFICS;\n            break;\n         case VsanPerfVmMode.TOP_CONTRIBUTORS:\n            this.perfOrchestrator.mode = PerfModeType.TOP_CONTRIBUTORS;\n            break;\n         default:\n            throw new Error(\"Unknown perf mode!\");\n      }\n\n      this.perfOrchestrator.state = modeSelection.isSeparateCharts\n            ? PerfModeState.SPECIFIC_MODE_SHOW_SEPARATELY\n            : PerfModeState.SPECIFIC_MODE_SHOW_CONSOLIDATED;\n\n      if (modeSelection.mode === VsanPerfVmMode.PER_VM) {\n         const vmsWithoutData: InvNode[] = this.getVmsWithoutData(modeSelection.vmInventoryNodes);\n         // TODO [kaleksandrov] This \"remainingEntitiesToLoad\" prop is used to handle the loading spinner in other\n         // views. Pass the loading flag as input instead.\n         this.perfOrchestrator.remainingEntitiesToLoad += vmsWithoutData.length;\n         const specifiedEntityTypeId: string = PerformanceUtils\n               .getSpecifiedEntityIdByPerfView(this.currentSelectedView);\n         const configSpec: any = this.commonPerfData.entityTypes[specifiedEntityTypeId];\n         const perfEntities: BasePerfEntity[] = await this.vmDataService\n               .loadBasePerfEntities(vmsWithoutData, configSpec);\n         this.setSelectedSpecifiedEntities(perfEntities);\n      }\n   }\n\n   getTooltipActionLink(): string {\n      return this.currentSelectedView === PerfMonitorViewType.CLUSTER_VM_CONSUMPTION &&\n      this.commonPerfData.isTopContributorsSupported ?\n            VsanUiUtils.getString(\"vsan.monitor.cluster.performance.topContributors.tooltip.action.link\") : null;\n   }\n\n   /**\n    * Filters out only the VMs for which we don't have data.\n    */\n   private getVmsWithoutData(vms: InvNode[]): InvNode[] {\n      // Convert the VM list to a set of MoRef IDs for easier and faster lookup\n      const vmMap: Map<string, InvNode> = new Map<string, InvNode>();\n      vms.forEach((vm: InvNode) => {\n         vmMap.set(vm.data.nodeRef.value, vm);\n      });\n\n      const vmsWithoutData: InvNode[] = [];\n\n      vmMap.forEach((value: InvNode, key: string) => {\n         this.perfOrchestrator.data.entitySelectionStateMap.set(key, true);\n         const vmNode: InvNode = vmMap.get(key);\n         const index: number = this.perfOrchestrator.data.entities\n               .findIndex(entity => entity.entityIdentifier === vmNode.data.nodeRef.value);\n         if (index === -1) {\n            vmsWithoutData.push(vmNode);\n         }\n      });\n\n      // Update the selection state of the VMs in the cache\n      this.perfOrchestrator.data.entitySelectionStateMap.forEach((value: boolean, key: string) => {\n         const isVmSelected: boolean = vmMap.has(key);\n         this.perfOrchestrator.data.entitySelectionStateMap.set(key, isVmSelected);\n      });\n\n      return vmsWithoutData;\n   }\n\n   tooltipActionLinkClicked = (data: ChartPlotLineSelectionData) => {\n      this.selectedTimePoint = data.timePoint;\n      this.selectedGraphId = data.graphId;\n      this.vmModeSelection.mode = VsanPerfVmMode.TOP_CONTRIBUTORS;\n      this.perfOrchestrator.mode = PerfModeType.TOP_CONTRIBUTORS;\n   };\n\n   private setSelectedSpecifiedEntities(perfEntities: BasePerfEntity[]): void {\n      // TODO [kaleksandrov] Once the perfOrchestrator is gone this data will be kept in the current compoennt\n      // and this whole method won't be needed.\n      this.perfOrchestrator.data.entities.push(...perfEntities);\n      if (!this.perfOrchestrator.data.entities || !this.perfOrchestrator.data.entitySelectionStateMap) {\n         return;\n      }\n      this.perfOrchestrator.data.selectedEntities = this.perfOrchestrator.data.entities\n            .filter((e: BasePerfEntity) => this.perfOrchestrator.data.entitySelectionStateMap.get(e.entityIdentifier));\n      this.perfOrchestrator.change.next(PerfChangeContext.FILTERED_ENTITIES);\n\n      this.consolidatedEntitiesData.entities = this.perfOrchestrator.data.entities\n            .filter((entity: BasePerfEntity) => this.perfOrchestrator.data.entitySelectionStateMap\n                  .get(entity.entityIdentifier));\n   }\n\n   onEntitySelect(event: EntitySelectEvent): void {\n      // TODO [kaleksandrov] Delete once the selection state is read from the\n      // this.perfOrchestrator.consolidatedViewHelper.toggle(event.entity.entityIdentifier, event.isSelected);\n      //\n      // !!!!!!!!!!!!!!!!!\n      // this.consolidatedEntitiesData.entityVisibilityStateMap =\n      //       this.perfOrchestrator.consolidatedViewHelper.entityVisibilityStateMap;\n      this.consolidatedEntitiesData.entityIdentifierToVisibility[event.entity.entityIdentifier] = event.isSelected;\n   }\n\n   onEntitiesReady(event: EntitiesReadyEvent): void {\n      this.consolidatedEntitiesData.entityIdentifierToColor = event.entityIdentifierToColor;\n   }\n}\n","<!--Copyright 2020-2022 VMware, Inc. All rights reserved. -- VMware Confidential-->\n<clr-dropdown class=\"mode-dropdown\">\n   <button class=\"btn btn-sm\" clrDropdownTrigger>\n      {{dropdownLabel}}\n      <clr-icon shape=\"caret down\"></clr-icon>\n   </button>\n\n   <clr-dropdown-menu (keyup)=\"stopPropagation($event)\"\n                      (keydown)=\"stopPropagation($event)\"\n                      (keypress)=\"stopPropagation($event)\"\n                      clrPosition=\"bottom-left\"\n                      [tabIndex]=\"-1\"\n                      [attr.aria-label]=\"'vsan.common.srMessage.dropdownMenu.optionsExpanded.label' | localized\">\n      <div class=\"indent\">\n         <clr-radio-wrapper>\n            <input id=\"average-metrics\"\n                   clrRadio\n                   type=\"radio\"\n                   value=\"{{aggregatedVsanPerfVmMode}}\"\n                   [(ngModel)]=\"mode\"\n                   name=\"view-mode\"/>\n            <label id=\"average-metrics-label\" for=\"average-metrics\">\n               {{aggregatedLevelMetricsLabel}}\n            </label>\n         </clr-radio-wrapper>\n         <clr-radio-wrapper *ngIf=\"showTopContributors\">\n            <input id=\"top-contributors\"\n                   clrRadio\n                   type=\"radio\"\n                   value=\"{{perfModeTypes.TOP_CONTRIBUTORS}}\"\n                   [(ngModel)]=\"mode\"\n                   name=\"view-mode\"/>\n            <label id=\"top-contributors-label\" for=\"top-contributors\">\n               {{\"vsan.monitor.cluster.performance.topContributors.title\" | localized}}\n            </label>\n         </clr-radio-wrapper>\n         <div>\n            <clr-radio-container>\n               <clr-radio-wrapper>\n                  <input id=\"specific-metrics\"\n                         clrRadio\n                         type=\"radio\"\n                         value=\"{{perfModeTypes.PER_VM}}\"\n                         [(ngModel)]=\"mode\"\n                         name=\"view-mode\"/>\n                  <label id=\"specific-metrics-label\"\n                         for=\"specific-metrics\">\n                     {{\"vsan.monitor.cluster.performance.showSpecificVMs.title\" | localized}}\n                  </label>\n               </clr-radio-wrapper>\n               <clr-control-helper>\n                  {{\"vsan.monitor.cluster.performance.limit\" | localized:SPECIFIED_ENTITIES_SELECTION_LIMIT}}\n               </clr-control-helper>\n            </clr-radio-container>\n            <vsan-inventory-browser *ngIf=\"isPerVmMode || vmNodes.length > 0\"\n                                    [inventoryService]=\"vmInventoryService\"\n                                    [showCheckBoxes]=\"true\"\n                                    [showCheckBoxesOnlyOnLeafNodes]=\"true\"\n                                    [useDatacenterServiceForDcFolders]=\"false\"\n                                    [disableSelection]=\"!isVmSelectionAllowed\"\n                                    [disabled]=\"!isVmSelectorStateEnabled\"\n                                    [objRefs]=\"root\"\n                                    (nodeSelected)=\"selectNode($event)\"\n                                    [searchInputAriaLabelKey]=\"'vsan.monitor.cluster.performance.showSpecificVMs.searchInputAriaLabel'\">\n            </vsan-inventory-browser>\n         </div>\n      </div>\n   </clr-dropdown-menu>\n</clr-dropdown>\n\n<clr-toggle-wrapper *ngIf=\"isPerVmMode\">\n   <input id=\"toggle-mode\"\n          name=\"toggle-mode\"\n          [checked]=\"isSeparateCharts\"\n          (change)=\"setIsConsolidatedView($event.target.checked)\"\n          type=\"checkbox\"\n          clrToggle/>\n   <label for=\"toggle-mode\">\n      {{\"vsan.monitor.cluster.performance.showSpecificVMs.separated.title\" | localized}}\n   </label>\n</clr-toggle-wrapper>\n","/* Copyright 2017-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {\n   AfterViewInit,\n   Component,\n   ElementRef,\n   EventEmitter,\n   HostListener,\n   Input,\n   OnChanges,\n   Output,\n   SimpleChanges,\n   ViewChild,\n} from \"@angular/core\";\nimport {PerfEntities} from \"../model/perf-entities\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {BasePerfEntity} from \"../model/base-perf-entity\";\nimport {ExpandablePerfEntity} from \"../model/expandable-perf-entity\";\nimport {PerfChartDataConstants} from \"@component/chart/performance/perf-chart-util\";\n\n@Component({\n   selector: \"vsan-perf-multi-entities-metrics\",\n   templateUrl: \"perf-multi-entities-metrics.html\",\n   styleUrls: [\"perf-multi-entities-metrics.scss\"],\n})\n\nexport class PerfMultiEntitiesMetricsComponent implements AfterViewInit, OnChanges {\n\n   @Input()\n   entities: PerfEntities;\n\n   @Input()\n   initialEntityId: string;\n\n   @Input()\n   selectedEntityName: string;\n\n   @Output()\n   entitySelected: EventEmitter<BasePerfEntity> = new EventEmitter<BasePerfEntity>();\n\n   @Output()\n   parentEntityChanging: EventEmitter<void> = new EventEmitter<void>();\n\n   @ViewChild(\"parentDropdownElement\")\n   private parentDropdownElement: ElementRef;\n\n   @ViewChild(\"childDropdownElement\")\n   private childDropdownElement: ElementRef;\n\n   private _selectedChildEntityIndex: number = 0;\n\n   isParentDropdownOpened: boolean = false;\n   isChildDropdownOpened: boolean = false;\n   private init: boolean;\n\n   get selectedChildEntityIndex(): number {\n      return this._selectedChildEntityIndex;\n   }\n\n   set selectedChildEntityIndex(index: number) {\n      if (+index === this._selectedChildEntityIndex) {\n         return;\n      }\n      this._selectedChildEntityIndex = +index;\n\n      // The first item of the second select box is the 'whole' items aggregation\n      if (this._selectedChildEntityIndex === 0) {\n         // Load the data for all the group\n         this.childEntityClicked(this.selectedParentEntity);\n      } else {\n         // Load the data only for particular subitem\n         // We use \"index-1\" because the \"children\" collection contains only the subitems of the category,\n         // but \"index\" is the selected item from the dropdown which contains the additional \"whole\" item\n         this.childEntityClicked(\n               (this.selectedParentEntity as ExpandablePerfEntity).children[this._selectedChildEntityIndex - 1]);\n      }\n   }\n\n   private _selectedParentEntityIndex: number;\n\n   get selectedParentEntityIndex(): number {\n      return this._selectedParentEntityIndex;\n   }\n\n   set selectedParentEntityIndex(index: number) {\n      if (+index === this._selectedParentEntityIndex) {\n         return;\n      }\n      this._selectedParentEntityIndex = +index;\n      this._selectedChildEntityIndex = 0;\n      this.parentEntityClicked(this.entities.objs[this._selectedParentEntityIndex]);\n   }\n\n   selectedChildEntity: BasePerfEntity;\n   selectedParentEntity: BasePerfEntity;\n\n   ngAfterViewInit(): void {\n      this.init = true;\n      if (this.entities === null ||\n            this.entities.objs === null) {\n         return;\n      }\n\n      if (this.initialEntityId) {\n         this.preselectEntityById();\n      } else if (this.selectedEntityName) {\n         this.preselectParentEntityByName();\n      } else {\n         this.selectedParentEntityIndex = 0;\n         this.selectedChildEntityIndex = 0;\n      }\n      this.init = false;\n   }\n\n   private preselectEntityById(): void {\n      let childIndex: number = -1;\n      let parentIndex: number = -1;\n\n      this.entities.objs.find((entity: BasePerfEntity, index) => {\n         // Search through the children\n         if (entity instanceof ExpandablePerfEntity) {\n            const expandableEntity: ExpandablePerfEntity = entity as ExpandablePerfEntity;\n            if (expandableEntity.children && expandableEntity.children.length > 0) {\n               childIndex = expandableEntity.children.findIndex((child: BasePerfEntity) => {\n                  return child.entityUuid === this.initialEntityId;\n               });\n            }\n         }\n\n         // If the initial selected entity was found in the children or\n         // it is the parent item, preselect it\n         if (childIndex >= 0 || entity.entityUuid === this.initialEntityId) {\n            parentIndex = index;\n            return true;\n         }\n\n         return false;\n      });\n\n      this.selectedParentEntityIndex = (parentIndex >= 0) ? parentIndex : 0;\n      this.selectedChildEntityIndex = (childIndex >= 0) ? childIndex + 1 : 0;\n   }\n\n   ngOnChanges(changes: SimpleChanges): void {\n      if (changes.selectedEntityName) {\n         this.preselectParentEntityByName();\n      }\n   }\n\n   private preselectParentEntityByName(): void {\n      // The entity name is provided in two cases\n      // 1. in case when there is a network diagnostic alarm is shown and the user has clicked at the \"Show error\" link\n      // we need to preselect the nic with this from the alarm\n      // 2. an attached container block volume is selected in virtual objects view. We need to preselect the disk\n      // associated with it.\n      let parentIndex: number = -1;\n      this.entities.objs.find((entity: BasePerfEntity, index) => {\n         if (entity.entityName.includes(this.selectedEntityName)) {\n            parentIndex = index;\n            return true;\n         }\n         return false;\n      });\n\n      this.selectedParentEntityIndex = (parentIndex >= 0) ? parentIndex : 0;\n   }\n\n\n   private parentEntityClicked(entity: BasePerfEntity): void {\n      if (entity !== this.selectedParentEntity) {\n         this.selectedParentEntity = entity;\n         // Load the data for all the group\n         this.childEntityClicked(this.selectedParentEntity);\n         this.entitySelected.emit(entity);\n         // raise the event only when not in initialize phase\n         if (!this.init) {\n            this.parentEntityChanging.emit();\n         }\n      }\n   }\n\n   private childEntityClicked(entity: BasePerfEntity): void {\n      if (entity !== this.selectedChildEntity) {\n         this.selectedChildEntity = entity;\n         this.entitySelected.emit(entity);\n      }\n   }\n\n   getSubEntityLabel(): string {\n      switch (this.selectedParentEntity.entityId) {\n         case PerfChartDataConstants.HOST_DISK_GROUP_ENTITY:\n            return VsanUiUtils.getString(\"vsan.monitor.host.performance.disk.col.title\");\n         case PerfChartDataConstants.CLUSTER_ISCSI_TARGET_ENTITY:\n            return VsanUiUtils.getString(\"vsan.monitor.host.performance.iscsi.lun.col.title\");\n         default:\n            throw new Error(\"No sub entity for entityId: \" + this.selectedParentEntity.entityId);\n      }\n   }\n\n   get hasChildren(): boolean {\n      return !!this.selectedParentEntity\n            && this.selectedParentEntity.hasOwnProperty(\"children\")\n            && !!this.selectedParentEntity[\"children\"];\n   }\n\n   getSelectedParentEntityChildren(): BasePerfEntity[] {\n      return this.selectedParentEntity[\"children\"];\n   }\n\n   get selectedChildEntityName(): string {\n      return this.selectedChildEntityIndex < 1 || !this.selectedChildEntity\n            ? this.getSubEntityLabel()\n            : this.selectedChildEntity.entityName;\n   }\n\n   // use this method to change the icon, and show the dropdown when the search input is focused\n   openDropdownMenu(searchBoxFocused: boolean, isParentDropdown: boolean): void {\n      if (searchBoxFocused) {\n         this.isParentDropdownOpened = isParentDropdown;\n         this.isChildDropdownOpened = !isParentDropdown;\n      }\n   }\n\n   closeParentDropDownMenu(selectedIndex: number): void {\n      this.selectedParentEntityIndex = selectedIndex;\n      this.isParentDropdownOpened = false;\n   }\n\n   closeChildDropDownMenu(selectedIndex: number): void {\n      this.selectedChildEntityIndex = selectedIndex;\n      this.isChildDropdownOpened = false;\n   }\n\n   /**\n    * Close the dropdown list when user clicks out of the menu\n    */\n   @HostListener(\"document:click\", [\"$event\"])\n   closeDropdownMenu(event: MouseEvent): void {\n      if (this.isParentDropdownOpened &&\n            !this.parentDropdownElement.nativeElement.contains(event.target)) {\n         this.isParentDropdownOpened = false;\n      } else if (this.isChildDropdownOpened &&\n            !this.childDropdownElement.nativeElement.contains(event.target)) {\n         this.isChildDropdownOpened = false;\n      }\n   }\n}\n","<!--Copyright 2017-2022 VMware, Inc. All rights reserved. -- VMware Confidential-->\n<h5 vsan-auto-focus>\n   {{\"vsan.perf.monitor.label\" | localized}}\n</h5>\n<div *ngIf=\"loading\" class=\"spinner central-spinner\"></div>\n<ng-container *ngIf=\"!loading\">\n   <vsan-validation id=\"validation-message\"\n                    *ngIf=\"errorMsg\"\n                    [alertType]=\"errorType\"\n                    [alert]=\"errorMsg\"\n                    [allowReload]=\"true\"\n                    (onReload)=\"fetch()\"\n                    (onClosed)=\"errorMsg = null\">\n   </vsan-validation>\n\n   <vsan-validation id=\"network-diagnostics-message\"\n                    *ngIf=\"networkDiagnostics?.length\"\n                    [alertType]=\"errorType\"\n                    [alerts]=\"getNetworkDiagnosticErrorMessage()\"\n                    [actionLinks]=\"getNetworkDiagnosticActionLink()\"\n                    [alertsExpanded]=\"true\"\n                    [allowExpandCollapse]=\"false\">\n   </vsan-validation>\n\n   <vsan-unavailable-view *ngIf=\"unavailableView\"\n                          [unavailableViewSpec]=\"unavailableView\"\n                          [hasEditPrivilege]=\"hasEditPrivilege\"\n                          [clusterRef]=\"clusterRef\"\n                          [refreshAfterCompletion]=\"performanceAvailable\"\n                          [masterNodeElectedCallBack]=\"performanceAvailable ? null : fetch.bind(this)\">\n   </vsan-unavailable-view>\n\n   <ng-container *ngIf=\"!unavailableView\">\n      <div role=\"tablist\"\n           class=\"btn-group btn-outline-primary btn-sm\"\n           vsan-button-group-wrap\n           [attr.aria-label]=\"'vsan.perf.monitor.tablist.label'|localized\">\n         <button id=\"perf-view-selection-buttons-{{i}}\"\n                 role=\"tab\"\n                 class=\"btn\"\n                 aria-controls=\"single-entity-data-panel multi-entities-data-panel file-share-data-panel io-insight-data-panel\"\n                 (click)=\"changeViewSelection(availView)\"\n                 *ngFor=\"let availView of availPerfViews; let i = index\"\n                 [attr.aria-selected]=\"availView == currentSelectedView\"\n                 [ngClass]=\"{'btn-primary': availView == currentSelectedView}\">\n            {{getPerfViewSelectOptionLabel(availView)}}\n         </button>\n      </div>\n\n      <ng-container\n            *ngIf=\"clusterCapabilities?.isMultiVmPerfSupported && isMultipleEntityPerfEnabled\">\n         <vsan-perf-vm-mode-selector [vmModeSelection]=\"vmModeSelection\"\n                                     (vmModeSelectionChange)=\"onVsanPerfVmModeSelectionChange($event)\"\n                                     [showTopContributors]=\"isTopContributorsSupported\">\n         </vsan-perf-vm-mode-selector>\n      </ng-container>\n\n      <div *ngIf=\"showTimeRangePicker\"\n           class=\"actions-container\">\n         <vsan-time-range-picker id=\"vsan-time-range-picker1\"\n                                 role=\"group\"\n                                 aria-labelledby=\"time-range-label\"\n                                 [clusterRef]=\"commonPerfData?.clusterRef\"\n                                 [currentTimeRange]=\"timePickerRange\"\n                                 [currentPickerState]=\"timePickerState\"\n                                 [hourInterval]=\"timePickerHourInterval\"\n                                 [fromDate]=\"timePickerFromDate\"\n                                 [realtimeSupported]=\"realtimeChartSupported\"\n                                 (initRange)=\"onPerfTimeRangeChange($event,true)\"\n                                 (changeRange)=\"onPerfTimeRangeChange($event, false)\">\n         </vsan-time-range-picker>\n         <button *ngIf=\"showIoInsightData && isVmVirtualDisksView\"\n                 id=\"create-new-instance\"\n                 class=\"btn btn-link btn-sm small-btn new-instance-btn\"\n                 (click)=\"startNewIOinsightInstance()\">\n            {{\"vsan.monitor.vm.performance.virtualDisk.ioInsight.newInstnace\" | localized}}\n         </button>\n      </div>\n\n      <!-- Remote cluster selector -->\n      <vsan-dropdown-object-selector *ngIf=\"isRemoteVmView()\"\n                                     [label]=\"'vsan.monitor.cluster.performance.toClusterLabel' | localized\"\n                                     [showSearch]=\"false\"\n                                     [nodes]=\"remoteClustersTreeNodes\"\n                                     [(selectedObjectInfos)]=\"selectedRemoteClustersInfos\">\n      </vsan-dropdown-object-selector>\n\n      <vsan-consolidated-vm-selector *ngIf=\"isConsolidatedVmSelectorVisible\"\n                                     [entities]=\"consolidatedEntitiesData.entities\"\n                                     [entityVisibilityStateMap]=\"consolidatedEntitiesData.entityIdentifierToVisibility\"\n                                     (entitySelect)=\"onEntitySelect($event)\"\n                                     (entitiesReady)=\"onEntitiesReady($event)\">\n      </vsan-consolidated-vm-selector>\n\n      <vsan-single-entity-data-perf\n            id=\"single-entity-data-panel\"\n            role=\"tabpanel\"\n            *ngIf=\"showSingleEntityData\"\n            [commonPerfData]=\"commonPerfData\"\n            [consolidatedEntitiesData]=\"consolidatedEntitiesData\"\n            [currentTimeRange]=\"timePickerRange\"\n            [entityTypeId]=\"singleEntityTypeId\"\n            [isComputeOnlyCluster]=\"isComputeOnlyCluster\"\n            [isRealtime]=\"isRealtime\"\n            [monitoredServerCluster]=\"isRemoteVmView() ? selectedRemoteClusterRef : null\"\n            [attr.aria-labelledby]=\"'perf-view-selection-buttons-' + currentSelectedView\"\n            (onTooltipActionClicked)=\"tooltipActionLinkClicked($event)\"\n            [actionLink]=\"getTooltipActionLink()\">\n      </vsan-single-entity-data-perf>\n\n      <vsan-multi-entities-data-perf\n            id=\"multi-entities-data-panel\"\n            role=\"tabpanel\"\n            *ngIf=\"showMultiEntitiesData && !isIoInsightRelatedView && !isFileShareView\"\n            [commonPerfData]=\"commonPerfData\"\n            [currentTimeRange]=\"timePickerRange\"\n            [currentView]=\"currentSelectedView\"\n            [initialEntityId]=\"multiEntitiesViewEntityUuid\"\n            [selectedEntityName]=\"selectedEntityName\"\n            [isRealtime]=\"isRealtime\"\n            [attr.aria-labelledby]=\"'perf-view-selection-buttons-' + currentSelectedView\">\n      </vsan-multi-entities-data-perf>\n\n      <vsan-file-share-data-perf id=\"file-share-data-panel\"\n                                 role=\"tabpanel\"\n                                 *ngIf=\"isFileShareView\"\n                                 [commonPerfData]=\"commonPerfData\"\n                                 [currentView]=\"currentSelectedView\"\n                                 [initialEntityId]=\"multiEntitiesViewEntityUuid\"\n                                 [capabilitiesData]=\"clusterCapabilities\"\n                                 [attr.aria-labelledby]=\"'perf-view-selection-buttons-' + currentSelectedView\">\n      </vsan-file-share-data-perf>\n\n      <vsan-io-insight-data-perf id=\"io-insight-data-panel\"\n                                 role=\"tabpanel\"\n                                 *ngIf=\"showMultiEntitiesData && isIoInsightRelatedView\"\n                                 [commonPerfData]=\"commonPerfData\"\n                                 [initialEntityId]=\"multiEntitiesViewEntityUuid\"\n                                 [currentView]=\"currentSelectedView\"\n                                 [attr.aria-labelledby]=\"'perf-view-selection-buttons-' + currentSelectedView\">\n      </vsan-io-insight-data-perf>\n\n      <vsan-top-contributors-data-perf id=\"top-contributors-data-panel\"\n                                       role=\"tabpanel\"\n                                       *ngIf=\"showTopContributors\"\n                                       [commonPerfData]=\"commonPerfData\"\n                                       [(currentTimeRange)]=\"timePickerRange\"\n                                       [(currentPickerState)]=\"timePickerState\"\n                                       [(currentHourInterval)]=\"timePickerHourInterval\"\n                                       [selectedTimePoint]=\"selectedTimePoint\"\n                                       [selectedClusterGraph]=\"selectedGraphId\"\n                                       [attr.aria-labelledby]=\"'perf-view-selection-buttons-' + currentSelectedView\">\n      </vsan-top-contributors-data-perf>\n   </ng-container>\n</ng-container>","<!--Copyright 2020 VMware, Inc. All rights reserved. -- VMware Confidential-->\n<div class=\"entity-toggle-action\"\n     *ngFor=\"let entity of entities, let i = index\">\n   <clr-checkbox-wrapper>\n      <input #showEntity\n             id=\"chart-toggle-{{i}}\"\n             type=\"checkbox\"\n             clrCheckbox\n             [ngModel]=\"entityVisibilityStateMap[entity.entityIdentifier]\"\n             (change)=\"onEntitySelect(entity, showEntity.checked)\"/>\n      <label class=\"icon-name-container\">\n         <clr-icon *ngIf=\"entity.icon\"\n                   [attr.shape]=\"entity.icon\"></clr-icon>\n         <span vsan-show-title>\n            {{entity.entityLabelName || entity.entityName}}\n         </span>\n      </label>\n   </clr-checkbox-wrapper>\n   <svg class=\"color-flag\" [style.fill]=\"entityIdentifierToColor[entity.entityIdentifier]\">\n      <rect x=\"0\" y=\"9\" width=\"25\" height=\"6\"/>\n   </svg>\n</div>\n","/* Copyright 2020-2022 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {PerfChartUtil} from \"@component/chart/performance/perf-chart-util\";\nimport {InventoryNode} from \"@component/inventory/inventory-node\";\nimport {ManagedObject} from \"@service/managed-object\";\nimport {VsanPerfVmMode} from \"./perf-vm-mode\";\n\n/**\n * Model representing the selection of the PerfVmModeSelector used in the Performance VM tab\n */\nexport class VsanPerfVmModeSelection {\n   mode: VsanPerfVmMode;\n   vmInventoryNodes: InventoryNode[];\n   isSeparateCharts: boolean;\n\n   static initDefault(moRef: ManagedObject): VsanPerfVmModeSelection {\n      const selection: VsanPerfVmModeSelection = new VsanPerfVmModeSelection();\n      selection.mode = PerfChartUtil.getAggregatedVsanPerfVmMode(moRef);\n      selection.vmInventoryNodes = [];\n      return selection;\n   }\n}\n","/* Copyright 2019-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {CommonModule} from \"@angular/common\";\nimport {NgModule} from \"@angular/core\";\nimport {FormsModule} from \"@angular/forms\";\nimport {RouterModule, Routes} from \"@angular/router\";\nimport {ClarityModule} from \"@clr/angular\";\nimport {CommonCellsModule} from \"@component/cell/common-cells.module\";\nimport {CrossColumnFilterModule} from \"@component/cross-column-filter/cross-column-filter.module\";\nimport {DatetimePickerModule} from \"@component/datetime-picker/datetime-picker.module\";\nimport {PromptModule} from \"@component/dialog/prompt/prompt.module\";\nimport {IllustratedMessageModule} from \"@component/illustrated-message/illustrated-message.module\";\nimport {InventoryBrowserModule} from \"@component/inventory/inventory-browser.module\";\nimport {SearchModule} from \"@component/search/search.module\";\nimport {UnavailableViewModule} from \"@component/unavailable-view/unavailable-view.module\";\nimport {ValidationModule} from \"@component/validation/validation.module\";\nimport {CommonDirectiveModule} from \"@directive/common-directive.module\";\nimport {CommonPipeModule} from \"@pipe/common-pipe.module\";\nimport {PersistentStorageService} from \"@service/browser-storage.service\";\nimport {PerformancePersistenceService} from \"@service/performance-persistence.service\";\nimport {PerfOrchestratorService} from \"@util/performance/perf-orchestrator-service\";\nimport {PerformanceCommonModule} from \"./performance-common.module\";\nimport {ConsolidatedVmSelectorComponent} from \"./view/consolidated-vm-selector.component\";\nimport {VsanFileShareDataPerfComponent} from \"./view/file-share-data-perf.component\";\nimport {FileShareSelectorComponent} from \"./view/file-share-selector.component\";\nimport {VsanIoInsightPerfComponent} from \"./view/io-insight-data-perf.component\";\nimport {IoInsightInstanceComponent} from \"./view/io-insight-instance.component\";\nimport {IoInsightMetricsComponent} from \"./view/io-insight-metrics.component\";\nimport {IoinsightRunningStatusPipe} from \"./view/ioinsight-running-status.pipe\";\nimport {PerfGraphicsComponent} from \"./view/perf-graphics.component\";\nimport {PerfVmDataService} from \"./view/perf-vm-data.service\";\nimport {PerfVmModeSelectorComponent} from \"./view/perf-vm-mode-selector/perf-vm-mode-selector.component\";\nimport {VsanTopContributorsDataPerfComponent} from \"./view/top-contributors-data-perf.component\";\nimport {ConsolidatedDialogComponent} from \"./view/consolidated-dialog.component\";\nimport {ActionButtonModule} from \"@component/action-button/action-button.module\";\n\nconst performanceRoutes: Routes = [\n   {\n      path: \"\",\n      component: PerfGraphicsComponent,\n   },\n   {\n      path: \"consolidatedVmDialog\",\n      component: ConsolidatedDialogComponent,\n   },\n];\n\n@NgModule({\n   imports: [\n      ActionButtonModule,\n      FormsModule,\n      CommonModule,\n      ClarityModule,\n      CrossColumnFilterModule,\n      PromptModule,\n      ValidationModule,\n      CommonPipeModule,\n      UnavailableViewModule,\n      DatetimePickerModule,\n      InventoryBrowserModule,\n      IllustratedMessageModule,\n      SearchModule,\n      CommonDirectiveModule,\n      CommonCellsModule,\n      PerformanceCommonModule,\n      RouterModule.forChild(performanceRoutes),\n   ],\n   declarations: [\n      PerfGraphicsComponent,\n      VsanIoInsightPerfComponent,\n      IoInsightInstanceComponent,\n      IoInsightMetricsComponent,\n      IoinsightRunningStatusPipe,\n      VsanFileShareDataPerfComponent,\n      FileShareSelectorComponent,\n      VsanTopContributorsDataPerfComponent,\n      PerfVmModeSelectorComponent,\n      ConsolidatedVmSelectorComponent,\n      ConsolidatedDialogComponent,\n   ],\n   exports: [\n      ConsolidatedDialogComponent,\n   ],\n   providers: [\n      PerfOrchestratorService,\n      PerformancePersistenceService,\n      PersistentStorageService,\n      PerfVmDataService,\n   ],\n})\nexport class PerformanceModule {\n}\n","/* Copyright 2021 VMware, Inc. All rights reserved. -- VMware Confidential */\n/**\n * IDs used in external navigation to official documentation\n */\nexport enum DocumentationId {\n   RDMA_DOCUMENTATION = \"GUID-48154235-C557-4074-8BEB-AB9A7BD84A92\",\n   IO_INSIGHT_DOCUMENTATION = \"GUID-3ABCB8EA-1FC7-40A4-B834-C9FEDF02A902\",\n   ENFORCE_RESERVATION_DOCUMENTATION = \"GUID-CD510EAE-1A9F-45D2-BB66-E893C8AAF20A\",\n}","<!-- Copyright 2019-2021 VMware, Inc. All rights reserved. -- VMware Confidential -->\n<span *ngIf=\"loading\" class=\"spinner spinner-lg central-spinner\"></span>\n<vsan-validation id=\"validation-message\"\n                 *ngIf=\"!loading && errorMsg\"\n                 [alert]=\"errorMsg\"\n                 [allowReload]=\"true\"\n                 (onReload)=\"fetch()\"\n                 (onClosed)=\"errorMsg = null\">\n</vsan-validation>\n\n<ng-container *ngIf=\"!loading && !errorMsg && originalIoInsightInstances.length == 0\">\n   <div>\n      <span>{{\"vsan.monitor.performance.io.insight.initial.info\" | localized}}</span>\n      <a id=\"learn-more\"\n         [external-link]=\"'vsan.monitor.performance.io.insight.initial.link' | localized\"\n         [url]=\"documentationUrl\"></a>\n   </div>\n   <div class=\"info-image\"></div>\n   <button class=\"btn btn-primary start-button-initial-view\"\n           (click)=newIoInsightClicked()>\n      {{\"vsan.monitor.performance.io.insight.newInstnace\" | localized}}\n   </button>\n</ng-container>\n\n<ng-container *ngIf=\"!loading && originalIoInsightInstances.length\">\n   <div class=\"cards-view\" *ngIf=\"!showMetricsView\">\n      <button id=\"create-new-instance\"\n              class=\"btn btn-link small-btn start-button-cards-view\"\n              (click)=\"newIoInsightClicked()\">\n         {{\"vsan.monitor.performance.io.insight.newInstnace\" | localized}}\n      </button>\n      <vsan-cross-column-filter (changes)=\"filterChange($event)\"\n                                [filters]=\"filters\"\n                                [filterIconShape]=\"'search'\"\n                                [filterText]=\"'vsan.monitor.performance.io.insight.filter.search.text' | localized\">\n         <vsan-cross-column-filter-group>\n            <vsan-cross-column-filter-item [field]=\"InstanceField.INSTANCE_NAME\"\n                                           [label]=\"'vsan.monitor.performance.io.insight.filter.instance.name' | localized\">\n            </vsan-cross-column-filter-item>\n            <vsan-cross-column-filter-item [field]=\"InstanceField.HOST_NAME\"\n                                           [label]=\"'vsan.monitor.performance.io.insight.filter.host.name' | localized\">\n            </vsan-cross-column-filter-item>\n            <vsan-cross-column-filter-item [field]=\"InstanceField.INSTANCE_STATE\"\n                                           [label]=\"'vsan.monitor.performance.io.insight.filter.instance.status' | localized\">\n               <vsan-list-filter #vsanCustomFilter>\n                  <vsan-list-filter-item *ngFor=\"let status of enumToArray(IoInsightRunningState)\"\n                                         [key]=\"status\"\n                                         [label]=\"status | ioInsightRunningStatus\">\n                  </vsan-list-filter-item>\n               </vsan-list-filter>\n            </vsan-cross-column-filter-item>\n         </vsan-cross-column-filter-group>\n      </vsan-cross-column-filter>\n      <div class=\"search-controls\">\n         <vsan-last-field-date-picker id=\"vsan-ioinsight-time-range-picker\"\n                                      [maxDays]=\"90\"\n                                      [(currentPickerState)]=\"timePickerState\"\n                                      (dateRangeChange)=\"onPerfTimeRangeChange($event)\">\n         </vsan-last-field-date-picker>\n         <clr-dropdown *ngIf=\"showSwitchPerspective\">\n            <button class=\"dropdown-toggle btn btn-sm btn-link\" clrDropdownToggle>\n               {{getSwitchPerspectiveButtonLabel()}}\n               <clr-icon shape=\"caret down\"></clr-icon>\n            </button>\n            <clr-dropdown-menu clrPosition=\"bottom-right\"\n                               [attr.aria-label]=\"'vsan.common.srMessage.dropdownMenu.optionsExpanded.label' | localized\">\n               <button clrDropdownItem (click)=\"togglePerspective(true)\">\n                  {{\"vsan.monitor.performance.io.insight.organizeByTime\" | localized}}</button>\n               <button clrDropdownItem (click)=\"togglePerspective(false)\">\n                  {{\"vsan.monitor.performance.io.insight.organizeByHost\" | localized}}</button>\n            </clr-dropdown-menu>\n         </clr-dropdown>\n      </div>\n      <vsan-illustrated-message *ngIf=\"!filteredIoInsightInstance.length && originalIoInsightInstances.length\"\n                                [type]=\"IllustratedMessageType.MISSING_DATA\"\n                                [message]=\"'vsan.monitor.performance.io.insight.instances.notFound' | localized\">\n      </vsan-illustrated-message>\n      <div class=\"clr-row ioinsight-row\" *ngIf=\"isInTimePerspective\">\n         <vsan-io-insight-instance *ngFor=\"let instance of filteredIoInsightInstance\"\n                                   class=\"clr-col-sm-6 clr-col-12\"\n                                   [ioInsightInstance]=\"instance\"\n                                   (viewMetrics)=\"onViewMetricsAction(instance)\"\n                                   (stopInstance)=\"onStopInstance(instance)\"\n                                   (deleteInstance)=\"onDeleteInstance(instance)\"\n                                   (renameInstance)=\"onRenameInstance(instance)\"\n                                   (rerunInstance)=\"onRerunInstance(instance)\">\n         </vsan-io-insight-instance>\n      </div>\n      <div class=\"cards-view-by-host\" *ngIf=\"!isInTimePerspective\">\n         <div class=\"host-cards\" *ngFor=\"let hostItem of getUniqueHosts()\">\n            <div class=\"host-label\">\n               <clr-icon [attr.shape]=\"hostItem.primaryIconId\"></clr-icon>\n               <h5>{{hostItem.name}}</h5>\n            </div>\n            <div class=\"clr-row ioinsight-row\">\n               <vsan-io-insight-instance *ngFor=\"let instance of getInstancesForHost(hostItem)\"\n                                         class=\"clr-col-sm-6 clr-col-12\"\n                                         [ioInsightInstance]=\"instance\"\n                                         (viewMetrics)=\"onViewMetricsAction(instance)\"\n                                         (stopInstance)=\"onStopInstance(instance)\"\n                                         (deleteInstance)=\"onDeleteInstance(instance)\"\n                                         (renameInstance)=\"onRenameInstance(instance)\"\n                                         (rerunInstance)=\"onRerunInstance(instance)\">\n               </vsan-io-insight-instance>\n            </div>\n         </div>\n      </div>\n   </div>\n   <vsan-io-insight-metrics *ngIf=\"showMetricsView\"\n                            [(ioInsightInstance)]=\"targetInstance\"\n                            [commonPerfData]=\"commonPerfData\"\n                            [currentView]=\"currentView\"\n                            [initialEntityId]=\"initialEntityId\"\n                            (back)=\"metricsViewOnBack($event)\">\n   </vsan-io-insight-metrics>\n</ng-container>\n","/* Copyright 2020 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {PipeTransform, Pipe} from \"@angular/core\";\nimport {Logger} from \"@util/logger\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {IoInsightRunningState} from \"@generated/io-insight-running-state\";\n\n@Pipe({\n   name: \"ioInsightRunningStatus\"\n})\nexport class IoinsightRunningStatusPipe implements PipeTransform {\n\n   transform(status: IoInsightRunningState): string {\n      switch (status) {\n         case IoInsightRunningState.RUNNING:\n            return VsanUiUtils.getString(\"vsan.io.insight.running.state.running\");\n         case IoInsightRunningState.COMPLETED:\n            return VsanUiUtils.getString(\"vsan.io.insight.running.state.completed\");\n          default:\n            Logger.warn(\"Unrecognized IOInsight running status:\", status);\n            return VsanUiUtils.getString(\"vsan.na.label\");\n      }\n   }\n}\n","<!-- Copyright 2020-2021 VMware, Inc. All rights reserved. -- VMware Confidential -->\n<div class=\"dropdown-container clr-row\">\n   <label id=\"share-search-box-label\"\n          for=\"file-share-search-box\"\n          class=\"clr-col-auto\">\n      {{'vsan.monitor.host.performance.fileShare.label' | localized}}\n   </label>\n   <div #fileShareDropdownElement\n        class=\"dropdown open clr-col-7\">\n      <div *ngIf=\"!loading else loading_spinner\">\n         <clr-icon *ngIf=\"!searchIconVisible\"\n                   class=\"file-share-icon\"\n                   [attr.shape]=\"getShareIcon(selectedShare)\"></clr-icon>\n         <vsan-search-input id=\"file-share-search-box\"\n                            [(filter)]=\"searchKeyword\"\n                            [itemIconVisible]=\"searchIconVisible\"\n                            dropdownIconVisible=\"true\"\n                            (filterFocus)=\"openDropdownMenu($event)\"\n                            [placeholderText]=\"'vsan.common.search' | localized\"\n                            [inputAriaLabelKey]=\"'vsan.monitor.host.performance.fileShare.searchInputLabel'\">\n         </vsan-search-input>\n      </div>\n      <ng-template #loading_spinner>\n         <span *ngIf=\"loading\"\n               class=\"spinner spinner-inline\"></span>\n      </ng-template>\n\n      <div class=\"dropdown-menu\"\n           *ngIf=\"isDropdownOpened\">\n         <h4 *ngIf=\"!matchedShares?.length\" class=\"dropdown-header\">\n            {{'vsan.common.crossColumnFilter.search.notFound' | localized}}\n         </h4>\n         <ng-container *ngFor=\"let share of matchedShares; let i = index\">\n            <button type=\"button\"\n                    class=\"dropdown-item\"\n                    (click)=\"selectShare(share)\">\n               <clr-icon [attr.shape]=\"getShareIcon(share)\"></clr-icon>\n               {{share.config.name}}\n            </button>\n         </ng-container>\n      </div>\n   </div>\n</div>\n","/* Copyright 2020-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {PromptComponent} from \"./prompt.component\";\nimport {Component, ElementRef} from \"@angular/core\";\nimport {FocusTrapFactory} from \"@angular/cdk/a11y\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\n\n@Component({\n   selector: \"vsan-light-info-prompt\",\n   templateUrl: \"prompt.html\",\n   styleUrls: [\"prompt.scss\"],\n})\nexport class LightInfoPrompt extends PromptComponent {\n\n   constructor(el: ElementRef, focusTrap: FocusTrapFactory) {\n      super(el, focusTrap);\n      this.confirmText = null;\n   }\n\n   confirm(): void {\n      VsanUiUtils.closeModalDialog();\n   }\n}","/* Copyright 2019-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component,\n   ElementRef,\n   EventEmitter,\n   HostListener,\n   Input,\n   OnInit,\n   Output,\n   ViewChild} from \"@angular/core\";\nimport {VsanFileServiceShare} from \"@generated/vsan-file-service-share\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {VsanFileShareUtils} from \"../../file-services/shares/file-share-util\";\nimport {PerformanceContext} from \"@navigation/context/performance-context\";\n\n@Component({\n   selector: \"vsan-file-share-selector\",\n   templateUrl: \"./file-share-selector.html\",\n   styleUrls: [\"file-share-selector.scss\"],\n})\nexport class FileShareSelectorComponent implements OnInit {\n   @Input()\n   shares: VsanFileServiceShare[];\n\n   @Output()\n   shareSelected: EventEmitter<VsanFileServiceShare> = new EventEmitter<VsanFileServiceShare>();\n\n   @ViewChild(\"fileShareDropdownElement\")\n   private fileShareDropdownElement: ElementRef;\n\n   matchedShares: VsanFileServiceShare[];\n   selectedShare: VsanFileServiceShare;\n   isDropdownOpened: boolean;\n   searchIconVisible: boolean = true;\n   loading: boolean;\n   private _searchKeyword: string;\n\n   set searchKeyword(val: string) {\n      if (!val) {\n         this.setFullDropdownItemsList();\n         this.selectedShare = null;\n         // emit null to clear the charts\n         this.shareSelected.emit(null);\n         return;\n      }\n      if (val === this._searchKeyword) {\n         return;\n      }\n      this._searchKeyword = val;\n      if (VsanUiUtils.isEmpty(this.shares)) {\n         return;\n      }\n      this.matchedShares = this.shares.filter(share => share.config.name.toLowerCase().includes(val.toLowerCase()));\n      this.isDropdownOpened = true;\n   }\n\n   get searchKeyword(): string {\n      return this._searchKeyword;\n   }\n\n   ngOnInit(): void {\n      // only set default share when the first time this view is loaded\n      if (VsanUiUtils.isEmpty(this.shares)) {\n         return;\n      }\n\n      // Preselect file share from context (e.g., coming from volume/file service details link)\n      this.preselectShare();\n   }\n\n   private preselectShare() {\n      const context: PerformanceContext = VsanUiUtils.getNavigationData();\n      let shareToSelect: VsanFileServiceShare;\n\n      if (context && context.entityUuid) {\n         shareToSelect = this.shares.find(\n               share => VsanFileShareUtils.getFileShareEntityUuid(share) === context.entityUuid);\n      } else if (context && context.selectedEntityName) {\n         shareToSelect = this.shares.find(\n               share => share.config.name === context.selectedEntityName);\n      }\n\n      if (shareToSelect) {\n         this.selectShare(shareToSelect);\n      }\n   }\n\n   selectShare = (share: VsanFileServiceShare) => {\n      this._searchKeyword = share.config.name;\n      this.isDropdownOpened = false;\n      this.searchIconVisible = false;\n      this.selectedShare = share;\n      this.shareSelected.emit(this.selectedShare);\n   };\n\n   getShareIcon = (share: VsanFileServiceShare) => {\n      return VsanFileShareUtils.getShareIcon(share);\n   };\n\n   // use this method to change the icon, and show the dropdown when the search input is focused\n   openDropdownMenu = (searchBoxFocused: boolean) => {\n      if (searchBoxFocused) {\n         this.searchIconVisible = true;\n         this.isDropdownOpened = true;\n         this.setFullDropdownItemsList();\n      }\n   };\n\n   /**\n    * Close the dropdown list when user clicks out of the menu\n    */\n   @HostListener(\"document:click\", [\"$event\"])\n   closeDropdownMenu(event: MouseEvent): void {\n      if (this.isDropdownOpened &&\n            !this.fileShareDropdownElement.nativeElement.contains(event.target)) {\n         this.isDropdownOpened = false;\n      }\n   }\n\n   private setFullDropdownItemsList(): void {\n      if (!VsanUiUtils.isEmpty(this.shares)) {\n         this.matchedShares = this.shares.map(share => share);\n      }\n   }\n}\n","/* Copyright 2020-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Injectable} from \"@angular/core\";\nimport {PerfChartDataConstants} from \"@component/chart/performance/perf-chart-util\";\nimport {InventoryNode} from \"@component/inventory/inventory-node\";\nimport {IQueryResult, ResultItem} from \"@service/client/core/query.data\";\nimport {DataServiceClient} from \"@service/client/dataservice/data-service.service\";\nimport {ManagedObject} from \"@service/managed-object\";\nimport {BasePerfEntity} from \"../model/base-perf-entity\";\n\n/**\n * Provides methods for loading performance related data.\n */\n@Injectable()\nexport class PerfVmDataService {\n\n   constructor(private dataService: DataServiceClient) {\n   }\n\n   async loadBasePerfEntities(vms: InventoryNode[], configSpec: any): Promise<BasePerfEntity[]> {\n      if (!vms || vms.length === 0) {\n         return [];\n      }\n\n      const vmMap: Map<string, InventoryNode> = new Map<string, InventoryNode>();\n      vms.forEach((vm: InventoryNode) => vmMap.set(ManagedObject.uid(vm.data.nodeRef), vm));\n\n      const queryResult: IQueryResult = await this.dataService\n            .getPropertyForObjects(PerfChartDataConstants.VM_CONFIG_INSTANCE_UUID_PROPERTY, vms.map(vm => vm.data.nodeRef));\n      return queryResult.resultItems.map((ri: ResultItem) => {\n         return this.createBasePerfEntity(ri.resourceObject,\n               ri.get(PerfChartDataConstants.VM_CONFIG_INSTANCE_UUID_PROPERTY),\n               vmMap,\n               configSpec);\n      });\n   }\n\n   private createBasePerfEntity(vmRef: ManagedObject, vmUuid: string,\n         vmMap: Map<string, InventoryNode>, configSpec: any): BasePerfEntity {\n      const vmId: string = ManagedObject.uid(vmRef);\n      const selectedPerfEntity: BasePerfEntity = new BasePerfEntity();\n      selectedPerfEntity.entityId = PerfChartDataConstants.VM_CONSUMPTION_ENTITY;\n      selectedPerfEntity.entityUuid = vmUuid;\n\n      const vmNode: InventoryNode = vmMap.get(vmId);\n      selectedPerfEntity.specifiedObjectRef = vmNode.data.nodeRef;\n      selectedPerfEntity.entityName = vmNode.data.name;\n      selectedPerfEntity.icon = vmNode.data.iconShape;\n      selectedPerfEntity.configSpec = configSpec;\n      return selectedPerfEntity;\n   }\n}\n","/* Copyright 2019-2022 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, Input, OnChanges} from \"@angular/core\";\nimport {RefreshHandler} from \"@service/global-refresh.service\";\nimport {ModalBuilder} from \"@util/modal-builder\";\nimport {IoInsightService} from \"@generated/io-insight-service\";\nimport {ManagedObject, ManagedObjectUtils} from \"@service/managed-object\";\nimport {IoInsightInstance} from \"@generated/io-insight-instance\";\nimport {TaskMonitorService} from \"@service/task-monitor-service\";\nimport {InstanceActionContextData} from \"../io-insight/action/instance-action-context.data\";\nimport {PerfMonitorCommonPropsData} from \"@generated/perf-monitor-common-props-data\";\nimport {PerfMonitorViewType} from \"../model/perf-monitor-view-type.model\";\nimport {IoInsightRunningState} from \"@generated/io-insight-running-state\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {InventoryNode} from \"@generated/inventory-node\";\nimport {FilterItem} from \"@component/cross-column-filter/filter-item\";\nimport {DateRangeData} from \"@component/datetime-picker/date-range-picker.component\";\nimport {DurationPickerState} from \"@component/datetime-picker/time-last-field-picker/last-field-date-picker.component\";\nimport {IllustratedMessageType} from \"@component/illustrated-message/illustrated-message.component\";\nimport {NavigationService} from \"@navigation/navigation.service\";\nimport {LastFieldDatePickerUtil} from \"@component/datetime-picker/time-last-field-picker/last-field-date-picker-util\";\nimport {ReferenceWatcher} from \"@util/reference-watcher\";\nimport {DocumentationId} from \"@navigation/model/documentation-id\";\n\n@Component({\n   selector: \"vsan-io-insight-data-perf\",\n   templateUrl: \"io-insight-data-perf.html\",\n   styleUrls: [ \"io-insight-data-perf.scss\"],\n   providers: [ReferenceWatcher],\n})\nexport class VsanIoInsightPerfComponent implements OnChanges {\n   documentationUrl: string;\n   private static readonly REFRESH_INTERVAL_MS: number = 10000;\n\n   readonly InstanceField: typeof InstanceField = InstanceField;\n   IoInsightRunningState: typeof IoInsightRunningState = IoInsightRunningState;\n   enumToArray: (data: any) => any[] = VsanUiUtils.enumToArray;\n\n   // Filters\n   filters: FilterItem[];\n\n   errorMsg: string;\n   loading: boolean = false;\n   showMetricsView: boolean = false;\n   targetInstance: IoInsightInstance = null;\n\n   originalIoInsightInstances: IoInsightInstance[] = [];\n   filteredIoInsightInstance: IoInsightInstance[] = [];\n\n   isInTimePerspective: boolean = true;\n\n   timePickerRange: DateRangeData;\n   timePickerState: DurationPickerState = DurationPickerState.ALL;\n\n   IllustratedMessageType: typeof IllustratedMessageType = IllustratedMessageType;\n\n   @Input()\n   commonPerfData: PerfMonitorCommonPropsData;\n\n   @Input()\n   currentView: PerfMonitorViewType;\n\n   @Input()\n   initialEntityId: string;\n\n   constructor(private ioInsightService: IoInsightService,\n               private taskSvc: TaskMonitorService,\n               private navigationService: NavigationService,\n               private refWatcher: ReferenceWatcher) {\n      this.refWatcher.watchGlobalRefreshSubscription(VsanIoInsightPerfComponent.prototype.constructor.name);\n      this.documentationUrl = this.navigationService.getVmwareHelpUrl(NavigationService.MONITORING_URL,\n            DocumentationId.IO_INSIGHT_DOCUMENTATION);\n   }\n\n   get showSwitchPerspective(): boolean {\n      return ManagedObject.contextObject.type === ManagedObjectUtils.CLUSTER;\n   }\n\n   ngOnChanges(): void {\n      this.fetch();\n   }\n\n   @RefreshHandler\n   fetch(): void {\n      this.errorMsg = null;\n      this.getAllIOInsightInstances(true);\n   }\n\n   private getAllIOInsightInstances = async (showLoading: boolean = false) => {\n      // don't refresh the view if the metrics view is shown. It has own refresh logic.\n      if (this.showMetricsView) {\n         return ;\n      }\n\n      this.loading = showLoading;\n      try {\n         this.originalIoInsightInstances =\n               await this.ioInsightService.getIoInsightInstances(ManagedObject.contextObject);\n         this.originalIoInsightInstances.sort((a: IoInsightInstance, b: IoInsightInstance): number =>\n               a.timeRange?.startTime < b.timeRange.startTime ? 1 : -1);\n         this.filterInstances();\n         this.refreshOnRunningInstances();\n       } catch (error) {\n         this.handleError(error);\n      } finally {\n         this.loading = false;\n      }\n   };\n\n   handleError = (errMsg: string) => {\n      this.errorMsg = errMsg;\n   };\n\n   filterChange(filters: FilterItem[]): void {\n      this.filters = filters;\n      this.filterInstances();\n   }\n\n   private filterInstances(): void {\n      let filteredInstancesByProperties: IoInsightInstance[];\n      // filter by instance's name, host and status\n      if (!this.filters) {\n         filteredInstancesByProperties = this.originalIoInsightInstances;\n      } else {\n         filteredInstancesByProperties = this.originalIoInsightInstances.filter(instance =>\n               !this.filters.some(filter => !this.passFilter(filter, instance)));\n      }\n      // filter by time\n      this.filteredIoInsightInstance = LastFieldDatePickerUtil.filterItemsByTimeRange(this.timePickerRange,\n            this.timePickerState,\n            filteredInstancesByProperties);\n   }\n\n   passFilter(filter: FilterItem, instance: IoInsightInstance): boolean {\n      switch (filter.field) {\n         case InstanceField.INSTANCE_NAME:\n            return instance.name.includes(filter.value);\n         case InstanceField.HOST_NAME:\n            return instance.hostIoInsightInfos.some(host => host.host.name.includes(filter.value));\n         case InstanceField.INSTANCE_STATE:\n            return instance.state === filter.value;\n      }\n   }\n\n   newIoInsightClicked = () => {\n      new ModalBuilder(\"ioInsightWizard/newIoInsightWizard\")\n            .setSize(900, 530)\n            .open()\n            .then(this.refreshWhenTaskDone);\n   };\n\n   togglePerspective = (showInTimePerspetive: boolean) => {\n      this.isInTimePerspective = showInTimePerspetive;\n   };\n\n   getUniqueHosts(): InventoryNode[] {\n      const hostItems: Map<string, InventoryNode> = new Map();\n      this.filteredIoInsightInstance.forEach(instance => instance.hostIoInsightInfos.forEach(hostInfo => {\n         if (!hostItems.has(hostInfo.host.moRef.value)) {\n            hostItems.set(hostInfo.host.moRef.value, hostInfo.host);\n         }\n      }));\n      return Array.from(hostItems.values());\n   }\n\n   getInstancesForHost(hostItem: InventoryNode): IoInsightInstance[] {\n      return this.filteredIoInsightInstance.filter(\n            instance => instance.hostIoInsightInfos.find(host => host.host.moRef.value === hostItem.moRef.value));\n   }\n\n   getSwitchPerspectiveButtonLabel(): string {\n      return this.isInTimePerspective ?\n            VsanUiUtils.getString(\"vsan.monitor.performance.io.insight.organizeByTime\") :\n            VsanUiUtils.getString(\"vsan.monitor.performance.io.insight.organizeByHost\");\n   }\n\n   onViewMetricsAction(instance: IoInsightInstance): void {\n      this.showMetricsView = true;\n      this.targetInstance = instance;\n   }\n\n   metricsViewOnBack(updatedInstance: IoInsightInstance): void {\n      this.showMetricsView = false;\n      const updateIndex: number =\n            this.originalIoInsightInstances.findIndex(instance => instance.name === updatedInstance.name);\n      this.originalIoInsightInstances[updateIndex] = updatedInstance;\n      this.filteredIoInsightInstance[updateIndex] = updatedInstance;\n      this.targetInstance = null;\n      this.refreshOnRunningInstances();\n   }\n\n   refreshOnRunningInstances(): void {\n      this.refWatcher.clearTimeouts();\n      if (this.originalIoInsightInstances.some(instance => instance.state === IoInsightRunningState.RUNNING) &&\n            !this.showMetricsView) {\n         this.refWatcher.setTimeout(() => this.getAllIOInsightInstances(), VsanIoInsightPerfComponent.REFRESH_INTERVAL_MS);\n      }\n   }\n\n   onStopInstance(instance: IoInsightInstance): void {\n      const context: InstanceActionContextData = {\n         instance: instance,\n         clusterRef: this.commonPerfData.clusterRef,\n         deleteOperation: false,\n      };\n      new ModalBuilder(\"ioInsight/deleteInstance\")\n            .setSize(600, 250)\n            .open(context)\n            .then(this.refreshWhenTaskDone);\n   }\n\n   onDeleteInstance(instance: IoInsightInstance): void {\n      const context: InstanceActionContextData = {\n         instance: instance,\n         clusterRef: this.commonPerfData.clusterRef,\n         deleteOperation: true,\n      };\n      new ModalBuilder(\"ioInsight/deleteInstance\")\n            .setSize(600, 250)\n            .open(context)\n            .then(this.refreshView);\n   }\n\n   onRenameInstance(instance: IoInsightInstance): void {\n      const context: InstanceActionContextData = {\n         instance: instance,\n         clusterRef: this.commonPerfData.clusterRef,\n         deleteOperation: false,\n      };\n      new ModalBuilder(\"ioInsight/renameInstance\")\n            .setSize(600, 250)\n            .open(context)\n            .then(this.refreshView);\n   }\n\n   onRerunInstance(instance: IoInsightInstance): void {\n      const hasOtherRunningInstance: boolean = this.isAnotherInstanceRunningOnSameHosts(instance);\n      if (hasOtherRunningInstance) {\n         new ModalBuilder(\"ioInsight/rerunError\")\n               .setSize(500, 200)\n               .open();\n         return;\n      }\n\n      const context: InstanceActionContextData = {\n         instance: instance,\n         clusterRef: this.commonPerfData.clusterRef,\n         deleteOperation: false,\n      };\n      new ModalBuilder(\"ioInsight/rerunInstance\")\n            .setSize(600, 300)\n            .open(context)\n            .then(this.refreshWhenTaskDone);\n   }\n\n   private isAnotherInstanceRunningOnSameHosts(instance: IoInsightInstance): boolean {\n      const hostRefs: ManagedObject[] = this.getHostRefsFromInstance(instance);\n      return this.originalIoInsightInstances\n             .filter(runningInstance => runningInstance.state === IoInsightRunningState.RUNNING)\n             .some(runningInstance =>\n                   ManagedObjectUtils.checkForDuplicateMoRefs(\n                         this.getHostRefsFromInstance(runningInstance), hostRefs));\n   }\n\n   private getHostRefsFromInstance(instance: IoInsightInstance): ManagedObject[] {\n      return instance.hostIoInsightInfos.map(hostIoInsightInfo => hostIoInsightInfo.host.moRef);\n   }\n\n   private refreshWhenTaskDone = async (task: ManagedObject) => {\n      if (!task) {\n         return;\n      }\n\n      await this.taskSvc.getAwaitResult(task);\n      this.fetch();\n   };\n\n   private refreshView = async () => {\n      this.getAllIOInsightInstances(true);\n   };\n\n   onPerfTimeRangeChange(timeRange: DateRangeData): void {\n      this.timePickerRange = timeRange;\n      this.filterInstances();\n   }\n}\n\nexport enum InstanceField {\n   INSTANCE_NAME = \"name\",\n   HOST_NAME = \"hostName\",\n   INSTANCE_STATE = \"state\",\n}","/* Copyright 2020-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {InventoryNode} from \"@generated/inventory-node\";\nimport {PerfTopContributorsEntity} from \"@generated/perf-top-contributors-entity\";\nimport {PerfGraphMetricsData} from \"@generated/perf-graph-metrics-data\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {DiskGroupType} from \"@generated/disk-group-type\";\n\nexport class TopContributorEntity {\n\n   private constructor(\n         public entity: InventoryNode,\n         public parent: InventoryNode,\n         public readMetricValue: number,\n         public readMetricKey: string,\n         public readMetricLabel: string,\n         public writeMetricValue: number,\n         public writeMetricKey: string,\n         public writeMetricLabel: string,\n         public entityRefId: string,\n         public isVmOnVsanDatastore: boolean,\n         public diskGroupType: DiskGroupType) {\n   }\n\n\n   static fromVmodl(vsanTopContributor: PerfTopContributorsEntity, readMetricLabel: string, writeMetricLabel: string):\n         TopContributorEntity {\n      if (!vsanTopContributor.entity || VsanUiUtils.isEmpty(vsanTopContributor.metricsSeries)) {\n         return null;\n      }\n      const readMetric: PerfGraphMetricsData =\n            vsanTopContributor.metricsSeries.find(series => series.key.toLowerCase().includes(\"read\"));\n      const writeMetric: PerfGraphMetricsData =\n            vsanTopContributor.metricsSeries.find(series => series.key.toLowerCase().includes(\"write\"));\n      const entity: TopContributorEntity = new TopContributorEntity(\n            vsanTopContributor.entity,\n            vsanTopContributor.parent,\n            readMetric.values[0],\n            readMetric.key,\n            readMetricLabel,\n            writeMetric.values[0],\n            writeMetric.key,\n            writeMetricLabel,\n            vsanTopContributor.entityRefId,\n            vsanTopContributor.isVmOnVsanDatastore,\n            vsanTopContributor.diskGroupType,\n      );\n      return entity;\n   }\n}","/* Copyright 2020 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {BasePerfEntity} from \"../model/base-perf-entity\";\n\nexport class ConsolidatedEntitiesData {\n   entities: BasePerfEntity[] = [];\n\n   // TODO [kaleksandrov] Switch to Map once the PerfOrchestratorService is removed\n   entityIdentifierToColor: { [key: string]: string } = {};\n   entityIdentifierToVisibility: { [key: string]: boolean } = {};\n}\n","<!-- Copyright 2019-2020 VMware, Inc. All rights reserved. -- VMware Confidential -->\n<vsan-validation id=\"validation-message\"\n                 *ngIf=\"!loading && errorMsg\"\n                 [alert]=\"errorMsg\"\n                 [allowReload]=\"true\"\n                 (onClosed)=\"errorMsg = null\">\n</vsan-validation>\n<clr-button-group class=\"btn-link\">\n   <clr-button class=\"btn btn-sm\"\n               (click)=\"onBackButtonClicked()\">\n      {{\"vsan.io.insight.metrics.view.back\" | localized}}\n   </clr-button>\n</clr-button-group>\n<div>\n   <div class=\"instance-name\">{{ioInsightInstance.name}}</div>\n   <div class=\"instance-info-container\">\n   <span>\n      {{\"vsan.io.insight.metrics.view.duration\" | localized: ioInsightInstance.timeRange.duration:\n         formatDate(this.ioInsightInstance.timeRange.startTime):\n         formatDate(this.ioInsightInstance.timeRange.endTime)}}\n   </span>\n      <div *ngIf=\"ioInsightInstance.state == IoInsightRunningState.RUNNING\"\n           class=\"progress-block\">\n         <div class=\"progress\">\n            <progress [value]=\"getProgressValue()\"\n                      [max]=\"ioInsightInstance.timeRange.durationInMinutes\">\n            </progress>\n         </div>\n         <span>\n            {{\"vsan.io.insight.metrics.view.remaining\" | localized:\n               ioInsightInstance.timeRange.remainingTimeLocalizedTimeUnit}}\n         </span>\n      </div>\n      <button *ngIf=\"ioInsightInstance.state == IoInsightRunningState.RUNNING\"\n              class=\"btn btn-sm btn-danger-outline\"\n              (click)=\"onStopInstance()\">\n         {{\"vsan.io.insight.metrics.view.stop\" | localized}}\n      </button>\n   </div>\n</div>\n<vsan-validation *ngIf=\"ioInsightInstance.state == IoInsightRunningState.RUNNING\"\n                 [allowClose]=\"false\"\n                 [alert]=\"infoLabel\"\n                 alertType=\"info\">\n</vsan-validation>\n<vsan-multi-entities-data-perf\n      id=\"io-insight-metrics\"\n      [commonPerfData]=\"commonPerfData\"\n      [currentTimeRange]=\"currentTimeRange\"\n      [currentView]=\"currentView\"\n      [initialEntityId]=\"initialEntityId\"\n      [instance]=\"ioInsightInstance\"\n      [(showLoading)]=\"showLoading\"\n      (allChartsLoaded)=\"onAllChartsLoaded()\">\n</vsan-multi-entities-data-perf>\n\n","/* Copyright 2017-2022 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {\n   ChangeDetectorRef,\n   Component,\n   EventEmitter,\n   Input,\n   OnChanges,\n   Output,\n   SimpleChanges,\n} from \"@angular/core\";\nimport {RefreshHandler} from \"@service/global-refresh.service\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {Logger} from \"@util/logger\";\nimport {PerfEntities} from \"../model/perf-entities\";\nimport {BasePerfEntity} from \"../model/base-perf-entity\";\nimport {MetricColObj, MetricKeyType} from \"../model/metric-col-obj\";\nimport {PerfMultiEntitesDataQueryService} from \"../util/perf-multi-entities-data-query.service\";\nimport {PerfMonitorViewType} from \"../model/perf-monitor-view-type.model\";\nimport {BaseEntityDataPerfComponent} from \"./base-entity-data-perf.component\";\nimport {VmDisksPerfEntity} from \"../model/vm-disks-perf-entity\";\nimport {IoInsightInstance} from \"@generated/io-insight-instance\";\nimport {PerfQuerySpec} from \"@generated/perf-query-spec\";\nimport {PerfEntityStateData} from \"@generated/perf-entity-state-data\";\nimport {VsanPerfPropertyProvider} from \"@generated/vsan-perf-property-provider\";\nimport {ReferenceWatcher} from \"@util/reference-watcher\";\nimport {PerfExportData} from \"@component/chart/performance/perf-export-data\";\nimport {PerfGraphThreshold} from \"@generated/perf-graph-threshold\";\nimport {NetworkDiagnosticsService} from \"@generated/network-diagnostics-service\";\nimport {ManagedObject} from \"@service/managed-object\";\nimport {PerformanceUtils} from \"../util/perf-utils\";\nimport {IoInsightRunningState} from \"@generated/io-insight-running-state\";\nimport {DomUtil} from \"@util/dom-util\";\nimport {NestedPerfEntity} from \"../model/nested-perf-entity\";\nimport {PerfChartDataConstants} from \"@component/chart/performance/perf-chart-util\";\n\n@Component({\n   selector: \"vsan-multi-entities-data-perf\",\n   templateUrl: \"multi-entities-data-perf.html\",\n   styleUrls: [\"multi-entities-data-perf.scss\"],\n   providers: [ReferenceWatcher],\n})\n\nexport class MultiEntitiesDataPerfComponent extends BaseEntityDataPerfComponent\n      implements OnChanges {\n   /**\n    * Whether to show loading spinner. For auto refresh we don't want to show the spinner.\n    */\n   @Input()\n   showLoading: boolean = true;\n\n   @Output()\n   showLoadingChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n   @Input()\n   initialEntityId: string;\n\n   @Input()\n   selectedEntityName: string;\n\n   @Input()\n   currentView: PerfMonitorViewType;\n\n   selectedSubEntityIndexes: Set<number> = new Set<number>();\n\n   @Input()\n   instance: IoInsightInstance;\n\n   @Output()\n   allChartsLoaded: EventEmitter<PerfExportData[]> = new EventEmitter<PerfExportData[]>();\n\n   entities: PerfEntities;\n   fetchingEntities: boolean = true;\n   chartsEntities: BasePerfEntity[];\n   showMultipleSubEntities: boolean;\n\n   entityToMetricsMap: Map<BasePerfEntity, PerfEntityStateData[]> = new Map<BasePerfEntity, PerfEntityStateData[]>();\n   exportData: PerfExportData[] = [];\n   customizableThresholds: PerfGraphThreshold[];\n\n   get noEntitiesMessage(): string {\n      switch (this.currentView) {\n         case PerfMonitorViewType.HOST_DISK:\n            return VsanUiUtils.getString(\"vsan.monitor.host.performance.no.disks\");\n         case PerfMonitorViewType.CLUSTER_IO_INSIGHT:\n         case PerfMonitorViewType.HOST_IO_INSIGHT:\n            return VsanUiUtils.getString(\"vsan.io.insight.metrics.view.deletedVMs.warning\");\n         case PerfMonitorViewType.CLUSTER_ISCSI:\n            return VsanUiUtils.getString(\"vsan.monitor.cluster.performance.iscsi.noLUNsCreated\");\n            // add appropriate message for the other view when needed\n      }\n   }\n\n   get isIoInsightRealtime(): boolean {\n      return this.instance && this.instance.state === IoInsightRunningState.RUNNING;\n   }\n\n   constructor(private queryService: PerfMultiEntitesDataQueryService,\n         private perfPropProvider: VsanPerfPropertyProvider,\n         private refWatcher: ReferenceWatcher,\n         private changeDetector: ChangeDetectorRef,\n         private networkDiagnostics: NetworkDiagnosticsService) {\n      super();\n      this.refWatcher.watchGlobalRefreshSubscription(MultiEntitiesDataPerfComponent.prototype.constructor.name);\n      // expand the first sub entity by default\n      this.initSelectedSubEntities();\n   }\n\n   ngOnChanges(changes: SimpleChanges): void {\n      // clear the chart when the first time user changes the time rage state\n      if (changes.isRealtime && this.chartsView) {\n         this.chartsView.chartMetrics = null;\n      }\n      // do nothing if current entity changes, the data gets refreshed by onEntitySelect method\n      if (this.currentView === PerfMonitorViewType.CLUSTER_FILE_SERVICE && changes.currentEntity ||\n            (changes.showLoading && !changes.instance)) {\n         return;\n      }\n      // In case the entityType changed, we need to update the query\n      if (changes.currentView && changes.currentView.currentValue) {\n         this.fetch();\n      } else {\n         this.fetchChartsData();\n      }\n   }\n\n   @RefreshHandler\n   fetch(): void {\n      this.currentEntity = null;\n      this.showLoading = true;\n      this.showLoadingChange.emit(true);\n      this.entities = null;\n      this.showMultipleSubEntities = this.currentView === PerfMonitorViewType.HOST_IO_INSIGHT ||\n            this.currentView === PerfMonitorViewType.CLUSTER_IO_INSIGHT;\n      if (this.currentView === PerfMonitorViewType.CLUSTER_FILE_SERVICE) {\n         // in file share view, the shares are loaded from other component\n         return;\n      }\n      this.fetchingEntities = true;\n      this.queryService.queryEntitiesData(\n            this.currentView, this.instance,\n            this.commonPerfData.isIoInsightSupported && this.commonPerfData.hasIoInsightViewPrivilege,\n            this.commonPerfData.isRdtChecksumSupported,\n            this.commonPerfData.isVsanMaxEnabled)\n            .then(this.handleResponse, this.handleError);\n   }\n\n   private handleResponse = (entities: BasePerfEntity[]): void => {\n      this.fetchingEntities = false;\n      this.entities = new PerfEntities();\n      // cluster iscsi view is a treegrid, and we don't use the original datagrid\n      // no need to define cols for treegrid\n      this.entities.col = this.getMetricsColumnByView();\n      this.entities.objs = entities;\n      this.extraDesc = this.getExtraDesc();\n   };\n\n   private getExtraDesc = (): string => {\n      switch (this.currentView) {\n         case PerfMonitorViewType.HOST_PHYSICAL_ADAPTER:\n         case PerfMonitorViewType.HOST_VIRTUAL_ADAPTER:\n            return VsanUiUtils.getString(\"vsan.perf.chart.host.network.description.extra\");\n         default:\n            return null;\n      }\n   };\n\n   private getMetricsColumnByView = (): MetricColObj => {\n      switch (this.currentView) {\n         case PerfMonitorViewType.HOST_DISK:\n            return new MetricColObj(\n                  VsanUiUtils.getString(this.commonPerfData.isVsanMaxEnabled\n                        ? \"vsan.monitor.host.performance.singleTier.disk.col.title\"\n                        : \"vsan.monitor.host.performance.diskgroup.col.title\"),\n                  MetricKeyType.ENTITY_NAME);\n         case PerfMonitorViewType.HOST_PHYSICAL_ADAPTER:\n            return new MetricColObj(\n                  VsanUiUtils.getString(\"vsan.monitor.host.performance.network.physicalAdapter.col.title\"),\n                  MetricKeyType.ENTITY_NAME);\n         case PerfMonitorViewType.HOST_VIRTUAL_ADAPTER:\n            return new MetricColObj(\n                  VsanUiUtils.getString(\"vsan.monitor.host.performance.network.adapter.col.title\"),\n                  MetricKeyType.ENTITY_NAME);\n         case PerfMonitorViewType.VM_VIRTUAL_DISK:\n            return new MetricColObj(\n                  VsanUiUtils.getString(\"vsan.monitor.vm.performance.virtualdisk.label\"),\n                  MetricKeyType.ENTITY_NAME);\n         case PerfMonitorViewType.CLUSTER_ISCSI:\n            return new MetricColObj(\n                  VsanUiUtils.getString(\"vsan.monitor.host.performance.iscsi.target.col.title\"),\n                  MetricKeyType.ENTITY_NAME);\n         case PerfMonitorViewType.CLUSTER_IO_INSIGHT:\n         case PerfMonitorViewType.HOST_IO_INSIGHT:\n            return new MetricColObj(\n                  VsanUiUtils.getString(\"vsan.monitor.cluster.performance.io.insight.label\"),\n                  MetricKeyType.ENTITY_NAME);\n         default:\n            throw new Error(\"Unsupported multi-entities view detect: \" + this.currentView);\n      }\n   };\n\n   handleError = (err: any): void => {\n      Logger.error(\"failed to query data: \", err);\n      this.fetchingEntities = false;\n   };\n\n   async onEntitySelect(entity: BasePerfEntity): Promise<void> {\n      if (!entity || !this.commonPerfData?.entityTypes) {\n         return;\n      }\n      PerformanceUtils.updatePerfEntityType(this.currentEntity, this.commonPerfData);\n      if (this.currentView === PerfMonitorViewType.HOST_PHYSICAL_ADAPTER || this.requestThresholdsForRdtChecksum()) {\n         const entityTypeId: string = this.currentEntity.entityId === PerfChartDataConstants.HOST_NETWORK_ENTITY\n               ? (this.currentEntity as NestedPerfEntity).combinedEntity.configSpec.name\n               : this.currentEntity.configSpec.name;\n         this.customizableThresholds = await this.networkDiagnostics.getPerfGraphThresholds(ManagedObject.contextObject,\n               entityTypeId);\n      }\n      this.refWatcher.setTimeout(() => {\n         this.initialEntityId = entity.entityUuid;\n         this.showLoading = true;\n         this.showLoadingChange.emit(true);\n         this.fetchChartsData();\n      }, 0);\n   }\n\n   private requestThresholdsForRdtChecksum(): boolean {\n      return this.currentView === PerfMonitorViewType.HOST_VIRTUAL_ADAPTER\n            && this.currentEntity.entityId === PerfChartDataConstants.HOST_NETWORK_ENTITY\n            && this.commonPerfData.isRdtChecksumSupported;\n   }\n\n   initSelectedSubEntities(): void {\n      this.selectedSubEntityIndexes.clear();\n      // expand the first sub entity by default\n      this.selectedSubEntityIndexes.add(0);\n   }\n\n   onAllChartsLoaded($event: any): void {\n      this.exportData = $event;\n      this.changeDetector.detectChanges();\n   }\n\n   onSubEntitySelectionChanged(selected: boolean, index: number): void {\n      if (selected) {\n         this.selectedSubEntityIndexes.add(index);\n      } else {\n         this.selectedSubEntityIndexes.delete(index);\n      }\n   }\n\n   fetchChartsData(): Promise<void> {\n      if (this.currentEntity && this.commonPerfData.entityTypes && this.commonPerfData.clusterRef\n            && this.currentTimeRange) {\n         if (this.currentEntity instanceof VmDisksPerfEntity) {\n            return this.fetchMultipleSubEntitiesChartsData();\n         } else {\n            return this.fetchSingleEntityChartsData();\n         }\n      }\n   }\n\n   async fetchSingleEntityChartsData(): Promise<void> {\n      await this.waitForChartsContainer();\n\n      this.chartsView.entity = null;\n      if (!this.isRealtime) {\n         this.chartsView.chartMetrics = null;\n      }\n      this.chartsView.entity = this.toggleHighResolutionSpecName(this.currentEntity);\n      this.chartsView.queryChartsDataByTimeRange(this.currentTimeRange,\n            this.commonPerfData.clusterRef,\n            !this.isRealtime);\n   }\n\n   waitForChartsContainer(): Promise<void> {\n      if (DomUtil.domElementExists(\"singleSubEntityChartsContainer\")) {\n         return Promise.resolve();\n      }\n      return new Promise((resolve) => {\n         this.refWatcher.setTimeout(() => {\n            resolve(this.waitForChartsContainer());\n         }, 1000);\n      });\n   }\n\n   fetchMultipleSubEntitiesChartsData(): Promise<void> {\n      this.fetchingEntities = this.showLoading;\n      this.chartsEntities = [];\n      this.updateChartsEntities();\n\n      return this.getEntityPerfState();\n   }\n\n   private updateChartsEntities(): void {\n      const vmDisksPerfEntity: VmDisksPerfEntity = this.currentEntity as VmDisksPerfEntity;\n      vmDisksPerfEntity.nestedPerfEntity.forEach(diskPerfEntity => {\n         diskPerfEntity.configSpec = this.commonPerfData.entityTypes[diskPerfEntity.entityId];\n         this.chartsEntities.push(diskPerfEntity);\n      });\n   }\n\n   private getEntityPerfState(): Promise<void> {\n      if (this.chartsEntities.length === 0) {\n         this.fetchingEntities = false;\n         return;\n      }\n\n      const querySpecs: PerfQuerySpec[] = this.chartsEntities.map(entity => this.createQuerySpec(entity));\n      return this.perfPropProvider.getEntityPerfState(this.commonPerfData.clusterRef, querySpecs)\n            .then((data: PerfEntityStateData[]): void => {\n               this.updateMetrics(data);\n               this.fetchingEntities = false;\n            }).catch(this.handleError);\n   }\n\n   private createQuerySpec(entity: BasePerfEntity): PerfQuerySpec {\n      return PerfQuerySpec.Factory.create(\n            entity.entityType,\n            entity.entityUuid,\n            null, /* group:string, not used*/\n            this.currentTimeRange.from,\n            this.currentTimeRange.to,\n            null, /* interval:number , not used*/\n            null /* labels:string[], not used*/);\n   }\n\n   private updateMetrics(data: PerfEntityStateData[]): void {\n      if (VsanUiUtils.isEmpty(data)) {\n         this.allChartsLoaded.emit(null);\n         return;\n      }\n      this.entityToMetricsMap.clear();\n      data.forEach(value => {\n         const perfEntity: BasePerfEntity = this.chartsEntities\n               .find(entity => (entity.entityType + \":\" + entity.entityUuid) === value.entityRefId);\n         this.entityToMetricsMap.set(perfEntity, Array(value));\n      });\n   }\n\n   get showSingleEntityCharts(): boolean {\n      if (this.currentView === PerfMonitorViewType.CLUSTER_FILE_SERVICE) {\n         // in file share view, the shares are loaded from other component\n         return !this.showMultipleSubEntities;\n      }\n\n      return !this.showMultipleSubEntities && this.hasEntities && !this.isLoading;\n   }\n\n   get showMultipleEntitiesCharts(): boolean {\n      return this.showMultipleSubEntities && this.entityToMetricsMap.size > 0 && this.hasEntities && !this.isLoading;\n   }\n\n   get hasEntities(): boolean {\n      return this.entities && !VsanUiUtils.isEmpty(this.entities.objs);\n   }\n\n   get hasCurrentEntity(): boolean {\n      return !!this.currentEntity && !this.isLoading;\n   }\n\n   get isLoading(): boolean {\n      if (this.entities && this.entities.objs && this.entities.objs.length === 0) {\n         // Entities are loaded but empty.\n         return false;\n      }\n      return this.fetchingEntities && this.showLoading;\n   }\n}","<!--Copyright 2017-2021 VMware, Inc. All rights reserved. -- VMware Confidential-->\n<div class=\"dropdown-container\">\n   <label class=\"entities-label\"\n          for=\"parent-entity-selection\">\n      {{entities.col.label}}\n   </label>\n   <div #parentDropdownElement\n        class=\"dropdown open\">\n      <vsan-search-input id=\"parent-entity-selection\"\n                         [(filter)]=\"selectedParentEntity.entityName\"\n                         [itemIconVisible]=\"true\"\n                         [itemIcon]=\"selectedParentEntity.icon\"\n                         dropdownIconVisible=\"true\"\n                         (filterFocus)=\"openDropdownMenu($event, true)\"\n                         [placeholderText]=\"'vsan.common.search' | localized\">\n      </vsan-search-input>\n\n      <div class=\"dropdown-menu\"\n           *ngIf=\"isParentDropdownOpened\">\n         <ng-container *ngFor=\"let perfEntity of entities.objs; let i = index\">\n            <button type=\"button\"\n                    class=\"dropdown-item\"\n                    (click)=\"closeParentDropDownMenu(i)\">\n               <clr-icon *ngIf=\"perfEntity.icon\"\n                         [attr.shape]=\"perfEntity.icon\"></clr-icon>\n               {{perfEntity.entityName}}\n            </button>\n         </ng-container>\n      </div>\n   </div>\n</div>\n\n<div *ngIf=\"hasChildren\"\n     class=\"dropdown-container\">\n   <div #childDropdownElement\n        class=\"dropdown open\">\n      <vsan-search-input id=\"sub-entity-selection\"\n                         [filter]=\"selectedChildEntityName\"\n                         [itemIconVisible]=\"false\"\n                         dropdownIconVisible=\"true\"\n                         (filterFocus)=\"openDropdownMenu($event, false)\"\n                         [placeholderText]=\"'vsan.common.search' | localized\">\n      </vsan-search-input>\n\n      <div class=\"dropdown-menu\"\n           *ngIf=\"isChildDropdownOpened\">\n         <button type=\"button\"\n                 class=\"dropdown-item\"\n                 (click)=\"closeChildDropDownMenu(0)\">\n            {{getSubEntityLabel()}}\n         </button>\n         <ng-container *ngFor=\"let perfEntity of getSelectedParentEntityChildren(); let i = index\">\n            <button type=\"button\"\n                    class=\"dropdown-item\"\n                    (click)=\"closeChildDropDownMenu(i + 1)\">\n               {{perfEntity.entityName}}\n            </button>\n         </ng-container>\n      </div>\n   </div>\n</div>\n","<!-- Copyright 2020 VMware, Inc. All rights reserved. -- VMware Confidential -->\n<span *ngIf=\"loading\" class=\"spinner spinner-lg central-spinner\"></span>\n<ng-container *ngIf=\"!loading\">\n   <vsan-validation id=\"validation-message\"\n                    *ngIf=\"errorMsg\"\n                    [alert]=\"errorMsg\"\n                    [allowReload]=\"true\"\n                    (onReload)=\"fetch()\"\n                    (onClosed)=\"errorMsg = null\">\n   </vsan-validation>\n   <vsan-file-share-selector id=\"vsan-file-share-selector\"\n                             [shares]=\"shares\"\n                             (shareSelected)=\"selectFileShare($event)\">\n   </vsan-file-share-selector>\n\n   <vsan-time-range-picker id=\"vsan-time-range-picker1\"\n                           [clusterRef]=\"commonPerfData?.clusterRef\"\n                           [currentTimeRange]=\"timePickerRange\"\n                           [currentPickerState]=\"timePickerState\"\n                           [hourInterval]=\"timePickerHourInterval\"\n                           [fromDate]=\"timePickerFromDate\"\n                           (initRange)=\"onPerfTimeRangeChange($event,true)\"\n                           (changeRange)=\"onPerfTimeRangeChange($event, false)\">\n   </vsan-time-range-picker>\n\n   <vsan-validation id=\"smb-protocal-layer-not-supported-message\"\n                    *ngIf=\"smbTooltipVisible\"\n                    [alertType]=\"'info'\"\n                    [alert]=\"'vsan.monitor.cluster.performance.fileServices.smb.notSupported.desc' | localized\"\n                    (onClosed)=\"smbTooltipVisible = false\">\n   </vsan-validation>\n   <vsan-illustrated-message\n         *ngIf=\"!selectedShare\"\n         [type]=\"IllustratedMessageType.MISSING_SELECTION\"\n         [message]=\"'vsan.monitor.cluster.performance.fileServices.reminder' | localized\">\n   </vsan-illustrated-message>\n   <div class=\"entity-container\" *ngIf=\"selectedShare\">\n      <vsan-consolidated-vm-selector\n            [entities]=\"perfOrchestrator.data?.entities\"\n            [entityVisibilityStateMap]=\"perfOrchestrator.consolidatedViewHelper.entityVisibilityStateMap\"\n            (entitySelect)=\"perfOrchestrator.consolidatedViewHelper.toggle($event.entity.entityIdentifier, $event.isSelected)\"\n            (entitiesReady)=\"onEntitiesReady($event)\">>\n      </vsan-consolidated-vm-selector>\n\n      <clr-signpost *ngIf=\"vdfsSignpostVisible\" id=\"{{layerSignpostId}}\">\n         <clr-signpost-content *clrIfOpen [clrPosition]=\"getSignpostPosition()\">\n            {{\"vsan.monitor.cluster.performance.fileServices.layer.tooltip\" | localized}}\n         </clr-signpost-content>\n      </clr-signpost>\n   </div>\n\n   <vsan-single-entity-data-perf\n         id=\"single-entity-data-panel\"\n         role=\"tabpanel\"\n         *ngIf=\"selectedShare\"\n         [currentEntity]=\"fileShareEntity\"\n         [commonPerfData]=\"commonPerfData\"\n         [consolidatedEntitiesData]=\"consolidatedEntitiesData\"\n         [currentTimeRange]=\"timePickerRange\"\n         [entityTypeId]=\"fileShareEntity.entityId\"\n         [attr.aria-labelledby]=\"'perf-view-selection-buttons-' + PerfMonitorViewType.CLUSTER_FILE_SERVICE\">\n   </vsan-single-entity-data-perf>\n</ng-container>\n","<!-- Copyright 2020-2021 VMware, Inc. All rights reserved. -- VMware Confidential -->\n<span *ngIf=\"propertiesLoading\" class=\"spinner spinner-lg central-spinner\"></span>\n<vsan-validation id=\"validation-message\"\n                 *ngIf=\"allLoadersCompleted() && errorMsg\"\n                 [alert]=\"errorMsg\"\n                 [allowReload]=\"true\"\n                 (onReload)=\"fetch()\"\n                 (onClosed)=\"errorMsg = null\">\n</vsan-validation>\n\n<div class=\"selection-group\">\n   <div class=\"horizontal\">\n      <label for=\"metric-selection\">{{\"vsan.monitor.cluster.performance.topContributors.cluster.metric\" | localized}}\n      </label>\n      <div class=\"select\">\n         <select (change)=\"selectedClusterMetricChanged()\"\n                 [(ngModel)]=\"selectedClusterMetric\"\n                 clrSelect\n                 id=\"metric-selection\">\n            <option *ngFor=\"let metric of Array.from(clusterGraphs.keys())\"\n                    value=\"{{metric}}\">{{clusterGraphs.get(metric) | localized}}</option>\n         </select>\n      </div>\n   </div>\n\n   <div>\n      <vsan-time-range-picker id=\"vsan-top-contributors-time-range-picker\"\n                              role=\"group\"\n                              aria-labelledby=\"time-range-label\"\n                              [clusterRef]=\"commonPerfData?.clusterRef\"\n                              [currentTimeRange]=\"currentTimeRange\"\n                              [currentPickerState]=\"currentPickerState\"\n                              [hourInterval]=\"currentHourInterval\"\n                              (initRange)=\"onPerfTimeRangeChange($event,true)\"\n                              (changeRange)=\"onPerfTimeRangeChange($event, false)\">\n      </vsan-time-range-picker>\n   </div>\n\n   <div>\n      <button [external-link]=\"'vsan.monitor.cluster.performance.topContributors.link' | localized\"\n              [helpId]=\"AskVmwareId.TOP_CONTRIBUTORS\"\n              class=\"btn btn-sm btn-link\"\n              id=\"ask-vmware\">\n      </button>\n   </div>\n</div>\n<vsan-perf-detail-charts class=\"clusterChart\"\n                         [commonPerfData]=\"commonPerfData\"\n                         [visibleGraphId]=\"selectedClusterGraph\"\n                         [isAskVmwareLinkVisible]=\"false\"\n                         [showHeaderSection]=\"false\"\n                         [selectedPlotLineValue]=\"selectedTimePoint\"\n                         [keepPlotLineOnClick]=\"true\"\n                         [parentLoading]=\"propertiesLoading && !currentEntity\"\n                         (onPlotLineChanged)=\"onPlotLineChanged($event)\"\n                         (allChartsLoaded)=\"allChartsLoaded($event)\">\n</vsan-perf-detail-charts>\n<div class=\"card\" *ngIf=\"!propertiesLoading && !clusterChartLoading && !errorMsg\">\n   <div class=\"card-block\">\n      <div class=\"card-text cluster-metrics\">\n         <vsan-icon-item [label]=\"clusterName\" [shape]=\"clusterIcon\"></vsan-icon-item>\n         <div class=\"horizontal\">\n            <label id=\"read-metric-key\"\n                   class=\"clr-control-label\"\n                   for=\"read-metrtic-value\">{{selectedReadMetric?.metricLabel}}</label>\n            <clr-tooltip>\n               <span clrTooltipTrigger id=\"read-metrtic-value\">{{getSelectedMetricValue(selectedReadMetric)}}</span>\n               <clr-tooltip-content id=\"read-metric-description\"\n                                    *ngIf=\"!selectedReadMetric?.value\"\n                                    clrPosition=\"top-right\"\n                                    clrSize=\"lg\">\n                  {{\"vsan.monitor.cluster.performance.topContributors.cluster.metric.value.description\" | localized}}\n               </clr-tooltip-content>\n            </clr-tooltip>\n         </div>\n         <div class=\"horizontal\">\n            <label id=\"write-metric-key\"\n                   class=\"clr-control-label\"\n                   for=\"write-metrtic-value\">{{selectedWriteMetric?.metricLabel}}</label>\n            <clr-tooltip>\n               <span clrTooltipTrigger id=\"write-metrtic-value\">{{getSelectedMetricValue(selectedWriteMetric)}}</span>\n               <clr-tooltip-content id=\"write-metric-description\"\n                                    *ngIf=\"!selectedWriteMetric?.value\"\n                                    clrPosition=\"top-left\"\n                                    clrSize=\"lg\">\n                  {{\"vsan.monitor.cluster.performance.topContributors.cluster.metric.value.description\" | localized}}\n               </clr-tooltip-content>\n            </clr-tooltip>\n         </div>\n      </div>\n   </div>\n</div>\n<div class=\"top-contributors-filtering\"\n     *ngIf=\"!propertiesLoading && !clusterChartLoading && !errorMsg\">\n   <div class=\"selection-group\">\n      <label class=\"clr-control-label\"\n             for=\"entity-type-selection\">{{\"vsan.monitor.cluster.performance.topContributors.entity.type\" | localized}}\n      </label>\n      <div class=\"select\">\n         <select id=\"entity-type-selection\"\n                 name=\"entity-type-selection\"\n                 clrSelect\n                 [(ngModel)]=\"selectedEntityType\">\n            <option *ngFor=\"let type of perfTopContributorsEntityTypeKeys\"\n                    value=\"{{type}}\">\n               {{getEntityTypeLabel(type)}}</option>\n         </select>\n      </div>\n      <vsan-datetime-picker\n            (datetimeChange)=\"onDateTimeChanged($event)\"\n            [datetime]=\"selectedTimePointDate\"\n            [label]=\"'vsan.monitor.cluster.performance.topContributors.time.picker.label' | localized\"\n            [max]=\"maxDate\"\n            [min]=\"minDate\"\n            [pickerType]=\"PickerType.TIMER\"\n            [stepMinute]=\"5\"\n            [errorMessage]=\"dateError\">\n      </vsan-datetime-picker>\n   </div>\n   <div class=\"selection-group\">\n      <label class=\"clr-control-label\" for=\"sort-by-selection\">\n         {{\"vsan.monitor.cluster.performance.topContributors.sort.by\" | localized}}\n      </label>\n      <div class=\"select\">\n         <select (change)=\"retrieveTopContributors()\"\n                 [(ngModel)]=\"sortByMetric\"\n                 clrSelect\n                 id=\"sort-by-selection\"\n                 name=\"sort-by-selection\">\n            <option [ngValue]=\"selectedReadMetric\">\n               {{selectedReadMetric?.metricLabel}}\n            </option>\n            <option [ngValue]=\"selectedWriteMetric\">\n               {{selectedWriteMetric?.metricLabel}}\n            </option>\n         </select>\n      </div>\n   </div>\n</div>\n<vsan-illustrated-message\n      *ngIf=\"isTimePointUnavailableViewVisible()\"\n      [message]=\"'vsan.disabledService.topContributors.noSelectedTimePoint' | localized\"\n      [type]=\"IllustratedMessageType.MISSING_SELECTION\">\n</vsan-illustrated-message>\n<ng-container *ngIf=\"isTopContributorsVisible()\">\n   <div class=\"btn-group vsan-actions\">\n      <clr-tooltip>\n         <span clrTooltipTrigger\n               [vsan-ignore-focus]=\"isCombinedChartButtonEnabled()\">\n            <button id=\"combined-chart\"\n                    class=\"btn btn-link btn-sm no-left-padding\"\n                    aria-describedby=\"view-combined-chart-description\"\n                    (click)=\"showCombinedChartsDialog()\"\n                    [disabled]=\"!isCombinedChartButtonEnabled()\">\n               {{\"vsan.monitor.cluster.performance.topContributors.view.combined.charts.link\" | localized}}\n            </button>\n         </span>\n         <clr-tooltip-content id=\"view-combined-chart-description\"\n                              *ngIf=\"!isCombinedChartButtonEnabled()\"\n                              clrPosition=\"top-right\"\n                              clrSize=\"lg\">\n            {{\"vsan.monitor.cluster.performance.topContributors.view.combined.charts.tooltip\" | localized}}\n         </clr-tooltip-content>\n      </clr-tooltip>\n      <clr-tooltip>\n         <span clrTooltipTrigger\n               [vsan-ignore-focus]=\"isPhysicalPlacementButtonEnabled()\">\n            <button *ngIf=\"selectedEntityType === PerfTopContributorsEntityType.VIRTUAL_MACHINE\"\n                    id=\"physical-placement\"\n                    class=\"btn btn-link btn-sm\"\n                    aria-describedby=\"view-physical-placement-description\"\n                    (click)=\"showPhysicalPlacementDialog()\"\n                    [disabled]=\"!isPhysicalPlacementButtonEnabled()\">\n               {{\"vsan.monitor.cluster.performance.topContributors.view.physical.placement.link\" | localized}}\n            </button>\n         </span>\n         <clr-tooltip-content id=\"view-physical-placement-description\"\n                              *ngIf=\"!isPhysicalPlacementButtonEnabled()\"\n                              clrPosition=\"top-right\"\n                              clrSize=\"lg\">\n            {{getPhysicalPlacementButtonTooltip()}}\n         </clr-tooltip-content>\n      </clr-tooltip>\n   </div>\n   <clr-datagrid [(clrDgSelected)]=\"selectedTopContributorItems\"\n                 [clrDgLoading]=\"topContributorsLoading\"\n                 class=\"top-contributors-grid\">\n      <clr-dg-column>\n         {{\"vsan.monitor.cluster.performance.topContributors.column.entity.name\" | localized}}\n      </clr-dg-column>\n      <clr-dg-column>\n         {{\"vsan.monitor.cluster.performance.topContributors.column.host\" | localized}}\n      </clr-dg-column>\n      <clr-dg-column class=\"narrow-column\">\n         {{selectedReadMetric?.metricLabel}}\n      </clr-dg-column>\n      <clr-dg-column class=\"narrow-column\">\n         {{selectedWriteMetric?.metricLabel}}\n      </clr-dg-column>\n\n      <clr-dg-placeholder>{{\"vsan.monitor.cluster.performance.topContributors.no.results\" | localized}}</clr-dg-placeholder>\n\n      <clr-dg-row *clrDgItems=\"let topContributor of topContributorsData\" [clrDgItem]=\"topContributor\">\n         <clr-dg-cell>\n            <vsan-icon-item [label]=\"topContributor.entity.name\"\n                            [shape]=\"topContributor.entity.primaryIconId\">\n            </vsan-icon-item>\n         </clr-dg-cell>\n         <clr-dg-cell>\n            <vsan-icon-item [label]=\"topContributor.parent.name\"\n                            [shape]=\"topContributor.parent.primaryIconId\">\n            </vsan-icon-item>\n         </clr-dg-cell>\n         <clr-dg-cell>{{PerfChartUtil.formatYAxisLabel(topContributor.readMetricValue, getGraphDefinition(), false)}}</clr-dg-cell>\n         <clr-dg-cell>{{PerfChartUtil.formatYAxisLabel(topContributor.writeMetricValue, getGraphDefinition(), false)}}</clr-dg-cell>\n\n         <clr-dg-row-detail *clrIfExpanded>\n            <div class=\"column-flex-container\">\n               <vsan-perf-detail-charts\n                     [commonPerfData]=\"commonPerfData\"\n                     [extraDesc]=\"extraDesc\"\n                     [visibleGraphId]=\"getTopContributorGraph()\"\n                     [selectedPlotLineValue]=\"selectedTimePoint\"\n                     [isAskVmwareLinkVisible]=\"false\"\n                     [showHeaderSection]=\"false\"\n                     [entity]=\"createTopContributorPerfEntity(topContributor)\"\n                     [currentTimeRange]=\"currentTimeRange\">\n               </vsan-perf-detail-charts>\n               <div class=\"btn-group vsan-actions\">\n                  <clr-tooltip>\n                     <span clrTooltipTrigger\n                           [vsan-ignore-focus]=\"isFullPerformanceDisabled(topContributor)\">\n                        <button id=\"full-performance\"\n                                class=\"btn btn-link btn-sm no-left-padding\"\n                                [disabled]=\"isFullPerformanceDisabled(topContributor)\"\n                                (click)=\"selectedEntityType === PerfTopContributorsEntityType.VIRTUAL_MACHINE ?\n                                viewFullVMPerformance(topContributor.entity.moRef) :\n                                viewFullHostPerformance(topContributor)\">\n                           {{\"vsan.monitor.cluster.performance.topContributors.view.full.performance.link\" | localized}}\n                        </button>\n                     </span>\n                     <clr-tooltip-content id=\"view-full-performance\"\n                                          *ngIf=\"isFullPerformanceDisabled(topContributor)\"\n                                          clrPosition=\"top-right\"\n                                          clrSize=\"lg\">\n                        {{\"vsan.monitor.cluster.performance.topContributors.view.viewfullperformance.tooltip\" | localized}}\n                     </clr-tooltip-content>\n                  </clr-tooltip>\n                  <button id=\"disk-group-physical-disks\"\n                          class=\"btn btn-link btn-sm\"\n                          *ngIf=\"selectedEntityType === PerfTopContributorsEntityType.DISK_GROUP\"\n                          (click)=\"viewPhysicalPlacement(topContributor)\">\n                     {{\"vsan.monitor.cluster.performance.topContributors.view.virtual.objects.link\" | localized}}\n                  </button>\n               </div>\n            </div>\n         </clr-dg-row-detail>\n      </clr-dg-row>\n      <clr-dg-footer>\n         <clr-dg-pagination #pagination\n                            [clrDgTotalItems]=\"topContributorsData.length\"\n                            [hidden]=\"!topContributorsData.length\"\n                            [clrDgPageSize]=\"DEFAULT_ITEMS_PER_PAGE\">\n            {{\"vsan.monitor.cluster.performance.topContributors.grid.pagination\" | localized: (pagination.firstItem + 1):\n               (pagination.lastItem + 1):topContributorsData.length}}\n         </clr-dg-pagination>\n      </clr-dg-footer>\n   </clr-datagrid>\n</ng-container>\n","/* Copyright 2020-2022 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {AfterViewInit, Component, Input, OnDestroy, OnInit, ViewChild} from \"@angular/core\";\nimport {PerfChartDataConstants} from \"@component/chart/performance/perf-chart-util\";\nimport {RangePickerState} from \"@component/datetime-picker/time-range-picker/range-picker-state\";\nimport {PerfMonitorCommonPropsData} from \"@generated/perf-monitor-common-props-data\";\nimport {PerfTimeRangeData} from \"@generated/perf-time-range-data\";\nimport {VsanCapabilityData} from \"@generated/vsan-capability-data\";\nimport {RefreshHandler} from \"@service/global-refresh.service\";\nimport {PerfChangeContext} from \"@util/performance/perf-data\";\nimport {PerfModeType, PerfOrchestratorService} from \"@util/performance/perf-orchestrator-service\";\nimport {VsanSignpostUtil} from \"@util/vsan-signpost-util\";\nimport {BasePerfEntity} from \"../model/base-perf-entity\";\nimport {FileShareEntity} from \"../model/file-share-entity\";\nimport {PerfMonitorViewType} from \"../model/perf-monitor-view-type.model\";\nimport {ConsolidatedEntitiesData} from \"./consolidated-entities-data.data\";\nimport {EntitiesReadyEvent} from \"./consolidated-vm-selector.component\";\nimport {ManagedObject} from \"@service/managed-object\";\nimport {FileServiceFeature} from \"@generated/file-service-feature\";\nimport {VsanFileServiceShare} from \"@generated/vsan-file-service-share\";\nimport {FileSharesPaginationSpec} from \"@generated/file-shares-pagination-spec\";\nimport {VsanFileShareUtils} from \"../../file-services/shares/file-share-util\";\nimport {VsanFileShareProtocol} from \"@generated/vsan-file-share-protocol\";\nimport {IllustratedMessageType} from \"@component/illustrated-message/illustrated-message.component\";\nimport {VsanTimeRangePickerComponent} from \"@component/datetime-picker/time-range-picker/time-range-picker.component\";\nimport {FullTimeRangeSelectionData} from \"@model/full-time-range-selection.data\";\nimport {PerformancePersistenceService} from \"@service/performance-persistence.service\";\nimport {ReferenceWatcher} from \"@util/reference-watcher\";\nimport {VsanFileSharesService} from \"@generated/vsan-file-shares-service\";\nimport {VsanFileServiceConfigService} from \"@generated/vsan-file-service-config-service\";\nimport {LoadingIndicator} from \"@service/flow/loading-indicator.decorator\";\nimport {Loader} from \"@service/flow/loader.decorator\";\nimport {ErrorMessage} from \"@service/flow/error-message.decorator\";\nimport {SrMessageType} from \"@service/screen-reader-announcer.service\";\n\n@Component({\n   selector: \"vsan-file-share-data-perf\",\n   templateUrl: \"./file-share-data-perf.html\",\n   styleUrls: [\"file-share-data-perf.scss\"],\n   providers: [ReferenceWatcher],\n})\nexport class VsanFileShareDataPerfComponent implements OnInit, AfterViewInit, OnDestroy {\n   readonly layerSignpostId: string = \"layer-tooltip\";\n   PerfMonitorViewType: typeof PerfMonitorViewType = PerfMonitorViewType;\n   IllustratedMessageType: typeof IllustratedMessageType = IllustratedMessageType;\n   private readonly LAYER_SIGNPOST_WIDTH: number = 360;\n   private readonly LAYER_SIGNPOST_HEIGHT: number = 150;\n\n   @Input()\n   commonPerfData: PerfMonitorCommonPropsData;\n\n   @Input()\n   currentView: PerfMonitorViewType;\n\n   @Input()\n   initialEntityId: string;\n\n   @Input()\n   capabilitiesData: VsanCapabilityData;\n\n   @ViewChild(VsanTimeRangePickerComponent, {static: false})\n   timeRangePickerComponent: VsanTimeRangePickerComponent;\n\n   timePickerRange: PerfTimeRangeData;\n   timePickerState: RangePickerState;\n   timePickerHourInterval: number;\n   timePickerFromDate: Date;\n\n   @LoadingIndicator()\n   loading: boolean;\n\n   @ErrorMessage()\n   errorMsg: string;\n\n   selectedShare: VsanFileServiceShare;\n   fileShareEntity: FileShareEntity;\n\n   smbTooltipVisible: boolean = false;\n   vdfsSignpostVisible: boolean = false;\n\n   /**\n    * From 70U1 backend supports vdfs layer metrics, for early releases & mixed mode (vc >= 70u1 && hosts == 70GA),\n    * UI has to hide the filesystem checkbox\n    */\n   fileSystemGraphsSupported: boolean;\n   smbShareSupported: boolean;\n   smbProtocolLayerPerformanceSupported: boolean;\n   sharePaginationSupported: boolean;\n   shares: VsanFileServiceShare[];\n   consolidatedEntitiesData: ConsolidatedEntitiesData;\n\n   private entityIdentifierToColor: any;\n\n   constructor(public perfOrchestrator: PerfOrchestratorService,\n         private fileServiceConfigService: VsanFileServiceConfigService,\n         private fileServiceShareService: VsanFileSharesService,\n         private perfPersistenceService: PerformancePersistenceService,\n         private refWatcher: ReferenceWatcher) {\n      this.refWatcher.watchGlobalRefreshSubscription(VsanFileShareDataPerfComponent.prototype.constructor.name);\n   }\n\n   async ngOnInit(): Promise<void> {\n      this.initChartProperties();\n      await this.fetch();\n   }\n\n   ngAfterViewInit(): void {\n      this.initializePersistedSelections();\n   }\n\n   ngOnDestroy(): void {\n      this.perfOrchestrator.reset();\n   }\n\n   @RefreshHandler\n   @Loader({\n      srMessage: \"vsan.monitor.cluster.performance.fileServices.title\",\n      srMessageType: SrMessageType.DATA,\n   })\n   async fetch(): Promise<void> {\n      await this.queryFeatureSwitches();\n\n      if (this.sharePaginationSupported) {\n         this.shares = await this.fileServiceShareService.listAllShares(ManagedObject.contextObject);\n      } else {\n         const spec: FileSharesPaginationSpec =\n               FileSharesPaginationSpec.Factory.create(FileSharesPaginationSpec.MAX_SHARE_QUERY_SIZE(),\n                     null, null, null, null, null);\n         this.shares = (await this.fileServiceShareService.filterShares(ManagedObject.contextObject,\n               spec, false)).shares;\n      }\n   }\n\n   private async queryFeatureSwitches(): Promise<void> {\n      const featureSupportedMap: any = await this.fileServiceConfigService.isFeatureSupportedOnRuntime(\n            ManagedObject.contextObject,\n            [FileServiceFeature.PAGINATION, FileServiceFeature.SMB, FileServiceFeature.SMB_PERFORMANCE]);\n      this.smbShareSupported = featureSupportedMap[FileServiceFeature.SMB];\n      // No standalone killswitch for file system graphs support, it comes with SMB, so we reuse `smbShareSupported`\n      this.fileSystemGraphsSupported = this.smbShareSupported;\n      // Start to support smb protocol layer performance from 70u2\n      this.smbProtocolLayerPerformanceSupported = featureSupportedMap[FileServiceFeature.SMB_PERFORMANCE];\n      this.sharePaginationSupported = featureSupportedMap[FileServiceFeature.PAGINATION];\n   }\n\n   private get isPersistedSelectionInitialized(): boolean {\n      const persistedSelection: FullTimeRangeSelectionData =\n            this.perfPersistenceService.getPersistedSelection();\n\n      // If there is no persisted selection. it's replaced by view's default one\n      if (persistedSelection == null) {\n         return true;\n      }\n\n      return this.timePickerRange === persistedSelection.timeRange;\n   }\n\n   private initializePersistedSelections(): void {\n      if (!this.timeRangePickerComponent) {\n         this.refWatcher.setTimeout(() => {\n            this.initializePersistedSelections();\n         }, 1000);\n         return;\n      }\n\n      const persistedSelection: FullTimeRangeSelectionData =\n            this.perfPersistenceService.getPersistedSelection();\n\n      if (persistedSelection) {\n         const timeRange: PerfTimeRangeData = persistedSelection.timeRange;\n         const state: RangePickerState = persistedSelection.state;\n\n         if (this.timeRangePickerComponent.currentTimeRange.from !== timeRange.from ||\n               this.timeRangePickerComponent.currentTimeRange.to !== timeRange.to ||\n               this.timeRangePickerComponent.currentPickerState !== state) {\n            this.timePickerRange = timeRange;\n            this.timePickerState = state;\n            this.timeRangePickerComponent.setTimerange(timeRange, state);\n         }\n      }\n   }\n\n   selectFileShare(share: VsanFileServiceShare): void {\n      if (this.selectedShare === share) {\n         return;\n      }\n      this.selectedShare = share;\n      if (!this.selectedShare) {\n         return;\n      }\n\n      this.fileShareEntity = VsanFileShareUtils.getFileShareEntity(share, this.smbShareSupported,\n            this.smbProtocolLayerPerformanceSupported);\n      this.fileShareEntity.configSpec = this.commonPerfData.entityTypes[this.fileShareEntity.entityId];\n      if (this.fileShareEntity.protocolEntity) {\n         this.fileShareEntity.protocolEntity.configSpec = this.fileShareEntity.configSpec;\n      }\n      this.initialEntityId = this.fileShareEntity.entityUuid;\n      this.prepareOrchestrator(this.fileShareEntity);\n      if (this.fileShareEntity.protocolEntity) {\n         this.perfOrchestrator.consolidatedViewHelper.entityVisibilityStateMap[this.fileShareEntity.entityUuid] = false;\n         this.perfOrchestrator.consolidatedViewHelper.toggle(this.fileShareEntity.entityUuid, false);\n      }\n      this.smbTooltipVisible = share.config.protocol === VsanFileShareProtocol.SMB\n            && !this.smbProtocolLayerPerformanceSupported;\n\n      // The show/hide rule of the signpost:\n      // 1. 70 release, hide;\n      // 2. 70u1 release: only show it when nfs share is selected;\n      // 3. 70u2 release: always show it\n      this.vdfsSignpostVisible = this.fileSystemGraphsSupported &&\n            (share.config.protocol !== VsanFileShareProtocol.SMB || this.smbProtocolLayerPerformanceSupported);\n   }\n\n   onPerfTimeRangeChange(timeRange?: PerfTimeRangeData, isOnInit?: boolean): void {\n      this.perfOrchestrator.changeTimeRange(timeRange);\n\n      if (isOnInit && !this.isPersistedSelectionInitialized) {\n         return;\n      }\n\n      this.timePickerRange = timeRange;\n      this.timePickerState = this.timeRangePickerComponent.currentPickerState;\n\n      if (!isOnInit) {\n         this.perfPersistenceService.saveSelection(timeRange, this.timeRangePickerComponent.currentPickerState);\n      }\n   }\n\n   getSignpostPosition(): string {\n      return VsanSignpostUtil.getPosition(this.layerSignpostId, this.LAYER_SIGNPOST_WIDTH, this.LAYER_SIGNPOST_HEIGHT);\n   }\n\n   onEntitiesReady(event: EntitiesReadyEvent): void {\n      this.entityIdentifierToColor = event.entityIdentifierToColor;\n      this.setConsolidatedEntitiesData();\n   }\n\n   setConsolidatedEntitiesData(): void {\n      const data: ConsolidatedEntitiesData = new ConsolidatedEntitiesData();\n      data.entityIdentifierToVisibility = this.perfOrchestrator.consolidatedViewHelper.entityVisibilityStateMap;\n      data.entities = this.perfOrchestrator.data.entities;\n      data.entityIdentifierToColor = this.entityIdentifierToColor;\n      this.consolidatedEntitiesData = data;\n   }\n\n   private initChartProperties(): void {\n      this.perfOrchestrator.reset();\n      this.perfOrchestrator.data.entityTypes = this.commonPerfData.entityTypes;\n      this.perfOrchestrator.data.entityType = PerfChartDataConstants.CLUSTER_FILE_SERVICE_ENTITY;\n      this.perfOrchestrator.consolidatedViewHelper.entityVisibilityStateMap = {};\n      this.perfOrchestrator.data.timeRangeData = this.timePickerRange;\n      this.perfOrchestrator.mode = PerfModeType.SHOW_SPECIFICS;\n   }\n\n   private prepareOrchestrator(entity: FileShareEntity): void {\n      this.perfOrchestrator.data.entities = [];\n      // all the entities should be initially set as selected in order consolidatedViewHelper's selectedEntities to be\n      // correctly initialized\n      if (entity.protocolEntity) {\n         this.setOrchestratorEntityData(entity.protocolEntity, true);\n         this.setOrchestratorEntityData(entity, true);\n      } else {\n         this.setOrchestratorEntityData(entity, true);\n      }\n      this.perfOrchestrator.setSelectedSpecifiedEntities();\n      this.perfOrchestrator.change.next(PerfChangeContext.FILTERED_ENTITIES);\n   }\n\n   private setOrchestratorEntityData(entity: BasePerfEntity, selected: boolean): void {\n      this.perfOrchestrator.data.entities.push(entity);\n      this.perfOrchestrator.data.entitySelectionStateMap.set(entity.entityUuid, selected);\n      this.perfOrchestrator.consolidatedViewHelper.entityVisibilityStateMap[entity.entityUuid] = selected;\n   }\n}\n","/* Copyright 2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {\n   Directive,\n   ElementRef,\n   AfterViewInit,\n   HostListener\n} from \"@angular/core\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\n\n/**\n * Attribute directive used to fix the buttons' border that are part of btn-group. Clarity button group doesn't fully\n * support flex-wrap: wrap mode. The buttons are wrapped, but their border is not correctly rendered. This directive\n * fixes the left/right borders and the border radius depending on the button's position.\n */\n@Directive({\n   selector: \"[vsan-button-group-wrap]\"\n})\nexport class ButtonGroupWrapDirective implements AfterViewInit {\n\n   private static readonly ALL_BUTTON_ELEMENTS_SELECTOR: string = \"button\";\n   private readonly ARIA_SELECTED_ATTRIBUTE: string = \"aria-selected\";\n   private readonly STYLE_ATTRIBUTE: string = \"style\";\n   private readonly FIRST_BUTTON_ATTRIBUTE_VALUE: string =\n         \"border-left: solid; border-width: 1px; border-top-left-radius:0.125rem; border-bottom-left-radius: 0.125rem\";\n   private readonly FIRST_BUTTON_SELECTED_ATTRIBUTE_VALUE: string =\n         \"border-top-left-radius:0.125rem; border-bottom-left-radius: 0.125rem\";\n   private readonly ONE_BUTTON_AT_ROW_ATTRIBUTE_VALUE: string =\n         \"border-left: solid; border-width: 1px; border-top-left-radius:0.125rem; border-bottom-left-radius: 0.125rem; border-top-right-radius:0.125rem; border-bottom-right-radius: 0.125rem\";\n   private readonly ONE_BUTTON_AT_ROW_SELECTED_ATTRIBUTE_VALUE: string =\n         \"border-top-left-radius:0.125rem; border-bottom-left-radius: 0.125rem; border-top-right-radius:0.125rem; border-bottom-right-radius: 0.125rem\";\n   private readonly MIDDLE_BUTTON_ATTRIBUTE_VALUE: string =\n         \"border-left: none; border-top-left-radius:0; border-bottom-left-radius: 0; border-top-right-radius:0; border-bottom-right-radius:0\";\n   private readonly LAST_BUTTON_ATTRIBUTE_VALUE: string =\n         \"border-top-left-radius:0; border-bottom-left-radius: 0;border-top-right-radius:0.125rem; border-bottom-right-radius: 0.125rem\";\n\n   @HostListener(\"window:resize\", [\"$event\"])\n   onResize(event): void {\n      this.updateButtonsBorder();\n   }\n\n   constructor(private elRef: ElementRef) {}\n\n   ngAfterViewInit(): void {\n      this.updateButtonsBorder();\n   }\n\n   private updateButtonsBorder(): void {\n      const allButtons: NodeListOf<HTMLButtonElement> = this.elRef.nativeElement.querySelectorAll(\n            ButtonGroupWrapDirective.ALL_BUTTON_ELEMENTS_SELECTOR);\n\n      if (VsanUiUtils.isUnset(allButtons) || allButtons.length === 0) {\n         return;\n      }\n\n      const buttons: HTMLButtonElement[] = [];\n      allButtons.forEach(button => buttons.push(button));\n      this.updateButtonsAtRowStyle(buttons);\n   }\n\n   /**\n    * The method goes through the buttons and is recursively called, for the buttons that are wrapped\n    * @param buttons\n    */\n   private updateButtonsAtRowStyle(buttons: HTMLButtonElement[]): void {\n      const firstBtn: HTMLButtonElement = buttons[0];\n      if (buttons.length === 1) {\n         this.updateButtonAtRowStyle(firstBtn);\n         return;\n      }\n\n      this.updateFirstButtonAtRowStyle(firstBtn);\n\n      let lastBtnAtRow: HTMLButtonElement = firstBtn;\n      for (let index = 1; index < buttons.length; index++) {\n         const btn: HTMLButtonElement = buttons[index];\n\n         if (this.areOnSameRow(btn, firstBtn)) {\n            this.updateMiddleButtonStyle(btn);\n            lastBtnAtRow = btn;\n         } else {\n            // update the last button at this line and call recursively the method for the new line\n            this.updateLastButtonAtRowStyle(lastBtnAtRow, index === 1);\n            this.updateButtonsAtRowStyle(buttons.slice(index));\n            return;\n         }\n      }\n\n      // if we are here, all of the buttons are at one row. Update the last button.\n      this.updateLastButtonAtRowStyle(lastBtnAtRow, buttons.length === 1);\n   }\n\n   private areOnSameRow(btn1, btn2): boolean {\n      return btn1.getBoundingClientRect().top === btn2.getBoundingClientRect().top;\n   }\n\n   private updateFirstButtonAtRowStyle(firstBtn: HTMLButtonElement): void {\n      if (this.isSelected(firstBtn)) {\n         this.setStyle(firstBtn, this.FIRST_BUTTON_SELECTED_ATTRIBUTE_VALUE);\n      } else {\n         this.setStyle(firstBtn, this.FIRST_BUTTON_ATTRIBUTE_VALUE);\n      }\n   }\n\n   private updateMiddleButtonStyle(btn: HTMLButtonElement): void {\n      this.setStyle(btn, this.MIDDLE_BUTTON_ATTRIBUTE_VALUE);\n   }\n\n   private updateLastButtonAtRowStyle(lastBtn: HTMLButtonElement, onlyOneButton: boolean): void {\n      if (onlyOneButton) {\n         this.updateButtonAtRowStyle(lastBtn);\n      } else {\n         this.setStyle(lastBtn, this.LAST_BUTTON_ATTRIBUTE_VALUE);\n      }\n   }\n\n   private updateButtonAtRowStyle(btn: HTMLButtonElement): void {\n      if (this.isSelected(btn)) {\n         this.setStyle(btn, this.ONE_BUTTON_AT_ROW_SELECTED_ATTRIBUTE_VALUE);\n      } else {\n         this.setStyle(btn, this.ONE_BUTTON_AT_ROW_ATTRIBUTE_VALUE);\n      }\n   }\n\n   private isSelected(btn): boolean {\n      return btn.getAttributeNode(this.ARIA_SELECTED_ATTRIBUTE).value === \"true\";\n   }\n\n   private setStyle(btn: HTMLButtonElement, style: string): void {\n      btn.setAttribute(this.STYLE_ATTRIBUTE, style);\n   }\n}","/* Copyright 2019-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, EventEmitter, Input, Output} from \"@angular/core\";\nimport {IoInsightInstance} from \"@generated/io-insight-instance\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {IoInsightRunningState} from \"@generated/io-insight-running-state\";\nimport {Logger} from \"@util/logger\";\nimport {DateFormat} from \"@pipe/VsanDateFormatterPipe\";\nimport {VsanDateTimeUtils} from \"@util/vsan-dateteime-util\";\n\n@Component({\n   templateUrl: \"io-insight-instance.html\",\n   styleUrls: [\"io-insight-instance.scss\"],\n   selector: \"vsan-io-insight-instance\",\n})\nexport class IoInsightInstanceComponent {\n   IoInsightRunningState: typeof IoInsightRunningState = IoInsightRunningState;\n\n   @Input()\n   ioInsightInstance: IoInsightInstance;\n\n   @Output()\n   viewMetrics: EventEmitter<IoInsightInstance> = new EventEmitter<IoInsightInstance>();\n\n   @Output()\n   stopInstance: EventEmitter<IoInsightInstance> = new EventEmitter<IoInsightInstance>();\n\n   @Output()\n   rerunInstance: EventEmitter<IoInsightInstance> = new EventEmitter<IoInsightInstance>();\n\n   @Output()\n   deleteInstance: EventEmitter<IoInsightInstance> = new EventEmitter<IoInsightInstance>();\n\n   @Output()\n   renameInstance: EventEmitter<IoInsightInstance> = new EventEmitter<IoInsightInstance>();\n\n   get getDurationLabel(): string {\n      if (this.ioInsightInstance) {\n         return VsanUiUtils.getString(\"vsan.io.insight.instance.duration\",\n               VsanDateTimeUtils.applyFormatting(this.ioInsightInstance.timeRange.startTime, DateFormat.NO_SECONDS),\n               VsanDateTimeUtils.applyFormatting(this.ioInsightInstance.timeRange.endTime, DateFormat.NO_SECONDS),\n               this.ioInsightInstance.timeRange.duration);\n      }\n   }\n\n   getAlertStyle(): string {\n      if (this.ioInsightInstance) {\n         switch (this.ioInsightInstance.state) {\n            case IoInsightRunningState.COMPLETED:\n               return \"alert-success instance-alert-success\";\n            case IoInsightRunningState.RUNNING:\n               return \"alert-info instance-alert-info\";\n         }\n      }\n   }\n\n   getStatusLabel(): string {\n      if (this.ioInsightInstance) {\n         switch (this.ioInsightInstance.state) {\n            case IoInsightRunningState.COMPLETED:\n               return VsanUiUtils.getString(\"vsan.io.insight.running.state.completed\");\n            case IoInsightRunningState.RUNNING:\n               return VsanUiUtils.getString(\"vsan.io.insight.running.state.running.remaining\",\n                     this.ioInsightInstance.timeRange.remainingTimeLocalizedTimeUnit);\n            default:\n               Logger.warn(\"Unrecognized status:\", this.ioInsightInstance.state);\n               return VsanUiUtils.getString(\"vsan.na.label\");\n         }\n      }\n   }\n}","/* Copyright 2019-2022 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, EventEmitter, Input, OnChanges, Output} from \"@angular/core\";\nimport {IoInsightInstance} from \"@generated/io-insight-instance\";\nimport {IoInsightRunningState} from \"@generated/io-insight-running-state\";\nimport {InstanceActionContextData} from \"../io-insight/action/instance-action-context.data\";\nimport {ModalBuilder} from \"@util/modal-builder\";\nimport {ManagedObject} from \"@service/managed-object\";\nimport {IoInsightService} from \"@generated/io-insight-service\";\nimport {TaskMonitorService} from \"@service/task-monitor-service\";\nimport {PerfMonitorCommonPropsData} from \"@generated/perf-monitor-common-props-data\";\nimport {PerfMonitorViewType} from \"../model/perf-monitor-view-type.model\";\nimport {PerfTimeRangeData} from \"@generated/perf-time-range-data\";\nimport {RefreshHandler} from \"@service/global-refresh.service\";\nimport {VsanDateTimeUtils} from \"@util/vsan-dateteime-util\";\nimport {ReferenceWatcher} from \"@util/reference-watcher\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\n\n@Component({\n   templateUrl: \"io-insight-metrics.html\",\n   styleUrls: [\"io-insight-metrics.scss\"],\n   selector: \"vsan-io-insight-metrics\",\n   providers: [ReferenceWatcher],\n})\nexport class IoInsightMetricsComponent implements OnChanges {\n   private static readonly REFRESH_INTERVAL_10S_IN_MS: number = 10000;\n\n   private refreshInterval: number = IoInsightMetricsComponent.REFRESH_INTERVAL_10S_IN_MS;\n   infoLabel: string;\n\n   visible: boolean = true;\n   IoInsightRunningState: typeof IoInsightRunningState = IoInsightRunningState;\n   formatDate: (value: Date | number, options?: any) => any = VsanDateTimeUtils.formatDate;\n   loading: boolean = true;\n   showLoading: boolean = true;\n   errorMsg: string;\n   allChartsLoaded: boolean;\n   refreshWhenChartsLoaded: boolean = false;\n\n   @Input()\n   commonPerfData: PerfMonitorCommonPropsData;\n\n   @Input()\n   currentView: PerfMonitorViewType;\n\n   @Input()\n   initialEntityId: string;\n\n   currentTimeRange: PerfTimeRangeData;\n\n   @Output()\n   back: EventEmitter<IoInsightInstance> = new EventEmitter<IoInsightInstance>();\n\n   _instance: IoInsightInstance;\n\n   @Input()\n   set ioInsightInstance(value: IoInsightInstance) {\n      this._instance = value;\n      this.currentTimeRange = PerfTimeRangeData.Factory.create(\n            \"\", this.ioInsightInstance.timeRange.startTime, this.ioInsightInstance.timeRange.endTime, null);\n      this.setAutoRefreshInterval();\n      this.visible = true;\n   }\n\n   get ioInsightInstance(): IoInsightInstance {\n      return this._instance;\n   }\n\n   @Output()\n   ioInsightInstanceChange: EventEmitter<IoInsightInstance> = new EventEmitter<IoInsightInstance>();\n\n   constructor(private taskSvc: TaskMonitorService,\n         private ioInsightService: IoInsightService,\n         private refWatcher: ReferenceWatcher) {\n      this.refWatcher.watchGlobalRefreshSubscription(IoInsightMetricsComponent.prototype.constructor.name);\n   }\n\n   ngOnChanges(): void {\n      this.fetch();\n   }\n\n   @RefreshHandler\n   fetch(): void {\n      this.updateInstance(true);\n   }\n\n   onBackButtonClicked(): void {\n      this.visible = false;\n      this.back.emit(this.ioInsightInstance);\n   }\n\n   onStopInstance(): void {\n      const context: InstanceActionContextData = {\n         instance: this.ioInsightInstance,\n         clusterRef: this.commonPerfData.clusterRef,\n         deleteOperation: false,\n      };\n      new ModalBuilder(\"ioInsight/deleteInstance\")\n            .setSize(600, 260)\n            .open(context)\n            .then(this.refreshWhenTaskDone);\n   }\n\n   onAllChartsLoaded(): void {\n      this.allChartsLoaded = true;\n      if (this.refreshWhenChartsLoaded) {\n         this.updateInstance(false);\n      }\n   }\n\n   refreshOnRunningInstance(): void {\n      // refresh the view when the instance is running and the view is visible\n      if (this.ioInsightInstance.state === IoInsightRunningState.RUNNING && this.visible) {\n         this.refWatcher.clearTimeouts();\n         this.refWatcher.setTimeout(() => {\n            this.updateInstance(false);\n         }, this.refreshInterval);\n      }\n   }\n\n   private refreshWhenTaskDone = async (task: ManagedObject) => {\n      if (!task) {\n         return;\n      }\n      await this.taskSvc.getAwaitResult(task);\n      this.updateInstance(true);\n   };\n\n   private updateInstance = async (showLoading: boolean) => {\n      // if showLoading=false means we are in auto refresh, in this case wait until the charts are loaded, if their not\n      if (!this.visible || !this.allChartsLoaded && showLoading === false && this.isCompletedState) {\n         this.refreshWhenChartsLoaded = true;\n         return;\n      }\n\n      this.refreshWhenChartsLoaded = false;\n      this.loading = showLoading;\n      this.showLoading = showLoading;\n      this.allChartsLoaded = false;\n      try {\n         this._instance =\n               await this.ioInsightService.getIoInsightInstanceInfo(this.ioInsightInstance, ManagedObject.contextObject);\n\n      } catch (error) {\n         this.errorMsg = error;\n      } finally {\n         this.loading = false;\n         this.showLoading = false;\n         this.refreshOnRunningInstance();\n      }\n   };\n\n   private get isCompletedState(): boolean {\n      return IoInsightRunningState.COMPLETED === (this.ioInsightInstance && this.ioInsightInstance.state);\n   }\n\n   private setAutoRefreshInterval(): void {\n      // long running instances(duration > 60 mins) has lots of timestamps, which slow down charts rendering, also\n      // the API is slower. These technical limitations requires the auto refresh interval to be increased to 1 minute\n      if (this.ioInsightInstance.timeRange.durationInMinutes > 60) {\n         this.refreshInterval = VsanDateTimeUtils.MINUTE_IN_MILLISECONDS;\n         this.infoLabel = VsanUiUtils.getString(\"vsan.io.insight.metrics.view.running.infoLabel.long.duration\");\n      } else {\n         this.refreshInterval = IoInsightMetricsComponent.REFRESH_INTERVAL_10S_IN_MS;\n         this.infoLabel = VsanUiUtils.getString(\"vsan.io.insight.metrics.view.running.infoLabel.short.duration\");\n      }\n   }\n\n   getProgressValue(): number {\n      return this.ioInsightInstance.timeRange.durationInMinutes -\n            this.ioInsightInstance.timeRange.remainingTimeInMinutes;\n   }\n}\n","/* Copyright 2020-2022 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {PerfChartDataConstants} from \"@component/chart/performance/perf-chart-util\";\nimport {TreeNode} from \"@component/inventory/tree-view/tree-node\";\nimport {PerfMonitorCommonPropsData} from \"@generated/perf-monitor-common-props-data\";\nimport {ManagedObjectUtils} from \"@service/managed-object\";\nimport {PerfMonitorViewType} from \"../model/perf-monitor-view-type.model\";\nimport {PerformanceUtils} from \"./perf-utils\";\n\nexport class PerformanceSupportUtil {\n   /**\n    * Check if the vSAN Direct entity types are presented in the commonPerfData,\n    * if so then vSAN direct monitoring is supported\n    */\n   static isVsanDirectSupported(commonPerfData: PerfMonitorCommonPropsData): boolean {\n      return commonPerfData.entityTypes[PerfChartDataConstants.CLUSTER_VSAN_DIRECT_ENTITY] &&\n            commonPerfData.entityTypes[PerfChartDataConstants.HOST_VSAN_DIRECT_ENTITY];\n   }\n\n   /**\n    * Get PerfMonitorViewType for only supported performance monitoring items.\n    * @private\n    */\n   static getSupportedPerfViews(objectType: string, commonPerfData: PerfMonitorCommonPropsData)\n         : PerfMonitorViewType[] {\n      const remoteClusterTreeNodes: TreeNode[] =\n            PerformanceUtils.getRemoteClustersTreeNodes(commonPerfData.mountedRemoteDatastores);\n      let availViews: PerfMonitorViewType[] = null;\n\n      const isIscsiSupported: boolean = commonPerfData.isIscsiServiceEnabled && !commonPerfData.isEmptyClusterForIscsi;\n\n      // whether the ioinsight is supported and user has Global.Diagnostics permission\n      const isIoInsightSupported: boolean =\n            commonPerfData.isIoInsightSupported && commonPerfData.hasIoInsightViewPrivilege;\n\n      switch (objectType) {\n         case ManagedObjectUtils.CLUSTER:\n            if (commonPerfData.isComputeOnlyCluster) {\n               availViews = [PerfMonitorViewType.CLUSTER_COMPUTE_ONLY_VM_REMOTE_CONSUMPTION];\n               break;\n            }\n            availViews = [PerfMonitorViewType.CLUSTER_VM_CONSUMPTION];\n            if (remoteClusterTreeNodes && remoteClusterTreeNodes.length) {\n               availViews.push(PerfMonitorViewType.CLUSTER_VM_REMOTE_CONSUMPTION);\n            }\n            availViews.push(PerfMonitorViewType.CLUSTER_BACKEND);\n            if (isIscsiSupported) {\n               availViews.push(PerfMonitorViewType.CLUSTER_ISCSI);\n            }\n            if (commonPerfData.isFileServiceEnabled) {\n               availViews.push(PerfMonitorViewType.CLUSTER_FILE_SERVICE);\n            }\n            if (isIoInsightSupported) {\n               availViews.push(PerfMonitorViewType.CLUSTER_IO_INSIGHT);\n            }\n            if (commonPerfData.isPmemManagedByVsan) {\n               availViews.push(PerfMonitorViewType.CLUSTER_PMEM);\n            }\n            if (PerformanceSupportUtil.isVsanDirectSupported(commonPerfData)) {\n               availViews.push(PerfMonitorViewType.CLUSTER_VSAN_DIRECT);\n            }\n            break;\n         case ManagedObjectUtils.HOST:\n            availViews = [\n               PerfMonitorViewType.HOST_VM_CONSUMPTION,\n               PerfMonitorViewType.HOST_BACKEND,\n               PerfMonitorViewType.HOST_DISK,\n               PerfMonitorViewType.HOST_PHYSICAL_ADAPTER,\n               PerfMonitorViewType.HOST_VIRTUAL_ADAPTER,\n            ];\n            if (isIscsiSupported) {\n               availViews.push(PerfMonitorViewType.HOST_ISCSI);\n            }\n            if (isIoInsightSupported) {\n               availViews.push(PerfMonitorViewType.HOST_IO_INSIGHT);\n            }\n            if (PerformanceSupportUtil.isVsanDirectSupported(commonPerfData)) {\n               availViews.push(PerfMonitorViewType.HOST_VSAN_DIRECT);\n            }\n            if (commonPerfData.isPmemManagedByVsan) {\n               availViews.push(PerfMonitorViewType.HOST_PMEM);\n            }\n            break;\n         case ManagedObjectUtils.VM:\n            availViews = [PerfMonitorViewType.VM_CONSUMPTION, PerfMonitorViewType.VM_VIRTUAL_DISK];\n            break;\n         default:\n            throw new Error(\"Unsupported object type: \" + objectType);\n      }\n      return availViews;\n   }\n}\n","<vsan-light-info-prompt\n      [title]=\"title\">\n   <div class=\"dialog-container\">\n      <vsan-consolidated-vm-selector [entities]=\"consolidatedEntitiesData.entities\"\n                                     [entityVisibilityStateMap]=\"consolidatedEntitiesData.entityIdentifierToVisibility\"\n                                     (entitySelect)=\"onEntitySelect($event)\"\n                                     (entitiesReady)=\"onEntitiesReady($event)\">\n      </vsan-consolidated-vm-selector>\n\n      <vsan-perf-detail-charts id=\"single-entity-data-panel\"\n                               [commonPerfData]=\"commonPerfData\"\n                               [consolidatedEntitiesData]=\"consolidatedEntitiesData\"\n                               [visibleGraphId]=\"visibleGraphId\"\n                               [isAskVmwareLinkVisible]=\"false\"\n                               [showHeaderSection]=\"false\">\n      </vsan-perf-detail-charts>\n   </div>\n</vsan-light-info-prompt>","/* Copyright 2017 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {MetricColObj} from \"./metric-col-obj\";\nimport {BasePerfEntity} from \"./base-perf-entity\";\n\n/**\n * This is the object to represent the multi entities data collection\n */\nexport class PerfEntities {\n   /**\n    * describe how the object metrics like\n    */\n   public col: MetricColObj;\n\n   public objs: BasePerfEntity[];\n}\n\n","/* Copyright 2017 VMware, Inc. All rights reserved. -- VMware Confidential */\n/**\n * the object to describe the metrics column object of the multi entities perf chart page\n */\nexport class MetricColObj {\n   constructor(public label: string, // the column header text\n         // the attribute name of the column\n         public key: MetricKeyType) {}\n}\n\nexport enum MetricKeyType {\n   DISK_TYPE = <any>\"diskType\",\n   DISK_GROUP = <any>\"diskGroup\",\n   ENTITY_NAME = <any>\"entityName\",\n   VMDK_PATH = <any>\"vmdk\"\n}","<div class=\"prompt-header\" *ngIf=\"title\">\n   <header class=\"title-container\">\n      <h3 id=\"vsan-dialog-title\" class=\"title\" vsan-show-title>{{title}}</h3>\n      <span class=\"separator\" *ngIf=\"subtitle\"></span>\n      <span class=\"subtitle\" vsan-show-title *ngIf=\"subtitle\">{{subtitle}}</span>\n   </header>\n   <button id=\"closeBtn\" class=\"close\" (click)=\"cancel()\"\n           [attr.aria-label]=\"'vsan.common.closeDialog'|localized: title\">\n      <clr-icon shape=\"close\" size=\"24\" title=\"{{'vsan.common.srMessage.close' | localized}}\"></clr-icon>\n   </button>\n</div>\n\n<div id=\"prompt-body\" class=\"prompt-body\" role=\"group\" aria-labelledby=\"vsan-dialog-title\">\n\n   <vsan-validation *ngIf=\"alertMessages && alertMessages.length > 0\"\n                    [(alerts)]=\"alertMessages\"\n                    [alertType]=\"alertType\"\n                    [allowClose]=\"allowAlertClose\"\n                    (onClosed)=\"clearAlerts()\">\n   </vsan-validation>\n\n   <span *ngIf=\"blockContent\" class=\"busy-backdrop\">\n      <!-- When busy, but no text to display, only show spinner-->\n      <span *ngIf=\"!busyText\" class=\"spinner spinner-lg central-spinner\"></span>\n\n      <!-- Otherwise display progress bar with text -->\n      <div *ngIf=\"busyText\" class=\"busy-indicator-container\">\n          <div class=\"progress loop\" id=\"busy-indicator\">\n              <progress></progress>\n          </div>\n      </div>\n      <div>{{busyText}}</div>\n   </span>\n\n   <!-- The View -->\n   <ng-content id=\"content\"></ng-content>\n</div>\n\n<div id=\"footer\" class=\"footer button-container\">\n   <div class=\"button-container\">\n      <button id=\"primary-btn\"\n              *ngIf=\"confirmText\"\n              class=\"btn btn-primary action-btn {{confirmStyle}}\"\n              (click)=\"confirm()\"\n              [disabled]=\"blockButton\">\n         {{ confirmText | localized }}\n      </button>\n      <button id=\"secondary-btn\"\n              *ngIf=\"cancelText\"\n              class=\"btn action-btn\"\n              (click)=\"cancel()\"\n              [attr.aria-label]=\"'vsan.common.closeDialog' | localized: title\">\n         {{ cancelText | localized }}\n      </button>\n   </div>\n   <div class=\"button-container\">\n      <button id=\"additional-btn\"\n              *ngIf=\"additionalButtonText\"\n              class=\"btn action-btn\"\n              [disabled]=\"blockAdditionalButton\"\n              (click)=\"additionalAction()\">\n        {{ additionalButtonText | localized }}\n      </button>\n   </div>\n</div>\n","import {PerfTopContributorsEntityType} from '@generated/perf-top-contributors-entity-type';\n\nexport interface PerfTopContributorsQuerySpec {\n\n   entity: PerfTopContributorsEntityType;\n   metricId: string;\n   timeStamp: number;\n} //class PerfTopContributorsQuerySpec\n\nexport module PerfTopContributorsQuerySpec{\nexport class Factory {\n\n   static create = (entity: PerfTopContributorsEntityType, metricId: string, timeStamp: number): PerfTopContributorsQuerySpec => {\n      return { entity: entity, metricId: metricId, timeStamp: timeStamp, };\n   }\n\n\n} //class Factory\n\n} //module PerfTopContributorsQuerySpec\n","/* Copyright 2019-2022 VMware, Inc. All rights reserved. -- VMware Confidential */\n\nexport class VsanSignpostUtil {\n   // The signpost's arrow is 12px in Clarity 2.2.0\n   private static readonly ARROW_SIZE: number = 12;\n   // The modal left or right padding is 24px.\n   private static readonly MODAL_HORIZONTAL_PADDING: number = 24;\n   // The modal top padding and title height or the bottom padding and footer height is 72px.\n   private static readonly MODAL_VERTICAL_PADDING: number = 72;\n\n   private static readonly TOP: string = \"top\";\n   private static readonly LEFT: string = \"left\";\n   private static readonly RIGHT: string = \"right\";\n   private static readonly BOTTOM: string = \"bottom\";\n   private static readonly MIDDLE: string = \"middle\";\n\n   static getPosition(elementId: string, signpostWidth: number, signpostHeight: number,\n         isInModal: boolean = false): string {\n      const elementBox: DOMRect = document.getElementById(elementId).getBoundingClientRect();\n      const modalVerticalPadding: number = isInModal\n            ? VsanSignpostUtil.MODAL_VERTICAL_PADDING\n            : 0;\n      const verticalPosition: string = VsanSignpostUtil.getVerticalPosition(\n            elementBox, signpostHeight + VsanSignpostUtil.ARROW_SIZE + modalVerticalPadding);\n      const modalHorizontalPadding: number = isInModal\n            ? VsanSignpostUtil.MODAL_HORIZONTAL_PADDING\n            : 0;\n      const horizontalPosition: string = VsanSignpostUtil.getHorizontalPosition(\n            elementBox, signpostWidth + VsanSignpostUtil.ARROW_SIZE + modalHorizontalPadding);\n      return `${verticalPosition}-${horizontalPosition}`;\n   }\n\n   private static getVerticalPosition(elementBox: ClientRect, elementHeight: number): string {\n      const bodyBox: DOMRect = document.body.getBoundingClientRect();\n      if (elementBox.bottom + elementHeight < bodyBox.height) {\n         // There is enough space to fit the signpost below the trigger\n         return VsanSignpostUtil.BOTTOM;\n      } else if (elementBox.top - elementHeight > 0) {\n         return VsanSignpostUtil.TOP;\n      } else {\n         return VsanSignpostUtil.MIDDLE;\n      }\n   }\n\n   private static getHorizontalPosition(elementBox: ClientRect, elementWidth: number): string {\n      const bodyBox: DOMRect = document.body.getBoundingClientRect();\n      if (elementBox.right + elementWidth < bodyBox.width) {\n         // There is enough space to fit the signpost on the right side of the view\n         return VsanSignpostUtil.RIGHT;\n      } else if (elementBox.left - elementWidth > 0) {\n         return VsanSignpostUtil.LEFT;\n      } else {\n         return VsanSignpostUtil.MIDDLE;\n      }\n   }\n}","/* Copyright 2020-2022 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {AfterViewInit, Component, Input, OnChanges, OnDestroy, OnInit, ViewChild} from \"@angular/core\";\nimport {\n   ChartMetricSelectionData,\n   ChartPlotLineSelectionData,\n} from \"@component/chart/model/chart-plot-line-selection.data\";\nimport {PerfChartDataConstants, PerfChartUtil} from \"@component/chart/performance/perf-chart-util\";\nimport {PerfExportData} from \"@component/chart/performance/perf-export-data\";\nimport {PickerType} from \"@component/datetime-picker/picker-type\";\nimport {RangePickerState} from \"@component/datetime-picker/time-range-picker/range-picker-state\";\nimport {VsanTimeRangePickerComponent} from \"@component/datetime-picker/time-range-picker/time-range-picker.component\";\nimport {StorageGroupIdentifier} from \"@component/diskmgmt/model/storage-group-identifier\";\nimport {InventoryNode} from \"@component/inventory/inventory-node\";\nimport {UnavailableViewSpec} from \"@component/unavailable-view/unavailable-view-spec\";\nimport {InventoryEntryData} from \"@generated/inventory-entry-data\";\nimport {PerfMonitorCommonPropsData} from \"@generated/perf-monitor-common-props-data\";\nimport {PerfTimeRangeData} from \"@generated/perf-time-range-data\";\nimport {PerfTopContributorsEntity} from \"@generated/perf-top-contributors-entity\";\nimport {PerfTopContributorsEntityType} from \"@generated/perf-top-contributors-entity-type\";\nimport {PerfTopContributorsQuerySpec} from \"@generated/perf-top-contributors-query-spec\";\nimport {VsanPerfPropertyProvider} from \"@generated/vsan-perf-property-provider\";\nimport {FullTimeRangeSelectionData} from \"@model/full-time-range-selection.data\";\nimport {DiskManagementNavigationContext} from \"@navigation/context/disk-management-navigation-context\";\nimport {PerformanceContext} from \"@navigation/context/performance-context\";\nimport {NavigationService, PlatformExtension} from \"@navigation/navigation.service\";\nimport {ClusterComputeResource} from \"@service/client/dataservice/data-service-property\";\nimport {DataServiceClient} from \"@service/client/dataservice/data-service.service\";\nimport {RefreshHandler} from \"@service/global-refresh.service\";\nimport {ManagedObject, ManagedObjectUtils} from \"@service/managed-object\";\nimport {AskVmwareId} from '@service/navigation/model/ask-vmware-id';\nimport {PerformancePersistenceService} from \"@service/performance-persistence.service\";\nimport {Icon} from \"@util/icon\";\nimport {ModalBuilder} from \"@util/modal-builder\";\nimport {ReferenceWatcher} from \"@util/reference-watcher\";\nimport {TimeRangeUtil} from \"@util/time-range-util\";\nimport {VsanDateTimeUtils} from \"@util/vsan-dateteime-util\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {from, Subscription} from \"rxjs\";\nimport {PlacementDetailsDialogContext} from \"../../virtualobjects/view/placement-details-dialog-context\";\nimport {BasePerfEntity} from \"../model/base-perf-entity\";\nimport {PerfMonitorViewType} from \"../model/perf-monitor-view-type.model\";\nimport {TopContributorEntity} from \"../model/top-contributor-entity\";\nimport {BaseEntityDataPerfComponent} from \"./base-entity-data-perf.component\";\nimport {ConsolidatedContextData} from \"./consolidated-context.data\";\nimport {VsanConfigService} from \"@generated/vsan-config-service\";\n\n@Component({\n   selector: \"vsan-top-contributors-data-perf\",\n   templateUrl: \"top-contributors-data-perf.html\",\n   styleUrls: [\"top-contributors-data-perf.scss\"],\n   providers: [ReferenceWatcher],\n})\nexport class VsanTopContributorsDataPerfComponent extends BaseEntityDataPerfComponent\n      implements OnChanges, OnDestroy, OnInit, AfterViewInit {\n\n   readonly DEFAULT_ITEMS_PER_PAGE: number = 10;\n   readonly MAX_SELECTED_TOP_CONTRIBUTORS: number = 10;\n   readonly AskVmwareId: typeof AskVmwareId = AskVmwareId;\n\n   private topContributorsSubscription: Subscription;\n\n   private static readonly TIMESTAMP_OPTIONS: Intl.DateTimeFormatOptions = {\n      year: VsanDateTimeUtils.DEFAULT_YEAR_FORMAT,\n      month: VsanDateTimeUtils.DEFAULT_MONTH_FORMAT,\n      day: VsanDateTimeUtils.DEFAULT_DAY_FORMAT,\n      hour: VsanDateTimeUtils.DEFAULT_HOUR_FORMAT,\n      minute: VsanDateTimeUtils.DEFAULT_MINUTE_FORMAT,\n   };\n\n   errorMsg: string;\n   propertiesLoading: boolean = false;\n   clusterChartLoading: boolean = false;\n   topContributorsLoading: boolean = false;\n\n   clusterGraphs: Map<string, string> = new Map<string, string>([\n      [\"latency\", \"com.vmware.vsan.perf.graph.cluster-domclient.latency\"],\n      [\"iops\", \"com.vmware.vsan.perf.graph.cluster-domclient.iops\"],\n      [\"throughput\", \"com.vmware.vsan.perf.graph.cluster-domclient.throughput\"],\n   ]);\n\n   diskGroupGraphs: Map<string, string> = new Map<string, string>([\n      [\"latency\", \"com.vmware.vsan.perf.graph.disk-group.latencyFrontend\"],\n      [\"iops\", \"com.vmware.vsan.perf.graph.disk-group.iopsFrontend\"],\n      [\"throughput\", \"com.vmware.vsan.perf.graph.disk-group.throughputFrontend\"],\n   ]);\n\n   vmGraphs: Map<string, string> = new Map<string, string>([\n      [\"latency\", \"com.vmware.vsan.perf.graph.vm.latency\"],\n      [\"iops\", \"com.vmware.vsan.perf.graph.vm.iops\"],\n      [\"throughput\", \"com.vmware.vsan.perf.graph.vm.throughput\"],\n   ]);\n\n   @Input()\n   commonPerfData: PerfMonitorCommonPropsData;\n\n   @Input()\n   currentView: PerfMonitorViewType;\n\n   @Input()\n   initialEntityId: string;\n\n   selectedClusterMetric: string;\n\n   @Input()\n   set selectedClusterGraph(value: string) {\n      if (!value) {\n         return;\n      }\n      this.selectedClusterMetric = this.getKey(value, this.clusterGraphs);\n      this.updateSelectedTopContributorsGraphs();\n   }\n\n   get selectedClusterGraph(): string {\n      return this.clusterGraphs.get(this.selectedClusterMetric);\n   }\n\n   dateError: string;\n   _selectedTimePoint: string;\n   selectedTimePointDate: Date;\n\n   @Input()\n   set selectedTimePoint(value: string) {\n      this._selectedTimePoint = value;\n      this.selectedTimePointDate = VsanDateTimeUtils.convertDateToIso8601(value);\n   }\n\n   get selectedTimePoint(): string {\n      return this._selectedTimePoint;\n   }\n\n   private _selectedEntityType: PerfTopContributorsEntityType = PerfTopContributorsEntityType.VIRTUAL_MACHINE;\n   get selectedEntityType(): PerfTopContributorsEntityType {\n      return this._selectedEntityType;\n   }\n\n   set selectedEntityType(value: PerfTopContributorsEntityType) {\n      this._selectedEntityType = value;\n      this.selectedTopContributorItems = [];\n      this.retrieveTopContributors();\n   }\n\n   // the two flags are needed, because the time picker and the chart's plot line should be synchronized. We should\n   // request the top contributors data only on user input and not when the value of some of them is updated\n   // because the value change of the other.\n   private updateTopContributorsOnPlotLineClick: boolean = false;\n   private updateTopContributorsOnTimePickerClick: boolean = false;\n\n   topContributorsData: TopContributorEntity[] = [];\n   currentEntityId: string;\n   clusterName: string;\n   clusterIcon: string;\n   private selectedVmGraph: string;\n   private selectedDiskGroupGraph: string;\n   sortByMetric: ChartMetricSelectionData;\n   selectedReadMetric: ChartMetricSelectionData;\n   selectedWriteMetric: ChartMetricSelectionData;\n   selectedTopContributorItems: TopContributorEntity[] = [];\n\n   perfTopContributorsEntityTypeKeys: string[] = [];\n   PerfTopContributorsEntityType: typeof PerfTopContributorsEntityType = PerfTopContributorsEntityType;\n   PerfChartUtil: typeof PerfChartUtil = PerfChartUtil;\n   UnavailableViewSpec: typeof UnavailableViewSpec = UnavailableViewSpec;\n   Array: typeof Array = Array;\n   PickerType: typeof PickerType = PickerType;\n   Icon: typeof Icon = Icon;\n\n   @ViewChild(VsanTimeRangePickerComponent)\n   timeRangePickerComponent: VsanTimeRangePickerComponent;\n   minDate: Date;\n   maxDate: Date;\n\n   constructor(private dataService: DataServiceClient,\n         private perfPersistenceService: PerformancePersistenceService,\n         private refWatcher: ReferenceWatcher,\n         private perfPropProvider: VsanPerfPropertyProvider,\n         private navigationService: NavigationService,\n         private vsanConfigService: VsanConfigService) {\n      super();\n      this.refWatcher.watchGlobalRefreshSubscription(VsanTopContributorsDataPerfComponent.prototype.constructor.name);\n      // by default the latency metric is selected\n      this.selectedClusterMetric = this.clusterGraphs.keys().next().value;\n\n      this.updateSelectedTopContributorsGraphs();\n   }\n\n   async ngOnInit(): Promise<void> {\n      const isVsanMaxEnabled: boolean = await this.vsanConfigService.isVsanMaxEnabled(ManagedObject.contextObject);\n      if (isVsanMaxEnabled) {\n         this.perfTopContributorsEntityTypeKeys = Object.values(PerfTopContributorsEntityType)\n               .filter(type => type !== PerfTopContributorsEntityType.DISK_GROUP.toString());\n      } else {\n         this.perfTopContributorsEntityTypeKeys = Object.values(PerfTopContributorsEntityType);\n      }\n   }\n\n   ngAfterViewInit(): void {\n      this.initializePersistedSelections();\n   }\n\n   ngOnChanges(): void {\n      this.fetch();\n   }\n\n   @RefreshHandler\n   fetch(): void {\n      this.errorMsg = null;\n      this.propertiesLoading = true;\n\n      this.dataService\n            .getProperties([\n                     ClusterComputeResource.configurationEx.vsanConfigInfo.defaultConfig.uuid,\n                     ClusterComputeResource.name,\n                  ],\n                  ManagedObject.contextObject)\n            .then(this.handleProperty)\n            .catch(this.handleError);\n   }\n\n   handleError = (errMsg: string): void => {\n      this.errorMsg = errMsg;\n      this.propertiesLoading = false;\n   };\n\n   ngOnDestroy(): void {\n      this.unsubscribeTopContributorsSubscription();\n   }\n\n   private handleProperty = (properties: Map<string, any>): void => {\n      this.propertiesLoading = false;\n      this.extraDesc = null;\n      this.currentEntityId = properties.get(ClusterComputeResource.configurationEx.vsanConfigInfo.defaultConfig.uuid);\n      this.clusterName = properties.get(ClusterComputeResource.name);\n      this.clusterIcon = ManagedObjectUtils.getObjectTypeIcon(ManagedObject.contextObject);\n      this.fetchChartsData();\n   };\n\n   fetchChartsData(): void {\n      if (this.chartsView && this.commonPerfData.entityTypes &&\n            this.commonPerfData.clusterRef && this.currentEntityId && this.currentTimeRange) {\n         this.chartsView.chartMetrics = null;\n         this.topContributorsData = [];\n         this.currentEntity = this.createBasePerfEntity(PerfChartDataConstants.CLUSTER_VM_CONSUMPTION_ENTITY);\n         this.onEntitySelect(this.currentEntity);\n      }\n   }\n\n   onEntitySelect(entity: BasePerfEntity): void {\n      this.createDefaultMetrics();\n      this.chartsView.entity = this.toggleHighResolutionSpecName(this.currentEntity);\n      this.clusterChartLoading = true;\n      this.chartsView.queryChartsDataByTimeRange(this.currentTimeRange);\n   }\n\n   private createBasePerfEntity = (entityTypeId: string): BasePerfEntity => {\n      const entity: BasePerfEntity = new BasePerfEntity();\n      entity.entityId = entityTypeId;\n      entity.entityUuid = this.currentEntityId;\n      entity.configSpec = this.commonPerfData.entityTypes[entityTypeId];\n      return entity;\n   };\n\n   private createDefaultMetrics(): void {\n      const clusterGraph: any /* VsanPerfGrap */ =\n            this.currentEntity.configSpec.graphs.find((graph: any) => graph.id === this.selectedClusterGraph);\n      const readMetric: any /* VsanPerfMetricId */ =\n            clusterGraph.metrics.find((metric: any) => metric.label.toLowerCase().includes(\"read\"));\n      const writeMetric: any /* VsanPerfMetricId */ =\n            clusterGraph.metrics.find((metric: any) => metric.label.toLowerCase().includes(\"write\"));\n\n      this.selectedReadMetric = new ChartMetricSelectionData();\n      this.selectedReadMetric.metricKey = readMetric.label;\n      this.selectedReadMetric.metricLabel = readMetric.name;\n\n      this.selectedWriteMetric = new ChartMetricSelectionData();\n      this.selectedWriteMetric.metricKey = writeMetric.label;\n      this.selectedWriteMetric.metricLabel = writeMetric.name;\n\n      this.sortByMetric = this.useReadMetricToSortBy()\n            ? this.selectedReadMetric\n            : this.selectedWriteMetric;\n   }\n\n   private useReadMetricToSortBy(): boolean {\n      return !this.sortByMetric || this.sortByMetric.metricKey === this.selectedReadMetric.metricKey;\n   }\n\n   private initializePersistedSelections(): void {\n      if (this.timeRangePickerComponent == null) {\n         this.refWatcher.setTimeout(() => {\n            this.initializePersistedSelections();\n         }, 1000);\n         return;\n      }\n\n      const persistedSelection: FullTimeRangeSelectionData =\n            this.perfPersistenceService.getPersistedSelection();\n\n      if (this.currentTimeRange) {\n         const currentPickerState: RangePickerState = this.currentPickerState\n               ? this.currentPickerState : RangePickerState.LAST_X_HOURS;\n         this.timeRangePickerComponent.setTimerange(this.currentTimeRange, currentPickerState);\n         this.perfPersistenceService.saveSelection(this.currentTimeRange, currentPickerState);\n      } else if (persistedSelection != null) {\n         const timeRange: PerfTimeRangeData = persistedSelection.timeRange;\n         const state: RangePickerState = persistedSelection.state;\n\n         if (this.timeRangePickerComponent.currentTimeRange.from !== timeRange.from ||\n               this.timeRangePickerComponent.currentTimeRange.to !== timeRange.to ||\n               this.timeRangePickerComponent.currentPickerState !== state) {\n            this.updateCurrentTimeRange(timeRange, state);\n            this.timeRangePickerComponent.setTimerange(timeRange, state);\n         }\n      }\n   }\n\n   onPerfTimeRangeChange(timeRange?: PerfTimeRangeData, isOnInit?: boolean): void {\n      if (TimeRangeUtil.areEqual(timeRange, this.currentTimeRange)) {\n         return;\n      }\n      this.updateCurrentTimeRange(timeRange, this.timeRangePickerComponent.currentPickerState);\n\n      if (isOnInit && !this.isPersistedSelectionInitialized()) {\n         return;\n      }\n\n      this.currentTimeRange = timeRange;\n\n      if (!isOnInit) {\n         this.perfPersistenceService.saveSelection(timeRange, this.timeRangePickerComponent.currentPickerState);\n         this.selectedTimePoint = \"\";\n         this.dateError = \"\";\n         this.fetchChartsData();\n      }\n   }\n\n   updateCurrentTimeRange(timeRange: PerfTimeRangeData, state: RangePickerState): void {\n      if (timeRange) {\n         this.currentTimeRange = timeRange;\n      }\n      if (state != null) {\n         this.currentPickerState = state;\n      }\n   }\n\n   onPlotLineChanged(selectionData: ChartPlotLineSelectionData): void {\n      this.dateError = \"\";\n      this.selectedReadMetric =\n            selectionData.seriesValues.find((series: ChartMetricSelectionData) =>\n                  series.metricKey.toLowerCase().includes(\"read\"));\n      this.selectedWriteMetric =\n            selectionData.seriesValues.find((series: ChartMetricSelectionData) =>\n                  series.metricKey.toLowerCase().includes(\"write\"));\n      if (this.sortByMetric) {\n         this.sortByMetric = this.sortByMetric.metricKey === this.selectedReadMetric.metricKey ?\n               this.selectedReadMetric : this.selectedWriteMetric;\n      } else {\n         this.sortByMetric = this.selectedReadMetric;\n      }\n\n      if (this.updateTopContributorsOnTimePickerClick) {\n         return;\n      }\n      this.updateTopContributorsOnPlotLineClick = true;\n\n      this.selectedTimePoint = selectionData.timePoint;\n      this.retrieveTopContributors();\n   }\n\n   private getSelectedMetricId(): string {\n      const startIndex: number = this.sortByMetric.metricKey.indexOf(\"Avg\");\n\n      if (startIndex > -1) {\n         return this.sortByMetric.metricKey.substring(0, startIndex) +\n               this.sortByMetric.metricKey.substring(startIndex + 3);\n      } else {\n         return this.sortByMetric.metricKey;\n      }\n   }\n\n   async retrieveTopContributors(): Promise<void> {\n      if (!this.selectedTimePoint) {\n         return;\n      }\n\n      this.unsubscribeTopContributorsSubscription();\n      this.errorMsg = null;\n      this.topContributorsData = [];\n\n      const spec: PerfTopContributorsQuerySpec =\n            PerfTopContributorsQuerySpec.Factory.create(this.selectedEntityType, this.getSelectedMetricId(),\n                  new Date(VsanDateTimeUtils.convertDateToIso8601(this.selectedTimePoint)).getTime());\n\n      this.topContributorsLoading = true;\n      this.topContributorsSubscription =\n            from(this.perfPropProvider.getTopContributors(ManagedObject.contextObject, spec))\n                  .subscribe(this.handleTopContributors,\n                        this.handleTopContributorsError,\n                        () => {\n                           this.topContributorsLoading = false;\n                           this.updateTopContributorsOnPlotLineClick = false;\n                           this.updateTopContributorsOnTimePickerClick = false;\n                        },\n                  );\n   }\n\n   private handleTopContributorsError = (errMsg: string): void => {\n      this.errorMsg = errMsg;\n      this.topContributorsLoading = false;\n   };\n\n   private handleTopContributors = (data: PerfTopContributorsEntity[]): void => {\n      this.topContributorsData = data\n            .filter((topContributor: PerfTopContributorsEntity) =>\n                  topContributor.entity && !VsanUiUtils.isEmpty(topContributor.metricsSeries))\n            .map((topContributor: PerfTopContributorsEntity) => TopContributorEntity.fromVmodl(\n                  topContributor, this.selectedReadMetric.metricLabel, this.selectedWriteMetric.metricLabel))\n            .sort(this.sortBySelectedMetric);\n   };\n\n   private sortBySelectedMetric = (a: TopContributorEntity, b: TopContributorEntity): number => {\n      if (this.sortByMetric === this.selectedWriteMetric) {\n         return a.writeMetricValue <= b.writeMetricValue ? 1 : -1;\n      } else {\n         return a.readMetricValue <= b.readMetricValue ? 1 : -1;\n      }\n   };\n\n   private unsubscribeTopContributorsSubscription(): void {\n      if (this.topContributorsSubscription) {\n         this.topContributorsSubscription.unsubscribe();\n         this.topContributorsSubscription = null;\n      }\n   }\n\n   selectedClusterMetricChanged(): void {\n      this.updateSelectedTopContributorsGraphs();\n      this.sortByMetric = null;\n      this.createDefaultMetrics();\n      this.topContributorsData = [];\n      this.selectedTopContributorItems = [];\n   }\n\n   private updateSelectedTopContributorsGraphs(): void {\n      this.selectedVmGraph = this.vmGraphs.get(this.selectedClusterMetric);\n      this.selectedDiskGroupGraph = this.diskGroupGraphs.get(this.selectedClusterMetric);\n   }\n\n   createTopContributorPerfEntity(topContributor: TopContributorEntity): BasePerfEntity {\n      const entity: BasePerfEntity = new BasePerfEntity();\n      entity.entityId = this.selectedEntityType === PerfTopContributorsEntityType.VIRTUAL_MACHINE ?\n            PerfChartDataConstants.VM_CONSUMPTION_ENTITY :\n            PerfChartDataConstants.HOST_DISK_GROUP_ENTITY;\n      entity.entityUuid = topContributor.entityRefId.substring(topContributor.entityRefId.indexOf(\":\") + 1);\n      entity.configSpec = this.commonPerfData.entityTypes[entity.entityId];\n      return entity;\n   }\n\n   getTopContributorGraph(): string {\n      return this.selectedEntityType === PerfTopContributorsEntityType.VIRTUAL_MACHINE ?\n            this.selectedVmGraph : this.selectedDiskGroupGraph;\n   }\n\n   getGraphDefinition(): any {\n      const entityId: string = this.selectedEntityType === PerfTopContributorsEntityType.VIRTUAL_MACHINE ?\n            PerfChartDataConstants.VM_CONSUMPTION_ENTITY :\n            PerfChartDataConstants.HOST_DISK_GROUP_ENTITY;\n      return this.commonPerfData.entityTypes[entityId].graphs\n            .find((graph: any) => graph.id === this.getTopContributorGraph());\n   }\n\n   allLoadersCompleted(): boolean {\n      return !this.propertiesLoading && !this.clusterChartLoading && !this.topContributorsLoading;\n   }\n\n   getEntityTypeLabel(type: PerfTopContributorsEntityType): string {\n      switch (type) {\n         case PerfTopContributorsEntityType.DISK_GROUP:\n            return VsanUiUtils.getString(\n                  \"vsan.monitor.cluster.performance.topContributors.entity.type.disk_group\");\n         case PerfTopContributorsEntityType.VIRTUAL_MACHINE:\n            return VsanUiUtils.getString(\n                  \"vsan.monitor.cluster.performance.topContributors.entity.type.virtual_machine\");\n      }\n   }\n\n   private isPersistedSelectionInitialized(): boolean {\n      const persistedSelection: FullTimeRangeSelectionData =\n            this.perfPersistenceService.getPersistedSelection();\n\n      // If there is no persisted selection. it's replaced by view's default one\n      if (persistedSelection == null) {\n         return true;\n      }\n\n      return this.currentTimeRange === persistedSelection.timeRange;\n   }\n\n   onDateTimeChanged(date: Date): void {\n      if (this.updateTopContributorsOnPlotLineClick || !this.isDateValid(date)) {\n         return;\n      }\n\n      this.updateTopContributorsOnTimePickerClick = true;\n      this.selectedTimePointDate = date;\n      // The value returned by getUTCMonth is an integer between 0 and 11 corresponding to the month.\n      const month: number = date.getUTCMonth() + 1;\n      // The format of the chart's selected time point, i.e. the timestamps returned from the backend is:\n      // yyyy-mm-dd hh:mm:ss. The numbers must be in two digits.\n      // And the seconds in perf. timestamps are always 0.\n      this._selectedTimePoint =\n            date.getUTCFullYear() + \"-\" +\n            this.convertToTwoDigits(month) + \"-\" +\n            this.convertToTwoDigits(date.getUTCDate()) + \" \" +\n            this.convertToTwoDigits(date.getUTCHours()) + \":\" + this.convertToTwoDigits(date.getUTCMinutes()) + \":00\";\n      this.retrieveTopContributors();\n   }\n\n   private isDateValid(date: Date): boolean {\n      this.dateError = \"\";\n\n      if (!date) {\n         this.dateError = VsanUiUtils.getString(\n               \"vsan.monitor.cluster.performance.topContributors.timePoint.empty.error\");\n         return false;\n      }\n\n      if (date < this.minDate || date > this.maxDate) {\n         this.dateError = VsanUiUtils.getString(\n               \"vsan.monitor.cluster.performance.topContributors.timePoint.incorrect.error\",\n               VsanDateTimeUtils.formatDate(this.minDate, VsanTopContributorsDataPerfComponent.TIMESTAMP_OPTIONS),\n               VsanDateTimeUtils.formatDate(this.maxDate, VsanTopContributorsDataPerfComponent.TIMESTAMP_OPTIONS));\n         return false;\n      }\n      return true;\n   }\n\n   private convertToTwoDigits(value: number): string {\n      if (value < 10) {\n         return \"0\" + value.toString();\n      }\n\n      return value.toString();\n   }\n\n   viewFullVMPerformance(moRef: ManagedObject): void {\n      this.navigationService.navigateTo(PlatformExtension.VM_PERFORMANCE, moRef);\n   }\n\n   viewFullHostPerformance(topContributorEntity: TopContributorEntity): void {\n      const props: PerformanceContext = {\n         viewType: PerfMonitorViewType[PerfMonitorViewType.HOST_DISK],\n         entityUuid: topContributorEntity.entity.name,\n      };\n\n      this.navigationService.navigateTo(PlatformExtension.HOST_PERFORMANCE, topContributorEntity.parent.moRef, props);\n   }\n\n   viewPhysicalPlacement(topContributorEntity: TopContributorEntity): void {\n      const diskGroup: StorageGroupIdentifier =\n            new StorageGroupIdentifier(topContributorEntity.diskGroupType, topContributorEntity.entity.name);\n      const context: DiskManagementNavigationContext = {\n         hostRef: topContributorEntity.parent.moRef,\n         diskGroup: diskGroup,\n         isVirtualObjectsView: true,\n      };\n      this.navigationService.navigateTo(PlatformExtension.DISK_MANAGEMENT, ManagedObject.contextObject, context);\n   }\n\n   showCombinedChartsDialog(): void {\n      const context: ConsolidatedContextData = {\n         commonPerfData: this.commonPerfData,\n         visibleGraphId: this.getTopContributorGraph(),\n         timePickerRange: this.currentTimeRange,\n         virtualMachines: this.getSelectedVmInvNodes(),\n         entityType: this.selectedEntityType,\n      };\n\n      new ModalBuilder(\"performance/consolidatedVmDialog\")\n            .setSize(1200, 600)\n            .open(context);\n   }\n\n   showPhysicalPlacementDialog(): void {\n      const context: PlacementDetailsDialogContext = {\n         clusterRef: ManagedObject.contextObject,\n         isGrouped: true,\n         selectedVirtualMachines: this.getSelectedVms(),\n      };\n\n      new ModalBuilder(\"virtualObjects/physicalPlacementDialog\")\n            .setDimensions(ModalBuilder.WIZARD_XL)\n            .open(context);\n   }\n\n   /**\n    * The top contributors table should be visible when cluster data loading is completed without errors, and we have\n    * selected time point for which to retrieve the top contributors\n    */\n   isTopContributorsVisible(): boolean {\n      return !this.propertiesLoading && !this.clusterChartLoading && !this.errorMsg && !!this.selectedTimePoint;\n   }\n\n   /**\n    * The time point unavailable view should be shown when all the cluster's data(property and chart data) is loaded\n    * without errors and there is no time point selected\n    */\n   isTimePointUnavailableViewVisible(): boolean {\n      return !this.selectedTimePoint && this.allLoadersCompleted() && !this.errorMsg;\n   }\n\n   /**\n    * The combined chart button is enabled when there up to 5 selected top contributors\n    */\n   isCombinedChartButtonEnabled(): boolean {\n      return this.selectedTopContributorItems.length > 1 &&\n            this.selectedTopContributorItems.length <= this.MAX_SELECTED_TOP_CONTRIBUTORS;\n   }\n\n   isPhysicalPlacementButtonEnabled(): boolean {\n      return !VsanUiUtils.isEmpty(this.selectedTopContributorItems) &&\n            this.selectedTopContributorItems.every(item => item.isVmOnVsanDatastore);\n   }\n\n   isFullPerformanceDisabled(topContributorItem: TopContributorEntity): boolean {\n      return !topContributorItem.isVmOnVsanDatastore &&\n            this.selectedEntityType === PerfTopContributorsEntityType.VIRTUAL_MACHINE;\n   }\n\n   getPhysicalPlacementButtonTooltip(): string {\n      if (!this.selectedTopContributorItems.length) {\n         return VsanUiUtils.getString(\n               \"vsan.monitor.cluster.performance.topContributors.view.physical.placement.tooltip\");\n      } else if (this.selectedTopContributorItems.some(item => !item.isVmOnVsanDatastore)) {\n         return VsanUiUtils.getString(\n               \"vsan.monitor.cluster.performance.topContributors.view.physical.placement.disabled\");\n      }\n   }\n\n   getSelectedMetricValue(metric: ChartMetricSelectionData): string {\n      return metric.value != null\n            ? PerfChartUtil.formatYAxisLabel(metric.value, this.getGraphDefinition(), false)\n            : VsanUiUtils.getString(\"vsan.na.label\");\n   }\n\n   allChartsLoaded(data: PerfExportData[]): void {\n      this.clusterChartLoading = false;\n      if (!VsanUiUtils.isEmpty(this.chartsView.graphsData)) {\n         const timeStamps: string[] = this.chartsView.graphsData[0].metrics.timeStamps;\n         // update the top contributors time picker's min and max date,\n         // to be bounded to the cluster's chart min/max timeStamps\n         const minTimeStamp: string = timeStamps[0];\n         const maxTimeStamp: string = timeStamps[timeStamps.length - 1];\n         this.minDate = VsanDateTimeUtils.convertDateToIso8601(minTimeStamp);\n         this.maxDate = VsanDateTimeUtils.convertDateToIso8601(maxTimeStamp);\n      } else {\n         // in case there is no graph's data, i.e. timestamps(which shouldn't happen) sets the min and max date to the\n         // current's time range min and max date\n         this.minDate = new Date(this.currentTimeRange.from - VsanDateTimeUtils.MINUTE_IN_MILLISECONDS);\n         this.maxDate = new Date(this.currentTimeRange.to);\n      }\n   }\n\n   private getSelectedVms(): ManagedObject[] {\n      return this.selectedTopContributorItems.map((item: TopContributorEntity) => item.entity.moRef);\n   }\n\n   private getSelectedVmInvNodes(): InventoryNode[] {\n      return this.selectedTopContributorItems.map(this.createVmInventoryNode);\n   }\n\n   private createVmInventoryNode(vmTopContributorItem: TopContributorEntity): InventoryNode {\n      const invData: InventoryEntryData = InventoryEntryData.Factory.create(\n            vmTopContributorItem.entity.moRef,\n            vmTopContributorItem.entity.name,\n            true, // isLeafNode\n            vmTopContributorItem.entity.primaryIconId,\n            true, // connected\n            false, // isDrsEnabled\n            false,  // isDisabled\n            []); // children\n      return new InventoryNode(invData);\n   }\n\n   private getKey(val: string, map: Map<string, string>): string {\n      return [...map].find(([key, value]) => val === value)[0];\n   }\n}\n"]}