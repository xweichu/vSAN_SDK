{"version":3,"sources":["./src/app/vsan/common/component/inventory/inventory-nodes.html","./src/app/vsan/common/component/inventory/inventory-node.component.ts","./src/app/vsan/common/component/inventory/inventory-nodes.component.ts","./src/app/vsan/common/component/inventory/inventory-node.html","./src/app/vsan/common/component/inventory/inventory-browser.html","./src/app/vsan/common/component/inventory/inventory-browser.component.ts","./src/app/vsan/common/component/inventory/inventory-node.ts","./src/app/vsan/common/directive/reactive-forms/disable-control.directive.ts"],"names":[],"mappings":"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","file":"23-es2015.js","sourcesContent":["<!--Copyright 2021 VMware, Inc. All rights reserved. -- VMware Confidential-->\n<vsan-inventory-node *ngFor=\"let childNode of node.childNodes\"\n                     [class.disable-action]=\"!childNode.active\"\n                     [node]=\"childNode\"\n                     [filter]=\"filter\"\n                     [inventoryService]=\"inventoryService\"\n                     [filterContext]=\"filterContext\"\n                     [preselectedNodes]=\"preselectedNodes\"\n                     [showCheckBoxes]=\"showCheckBoxes\"\n                     [showCheckboxesOnlyOnLeafNode]=\"showCheckboxesOnlyOnLeafNode\"\n                     [useDatacenterServiceForDcFolders]=\"useDatacenterServiceForDcFolders\"\n                     [disableSelection]=\"disableSelection\"\n                     [expanded]=\"childNode.expanded\"\n                     (nodeSelected)=\"onNodeSelect.emit($event.node)\"\n                     (nodeVisibilityChanged)=\"onNodeVisibilityChange.emit()\"\n                     class=\"clr-tree-node\"\n                     ngProjectAs=\"clr-tree-node\"><!-- This is needed for the proper expanding/collapsing of nested nodes-->\n</vsan-inventory-node>","/* Copyright 2017-2022 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {\n   ChangeDetectorRef,\n   Component,\n   EventEmitter,\n   Input,\n   OnInit,\n   Output,\n} from \"@angular/core\";\nimport {ManagedObject, ManagedObjectUtils} from \"@service/managed-object\";\nimport {InventoryBrowserService} from \"@generated/inventory-browser-service\";\nimport {InventoryEntryData} from \"@generated/inventory-entry-data\";\nimport {DatacenterInventoryService} from \"@generated/datacenter-inventory-service\";\nimport {MapUtil} from \"@util/map-util\";\nimport {InventoryNode, InventorySelectionEvent} from \"./inventory-node\";\nimport {FilterContextKey} from \"@generated/filter-context-key\";\n\n@Component({\n   selector: \"vsan-inventory-node\",\n   templateUrl: \"inventory-node.html\",\n   styleUrls: [\"inventory-node.scss\"],\n})\nexport class InventoryNodeComponent implements OnInit {\n   @Input()\n   node: InventoryNode;\n\n   _preselectedNodes: ManagedObject[];\n\n   @Input()\n   set preselectedNodes(value: ManagedObject[]) {\n      this._preselectedNodes = value;\n      // set the model's select property if the node is marked as preselected and is not disabled\n      if (this.isSelected(this.node)) {\n         this.node.selected = this.node.active;\n         this.updateParentSelectedState(this.node);\n      }\n   }\n\n   get preselectedNodes(): ManagedObject[] {\n      return this._preselectedNodes;\n   }\n\n   @Input()\n   filterContext: Map<FilterContextKey, ManagedObject>;\n\n   @Input()\n   inventoryService: InventoryBrowserService;\n\n   @Input()\n   showCheckBoxes: boolean;\n\n   @Input()\n   showCheckboxesOnlyOnLeafNode: boolean;\n\n   @Output()\n   nodeSelected: EventEmitter<InventorySelectionEvent> = new EventEmitter<InventorySelectionEvent>();\n\n   @Output()\n   nodePreselected: EventEmitter<InventorySelectionEvent> = new EventEmitter<InventorySelectionEvent>();\n\n   @Output()\n   nodeVisibilityChanged: EventEmitter<void> = new EventEmitter<void>();\n\n   loading: boolean = false;\n\n   @Input()\n   useDatacenterServiceForDcFolders: boolean = true;\n\n   /* Expose control over whether to allow selecting more items. */\n   @Input()\n   disableSelection: boolean = false;\n\n   private _filter: string;\n\n   get expanded(): boolean {\n      return this.node.expanded;\n   }\n\n   @Input()\n   set expanded(value: boolean) {\n      this.node.expanded = value;\n\n      if (!value || !this.inventoryService) {\n         return;\n      }\n\n      this.fetchInventoryTree();\n   }\n\n   get filter(): string {\n      return this._filter;\n   }\n\n   @Input()\n   set filter(value: string) {\n      if (value) {\n         value = value.trim();\n      }\n      this._filter = value;\n\n      if (this.filter) {\n         this.expanded = true;\n      }\n\n      this.refreshFilter();\n   }\n\n   get isExpandable(): boolean {\n      if (!this.node.childrenFetched) {\n         return true;\n      }\n      return this.node.childNodes.length > 0;\n   }\n\n   get showCheckboxSelection(): boolean {\n      return (this.showCheckBoxes && !this.showCheckboxesOnlyOnLeafNode) ||\n            (this.showCheckBoxes && this.showCheckboxesOnlyOnLeafNode && this.node.data.isLeafNode);\n   }\n\n   get disableCheckbox(): boolean {\n      return this.disableSelection && !this.node.selected;\n   }\n\n   constructor(private dcService: DatacenterInventoryService, private changeDetector: ChangeDetectorRef) {}\n\n   selectNode(node: InventoryNode): void {\n      // If current node has been selected/deselected and checkbox selection is shown for it\n      // Return and prevent node selected event emit\n      if (this.showCheckboxSelection && ManagedObject.areEqual(node.data.nodeRef, this.node.data.nodeRef)) {\n         return;\n      }\n\n      this.nodeSelected.emit(new InventorySelectionEvent(node));\n   }\n\n   checkedStateChanged(node: InventoryNode): void {\n      this.updateParentSelectedState(node);\n\n      if (node.childrenFetched) {\n         // if this is parent node, update selected state of all children\n         node.childNodes.forEach(child => child.selected = node.selected && child.active);\n      }\n      this.nodeSelected.emit(new InventorySelectionEvent(node));\n   }\n\n   private updateParentSelectedState(node: InventoryNode): void {\n      if (!node.parent) {\n         return;\n      }\n\n      // If this is a child node, check if all siblings are selected and update the parent selected state\n      if (node.selected) {\n         const allSiblingsSelected: boolean = node.parent.childNodes.every(child => child.selected);\n         node.parent.selected = allSiblingsSelected;\n      } else {\n         node.parent.selected = false;\n      }\n   }\n\n   isSelected(node: InventoryNode): boolean {\n      return !!node\n            && this.preselectedNodes?.some(preselected => ManagedObject.areEqual(preselected, node.data.nodeRef));\n   }\n\n   ngOnInit(): void {\n      if (this.isSelected(this.node)) {\n         if (!!this.node.parent) {\n            this.node.parent.expanded = true;\n         }\n\n         this.nodePreselected.emit(new InventorySelectionEvent(this.node));\n      }\n   }\n\n   refreshFilter(): void {\n      if (!this.filter) {\n         this.node.visible = true;\n      } else {\n         const recursiveNameCheck: (node: InventoryNode) => boolean = (node: InventoryNode): boolean => {\n            if (node.data.name.toLowerCase().includes(this.filter.toLowerCase())) {\n               return true;\n            }\n\n            return node.childNodes.some(child => recursiveNameCheck(child));\n\n            return false;\n         };\n\n         this.node.visible = recursiveNameCheck(this.node);\n      }\n\n      this.nodeVisibilityChanged.emit();\n   }\n\n   private fetchInventoryTree(): void {\n      if (this.loading || this.node.childrenFetched) {\n         return;\n      }\n      this.loading = true;\n      const parentRef: ManagedObject = this.node.data.nodeRef;\n      if (parentRef.type === ManagedObjectUtils.FOLDER &&\n            parentRef.value.startsWith(ManagedObjectUtils.DATACENTER_FOLDER_PREFIX) &&\n            this.useDatacenterServiceForDcFolders) {\n         this.dcService.getNodeChildren(parentRef, MapUtil.toObject(this.filterContext))\n               .then(this.handleNodes);\n      } else {\n         this.inventoryService.getNodeChildren(parentRef, MapUtil.toObject(this.filterContext))\n               .then(this.handleNodes);\n      }\n   }\n\n   private handleNodes = (val: InventoryEntryData[]) => {\n      this.node.childNodes = val.map(e => new InventoryNode(e));\n      this.node.childrenFetched = true;\n\n      setTimeout(() => {\n         this.loading = false;\n\n         if (this.filter) {\n            this.refreshFilter();\n         }\n         this.changeDetector.detectChanges();\n         // Fix for wrong height set by clarity.\n         setTimeout(() => {\n            $(\"div.clr-treenode-children\").css(\"height\", \"auto\");\n         }, 100);\n      }, 100);\n   };\n}","/* Copyright 2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {\n   Component,\n   EventEmitter,\n   Input,\n   Output,\n} from \"@angular/core\";\nimport {ManagedObject} from \"@service/managed-object\";\nimport {InventoryBrowserService} from \"@generated/inventory-browser-service\";\nimport {InventoryNode} from \"./inventory-node\";\nimport {FilterContextKey} from \"@generated/filter-context-key\";\n/**\n * A separate component is required because of https://github.com/vmware/clarity/issues/5514\n */\n@Component({\n   selector: \"vsan-inventory-nodes\",\n   templateUrl: \"inventory-nodes.html\",\n   styleUrls: [\"inventory-nodes.scss\"],\n})\nexport class InventoryNodesComponent {\n   @Input()\n   node: InventoryNode;\n\n   @Input()\n   filter: string;\n\n   @Input()\n   inventoryService: InventoryBrowserService;\n\n   @Input()\n   filterContext: Map<FilterContextKey, ManagedObject>;\n\n   @Input()\n   preselectedNodes: ManagedObject[];\n\n   @Input()\n   showCheckBoxes: boolean;\n\n   @Input()\n   showCheckboxesOnlyOnLeafNode: boolean;\n\n   @Input()\n   useDatacenterServiceForDcFolders: boolean;\n\n   @Input()\n   disableSelection: boolean;\n\n   @Output()\n   onNodeSelect: EventEmitter<InventoryNode> = new EventEmitter<InventoryNode>();\n\n   @Output()\n   onNodeVisibilityChange: EventEmitter<void> = new EventEmitter<void>();\n}","<!--Copyright 2017-2021 VMware, Inc. All rights reserved. -- VMware Confidential-->\n<clr-tree-node id=\"{{'inventoryNode' + node.data.name}}\"\n               [class.disable-action]=\"!node.active\"\n               class=\"inventory-node\"\n               *ngIf=\"node.visible\">\n   <div class=\"inventory-node-content\">\n      <clr-checkbox-container *ngIf=\"showCheckboxSelection\">\n         <clr-checkbox-wrapper>\n            <input type=\"checkbox\"\n                   clrCheckbox\n                   [vsan-disable-form-control]=\"disableCheckbox\"\n                   id=\"{{node.data.name}}\"\n                   [(ngModel)]=\"node.selected\"\n                   (ngModelChange)=\"checkedStateChanged(node)\"/>\n         </clr-checkbox-wrapper>\n      </clr-checkbox-container>\n      <button class=\"clr-treenode-link\"\n              [disabled]=\"showCheckboxSelection\"\n              [class.active]=\"!showCheckboxSelection && isSelected(node)\"\n              (click)=\"selectNode(node)\">\n         <div class=\"inventory-node-content\">\n            <clr-icon [attr.shape]=\"node.icon\" size=\"16\">\n            </clr-icon>\n            <div class=\"inventory-node-label\" title=\"{{node.data.name}}\">{{node.data.name}}</div>\n         </div>\n      </button>\n   </div>\n   <vsan-inventory-nodes [(clrIfExpanded)]=\"node.expanded\" [clrLoading]=\"loading\" *ngIf=\"isExpandable\"\n                         [node]=\"node\"\n                         [filter]=\"filter\"\n                         [inventoryService]=\"inventoryService\"\n                         [filterContext]=\"filterContext\"\n                         [preselectedNodes]=\"preselectedNodes\"\n                         [showCheckBoxes]=\"showCheckBoxes\"\n                         [showCheckboxesOnlyOnLeafNode]=\"showCheckboxesOnlyOnLeafNode\"\n                         [useDatacenterServiceForDcFolders]=\"useDatacenterServiceForDcFolders\"\n                         [disableSelection]=\"disableSelection\"\n                         (onNodeSelect)=\"selectNode($event)\"\n                         (onNodeVisibilityChange)=\"refreshFilter()\">\n   </vsan-inventory-nodes>\n</clr-tree-node>","<!--Copyright 2017-2021 VMware, Inc. All rights reserved. -- VMware Confidential-->\n<span class=\"busy-backdrop\" *ngIf=\"isBusy\"></span>\n<div class=\"select-all-nodes-container\" *ngIf=\"showSelectAllNodes || selectAllNodesHeader\">\n   <clr-checkbox-wrapper *ngIf=\"showSelectAllNodes\">\n      <input id=\"select-all-nodes\"\n             type=\"checkbox\"\n             clrCheckbox\n             [(ngModel)]=\"selectAllNodes\"\n             (change)=\"selectAllNodesChanged()\"/>\n   </clr-checkbox-wrapper>\n   <div *ngIf=\"selectAllNodesHeader\">\n      <ng-container *ngTemplateOutlet=\"selectAllNodesHeader\"></ng-container>\n   </div>\n</div>\n\n<!-- Search box -->\n<vsan-search-input (filterChange)=\"filter=$event\" [inputAriaLabelKey]=\"searchInputAriaLabelKey\"></vsan-search-input>\n\n<div class=\"inventory-browser-container\">\n   <span *ngIf=\"isBusy\" class=\"spinner spinner-lg central-spinner\"></span>\n   <div *ngIf=\"!isBusy && !hasNodes\" class=\"no-items-available\">\n      {{\"inventory.browser.dialog.no.items\" | localized}}\n   </div>\n   <clr-tree>\n      <vsan-inventory-node\n            [ngClass]=\"{'full-width': hasNodes}\"\n            [class.disable-action]=\"!node.active\"\n            *ngFor=\"let node of nodes\"\n            [node]=\"node\"\n            [filter]=\"filter\"\n            [inventoryService]=\"inventoryService\"\n            [preselectedNodes]=\"preselectedNodes\"\n            [showCheckBoxes]=\"showCheckBoxes\"\n            [showCheckboxesOnlyOnLeafNode]=\"showCheckBoxesOnlyOnLeafNodes\"\n            [useDatacenterServiceForDcFolders]=\"useDatacenterServiceForDcFolders\"\n            [disableSelection]=\"disableSelection\"\n            [filterContext]=\"filterContext\"\n            [expanded]=\"node.expanded\"\n            (nodeSelected)=\"selectNode($event)\"\n            (nodeVisibilityChanged)=\"onNodeVisibilityChanged()\"\n            (nodePreselected)=\"preselectNode($event)\"\n            ngProjectAs=\"clr-tree-node\">\n      </vsan-inventory-node>\n   </clr-tree>\n</div>","/* Copyright 2017-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {\n   ChangeDetectionStrategy,\n   ChangeDetectorRef,\n   Component,\n   EventEmitter,\n   HostBinding,\n   Input,\n   Output,\n   TemplateRef,\n} from \"@angular/core\";\nimport {FilterContextKey} from \"@generated/filter-context-key\";\nimport {InventoryBrowserService} from \"@generated/inventory-browser-service\";\nimport {InventoryEntryData} from \"@generated/inventory-entry-data\";\nimport {ManagedObject} from \"@service/managed-object\";\nimport {Logger} from \"@util/logger\";\nimport {InventoryNode, InventorySelectionEvent} from \"./inventory-node\";\n\n@Component({\n   selector: \"vsan-inventory-browser\",\n   styleUrls: [\"inventory-browser.scss\"],\n   templateUrl: \"inventory-browser.html\",\n   changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class InventoryBrowserComponent {\n\n   // The root nodes to display in the inventory component\n   private _objRefs: ManagedObject[];\n   private _inventoryService: InventoryBrowserService;\n\n   /**\n    * If set to true, the select all nodes checkbox will be checked, and all visible nodes will be checked too.\n    */\n   @Input()\n   selectAllNodes: boolean = false;\n\n   @Input()\n   selectAllNodesHeader: TemplateRef<any>;\n\n   @Input()\n   showSelectAllNodes: boolean = false;\n\n   @Input()\n   maxListHeight: number = 240;\n\n   @Input()\n   searchInputAriaLabelKey: string;\n\n   _filterContext: Map<FilterContextKey, ManagedObject>;\n\n   @Input()\n   set filterContext(value: Map<FilterContextKey, ManagedObject>) {\n      if (!value || !value.size) {\n         return;\n      }\n      for (const key of value.keys()) {\n         this._filterContext.set(key, value.get(key));\n      }\n   }\n\n   get filterContext(): Map<FilterContextKey, ManagedObject> {\n      return this._filterContext;\n   }\n\n   @Input()\n   useDatacenterServiceForDcFolders: boolean = true;\n\n   /* Expose control over whether to allow selecting more items. */\n   @Input()\n   disableSelection: boolean = false;\n\n   /**\n    * When set to true disables the whole component by not allowing any interaction with the DOM elements and also\n    * adds a dim effect\n    */\n   @Input()\n   @HostBinding(\"class.disable-action\")\n   disabled: boolean = false;\n\n   isBusy: boolean = false;\n\n   @Input()\n   set objRefs(rootRefs: ManagedObject[]) {\n      if (!this._objRefs && !!rootRefs) {\n         this._objRefs = rootRefs;\n         this.requestRootNodes();\n      }\n   }\n\n   get objRefs(): ManagedObject[] {\n      return this._objRefs;\n   }\n\n   selectAllNodesChanged = () => {\n      this.updateSelectedNodes(this.nodes);\n      this.selectedNodesChanged.emit(this.getSelectedNodes());\n   };\n\n   @Input()\n   showCheckBoxes: boolean = false;\n\n   @Input()\n   showCheckBoxesOnlyOnLeafNodes: boolean = false;\n\n   // Nodes to be preselected in the inventory browser\n   @Input()\n   preselectedNodes: ManagedObject[] = [];\n\n   @Input()\n   set inventoryService(value: InventoryBrowserService) {\n      if (value !== this._inventoryService) {\n         this._inventoryService = value;\n         this.requestRootNodes();\n      }\n   }\n\n   get inventoryService(): InventoryBrowserService {\n      return this._inventoryService;\n   }\n\n   // To be used when the tree structure is already available, and there is no need to be queried with inventoryService.\n   @Input()\n   set predefinedNodes(value: InventoryNode[]) {\n      this.nodes = value;\n   }\n\n   get predefinedNodes(): InventoryNode[] {\n      return this.nodes;\n   }\n\n   @Output()\n   nodeSelected: EventEmitter<InventorySelectionEvent> = new EventEmitter<InventorySelectionEvent>();\n\n   @Output()\n   nodePreselected: EventEmitter<InventorySelectionEvent> = new EventEmitter<InventorySelectionEvent>();\n\n   @Output()\n   rootNodesReceived: EventEmitter<InventoryNode[]> = new EventEmitter<InventoryNode[]>();\n\n   constructor(private changeDetector: ChangeDetectorRef) {\n      this._filterContext = new Map();\n      this._filterContext.set(FilterContextKey.CONTEXT_REF, ManagedObject.contextObject);\n   }\n\n   nodes: InventoryNode[] = [];\n\n   @Output()\n   selectedNodesChanged: EventEmitter<InventoryNode[]> = new EventEmitter<InventoryNode[]>();\n\n   filter: string;\n\n   private async requestRootNodes(): Promise<void> {\n      if (!this.inventoryService || !this.objRefs) {\n         return;\n      }\n      this.isBusy = true;\n      try {\n         const inventoryData: InventoryEntryData[] = await this.inventoryService.getNodeInfo(this.objRefs);\n         this.handleRootNodes(inventoryData);\n      } catch (err) {\n         Logger.error(err, \"Cannot load inventory browser's root nodes\", err);\n      } finally {\n         this.isBusy = false;\n         this.changeDetector.detectChanges();\n      }\n   }\n\n   private handleRootNodes(val: InventoryEntryData[]): void {\n      this.nodes = val.map(e => new InventoryNode(e));\n      this.updateSelectedNodes(this.nodes);\n      this.rootNodesReceived.emit(this.nodes);\n      this.selectedNodesChanged.emit(this.getSelectedNodes());\n      this.changeDetector.detectChanges();\n   }\n\n   private updateSelectedNodes(nodes: InventoryNode[]): void {\n      // select/unselect only active nodes based on selectAllNodes prop\n      nodes.forEach(node => {\n         node.selected = this.selectAllNodes && node.active;\n         this.updateSelectedNodes(node.childNodes);\n      });\n   }\n\n   selectNode = (event: InventorySelectionEvent): void => {\n      this.nodeSelected.emit(event);\n\n      this.hanldePreselectedNodes(event.node);\n\n      this.selectedNodesChanged.emit(this.getSelectedNodes());\n      if (!event.node.selected) {\n         this.selectAllNodes = false;\n      } else {\n         this.selectAllNodes = this.areAllNodesSelected();\n      }\n   };\n\n   private hanldePreselectedNodes(node: InventoryNode): void {\n      // for single selection use only the first element of the preselected array\n      if (!this.showCheckBoxes) {\n         this.preselectedNodes[0] = node.data.nodeRef;\n         return;\n      }\n\n      const nodeIndex: number = this.preselectedNodes\n            .findIndex(preselected => ManagedObject.areEqual(preselected, node.data.nodeRef));\n      const isPreselected: boolean = nodeIndex !== -1;\n      if (node.selected && !isPreselected) {\n         this.preselectedNodes.push(node.data.nodeRef);\n      } else if (!node.selected && isPreselected) {\n         this.preselectedNodes.splice(nodeIndex, 1);\n      }\n\n      if (node.parent && !this.showCheckBoxesOnlyOnLeafNodes) {\n         this.hanldePreselectedNodes(node.parent);\n      }\n   }\n\n   preselectNode = (event: InventorySelectionEvent): void => {\n      this.nodePreselected.emit(event);\n   };\n\n   // Fired when there is change in the node visibility affected from the filter input.\n   // This is needed to trigger \"hasNodes\" function which will not be executed\n   // when any item from this.nodes changes it's visibility status.\n   // Needed when there are multiple root nodes\n   onNodeVisibilityChanged = () => {\n      setTimeout(() => {\n         this.changeDetector.detectChanges();\n      }, 0);\n      this.selectedNodesChanged.emit(this.getSelectedNodes());\n   };\n\n   get hasNodes(): boolean {\n      return !!this.nodes?.length\n            && (!!this.preselectedNodes?.length || this.nodes.some((value: InventoryNode) => value.visible));\n   }\n\n   // Returns all of the checked parent nodes and those that are unchecked but having at least one child checked\n   getSelectedNodes(): InventoryNode[] {\n      return this.nodes.filter(node =>\n            (node.selected || node.childNodes.some(child => child.selected)));\n   }\n\n   areAllNodesSelected(): boolean {\n      return this.nodes\n            .every(node => (node.selected && node.childNodes.every(child => child.selected)) || !node.active);\n   }\n}","/* Copyright 2019 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {InventoryEntryData} from \"@generated/inventory-entry-data\";\n\nexport class InventoryNode {\n   data: InventoryEntryData;\n   icon: string;\n   active: boolean;\n   visible: boolean;\n   parent: InventoryNode;\n   childrenFetched: boolean;\n   selected: boolean;\n   expanded: boolean;\n\n   private _childNodes: InventoryNode[];\n\n   constructor(data: InventoryEntryData) {\n      this.data = data;\n      this.icon = data.iconShape;\n      this.active = !data.isDisabled;\n      this._childNodes = [];\n      this.childrenFetched = data.isLeafNode;\n      this.visible = true;\n   }\n\n   get childNodes(): InventoryNode[] {\n      return this._childNodes;\n   }\n\n   set childNodes(childNodes: InventoryNode[]) {\n      this._childNodes = childNodes;\n      for (let child of childNodes) {\n         child.parent = this;\n         child.selected = this.selected && child.active;\n      }\n   }\n}\n\nexport class InventorySelectionEvent {\n   constructor(public node: InventoryNode) {\n   }\n}","/* Copyright 2019-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport { NgControl } from '@angular/forms';\nimport {Directive, Input, OnInit} from \"@angular/core\";\n\n/**\n * This directive is used to provide declarative style disabling for angular reactive forms's input elements.\n * This is required since the reactive forms only provide a way to disable them initially,\n * but there is no binding as it seems and subsequent changes to the argument doesn't affect the\n * input's disabled element.\n * Here is a stackoverflow thread with the given issue and some more details on the current approach:\n * https://stackoverflow.com/questions/40494968/reactive-forms-disabled-attribute\n */\n@Directive({\n   selector: \"[vsan-disable-form-control]\"\n})\nexport class DisableControlDirective implements OnInit {\n\n   private isInit: boolean = false;\n\n   constructor( private ngControl : NgControl ) {\n   }\n\n   private _disableControl: boolean;\n\n   @Input(\"vsan-disable-form-control\")\n   set disableControl(value: boolean ) {\n      this._disableControl = value;\n      if (!this.ngControl.control || !this.isInit) {\n         return;\n      }\n      this.setDisabled();\n   }\n\n   get disableControl(): boolean {\n      return this._disableControl;\n   }\n\n   ngOnInit(): void {\n      this.setDisabled();\n      this.isInit = true;\n   }\n\n   private setDisabled(): void {\n      this.disableControl ? this.ngControl.control.disable() : this.ngControl.control.enable();\n   }\n}"],"sourceRoot":"webpack:///"}