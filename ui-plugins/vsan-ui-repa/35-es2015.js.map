{"version":3,"sources":["./src/app/vsan/common/component/cell/list-cell.component.ts","./src/app/vsan/common/component/cell/health-link-cell.component.ts","./src/app/vsan/common/component/cell/health-link-cell.html","./src/app/vsan/common/pipe/psp-health-label-class.pipe.ts","./src/app/vsan/common/component/cell/psp-health-state-item.component.ts","./src/app/vsan/common/component/cell/health-test-value.component.ts","./src/app/vsan/common/component/cell/list-cell.html","./src/app/vsan/common/component/cell/psp-health-state-item.html","./src/app/vsan/common/pipe/psp-health-status-text.pipe.ts","./src/app/vsan/common/component/cell/health-test-value.html"],"names":[],"mappings":"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","file":"35-es2015.js","sourcesContent":["/* Copyright 2020 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, Input} from \"@angular/core\";\nimport {VsanTestCell} from \"@generated/vsan-test-cell\";\nimport {VsanHealthUtil} from \"@util/vsan-health-util\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\n\n@Component({\n   templateUrl: \"list-cell.html\",\n   styleUrls: [\"list-cell.scss\"],\n   selector: \"vsan-list-cell\",\n})\nexport class ListCell {\n   readonly SEPARATOR: string = VsanUiUtils.getString(\"vsan.common.comma\");\n\n   @Input()\n   set cell(value: VsanTestCell) {\n      this.values = VsanHealthUtil.getListCellData(value);\n   }\n\n   values: string[] = [];\n}","/* Copyright 2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, Input} from \"@angular/core\";\nimport {VsanTestCell} from \"@generated/vsan-test-cell\";\nimport {VsanTestLink} from \"@generated/vsan-test-link\";\n\n@Component({\n   templateUrl: \"health-link-cell.html\",\n   selector: \"vsan-health-link-cell\",\n})\nexport class HealthLinkCellComponent {\n   link: VsanTestLink;\n\n   @Input()\n   set cell(value: VsanTestCell) {\n      if (!value || !value.cellValue) {\n         return;\n      }\n      this.link = value.cellValue as VsanTestLink;\n   }\n\n   navigateInternal(): void {\n      // TODO [mavrodievd] Implement internal navigation. Currently there are no health tests having internal links.\n   }\n}","<!-- Copyright 2021 VMware, Inc. All rights reserved. -- VMware Confidential -->\n<ng-container *ngIf=\"link\">\n   <a *ngIf=\"link.isInternal\"\n      href=\"javascript://\"\n      (click)=\"navigateInternal()\">\n      {{link.title}}\n   </a>\n   <a *ngIf=\"!link.isInternal\"\n      href=\"{{link.externalUrl}}\"\n      target=\"_blank\">\n      {{link.title}}\n   </a>\n</ng-container>\n","/* Copyright 2020 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Pipe} from \"@angular/core\";\nimport {VsanHealthUtil} from \"@util/vsan-health-util\";\nimport {PspObjectHealthState} from \"@generated/psp-object-health-state\";\n\n@Pipe({\n   name: \"pspHealthStateLabelClass\",\n})\nexport class PspHealthLabelClassPipe {\n   transform(state: PspObjectHealthState): string {\n      return VsanHealthUtil.getPspHealthStateLabelClass(state);\n   }\n}","/* Copyright 2020 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, Input} from \"@angular/core\";\nimport {PspObjectHealthState} from \"@generated/psp-object-health-state\";\n\n@Component({\n   templateUrl: \"psp-health-state-item.html\",\n   styleUrls: [\"health-state-item.scss\"],\n   selector: \"vsan-psp-health-state-item\",\n})\nexport class PspHealthStateItemComponent {\n   @Input()\n   pspHealthState: PspObjectHealthState;\n}","/* Copyright 2019-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, Input} from \"@angular/core\";\nimport {VsanTestCell} from \"@generated/vsan-test-cell\";\nimport {BaseHealthState, VsanHealthUtil} from \"@util/vsan-health-util\";\nimport {VirtualObjectsContext} from \"@navigation/context/virtual-objects-context\";\nimport {NavigationService, PlatformExtension} from \"@navigation/navigation.service\";\nimport {VsanObjectHealthState} from \"@generated/vsan-object-health-state\";\nimport {VsanObjectCompositeHealth} from \"@generated/vsan-object-composite-health\";\nimport {VsanHealthInfo} from \"@generated/vsan-health-info\";\nimport {VsanHealthStatus} from \"@generated/vsan-health-status\";\n\n@Component({\n   templateUrl: \"health-test-value.html\",\n   selector: \"vsan-health-test-value\",\n   styleUrls: [\"health-test-value.scss\"],\n})\nexport class HealthTestValueComponent {\n   VsanHealthUtil: typeof VsanHealthUtil = VsanHealthUtil;\n\n   @Input()\n   valueCell: VsanTestCell;\n\n   @Input()\n   isVirtualObjectsLinkShown: boolean = true;\n\n   @Input()\n   enableActionLink: boolean = true;\n\n   constructor(private navigationService: NavigationService) {\n   }\n\n   navigateToVirtualObjects = (healthState: VsanObjectHealthState, compositeHealth: VsanObjectCompositeHealth) => {\n      const context: VirtualObjectsContext = {};\n      context.filterHealthStates = this.getHealthStates(healthState, compositeHealth);\n      this.navigationService.navigateTo(PlatformExtension.VIRTUAL_OBJECTS, null, context);\n   };\n\n   private getHealthStates(healthState: VsanObjectHealthState,\n         compositeHealth: VsanObjectCompositeHealth): BaseHealthState[] {\n      const result: BaseHealthState[] = [];\n      if (healthState) {\n         result.push(healthState);\n      }\n      if (compositeHealth) {\n         if (compositeHealth.complianceState) {\n            result.push(compositeHealth.complianceState);\n         }\n         if (compositeHealth.incomplianceReason) {\n            result.push(compositeHealth.incomplianceReason);\n         }\n         if (compositeHealth.rebuildState) {\n            result.push(compositeHealth.rebuildState);\n         }\n         if (compositeHealth.policyState) {\n            result.push(compositeHealth.policyState);\n         }\n      }\n      return result;\n   }\n\n   getIsVirtualObjectsLinkShown(): boolean {\n      return this.isVirtualObjectsLinkShown && !this.isRemoteAccessibleCell();\n   }\n\n   private isRemoteAccessibleCell(): boolean {\n      return this.valueCell && this.valueCell.cellValue &&\n            this.valueCell.cellValue === VsanObjectHealthState.REMOTE_ACCESSIBLE;\n   }\n\n   getHealthInfoStatus(healthInfo: VsanHealthInfo): VsanHealthStatus {\n      return healthInfo.status;\n   }\n}\n","<!-- Copyright 2020 VMware, Inc. All rights reserved. -- VMware Confidential -->\n<div class=\"cell-content\">\n   <span *ngFor=\"let value of values; let index = index\">\n      <span *ngIf=\"index > 0\"\n            [innerHTML]=\"SEPARATOR\"\n            class=\"delimiter bold\"></span>\n      {{value}}\n   </span>\n</div>","<!-- Copyright 2020 VMware, Inc. All rights reserved. -- VMware Confidential -->\n<span *ngIf=\"pspHealthState\"\n      class=\"label\"\n      [ngClass]=\"pspHealthState | pspHealthStateLabelClass\"\n      [title]=\"pspHealthState | pspHealthStatusText\">\n   {{pspHealthState | pspHealthStatusText}}\n</span>","/* Copyright 2020 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Pipe} from \"@angular/core\";\nimport {VsanHealthUtil} from \"@util/vsan-health-util\";\nimport {PspObjectHealthState} from \"@generated/psp-object-health-state\";\n\n@Pipe({\n   name: \"pspHealthStatusText\",\n})\nexport class PspHealthStatusTextPipe {\n   transform(state: PspObjectHealthState): string {\n      return VsanHealthUtil.getPspObjectHealthStatusText(state);\n   }\n}","<!-- Copyright 2019-2020 VMware, Inc. All rights reserved. -- VMware Confidential -->\n<ng-container *ngIf=\"VsanHealthUtil.isTextCell(valueCell)\">\n   {{valueCell.cellValue}}\n</ng-container>\n<ng-container *ngIf=\"VsanHealthUtil.isNumericCell(valueCell)\">\n   {{VsanHealthUtil.formatedNumber(valueCell.cellValue, valueCell.cellType)}}\n</ng-container>\n<ng-container *ngIf=\"VsanHealthUtil.isDateCell(valueCell)\">\n   {{(valueCell.cellValue * 1000) | l10nDate}}\n</ng-container>\n<vsan-health-status-cell *ngIf=\"VsanHealthUtil.isHealthStatusCell(valueCell)\"\n                         [iconClass]=\"VsanHealthUtil.getHealthStatusClass(valueCell.cellValue)\"\n                         [shape]=\"VsanHealthUtil.getHealthStatusShape(valueCell.cellValue)\">\n</vsan-health-status-cell>\n<vsan-health-status-cell *ngIf=\"VsanHealthUtil.isHealthInfoCell(valueCell)\"\n                         [iconClass]=\"VsanHealthUtil.getHealthStatusClass(getHealthInfoStatus(valueCell.cellValue))\"\n                         [shape]=\"VsanHealthUtil.getHealthStatusShape(getHealthInfoStatus(valueCell.cellValue))\"\n                         [label]=\"VsanHealthUtil.getHealthInfoLabel(valueCell.cellValue)\">\n</vsan-health-status-cell>\n<ng-container *ngIf=\"VsanHealthUtil.isStatusCell(valueCell)\">\n   <ng-container *ngTemplateOutlet=\"healthStateItem;context: {healthStatus: valueCell.cellValue}\"></ng-container>\n</ng-container>\n<ng-container *ngIf=\"VsanHealthUtil.isHealthV2StateCell(valueCell)\">\n   <ng-container *ngTemplateOutlet=\"healthStateItem;context: {compositeHealth: valueCell.cellValue}\"></ng-container>\n</ng-container>\n<vsan-psp-health-state-item *ngIf=\"VsanHealthUtil.isPspHealthStateCell(valueCell)\"\n                            [pspHealthState]=\"valueCell.cellValue\">\n</vsan-psp-health-state-item>\n<vsan-health-mor-cell *ngIf=\"VsanHealthUtil.isMorCell(valueCell)\"\n                      [data]=\"VsanHealthUtil.getMorCellData(valueCell)\"\n                      [enableActionLink]=\"enableActionLink\">\n</vsan-health-mor-cell>\n<vsan-list-cell *ngIf=\"VsanHealthUtil.isPrimitiveListCell(valueCell)\"\n                [cell]=\"valueCell\">\n</vsan-list-cell>\n<vsan-health-link-cell *ngIf=\"VsanHealthUtil.isLinkCell(valueCell)\"\n                       [cell]=\"valueCell\">\n</vsan-health-link-cell>\n<ng-template #healthStateItem let-healthStatus=\"healthStatus\" let-compositeHealth=\"compositeHealth\">\n   <div class=\"health-state-wrapper\">\n      <vsan-health-state-item [healthState]=\"healthStatus\"\n                              [compositeHealth]=\"compositeHealth\">\n      </vsan-health-state-item>\n      <a href=\"javascript://\"\n         *ngIf=\"getIsVirtualObjectsLinkShown()\"\n         (click)=\"navigateToVirtualObjects(healthStatus, compositeHealth)\">\n         {{\"vsan.monitor.health.healthState.viewDetails\" | localized}}\n      </a>\n   </div>\n</ng-template>\n"],"sourceRoot":"webpack:///"}