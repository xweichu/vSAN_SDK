{"version":3,"sources":["./src/app/vsan/common/directive/signpost-title/signpost-title.directive.ts","./src/app/vsan/common/component/precheck/precheck-dialog.module.ts","./src/app/vsan/common/component/precheck/pre-check-evacuation-dialog.html","./src/app/vsan/common/component/precheck/pre-check-evacuation-dialog.component.ts","./src/app/vsan/common/component/datagrid/filter/base-filter.ts","./src/app/vsan/common/component/inventory/inventory-browser.module.ts","./src/app/vsan/common/component/search/search.module.ts","./src/app/vsan/common/component/datagrid/tree-datagrid.ts"],"names":[],"mappings":"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","file":"134-es2015.js","sourcesContent":["/* Copyright 2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {AfterViewInit, Directive, ElementRef, Input, Renderer2} from \"@angular/core\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\n\n/**\n * Attribute directive for setting a custom title to the clr-icon inside a clr-signpost.\n * It also adds aria-label with the same value and aria-expanded=\"false\" to the button, holding the icon.\n * Used for changing the title when a clr-icon is not explicitly added inside a clr-signpost.\n */\n@Directive({\n   selector: \"clr-signpost\",\n})\nexport class SignpostTitleDirective implements AfterViewInit {\n   private readonly BUTTON_TAG_NAME: string = \"button\";\n   private readonly CLR_ICON_TAG_NAME: string = \"clr-icon\";\n\n   private readonly TITLE_ATTRIBUTE: string = \"title\";\n   private readonly ARIA_EXPANDED_ATTRIBUTE: string = \"aria-expanded\";\n   private readonly ARIA_LABEL_ATTRIBUTE: string = \"aria-label\";\n\n   @Input(\"vsan-signpost-title\")\n   signpostTitle: string;\n\n   constructor(private el: ElementRef<HTMLElement>,\n         private renderer: Renderer2) {\n   }\n\n   ngAfterViewInit(): void {\n      if (!this.signpostTitle) {\n         return;\n      }\n\n      const signpostIcon: Element = this.el.nativeElement.getElementsByTagName(this.CLR_ICON_TAG_NAME).item(0);\n      if (signpostIcon) {\n         this.renderer.setAttribute(signpostIcon, this.TITLE_ATTRIBUTE, VsanUiUtils.getString(this.signpostTitle));\n      }\n      const button: Element = this.el.nativeElement.getElementsByTagName(this.BUTTON_TAG_NAME).item(0);\n      if (button) {\n         this.renderer.setAttribute(button, this.ARIA_EXPANDED_ATTRIBUTE, \"false\");\n         this.renderer.setAttribute(button, this.ARIA_LABEL_ATTRIBUTE, VsanUiUtils.getString(this.signpostTitle));\n      }\n   }\n}\n","import {RouterModule, Routes} from \"@angular/router\";\nimport {PreCheckEvacuationDialogComponent} from \"@component/precheck/pre-check-evacuation-dialog.component\";\nimport {NgModule} from \"@angular/core\";\nimport {CommonModule} from \"@angular/common\";\nimport {FormsModule} from \"@angular/forms\";\nimport {ClarityModule} from \"@clr/angular\";\nimport {VsanCommonModule} from \"../../vsan-common.module\";\nimport {PrecheckModule} from \"@component/precheck/pre-check.module\";\n\nconst routes: Routes = [\n   {\n      path: \"\",\n      component: PreCheckEvacuationDialogComponent\n   }\n];\n\n@NgModule({\n   imports: [\n      CommonModule,\n      FormsModule,\n      ClarityModule,\n      VsanCommonModule,\n      PrecheckModule,\n      RouterModule.forChild(routes)\n   ],\n   declarations: [\n      PreCheckEvacuationDialogComponent\n   ],\n   exports: [\n      PreCheckEvacuationDialogComponent\n   ]\n})\nexport class PrecheckDialogModule {\n}","<!--Copyright 2017-2020 VMware, Inc. All rights reserved. -- VMware Confidential-->\n<vsan-info-prompt [title]=\"primaryTitle\"\n                  [subtitle]=\"secondaryTitle\">\n   <vsan-pre-check-evacuation-summary [clusterId]=\"clusterId\"\n                                      [hostMor]=\"hostMor\"\n                                      [evacuationEntityUuid]=\"evacuationEntityUuid\"\n                                      [selectedDecommissionMode]=\"decommissionMode\"\n                                      [isDecommissionModeChangeAllowed]=\"isDecommissionModeChangeAllowed\"\n                                      (selectedDecommissionModeSummaryChanged)=\"onDecommissionModeSummaryChanged($event)\">\n   </vsan-pre-check-evacuation-summary>\n</vsan-info-prompt>","/* Copyright 2017-2020 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, OnInit} from \"@angular/core\";\nimport {ManagedObject} from \"@service/managed-object\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {Logger} from \"@util/logger\";\nimport {DecommissionModeSummary} from \"@component/precheck/pre-check-evacuation-summary.component\";\nimport {DecommissionMode} from \"@generated/decommission-mode\";\nimport {VsanDiskMgmtActionsUtil} from \"@util/vsan-disk-mgmt-actions-util\";\nimport {PreCheckEvacuationDialogSize} from \"@component/precheck/pre-check-evacuation-dialog-size\";\n\n@Component({\n   templateUrl: \"pre-check-evacuation-dialog.html\",\n   selector: \"vsan-pre-check-evacuation-dialog\",\n})\nexport class PreCheckEvacuationDialogComponent implements OnInit {\n   hostMor: ManagedObject;\n   clusterId: string = \"\";\n   evacuationEntityUuid: string = \"\";\n   entityName: string;\n   decommissionMode: DecommissionMode;\n   primaryTitle: string = \"\";\n   secondaryTitle: string = \"\";\n   isDecommissionModeChangeAllowed: boolean = true;\n\n   async ngOnInit() {\n      const context: any = VsanUiUtils.getModalContext();\n      this.hostMor = context.hostMor;\n      this.evacuationEntityUuid = context.objectUid;\n      this.entityName = context.objectName;\n      this.clusterId = context.clusterId;\n      if (context.selectedDecommisionMode) {\n         // Dialog is opened from the context of Enter Maintenance Mode and has preselected decommission mode\n         // Showing the \"Detailed report\" dialog here, which doesn't allow changing the selected decommission mode\n         this.isDecommissionModeChangeAllowed = false;\n         this.primaryTitle = VsanUiUtils.getString(\"vsan.dialog.precheckEvacuation.detailedReport.title\");\n         switch (context.selectedDecommisionMode) {\n            case \"evacuateAllData\":\n               this.decommissionMode = DecommissionMode.evacuateAllData;\n               this.secondaryTitle = VsanUiUtils.getString(\n                     \"vsan.dialog.precheckEvacuation.detailedReport.secondaryTitle.fullDataMigration\");\n               break;\n            case \"ensureObjectAccessibility\":\n               this.decommissionMode = DecommissionMode.ensureObjectAccessibility;\n               this.secondaryTitle = VsanUiUtils.getString(\n                     \"vsan.dialog.precheckEvacuation.detailedReport.secondaryTitle.ensureAccessibility\");\n               break;\n            case \"noAction\":\n               this.decommissionMode = DecommissionMode.noAction;\n               this.secondaryTitle = VsanUiUtils.getString(\n                     \"vsan.dialog.precheckEvacuation.detailedReport.secondaryTitle.noDataMigration\");\n               break;\n            default:\n               Logger.error(\"Unknown decommissionMode type passed: \" + context.selectedDecommisionMode);\n               break;\n         }\n      } else {\n         // Dialog is opened via Disk Management \"Pre-check\" action\n         this.decommissionMode = DecommissionMode.ensureObjectAccessibility;\n         this.primaryTitle = VsanUiUtils.getString(\"vsan.dialog.precheckEvacuation.title\");\n         this.secondaryTitle = this.entityName;\n      }\n   }\n\n   onDecommissionModeSummaryChanged = (summary: DecommissionModeSummary) => {\n      // In case the precheck dialog doesn't show any objects, decrease the height\n      if  (VsanDiskMgmtActionsUtil.isPrecheckWithObjects(summary)) {\n         VsanUiUtils.setModalDialogHeight(PreCheckEvacuationDialogSize.HEIGHT_WITH_OBJECTS);\n      } else {\n         VsanUiUtils.setModalDialogHeight(PreCheckEvacuationDialogSize.HEIGHT_WITHOUT_OBJECTS);\n      }\n   };\n}","/* Copyright 2017-2020 VMware, Inc. All rights reserved. -- VMware Confidential */\n\nimport {Filter, TreeDatagridRow} from \"../tree-datagrid\";\nimport {ClrDatagridStringFilterInterface} from \"@clr/angular\";\n\n/**\n * Abstract filter class that needs to be extended in order to implement custom filtration.\n * The class has a single abstract method that takes an object of type T and returns its\n * string representation.\n */\nexport class BaseFilter<T> implements ClrDatagridStringFilterInterface<T>, Filter {\n\n   accepts(data: T, search: string): boolean {\n      // Handle correctly TreeDatagrid components\n      if (data instanceof TreeDatagridRow) {\n         data = data.data;\n      }\n\n      let label: string = this.stringify(data);\n      if (label) {\n         // Compare ignoring the case\n         return label.toLowerCase().indexOf(search.toLowerCase()) != -1;\n      } else {\n         return false;\n      }\n   }\n\n   match(data: T, search: string): boolean {\n      return this.accepts(data, search);\n   }\n\n   protected stringify(data: T): string  {\n      return data + \"\";\n   }\n\n}\n\n","/* Copyright 2019-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {NgModule} from \"@angular/core\";\nimport {CommonModule} from \"@angular/common\";\nimport {FormsModule} from \"@angular/forms\";\nimport {ClarityModule} from \"@clr/angular\";\nimport {CommonPipeModule} from \"@pipe/common-pipe.module\";\nimport {InventoryBrowserComponent} from \"@component/inventory/inventory-browser.component\";\nimport {InventoryNodeComponent} from \"@component/inventory/inventory-node.component\";\nimport {WitnessCandidateInventoryService} from \"@generated/witness-candidate-inventory-service\";\nimport {DatacenterInventoryService} from \"@generated/datacenter-inventory-service\";\nimport {NetworkInventoryService} from \"@generated/network-inventory-service\";\nimport {ComputeInventoryService} from \"@generated/compute-inventory-service\";\nimport {IoInsightInventoryService} from \"@generated/io-insight-inventory-service\";\nimport {SearchModule} from \"@component/search/search.module\";\nimport {TreeNodeComponent} from \"@component/inventory/tree-view/tree-node.component\";\nimport {TreeViewComponent} from \"@component/inventory/tree-view/tree-view.component\";\nimport {DropdownObjectSelectorComponent} from \"@component/inventory/dropdown-object-selector/dropdown-object-selector.component\";\nimport {CommonDirectiveModule} from \"@directive/common-directive.module\";\nimport {InventoryNodesComponent} from \"@component/inventory/inventory-nodes.component\";\nimport {TreeNodesComponent} from \"@component/inventory/tree-view/tree-nodes.component\";\n\n@NgModule({\n   imports: [\n      CommonModule,\n      FormsModule,\n      ClarityModule,\n      CommonPipeModule,\n      SearchModule,\n      CommonDirectiveModule,\n   ],\n   declarations: [\n      InventoryBrowserComponent,\n      InventoryNodesComponent,\n      InventoryNodeComponent,\n      TreeNodeComponent,\n      TreeNodesComponent,\n      TreeViewComponent,\n      DropdownObjectSelectorComponent,\n   ],\n   exports: [\n      InventoryBrowserComponent,\n      DropdownObjectSelectorComponent,\n      TreeViewComponent,\n   ],\n   providers: [\n      WitnessCandidateInventoryService,\n      DatacenterInventoryService,\n      NetworkInventoryService,\n      ComputeInventoryService,\n      IoInsightInventoryService,\n   ],\n})\nexport class InventoryBrowserModule {\n}","/* Copyright 2019 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {NgModule} from \"@angular/core\";\nimport {CommonModule} from \"@angular/common\";\nimport {FormsModule} from \"@angular/forms\";\nimport {ClarityModule} from \"@clr/angular\";\nimport {CommonPipeModule} from \"@pipe/common-pipe.module\";\nimport {SearchComponent} from \"@component/search/search.component\";\n\n@NgModule({\n   imports: [\n      CommonModule,\n      FormsModule,\n      ClarityModule,\n      CommonPipeModule\n   ],\n   declarations: [\n      SearchComponent\n   ],\n   exports: [\n      SearchComponent\n   ],\n})\nexport class SearchModule {\n}\n","/* Copyright 2016 VMware, Inc. All rights reserved. -- VMware Confidential */\n\nimport {BehaviorSubject} from \"rxjs\";\nimport {ClrDatagridFilterInterface} from \"@clr/angular\";\n\n/**\n * Hierarchical data provider.\n * This is a additional structure to the Clarity Datagrid that supports hierarchical data rendering.\n */\nexport class TreeDatagrid {\n\n   public static forChildProperty(childField: string, rowData?: any[]) {\n      return new TreeDatagrid(item => item[childField], rowData);\n   }\n\n   /**\n    * The data objects that are to be rendered as first-level rows.\n    */\n   protected roots: any[];\n\n   /**\n    * The flat row structure consisting of the root objects and their children\n    * in case the parents are expanded. Sorting and filtering are reflected here.\n    */\n   protected content: TreeDatagridRow[];\n\n   /**\n    * List of filters to be applied on the data.\n    */\n   protected filters: TreeFilter[] = [];\n\n   /**\n    * The comparator to be used to sort the items and their children.\n    */\n   public comparator: (item1: any, item2: any) => number;\n\n   /**\n    * Sorting direction.\n    */\n   public sortAscending: boolean;\n\n   /**\n    * @param childItems lambda for extracting the children of a given data object\n    * @param rootItems (optional) the initial data objects\n    */\n   constructor(private childItems: (parent: any) => any[], rootItems?: any[]) {\n      this.rootItems = rootItems;\n   }\n\n   /**\n    * Removes all items.\n    */\n   public clear = () => this.rootItems = [];\n\n   /**\n    * Sets the given data objects as content.\n    */\n   public refreshGrid = (rowData: any[]) => this.rootItems = rowData;\n\n   public set rootItems(value: any[]) {\n      this.roots = value ? value : [];\n      this.content = this.flatten(this.roots);\n   }\n\n   /**\n    * root data objects\n    */\n   public get rootItems(): any[] {\n      return this.roots;\n   }\n\n   /**\n    * The flat row structure consisting of the root objects and their children\n    * in case the parents are expanded. Sorting and filtering are reflected here.\n    */\n   public get rows(): TreeDatagridRow[] {\n      return this.content;\n   }\n\n   /**\n    * Registers a new filter in the data provider.\n    * Initially the filter will accept all items.\n    * The consumer can assign a predicate to the TreeFilter object\n    * to add filtering rule. All registered filters' predicates are\n    * evaluated using AND operator.\n    */\n   public registerFilter(): TreeFilter {\n      let filter: TreeFilter = new TreeFilter(() => this.content = this.flatten(this.rootItems));\n      this.filters.push(filter);\n      return filter;\n   }\n\n   public unregisterFilter(value: TreeFilter) {\n      let index: number = this.filters.indexOf(value);\n      if (index != -1) {\n         this.filters.splice(index, 1);\n      }\n   }\n\n   /**\n    * Applies sorting comparator and direction for the data provider.\n    */\n   public sort(comparator: (item1: any, item2: any) => number, ascending: boolean = true) {\n      this.comparator = comparator;\n      this.sortAscending = ascending;\n\n      // refresh content, will expand all nodes\n      this.content = this.flatten(this.rootItems);\n   }\n\n   public collapseAll = () => this.rows.forEach(r => this.collapse(r));\n\n   public expandAll = () => this.rows.forEach(r => this.expand(r));\n\n   protected expand(row: TreeDatagridRow) {\n      if (row.isExpanded) {\n         // already expanded\n         return;\n      }\n\n      let rowIndex = this.content.indexOf(row);\n      if (rowIndex == -1) {\n         // row is filtered out\n         return;\n      }\n\n      let flattenedChildren: TreeDatagridRow[] = this.flatten(this.childItems(row.data), row.depth + 1);\n      if (flattenedChildren.length > 0) {\n         this.content.splice(rowIndex + 1, 0, ... flattenedChildren);\n      }\n\n      row.isExpanded = true;\n   }\n\n   protected collapse(row: TreeDatagridRow) {\n      if (!row.isExpanded) {\n         // already collapsed\n         row.isExpanded = false;\n         return;\n      }\n\n      let rowIndex = this.content.indexOf(row);\n      if (rowIndex == -1) {\n         // row is filtered out\n         return;\n      }\n\n      let removeCount: number = 0;\n      for (let i = rowIndex + 1; i < this.content.length && row.depth < this.content[i].depth; i++) {\n         removeCount ++;\n      }\n\n      this.content.splice(rowIndex + 1, removeCount);\n      row.isExpanded = false;\n   }\n\n   // returns flattened list of the specified items and their children (and their children);\n   // sorting and filter are applied;\n   // items are returned in expanded state\n   protected flatten(items: any[], depth: number = 0, parent?: any): TreeDatagridRow[] {\n      if (!items) {\n         return [];\n      }\n\n      let sortedItems: any[] = [... items];\n      if (this.comparator) {\n         sortedItems.sort((item1: any, item2: any) => (this.sortAscending ? 1 : -1) * this.comparator(item1, item2));\n      }\n\n      let result: TreeDatagridRow[] = [];\n\n      for (let item of sortedItems) {\n\n         let childItems: any[] = this.childItems(item);\n\n         // flattened children, including their children\n         let children: TreeDatagridRow[] = this.flatten(childItems, depth + 1, item);\n\n         let filteredOut: boolean = false;\n         for (let filter of this.filters) {\n            // filter out items only if the filter is not applicable for the item or it's parent\n            const matchFilter: boolean = filter.predicate(item) || (!!parent && filter.predicate(parent));\n            if (!matchFilter) {\n               filteredOut = true;\n            }\n         }\n         if (!filteredOut || children.length > 0) {\n            let row: TreeDatagridRow = new TreeDatagridRow();\n            row.data = item;\n            row.toggle = () => row.isExpanded ? this.collapse(row) : this.expand(row);\n            row.depth = depth;\n            row.isExpanded = true;\n            row.isExpandable = childItems && childItems.length > 0;\n\n            result.push(row, ... children);\n         }\n      }\n\n      return result;\n   }\n\n}\n\n/**\n * Represents a single row in a flattened tree data provider.\n */\nexport class TreeDatagridRow {\n\n   /**\n    * The data object for the row\n    */\n   public data: any;\n\n   /**\n    * Will be true if the row has children\n    */\n   public isExpandable: boolean;\n\n   /**\n    * Will be true if the row is currently expanded\n    */\n   public isExpanded: boolean;\n\n   /**\n    * Will flip the row's expanded/collapsed state\n    */\n   public toggle: () => void;\n\n   /**\n    * The nesting level the row is rendered at\n    */\n   public depth: number;\n\n}\n\nexport interface Filter  {\n   match(data: any, filter:string): boolean;\n}\n\n/**\n * Allows specifying filtering predicate for the data provider.\n * @see TreeDatagrid.registerFilter\n */\nexport class TreeFilter implements ClrDatagridFilterInterface<any> {\n\n   private _predicate: (item: any) => boolean;\n   changes = new BehaviorSubject<boolean>(false);\n\n   constructor(private apply: () => void) {\n      this.clear();\n   }\n\n   public clear() {\n      this._predicate = (item: any) => true;\n      this.apply();\n   }\n\n   public set predicate(predicate: (item: any) => boolean) {\n      if (!predicate) {\n         this.clear();\n      } else {\n         this._predicate = predicate;\n         this.apply();\n      }\n   }\n\n   public get predicate(): (item: any) => boolean {\n      return this._predicate;\n   }\n\n   // Used by clarity filter\n   isActive(): boolean {\n      return this.changes.getValue();\n   }\n\n   // Used by clarity filter\n   accepts(val: any): boolean {\n      return true;\n   }\n}"],"sourceRoot":"webpack:///"}