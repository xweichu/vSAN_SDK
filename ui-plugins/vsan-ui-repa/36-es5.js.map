{"version":3,"sources":["webpack:///src/app/generated/hcl-update-offline-spec.ts","webpack:///src/app/vsan/update/action/update-actions.module.ts","webpack:///src/app/vsan/update/action/release-catalog-update-action.component.ts","webpack:///src/app/vsan/update/action/release-catalog-update-action.html","webpack:///src/app/vsan/common/directive/upload/file-selector.directive.ts","webpack:///src/app/vsan/update/action/hcl-database-update-action.html","webpack:///src/app/vsan/update/action/hcl-database-update-action.component.ts"],"names":["HclUpdateOfflineSpec","Factory","create","hclDatabaseFileZlibCompressedContent","UpdateActionsModule","VsanReleaseCatalogUpdateActionComponent","updateDbService","hasEditPermissions","updateComplete","error","updating","uploadCalatog","bytes","uploadReleaseDb","contextObject","then","handleActionSuccess","handleError","onFileReadError","event","emit","getString","ex","FileSelector","el","fileRead","upload","fileEvent","file","target","files","reader","FileReader","readAsText","onload","readerEvent","data","result","Array","from","err","fileSelector","value","onerror","buttonRef","fileInput","document","createElement","type","id","elementId","hidden","body","appendChild","onchange","getElementById","removeChild","click","HclDatabaseUpdateAction","isDisabled","updateOnline","updateHclDbFromWeb","onUpdateOnlineError","fileContentLoaded","uploadHclDb","onUpdateOfflineError","toString"],"mappings":"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","file":"36-es5.js","sourcesContent":["\nexport interface HclUpdateOfflineSpec {\n\n   hclDatabaseFileZlibCompressedContent: any[];\n} //class HclUpdateOfflineSpec\n\nexport module HclUpdateOfflineSpec{\nexport class Factory {\n\n   static create = (hclDatabaseFileZlibCompressedContent: any[]): HclUpdateOfflineSpec => {\n      return { hclDatabaseFileZlibCompressedContent: hclDatabaseFileZlibCompressedContent, };\n   }\n\n\n} //class Factory\n\n} //module HclUpdateOfflineSpec\n","/* Copyright 2019-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {NgModule} from \"@angular/core\";\nimport {HclDatabaseUpdateAction} from \"./hcl-database-update-action.component\";\nimport {VsanReleaseCatalogUpdateActionComponent} from \"./release-catalog-update-action.component\";\nimport {CommonModule} from \"@angular/common\";\nimport {ClarityModule} from \"@clr/angular\";\nimport {FormsModule} from \"@angular/forms\";\nimport {CommonDirectiveModule} from \"@directive/common-directive.module\";\nimport {CommonPipeModule} from \"@pipe/common-pipe.module\";\nimport {DuplicatePciIdUpdateActionComponent} from \"./duplicate-pci-id-update-action.component\";\n\n@NgModule({\n   imports: [\n         CommonModule,\n         ClarityModule,\n         FormsModule,\n         CommonPipeModule,\n         CommonDirectiveModule,\n   ],\n   declarations: [\n         HclDatabaseUpdateAction,\n         VsanReleaseCatalogUpdateActionComponent,\n         DuplicatePciIdUpdateActionComponent,\n   ],\n   exports: [\n         HclDatabaseUpdateAction,\n         VsanReleaseCatalogUpdateActionComponent,\n         DuplicatePciIdUpdateActionComponent,\n   ],\n})\nexport class UpdateActionsModule {\n}","/* Copyright 2018-2019 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, EventEmitter, Input, Output} from \"@angular/core\";\nimport {UpdateDbService} from \"@generated/update-db-service\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {ManagedObject} from \"@service/managed-object\";\n\n/**\n * Component that provides update release catalog action\n */\n@Component({\n   templateUrl: \"release-catalog-update-action.html\",\n   selector: \"vsan-release-catalog-update-action\",\n   styleUrls: [\"update-catalog-action.scss\"]\n})\nexport class VsanReleaseCatalogUpdateActionComponent {\n\n   constructor(private updateDbService: UpdateDbService) {}\n\n   /**\n    * The button styles are different from health details view and vSAN Update view\n    */\n   @Input()\n   btnClasses: string;\n\n   @Input()\n   hasEditPermissions: boolean = false;\n\n   @Output()\n   updateComplete: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n   @Output()\n   error: EventEmitter<string> = new EventEmitter<string>();\n\n   updating: boolean = false;\n\n   uploadCalatog = (bytes: number[]): void => {\n      this.updating = true;\n      this.updateDbService.uploadReleaseDb(ManagedObject.contextObject, bytes)\n         .then(this.handleActionSuccess)\n         .catch(this.handleError);\n   }\n\n   onFileReadError = (event: any): void => {\n      this.error.emit(VsanUiUtils.getString(\"vsan.vc.configure.releaseCatalog.error.fileUpload\"));\n   }\n\n   private handleActionSuccess = (): void => {\n      this.updating = false;\n      this.updateComplete.emit(true);\n   };\n\n   private handleError = (ex: Error): void => {\n      this.updating = false;\n      this.error.emit(VsanUiUtils.getString(\"vsan.vc.configure.releaseCatalog.error.updateCatalog\"));\n   };\n}","<!--Copyright 2018-2020 VMware, Inc. All rights reserved. -- VMware Confidential-->\n<button id=\"upload-catalog-button\"\n        [class]=\"btnClasses\"\n        [vsan-file-selector]=\"'vsan-release-catalog-file-selector'\"\n        (fileRead)=\"uploadCalatog($event)\"\n        (onFileReadError)=\"onFileReadError($event)\"\n        [disabled]=\"updating || !hasEditPermissions\"\n        type=\"button\">\n   {{\"vsan.vc.configure.releaseCatalog.button.update\" | localized}}\n</button>","/* Copyright 2018-2020 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Directive, ElementRef, EventEmitter, HostListener, Input, OnDestroy, OnInit, Output} from \"@angular/core\";\nimport {Logger} from \"../../util/logger\";\nimport * as zlib from \"pako\";\n\n/**\n * Attribute directive used to attach file upload functionality to a button.\n * The uploaded file is compressed using zlib.\n * @elementId - The id of the input element to be created that we serve for browsing a file and reading it.\n *\n * fileRead - Emits event upon successful file read, containing the compressed content of the file.\n * onFileReadError - Emits error event in case error occurs while reading the file.\n */\n@Directive({\n   selector: \"[vsan-file-selector]\",\n})\nexport class FileSelector implements OnInit, OnDestroy {\n\n   @Input(\"vsan-file-selector\")\n   elementId: string;\n\n   @Output()\n   fileRead: EventEmitter<number[]> = new EventEmitter<number[]>();\n\n   @Output()\n   onFileReadError: EventEmitter<void> = new EventEmitter<void>();\n\n   private fileSelector: any;\n   private buttonRef: ElementRef;\n\n   constructor(el: ElementRef) {\n      this.buttonRef = el;\n   }\n\n   ngOnInit(): void {\n      const fileInput: HTMLInputElement = document.createElement(\"input\");\n      fileInput.type = \"file\";\n      fileInput.id = this.elementId;\n      fileInput.hidden = true;\n      document.body.appendChild(fileInput);\n      this.fileSelector = fileInput;\n      this.fileSelector.onchange = this.upload;\n   }\n\n   ngOnDestroy(): void {\n      this.fileSelector = document.getElementById(this.elementId);\n      /* Delete the previous file selector and recreate it,\n       * since otherwise the fileRead emitter looses its subscribers and using the existing one\n       * doesn't trigger upload functionality.\n       */\n      if (this.fileSelector) {\n         document.body.removeChild(this.fileSelector);\n      }\n   }\n\n   @HostListener(\"click\")\n   onBtnClick(): void {\n      this.fileSelector.click();\n   }\n\n   private upload = (fileEvent: any): void => {\n      const file: File = fileEvent.target.files[0];\n      const reader: FileReader = new FileReader();\n      reader.readAsText(file, \"UTF-8\");\n\n      reader.onload = (readerEvent: any) => {\n         const data: string = readerEvent.target.result;\n         try {\n            const bytes: number[] = Array.from(zlib.deflate(data));\n            this.fileRead.emit(bytes);\n         } catch (err) {\n            Logger.error(\"Failed to compress file:\", err);\n            this.onFileReadError.emit();\n         }\n         this.fileSelector.value = null;\n      };\n\n      reader.onerror = () => {\n         Logger.error(\"Failed to load file:\", file);\n         this.fileSelector.value = null;\n         this.onFileReadError.emit();\n      };\n   };\n\n}","<!-- Copyright 2017-2020 VMware, Inc. All rights reserved. VMware Confidential -->\n<button id=\"update-from-file-btn\"\n        [class]=\"btnClasses\"\n        [disabled]=\"updating || isDisabled\"\n        [vsan-file-selector]=\"'hcl-db-file-selector'\"\n        (fileRead)=\"fileContentLoaded($event)\"\n        (onFileReadError)=\"onFileReadError($event)\">\n   {{'vsan.vc.configure.hclDatabase.button.updateOffline' | localized}}\n</button>\n<button id=\"update-online-btn\"\n        [class]=\"btnClasses\"\n        (click)=\"updateOnline()\"\n        [disabled]=\"updating || isDisabled\">\n   {{'vsan.vc.configure.hclDatabase.button.updateOnline' | localized}}\n</button>","/* Copyright 2017-2019 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, EventEmitter, Input, Output} from \"@angular/core\";\nimport {ManagedObject} from \"@service/managed-object\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {HclUpdateOfflineSpec} from \"@generated/hcl-update-offline-spec\";\nimport {UpdateDbService} from \"@generated/update-db-service\";\n\n/**\n * The component that provides the update hcl-db online/offline actions\n */\n@Component({\n   templateUrl: \"hcl-database-update-action.html\",\n   selector: \"vsan-hcl-database-update-action\",\n   styleUrls: [\"update-catalog-action.scss\"]\n})\nexport class HclDatabaseUpdateAction {\n\n   @Input()\n   btnClasses: string;\n\n   @Input()\n   isDisabled: boolean = false;\n\n   @Output()\n   updateComplete: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n   @Output()\n   error: EventEmitter<string> = new EventEmitter();\n\n   updating: boolean;\n\n   constructor(private updateDbService: UpdateDbService) {\n   }\n\n   updateOnline = (): void => {\n      this.updating = true;\n      this.updateDbService.updateHclDbFromWeb(ManagedObject.contextObject)\n                  .then(this.handleActionSuccess)\n                  .catch(this.onUpdateOnlineError);\n   };\n\n   fileContentLoaded = (bytes: number[]): void => {\n      this.updating = true;\n      this.updateDbService.uploadHclDb(ManagedObject.contextObject,\n            HclUpdateOfflineSpec.Factory.create(bytes))\n            .then(this.handleActionSuccess)\n            .catch(this.onUpdateOfflineError);\n   };\n\n   onFileReadError = (event: any): void => {\n      this.updating = false;\n      this.error.emit(VsanUiUtils.getString(\"vsan.vc.configure.hclDatabase.error.fileUpload\"));\n   };\n\n   private handleActionSuccess = (): void => {\n      this.updating = false;\n      this.updateComplete.emit(true);\n   };\n\n   private onUpdateOnlineError = (): void => {\n      this.updating = false;\n      this.error.emit(VsanUiUtils.getString(\"vsan.vc.configure.hclDatabase.error.onlineUpdate\"));\n   };\n\n   private onUpdateOfflineError = (ex: Error): void => {\n      this.updating = false;\n      this.error.emit(ex.toString());\n   };\n\n}"]}