{"version":3,"sources":["webpack:///src/app/generated/vsan-fault-domain-spec.ts","webpack:///src/app/vsan/common/component/diskmgmt/diskmgmt-common.module.ts","webpack:///src/app/vsan/common/component/diskmgmt/disks-property-retriever.ts"],"names":["VsanFaultDomainSpec","Factory","create","faultDomain","hostRef","DiskmgmtCommonModule","DisksPropertyRetriever","dataService","vpxdModelFactory","clusterRef","getProperty","host","id","hostRefs","storageSystemRefs","map","hostRefToStorateSystemRef","Promise","all","getHostProperties","getStorageDeviceProperties","hostPropertiesResult","storageDevicesPropertiesResult","select","storageDeviceInfo","hostBusAdapter","scsiLun","plugStoreTopology","path","adapter","target","device","fromMoRef","execute","storageDevices","resultItems","ri","adapters","get","luns","topologyDevices","topologyAdapters","topologyPaths","topologyTargets","storageDeviceData","lun","topologyDevice","find","td","key","topologyPath","p","topologyAdapter","ta","a","topologyTarget","t","underlyingLun","transport","getTransport","storageSystemRef","resourceObject","storageSystemRefToHostRef","createDataServiceResult","PROP_VSAN_STORAGE_ADAPTER_DEVICES","name","config","product","version","hostProps","result","forEach","push","ICON_ID","getObjectTypeIcon","propertyValues","value","type","replace","MO_PREFIX_STORAGE_SYSTEM","MO_PREFIX_HOST","serverGuid","mo","obj","propertyName","clazz","getObjectType","TransportType","HostFibreChannelOverEthernetTargetTransport","HostFibreChannelTargetTransport","HostInternetScsiTargetTransport","HostParallelScsiTargetTransport","HostBlockAdapterTargetTransport","HostSerialAttachedTargetTransport","HostPcieTargetTransport","HostRdmaTargetTransport","HostTcpTargetTransport"],"mappings":"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","file":"26-es5.js","sourcesContent":["\nexport interface VsanFaultDomainSpec {\n\n   faultDomain: string;\n   hostRef: any;\n} //class VsanFaultDomainSpec\n\nexport module VsanFaultDomainSpec{\nexport class Factory {\n\n   static create = (faultDomain: string, hostRef: any): VsanFaultDomainSpec => {\n      return { faultDomain: faultDomain, hostRef: hostRef, };\n   }\n\n\n} //class Factory\n\n} //module VsanFaultDomainSpec\n","/* Copyright 2019-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {NgModule} from \"@angular/core\";\nimport {CommonModule} from \"@angular/common\";\nimport {FormsModule} from \"@angular/forms\";\nimport {ClarityModule} from \"@clr/angular\";\nimport {DisksPropertyRetriever} from \"@component/diskmgmt/disks-property-retriever\";\nimport {ValidationModule} from \"@component/validation/validation.module\";\nimport {CommonPipeModule} from \"@pipe/common-pipe.module\";\nimport {CreateDiskGroupComponent} from \"@component/diskmgmt/create-disk-group.component\";\nimport {ClaimDisksComponent} from \"@component/diskmgmt/claim-disks.component\";\nimport {ValidationPanelComponent} from \"@component/diskmgmt/validation-panel.component\";\nimport {VsanCommonModule} from \"../../vsan-common.module\";\nimport {SpaceEfficiencyService} from \"@service/space-efficiency-service\";\nimport {VsanChartModule} from \"@component/chart/chart.module\";\nimport {VsanCapacityService} from \"@component/capacity/capacity.service\";\nimport {DisksCapacityChartComponent} from \"@component/diskmgmt/disks-capacity-chart.component\";\nimport {ClaimForPmemComponent} from \"@component/diskmgmt/claim-for-pmem.component\";\nimport {ClaimForVsanComponent} from \"@component/diskmgmt/claim-for-vsan.component\";\nimport {ClaimForVsanDirectComponent} from \"@component/diskmgmt/claim-for-vsan-direct.component\";\nimport {DisksGroupByPerspectiveComponent} from \"@component/diskmgmt/perspective/disks-group-by-perspective.component\";\nimport {TransportTypePipe} from \"../../../disk-management/views/pipes/transport-type.pipe\";\nimport {ClaimForVsanMaxComponent} from \"@component/diskmgmt/claim-for-vsan-max.component\";\nimport {ClaimModeToggleComponent} from \"@component/diskmgmt/claim-mode-toggle.component\";\nimport {AutoClaimDisksComponent} from \"@component/diskmgmt/auto-claim-disks.component\";\nimport {SelectDisksComponent} from \"@component/diskmgmt/select-disks.component\";\n\n@NgModule({\n   imports: [\n      CommonModule,\n      FormsModule,\n      ClarityModule,\n      ValidationModule,\n      CommonPipeModule,\n      VsanCommonModule,\n      VsanChartModule,\n   ],\n   declarations: [\n      CreateDiskGroupComponent,\n      ClaimDisksComponent,\n      ClaimModeToggleComponent,\n      AutoClaimDisksComponent,\n      DisksCapacityChartComponent,\n      ValidationPanelComponent,\n      ClaimForVsanComponent,\n      ClaimForPmemComponent,\n      ClaimForVsanMaxComponent,\n      ClaimForVsanDirectComponent,\n      DisksGroupByPerspectiveComponent,\n      TransportTypePipe,\n      SelectDisksComponent,\n   ],\n   exports: [\n      CreateDiskGroupComponent,\n      ClaimDisksComponent,\n      AutoClaimDisksComponent,\n      ClaimModeToggleComponent,\n      ClaimForPmemComponent,\n      ClaimForVsanComponent,\n      ClaimForVsanDirectComponent,\n      DisksGroupByPerspectiveComponent,\n      TransportTypePipe,\n      SelectDisksComponent,\n   ],\n   providers: [\n      SpaceEfficiencyService,\n      VsanCapacityService,\n      DisksPropertyRetriever,\n   ],\n})\nexport class DiskmgmtCommonModule {\n}\n","/* Copyright 2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Injectable} from \"@angular/core\";\nimport {ResultItem} from \"@service/client/core/query.data\";\nimport {ClusterComputeResource, HostStorageSystem, HostSystem} from \"@service/client/dataservice/data-service-property\";\nimport {DataServiceQueryResult} from \"@service/client/dataservice/data-service.data\";\nimport {DataServiceClient} from \"@service/client/dataservice/data-service.service\";\nimport {VpxdModelFactory} from \"@service/client/vpxd/vpxd-model-factory.service\";\nimport {DataServiceResult} from \"@service/data-access.service\";\nimport {ManagedObject, ManagedObjectUtils} from \"@service/managed-object\";\n\n// TODO (REPA) After switch to remote plugin:\n//  * move to a proper service\n//  * create proper UI models for all the data being retrieved. Currently we cannot do so because the data in the local\n//  plugin is retrieved from H5C provider which returns its own model.\n@Injectable()\nexport class DisksPropertyRetriever {\n   private static readonly ICON_ID: string = \"primaryIconId\";\n\n   private static readonly MO_PREFIX_HOST: string = \"host\";\n   private static readonly MO_PREFIX_STORAGE_SYSTEM: string = \"storageSystem\";\n\n   constructor(private dataService: DataServiceClient,\n         private vpxdModelFactory: VpxdModelFactory) {\n   }\n\n   async getPropertiesForHosts(clusterRef: ManagedObject): Promise<DataServiceResult[]> {\n      const hostRefs: ManagedObject[] = await this.dataService\n            .getProperty(ClusterComputeResource.host.id, clusterRef);\n      const storageSystemRefs: ManagedObject[] = hostRefs.map(this.hostRefToStorateSystemRef);\n\n      let hostPropertiesResult: DataServiceResult[];\n      let storageDevicesPropertiesResult: DataServiceResult[];\n      [hostPropertiesResult, storageDevicesPropertiesResult] = await Promise.all([\n         this.getHostProperties(hostRefs),\n         this.getStorageDeviceProperties(storageSystemRefs),\n      ]);\n      return [...hostPropertiesResult, ...storageDevicesPropertiesResult];\n   }\n\n   async getStorageDevicePropertiesByHost(hostRef: ManagedObject): Promise<DataServiceResult[]> {\n      return this.getStorageDeviceProperties([this.hostRefToStorateSystemRef(hostRef)]);\n   }\n\n   static readonly PROP_VSAN_STORAGE_ADAPTER_DEVICES: string = \"vsanStorageAdapterDevices\";\n\n   private async getStorageDeviceProperties(storageSystemRefs: ManagedObject[]): Promise<DataServiceResult[]> {\n      const storageDevices: DataServiceQueryResult = await this.dataService\n            .select(HostStorageSystem.storageDeviceInfo.hostBusAdapter,\n                  HostStorageSystem.storageDeviceInfo.scsiLun,\n                  HostStorageSystem.storageDeviceInfo.plugStoreTopology.path,\n                  HostStorageSystem.storageDeviceInfo.plugStoreTopology.adapter,\n                  HostStorageSystem.storageDeviceInfo.plugStoreTopology.target,\n                  HostStorageSystem.storageDeviceInfo.plugStoreTopology.device)\n            .fromMoRef(...storageSystemRefs)\n            .execute();\n      return storageDevices.resultItems.map((ri: ResultItem) => {\n         const adapters: any[] = ri.get(HostStorageSystem.storageDeviceInfo.hostBusAdapter);\n         const luns: any[] = ri.get(HostStorageSystem.storageDeviceInfo.scsiLun);\n\n         // The PlugStoreTopology property contains the mapping between LUNs and other objects\n         // https://opengrok.eng.vmware.com/source/xref/main.perforce.1666/bora/vim/vmodl/vim/host/PlugStoreTopology.java#15\n         const topologyDevices: any[] = ri.get(HostStorageSystem.storageDeviceInfo.plugStoreTopology.device);\n         const topologyAdapters: any[] = ri.get(HostStorageSystem.storageDeviceInfo.plugStoreTopology.adapter);\n         const topologyPaths: any[] = ri.get(HostStorageSystem.storageDeviceInfo.plugStoreTopology.path);\n         const topologyTargets: any[] = ri.get(HostStorageSystem.storageDeviceInfo.plugStoreTopology.target);\n\n         // LUN-to-TRANSPORT mapping\n         // topologyDevice.path[] -> topologyPath.key\n         // topologyPath.target -> topologyTargets.key\n         // topologyTarget.transport\n\n         // LUN-to-ADAPTER mapping\n         // lun.key -> topologyDevices.lun\n         // topologyDevices.key -> topologyPath.device\n         // topologyPath.adapter -> topologyAdapters.key\n         // topologyAdapters.adapter -> adapter.key\n\n         const storageDeviceData: any[] = luns.map(lun => {\n            const topologyDevice: any = topologyDevices.find(td => td.lun === lun.key);\n            const topologyPath: any = topologyPaths.find(p => p.device === topologyDevice.key);\n            const topologyAdapter: any = topologyAdapters.find(ta => ta.key === topologyPath.adapter);\n            const adapter: any = adapters.find(a => a.key === topologyAdapter.adapter);\n            const topologyTarget: any = topologyTargets.find(t => t.key === topologyPath.target);\n\n            // This model is defined in the H5C code base. We need to stick to it as long as we have the local\n            // plugin part supported.\n            return {\n               underlyingLun: lun,\n               transport: this.getTransport(topologyTarget?.transport),\n               adapter: adapter.device,\n            };\n         });\n\n         const storageSystemRef: ManagedObject = ri.resourceObject;\n         const hostRef: ManagedObject = this.storageSystemRefToHostRef(storageSystemRef);\n         return this.createDataServiceResult(hostRef, DisksPropertyRetriever.PROP_VSAN_STORAGE_ADAPTER_DEVICES, storageDeviceData);\n      });\n   }\n\n   private async getHostProperties(hostRefs: ManagedObject[]): Promise<DataServiceResult[]> {\n      const hostProps: DataServiceQueryResult = await this.dataService\n            .select(HostSystem.name, HostSystem.config.product.version)\n            .fromMoRef(...hostRefs)\n            .execute();\n      const result: DataServiceResult[] = [];\n      hostProps.resultItems.forEach((ri: ResultItem) => {\n         const hostRef: ManagedObject = ri.resourceObject;\n         result.push(this.createDataServiceResult(hostRef, DisksPropertyRetriever.ICON_ID, ManagedObjectUtils.getObjectTypeIcon(hostRef)));\n         ri.propertyValues.forEach(((value: any, key: string) => {\n            result.push(this.createDataServiceResult(hostRef, key, value));\n         }));\n      });\n      return result;\n   }\n\n   private storageSystemRefToHostRef(storageSystemRef: ManagedObject): ManagedObject {\n      return ManagedObject.create(HostSystem.type,\n            storageSystemRef.value.replace(DisksPropertyRetriever.MO_PREFIX_STORAGE_SYSTEM, DisksPropertyRetriever.MO_PREFIX_HOST),\n            storageSystemRef.serverGuid);\n   }\n\n   private hostRefToStorateSystemRef(mo: ManagedObject): ManagedObject {\n      return ManagedObject.create(HostStorageSystem.type,\n            mo.value.replace(DisksPropertyRetriever.MO_PREFIX_HOST, DisksPropertyRetriever.MO_PREFIX_STORAGE_SYSTEM),\n            mo.serverGuid);\n   }\n\n   private createDataServiceResult(obj: ManagedObject, propertyName: string, value: any): DataServiceResult {\n      return {\n         resourceObject: obj,\n         value: value,\n         propertyName: propertyName,\n      } as DataServiceResult;\n   }\n\n   private getTransport(transport: any): string[] {\n      if (!transport) {\n         return [];\n      }\n\n      // https://opengrok.eng.vmware.com/source/xref/vim-clients.h5c-main.perforce.1666/h5c-main/applications/vsphere-client/server/modules-api/src/main/java/com/vmware/vsphere/client/storage/adapters/StorageDeviceTransport.java#37\n      const clazz: string = this.vpxdModelFactory.getObjectType(transport);\n      switch (clazz) {\n         case TransportType.HostFibreChannelOverEthernetTargetTransport:\n            return [\"FCOETRANSPORT\"];\n         case TransportType.HostFibreChannelTargetTransport:\n            return [\"FCTRANSPORT\"];\n         case TransportType.HostInternetScsiTargetTransport:\n            return [\"ISCSITRANSPORT\"];\n         case TransportType.HostParallelScsiTargetTransport:\n            return [\"PARALLELTRANSPORT\"];\n         case TransportType.HostBlockAdapterTargetTransport:\n            return [\"BLOCKTRANSPORT\"];\n         case TransportType.HostSerialAttachedTargetTransport:\n            return [\"SASTRANSPORT\"];\n         case TransportType.HostPcieTargetTransport:\n            return [\"PCIETRANSPORT\"];\n         case TransportType.HostRdmaTargetTransport:\n            return [\"RDMATRANSPORT\"];\n         case TransportType.HostTcpTargetTransport:\n            return [\"TCPTRANSPORT\"];\n         default:\n            return [];\n      }\n   }\n}\n\nenum TransportType {\n   HostFibreChannelOverEthernetTargetTransport = \"HostFibreChannelOverEthernetTargetTransport\",\n   HostFibreChannelTargetTransport = \"HostFibreChannelTargetTransport\",\n   HostInternetScsiTargetTransport = \"HostInternetScsiTargetTransport\",\n   HostParallelScsiTargetTransport = \"HostParallelScsiTargetTransport\",\n   HostBlockAdapterTargetTransport = \"HostBlockAdapterTargetTransport\",\n   HostSerialAttachedTargetTransport = \"HostSerialAttachedTargetTransport\",\n   HostPcieTargetTransport = \"HostPcieTargetTransport\",\n   HostRdmaTargetTransport = \"HostRdmaTargetTransport\",\n   HostTcpTargetTransport = \"HostTcpTargetTransport\",\n}\n\n\n"]}