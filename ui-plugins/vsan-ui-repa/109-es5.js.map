{"version":3,"sources":["webpack:///src/app/vsan/common/directive/clr-button-group/clr-button-base.directive.ts","webpack:///src/app/vsan/file-services/configure-wizard/file-services-network-page.component.ts","webpack:///src/app/vsan/file-services/file-service-util.ts","webpack:///src/app/vsan/file-services/configure-wizard/file-services-file-analytics-page.component.ts","webpack:///src/app/vsan/file-services/configure-wizard/file-services-ovf-page.component.ts","webpack:///src/app/vsan/common/service/navigation/model/ask-vmware-id.ts","webpack:///src/app/vsan/file-services/configure-wizard/file-services-network-page.html","webpack:///src/app/vsan/file-services/configure-wizard/file-services-review-page.html","webpack:///src/app/vsan/file-services/configure-wizard/file-services-introduction-page.component.ts","webpack:///src/app/vsan/file-services/configure-wizard/file-services-ovf-page.html","webpack:///src/app/vsan/file-services/configure-wizard/file-services-domain-page.html","webpack:///src/app/vsan/file-services/configure-wizard/file-services-configure-wizard.component.ts.FileServicesConfigureWizardComponent.html","webpack:///src/app/vsan/file-services/configure-wizard/domain-validation.service.ts","webpack:///src/app/vsan/file-services/configure-wizard/file-services-ip-pool-page.component.ts","webpack:///src/app/vsan/file-services/configure-wizard/file-services-ip-pool-page.html","webpack:///src/app/vsan/file-services/configure-wizard/file-services-wizard.module.ts","webpack:///src/app/vsan/file-services/configure-wizard/file-services-configure-wizard.component.ts","webpack:///src/app/vsan/file-services/configure-wizard/file-services-domain-page.component.ts","webpack:///src/app/vsan/file-services/configure-wizard/file-services-file-analytics-page.html","webpack:///src/app/vsan/common/directive/external-link/external-link.directive.ts","webpack:///src/app/vsan/file-services/configure-wizard/ip.data.ts","webpack:///src/app/vsan/common/directive/icon-title/icon-title.directive.ts","webpack:///src/app/vsan/file-services/configure-wizard/file-services-introduction-page.html","webpack:///src/app/vsan/file-services/configure-wizard/file-services-review-page.component.ts"],"names":["ClrButtonBaseDirective","clrButton","name","Math","random","toString","directiveHolder","directives","push","FileServicesNetworkPageComponent","dataService","fileService","networkInventoryService","validationService","formBuilder","ipParser","refWatcher","DOCKER_INTERNAL_IP_START","INVALID_GATEWAY_VALIDATION","showNetworkBrowser","displaySubnetConflictWarning","numberOfHosts","Icon","IP","ignoreSubnetConflict","gatewayValidator","control","gateway","value","getGatewayValidationResult","protocolList","v4","v6","objRefs","clusterRef","preselectedNode","fileServiceConfig","network","networkName","protocol","domainConfig","ipType","V6","getPrecheckResult","initFormGroup","pageControls","setBusyState","getNetworkName","addValidationErrors","clearBusyState","precheckResult","event","node","data","isLeafNode","nodeRef","selectedNetworkNode","invalidate","rebuildToc","ipv6Supported","isIpv4","getString","parse","toVsanIpVersion","clrForm","markAsTouched","gatewayControl","networkForm","valid","validationError","validateNetwork","nextButtonIsDisabled","getNetworkForm","watchSubscriptionRef","valueChanges","subscribe","maskControl","mask","gatewayAddress","dockerInternalSubnetConflictCheck","prefixLengthControl","prefixLength","ipv6GatewayAddress","group","maskValidator","prefixLengthValidator","startsWith","get","touched","errors","validator","isIpv4AddressValid","isIpv6AddressValid","FileServiceUtil","site","availableDomains","PREFERRED_DOMAIN","preferredDomain","find","domain","isPreferred","label","NON_PREFERRED_DOMAIN","secondaryDomain","isHost","vdfsConfig","config","ipSettings","map","ipSetting","ip","getIpLabel","fqdn","dnsName","affinitySite","getAffinitySiteLabel","affinityLocation","isDefault","address","SHARE_NAME_PROPERTY","SHARE_UUID_PROPERTY","SHARE_FILE_INDEXING_ENABLED_PROPERTY","FileServicesFileAnalyticsPageComponent","FileServicesOvfPageComponent","healthService","OvfUploadStatus","registerOvfTask","result","Promise","resolve","reject","then","task","downloadTask","error","toggleNextButton","ovfProps","externalProxyData","all","getPublicOvfProps","getExternalProxySettings","publicOvfProps","isInternetAccessEnabled","enableInternetAccess","ovfSettings","getRecommendedOvfOption","displayUseExistingOption","isUseExisting","existingOvfVersion","ovfInstalled","fsvmVersion","hostVersion","ovfVersion","url","MANUAL","EXISTING","isEmpty","DOWNLOAD","isManualDownload","validateAutoDownloadOvfFiles","validationResult","ovfFileSelector","validate","monitorUploadOvfFiles","currentOvfStatus","UPLOAD_ERROR","UPLOAD_CANCELLED","UPLOAD_COMPLETED","isSecureUrlNotTrusted","startDownloadOvfFiles","downloadPublicOvf","length","startUploadOvfFiles","accept","intervalClock","window","setInterval","START_UPLOAD","clearInterval","enabled","AskVmwareId","FileServicesIntroductionPageComponent","DomainValidationService","OU_SEPARATOR","ORGANIZATIONAL_UNIT_HIERARCHICAL_SYMBOL","ORGANIZATIONAL_UNIT_INPUT_MAXIMUM_LENGTH","ORGANIZATIONAL_UNIT_VALUE_MAXIMUM_LENGTH","DOMAIN_NAME_MAXIMUM_LENGTH","OU_PREFIX","INVALID_NAME_VALIDATION","INVALID_DNS_VALIDATION","INVALID_SUFFIX_VALIDATION","INVALID_AD_DOMAIN_VALIDATION","INVALID_OU_VALIDATION","INVALID_USERNAME_VALIDATION","INVALID_MASK_VALIDATION","INVALID_PREFIX_LENGTH_VALIDATION","domainNameValidator","domainName","getDomainNameValidationResult","dnsServerValidator","dnsServers","getDnsServerValidationResult","dnsSuffixValidator","dnsSuffixes","getDnsSuffixValiationResult","adDomainValidator","adDomain","getAdDomainValidationResult","ouValidator","ou","getOuValidationResult","usernameValidator","username","getUsernameValidationResult","getMaskValidationResult","getPrefixLengthValidationResult","INVALID_DOMAIN_NAME_START","test","INVALID_DOMAIN_NAME_CHARS","dnsServerStr","split","DNS_SEPARATOR","invalidDnsServers","filter","dns","suffixes","suffix","trim","invalidSuffixes","validateSingleSuffix","VALID_AD_CHARS","endsWith","includes","names","some","INVALID_OU_CHARS","parts","part","toLowerCase","ouPart","ouValue","replace","suffixValidator","isSubnetMaskValid","FileServicesIpPoolPageComponent","networkService","MAX_CONTAINER_NUMBER_EARLY","MAX_CONTAINER_NUMBER_EXTEND","MAX_CONTAINER_NUMBER_LARGE_SCALE","AFFINITY_SITE_SUPPORTED_FS_VERSION","ISDEFAULT_ELEMENT_NAME","IPADDRESS_ELEMENT_NAME","DNSNAME_ELEMENT_NAME","AFFINITY_ELEMENT_NAME","REQUIRED_VALIDATION","IPV4_VALIDATION","IPV6_VALIDATION","IP_INVALID_VALIDATION","IP_DUPLICATE_VALIDATION","IP_SAME_NETWORK_VALIDATION","DNS_INVALID_VALIDATION","DNS_DUPLICATE_VALIDATION","DNS_AD_VALIATION","affinitySites","NONE","originalNumOfIpSettings","isDnsNameWarningShown","isAffinitySiteWarningShown","generateIpAddresses","startingIP","ipSettingsFormGroups","validateAddress","warn","ipv4RequestSpec","Factory","create","getConsequentHostAddresses","item","index","forEach","setValue","shift","canRemoveIp","ipSettingsGroup","primaryIpControl","ipSettingsForm","capabilityData","isIpRemovalInEditModeSupported","isRecreateDomain","isEdit","isEditIpAllowed","editPrimaryIpSupported","isChangePrimaryIpAllowed","isCreatingNewDomain","ipValidator","isIpValid","isUniqueIp","isIpNetworkValid","dnsNameValidator","isUniqueFqdn","isValidDnsName","maxNumberOfContainers","i","emptyIpSettings","concat","contextObject","originalDomainName","preflightCheckResult","affinitySiteSupported","isAffinitySiteSupported","activeDirectorySupported","advancedPreflightCheckSupported","isVsanStretchedCluster","newItem","ipSettingsFormControl","createIpSettingGroup","removeAt","splice","domainConfigIssue","err","hasInvalidIpAddress","clearValidationErrors","getDnsNames","ipAddresses","dnsNames","every","substr","isLookupDnsNameEnabled","formGroup","ovfOption","fileServiceVersion","compare","min","maxSupportedNumberOfContainers","largeScaleClusterSupported","primary","findIndex","groupControl","values","indexOf","ipAddress","count","isSameIpv4Subnet","adConfig","DNS_NAME_REGEX","fields","required","controls","invalid","fileServicesRoutes","path","component","FileServicesWizardModule","FileServicesConfigureWizardComponent","DEFAULT_PREFIX_LENGTH","services","context","taskProperty","modalContext","getModalContext","hasLastestOvf","getDownloadingOvf","downloadingOvf","createInitialContext","initWizardPages","getRegisteredOvfs","ovfs","ovf","pageSet","title","isReEnable","setAccessibilityTitle","networkExists","isFileAnalyticsSupported","pages","ovfDownloadTask","createEmptyDomainConfig","createEmptyActiveDirectoryConfig","lastDomainConfigErrors","fileSharesCount","hasAdConfigured","V4","networkRef","getProperty","FileServicesDomainPageComponent","fileServiceConfigService","AD_SUPPORTED_FS_VERSION","DOMAIN_NAME_ELEMENT_NAME","DNS_SERVERS_ELEMENT_NAME","DNS_SUFFIX_ELEMENT_NAME","ENABLE_AD_ELEMENT_NAME","AD_DOMAIN_NAME_ELEMENT_NAME","OU_ELEMENT_NAME","AD_USERNAME_ELEMENT_NAME","AD_PASSWORD_ELEMENT_NAME","isAdCredentialChanged","adDomainSuffixValidator","activeDirectoryEnabled","_activeDirectoryEnabled","val","adConfigBackup","resetAdInputValues","dnsServerAvailable","isNfsv3ProtocolSupported","allowEditActiveDirectory","loading","isActiveDirectorySupported","addPasswordValidator","PASSWORD_PLACEHOLDER","domainForm","formSettings","disabled","organizationalUnit","maxLength","password","bindControlValues","getAdDomainSuffixCheckResult","adDomainNameControl","disable","organizationalUnitControl","adUsernameControl","adPasswordControl","setValidators","enable","whatever","domainControl","dnsControl","dnsSuffixControl","enableAdCheckboxControl","checked","toggleAdValidation","adCredentialChanged","ExternalLinkDirective","el","resolver","renderer","navigationService","ASK_VMWARE_DEFAULT_TEXT_KEY","LEARN_MORE_DEFAULT_TEXT_KEY","CONTAINER_CLASS","NAVIGATION_EVENT_TYPE","LEAD_TO_NOWHERE_URL","HTML_ELEMENT_SPAN_NAME","HTML_ELEMENT_ICON_NAME","HTML_ELEMENT_ROLE_ATTR_NAME","HTML_ELEMENT_ROLE_ATTR_VALUE","ICON_SHAPE_ATTR_NAME","ICON_SHAPE_ATTR_VALUE","ICON_SIZE_ATTR_NAME","ICON_SIZE_ATTR_VALUE","ICON_CLASS_ATTR_NAME","ICON_CLASS_ATTR_VALUE","ICON_TITLE_ATTR_NAME","KB_URL","element","nativeElement","isLink","isButton","prepareExternalLink","button","addClass","setText","decorateLink","addLinkRole","initializeNavigationHandler","HTMLButtonElement","HTMLAnchorElement","span","createElement","innerText","getText","appendChild","icon","setAttribute","anchorText","key","linkElement","href","style","display","addEventListener","helpId","askVMware","articleId","navigateToAddress","_value","keyToLabel","vsanIpType","matcher","IconTitleDirective","SHAPE_ATTRIBUTE","TITLE_ATTRIBUTE","getAttribute","iconTitle","shape","getDefaultVsanIconTitle","FileServicesReviewPage","taskService","taskMonitorService","updateDownloadTaskStatus","getInfo","taskInfoData","downloadTaskInfoData","progress","toggleFinishButton","status","PENDING","setDownloadResultInfo","RUNNING","SUCCESS","onOvfDownloadComplete","ERROR","getBooleanPropertyLabel","property","isAdvancedPreflightCheckAllowed","metadata","showNtpWarning","isRemovingActiveDirectory","isUploadLocalOvf","timer","getAwaitResult","checkOvfFiles","message","performPreflightCheck","queryNetworkName","selectedNetwork","warnings","warning","getDomainConfigForCheck","domainConfigWarning","ntpConfigWarning","JSON","stringify","downloadTaskIcon","downloadTaskMessage"],"mappings":"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","file":"109-es5.js","sourcesContent":["/* Copyright 2020 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {ClrButton} from \"@clr/angular\";\n\n/**\n * Use this class as base class for directive, which handles clr-button. It will help to link the rendered button with\n * the clr-button on which the directive is applied.\n */\nexport abstract class ClrButtonBaseDirective {\n\n   constructor(private clrButton: ClrButton) {\n      if (!clrButton) {\n         return;\n      }\n      // name should be set, if not provided in template - generate one. ClrButtom#name is used to generate the name\n      // attribute of the markup button. Later the name is used to match the generated markup with the directive.\n      if (!clrButton.name) {\n         clrButton.name = Math.random().toString();\n      }\n\n      const directiveHolder: DirectiveHolder = (clrButton as DirectiveHolder);\n      directiveHolder.directives = directiveHolder.directives || [];\n      directiveHolder.directives.push(this);\n   }\n\n   /**\n    * This method will be called when the actual html button is rendered.\n    */\n   abstract resolveButton(clrButton: ClrButton, button: HTMLButtonElement, index: number);\n}\n\nexport interface DirectiveHolder extends ClrButton {\n   directives: ClrButtonBaseDirective[];\n}","/* Copyright 2017-2022 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, OnInit, ViewChild} from \"@angular/core\";\nimport {AbstractControl, FormBuilder, FormControl, FormGroup, ValidationErrors, ValidatorFn} from \"@angular/forms\";\nimport {ClrForm} from \"@clr/angular\";\nimport {InventorySelectionEvent} from \"@component/inventory/inventory-node\";\nimport {InputProperty, OutputProperty, WizardPage} from \"@component/wizard/flow-metadata\";\nimport {OnValidate, PageControls} from \"@component/wizard/flow-wizard.component\";\nimport {PageItem} from \"@component/wizard/page-item\";\nimport {InventoryEntryData} from \"@generated/inventory-entry-data\";\nimport {NetworkInventoryService} from \"@generated/network-inventory-service\";\nimport {VsanCapabilityData} from \"@generated/vsan-capability-data\";\nimport {VsanFileServiceCommonConfig} from \"@generated/vsan-file-service-common-config\";\nimport {VsanFileServiceConfigService} from \"@generated/vsan-file-service-config-service\";\nimport {VsanFileServiceIpType} from \"@generated/vsan-file-service-ip-type\";\nimport {VsanFileServicePrecheckResult} from \"@generated/vsan-file-service-precheck-result\";\nimport {DataServiceClient} from \"@service/client/dataservice/data-service.service\";\nimport {Loader} from \"@service/flow/loader.decorator\";\nimport {LoadingIndicator} from \"@service/flow/loading-indicator.decorator\";\nimport {IpParserService} from \"@service/ip-parser.service\";\nimport {ManagedObject} from \"@service/managed-object\";\nimport {Icon} from \"@util/icon\";\nimport {ReferenceWatcher} from \"@util/reference-watcher\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {DomainValidationService} from \"./domain-validation.service\";\nimport {IP} from \"./ip.data\";\n\n@WizardPage(\n      VsanUiUtils.getString(\"vsan.services.fileservices.wizard.ipPool.title\"),\n)\n@Component({\n   templateUrl: \"file-services-network-page.html\",\n   styleUrls: [\"file-services-network-page.scss\"],\n})\nexport class FileServicesNetworkPageComponent implements OnValidate, OnInit {\n   private readonly DOCKER_INTERNAL_IP_START: string = \"172.17.\";\n   readonly INVALID_GATEWAY_VALIDATION: string = \"invalidGateway\";\n\n   @InputProperty()\n   @OutputProperty()\n   fileServiceConfig: VsanFileServiceCommonConfig;\n\n   @InputProperty()\n   clusterRef: ManagedObject;\n\n   @InputProperty()\n   isEdit: boolean; // isEdit = true, when the user started the Edit workflow\n\n   @InputProperty()\n   pageControls: PageControls;\n\n   @InputProperty()\n   capabilityData: VsanCapabilityData;\n\n   @OutputProperty()\n   networkName: string;\n\n   @OutputProperty()\n   protocol: IP;\n\n   @ViewChild(ClrForm)\n   clrForm: ClrForm;\n\n   @LoadingIndicator()\n   loading: boolean;\n\n   objRefs: ManagedObject[];\n   preselectedNode: ManagedObject;\n   protocolList: IP[];\n   showNetworkBrowser: boolean = false;\n   displaySubnetConflictWarning: boolean = false;\n   selectedNetworkNode: InventoryEntryData;\n   numberOfHosts: number = 0;\n   Icon: typeof Icon = Icon;\n   IP: typeof IP = IP;\n   networkForm: FormGroup;\n\n   private ignoreSubnetConflict: boolean = false;\n   private precheckResult: VsanFileServicePrecheckResult;\n\n   constructor(private dataService: DataServiceClient,\n         private fileService: VsanFileServiceConfigService,\n         public networkInventoryService: NetworkInventoryService,\n         public validationService: DomainValidationService,\n         private formBuilder: FormBuilder,\n         private ipParser: IpParserService,\n         private refWatcher: ReferenceWatcher) {\n   }\n\n   async ngOnInit(): Promise<void> {\n      this.protocolList = [IP.v4, IP.v6];\n      this.objRefs = [this.clusterRef];\n      this.preselectedNode = this.fileServiceConfig.network;\n      this.networkName = \"\";\n      this.protocol = this.fileServiceConfig.domainConfig.ipType === VsanFileServiceIpType.V6 ? IP.v6 : IP.v4;\n      await this.getPrecheckResult();\n      this.initFormGroup();\n      if (!this.preselectedNode) {\n         return;\n      }\n      try {\n         this.pageControls.setBusyState();\n         this.networkName = await this.networkInventoryService.getNetworkName(this.preselectedNode);\n         // empty network name means the preselected network was removed,\n         // so we need to clear the network setting, so user can select a new one.\n         if (!this.networkName) {\n            this.fileServiceConfig.network = null;\n         }\n      } catch (error) {\n         this.pageControls.addValidationErrors([error]);\n      } finally {\n         this.pageControls.clearBusyState();\n      }\n   }\n\n   @Loader()\n   async getPrecheckResult(): Promise<void> {\n      this.pageControls.setBusyState();\n      this.precheckResult = await this.fileService.getPrecheckResult(this.clusterRef,\n            this.fileServiceConfig.domainConfig.name\n                  ? this.fileServiceConfig.domainConfig\n                  : null,\n            false);\n      this.pageControls.clearBusyState();\n   }\n\n   selectNode(event: InventorySelectionEvent): void {\n      if (event.node.data.isLeafNode) {\n         this.fileServiceConfig.network = event.node.data.nodeRef;\n         this.selectedNetworkNode = event.node.data;\n         this.networkName = this.selectedNetworkNode ? this.selectedNetworkNode.name : \"\";\n         this.showNetworkBrowser = false;\n         this.invalidate();\n      }\n   }\n\n   invalidate(): void {\n      this.pageControls.rebuildToc();\n   }\n\n   ipV6Supported(): boolean {\n      return this.precheckResult?.ipv6Supported;\n   }\n\n   getIpProtocolVersionText(protocol: IP): string {\n      return this.isIpv4(protocol)\n            ? VsanUiUtils.getString(\"vsan.services.fileservices.wizard.ipPool.input.vlan.protocol.ipv4\")\n            : VsanUiUtils.getString(\"vsan.services.fileservices.wizard.ipPool.input.vlan.protocol.ipv6\");\n   }\n\n   changeProtocol(value: string | IP): void {\n      if (typeof (value) === \"string\") {\n         this.protocol = IP.parse(value as string);\n      } else {\n         this.protocol = value as IP;\n      }\n\n      this.fileServiceConfig.domainConfig.ipType = this.protocol.toVsanIpVersion();\n      this.initFormGroup();\n      this.invalidate();\n   }\n\n   inlineValidate(): boolean {\n      this.clrForm.markAsTouched();\n      // Only for ipv4 because it's not a clr-input-container, and cannot be covered in the above line.\n      // If ipv6 the ipv6 gateway input is a standard clr-input-container element.\n      if (this.protocol === IP.v4) {\n         this.gatewayControl.markAsTouched();\n      }\n      return this.networkForm.valid;\n   }\n\n   validate(): string[] {\n      const validationError: string = this.validateNetwork();\n      return validationError ? [validationError] : null;\n   }\n\n   onSubmitConflictIgnored(): void {\n      this.ignoreSubnetConflict = true;\n      this.displaySubnetConflictWarning = false;\n      (this.pageControls as PageItem).nextButtonIsDisabled = false;\n   }\n\n   private validateNetwork(): string {\n      if (!this.fileServiceConfig.network) {\n         return VsanUiUtils.getString(\"vsan.services.fileservices.wizard.ipPool.validation.network.empty\");\n      }\n\n      return null;\n   }\n\n   private initFormGroup(): void {\n      this.networkForm = this.getNetworkForm();\n      this.refWatcher.watchSubscriptionRef(this.networkForm.valueChanges.subscribe(() => this.invalidate()));\n      if (this.isIpv4()) {\n         this.refWatcher.watchSubscriptionRef(\n               this.maskControl.valueChanges.subscribe(value => this.fileServiceConfig.domainConfig.mask = value));\n         this.refWatcher.watchSubscriptionRef(\n               this.gatewayControl.valueChanges.subscribe(value => {\n                  this.fileServiceConfig.domainConfig.gatewayAddress = value;\n                  this.dockerInternalSubnetConflictCheck();\n               }));\n      } else {\n         this.refWatcher.watchSubscriptionRef(\n               this.prefixLengthControl.valueChanges\n                     .subscribe(value => this.fileServiceConfig.domainConfig.prefixLength = value));\n         this.refWatcher.watchSubscriptionRef(\n               this.gatewayControl.valueChanges.subscribe(value =>\n                     this.fileServiceConfig.domainConfig.ipv6GatewayAddress = value,\n               ));\n      }\n   }\n\n   private getNetworkForm(): FormGroup {\n      return this.isIpv4()\n            ? this.formBuilder.group({\n               protocol: new FormControl(this.fileServiceConfig.domainConfig.ipType),\n               gateway: new FormControl(\n                     this.fileServiceConfig.domainConfig.gatewayAddress, this.gatewayValidator),\n               mask: new FormControl(this.fileServiceConfig.domainConfig.mask, this.validationService.maskValidator),\n            })\n            : this.formBuilder.group({\n               protocol: new FormControl(this.fileServiceConfig.domainConfig.ipType),\n               gateway: new FormControl(\n                     this.fileServiceConfig.domainConfig.ipv6GatewayAddress, this.gatewayValidator),\n               prefixLength: new FormControl(\n                     this.fileServiceConfig.domainConfig.prefixLength,\n                     this.validationService.prefixLengthValidator),\n            });\n   }\n\n   /**\n    * Check if the configured network gateway and subnet mask has overlap with the docker internal network\n    */\n   private dockerInternalSubnetConflictCheck(): void {\n      // The docker internal network is 172.17.0.0/16 (172.17.0.1 to 172.17.255.255), which is hard-coded in docker.\n      // The easiest way to detect conflict is we just compare the first 2 octets.\n      if (!this.ignoreSubnetConflict\n            && this.fileServiceConfig.domainConfig.gatewayAddress.startsWith(this.DOCKER_INTERNAL_IP_START)) {\n         this.displaySubnetConflictWarning = true;\n         (this.pageControls as PageItem).nextButtonIsDisabled = true;\n         return;\n      }\n      this.displaySubnetConflictWarning = false;\n      (this.pageControls as PageItem).nextButtonIsDisabled = false;\n   }\n\n   private isIpv4(protocol?: IP): boolean {\n      return (protocol || this.protocol) === IP.v4;\n   }\n\n   get networkNameText(): string {\n      if (this.networkName) {\n         return this.networkName;\n      }\n      return VsanUiUtils.getString(\"vsan.common.select\");\n   }\n\n   get maskControl(): FormControl {\n      return this.networkForm.get(\"mask\") as FormControl;\n   }\n\n   get prefixLengthControl(): FormControl {\n      return this.networkForm.get(\"prefixLength\") as FormControl;\n   }\n\n   get gatewayControl(): FormControl {\n      return this.networkForm.get(\"gateway\") as FormControl;\n   }\n\n   get showGatewayControlError(): boolean {\n      return this.gatewayControl.touched && !!this.gatewayControl.errors;\n   }\n\n   private gatewayValidator: ValidatorFn = (control: AbstractControl): ValidationErrors => {\n      const gateway: string = control.value;\n      if (this.getGatewayValidationResult(gateway)) {\n         return {[this.INVALID_GATEWAY_VALIDATION]: {value: gateway}};\n      }\n      return null;\n   };\n\n   getGatewayValidationResult(gateway: string): string {\n      if (!gateway) {\n         return VsanUiUtils.getString(\"vsan.services.fileservices.wizard.ipPool.validation.gateway.empty\");\n      }\n      const validator: (address: string) => boolean = this.protocol === IP.v4\n            ? this.ipParser.isIpv4AddressValid\n            : this.ipParser.isIpv6AddressValid;\n      if (!validator(gateway)) {\n         return VsanUiUtils.getString(\"vsan.services.fileservices.wizard.ipPool.validation.gateway.invalid\");\n      }\n   }\n}\n","/* Copyright 2020-2022 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {AffinitySiteLocation} from \"@generated/affinity-site-location\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {DomainOrHostData} from \"@generated/domain-or-host-data\";\nimport {IpSettingData} from \"@component/configurations/file-service-configuration.component\";\nimport {VsanFileServiceHostIpSettings} from \"@generated/vsan-file-service-host-ip-settings\";\nimport {VsanVdfsConfig} from \"@generated/vsan-vdfs-config\";\n\n/**\n * Holds the common properties and methods used for file service UI\n */\nexport class FileServiceUtil {\n   // properties used for API fileServiceConfigService.getFileShareAttributes\n   static readonly SHARE_NAME_PROPERTY: string = \"sharenames\";\n   static readonly SHARE_UUID_PROPERTY: string = \"shareuuids\";\n   static readonly SHARE_FILE_INDEXING_ENABLED_PROPERTY: string = \"fileIndexingEnabled\";\n\n   static getAffinitySiteLabel(site: AffinitySiteLocation, availableDomains: DomainOrHostData[]): string {\n      switch (site) {\n         case AffinitySiteLocation.PREFERRED_DOMAIN:\n            const preferredDomain: DomainOrHostData = availableDomains.find(domain => domain.isPreferred);\n            return preferredDomain ?\n                  VsanUiUtils.getString(\"vsan.fileservices.affinitySite.preferred.label\", preferredDomain.label):\n                  VsanUiUtils.getString(\"vsan.cluster.configure.summary.preferredFd\");\n         case AffinitySiteLocation.NON_PREFERRED_DOMAIN:\n            const secondaryDomain: DomainOrHostData =\n                  availableDomains.find(domain => !domain.isPreferred && !domain.isHost);\n            return secondaryDomain ?\n                  VsanUiUtils.getString(\"vsan.fileservices.affinitySite.nonPreferred.label\", secondaryDomain.label) :\n                  VsanUiUtils.getString(\"vsan.cluster.configure.summary.secondaryFd\");\n         default:\n            return VsanUiUtils.getString(\"vsan.fileservices.affinitySite.none.label\");\n      }\n   }\n\n   /**\n    * Returns the IP addresses from the File Service configuration in the form of a string, separated by commas.\n    */\n   static getIpSettings(vdfsConfig: VsanVdfsConfig, availableDomains: DomainOrHostData[]): IpSettingData[] {\n      if (!vdfsConfig\n            || !vdfsConfig.config\n            || !vdfsConfig.config.domainConfig\n            || !vdfsConfig.config.domainConfig.ipSettings) {\n         return [];\n      }\n\n      return vdfsConfig.config.domainConfig.ipSettings.map((ipSetting: VsanFileServiceHostIpSettings) => {\n         return {\n            ip: this.getIpLabel(ipSetting),\n            fqdn: ipSetting.dnsName,\n            affinitySite: FileServiceUtil.getAffinitySiteLabel(ipSetting.affinityLocation, availableDomains),\n         };\n      });\n   }\n\n   private static getIpLabel(ipSetting: VsanFileServiceHostIpSettings): string {\n      return ipSetting.isDefault\n            ? VsanUiUtils.getString(\"vsan.services.fileservices.primaryIp\", ipSetting.address)\n            : ipSetting.address;\n   }\n}\n","/* Copyright 2020-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component} from \"@angular/core\";\nimport {InputProperty, OutputProperty, WizardPage} from \"@component/wizard/flow-metadata\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {VsanFileServiceCommonConfig} from \"@generated/vsan-file-service-common-config\";\nimport {PageControls} from \"@component/wizard/flow-wizard.component\";\n\n@WizardPage(\n      VsanUiUtils.getString(\"vsan.services.fileservices.wizard.fileAnalyticsPage.title\"),\n)\n@Component({\n   templateUrl: \"file-services-file-analytics-page.html\",\n   styleUrls: [\"file-services-file-analytics-page.scss\"],\n})\nexport class FileServicesFileAnalyticsPageComponent {\n   @InputProperty()\n   pageControls: PageControls;\n\n   @InputProperty()\n   isFileAnalyticsRuntimeSupported: boolean;\n\n   @InputProperty()\n   @OutputProperty()\n   fileServiceConfig: VsanFileServiceCommonConfig;\n\n   @InputProperty()\n   isEdit: boolean; // isEdit = true, when the user started the Edit workflow\n\n   invalidate(): void {\n      this.pageControls.rebuildToc();\n   }\n}\n","/* Copyright 2019-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, OnInit, ViewChild} from \"@angular/core\";\nimport {InputProperty, OutputProperty, WizardPage} from \"@component/wizard/flow-metadata\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {OnValidate, PageControls} from \"@component/wizard/flow-wizard.component\";\nimport {VsanFileServiceOvfProps} from \"@generated/vsan-file-service-ovf-props\";\nimport {VsanFileServiceConfigService} from \"@generated/vsan-file-service-config-service\";\nimport {ManagedObject} from \"@service/managed-object\";\nimport {VsanHealthPropertyProvider} from \"@generated/vsan-health-property-provider\";\nimport {ExternalProxySettingsConfig} from \"@generated/external-proxy-settings-config\";\nimport {OvfOption, OvfSettings} from \"../shared/file-services-ovf-settings.data\";\nimport {FileServicesOvfSettings} from \"../shared/file-services-ovf-settings.component\";\nimport {PageItem} from \"@component/wizard/page-item\";\nimport {VsanFileServicePrecheckResult} from \"@generated/vsan-file-service-precheck-result\";\nimport {Version} from \"@util/version\";\n\n@WizardPage(\n   VsanUiUtils.getString(\"vsan.services.fileservices.wizard.ovf.title\"),\n)\n@Component({\n   templateUrl: \"file-services-ovf-page.html\",\n})\nexport class FileServicesOvfPageComponent implements OnInit, OnValidate {\n\n   @InputProperty()\n   clusterRef: ManagedObject;\n\n   @InputProperty()\n   pageControls: PageControls;\n\n   @OutputProperty()\n   downloadTask: ManagedObject;\n\n   @OutputProperty()\n   ovfSettings: OvfSettings;\n\n   @OutputProperty()\n   ovfVersion: string;\n\n   @ViewChild(\"ovfFileSelector\")\n   ovfFileSelector: FileServicesOvfSettings;\n\n   publicOvfProps: VsanFileServiceOvfProps;\n\n   isInternetAccessEnabled: boolean;\n\n   currentOvfStatus: OvfUploadStatus;\n\n   OvfUploadStatus: typeof OvfUploadStatus = OvfUploadStatus;\n\n   displayUseExistingOption: boolean;\n   existingOvfVersion: Version;\n   fsvmVersion: Version;\n   hostVersion: Version;\n\n   constructor(private fileService: VsanFileServiceConfigService, private healthService: VsanHealthPropertyProvider) {\n   }\n\n   async ngOnInit(): Promise<void> {\n      let ovfProps: VsanFileServiceOvfProps = null;\n      let externalProxyData: ExternalProxySettingsConfig = null;\n      let precheckResult: VsanFileServicePrecheckResult = null;\n      this.pageControls.setBusyState();\n      try {\n         [ovfProps, externalProxyData, precheckResult] = await Promise.all([\n            this.fileService.getPublicOvfProps(this.clusterRef),\n            this.healthService.getExternalProxySettings(this.clusterRef),\n            this.fileService.getPrecheckResult(this.clusterRef, null, false),\n         ]);\n         this.publicOvfProps = ovfProps;\n         this.isInternetAccessEnabled = externalProxyData.enableInternetAccess;\n         this.ovfSettings = new OvfSettings(this.getRecommendedOvfOption(precheckResult), this.publicOvfProps);\n         this.displayUseExistingOption = this.ovfSettings.isUseExisting;\n         this.existingOvfVersion = new Version(precheckResult.ovfInstalled);\n         this.fsvmVersion = new Version(precheckResult.fsvmVersion);\n         this.hostVersion = new Version(precheckResult.hostVersion);\n         // PR 2694459, user downloaded the OVF in the wizard and then close and reopen the wizard w/o refresh the\n         // services view, the existing OVF version is not refreshed, and it's not displayed in the review page.\n         // Here we set the ovfVersion again with the latest result.\n         this.ovfVersion = precheckResult.ovfInstalled;\n         if (!ovfProps.url && this.isInternetAccessEnabled) {\n            this.pageControls.addValidationErrors(\n                  [VsanUiUtils.getString(\"vsan.services.fileservices.wizard.ovf.nourl\")]);\n         }\n      } catch (err) {\n         this.pageControls.addValidationErrors([err]);\n         this.ovfSettings = new OvfSettings(OvfOption.MANUAL, null);\n      } finally {\n         this.pageControls.clearBusyState();\n      }\n   }\n\n   private getRecommendedOvfOption(precheckResult: VsanFileServicePrecheckResult): OvfOption {\n      if (precheckResult.ovfInstalled) {\n         return OvfOption.EXISTING;\n      }\n      if (!this.isInternetAccessEnabled || VsanUiUtils.isEmpty(this.publicOvfProps.url)) {\n         return OvfOption.MANUAL;\n      }\n      return OvfOption.DOWNLOAD;\n   }\n\n   validate(): string[] | Promise<string[]> {\n      if (this.ovfSettings.isUseExisting) {\n         return null;\n      }\n      if (!this.ovfSettings.isManualDownload) {\n         return this.validateAutoDownloadOvfFiles();\n      }\n\n      // Start to validate the manual uploaded files\n      const validationResult: string[] | Promise<string[]> = this.ovfFileSelector.validate();\n      return (validationResult instanceof Promise)\n            ? this.monitorUploadOvfFiles(validationResult)\n            : validationResult;\n   }\n\n   onUploadError(errors: string[]): void {\n      this.currentOvfStatus = OvfUploadStatus.UPLOAD_ERROR;\n      (this.pageControls as PageItem).addValidationErrors(errors);\n      this.toggleNextButton(true);\n   }\n\n   onUploadCancel(): void {\n      this.currentOvfStatus = OvfUploadStatus.UPLOAD_CANCELLED;\n      this.toggleNextButton(true);\n   }\n\n   onUploadComplete(): void {\n      this.currentOvfStatus = OvfUploadStatus.UPLOAD_COMPLETED;\n   }\n\n   onOvfSettingsChange(): void {\n      this.pageControls.rebuildToc();\n   }\n\n   private validateAutoDownloadOvfFiles(): string[] | Promise<string[]> {\n      // We have to let user to accept the certificate, this is for security reasons\n      if (this.ovfSettings.isSecureUrlNotTrusted) {\n         return [VsanUiUtils.getString(\"vsan.services.fileservices.wizard.ovf.ssl.trust.error\")];\n      }\n      if (this.downloadTask) {\n         return null;\n      }\n      return this.startDownloadOvfFiles();\n   }\n\n   private startDownloadOvfFiles(): Promise<string[]> {\n      this.pageControls.setBusyState();\n      return this.registerOvfTask(this.fileService.downloadPublicOvf(this.clusterRef));\n   }\n\n   private monitorUploadOvfFiles(validationResult: Promise<string[]>): Promise<string[]> {\n      return validationResult.then((errors: string[]) => {\n         if (errors && errors.length) {\n            return errors;\n         }\n         // disable the next button to avoid user clicking it again\n         this.toggleNextButton(false);\n\n         this.startUploadOvfFiles();\n         return this.registerOvfTask(new Promise<any>((accept, reject) => {\n            // Check the upload progress every second until it completes\n            const intervalClock: number = window.setInterval(() => {\n               if (this.currentOvfStatus !== OvfUploadStatus.START_UPLOAD) {\n                  clearInterval(intervalClock);\n                  if (this.currentOvfStatus === OvfUploadStatus.UPLOAD_COMPLETED) {\n                     accept(null);\n                  } else if (this.currentOvfStatus === OvfUploadStatus.UPLOAD_ERROR) {\n                     reject(null);\n                  }\n               }\n            }, 1000);\n         }));\n      });\n   }\n\n   private toggleNextButton(enabled: boolean): void {\n      (this.pageControls as PageItem).nextButtonIsDisabled = !enabled;\n   }\n\n   private startUploadOvfFiles(): void {\n      this.currentOvfStatus = OvfUploadStatus.START_UPLOAD;\n   }\n\n   private registerOvfTask = (result: Promise<ManagedObject>): Promise<string[]> => {\n      return new Promise<string[]>((resolve, reject) => {\n         result.then((task: ManagedObject) => {\n            this.downloadTask = task; // task is null if the OVF file is uploaded from local computer\n            this.pageControls.clearBusyState();\n            resolve(null);\n         }).catch((error: string) => {\n            this.pageControls.clearBusyState();\n            reject([error]);\n         }).finally(() => this.toggleNextButton(true));\n      });\n   };\n}\n\nexport enum OvfUploadStatus {\n   START_UPLOAD,\n   UPLOAD_COMPLETED,\n   UPLOAD_CANCELLED,\n   UPLOAD_ERROR,\n}\n","/* Copyright 2021 VMware, Inc. All rights reserved. -- VMware Confidential */\n/**\n * IDs used in external navigation to Ask VMware pages\n */\nexport enum AskVmwareId {\n   CLUSTER_SHUTDOWN = \"com.vmware.vsan.clustershutdown.vmshutdown\",\n   FILE_SERVICE = \"fileservice.user.guide\",\n   FILE_SERVICE_IMBALANCE = \"com.vmware.vsan.fileservice.remediate.imbalance\",\n   TOP_CONTRIBUTORS = \"com.vmware.vsan.perf.graph.topn\",\n   OBFUSCATED_DATA = \"com.vmware.vsan.obfuscation.data.map\",\n   VM_CONSUMPTION_IOPS = \"com.vmware.vsan.perf.graph.cluster-domclient.iops\",\n}","<!--Copyright 2017-2022 VMware, Inc. All rights reserved. -- VMware Confidential-->\n<form *ngIf=\"!loading\" clrForm clrLayout=\"horizontal\" [formGroup]=\"networkForm\">\n   <vsan-validation id=\"network-security-warning\"\n                    *ngIf=\"!isEdit\"\n                    [isSmall]=\"true\"\n                    [alertType]=\"'info'\"\n                    [allowClose]=\"false\"\n                    [alert]=\"'vsan.services.fileservices.wizard.ipPool.input.network.security.warning' | localized\">\n   </vsan-validation>\n   <div id=\"network-container\" class=\"clr-row clr-form-control\">\n      <label class=\"clr-control-label clr-col-md-4\" for=\"browse-network\">\n         {{\"vsan.services.fileservices.wizard.ipPool.input.network\"| localized}}\n      </label>\n      <div class=\"clr-control-container clr-col-md-8\" *ngIf=\"!isEdit || !networkName\">\n         <clr-dropdown [clrCloseMenuOnItemClick]=\"true\">\n            <button id=\"browse-network\"\n                    class=\"dropdown-toggle btn btn-link\"\n                    (click)=\"showNetworkBrowser = true;\"\n                    clrDropdownToggle>\n               <clr-icon *ngIf=\"networkName\"\n                         class=\"network-icon\"\n                         [attr.shape]=\"Icon.NETWORK\"></clr-icon>\n               {{networkNameText}}\n               <clr-icon shape=\"caret down\"></clr-icon>\n            </button>\n            <ng-template [(clrIfOpen)]=\"showNetworkBrowser\">\n               <clr-dropdown-menu clrPosition=\"bottom-left\"\n                                  [attr.aria-label]=\"'vsan.common.srMessage.dropdownMenu.expanded.label' | localized:\n                                       ('vsan.services.fileservices.wizard.ipPool.input.network' | localized)\">\n                     <vsan-inventory-browser #selector\n                                             [objRefs]=\"objRefs\"\n                                             [inventoryService]=\"networkInventoryService\"\n                                             [preselectedNodes]=\"[preselectedNode]\"\n                                             (nodeSelected)=\"selectNode($event)\"\n                                             [searchInputAriaLabelKey]=\"'vsan.services.fileservices.wizard.ipPool.input.network.searchInputAriaLabel'\">\n                     </vsan-inventory-browser>\n               </clr-dropdown-menu>\n            </ng-template>\n         </clr-dropdown>\n      </div>\n      <div *ngIf=\"isEdit && networkName\" class=\"clr-col-md-8\">{{networkName}}</div>\n   </div>\n   <clr-select-container *ngIf=\"ipV6Supported() && !isEdit\"\n                         id=\"protocol-container\"\n                         class=\"clr-row\">\n      <label class=\"clr-control-label clr-col-md-4\" for=\"protocol-input\">\n         {{\"vsan.services.fileservices.wizard.ipPool.input.protocol\"| localized}}\n      </label>\n      <select id=\"protocol-input\"\n              name=\"protocol\"\n              class=\"clr-col-md-8\"\n              clrSelect\n              (change)=\"changeProtocol($event?.target?.value)\"\n              formControlName=\"protocol\"\n              [value]=\"protocol.value\">\n         <option *ngFor=\"let p of protocolList\"\n                  value=\"{{p.value}}\"\n                  [selected]=\"protocol.value == p.value\">\n            {{getIpProtocolVersionText(p)}}\n         </option>\n      </select>\n   </clr-select-container>\n   <div *ngIf=\"!ipV6Supported() || isEdit\"\n        class=\"clr-form-control clr-row\"\n        id=\"protocol-container-readonly\">\n      <label class=\"clr-control-label clr-col-md-4\" for=\"protocol-input\">\n         {{\"vsan.services.fileservices.wizard.ipPool.input.protocol\"| localized}}\n      </label>\n      <div class=\"clr-col-md-8\">\n         {{getIpProtocolVersionText(protocol)}}\n      </div>\n   </div>\n   <clr-input-container *ngIf=\"protocol === IP.v4\"\n                        id=\"mask-container\"\n                        class=\"clr-row\">\n      <label class=\"clr-control-label clr-col-md-4\" for=\"mask-input\">\n         {{\"vsan.services.fileservices.wizard.ipPool.input.mask\"| localized}}\n      </label>\n      <input id=\"mask-input\"\n             clrInput\n             type=\"text\"\n             class=\"clr-col-md-8\"\n             formControlName=\"mask\">\n      <clr-control-error *clrIfError=\"validationService.INVALID_MASK_VALIDATION\">\n         {{validationService.getMaskValidationResult(maskControl.value)}}\n      </clr-control-error>\n   </clr-input-container>\n   <clr-input-container *ngIf=\"protocol === IP.v6\"\n                        id=\"prefix-container\"\n                        class=\"clr-row\">\n      <label class=\"clr-control-label clr-col-md-4\" for=\"mask-input\">\n         {{\"vsan.services.fileservices.wizard.ipPool.input.prefixLength\" | localized}}\n      </label>\n      <input id=\"prefix-length\"\n             clrInput\n             type=\"number\"\n             min=\"1\"\n             max=\"128\"\n             class=\"clr-col-md-8\"\n             formControlName=\"prefixLength\">\n      <clr-control-error *clrIfError=\"validationService.INVALID_PREFIX_LENGTH_VALIDATION\">\n         {{validationService.getPrefixLengthValidationResult(prefixLengthControl.value)}}\n      </clr-control-error>\n   </clr-input-container>\n\n   <clr-input-container *ngIf=\"protocol === IP.v6\"\n                        id=\"ipv6-gateway-container\"\n                        class=\"clr-row\">\n      <label class=\"clr-control-label clr-col-md-4\" for=\"ipv6-gateway-input\">\n         {{\"vsan.services.fileservices.wizard.ipPool.input.gateway\" | localized}}\n      </label>\n      <input id=\"ipv6-gateway-input\"\n             clrInput\n             type=\"text\"\n             class=\"clr-col-md-8\"\n             formControlName=\"gateway\">\n      <clr-control-error *clrIfError=\"INVALID_GATEWAY_VALIDATION\">\n         {{getGatewayValidationResult(gatewayControl.value)}}\n      </clr-control-error>\n   </clr-input-container>\n   <!--\n   We don't use clr-input-container here because it doesn't allow us to have a vsan-validation element\n   inside. This warning message comes from PR 2569516, we need to keep it align with the input element.\n   -->\n   <div *ngIf=\"protocol === IP.v4\"\n        id=\"gateway-container\"\n        class=\"clr-form-control clr-row\"\n        [ngClass]=\"{'clr-error': showGatewayControlError}\">\n      <label id=\"gateway-label\" class=\"clr-control-label clr-col-md-4\" for=\"gateway-input\">\n         {{\"vsan.services.fileservices.wizard.ipPool.input.gateway\" | localized}}\n      </label>\n      <div class=\"clr-control-container clr-col-md-8\">\n         <div class=\"clr-input-wrapper gateway-input-container\">\n            <input id=\"gateway-input\"\n                   type=\"text\"\n                   class=\"clr-input\"\n                   aria-describedby=\"gateway-input-error\"\n                   formControlName=\"gateway\">\n            <clr-icon *ngIf=\"showGatewayControlError\"\n                      aria-hidden=\"true\"\n                      role=\"none\"\n                      class=\"clr-validate-icon\"\n                      shape=\"exclamation-circle\">\n            </clr-icon>\n         </div>\n         <div *ngIf=\"showGatewayControlError\" id=\"gateway-input-error\" class=\"clr-subtext\">\n            {{getGatewayValidationResult(gatewayControl.value)}}\n         </div>\n         <vsan-validation id=\"docker-internal-ip-conflict-warning\"\n                          *ngIf=\"displaySubnetConflictWarning\"\n                          allowReload=\"true\"\n                          isSmall=\"true\"\n                          alertType=\"warning\"\n                          [allowClose]=\"false\"\n                          [actionLabel]=\"'vsan.services.fileservices.network.docker.internal.conflict.ignore.label' | localized\"\n                          [alert]=\"'vsan.services.fileservices.network.docker.internal.conflict.warning' | localized\"\n                          (onReload)=\"onSubmitConflictIgnored()\">\n         </vsan-validation>\n      </div>\n   </div>\n</form>\n","<!--Copyright 2017-2022 VMware, Inc. All rights reserved. -- VMware Confidential-->\n<vsan-validation id=\"prelight-check-error\"\n                 *ngIf=\"error\"\n                 [allowClose]=\"false\"\n                 [isSmall]=\"true\"\n                 [alert]=\"error\">\n</vsan-validation>\n<vsan-validation id=\"prelight-check-warning\"\n                 *ngIf=\"showNtpWarning && warnings\"\n                 [alertType]=\"'warning'\"\n                 [allowClose]=\"false\"\n                 [isSmall]=\"true\"\n                 [(alerts)]=\"warnings\">\n</vsan-validation>\n<ng-container *ngIf=\"!isEdit\">\n   <h5>{{\"vsan.services.fileservices.wizard.ovf.title\"|localized}}</h5>\n   <ng-container *ngIf=\"!isUploadLocalOvf && downloadTask\">\n      <div class=\"clr-row\">\n         <div id=\"download-approach-label\" class=\"clr-col-4\">\n            {{\"vsan.services.fileservices.wizard.ovf.option\"|localized}}\n         </div>\n         <div id=\"download-approach-value\" class=\"clr-col-8\">\n            <ng-container *ngIf=\"downloadTaskInfoData?.progress; else loading_spinner\">\n               <div id=\"url-value\">{{ovfSettings?.props?.url}}</div>\n               <div class=\"progress labeled\" *ngIf=\"downloadTaskInfoData\">\n                  <progress max=\"100\" value=\"{{downloadTaskInfoData?.progress}}\"></progress>\n                  <span>\n                     {{downloadTaskInfoData?.progress}}%\n                  </span>\n               </div>\n            </ng-container>\n            <ng-template #loading_spinner>\n               <span class=\"spinner spinner-inline\"></span>\n               <span>{{\"vsan.loading\" | localized }}</span>\n            </ng-template>\n         </div>\n      </div>\n   </ng-container>\n\n   <vsan-validation id=\"download-task-status\"\n                    [alertType]=\"downloadTaskIcon\"\n                    [alert]=\"downloadTaskMessage\"\n                    [allowClose]=\"false\"\n                    [isSmall]=\"true\"\n                    class=\"indent\">\n   </vsan-validation>\n</ng-container>\n\n<ng-container *ngIf=\"fileServiceConfig\">\n   <h5 id=\"active-directory\">{{\"vsan.services.fileservices.wizard.activeDirectoryPage.title\"|localized}}</h5>\n   <vsan-validation id=\"re-enable-message\"\n                    *ngIf=\"isReEnable\"\n                    alertType=\"warning\"\n                    [alert]=\"'vsan.services.fileservices.wizard.activeDirectoryPage.reenableInfo' | localized\"\n                    [allowClose]=\"false\"\n                    [isSmall]=\"true\">\n   </vsan-validation>\n   <div class=\"clr-row\" *ngIf=\"!capabilityData?.isFileServiceKerberosSupported\">\n      <div id=\"security-mode-label\" class=\"clr-col-4\">\n         {{\"vsan.services.fileservices.wizard.activeDirectoryPage.security.label\"|localized}}\n      </div>\n      <div id=\"security-mode-value\" class=\"clr-col-8\">\n         {{'vsan.services.fileservices.wizard.activeDirectoryPage.security.authSys' | localized}}\n      </div>\n   </div>\n   <div class=\"clr-row\">\n      <div id=\"domain-name-label\" class=\"clr-col-4\">\n         {{\"vsan.services.fileservices.wizard.activeDirectoryPage.input.fsDomain\"|localized}}\n      </div>\n      <div id=\"domain-name-value\" class=\"clr-col-8\">{{fileServiceConfig.domainConfig.name}}</div>\n   </div>\n   <div class=\"clr-row\">\n      <div id=\"dns-server-label\" class=\"clr-col-4\">\n         {{\"vsan.services.fileservices.wizard.activeDirectoryPage.input.dnsServer\" | localized}}\n      </div>\n      <div id=\"dns-server-value\"\n           class=\"clr-col-8\">\n         {{fileServiceConfig.domainConfig.dnsServers || ('vsan.na.label' | localized)}}\n      </div>\n   </div>\n   <div class=\"clr-row\">\n      <div id=\"dns-suffix-label\" class=\"clr-col-4\">\n         {{\"vsan.services.fileservices.wizard.activeDirectoryPage.input.dnsSuffix\" | localized}}\n      </div>\n      <div id=\"dns-suffix-value\"\n           class=\"clr-col-8\">\n         {{fileServiceConfig.domainConfig.dnsSuffixes || ('vsan.na.label' | localized)}}\n      </div>\n   </div>\n   <ng-container *ngIf=\"capabilityData?.isFileServiceKerberosSupported\n                        && !isRemovingActiveDirectory\n                        && fileServiceConfig.domainConfig?.adConfig?.domain\">\n      <div class=\"clr-row\">\n         <div id=\"active-directory-label\" class=\"clr-col-4\">\n            {{\"vsan.services.fileservices.wizard.activeDirectoryPage.input.adDomain\"|localized}}\n         </div>\n         <div id=\"active-directory-value\" class=\"clr-col-8\">{{fileServiceConfig.domainConfig.adConfig.domain}}</div>\n      </div>\n      <div class=\"clr-row\">\n         <div id=\"organizational-unit-label\" class=\"clr-col-4\">\n            {{\"vsan.services.fileservices.ad.domain.organizationalUnit\"|localized}}\n         </div>\n         <div id=\"organizational-unit-value\" class=\"clr-col-8\">\n            {{fileServiceConfig.domainConfig.adConfig.organizationalUnit || (\"vsan.na.label\" | localized)}}\n         </div>\n      </div>\n      <div class=\"clr-row\">\n         <div id=\"username-label\" class=\"clr-col-4\">\n            {{\"vsan.services.fileservices.wizard.activeDirectoryPage.input.username\"|localized}}\n         </div>\n         <div id=\"username-value\" class=\"clr-col-8\">{{fileServiceConfig.domainConfig.adConfig.username}}</div>\n      </div>\n   </ng-container>\n</ng-container>\n\n<ng-container *ngIf=\"fileServiceConfig\">\n   <h5 id=\"ip-pool\">{{\"vsan.services.fileservices.wizard.ipPool.title\"|localized}}</h5>\n\n   <div class=\"clr-row\">\n      <div id=\"network-label\" class=\"clr-col-4\">\n         {{\"vsan.services.fileservices.wizard.ipPool.input.network\"|localized}}\n      </div>\n      <div id=\"network-value\" class=\"clr-col-8\">{{networkName}}</div>\n   </div>\n\n   <div class=\"clr-row\">\n      <div id=\"protocol-label\" class=\"clr-col-4\">\n         {{\"vsan.services.fileservices.wizard.ipPool.input.vlan.protocol\"|localized}}\n      </div>\n      <div id=\"protocol-value\" class=\"clr-col-8\">{{protocol.toString() | localized}}</div>\n   </div>\n\n   <ng-container *ngIf=\"protocol === IP.v4\">\n      <div class=\"clr-row\">\n         <div id=\"mask-label\" class=\"clr-col-4\">\n            {{\"vsan.services.fileservices.wizard.ipPool.input.mask\"|localized}}\n         </div>\n         <div id=\"mask-value\" class=\"clr-col-8\">{{fileServiceConfig.domainConfig.mask}}</div>\n      </div>\n\n      <div class=\"clr-row\">\n         <div id=\"gateway-label\" class=\"clr-col-4\">\n            {{\"vsan.services.fileservices.wizard.ipPool.input.gateway\"|localized}}\n         </div>\n         <div id=\"gateway-value\" class=\"clr-col-8\">{{fileServiceConfig.domainConfig.gatewayAddress}}</div>\n      </div>\n   </ng-container>\n\n   <ng-container *ngIf=\"protocol === IP.v6\">\n      <div class=\"clr-row\">\n         <div id=\"prefix-length-label\" class=\"clr-col-4\">\n            {{\"vsan.services.fileservices.wizard.ipPool.input.prefixLength\"|localized}}\n         </div>\n         <div id=\"prefix-length-value\" class=\"clr-col-8\">{{fileServiceConfig.domainConfig.prefixLength}}</div>\n      </div>\n\n      <div class=\"clr-row\">\n         <div id=\"ipv6-gateway-label\" class=\"clr-col-4\">\n            {{\"vsan.services.fileservices.wizard.ipPool.input.gateway\"|localized}}\n         </div>\n         <div id=\"ipv6-gateway-value\" class=\"clr-col-8\">{{fileServiceConfig.domainConfig.ipv6GatewayAddress}}</div>\n      </div>\n   </ng-container>\n\n   <table class=\"table\">\n      <thead>\n         <tr>\n            <th class=\"left\" scope=\"col\">{{'vsan.services.fileservices.wizard.ipPool.input.ipaddress.title' | localized}}</th>\n            <th class=\"left\" scope=\"col\">\n               {{\"vsan.services.fileservices.wizard.ipPool.input.dns.title\" | localized}}\n            </th>\n            <th *ngIf=\"affinitySiteSupported && isVsanStretchedCluster\"\n                class=\"left\"\n                scope=\"col\">\n               {{\"vsan.fileservices.affinitySite.label\" | localized}}\n            </th>\n         </tr>\n      </thead>\n      <tbody>\n         <tr id=\"ip-table-row-{{i}}\"\n             *ngFor=\"let hostData of fileServiceConfig.domainConfig.ipSettings; let i=index\">\n            <td class=\"left\">\n               <span>{{hostData.address}}</span>\n               <span *ngIf=\"hostData.isDefault\">\n                  {{'vsan.services.fileservices.wizard.rtc.default' | localized}}\n               </span>\n            </td>\n            <td class=\"left\">{{hostData.dnsName}}</td>\n            <td *ngIf=\"affinitySiteSupported && isVsanStretchedCluster\"\n                class=\"left\">\n               {{getAffinitySiteLabel(hostData.affinityLocation)}}\n            </td>\n         </tr>\n      </tbody>\n   </table>\n\n   <div *ngIf=\"capabilityData.isFileAnalyticsSupported\" class=\"clr-row\">\n      <div id=\"file-analytics-label\" class=\"clr-col-4\">\n         {{\"vsan.services.fileservices.wizard.fileAnalyticsPage.title\" | localized}}\n      </div>\n      <div id=\"file-analytics-value\" class=\"clr-col-8\">\n         {{getBooleanPropertyLabel(fileServiceConfig.isFileAnalyticsEnabled)}}\n      </div>\n   </div>\n</ng-container>\n","/* Copyright 2018-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component} from \"@angular/core\";\nimport {InputProperty, WizardPage} from \"../../common/component/wizard/flow-metadata\";\nimport {VsanUiUtils} from \"../../common/util/vsan-util\";\nimport {VsanCapabilityData} from \"@generated/vsan-capability-data\";\nimport {AskVmwareId} from '@service/navigation/model/ask-vmware-id';\n\n@WizardPage(\n      VsanUiUtils.getString(\"vsan.services.fileservices.wizard.introduction.title\"),\n)\n@Component({\n   templateUrl: \"file-services-introduction-page.html\",\n   styleUrls: [\"file-services-introduction-page.scss\"],\n})\nexport class FileServicesIntroductionPageComponent {\n   readonly AskVmwareId: typeof AskVmwareId = AskVmwareId;\n\n   @InputProperty()\n   capabilityData: VsanCapabilityData;\n}\n","<!--Copyright 2019-2021 VMware, Inc. All rights reserved. -- VMware Confidential-->\n<vsan-file-services-ovf-settings id=\"ovf-settings\"\n                                 *ngIf=\"ovfSettings\"\n                                 #ovfFileSelector\n                                 [clusterRef]=\"clusterRef\"\n                                 [publicOvfProps]=\"publicOvfProps\"\n                                 [startUpload]=\"currentOvfStatus === OvfUploadStatus.START_UPLOAD\"\n                                 [isInternetAccessEnabled]=\"isInternetAccessEnabled\"\n                                 [displayUseExistingOption]=\"displayUseExistingOption\"\n                                 [existingOvfVersion]=\"existingOvfVersion\"\n                                 [fsvmVersion]=\"fsvmVersion\"\n                                 [hostVersion]=\"hostVersion\"\n                                 [(ovfSettings)]=\"ovfSettings\"\n                                 (onError)=\"onUploadError($event)\"\n                                 (onCancel)=\"onUploadCancel()\"\n                                 (uploadComplete)=\"onUploadComplete()\"\n                                 (ovfSettingsChange)=\"onOvfSettingsChange()\">\n</vsan-file-services-ovf-settings>\n","<!--Copyright 2017-2021 VMware, Inc. All rights reserved. &#45;&#45; VMware Confidential-->\n<vsan-validation id=\"edit-warning\"\n                 *ngIf=\"isEdit\"\n                 alertType=\"warning\"\n                 [allowClose]=\"false\"\n                 [alert]=\"editDomainWarning\"\n                 [isSmall]=\"true\">\n</vsan-validation>\n\n<vsan-validation id=\"re-enable-info\"\n                 *ngIf=\"!isEdit && originalDomainName\"\n                 alertType=\"info\"\n                 [allowClose]=\"false\"\n                 [alert]=\"'vsan.services.fileservices.wizard.activeDirectoryPage.reenableInfo' | localized\"\n                 [isSmall]=\"true\">\n</vsan-validation>\n\n<form *ngIf=\"!loading\" clrForm clrLayout=\"horizontal\" [formGroup]=\"domainForm\">\n   <div *ngIf=\"!capabilityData?.isFileServiceKerberosSupported\" class=\"clr-form-control clr-row\">\n      <label class=\"clr-control-label clr-col-4\">\n         {{\"vsan.services.fileservices.wizard.activeDirectoryPage.security.label\" | localized}}\n      </label>\n      <div class=\"clr-col-7\">\n         {{\"vsan.services.fileservices.wizard.activeDirectoryPage.security.authSys\" | localized}}\n         <ng-container *ngTemplateOutlet=\"auth_sys_signpost\"></ng-container>\n      </div>\n   </div>\n\n   <clr-input-container>\n      <label class=\"clr-col-4\">\n         {{\"vsan.services.fileservices.wizard.activeDirectoryPage.input.fsDomain\" | localized}}\n      </label>\n      <input clrInput\n             id=\"{{DOMAIN_NAME_ELEMENT_NAME}}\"\n             class=\"clr-col-7\"\n             formControlName=\"{{DOMAIN_NAME_ELEMENT_NAME}}\"\n             autocomplete=\"off\"\n             vsan-auto-focus/>\n      <clr-control-helper>\n         {{\"vsan.services.fileservices.wizard.activeDirectoryPage.input.fsDomain.tooltip\" | localized}}\n      </clr-control-helper>\n      <clr-control-error *clrIfError=\"validationService.INVALID_NAME_VALIDATION\">\n         {{validationService.getDomainNameValidationResult(domainControl.value)}}\n      </clr-control-error>\n   </clr-input-container>\n\n   <clr-input-container *ngIf=\"dnsServerAvailable\">\n      <label class=\"clr-col-4\">\n         {{\"vsan.services.fileservices.wizard.activeDirectoryPage.input.dnsServer\" | localized}}\n      </label>\n      <input clrInput\n             id=\"{{DNS_SERVERS_ELEMENT_NAME}}\"\n             class=\"clr-col-7\"\n             formControlName=\"{{DNS_SERVERS_ELEMENT_NAME}}\"\n             autocomplete=\"off\"\n             autofocus/>\n      <clr-control-helper>\n         {{\"vsan.services.fileservices.wizard.activeDirectoryPage.input.dnsServer.tooltip\" | localized}}\n      </clr-control-helper>\n      <clr-control-error *clrIfError=\"validationService.INVALID_DNS_VALIDATION\">\n         {{validationService.getDnsServerValidationResult(dnsControl.value)}}\n      </clr-control-error>\n   </clr-input-container>\n\n   <clr-input-container *ngIf=\"dnsServerAvailable\">\n      <label class=\"clr-col-4\">\n         {{\"vsan.services.fileservices.wizard.activeDirectoryPage.input.dnsSuffix\" | localized}}\n      </label>\n      <input clrInput\n             id=\"{{DNS_SUFFIX_ELEMENT_NAME}}\"\n             class=\"clr-col-7\"\n             formControlName=\"{{DNS_SUFFIX_ELEMENT_NAME}}\"\n             autocomplete=\"off\"\n             autofocus/>\n      <clr-control-helper>\n         {{\"vsan.services.fileservices.wizard.activeDirectoryPage.input.dnsSuffix.tooltip\" | localized}}\n      </clr-control-helper>\n      <clr-control-error *clrIfError=\"validationService.INVALID_SUFFIX_VALIDATION\">\n         {{validationService.getDnsSuffixValiationResult(dnsSuffixControl.value)}}\n      </clr-control-error>\n   </clr-input-container>\n\n   <ng-container *ngIf=\"activeDirectorySupported\">\n      <div class=\"clr-form-control clr-row\">\n         <div class=\"clr-col-4 clr-control-label\">\n            {{\"vsan.services.fileservices.wizard.activeDirectoryPage.security.ad.label\" | localized}}\n            <clr-signpost [vsan-signpost-title]=\"'vsan.services.fileservices.wizard.activeDirectoryPage.security.ad.signpost.label' | localized\">\n               <clr-signpost-content *clrIfOpen clrPosition=\"bottom-right\">\n                  {{\"vsan.services.fileservices.domain.type.activedirectory.desc\" | localized}}\n               </clr-signpost-content>\n            </clr-signpost>\n         </div>\n         <div class=\"clr-col-7\">\n            <clr-checkbox-container>\n               <clr-checkbox-wrapper>\n                  <input type=\"checkbox\"\n                         clrCheckbox\n                         id=\"{{ENABLE_AD_ELEMENT_NAME}}\"\n                         formControlName=\"{{ENABLE_AD_ELEMENT_NAME}}\"/>\n                  <label>{{'vsan.services.fileservices.domain.type.activedirectory' | localized}}</label>\n               </clr-checkbox-wrapper>\n            </clr-checkbox-container>\n            <vsan-validation id=\"ad-info\"\n                             *ngIf=\"activeDirectoryEnabled\"\n                             [alertType]=\"'info'\"\n                             [isSmall]=\"true\"\n                             [alert]=\"'vsan.services.fileservices.domain.type.activedirectory.info' | localized\">\n            </vsan-validation>\n         </div>\n      </div>\n      <ng-container *ngIf=\"activeDirectoryEnabled\">\n         <clr-input-container>\n            <label class=\"clr-col-4 indent-label\">\n               {{\"vsan.services.fileservices.wizard.activeDirectoryPage.input.adDomain\" | localized}}\n            </label>\n            <input clrInput\n                   id=\"{{AD_DOMAIN_NAME_ELEMENT_NAME}}\"\n                   formControlName=\"{{AD_DOMAIN_NAME_ELEMENT_NAME}}\"\n                   class=\"clr-col-6\"\n                   [readonly]=\"hasAdConfigured\"\n                   autocomplete=\"off\"/>\n            <clr-control-error *clrIfError=\"validationService.INVALID_AD_DOMAIN_VALIDATION\">\n               {{getAdDomainValidationResult(adDomainNameControl.value)}}\n            </clr-control-error>\n         </clr-input-container>\n         <clr-input-container>\n            <label class=\"clr-col-4 indent-label\">\n               {{\"vsan.services.fileservices.wizard.activeDirectoryPage.input.adDomain.organizationalUnit\" | localized}}\n            </label>\n            <input clrInput\n                   id=\"{{OU_ELEMENT_NAME}}\"\n                   formControlName=\"{{OU_ELEMENT_NAME}}\"\n                   class=\"clr-col-6\"\n                   [readOnly]=\"isEdit && hasAdConfigured\"\n                   autocomplete=\"off\"/>\n            <clr-control-helper>\n               {{\"vsan.services.fileservices.ad.domain.organizationalUnit.desc\" | localized}}\n            </clr-control-helper>\n            <clr-control-error *clrIfError=\"validationService.INVALID_OU_VALIDATION\">\n               {{validationService.getOuValidationResult(organizationalUnitControl.value)}}\n            </clr-control-error>\n         </clr-input-container>\n         <clr-input-container>\n            <label class=\"clr-col-4 indent-label\">\n               {{\"vsan.services.fileservices.wizard.activeDirectoryPage.input.username\" | localized}}\n            </label>\n            <input clrInput\n                   id=\"{{AD_USERNAME_ELEMENT_NAME}}\"\n                   formControlName=\"{{AD_USERNAME_ELEMENT_NAME}}\"\n                   class=\"clr-col-6\"\n                   [readOnly]=\"isEdit && hasAdConfigured\"\n                   autocomplete=\"off\"/>\n            <clr-control-error *clrIfError=\"validationService.INVALID_USERNAME_VALIDATION\">\n               {{validationService.getUsernameValidationResult(adUsernameControl.value)}}\n            </clr-control-error>\n         </clr-input-container>\n         <clr-input-container>\n            <label class=\"clr-col-4 indent-label\">\n               {{\"vsan.services.fileservices.wizard.activeDirectoryPage.input.password\" | localized}}\n            </label>\n            <input clrInput\n                   id=\"{{AD_PASSWORD_ELEMENT_NAME}}\"\n                   formControlName=\"{{AD_PASSWORD_ELEMENT_NAME}}\"\n                   class=\"clr-col-6\"\n                   type=\"password\"\n                   [placeholder]=\"passwordPlaceholder\"\n                   autocomplete=\"off\"/>\n            <clr-control-error *clrIfError=\"'required'\">\n               {{\"vsan.services.fileservices.wizard.activeDirectoryPage.nopassword\" | localized}}\n            </clr-control-error>\n         </clr-input-container>\n      </ng-container>\n   </ng-container>\n</form>\n\n<ng-template #auth_sys_signpost>\n   <clr-signpost id=\"auth-sys-signpost\"\n                 [vsan-signpost-title]=\"'vsan.services.fileservices.wizard.activeDirectoryPage.security.authSys.signpost.label' | localized\">\n      <clr-signpost-content *clrIfOpen>\n         {{\"vsan.services.fileservices.wizard.activeDirectoryPage.security.authSys.info\" | localized}}\n      </clr-signpost-content>\n   </clr-signpost>\n</ng-template>\n","\n      <vsan-flow-wizard\n            [title]=\"title\"\n            [pageSets]=\"pages\"\n            [contextProperties]=\"context\"\n            [startingTaskProperty]=\"taskProperty\"\n            [services]=\"services\">\n      </vsan-flow-wizard>","/* Copyright 2020-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {Injectable} from \"@angular/core\";\nimport {IpParserService} from \"@service/ip-parser.service\";\nimport {VsanFileShareUtils} from \"../shares/file-share-util\";\nimport {AbstractControl, ValidationErrors, ValidatorFn } from \"@angular/forms\";\n\n/**\n * Service class which contains the validation logic used in the FileServicesDomainPageComponent\n */\n@Injectable()\nexport class DomainValidationService {\n   private readonly OU_SEPARATOR: string = \",\";\n   private readonly ORGANIZATIONAL_UNIT_HIERARCHICAL_SYMBOL: string = \"/\";\n   // The max allowed length of the whole ou input\n   private readonly ORGANIZATIONAL_UNIT_INPUT_MAXIMUM_LENGTH: number = 255;\n   // The max length of the value of ou part, for example if you user inputs `cn=something,ou=org,dc=example,dc=com`,\n   // the whole string cannot have more than 255 chars, the ou value cannot have more than 64 chars\n   private readonly ORGANIZATIONAL_UNIT_VALUE_MAXIMUM_LENGTH: number = 64;\n   private readonly DOMAIN_NAME_MAXIMUM_LENGTH: number = 80;\n   private readonly OU_PREFIX: string = \"ou=\";\n   private static readonly VALID_AD_CHARS: RegExp = /^[A-Za-z0-9\\-._]*$/;\n   private static readonly DNS_SEPARATOR: string = \",\";\n\n   private static readonly INVALID_DOMAIN_NAME_START: RegExp = /^[0-9-._]/;\n   private static readonly INVALID_DOMAIN_NAME_CHARS: RegExp = /[!\"#$%&'()*+,/:;<=>?@[\\]^`{|}~]/;\n\n   readonly INVALID_NAME_VALIDATION: string = \"invalidName\";\n   readonly INVALID_DNS_VALIDATION: string = \"invalidDnsServer\";\n   readonly INVALID_SUFFIX_VALIDATION: string = \"invalidSuffix\";\n   readonly INVALID_AD_DOMAIN_VALIDATION: string = \"invalidAdDomain\";\n   readonly INVALID_OU_VALIDATION: string = \"invalidOu\";\n   readonly INVALID_USERNAME_VALIDATION: string = \"invalidUsername\";\n   readonly INVALID_MASK_VALIDATION: string = \"invalidMask\";\n   readonly INVALID_PREFIX_LENGTH_VALIDATION: string = \"invalidPrefixLength\";\n\n   constructor(private ipParser: IpParserService) {}\n\n   domainNameValidator: ValidatorFn = (control: AbstractControl): ValidationErrors => {\n      const domainName: string = control.value;\n      if (this.getDomainNameValidationResult(domainName)) {\n         return {[this.INVALID_NAME_VALIDATION]: {value: domainName}};\n      }\n      return null;\n   };\n\n   getDomainNameValidationResult(domainName: string): string {\n      if (!domainName) {\n         return VsanUiUtils.getString(\"vsan.services.fileservices.wizard.activeDirectoryPage.noname\");\n      }\n      if (domainName.length > this.DOMAIN_NAME_MAXIMUM_LENGTH) {\n         return VsanUiUtils.getString(\"vsan.services.fileservices.wizard.activeDirectoryPage.domain.maxlength.error\");\n      }\n      if (DomainValidationService.INVALID_DOMAIN_NAME_START.test(domainName)) {\n         return VsanUiUtils.getString(\"vsan.services.fileservices.wizard.activeDirectoryPage.domain.invalidStart\");\n      }\n      if (DomainValidationService.INVALID_DOMAIN_NAME_CHARS.test(domainName)) {\n         return VsanUiUtils.getString(\"vsan.services.fileservices.wizard.activeDirectoryPage.domain.invalidChars\");\n      }\n      return null;\n   }\n\n   dnsServerValidator: ValidatorFn = (control: AbstractControl): ValidationErrors => {\n      const dnsServers: string = control.value;\n      if (this.getDnsServerValidationResult(dnsServers)) {\n         return {[this.INVALID_DNS_VALIDATION]: {value: dnsServers}};\n      }\n      return null;\n   };\n\n   getDnsServerValidationResult(dnsServerStr: string): string {\n      if (!dnsServerStr) {\n         return VsanUiUtils.getString(\"vsan.services.fileservices.wizard.activeDirectoryPage.input.dnsServer.empty\");\n      }\n      const dnsServers: string[] = dnsServerStr.split(DomainValidationService.DNS_SEPARATOR);\n      const invalidDnsServers: string[] = dnsServers.filter(dns =>\n            !this.ipParser.isIpv4AddressValid(dns) && !this.ipParser.isIpv6AddressValid(dns));\n      if (!VsanUiUtils.isEmpty(invalidDnsServers)) {\n         return VsanUiUtils.getString(\"vsan.services.fileservices.wizard.activeDirectoryPage.input.dnsServer.error\");\n      }\n      return null;\n   }\n\n   dnsSuffixValidator: ValidatorFn = (control: AbstractControl): ValidationErrors => {\n      const dnsSuffixes: string = control.value;\n      if (this.getDnsSuffixValiationResult(dnsSuffixes)) {\n         return {[this.INVALID_SUFFIX_VALIDATION]: {value: dnsSuffixes}};\n      }\n      return null;\n   };\n\n   getDnsSuffixValiationResult(dnsSuffixes: string): string {\n      if (!dnsSuffixes) {\n         return VsanUiUtils.getString(\"vsan.services.fileservices.wizard.activeDirectoryPage.input.dnsSuffix.empty\");\n      }\n      const suffixes: string[] = dnsSuffixes.split(DomainValidationService.DNS_SEPARATOR)\n            .filter(suffix => suffix.trim()); // filter the empty dns suffix. User input could be 'example.com,'\n      const invalidSuffixes: string[] = suffixes.filter(suffix => !this.validateSingleSuffix(suffix.trim()));\n      if (!VsanUiUtils.isEmpty(invalidSuffixes)) {\n         return VsanUiUtils.getString(\"vsan.services.fileservices.wizard.activeDirectoryPage.input.dnsSuffix.error\");\n      }\n      return null;\n   }\n\n   adDomainValidator: ValidatorFn = (control: AbstractControl): ValidationErrors => {\n      const adDomain: string = control.value;\n      if (this.getAdDomainValidationResult(adDomain)) {\n         return {[this.INVALID_AD_DOMAIN_VALIDATION]: {value: adDomain}};\n      }\n      return null;\n   };\n\n   getAdDomainValidationResult(adDomain: string): string {\n      if (!adDomain) {\n         return VsanUiUtils.getString(\"vsan.services.fileservices.wizard.activeDirectoryPage.noAdDomain\");\n      }\n      if (!DomainValidationService.VALID_AD_CHARS.test(adDomain)) {\n         return VsanUiUtils.getString(\"vsan.services.fileservices.wizard.activeDirectoryPage.adDomain.invalidChars\");\n      }\n      return null;\n   }\n\n   ouValidator: ValidatorFn = (control: AbstractControl): ValidationErrors => {\n      const ou: string = control.value;\n      if (this.getOuValidationResult(ou)) {\n         return {[this.INVALID_OU_VALIDATION]: {value: ou}};\n      }\n      return null;\n   };\n\n   getOuValidationResult(ou: string): string {\n      // ou is not a must have, it can be unset\n      if (!ou) {\n         return null;\n      }\n      if (ou.length > this.ORGANIZATIONAL_UNIT_INPUT_MAXIMUM_LENGTH) {\n         return VsanUiUtils.getString(\n               \"vsan.services.fileservices.wizard.activeDirectoryPage.organizationalUnit.wholeInput.error.maxLength\");\n      }\n      if (ou.startsWith(this.ORGANIZATIONAL_UNIT_HIERARCHICAL_SYMBOL)) {\n         return VsanUiUtils.getString(\n               \"vsan.services.fileservices.wizard.activeDirectoryPage.organizationalUnit.error.startWith\");\n      }\n      if (ou.endsWith(this.ORGANIZATIONAL_UNIT_HIERARCHICAL_SYMBOL)) {\n         return VsanUiUtils.getString(\n               \"vsan.services.fileservices.wizard.activeDirectoryPage.organizationalUnit.error.endWith\");\n      }\n      if (ou.includes(this.ORGANIZATIONAL_UNIT_HIERARCHICAL_SYMBOL)) {\n         // ou with sub-ou, 'vmware/cpbu'\n         const names: string[] = ou.split(this.ORGANIZATIONAL_UNIT_HIERARCHICAL_SYMBOL);\n         if (names.some(name => !name)) {\n            return VsanUiUtils.getString(\n                  \"vsan.services.fileservices.wizard.activeDirectoryPage.organizationalUnit.error.containSlash\");\n         }\n         if (names.some(name => VsanFileShareUtils.INVALID_OU_CHARS.test(name))) {\n            return VsanUiUtils.getString(\n                  \"vsan.services.fileservices.wizard.activeDirectoryPage.organizationalUnit.error.invalidChars\");\n         }\n      } else if (ou.includes(this.OU_SEPARATOR)) {\n         // ou with ad format, 'cn=something,ou=org,dc=example,dc=com'\n         const parts: string[] = ou.split(this.OU_SEPARATOR).map(part => part.toLowerCase());\n         const ouPart: string = parts.find(part => part.startsWith(this.OU_PREFIX));\n         if (!ouPart) {\n            return VsanUiUtils.getString(\n                  \"vsan.services.fileservices.wizard.activeDirectoryPage.organizationalUnit.error.notExists\");\n         }\n         const ouValue: string = ouPart.replace(this.OU_PREFIX, \"\");\n         if (VsanUiUtils.isEmpty(ouValue)) {\n            return VsanUiUtils.getString(\n                  \"vsan.services.fileservices.wizard.activeDirectoryPage.organizationalUnit.error.notExists\");\n         }\n         if (ouValue.length > this.ORGANIZATIONAL_UNIT_VALUE_MAXIMUM_LENGTH) {\n            return VsanUiUtils.getString(\n                  \"vsan.services.fileservices.wizard.activeDirectoryPage.organizationalUnit.error.maxLength\");\n         }\n         if (VsanFileShareUtils.INVALID_OU_CHARS.test(ouValue)) {\n            return VsanUiUtils.getString(\n                  \"vsan.services.fileservices.wizard.activeDirectoryPage.organizationalUnit.error.invalidChars\");\n         }\n      } else if (VsanFileShareUtils.INVALID_OU_CHARS.test(ou)) {\n         return VsanUiUtils.getString(\n               \"vsan.services.fileservices.wizard.activeDirectoryPage.organizationalUnit.error.invalidChars\");\n      }\n      return null;\n   }\n\n   usernameValidator: ValidatorFn = (control: AbstractControl): ValidationErrors => {\n      const username: string = control.value;\n      if (this.getUsernameValidationResult(username)) {\n         return {[this.INVALID_USERNAME_VALIDATION]: {value: username}};\n      }\n      return null;\n   };\n\n   getUsernameValidationResult(username: string): string {\n      if (!username) {\n         return VsanUiUtils.getString(\"vsan.services.fileservices.wizard.activeDirectoryPage.nousername\");\n      }\n      if (!DomainValidationService.VALID_AD_CHARS.test(username)) {\n         return VsanUiUtils.getString(\"vsan.services.fileservices.wizard.activeDirectoryPage.username.invalidChars\");\n      }\n      return null;\n   }\n\n   /**\n    * The suffix should be something like 'example.com' or 'eng.example.com'\n    * true if it follows the pattern, otherwise false\n    */\n   private validateSingleSuffix(suffix: string): boolean {\n      // we allow empty suffixes\n      if (suffix === \"\") {\n         return true;\n      }\n      const suffixValidator: RegExp = /^[\\w.-]+(?:\\.[\\w.-]+)+[\\w\\-._~]+$/;\n      return suffixValidator.test(suffix);\n   }\n\n   maskValidator: ValidatorFn = (control: AbstractControl): ValidationErrors => {\n      const mask: string = control.value;\n      if (this.getMaskValidationResult(mask)) {\n         return {[this.INVALID_MASK_VALIDATION]: {value: mask}};\n      }\n      return null;\n   };\n\n   prefixLengthValidator: ValidatorFn = (control: AbstractControl): ValidationErrors => {\n      const prefixLength: number = control.value;\n      if (this.getPrefixLengthValidationResult(prefixLength)) {\n         return {[this.INVALID_PREFIX_LENGTH_VALIDATION]: {value: prefixLength}};\n      }\n      return null;\n   };\n\n   getMaskValidationResult(mask: string): string {\n      if (!mask) {\n         return VsanUiUtils.getString(\"vsan.services.fileservices.wizard.ipPool.validation.mask.empty\");\n      }\n      if (!this.ipParser.isSubnetMaskValid(mask)) {\n         return VsanUiUtils.getString(\"vsan.services.fileservices.wizard.ipPool.validation.mask.invalid\");\n      }\n      return null;\n   }\n\n   getPrefixLengthValidationResult(prefixLength: number): string {\n      if (prefixLength < 1 || prefixLength > 128) {\n         return VsanUiUtils.getString(\"vsan.services.fileservices.wizard.ipPool.validation.prefixLength.invalid\");\n      }\n      return null;\n   }\n}\n","/* Copyright 2019-2022 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, OnInit, ViewChild} from \"@angular/core\";\nimport {InputProperty, OutputProperty, WizardPage} from \"@component/wizard/flow-metadata\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {OnValidate, PageControls} from \"@component/wizard/flow-wizard.component\";\nimport {ManagedObject} from \"@service/managed-object\";\nimport {Logger} from \"@util/logger\";\nimport {IP} from \"./ip.data\";\nimport {VsanFileServiceHostIpSettings} from \"@generated/vsan-file-service-host-ip-settings\";\nimport {VsanFileServiceCommonConfig} from \"@generated/vsan-file-service-common-config\";\nimport {IpAddressesRequestSpec} from \"@generated/ip-addresses-request-spec\";\nimport {NetworkService} from \"@generated/network-service\";\nimport {IpParserService} from \"@service/ip-parser.service\";\nimport {VsanFileServiceConfigService} from \"@generated/vsan-file-service-config-service\";\nimport {VsanCapabilityData} from \"@generated/vsan-capability-data\";\nimport {AffinitySiteLocation} from \"@generated/affinity-site-location\";\nimport {VsanStretchedClusterService} from \"@generated/vsan-stretched-cluster-service\";\nimport {DomainOrHostData} from \"@generated/domain-or-host-data\";\nimport {FileServiceUtil} from \"../file-service-util\";\nimport {VsanFileServicePrecheckResult} from \"@generated/vsan-file-service-precheck-result\";\nimport {OvfOption, OvfSettings} from \"../shared/file-services-ovf-settings.data\";\nimport {Version} from \"@util/version\";\nimport {\n   AbstractControl,\n   FormArray,\n   FormBuilder,\n   FormControl,\n   FormGroup,\n   ValidationErrors,\n   ValidatorFn,\n   Validators} from \"@angular/forms\";\nimport {ClrForm} from \"@clr/angular\";\nimport {ReferenceWatcher} from \"@util/reference-watcher\";\n\n@WizardPage(\n      VsanUiUtils.getString(\"vsan.services.fileservices.wizard.ipPool.input.pool.title\"),\n      null,\n      [VsanStretchedClusterService],\n)\n@Component({\n   templateUrl: \"file-services-ip-pool-page.html\",\n   styleUrls: [\"file-services-ip-pool-page.scss\"],\n})\nexport class FileServicesIpPoolPageComponent implements OnInit, OnValidate {\n   private static readonly DNS_SEPARATOR: string = \",\";\n   // At the first release, the max container limit is 8\n   private readonly MAX_CONTAINER_NUMBER_EARLY: number = 8;\n   // From 70U1, the limitation is extended to 32\n   private readonly MAX_CONTAINER_NUMBER_EXTEND: number = 32;\n   // From 70U2, the limitation is extended to 64 if largeScaleSupport is on\n   private readonly MAX_CONTAINER_NUMBER_LARGE_SCALE: number = 64;\n\n   private readonly AFFINITY_SITE_SUPPORTED_FS_VERSION: string = \"1.2.0\";\n\n   readonly ISDEFAULT_ELEMENT_NAME: string = \"primary\";\n   readonly IPADDRESS_ELEMENT_NAME: string = \"ipAddress\";\n   readonly DNSNAME_ELEMENT_NAME: string = \"dnsName\";\n   readonly AFFINITY_ELEMENT_NAME: string = \"affinityLocation\";\n\n   readonly REQUIRED_VALIDATION: string = \"required\";\n   readonly IPV4_VALIDATION: string = \"ipv4Required\";\n   readonly IPV6_VALIDATION: string = \"ipv6Required\";\n   readonly IP_INVALID_VALIDATION: string = \"ipInvalid\";\n   readonly IP_DUPLICATE_VALIDATION: string = \"ipDuplicate\";\n   readonly IP_SAME_NETWORK_VALIDATION: string = \"ipNotSameNetwork\";\n   readonly DNS_INVALID_VALIDATION: string = \"dnsInvalid\";\n   readonly DNS_DUPLICATE_VALIDATION: string = \"dnsDuplicate\";\n   readonly DNS_AD_VALIATION: string = \"dnsEndsWithAdDomain\";\n\n   @InputProperty()\n   @OutputProperty()\n   fileServiceConfig: VsanFileServiceCommonConfig;\n\n   @InputProperty()\n   clusterRef: ManagedObject;\n\n   @InputProperty()\n   isEdit: boolean; // isEdit = true, when the user started the Edit workflow\n\n   @InputProperty()\n   pageControls: PageControls;\n\n   @InputProperty()\n   protocol: IP;\n\n   // user can open the wizard to recreate the FS domain if it was not created successfully before.\n   @InputProperty()\n   isRecreateDomain: boolean;\n\n   @InputProperty()\n   numberOfHosts: number;\n\n   @InputProperty()\n   originalDomainName: string;\n\n   @InputProperty(InputProperty.required(false))\n   ovfSettings: OvfSettings;\n\n   @InputProperty()\n   capabilityData: VsanCapabilityData;\n\n   @InputProperty()\n   largeScaleClusterSupported: boolean;\n\n   @OutputProperty()\n   affinitySiteSupported: boolean;\n\n   @OutputProperty()\n   activeDirectorySupported: boolean;\n\n   @InputProperty()\n   @OutputProperty()\n   isVsanStretchedCluster: boolean;\n\n   @InputProperty()\n   @OutputProperty()\n   availableDomains: DomainOrHostData[];\n\n   @OutputProperty()\n   advancedPreflightCheckSupported: boolean;\n\n   @ViewChild(ClrForm)\n   clrForm: ClrForm;\n\n   affinitySites: AffinitySiteLocation[] = [\n         AffinitySiteLocation.PREFERRED_DOMAIN,\n         AffinitySiteLocation.NON_PREFERRED_DOMAIN,\n         AffinitySiteLocation.NONE];\n\n   originalNumOfIpSettings: number = 0;\n   isDnsNameWarningShown: boolean = false;\n   isAffinitySiteWarningShown: boolean = false;\n   ipSettingsForm: FormGroup;\n\n   private editPrimaryIpSupported: boolean;\n\n   constructor(private networkService: NetworkService,\n         private fileService: VsanFileServiceConfigService,\n         private ipParser: IpParserService,\n         private formBuilder: FormBuilder,\n         private refWatcher: ReferenceWatcher) {}\n\n   async ngOnInit(): Promise<void> {\n      this.originalNumOfIpSettings = this.ipSettings.length;\n      if (this.maxNumberOfContainers && !this.originalNumOfIpSettings) {\n         for (let i: number = 0; i < this.maxNumberOfContainers; ++i) {\n            this.ipSettings.push(\n                  VsanFileServiceHostIpSettings.Factory.create(\n                        false, \"\", \"\", AffinitySiteLocation.NONE));\n         }\n         this.originalNumOfIpSettings = this.maxNumberOfContainers;\n         // Make the first IP the default one\n         this.ipSettings[0].isDefault = true;\n      }\n      // We need to display as many IP inputs as the number of the hosts, if there are new hosts added\n      if (this.maxNumberOfContainers > this.originalNumOfIpSettings) {\n         const emptyIpSettings: VsanFileServiceHostIpSettings[] = [];\n         for (let i: number = this.ipSettings.length; i < this.maxNumberOfContainers; ++i) {\n            emptyIpSettings.push(VsanFileServiceHostIpSettings.Factory.create(\n                  false, \"\", \"\", AffinitySiteLocation.NONE));\n         }\n         this.fileServiceConfig.domainConfig.ipSettings = this.ipSettings.concat(emptyIpSettings);\n      }\n\n      try {\n         this.pageControls.setBusyState();\n         this.isAffinitySiteWarningShown = false;\n         const preflightCheckResult: VsanFileServicePrecheckResult =\n               await this.fileService.getPrecheckResult(\n                     ManagedObject.contextObject,\n                     this.isEdit && this.originalDomainName ? this.fileServiceConfig.domainConfig : null,\n                     false);\n         this.affinitySiteSupported = this.isAffinitySiteSupported(preflightCheckResult);\n         this.activeDirectorySupported = preflightCheckResult.activeDirectorySupported;\n         this.editPrimaryIpSupported = preflightCheckResult.editPrimaryIpSupported;\n         this.advancedPreflightCheckSupported = preflightCheckResult.advancedPreflightCheckSupported;\n         this.pageControls.rebuildToc();\n      } catch (err) {\n         Logger.error(err);\n         // Display an error banner on the UI to let user know that the affinity site selection is not available\n         // because of an error. And we should only display it when it's a stretched cluster with available domains,\n         // otherwise we don't display it even the API fails (because right now this check is for affinity site only)\n         this.isAffinitySiteWarningShown = this.isVsanStretchedCluster && !VsanUiUtils.isEmpty(this.availableDomains);\n         this.affinitySiteSupported = false;\n      } finally {\n         this.initFormGroup();\n         this.pageControls.clearBusyState();\n      }\n   }\n\n   invalidate(): void {\n      this.pageControls.rebuildToc();\n   }\n\n   generateIpAddresses = () => {\n      // If the new IP address is valid, populate the IP address for all\n      // consecutive hosts\n      const startingIP: string = this.ipSettingsFormGroups[0].get(this.IPADDRESS_ELEMENT_NAME).value;\n\n      if (!this.protocol.validateAddress(startingIP)) {\n         Logger.warn(\"Empty or invalid starting IP address.\");\n         return;\n      }\n\n      const ipv4RequestSpec: IpAddressesRequestSpec = IpAddressesRequestSpec.Factory.create(\n            startingIP,\n            this.fileServiceConfig.domainConfig.mask,\n            this.ipSettings.length);\n\n      this.pageControls.setBusyState();\n      this.networkService.getConsequentHostAddresses(ipv4RequestSpec)\n            .then((result: string[]) => {\n               this.ipSettingsFormGroups.filter((item: FormGroup, index: number) => index > 0)\n                     .forEach(ipSettings => ipSettings.get(this.IPADDRESS_ELEMENT_NAME).setValue(result.shift()));\n               this.invalidate();\n               this.pageControls.clearBusyState();\n            })\n            .catch((error: string) => {\n               this.pageControls.clearBusyState();\n               this.pageControls.addValidationErrors([error]);\n            });\n   };\n\n   isAddAllowed(): boolean {\n      return this.maxNumberOfContainers > this.ipSettingsFormGroups.length;\n   }\n\n   addIpConfig(): void {\n      const newItem: VsanFileServiceHostIpSettings = VsanFileServiceHostIpSettings.Factory.create(\n            false, \"\", \"\", AffinitySiteLocation.NONE);\n      this.ipSettingsFormControl.push(this.createIpSettingGroup(newItem));\n      this.ipSettings.push(newItem);\n   }\n\n   removeIpConfig(index: number): void {\n      this.ipSettingsFormControl.removeAt(index);\n      this.ipSettings.splice(index, 1);\n   }\n\n   /**\n    * The wizard framework calls this method to check if all the inputs are valid in the current reactive form\n    * This is required for the views which has inline validations. Otherwise you have to add an extra error\n    * message in the validate method to stop the wizard from going to next view.\n    */\n   inlineValidate(): boolean {\n      this.clrForm.markAsTouched();\n      return this.ipSettingsForm.valid;\n   }\n\n   validate(): string[] | Promise<string[]> {\n      this.pageControls.setBusyState();\n      return this.fileService.getPrecheckResult(ManagedObject.contextObject, this.fileServiceConfig.domainConfig, false)\n            .then(result => {\n               if (result.domainConfigIssue) {\n                  return [result.domainConfigIssue];\n               }\n               return null;\n            })\n            .catch(err => {\n               Logger.error(err, \"Failed to validate the configuration on cluster.\");\n               // we should not block the user action if this API fails here, because it could be a fake issue.\n               // If there is really something wrong, the reconfigure FS task eventually fails w/o data loss.\n               // return null here so user is able to go to the next page.\n               return null;\n            })\n            .finally(() => {\n               this.pageControls.clearBusyState();\n            });\n   }\n\n   canRemoveIp = (ipSettingsGroup: FormGroup, index: number): boolean => {\n      // Cannot remove the primary IP\n      const primaryIpControl: FormControl = this.ipSettingsForm.get(this.ISDEFAULT_ELEMENT_NAME) as FormControl;\n      if (primaryIpControl.value === index) {\n         return false;\n      }\n      // Allow this if backend API supports - it didn't in 7.0 release, but it does since 70u1\n      if (this.capabilityData.isIpRemovalInEditModeSupported) {\n         return true;\n      }\n\n      // Keep below checks for 7.0 in linked mode\n\n      // Allow user to remove IPs if the domain is not created successfully\n      if (this.isRecreateDomain) {\n         return true;\n      }\n      // In edit mode, we only allow to remove the ips for new added hosts\n      // The existing IPs are not removable because of the backend API limitation\n      return !(this.isEdit && index < this.originalNumOfIpSettings);\n   };\n\n   /**\n    * Use this method to decide if the ip input element should be displayed\n    */\n   isEditIpAllowed = (ipSettingsGroup: FormGroup, index: number): boolean => {\n      // We allow user to input the IP address when 1) configure the domain,\n      // or 2) edit the domain after adding a new host\n      // or 3) recreate the file service domain\n      // index >= this.originalNumOfIpSettings means this IP input is for the new host\n      if (this.isRecreateDomain) {\n         return true;\n      }\n\n      // In 8.0 we allow user to edit the primary IP of an existing fs domain\n      if (this.editPrimaryIpSupported) {\n         return true;\n      }\n      if (this.isEdit) {\n         // Cannot edit the primary IP in edit mode\n         if (ipSettingsGroup.get(this.ISDEFAULT_ELEMENT_NAME).value) {\n            return false;\n         }\n         // from 7.0 u1, the ip settings can be changed unless it's the primary IP\n         return this.capabilityData.isIpRemovalInEditModeSupported\n               || index >= this.originalNumOfIpSettings;\n      }\n      return true;\n   };\n\n   isChangePrimaryIpAllowed = (): boolean => {\n      // user can change the primary ip if there is no domain yet\n      // Start from 8.0 we allow user to change the primary IP of an existing FS domain\n      return this.editPrimaryIpSupported || this.isCreatingNewDomain;\n   };\n\n   get isCreatingNewDomain(): boolean {\n      return this.isRecreateDomain || !this.isEdit;\n   }\n\n   async lookupDnsNames(): Promise<void> {\n      if (this.hasInvalidIpAddress()) {\n         this.pageControls.addValidationErrors(\n               [VsanUiUtils.getString(\"vsan.services.fileservices.wizard.dnslookup.error\")]);\n         return;\n      }\n      this.pageControls.clearValidationErrors();\n      this.pageControls.setBusyState(VsanUiUtils.getString(\"vsan.loading\"));\n      try {\n         this.isDnsNameWarningShown = false;\n         const dnsNames: string[] =\n               await this.fileService.getDnsNames(this.clusterRef, this.ipAddresses, this.dnsServers);\n         // When the DNS name(s) cannot be obtained based on the IP addresses and DNS servers,\n         // a warning message is displayed.\n         this.isDnsNameWarningShown = VsanUiUtils.isEmpty(dnsNames) || dnsNames.every(name => !name);\n         if (this.isDnsNameWarningShown) {\n            return;\n         }\n\n         this.ipSettingsFormGroups.forEach(ipSettingsGroup => {\n            let fqdn: string = dnsNames.shift();\n            if (fqdn.endsWith(\".\")) {\n               fqdn = fqdn.substr(0, fqdn.length - 1);\n            }\n            ipSettingsGroup.get(this.DNSNAME_ELEMENT_NAME).setValue(fqdn);\n         });\n      } catch (error) {\n         this.isDnsNameWarningShown = true;\n         Logger.error(\"Unable to obtain FQDN based on IP addresses and DNS servers.\");\n      } finally {\n         this.pageControls.clearBusyState();\n      }\n   }\n\n   get dnsServers(): string[] {\n      return this.fileServiceConfig.domainConfig.dnsServers\n            .split(FileServicesIpPoolPageComponent.DNS_SEPARATOR)\n            .map(dns => dns.trim())\n            .filter(dns => dns);\n   }\n\n   isGenerateIpAddressesEnabled(): boolean {\n      // Don't allow 'auto fill' in edit mode unless it's recreating fs domain\n      return this.isCreatingNewDomain && this.isLookupDnsNameEnabled();\n   }\n\n   isLookupDnsNameEnabled(): boolean {\n      return this.ipSettingsFormGroups?.some(formGroup =>\n                  !VsanUiUtils.isEmpty(formGroup.get(this.IPADDRESS_ELEMENT_NAME).value));\n   }\n\n   getAffinitySiteLabel(site: AffinitySiteLocation): string {\n      return FileServiceUtil.getAffinitySiteLabel(site, this.availableDomains);\n   }\n\n   /**\n    * If the ovf file is existing or provided by user, the result from preflight check API is correct\n    * If the ovf file is auto-downloaded, we need to check the file service API version\n    */\n   private isAffinitySiteSupported(preflightCheckResult: VsanFileServicePrecheckResult): boolean {\n      if (this.isEdit\n            || !this.ovfSettings // ovfSettings is null means the current OVF file is latest\n            || [OvfOption.MANUAL, OvfOption.EXISTING].includes(this.ovfSettings.ovfOption)) {\n         return preflightCheckResult.affinitySiteSupported;\n      } else {\n         return new Version(preflightCheckResult.fileServiceVersion)\n               .compare(new Version(this.AFFINITY_SITE_SUPPORTED_FS_VERSION)) >= 0;\n      }\n   }\n\n   private get maxNumberOfContainers(): number {\n      return Math.min(this.numberOfHosts, this.maxSupportedNumberOfContainers);\n   }\n\n   private get maxSupportedNumberOfContainers(): number {\n      if (this.largeScaleClusterSupported) {\n         return this.MAX_CONTAINER_NUMBER_LARGE_SCALE;\n      } else if (this.activeDirectorySupported) {\n         return this.MAX_CONTAINER_NUMBER_EXTEND;\n      } else {\n         return this.MAX_CONTAINER_NUMBER_EARLY;\n      }\n   }\n\n   private initFormGroup(): void {\n      this.ipSettingsForm = this.formBuilder.group({\n         primary: this.ipSettings.findIndex(ipSetting => ipSetting.isDefault),\n         ipSettings: new FormArray(this.ipSettings.map(ipSetting => this.createIpSettingGroup(ipSetting))),\n      });\n      const primaryIpControl: FormControl = this.ipSettingsForm.get(this.ISDEFAULT_ELEMENT_NAME) as FormControl;\n      this.refWatcher.watchSubscriptionRef(primaryIpControl.valueChanges.subscribe(index => {\n         this.ipSettings.forEach(ipSetting => ipSetting.isDefault = false);\n         this.ipSettings[index].isDefault = true;\n         this.invalidate();\n      }));\n      this.ipSettingsFormGroups.forEach(groupControl => {\n         this.refWatcher.watchSubscriptionRef(groupControl.valueChanges.subscribe(values => {\n            // cannot use the index from the above '.forEach' because the index may be out of the array bounds.\n            // In my test, there are 2 groups. After I click the 'Lookup IP' button, it starts from 3.\n            const index: number = this.ipSettingsFormGroups.indexOf(groupControl);\n            this.ipSettings[index].address = values.ipAddress;\n            this.ipSettings[index].dnsName = values.dnsName;\n            if (this.affinitySiteSupported) {\n               this.ipSettings[index].affinityLocation = values.affinityLocation;\n            }\n            this.invalidate();\n         }));\n      });\n   }\n\n   /**\n    * Validate if the IPs are 1) valid ipv4 format, 2) is unique, and 3) is in the same network with gateway/mask\n    * Cannot move to domain-validation.service because 2) & 3) need other domain configurations, which will be\n    * unavailable in domain-validation.service\n    */\n   private ipValidator: ValidatorFn = (control: AbstractControl): ValidationErrors => {\n      if (VsanUiUtils.isEmpty(control.value)) {\n         return null;\n      }\n      if (!this.isIpValid(control.value)) {\n         return {[this.IP_INVALID_VALIDATION]: {value: control.value}};\n      }\n      if (!this.isUniqueIp(control.value)) {\n         return {[this.IP_DUPLICATE_VALIDATION]: {value: control.value}};\n      }\n      if (!this.isIpNetworkValid(control.value)) {\n         return {[this.IP_SAME_NETWORK_VALIDATION]: {value: control.value}};\n      }\n      return null;\n   };\n\n   /**\n    * Validate if the fqdn is 1) unique, 2)doesn't have invalid chars\n    * Cannot move to domain-validation.service because 1) needs other domain configurations, which will be\n    * unavailable in domain-validation.service\n    */\n   private dnsNameValidator: ValidatorFn = (control: AbstractControl): ValidationErrors => {\n      if (VsanUiUtils.isEmpty(control.value)) {\n         return null;\n      }\n      if (!this.isUniqueFqdn(control.value)) {\n         return {[this.DNS_DUPLICATE_VALIDATION]: {value: control.value}};\n      }\n      if (!this.isValidDnsName(control.value)) {\n         return {[this.DNS_INVALID_VALIDATION]: {value: control.value}};\n      }\n      return null;\n   };\n\n   private isIpValid(ip: string): boolean {\n      return this.protocol === IP.v4\n            ? this.ipParser.isIpv4AddressValid(ip)\n            : this.ipParser.isIpv6AddressValid(ip);\n   }\n\n   /**\n    * Check if the ip is unique in the given inputs\n    */\n   private isUniqueIp(ipAddress: string): boolean {\n      const count: number =\n            this.ipSettingsFormGroups\n                  ?.filter(formGroup => formGroup.get(this.IPADDRESS_ELEMENT_NAME).value === ipAddress).length;\n      return count === 1;\n   }\n\n   private isIpNetworkValid(ip: string): boolean {\n      if (this.protocol === IP.v6) {\n         // The network validation (UI and backend) for ipv6 addresses does not include validation for same ipv6 subnets.\n         // Return true to have consistent validations (UI and API), but keep the method to make an easy change if needed.\n         // More info in https://bugzilla.eng.vmware.com/show_bug.cgi?id=2583003\n         return true;\n      }\n      const mask: string = this.fileServiceConfig.domainConfig.mask.trim();\n      const gateway: string = this.fileServiceConfig.domainConfig.gatewayAddress.trim();\n      return this.ipParser.isSameIpv4Subnet(ip, gateway, mask);\n   }\n\n   /**\n    * Check if the fqdn is unique in the given inputs\n    */\n   private isUniqueFqdn(fqdn: string): boolean {\n      const count: number =\n            this.ipSettingsFormGroups\n                  ?.filter(formGroup => formGroup.get(this.DNSNAME_ELEMENT_NAME).value === fqdn).length;\n      return count === 1;\n   }\n\n   private get ipSettings(): VsanFileServiceHostIpSettings[] {\n      return this.fileServiceConfig.domainConfig.ipSettings;\n   }\n\n   private get adDomain(): string {\n      return this.fileServiceConfig.domainConfig.adConfig?.domain?.trim();\n   }\n\n   private static readonly DNS_NAME_REGEX: RegExp =\n         /(?=^.{4,253}$)(^((?!-)[a-zA-Z0-9-]{0,62}[a-zA-Z0-9]\\.)+[a-zA-Z]{2,63}$)/;\n\n   private isValidDnsName(dnsName: string): boolean {\n      return FileServicesIpPoolPageComponent.DNS_NAME_REGEX.test(dnsName);\n   }\n\n   private createIpSettingGroup(ipSettings: VsanFileServiceHostIpSettings): FormGroup {\n      const fields: any = {\n         [this.ISDEFAULT_ELEMENT_NAME]: [ipSettings.isDefault],\n         [this.IPADDRESS_ELEMENT_NAME]: [ipSettings.address, [Validators.required, this.ipValidator]],\n         [this.DNSNAME_ELEMENT_NAME]: [ipSettings.dnsName, [Validators.required, this.dnsNameValidator]],\n      };\n      if (this.affinitySiteSupported) {\n         fields[this.AFFINITY_ELEMENT_NAME] = [ipSettings.affinityLocation];\n      }\n      return this.formBuilder.group(fields);\n   }\n\n   get ipSettingsFormGroups(): FormGroup[] {\n      return this.ipSettingsFormControl?.controls as FormGroup[];\n   }\n\n   private hasInvalidIpAddress(): boolean {\n      return this.ipSettingsFormGroups?.some(formGroup => formGroup.get(this.IPADDRESS_ELEMENT_NAME).invalid);\n   }\n\n   private get ipSettingsFormControl(): FormArray {\n      return this.ipSettingsForm?.controls?.ipSettings as FormArray;\n   }\n\n   private get ipAddresses(): string[] {\n      return this.ipSettingsFormGroups?.map(ipSetting => ipSetting.get(this.IPADDRESS_ELEMENT_NAME).value.trim());\n   }\n}\n","<!--Copyright 2019-2022 VMware, Inc. All rights reserved. -- VMware Confidential-->\n<div id=\"ip-recommendation\">\n   {{\"vsan.services.fileservices.wizard.ipPool.input.pool.recommendation\" | localized}}\n</div>\n<vsan-validation id=\"ip-default\"\n                 alertType=\"info\"\n                 [allowClose]=\"false\"\n                 [isSmall]=\"true\"\n                 [alert]=\"'vsan.services.fileservices.wizard.ipPool.input.default.description' | localized\">\n</vsan-validation>\n<vsan-validation id=\"dns-name-warning\"\n                 *ngIf=\"isDnsNameWarningShown\"\n                 alertType=\"warning\"\n                 [allowClose]=\"false\"\n                 [isSmall]=\"true\"\n                 [alert]=\"'vsan.services.fileservices.wizard.ipPool.input.dns.lookup.warning' | localized\">\n</vsan-validation>\n<vsan-validation id=\"affinity-site-warning\"\n                 *ngIf=\"isAffinitySiteWarningShown\"\n                 alertType=\"warning\"\n                 [allowClose]=\"false\"\n                 [isSmall]=\"true\"\n                 [alert]=\"'vsan.services.fileservices.wizard.ipPool.input.affinitySite.warning' | localized\">\n</vsan-validation>\n<div class=\"clr-row header-row\">\n   <div *ngIf=\"isChangePrimaryIpAllowed()\"\n        class=\"clr-col-1\">\n      {{\"vsan.services.fileservices.wizard.ipPool.input.default.title\" | localized}}\n   </div>\n   <div class=\"header-cell\" [ngClass]=\"affinitySiteSupported && isVsanStretchedCluster? 'clr-col-3' : 'clr-col-5'\">\n      <span>{{\"vsan.services.fileservices.wizard.ipPool.input.ipaddress.title\" | localized}}</span>\n      <clr-signpost *ngIf=\"isGenerateIpAddressesEnabled()\"\n                    [vsan-signpost-title]=\"'vsan.services.fileservices.wizard.ipPool.input.ipaddress.autofill.signpost.label' | localized\">\n         <clr-signpost-content *clrIfOpen [clrPosition]=\"'left-middle'\">\n            {{\"vsan.services.fileservices.wizard.ipPool.input.ipaddress.autofill.description\" | localized}}\n         </clr-signpost-content>\n      </clr-signpost>\n      <button id=\"generate-ip-addresses\"\n              vsan-show-title\n              class=\"btn btn-link btn-sm\"\n              *ngIf=\"isGenerateIpAddressesEnabled()\"\n              (click)=\"generateIpAddresses()\">\n         {{\"vsan.services.fileservices.wizard.ipPool.input.ipaddress.autofill.title\" | localized}}\n      </button>\n   </div>\n   <div class=\"header-cell\" [ngClass]=\"affinitySiteSupported && isVsanStretchedCluster ? 'clr-col-4' : 'clr-col-5'\">\n      <span>{{\"vsan.services.fileservices.wizard.ipPool.input.dns.title\" | localized}}</span>\n      <clr-signpost *ngIf=\"isLookupDnsNameEnabled()\"\n                    [vsan-signpost-title]=\"'vsan.services.fileservices.wizard.ipPool.input.dns.lookup.signpost.label' | localized\">\n         <clr-signpost-content [clrPosition]=\"'left-middle'\" *clrIfOpen>\n            {{\"vsan.services.fileservices.wizard.ipPool.input.dns.lookup.description\" | localized}}\n         </clr-signpost-content>\n      </clr-signpost>\n      <button id=\"lookup-dns\"\n              vsan-show-title\n              class=\"btn btn-link btn-sm\"\n              *ngIf=\"isLookupDnsNameEnabled()\"\n              (click)=\"lookupDnsNames()\">\n         {{\"vsan.services.fileservices.wizard.ipPool.input.dns.lookup.title\" | localized}}\n      </button>\n   </div>\n   <div *ngIf=\"affinitySiteSupported && isVsanStretchedCluster\" class=\"header-cell clr-col-3\">\n      <span>{{\"vsan.fileservices.affinitySite.label\" | localized}}</span>\n      <clr-signpost [vsan-signpost-title]=\"'vsan.fileservices.affinitySite.signpost.label' | localized\">\n         <clr-signpost-content [clrPosition]=\"'left-middle'\" *clrIfOpen>\n            {{\"vsan.fileservices.configure.affinitySite.signpost\" | localized}}\n         </clr-signpost-content>\n      </clr-signpost>\n   </div>\n</div>\n<form *ngIf=\"ipSettingsForm\" [formGroup]=\"ipSettingsForm\" clrForm clrLayout=\"horizontal\">\n   <div *ngFor=\"let ipSettingsGroup of ipSettingsFormGroups; let i=index\"\n        id=\"ip-table-row-{{i}}\"\n        [attr.aria-label]=\"'vsan.services.fileservices.wizard.ipPool.input.ipaddress.title' | localized\"\n        role=\"group\"\n        class=\"clr-row\">\n      <clr-radio-wrapper *ngIf=\"isChangePrimaryIpAllowed()\"\n                         class=\"clr-col-1 primary-ip-selection\">\n         <input id=\"default-ip-{{i}}\"\n                clrRadio\n                type=\"radio\"\n                formControlName=\"{{ISDEFAULT_ELEMENT_NAME}}\"\n                [value]=\"i\"\n                [attr.aria-label]=\"'vsan.services.fileservices.primaryIp' | localized\"/>\n         <label for=\"default-ip-{{i}}\"></label>\n      </clr-radio-wrapper>\n      <div [ngClass]=\"affinitySiteSupported && isVsanStretchedCluster? 'clr-col-3' : 'clr-col-5'\"\n           [formGroup]=\"ipSettingsGroup\">\n         <clr-input-container *ngIf=\"isEditIpAllowed(ipSettingsGroup, i) else ip_text\"\n                              class=\"control-full-width\">\n            <input id=\"ip-{{i}}\"\n                   clrInput\n                   type=\"text\"\n                   formControlName=\"{{IPADDRESS_ELEMENT_NAME}}\"\n                   [attr.aria-label]=\"'vsan.services.fileservices.wizard.ipPool.input.ipaddress.title' | localized\"/>\n            <clr-control-error *clrIfError=\"REQUIRED_VALIDATION\">\n               {{\"vsan.services.fileservices.wizard.ipPool.validation.ipSettings.emptyAddress\" | localized}}\n            </clr-control-error>\n            <clr-control-error *clrIfError=\"IP_INVALID_VALIDATION\">\n               {{\"vsan.services.fileservices.wizard.ipPool.validation.ipSettings.invalidAddress\" | localized}}\n            </clr-control-error>\n            <clr-control-error *clrIfError=\"IP_DUPLICATE_VALIDATION\">\n               {{\"vsan.services.fileservices.wizard.ipPool.validation.ipSettings.duplicateAddresses\" | localized}}\n            </clr-control-error>\n            <clr-control-error *clrIfError=\"IP_SAME_NETWORK_VALIDATION\">\n               {{\"vsan.services.fileservices.wizard.ipPool.validation.ipSettings.differentNetworks\" | localized}}\n            </clr-control-error>\n         </clr-input-container>\n         <ng-template #ip_text>\n            <span *ngIf=\"!capabilityData?.isIpRemovalInEditModeSupported\"\n                  class=\"ip-index\">{{i + 1}}.</span>\n            <span class=\"ip-column ip-text\">{{ipSettingsGroup.get(IPADDRESS_ELEMENT_NAME).value}}</span>\n         </ng-template>\n         <span *ngIf=\"!isChangePrimaryIpAllowed() && ipSettingsGroup.get(ISDEFAULT_ELEMENT_NAME).value\">\n            {{\"vsan.services.fileservices.wizard.rtc.default\" | localized}}\n         </span>\n      </div>\n      <clr-input-container *ngIf=\"isEditIpAllowed(ipSettingsGroup, i) else fqdn_text\"\n                           [formGroup]=\"ipSettingsGroup\"\n                           class=\"control-full-width\"\n                           [ngClass]=\"affinitySiteSupported && isVsanStretchedCluster ? 'clr-col-4' : 'clr-col-5'\">\n         <input id=\"dns-{{i}}\"\n                clrInput\n                type=\"text\"\n                formControlName=\"dnsName\"/>\n         <clr-control-error *clrIfError=\"REQUIRED_VALIDATION\">\n            {{\"vsan.services.fileservices.wizard.ipPool.validation.ipSettings.emptyDNS\" | localized}}\n         </clr-control-error>\n         <clr-control-error *clrIfError=\"DNS_INVALID_VALIDATION\">\n            {{\"vsan.services.fileservices.wizard.ipPool.validation.ipSettings.invalidDns\" | localized}}\n         </clr-control-error>\n         <clr-control-error *clrIfError=\"DNS_DUPLICATE_VALIDATION\">\n            {{\"vsan.services.fileservices.wizard.ipPool.validation.ipSettings.duplicateDnsNames\" | localized}}\n         </clr-control-error>\n         <clr-control-error *clrIfError=\"DNS_AD_VALIATION\">\n            {{\"vsan.services.fileservices.wizard.ipPool.input.dns.domain.error\" | localized}}\n         </clr-control-error>\n      </clr-input-container>\n      <ng-template #fqdn_text>\n         <span class=\"clr-col-4 fqdn-text\">{{ipSettingsGroup.get(DNSNAME_ELEMENT_NAME).value}}</span>\n      </ng-template>\n      <ng-container *ngIf=\"affinitySiteSupported && isVsanStretchedCluster\">\n         <clr-select-container *ngIf=\"isEditIpAllowed(ipSettingsGroup, i) else affinitySite_text\"\n                               [formGroup]=\"ipSettingsGroup\"\n                               class=\"clr-col-3\">\n            <select clrSelect\n                    id=\"affinity-location-{{i}}\"\n                    formControlName=\"{{AFFINITY_ELEMENT_NAME}}\">\n               <option *ngFor=\"let site of affinitySites\"\n                       [ngValue]=\"site\">\n                  {{getAffinitySiteLabel(site)}}\n               </option>\n            </select>\n         </clr-select-container>\n         <ng-template #affinitySite_text>\n            <span class=\"clr-col-3 fqdn-text\">\n               {{getAffinitySiteLabel(ipSettingsGroup.get(AFFINITY_ELEMENT_NAME).value)}}\n            </span>\n         </ng-template>\n      </ng-container>\n      <div class=\"remove-ip-btn-container\">\n         <button id=\"remove-ip-config-{{i}}\"\n                 *ngIf=\"canRemoveIp(ipSettingsGroup, i)\"\n                 type=\"button\"\n                 class=\"btn btn-icon btn-link\"\n                 title=\"{{'vsan.common.remove' | localized}}\"\n                 (click)=\"removeIpConfig(i)\">\n            <clr-icon shape=\"times-circle\" [attr.alt]=\"'vsan.common.remove' | localized\"></clr-icon>\n         </button>\n      </div>\n   </div>\n   <button id=\"add-ip-config\"\n           type=\"button\"\n           *ngIf=\"isAddAllowed()\"\n           class=\"btn btn-icon btn-link clr-col-1\"\n           [class.btn-add-ip]=\"isCreatingNewDomain\"\n           title=\"{{'vsan.common.add' | localized}}\"\n           (click)=\"addIpConfig()\">\n      <clr-icon shape=\"plus-circle\" [attr.alt]=\"'vsan.common.add' | localized\"></clr-icon>\n   </button>\n</form>\n","/* Copyright 2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {NgModule} from \"@angular/core\";\nimport {RouterModule, Routes} from \"@angular/router\";\nimport {CommonModule} from \"@angular/common\";\nimport {FormsModule, ReactiveFormsModule} from \"@angular/forms\";\nimport {ClarityModule} from \"@clr/angular\";\nimport {FileServicesConfigureWizardComponent} from \"./file-services-configure-wizard.component\";\nimport {FlowWizardModule} from \"@component/wizard/flow-wizard.module\";\nimport {FileServicesIntroductionPageComponent} from \"./file-services-introduction-page.component\";\nimport {FileServicesDomainPageComponent} from \"./file-services-domain-page.component\";\nimport {FileServicesNetworkPageComponent} from \"./file-services-network-page.component\";\nimport {FileServicesIpPoolPageComponent} from \"./file-services-ip-pool-page.component\";\nimport {FileServicesFileAnalyticsPageComponent} from \"./file-services-file-analytics-page.component\";\nimport {FileServicesReviewPage} from \"./file-services-review-page.component\";\nimport {FileServicesOvfPageComponent} from \"./file-services-ovf-page.component\";\nimport {DomainValidationService} from \"./domain-validation.service\";\nimport {ValidationModule} from \"@component/validation/validation.module\";\nimport {CommonDirectiveModule} from \"@directive/common-directive.module\";\nimport {CommonPipeModule} from \"@pipe/common-pipe.module\";\nimport {FileServicesCommonModule} from \"../shared/file-services-common.module\";\nimport {InventoryBrowserModule} from \"@component/inventory/inventory-browser.module\";\nimport {IpParserService} from \"@service/ip-parser.service\";\nimport {ReferenceWatcher} from \"@util/reference-watcher\";\n\nconst fileServicesRoutes: Routes = [\n   {\n      path: \"\",\n      component: FileServicesConfigureWizardComponent,\n   }];\n\n@NgModule({\n   imports: [\n      CommonModule,\n      FormsModule,\n      ReactiveFormsModule,\n      ClarityModule,\n      FlowWizardModule,\n      ValidationModule,\n      CommonPipeModule,\n      CommonDirectiveModule,\n      InventoryBrowserModule,\n      FileServicesCommonModule,\n      RouterModule.forChild(fileServicesRoutes),\n   ],\n   declarations: [\n      FileServicesConfigureWizardComponent,\n      FileServicesIntroductionPageComponent,\n      FileServicesDomainPageComponent,\n      FileServicesNetworkPageComponent,\n      FileServicesIpPoolPageComponent,\n      FileServicesOvfPageComponent,\n      FileServicesFileAnalyticsPageComponent,\n      FileServicesReviewPage,\n   ],\n   entryComponents: [\n      FileServicesIntroductionPageComponent,\n      FileServicesDomainPageComponent,\n      FileServicesNetworkPageComponent,\n      FileServicesIpPoolPageComponent,\n      FileServicesOvfPageComponent,\n      FileServicesFileAnalyticsPageComponent,\n      FileServicesReviewPage,\n   ],\n   providers: [\n      DomainValidationService,\n      IpParserService,\n      ReferenceWatcher,\n   ],\n})\nexport class FileServicesWizardModule {\n}\n","/* Copyright 2017-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, OnInit} from \"@angular/core\";\nimport {PageSet} from \"@component/wizard/flow-wizard.component\";\nimport {ActiveDirectoryConfig} from \"@generated/active-directory-config\";\nimport {FileAnalyticsConfigService} from \"@generated/file-analytics-config-service\";\nimport {VsanFileServiceCommonConfig} from \"@generated/vsan-file-service-common-config\";\nimport {VsanFileServiceConfigService} from \"@generated/vsan-file-service-config-service\";\nimport {VsanFileServiceDomain} from \"@generated/vsan-file-service-domain\";\nimport {VsanFileServiceIpType} from \"@generated/vsan-file-service-ip-type\";\nimport {VsanFileServiceOvf} from \"@generated/vsan-file-service-ovf\";\nimport {FileServicesConfigureWizardModalContext} from \"@navigation/context/file-services-configure-wizard-modal-context.data\";\nimport {Network} from \"@service/client/dataservice/data-service-property\";\nimport {DataServiceClient} from \"@service/client/dataservice/data-service.service\";\nimport {ManagedObject} from \"@service/managed-object\";\nimport {WebPlatform} from \"@util/platform\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {FileServicesDomainPageComponent} from \"./file-services-domain-page.component\";\nimport {FileServicesFileAnalyticsPageComponent} from \"./file-services-file-analytics-page.component\";\nimport {FileServicesIntroductionPageComponent} from \"./file-services-introduction-page.component\";\nimport {FileServicesIpPoolPageComponent} from \"./file-services-ip-pool-page.component\";\nimport {FileServicesNetworkPageComponent} from \"./file-services-network-page.component\";\nimport {FileServicesOvfPageComponent} from \"./file-services-ovf-page.component\";\nimport {FileServicesReviewPage} from \"./file-services-review-page.component\";\n\n@Component({\n   selector: \"vsan-file-services-wizard\",\n   template: `\n      <vsan-flow-wizard\n            [title]=\"title\"\n            [pageSets]=\"pages\"\n            [contextProperties]=\"context\"\n            [startingTaskProperty]=\"taskProperty\"\n            [services]=\"services\">\n      </vsan-flow-wizard>`,\n})\nexport class FileServicesConfigureWizardComponent implements OnInit {\n   private readonly DEFAULT_PREFIX_LENGTH: number = 64;\n\n   services: any[] = [VsanFileServiceConfigService, FileAnalyticsConfigService];\n   pages: PageSet[];\n   context: any = {};\n   title: string;\n   taskProperty: string = \"configureFileService\";\n\n   constructor(private fileService: VsanFileServiceConfigService,\n         private dataService: DataServiceClient) {\n   }\n\n   async ngOnInit(): Promise<void> {\n      const modalContext: FileServicesConfigureWizardModalContext =\n            VsanUiUtils.getModalContext() as FileServicesConfigureWizardModalContext;\n\n      let downloadingOvf: VsanFileServiceOvf;\n      if (!modalContext.isEdit && !modalContext.hasLastestOvf) {\n         downloadingOvf = await this.getDownloadingOvf(modalContext);\n      }\n      this.createInitialContext(modalContext, downloadingOvf ? downloadingOvf.downloadTask : null);\n      this.initWizardPages(modalContext, downloadingOvf);\n   }\n\n   private async getDownloadingOvf(modalContext: FileServicesConfigureWizardModalContext): Promise<VsanFileServiceOvf> {\n      try {\n         const ovfs: VsanFileServiceOvf[] = await this.fileService.getRegisteredOvfs(modalContext.clusterRef);\n         return ovfs.find(ovf => !!ovf.downloadTask);\n      } catch (err) {\n         return null;\n      }\n   }\n\n   private async initWizardPages(modalContext: FileServicesConfigureWizardModalContext,\n         downloadingOvf: VsanFileServiceOvf): Promise<void> {\n      const pageSet: any[] = [];\n      if (modalContext.isEdit) {\n         this.title = VsanUiUtils.getString(\"vsan.services.fileservices.wizard.edit.title\");\n         this.taskProperty = \"editFileServiceConfig\";\n      } else {\n         this.title = VsanUiUtils.getString(\"vsan.services.fileservices.wizard.configure.title\");\n         if (!this.context.isReEnable) {\n            pageSet.push(FileServicesIntroductionPageComponent);\n         }\n      }\n      // assign a11y title here due to additional title logic\n      WebPlatform.setAccessibilityTitle(this.title);\n      // Display the ovf page when the current OVF version is not the latest\n      if (!modalContext.isEdit && !downloadingOvf && !modalContext.hasLastestOvf) {\n         pageSet.push(FileServicesOvfPageComponent);\n      }\n      if (!this.context.isReEnable) {\n         pageSet.push(FileServicesNetworkPageComponent);\n         pageSet.push(FileServicesDomainPageComponent);\n         pageSet.push(FileServicesIpPoolPageComponent);\n      } else if (!await this.networkExists(modalContext.config.network)) {\n         pageSet.push(FileServicesNetworkPageComponent);\n      }\n      if (this.context.capabilityData.isFileAnalyticsSupported) {\n         pageSet.push(FileServicesFileAnalyticsPageComponent);\n      }\n      pageSet.push(FileServicesReviewPage);\n\n      this.pages = [new PageSet(pageSet)];\n   }\n\n   private createInitialContext(modalContext: FileServicesConfigureWizardModalContext,\n         ovfDownloadTask: ManagedObject = null): void {\n      let config: VsanFileServiceCommonConfig = modalContext.config;\n      if (!config) {\n         config = VsanFileServiceCommonConfig.Factory.create(null, null, false, false);\n      }\n\n      if (!config.domainConfig) {\n         config.domainConfig = this.createEmptyDomainConfig();\n      }\n      if (!config.domainConfig.adConfig) {\n         config.domainConfig.adConfig = this.createEmptyActiveDirectoryConfig();\n      }\n      this.context.clusterRef = modalContext.clusterRef;\n      this.context.fileServiceConfig = config;\n      this.context.isEdit = modalContext.isEdit;\n      this.context.capabilityData = modalContext.capabilityData;\n      this.context.isRecreateDomain = this.context.isEdit && !config.domainConfig.name;\n      if (ovfDownloadTask) {\n         this.context.downloadTask = ovfDownloadTask;\n      }\n      // Use this attr to indicate if we are going to enable file service w/ an existing FS domain\n      this.context.isReEnable = !this.context.isEdit\n            && !!config.domainConfig.name\n            && VsanUiUtils.isEmpty(modalContext.lastDomainConfigErrors);\n      this.context.fileSharesCount = modalContext.fileSharesCount;\n      this.context.ovfVersion = modalContext.ovfVersion;\n      this.context.largeScaleClusterSupported = modalContext.largeScaleClusterSupported;\n      this.context.hasAdConfigured = modalContext.hasAdConfigured;\n   }\n\n   private createEmptyDomainConfig(): VsanFileServiceDomain {\n      return VsanFileServiceDomain.Factory.create(\n            \"\",\n            null,\n            this.DEFAULT_PREFIX_LENGTH,\n            \"\",\n            \"\",\n            \"\",\n            \"\",\n            \"\",\n            VsanFileServiceIpType.V4,\n            []);\n   }\n\n   private createEmptyActiveDirectoryConfig(): ActiveDirectoryConfig {\n      return ActiveDirectoryConfig.Factory.create(\"\", \"\", \"\", \"\");\n   }\n\n   /**\n    * SR 2664146: UI needs to check if the network still exists in the re-enable case.\n    * If not, UI will allow user to choose the network again\n    */\n   private async networkExists(networkRef: ManagedObject): Promise<boolean> {\n      if (!networkRef) {\n         return false;\n      }\n      const networkName: string = await this.dataService.getProperty(Network.name, networkRef);\n      return !!networkName;\n   }\n}\n","/* Copyright 2017-2022 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, ViewChild} from \"@angular/core\";\nimport {\n   AbstractControl,\n   FormBuilder,\n   FormControl,\n   FormGroup,\n   ValidationErrors,\n   ValidatorFn,\n   Validators,\n} from \"@angular/forms\";\nimport {ClrForm} from \"@clr/angular\";\nimport {InputProperty, OutputProperty, WizardPage} from \"@component/wizard/flow-metadata\";\nimport {OnValidate, PageControls} from \"@component/wizard/flow-wizard.component\";\nimport {ActiveDirectoryConfig} from \"@generated/active-directory-config\";\nimport {VsanCapabilityData} from \"@generated/vsan-capability-data\";\nimport {VsanFileServiceCommonConfig} from \"@generated/vsan-file-service-common-config\";\nimport {VsanFileServiceConfigService} from \"@generated/vsan-file-service-config-service\";\nimport {VsanFileServicePrecheckResult} from \"@generated/vsan-file-service-precheck-result\";\nimport {IpParserService} from \"@service/ip-parser.service\";\nimport {ManagedObject} from \"@service/managed-object\";\nimport {Logger} from \"@util/logger\";\nimport {ReferenceWatcher} from \"@util/reference-watcher\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {OvfOption, OvfSettings} from \"../shared/file-services-ovf-settings.data\";\nimport {DomainValidationService} from \"./domain-validation.service\";\n\n@WizardPage(\n      VsanUiUtils.getString(\"vsan.services.fileservices.wizard.activeDirectoryPage.title\"),\n)\n@Component({\n   templateUrl: \"file-services-domain-page.html\",\n   styleUrls: [\"file-services-domain-page.scss\"],\n})\nexport class FileServicesDomainPageComponent implements OnValidate {\n   private static readonly PASSWORD_PLACEHOLDER: string = \"********\";\n   private readonly AD_SUPPORTED_FS_VERSION: string = \"1.1.0\";\n\n   readonly DOMAIN_NAME_ELEMENT_NAME: string = \"domain-name\";\n   readonly DNS_SERVERS_ELEMENT_NAME: string = \"dns-servers\";\n   readonly DNS_SUFFIX_ELEMENT_NAME: string = \"dns-suffix\";\n   readonly ENABLE_AD_ELEMENT_NAME: string = \"enable-active-directory\";\n   readonly AD_DOMAIN_NAME_ELEMENT_NAME: string = \"ad-domain\";\n   readonly OU_ELEMENT_NAME: string = \"organizational-unit\";\n   readonly AD_USERNAME_ELEMENT_NAME: string = \"username\";\n   readonly AD_PASSWORD_ELEMENT_NAME: string = \"password\";\n\n   @InputProperty()\n   private fileSharesCount: number;\n\n   @InputProperty()\n   @OutputProperty()\n   fileServiceConfig: VsanFileServiceCommonConfig;\n\n   @InputProperty()\n   isEdit: boolean; // isEdit = true, when the user started the Edit workflow\n\n   @InputProperty()\n   pageControls: PageControls;\n\n   @InputProperty(InputProperty.required(false))\n   ovfSettings: OvfSettings;\n\n   @InputProperty()\n   capabilityData: VsanCapabilityData;\n\n   @InputProperty()\n   hasAdConfigured: boolean;\n\n   @OutputProperty()\n   originalDomainName: string;\n\n   @OutputProperty()\n   isAdCredentialChanged: boolean = false;\n\n   @OutputProperty()\n   activeDirectorySupported: boolean;\n\n   @OutputProperty()\n   get isRemovingActiveDirectory(): boolean {\n      return this.hasAdConfigured && !this.activeDirectoryEnabled;\n   }\n\n   @ViewChild(ClrForm)\n   clrForm: ClrForm;\n\n   dnsServerAvailable: boolean;\n\n   // Use this flag to control if user can change the checkbox and the domain input\n   allowEditActiveDirectory: boolean;\n\n   domainForm: FormGroup;\n\n   loading: boolean;\n\n   private adConfigBackup: ActiveDirectoryConfig;\n\n   get activeDirectoryEnabled(): boolean {\n      return this._activeDirectoryEnabled;\n   }\n\n   set activeDirectoryEnabled(val: boolean) {\n      this._activeDirectoryEnabled = val;\n      if (!val) {\n         this.adConfigBackup = this.fileServiceConfig.domainConfig.adConfig;\n         this.fileServiceConfig.domainConfig.adConfig = ActiveDirectoryConfig.Factory.create(\"\", \"\", \"\", \"\");\n      } else {\n         this.fileServiceConfig.domainConfig.adConfig = this.adConfigBackup;\n      }\n      this.resetAdInputValues();\n   }\n\n   private _activeDirectoryEnabled: boolean;\n\n   constructor(private ipParser: IpParserService,\n         private fileServiceConfigService: VsanFileServiceConfigService,\n         public validationService: DomainValidationService,\n         private formBuilder: FormBuilder,\n         private refWatcher: ReferenceWatcher) {\n   }\n\n   async ngOnInit(): Promise<void> {\n      this.pageControls.setBusyState();\n      this.originalDomainName = this.fileServiceConfig.domainConfig.name;\n      this.dnsServerAvailable = this.capabilityData.isNfsv3ProtocolSupported;\n      this.adConfigBackup = this.fileServiceConfig.domainConfig.adConfig;\n      this.activeDirectoryEnabled = !!this.adDomain;\n      this.allowEditActiveDirectory = !this.activeDirectoryEnabled || !this.fileSharesCount;\n      try {\n         this.loading = true;\n         const preflightCheckResult: VsanFileServicePrecheckResult =\n               await this.fileServiceConfigService.getPrecheckResult(\n                     ManagedObject.contextObject,\n                     this.isEdit && this.originalDomainName ? this.fileServiceConfig.domainConfig : null, false);\n         this.activeDirectorySupported = this.isActiveDirectorySupported(preflightCheckResult);\n      } catch (err) {\n         Logger.error(err);\n         this.activeDirectorySupported = false;\n      } finally {\n         this.pageControls.clearBusyState();\n         this.initFormGroup();\n         this.loading = false;\n      }\n   }\n\n   invalidate(): void {\n      this.pageControls.rebuildToc();\n   }\n\n   adCredentialChanged(): void {\n      this.isAdCredentialChanged = true;\n      this.addPasswordValidator();\n   }\n\n   get passwordPlaceholder(): string {\n      return this.isEdit && this.hasAdConfigured ?\n            FileServicesDomainPageComponent.PASSWORD_PLACEHOLDER : \"\";\n   }\n\n   /**\n    * The wizard framework calls this method to check if all the inputs are valid in the current reactive form\n    * This is required for the views which has inline validations. Otherwise you have to add an extra error\n    * message in the validate method to stop the wizard from going to next view.\n    */\n   inlineValidate(): boolean {\n      this.clrForm.markAsTouched();\n      return this.domainForm.valid;\n   }\n\n   validate(): string[] | Promise<string[]> {\n      // Return null directly because we only have inline validation in this view\n      return null;\n   }\n\n   get editDomainWarning(): string {\n      return this.originalDomainName\n            ? VsanUiUtils.getString(\"vsan.services.fileservices.wizard.activeDirectoryPage.warning\")\n            : VsanUiUtils.getString(\"vsan.services.fileservices.wizard.activeDirectoryPage.noDomain\");\n   }\n\n   private get adDomain(): string {\n      return this.fileServiceConfig.domainConfig.adConfig.domain;\n   }\n\n   private get adUsername(): string {\n      return this.fileServiceConfig.domainConfig.adConfig.username;\n   }\n\n   /**\n    * If the ovf file is existing or provided by user, the result from preflight check API is correct\n    * If the ovf file is auto-downloaded, we need to check the file service API version\n    */\n   private isActiveDirectorySupported(preflightCheckResult: VsanFileServicePrecheckResult): boolean {\n      if (this.isEdit\n            || !this.ovfSettings\n            || [OvfOption.MANUAL, OvfOption.EXISTING].includes(this.ovfSettings.ovfOption)) {\n         return preflightCheckResult.activeDirectorySupported;\n      } else {\n         return preflightCheckResult.fileServiceVersion >= this.AD_SUPPORTED_FS_VERSION;\n      }\n   }\n\n   private initFormGroup(): void {\n      const formSettings: any = {\n         [this.DOMAIN_NAME_ELEMENT_NAME]: new FormControl(\n               this.originalDomainName,\n               [this.validationService.domainNameValidator]),\n      };\n\n      if (this.dnsServerAvailable) {\n         formSettings[this.DNS_SERVERS_ELEMENT_NAME] = new FormControl(\n               this.fileServiceConfig.domainConfig.dnsServers,\n               [this.validationService.dnsServerValidator]);\n         formSettings[this.DNS_SUFFIX_ELEMENT_NAME] = new FormControl(\n               this.fileServiceConfig.domainConfig.dnsSuffixes,\n               [this.validationService.dnsSuffixValidator]);\n      }\n      if (this.activeDirectorySupported) {\n         formSettings[this.ENABLE_AD_ELEMENT_NAME] = new FormControl(\n               {disabled: !this.allowEditActiveDirectory, value: this.activeDirectoryEnabled});\n         formSettings[this.AD_DOMAIN_NAME_ELEMENT_NAME] = new FormControl(\n               {disabled: this.hasAdConfigured, value: this.adDomain},\n               [this.adDomainSuffixValidator]);\n         formSettings[this.OU_ELEMENT_NAME] = new FormControl(\n               {\n                  disabled: this.hasAdConfigured,\n                  value: this.fileServiceConfig.domainConfig.adConfig.organizationalUnit,\n               },\n               [Validators.maxLength(255), this.validationService.ouValidator]);\n         formSettings[this.AD_USERNAME_ELEMENT_NAME] = new FormControl(\n               {disabled: this.hasAdConfigured, value: this.fileServiceConfig.domainConfig.adConfig.username},\n               [this.validationService.usernameValidator]);\n         formSettings[this.AD_PASSWORD_ELEMENT_NAME] = new FormControl(\n               this.fileServiceConfig.domainConfig.adConfig.password,\n               this.hasAdConfigured ? null : [Validators.required]);\n      }\n      this.domainForm = this.formBuilder.group(formSettings);\n      this.bindControlValues();\n   }\n\n   private adDomainSuffixValidator: ValidatorFn = (control: AbstractControl): ValidationErrors => {\n      const adDomain: string = control.value;\n      if (this.getAdDomainValidationResult(adDomain)) {\n         return {[this.validationService.INVALID_AD_DOMAIN_VALIDATION]: {value: adDomain}};\n      }\n      return null;\n   };\n\n   getAdDomainValidationResult(adDomain: string): string {\n      const result: string = this.validationService.getAdDomainValidationResult(adDomain);\n      return result\n            ? result\n            : this.getAdDomainSuffixCheckResult(adDomain);\n   }\n\n   private getAdDomainSuffixCheckResult(adDomain: string): string {\n      if (this.fileServiceConfig.domainConfig.dnsSuffixes.split(\",\")\n            .map(suffix => suffix.trim())\n            .includes(adDomain)) {\n         return null;\n      }\n      return VsanUiUtils.getString(\"vsan.services.fileservices.wizard.activeDirectoryPage.suffix.noAD\");\n   }\n\n   private toggleAdValidation(enabled: boolean): void {\n      if (!enabled) {\n         this.adDomainNameControl.disable();\n         this.organizationalUnitControl.disable();\n         this.adUsernameControl.disable();\n         this.adPasswordControl.disable();\n         this.adPasswordControl.setValidators([]);\n      } else if (!this.hasAdConfigured) {\n         // don't allow to change AD settings if it's original enabled\n         this.adDomainNameControl.enable();\n         this.organizationalUnitControl.enable();\n         this.adUsernameControl.enable();\n         this.adPasswordControl.enable();\n         this.addPasswordValidator();\n      }\n   }\n\n   private resetAdInputValues(): void {\n      if (!this.domainForm) {\n         return;\n      }\n      const adConfig: ActiveDirectoryConfig = this.fileServiceConfig.domainConfig.adConfig;\n      this.adDomainNameControl.setValue(adConfig.domain);\n      this.organizationalUnitControl.setValue(adConfig.organizationalUnit);\n      this.adUsernameControl.setValue(adConfig.username);\n      this.adPasswordControl.setValue(adConfig.password);\n\n   }\n\n   private addPasswordValidator(): void {\n      this.adPasswordControl.setValidators([Validators.required]);\n   }\n\n   private bindControlValues(): void {\n      this.refWatcher.watchSubscriptionRef(this.domainForm.valueChanges.subscribe(whatever => this.invalidate()));\n      this.refWatcher.watchSubscriptionRef(\n            this.domainControl.valueChanges.subscribe(val => this.fileServiceConfig.domainConfig.name = val));\n      if (this.dnsServerAvailable) {\n         this.refWatcher.watchSubscriptionRef(\n               this.dnsControl.valueChanges.subscribe(val => this.fileServiceConfig.domainConfig.dnsServers = val));\n         this.refWatcher.watchSubscriptionRef(\n               this.dnsSuffixControl.valueChanges.subscribe(val => this.fileServiceConfig.domainConfig.dnsSuffixes = val));\n      }\n      if (this.activeDirectorySupported) {\n         this.refWatcher.watchSubscriptionRef(\n               this.enableAdCheckboxControl.valueChanges.subscribe(checked => {\n                  this.activeDirectoryEnabled = checked;\n                  this.toggleAdValidation(checked);\n               }));\n         this.refWatcher.watchSubscriptionRef(\n               this.adDomainNameControl.valueChanges\n                     .subscribe(val => this.fileServiceConfig.domainConfig.adConfig.domain = val));\n         this.refWatcher.watchSubscriptionRef(\n               this.organizationalUnitControl.valueChanges\n                     .subscribe(val => {\n                        if (val !== this.fileServiceConfig.domainConfig.adConfig.organizationalUnit) {\n                           this.fileServiceConfig.domainConfig.adConfig.organizationalUnit = val;\n                           this.adCredentialChanged();\n                        }\n                     }));\n         this.refWatcher.watchSubscriptionRef(\n               this.adUsernameControl.valueChanges\n                     .subscribe(val => {\n                        if (val !== this.fileServiceConfig.domainConfig.adConfig.username) {\n                           this.fileServiceConfig.domainConfig.adConfig.username = val;\n                           this.adCredentialChanged();\n                        }\n                     }));\n         this.refWatcher.watchSubscriptionRef(\n               this.adPasswordControl.valueChanges\n                     .subscribe(val => {\n                        if (val) {\n                           this.fileServiceConfig.domainConfig.adConfig.password = val;\n                           this.adCredentialChanged();\n                        }\n                     }));\n      }\n   }\n\n   get domainControl(): FormControl {\n      return this.domainForm.get(this.DOMAIN_NAME_ELEMENT_NAME) as FormControl;\n   }\n\n   get dnsControl(): FormControl {\n      return this.domainForm.get(this.DNS_SERVERS_ELEMENT_NAME) as FormControl;\n   }\n\n   get dnsSuffixControl(): FormControl {\n      return this.domainForm.get(this.DNS_SUFFIX_ELEMENT_NAME) as FormControl;\n   }\n\n   get enableAdCheckboxControl(): FormControl {\n      return this.domainForm.get(this.ENABLE_AD_ELEMENT_NAME) as FormControl;\n   }\n\n   get adDomainNameControl(): FormControl {\n      return this.domainForm.get(this.AD_DOMAIN_NAME_ELEMENT_NAME) as FormControl;\n   }\n\n   get organizationalUnitControl(): FormControl {\n      return this.domainForm.get(this.OU_ELEMENT_NAME) as FormControl;\n   }\n\n   get adUsernameControl(): FormControl {\n      return this.domainForm.get(this.AD_USERNAME_ELEMENT_NAME) as FormControl;\n   }\n\n   get adPasswordControl(): FormControl {\n      return this.domainForm.get(this.AD_PASSWORD_ELEMENT_NAME) as FormControl;\n   }\n}\n","<!-- Copyright 2020-2021 VMware, Inc. All rights reserved. -- VMware Confidential -->\n<vsan-edit-file-analytics [(fileServiceConfig)]=\"fileServiceConfig\"\n                          [isFileAnalyticsRuntimeSupported]=\"isFileAnalyticsRuntimeSupported\"\n                          [isEdit]=\"isEdit\"\n                          (fileServiceConfigChange)=\"invalidate()\">\n</vsan-edit-file-analytics>\n","/* Copyright 2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {\n   AfterViewInit,\n   ComponentFactoryResolver,\n   Directive,\n   ElementRef,\n   Host,\n   Input,\n   Optional,\n   Renderer2,\n   Self,\n} from \"@angular/core\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {NavigationService} from \"@navigation/navigation.service\";\nimport {ClrButtonBaseDirective} from \"@directive/clr-button-group/clr-button-base.directive\";\nimport {ClrButton} from \"@clr/angular\";\n\n/**\n * Decorates a button or an anchor as external link. Requires one of the optional parameters articleId, helpId or url.\n *\n * @param external-link: Optional. Localization key of the text label of the external link. If omitted default label\n * will be used - \"Learn more\" for anchors or \"Ask VMWare\" for buttons.\n * @param articleId - Optional. Id of article in knowledge base.\n * @param helpId - Optional. Help id which will redirect to Knowledge Base.\n * @param url - Optional. External URL.\n */\n@Directive({\n   selector: \"a[external-link], button[external-link], clr-button[external-link]\",\n})\nexport class ExternalLinkDirective extends ClrButtonBaseDirective implements AfterViewInit {\n   private readonly ASK_VMWARE_DEFAULT_TEXT_KEY: string = \"vsan.common.askVMware\";\n   private readonly LEARN_MORE_DEFAULT_TEXT_KEY: string = \"vsan.common.learnMore\";\n\n   private readonly CONTAINER_CLASS: string = \"icon-name-container\";\n   private readonly NAVIGATION_EVENT_TYPE: string = \"click\";\n   private readonly LEAD_TO_NOWHERE_URL: string = \"javascript://\";\n   private readonly HTML_ELEMENT_SPAN_NAME: string = \"span\";\n   private readonly HTML_ELEMENT_ICON_NAME: string = \"clr-icon\";\n   private readonly HTML_ELEMENT_ROLE_ATTR_NAME: string = \"role\";\n   private readonly HTML_ELEMENT_ROLE_ATTR_VALUE: string = \"link\";\n   private readonly ICON_SHAPE_ATTR_NAME: string = \"shape\";\n   private readonly ICON_SHAPE_ATTR_VALUE: string = \"pop-out\";\n   private readonly ICON_SIZE_ATTR_NAME: string = \"size\";\n   private readonly ICON_SIZE_ATTR_VALUE: string = \"16\";\n   private readonly ICON_CLASS_ATTR_NAME: string = \"class\";\n   private readonly ICON_CLASS_ATTR_VALUE: string = \"link\";\n   private readonly ICON_TITLE_ATTR_NAME: string = \"title\";\n\n   private readonly KB_URL: string = \"http://kb.vmware.com/kb/\";\n\n   @Input(\"external-link\")\n   anchorText: string;\n\n   @Input()\n   articleId: string;\n\n   @Input()\n   helpId: string;\n\n   @Input()\n   url: string;\n\n   constructor(private el: ElementRef<HTMLElement>,\n         private resolver: ComponentFactoryResolver,\n         private renderer: Renderer2,\n         private navigationService: NavigationService,\n         // this variable will be initialized only if the host is clr-button\n         @Host() @Self() @Optional() clrButton: ClrButton) {\n      super(clrButton);\n   }\n\n   ngAfterViewInit(): void {\n      const element: HTMLElement = this.el.nativeElement;\n      // continue only if element is HTML link or button\n      if (!this.isLink(element) && !this.isButton(element)) {\n         // element is clr-button, wait until html button for it is resolved - handled by resloveButton\n         return;\n      }\n      this.prepareExternalLink(element);\n   }\n\n   resolveButton(clrButton: ClrButton, button: HTMLButtonElement, index: number): void {\n      // only if element is clr-button. At this point the html button is already resolved. Apply on it.\n      this.prepareExternalLink(button);\n   }\n\n   private prepareExternalLink(element: HTMLElement): void {\n      this.renderer.addClass(element, this.CONTAINER_CLASS);\n\n      this.setText(element);\n      if (this.isLink(element)) {\n         this.decorateLink(element);\n      } else {\n         this.addLinkRole(element);\n      }\n\n      this.initializeNavigationHandler(element);\n   }\n\n   private isButton(element: HTMLElement): boolean {\n      return element instanceof HTMLButtonElement;\n   }\n\n   private isLink(element: HTMLElement): boolean {\n      return element instanceof HTMLAnchorElement;\n   }\n\n   private setText(element: HTMLElement): void {\n      const span: HTMLSpanElement = this.renderer.createElement(this.HTML_ELEMENT_SPAN_NAME);\n      span.innerText = this.getText(element);\n      this.renderer.appendChild(element, span);\n\n      const icon: HTMLSpanElement = this.renderer.createElement(this.HTML_ELEMENT_ICON_NAME);\n      icon.setAttribute(this.ICON_SHAPE_ATTR_NAME, this.ICON_SHAPE_ATTR_VALUE);\n      icon.setAttribute(this.ICON_SIZE_ATTR_NAME, this.ICON_SIZE_ATTR_VALUE);\n      icon.setAttribute(this.ICON_CLASS_ATTR_NAME, this.ICON_CLASS_ATTR_VALUE);\n      // Set title of the icon for screen readers clarity\n      icon.setAttribute(this.ICON_TITLE_ATTR_NAME, VsanUiUtils.getString(\"vsan.screenReader.label.externalLink.icon\"));\n      this.renderer.appendChild(element, icon);\n   }\n\n   private getText(element: HTMLElement): string {\n      if (this.anchorText) {\n         return this.anchorText;\n      }\n      const key: string = this.isButton(element) ? this.ASK_VMWARE_DEFAULT_TEXT_KEY : this.LEARN_MORE_DEFAULT_TEXT_KEY;\n      return VsanUiUtils.getString(key);\n   }\n\n   private decorateLink(element: HTMLElement): void {\n      const linkElement: HTMLLinkElement = element as HTMLLinkElement;\n      // don't use href attribute. If omitted, the link will be not visualized properly.\n      linkElement.href = this.LEAD_TO_NOWHERE_URL;\n      // display link on same line\n      linkElement.style.display = \"inline-flex\";\n   }\n\n   private initializeNavigationHandler(element: HTMLElement): void {\n      element.addEventListener(this.NAVIGATION_EVENT_TYPE, () => {\n         if (this.helpId) {\n            this.navigationService.askVMware(this.helpId);\n            return;\n         }\n         if (this.articleId) {\n            this.navigationService.navigateToAddress(`${this.KB_URL}${this.articleId}`);\n            return;\n         }\n         if (this.url) {\n            this.navigationService.navigateToAddress(this.url);\n         }\n      });\n   }\n\n   // Indicate external navigation by assigning \"link\" role\n   private addLinkRole(element: HTMLElement): void {\n      this.renderer.setAttribute(element, this.HTML_ELEMENT_ROLE_ATTR_NAME, this.HTML_ELEMENT_ROLE_ATTR_VALUE);\n   }\n}","/* Copyright 2017-2018 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Logger} from \"../../common/util/logger\";\nimport {VsanFileServiceIpType} from \"@generated/vsan-file-service-ip-type\";\n\nexport class IP {\n   static readonly v4: IP = new IP(\"ipv4\",\n         \"vsan.services.fileservices.wizard.ipPool.input.vlan.protocol.ipv4\",\n         VsanFileServiceIpType.V4,\n         /^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/);\n   static readonly v6: IP = new IP(\"ipv6\",\n         \"vsan.services.fileservices.wizard.ipPool.input.vlan.protocol.ipv6\",\n         VsanFileServiceIpType.V6,\n         /^((?=.*::)(?!.*::.+::)(::)?([\\dA-F]{1,4}:(:|\\b)|){5}|([\\dA-F]{1,4}:){6})((([\\dA-F]{1,4}((?!\\3)::|:\\b|$))|(?!\\2\\3)){2}|(((2[0-4]|1\\d|[1-9])?\\d|25[0-5])\\.?\\b){4})$/i);\n\n   constructor(private _value: string,\n         private keyToLabel: string,\n         private vsanIpType: VsanFileServiceIpType,\n         private matcher: RegExp) {\n   }\n\n   get value(): string {\n      return this._value;\n   }\n\n   toString(): string {\n      return this.keyToLabel;\n   }\n\n   static parse(val: string) {\n      switch (val) {\n         case IP.v4.value:\n            return IP.v4;\n         case IP.v6.value:\n            return IP.v6;\n         default:\n            Logger.warn(\"Unknown protocol: \" + val);\n            return null;\n      }\n   }\n\n   toVsanIpVersion() {\n      return this.vsanIpType;\n   }\n\n   validateAddress(address: string) {\n      return address && address != \"\" && this.matcher.test(address);\n   }\n}\n\n","/* Copyright 2020 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Directive, ElementRef, AfterViewInit, Input} from '@angular/core';\nimport {Icon} from \"@util/icon\";\n\n/**\n * Attribute directive for setting the title of clr-icon according to its shape.\n */\n@Directive({\n   selector: \"clr-icon\"\n})\nexport class IconTitleDirective implements AfterViewInit {\n\n   private readonly SHAPE_ATTRIBUTE: string = \"shape\";\n   private readonly TITLE_ATTRIBUTE: string = \"title\";\n\n   @Input(\"vsan-icon-title\")\n   iconTitle: string;\n\n   constructor(private el: ElementRef) { }\n\n   ngAfterViewInit() {\n      // Return if clr-icon already has title attribute.\n      if (this.el.nativeElement.getAttribute(this.TITLE_ATTRIBUTE)) {\n         return;\n      }\n\n      let title: string = this.iconTitle;\n      if (!title) {\n         const shape: string = this.el.nativeElement.getAttribute(this.SHAPE_ATTRIBUTE);\n         title = Icon.getDefaultVsanIconTitle(shape);\n      }\n      if (title) {\n         this.el.nativeElement.setAttribute(this.TITLE_ATTRIBUTE, title);\n      }\n   }\n}","<!--Copyright 2018-2021 VMware, Inc. All rights reserved. -- VMware Confidential-->\n<div id=\"container\">\n   <div>{{\"vsan.services.fileservices.wizard.introduction.description\" | localized}}</div>\n   <div id=\"image\"></div>\n   <div id=\"description\">\n      <h6 id=\"subtitle1\">{{\"vsan.services.fileservices.wizard.introduction.description.subtitle1\" | localized}}</h6>\n      <div id=\"subtitle2\">{{\"vsan.services.fileservices.wizard.introduction.description.subtitle2\" | localized}}</div>\n      <ul>\n         <li [innerHTML]=\"'vsan.services.fileservices.wizard.introduction.description.item1' | localized\"></li>\n         <li [innerHTML]=\"'vsan.services.fileservices.wizard.introduction.description.item4' | localized\"></li>\n      </ul>\n      <ng-container *ngIf=\"capabilityData.isFileServiceKerberosSupported\">\n         <div id=\"ad-related-title\"\n              class=\"ad-settings-desc\">\n            {{\"vsan.services.fileservices.wizard.introduction.description.subtitle3\" | localized}}\n         </div>\n         <ul>\n            <li [innerHTML]=\"'vsan.services.fileservices.wizard.introduction.description.item5' | localized\"></li>\n         </ul>\n         <a id=\"learn-more-link\"\n            [external-link]=\"'vsan.services.fileservices.wizard.activeDirectoryPage.link' | localized\"\n            [helpId]=\"AskVmwareId.FILE_SERVICE\">\n         </a>\n      </ng-container>\n   </div>\n</div>\n","/* Copyright 2017-2022 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, OnInit} from \"@angular/core\";\nimport {InputProperty, OutputProperty, WizardPage} from \"@component/wizard/flow-metadata\";\nimport {PageControls} from \"@component/wizard/flow-wizard.component\";\nimport {PageItem} from \"@component/wizard/page-item\";\nimport {AffinitySiteLocation} from \"@generated/affinity-site-location\";\nimport {DomainOrHostData} from \"@generated/domain-or-host-data\";\nimport {NetworkInventoryService} from \"@generated/network-inventory-service\";\nimport {TaskInfoData} from \"@generated/task-info-data\";\nimport {TaskService} from \"@generated/task-service\";\nimport {VsanCapabilityData} from \"@generated/vsan-capability-data\";\nimport {VsanFileServiceCommonConfig} from \"@generated/vsan-file-service-common-config\";\nimport {VsanFileServiceConfigService} from \"@generated/vsan-file-service-config-service\";\nimport {VsanFileServiceDomain} from \"@generated/vsan-file-service-domain\";\nimport {VsanFileServicePrecheckResult} from \"@generated/vsan-file-service-precheck-result\";\nimport {ManagedObject} from \"@service/managed-object\";\nimport {TaskMonitorService, TaskStatus} from \"@service/task-monitor-service\";\nimport {Logger} from \"@util/logger\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {FileServiceUtil} from \"../file-service-util\";\nimport {OvfSettings} from \"../shared/file-services-ovf-settings.data\";\nimport {IP} from \"./ip.data\";\n\n@WizardPage(\n      VsanUiUtils.getString(\"vsan.services.fileservices.wizard.rtc.title\"),\n)\n@Component({\n   templateUrl: \"file-services-review-page.html\",\n   styleUrls: [\"file-services-review-page.scss\"],\n})\nexport class FileServicesReviewPage implements OnInit {\n\n   @InputProperty()\n   @OutputProperty()\n   fileServiceConfig: VsanFileServiceCommonConfig;\n\n   @InputProperty()\n   networkName: string;\n\n   @InputProperty()\n   isRecreateDomain: boolean;\n\n   @InputProperty(InputProperty.required(false))\n   ovfSettings: OvfSettings;\n\n   @InputProperty(InputProperty.required(false))\n   downloadTask: ManagedObject;\n\n   @InputProperty()\n   protocol: IP = IP.v4;\n\n   @InputProperty()\n   capabilityData: VsanCapabilityData;\n\n   @InputProperty()\n   isEdit: boolean; // isEdit = true if user clicks the 'Edit' file service button\n\n   @InputProperty()\n   pageControls: PageControls;\n\n   @InputProperty()\n   isReEnable: boolean;\n\n   @InputProperty()\n   isAdCredentialChanged: boolean = false;\n\n   @InputProperty()\n   affinitySiteSupported: boolean;\n\n   @InputProperty()\n   isVsanStretchedCluster: boolean;\n\n   @InputProperty()\n   ovfVersion: string;\n\n   @InputProperty()\n   availableDomains: DomainOrHostData[];\n\n   @InputProperty()\n   isRemovingActiveDirectory: boolean;\n\n   @InputProperty()\n   advancedPreflightCheckSupported: boolean;\n\n   IP: typeof IP = IP;\n\n   downloadTaskIcon: string;\n   downloadTaskMessage: string;\n\n   error: string;\n   warnings: string[];\n   showNtpWarning: boolean;\n\n   downloadTaskInfoData: TaskInfoData;\n\n   constructor(private networkInventoryService: NetworkInventoryService,\n         private fileService: VsanFileServiceConfigService,\n         private taskService: TaskService,\n         private taskMonitorService: TaskMonitorService) {\n   }\n\n   async ngOnInit(): Promise<void> {\n      if (this.isAdvancedPreflightCheckAllowed()) {\n         (this.pageControls as PageItem).metadata.title =\n               VsanUiUtils.getString(\"vsan.services.fileservices.wizard.precheck.title\");\n      }\n      // display the npt warning only when AD is set.\n      this.showNtpWarning = !this.isRemovingActiveDirectory && !!this.fileServiceConfig.domainConfig?.adConfig?.domain;\n      // No OVFs are being downloaded during \"edit\" workflow\n      if (!this.isEdit) {\n         if (!this.isUploadLocalOvf && this.downloadTask) {\n            // disable the finish button first\n            this.toggleFinishButton(false);\n\n            // The OVF files are being downloaded to the VC, and we need to monitor this\n            // and update the UI accordingly. We only allow user to click the Finish button\n            // when the download task completes\n            const timer: number = window.setInterval(this.updateDownloadTaskStatus, 1000);\n\n            try {\n               await this.taskMonitorService.getAwaitResult(this.downloadTask);\n               this.onOvfDownloadComplete();\n               this.setDownloadResultInfo(\"success\",\n                     VsanUiUtils.getString(\"vsan.services.fileservices.rtc.download.succeeded\"));\n            } catch (error) {\n               Logger.warn(error);\n               // A completed task gets deleted in 10m or so. In case user gets this page 10+ minutes late after\n               // the OVF download completes, UI needs to run a preflight check to get the OVF files\n               this.checkOvfFiles();\n            } finally {\n               // stop refreshing the task after download completes\n               clearInterval(timer);\n            }\n         } else {\n            // The OVF files have already been downloaded on the VC so we need to show a static message\n            const message: string = this.isUploadLocalOvf\n                  ? VsanUiUtils.getString(\"vsan.services.fileservices.rtc.ovf.upload.present\")\n                  : VsanUiUtils.getString(\"vsan.services.fileservices.rtc.download.present\", this.ovfVersion);\n            this.setDownloadResultInfo(\"success\", message);\n         }\n      }\n\n      if (this.isEdit) {\n         if (!this.isAdvancedPreflightCheckAllowed()) {\n            return;\n         }\n         try {\n            this.pageControls.setBusyState();\n            this.toggleFinishButton(false);\n            await this.performPreflightCheck();\n         } finally {\n            // keep the Finish button disabled if the preflight check API returns any domain configure issue\n            if (!this.error) {\n               this.toggleFinishButton(true);\n            }\n            this.pageControls.clearBusyState();\n         }\n      }\n      await this.queryNetworkName();\n   }\n\n   /**\n    * In re-enable workflow, we don't have network page in the wizard, so the networkName is empty\n    */\n   private async queryNetworkName(): Promise<void> {\n      try {\n         const selectedNetwork: ManagedObject = this.fileServiceConfig.network;\n         if (!this.networkName && selectedNetwork) {\n            this.pageControls.setBusyState();\n            this.networkName = await this.networkInventoryService.getNetworkName(selectedNetwork);\n         }\n      } catch (error) {\n         this.pageControls.addValidationErrors([error]);\n      } finally {\n         this.pageControls.clearBusyState();\n      }\n   }\n\n   private async performPreflightCheck(): Promise<void> {\n      this.error = null;\n      this.warnings = null;\n      const warning: string[] = [];\n      const result: VsanFileServicePrecheckResult =\n            await this.fileService.getPrecheckResult(\n                  ManagedObject.contextObject, this.getDomainConfigForCheck(), true);\n      if (result.domainConfigIssue) {\n         this.error = result.domainConfigIssue;\n      }\n      if (result.domainConfigWarning) {\n         warning.push(result.domainConfigWarning);\n      }\n      if (result.ntpConfigWarning) {\n         warning.push(result.ntpConfigWarning);\n      }\n      if (!VsanUiUtils.isEmpty(warning)) {\n         this.warnings = warning;\n      }\n   }\n\n   private getDomainConfigForCheck(): VsanFileServiceDomain {\n      const domainConfig: VsanFileServiceDomain = JSON.parse(JSON.stringify(this.fileServiceConfig.domainConfig));\n      // avoid to check the AD settings in edit workflow unless user changes the AD password\n      if (this.isEdit && (!domainConfig.adConfig.password || this.isRemovingActiveDirectory)) {\n         domainConfig.adConfig = null;\n      }\n      return domainConfig;\n   }\n\n   private isAdvancedPreflightCheckAllowed(): boolean {\n      return this.advancedPreflightCheckSupported;\n   }\n\n   private updateDownloadTaskStatus = () => {\n      this.taskService.getInfo(this.downloadTask).then((taskInfoData: TaskInfoData) => {\n         this.downloadTaskInfoData = taskInfoData;\n         if (taskInfoData.progress < 100) {\n            this.toggleFinishButton(false);\n         }\n         switch (taskInfoData.status) {\n            case TaskStatus.PENDING:\n               this.setDownloadResultInfo(\"info\",\n                     VsanUiUtils.getString(\"vsan.services.fileservices.rtc.download.pending\"));\n               break;\n            case TaskStatus.RUNNING:\n               this.setDownloadResultInfo(\"info\",\n                     VsanUiUtils.getString(\"vsan.services.fileservices.rtc.download.running\"));\n               break;\n            case TaskStatus.SUCCESS:\n               this.setDownloadResultInfo(\"success\",\n                     VsanUiUtils.getString(\"vsan.services.fileservices.rtc.download.succeeded\"));\n               this.onOvfDownloadComplete();\n               break;\n            case TaskStatus.ERROR:\n               this.setDownloadResultInfo(\"danger\",\n                     VsanUiUtils.getString(\"vsan.services.fileservices.rtc.download.failed\"));\n               break;\n            default:\n               Logger.warn(\"Unknown status: \" + taskInfoData.status);\n               this.setDownloadResultInfo(\"warning\",\n                     VsanUiUtils.getString(\"vsan.services.fileservices.rtc.download.unknown\"));\n         }\n      }).catch(err => {\n         Logger.error(\"Cannot get task status: \" + err);\n         this.setDownloadResultInfo(\"warning\",\n               VsanUiUtils.getString(\"vsan.services.fileservices.rtc.download.unknown\"));\n      });\n   };\n\n   private onOvfDownloadComplete(): void {\n      // Create a fake taskInfoData because the task is deleted in 10 minutes after it is completed.\n      this.downloadTaskInfoData = this.downloadTaskInfoData ||\n            TaskInfoData.Factory.create(\"\", \"\", \"\", \"\", 0);\n      // There is a chance that the download task finishes between updateDownloadTaskStatus and getAwaitResult\n      // Here we should set the progress to 100 as it's already finished, by doing this we can fix PR 2378522\n      this.downloadTaskInfoData.progress = 100;\n      this.toggleFinishButton(true);\n   }\n\n   private async checkOvfFiles(): Promise<void> {\n      try {\n         this.pageControls.setBusyState();\n         const result: VsanFileServicePrecheckResult =\n               await this.fileService.getPrecheckResult(\n                     ManagedObject.contextObject, this.fileServiceConfig.domainConfig, false);\n         if (result.ovfInstalled) {\n            this.setDownloadResultInfo(\"success\",\n                  VsanUiUtils.getString(\"vsan.services.fileservices.rtc.download.present\", result.ovfInstalled));\n            this.onOvfDownloadComplete();\n         } else {\n            this.setDownloadResultInfo(\"danger\",\n                  VsanUiUtils.getString(\"vsan.services.fileservices.rtc.download.failed\"));\n         }\n      } catch (err) {\n         Logger.error(err);\n         this.setDownloadResultInfo(\"danger\", err);\n         this.toggleFinishButton(false);\n      } finally {\n         this.pageControls.clearBusyState();\n      }\n   }\n\n   private setDownloadResultInfo(icon: string, message: string): void {\n      this.downloadTaskIcon = icon;\n      this.downloadTaskMessage = message;\n   }\n\n   get isUploadLocalOvf(): boolean {\n      return this.ovfSettings && this.ovfSettings.isManualDownload;\n   }\n\n   private toggleFinishButton = (enabled: boolean) => {\n      (this.pageControls as PageItem).nextButtonIsDisabled = !enabled;\n   };\n\n   getAffinitySiteLabel(site: AffinitySiteLocation): string {\n      return FileServiceUtil.getAffinitySiteLabel(site, this.availableDomains);\n   }\n\n   getBooleanPropertyLabel = (property: boolean): string => {\n      return property ?\n            VsanUiUtils.getString(\"vsan.services.enabled\") :\n            VsanUiUtils.getString(\"vsan.services.disabled\");\n   };\n}\n"]}