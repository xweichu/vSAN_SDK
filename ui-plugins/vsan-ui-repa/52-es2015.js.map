{"version":3,"sources":["./src/app/vsan/common/component/diskmgmt/claim-disks.component.ts","./src/app/vsan/common/component/diskmgmt/claim-for-pmem.html","./src/app/vsan/common/component/diskmgmt/perspective/disks-group-by-perspective.component.ts","./src/app/vsan/common/component/diskmgmt/disks-capacity-chart.component.ts","./src/app/vsan/common/component/diskmgmt/claim-for-pmem.component.ts","./src/app/vsan/common/component/diskmgmt/claim-for-vsan-direct.html","./src/app/vsan/common/directive/accessibility/refocus-after-change.directive.ts","./src/app/vsan/common/component/diskmgmt/claim-for-vsan.component.ts","./src/app/vsan/common/component/diskmgmt/validation-panel.html","./src/app/vsan/common/component/diskmgmt/model/vsan-disks-transport-type.data.ts","./src/app/vsan/common/component/diskmgmt/model/vsan-pmem-storage-list-item.ts","./src/app/vsan/common/component/diskmgmt/model/claim-disks-datagrid-footer-label.ts","./src/app/vsan/common/component/diskmgmt/model/vendor-map-result.data.ts","./src/app/vsan/common/component/diskmgmt/claim-for-vsan-max.component.ts","./src/app/vsan/common/directive/on-modal-escape.directive.ts","./src/app/vsan/common/component/diskmgmt/model/disks-claiming-config-info.data.ts","./src/app/vsan/common/component/diskmgmt/model/claim-root-list-item.data.ts","./src/app/vsan/common/component/diskmgmt/claim-disks.html","./src/app/generated/vsan-disk-claim-spec.ts","./src/app/generated/vsan-claim-host-disk-mappings-spec.ts","./src/app/vsan/common/component/diskmgmt/claim-for-vsan.html","./src/app/vsan/common/component/diskmgmt/perspective/disks-group-by-perspective.html","./src/app/vsan/common/component/diskmgmt/claim-for-vsan-direct.component.ts","./src/app/vsan/common/component/diskmgmt/model/claim-vendor-list-item.data.ts","./src/app/generated/query-util.ts","./src/app/vsan/common/component/diskmgmt/model/claim-host-list-item.data.ts","./src/app/vsan/common/directive/focus-trap.directive.ts","./src/app/vsan/common/component/diskmgmt/disks-capacity-chart.html","./src/app/vsan/common/component/diskmgmt/model/claimed-disks-data.ts","./src/app/vsan/common/component/diskmgmt/claim-for-vsan-max.html","./src/app/vsan/common/component/diskmgmt/validation-panel.component.ts"],"names":[],"mappings":"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","file":"52-es2015.js","sourcesContent":["/* Copyright 2017-2022 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, EventEmitter, Input, OnInit, Output} from \"@angular/core\";\nimport {DisksPropertyRetriever} from \"@component/diskmgmt/disks-property-retriever\";\nimport {ClaimHostListItem} from \"@component/diskmgmt/model/claim-host-list-item.data\";\nimport {ClaimVendorListItem} from \"@component/diskmgmt/model/claim-vendor-list-item.data\";\nimport {DisksClaimingConfigInfo} from \"@component/diskmgmt/model/disks-claiming-config-info.data\";\nimport {VendorMapResult} from \"@component/diskmgmt/model/vendor-map-result.data\";\nimport {VsanDiskListItem} from \"@component/diskmgmt/model/vsan-disk-list-item\";\nimport {environment} from \"@env/environment\";\nimport {QueryUtil} from \"@generated/query-util\";\nimport {DatastoreType} from \"@generated/datastore-type\";\nimport {VsanCapabilityProvider} from \"@generated/vsan-capability-provider\";\nimport {VsanClaimDisksData} from \"@generated/vsan-claim-disks-data\";\nimport {VsanClaimHostDiskMappingsSpec} from \"@generated/vsan-claim-host-disk-mappings-spec\";\nimport {VsanConfigService} from \"@generated/vsan-config-service\";\nimport {VsanConfigSpec} from \"@generated/vsan-config-spec\";\nimport {VsanDiskClaimSpec} from \"@generated/vsan-disk-claim-spec\";\nimport {DataServiceClient} from \"@service/client/dataservice/data-service.service\";\nimport {DataAccessService, DataServiceResult} from \"@service/data-access.service\";\nimport {ErrorMessage} from \"@service/flow/error-message.decorator\";\nimport {Loader} from \"@service/flow/loader.decorator\";\nimport {LoadingIndicator} from \"@service/flow/loading-indicator.decorator\";\nimport {ManagedObject, ManagedObjectUtils} from \"@service/managed-object\";\nimport {SrMessageType} from \"@service/screen-reader-announcer.service\";\nimport {DiskMgmtUtil} from \"@util/disk-mgmt.util\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {from as observableFromPromise, Observable} from \"rxjs\";\nimport {map} from \"rxjs/operators\";\n\n@Component({\n   selector: \"vsan-claim-disks\",\n   templateUrl: \"claim-disks.html\",\n   styleUrls: [\"claim-disks.scss\"],\n})\nexport class ClaimDisksComponent implements OnInit {\n   DatastoreType: typeof DatastoreType = DatastoreType;\n\n   @Input()\n   clusterRef: ManagedObject;\n\n   /**\n    * Whether the component is used in single page dialog or a wizard.\n    */\n   @Input()\n   isStandalone: boolean = true;\n\n   /**\n    * The cluster's configuration\n    */\n   @Input()\n   vsanConfigSpec: VsanConfigSpec;\n\n   /**\n    * Holds the claimable disks for each host.\n    */\n   @Input()\n   hostsClaimingData: Map<string, VsanClaimDisksData>;\n\n   @Output()\n   configUpdated: EventEmitter<VsanClaimHostDiskMappingsSpec[]> = new EventEmitter<VsanClaimHostDiskMappingsSpec[]>();\n\n   @Output()\n   disksClaimingConfigUpdated: EventEmitter<DisksClaimingConfigInfo> = new EventEmitter<DisksClaimingConfigInfo>();\n\n   @Output()\n   configValid: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n   @LoadingIndicator()\n   loading: boolean;\n\n   @ErrorMessage()\n   errorMessage: string;\n\n   selectedDatastoreType: DatastoreType;\n   datastoreTypes: DatastoreType[] = [];\n\n   isManagedVmfsSupported: boolean = false;\n   allHostsInCluster: ClaimHostListItem[] = [];\n   disksByVendor: ClaimVendorListItem[] = [];\n   disksClaimingConfigInfo: DisksClaimingConfigInfo = new DisksClaimingConfigInfo();\n   hostProperties: Map<string, any[]>;\n   useRecommendedClaimOptions: boolean = true;\n\n   constructor(private dataService: DataServiceClient,\n         private disksPropertyRetriever: DisksPropertyRetriever,\n         private dataAccessService: DataAccessService,\n         private vsanConfigService: VsanConfigService,\n         private capabilityProvider: VsanCapabilityProvider) {\n   }\n\n   @Loader({\n      srMessage: \"vsan.configure.claimDisksPage.title\",\n      srMessageType: SrMessageType.PAGE_TITLE,\n   })\n   async ngOnInit(): Promise<void> {\n      this.clusterRef = this.clusterRef || ManagedObject.contextObject;\n\n      [this.hostProperties, this.isManagedVmfsSupported] = await Promise.all([\n         this.queryHostDsProperties(),\n         this.capabilityProvider.isManagedVmfsSupportedOnVc(this.clusterRef),\n      ]);\n      this.initializeDisksData();\n   }\n\n   private queryHostDsProperties(): Promise<Map<string, any[]>> {\n      return this.getPropertiesForHosts()\n            .pipe(map((properties: DataServiceResult[]) => {\n               // group host properties by host\n               const hostProperties: Map<string, any[]> = new Map<string, any[]>();\n               let hostKey: string = null;\n\n               for (const property of properties) {\n                  if (!property.resourceObject) {\n                     continue;\n                  }\n                  hostKey = property.resourceObject.value;\n                  if (!hostProperties.has(hostKey)) {\n                     hostProperties.set(hostKey, []);\n                  }\n\n                  hostProperties.get(hostKey).push(property);\n               }\n               return hostProperties;\n            })).toPromise();\n   }\n\n   private getPropertiesForHosts(): Observable<DataServiceResult[]> {\n      if (environment.repa) {\n         return observableFromPromise(this.disksPropertyRetriever.getPropertiesForHosts(this.clusterRef));\n      } else {\n         // TODO (REPA) Delete once the JAVA is removed\n         return this.dataAccessService.getPropertiesForRelatedObject(\n               ManagedObject.uid(this.clusterRef),\n               [\n                  QueryUtil.NAME_PROPERTY(),\n                  QueryUtil.HOST_VERSION_PROPERTY(),\n                  QueryUtil.PRIMARY_ICON_ID_PROPERTY(),\n                  QueryUtil.VSAN_HOST_STORAGE_ADAPTER_DEVICES(),\n               ],\n               QueryUtil.CLUSTER_HOST_PROPERTY(),\n               ManagedObjectUtils.CLUSTER);\n      }\n   }\n\n   private initializeDisksData(): void {\n      this.allHostsInCluster = this.getClusterHostsInInitialState();\n      this.datastoreTypes = DiskMgmtUtil.orderDatastoreTypes(this.getDatastoreTypes(this.allHostsInCluster));\n      this.selectedDatastoreType = this.getInitialSelectedDatastoreType(this.datastoreTypes);\n      this.disksClaimingConfigInfo.setInitialState(this.allHostsInCluster);\n      this.disksByVendor = this.getDisksByVendor(this.getHostEligibleDisks());\n      this.update();\n   }\n\n   private getDatastoreTypes(hosts: ClaimHostListItem[]): DatastoreType[] {\n      return Array.from(new Set([].concat(...hosts.map(host => host.availableDatastoreTypes))));\n   }\n\n   private getInitialSelectedDatastoreType(datastoreTypes: DatastoreType[]): DatastoreType {\n      return !VsanUiUtils.isEmpty(datastoreTypes)\n            ? datastoreTypes[0]\n            : DatastoreType.VSAN;\n   }\n\n   private getClusterHostsInInitialState(): ClaimHostListItem[] {\n      const allHostsInCluster: ClaimHostListItem[] = [];\n\n      this.hostProperties.forEach((hostProperties: any[], hostKey: string) => {\n         allHostsInCluster.push(new ClaimHostListItem(\n               hostProperties,\n               this.hostsClaimingData.get(hostKey),\n               this.useRecommendedClaimOptions));\n      });\n\n      return allHostsInCluster;\n   }\n\n   private getHostEligibleDisks(): VsanDiskListItem[] {\n      let disks: VsanDiskListItem[] = [];\n\n      for (const hostItem of this.allHostsInCluster) {\n         if (hostItem.eligibleDisks) {\n            disks = disks.concat(hostItem.eligibleDisks);\n         }\n      }\n\n      return disks;\n   }\n\n   update(): void {\n      this.updateParentItemsClaimOption();\n      this.updateHostsClaimingSummary();\n      this.updateUsedDisksInfo();\n      this.configUpdated.emit(this.getDiskMappings());\n   }\n\n   updateParentItemsClaimOption(): void {\n      for (const host of this.allHostsInCluster) {\n         host.updateClaimOption(this.selectedDatastoreType);\n      }\n\n      for (const disk of this.disksByVendor) {\n         disk.updateClaimOption(this.selectedDatastoreType);\n      }\n   }\n\n   updateHostsClaimingSummary(): void {\n      for (const host of this.allHostsInCluster) {\n         host.updateDisksData();\n      }\n   }\n\n   updateUsedDisksInfo(): void {\n      this.disksClaimingConfigInfo.updateClaimingData(this.allHostsInCluster);\n      this.disksClaimingConfigInfo = this.disksClaimingConfigInfo.clone();\n      this.disksClaimingConfigUpdated.emit(this.disksClaimingConfigInfo);\n   }\n\n   private getDisksByVendor(disks: VsanDiskListItem[]): ClaimVendorListItem[] {\n      if (VsanUiUtils.isEmpty(disks)) {\n         return [];\n      }\n\n      const vendors: string[] = [];\n      const vendorToDisks: Map<string, Map<string, VsanDiskListItem[]>> =\n            new Map<string, Map<string, VsanDiskListItem[]>>();\n\n      disks.forEach(disk => {\n         if (!disk) {\n            return;\n         }\n\n         const vendorDiskModelDisks: Map<string, VsanDiskListItem[]> =\n               this.getVendorDisksByDiskModel(vendorToDisks, disk.model);\n\n         if (vendorDiskModelDisks.size === 0) {\n            vendors.push(disk.model);\n         }\n\n         this.getVendorDisksByDiskType(vendorDiskModelDisks, disk.isFlash.toString()).push(disk);\n      });\n\n      return new VendorMapResult(vendors, vendorToDisks).result;\n   }\n\n   private getVendorDisksByDiskModel(\n         vendorToDisks: Map<string, Map<string, VsanDiskListItem[]>>,\n         diskModel: string): Map<string, VsanDiskListItem[]> {\n      if (!vendorToDisks.has(diskModel)) {\n         vendorToDisks.set(diskModel, new Map<string, VsanDiskListItem[]>());\n      }\n      return vendorToDisks.get(diskModel);\n   }\n\n   private getVendorDisksByDiskType(\n         vendorDiskModelDisks: Map<string, VsanDiskListItem[]>,\n         diskType: string): VsanDiskListItem[] {\n      if (!vendorDiskModelDisks.has(diskType)) {\n         vendorDiskModelDisks.set(diskType, []);\n      }\n      return vendorDiskModelDisks.get(diskType);\n   }\n\n   private getDiskMappings(): VsanClaimHostDiskMappingsSpec[] {\n      const diskMappingSpecs: VsanClaimHostDiskMappingsSpec[] = [];\n      const isAllFlashSupported: boolean = this.isAllFlashSupportedOnEveryHost();\n\n      this.allHostsInCluster.forEach((host) => {\n         const disksToClaim: VsanDiskClaimSpec[] = host.getHostDisksToClaim();\n         if (disksToClaim.length !== 0) {\n            diskMappingSpecs.push(\n                  VsanClaimHostDiskMappingsSpec.Factory.create(\n                        this.clusterRef,\n                        host.hostMor,\n                        disksToClaim,\n                        isAllFlashSupported));\n         }\n      });\n\n      return diskMappingSpecs;\n   }\n\n   private isAllFlashSupportedOnEveryHost(): boolean {\n      let allFlashSupported: boolean = true;\n      for (const host of this.allHostsInCluster) {\n         allFlashSupported = allFlashSupported && host.isAllFlashSupported;\n      }\n      return allFlashSupported;\n   }\n\n   getDatastoreTypeLabel(datastoreType: DatastoreType): string {\n      return DiskMgmtUtil.getLocalizedDatastoreType(datastoreType);\n   }\n\n   changeDatastoreType(datastoreType: DatastoreType): void {\n      this.selectedDatastoreType = datastoreType;\n      this.update();\n   }\n}\n","<!-- Copyright (c) 2020 VMware, Inc. All Rights Reserved. -->\n<h5 id=\"pmem-claim-title\">{{\"vsan.pmem.claim.description\" | localized}}</h5>\n\n<vsan-validation id=\"pmem-not-manageable\"\n                 *ngIf=\"!isPmemManageableByVsanOnAllHosts\"\n                 [alertType]=\"'danger'\"\n                 [allowClose]=\"false\"\n                 [alert]=\"'vsan.pmem.claim.olderVersionHosts' | localized\">\n</vsan-validation>\n\n<vsan-validation id=\"pmem-limitation\"\n                 *ngIf=\"isPmemManageableByVsanOnAllHosts\"\n                 [alertType]=\"'info'\"\n                 [allowClose]=\"false\"\n                 [alert]=\"'vsan.pmem.claim.limitation' | localized\">\n</vsan-validation>\n\n<clr-checkbox-wrapper>\n   <input name=\"manage-pmem-by-vsan-toggle\"\n          type=\"checkbox\"\n          clrCheckbox\n          [vsan-disable-form-control]=\"!isPmemManageableByVsanOnAllHosts\"\n          [(ngModel)]=\"managePmemByVsan\"\n          (ngModelChange)=\"toggle()\"/>\n   <label [class.disable-action]=\"!isPmemManageableByVsanOnAllHosts\" id=\"manage-pmem-by-vsan-toggle-label\">{{\"vsan.pmem.claim.manageByVsan.label\" | localized}}</label>\n</clr-checkbox-wrapper>\n\n<clr-datagrid>\n   <!-- Datagrid Header -->\n   <clr-dg-column [clrDgField]=\"'hostName'\" class=\"host-name-column\">\n      {{\"vsan.pmem.claim.host\" | localized}}\n   </clr-dg-column>\n   <clr-dg-column *ngIf=\"!isPmemManageableByVsanOnAllHosts\" [clrDgField]=\"'hostVersion'\" class=\"host-name-column\">\n      {{\"vsan.pmem.claim.hostVersion\" | localized}}\n   </clr-dg-column>\n   <clr-dg-column [clrDgField]=\"'name'\" class=\"storage-name-column\">\n      {{\"vsan.pmem.claim.storage\" | localized}}\n   </clr-dg-column>\n   <clr-dg-column [clrDgField]=\"'capacity'\">\n      {{\"vsan.pmem.claim.capacity\" | localized}}\n   </clr-dg-column>\n   <clr-dg-column [clrDgField]=\"'healthStatus'\">\n      {{\"vsan.pmem.claim.health\" | localized}}\n   </clr-dg-column>\n   <clr-dg-column [clrDgField]=\"'state'\">\n      {{\"vsan.pmem.claim.state\" | localized}}\n   </clr-dg-column>\n   <!-- Datagrid Content -->\n   <clr-dg-row *clrDgItems=\"let storage of eligiblePMemStorage\" [clrDgItem]=\"storage\">\n      <clr-dg-cell vsan-show-title>\n         <clr-icon [attr.shape]=\"hostIcons.get(storage.hostMor.value)\"></clr-icon>\n         {{storage.hostName}}\n      </clr-dg-cell>\n      <clr-dg-cell *ngIf=\"!isPmemManageableByVsanOnAllHosts\">\n         {{hostVersions.get(storage.hostMor.value)}}\n      </clr-dg-cell>\n      <clr-dg-cell vsan-show-title>\n         {{storage.name}}\n      </clr-dg-cell>\n      <clr-dg-cell>\n         {{storage.capacity}}\n      </clr-dg-cell>\n      <clr-dg-cell vsan-show-title>\n         <clr-icon [attr.shape]=\"storage.healthIconShape\"\n                   aria-hidden=\"true\"\n                   class=\"is-solid\"\n                   size=\"18\"\n                   [ngClass]=\"storage.healthIconClass\">\n         </clr-icon>\n         {{storage.healthStatus}}\n      </clr-dg-cell>\n      <clr-dg-cell>\n         {{storage.state}}\n      </clr-dg-cell>\n   </clr-dg-row>\n</clr-datagrid>\n","/* Copyright 2020-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, EventEmitter, OnInit, Output} from \"@angular/core\";\nimport {DisksGroupByPerspective} from \"@component/diskmgmt/perspective/disks-group-by-perspective\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\n\n@Component({\n   selector: \"vsan-disks-group-by-perspective\",\n   templateUrl: \"disks-group-by-perspective.html\",\n   styleUrls: [\"disks-group-by-perspective.scss\"],\n})\nexport class DisksGroupByPerspectiveComponent implements OnInit {\n\n   @Output()\n   changePerspective: EventEmitter<DisksGroupByPerspective> = new EventEmitter<DisksGroupByPerspective>();\n\n   selectedPerspective: DisksGroupByPerspective = DisksGroupByPerspective.DISKS_BY_VENDOR;\n   perspectives: DisksGroupByPerspective[] = [\n         DisksGroupByPerspective.DISKS_BY_VENDOR,\n         DisksGroupByPerspective.DISKS_BY_HOST,\n   ];\n\n   ngOnInit(): void {\n      this.changePerspective.emit(this.selectedPerspective);\n   }\n\n   getPerspectiveLabel(perspective: DisksGroupByPerspective): string {\n      switch (perspective) {\n         case DisksGroupByPerspective.DISKS_BY_VENDOR:\n            return VsanUiUtils.getString(\"vsan.dialog.semiAutoClaimDialog.treeFilter.byVendor\");\n         case DisksGroupByPerspective.DISKS_BY_HOST:\n            return VsanUiUtils.getString(\"vsan.dialog.semiAutoClaimDialog.treeFilter.byHost\");\n         default:\n            return \"\";\n      }\n   }\n}","/* Copyright 2020 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, Input} from \"@angular/core\";\nimport {DisksClaimingConfigInfo} from \"@component/diskmgmt/model/disks-claiming-config-info.data\";\nimport {ChartSectionData} from \"@component/chart/model/chart-section.data\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {ClaimOption} from \"@generated/claim-option\";\nimport {BarChartService} from \"@component/chart/capacity-bar-chart/bar-chart.service\";\nimport {DiskMgmtDiskUtil} from \"@util/disk-mgmt-disk.util\";\n\n@Component({\n   selector: \"vsan-disks-capacity-chart\",\n   templateUrl: \"disks-capacity-chart.html\",\n   styleUrls: [\"disks-capacity-chart.scss\"],\n})\nexport class DisksCapacityChartComponent {\n\n   capacitySections: ChartSectionData[];\n   usedOverallCapacity: number;\n   totalCapacity: number;\n\n   /**\n    * The hovered series in capacity bar chart component, used to display the corresponding legend border.\n    */\n   hoveredSeries: any;\n\n   private static readonly VSAN_CAPACITY_SECTION_ID: string = \"vsan_capacity\";\n   private static readonly VSAN_CACHE_SECTION_ID: string = \"vsan_cache\";\n   private static readonly VSAN_MAX_SINGLE_TIER_SECTION_ID: string = \"vsan_max_single_tier\";\n   private static readonly VMFS_SECTION_ID: string = \"vmfs\";\n   private static readonly PMEM_SECTION_ID: string = \"pmem\";\n\n   private _disksClaiming: DisksClaimingConfigInfo;\n\n   @Input()\n   set disksClaiming(value: DisksClaimingConfigInfo) {\n      this._disksClaiming = value;\n\n      if (!this._disksClaiming) {\n         return;\n      }\n\n      this.capacitySections = this.getCapacityChartData(this._disksClaiming);\n      this.totalCapacity = this._disksClaiming.totalCapacity();\n      this.usedOverallCapacity = this._disksClaiming.totalUsedCapacity();\n   }\n\n   get disksClaiming(): DisksClaimingConfigInfo {\n      return this._disksClaiming;\n   }\n\n   get usedCapacityLabel(): string {\n      return this.getCapacityLabel(\"vsan.dialog.semiAutoClaimDialog.totalClaimed\", this.usedOverallCapacity);\n   }\n\n   get freeCapacityLabel(): string {\n      return this.getCapacityLabel(\"vsan.dialog.semiAutoClaimDialog.unclaimedStorage\",\n            this.totalCapacity - this.usedOverallCapacity);\n   }\n\n   private getCapacityLabel(labelKey: string, capacityValue: number): string {\n      return VsanUiUtils.getString(\n            \"vsan.capacity.withLabel.format\",\n            VsanUiUtils.getString(labelKey),\n            VsanUiUtils.formatFileSize(capacityValue),\n            VsanUiUtils.localizeNumber(VsanUiUtils.asPercentage(capacityValue, this.totalCapacity)));\n   }\n\n   getCapacityChartData(disksClaiming: DisksClaimingConfigInfo): ChartSectionData[] {\n      const vsanCapacityChartSection: ChartSectionData = new ChartSectionData(\n            DiskMgmtDiskUtil.getLocalizedStorage(ClaimOption.ClaimForStorage),\n            disksClaiming.getClaimedCapacity(ClaimOption.ClaimForStorage),\n            DisksCapacityChartComponent.VSAN_CAPACITY_SECTION_ID,\n            true,\n            BarChartService.VSAN_CAPACITY_SECTION_COLOR);\n\n      const vsanCacheChartSection: ChartSectionData = new ChartSectionData(\n            DiskMgmtDiskUtil.getLocalizedStorage(ClaimOption.ClaimForCache),\n            disksClaiming.getClaimedCapacity(ClaimOption.ClaimForCache),\n            DisksCapacityChartComponent.VSAN_CACHE_SECTION_ID,\n            true,\n            BarChartService.VSAN_CACHE_SECTION_COLOR);\n\n      const managedByVsanStorageChartSections: ChartSectionData[] = [];\n\n      DiskMgmtDiskUtil.MANAGED_BY_VSAN_CLAIM_OPTIONS\n            .filter((claimOption: ClaimOption) => disksClaiming.getClaimedCapacity(claimOption) > 0)\n            .forEach((claimOption: ClaimOption) => {\n               managedByVsanStorageChartSections.push(new ChartSectionData(\n                     DiskMgmtDiskUtil.getLocalizedStorage(claimOption),\n                     disksClaiming.getClaimedCapacity(claimOption),\n                     this.getManagedByVsanChartId(claimOption),\n                     true,\n                     this.getManagedByVsanChartColor(claimOption)));\n            });\n\n      return [vsanCapacityChartSection, vsanCacheChartSection, ...managedByVsanStorageChartSections];\n   }\n\n   private getManagedByVsanChartId(claimOption: ClaimOption): string {\n      switch (claimOption) {\n         case ClaimOption.VMFS: return DisksCapacityChartComponent.VMFS_SECTION_ID;\n         case ClaimOption.PMEM: return DisksCapacityChartComponent.PMEM_SECTION_ID;\n         case ClaimOption.SingleTier: return DisksCapacityChartComponent.VSAN_MAX_SINGLE_TIER_SECTION_ID;\n      }\n   }\n\n   private getManagedByVsanChartColor(claimOption: ClaimOption): string {\n      switch (claimOption) {\n         case ClaimOption.VMFS: return BarChartService.VMFS_SECTION_COLOR;\n         case ClaimOption.PMEM: return BarChartService.PMEM_SECTION_COLOR;\n         case ClaimOption.SingleTier: return BarChartService.VSAN_CAPACITY_SECTION_COLOR;\n      }\n   }\n}","/* Copyright 2020-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {ChangeDetectionStrategy, Component, EventEmitter, Input, OnInit, Output} from \"@angular/core\";\nimport {ClaimHostListItem} from \"@component/diskmgmt/model/claim-host-list-item.data\";\nimport {ClaimOption} from \"@generated/claim-option\";\nimport {VsanPmemStorageListItem} from \"@component/diskmgmt/model/vsan-pmem-storage-list-item\";\n\n@Component({\n   selector: \"vsan-claim-for-pmem\",\n   templateUrl: \"claim-for-pmem.html\",\n   styleUrls: [\"claim-for-pmem.scss\"],\n   changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ClaimForPmemComponent implements OnInit {\n   @Input()\n   allHostsInCluster: ClaimHostListItem[];\n\n   @Output()\n   update: EventEmitter<void> = new EventEmitter<void>();\n\n   isPmemManageableByVsanOnAllHosts: boolean = false;\n   managePmemByVsan: boolean = false;\n   hostVersions: Map<string, string>;\n   hostIcons: Map<string, string>;\n\n   ngOnInit(): void {\n      this.hostIcons = new Map(this.allHostsInCluster.map(host => [host.hostMor.value, host.image]));\n      this.isPmemManageableByVsanOnAllHosts = this.eligiblePMemStorage.every(storage => storage.isManageableByVsan);\n\n      if (this.isPmemManageableByVsanOnAllHosts) {\n         this.managePmemByVsan = this.eligiblePMemStorage.every(storage => storage.claimOption === ClaimOption.PMEM);\n      } else {\n         this.hostVersions = new Map(this.allHostsInCluster.map(host => [host.hostMor.value, host.version]));\n      }\n   }\n\n   toggle(): void {\n      this.eligiblePMemStorage.forEach(storage =>\n            storage.claimOption = this.managePmemByVsan ? ClaimOption.PMEM : ClaimOption.DoNotClaim);\n      this.update.emit();\n   }\n\n   get eligiblePMemStorage(): VsanPmemStorageListItem[] {\n      const eligiblePMemStorage: VsanPmemStorageListItem[] = [];\n      this.allHostsInCluster.forEach(host => {\n         host.eligiblePmemStorage\n               .filter(storage => storage.canBeClaimedForPMem)\n               .forEach(storage => eligiblePMemStorage.push(storage));\n      });\n      return eligiblePMemStorage;\n   }\n}","<!-- Copyright (c) 2020-2022 VMware, Inc. All Rights Reserved. -->\n<div id=\"vsan-direct-claim-title\">{{\"vsan.dialog.semiAutoClaimDialog.confInfo.vmfs\" | localized}}</div>\n<!--Eligible Disks Button Bar -->\n<div class=\"clr-row\">\n   <vsan-disks-group-by-perspective class=\"clr-offset-8 clr-col-4\"\n                                    (changePerspective)=\"changePerspective($event)\">\n   </vsan-disks-group-by-perspective>\n</div>\n\n<!--    Eligible Disks List -->\n<clr-datagrid [clrDgLoading]=\"datagridLoading\" class=\"datagrid-compact\">\n   <!-- Datagrid Header -->\n   <clr-dg-column class=\"name-column\">\n      <vsan-tree-column [dataField]=\"'name'\"\n                        [dataProvider]=\"datagrid\"\n                        [filterObject]=\"nameFilter\"\n                        [title]=\"nameColumnTitle\">\n      </vsan-tree-column>\n   </clr-dg-column>\n   <clr-dg-column>\n      {{\"vsan.disk.list.claimFor.vsanDirect\" | localized}}\n   </clr-dg-column>\n   <clr-dg-column>\n      <vsan-tree-column [dataField]=\"'driveTypeLabel'\"\n                        [dataProvider]=\"datagrid\"\n                        [filterObject]=\"driveTypeFilter\"\n                        [title]=\"'vsan.disk.list.driveType' | localized\">\n      </vsan-tree-column>\n   </clr-dg-column>\n   <clr-dg-column *ngIf=\"selectedPerspective == DisksGroupByPerspective.DISKS_BY_HOST\" class=\"name-column\">\n      <vsan-tree-column [dataField]=\"'capacity'\"\n                        [dataProvider]=\"datagrid\"\n                        [filterObject]=\"totalCapacityFilter\"\n                        [title]=\"'vsan.disk.list.totalCapacity' | localized\">\n      </vsan-tree-column>\n   </clr-dg-column>\n   <clr-dg-column *ngIf=\"selectedPerspective == DisksGroupByPerspective.DISKS_BY_VENDOR\" class=\"name-column\">\n      <vsan-tree-column [dataField]=\"'hostName'\"\n                        [dataProvider]=\"datagrid\"\n                        [filterObject]=\"hostNameFilter\"\n                        [title]=\"'vsan.disk.list.host' | localized\">\n      </vsan-tree-column>\n   </clr-dg-column>\n   <clr-dg-column *ngIf=\"isStandalone\">\n      <vsan-tree-column [dataField]=\"'transportType'\"\n                        [dataProvider]=\"datagrid\"\n                        [filterObject]=\"transportTypeFilter\"\n                        [title]=\"'vsan.disk.list.transportType' | localized\">\n      </vsan-tree-column>\n   </clr-dg-column>\n   <clr-dg-column *ngIf=\"isStandalone\">\n      <vsan-tree-column [dataField]=\"'diskAdapter'\"\n                        [dataProvider]=\"datagrid\"\n                        [filterObject]=\"diskAdapterFilter\"\n                        [title]=\"'vsan.disk.list.diskAdapter' | localized\">\n      </vsan-tree-column>\n   </clr-dg-column>\n   <!-- Datagrid Content -->\n   <clr-dg-row *clrDgItems=\"let row of datagrid.rows\"\n               [class.datagrid-selected]=\"isRowSelected(row)\"\n               (click)=\"selectTarget(row, $event)\">\n      <clr-dg-cell vsan-show-title>\n         <vsan-expand [row]=\"row\"></vsan-expand>\n         <clr-icon [attr.shape]=\"row.data.image\"></clr-icon>\n         <span>{{row.data.name}}</span>\n      </clr-dg-cell>\n      <clr-dg-cell class=\"claim-checkbox\">\n         <input name=\"manage-vsan-direct-by-vsan-toggle\"\n                type=\"checkbox\"\n                clrCheckbox\n                [checked]=\"row.data.claimOption === ClaimOption.VMFS\"\n                (change)=\"toggleClaiming(row.data)\"/>\n      </clr-dg-cell>\n      <clr-dg-cell class=\"text-nowrap\">\n         {{row.data.initialDriveType}}\n      </clr-dg-cell>\n      <clr-dg-cell *ngIf=\"selectedPerspective == DisksGroupByPerspective.DISKS_BY_HOST\" vsan-show-title>\n         {{row.data.capacity}}\n      </clr-dg-cell>\n      <clr-dg-cell *ngIf=\"selectedPerspective == DisksGroupByPerspective.DISKS_BY_VENDOR\" vsan-show-title>\n         <clr-icon *ngIf=\"getHostIcon(row.data)\" [attr.shape]=\"getHostIcon(row.data)\"></clr-icon>\n         {{row.data.hostName}}\n      </clr-dg-cell>\n      <clr-dg-cell *ngIf=\"isStandalone\">{{row.data.transportType}}</clr-dg-cell>\n      <clr-dg-cell *ngIf=\"isStandalone\">{{row.data.diskAdapter}}</clr-dg-cell>\n   </clr-dg-row>\n\n   <!-- Datagrid Footer -->\n   <clr-dg-footer>\n      <clr-dg-pagination [clrDgPageSize]=\"ClaimDisksUtil.DISKS_PER_DATAGRID_PAGE\">\n         {{footerLabel.getLabel(selectedPerspective)}}\n      </clr-dg-pagination>\n   </clr-dg-footer>\n</clr-datagrid>","/* Copyright (c) 2021 VMware, Inc. All rights reserved. VMware Confidential */\nimport {\n   Directive, ElementRef, HostListener,\n} from \"@angular/core\";\nimport {ReferenceWatcher} from \"@util/reference-watcher\";\n\n/**\n * A directive that handles onchange event for some input control and sets back the focus to it afterwards.\n */\n@Directive({\n   selector: \"[vsan-refocus-after-change]\",\n   providers: [ReferenceWatcher],\n})\nexport class RefocusAfterChangeDirective {\n   constructor(private el: ElementRef, private refWatcher: ReferenceWatcher) { }\n\n   @HostListener(\"change\", [\"$event\"])\n   processChange(e: Event): void {\n      this.refWatcher.setTimeout(() => {\n         document.body.classList.add(\"user-tabbing\");\n         this.el.nativeElement.focus();\n      }, 50);\n      e.preventDefault();\n      e.stopPropagation();\n      e.stopImmediatePropagation();\n   }\n}","/* Copyright 2020-2022 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, EventEmitter, Input, OnInit, Output} from \"@angular/core\";\nimport {FunctionFilter} from \"@component/datagrid/filter/function-filter\";\nimport {TreeDatagridRow} from \"@component/datagrid/tree-datagrid\";\nimport {TreeDatagridView} from \"@component/datagrid/tree-datagrid-view\";\nimport {ClaimDisksUtil} from \"@component/diskmgmt/claim-disks-util\";\nimport {ClaimDisksDatagridFooterLabel} from \"@component/diskmgmt/model/claim-disks-datagrid-footer-label\";\nimport {ClaimHostListItem} from \"@component/diskmgmt/model/claim-host-list-item.data\";\nimport {ClaimRootListItem} from \"@component/diskmgmt/model/claim-root-list-item.data\";\nimport {ClaimVendorListItem} from \"@component/diskmgmt/model/claim-vendor-list-item.data\";\nimport {DriveType} from \"@component/diskmgmt/model/drive-type.data\";\nimport {VsanBaseListItem} from \"@component/diskmgmt/model/vsan-base-list-item.data\";\nimport {VsanDiskListItem} from \"@component/diskmgmt/model/vsan-disk-list-item\";\nimport {DisksGroupByPerspective} from \"@component/diskmgmt/perspective/disks-group-by-perspective\";\nimport {ClaimOption} from \"@generated/claim-option\";\nimport {DiskMgmtDiskUtil} from \"@util/disk-mgmt-disk.util\";\nimport {Icon} from \"@util/icon\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\n\n@Component({\n   selector: \"vsan-claim-for-vsan\",\n   templateUrl: \"claim-for-vsan.html\",\n   styleUrls: [\"claim-for-vsan.scss\"],\n})\nexport class ClaimForVsanComponent extends TreeDatagridView implements OnInit {\n   static readonly CHILD_FIELD: string = \"eligibleDisksInDatastoreContext\";\n   DisksGroupByPerspective: typeof DisksGroupByPerspective = DisksGroupByPerspective;\n   ClaimDisksUtil: typeof ClaimDisksUtil = ClaimDisksUtil;\n\n   @Input()\n   allHostsInCluster: ClaimHostListItem[];\n\n   @Input()\n   disksByVendor: ClaimVendorListItem[];\n\n   @Input()\n   isStandalone: boolean;\n\n   @Output()\n   update: EventEmitter<void> = new EventEmitter<void>();\n\n   selectedPerspective: DisksGroupByPerspective;\n   showWarning: boolean = false;\n   warningTitle: string;\n   warningText: string;\n   warningConfirmationHandler: () => void;\n   footerLabel: ClaimDisksDatagridFooterLabel;\n\n   private changeDriveTypeEvent: any;\n\n   constructor() {\n      super(ClaimForVsanComponent.CHILD_FIELD);\n      this.multipleSelection = true;\n      this.selectionChangeHandler = this.selectionChange;\n   }\n\n   selectionChange(): void {\n      this.update.emit();\n   }\n\n   ngOnInit(): void {\n      this.datagridLoading = false;\n      this.footerLabel = new ClaimDisksDatagridFooterLabel(this.allHostsInCluster, this.disksByVendor);\n   }\n\n   changePerspective(perspective: DisksGroupByPerspective): void {\n      this.selectedPerspective = perspective;\n      ClaimDisksUtil.changePerspective(\n            this.selectedPerspective, this.datagrid, this.allHostsInCluster, this.disksByVendor);\n   }\n\n   claimFor = (option: ClaimOption) => {\n      for (const target of this.selectedTargets) {\n         target.data.claimOption = option;\n      }\n      this.update.emit();\n   };\n\n   getClaimOptions = (data: VsanBaseListItem): ClaimOption[] => {\n      const claimOptions: ClaimOption[] = this.getEligibleForVsanClaimOptions(data);\n\n      if (!claimOptions) {\n         return [];\n      }\n\n      // if the currently selected option is not Custom remove it\n      // this option appears when child items posses different claim options\n      if (data.claimOption !== ClaimOption.Custom && claimOptions.includes(ClaimOption.Custom)) {\n         claimOptions.splice(claimOptions.indexOf(ClaimOption.Custom), 1);\n      }\n\n      return claimOptions;\n   };\n\n   /**\n    * Skip vSAN Direct claim option\n    */\n   private getEligibleForVsanClaimOptions(data: VsanBaseListItem): ClaimOption[] {\n      return data.possibleClaimOptions.filter(co => !DiskMgmtDiskUtil.VSAN_DIRECT_CLAIM_OPTIONS.includes(co));\n   }\n\n   localizeClaimOption = (claimOption: ClaimOption): string => {\n      return ClaimDisksUtil.getLocalizedClaimOption(claimOption);\n   };\n\n   hasDriveTypeWarningImage = (listData: ClaimRootListItem): boolean => {\n      // In case we have vendor root item, then if all the child disks are\n      // with the same marking, check if we should show the warning\n      if (listData instanceof ClaimVendorListItem) {\n         const vendorItem: ClaimVendorListItem = listData as ClaimVendorListItem;\n         if (vendorItem.areAllItemsMarkedTheSame() && this.shouldShowDriveTypeWarning(vendorItem)) {\n            return true;\n         }\n      } else if (this.shouldShowDriveTypeWarning(listData)) {\n         return true;\n      }\n\n      return null;\n   };\n\n   get onWarningDriveTypeTooltip(): string {\n      return VsanUiUtils.getString(\"vsan.dialog.semiAutoClaimDialog.warning.markedNotClaimedDisk\");\n   }\n\n   shouldShowDriveTypeWarning = (item: VsanBaseListItem): boolean => {\n      if (item instanceof ClaimHostListItem) {\n         return false;\n      }\n\n      return item.markedAsFlash !== item.isFlash && item.claimOption === ClaimOption.DoNotClaim;\n   };\n\n   getHostIcon = (item: VsanBaseListItem): string => {\n      return item.isRoot ? null : Icon.HOST;\n   };\n\n   markSelectedItems = (markAsFlash: boolean) => {\n      for (const selectedRow of this.selectedTargets) {\n         selectedRow.data.markedAsFlash = markAsFlash;\n      }\n\n      this.update.emit();\n      this.showWarning = false;\n   };\n\n   markFlash = () => {\n      this.markSelectedItems(true);\n   };\n\n   markHdd = () => {\n      this.markSelectedItems(false);\n   };\n\n   markSelectedItemsAsFlash = () => {\n      if (this.hasSelectedDisksForClaiming()) {\n         this.warningTitle = VsanUiUtils.getString(\"storage.adapters.devices.action.tagAsSsd\");\n         this.warningText = VsanUiUtils.getString(\"vsan.dialog.semiAutoClaimDialog.markAsFlash.warning\");\n         this.warningConfirmationHandler = this.markFlash;\n         this.showWarning = true;\n      } else {\n         this.markFlash();\n      }\n   };\n\n   markSelectedItemsAsHdd = () => {\n      if (this.hasSelectedDisksForClaiming()) {\n         this.warningTitle = VsanUiUtils.getString(\"storage.adapters.devices.action.untagAsSsd\");\n         this.warningText = VsanUiUtils.getString(\"vsan.dialog.semiAutoClaimDialog.markAsHdd.warning\");\n         this.warningConfirmationHandler = this.markHdd;\n         this.showWarning = true;\n      } else {\n         this.markHdd();\n      }\n   };\n\n   private hasSelectedDisksForClaiming = (): boolean => {\n      const disksToClaimFound: TreeDatagridRow = this.selectedTargets.find((element): boolean => {\n         return element.data.claimOption !== ClaimOption.DoNotClaim;\n      });\n      return !!disksToClaimFound;\n   };\n\n   changeClaimOption = (item: any, event: any) => {\n      item.claimOption = event.target.value;\n      this.update.emit();\n   };\n\n   changeDriveType = (event: any) => {\n      this.changeDriveTypeEvent = event;\n      if (event.target.value === DriveType.FLASH.toString() ||\n            event.target.value === DriveType.MARKED_AS_FLASH.toString()) {\n         this.markSelectedItemsAsFlash();\n      } else if (event.target.value === DriveType.HDD.toString() ||\n            event.target.value === DriveType.MARKED_AS_HDD.toString()) {\n         this.markSelectedItemsAsHdd();\n      }\n   };\n\n   cancelMarkAsAction = () => {\n      this.showWarning = false;\n      // When clicking a new option in the select dropdown list, even if we don't update its binding value,\n      // its selected option will appear to change, which happens when the user cancels the \"Mark as\" action,\n      // resetting it to avoid this kind of situation.\n      this.changeDriveTypeEvent.target.value = this.selectedTargets[0].data.driveType;\n   };\n\n   get nameColumnTitle(): string {\n      return ClaimDisksUtil.getNameColumnTitle(this.selectedPerspective);\n   }\n\n   nameFilter: FunctionFilter<VsanDiskListItem> = new FunctionFilter((data: VsanDiskListItem) => {\n      return data.name;\n   });\n\n   driveTypeFilter: FunctionFilter<VsanDiskListItem> = new FunctionFilter((data: VsanDiskListItem) => {\n      return data.driveTypeLabel;\n   });\n\n   totalCapacityFilter: FunctionFilter<VsanDiskListItem> = new FunctionFilter((data: VsanDiskListItem) => {\n      return data.capacity;\n   });\n\n   hostNameFilter: FunctionFilter<VsanDiskListItem> = new FunctionFilter((data: VsanDiskListItem) => {\n      return data.hostName;\n   });\n\n   transportTypeFilter: FunctionFilter<VsanDiskListItem> = new FunctionFilter((data: VsanDiskListItem) => {\n      return data.transportType;\n   });\n\n   diskAdapterFilter: FunctionFilter<VsanDiskListItem> = new FunctionFilter((data: VsanDiskListItem) => {\n      return data.diskAdapter;\n   });\n\n   get warningHeaderClass(): string {\n      return this.isStandalone ? \"\" : \"warning-popup-header\";\n   }\n\n   get warningContentClass(): string {\n      return this.isStandalone ? \"\" : \"warning-popup-content\";\n   }\n}","<!--Copyright 2017-2022 VMware, Inc. All rights reserved. -- VMware Confidential-->\n<!-- Display aggregated issue if more than one error(s) and/or warning(s) are available -->\n<vsan-validation *ngIf=\"hasAggregatedIssue\"\n                 id=\"aggregated-issue-container\"\n                 [alertType]=\"aggregatedIssueClass\"\n                 [allowClose]=\"false\"\n                 [alert]=\"'vsan.dialog.semiAutoClaimDialog.aggregatedIssue' | localized\"\n                 [actionLink]=\"openIssueActionLink\">\n</vsan-validation>\n\n<!-- Single errors to display -->\n<vsan-validation *ngIf=\"hasErrors && !hasAggregatedIssue\"\n                 id=\"error-container\"\n                 [alertType]=\"'danger'\"\n                 [allowClose]=\"false\"\n                 [alert]=\"vsanErrors[0]\">\n</vsan-validation>\n\n<!-- Single warning to display -->\n<vsan-validation *ngIf=\"hasWarnings && !hasAggregatedIssue\"\n                 id=\"warning-container\"\n                 [alertType]=\"'warning'\"\n                 [allowClose]=\"false\"\n                 [alert]=\"vsanWarnings[0]\">\n</vsan-validation>\n\n<!-- Claiming issues list pop-up -->\n<div id=\"issues-list-dialog\"\n     class=\"modal\"\n     *ngIf=\"issuesListOpened\"\n     vsan-on-modal-escape\n     vsan-focus-trap\n     (onEscape)=\"issuesListOpened = false\">\n   <div class=\"modal-dialog\"\n        role=\"dialog\"\n        aria-modal=\"true\">\n      <div class=\"modal-content\">\n         <div class=\"modal-header issues-list-popup-header\">\n            <h3 id=\"issues-list-title\"\n                class=\"modal-title\">\n               {{\"vsan.dialog.semiAutoClaimDialog.claimingIssuesDialog.title\" | localized}}\n            </h3>\n         </div>\n         <div id=\"issues-list-content\"\n              class=\"modal-body\">\n            <vsan-validation *ngIf=\"vsanErrors && vsanErrors.length\"\n                             [alertType]=\"'danger'\"\n                             [allowClose]=\"false\"\n                             [(alerts)]=\"vsanErrors\"\n                             [alertsExpanded]=\"true\"\n                             [allowExpandCollapse]=\"false\">\n            </vsan-validation>\n            <vsan-validation *ngIf=\"vsanWarnings && vsanWarnings.length\"\n                             [alertType]=\"'warning'\"\n                             [allowClose]=\"false\"\n                             [(alerts)]=\"vsanWarnings\"\n                             [alertsExpanded]=\"true\"\n                             [allowExpandCollapse]=\"false\">\n            </vsan-validation>\n         </div>\n         <div class=\"modal-footer\">\n            <button type=\"button\"\n                    class=\"btn btn-primary\"\n                    (click)=\"issuesListOpened = false\">\n               {{\"vsan.common.close\" | localized}}\n            </button>\n         </div>\n      </div>\n   </div>\n</div>\n<div *ngIf=\"issuesListOpened\"\n     class=\"modal-backdrop opaque-backdrop fade in\"\n     aria-hidden=\"true\">\n</div>\n","/* Copyright 2017-2019 VMware, Inc. All rights reserved. -- VMware Confidential */\n\nexport class VsanDisksTransportTypeData {\n\n   private _deviceTransportMap: any;\n   private _deviceAdapterMap: any;\n\n   /**\n    * Host devices custom property.\n    * Populated by the StorageAdaptersPropertyProvider.\n    * [Model(property=\"vsanStorageAdapterDevices\")]\n    */\n   public set storageAdapterDevices(\n         value: any[]/*com.vmware.vsphere.client.storage.adapters.StorageDeviceData*/) {\n      if (!value) {\n         return;\n      }\n\n      this._deviceTransportMap = {};\n      this._deviceAdapterMap = {};\n\n      // Updates the list of storage adapters.\n      for (let deviceData /*com.vmware.vsphere.client.storage.adapters.StorageDeviceData*/ of value) {\n         let deviceLun: any /*ScsiLun*/ = deviceData.underlyingLun;\n         let deviceUuid: string = deviceLun.uuid;\n         this._deviceTransportMap[deviceUuid] = deviceData.transport;\n         this._deviceAdapterMap[deviceUuid] = deviceData.adapter;\n      }\n   }\n\n   /**\n    * Returns an array of transport types for the specified device.\n    */\n   public getDeviceTransport(deviceUuid: string): any[] {\n      if (this._deviceTransportMap && this._deviceTransportMap.hasOwnProperty(deviceUuid)) {\n         return this._deviceTransportMap[deviceUuid];\n      }\n\n      return null;\n   }\n\n   /**\n    * Returns an array of transport types for the specified device.\n    */\n   public getDeviceAdapter(deviceUuid: string): string {\n      if (this._deviceAdapterMap && this._deviceAdapterMap.hasOwnProperty(deviceUuid)) {\n         return this._deviceAdapterMap[deviceUuid];\n      }\n\n      return null;\n   }\n}\n","/* Copyright 2020-2022 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {ClaimOption} from \"@generated/claim-option\";\nimport {DiskMgmtDiskUtil} from \"@util/disk-mgmt-disk.util\";\nimport {VsanPmemDiskData} from \"@generated/vsan-pmem-disk-data\";\nimport {Icon} from \"@util/icon\";\nimport {ManagedObject} from \"@service/managed-object\";\n\nexport class VsanPmemStorageListItem {\n\n   private _claimOption: ClaimOption = ClaimOption.DoNotClaim;\n\n   constructor(private storage: VsanPmemDiskData, public hostName: string, public hostMor: ManagedObject) { }\n\n   get uuid(): string {\n      return this.storage.uuid;\n   }\n\n   get name(): string {\n      return this.storage.name;\n   }\n\n   get capacity(): string {\n      return VsanUiUtils.formatFileSize(this.capacityNum);\n   }\n\n   get capacityNum(): number {\n      return this.storage.capacity;\n   }\n\n   get claimOption(): ClaimOption {\n      return this._claimOption;\n   }\n\n   set claimOption(newClaimOption: ClaimOption) {\n      if (newClaimOption !== ClaimOption.DoNotClaim && this._claimOption !== ClaimOption.DoNotClaim) {\n         return;\n      }\n\n      if (newClaimOption !== ClaimOption.PMEM && newClaimOption !== ClaimOption.DoNotClaim) {\n         return;\n      }\n\n      this._claimOption = newClaimOption;\n   }\n\n   get state(): string {\n      return DiskMgmtDiskUtil.localizeMountedState(this.storage.diskStatus);\n   }\n\n   get isHealthy(): boolean {\n      return this.storage.diskStatus && this.storage.diskStatus.isDiskHealthy;\n   }\n\n   get healthStatus(): string {\n      return DiskMgmtDiskUtil.getHealth(this.storage.diskStatus);\n   }\n\n   get healthIconShape(): string {\n      return this.isHealthy ? Icon.CLR_SUCCESS_STANDARD_ICON_SHAPE : Icon.CLR_ERROR_STANDARD_ICON_SHAPE;\n   }\n\n   get healthIconClass(): string {\n      return Icon.clrIconShapeClassMap[this.healthIconShape];\n   }\n\n   get isManageableByVsan(): boolean {\n      return this.storage.isManageableByVsan;\n   }\n\n   get canBeClaimedForPMem(): boolean {\n      return this.claimOption === ClaimOption.PMEM || this.claimOption === ClaimOption.DoNotClaim;\n   }\n}\n","/* Copyright 2022 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {ClaimHostListItem} from \"@component/diskmgmt/model/claim-host-list-item.data\";\nimport {ClaimVendorListItem} from \"@component/diskmgmt/model/claim-vendor-list-item.data\";\nimport {DisksGroupByPerspective} from \"@component/diskmgmt/perspective/disks-group-by-perspective\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\n\nexport class ClaimDisksDatagridFooterLabel {\n   private readonly groupByHostLabel: string;\n   private readonly groupByVendorLabel: string;\n\n   constructor(private disksByHost: ClaimHostListItem[], private disksByVendor: ClaimVendorListItem[]) {\n      this.groupByHostLabel = this.getHostsPerspectiveLabel(disksByHost);\n      this.groupByVendorLabel = this.getVendorPerspectiveLabel(disksByVendor);\n   }\n\n   getLabel(perspective: DisksGroupByPerspective): string {\n      if (perspective === DisksGroupByPerspective.DISKS_BY_HOST) {\n         return this.groupByHostLabel;\n      }\n      return this.groupByVendorLabel;\n   }\n\n   private getHostsPerspectiveLabel(hostsInCluster: ClaimHostListItem[]): string {\n      const eligibleDisks: number = hostsInCluster\n            .reduce((total, host) => (total + host.eligibleDisksInDatastoreContext?.length), 0);\n      const hostsWithEligibleDisks: number = hostsInCluster\n            .filter(host => host.eligibleDisksInDatastoreContext?.length > 0)\n            .length;\n\n      return hostsWithEligibleDisks > 0\n            ? VsanUiUtils.getString(\"vsan.disk.semiAutoClaimDialog.hosts.datagrid.footer\", hostsWithEligibleDisks,\n                  eligibleDisks)\n            : VsanUiUtils.getString(\"vsan.disk.semiAutoClaimDialog.noeligible.datagrid.footer\");\n   }\n\n   private getVendorPerspectiveLabel(disksByVendor: ClaimVendorListItem[]): string {\n      const eligibleDisks: number = disksByVendor\n            .reduce((total, vendor) => (total + vendor.eligibleDisksInDatastoreContext?.length), 0);\n      const vendorsWithEligibleDisks: number = disksByVendor\n            .filter(vendor => vendor.eligibleDisksInDatastoreContext?.length > 0)\n            .length;\n\n      return vendorsWithEligibleDisks > 0\n            ? VsanUiUtils.getString(\"vsan.disk.semiAutoClaimDialog.size.model.datagrid.footer\",\n                  vendorsWithEligibleDisks, eligibleDisks)\n            : VsanUiUtils.getString(\"vsan.disk.semiAutoClaimDialog.noeligible.datagrid.footer\");\n   }\n}","/* Copyright 2017-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {VsanDiskListItem} from \"@component/diskmgmt/model/vsan-disk-list-item\";\nimport {ClaimVendorListItem} from \"@component/diskmgmt/model/claim-vendor-list-item.data\";\n\n/**\n * Disk mapping model between models and flash option.\n */\nexport class VendorMapResult {\n\n   private models: string[] = [];\n   private items: Map<string, Map<string, VsanDiskListItem[]>>; // [model][isFlash]->VsanDiskListItem[]\n\n   constructor(keys: string[], result: Map<string, Map<string, VsanDiskListItem[]>>) {\n      this.models = keys;\n      this.items = result;\n   }\n\n   get result(): ClaimVendorListItem[] {\n      const result: ClaimVendorListItem[] = [];\n\n      for (const model of this.models) {\n         if (this.hasDisks(model, true.toString())) {\n            const ssdVendorItem: ClaimVendorListItem = new ClaimVendorListItem();\n            ssdVendorItem.eligibleDisks = this.getDisks(model, true.toString());\n            ssdVendorItem.name = model;\n            result.push(ssdVendorItem);\n         }\n         if (this.hasDisks(model, false.toString())) {\n            const nonSsdVendorItem: ClaimVendorListItem = new ClaimVendorListItem();\n            nonSsdVendorItem.eligibleDisks = this.getDisks(model, false.toString());\n            nonSsdVendorItem.name = model;\n            result.push(nonSsdVendorItem);\n         }\n      }\n\n      return result;\n   }\n\n   private hasDisks(diskModel: string, diskType: string): boolean {\n      return this.items.has(diskModel) && this.items.get(diskModel).has(diskType);\n   }\n\n   private getDisks(diskModel: string, diskType: string): VsanDiskListItem[] {\n      return this.items.get(diskModel).get(diskType);\n   }\n}\n","/* Copyright 2021-2022 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, EventEmitter, Input, OnInit, Output} from \"@angular/core\";\nimport {FunctionFilter} from \"@component/datagrid/filter/function-filter\";\nimport {TreeDatagridView} from \"@component/datagrid/tree-datagrid-view\";\nimport {ClaimDisksUtil} from \"@component/diskmgmt/claim-disks-util\";\nimport {ClaimDisksDatagridFooterLabel} from \"@component/diskmgmt/model/claim-disks-datagrid-footer-label\";\nimport {ClaimHostListItem} from \"@component/diskmgmt/model/claim-host-list-item.data\";\nimport {ClaimRootListItem} from \"@component/diskmgmt/model/claim-root-list-item.data\";\nimport {ClaimVendorListItem} from \"@component/diskmgmt/model/claim-vendor-list-item.data\";\nimport {VsanBaseListItem} from \"@component/diskmgmt/model/vsan-base-list-item.data\";\nimport {VsanDiskListItem} from \"@component/diskmgmt/model/vsan-disk-list-item\";\nimport {DisksGroupByPerspective} from \"@component/diskmgmt/perspective/disks-group-by-perspective\";\nimport {ClaimOption} from \"@generated/claim-option\";\nimport {Icon} from \"@util/icon\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\n\n@Component({\n   selector: \"vsan-claim-for-vsan-max\",\n   templateUrl: \"claim-for-vsan-max.html\",\n   styleUrls: [\"claim-for-vsan-max.scss\"],\n})\nexport class ClaimForVsanMaxComponent extends TreeDatagridView implements OnInit {\n   static readonly CHILD_FIELD: string = \"eligibleDisksInDatastoreContext\";\n   DisksGroupByPerspective: typeof DisksGroupByPerspective = DisksGroupByPerspective;\n   ClaimOption: typeof ClaimOption = ClaimOption;\n   ClaimDisksUtil: typeof ClaimDisksUtil = ClaimDisksUtil;\n\n   @Input()\n   disksByHost: ClaimHostListItem[];\n\n   @Input()\n   disksByVendor: ClaimVendorListItem[];\n\n   @Input()\n   isStandalone: boolean;\n\n   @Output()\n   update: EventEmitter<void> = new EventEmitter<void>();\n\n   groupByPerspective: DisksGroupByPerspective;\n   footerLabel: ClaimDisksDatagridFooterLabel;\n\n   constructor() {\n      super(ClaimForVsanMaxComponent.CHILD_FIELD);\n   }\n\n   ngOnInit(): void {\n      this.datagridLoading = false;\n      this.footerLabel = new ClaimDisksDatagridFooterLabel(this.disksByHost, this.disksByVendor);\n   }\n\n   changePerspective(perspective: DisksGroupByPerspective): void {\n      this.groupByPerspective = perspective;\n      ClaimDisksUtil.changePerspective(this.groupByPerspective, this.datagrid, this.disksByHost, this.disksByVendor);\n   }\n\n   getHostIcon(data: VsanBaseListItem): string {\n      return data.isRoot ? null : Icon.HOST;\n   }\n\n   /*\n    * Toggle between Claimed/Unclaimed.\n    * For vSAN MAX's MVP release we only claim disks for Single tier.\n    */\n   toggleClaiming(data: ClaimRootListItem, target: any): void {\n      data.claimOption = target.checked ? ClaimOption.SingleTier : ClaimOption.DoNotClaim;\n      data.markedAsFlash = data.isFlash;\n      this.update.emit();\n   }\n\n   getIsVsanMaxCompatibleLabel(data: VsanDiskListItem | ClaimRootListItem): string {\n      // For grouping by host we cannot have a root level information displayed as the disks can be mixed.\n      if (this.groupByPerspective === DisksGroupByPerspective.DISKS_BY_HOST && data.isRoot) {\n         return undefined;\n      }\n      return this.getIsVsanMaxCompatible(data) ?\n            VsanUiUtils.getString(\"vsan.disk.list.vsanMax.compatible\") :\n            VsanUiUtils.getString(\"vsan.disk.list.vsanMax.incompatible\");\n   }\n\n   getIsVsanMaxCompatibleIconClass(data: VsanDiskListItem | ClaimRootListItem): string {\n      return this.getIsVsanMaxCompatible(data) ?\n            Icon.CLR_SUCCESS_ICON_CLASS : Icon.CLR_WARN_ICON_CLASS;\n\n   }\n\n   getIsVsanMaxCompatibleIconShape(data: VsanDiskListItem | ClaimRootListItem): string {\n      return this.getIsVsanMaxCompatible(data) ?\n            Icon.CLR_SUCCESS_STANDARD_ICON_SHAPE : Icon.CLR_WARN_STANDARD_ICON_SHAPE;\n   }\n\n   private getIsVsanMaxCompatible(data: VsanDiskListItem | ClaimRootListItem): boolean {\n      if (data instanceof VsanDiskListItem) {\n         return data.isVsanMaxCompatible;\n      } else if (this.groupByPerspective === DisksGroupByPerspective.DISKS_BY_VENDOR\n            && !VsanUiUtils.isEmpty(data.eligibleDisks)) {\n         return data.eligibleDisks[0].isVsanMaxCompatible;\n      }\n      return false;\n   }\n\n   /*\n    * Bellow this line >> Clarity column filters.\n    */\n   nameFilter: FunctionFilter<VsanDiskListItem> = new FunctionFilter((data: VsanDiskListItem) => {\n      return data.name;\n   });\n\n   driveTypeFilter: FunctionFilter<VsanDiskListItem> = new FunctionFilter((data: VsanDiskListItem) => {\n      return data.driveTypeLabel;\n   });\n\n   isVsanMaxCompatibleFilter: FunctionFilter<VsanDiskListItem> = new FunctionFilter((data: VsanDiskListItem) => {\n      return \"\" + this.getIsVsanMaxCompatibleLabel(data);\n   });\n\n   totalCapacityFilter: FunctionFilter<VsanDiskListItem> = new FunctionFilter((data: VsanDiskListItem) => {\n      return data.capacity;\n   });\n\n   hostNameFilter: FunctionFilter<VsanDiskListItem> = new FunctionFilter((data: VsanDiskListItem) => {\n      return data.hostName;\n   });\n\n   transportTypeFilter: FunctionFilter<VsanDiskListItem> = new FunctionFilter((data: VsanDiskListItem) => {\n      return data.transportType;\n   });\n\n   diskAdapterFilter: FunctionFilter<VsanDiskListItem> = new FunctionFilter((data: VsanDiskListItem) => {\n      return data.diskAdapter;\n   });\n}","/* Copyright (c) 2021 VMware, Inc. All rights reserved. VMware Confidential */\nimport { HostListener } from '@angular/core';\nimport {\n   Directive, EventEmitter, Output,\n} from \"@angular/core\";\n\n/**\n * Used to overwrite the \"escape\" key behavior.\n * Should be used when having a inline modal which needs to be closed on escape.\n */\n@Directive({\n   selector: \"[vsan-on-modal-escape]\",\n})\nexport class OnModalEscapeDirective {\n   @Output()\n   onEscape: EventEmitter<void> = new EventEmitter<void>();\n\n   @HostListener(\"document:keyup.escape\", [\"$event\"])\n   processEscape(e: KeyboardEvent): void {\n      e.preventDefault();\n      e.stopImmediatePropagation();\n      e.stopPropagation();\n      this.onEscape.emit();\n   }\n}","/* Copyright 2017-2022 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {ClaimHostListItem} from \"@component/diskmgmt/model/claim-host-list-item.data\";\nimport {ClaimOption} from \"@generated/claim-option\";\nimport {MapUtil} from \"@util/map-util\";\nimport {ClaimedDisksData} from \"@component/diskmgmt/model/claimed-disks-data\";\nimport {DiskMgmtDiskUtil} from \"@util/disk-mgmt-disk.util\";\nimport {VsanDiskClaimSpec} from \"@generated/vsan-disk-claim-spec\";\n\n/**\n * Holds summary information about disks claiming.\n */\nexport class DisksClaimingConfigInfo {\n   oldUnclaimedStorage: number;\n   newUnclaimedStorage: number;\n   claimAllFlash: boolean;\n   mixedDiskClaiming: boolean;\n   disksNotEquallySpread: boolean;\n   private oldClaimedCapacity: number;\n   private newClaimedCapacity: number;\n   private oldClaimedCache: number;\n   private newClaimedCache: number;\n   // TODO [tdardzhonov] make capacity and cache disks to use that map\n   private claimedDisksSummary: Map<ClaimOption, ClaimedDisksData>;\n\n   constructor() {\n      this.resetAllFields();\n   }\n\n   setInitialState(allHostsInCluster: ClaimHostListItem[]): void {\n      this.resetAllFields();\n      for (const host of allHostsInCluster) {\n         this.oldClaimedCapacity += host.claimedCapacity;\n         this.oldClaimedCache += host.claimedCache;\n         this.oldUnclaimedStorage += host.unclaimedStorage;\n         this.initializeHostManagedByVsanSummary(host);\n      }\n   }\n\n   updateClaimingData(hostsClaimData: ClaimHostListItem[]): void {\n      this.setClaimingToInitialState();\n      this.resetValidationResult();\n\n      hostsClaimData.forEach((host) => {\n         this.newClaimedCapacity += host.capacityFor(ClaimOption.ClaimForStorage);\n         this.newClaimedCache += host.capacityFor(ClaimOption.ClaimForCache);\n         this.newUnclaimedStorage -= host.capacityFor(ClaimOption.ClaimForStorage);\n         this.newUnclaimedStorage -= host.capacityFor(ClaimOption.ClaimForCache);\n         this.newUnclaimedStorage -= host.getManagedByVsanClaimedSpace();\n         this.addDisksToManagedByVsanClaimOptions(host);\n\n         // determine it we are claiming hybrid groups or all flash only\n         host.getHostDisksToClaim().forEach((disk: VsanDiskClaimSpec) => {\n            if (disk.claimOption === ClaimOption.ClaimForStorage) {\n               this.claimAllFlash = disk.markedAsFlash;\n            }\n         });\n      });\n   }\n\n   updateManagedClaimingData(claimOption: ClaimOption, value: number): void {\n      const claimedDisksData: ClaimedDisksData = this.getManagedByVsanClaimOptionSummary(claimOption);\n      claimedDisksData.newClaimedCapacity = value;\n   }\n\n   totalCapacity(): number {\n      return this.newUnclaimedStorage + this.totalUsedCapacity();\n   }\n\n   totalUsedCapacity(): number {\n      return this.getClaimedCapacity(ClaimOption.ClaimForStorage)\n            + this.getClaimedCapacity(ClaimOption.ClaimForCache)\n            + MapUtil.sum(this.claimedDisksSummary, (claimedDisk) => claimedDisk.newClaimedCapacity);\n   }\n\n   resetValidationResult(): void {\n      this.mixedDiskClaiming = false;\n      this.disksNotEquallySpread = false;\n   }\n\n   clone(): DisksClaimingConfigInfo {\n      const disksClaiming: DisksClaimingConfigInfo = new DisksClaimingConfigInfo();\n      disksClaiming.oldClaimedCapacity = this.oldClaimedCapacity;\n      disksClaiming.oldClaimedCache = this.oldClaimedCache;\n      disksClaiming.oldUnclaimedStorage = this.oldUnclaimedStorage;\n      disksClaiming.newClaimedCapacity = this.newClaimedCapacity;\n      disksClaiming.newClaimedCache = this.newClaimedCache;\n      disksClaiming.newUnclaimedStorage = this.newUnclaimedStorage;\n      disksClaiming.claimAllFlash = this.claimAllFlash;\n      disksClaiming.mixedDiskClaiming = this.mixedDiskClaiming;\n      disksClaiming.disksNotEquallySpread = this.disksNotEquallySpread;\n      disksClaiming.claimedDisksSummary = this.claimedDisksSummary;\n      return disksClaiming;\n   }\n\n   hasNewClaimedCapacity(claimOption: ClaimOption): boolean {\n      return this.getClaimedCapacity(claimOption) - this.getOldClaimedCapacity(claimOption) > 0;\n   }\n\n   /**\n    * Return already claimed capacity\n    */\n   getOldClaimedCapacity(claimOption: ClaimOption): number {\n      if (claimOption === ClaimOption.ClaimForCache) {\n         return this.oldClaimedCache;\n      } else if (claimOption === ClaimOption.ClaimForStorage) {\n         return this.oldClaimedCapacity;\n      } else {\n         return this.claimedDisksSummary.has(claimOption)\n               ? this.claimedDisksSummary.get(claimOption).oldClaimedCapacity\n               : 0;\n      }\n   }\n\n   /**\n    * Return already claimed capacity + newly claimed capacity\n    */\n   getClaimedCapacity(claimOption: ClaimOption): number {\n      switch (claimOption) {\n         case ClaimOption.ClaimForCache:\n            return this.newClaimedCache;\n         case ClaimOption.ClaimForStorage:\n            return this.newClaimedCapacity;\n         default:\n            return this.claimedDisksSummary.has(claimOption) ?\n                  this.claimedDisksSummary.get(claimOption).newClaimedCapacity\n                  : 0;\n      }\n   }\n\n   /**\n    * Return the number of disks contributing to the given capacity option.\n    * This is currently only used when vSAN MAX is enabled.\n    * IMPORTANT:\n    * This method currently only works for disks that are written to claimedDisksSummary map,\n    * e.g. the vSAN 1 disks that are not considered, when populating it cannot be retrieved from this method.\n    * Check the TODO at claimedDisksSummary's definition above.\n    */\n   getClaimedDiskCount(claimOption: ClaimOption): number {\n      return this.claimedDisksSummary.has(claimOption) ?\n            this.claimedDisksSummary.get(claimOption).newClaimedDisksCount : 0;\n   }\n\n   private resetAllFields(): void {\n      this.oldClaimedCapacity = 0;\n      this.oldClaimedCache = 0;\n      this.oldUnclaimedStorage = 0;\n      this.newClaimedCapacity = 0;\n      this.newClaimedCache = 0;\n      this.newUnclaimedStorage = 0;\n      this.claimAllFlash = false;\n      this.mixedDiskClaiming = false;\n      this.disksNotEquallySpread = false;\n      this.claimedDisksSummary = new Map<ClaimOption, ClaimedDisksData>();\n   }\n\n   private setClaimingToInitialState(): void {\n      this.newClaimedCapacity = this.oldClaimedCapacity;\n      this.newClaimedCache = this.oldClaimedCache;\n      this.newUnclaimedStorage = this.oldUnclaimedStorage;\n      this.claimAllFlash = false;\n      this.resetClaimedDisksInManagedByVsanSummary();\n   }\n\n   private initializeHostManagedByVsanSummary(host: ClaimHostListItem): void {\n      for (const claimOption of DiskMgmtDiskUtil.MANAGED_BY_VSAN_CLAIM_OPTIONS) {\n         const claimedDisksData: ClaimedDisksData = this.getManagedByVsanClaimOptionSummary(claimOption);\n         const hostClaimOptionSummary: ClaimedDisksData = host.getClaimOptionSummary(claimOption);\n\n         if (hostClaimOptionSummary) {\n            claimedDisksData.oldClaimedDisksCount += hostClaimOptionSummary.oldClaimedDisksCount;\n            claimedDisksData.oldClaimedCapacity += hostClaimOptionSummary.oldClaimedCapacity;\n         }\n      }\n   }\n\n   private addDisksToManagedByVsanClaimOptions(host: ClaimHostListItem): void {\n      for (const claimOption of DiskMgmtDiskUtil.MANAGED_BY_VSAN_CLAIM_OPTIONS) {\n         const hostClaimOptionSummary: ClaimedDisksData = host.getClaimOptionSummary(claimOption);\n\n         if (hostClaimOptionSummary) {\n            const claimedDisksSummary: ClaimedDisksData = this.claimedDisksSummary.get(claimOption);\n            claimedDisksSummary.newClaimedDisksCount += hostClaimOptionSummary.newClaimedDisksCount;\n            claimedDisksSummary.newClaimedCapacity += hostClaimOptionSummary.newClaimedCapacity;\n         }\n      }\n   }\n\n   private getManagedByVsanClaimOptionSummary(claimOption: ClaimOption): ClaimedDisksData {\n      if (this.claimedDisksSummary.has(claimOption)) {\n         return this.claimedDisksSummary.get(claimOption);\n      }\n\n      const claimedDisksSummary: ClaimedDisksData = new ClaimedDisksData();\n      this.claimedDisksSummary.set(claimOption, claimedDisksSummary);\n      return claimedDisksSummary;\n   }\n\n   private resetClaimedDisksInManagedByVsanSummary(): void {\n      MapUtil.forEach(this.claimedDisksSummary, (summary) => {\n         summary.newClaimedDisksCount = summary.oldClaimedDisksCount;\n         summary.newClaimedCapacity = summary.oldClaimedCapacity;\n      });\n   }\n}","/* Copyright 2017-2022 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {ClaimOption} from \"@generated/claim-option\";\nimport {DatastoreType} from \"@generated/datastore-type\";\nimport {DiskMgmtDiskUtil} from \"@util/disk-mgmt-disk.util\";\nimport {VsanBaseListItem} from \"./vsan-base-list-item.data\";\nimport {VsanDiskListItem} from \"./vsan-disk-list-item\";\n\nexport class ClaimRootListItem extends VsanBaseListItem {\n\n   private _eligibleDisks: VsanDiskListItem[];\n   protected contextDatastoreType: DatastoreType = DatastoreType.VSAN;\n\n   set eligibleDisks(disks: VsanDiskListItem[]) {\n      this._eligibleDisks = disks;\n      this.claimOption = this.getUpdatedClaimOption();\n\n      this._capacityNum = 0;\n      if (this.eligibleDisks) {\n         for (const disk of this.eligibleDisks) {\n            this._capacityNum += disk.capacityNum;\n         }\n      }\n   }\n\n   /**\n    * Return all eligible disk.\n    */\n   get eligibleDisks(): VsanDiskListItem[] {\n      return this._eligibleDisks;\n   }\n\n   /**\n    * Returns whether there are some eligible disks for claim by vsan on the host.\n    */\n   get hasEligibleDisks(): boolean {\n      return this._eligibleDisks?.length > 0;\n   }\n\n   private _capacityNum: number = 0;\n\n   get capacityNum(): number {\n      return this._capacityNum;\n   }\n\n   /**\n    * Gets the claim option for the root item\n    */\n   get claimOption(): ClaimOption {\n      return this._claimOption;\n   }\n\n   set claimOption(newValue: ClaimOption) {\n      this._claimOption = newValue;\n      if (this._claimOption !== ClaimOption.Custom) {\n         this.updateChildrenClaimOption();\n      }\n   }\n\n   /**\n    * Updates the claim option for model's children:\n    * Claim children when a model group is claimed.\n    */\n   updateChildrenClaimOption(): void {\n      if (!this.eligibleDisks) {\n         return;\n      }\n      for (const disk of this.eligibleDisksInDatastoreContext) {\n         disk.claimOption = this.claimOption;\n      }\n   }\n\n   /**\n    * Updates the claim option according to the children ones.\n    */\n   updateClaimOption(datastoreType: DatastoreType): void {\n      this.contextDatastoreType = datastoreType;\n      this.claimOption = this.getUpdatedClaimOption();\n   }\n\n   private getUpdatedClaimOption(): ClaimOption {\n      let newClaimOption: ClaimOption = ClaimOption.DoNotClaim;\n      const disks: VsanDiskListItem[] = this.eligibleDisksInDatastoreContext;\n\n      if (disks.length > 0) {\n         newClaimOption = disks[0].claimOption;\n\n         for (const disk of disks) {\n            if (newClaimOption !== disk.claimOption) {\n               newClaimOption = ClaimOption.Custom;\n               break;\n            }\n         }\n      }\n      return newClaimOption;\n   }\n\n   /**\n    * Return disks which can be claimed in the context of a datastore type.\n    * That mean that these disks have to be eligible and not to be claimed for another datastore type already.\n    */\n   get eligibleDisksInDatastoreContext(): VsanDiskListItem[] {\n      if (!this.eligibleDisks || !this.eligibleDisks.length) {\n         return [];\n      }\n\n      return this.eligibleDisks.filter(disk => {\n         switch (this.contextDatastoreType) {\n            case DatastoreType.VSAN:\n               return this.isDiskEligible(\n                     DiskMgmtDiskUtil.isClaimedForVsanDirect,\n                     DiskMgmtDiskUtil.VSAN_CLAIM_OPTIONS,\n                     disk);\n            case DatastoreType.VSAN_DIRECT:\n               return this.isDiskEligible(\n                     DiskMgmtDiskUtil.isClaimedForVsan,\n                     DiskMgmtDiskUtil.VSAN_DIRECT_CLAIM_OPTIONS,\n                     disk);\n            default:\n               return false;\n         }\n      });\n   }\n\n   isDiskEligible(\n         isClaimedForOtherDsType: (claimOption: ClaimOption) => boolean,\n         validDsTypeClaimOptions: ClaimOption[],\n         disk: VsanDiskListItem): boolean {\n      const isNotClaimedForOtherDsType: boolean = !isClaimedForOtherDsType(disk.claimOption);\n\n      const canBeClaimedForThatDsType: boolean =\n            validDsTypeClaimOptions.some(\n                  claimOption => disk.possibleClaimOptions && disk.possibleClaimOptions.includes(claimOption));\n\n      return isNotClaimedForOtherDsType && canBeClaimedForThatDsType;\n   }\n}\n","<!-- Copyright (c) 2019-2022 VMware, Inc. All Rights Reserved. -->\n<div *ngIf=\"loading\" class=\"spinner central-spinner\">{{\"vsan.loading\" | localized}}</div>\n<ng-container *ngIf=\"!loading\">\n   <vsan-validation id=\"semi-auto-claim-validations\"\n                    *ngIf=\"errorMessage\"\n                    [allowClose]=\"false\"\n                    [alert]=\"errorMessage\">\n   </vsan-validation>\n\n   <vsan-disks-capacity-chart [disksClaiming]=\"disksClaimingConfigInfo\"></vsan-disks-capacity-chart>\n   <ng-container *ngIf=\"!vsanConfigSpec.isVsanMaxEnabled\">\n      <clr-tabs *ngIf=\"datastoreTypes.length > 1\">\n         <clr-tab *ngFor=\"let datastoreType of datastoreTypes\">\n            <button id=\"{{'datastore-type-' + datastoreType}}\"\n                    clrTabLink\n                    (click)=\"changeDatastoreType(datastoreType)\">\n               {{getDatastoreTypeLabel(datastoreType)}}\n            </button>\n            <clr-tab-content *clrIfActive=\"datastoreType === selectedDatastoreType\">\n               <ng-container *ngTemplateOutlet=\"dsType\"></ng-container>\n            </clr-tab-content>\n         </clr-tab>\n      </clr-tabs>\n\n      <ng-container *ngIf=\"datastoreTypes.length < 2\">\n         <ng-container *ngTemplateOutlet=\"dsType\"></ng-container>\n      </ng-container>\n   </ng-container>\n\n   <ng-container *ngIf=\"vsanConfigSpec.isVsanMaxEnabled\">\n      <ng-container *ngTemplateOutlet=\"vsanMax\"></ng-container>\n   </ng-container>\n\n   <ng-template #dsType>\n      <ng-container *ngIf=\"selectedDatastoreType === DatastoreType.VSAN\">\n         <ng-container *ngTemplateOutlet=\"vsan\"></ng-container>\n      </ng-container>\n      <ng-container *ngIf=\"selectedDatastoreType === DatastoreType.VSAN_DIRECT\">\n         <ng-container *ngTemplateOutlet=\"vmfs\"></ng-container>\n      </ng-container>\n      <ng-container *ngIf=\"selectedDatastoreType === DatastoreType.PMEM\">\n         <ng-container *ngTemplateOutlet=\"pmem\"></ng-container>\n      </ng-container>\n   </ng-template>\n\n   <ng-template #vsan>\n      <vsan-claim-for-vsan [allHostsInCluster]=\"allHostsInCluster\"\n                           [disksByVendor]=\"disksByVendor\"\n                           [isStandalone]=\"isStandalone\"\n                           (update)=\"update()\">\n      </vsan-claim-for-vsan>\n   </ng-template>\n\n   <ng-template #vsanMax>\n      <vsan-claim-for-vsan-max [disksByHost]=\"allHostsInCluster\"\n                               [disksByVendor]=\"disksByVendor\"\n                               [isStandalone]=\"isStandalone\"\n                               (update)=\"update()\">\n      </vsan-claim-for-vsan-max>\n   </ng-template>\n\n   <ng-template #vmfs>\n      <vsan-claim-for-vsan-direct [allHostsInCluster]=\"allHostsInCluster\"\n                                  [disksByVendor]=\"disksByVendor\"\n                                  [isStandalone]=\"isStandalone\"\n                                  (update)=\"update()\">\n      </vsan-claim-for-vsan-direct>\n   </ng-template>\n\n   <ng-template #pmem>\n      <vsan-claim-for-pmem [allHostsInCluster]=\"allHostsInCluster\"\n                           (update)=\"update()\">\n      </vsan-claim-for-pmem>\n   </ng-template>\n\n   <vsan-validation-panel\n         id=\"validationContainer\"\n         [noSelectionIsError]=\"isStandalone\"\n         [hostsData]=\"allHostsInCluster\"\n         [vsanConfigSpec]=\"vsanConfigSpec\"\n         [disksClaimingConfigInfo]=\"disksClaimingConfigInfo\"\n         (isConfigAcceptable)=\"configValid.emit($event)\">\n   </vsan-validation-panel>\n</ng-container>\n\n\n","import {ClaimOption} from '@generated/claim-option';\n\nexport interface VsanDiskClaimSpec {\n\n   disk: any;\n   claimOption: ClaimOption;\n   markedAsFlash: boolean;\n} //class VsanDiskClaimSpec\n\nexport module VsanDiskClaimSpec{\nexport class Factory {\n\n   static create = (disk: any, claimOption: ClaimOption, markedAsFlash: boolean): VsanDiskClaimSpec => {\n      return { disk: disk, claimOption: claimOption, markedAsFlash: markedAsFlash, };\n   }\n\n\n} //class Factory\n\n} //module VsanDiskClaimSpec\n","import {VsanDiskClaimSpec} from '@generated/vsan-disk-claim-spec';\n\nexport interface VsanClaimHostDiskMappingsSpec {\n\n   clusterRef: any;\n   hostRef: any;\n   disks: VsanDiskClaimSpec[];\n   isAllFlashSupported: boolean;\n} //class VsanClaimHostDiskMappingsSpec\n\nexport module VsanClaimHostDiskMappingsSpec{\nexport class Factory {\n\n   static create = (clusterRef: any, hostRef: any, disks: VsanDiskClaimSpec[], isAllFlashSupported: boolean): VsanClaimHostDiskMappingsSpec => {\n      return { clusterRef: clusterRef, hostRef: hostRef, disks: disks, isAllFlashSupported: isAllFlashSupported, };\n   }\n\n\n} //class Factory\n\n} //module VsanClaimHostDiskMappingsSpec\n","<!-- Copyright (c) 2020-2022 VMware, Inc. All Rights Reserved. -->\n<div id=\"vsan-claim-title\">{{\"vsan.dialog.semiAutoClaimDialog.confInfo.vsan\" | localized}}</div>\n<!--Eligible Disks Button Bar -->\n<div class=\"clr-row\">\n   <vsan-disks-group-by-perspective class=\"clr-offset-8 clr-col-4\"\n                                    (changePerspective)=\"changePerspective($event)\">\n   </vsan-disks-group-by-perspective>\n</div>\n\n<!--    Eligible Disks List -->\n<clr-datagrid [clrDgLoading]=\"datagridLoading\" class=\"datagrid-compact\">\n   <!-- Datagrid Header -->\n   <clr-dg-column class=\"name-column\">\n      <vsan-tree-column [dataField]=\"'name'\"\n                        [dataProvider]=\"datagrid\"\n                        [filterObject]=\"nameFilter\"\n                        [title]=\"nameColumnTitle\">\n      </vsan-tree-column>\n   </clr-dg-column>\n   <clr-dg-column>\n      {{\"vsan.disk.list.claimFor\" | localized}}\n   </clr-dg-column>\n   <clr-dg-column>\n      <vsan-tree-column [dataField]=\"'driveTypeLabel'\"\n                        [dataProvider]=\"datagrid\"\n                        [filterObject]=\"driveTypeFilter\"\n                        [title]=\"'vsan.disk.list.driveType' | localized\">\n      </vsan-tree-column>\n   </clr-dg-column>\n   <clr-dg-column *ngIf=\"selectedPerspective == DisksGroupByPerspective.DISKS_BY_HOST\" class=\"name-column\">\n      <vsan-tree-column [dataField]=\"'capacity'\"\n                        [dataProvider]=\"datagrid\"\n                        [filterObject]=\"totalCapacityFilter\"\n                        [title]=\"'vsan.disk.list.totalCapacity' | localized\">\n      </vsan-tree-column>\n   </clr-dg-column>\n   <clr-dg-column *ngIf=\"selectedPerspective == DisksGroupByPerspective.DISKS_BY_VENDOR\" class=\"name-column\">\n      <vsan-tree-column [dataField]=\"'hostName'\"\n                        [dataProvider]=\"datagrid\"\n                        [filterObject]=\"hostNameFilter\"\n                        [title]=\"'vsan.disk.list.host' | localized\">\n      </vsan-tree-column>\n   </clr-dg-column>\n   <clr-dg-column *ngIf=\"isStandalone\">\n      <vsan-tree-column [dataField]=\"'transportType'\"\n                        [dataProvider]=\"datagrid\"\n                        [filterObject]=\"transportTypeFilter\"\n                        [title]=\"'vsan.disk.list.transportType' | localized\">\n      </vsan-tree-column>\n   </clr-dg-column>\n   <clr-dg-column *ngIf=\"isStandalone\">\n      <vsan-tree-column [dataField]=\"'diskAdapter'\"\n                        [dataProvider]=\"datagrid\"\n                        [filterObject]=\"diskAdapterFilter\"\n                        [title]=\"'vsan.disk.list.diskAdapter' | localized\">\n      </vsan-tree-column>\n   </clr-dg-column>\n   <!-- Datagrid Content -->\n   <clr-dg-row *clrDgItems=\"let row of datagrid.rows\"\n               [class.datagrid-selected]=\"isRowSelected(row)\"\n               (click)=\"selectTarget(row, $event)\">\n      <clr-dg-cell vsan-show-title>\n         <vsan-expand [row]=\"row\"></vsan-expand>\n         <clr-icon [attr.shape]=\"row.data.image\"></clr-icon>\n         <span>{{row.data.name}}</span>\n      </clr-dg-cell>\n      <clr-dg-cell class=\"dropdown-cell\">\n         <clr-icon *ngIf=\"isStandalone\" [attr.shape]=\"row.data.claimOptionIcon\"></clr-icon>\n         <select vsan-refocus-after-change clrSelect (change)=\"changeClaimOption(row.data, $event)\">\n            <option *ngFor=\"let option of getClaimOptions(row.data)\"\n                    value=\"{{option}}\"\n                    [selected]=\"option == row.data.claimOption\">\n               {{localizeClaimOption(option)}}\n            </option>\n         </select>\n      </clr-dg-cell>\n      <clr-dg-cell class=\"text-nowrap dropdown-cell\">\n         <clr-tooltip *ngIf=\"hasDriveTypeWarningImage(row.data)\">\n            <clr-icon shape=\"warning\" class=\"is-warning\" clrTooltipTrigger></clr-icon>\n            <clr-tooltip-content *clrIfOpen clrSize=\"lg\">\n               <span id=\"migration-mode-tooltip\">{{onWarningDriveTypeTooltip}}</span>\n            </clr-tooltip-content>\n         </clr-tooltip>\n         <select vsan-refocus-after-change *ngIf=\"row.data.driveTypeLabel\"\n                 clrSelect\n                 (change)=\"changeDriveType($event)\">\n            <option *ngFor=\"let type of row.data.possibleDriveTypes\"\n                    value=\"{{type}}\"\n                    [selected]=\"type === row.data.driveType\">\n               {{ClaimDisksUtil.getLocalizedDriveType(type)}}\n            </option>\n         </select>\n      </clr-dg-cell>\n      <clr-dg-cell *ngIf=\"selectedPerspective == DisksGroupByPerspective.DISKS_BY_HOST\" vsan-show-title>\n         {{row.data.capacity}}\n      </clr-dg-cell>\n      <clr-dg-cell *ngIf=\"selectedPerspective == DisksGroupByPerspective.DISKS_BY_VENDOR\" vsan-show-title>\n         <clr-icon *ngIf=\"getHostIcon(row.data)\" [attr.shape]=\"getHostIcon(row.data)\"></clr-icon>\n         {{row.data.hostName}}\n      </clr-dg-cell>\n      <clr-dg-cell *ngIf=\"isStandalone\">{{row.data.transportType}}</clr-dg-cell>\n      <clr-dg-cell *ngIf=\"isStandalone\">{{row.data.diskAdapter}}</clr-dg-cell>\n   </clr-dg-row>\n\n   <!-- Datagrid Footer -->\n   <clr-dg-footer>\n      <clr-dg-pagination [clrDgPageSize]=\"ClaimDisksUtil.DISKS_PER_DATAGRID_PAGE\">\n         {{footerLabel.getLabel(selectedPerspective)}}\n      </clr-dg-pagination>\n   </clr-dg-footer>\n</clr-datagrid>\n\n<!-- Mark as Flash/HDD Warning Dialog -->\n<div *ngIf=\"showWarning\"\n     id=\"warning-dialog\"\n     class=\"modal\"\n     vsan-on-modal-escape\n     (onEscape)=\"showWarning = false\">\n   <div class=\"modal-dialog\" role=\"dialog\">\n      <div class=\"modal-content\">\n         <div class=\"modal-header {{warningHeaderClass}}\">\n            <h3 id=\"warning-title\" class=\"modal-title\">\n               {{warningTitle}}\n            </h3>\n         </div>\n         <div id=\"warning-text\" class=\"modal-body {{warningContentClass}}\">\n            {{warningText}}\n         </div>\n         <div class=\"modal-footer\">\n            <button id=\"dismissal-button\"\n                    type=\"button\"\n                    class=\"btn btn-outline\"\n                    (click)=\"cancelMarkAsAction()\">\n               {{\"vsan.common.no\" | localized}}\n            </button>\n            <button id=\"confirmation-button\"\n                    type=\"button\"\n                    class=\"btn btn-primary\"\n                    (click)=\"warningConfirmationHandler()\">\n               {{\"vsan.common.yes\" | localized}}\n            </button>\n         </div>\n      </div>\n   </div>\n</div>\n<div *ngIf=\"showWarning\"\n     class=\"modal-backdrop opaque-backdrop fade in\"\n     aria-hidden=\"true\">\n</div>","<!-- Copyright (c) 2020-2021 VMware, Inc. All Rights Reserved. -->\n<clr-select-container class=\"horizontal-layout label-auto-size\">\n   <label for=\"perspective-dropdown\">{{\"vsan.disk.list.groupBy\" | localized}}</label>\n   <select clrSelect id=\"perspective-dropdown\"\n           [(ngModel)]=\"selectedPerspective\"\n           (change)=\"changePerspective.emit(selectedPerspective)\">\n      <option *ngFor=\"let option of perspectives\"\n              [ngValue]=\"option\"\n              [selected]=\"option === selectedPerspective\">\n         {{getPerspectiveLabel(option)}}\n      </option>\n   </select>\n</clr-select-container>","/* Copyright 2020-2022 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, EventEmitter, Input, OnInit, Output} from \"@angular/core\";\nimport {FunctionFilter} from \"@component/datagrid/filter/function-filter\";\nimport {TreeDatagridView} from \"@component/datagrid/tree-datagrid-view\";\nimport {ClaimDisksUtil} from \"@component/diskmgmt/claim-disks-util\";\nimport {ClaimDisksDatagridFooterLabel} from \"@component/diskmgmt/model/claim-disks-datagrid-footer-label\";\nimport {ClaimHostListItem} from \"@component/diskmgmt/model/claim-host-list-item.data\";\nimport {ClaimVendorListItem} from \"@component/diskmgmt/model/claim-vendor-list-item.data\";\nimport {VsanBaseListItem} from \"@component/diskmgmt/model/vsan-base-list-item.data\";\nimport {VsanDiskListItem} from \"@component/diskmgmt/model/vsan-disk-list-item\";\nimport {DisksGroupByPerspective} from \"@component/diskmgmt/perspective/disks-group-by-perspective\";\nimport {ClaimOption} from \"@generated/claim-option\";\nimport {Icon} from \"@util/icon\";\n\n@Component({\n   selector: \"vsan-claim-for-vsan-direct\",\n   templateUrl: \"claim-for-vsan-direct.html\",\n   styleUrls: [\"claim-for-vsan-direct.scss\"],\n})\nexport class ClaimForVsanDirectComponent extends TreeDatagridView implements OnInit {\n   static readonly CHILD_FIELD: string = \"eligibleDisksInDatastoreContext\";\n   DisksGroupByPerspective: typeof DisksGroupByPerspective = DisksGroupByPerspective;\n   ClaimOption: typeof ClaimOption = ClaimOption;\n   ClaimDisksUtil: typeof ClaimDisksUtil = ClaimDisksUtil;\n\n   @Input()\n   allHostsInCluster: ClaimHostListItem[];\n\n   @Input()\n   disksByVendor: ClaimVendorListItem[];\n\n   @Input()\n   isStandalone: boolean;\n\n   @Output()\n   update: EventEmitter<void> = new EventEmitter<void>();\n\n   selectedPerspective: DisksGroupByPerspective;\n   footerLabel: ClaimDisksDatagridFooterLabel;\n\n   constructor() {\n      super(ClaimForVsanDirectComponent.CHILD_FIELD);\n      this.multipleSelection = true;\n   }\n\n   ngOnInit(): void {\n      this.datagridLoading = false;\n      this.footerLabel = new ClaimDisksDatagridFooterLabel(this.allHostsInCluster, this.disksByVendor);\n   }\n\n   changePerspective = (perspective: DisksGroupByPerspective) => {\n      this.selectedPerspective = perspective;\n      ClaimDisksUtil.changePerspective(\n            this.selectedPerspective, this.datagrid, this.allHostsInCluster, this.disksByVendor);\n   };\n\n   getHostIcon = (item: VsanBaseListItem): string => {\n      return item.isRoot ? null : Icon.HOST;\n   };\n\n   get nameColumnTitle(): string {\n      return ClaimDisksUtil.getNameColumnTitle(this.selectedPerspective);\n   }\n\n   toggleClaiming(data: any): void {\n      data.claimOption = data.claimOption === ClaimOption.DoNotClaim || data.claimOption === ClaimOption.Custom\n            ? ClaimOption.VMFS\n            : ClaimOption.DoNotClaim;\n      data.markedAsFlash = data.isFlash;\n      this.update.emit();\n   }\n\n   nameFilter: FunctionFilter<VsanDiskListItem> = new FunctionFilter((data: VsanDiskListItem) => {\n      return data.name;\n   });\n\n   driveTypeFilter: FunctionFilter<VsanDiskListItem> = new FunctionFilter((data: VsanDiskListItem) => {\n      return data.driveTypeLabel;\n   });\n\n   totalCapacityFilter: FunctionFilter<VsanDiskListItem> = new FunctionFilter((data: VsanDiskListItem) => {\n      return data.capacity;\n   });\n\n   hostNameFilter: FunctionFilter<VsanDiskListItem> = new FunctionFilter((data: VsanDiskListItem) => {\n      return data.hostName;\n   });\n\n   transportTypeFilter: FunctionFilter<VsanDiskListItem> = new FunctionFilter((data: VsanDiskListItem) => {\n      return data.transportType;\n   });\n\n   diskAdapterFilter: FunctionFilter<VsanDiskListItem> = new FunctionFilter((data: VsanDiskListItem) => {\n      return data.diskAdapter;\n   });\n}","/* Copyright 2017-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {ClaimOption} from \"@generated/claim-option\";\nimport {ClaimRootListItem} from \"@component/diskmgmt/model/claim-root-list-item.data\";\nimport {VsanDiskListItem} from \"./vsan-disk-list-item\";\nimport {DriveType} from \"../model/drive-type.data\";\nimport {DiskMgmtUtil} from \"@util/disk-mgmt.util\";\nimport {ClaimDisksUtil} from \"@component/diskmgmt/claim-disks-util\";\n\nexport class ClaimVendorListItem extends ClaimRootListItem {\n\n   private _infoText: string;\n\n   /**\n    * Gets the vendor's name\n    */\n   get name(): string {\n      if (this._name) {\n         return this._name;\n      }\n\n      this._name = this.getFirstEligibleItem().model;\n      return this._name;\n   }\n\n   set name(newName: string) {\n      this._name = newName;\n   }\n\n   get image(): string {\n      return this.getFirstEligibleItem().image;\n   }\n\n   get possibleClaimOptions(): ClaimOption[] {\n      let isClaimForStorageAvailable: boolean = true;\n      let isClaimForCacheAvailable: boolean = true;\n      let isClaimForVMFSAvailable: boolean = true;\n      let isDoNotClaimAvailable: boolean = true;\n\n      for (const item of this.eligibleDisks) {\n         isClaimForCacheAvailable = isClaimForCacheAvailable &&\n               item.possibleClaimOptions.includes(ClaimOption.ClaimForCache);\n         isClaimForStorageAvailable = isClaimForStorageAvailable &&\n               item.possibleClaimOptions.includes(ClaimOption.ClaimForStorage);\n         isClaimForVMFSAvailable = isClaimForVMFSAvailable &&\n               item.possibleClaimOptions.includes(ClaimOption.VMFS);\n         isDoNotClaimAvailable = isDoNotClaimAvailable &&\n               item.possibleClaimOptions.includes(ClaimOption.DoNotClaim);\n      }\n\n      const claimOptions: ClaimOption[] = [ClaimOption.Custom];\n\n      if (isClaimForCacheAvailable) {\n         claimOptions.push(ClaimOption.ClaimForCache);\n      }\n\n      if (isClaimForStorageAvailable) {\n         claimOptions.push(ClaimOption.ClaimForStorage);\n      }\n\n      if (isClaimForVMFSAvailable) {\n         claimOptions.push(ClaimOption.VMFS);\n      }\n\n      if (isDoNotClaimAvailable) {\n         claimOptions.push(ClaimOption.DoNotClaim);\n      }\n\n      return claimOptions;\n   }\n\n   /**\n    * Return drive types that are valid for at least one disk.\n    */\n   get possibleDriveTypes(): DriveType[] {\n      if (!this.eligibleDisks || this.eligibleDisks.length === 0) {\n         return [];\n      }\n\n      let types: DriveType[] = [];\n      this.eligibleDisks.forEach(disk => {\n         types.push(...disk.possibleDriveTypes);\n      });\n      // Remove duplicate types.\n      types = Array.from(new Set(types));\n\n      if (!this.areAllItemsMarkedTheSame()) {\n         types.push(DriveType.CUSTOM);\n      }\n      return types;\n   }\n\n   /**\n    * Disk's capacity.\n    */\n   get capacity(): string {\n      if (this._capacity) {\n         return this._capacity;\n      }\n\n      // All disks must be with the same size\n      const capacityNum: number =\n            DiskMgmtUtil.lbaToBytes(this.getFirstEligibleItem().disk.capacity) * this.eligibleDisks.length;\n\n      this._capacity = VsanUiUtils.formatFileSize(capacityNum);\n      return this._capacity;\n   }\n\n   get vendor(): string {\n      return this.getFirstEligibleItem().vendor;\n   }\n\n   get model(): string {\n      return this.getFirstEligibleItem().diskModel;\n   }\n\n   get initialDriveType(): string {\n      return ClaimDisksUtil.getLocalizedDriveType(this.isFlash ? DriveType.FLASH : DriveType.HDD);\n   }\n\n   /**\n    * Disk's drive type label.\n    */\n   get driveTypeLabel(): string {\n      return ClaimDisksUtil.getLocalizedDriveType(this.driveType);\n   }\n\n   /**\n    * Disk's drive type.\n    */\n   get driveType(): DriveType {\n      if (!this.areAllItemsMarkedTheSame()) {\n         return DriveType.CUSTOM;\n      }\n\n      return this.getFirstEligibleItem().driveType;\n   }\n\n   get isFlash(): boolean {\n      return this.getFirstEligibleItem().isFlash;\n   }\n\n   get isHdd(): boolean {\n      return this.getFirstEligibleItem().isHdd;\n   }\n\n   set markedAsFlash(newValue: boolean) {\n      for (const disk of this.eligibleDisksInDatastoreContext) {\n         disk.markedAsFlash = newValue;\n      }\n   }\n\n   get markedAsFlash(): boolean {\n      if (this.areAllItemsMarkedTheSame()) {\n         return this.getFirstEligibleItem().markedAsFlash;\n      }\n\n      return false;\n   }\n\n   /**\n    * Disk's transport type.\n    */\n   get transportType(): string {\n      return this.getFirstEligibleItem().transportType;\n   }\n\n   get hostName(): string {\n      return this.getVendorHostLabel(this.eligibleDisksInDatastoreContext);\n   }\n\n   get isMarkAsFlashAvailable(): boolean {\n      if (!this.areAllItemsMarkedTheSame()) {\n         return true;\n      }\n\n      return !this.getFirstEligibleItem().markedAsFlash;\n   }\n\n   get isMarkAsHddAvailable(): boolean {\n      if (!this.areAllItemsMarkedTheSame()) {\n         return true;\n      }\n\n      return this.getFirstEligibleItem().markedAsFlash;\n   }\n\n   areAllItemsMarkedTheSame(): boolean {\n      const markedAsSsd: boolean = this.getFirstEligibleItem().markedAsFlash;\n      let areAllTheSame: boolean = true;\n      for (const disk of this.eligibleDisksInDatastoreContext) {\n         if (markedAsSsd !== disk.markedAsFlash) {\n            areAllTheSame = false;\n            break;\n         }\n      }\n\n      return areAllTheSame;\n   }\n\n   private getFirstEligibleItem(): VsanDiskListItem {\n      return this.eligibleDisksInDatastoreContext[0] as VsanDiskListItem;\n   }\n\n   /**\n    * Calculates the host field for a bunch of disks. Used for nodes combining\n    * multiple disks from different hosts where the 'host' property is needed.\n    * The result could be something like:\n    *  == If homogeneous distribution ==\n    *     X disk(s) on Y host(s)\n    *  == If heterogeneous distribution ==\n    *     Mixed distribution\n    */\n   private getVendorHostLabel(disks: VsanDiskListItem[]): string {\n      const disksPerHosts: Map<string, number> = this.getDisksPerHosts(disks);\n      return this.isMixedMode(disksPerHosts)\n            ? this.getHeterogeneousDistributionLabel()\n            : this.getHomogeneousDistributionLabel(disksPerHosts);\n   }\n\n   private getDisksPerHosts(disks: VsanDiskListItem[]): Map<string, number> {\n      const disksPerHosts: Map<string, number> = new Map<string, number>();\n\n      if (VsanUiUtils.isEmpty(disks)) {\n         return disksPerHosts;\n      }\n\n      disks.forEach(disk => {\n         if (!disksPerHosts.has(disk.hostName)) {\n            disksPerHosts.set(disk.hostName, 0);\n         }\n         disksPerHosts.set(disk.hostName, disksPerHosts.get(disk.hostName) + 1);\n      });\n\n      return disksPerHosts;\n   }\n\n   private isMixedMode(disksPerHosts: Map<string, number>): boolean {\n      return disksPerHosts.size > 0\n            ? !Array.from(disksPerHosts.values()).every((val, i, arr) => val === arr[0])\n            : false;\n   }\n\n   private getHeterogeneousDistributionLabel(): string {\n      return VsanUiUtils.getString(\"vsan.dialog.semiAutoClaimDialog.vendorHosts.mixedDistribution\");\n   }\n\n   private getHomogeneousDistributionLabel(disksPerHosts: Map<string, number>): string {\n      const numOfHosts: number = disksPerHosts.size;\n      const numDisksPerHost: number = numOfHosts > 0 ? disksPerHosts.values().next().value : 0;\n      const labelKey: string = this.getHomogeneousDistributionLabelKey(numOfHosts, numDisksPerHost);\n      return VsanUiUtils.getString(labelKey, numDisksPerHost, numOfHosts);\n   }\n\n   private getHomogeneousDistributionLabelKey(numOfHosts: number, numDisksPerHost: number): string {\n      if (numDisksPerHost === 1) {\n         return numOfHosts === 1\n               ? \"vsan.dialog.semiAutoClaimDialog.vendorHosts.formatOneDisksOneHost\"\n               : \"vsan.dialog.semiAutoClaimDialog.vendorHosts.formatOneDiskMultiHosts\";\n      } else {\n         return numOfHosts === 1\n               ? \"vsan.dialog.semiAutoClaimDialog.vendorHosts.formatMultiDisksOneHost\"\n               : \"vsan.dialog.semiAutoClaimDialog.vendorHosts.formatMultiDisksMultiHosts\";\n      }\n   }\n}\n","\nexport interface QueryUtil {\n\n} //class QueryUtil\n\nexport module QueryUtil{\nexport function VC_CLUSTERS_PROPERTY(): string {\n   return \"allClusters\";\n}\n\nexport function SERVER_GUID_PROPERTY(): string {\n   return \"serverGuid\";\n}\n\nexport function NAME_PROPERTY(): string {\n   return \"name\";\n}\n\nexport function PRIMARY_ICON_ID_PROPERTY(): string {\n   return \"primaryIconId\";\n}\n\nexport function CLUSTER_PROPERTY(): string {\n   return \"cluster\";\n}\n\nexport function CLUSTER_HOST_PROPERTY(): string {\n   return \"host\";\n}\n\nexport function VM_PROPERTY(): string {\n   return \"vm\";\n}\n\nexport function HAS_PRIVILEGES(): string {\n   return \"hasPrivileges\";\n}\n\nexport function VM_COUNT_PROPERTY(): string {\n   return \"vm._length\";\n}\n\nexport function RESOURCE_POOL_PROPERTY(): string {\n   return \"resourcePool\";\n}\n\nexport function RESOURCE_POOL_OWNER_PROPERTY(): string {\n   return \"owner\";\n}\n\nexport function DATASTORE_PROPERTY(): string {\n   return \"datastore\";\n}\n\nexport function CLUSTER_HOST_COUNT_PROPERTY(): string {\n   return \"host._length\";\n}\n\nexport function HOST_VSAN_NODE_UUID_PROPERTY(): string {\n   return \"config.vsanHostConfig.clusterInfo.nodeUuid\";\n}\n\nexport function HOST_CONNECTION_STATE_PROPERTY(): string {\n   return \"runtime.connectionState\";\n}\n\nexport function HOST_MAINTENANCE_MODE_PROPERTY(): string {\n   return \"runtime.inMaintenanceMode\";\n}\n\nexport function HOST_QUARANTINE_MODE_PROPERTY(): string {\n   return \"runtime.inQuarantineMode\";\n}\n\nexport function HOST_VSAN_RUNTIME_INFO(): string {\n   return \"runtime.vsanRuntimeInfo\";\n}\n\nexport function WITNESS_HOST_RELATION(): string {\n   return \"witnessHost\";\n}\n\nexport function IS_WITNESS_HOST_PROPERTY(): string {\n   return \"isWitnessHost\";\n}\n\nexport function IS_WITNESS_VLCM_PROPERTY(): string {\n   return \"isVsanWitnessLifecycleManaged\";\n}\n\nexport function ALL_VSAN_HOSTS_RELATION(): string {\n   return \"allVsanHosts\";\n}\n\nexport function VSAN_PHYSICAL_DISK_VIRTUAL_MAPPING(): string {\n   return \"vsanPhysicalDiskVirtualMapping\";\n}\n\nexport function VSAN_HOST_STORAGE_ADAPTER_DEVICES(): string {\n   return \"vsanStorageAdapterDevices\";\n}\n\nexport function VM_DEVICES_PROPERTY(): string {\n   return \"config.hardware.device\";\n}\n\nexport function VM_NAMESPACE_CAPABILITY_METADATA(): string {\n   return \"namespaceCapabilityMetadata\";\n}\n\nexport function VM_PATH_NAME(): string {\n   return \"summary.config.vmPathName\";\n}\n\nexport function VM_HOST(): string {\n   return \"summary.runtime.host\";\n}\n\nexport function VM_VSAN_NODE_UUID_PROPERTY(): string {\n   return \"config.instanceUuid\";\n}\n\nexport function VSAN_ENABLED_PROPERTY(): string {\n   return \"configurationEx[@type='ClusterConfigInfoEx'].vsanConfigInfo.enabled\";\n}\n\nexport function HOST_VERSION_PROPERTY(): string {\n   return \"config.product.version\";\n}\n\nexport function HOST_VSAN_CONFIG_PROPERTY(): string {\n   return \"config.vsanHostConfig\";\n}\n\nexport function HOST_VSAN_ENABLED_PROPERTY(): string {\n   return \"config.vsanHostConfig.enabled\";\n}\n\nexport function VSAN_DISK_VERSION_PROPERTY_NAME(): string {\n   return \"vsanDiskVersionsData\";\n}\n\nexport function CLUSTER_VSAN_CONFIG_UUID_PROPERTY(): string {\n   return \"configurationEx[@type='ClusterConfigInfoEx'].vsanConfigInfo.defaultConfig.uuid\";\n}\n\nexport function CLUSTER_HA_ENABLED_PROPERTY(): string {\n   return \"configurationEx[@type='ClusterConfigInfoEx'].dasConfig.enabled\";\n}\n\nexport function CLUSTER_DPM_ENABLED_PROPERTY(): string {\n   return \"configurationEx[@type='ClusterConfigInfoEx'].dpmConfigInfo.enabled\";\n}\n\nexport function CLUSTER_DRS_ENABLED(): string {\n   return \"configuration.drsConfig\";\n}\n\nexport function VM_STORAGE_OBJECT_ID_PROPERTY(): string {\n   return \"config.vmStorageObjectId\";\n}\n\nexport function IS_POD_VM(): string {\n   return \"isPodVM\";\n}\n\nexport function DATASTORE_TYPE_PROPERTY(): string {\n   return \"summary.type\";\n}\n\nexport function DATASTORE_URL(): string {\n   return \"summary.url\";\n}\n\nexport function DATACENTER_RELATION(): string {\n   return \"dc\";\n}\n\nexport function DATASTORE_HOST_MOUNTS(): string {\n   return \"host\";\n}\n\nexport function DATASTORE_SUMMARY(): string {\n   return \"summary\";\n}\n\nexport function DATASTORE_SUMMARY_CAPACITY(): string {\n   return \"summary.capacity\";\n}\n\nexport function DATASTORE_SUMMARY_FREE_SPACE(): string {\n   return \"summary.freeSpace\";\n}\n\nexport function DATASTORE_CONTAINER_ID(): string {\n   return \"info.containerId\";\n}\n\nexport function DATASTORE_SERVER_HOSTS(): string {\n   return \"serverHosts\";\n}\n\nexport function PREFERRED_FD_PROPERTY(): string {\n   return \"preferredFaultDomain\";\n}\n\nexport function HOST_FAULT_DOMAIN(): string {\n   return \"config.vsanHostConfig.faultDomainInfo.name\";\n}\n\nexport function VM_IS_TEMPLATE(): string {\n   return \"config.template\";\n}\n\nexport function VM_POWER_STATE(): string {\n   return \"powerState\";\n}\n\nexport function VM_SWAP_STORAGE_OBJECT_ID(): string {\n   return \"config.swapStorageObjectId\";\n}\n\nexport function WCP_NAMESPACE(): string {\n   return \"workload\";\n}\n\nexport function TANZU_KUBERNETES_CLUSTER(): string {\n   return \"com.vmware.wcp.TanzuKubernetesCluster\";\n}\n\nexport function PARENT_PROPERTY(): string {\n   return \"parent\";\n}\n\nexport function VIRTUAL_NIC_PROPERTY(): string {\n   return \"config.network.vnic\";\n}\n\nexport function HOST_PNIC(): string {\n   return \"config.network.pnic\";\n}\n\nexport function HOST_PORTGROUP(): string {\n   return \"config.network.portgroup\";\n}\n\nexport function HOST_PROXY_SWITCH(): string {\n   return \"config.network.proxySwitch\";\n}\n\nexport function HOST_OPAQUE_NETWORK(): string {\n   return \"config.network.opaqueNetwork\";\n}\n\nexport function HOST_OPAQUE_SWITCH(): string {\n   return \"config.network.opaqueSwitch\";\n}\n\nexport function NETWORK_PROPERTY(): string {\n   return \"network\";\n}\n\nexport function ACTIVE_UPLINK_PORT_PROPERTY(): string {\n   return \"config.defaultPortConfig.uplinkTeamingPolicy.uplinkPortOrder.activeUplinkPort\";\n}\n\nexport function DISTRIBUTED_VIRTUAL_SWITCH_PROPERTY(): string {\n   return \"config.distributedVirtualSwitch\";\n}\n\nexport function HOST_VSANCONFIG_DISK_MAPPING_PROPERTY(): string {\n   return \"config.vsanHostConfig.storageInfo.diskMapping\";\n}\n\nexport function VSAN_HOST_CONFIG_NETWORKINFO_PORT_PROPERTY(): string {\n   return \"config.vsanHostConfig.networkInfo.port\";\n}\n\nexport function PMEM_STORAGE_UUID(): string {\n   return \"info.pmem.uuid\";\n}\n\nexport function PMEM_STORAGE_STATUS(): string {\n   return \"overallStatus\";\n}\n\nexport function IS_CLUSTER_VM_PROPERTY(): string {\n   return \"isClusterVM\";\n}\n\nexport class Factory {\n\n   static create = (): QueryUtil => {\n      return { };\n   }\n\n\n} //class Factory\n\n} //module QueryUtil\n","/* Copyright 2017-2022 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {ClaimRootListItem} from \"@component/diskmgmt/model/claim-root-list-item.data\";\nimport {ClaimedDisksData} from \"@component/diskmgmt/model/claimed-disks-data\";\nimport {VsanPmemStorageListItem} from \"@component/diskmgmt/model/vsan-pmem-storage-list-item\";\nimport {ClaimOption} from \"@generated/claim-option\";\nimport {ClaimedDisksSummary} from \"@generated/claimed-disks-summary\";\nimport {DatastoreType} from \"@generated/datastore-type\";\nimport {QueryUtil} from \"@generated/query-util\";\nimport {VsanClaimDisksData} from \"@generated/vsan-claim-disks-data\";\nimport {VsanDiskClaimSpec} from \"@generated/vsan-disk-claim-spec\";\nimport {ManagedObject} from \"@service/managed-object\";\nimport {DiskMgmtDiskUtil} from \"@util/disk-mgmt-disk.util\";\nimport {DiskMgmtUtil} from \"@util/disk-mgmt.util\";\nimport {Icon} from \"@util/icon\";\nimport {MapUtil} from \"@util/map-util\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {VsanDiskListItem} from \"./vsan-disk-list-item\";\nimport {VsanDisksTransportTypeData} from \"./vsan-disks-transport-type.data\";\n\nexport class ClaimHostListItem extends ClaimRootListItem {\n\n   private _hostMor: ManagedObject;\n   private _numberSsdDisks: number = 0;\n   private _numberDataDisks: number = 0;\n   private _deviceTransportData: VsanDisksTransportTypeData;\n   private _infoText: string;\n   private _allFlashDiskGroupExist: boolean = false;\n   private _numSelectedCacheDisks: number = 0;\n   private _numSelectedSsdDataDisks: number = 0;\n   private _numSelectedHddDataDisks: number = 0;\n   private _isValidConfiguration: boolean = true;\n   // TODO [tdardzhonov] make capacity and cache disks to use that map\n   private _claimedDisksSummary: Map<ClaimOption, ClaimedDisksData>;\n\n   private _claimedCapacity: number = 0;\n   private _claimedCache: number = 0;\n\n   private _hybridDiskGroupExist: boolean = false;\n   private _isAllFlashSupported: boolean = false;\n\n   eligiblePmemStorage: VsanPmemStorageListItem[];\n\n   primaryIconId: string;\n   version: string;\n\n   constructor(properties: any[], claimingData: VsanClaimDisksData, useRecommendedClaimOptions: boolean) {\n      super();\n\n      for (const property of properties) {\n         switch (property.propertyName) {\n            case QueryUtil.NAME_PROPERTY():\n               this.name = property.value;\n               this.hostMor = ManagedObject.create(\n                     property.resourceObject.type,\n                     property.resourceObject.value,\n                     property.resourceObject.serverGuid);\n               this.updateAllEligibleDisksHostName();\n               break;\n            case QueryUtil.HOST_VERSION_PROPERTY():\n               this.version = property.value;\n               break;\n            case QueryUtil.PRIMARY_ICON_ID_PROPERTY():\n               this.primaryIconId = property.value;\n               break;\n            case QueryUtil.VSAN_HOST_STORAGE_ADAPTER_DEVICES():\n               const transportTypeData: VsanDisksTransportTypeData = new VsanDisksTransportTypeData();\n               transportTypeData.storageAdapterDevices = property.value;\n               this.deviceTransportData = transportTypeData;\n               break;\n         }\n      }\n\n      this.setClaimingData(claimingData, useRecommendedClaimOptions);\n   }\n\n   get hostMor(): ManagedObject {\n      return this._hostMor;\n   }\n\n   set hostMor(value: ManagedObject) {\n      this._hostMor = value;\n   }\n\n   get claimedCapacity(): number {\n      return this._claimedCapacity;\n   }\n\n   set claimedCapacity(value: number) {\n      this._claimedCapacity = value;\n   }\n\n   get claimedCache(): number {\n      return this._claimedCache;\n   }\n\n   set claimedCache(value: number) {\n      this._claimedCache = value;\n   }\n\n   get hybridDiskGroupExist(): boolean {\n      return this._hybridDiskGroupExist;\n   }\n\n   /**\n    * Flag indicating whether all flash feature is supported.\n    */\n   get isAllFlashSupported(): boolean {\n      return this._isAllFlashSupported;\n   }\n\n   /**\n    * Set the host's name\n    */\n   set name(value: string) {\n      this._name = value;\n   }\n\n   /**\n    * Gets the host's name\n    */\n   get name(): string {\n      if (this._infoText) {\n         return VsanUiUtils.getString(\"vsan.dialog.semiAutoClaimDialog.nameFormatted\", this._name, this._infoText);\n      }\n      return this._name;\n   }\n\n   private setClaimingData(data: VsanClaimDisksData, useRecommendedClaimOptions: boolean): void {\n      this._claimedDisksSummary = new Map<ClaimOption, ClaimedDisksData>();\n\n      if (data != null) {\n         const disks: VsanDiskListItem[] = [];\n         for (const diskData of data.notInUseDisks) {\n            const diskItem: VsanDiskListItem =\n                  new VsanDiskListItem(diskData, useRecommendedClaimOptions, data.isAllFlashAvailable);\n            diskItem.hostName = this._name;\n            diskItem.hostMor = this.hostMor;\n            disks.push(diskItem);\n         }\n\n         this.eligibleDisks = disks;\n\n         this._isAllFlashSupported = data.isAllFlashAvailable;\n         this._numberDataDisks = data.numNotInUseDataDisks;\n         this._numberSsdDisks = data.numNotInUseSsdDisks;\n         this._hybridDiskGroupExist = data.hybridDiskGroupExist;\n         this._allFlashDiskGroupExist = data.allFlashDiskGroupExist;\n         this._claimedCapacity = data.claimedCapacity;\n         this._claimedCache = data.claimedCache;\n\n         this.eligiblePmemStorage = data.notInUsePmemStorage\n               .map(storage => new VsanPmemStorageListItem(storage, this._name, this.hostMor));\n\n         this.initializeManagedByVsanSummary(data.claimedDisksSummary);\n         this.populateDisksTransportType();\n      } else {\n         this.eligibleDisks = null;\n      }\n      this.populateInfoText();\n   }\n\n   private updateAllEligibleDisksHostName(): void {\n      if (!this.eligibleDisks) {\n         return;\n      }\n\n      for (const disk of this.eligibleDisks) {\n         disk.hostName = this._name;\n      }\n   }\n\n   /**\n    * Sets the transport data for the disks.\n    */\n   set deviceTransportData(values: VsanDisksTransportTypeData) {\n      this._deviceTransportData = values;\n      this.populateDisksTransportType();\n   }\n\n   /**\n    * Sets the transport type of each eligible disk item.\n    */\n   private populateDisksTransportType(): void {\n      if (this.eligibleDisks && this._deviceTransportData) {\n         for (const item of this.eligibleDisks) {\n            item.transport = this._deviceTransportData.getDeviceTransport(item.diskUuid);\n            item.diskAdapter = this._deviceTransportData.getDeviceAdapter(item.diskUuid);\n         }\n      }\n   }\n\n   get possibleClaimOptions(): ClaimOption[] {\n      const claimOptions: ClaimOption[] = [ClaimOption.Custom, ClaimOption.DoNotClaim];\n\n      if (this.contextDatastoreType === DatastoreType.VSAN_DIRECT) {\n         claimOptions.push(ClaimOption.VMFS);\n      }\n\n      return claimOptions;\n   }\n\n   get image(): string {\n      return this._isValidConfiguration\n            ? this.primaryIconId\n            : Icon.HOST_ERROR;\n   }\n\n   get numSelectedStorageHDDs(): number {\n      return this._numSelectedHddDataDisks;\n   }\n\n   get numSelectedStorageSSDs(): number {\n      return this._numSelectedSsdDataDisks;\n   }\n\n   get numSelectedCacheDisks(): number {\n      return this._numSelectedCacheDisks;\n   }\n\n   get numSelectedManagedByVsanDisks(): number {\n      return MapUtil.sum(\n            this._claimedDisksSummary,\n            (summary) => summary.newClaimedDisksCount);\n   }\n\n   getManagedByVsanClaimedSpace(): number {\n      return MapUtil.sum(\n            this._claimedDisksSummary,\n            (summary) => summary.newClaimedCapacity);\n   }\n\n   getClaimOptionSummary(claimOption: ClaimOption): ClaimedDisksData {\n      if (this._claimedDisksSummary.has(claimOption)) {\n         return this._claimedDisksSummary.get(claimOption);\n      } else {\n         return null;\n      }\n   }\n\n   get numSelectedDisks(): number {\n      return this.numSelectedCacheDisks + this.numSelectedStorageHDDs + this.numSelectedStorageSSDs;\n   }\n\n   /**\n    * Gets an error text when the host configuration is invalid\n    */\n   retrieveConfigErrorText(): string {\n      return this.retrieveConfigErrorTextInt();\n   }\n\n   private retrieveConfigErrorTextInt(): string {\n      // Cannot create/edit all-flash and hybrid groups at the same time\n      if (this._numSelectedHddDataDisks !== 0 && this._numSelectedSsdDataDisks !== 0) {\n         if ((this._hybridDiskGroupExist || this._allFlashDiskGroupExist) && this._numSelectedCacheDisks === 0) {\n            // edit\n            return VsanUiUtils.getString(\"vsan.dialog.semiAutoClaimDialog.confError.mixedStorageDisks.edit\", this.name);\n         }\n\n         return VsanUiUtils.getString(\"vsan.dialog.semiAutoClaimDialog.confError.mixedStorageDisks.create\", this.name);\n      }\n\n      const hybridSelection: boolean = this._numSelectedHddDataDisks !== 0;\n      const numSelectedDataDisks: number =\n            hybridSelection\n                  ? this._numSelectedHddDataDisks\n                  : this._numSelectedSsdDataDisks;\n\n      if (this._numSelectedCacheDisks === 0 && numSelectedDataDisks === 0) {\n         // no error\n         return \"\";\n      }\n\n      if (numSelectedDataDisks === 0) {\n         return VsanUiUtils.getString(\"vsan.dialog.semiAutoClaimDialog.confError.noDataDisk\", this.name);\n      }\n\n      if (this._numSelectedCacheDisks === 0) {\n         if ((this._hybridDiskGroupExist && hybridSelection) ||\n               (this._allFlashDiskGroupExist && !hybridSelection)) {\n            // no error\n            return \"\";\n         }\n\n         return VsanUiUtils.getString(\"vsan.dialog.semiAutoClaimDialog.confError.noSsd\", this.name);\n      }\n\n      if (this._numSelectedCacheDisks > numSelectedDataDisks) {\n         return VsanUiUtils.getString(\"vsan.dialog.semiAutoClaimDialog.confError.moreSsd\", this.name);\n      }\n\n      // no error\n      return \"\";\n   }\n\n   capacityFor(claimOption: ClaimOption): number {\n      if (!this.eligibleDisks) {\n         return 0;\n      }\n\n      let capacity: number = 0;\n      for (const disk of this.eligibleDisks) {\n         if (disk.claimOption === claimOption) {\n            capacity += DiskMgmtUtil.lbaToBytes(disk.disk.capacity);\n         }\n      }\n      return capacity;\n   }\n\n   get unclaimedStorage(): number {\n      let capacity: number = 0;\n\n      if (this.eligibleDisks) {\n         this.eligibleDisks.forEach((disk) => capacity += DiskMgmtUtil.lbaToBytes(disk.disk.capacity));\n      }\n\n      if (this.eligiblePmemStorage) {\n         this.eligiblePmemStorage.forEach((storage) => capacity += storage.capacityNum);\n      }\n\n      return capacity;\n   }\n\n   updateDisksData(): void {\n      this._numSelectedCacheDisks = 0;\n      this._numSelectedHddDataDisks = 0;\n      this._numSelectedSsdDataDisks = 0;\n      this.resetClaimedDisksInManagedByVsanSummary();\n\n      if (this.eligibleDisks) {\n         for (const disk of this.eligibleDisks) {\n            const claimOption: ClaimOption =\n                  DiskMgmtDiskUtil.MANAGED_BY_VSAN_CLAIM_OPTIONS.find((co: ClaimOption) => co === disk.claimOption);\n            if (claimOption) {\n               this.addDiskToManagedByVsanClaimOption(disk.capacityNum, claimOption);\n            } else if (disk.claimOption === ClaimOption.ClaimForCache) {\n               this._numSelectedCacheDisks++;\n            } else if (disk.claimOption === ClaimOption.ClaimForStorage) {\n               if (disk.markedAsFlash) {\n                  this._numSelectedSsdDataDisks++;\n               } else {\n                  this._numSelectedHddDataDisks++;\n               }\n            }\n         }\n      }\n\n      if (this.eligiblePmemStorage) {\n         for (const storage of this.eligiblePmemStorage) {\n            const claimOption: ClaimOption =\n                  DiskMgmtDiskUtil.MANAGED_BY_VSAN_CLAIM_OPTIONS.find((co: ClaimOption) => co === storage.claimOption);\n            if (claimOption) {\n               this.addDiskToManagedByVsanClaimOption(storage.capacityNum, claimOption);\n            }\n         }\n      }\n\n      // Update the flag responsible for the icon\n      this._isValidConfiguration = !this.retrieveConfigErrorTextInt();\n   }\n\n   get isEditGroupOperation(): boolean {\n      return this.numSelectedCacheDisks === 0 &&\n            ((this.numSelectedStorageHDDs > 0 && this._hybridDiskGroupExist) ||\n                  (this.numSelectedStorageSSDs > 0 && this._allFlashDiskGroupExist));\n   }\n\n   get isCreateGroupOperation(): boolean {\n      return this.numSelectedCacheDisks > 0 &&\n            (this.numSelectedStorageHDDs > 0 || this.numSelectedStorageSSDs > 0);\n   }\n\n   /**\n    * Populates the host's info text\n    */\n   private populateInfoText(): void {\n      if (this._hybridDiskGroupExist || this._allFlashDiskGroupExist) {\n         this._infoText = \"\";\n         const diskGroupExistText: string = VsanUiUtils.getString(\"vsan.dialog.semiAutoClaimDialog.diskGroup\");\n\n         if (this._numberSsdDisks === 0 && this._numberDataDisks === 0) {\n            this._infoText = VsanUiUtils.getString(\"vsan.dialog.semiAutoClaimDialog.diskGroup.noDisks\");\n         }\n\n         if (!this._infoText) {\n            this._infoText = diskGroupExistText;\n         }\n      } else {\n         if (this._numberSsdDisks === 0 && this._numberDataDisks === 0) {\n            this._infoText = VsanUiUtils.getString(\"vsan.dialog.semiAutoClaimDialog.hostError.noDisk\");\n         } else if (this._numberSsdDisks === 0) {\n            this._infoText = VsanUiUtils.getString(\"vsan.dialog.semiAutoClaimDialog.hostError.noSsd\");\n         }\n      }\n   }\n\n   getHostDisksToClaim(): VsanDiskClaimSpec[] {\n      const diskSpecs: VsanDiskClaimSpec[] = [];\n\n      if (this.eligibleDisks) {\n         this.eligibleDisks.forEach((disk) => {\n            if (disk.claimOption !== ClaimOption.DoNotClaim) {\n               diskSpecs.push(VsanDiskClaimSpec.Factory.create(disk.disk, disk.claimOption, disk.markedAsFlash));\n            }\n         });\n      }\n\n      if (this.eligiblePmemStorage) {\n         this.eligiblePmemStorage.forEach((pmemStorage) => {\n            if (pmemStorage.claimOption !== ClaimOption.DoNotClaim) {\n               diskSpecs.push(VsanDiskClaimSpec.Factory.create(null, pmemStorage.claimOption, false));\n            }\n         });\n      }\n\n      return diskSpecs;\n   }\n\n   get availableDatastoreTypes(): DatastoreType[] {\n      const isEligibleForVsan: boolean = !VsanUiUtils.isEmpty(this.eligibleDisks) &&\n            this.eligibleDisks.some(\n                  disk => disk.possibleClaimOptions.some(\n                        claimOption => DiskMgmtDiskUtil.VSAN_CLAIM_OPTIONS.includes(claimOption)));\n\n      const isEligibleForVsanDirect: boolean = !VsanUiUtils.isEmpty(this.eligibleDisks) &&\n            this.eligibleDisks.some(\n                  disk => disk.possibleClaimOptions.some(\n                        claimOption => DiskMgmtDiskUtil.VSAN_DIRECT_CLAIM_OPTIONS.includes(claimOption)));\n\n      const isEligibleForPmem: boolean = !VsanUiUtils.isEmpty(this.eligiblePmemStorage);\n\n      return [\n         isEligibleForVsan\n               ? DatastoreType.VSAN\n               : null,\n         isEligibleForVsanDirect\n               ? DatastoreType.VSAN_DIRECT\n               : null,\n         isEligibleForPmem\n               ? DatastoreType.PMEM\n               : null,\n      ].filter(datastoreType => datastoreType != null);\n   }\n\n   private initializeManagedByVsanSummary(claimedDisksSummary: ClaimedDisksSummary[]): void {\n      for (const claimOption of DiskMgmtDiskUtil.MANAGED_BY_VSAN_CLAIM_OPTIONS) {\n         const newSummary: ClaimedDisksData = new ClaimedDisksData();\n         const hostClaimOptionSummary: ClaimedDisksSummary = claimedDisksSummary\n               ? claimedDisksSummary.find(summary => summary.claimOption === claimOption)\n               : null;\n\n         if (hostClaimOptionSummary) {\n            newSummary.oldClaimedDisksCount = hostClaimOptionSummary.claimedDisksCount;\n            newSummary.oldClaimedCapacity = hostClaimOptionSummary.claimedCapacity;\n         }\n\n         this._claimedDisksSummary.set(claimOption, newSummary);\n      }\n   }\n\n   private resetClaimedDisksInManagedByVsanSummary(): void {\n      MapUtil.forEach(this._claimedDisksSummary, (summary) => {\n         summary.newClaimedDisksCount = 0;\n         summary.newClaimedCapacity = 0;\n      });\n   }\n\n   private addDiskToManagedByVsanClaimOption(capacity: number, claimOption: ClaimOption): void {\n      this._claimedDisksSummary.get(claimOption).newClaimedDisksCount += 1;\n      this._claimedDisksSummary.get(claimOption).newClaimedCapacity += capacity;\n   }\n}\n","/* Copyright 2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Directive, ElementRef} from \"@angular/core\";\nimport {FocusTrapFactory} from \"@angular/cdk/a11y\";\n/**\n * Attribute directive for enabling focus trap on element when it's rendered.\n */\n@Directive({\n   selector: \"[vsan-focus-trap]\",\n})\nexport class FocusTrapDirective {\n   constructor(private el: ElementRef, private focusTrap: FocusTrapFactory) {\n   }\n\n   ngAfterViewInit(): void {\n      this.focusTrap.create(this.el.nativeElement).focusInitialElement();\n   }\n}","<!--Copyright 2020 VMware, Inc. All rights reserved. -- VMware Confidential-->\n<div id=\"used-capacity-overview\">\n   <span id=\"used-overall-label\">{{usedCapacityLabel}}</span>\n   <span id=\"free-label\">{{freeCapacityLabel}}</span>\n</div>\n<vsan-capacity-bar-chart id=\"capacity-overview-bar-chart\"\n                         [sections]=\"capacitySections\"\n                         [total]=\"totalCapacity\"\n                         (hoverBarChart)=\"hoveredSeries=$event\">\n</vsan-capacity-bar-chart>\n<vsan-capacity-legend id=\"capacity-legend\"\n                      [chartSectionData]=\"capacitySections\"\n                      [used]=\"usedOverallCapacity\"\n                      [total]=\"totalCapacity\"\n                      [hoveredSeries]=\"hoveredSeries\">\n</vsan-capacity-legend>","/* Copyright 2020-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\n\n/**\n * Claimed disk count and claimed disk space for a single claim option (old and new).\n */\nexport class ClaimedDisksData {\n   oldClaimedDisksCount: number = 0;\n   oldClaimedCapacity: number = 0;\n   newClaimedDisksCount: number = 0;\n   newClaimedCapacity: number = 0;\n}","<!-- Copyright (c) 2021-2022 VMware, Inc. All Rights Reserved. -->\n<div class=\"clr-row\">\n   <vsan-disks-group-by-perspective\n         class=\"clr-offset-8 clr-col-4\"\n         (changePerspective)=\"changePerspective($event)\">\n   </vsan-disks-group-by-perspective>\n</div>\n\n<!-- Eligible Disks List -->\n<clr-datagrid [clrDgLoading]=\"datagridLoading\" class=\"datagrid-compact\">\n   <!-- Datagrid Header -->\n   <clr-dg-column class=\"name-column\">\n      <vsan-tree-column [dataField]=\"'name'\"\n                        [dataProvider]=\"datagrid\"\n                        [filterObject]=\"nameFilter\"\n                        [title]=\"ClaimDisksUtil.getNameColumnTitle(groupByPerspective)\">\n      </vsan-tree-column>\n   </clr-dg-column>\n   <clr-dg-column class=\"compatibility-column\">\n      <vsan-tree-column [dataField]=\"'isVsanMaxCompatible'\"\n                        [dataProvider]=\"datagrid\"\n                        [filterObject]=\"isVsanMaxCompatibleFilter\"\n                        [title]=\"'vsan.disk.list.isVsanMaxCompatible' | localized\">\n      </vsan-tree-column>\n   </clr-dg-column>\n   <clr-dg-column class=\"claim-column\">\n      {{\"vsan.disk.list.claimFor.vsanMax\" | localized}}\n   </clr-dg-column>\n   <clr-dg-column>\n      <vsan-tree-column [dataField]=\"'driveTypeLabel'\"\n                        [dataProvider]=\"datagrid\"\n                        [filterObject]=\"driveTypeFilter\"\n                        [title]=\"'vsan.disk.list.driveType' | localized\">\n      </vsan-tree-column>\n   </clr-dg-column>\n   <clr-dg-column *ngIf=\"groupByPerspective == DisksGroupByPerspective.DISKS_BY_HOST\">\n      <vsan-tree-column [dataField]=\"'capacity'\"\n                        [dataProvider]=\"datagrid\"\n                        [filterObject]=\"totalCapacityFilter\"\n                        [title]=\"'vsan.disk.list.totalCapacity' | localized\">\n      </vsan-tree-column>\n   </clr-dg-column>\n   <clr-dg-column *ngIf=\"groupByPerspective == DisksGroupByPerspective.DISKS_BY_VENDOR\">\n      <vsan-tree-column [dataField]=\"'hostName'\"\n                        [dataProvider]=\"datagrid\"\n                        [filterObject]=\"hostNameFilter\"\n                        [title]=\"'vsan.disk.list.host' | localized\">\n      </vsan-tree-column>\n   </clr-dg-column>\n   <clr-dg-column *ngIf=\"isStandalone\">\n      <vsan-tree-column [dataField]=\"'transportType'\"\n                        [dataProvider]=\"datagrid\"\n                        [filterObject]=\"transportTypeFilter\"\n                        [title]=\"'vsan.disk.list.transportType' | localized\">\n      </vsan-tree-column>\n   </clr-dg-column>\n   <clr-dg-column *ngIf=\"isStandalone\">\n      <vsan-tree-column [dataField]=\"'diskAdapter'\"\n                        [dataProvider]=\"datagrid\"\n                        [filterObject]=\"diskAdapterFilter\"\n                        [title]=\"'vsan.disk.list.diskAdapter' | localized\">\n      </vsan-tree-column>\n   </clr-dg-column>\n   <!-- Datagrid Content -->\n   <clr-dg-row *clrDgItems=\"let row of datagrid.rows\"\n               [class.datagrid-selected]=\"isRowSelected(row)\"\n               (click)=\"selectTarget(row, $event)\">\n      <clr-dg-cell vsan-show-title class=\"name-column\">\n         <vsan-expand [row]=\"row\"></vsan-expand>\n         <clr-icon [attr.shape]=\"row.data.image\"></clr-icon>\n         <span>{{row.data.name}}</span>\n      </clr-dg-cell>\n      <clr-dg-cell class=\"compatibility-column\">\n         <vsan-icon-item *ngIf=\"getIsVsanMaxCompatibleLabel(row.data)\"\n                         [isIconSolid]=\"true\"\n                         [shape]=\"getIsVsanMaxCompatibleIconShape(row.data)\"\n                         [iconClass]=\"getIsVsanMaxCompatibleIconClass(row.data)\"\n                         [label]=\"getIsVsanMaxCompatibleLabel(row.data)\">\n         </vsan-icon-item>\n      </clr-dg-cell>\n      <clr-dg-cell class=\"claim-column centered-content\">\n         <input name=\"claim-by-vsan-checkbox\"\n                type=\"checkbox\"\n                clrCheckbox\n                [checked]=\"row.data.claimOption === ClaimOption.SingleTier\"\n                (change)=\"toggleClaiming(row.data, $event.target)\"/>\n      </clr-dg-cell>\n      <clr-dg-cell class=\"text-nowrap\">\n         {{row.data.initialDriveType}}\n      </clr-dg-cell>\n      <clr-dg-cell *ngIf=\"groupByPerspective == DisksGroupByPerspective.DISKS_BY_HOST\" vsan-show-title>\n         {{row.data.capacity}}\n      </clr-dg-cell>\n      <clr-dg-cell *ngIf=\"groupByPerspective == DisksGroupByPerspective.DISKS_BY_VENDOR\"\n                   class=\"icon-name-container\"\n                   vsan-show-title>\n         <clr-icon *ngIf=\"getHostIcon(row.data)\" [attr.shape]=\"getHostIcon(row.data)\"></clr-icon>\n         <span>{{row.data.hostName}}</span>\n      </clr-dg-cell>\n      <clr-dg-cell *ngIf=\"isStandalone\">{{row.data.transportType}}</clr-dg-cell>\n      <clr-dg-cell *ngIf=\"isStandalone\">{{row.data.diskAdapter}}</clr-dg-cell>\n   </clr-dg-row>\n\n   <!-- Datagrid Footer -->\n   <clr-dg-footer>\n      <clr-dg-pagination [clrDgPageSize]=\"ClaimDisksUtil.DISKS_PER_DATAGRID_PAGE\">\n         {{footerLabel.getLabel(groupByPerspective)}}\n      </clr-dg-pagination>\n   </clr-dg-footer>\n</clr-datagrid>","/* Copyright 2017-2022 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, EventEmitter, Input, OnChanges, Output} from \"@angular/core\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {ClaimHostListItem} from \"./model/claim-host-list-item.data\";\nimport {DisksClaimingConfigInfo} from \"./model/disks-claiming-config-info.data\";\nimport {SpaceEfficiencyService} from \"@service/space-efficiency-service\";\nimport {AlertActionLink} from \"@component/validation/alert-action-link\";\nimport {ClaimOption} from \"@generated/claim-option\";\nimport {VsanConfigSpec} from \"@generated/vsan-config-spec\";\n\ninterface HostsClaimingOverview {\n   noDisksAreSelected: boolean;\n   hasMixedStorageDisks: boolean;\n   hasStorageHDDs: boolean;\n}\n\n@Component({\n   selector: \"vsan-validation-panel\",\n   templateUrl: \"validation-panel.html\",\n   styleUrls: [\"validation-panel.scss\"],\n})\nexport class ValidationPanelComponent implements OnChanges {\n\n   @Input()\n   vsanConfigSpec: VsanConfigSpec;\n\n   @Input()\n   disksClaimingConfigInfo: DisksClaimingConfigInfo;\n\n   @Input()\n   noSelectionIsError: boolean = true;\n\n   @Input()\n   hostsData: ClaimHostListItem[];\n\n   @Output()\n   isConfigAcceptable: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n   vsanErrors: string[] = [];\n   vsanWarnings: string[] = [];\n   issuesListOpened: boolean = false;\n\n   openIssueActionLink: AlertActionLink = {\n      label: VsanUiUtils.getString(\"vsan.dialog.semiAutoClaimDialog.showWarningDetails\"),\n      action: () => this.issuesListOpened = true,\n   };\n\n   constructor(private spaceEfficiencyService: SpaceEfficiencyService) {}\n\n   ngOnChanges(): void {\n      this.validate();\n   }\n\n   validate(): void {\n      if (!this.hostsData || !this.vsanConfigSpec) {\n         return;\n      }\n\n      this.resetValidationResult();\n      this.hostsData.forEach((host) => host.updateDisksData());\n      this.validateAndFillErrorsAndWarnings();\n      this.isConfigAcceptable.emit(!this.hasErrors);\n   }\n\n   private resetValidationResult(): void {\n      this.vsanErrors = [];\n      this.vsanWarnings = [];\n      this.disksClaimingConfigInfo.resetValidationResult();\n   }\n\n   private validateAndFillErrorsAndWarnings(): void {\n      this.validateDiskClaiming();\n      this.validateHostConfigs();\n      this.validateEligibleDisks();\n      if (this.vsanConfigSpec.isVsanMaxEnabled) {\n         this.validateVsanMaxDiskClaiming();\n      }\n\n      this.vsanErrors = Array.from(new Set(this.vsanErrors));\n      this.vsanWarnings = Array.from(new Set(this.vsanWarnings));\n   }\n\n   private getHostsClaimingOverview(): HostsClaimingOverview {\n      let numStorageSSDs: number = 0;\n      let numStorageHDDs: number = 0;\n      let numCacheSSDs: number = 0;\n      let numManagedByVsanDisks: number = 0;\n      let hasMixedStorageDisks: boolean = false;\n\n      for (const host of this.hostsData) {\n         numStorageHDDs += host.numSelectedStorageHDDs;\n         numStorageSSDs += host.numSelectedStorageSSDs;\n         numCacheSSDs += host.numSelectedCacheDisks;\n         numManagedByVsanDisks += host.numSelectedManagedByVsanDisks;\n         if (numStorageHDDs !== 0 && numStorageSSDs !== 0) {\n            hasMixedStorageDisks = true;\n            break;\n         }\n      }\n\n      return {\n         noDisksAreSelected: !numCacheSSDs && !numStorageHDDs && !numStorageSSDs && !numManagedByVsanDisks,\n         hasMixedStorageDisks: hasMixedStorageDisks,\n         hasStorageHDDs: numStorageHDDs > 0,\n      } as HostsClaimingOverview;\n   }\n\n   private validateDiskClaiming(): void {\n      const claims: HostsClaimingOverview = this.getHostsClaimingOverview();\n      if (claims.noDisksAreSelected) {\n         // At least one disk should be claimed.\n         if (this.noSelectionIsError) {\n            this.vsanErrors.push(VsanUiUtils.getString(\"vsan.dialog.semiAutoClaimDialog.noDisksSelected\"));\n         } else {\n            this.vsanWarnings.push(VsanUiUtils.getString(\"vsan.dialog.semiAutoClaimDialog.noDisksSelected\"));\n         }\n      } else if (claims.hasMixedStorageDisks) {\n         // No mixed disk group creation.\n         this.vsanErrors.push(VsanUiUtils.getString(\"vsan.dialog.semiAutoClaimDialog.confError.mixedStorageDisks\"));\n      } else if (this.spaceEfficiencyService.isOnlyAllFlashSupportedForClaimingDisks(\n          this.vsanConfigSpec.spaceEfficiencyConfig) && claims.hasStorageHDDs) {\n         // Only All-Flash disk groups in case of data efficiency.\n         this.vsanErrors.push(\n               VsanUiUtils.getString(\n                     \"vsan.dialog.semiAutoClaimDialog.confError.dataEfficiencyWithHdds\",\n                     this.spaceEfficiencyService.toLabel(this.vsanConfigSpec.spaceEfficiencyConfig)));\n      }\n   }\n\n   private validateHostConfigs(): void {\n      this.hostsData.forEach((hostItem) => {\n         const errorText: string = hostItem.retrieveConfigErrorText();\n         if (errorText) {\n            this.vsanErrors.push(errorText);\n         }\n      });\n   }\n\n   private validateEligibleDisks(): void {\n      const firstItem: ClaimHostListItem = this.hostsData.find((host) => host.hasEligibleDisks);\n      if (!firstItem) {\n         return;\n      }\n      // Get the data for the first host, to validate that all hosts are claiming the same amount /vSAN case only/\n      const numSelectedDisksPerHost: number = firstItem.numSelectedDisks;\n      const numSelectedDiskGroups: number = firstItem.numSelectedCacheDisks;\n      const createGroup: boolean = firstItem.isCreateGroupOperation;\n      const editGroup: boolean = firstItem.isEditGroupOperation;\n\n      this.hostsData.forEach((host) => {\n         if (!host.hasEligibleDisks) {\n            return;\n         }\n         if (numSelectedDisksPerHost !== host.numSelectedDisks ||\n               numSelectedDiskGroups !== host.numSelectedCacheDisks) {\n            // Add warning if the configuration is not optimum - not the same\n            // amount of disk groups is selected for creation or some host are\n            // claiming less disks than others)\n            this.disksClaimingConfigInfo.disksNotEquallySpread = true;\n            this.vsanWarnings.push(\n                  VsanUiUtils.getString(\"vsan.dialog.semiAutoClaimDialog.warning.notOptimumSelection\"));\n         }\n         if (createGroup !== host.isCreateGroupOperation && editGroup !== host.isEditGroupOperation) {\n            // Add warning that there is mixed mode - on some hosts\n            // new disk groups will be created and on others - capacity\n            // disks will be added to existing disk groups if any\n            // NOTE: In the calculation the hosts with no selected disks\n            // or hosts where there is no existing group where the\n            // capacity disks will be added (there is an error for this)\n            // are not taken into account.\n            this.disksClaimingConfigInfo.mixedDiskClaiming = true;\n            this.vsanWarnings.push(\n                  VsanUiUtils.getString(\"vsan.dialog.semiAutoClaimDialog.warning.mixedCreateEditMode\"));\n         }\n      });\n   }\n\n   private validateVsanMaxDiskClaiming(): void {\n      this.hostsData\n            .filter(host => host.eligibleDisks?.length)\n            .forEach((host) => {\n               const hasIncompatibleVsanMaxDisks: boolean = host.eligibleDisks\n                     .filter(disk => disk.claimOption === ClaimOption.SingleTier)\n                     .some(disk => !disk.isVsanMaxCompatible);\n               if (hasIncompatibleVsanMaxDisks) {\n                  this.vsanWarnings.push(VsanUiUtils.getString(\n                        \"vsan.dialog.semiAutoClaimDialog.warning.vsanMaxIncompatibleDisks\"));\n               }\n            });\n   }\n\n   get hasAggregatedIssue(): boolean {\n      return this.vsanErrors.length + this.vsanWarnings.length > 1;\n   }\n\n   get aggregatedIssueClass(): string {\n      return this.vsanErrors.length > 0 ? \"danger\" : \"warning\";\n   }\n\n   get hasErrors(): boolean {\n      return this.vsanErrors.length > 0;\n   }\n\n   get hasWarnings(): boolean {\n      return this.vsanWarnings.length > 0;\n   }\n}"],"sourceRoot":"webpack:///"}