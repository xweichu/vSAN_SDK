{"version":3,"sources":["webpack:///src/app/vsan/health/view/health.html","webpack:///src/app/vsan/health/view/health-retest-confirm.html","webpack:///src/app/vsan/health/view/health-retest-confirm.component.ts","webpack:///src/app/vsan/health/view/health.component.ts","webpack:///src/app/vsan/health/health.module.ts"],"names":["HealthRetestConfirmComponent","ok","closeModalDialog","includeOnlineHealth","HealthComponent","route","healthProvider","historicalService","historicalConfigService","taskSvc","changeDetector","permissionService","storageService","csdService","VSPHERE_HEALTH_PARAM_NAME","selectedSubTestId","retestRunning","isHistoricalHealthEnabled","onlineHealthCheckSupported","isHealthTaskSupported","timestamp","undefined","hasEditPermissions","isComputeOnlyCluster","silentCheckSupported","selectedSilenceChecks","_healthPerspective","handleError","loadDataError","getMonitorHealthErrorMessage","loading","populateData","result","testsData","healthPerspective","isHistoricalHealthPerspective","vsanHealthData","forEach","category","subtests","subtest","isEmpty","some","silencedCheckId","silenceTestId","status","skipped","setTestLazyDetails","detectChanges","handleOnlineHealthError","error","getString","retestClicked","hasOnlineHealthData","retest","setSize","open","ceipEnabled","then","confirm","retestWithOnlineHealth","onlineHealthData","find","testData","isOnlineHealthCheck","hasOnlineTests","length","skippedOnlineHealthItems","filter","check","testCategory","testId","CEIP_TEST_ID","SUPPORT_INSIGHT_TEST_ID","isVsphereHealth","loadTestInstances","objectId","groupId","dateRange","getHistoricalHealthForTest","from","to","testInstaces","instance","initLazyLoading","loadTestTables","instances","Promise","reject","resolve","testInstance","instanceTimestamp","getHistoricalHealthForTestInstance","instanceDetails","details","messages","assignCoreIssuesNames","value","newValue","clone","equals","reloadFromCache","params","snapshot","hasOwnProperty","parseContext","hasPreselectedSubTestId","objectRef","clusterRef","contextObject","hasPermissions","EDIT_CLUSTER","checkCapabilities","isCluster","uid","fetch","showOverviewPage","isUnset","overviewData","context","getContext","getNavigationData","pop","HEALTH_CHECK_CONTEXT_KEY","getHealthCapabilityData","capabilityData","isSilentCheckSupported","isCloudHealthSupported","isCeipServiceEnabled","isHistoricalHealthSupported","getHistoricalHealthEnabled","getConfig","isEnabled","getSilentChecks","resetErrors","getSilenceChecks","getHistoricalHealthSummary","getVsanHealthFromCache","healthData","informScreenReader","event","retestOnlineHealth","getCloudHealthCheckResult","onlineHealthTask","getAwaitResult","getVsanHealth","startAsyncHealthLoading","propagatedError","startClusterHealthCheckTask","taskRef","TASK_FETCH_PERCENTAGE_THRESHOLD","TIME_BETWEEN_CALLS_FREQUENT_MS","fetchResult","getClusterHealthCheckTaskResult","pollInterval","window","setInterval","TASK_FETCH_INTERVAL_MS","clearInterval","srOnlyMessage","selectedTest","getTestById","testName","healthMessages","healthMessage","coreIssueTest","causedIssueMessage","id","test","subTest","healthRoutes","path","component","HealthModule"],"mappings":"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","file":"86-es5.js","sourcesContent":["<!-- Copyright 2017-2021 VMware, Inc. All rights reserved. -- VMware Confidential -->\n<div *ngIf=\"loading\" class=\"spinner central-spinner\"></div>\n<div *ngIf=\"loading && isVsphereHealth && retestRunning\" class=\"central-spinner-details\">\n   {{'vsan.monitor.health.vshpere.retest.loading.warning' | localized}}\n</div>\n\n<vsan-validation id=\"alert\"\n                 *ngIf=\"loadDataError\"\n                 (onClosed)=\"loadDataError = null\"\n                 [alert]=\"loadDataError\">\n</vsan-validation>\n<vsan-validation id=\"propagated-alert\"\n                 *ngIf=\"propagatedError\"\n                 (onClosed)=\"propagatedError = null\"\n                 [alert]=\"propagatedError\">\n</vsan-validation>\n\n<ng-template #title>\n   <h3>\n      {{'vsan.monitor.health.title' | localized}}\n   </h3>\n   <div class=\"subtitle\">\n      <span vsan-show-title *ngIf=\"!healthPerspective?.isHistoricalHealthPerspective\">{{'vsan.monitor.health.under.dev.lastChecked' | localized : (timestamp | l10nDate)}}</span>\n      <button *ngIf=\"!healthPerspective.isHistoricalHealthPerspective && vsanHealthData\"\n              id=\"retest\"\n              class=\"btn btn-link\"\n              (click)=\"retestClicked()\"\n              [clrLoading]=\"retestRunning\"\n              [disabled]=\"retestRunning\"\n              type=\"button\">\n         {{\"vsan.monitor.health.retest\" | localized}}\n      </button>\n   </div>\n</ng-template>\n\n<vsan-health-checks *ngIf=\"!loading\"\n                    [titleHealder]=\"title\"\n                    [isFlat]=\"false\"\n                    [includeHistoricalHealth]=\"isHistoricalHealthEnabled && !isComputeOnlyCluster\"\n                    [isVirtualObjectsLinkShown]=\"!isComputeOnlyCluster\"\n                    [vsanHealthData]=\"vsanHealthData\"\n                    [(selectedSubTestId)]=\"selectedSubTestId\"\n                    [(showOverviewPage)]=\"showOverviewPage\"\n                    [hasEditPermissions]=\"hasEditPermissions\"\n                    [silentCheckSupported]=\"silentCheckSupported\"\n                    [isVsphereHealth]=\"isVsphereHealth\"\n                    [selectedSilenceChecks]=\"selectedSilenceChecks\"\n                    [lastCheckedTimestamp]=\"timestamp\"\n                    [hasErrors]=\"!!loadDataError\"\n                    (retest)=\"onRetest($event)\"\n                    [(healthPerspective)]=\"healthPerspective\"\n                    (error)=\"propagatedError = $event;\">\n</vsan-health-checks>\n","<!--Copyright 2020 VMware, Inc. All rights reserved. -- VMware Confidential-->\n<vsan-default-prompt\n      [title]=\"'vsan.monitor.health.retest.confirm.title' | localized\"\n      (onConfirm)=\"ok()\">\n   <div class=\"container\">\n      <clr-toggle-wrapper>\n          <input id=\"include-online-health-check\"\n                 type=\"checkbox\"\n                 clrToggle\n                 name=\"include-online-health-check\"\n                 [(ngModel)]=\"includeOnlineHealth\">\n          <label for=\"include-online-health-check\">{{\"vsan.monitor.health.retestOnlineHealth\" | localized}}</label>\n      </clr-toggle-wrapper>\n      <div>\n         {{\"vsan.monitor.health.retest.confirm.online.desc\" | localized}}\n      </div>\n   </div>\n</vsan-default-prompt>","/* Copyright 2020 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component} from \"@angular/core\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\n\n@Component({\n   selector: \"vsan-health-retest-confirm\",\n   templateUrl: \"health-retest-confirm.html\",\n   styleUrls: [\"health-retest-confirm.scss\"],\n})\nexport class HealthRetestConfirmComponent {\n   includeOnlineHealth: boolean;\n\n   ok = (): void => {\n      VsanUiUtils.closeModalDialog({includeOnlineHealth: this.includeOnlineHealth});\n   };\n}","/* Copyright 2017-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {ChangeDetectorRef, Component, OnInit} from \"@angular/core\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {VsanHealthData} from \"@generated/vsan-health-data\";\nimport {VsanTestData} from \"@generated/vsan-test-data\";\nimport {VsanHealthPropertyProvider} from \"@generated/vsan-health-property-provider\";\nimport {ManagedObject, ManagedObjectUtils} from \"@service/managed-object\";\nimport {RefreshHandler} from \"@service/global-refresh.service\";\nimport {PermissionService} from \"@generated/permission-service\";\nimport {Privileges} from \"@generated/privileges\";\nimport {ModalBuilder} from \"@util/modal-builder\";\nimport {TaskMonitorService} from \"@service/task-monitor-service\";\nimport {Logger} from \"@util/logger\";\nimport {DateRangeData} from \"@component/datetime-picker/date-range-picker.component\";\nimport {ActivatedRoute, Params} from \"@angular/router\";\nimport {VsanHistoricalHealthService} from \"@generated/vsan-historical-health-service\";\nimport {HealthLazyDataLoadingUtil} from \"./health-lazy-data-loading-util\";\nimport {HealthCapabilityData} from \"@generated/health-capability-data\";\nimport {VsanTestInstanceDetails} from \"@generated/vsan-test-instance-details\";\nimport {ScreenReaderAnnouncer} from \"@service/screen-reader-announcer.service\";\nimport {HealthContext} from \"@navigation/context/health-context\";\nimport {VsanHealthStatus} from \"@generated/vsan-health-status\";\nimport {CsdService} from \"@generated/csd-service\";\nimport {HistoricalHealthConfigService} from \"@generated/historical-health-config-service\";\nimport {HealthRetestEventData} from \"../model/health-retest-event.data\";\nimport {VsanHealthUtil} from \"@util/vsan-health-util\";\nimport {PersistentStorageService} from \"@service/browser-storage.service\";\nimport {HealthTestMessage} from \"@generated/health-test-message\";\nimport {CausedIssueHealthTestMessage} from \"@generated/caused-issue-health-test-message\";\nimport {HealthPerspectiveData} from \"./model/health-perspective-data\";\nimport {InlineViewContextKey} from \"@model/inline-view-context-key.data\";\n\n@Component({\n   templateUrl: \"health.html\",\n   styleUrls: [\"health.scss\"],\n   selector: \"vsan-health\",\n})\nexport class HealthComponent implements OnInit {\n   private readonly VSPHERE_HEALTH_PARAM_NAME: string = \"vsphereHealth\";\n\n   /**\n    * At this percentage, backend will have determined all health groups as well as their loading statuses\n    */\n   private static readonly TASK_FETCH_PERCENTAGE_THRESHOLD: number = 50;\n\n   /**\n    * How often should the async health data be refreshed\n    */\n   private static readonly TASK_FETCH_INTERVAL_MS: number = 2000;\n\n   selectedSubTestId: string = \"\";\n\n   clusterRef: ManagedObject;\n\n   @ScreenReaderAnnouncer()\n   srOnlyMessage: string;\n\n   isVsphereHealth: boolean;\n   loading: boolean;\n   retestRunning: boolean = false;\n   loadDataError: string;\n   propagatedError: string;\n   isHistoricalHealthEnabled: boolean = false;\n   onlineHealthCheckSupported: boolean = false;\n   isHealthTaskSupported: boolean = false;\n   vsanHealthData: VsanHealthData;\n\n   private objectRef: ManagedObject;\n   timestamp: number = undefined;\n   private ceipEnabled: boolean;\n\n   hasEditPermissions: boolean = false;\n   isComputeOnlyCluster: boolean = false;\n\n   silentCheckSupported: boolean = false;\n\n   /**\n    * User selected silence checks\n    */\n   selectedSilenceChecks: string[] = [];\n\n   /**\n    * Display the \"Overview\" page instead of specific test details.\n    */\n   showOverviewPage: boolean;\n\n   private _healthPerspective: HealthPerspectiveData = new HealthPerspectiveData(false, this.timestamp);\n\n   set healthPerspective(value: HealthPerspectiveData) {\n      // the object is two-way bound between parent and child. If the same object is passed back and forth it is\n      // impossible to detect a change (difference from the cached one). To address this issue always work with a clone\n      // of the object (new object)\n      const newValue: HealthPerspectiveData = value.clone();\n      if (!newValue || newValue.equals(this._healthPerspective)) {\n         // not changed. Do nothing;\n         return;\n      }\n      this._healthPerspective = newValue;\n      this.reloadFromCache();\n   }\n\n   get healthPerspective(): HealthPerspectiveData {\n      return this._healthPerspective;\n   }\n\n   constructor(private route: ActivatedRoute,\n         private healthProvider: VsanHealthPropertyProvider,\n         private historicalService: VsanHistoricalHealthService,\n         private historicalConfigService: HistoricalHealthConfigService,\n         private taskSvc: TaskMonitorService,\n         private changeDetector: ChangeDetectorRef,\n         private permissionService: PermissionService,\n         private storageService: PersistentStorageService,\n         private csdService: CsdService) {\n   }\n\n   async ngOnInit(): Promise<void> {\n      try {\n         this.loading = true;\n         const params: Params = this.route.snapshot.params;\n         if (params.hasOwnProperty(this.VSPHERE_HEALTH_PARAM_NAME)) {\n            this.isVsphereHealth = params[this.VSPHERE_HEALTH_PARAM_NAME];\n         }\n         this.parseContext();\n         const hasPreselectedSubTestId: boolean = !!this.selectedSubTestId;\n         this.objectRef = this.clusterRef || ManagedObject.contextObject;\n\n         this.hasEditPermissions = await this.permissionService\n               .hasPermissions(this.objectRef, [Privileges.EDIT_CLUSTER()]);\n         await this.checkCapabilities();\n\n         // following properties are only for cluster\n         if (ManagedObjectUtils.isCluster(ManagedObject.uid(this.objectRef))) {\n            this.isComputeOnlyCluster = await this.csdService.isComputeOnlyCluster(this.objectRef);\n         }\n\n         await this.fetch();\n\n         if (!hasPreselectedSubTestId) {\n            // Open \"Overview\" page by default if supported.\n            this.showOverviewPage = !VsanUiUtils.isUnset(this.vsanHealthData?.overviewData);\n         }\n      } catch {\n         this.handleError();\n      }\n   }\n\n   private parseContext(): void {\n      const context: HealthContext = this.getContext();\n      this.selectedSubTestId = context?.selectedSubTestId;\n      this.clusterRef = context?.clusterRef;\n   }\n\n   private getContext(): HealthContext {\n      let context: HealthContext = VsanUiUtils.getNavigationData() as HealthContext;\n      if (!context) {\n         // In order to know if the view is inside vSAN overview tab,\n         // UI needs to check if the persistence service holds any context\n         context = this.storageService.pop(InlineViewContextKey.HEALTH_CHECK_CONTEXT_KEY) as HealthContext;\n      }\n      return context;\n   }\n\n   @RefreshHandler\n   private async fetch(): Promise<void> {\n      await this.reloadFromCache();\n   }\n\n   private async checkCapabilities(): Promise<void> {\n      try {\n         const capabilityData: HealthCapabilityData = await this.healthProvider.getHealthCapabilityData(\n               this.objectRef, this.isVsphereHealth);\n         this.silentCheckSupported = capabilityData.isSilentCheckSupported;\n         if (!this.isVsphereHealth) {\n            this.onlineHealthCheckSupported = capabilityData.isCloudHealthSupported;\n            this.ceipEnabled = capabilityData.isCeipServiceEnabled;\n            if (capabilityData.isHistoricalHealthSupported) {\n               this.getHistoricalHealthEnabled();\n            }\n            this.isHealthTaskSupported = capabilityData.isHealthTaskSupported;\n         }\n      } catch {\n         this.handleError();\n      }\n   }\n\n   private getHistoricalHealthEnabled(): void {\n      this.historicalConfigService.getConfig(this.objectRef).then(result =>\n            this.isHistoricalHealthEnabled = result.isEnabled);\n   }\n\n   private async getSilenceChecks(): Promise<string[]> {\n      try {\n         if (!this.silentCheckSupported) {\n            return;\n         }\n         return await this.healthProvider.getSilentChecks(this.objectRef, this.isVsphereHealth);\n      } catch {\n         this.handleError();\n      }\n   }\n\n   async reloadFromCache(): Promise<void> {\n      try {\n         this.resetErrors();\n         this.loading = true;\n\n         this.selectedSilenceChecks = await this.getSilenceChecks();\n\n         const healthData: VsanHealthData = this.healthPerspective.isHistoricalHealthPerspective\n            ? await this.historicalService\n                     .getHistoricalHealthSummary(this.objectRef, this.healthPerspective.from, this.healthPerspective.to)\n            : await this.healthProvider\n                     .getVsanHealthFromCache(this.objectRef, true, this.isVsphereHealth);\n\n         this.populateData(healthData);\n\n         this.informScreenReader();\n      } catch {\n         this.handleError();\n      } finally {\n         this.loading = false;\n      }\n   }\n\n   async onRetest(event: HealthRetestEventData): Promise<void> {\n      await this.retest(event.retestOnlineHealth);\n   }\n\n   async retest(retestOnlineHealth: boolean = false): Promise<void> {\n      this.resetErrors();\n      this.loading = true;\n      this.retestRunning = true;\n\n      this.selectedSilenceChecks = null;\n      this.selectedSilenceChecks = await this.getSilenceChecks();\n\n      if (!this.isHealthTaskSupported) {\n         if (retestOnlineHealth) {\n            // If online health should be retested, wait for it, then do the normal test\n            try {\n               const onlineHealthTask: ManagedObject = await this.healthProvider\n                     .getCloudHealthCheckResult(this.objectRef);\n               await this.taskSvc.getAwaitResult(onlineHealthTask);\n            } catch (err) {\n               this.handleOnlineHealthError(err);\n            }\n         }\n         try {\n            const vsanHealthData: VsanHealthData =\n                  await this.healthProvider.getVsanHealth(this.objectRef, true, this.isVsphereHealth);\n            this.populateData(vsanHealthData);\n         } catch {\n            this.handleError();\n         }\n\n         this.retestRunning = false;\n         this.informScreenReader();\n      } else {\n         this.startAsyncHealthLoading(retestOnlineHealth);\n      }\n   }\n\n   private resetErrors(): void {\n      this.loadDataError = null;\n      this.propagatedError = null;\n   }\n\n   private async startAsyncHealthLoading(retestOnlineHealth: boolean = false): Promise<void> {\n      const taskRef: ManagedObject =\n            await this.healthProvider.startClusterHealthCheckTask(this.objectRef, retestOnlineHealth);\n\n      // all groups will be ready when the task has reached the required percentage\n      await this.taskSvc.getAwaitResult(\n            taskRef,\n            HealthComponent.TASK_FETCH_PERCENTAGE_THRESHOLD,\n            TaskMonitorService.TIME_BETWEEN_CALLS_FREQUENT_MS,\n      );\n\n      // TODO akolov: inform the screenreader for loading test groups and when a group loads, also inform it\n\n      const fetchResult: () => Promise<void> = () =>\n            this.healthProvider.getClusterHealthCheckTaskResult(this.objectRef, taskRef)\n                  .then(this.populateData)\n                  .catch(this.handleError);\n\n      // start polling the health checks\n      const pollInterval: number = window.setInterval(fetchResult, HealthComponent.TASK_FETCH_INTERVAL_MS);\n\n      // when the task is done, stop the polling\n      this.taskSvc.getAwaitResult(taskRef).finally(() => {\n         fetchResult(); // do a final fetch in order to be sure that all tests are available\n         this.retestRunning = false;\n         clearInterval(pollInterval);\n      });\n   }\n\n   handleError = (): void => {\n      this.loadDataError = this.getMonitorHealthErrorMessage();\n      this.loading = false;\n   };\n\n   private populateData = (result: VsanHealthData) => {\n      this.loading = false;\n\n      if (!result || !result.testsData) {\n         // for historical health is expected to have empty or null result when there is no historical data for\n         // selected period. Do not set error message\n         if (!this.healthPerspective || !this.healthPerspective.isHistoricalHealthPerspective) {\n            this.loadDataError = this.getMonitorHealthErrorMessage();\n         }\n         this.vsanHealthData = result;\n         return;\n      }\n\n      // historical health has no data about last execution timestamp. Do not reset it.\n      if (!this.healthPerspective.isHistoricalHealthPerspective) {\n         this.timestamp = result.timestamp;\n         this._healthPerspective = new HealthPerspectiveData(false, this.timestamp);\n      }\n\n      // tests that was skipped after last retest, after global refresh will be retrieved from cache with old status.\n      // fix the status according to the selectedSilenceChecks, where the data is always up-to-date\n      result.testsData.forEach(category => category.subtests.forEach(subtest => {\n         if (!VsanUiUtils.isEmpty(this.selectedSilenceChecks) &&\n               this.selectedSilenceChecks.some(silencedCheckId => silencedCheckId === subtest.silenceTestId)) {\n            subtest.status = VsanHealthStatus.skipped;\n         }\n      }));\n\n      this.vsanHealthData = result;\n\n      if (this.healthPerspective.isHistoricalHealthPerspective) {\n         this.setTestLazyDetails(this.vsanHealthData);\n      }\n\n      // Detect changes to get latest value of this.cards\n      this.changeDetector.detectChanges();\n   };\n\n   private informScreenReader(): void {\n      if (!this.selectedSubTestId) {\n         this.srOnlyMessage = VsanUiUtils.getString(\"vsan.screenReader.message.page.loaded\",\n               VsanUiUtils.getString(\"vsan.monitor.health.title\"));\n         return;\n      }\n      const selectedTest: VsanTestData = this.getTestById(this.selectedSubTestId, this.vsanHealthData);\n      if (selectedTest) {\n         this.srOnlyMessage = VsanUiUtils.getString(\"vsan.screenReader.message.page.loaded.andItemSelected\",\n               VsanUiUtils.getString(\"vsan.monitor.health.title\"), selectedTest.testName);\n      }\n   }\n\n   private handleOnlineHealthError = (error: string): void => {\n      this.loadDataError = VsanUiUtils.getString(\"vsan.monitor.health.onlinehealth.error\");\n      Logger.error(error);\n   };\n\n   retestClicked = () => {\n      if (!this.onlineHealthCheckSupported || !this.hasOnlineHealthData(this.vsanHealthData)) {\n         this.retest();\n         return;\n      }\n\n      new ModalBuilder(\"health/retestConfirm\")\n            .setSize(650, 300)\n            .open({ceipEnabled: this.ceipEnabled})\n            .then((confirm) => {\n               const retestWithOnlineHealth: boolean = confirm.includeOnlineHealth;\n               this.retest(retestWithOnlineHealth);\n            });\n   };\n\n   private hasOnlineHealthData = (vsanHealthData: VsanHealthData): boolean => {\n      const onlineHealthData: VsanTestData =\n            vsanHealthData.testsData.find(testData => this.isOnlineHealthCheck(testData));\n      let hasOnlineTests: boolean = onlineHealthData && onlineHealthData.subtests.length !== 0 && this.ceipEnabled;\n      if (hasOnlineTests) {\n         // find the silent items that belong to the online health category\n         const skippedOnlineHealthItems: VsanTestData[] = onlineHealthData.subtests\n               .filter(subtest => this.selectedSilenceChecks\n                     .some(check => check === subtest.silenceTestId),\n               );\n         // if the length two array is the same, all the online health are silent\n         hasOnlineTests = skippedOnlineHealthItems.length !== onlineHealthData.subtests.length;\n      }\n\n      return hasOnlineTests;\n   };\n\n   private isOnlineHealthCheck = (testCategory: VsanTestData): boolean => {\n      /**\n       * We don't have an ID for each health check categories,\n       * Here we can only check if 'ceip check' or 'support insight check' is in the subtests,\n       * if in then we know this is online health category\n       */\n      return testCategory.subtests &&\n            testCategory.subtests.some(subtest => subtest.testId === VsanHealthUtil.CEIP_TEST_ID\n                  || subtest.testId === VsanHealthUtil.SUPPORT_INSIGHT_TEST_ID);\n   };\n\n   private getMonitorHealthErrorMessage = (): string => {\n      if (this.isVsphereHealth) {\n         return VsanUiUtils.getString(\"vsphereHealth.error\");\n      }\n\n      return VsanUiUtils.getString(\"vsan.monitor.health.health.data.error\");\n   };\n\n   private setTestLazyDetails(vsanHealthData: VsanHealthData): void {\n      vsanHealthData.testsData.forEach(testData =>\n            testData.subtests.forEach(subtest =>\n                  HealthLazyDataLoadingUtil.initLazyLoading(subtest, this.loadTestInstances,\n                        [subtest, this.objectRef, testData.testId, subtest.testId, this.healthPerspective.dateRange]),\n            ),\n      );\n   }\n\n   loadTestInstances = async (testData: VsanTestData, objectId: ManagedObject, groupId: string, testId: string,\n         dateRange: DateRangeData): Promise<boolean> => {\n      try {\n         const testInstaces: VsanTestInstanceDetails[] = await this.historicalService.getHistoricalHealthForTest(\n               objectId, groupId, testId, dateRange.from, dateRange.to);\n         // set lazy loading callback for each instance\n         testInstaces.forEach(instance => HealthLazyDataLoadingUtil.initLazyLoading(instance, this.loadTestTables,\n               [instance, objectId, groupId, testId, instance.timestamp]));\n         testData.instances = testInstaces;\n      } catch (e) {\n         return Promise.reject(e);\n      }\n      return Promise.resolve(true);\n   };\n\n   loadTestTables = async (testInstance: VsanTestInstanceDetails, objectId: ManagedObject, groupId: string,\n         testId: string, instanceTimestamp: number): Promise<boolean> => {\n      try {\n         const instanceDetails: VsanTestInstanceDetails =\n               await this.historicalService.getHistoricalHealthForTestInstance(objectId, groupId, testId,\n                     instanceTimestamp);\n         testInstance.details = instanceDetails?.details;\n         testInstance.messages = this.assignCoreIssuesNames(instanceDetails?.messages);\n      } catch (e) {\n         return Promise.reject(e);\n      }\n      return Promise.resolve(true);\n   };\n\n   private assignCoreIssuesNames(healthMessages: HealthTestMessage[]): HealthTestMessage[] {\n      if (!healthMessages) {\n         return null;\n      }\n      healthMessages\n         .filter(healthMessage => (healthMessage as CausedIssueHealthTestMessage).coreIssueTest)\n         .forEach(healthMessage => {\n            const causedIssueMessage: CausedIssueHealthTestMessage = healthMessage as CausedIssueHealthTestMessage;\n            // Need to find the test name in already fetched tests.\n            causedIssueMessage.coreIssueTest.testName =\n                  this.getTestById(causedIssueMessage.coreIssueTest.testId, this.vsanHealthData).testName;\n         });\n      return healthMessages;\n   }\n\n   private getTestById(id: string, healthData: VsanHealthData): VsanTestData {\n      if (!healthData || !healthData.testsData) {\n         return null;\n      }\n      for (const test of healthData.testsData) {\n         if (test.testId === id) {\n            return test;\n         }\n\n         if (test.subtests) {\n            for (const subTest of test.subtests) {\n               if (subTest.testId === id) {\n                  return subTest;\n               }\n            }\n         }\n      }\n   }\n}\n","/* Copyright 2019-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {NgModule} from \"@angular/core\";\nimport {RouterModule, Routes} from \"@angular/router\";\nimport {HealthComponent} from \"./view/health.component\";\nimport {CommonModule} from \"@angular/common\";\nimport {ClarityModule} from \"@clr/angular\";\nimport {CommonPipeModule} from \"@pipe/common-pipe.module\";\nimport {ValidationModule} from \"@component/validation/validation.module\";\nimport {HealthChecksModule} from \"./health-checks.module\";\nimport {HealthRetestConfirmComponent} from \"./view/health-retest-confirm.component\";\nimport {FormsModule} from \"@angular/forms\";\nimport {PromptModule} from \"@component/dialog/prompt/prompt.module\";\nimport {PersistentStorageService} from \"@service/browser-storage.service\";\n\nconst healthRoutes: Routes = [\n   {\n      path: \"\",\n      component: HealthComponent,\n   },\n   {\n      path: \"retestConfirm\",\n      component: HealthRetestConfirmComponent,\n   },\n];\n\n@NgModule({\n   imports: [\n      FormsModule,\n      CommonModule,\n      PromptModule,\n      ClarityModule,\n      ValidationModule,\n      CommonPipeModule,\n      HealthChecksModule,\n      RouterModule.forChild(healthRoutes),\n   ],\n   declarations: [\n      HealthComponent,\n      HealthRetestConfirmComponent,\n   ],\n   providers: [\n      PersistentStorageService,\n   ],\n})\nexport class HealthModule {\n}\n"]}