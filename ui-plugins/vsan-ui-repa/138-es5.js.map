{"version":3,"sources":["webpack:///src/app/vsan/file-services/upgrade/upgrade-file-service.module.ts","webpack:///src/app/vsan/common/service/flow/error-handler.decorator.ts","webpack:///src/app/vsan/file-services/upgrade/upgrade-file-service.html","webpack:///src/app/vsan/file-services/upgrade/upgrade-file-service.component.ts","webpack:///src/app/vsan/common/service/flow/loader-name.ts"],"names":["routes","path","component","UpgradeFileServiceModule","ErrorHandler","props","targetClass","functionName","descriptor","name","errorHandler","value","UpgradeFileServiceComponent","fileService","dataAccessService","healthService","taskMonitorService","clusterRef","contextObject","errorType","DANGER","upgradeButtonDisabled","startUpload","upgrade","errors","ovfSettings","isUseExisting","upgradeAfterPreflightCheck","isManualDownload","ovfUrlSecured","isUrlTrusted","getString","registerOvfTask","monitorDownloadTask","validationResult","ovfFileSelector","validate","Promise","then","length","ovfUploadComplete","ovfUploadCancel","ovfUploadError","context","getModalContext","domainConfig","existingOvfVersion","precheckResult","ovfInstalled","fsvmVersion","hostVersion","canUseExistingOvf","isExistingOvfUpgradable","getExternalProxySettings","externalProxyData","isInternetAccessEnabled","enableInternetAccess","error","getPublicOvfProps","publicOvfProps","getOvfOption","isLarger","EXISTING","isEmpty","url","MANUAL","DOWNLOAD","getPrecheckResult","compare","upgradeFsvm","task","closeModalDialog","err","WARNING","downloadPublicOvf","downloadTask","getAwaitResult","ON_INIT","REGISTER","UPGRADE","MONITOR","srMessage","srMessageType","PAGE_TITLE","LoaderName"],"mappings":"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","file":"138-es5.js","sourcesContent":["/* Copyright 2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {NgModule} from \"@angular/core\";\nimport {CommonModule} from \"@angular/common\";\nimport {ClarityModule} from \"@clr/angular\";\nimport {RouterModule, Routes} from \"@angular/router\";\nimport {CommonPipeModule} from \"@pipe/common-pipe.module\";\nimport {PromptModule} from \"@component/dialog/prompt/prompt.module\";\nimport {UpgradeFileServiceComponent} from \"./upgrade-file-service.component\";\nimport {FileServicesCommonModule} from \"../shared/file-services-common.module\";\n\nconst routes: Routes = [\n   {\n      path: \"\",\n      component: UpgradeFileServiceComponent,\n   },\n];\n\n@NgModule({\n   imports: [\n      CommonModule,\n      ClarityModule,\n      CommonPipeModule,\n      PromptModule,\n      FileServicesCommonModule,\n      RouterModule.forChild(routes),\n   ],\n   declarations: [\n      UpgradeFileServiceComponent,\n   ],\n})\nexport class UpgradeFileServiceModule {\n}","/* Copyright 2021 VMware, Inc. All rights reserved. -- VMware Confidential */\n\nimport {LoadingFlowWrapper} from \"@service/flow/loading-flow-wrapper.data\";\n\n/**\n * This property decorator is supposed to be used along with the @Loader decorator.\n * If an exception is thrown during the execution of the method decorated with @Loader\n * the ErrorHandler method will be invoked. You can define as many ErrorHandlers as you want,\n * but they must be with different names. The name can be provided as input to the decorator.\n * If a name is set to the ErrorHandler it will handle only the errors thrown by Loader functions\n * with the same name. If no name is passed to the ErrorHandler, it will handle only the errors\n * from Loader functions with no name.\n *\n * <pre>\n * // Example 1:\n * @Loader()\n * loadSyncData(): any {\n *    throw new Error(\"Failed to load sync data\");\n * }\n *\n * @ErrorHandler()\n * handleError(err: any) {\n *    // handle the error.\n * }\n *...\n *\n * // Example 2\n *\n * @Loader({name: \"data-loading-flow})\n * async loadAsyncData(): Promise<any> {\n *    return Promise.reject(\"Failed to load async data\");\n * }\n *\n * @ErrorHandler({name: \"data-loading-flow})\n * handleError(err: any) {\n *    // handle the error.\n * }\n * ...\n * </pre>\n */\nexport function ErrorHandler(props?: ErrorHandlerProperties): MethodDecorator {\n   props = props || {};\n   return (targetClass: any, functionName: string, descriptor: PropertyDescriptor): void => {\n      (new LoadingFlowWrapper(targetClass, props.name)).errorHandler = descriptor.value;\n   };\n}\n\n/**\n * Properties of the ErrorHandler decorator.\n */\nexport interface ErrorHandlerProperties {\n\n   /**\n    * Indicates which @Loder should be handled by this @ErrorHandler\n    */\n   name?: string;\n}\n","<!--Copyright 2019-2022 VMware, Inc. All rights reserved. -- VMware Confidential-->\n<vsan-prompt\n      [title]=\"'vsan.fileservices.upgrade.dialog.title' | localized\"\n      [confirmText]=\"'vsan.fileservices.upgrade.button.label' | localized\"\n      [(alertMessages)]=\"errors\"\n      [alertType]=\"errorType\"\n      [blockButton]=\"upgradeButtonDisabled\"\n      [blockContent]=\"loading\"\n      [cancelText]=\"'vsan.common.cancel' | localized\"\n      (onConfirm)=\"upgrade()\">\n   <div class=\"upgrade-options\">\n      <div id=\"upgrade-file-service-desc\">\n         {{\"vsan.fileservices.upgrade.dialog.desc\" | localized}}\n      </div>\n      <h5>\n         {{\"vsan.fileservices.upgrade.dialog.ovf.title\" | localized}}\n      </h5>\n      <vsan-file-services-ovf-settings id=\"ovf-settings\"\n                                       *ngIf=\"ovfSettings\"\n                                       #ovfFileSelector\n                                       [clusterRef]=\"clusterRef\"\n                                       [publicOvfProps]=\"publicOvfProps\"\n                                       [startUpload]=\"startUpload\"\n                                       [isInternetAccessEnabled]=\"isInternetAccessEnabled\"\n                                       [downloadTask]=\"downloadTask\"\n                                       [displayUseExistingOption]=\"canUseExistingOvf\"\n                                       [existingOvfVersion]=\"existingOvfVersion\"\n                                       [fsvmVersion]=\"fsvmVersion\"\n                                       [hostVersion]=\"hostVersion\"\n                                       [(ovfSettings)]=\"ovfSettings\"\n                                       (uploadComplete)=\"ovfUploadComplete()\"\n                                       (onCancel)=\"ovfUploadCancel()\"\n                                       (onError)=\"ovfUploadError($event)\">\n      </vsan-file-services-ovf-settings>\n   </div>\n</vsan-prompt>\n","/* Copyright 2019-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, OnInit, ViewChild} from \"@angular/core\";\nimport {VsanFileServiceOvfProps} from \"@generated/vsan-file-service-ovf-props\";\nimport {VsanFileServiceConfigService} from \"@generated/vsan-file-service-config-service\";\nimport {ManagedObject} from \"@service/managed-object\";\nimport {OvfOption, OvfSettings} from \"../shared/file-services-ovf-settings.data\";\nimport {VsanHealthPropertyProvider} from \"@generated/vsan-health-property-provider\";\nimport {ExternalProxySettingsConfig} from \"@generated/external-proxy-settings-config\";\nimport {FileServicesOvfSettings} from \"../shared/file-services-ovf-settings.component\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {TaskMonitorService} from \"@service/task-monitor-service\";\nimport {VsanFileServicePrecheckResult} from \"@generated/vsan-file-service-precheck-result\";\nimport {VsanFileServiceDomain} from \"@generated/vsan-file-service-domain\";\nimport {Logger} from \"@util/logger\";\nimport {AlertType} from \"@component/validation/alert-type\";\nimport {DataAccessService} from \"@service/data-access.service\";\nimport {UpgradeFileServiceModalContext} from \"./upgrade-file-service-modal-context\";\nimport {Version} from \"@util/version\";\nimport {LoadingIndicator} from \"@service/flow/loading-indicator.decorator\";\nimport {Loader} from \"@service/flow/loader.decorator\";\nimport {ErrorHandler} from \"@service/flow/error-handler.decorator\";\nimport {SrMessageType} from \"@service/screen-reader-announcer.service\";\nimport {LoaderName} from \"@service/flow/loader-name\";\n\n@Component({\n   templateUrl: \"upgrade-file-service.html\",\n   selector: \"vsan-upgrade-file-service\",\n   styleUrls: [\"upgrade-file-service.scss\"],\n})\nexport class UpgradeFileServiceComponent implements OnInit {\n\n   @LoadingIndicator({\n      name: [LoaderName.ON_INIT, LoaderName.REGISTER, LoaderName.UPGRADE, LoaderName.MONITOR],\n   })\n   loading: boolean;\n\n   publicOvfProps: VsanFileServiceOvfProps;\n   ovfSettings: OvfSettings;\n   clusterRef: ManagedObject = ManagedObject.contextObject;\n   isInternetAccessEnabled: boolean;\n   downloadTask: ManagedObject;\n   existingOvfVersion: Version;\n   fsvmVersion: Version;\n   hostVersion: Version;\n   canUseExistingOvf: boolean;\n   errors: string[];\n   errorType: string = AlertType.DANGER;\n   upgradeButtonDisabled: boolean = false;\n   startUpload: boolean = false;\n\n   @ViewChild(\"ovfFileSelector\")\n   ovfFileSelector: FileServicesOvfSettings;\n\n   private domainConfig: VsanFileServiceDomain;\n\n   constructor(private fileService: VsanFileServiceConfigService,\n         private dataAccessService: DataAccessService,\n         private healthService: VsanHealthPropertyProvider,\n         private taskMonitorService: TaskMonitorService) {\n   }\n\n   @Loader({\n      name: LoaderName.ON_INIT,\n      srMessage: \"vsan.fileservices.upgrade.dialog.title\",\n      srMessageType: SrMessageType.PAGE_TITLE,\n   })\n   async ngOnInit(): Promise<void> {\n      const context: UpgradeFileServiceModalContext = VsanUiUtils.getModalContext() as UpgradeFileServiceModalContext;\n      this.domainConfig = context.domainConfig;\n      this.existingOvfVersion = new Version(context.precheckResult.ovfInstalled);\n      this.fsvmVersion = new Version(context.precheckResult.fsvmVersion);\n      this.hostVersion = new Version(context.precheckResult.hostVersion);\n      this.canUseExistingOvf = this.isExistingOvfUpgradable();\n      try {\n         const externalProxyData: ExternalProxySettingsConfig =\n               await this.healthService.getExternalProxySettings(this.clusterRef);\n         this.isInternetAccessEnabled = externalProxyData.enableInternetAccess;\n      } catch (err) {\n         Logger.error(err);\n         this.isInternetAccessEnabled = false;\n      }\n      if (this.isInternetAccessEnabled) {\n         try {\n            this.publicOvfProps = await this.fileService.getPublicOvfProps(this.clusterRef);\n         } catch (err) {\n            Logger.error(err);\n         }\n      }\n      this.ovfSettings = new OvfSettings(this.getOvfOption(), this.publicOvfProps);\n   }\n\n   private isExistingOvfUpgradable(): boolean {\n      return Version.isLarger(this.existingOvfVersion, this.fsvmVersion);\n   }\n\n   private getOvfOption(): OvfOption {\n      if (this.canUseExistingOvf) {\n         return OvfOption.EXISTING;\n      }\n      if (!this.isInternetAccessEnabled || VsanUiUtils.isEmpty(this.publicOvfProps && this.publicOvfProps.url)) {\n         return OvfOption.MANUAL;\n      }\n      return OvfOption.DOWNLOAD;\n   }\n\n   upgrade = async () => {\n      this.errors = null;\n      if (this.ovfSettings.isUseExisting) {\n         await this.upgradeAfterPreflightCheck();\n         return;\n      }\n\n      if (!this.ovfSettings.isManualDownload) {\n         if (this.ovfSettings.ovfUrlSecured) {\n            if (!this.ovfSettings.isUrlTrusted) {\n               this.errors = [VsanUiUtils.getString(\"vsan.services.fileservices.wizard.ovf.ssl.trust.error\")];\n               this.errorType = AlertType.DANGER;\n               return;\n            }\n         }\n\n         await this.registerOvfTask();\n         await this.monitorDownloadTask();\n      } else {\n         const validationResult: string[] | Promise<string[]> = this.ovfFileSelector.validate();\n         if (validationResult) {\n            if (validationResult instanceof Promise) {\n               validationResult.then((errors: string[]) => {\n                  if (errors && errors.length) {\n                     this.errors = errors;\n                     this.errorType = AlertType.DANGER;\n                     this.upgradeButtonDisabled = false;\n                     return;\n                  }\n                  // Start to upload files\n                  this.startUpload = true;\n                  this.upgradeButtonDisabled = true;\n               });\n            } else {\n               this.errors = validationResult;\n               this.errorType = AlertType.DANGER;\n            }\n         }\n      }\n   };\n\n   /**\n    * Check the OVF files downloaded/uploaded before upgrading the FSVM\n    */\n   @Loader({name: LoaderName.UPGRADE})\n   private async upgradeAfterPreflightCheck(): Promise<void> {\n      // we need a check for the OVF file downloaded/uploaded before upgrading\n      const precheckResult: VsanFileServicePrecheckResult =\n            await this.fileService.getPrecheckResult(this.clusterRef, this.domainConfig, false);\n      // fsvmVersion: the running fsvm version\n      // ovfInstalled: the name is confusing.\n      // It is called 'installed' but actually it's the version of ovf file downloaded/uploaded\n      if (new Version(precheckResult.ovfInstalled).compare(new Version(precheckResult.fsvmVersion)) > 0) {\n         this.fileService.upgradeFsvm(this.clusterRef)\n               .then(task => VsanUiUtils.closeModalDialog(task))\n               .catch(err => this.errors = [err]);\n      } else {\n         this.upgradeButtonDisabled = true;\n         this.errors = [VsanUiUtils.getString(\"vsan.fileservices.upgrade.latest.desc\")];\n         this.errorType = AlertType.WARNING;\n      }\n   }\n\n   @ErrorHandler({name: LoaderName.UPGRADE})\n   private handleUpgradeAfterPreflightCheckError(): void {\n      this.errors = [VsanUiUtils.getString(\"vsan.fileservices.upgrade.preflight.error\")];\n   }\n\n   @Loader({name: LoaderName.REGISTER})\n   private async registerOvfTask(): Promise<void> {\n      this.downloadTask = await this.fileService.downloadPublicOvf(this.clusterRef);\n   }\n\n   @ErrorHandler({name: LoaderName.REGISTER})\n   private handleError(error: string): void {\n      this.errors = [error];\n   }\n\n   /**\n    * Hold the next checks until the download completes\n    */\n   @Loader({name: LoaderName.MONITOR})\n   private async monitorDownloadTask(): Promise<void> {\n      this.upgradeButtonDisabled = true;\n      await this.taskMonitorService.getAwaitResult(this.downloadTask);\n      await this.upgradeAfterPreflightCheck();\n   }\n\n   @ErrorHandler({name: LoaderName.MONITOR})\n   private handleMonitorError(error: string): void {\n      Logger.error(error);\n      this.errors = [VsanUiUtils.getString(\"vsan.services.fileservices.rtc.download.failed\")];\n      this.errorType = AlertType.DANGER;\n   }\n\n   ovfUploadComplete = () => {\n      this.startUpload = false;\n      this.upgradeAfterPreflightCheck();\n   };\n\n   ovfUploadCancel = () => {\n      this.startUpload = false;\n      this.upgradeButtonDisabled = false;\n   };\n\n   ovfUploadError = (errors: string[]) => {\n      this.errors = errors;\n      this.startUpload = false;\n      this.upgradeButtonDisabled = false;\n   };\n}\n","/* Copyright 2021 VMware, Inc. All rights reserved. -- VMware Confidential */\n\n/*\n   Names to use in the Loader decorator\n */\nexport enum LoaderName {\n   ON_INIT = \"on-init\",\n   ON_CONFIRM = \"on-confirm\",\n   PERFORM_CHANGE = \"perform-change\",\n   REGISTER = \"register\",\n   UPGRADE = \"upgrade\",\n   MONITOR = \"monitor\",\n   DATA_EVACUATION = \"data-evacuation\",\n}\n"]}