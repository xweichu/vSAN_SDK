{"version":3,"sources":["webpack:///src/app/vsan/overview/fault-domains-summary.component.ts","webpack:///src/app/vsan/overview/health-card.html","webpack:///src/app/vsan/overview/configurations-card.html","webpack:///src/app/vsan/overview/resyncing-data-card.html","webpack:///src/app/vsan/overview/vsan-cluster-overview.component.ts","webpack:///src/app/generated/vsan-health-check.ts","webpack:///src/app/vsan/overview/capacity-card.component.ts","webpack:///src/app/vsan/overview/capacity-card.html","webpack:///src/app/vsan/overview/health-card.component.ts","webpack:///src/app/vsan/overview/detail-view-wrapper.html","webpack:///src/app/vsan/overview/vsan-cluster-overview.html","webpack:///src/app/vsan/overview/resyncing-data-card.component.ts","webpack:///src/app/vsan/overview/fault-domains-summary.html","webpack:///src/app/vsan/overview/historical-health.html","webpack:///src/app/vsan/overview/configurations-card.component.ts","webpack:///src/app/vsan/overview/detail-view-wrapper.component.ts","webpack:///src/app/vsan/overview/vsan-cluster-overview.module.ts","webpack:///src/app/vsan/overview/vsan-overview-details-view.ts","webpack:///src/app/vsan/overview/historical-health.component.ts"],"names":["FaultDomainsSummaryComponent","faultDomainModels","standaloneModels","preferredDomain","getPreferredDomain","witnessInfos","getStandaloneModels","availableDomains","getFaultDomainModels","faultToleranceInfo","getFaultToleranceInfo","storageConsumption","model","getDomainConsumptionData","VsanClusterOverviewComponent","dataService","vsanGeneralConfigService","ceipSvc","taskService","quickstartStatusNotification","upgradeService","CAPACITY_CARD","HEALTH_CARD","CONFIGURATION_CARD","RESYNCING_OBJECTS_CARD","editClusterPermission","configureStoragePermission","isVsanUpgradeVisible","showCards","errorMessages","getViewCards","result","Map","set","LEFT","RIGHT","cardsView","VSAN_HOME_CARD_VIEW","getVmCluster","clusterRef","refresh","repa","getProperty","cluster","contextObject","clusterId","moIdToManagedObject","type","reset","queryVsanGeneralConfig","vsanConfig","getString","isComputeOnlyCluster","fetchDisksUpgradeData","error","getUpgradeStatus","then","upgradeStatus","upgradeData","getNewInstance","e","push","getUpgradeData","data","getVsanGeneralConfigData","generalConfig","cloneVsanConfigSpec","vcCapabilityData","clusterCapabilityData","clusterPermissions","vcPermissions","get","EDIT_CLUSTER","CONFIG_STORAGE","clusterMode","COMPUTE","context","detailViewContext","VsanHealthCheck","Factory","create","perspective","healthGroup","healthTestId","healthTest","healthCheckLabel","status","isHardwareCheck","CapacityCardComponent","capacityService","capabilitiesService","navigationService","onShowDetails","srOnlyMessage","Promise","all","getCapacityDataPerDatastore","getClusterCapabilityData","datastoresCapacityData","capacityData","VSAN","view","CAPACITY","emit","HealthCardComponent","healthProvider","getVsanHealthSummaryFromCache","healthData","healthTestData","testsData","filter","test","isUnhealthyItem","isEmpty","subtests","forEach","subtest","map","createVsahHealthCheck","healthContext","HEALTH","content","testName","testId","item","red","yellow","ResyncingDataCardComponent","vsanResyncProvider","RESYNCINGOBJECTS","fetch","resyncingComponents","isUnset","resyncData","componentsToSync","toString","bytesLeft","bytesToResync","formatFileSize","suspendedResync","suspendedBytesToResync","suspendedETA","activeBytesToResync","queuedBytesToResync","totalResyncingEta","calculateTotalResyncingEta","scheduledResyncing","getScheduledResync","isResyncETAImprovementSupported","hasTotalResyncObjects","etaToResync","getResyncingDataForAutoRefresh","getResyncingData","ConfigurationsCardComponent","configService","capacityManagementService","capabilityProvider","capacityDataService","stretchedClusterService","hasEditClusterPermission","queryPerfServiceConfig","fetchStretchedClusterData","fetchIsStretchedCluster","getPerformanceStatus","perfSvcStatus","perfSvcConfig","details","perfSvcEnabled","ENABLED","getAvailableDomains","getIsVsanStretchedCluster","isStretchedCluster","iscsiSvcConfig","getIscsiTargetStatus","iscsiSvcStatus","getCapacityManagementData","capacityManagementData","getStorageConsumptionByHost","hostsStorageData","processHostsCapacity","getWitnessHostData","isSharedWitnessSupported","checkIfSharedWitnessIsAllowed","isSharedWitnessAllowed","allHostsCount","reduce","sum","isHost","children","length","hostRef","witnessHost","getIsSharedWitnessSupported","uid","faultDomainTabActive","FAULTDOMAINS","SERVICES","name","DetailViewWrapperComponent","router","storageService","OVERVIEW_DETAILS_PATH","expandDetailsView","navigate","CLUSTER_OVERVIEW_VIEW","setHealthContext","navigateToDetails","HEALTH_VIEW","CAPACITY_VIEW","setGeneralContext","SERVICES_CONTEXT_KEY","SERVICES_VIEW","FAULT_DOMAINS_CONTEXT_KEY","FAULT_DOMAINS_VIEW","RESYNCING_OBJECTS_CONTEXT_KEY","RESYNCING_COMPONENTS_VIEW","HEALTH_CHECK_CONTEXT_KEY","outlets","key","mod","routes","path","component","loadChildren","outlet","VsanClusterOverviewModule","VsanOverviewDetailsView","HistoricalHealthComponent","enabledStateLabel","config","isEnabled"],"mappings":"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","file":"110-es5.js","sourcesContent":["/* Copyright 2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {ChangeDetectionStrategy, Component, Input, OnInit} from \"@angular/core\";\nimport {DomainOrHostData} from \"@generated/domain-or-host-data\";\nimport {WitnessHostData} from \"@generated/witness-host-data\";\nimport {FaultDomainModel} from \"@model/fault-domain.model\";\nimport {FaultDomainsUtil} from \"@util/fault-domains-util\";\nimport {VsanCapabilityData} from \"@generated/vsan-capability-data\";\nimport {FaultDomainConsumptionData} from \"@model/fault-domain-consumption-data\";\n\n@Component({\n   selector: \"fault-domains-summary\",\n   templateUrl: \"fault-domains-summary.html\",\n   styleUrls: [\"fault-domains-summary.scss\"],\n   changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class FaultDomainsSummaryComponent implements OnInit {\n   @Input()\n   isVsanMaxEnabled: boolean;\n\n   @Input()\n   availableDomains: DomainOrHostData[];\n\n   @Input()\n   storageConsumption: any;\n\n   @Input()\n   witnessInfos: WitnessHostData[];\n\n   @Input()\n   clusterCapabilityData: VsanCapabilityData;\n\n   @Input()\n   isStretchedCluster: boolean;\n\n   @Input()\n   isSharedWitnessAllowed: boolean;\n\n   faultToleranceInfo: string;\n   faultDomainModels: FaultDomainModel[] = [];\n   standaloneModels: FaultDomainModel[] = [];\n   private preferredDomain: string;\n\n   ngOnInit(): void {\n      this.preferredDomain = FaultDomainsUtil.getPreferredDomain(this.witnessInfos);\n      this.standaloneModels = FaultDomainsUtil.getStandaloneModels(this.availableDomains, this.witnessInfos);\n      this.faultDomainModels = FaultDomainsUtil.getFaultDomainModels(this.availableDomains, this.preferredDomain);\n      this.faultToleranceInfo = FaultDomainsUtil.getFaultToleranceInfo(\n            this.availableDomains,\n            this.witnessInfos,\n            this.standaloneModels,\n            this.faultDomainModels,\n            this.storageConsumption);\n   }\n\n   getDomainConsumption(model: FaultDomainModel): FaultDomainConsumptionData {\n      return FaultDomainConsumptionData.getDomainConsumptionData(model, this.storageConsumption);\n   }\n}\n","<!--Copyright 2021 VMware, Inc. All rights reserved. -- VMware Confidential-->\n<vsan-validation id=\"health-error\"\n                 *ngIf=\"error\"\n                 [allowClose]=\"false\"\n                 [alert]=\"error\">\n</vsan-validation>\n<div class=\"card\" id=\"health-overview\">\n   <h4 class=\"card-header\">{{\"vsan.home.health.overview.title\" | localized}}</h4>\n   <div class=\"card-block\">\n      <span class=\"spinner spinner-md central-spinner\" *ngIf=\"loading\"></span>\n      <ng-container *ngIf=\"!loading\">\n         <div>{{\"vsan.home.health.overview.description\" | localized}}</div>\n         <health-check-item *ngFor=\"let test of healthTestData\"\n                            [healthCheck]=\"test\"\n                            [clusterRef]=\"clusterRef\"\n                            [canNavigateToHealthView]=\"true\"\n                            [inlineHealthView]=\"true\"\n                            (onInlineHealthViewDisplay)=\"showHealthView($event)\">\n         </health-check-item>\n      </ng-container>\n   </div>\n</div>\n","<!--Copyright 2021-2022 VMware, Inc. All rights reserved. -- VMware Confidential-->\n<vsan-validation id=\"services-validation\"\n                 *ngIf=\"errorMessages.length > 0\"\n                 [allowClose]=\"false\"\n                 [(alerts)]=\"errorMessages\"\n                 (onClosed)=\"errorMessages = []\">\n</vsan-validation>\n<div class=\"card\" id=\"capacity-overview\">\n   <h4 class=\"card-header\">{{\"vsan.home.configurations.card.title\" | localized}}</h4>\n   <div class=\"card-block\">\n      <span class=\"spinner spinner-md central-spinner\" *ngIf=\"loading\"></span>\n      <clr-tabs class=\"tab-container\" *ngIf=\"!loading\">\n         <clr-tab>\n            <button id=\"data-services-configuration\"\n                    clrTabLink>\n               {{\"vsan.services.data.management.label\" | localized}}\n            </button>\n            <clr-tab-content *clrIfActive>\n               <data-services-configuration [clusterRef]=\"clusterRef\"\n                                            [clusterCapabilityData]=\"clusterCapabilityData\"\n                                            [vsanConfig]=\"vsanConfig\">\n               </data-services-configuration>\n            </clr-tab-content>\n         </clr-tab>\n         <clr-tab>\n            <button id=\"capacity-reservation-configuration\"\n                    (click)=\"queryCapacityMgmtSettings()\"\n                    clrTabLink>\n               {{\"vsan.services.enforcereservation.title\" | localized}}\n            </button>\n            <clr-tab-content *clrIfActive>\n               <span id=\"loading-capacity-reservation-settings\"\n                     *ngIf=\"!capacityManagementData\"\n                     class=\"spinner spinner-md central-spinner\">\n               </span>\n               <capacity-reservation-configuration\n                     *ngIf=\"capacityManagementData\"\n                     [capacityManagementData]=\"capacityManagementData\"\n                     [isCapacityCustomizableThresholdsSupportedOnVc]=\"vcCapabilityData?.isCapacityCustomizableThresholdsSupported\"\n                     [isSlackSpaceCapacitySupported]=\"clusterCapabilityData?.isSlackSpaceReservationSupported\">\n               </capacity-reservation-configuration>\n            </clr-tab-content>\n         </clr-tab>\n         <clr-tab>\n            <button id=\"fault-domain-configuration\"\n                    (click)=\"queryStretchedClusterSettings()\"\n                    clrTabLink>\n               {{\"vsan.cluster.configure.summary.faultDomains\" | localized}}\n            </button>\n            <ng-template [(clrIfActive)]=\"faultDomainTabActive\">\n               <clr-tab-content>\n                  <span id=\"loading-fault-domain-settings\"\n                        *ngIf=\"loadingFaultDomains\"\n                        class=\"spinner spinner-md central-spinner\">\n                  </span>\n                  <fault-domains-summary\n                        *ngIf=\"!loadingFaultDomains\"\n                        [availableDomains]=\"availableDomains\"\n                        [storageConsumption]=\"storageConsumption\"\n                        [witnessInfos]=\"witnessInfos\"\n                        [isSharedWitnessAllowed]=\"isSharedWitnessAllowed\"\n                        [isStretchedCluster]=\"isStretchedCluster\">\n                  </fault-domains-summary>\n               </clr-tab-content>\n            </ng-template>\n         </clr-tab>\n         <clr-tab>\n            <button id=\"perf-configuration\"\n                    clrTabLink>\n               {{\"vsan.perf.monitor.label\" | localized}}\n            </button>\n            <clr-tab-content *clrIfActive>\n               <perf-configuration [status]=\"perfSvcStatus\"\n                                   [vcCapabilityData]=\"vcCapabilityData\"\n                                   [vcPermissions]=\"vcPermissions\"\n                                   [config]=\"perfSvcConfig\">\n               </perf-configuration>\n            </clr-tab-content>\n         </clr-tab>\n         <clr-tab>\n            <button id=\"iscsi-configuration\"\n                    (click)=\"queryIscsiTargetConfig()\"\n                    clrTabLink>\n               {{\"vsan.iscsiTargets\" | localized}}\n            </button>\n            <clr-tab-content *clrIfActive>\n               <span id=\"loading-iscsi-settings\"\n                     *ngIf=\"!iscsiSvcConfig\"\n                     class=\"spinner spinner-md central-spinner\">\n               </span>\n               <iscsi-configuration *ngIf=\"iscsiSvcConfig\"\n                                    [config]=\"iscsiSvcConfig\"\n                                    [status]=\"iscsiSvcStatus\">\n               </iscsi-configuration>\n            </clr-tab-content>\n         </clr-tab>\n         <clr-tab>\n            <button id=\"file-service-configuration\"\n                    clrTabLink>\n               {{\"vsan.services.fileservices.title\" | localized}}\n            </button>\n            <clr-tab-content *clrIfActive>\n               <file-service-configuration [clusterRef]=\"clusterRef\"\n                                           [vcCapabilityData]=\"vcCapabilityData\"\n                                           [isPerfServiceEnabled]=\"perfSvcEnabled\"\n                                           [availableDomains]=\"availableDomains\"\n                                           [isStretchedCluster]=\"isStretchedCluster\"\n                                           [editClusterPermission]=\"hasEditClusterPermission\">\n               </file-service-configuration>\n            </clr-tab-content>\n         </clr-tab>\n         <clr-tab>\n            <button id=\"historical-health-configuration\"\n                    clrTabLink>\n               {{\"vsan.services.historicalhealth.title\" | localized}}\n            </button>\n            <clr-tab-content *clrIfActive>\n               <historical-health-configuration [config]=\"vsanConfig?.historicalHealthConfig\">\n               </historical-health-configuration>\n            </clr-tab-content>\n         </clr-tab>\n      </clr-tabs>\n   </div>\n   <div class=\"card-footer\">\n      <button class=\"btn btn-sm btn-link\" (click)=\"showDetail()\">\n         {{\"vsan.generalConfig.button.edit\" | localized}}\n      </button>\n   </div>\n</div>\n","<!--Copyright 2021 VMware, Inc. All rights reserved. -- VMware Confidential-->\n<vsan-validation id=\"resyncing-error\"\n                 *ngIf=\"error\"\n                 [allowClose]=\"false\"\n                 [alert]=\"error\">\n</vsan-validation>\n<div class=\"card\" id=\"resyncing-objects\">\n   <h4 class=\"card-header\">{{\"vsan.monitor.resyncingComponents\" | localized}}</h4>\n   <div class=\"card-block\">\n      <span class=\"spinner spinner-md central-spinner\" *ngIf=\"loading\"></span>\n      <ng-container *ngIf=\"!loading\">\n         <div class=\"clr-row\">\n            <label class=\"clr-col-5\">{{\"vsan.monitor.resyncSummary.resyncingComponents\" | localized}}</label>\n            <div class=\"clr-col-7\">{{resyncingComponents}}</div>\n         </div>\n         <div class=\"clr-row\">\n            <label class=\"clr-col-5\">{{\"vsan.monitor.resyncSummary.bytesToResync\" | localized}}</label>\n            <div class=\"clr-col-7\">{{bytesLeft}}</div>\n         </div>\n         <ng-container *ngIf=\"isResyncETAImprovementSupported\">\n            <div class=\"clr-row\">\n               <label class=\"clr-col-5\">{{\"vsan.monitor.resyncSummary.totalResyncingEta\" | localized}}</label>\n               <div class=\"clr-col-7\">\n            <span *ngIf=\"suspendedResync\">\n               {{\"vsan.monitor.resyncSummary.resyncSuspended\" | localized}}\n            </span>\n                  <span *ngIf=\"!suspendedResync\">\n               {{totalResyncingEta | timeSpan}}\n            </span>\n               </div>\n            </div>\n            <div class=\"clr-row\">\n               <label class=\"clr-col-5\">{{\"vsan.monitor.resyncSummary.scheduledResync.label\" | localized}}</label>\n               <div class=\"clr-col-7\">{{scheduledResyncing}}</div>\n            </div>\n         </ng-container>\n      </ng-container>\n   </div>\n   <div class=\"card-footer\">\n      <button class=\"btn btn-sm btn-link\" (click)=\"showDetail()\">\n         {{\"vsan.cluster.summary.portlet.details.label\" | localized}}\n      </button>\n   </div>\n</div>\n","/* Copyright 2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, OnInit, QueryList, ViewChildren} from \"@angular/core\";\nimport {CardName, CardView} from \"@component/drag-and-drop/card-view\";\nimport {CardContainer, DragCardPosition} from \"@component/drag-and-drop/drag-card-position\";\nimport {DraggableCardDirective} from \"@component/drag-and-drop/draggable-card.directive\";\nimport {GeneralConfigData} from \"@component/general-settings/general-config.data\";\nimport {VsanGeneralConfigService} from \"@component/general-settings/vsan-general-config.service\";\nimport {UpgradeData} from \"@component/upgrade/upgrade.data\";\nimport {UpgradeService} from \"@component/upgrade/upgrade.service\";\nimport {environment} from \"@env/environment\";\nimport {CeipService} from \"@generated/ceip-service\";\nimport {ClusterMode} from \"@generated/cluster-mode\";\nimport {Privileges} from \"@generated/privileges\";\nimport {VsanCapabilityData} from \"@generated/vsan-capability-data\";\nimport {VsanConfigSpec} from \"@generated/vsan-config-spec\";\nimport {ClusterComputeResource, VirtualMachine} from \"@service/client/dataservice/data-service-property\";\nimport {DataServiceUtil} from \"@service/client/dataservice/data-service-util\";\nimport {DataServiceClient} from \"@service/client/dataservice/data-service.service\";\nimport {ErrorHandler} from \"@service/flow/error-handler.decorator\";\nimport {Loader} from \"@service/flow/loader.decorator\";\nimport {LoadingIndicator} from \"@service/flow/loading-indicator.decorator\";\nimport {RefreshHandler} from \"@service/global-refresh.service\";\nimport {ManagedObject} from \"@service/managed-object\";\nimport {TaskMonitorService} from \"@service/task-monitor-service\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {QuickstartNotificationService} from \"../hci/status/quickstart-notification.service\";\nimport {DetailsViewContext} from \"./details-view-context\";\n\n@Component({\n   selector: \"vsan-cluster-overview\",\n   templateUrl: \"vsan-cluster-overview.html\",\n   styleUrls: [\"vsan-cluster-overview.scss\"],\n})\nexport class VsanClusterOverviewComponent implements OnInit {\n   // cards\n   readonly CAPACITY_CARD: string = \"capacityService\";\n   readonly HEALTH_CARD: string = \"healthSummaryService\";\n   readonly CONFIGURATION_CARD: string = \"configurationService\";\n   readonly RESYNCING_OBJECTS_CARD: string = \"resyncingObjectService\";\n\n   clusterRef: ManagedObject;\n   cardsView: CardView;\n\n   // Common config data\n   vsanConfig: VsanConfigSpec;\n   isComputeOnlyCluster: boolean;\n   upgradeData: UpgradeData;\n   selectedHealthTestId: string;\n\n   // Permissions\n   clusterPermissions: Map<string, boolean>;\n   vcPermissions: Map<string, boolean>;\n   editClusterPermission: boolean = false;\n   configureStoragePermission: boolean = false;\n\n   // Capabilities\n   vcCapabilityData: VsanCapabilityData;\n   clusterCapabilityData: VsanCapabilityData;\n\n   isVsanUpgradeVisible: boolean = false;\n   showCards: boolean = true;\n   detailViewContext: DetailsViewContext;\n\n   errorMessages: string[] = [];\n\n   // The cards are defined inside templates, so they can be dragged\n   @ViewChildren(DraggableCardDirective) serviceTemplates: QueryList<DraggableCardDirective>;\n\n   @LoadingIndicator()\n   isLoading: boolean;\n\n   constructor(private dataService: DataServiceClient,\n         private vsanGeneralConfigService: VsanGeneralConfigService,\n         private ceipSvc: CeipService,\n         private taskService: TaskMonitorService,\n         private quickstartStatusNotification: QuickstartNotificationService,\n         private upgradeService: UpgradeService) {\n      this.cardsView = new CardView(CardName.VSAN_HOME_CARD_VIEW, this.getViewCards);\n   }\n\n   async ngOnInit(): Promise<void> {\n      // TODO: [rogerw] Right now we can only have the vSAN tab at VM level. If we get approval to add this tab\n      // to cluster level, this.getVmCluster() method call should be removed.\n      this.clusterRef = await this.getVmCluster();\n      if (this.showCards) {\n         await this.refresh();\n      }\n   }\n\n   private async getVmCluster(): Promise<ManagedObject> {\n      if (environment.repa) {\n         const clusterId: string = await this.dataService.getProperty(VirtualMachine.cluster, ManagedObject.contextObject);\n         return DataServiceUtil.moIdToManagedObject(ClusterComputeResource.type, clusterId);\n      } else {\n         return await this.dataService.getProperty(VirtualMachine.cluster, ManagedObject.contextObject);\n      }\n   }\n\n   @RefreshHandler\n   @Loader()\n   async refresh(): Promise<void> {\n      this.reset();\n      await this.queryVsanGeneralConfig();\n      if (!this.vsanConfig) {\n         this.errorMessages = [VsanUiUtils.getString(\"vsan.services.configuration.not.available\")];\n         return;\n      }\n\n      if (!this.isComputeOnlyCluster) {\n         this.fetchDisksUpgradeData();\n      }\n   }\n\n   @ErrorHandler()\n   handleError(error: string): void {\n      this.errorMessages = [error];\n   }\n\n   fetchPrecheckUpgradeData(): void {\n      this.upgradeService.getUpgradeStatus(this.clusterRef)\n            .then(upgradeStatus => {\n               // Create a new instance to trigger the upgrade component's refresh\n               this.upgradeData = this.upgradeData.getNewInstance(upgradeStatus);\n            })\n            .catch(e => this.errorMessages.push(e));\n   }\n\n   vsanUpgradeComplete(): void {\n      this.isVsanUpgradeVisible = true;\n      this.fetchDisksUpgradeData();\n   }\n\n   fetchDisksUpgradeData(): void {\n      this.upgradeData = null;\n      this.upgradeService.getUpgradeData(this.clusterRef)\n            .then(data => this.upgradeData = data)\n            .catch(e => this.errorMessages.push(e));\n   }\n\n   async queryVsanGeneralConfig(): Promise<void> {\n      try {\n         const generalConfig: GeneralConfigData = await this.vsanGeneralConfigService.getVsanGeneralConfigData(\n               this.clusterRef);\n         this.vsanConfig = generalConfig.cloneVsanConfigSpec();\n         this.vcCapabilityData = generalConfig.vcCapabilityData;\n         this.clusterCapabilityData = generalConfig.clusterCapabilityData;\n         this.clusterPermissions = generalConfig.clusterPermissions;\n         this.vcPermissions = generalConfig.vcPermissions;\n         this.editClusterPermission = this.clusterPermissions.get(Privileges.EDIT_CLUSTER());\n         this.configureStoragePermission = this.clusterPermissions.get(Privileges.CONFIG_STORAGE());\n         this.isComputeOnlyCluster = this.vsanConfig && this.vsanConfig.clusterMode === ClusterMode.COMPUTE;\n      } catch (e) {\n         this.errorMessages.push(e);\n      }\n   }\n\n   showDetailsView(context: DetailsViewContext): void {\n      this.detailViewContext = context;\n      this.showCards = false;\n   }\n\n   private reset(): void {\n      this.errorMessages = [];\n      this.upgradeData = null;\n   }\n\n   private getViewCards = (): Map<string, DragCardPosition> => {\n      const result: Map<string, DragCardPosition> = new Map<string, DragCardPosition>();\n      result.set(this.CAPACITY_CARD, new DragCardPosition(CardContainer.LEFT, 0));\n      result.set(this.CONFIGURATION_CARD, new DragCardPosition(CardContainer.LEFT, 1));\n      result.set(this.HEALTH_CARD, new DragCardPosition(CardContainer.RIGHT, 0));\n      result.set(this.RESYNCING_OBJECTS_CARD, new DragCardPosition(CardContainer.RIGHT, 1));\n      return result;\n   };\n}\n","import {VsanHealthStatus} from '@generated/vsan-health-status';\n\nexport interface VsanHealthCheck {\n\n   perspective: string;\n   healthGroup: string;\n   healthTestId: string;\n   healthTest: string;\n   healthCheckLabel: string;\n   status: VsanHealthStatus;\n   isHardwareCheck: boolean;\n} //class VsanHealthCheck\n\nexport module VsanHealthCheck{\nexport class Factory {\n\n   static create = (perspective: string, healthGroup: string, healthTestId: string, healthTest: string, healthCheckLabel: string, status: VsanHealthStatus, isHardwareCheck: boolean): VsanHealthCheck => {\n      return { perspective: perspective, healthGroup: healthGroup, healthTestId: healthTestId, healthTest: healthTest, healthCheckLabel: healthCheckLabel, status: status, isHardwareCheck: isHardwareCheck, };\n   }\n\n\n} //class Factory\n\n} //module VsanHealthCheck\n","/* Copyright 2021-2022 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, EventEmitter, Input, Output} from \"@angular/core\";\nimport {VsanCapacityService} from \"@component/capacity/capacity.service\";\nimport {CapacityData} from \"@generated/capacity-data\";\nimport {DatastoreType} from \"@generated/datastore-type\";\nimport {VsanCapabilityData} from \"@generated/vsan-capability-data\";\nimport {VsanCapabilityProvider} from \"@generated/vsan-capability-provider\";\nimport {NavigationService} from \"@navigation/navigation.service\";\nimport {ErrorMessage} from \"@service/flow/error-message.decorator\";\nimport {Loader} from \"@service/flow/loader.decorator\";\nimport {LoadingIndicator} from \"@service/flow/loading-indicator.decorator\";\nimport {RefreshHandler} from \"@service/global-refresh.service\";\nimport {ManagedObject} from \"@service/managed-object\";\nimport {ScreenReaderAnnouncer} from \"@service/screen-reader-announcer.service\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {DetailsViewContext} from \"./details-view-context\";\nimport {VsanOverviewDetailsView} from \"./vsan-overview-details-view\";\n\n@Component({\n   selector: \"capacity-card\",\n   templateUrl: \"capacity-card.html\",\n   styleUrls: [\"capacity-card.scss\"],\n})\nexport class CapacityCardComponent {\n   @Input()\n   clusterRef: ManagedObject;\n\n   @Output()\n   onShowDetails: EventEmitter<DetailsViewContext> = new EventEmitter<DetailsViewContext>();\n\n   datastoresCapacityData: Map<DatastoreType, CapacityData>;\n\n   capacityData: CapacityData;\n   clusterCapabilityData: VsanCapabilityData;\n\n   @LoadingIndicator()\n   loading: boolean;\n\n   @ErrorMessage()\n   error: string;\n\n   @ScreenReaderAnnouncer()\n   srOnlyMessage: string;\n\n   constructor(private capacityService: VsanCapacityService,\n         private capabilitiesService: VsanCapabilityProvider,\n         private navigationService: NavigationService) {\n   }\n\n   async ngOnInit(): Promise<void> {\n      await this.refresh();\n      this.srOnlyMessage = VsanUiUtils.getString(\"vsan.screenReader.message.page.loaded\",\n            VsanUiUtils.getString(\"vsan.monitor.capacity.overview.title\"));\n   }\n\n   @RefreshHandler\n   @Loader()\n   async refresh(): Promise<void> {\n      [this.datastoresCapacityData, this.clusterCapabilityData] = await Promise.all([\n         this.capacityService.getCapacityDataPerDatastore(this.clusterRef, false),\n         this.capabilitiesService.getClusterCapabilityData(this.clusterRef),\n      ]);\n      this.capacityData = this.datastoresCapacityData.get(DatastoreType.VSAN);\n   }\n\n   showDetail(): void {\n      const context: DetailsViewContext = {\n         view: VsanOverviewDetailsView.CAPACITY,\n      };\n      this.onShowDetails.emit(context);\n   }\n}\n","<!--Copyright 2021 VMware, Inc. All rights reserved. -- VMware Confidential-->\n<vsan-validation id=\"services-validation\"\n                 *ngIf=\"error\"\n                 [allowClose]=\"false\"\n                 [alert]=\"error\">\n</vsan-validation>\n\n<div class=\"card\" id=\"capacity-overview\">\n   <h4 class=\"card-header\">{{\"vsan.monitor.capacity.overview.title\" | localized}}</h4>\n   <div class=\"card-block\">\n      <span class=\"spinner spinner-md central-spinner\" *ngIf=\"loading\"></span>\n      <vsan-capacity-overview-chart *ngIf=\"!loading\"\n                                    [capacityData]=\"capacityData\">\n      </vsan-capacity-overview-chart>\n   </div>\n   <div class=\"card-footer\">\n      <button class=\"btn btn-sm btn-link\" (click)=\"showDetail()\">\n         {{\"vsan.home.capacity.btn.details.label\" | localized}}\n      </button>\n   </div>\n</div>\n","/* Copyright 2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, EventEmitter, Input, OnInit, Output} from \"@angular/core\";\nimport {ManagedObject} from \"@service/managed-object\";\nimport {VsanHealthPropertyProvider} from \"@generated/vsan-health-property-provider\";\nimport {LoadingIndicator} from \"@service/flow/loading-indicator.decorator\";\nimport {Loader} from '@service/flow/loader.decorator';\nimport {RefreshHandler} from '@service/global-refresh.service';\nimport {VsanHealthData} from \"@generated/vsan-health-data\";\nimport {VsanHealthStatus} from \"@generated/vsan-health-status\";\nimport {ErrorHandler} from \"@service/flow/error-handler.decorator\";\nimport {VsanHealthCheck} from \"@generated/vsan-health-check\";\nimport {VsanTestData} from \"@generated/vsan-test-data\";\nimport {HealthContext} from \"@navigation/context/health-context\";\nimport {DetailsViewContext} from \"./details-view-context\";\nimport {ErrorMessage} from \"@service/flow/error-message.decorator\";\nimport {ScreenReaderAnnouncer} from \"@service/screen-reader-announcer.service\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {VsanOverviewDetailsView} from \"./vsan-overview-details-view\";\n\n@Component({\n   selector: \"health-card\",\n   templateUrl: \"health-card.html\",\n   styleUrls: [\"health-card.scss\"],\n})\nexport class HealthCardComponent implements OnInit {\n   @Input()\n   clusterRef: ManagedObject;\n\n   @Output()\n   onShowDetails: EventEmitter<DetailsViewContext> = new EventEmitter<DetailsViewContext>();\n\n   @LoadingIndicator()\n   loading: boolean;\n\n   @ErrorMessage()\n   error: string;\n\n   @ScreenReaderAnnouncer()\n   srOnlyMessage: string;\n\n   healthTestData: VsanHealthCheck[];\n\n   constructor(private healthProvider: VsanHealthPropertyProvider) {}\n\n   async ngOnInit(): Promise<void> {\n      await this.refresh();\n      this.srOnlyMessage = VsanUiUtils.getString(\"vsan.screenReader.message.page.loaded\",\n            VsanUiUtils.getString(\"vsan.monitor.capacity.overview.title\"));\n   }\n\n   @RefreshHandler\n   @Loader()\n   async refresh(): Promise<void> {\n      const healthData: VsanHealthData = await this.healthProvider.getVsanHealthSummaryFromCache(this.clusterRef);\n      this.healthTestData = [];\n      healthData.testsData\n            .filter(test => this.isUnhealthyItem(test))\n            .filter(test => !VsanUiUtils.isEmpty(test.subtests))\n            .forEach(test => {\n               const subtests: VsanHealthCheck[] = test.subtests\n                     .filter(subtest => this.isUnhealthyItem(subtest))\n                     .map(subtest => this.createVsahHealthCheck(test, subtest));\n               this.healthTestData.push(...subtests);\n            });\n   }\n\n   showHealthView(healthContext: HealthContext): void {\n      const context: DetailsViewContext = {\n         view: VsanOverviewDetailsView.HEALTH,\n         content: healthContext,\n      };\n\n      this.onShowDetails.emit(context);\n   }\n\n   private createVsahHealthCheck(test: VsanTestData, subtest: VsanTestData): VsanHealthCheck {\n      return VsanHealthCheck.Factory.create(\n            \"defaultView\",\n            test.testName,\n            subtest.testId,\n            subtest.testName,\n            subtest.testName,\n            subtest.status,\n            false);\n   }\n\n   private isUnhealthyItem(item: VsanTestData): boolean {\n      return item.status === VsanHealthStatus.red || item.status === VsanHealthStatus.yellow;\n   }\n\n   @ErrorHandler()\n   handleError(error: string): void {\n      this.error = error;\n   }\n}\n","<!--Copyright 2021 VMware, Inc. All rights reserved. -- VMware Confidential-->\n<div class=\"action-btn-container\">\n   <button class=\"btn btn-sm btn-link no-spacing\"\n           (click)=\"backToOverview()\">\n      {{\"vsan.home.overview.btn.back.label\" | localized}}\n   </button>\n</div>\n<router-outlet name=\"details\"></router-outlet>\n","<!--Copyright 2021-2022 VMware, Inc. All rights reserved. -- VMware Confidential-->\n<h5 vsan-auto-focus>\n   {{\"vsan.home.overview.title\" | localized}}\n</h5>\n\n<span *ngIf=\"isLoading\" id=\"loading-indicator\" class=\"spinner central-spinner\"></span>\n\n<vsan-validation id=\"services-validation\"\n                 *ngIf=\"errorMessages.length > 0\"\n                 [allowClose]=\"false\"\n                 [(alerts)]=\"errorMessages\"\n                 (onClosed)=\"errorMessages = []\">\n</vsan-validation>\n\n<ng-container *ngIf=\"!isLoading\">\n   <ng-container *ngIf=\"vsanConfig?.isEnabled || isComputeOnlyCluster\">\n      <!-- Common upgrade component, only visible when old disks or old format objects exist. -->\n      <vsan-upgrade *ngIf=\"upgradeData\"\n                    [upgradeData]=\"upgradeData\"\n                    [hasUpgradePermission]=\"editClusterPermission && configureStoragePermission\"\n                    [showCompatibilityWarning]=\"true\"\n                    [visibleWhenUpToDate]=\"isVsanUpgradeVisible\"\n                    (precheckComplete)=\"fetchPrecheckUpgradeData()\"\n                    (upgradeComplete)=\"vsanUpgradeComplete()\">\n      </vsan-upgrade>\n      <vsan-drag-and-drop *ngIf=\"showCards\"\n                          [view]=\"cardsView\"\n                          [cardTemplates]=\"serviceTemplates\">\n      </vsan-drag-and-drop>\n      <detail-view-wrapper *ngIf=\"!showCards\"\n                           [clusterRef]=\"clusterRef\"\n                           [context]=\"detailViewContext\">\n      </detail-view-wrapper>\n   </ng-container>\n</ng-container>\n<ng-template vsan-drag-service=\"{{CAPACITY_CARD}}\"\n             [visible]=\"!isComputeOnlyCluster\">\n   <capacity-card [clusterRef]=\"clusterRef\"\n                  (onShowDetails)=\"showDetailsView($event)\">\n   </capacity-card>\n</ng-template>\n<ng-template vsan-drag-service=\"{{CONFIGURATION_CARD}}\"\n             [visible]=\"!isComputeOnlyCluster\">\n   <configurations-card [clusterRef]=\"clusterRef\"\n                        [vcCapabilityData]=\"vcCapabilityData\"\n                        [clusterCapabilityData]=\"clusterCapabilityData\"\n                        [vcPermissions]=\"vcPermissions\"\n                        [clusterPermissions]=\"clusterPermissions\"\n                        (onShowDetails)=\"showDetailsView($event)\">\n   </configurations-card>\n</ng-template>\n<ng-template vsan-drag-service=\"{{RESYNCING_OBJECTS_CARD}}\"\n             [visible]=\"!isComputeOnlyCluster\">\n   <resyncing-data-card [clusterRef]=\"clusterRef\"\n                        [isResyncETAImprovementSupported]=\"clusterCapabilityData?.isResyncETAImprovementSupported\"\n                        (onShowDetails)=\"showDetailsView($event)\">\n   </resyncing-data-card>\n</ng-template>\n<ng-template vsan-drag-service=\"{{HEALTH_CARD}}\"\n             [visible]=\"!isComputeOnlyCluster\">\n   <health-card [clusterRef]=\"clusterRef\"\n                (onShowDetails)=\"showDetailsView($event)\"></health-card>\n</ng-template>\n","/* Copyright 2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, EventEmitter, Input, OnInit, Output} from \"@angular/core\";\nimport {ManagedObject} from \"@service/managed-object\";\nimport {VsanResyncingComponentsProvider} from \"@generated/vsan-resyncing-components-provider\";\nimport {RefreshHandler} from \"@service/global-refresh.service\";\nimport {Loader} from \"@service/flow/loader.decorator\";\nimport {ResyncMonitorData} from \"@generated/resync-monitor-data\";\nimport {LoadingIndicator} from \"@service/flow/loading-indicator.decorator\";\nimport {ErrorMessage} from \"@service/flow/error-message.decorator\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {ResyncObjectsUtil} from \"../resync/resync-objects-util\";\nimport {DetailsViewContext} from \"./details-view-context\";\nimport {VsanOverviewDetailsView} from \"./vsan-overview-details-view\";\n\n@Component({\n   selector: \"resyncing-data-card\",\n   templateUrl: \"resyncing-data-card.html\",\n   styleUrls: [\"resyncing-data-card.scss\"],\n})\nexport class ResyncingDataCardComponent implements OnInit {\n   @Input()\n   clusterRef: ManagedObject;\n\n   @Input()\n   isResyncETAImprovementSupported: boolean;\n\n   @Output()\n   onShowDetails: EventEmitter<DetailsViewContext> = new EventEmitter<DetailsViewContext>();\n\n   @LoadingIndicator()\n   loading: boolean;\n\n   @ErrorMessage()\n   error: string;\n\n   resyncData: ResyncMonitorData;\n   resyncingComponents: string;\n   bytesLeft: string;\n   totalResyncingEta: number;\n   scheduledResyncing: string;\n   suspendedResync: boolean;\n\n   constructor(private vsanResyncProvider: VsanResyncingComponentsProvider) {}\n\n   async ngOnInit(): Promise<void> {\n      this.refresh();\n   }\n\n   showDetail(): void {\n      const context: DetailsViewContext = {\n         view: VsanOverviewDetailsView.RESYNCINGOBJECTS,\n         content: this.clusterRef,\n      };\n      this.onShowDetails.emit(context);\n   }\n\n   @RefreshHandler\n   private async refresh(): Promise<void> {\n      await this.fetch();\n      this.resyncingComponents = VsanUiUtils.isUnset(this.resyncData.componentsToSync)\n            ? VsanUiUtils.getString(\"vsan.na.label\")\n            : this.resyncData.componentsToSync.toString();\n      this.bytesLeft = VsanUiUtils.isUnset(this.resyncData.bytesToResync)\n            ? VsanUiUtils.getString(\"vsan.na.label\")\n            : VsanUiUtils.formatFileSize(this.resyncData.bytesToResync);\n      // show suspended resync status label if there are only suspended bytes to resync and the returned ETA is 0\n      this.suspendedResync = !!this.resyncData.suspendedBytesToResync\n            && !this.resyncData.suspendedETA\n            && !this.resyncData.activeBytesToResync\n            && !this.resyncData.queuedBytesToResync;\n      this.totalResyncingEta = this.calculateTotalResyncingEta();\n      this.scheduledResyncing = ResyncObjectsUtil.getScheduledResync(this.resyncData,\n            this.isResyncETAImprovementSupported);\n   }\n\n   private calculateTotalResyncingEta(): number {\n      const hasTotalResyncObjects: boolean = !!this.resyncData?.bytesToResync\n            && (!!this.resyncData?.activeBytesToResync || !!this.resyncData?.queuedBytesToResync);\n      return hasTotalResyncObjects ? 0 : this.resyncData.etaToResync;\n   }\n\n   @Loader()\n   private async fetch(): Promise<void> {\n      if (this.isResyncETAImprovementSupported) {\n         this.resyncData = await this.vsanResyncProvider.getResyncingDataForAutoRefresh(this.clusterRef);\n      } else {\n         this.resyncData = await this.vsanResyncProvider.getResyncingData(this.clusterRef, 100);\n      }\n   }\n}\n","<!--Copyright 2021 VMware, Inc. All rights reserved. -- VMware Confidential-->\n<vsan-fault-domains-config\n      [displayConfigureButtons]=\"false\"\n      [witnessInfos]=\"witnessInfos\"\n      [faultToleranceInfo]=\"faultToleranceInfo\"\n      [isSharedWitnessAllowed]=\"isSharedWitnessAllowed\"\n      [isStretchedCluster]=\"isStretchedCluster\">\n</vsan-fault-domains-config>\n<div class=\"fault-domains\">\n   <fault-domain-card\n         *ngFor=\"let model of faultDomainModels\"\n         [model]=\"model\"\n         [isVsanMaxEnabled]=\"isVsanMaxEnabled\"\n         [storageConsumption]=\"storageConsumption\"\n         [hostReservedCapacitySupported]=\"clusterCapabilityData?.isHostReservedCapacitySupported\">\n   </fault-domain-card>\n</div>\n<h5 *ngIf=\"!isStretchedCluster || standaloneModels.length > 0\">\n   {{\"vsan.faultDomains.card.category.standalone\" | localized: standaloneModels?.length}}\n</h5>\n<div class=\"fault-domains\"\n     *ngIf=\"!isStretchedCluster || standaloneModels.length > 0\">\n   <standalone-host-card\n         *ngFor=\"let host of standaloneModels\"\n         [host]=\"host\"\n         [isVsanMaxEnabled]=\"isVsanMaxEnabled\"\n         [consumption]=\"getDomainConsumption(host)\"\n         [hostReservedCapacitySupported]=\"clusterCapabilityData?.isHostReservedCapacitySupported\">\n   </standalone-host-card>\n</div>\n","<!--Copyright 2021 VMware, Inc. All rights reserved. -- VMware Confidential-->\n<div class=\"clr-row\">\n   <label class=\"clr-col-5\">{{\"vsan.services.historicalhealth.title\" | localized}}</label>\n   <div class=\"clr-col-7\">{{getStatusLabel()}}</div>\n</div>\n","/* Copyright 2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, EventEmitter, Input, OnInit, Output} from \"@angular/core\";\nimport {ManagedObject} from \"@service/managed-object\";\nimport {DetailsViewContext} from \"./details-view-context\";\nimport {LoadingIndicator} from \"@service/flow/loading-indicator.decorator\";\nimport {ErrorMessage} from \"@service/flow/error-message.decorator\";\nimport {ScreenReaderAnnouncer} from \"@service/screen-reader-announcer.service\";\nimport {VsanConfigService} from \"@generated/vsan-config-service\";\nimport {VsanServiceData} from \"@generated/vsan-service-data\";\nimport {PerfStatsObjectInfo} from \"@generated/perf-stats-object-info\";\nimport {VsanServiceStatus} from \"@generated/vsan-service-status\";\nimport {RefreshHandler} from \"@service/global-refresh.service\";\nimport {VsanCapabilityData} from \"@generated/vsan-capability-data\";\nimport {Loader} from \"@service/flow/loader.decorator\";\nimport {VsanOverviewDetailsView} from \"./vsan-overview-details-view\";\nimport {VsanIscsiTargetConfig} from \"@generated/vsan-iscsi-target-config\";\nimport {Privileges} from \"@generated/privileges\";\nimport {VsanStretchedClusterService} from \"@generated/vsan-stretched-cluster-service\";\nimport {DomainOrHostData} from \"@generated/domain-or-host-data\";\nimport {GeneralConfigData} from \"@component/general-settings/general-config.data\";\nimport {VsanGeneralConfigService} from \"@component/general-settings/vsan-general-config.service\";\nimport {VsanConfigSpec} from \"@generated/vsan-config-spec\";\nimport {CapacityManagementService} from \"@generated/capacity-management-service\";\nimport {CapacityManagementData} from \"@generated/capacity-management-data\";\nimport {WitnessHostData} from \"@generated/witness-host-data\";\nimport {VsanCapabilityProvider} from \"@generated/vsan-capability-provider\";\nimport {CapacityDataService} from \"@generated/capacity-data-service\";\nimport {HostStorageConsumptionData} from \"@generated/host-storage-consumption-data\";\nimport {ErrorHandler} from \"@service/flow/error-handler.decorator\";\n\n@Component({\n   selector: \"configurations-card\",\n   templateUrl: \"configurations-card.html\",\n   styleUrls: [\"configurations-card.scss\"],\n})\nexport class ConfigurationsCardComponent implements OnInit {\n   @Input()\n   clusterRef: ManagedObject;\n\n   @Input()\n   vcCapabilityData: VsanCapabilityData;\n\n   @Input()\n   clusterCapabilityData: VsanCapabilityData;\n\n   @Input()\n   vcPermissions: Map<string, boolean>;\n\n   @Input()\n   clusterPermissions: Map<string, boolean>;\n\n   @Output()\n   onShowDetails: EventEmitter<DetailsViewContext> = new EventEmitter<DetailsViewContext>();\n\n   @LoadingIndicator()\n   loading: boolean;\n\n   @ErrorMessage()\n   error: string;\n\n   @ScreenReaderAnnouncer()\n   srOnlyMessage: string;\n\n   @LoadingIndicator({name: \"fault-domains\"})\n   loadingFaultDomains: boolean;\n\n   vsanConfig: VsanConfigSpec;\n\n   availableDomains: DomainOrHostData[];\n   isStretchedCluster: boolean;\n   witnessInfos: WitnessHostData[] = null; // will be null if stretched cluster/metadata only node is disabled\n   isSharedWitnessAllowed: boolean;\n   storageConsumption: any;\n   faultDomainTabActive: boolean;\n\n   hasEditClusterPermission: boolean;\n\n   perfSvcStatus: VsanServiceStatus;\n   perfSvcConfig: PerfStatsObjectInfo;\n   perfSvcEnabled: boolean;\n\n   iscsiSvcStatus: VsanServiceStatus;\n   iscsiSvcConfig: VsanIscsiTargetConfig;\n\n   capacityManagementData: CapacityManagementData;\n\n   errorMessages: string[] = [];\n\n   constructor(private configService: VsanConfigService,\n         private vsanGeneralConfigService: VsanGeneralConfigService,\n         private capacityManagementService: CapacityManagementService,\n         private capabilityProvider: VsanCapabilityProvider,\n         private capacityDataService: CapacityDataService,\n         private stretchedClusterService: VsanStretchedClusterService) {}\n\n   ngOnInit(): void {\n      this.srOnlyMessage = \"\";\n      this.hasEditClusterPermission = this.clusterPermissions.get(Privileges.EDIT_CLUSTER());\n      this.fetch();\n   }\n\n   @RefreshHandler\n   @Loader()\n   async fetch(): Promise<void> {\n      this.reset();\n      await Promise.all([\n            this.queryVsanGeneralConfig(),\n            this.queryPerfServiceConfig(),\n            this.fetchStretchedClusterData(),\n            this.fetchIsStretchedCluster(),\n      ]);\n   }\n\n   private async queryVsanGeneralConfig(): Promise<void> {\n      const generalConfig: GeneralConfigData = await this.vsanGeneralConfigService.getVsanGeneralConfigData(\n            this.clusterRef);\n      this.vsanConfig = generalConfig.cloneVsanConfigSpec();\n   }\n\n   private async queryPerfServiceConfig(): Promise<void> {\n      const result: VsanServiceData = await this.configService.getPerformanceStatus(this.clusterRef);\n      this.perfSvcStatus = result.status;\n      this.perfSvcConfig = result.details as PerfStatsObjectInfo;\n      this.perfSvcEnabled = result.status === VsanServiceStatus.ENABLED;\n   }\n\n   private async fetchStretchedClusterData(): Promise<any> {\n      this.availableDomains = await this.stretchedClusterService.getAvailableDomains(this.clusterRef);\n   }\n\n   private async fetchIsStretchedCluster(): Promise<any> {\n      this.isStretchedCluster = await this.stretchedClusterService.getIsVsanStretchedCluster(this.clusterRef);\n   }\n\n   async queryIscsiTargetConfig(): Promise<void> {\n      if (this.iscsiSvcConfig) {\n         return;\n      }\n      const result: VsanServiceData = await this.configService.getIscsiTargetStatus(this.clusterRef);\n      this.iscsiSvcConfig = result.details as VsanIscsiTargetConfig;\n      this.iscsiSvcStatus = result.status;\n   }\n\n   async queryCapacityMgmtSettings(): Promise<void> {\n      this.capacityManagementData = await this.capacityManagementService.getCapacityManagementData(this.clusterRef);\n   }\n\n   @Loader({name: \"fault-domains\"})\n   async queryStretchedClusterSettings(): Promise<void> {\n      const hostsStorageData: HostStorageConsumptionData[] =\n            await this.capacityDataService.getStorageConsumptionByHost(this.clusterRef);\n      this.storageConsumption = this.processHostsCapacity(hostsStorageData);\n      this.witnessInfos = await this.stretchedClusterService.getWitnessHostData(this.clusterRef);\n      if (this.vcCapabilityData.isSharedWitnessSupported) {\n         this.isSharedWitnessAllowed = await this.checkIfSharedWitnessIsAllowed();\n      }\n   }\n\n   @ErrorHandler()\n   private handleError(error: string): void {\n      this.errorMessages.push(error);\n   }\n\n   private async checkIfSharedWitnessIsAllowed(): Promise<boolean> {\n      if (!this.isStretchedCluster) {\n         return false;\n      }\n      const allHostsCount: number =\n            this.availableDomains.reduce((sum, item) => sum += item.isHost ? 1 : item.children.length, 0);\n      if (allHostsCount === 2) {\n         const hostRef: ManagedObject = this.witnessInfos[0].witnessHost;\n         return await this.capabilityProvider.getIsSharedWitnessSupported(hostRef);\n      }\n      return false;\n   }\n\n   private processHostsCapacity(hostsStorageData: HostStorageConsumptionData[]): any {\n      const storageConsumption: any = {};\n      hostsStorageData.forEach(item => {\n         if (item.hostRef) {\n            storageConsumption[ManagedObject.uid(item.hostRef)] = item;\n         }\n      });\n      return storageConsumption;\n   }\n\n   private reset(): void {\n      this.errorMessages = [];\n      this.perfSvcStatus = null;\n      this.perfSvcConfig = null;\n      this.iscsiSvcStatus = null;\n      this.iscsiSvcConfig = null;\n      this.availableDomains = [];\n      this.capacityManagementData = null;\n      this.isStretchedCluster = false;\n   }\n\n   showDetail(): void {\n      const context: DetailsViewContext = {\n         view: this.faultDomainTabActive ? VsanOverviewDetailsView.FAULTDOMAINS : VsanOverviewDetailsView.SERVICES,\n         content: this.clusterRef,\n      };\n      this.onShowDetails.emit(context);\n   }\n}\n","/* Copyright 2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, Input, OnInit} from \"@angular/core\";\nimport {Router} from \"@angular/router\";\nimport {ManagedObject} from \"@service/managed-object\";\nimport {DetailsViewContext} from \"./details-view-context\";\nimport {VsanOverviewDetailsView} from \"./vsan-overview-details-view\";\nimport {HealthContext} from \"@navigation/context/health-context\";\nimport {PersistentStorageService} from \"@service/browser-storage.service\";\nimport {VsanRoutes} from \"../../vsan-routes\";\nimport {InlineViewContextKey} from \"@model/inline-view-context-key.data\";\n\n@Component({\n   selector: \"detail-view-wrapper\",\n   templateUrl: \"detail-view-wrapper.html\",\n   styleUrls: [\"detail-view-wrapper.scss\"],\n})\nexport class DetailViewWrapperComponent implements OnInit {\n   private readonly OVERVIEW_DETAILS_PATH: string = \"details\";\n   @Input()\n   clusterRef: ManagedObject;\n\n   @Input()\n   context: DetailsViewContext;\n\n   constructor(private router: Router, private storageService: PersistentStorageService) {}\n\n   ngOnInit(): void {\n      this.expandDetailsView();\n   }\n\n   backToOverview(): void {\n      this.router.navigate([\"/\" + VsanRoutes.CLUSTER_OVERVIEW_VIEW]);\n   }\n\n   private expandDetailsView(): void {\n      switch (this.context?.view) {\n         case VsanOverviewDetailsView.HEALTH:\n            this.setHealthContext();\n            this.navigateToDetails(VsanRoutes.HEALTH_VIEW);\n            break;\n         case VsanOverviewDetailsView.CAPACITY:\n            this.navigateToDetails(VsanRoutes.CAPACITY_VIEW);\n            break;\n         case VsanOverviewDetailsView.SERVICES:\n            this.setGeneralContext(InlineViewContextKey.SERVICES_CONTEXT_KEY);\n            this.navigateToDetails(VsanRoutes.SERVICES_VIEW);\n            break;\n         case VsanOverviewDetailsView.FAULTDOMAINS:\n            this.setGeneralContext(InlineViewContextKey.FAULT_DOMAINS_CONTEXT_KEY);\n            this.navigateToDetails(VsanRoutes.FAULT_DOMAINS_VIEW);\n            break;\n         case VsanOverviewDetailsView.RESYNCINGOBJECTS:\n            this.setGeneralContext(InlineViewContextKey.RESYNCING_OBJECTS_CONTEXT_KEY);\n            this.navigateToDetails(VsanRoutes.RESYNCING_COMPONENTS_VIEW);\n            break;\n      }\n   }\n\n   private setHealthContext(): void {\n      this.storageService.set(InlineViewContextKey.HEALTH_CHECK_CONTEXT_KEY, this.healthContext);\n   }\n\n   private navigateToDetails(details: string): void {\n      this.router.navigate([\n            \"/\" + VsanRoutes.CLUSTER_OVERVIEW_VIEW + \"/\" + this.OVERVIEW_DETAILS_PATH,\n            {outlets: {\"details\": [details]}},\n         ]);\n   }\n\n   private get healthContext(): HealthContext {\n      const healthContext: HealthContext = this.context.content as HealthContext;\n      healthContext.clusterRef = this.clusterRef;\n      return healthContext;\n   }\n\n   private setGeneralContext(key: string): void {\n      this.storageService.set(key, this.clusterRef);\n   }\n}\n","/* Copyright 2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {NgModule} from \"@angular/core\";\nimport {RouterModule, Routes} from \"@angular/router\";\nimport {VsanClusterOverviewComponent} from \"./vsan-cluster-overview.component\";\nimport {VsanCommonModule} from \"../common/vsan-common.module\";\nimport {VsanChartModule} from \"@component/chart/chart.module\";\nimport {DragAndDropModule} from \"@component/drag-and-drop/drag-and-drop.module\";\nimport {CardModule} from \"@component/card/card.module\";\nimport {ClarityModule} from \"@clr/angular\";\nimport {UpgradeModule} from \"@component/upgrade/upgrade.module\";\nimport {CommonModule} from \"@angular/common\";\nimport {VsanGeneralConfigService} from \"@component/general-settings/vsan-general-config.service\";\nimport {CapacityCommonModule} from \"@component/capacity/capacity-common.module\";\nimport {VsanCapacityService} from \"@component/capacity/capacity.service\";\nimport {FormsModule} from \"@angular/forms\";\nimport {CapacityCardComponent} from \"./capacity-card.component\";\nimport {HealthCardComponent} from \"./health-card.component\";\nimport {HealthCheckItemModule} from \"@component/health/health-check-item.module\";\nimport {DetailViewWrapperComponent} from \"./detail-view-wrapper.component\";\nimport {PersistentStorageService} from \"@service/browser-storage.service\";\nimport {ConfigurationsCardComponent} from \"./configurations-card.component\";\nimport {VsanConfigService} from \"@generated/vsan-config-service\";\nimport {ConfigurationsModule} from \"@component/configurations/configurations.module\";\nimport {HistoricalHealthComponent} from \"./historical-health.component\";\nimport {CapacityManagementService} from \"@generated/capacity-management-service\";\nimport {VsanCapabilityProvider} from \"@generated/vsan-capability-provider\";\nimport {CapacityDataService} from \"@generated/capacity-data-service\";\nimport {VsanStretchedClusterService} from \"@generated/vsan-stretched-cluster-service\";\nimport {FaultDomainsSummaryComponent} from \"./fault-domains-summary.component\";\nimport {ResyncingDataCardComponent} from \"./resyncing-data-card.component\";\nimport {VsanResyncingComponentsProvider} from \"@generated/vsan-resyncing-components-provider\";\n\nconst routes: Routes = [\n   {\n      path: \"\",\n      component: VsanClusterOverviewComponent,\n   },\n   {\n      path: \"details\",\n      component: DetailViewWrapperComponent,\n      children: [\n         {\n            path: \"capacity\",\n            loadChildren: () => import(\"../capacity/capacity.module\")\n                  .then(mod => mod.CapacityModule),\n            outlet: \"details\",\n         },\n         {\n            path: \"health\",\n            loadChildren: () => import(\"../health/health.module\")\n                  .then(mod => mod.HealthModule),\n            outlet: \"details\",\n         },\n         {\n            path: \"services\",\n            loadChildren: () => import(\"../services/services.module\")\n                  .then(mod => mod.ServicesModule),\n            outlet: \"details\",\n         },\n         {\n            path: \"faultDomains\",\n            loadChildren: () => import(\"../faultdomains/fault-domains.module\")\n                  .then(mod => mod.FaultDomainsModule),\n            outlet: \"details\",\n         },\n         {\n            path: \"resyncingComponents\",\n            loadChildren: () => import(\"../resync/resync-monitor.module\")\n                  .then(mod => mod.ResyncMonitorModule),\n            outlet: \"details\",\n         },\n      ],\n   },\n];\n\n@NgModule({\n   imports: [\n      CommonModule,\n      FormsModule,\n      VsanCommonModule,\n      VsanChartModule,\n      CapacityCommonModule,\n      ClarityModule,\n      DragAndDropModule,\n      CardModule,\n      UpgradeModule,\n      HealthCheckItemModule,\n      RouterModule.forChild(routes),\n      ConfigurationsModule,\n   ],\n   declarations: [\n      VsanClusterOverviewComponent,\n      CapacityCardComponent,\n      HealthCardComponent,\n      DetailViewWrapperComponent,\n      ConfigurationsCardComponent,\n      HistoricalHealthComponent,\n      FaultDomainsSummaryComponent,\n      ResyncingDataCardComponent,\n   ],\n   providers: [\n      VsanConfigService,\n      VsanGeneralConfigService,\n      VsanCapacityService,\n      PersistentStorageService,\n      CapacityManagementService,\n      VsanCapabilityProvider,\n      CapacityDataService,\n      VsanStretchedClusterService,\n      VsanResyncingComponentsProvider,\n   ],\n})\nexport class VsanClusterOverviewModule {}\n","/* Copyright 2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nexport enum VsanOverviewDetailsView {\n   CAPACITY,\n   HEALTH,\n   SERVICES,\n   FAULTDOMAINS,\n   RESYNCINGOBJECTS,\n}\n","/* Copyright 2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {ChangeDetectionStrategy, Component, Input} from \"@angular/core\";\nimport {HistoricalHealthConfig} from \"@generated/historical-health-config\";\nimport {ServiceUtils} from \"../services/service.utils\";\n\n@Component({\n   selector: \"historical-health-configuration\",\n   templateUrl: \"historical-health.html\",\n   styleUrls: [\"historical-health.scss\"],\n   changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class HistoricalHealthComponent {\n   @Input()\n   config: HistoricalHealthConfig;\n\n   getStatusLabel(): string {\n      return ServiceUtils.enabledStateLabel(this.config.isEnabled);\n   }\n}\n"]}