{"version":3,"sources":["./src/app/vsan/common/component/diskmgmt/select-disks.component.ts","./src/app/vsan/common/component/diskmgmt/perspective/disks-group-by-perspective.ts","./src/app/vsan/common/pipe/disk-type.pipe.ts","./src/app/vsan/common/component/action-button/button-title.directive.ts","./src/app/vsan/common/directive/clr-button-group/clr-button-group-common.directive.ts","./src/app/vsan/common/component/diskmgmt/model/drive-type.data.ts","./src/app/vsan/common/component/diskmgmt/claim-disks-util.ts","./src/app/vsan/common/component/diskmgmt/create-disk-group.html","./src/app/vsan/common/component/action-button/button-group.directive.ts","./src/app/vsan/disk-management/views/pipes/transport-type.pipe.ts","./src/app/vsan/common/component/diskmgmt/model/vsan-base-list-item.data.ts","./src/app/vsan/common/component/diskmgmt/model/vsan-disk-list-item.ts","./src/app/vsan/common/component/diskmgmt/create-disk-group.component.ts","./src/app/vsan/common/component/diskmgmt/select-disks.html"],"names":[],"mappings":"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","file":"30-es2015.js","sourcesContent":["/* Copyright 2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, EventEmitter, Input, OnInit, Output} from \"@angular/core\";\nimport {DiskManagementService} from \"@generated/disk-management-service\";\nimport {DiskData} from \"@generated/disk-data\";\nimport {Icon} from \"@util/icon\";\nimport {ManagedObject} from \"@service/managed-object\";\nimport {DiskMgmtDiskUtil} from \"@util/disk-mgmt-disk.util\";\nimport {DiskType} from \"@generated/disk-type\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {LoadingIndicator} from \"@service/flow/loading-indicator.decorator\";\nimport {Loader} from \"@service/flow/loader.decorator\";\nimport {ErrorMessage} from \"@service/flow/error-message.decorator\";\n\n@Component({\n   templateUrl: \"select-disks.html\",\n   styleUrls: [\"select-disks.scss\"],\n   selector: \"vsan-select-disks\",\n})\nexport class SelectDisksComponent implements OnInit {\n\n   Icon: typeof Icon = Icon;\n\n   @Input()\n   clusterRef: ManagedObject;\n\n   @Input()\n   hostRef: ManagedObject;\n\n   @Input()\n   isVsanMaxEnabled: boolean;\n\n   @Input()\n   isAllFlashDiskGroup: boolean;\n\n   @Output()\n   selectedDisksChange: EventEmitter<DiskData[]> = new EventEmitter<DiskData[]>();\n\n   @Output()\n   disksLoaded: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n   @LoadingIndicator()\n   busy: boolean;\n\n   @ErrorMessage()\n   errorMessage: string;\n\n   eligibleDisks: DiskData[];\n   selectedDisks: DiskData[] = [];\n   hasVsanMaxWarning: boolean;\n\n   constructor(private diskMgmtService: DiskManagementService) {\n   }\n\n   @Loader()\n   async ngOnInit(): Promise<void> {\n      this.eligibleDisks = await this.diskMgmtService.listEligibleDisks(\n            this.clusterRef,\n            this.hostRef,\n            this.isAllFlashDiskGroup,\n            this.isVsanMaxEnabled);\n      this.disksLoaded.emit(true);\n   }\n\n   diskSelectionChange(): void {\n      this.selectedDisksChange.emit(this.selectedDisks);\n      this.hasVsanMaxWarning = this.isVsanMaxEnabled && this.selectedDisks.some(disk => !disk.isVsanMaxCompatible);\n   }\n\n   getIcon(disk: DiskData): string {\n      return DiskMgmtDiskUtil.getIcon(disk);\n   }\n\n   getDriveType(disk: DiskData): DiskType {\n      return DiskMgmtDiskUtil.getScsiDiskType(disk.isFlash);\n   }\n\n   getIsVsanMaxCompatibleLabel(disk: DiskData): string {\n      return disk.isVsanMaxCompatible\n            ? VsanUiUtils.getString(\"vsan.disk.list.vsanMax.compatible\")\n            : VsanUiUtils.getString(\"vsan.disk.list.vsanMax.incompatible\");\n   }\n\n   getIsVsanMaxCompatibleIconShape(disk: DiskData): string {\n      return disk.isVsanMaxCompatible ? Icon.CLR_SUCCESS_STANDARD_ICON_SHAPE : Icon.CLR_WARN_STANDARD_ICON_SHAPE;\n   }\n}","/* Copyright 2020-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nexport enum DisksGroupByPerspective {\n   DISKS_BY_VENDOR,\n   DISKS_BY_HOST,\n}","/* Copyright 2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Pipe, PipeTransform} from \"@angular/core\";\nimport {DiskType} from \"@generated/disk-type\";\nimport {DiskMgmtDiskUtil} from \"@util/disk-mgmt-disk.util\";\n\n/*\n * Returns the localization label for the disk type.\n */\n@Pipe({name: \"diskTypeLabel\"})\nexport class DiskTypePipe implements PipeTransform {\n   transform(type: DiskType): string {\n      return DiskMgmtDiskUtil.getDiskType(type);\n   }\n}","/* Copyright 2019 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Directive, Input, OnInit} from '@angular/core';\nimport {BehaviorSubject, Observable} from \"rxjs\";\nimport {ClrButton} from \"@clr/angular\";\n\n/**\n * Attribute directive for detecting button title change and storing title.\n * Only used for clr-button in clr-button-group.\n * @title - The title of clr-button\n */\n@Directive({\n   selector: \"clr-button[vsan-button-title]\"\n})\nexport class ButtonTitleDirective implements OnInit {\n\n   constructor(public host: ClrButton) {}\n\n   private _title: string;\n\n   @Input(\"vsan-button-title\")\n   set title(value: string) {\n      if (this._title !== value) {\n         this.titleChange.next(value);\n      }\n      this._title = value;\n   }\n\n   get title(): string {\n      return this._title;\n   }\n\n   private titleChange: BehaviorSubject<string> = new BehaviorSubject<string>(\"\");\n\n   get titleChangeEvent(): Observable<string> {\n      return this.titleChange.asObservable();\n   }\n\n   ngOnInit(): void {\n      // name should be set, if not provided in template - generate one. ClrButtom#name is used to generate the name\n      // attribute of the markup button. Later the name is used to match the generated markup with the directive.\n      if (!this.host.name) {\n         this.host.name = Math.random().toString();\n      }\n   }\n\n   ngOnDestroy() {\n      this.titleChange.unsubscribe();\n   }\n}","/* Copyright 2020 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {AfterContentInit, ContentChildren, Directive, ElementRef} from \"@angular/core\";\nimport {ClrButton} from \"@clr/angular\";\nimport {ClrButtonBaseDirective, DirectiveHolder} from \"@directive/clr-button-group/clr-button-base.directive\";\n\n/**\n * Applies on every clr-button-group and help to link the clr-button with directive applieds on it,  which extends\n * {@link ClrButtonBaseDirective}, to the actual rendered html button.\n */\n@Directive({\n   selector: \"clr-button-group\",\n})\nexport class ClrButtonGroupCommonDirective implements AfterContentInit {\n\n   @ContentChildren(ClrButton, {descendants: true})\n   clrButtons: ClrButton[];\n\n   constructor(private elRef: ElementRef) {}\n\n   ngAfterContentInit(): void {\n      setTimeout(() => {\n         const allButtons: NodeListOf<HTMLButtonElement> = this.elRef.nativeElement.querySelectorAll(\"button\");\n         // match button with clrButton and notify directives\n         this.clrButtons.filter(clrButton => !!(clrButton as DirectiveHolder).directives)\n               .forEach((clrButton, index) => {\n                  const buttonFound: HTMLButtonElement = this.findButtonByName(clrButton.name, allButtons);\n                  if (buttonFound) {\n                     (clrButton as DirectiveHolder).directives.forEach(directive => {\n                        directive.resolveButton(clrButton, buttonFound, index);\n                     });\n                  }\n               });\n      });\n   }\n\n   private findButtonByName(name: string, buttons: NodeListOf<HTMLButtonElement>): HTMLButtonElement {\n      for (let i: number = 0; i < buttons.length; i++) {\n         if (buttons.item(i).name === name) {\n            return buttons.item(i);\n         }\n      }\n      return null;\n   }\n\n}","/* Copyright 2019 VMware, Inc. All rights reserved. -- VMware Confidential */\n\nexport enum DriveType {\n   HDD,\n   FLASH,\n   MARKED_AS_HDD,\n   MARKED_AS_FLASH,\n   CUSTOM // Indicates that the drive type of the disks is different.\n}","/* Copyright 2020-2022 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {TreeDatagrid} from \"@component/datagrid/tree-datagrid\";\nimport {ClaimHostListItem} from \"@component/diskmgmt/model/claim-host-list-item.data\";\nimport {ClaimVendorListItem} from \"@component/diskmgmt/model/claim-vendor-list-item.data\";\nimport {DriveType} from \"@component/diskmgmt/model/drive-type.data\";\nimport {DisksGroupByPerspective} from \"@component/diskmgmt/perspective/disks-group-by-perspective\";\nimport {ClaimOption} from \"@generated/claim-option\";\nimport {Icon} from \"@util/icon\";\nimport {Logger} from \"@util/logger\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\n\nexport class ClaimDisksUtil {\n\n   static readonly DISKS_PER_DATAGRID_PAGE: number = 10;\n\n   static getLocalizedClaimOption(claimOption: ClaimOption): string {\n      switch (claimOption) {\n         case ClaimOption.ClaimForCache:\n            return VsanUiUtils.getString(\"vsan.disk.list.claimOption.ClaimForCache\");\n         case ClaimOption.ClaimForStorage:\n            return VsanUiUtils.getString(\"vsan.disk.list.claimOption.ClaimForStorage\");\n         case ClaimOption.VMFS:\n            return VsanUiUtils.getString(\"vsan.disk.list.claimOption.VMFS\");\n         case ClaimOption.Custom:\n            return VsanUiUtils.getString(\"vsan.disk.list.claimOption.Custom\");\n         case ClaimOption.DoNotClaim:\n            return VsanUiUtils.getString(\"vsan.disk.list.claimOption.DoNotClaim\");\n         default:\n            Logger.warn(\"Invalid claim option\");\n            return \"\";\n      }\n   }\n\n   static getClaimOptionIcon(claimOption: ClaimOption): string {\n      switch (claimOption) {\n         case ClaimOption.ClaimForCache:\n            return Icon.CLAIM_AS_CACHE;\n         case ClaimOption.ClaimForStorage:\n         case ClaimOption.VMFS:\n            return Icon.CLAIM_AS_CAPACITY;\n         case ClaimOption.DoNotClaim:\n            return Icon.DO_NOT_CLAIM;\n         default:\n            return Icon.EMPTY_ICON;\n      }\n   }\n\n   static getLocalizedDriveType(driveType: DriveType): string {\n      switch (driveType) {\n         case DriveType.HDD:\n            return VsanUiUtils.getString(\"vsan.disk.list.nonSsd\");\n         case DriveType.FLASH:\n            return VsanUiUtils.getString(\"vsan.disk.list.ssd\");\n         case DriveType.MARKED_AS_HDD:\n            return VsanUiUtils.getString(\"vsan.disk.list.markedAsHdd\");\n         case DriveType.MARKED_AS_FLASH:\n            return VsanUiUtils.getString(\"vsan.disk.list.markedAsFlash\");\n         case DriveType.CUSTOM:\n            return VsanUiUtils.getString(\"vsan.disk.list.driveType.custom\");\n         default:\n            Logger.warn(\"Invalid drive type\");\n            return \"\";\n      }\n   }\n\n   static changePerspective(\n         groupByPerspective: DisksGroupByPerspective,\n         datagrid: TreeDatagrid,\n         hostsInCluster: ClaimHostListItem[],\n         disksByVendor: ClaimVendorListItem[]): void {\n      switch (groupByPerspective) {\n         case DisksGroupByPerspective.DISKS_BY_VENDOR:\n            datagrid.refreshGrid(disksByVendor.filter(vendor => vendor.eligibleDisksInDatastoreContext.length));\n            // setTimeout fixes ExpressionChangedAfterItHasBeenCheckedError\n            setTimeout(() => datagrid.collapseAll(), 0);\n            break;\n         case DisksGroupByPerspective.DISKS_BY_HOST:\n            datagrid.refreshGrid(hostsInCluster.filter(host => host.eligibleDisksInDatastoreContext.length));\n            datagrid.expandAll();\n            break;\n      }\n   }\n\n   static getNameColumnTitle(groupByPerspective: DisksGroupByPerspective): string {\n      switch (groupByPerspective) {\n         case DisksGroupByPerspective.DISKS_BY_VENDOR:\n            return VsanUiUtils.getString(\"vsan.disk.list.diskModelSerialNumber\");\n         case DisksGroupByPerspective.DISKS_BY_HOST:\n            return VsanUiUtils.getString(\"vsan.disk.list.name\");\n         default:\n            Logger.warn(\"Invalid perspective: \" + groupByPerspective);\n            return VsanUiUtils.getString(\"vsan.na.label\");\n      }\n   }\n}","<!--Copyright 2018-2021 VMware, Inc. All rights reserved. -- VMware Confidential-->\n<vsan-validation id=\"witness-disk-group-alert\"\n                 *ngIf=\"alertMessage\"\n                 [isSmall]=\"true\"\n                 [allowClose]=\"false\"\n                 [alert]=\"alertMessage\">\n</vsan-validation>\n<h6 id=\"selectCacheDiskLabel\" class=\"header-label\">\n   {{\"vsan.faultDomains.stretchedCluster.wizard.configure.page.claimDisks.cacheTierInfo\" | localized}}\n</h6>\n\n<clr-datagrid id=\"cacheDisksDatagrid\"\n              [clrDgSingleSelected]=\"selectedCacheDisk\"\n              [clrDgLoading]=\"busy\">\n   <!-- Datagrid Header -->\n   <clr-dg-column [clrDgField]=\"'name'\" class=\"name-column\">\n      {{\"vsan.disk.list.name\" | localized}}\n   </clr-dg-column>\n   <clr-dg-column [clrDgField]=\"'driveTypeLabel'\">\n      {{\"vsan.disk.list.driveType\" | localized}}\n   </clr-dg-column>\n   <clr-dg-column [clrDgField]=\"'capacity'\">\n      {{\"vsan.disk.list.capacity\" | localized}}\n   </clr-dg-column>\n   <clr-dg-column [clrDgField]=\"'transportType'\">\n      {{\"vsan.disk.list.transportType\" | localized}}\n   </clr-dg-column>\n   <clr-dg-column [clrDgField]=\"'diskAdapter'\">\n      {{\"vsan.disk.list.diskAdapter\" | localized}}\n   </clr-dg-column>\n\n   <!-- Datagrid Content -->\n   <clr-dg-row *clrDgItems=\"let disk of cacheDisks\"\n               [clrDgItem]=\"disk\"\n               (click)=\"onCacheDiskSelectionChanged(disk)\">\n      <clr-dg-cell vsan-show-title>\n         <clr-icon [attr.shape]=\"disk.image\"></clr-icon>\n         {{disk.name}}\n      </clr-dg-cell>\n      <clr-dg-cell>{{disk.driveTypeLabel}}</clr-dg-cell>\n      <clr-dg-cell>{{disk.capacity}}</clr-dg-cell>\n      <clr-dg-cell>{{disk.transportType}}</clr-dg-cell>\n      <clr-dg-cell>{{disk.diskAdapter}}</clr-dg-cell>\n   </clr-dg-row>\n\n   <!-- Datagrid Footer -->\n   <clr-dg-footer>\n      {{getDatagridFooterText(cacheDisks)}}\n   </clr-dg-footer>\n</clr-datagrid>\n\n<h6 id=\"selectCapacityDiskLabel\" class=\"header-label\">\n   {{\"vsan.faultDomains.stretchedCluster.wizard.configure.page.claimDisks.capacityTierInfo\" | localized}}\n</h6>\n\n<clr-select-container id=\"optionList\" class=\"horizontal-layout label-auto-size\">\n   <label for=\"perspective-dropdown\">\n      {{\"vsan.faultDomains.stretchedCluster.wizard.configure.page.claimDisks.filterLabel\" | localized}}\n   </label>\n   <select clrSelect id=\"perspective-dropdown\"\n           #perspectiveDropDown\n           name=\"currentPerspective\"\n           [(ngModel)]=\"selectedPerspective\"\n           [disabled]=\"!isAllFlashAvailable\"\n           (change)=\"updateCapacityDisks()\">\n      <option *ngFor=\"let perspective of perspectives\"\n              value=\"{{perspectives.indexOf(perspective)}}\"\n              [selected]=\"perspectives.indexOf(perspective) == selectedPerspective\">\n         {{perspective}}\n      </option>\n   </select>\n</clr-select-container>\n\n<clr-datagrid [(clrDgSelected)]=\"selectedCapacityDisks\"\n              id=\"capacityDisksDatagrid\"\n              [clrDgLoading]=\"busy\">\n   <!-- Datagrid Header -->\n   <clr-dg-column [clrDgField]=\"'name'\" class=\"name-column\">\n      {{\"vsan.disk.list.name\" | localized}}\n   </clr-dg-column>\n   <clr-dg-column [clrDgField]=\"'driveTypeLabel'\">\n      {{\"vsan.disk.list.driveType\" | localized}}\n   </clr-dg-column>\n   <clr-dg-column [clrDgField]=\"'capacity'\">\n      {{\"vsan.disk.list.capacity\" | localized}}\n   </clr-dg-column>\n   <clr-dg-column [clrDgField]=\"'transportType'\">\n      {{\"vsan.disk.list.transportType\" | localized}}\n   </clr-dg-column>\n   <clr-dg-column [clrDgField]=\"'diskAdapter'\">\n      {{\"vsan.disk.list.diskAdapter\" | localized}}\n   </clr-dg-column>\n\n   <!-- Datagrid Content -->\n   <clr-dg-row *clrDgItems=\"let disk of capacityDisks\" [clrDgItem]=\"disk\">\n      <clr-dg-cell vsan-show-title>\n         <clr-icon [attr.shape]=\"disk.image\"></clr-icon>\n         {{disk.name}}\n      </clr-dg-cell>\n      <clr-dg-cell>{{disk.driveTypeLabel}}</clr-dg-cell>\n      <clr-dg-cell>{{disk.capacity}}</clr-dg-cell>\n      <clr-dg-cell>{{disk.transportType}}</clr-dg-cell>\n      <clr-dg-cell>{{disk.diskAdapter}}</clr-dg-cell>\n   </clr-dg-row>\n\n   <!-- Datagrid Footer -->\n   <clr-dg-footer>\n      {{getDatagridFooterText(capacityDisks)}}\n   </clr-dg-footer>\n</clr-datagrid>\n","/* Copyright 2019-2022 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {ContentChildren, Directive, ElementRef, Input} from \"@angular/core\";\nimport {ClrButton} from \"@clr/angular\";\nimport {ButtonTitleDirective} from \"./button-title.directive\";\n\n/**\n * Attribute directive used to dynamically arrange child buttons, align some horizontally and\n * put the others into the drop-down list, this directive also add title attribute to the buttons.\n * It can only used on clr-button-group and there should be clr-button in the button group.\n * @maximumInlineActions - The maximum value of inline buttons.\n */\n@Directive({\n   selector: \"clr-button-group[vsan-button-group]\",\n})\nexport class ButtonGroupDirective {\n\n   private static readonly TOGGLE_MENU_BUTTON_SELECTOR: string = \"button.btn.dropdown-toggle\";\n   private static readonly VISIBLE_BUTTON_ELEMENTS_SELECTOR: string = \"button\";\n   private static readonly IN_MENU_BUTTON_ELEMENTS_SELECTOR: string = \"div.clr-button-group-menu > button\";\n\n   // Set the maximum value to 10 to display all buttons inline when there is enough space.\n   private _maximumInlineActions: number = 10;\n\n   @Input(\"vsan-button-group\")\n   set maximumInlineActions(value: number) {\n      if (!!value) {\n         this._maximumInlineActions = value;\n      }\n   }\n\n   private _buttonTitleDirectives: ButtonTitleDirective[] = [];\n\n   @ContentChildren(ButtonTitleDirective, {descendants: true})\n   set buttons(value: ButtonTitleDirective[]) {\n      this._buttonTitleDirectives = value;\n      this._buttonTitleDirectives.forEach(titleDirective => {\n         // Update button title when its title in directive changes.\n         titleDirective.titleChangeEvent.subscribe(() => {\n            setTimeout(this.updateButtonTitles);\n         });\n      });\n\n      // when action buttons with directive are changed (added / removed) some of them may go to the menu with\n      // additional actions. There is no other way found to handle toggle menu event, but click on the toggle button.\n      this.subscribeToggleButtonClick();\n   }\n\n   private _btns: ClrButton[];\n\n   @ContentChildren(ClrButton, {descendants: true})\n   set clrButtons(btns: ClrButton[]) {\n      this._btns = btns;\n      this.updateInMenuButtons();\n   }\n\n   constructor(private elRef: ElementRef) {\n   }\n\n   private updateInMenuButtons(): void {\n      const groupWithMenu: boolean = this._btns.length > this._maximumInlineActions;\n      this._btns.forEach((btn, index) => {\n         if (groupWithMenu) {\n            // When the number of buttons exceeds the maximum and the button overflows, place the button in the menu.\n            btn.inMenu = index >= this._maximumInlineActions - 1;\n         } else {\n            btn.inMenu = false;\n         }\n      });\n   }\n\n   private updateButtonTitles = (): void => {\n      const allButtons: HTMLButtonElement[] = this.getVisibleButtons().concat(this.getInMenuButtons());\n      if (!allButtons.length) {\n         return;\n      }\n\n      // if there is a rendered button for the directive - update its title.\n      this._buttonTitleDirectives.forEach(titleDirective => {\n         allButtons.forEach((button: HTMLElement) => {\n            if (button.getAttribute(\"name\") === titleDirective.host.name) {\n               button.title = titleDirective.title;\n            }\n         });\n      });\n   };\n\n   private subscribeToggleButtonClick(): void {\n      // If there is menu with additional buttons, find the toggle button and update button names on click.\n      setTimeout(() => {\n         const toggleButton: HTMLElement | null = this.getToggleButton();\n\n         // if there is a toggle button set function to handle the click event only once.\n         if (toggleButton && !toggleButton.onclick) {\n            toggleButton.onclick = this.updateButtonTitles;\n         }\n      });\n   }\n\n   // the buttons are visible buttons in button group, toggle menu button\n   private getVisibleButtons(): HTMLButtonElement[] {\n      return Array.from(this.elRef.nativeElement.querySelectorAll(\n            ButtonGroupDirective.VISIBLE_BUTTON_ELEMENTS_SELECTOR));\n   }\n\n   // inMenu buttons are rendered outside of the elRef, get them directly from the document\n   private getInMenuButtons(): HTMLButtonElement[] {\n      return Array.from(this.elRef.nativeElement.ownerDocument.querySelectorAll(\n            ButtonGroupDirective.IN_MENU_BUTTON_ELEMENTS_SELECTOR));\n   }\n\n   private getToggleButton(): HTMLElement | null {\n      return this.elRef.nativeElement.querySelector(ButtonGroupDirective.TOGGLE_MENU_BUTTON_SELECTOR);\n   }\n}","/* Copyright 2017-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Pipe, PipeTransform} from \"@angular/core\";\nimport {DiskData} from \"@generated/disk-data\";\nimport {DiskMgmtDiskUtil} from \"@util/disk-mgmt-disk.util\";\n\n@Pipe({name: 'transportType'})\nexport class TransportTypePipe implements PipeTransform {\n\n   private static _instance: TransportTypePipe;\n\n   static instance(): TransportTypePipe {\n      if (!this._instance) {\n         this._instance = new TransportTypePipe();\n      }\n      return this._instance;\n   }\n\n   transform(value: DiskData.StorageDeviceTransport, ...args: any[]): any {\n      return DiskMgmtDiskUtil.getTransportTypeText(value);\n   }\n}","/* Copyright 2017-2019 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {ClaimOption} from \"@generated/claim-option\";\nimport {Icon} from \"@util/icon\";\nimport {ClaimDisksUtil} from \"@component/diskmgmt/claim-disks-util\";\n\nexport class VsanBaseListItem {\n\n   /* Whether the item is a root.*/\n   isRoot: boolean = true;\n   protected _name: string;\n   protected _claimOption: ClaimOption = ClaimOption.DoNotClaim;\n   protected _capacity: string = \"\";\n\n   get name(): string {\n      return this._name;\n   }\n\n   set name(newName: string) {\n      this._name = newName;\n   }\n\n   /**\n    * Gets the claim option for the root item\n    */\n   get claimOption(): ClaimOption {\n      return this._claimOption;\n   }\n\n   set claimOption(newValue: ClaimOption) {\n      this._claimOption = newValue;\n   }\n\n   /**\n    * Returns the icon corresponding to the current claim option\n    */\n   get claimOptionIcon(): string {\n      if (this.claimOption) {\n         return ClaimDisksUtil.getClaimOptionIcon(ClaimOption[this.claimOption.toString()]);\n      }\n\n      return Icon.EMPTY_ICON;\n   }\n\n   get possibleClaimOptions(): ClaimOption[] {\n      return null;\n   }\n\n   get image(): string {\n      return \"\";\n   }\n\n   /**\n    * Total capacity of the item.\n    */\n   get capacity(): string {\n      return this._capacity;\n   }\n\n   /**\n    * Total capacity of the item.\n    */\n   set capacity(newValue: string) {\n      this._capacity = newValue;\n   }\n\n   /**\n    * Number representation of  the capacity.\n    */\n   get capacityNum(): number {\n      return 0;\n   }\n\n   /**\n    * Children's drive type.\n    */\n   get driveTypeLabel(): string {\n      return \"\";\n   }\n\n   /**\n    * The hostName of the item\n    */\n   get hostName(): string {\n      return \"\";\n   }\n\n   /**\n    * Is the item flash-based\n    */\n   get isFlash(): boolean {\n      return false;\n   }\n\n   /**\n    * Is the item hdd-based\n    */\n   get isHdd(): boolean {\n      return false;\n   }\n\n   /**\n    * Flag denoting if the item is marked as Flash or not\n    */\n   get markedAsFlash(): boolean {\n      return this.isFlash && !this.isHdd;\n   }\n\n   set markedAsFlash(newValue: boolean) {\n      // Don't do anything here\n   }\n}\n","/* Copyright 2017-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {ManagedObject} from \"@service/managed-object\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {VsanDiskData} from \"@generated/vsan-disk-data\";\nimport {ClaimOption} from \"@generated/claim-option\";\nimport {VsanDiskUtil} from \"@util/vsan-disk-util\";\nimport {ScsiDisk} from \"./scsi-disk.data\";\nimport {VsanBaseListItem} from \"./vsan-base-list-item.data\";\nimport {DriveType} from \"./drive-type.data\";\nimport {DiskMgmtUtil} from \"@util/disk-mgmt.util\";\nimport {DiskStatus} from \"@generated/disk-status\";\nimport {DiskMgmtDiskUtil} from \"@util/disk-mgmt-disk.util\";\nimport {ClaimDisksUtil} from \"@component/diskmgmt/claim-disks-util\";\n\nexport class VsanDiskListItem extends VsanBaseListItem {\n\n   private _hostName: string;\n   private _markedAsFlash: boolean;\n\n   private _transportType: string;\n   private _physicalLocation: string;\n   private _selected: boolean;\n   private _issue: string;\n   private _isInDiskGroup: boolean;\n\n   private _rawDiskData: VsanDiskData;\n   private _disk: ScsiDisk;\n   private _transport: any[]; /*com.vmware.vsphere.client.storage.adapters.StorageDeviceTransport*/\n   private _diskStatus: DiskStatus;\n\n   private _possibleClaimOptions: ClaimOption[];\n   private _possibleClaimOptionsIfMarkedAsOppositeType: ClaimOption[];\n\n   diskAdapter: string;\n   vsanUuid: string;\n   hostMor: ManagedObject;\n\n   /**\n    * Flag denoting if the disk is used for cache in an existing disk group\n    */\n   isCacheDisk: boolean;\n\n   /**\n    * Whether the disk is compatible and can be claimed for vsan max.\n    */\n   isVsanMaxCompatible: boolean;\n\n   /* Virtual machines located on this disk */\n   vm: any[]; // VirtualMachine\n\n   /* vSAN File System Version of the disk. Applicable only for disks in use. */\n   fileSystemVersion: string = VsanUiUtils.getString(\"vsan.na.label\");\n\n   /**\n    * Flag indicating whether there is an error on the disk group's SSD disk.\n    */\n   hasErrorOnSsd: boolean = false;\n\n   constructor(data: VsanDiskData, useRecommendedClaimOption: boolean, isAllFlashAvailable: boolean = false) {\n      super();\n      if (!data.disk) {\n         return;\n      }\n\n      this.vsanUuid = data.vsanUuid;\n      this.isRoot = false;\n      this._rawDiskData = data;\n      this._disk = data.disk as ScsiDisk;\n      this.isCacheDisk = data.isCacheDisk;\n      this._isInDiskGroup = !!data.diskGroupUuid;\n      this.isVsanMaxCompatible = data.isVsanMaxCompatible;\n      this._diskStatus = data.diskStatus;\n\n      this.markedAsFlash = this.isFlash;\n      this._possibleClaimOptions = data.possibleClaimOptions;\n      this._possibleClaimOptionsIfMarkedAsOppositeType = data.possibleClaimOptionsIfMarkedAsOppositeType;\n      this.claimOption = this.getInitialClaimOption(data, useRecommendedClaimOption, isAllFlashAvailable);\n   }\n\n   /**\n    * Gets disk's name\n    */\n   get name(): string {\n      if (this._name) {\n         return this._name;\n      }\n\n      return this._name = DiskMgmtDiskUtil.getScsiDiskName(this._disk);\n   }\n\n   set name(newName: string) {\n      this._name = newName;\n   }\n\n   /**\n    * Disk's capacity.\n    */\n   get capacity(): string {\n      if (this._capacity) {\n         return this._capacity;\n      }\n\n      return this._capacity = VsanUiUtils.formatFileSize(this.capacityNum);\n   }\n\n   set capacity(newValue: string) {\n      this._capacity = newValue;\n   }\n\n   get capacityNum(): number {\n      return DiskMgmtUtil.lbaToBytes(this._disk.capacity);\n   }\n\n   get initialDriveType(): string {\n      return ClaimDisksUtil.getLocalizedDriveType(this.isFlash ? DriveType.FLASH : DriveType.HDD);\n   }\n\n   /**\n    * Disk's drive type label.\n    */\n   get driveTypeLabel(): string {\n      return ClaimDisksUtil.getLocalizedDriveType(this.driveType);\n   }\n\n   /**\n    * Disk's drive type.\n    */\n   get driveType(): DriveType {\n      if (this.isFlash) {\n         return !this.markedAsFlash ? DriveType.MARKED_AS_HDD : DriveType.FLASH;\n      } else {\n         return this.markedAsFlash ? DriveType.MARKED_AS_FLASH : DriveType.HDD;\n      }\n   }\n\n   /**\n    * Return possible drive types of a disk.\n    */\n   get possibleDriveTypes(): DriveType[] {\n      return this.isFlash\n            ? [DriveType.FLASH, DriveType.MARKED_AS_HDD]\n            : [DriveType.HDD, DriveType.MARKED_AS_FLASH];\n   }\n\n   /**\n    * Disk's transport type.\n    */\n   get transportType(): string {\n      if (this._transportType) {\n         return this._transportType;\n      }\n\n      this._transportType = \"\";\n\n      if (!this.transport) {\n         return this._transportType;\n      }\n\n      const transportArray: any[] = this._transport;\n      for (let i: number = 0; i < transportArray.length; i++) {\n         const transportElement: any = transportArray[i];\n         if (transportElement) {\n            this._transportType = VsanUiUtils.getString(\"vsan.disk.list.transport.\" + transportElement);\n         }\n      }\n\n      if (!this._transportType.length) {\n         this._transportType = VsanUiUtils.getString(\"vsan.disk.list.transport.unknownTransport\");\n      }\n\n      return this._transportType;\n   }\n\n   get hostName(): string {\n      return this._hostName;\n   }\n\n   set hostName(newHostName: string) {\n      this._hostName = newHostName;\n   }\n\n   /**\n    * Is the item flash-based\n    */\n   get isFlash(): boolean {\n      return !!this.disk.ssd;\n   }\n\n   /**\n    * Is the item hdd-based\n    */\n   get isHdd(): boolean {\n      return !this.isFlash;\n   }\n\n   get markedAsFlash(): boolean {\n      return this._markedAsFlash;\n   }\n\n   set markedAsFlash(newValue: boolean) {\n      if (this._markedAsFlash !== newValue) {\n         if (DiskMgmtDiskUtil.isClaimedForVsan(this.claimOption)) {\n            this.claimOption = ClaimOption.DoNotClaim;\n         }\n         this._markedAsFlash = newValue;\n      }\n   }\n\n   /**\n    * Gets the disk item's image.\n    */\n   get image(): string {\n      return VsanDiskUtil.getDiskImage(this.hasError(), this.isFlash);\n   }\n\n   set possibleClaimOptions(values: ClaimOption[]) {\n      this._possibleClaimOptions = values;\n   }\n\n   get possibleClaimOptions(): ClaimOption[] {\n      const claimOptions: ClaimOption[] = this.markedAsFlash === this.isFlash ?\n            this._possibleClaimOptions :\n            this._possibleClaimOptionsIfMarkedAsOppositeType;\n\n      if (!claimOptions) {\n         return [];\n      }\n\n      return claimOptions;\n   }\n\n   get transport(): any[] {\n      return this._transport;\n   }\n\n   /**\n    * Set disk's transport\n    */\n   set transport(transport: any[]) {\n      this._transport = transport;\n   }\n\n   /**\n    * Gets a scsi disk\n    */\n   get disk(): ScsiDisk {\n      return this._disk;\n   }\n\n   /**\n    * Gets vsan uuid\n    */\n   get uuid(): string {\n      return this._rawDiskData.vsanUuid;\n   }\n\n   /**\n    * Gets disk's uuid.\n    */\n   get diskUuid(): string {\n      return this._disk.uuid;\n   }\n\n   /**\n    * Gets the issues for the current disk.\n    */\n   get issue(): string {\n      if (this._issue) {\n         return this._issue;\n      }\n      this._issue = VsanDiskUtil.getVsanPhysicalDiskIssue(this._rawDiskData);\n      return this._issue;\n   }\n\n   /**\n    * Disk's physical location.\n    */\n   get physicalLocation(): string {\n      if (this._physicalLocation) {\n         return this._physicalLocation;\n      }\n      this._physicalLocation = DiskMgmtDiskUtil.getPhysicalLocation(this._disk.physicalLocation);\n      return this._physicalLocation;\n   }\n\n   /**\n    * Gets if the item is selected.\n    */\n   get selected(): boolean {\n      return this._selected;\n   }\n\n   /**\n    * Set item to selected state.\n    */\n   set selected(value: boolean) {\n      this._selected = value;\n   }\n\n   /**\n    * Get the disk health status of the disk.\n    */\n   get healthStatus(): string {\n      if (!this.isFlash && this.hasErrorOnSsd) {\n         return VsanUiUtils.getString(\"vsan.disk.list.healthStatus.ssdDown\");\n      }\n      return DiskMgmtDiskUtil.getHealth(this._diskStatus);\n   }\n\n   /**\n    * Return true if there is a vsan issue on the disk\n    */\n   get hasVsanIssue(): boolean {\n      return this.issue !== VsanUiUtils.getString(\"vsan.na.label\");\n   }\n\n   /**\n    * Combines the issue and disk health properties of the\n    * disk into single error string.\n    */\n   get aggregatedIssue(): string {\n      const diskHealthStatus: string = this.healthStatus;\n\n      if (!this.isDiskHealthy && this.hasVsanIssue) {\n         return [this.issue, diskHealthStatus].join(\"; \");\n      }\n      if (this.hasVsanIssue) {\n         return this.issue;\n      }\n\n      return diskHealthStatus;\n   }\n\n   /**\n    * Gets the Vendor Model, Capacity information of the disk\n    */\n   get model(): string {\n      return VsanUiUtils.getString(\n            \"vsan.disk.list.diskModelSerialNumber.format\",\n            this.vendor, this.diskModel, this.capacity);\n   }\n\n   /**\n    * Gets the role of the disk in the current disk group if any.\n    */\n   get role(): string {\n      if (this._isInDiskGroup) {\n         return this.isCacheDisk ?\n               VsanUiUtils.getString(\"vsan.disk.list.diskRole.cache\") :\n               VsanUiUtils.getString(\"vsan.disk.list.diskRole.capacity\");\n      }\n      return VsanUiUtils.getString(\"vsan.na.label\");\n   }\n\n   get vendor(): string {\n      return this.disk.vendor && this.disk.vendor.trim();\n   }\n\n   get diskModel(): string {\n      return this.disk.model && this.disk.model.trim();\n   }\n\n   private hasError(): boolean {\n      return !this.isDiskHealthy || this.hasVsanIssue;\n   }\n\n   private get isDiskHealthy(): boolean {\n      return this._diskStatus && this._diskStatus.isDiskHealthy;\n   }\n\n   private getInitialClaimOption(\n         diskData: VsanDiskData, useRecommendedClaimOption: boolean, isAllFlashAvailable: boolean): ClaimOption {\n\n      if (!useRecommendedClaimOption) {\n         return ClaimOption.DoNotClaim;\n      }\n\n      if (isAllFlashAvailable) {\n         return diskData.recommendedAllFlashClaimOption;\n      } else {\n         return diskData.recommendedHybridClaimOption;\n      }\n   }\n}\n","/* Copyright 2017-2022 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, EventEmitter, Input, OnInit, Output} from \"@angular/core\";\nimport {ManagedObject} from \"@service/managed-object\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {VsanDiskMapping} from \"@generated/vsan-disk-mapping\";\nimport {VsanCapabilityProvider} from \"@generated/vsan-capability-provider\";\nimport {VsanDiskListItem} from \"@component/diskmgmt/model/vsan-disk-list-item\";\nimport {ScsiDisk} from \"@component/diskmgmt/model/scsi-disk.data\";\nimport {VsanConfigService} from \"@generated/vsan-config-service\";\nimport {SpaceEfficiencyConfig} from \"@generated/space-efficiency-config\";\nimport {SpaceEfficiencyService} from \"@service/space-efficiency-service\";\nimport {VsanDiskData} from \"@generated/vsan-disk-data\";\nimport {LoadingIndicator} from \"@service/flow/loading-indicator.decorator\";\nimport {Loader} from \"@service/flow/loader.decorator\";\nimport {ErrorMessage} from \"@service/flow/error-message.decorator\";\nimport {DiskManagementService} from \"@generated/disk-management-service\";\n\nexport enum CapacityType {HDD, FLASH}\n\n@Component({\n   templateUrl: \"create-disk-group.html\",\n   styleUrls: [\"create-disk-group.scss\"],\n   selector: \"vsan-create-disk-group-page\",\n})\nexport class CreateDiskGroupComponent implements OnInit {\n\n   private static readonly USE_RECOMMENDED_CLAIM_OPTIONS: boolean = false;\n\n   @Input()\n   isWitnessHost: boolean;\n\n   @Input()\n   hostRef: ManagedObject;\n\n   @Input()\n   clusterRef: ManagedObject;\n\n   @Output()\n   dataLoaded: EventEmitter<void> = new EventEmitter();\n\n   @Output()\n   configChanged: EventEmitter<VsanDiskMapping> = new EventEmitter();\n\n   @Output()\n   validateConfig: EventEmitter<string[]> = new EventEmitter();\n\n   @LoadingIndicator()\n   busy: boolean;\n\n   @ErrorMessage()\n   alertMessage: string;\n\n   selectedCacheDisk: VsanDiskListItem;\n   cacheDisks: VsanDiskListItem[] = [];\n   capacityDisks: VsanDiskListItem[] = [];\n   capacityHdds: VsanDiskListItem[] = [];\n   capacityFlashDisks: VsanDiskListItem[] = [];\n   capacityFlashDisksToShow: VsanDiskListItem[] = [];\n   isAllFlashAvailable: boolean = false;\n   spaceEfficiencyConfig: SpaceEfficiencyConfig = SpaceEfficiencyConfig.NONE;\n   selectedPerspective: CapacityType;\n\n   perspectives: string[] = [\n      VsanUiUtils.getString(\"vsan.faultDomains.stretchedCluster.wizard.configure.page.claimDisks.hdd\"),\n      VsanUiUtils.getString(\"vsan.faultDomains.stretchedCluster.wizard.configure.page.claimDisks.flash\"),\n   ];\n\n   private _selectedCapacityDisks: VsanDiskListItem[] = [];\n\n   set selectedCapacityDisks(values: VsanDiskListItem[]) {\n      this._selectedCapacityDisks = values;\n      this.configChanged.emit(this.getDiskMapping());\n      this.validate();\n   }\n\n   get selectedCapacityDisks(): VsanDiskListItem[] {\n      return this._selectedCapacityDisks;\n   }\n\n   constructor(private diskManagementService: DiskManagementService,\n         private capabilityProvider: VsanCapabilityProvider,\n         private vsanConfigService: VsanConfigService,\n         private spaceEfficiencyService: SpaceEfficiencyService) {\n   }\n\n   @Loader()\n   async ngOnInit(): Promise<void> {\n      this.reset();\n      const data: any = await this.requestData();\n      this.onDisksDataRetrieved(data);\n   }\n\n   private reset(): void {\n      this.alertMessage = null;\n      this.selectedCacheDisk = null;\n      this.selectedCapacityDisks = [];\n      this.cacheDisks = [];\n      this.capacityHdds = [];\n      this.capacityFlashDisks = [];\n      this.capacityFlashDisksToShow = [];\n   }\n\n   async requestData(): Promise<any[]> {\n      const promises: Promise<any>[] = [];\n      promises.push(this.capabilityProvider.getIsAllFlashSupportedOnHost(this.hostRef));\n      promises.push(this.diskManagementService.getEligibleDisks(this.hostRef));\n      // Only request this, when the current host is not a witness\n      if (!this.isWitnessHost) {\n         promises.push(this.vsanConfigService.getSpaceEfficiencyStatus(this.clusterRef));\n      }\n\n      return Promise.all(promises);\n   }\n\n   onDisksDataRetrieved(result: any[]): void {\n      this.isAllFlashAvailable = result[0];\n      const eligibleDisks: VsanDiskData[] = result[1];\n      for (const diskData of eligibleDisks) {\n         // if disk is flash\n         if (diskData.disk.ssd) {\n            this.cacheDisks.push(this.createVsanDiskListItem(diskData));\n            // Populate capacity flash disks only if all-flash is supported\n            if (this.isAllFlashAvailable) {\n               this.capacityFlashDisks.push(this.createVsanDiskListItem(diskData));\n               this.capacityFlashDisksToShow.push(this.createVsanDiskListItem(diskData));\n            }\n         } else {\n            this.capacityHdds.push(this.createVsanDiskListItem(diskData));\n         }\n      }\n\n      if (!this.isWitnessHost) {\n         this.spaceEfficiencyConfig = result[2];\n      }\n\n      this.updatePerspective();\n      this.dataLoaded.emit();\n   }\n\n   private createVsanDiskListItem(diskData: VsanDiskData): VsanDiskListItem {\n      return new VsanDiskListItem(diskData, CreateDiskGroupComponent.USE_RECOMMENDED_CLAIM_OPTIONS);\n   }\n\n   updatePerspective(): void {\n      if (this.isAllFlashAvailable) {\n         this.selectedPerspective = this.capacityHdds.length < 1 ?\n               CapacityType.FLASH :\n               CapacityType.HDD;\n      } else {\n         this.selectedPerspective = CapacityType.HDD;\n      }\n      this.updateCapacityDisks();\n   }\n\n   updateCapacityDisks(): void {\n      // Note: use \"==\" here as the select's value is a string \"0\"/\"1\", which is not matching the enum if using ===\n      // tslint:disable-next-line\n      this.capacityDisks = this.selectedPerspective == CapacityType.FLASH ?\n            this.capacityFlashDisksToShow :\n            this.capacityHdds;\n      this.validate();\n      this.configChanged.emit(this.getDiskMapping());\n   }\n\n   private validate(): void {\n      const errors: any[] = [];\n\n      if (this.selectedCacheDisk == null) {\n         errors.push(VsanUiUtils.getString(\"vsan.dialog.createDiskGroup.error.selectSsd\"));\n      }\n      if (this.selectedCapacityDisks.length < 1) {\n         errors.push(VsanUiUtils.getString(\"vsan.dialog.createDiskGroup.error.selectDisks\"));\n      }\n      if (this.spaceEfficiencyService.isOnlyAllFlashSupportedForClaimingDisks(this.spaceEfficiencyConfig)\n            && !this.isWitnessHost\n            && this.selectedCapacityDisks.some(storageDisk => !storageDisk.disk.ssd)) {\n         errors.push(VsanUiUtils.getString(\n               \"vsan.dialog.semiAutoClaimDialog.confError.dataEfficiencyWithHdds\",\n               this.spaceEfficiencyService.toLabel(this.spaceEfficiencyConfig)));\n      }\n      this.validateConfig.emit(errors);\n   }\n\n   private getDiskMapping(): VsanDiskMapping {\n      if (!this.selectedCacheDisk || !this.selectedCapacityDisks) {\n         return null;\n      }\n      const capacityDisks: ScsiDisk[] = [];\n      for (const diskItem of this.selectedCapacityDisks) {\n         capacityDisks.push(diskItem.disk);\n      }\n\n      return VsanDiskMapping.Factory.create(this.selectedCacheDisk.disk, capacityDisks);\n   }\n\n   getDatagridFooterText(items: VsanDiskListItem[]): string {\n      return VsanUiUtils.getDatagridFooterLabel(items);\n   }\n\n   onCacheDiskSelectionChanged(selectedDisk: VsanDiskListItem): void {\n      this.selectedCacheDisk = selectedDisk;\n\n      // filter the capacity flash disks\n      this.capacityFlashDisksToShow = this.capacityFlashDisks.filter(item => item.disk !== selectedDisk.disk);\n      this.updateCapacityDisks();\n   }\n}\n","<!--Copyright 2021 VMware, Inc. All rights reserved. -- VMware Confidential-->\n<vsan-validation *ngIf=\"errorMessage\" [alert]=\"errorMessage\" [allowClose]=\"false\"></vsan-validation>\n<clr-datagrid id=\"disksDatagrid\"\n              [(clrDgSelected)]=\"selectedDisks\"\n              [clrDgLoading]=\"busy\"\n              (clrDgSelectedChange)=\"diskSelectionChange()\">\n\n   <!-- Datagrid Header -->\n   <clr-dg-column [clrDgField]=\"'name'\" class=\"name-column\">\n      {{\"vsan.disk.list.name\" | localized}}\n   </clr-dg-column>\n   <clr-dg-column *ngIf=\"isVsanMaxEnabled\" [clrDgField]=\"'isVsanMaxCompatible'\">\n      {{\"vsan.disk.list.isVsanMaxCompatible\" | localized}}\n   </clr-dg-column>\n   <clr-dg-column>\n      {{\"vsan.disk.list.driveType\" | localized}}\n   </clr-dg-column>\n   <clr-dg-column [clrDgField]=\"'capacity'\">\n      {{\"vsan.disk.list.capacity\" | localized}}\n   </clr-dg-column>\n   <clr-dg-column [clrDgField]=\"'transportType'\">\n      {{\"vsan.disk.list.transportType\" | localized}}\n   </clr-dg-column>\n   <clr-dg-column [clrDgField]=\"'diskAdapter'\">\n      {{\"vsan.disk.list.diskAdapter\" | localized}}\n   </clr-dg-column>\n\n   <!-- Datagrid Content -->\n   <clr-dg-row *clrDgItems=\"let disk of eligibleDisks\" [clrDgItem]=\"disk\">\n      <clr-dg-cell vsan-show-title>\n         <clr-icon [attr.shape]=\"getIcon(disk)\"></clr-icon>\n         {{disk.name}}\n      </clr-dg-cell>\n      <clr-dg-cell *ngIf=\"isVsanMaxEnabled\">\n         <vsan-icon-item [isIconSolid]=\"true\"\n                         [shape]=\"getIsVsanMaxCompatibleIconShape(disk)\"\n                         [iconClass]=\"Icon.clrIconShapeClassMap[this.getIsVsanMaxCompatibleIconShape(disk)]\"\n                         [label]=\"getIsVsanMaxCompatibleLabel(disk)\">\n         </vsan-icon-item>\n      </clr-dg-cell>\n      <clr-dg-cell>{{getDriveType(disk) | diskTypeLabel}}</clr-dg-cell>\n      <clr-dg-cell class=\"right-align-cell\">{{disk.capacity.total | fileSize}}</clr-dg-cell>\n      <clr-dg-cell>{{disk.transportType | transportType}}</clr-dg-cell>\n      <clr-dg-cell>{{disk.diskAdapter}}</clr-dg-cell>\n   </clr-dg-row>\n\n   <!-- Datagrid Footer -->\n   <clr-dg-footer>\n      <span *ngIf=\"eligibleDisks?.length === 1\">\n         {{\"vsan.common.datagrid.item\" | localized: eligibleDisks.length}}\n      </span>\n      <span *ngIf=\"eligibleDisks?.length > 1\">\n         {{\"vsan.common.datagrid.items\" | localized: eligibleDisks.length}}\n      </span>\n   </clr-dg-footer>\n</clr-datagrid>\n\n<vsan-validation *ngIf=\"hasVsanMaxWarning\"\n                 id=\"vsan-max-disk-selection-warning\"\n                 [alertType]=\"'warning'\"\n                 [allowClose]=\"false\"\n                 [alert]=\"'vsan.dialog.semiAutoClaimDialog.warning.vsanMaxIncompatibleDisks' | localized\">\n</vsan-validation>"],"sourceRoot":"webpack:///"}