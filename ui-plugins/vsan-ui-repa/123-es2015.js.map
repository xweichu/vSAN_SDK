{"version":3,"sources":["./src/app/vsan/common/service/witness-validation.service.ts","./src/app/vsan/common/directive/clr-button-group/clr-button-base.directive.ts","./src/app/vsan/shared-witness/shared-witness-clusters.module.ts","./src/app/vsan/common/service/navigation/model/knowledge-base-id.ts","./src/app/vsan/common/util/modal-builder.ts","./src/app/vsan/common/component/action-button/button-title.directive.ts","./src/app/vsan/common/directive/clr-button-group/clr-button-group-common.directive.ts","./src/app/vsan/common/component/action-button/button-group.directive.ts","./src/app/vsan/common/component/unavailable-view/unavailable-view.module.ts","./src/app/vsan/shared-witness/view/shared-witness-clusters.component.ts","./src/app/vsan/common/util/vsan-dialog-util.ts","./src/app/vsan/shared-witness/view/shared-witness-clusters.html","./src/app/vsan/common/directive/external-link/external-link.directive.ts","./src/app/vsan/common/component/action-button/action-button.module.ts"],"names":[],"mappings":"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","file":"123-es2015.js","sourcesContent":["/* Copyright 2019-2022 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Injectable} from \"@angular/core\";\nimport {AlertType} from \"@component/validation/alert-type\";\nimport {InventoryNode as InventoryNodeInfo} from \"@generated/inventory-node\";\nimport {SharedWitnessClusterValidationData} from \"@generated/shared-witness-cluster-validation-data\";\nimport {SharedWitnessValidationData} from \"@generated/shared-witness-validation-data\";\nimport {VsanConfigSpec} from \"@generated/vsan-config-spec\";\nimport {WitnessHostValidationResult} from \"@generated/witness-host-validation-result\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\n\n/**\n * Provides validation for a selected witness host.\n */\n@Injectable()\nexport class WitnessValidationService {\n   handleSharedWitnessHostValidationResult(hostValidationData: WitnessHostValidationResult): WitnessHostValidation {\n      return this.handleHostValidationResult(hostValidationData, null, true);\n   }\n\n   handleSingleClusterWitnessValidationResult(hostValidationData: WitnessHostValidationResult,\n         vsanConfig: VsanConfigSpec): WitnessHostValidation {\n      return this.handleHostValidationResult(hostValidationData, vsanConfig, false);\n   }\n\n   /**\n    * Returns a single host level validation result.\n    * @param hostValidationData - The java side validation result\n    * @param vsanConfig - Contains the cluster's config. Used in single cluster scenarios like configure vSAN or HCI\n    * @param aggregateClusterErrors - Whether to report the cluster level errors as a host level error or return an\n    * aggregated error message.\n    * This is needed in shared witness scenarios, in order to show a general error message at the top of the page.\n    * We already show the per cluster error in the validation grid, so there is no information hiding.\n    * In the single cluster scenarios we show the cluster error from backend as it is more informative.\n    */\n   private handleHostValidationResult(hostValidationData: WitnessHostValidationResult, vsanConfig: VsanConfigSpec,\n         aggregateClusterErrors: boolean): WitnessHostValidation {\n\n      // First check the basics: is a connected host, is not in mm, has configured nic, etc.\n      let validationMessages: WitnessHostValidation = this.validateWitnessCandidate(hostValidationData);\n      if (validationMessages) {\n         return validationMessages;\n      }\n\n      // If all looks good, check if the shared witness host validation has passed\n      validationMessages = this.validateSharedWitnessHost(hostValidationData, vsanConfig, aggregateClusterErrors);\n      if (validationMessages) {\n         return validationMessages;\n      }\n\n      // Validate some conditions, to be reported as warnings\n      validationMessages = this.validateWarningConditions(hostValidationData.isEncrypted);\n      if (validationMessages) {\n         return validationMessages;\n      }\n      // Validate some minor conditions reported as infos\n      if (hostValidationData.vLCMToBeDisabled) {\n         return new WitnessHostValidation(AlertType.INFO,\n               [VsanUiUtils.getString(\"vsan.sharedWitness.assign.vLCM.warning\")]);\n      }\n      // All is good, return validation success\n      return new WitnessHostValidation(\n            AlertType.SUCCESS, [\n               VsanUiUtils.getString(\n                     \"vsan.faultDomains.stretchedCluster.wizard.configure.page.witnessHost.validation.compatibleHostState\"),\n            ]);\n   }\n\n   // Checks the basic host properties, such as connection state, powered state, etc..\n   private validateWitnessCandidate(hostValidationResult: WitnessHostValidationResult): WitnessHostValidation {\n      if (hostValidationResult.isHostInTheSameCluster) {\n         return new WitnessHostValidation(\n               AlertType.DANGER, [\n                  VsanUiUtils.getString(\n                        \"vsan.faultDomains.stretchedCluster.wizard.configure.page.witnessHost.validation.internalHostSelectedError\"),\n               ]);\n      } else if (hostValidationResult.isHostInVsanEnabledCluster) {\n         return new WitnessHostValidation(\n               AlertType.DANGER, [\n                  VsanUiUtils.getString(\n                        \"vsan.faultDomains.stretchedCluster.wizard.configure.page.witnessHost.validation.hostInVsanEnabledCluster\"),\n               ]);\n      } else if (hostValidationResult.isHostDisconnected) {\n         return new WitnessHostValidation(\n               AlertType.DANGER, [\n                  VsanUiUtils.getString(\n                        \"vsan.faultDomains.stretchedCluster.wizard.configure.page.witnessHost.validation.disconnectedHostState\"),\n               ]);\n      } else if (!hostValidationResult.isPoweredOn) {\n         return new WitnessHostValidation(\n               AlertType.DANGER, [\n                  VsanUiUtils.getString(\n                        \"vsan.faultDomains.stretchedCluster.wizard.configure.page.witnessHost.validation.notPoweredOnHostState\"),\n               ]);\n      } else if (hostValidationResult.isHostInMaintenanceMode) {\n         return new WitnessHostValidation(\n               AlertType.DANGER, [\n                  VsanUiUtils.getString(\n                        \"vsan.faultDomains.stretchedCluster.wizard.configure.page.witnessHost.validation.maintenanceModeHostState\"),\n               ]);\n      } else if (!hostValidationResult.hasVsanEnabledNic) {\n         return new WitnessHostValidation(\n               AlertType.DANGER, [\n                  VsanUiUtils.getString(\n                        \"vsan.faultDomains.stretchedCluster.wizard.configure.page.witnessHost.validation.noVsanNicEnabledOnHost\"),\n               ]);\n      } else if (!hostValidationResult.isVsanMaxCompatible) {\n         return new WitnessHostValidation(\n               AlertType.DANGER, [\n                  VsanUiUtils.getString(\n                        \"vsan.faultDomains.stretchedCluster.wizard.configure.page.witnessHost.validation.vsanMax.hostNotSupported\"),\n               ]);\n      }\n      return null;\n   }\n\n   private validateSharedWitnessHost(hostValidationData: WitnessHostValidationResult,\n         vsanConfig: VsanConfigSpec, aggregateClusterErrors: boolean): WitnessHostValidation {\n      if (hostValidationData.isWitnessHost && !hostValidationData.isStretchedClusterSupported) {\n         return new WitnessHostValidation(AlertType.DANGER, [\n            VsanUiUtils.getString(\n                  \"vsan.faultDomains.stretchedCluster.wizard.configure.page.witnessHost.validation.featureNotSupportedOnHost\"),\n         ]);\n      }\n\n      if (hostValidationData.witnessValidationResult) {\n         // Check if any API validation errors are returned for the witness host\n         if (!VsanUiUtils.isEmpty(hostValidationData.witnessValidationResult.witnessHostValidationErrors)) {\n            return new WitnessHostValidation(\n                  AlertType.DANGER, hostValidationData.witnessValidationResult.witnessHostValidationErrors);\n         }\n\n         // Check if any API validation errors are returned for the clusters. Aggregate them to a single host error\n         if (hostValidationData.witnessValidationResult.clustersValidation) {\n            const clusterValidationResults: SharedWitnessClusterValidationData[] =\n                  Object.values(hostValidationData.witnessValidationResult.clustersValidation);\n            const clusterValidationError: SharedWitnessClusterValidationData = clusterValidationResults\n                  .find(result => !result.compatible);\n            if (clusterValidationError) {\n               if (aggregateClusterErrors) {\n                  return new WitnessHostValidation(AlertType.DANGER, [\n                     VsanUiUtils.getString(\n                           \"vsan.host.sharedWitness.reassign.wizard.selectClusters.validation.incompatibleClusters\"),\n                  ]);\n               } else {\n                  return new WitnessHostValidation(AlertType.DANGER, [clusterValidationError.validationMessage]);\n               }\n            }\n\n         }\n      }\n\n      // RDMA is not supported when shared witness host is used\n      if (vsanConfig?.enableRdma && hostValidationData.isWitnessHost) {\n         return new WitnessHostValidation(AlertType.DANGER,\n               [VsanUiUtils.getString(\"vsan.sharedWitness.assign.rdma.error\")]);\n      }\n\n      // Finally check that if a shared witness host (which don't support DIT) is used when the DiT encryption is\n      // enabled\n      if (vsanConfig?.enableDataInTransitEncryption && hostValidationData.isWitnessHost\n            && !hostValidationData.isDitSharedWitnessInteroperabilitySupported) {\n         /**\n          * When Data-In-Transit Encryption is enabled, a shared witness host cannot be used.\n          */\n         return new WitnessHostValidation(AlertType.DANGER,\n               [VsanUiUtils.getString(\"vsan.sharedWitness.assign.dit.error\")]);\n      }\n      return null;\n   }\n\n   private validateWarningConditions(isEncrypted: boolean): WitnessHostValidation {\n      if (isEncrypted) {\n         return new WitnessHostValidation(AlertType.WARNING, [\n            VsanUiUtils.getString(\n                  \"vsan.faultDomains.stretchedCluster.wizard.configure.page.witnessHost.validation.hostIsEncrypted\"),\n         ]);\n      }\n      return null;\n   }\n\n   handleHostValidationError(error: string): WitnessHostValidation {\n      return new WitnessHostValidation(AlertType.DANGER, [error]);\n   }\n\n   updateClustersValidation(witnessValidationResult: SharedWitnessValidationData,\n         clustersValidationData: Map<string, SharedWitnessClusterValidationData>,\n         twoNodeClusters: InventoryNodeInfo[]): Map<string, SharedWitnessClusterValidationData> {\n      if (!witnessValidationResult) {\n         return clustersValidationData;\n      }\n      const validationData: any = witnessValidationResult.clustersValidation;\n      if (!clustersValidationData) {\n         // This is the first time we are doing the validation, just assign the result as is\n         clustersValidationData = validationData;\n         // If witness host validation is not passed cluster validation is null\n      } else if (validationData) {\n         // We need to only update the values, in case user deselected some of the clusters,\n         // we are not getting them as part of the validation result, but still want to show the original errors\n         for (const clusterData of twoNodeClusters) {\n            const updatedValidationResult: any = validationData[clusterData.moRef.value];\n            if (updatedValidationResult) {\n               clustersValidationData[clusterData.moRef.value] = updatedValidationResult;\n            }\n         }\n      }\n      return clustersValidationData;\n   }\n}\n\nexport class WitnessHostValidation {\n   constructor(\n         public validationAlertType: AlertType,\n         public validationMessages: string[],\n   ) {\n   }\n}","/* Copyright 2020 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {ClrButton} from \"@clr/angular\";\n\n/**\n * Use this class as base class for directive, which handles clr-button. It will help to link the rendered button with\n * the clr-button on which the directive is applied.\n */\nexport abstract class ClrButtonBaseDirective {\n\n   constructor(private clrButton: ClrButton) {\n      if (!clrButton) {\n         return;\n      }\n      // name should be set, if not provided in template - generate one. ClrButtom#name is used to generate the name\n      // attribute of the markup button. Later the name is used to match the generated markup with the directive.\n      if (!clrButton.name) {\n         clrButton.name = Math.random().toString();\n      }\n\n      const directiveHolder: DirectiveHolder = (clrButton as DirectiveHolder);\n      directiveHolder.directives = directiveHolder.directives || [];\n      directiveHolder.directives.push(this);\n   }\n\n   /**\n    * This method will be called when the actual html button is rendered.\n    */\n   abstract resolveButton(clrButton: ClrButton, button: HTMLButtonElement, index: number);\n}\n\nexport interface DirectiveHolder extends ClrButton {\n   directives: ClrButtonBaseDirective[];\n}","/* Copyright 2019-2022 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {CommonModule} from \"@angular/common\";\nimport {NgModule} from \"@angular/core\";\nimport {RouterModule, Routes} from \"@angular/router\";\nimport {ClarityModule} from \"@clr/angular\";\nimport {ActionButtonModule} from \"@component/action-button/action-button.module\";\nimport {CommonCellsModule} from \"@component/cell/common-cells.module\";\nimport {PromptModule} from \"@component/dialog/prompt/prompt.module\";\nimport {UnavailableViewModule} from \"@component/unavailable-view/unavailable-view.module\";\nimport {ValidationModule} from \"@component/validation/validation.module\";\nimport {CommonDirectiveModule} from \"@directive/common-directive.module\";\nimport {CommonPipeModule} from \"@pipe/common-pipe.module\";\nimport {WitnessValidationService} from \"@service/witness-validation.service\";\nimport {SharedWitnessCommonModule} from \"./common/shared-witness-common.module\";\nimport {SharedWitnessRoutePaths} from \"./common/shared-witness-route-paths\";\nimport {SelectClustersDialogComponent} from \"./dialog/select-clusters-dialog.component\";\nimport {SharedWitnessClustersComponent} from \"./view/shared-witness-clusters.component\";\n\nconst routes: Routes = [\n   {\n      path: \"\",\n      component: SharedWitnessClustersComponent,\n   },\n   {\n      path: SharedWitnessRoutePaths.SELECT_CLUSTERS_DIALOG,\n      component: SelectClustersDialogComponent,\n   },\n];\n\n@NgModule({\n   imports: [\n      CommonModule,\n      ClarityModule,\n      CommonPipeModule,\n      CommonDirectiveModule,\n      ValidationModule,\n      CommonCellsModule,\n      PromptModule,\n      ActionButtonModule,\n      SharedWitnessCommonModule,\n      UnavailableViewModule,\n      RouterModule.forChild(routes),\n   ],\n   declarations: [\n      SharedWitnessClustersComponent,\n   ],\n   providers: [\n      WitnessValidationService,\n   ],\n})\nexport class SharedWitnessClustersModule {\n}\n","/* Copyright 2021 VMware, Inc. All rights reserved. -- VMware Confidential */\n/**\n * IDs used in external KB link navigation\n */\nexport enum KnowledgeBaseId {\n   PRECHECK_PCP = \"83954\",\n   VIRTUAL_OBJECTS = \"2108319\",\n   UPGRADE = \"2148493\",\n   PERFORMANCE_DIAGNOSTICS = \"2148770\",\n   SUPPORT_INSIGHT = \"60206\",\n}\n","/* Copyright 2017-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {environment} from \"@env/environment\";\nimport {ManagedObject} from \"@service/managed-object\";\nimport {Logger} from \"./logger\";\nimport {WebPlatform} from \"./platform\";\nimport {VsanUiUtils} from \"./vsan-util\";\n\nexport class ModalBuilder {\n\n   static readonly WIDTH: number = 0;\n   static readonly HEIGHT: number = 1;\n\n   static readonly DEFAULT_SIZE: number[] = [1000, 530];\n   static readonly WIZARD_XL: number[] = [1200, 700];\n\n   static readonly APP_URL: string = (environment.repa && environment.repaExtension)\n         ? \"index.html\"\n         : \"/ui/h5-vsan-ui/\";\n\n   private size: number[] = ModalBuilder.DEFAULT_SIZE;\n\n   // When null, the modal dialog will be headless and the docked\n   // view is expected to provide a title bar.\n   private title: string = null;\n\n   private accessibilityTitle: string = null;\n\n   private urlParams: any = {};\n\n   private eventTarget: EventTarget;\n\n   constructor(private appId: string) {\n   }\n\n   setDimensions(dimensions: number[]): ModalBuilder {\n      if (!dimensions || dimensions.length !== 2) {\n         Logger.warn(\"invalid modal dimensions\", dimensions);\n         dimensions = ModalBuilder.DEFAULT_SIZE;\n      }\n      return this.setSize(dimensions[ModalBuilder.WIDTH], dimensions[ModalBuilder.HEIGHT]);\n   }\n\n   setSize(width: number, height: number): ModalBuilder {\n      this.size = [width, height];\n      return this;\n   }\n\n   setUrlParameters(params: any): ModalBuilder {\n      this.urlParams = params;\n      return this;\n   }\n\n   /**\n    * Set to null if the view provides its own title bar\n    */\n   setTitle(title: string): ModalBuilder {\n      this.title = title;\n      return this;\n   }\n\n   setAccessibilityTitle(accessibilityTitle: string): ModalBuilder {\n      this.accessibilityTitle = accessibilityTitle;\n      return this;\n   }\n\n   /**\n    * Set explicit event target if it is changed before opening the modal.\n    * For example when making a preceding request the event target is the XMLHttpRequest object.\n    */\n   setEventTarget(eventTarget: EventTarget): ModalBuilder {\n      this.eventTarget = eventTarget;\n      return this;\n   }\n\n   /**\n    * Opens a modal dialog and returns a promise to collect the result; On close the target element is focused.\n    * @param context - any JS data object, can be retrieved by WebPlatform.getModalContext()\n    * @returns {Promise<any>} - Invoked if the dialog invokes WebPlatform.closeModalDialog(arg)\n    *       with non-null arg. The promise is never rejected.\n    */\n   open(context?: any): Promise<any> {\n      return new Promise<any>((accept) => {\n         VsanUiUtils.pluginContext.targetElement = this.eventTarget ? this.eventTarget :\n               (event && event.target ? event.target : null);\n         VsanUiUtils.pluginContext.modalResultHandler = (data?: any) => {\n            if (typeof data !== \"undefined\") {\n               // Deep copy of the object was required to resolve an issue with object's prototype overriding when\n               // passing complex objects in IE11/Edge; Keep it for safety.\n               accept(JSON.parse(JSON.stringify(data)));\n            } else if (VsanUiUtils.pluginContext.targetElement && VsanUiUtils.pluginContext.targetElement.focus) {\n               // On cancel just focus the target element. Timeout is required as otherwise the focus may be\n               // consumed by the mouse click.\n               setTimeout(() => VsanUiUtils.pluginContext.targetElement.focus(), 100);\n            }\n         };\n\n         let actionUrl: string = `${ModalBuilder.APP_URL}?viewId=${this.appId}`;\n\n         let separator: string = \"?\";\n         for (const param in this.urlParams) {\n            actionUrl += separator + param + \"=\" + this.urlParams[param];\n            separator = \"&\";\n         }\n\n         WebPlatform.openModalDialog(this.title,\n               actionUrl,\n               ManagedObject.contextObjectUid,\n               this.size[0], this.size[1],\n               this.title != null,\n               VsanUiUtils.pluginContext.modalResultHandler /* onClose */,\n               context /* retrieve with Platform.getModalContext() */,\n               this.accessibilityTitle);\n      });\n   }\n\n}\n","/* Copyright 2019 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Directive, Input, OnInit} from '@angular/core';\nimport {BehaviorSubject, Observable} from \"rxjs\";\nimport {ClrButton} from \"@clr/angular\";\n\n/**\n * Attribute directive for detecting button title change and storing title.\n * Only used for clr-button in clr-button-group.\n * @title - The title of clr-button\n */\n@Directive({\n   selector: \"clr-button[vsan-button-title]\"\n})\nexport class ButtonTitleDirective implements OnInit {\n\n   constructor(public host: ClrButton) {}\n\n   private _title: string;\n\n   @Input(\"vsan-button-title\")\n   set title(value: string) {\n      if (this._title !== value) {\n         this.titleChange.next(value);\n      }\n      this._title = value;\n   }\n\n   get title(): string {\n      return this._title;\n   }\n\n   private titleChange: BehaviorSubject<string> = new BehaviorSubject<string>(\"\");\n\n   get titleChangeEvent(): Observable<string> {\n      return this.titleChange.asObservable();\n   }\n\n   ngOnInit(): void {\n      // name should be set, if not provided in template - generate one. ClrButtom#name is used to generate the name\n      // attribute of the markup button. Later the name is used to match the generated markup with the directive.\n      if (!this.host.name) {\n         this.host.name = Math.random().toString();\n      }\n   }\n\n   ngOnDestroy() {\n      this.titleChange.unsubscribe();\n   }\n}","/* Copyright 2020 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {AfterContentInit, ContentChildren, Directive, ElementRef} from \"@angular/core\";\nimport {ClrButton} from \"@clr/angular\";\nimport {ClrButtonBaseDirective, DirectiveHolder} from \"@directive/clr-button-group/clr-button-base.directive\";\n\n/**\n * Applies on every clr-button-group and help to link the clr-button with directive applieds on it,  which extends\n * {@link ClrButtonBaseDirective}, to the actual rendered html button.\n */\n@Directive({\n   selector: \"clr-button-group\",\n})\nexport class ClrButtonGroupCommonDirective implements AfterContentInit {\n\n   @ContentChildren(ClrButton, {descendants: true})\n   clrButtons: ClrButton[];\n\n   constructor(private elRef: ElementRef) {}\n\n   ngAfterContentInit(): void {\n      setTimeout(() => {\n         const allButtons: NodeListOf<HTMLButtonElement> = this.elRef.nativeElement.querySelectorAll(\"button\");\n         // match button with clrButton and notify directives\n         this.clrButtons.filter(clrButton => !!(clrButton as DirectiveHolder).directives)\n               .forEach((clrButton, index) => {\n                  const buttonFound: HTMLButtonElement = this.findButtonByName(clrButton.name, allButtons);\n                  if (buttonFound) {\n                     (clrButton as DirectiveHolder).directives.forEach(directive => {\n                        directive.resolveButton(clrButton, buttonFound, index);\n                     });\n                  }\n               });\n      });\n   }\n\n   private findButtonByName(name: string, buttons: NodeListOf<HTMLButtonElement>): HTMLButtonElement {\n      for (let i: number = 0; i < buttons.length; i++) {\n         if (buttons.item(i).name === name) {\n            return buttons.item(i);\n         }\n      }\n      return null;\n   }\n\n}","/* Copyright 2019-2022 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {ContentChildren, Directive, ElementRef, Input} from \"@angular/core\";\nimport {ClrButton} from \"@clr/angular\";\nimport {ButtonTitleDirective} from \"./button-title.directive\";\n\n/**\n * Attribute directive used to dynamically arrange child buttons, align some horizontally and\n * put the others into the drop-down list, this directive also add title attribute to the buttons.\n * It can only used on clr-button-group and there should be clr-button in the button group.\n * @maximumInlineActions - The maximum value of inline buttons.\n */\n@Directive({\n   selector: \"clr-button-group[vsan-button-group]\",\n})\nexport class ButtonGroupDirective {\n\n   private static readonly TOGGLE_MENU_BUTTON_SELECTOR: string = \"button.btn.dropdown-toggle\";\n   private static readonly VISIBLE_BUTTON_ELEMENTS_SELECTOR: string = \"button\";\n   private static readonly IN_MENU_BUTTON_ELEMENTS_SELECTOR: string = \"div.clr-button-group-menu > button\";\n\n   // Set the maximum value to 10 to display all buttons inline when there is enough space.\n   private _maximumInlineActions: number = 10;\n\n   @Input(\"vsan-button-group\")\n   set maximumInlineActions(value: number) {\n      if (!!value) {\n         this._maximumInlineActions = value;\n      }\n   }\n\n   private _buttonTitleDirectives: ButtonTitleDirective[] = [];\n\n   @ContentChildren(ButtonTitleDirective, {descendants: true})\n   set buttons(value: ButtonTitleDirective[]) {\n      this._buttonTitleDirectives = value;\n      this._buttonTitleDirectives.forEach(titleDirective => {\n         // Update button title when its title in directive changes.\n         titleDirective.titleChangeEvent.subscribe(() => {\n            setTimeout(this.updateButtonTitles);\n         });\n      });\n\n      // when action buttons with directive are changed (added / removed) some of them may go to the menu with\n      // additional actions. There is no other way found to handle toggle menu event, but click on the toggle button.\n      this.subscribeToggleButtonClick();\n   }\n\n   private _btns: ClrButton[];\n\n   @ContentChildren(ClrButton, {descendants: true})\n   set clrButtons(btns: ClrButton[]) {\n      this._btns = btns;\n      this.updateInMenuButtons();\n   }\n\n   constructor(private elRef: ElementRef) {\n   }\n\n   private updateInMenuButtons(): void {\n      const groupWithMenu: boolean = this._btns.length > this._maximumInlineActions;\n      this._btns.forEach((btn, index) => {\n         if (groupWithMenu) {\n            // When the number of buttons exceeds the maximum and the button overflows, place the button in the menu.\n            btn.inMenu = index >= this._maximumInlineActions - 1;\n         } else {\n            btn.inMenu = false;\n         }\n      });\n   }\n\n   private updateButtonTitles = (): void => {\n      const allButtons: HTMLButtonElement[] = this.getVisibleButtons().concat(this.getInMenuButtons());\n      if (!allButtons.length) {\n         return;\n      }\n\n      // if there is a rendered button for the directive - update its title.\n      this._buttonTitleDirectives.forEach(titleDirective => {\n         allButtons.forEach((button: HTMLElement) => {\n            if (button.getAttribute(\"name\") === titleDirective.host.name) {\n               button.title = titleDirective.title;\n            }\n         });\n      });\n   };\n\n   private subscribeToggleButtonClick(): void {\n      // If there is menu with additional buttons, find the toggle button and update button names on click.\n      setTimeout(() => {\n         const toggleButton: HTMLElement | null = this.getToggleButton();\n\n         // if there is a toggle button set function to handle the click event only once.\n         if (toggleButton && !toggleButton.onclick) {\n            toggleButton.onclick = this.updateButtonTitles;\n         }\n      });\n   }\n\n   // the buttons are visible buttons in button group, toggle menu button\n   private getVisibleButtons(): HTMLButtonElement[] {\n      return Array.from(this.elRef.nativeElement.querySelectorAll(\n            ButtonGroupDirective.VISIBLE_BUTTON_ELEMENTS_SELECTOR));\n   }\n\n   // inMenu buttons are rendered outside of the elRef, get them directly from the document\n   private getInMenuButtons(): HTMLButtonElement[] {\n      return Array.from(this.elRef.nativeElement.ownerDocument.querySelectorAll(\n            ButtonGroupDirective.IN_MENU_BUTTON_ELEMENTS_SELECTOR));\n   }\n\n   private getToggleButton(): HTMLElement | null {\n      return this.elRef.nativeElement.querySelector(ButtonGroupDirective.TOGGLE_MENU_BUTTON_SELECTOR);\n   }\n}","/* Copyright 2020 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {NgModule} from \"@angular/core\";\nimport {ClarityModule} from \"@clr/angular\";\nimport {CommonModule} from \"@angular/common\";\nimport {CommonPipeModule} from \"@pipe/common-pipe.module\";\nimport {CommonDirectiveModule} from \"@directive/common-directive.module\";\nimport {UnavailableViewComponent} from \"@component/unavailable-view/unavailable-view.component\";\nimport {ValidationModule} from \"@component/validation/validation.module\";\n\n@NgModule({\n   imports: [\n      CommonModule,\n      ClarityModule,\n      CommonPipeModule,\n      ValidationModule,\n      CommonDirectiveModule,\n   ],\n   declarations: [\n      UnavailableViewComponent,\n   ],\n   exports: [\n      UnavailableViewComponent,\n   ],\n})\nexport class UnavailableViewModule {\n}\n","/* Copyright 2019-2022 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, OnInit} from \"@angular/core\";\nimport {ClrDatagridNumericFilterInterface, ClrDatagridStringFilterInterface} from \"@clr/angular\";\nimport {UnavailableViewSpec} from \"@component/unavailable-view/unavailable-view-spec\";\nimport {AlertActionLink} from \"@component/validation/alert-action-link\";\nimport {AlertType} from \"@component/validation/alert-type\";\nimport {PermissionService} from \"@generated/permission-service\";\nimport {Privileges} from \"@generated/privileges\";\nimport {SharedWitnessHostClusterData} from \"@generated/shared-witness-host-cluster-data\";\nimport {SharedWitnessHostService} from \"@generated/shared-witness-host-service\";\nimport {SharedWitnessLimits} from \"@generated/shared-witness-limits\";\nimport {VsanCapabilityProvider} from \"@generated/vsan-capability-provider\";\nimport {VsanStretchedClusterService} from \"@generated/vsan-stretched-cluster-service\";\nimport {ReassignWitnessContext} from \"@navigation/context/reassign-witness-context\";\nimport {ErrorMessage} from \"@service/flow/error-message.decorator\";\nimport {Loader} from \"@service/flow/loader.decorator\";\nimport {LoadingIndicator} from \"@service/flow/loading-indicator.decorator\";\nimport {RefreshHandler} from \"@service/global-refresh.service\";\nimport {ManagedObject} from \"@service/managed-object\";\nimport {NavigationService, PlatformExtension} from \"@service/navigation/navigation.service\";\nimport {ScreenReaderAnnouncer, SrMessageType} from \"@service/screen-reader-announcer.service\";\nimport {TaskMonitorService} from \"@service/task-monitor-service\";\nimport {Icon} from \"@util/icon\";\nimport {Logger} from \"@util/logger\";\nimport {ModalBuilder} from \"@util/modal-builder\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {SharedWitnessConstants} from \"../common/shared-witness-constants\";\nimport {SharedWitnessRoutePaths} from \"../common/shared-witness-route-paths\";\n\n@Component({\n   templateUrl: \"shared-witness-clusters.html\",\n   styleUrls: [\"shared-witness-clusters.scss\"],\n   selector: \"vsan-shared-witness-clusters\",\n})\nexport class SharedWitnessClustersComponent implements OnInit {\n\n   @LoadingIndicator()\n   loading: boolean;\n\n   @ErrorMessage()\n   errorMessage: string;\n\n   alertType: AlertType;\n   addClustersActionTitle: string = \"\";\n   isAddClustersActionDisabled: boolean = true;\n   hasEditPermissions: boolean = false;\n   clustersData: SharedWitnessHostClusterData[];\n   selectedClusters: SharedWitnessHostClusterData[] = [];\n   witnessLimits: SharedWitnessLimits;\n   componentsWarningThreshold: number;\n   showComponentsLimitAlert: boolean;\n   componentsLimitAlertType: AlertType;\n   componentsLimitAlertMessage: string;\n   unavailableViewSpec: UnavailableViewSpec;\n\n   _objectsCountFilterValue: number[] = [null, null];\n\n   get objectsCountFilterValue(): number[] {\n      return this._objectsCountFilterValue;\n   }\n\n   set objectsCountFilterValue(value: number[]) {\n      this._objectsCountFilterValue = value;\n      // Trigger model change for the label as it is inside content projection\n      this.thresholdFilterActionLink.label = this.getComponentsThresholdFilterLabel();\n   }\n\n   clusterObjectsCountFilter: ClrDatagridNumericFilterInterface<SharedWitnessHostClusterData> =\n         new class implements ClrDatagridNumericFilterInterface<SharedWitnessHostClusterData> {\n            accepts = (item: SharedWitnessHostClusterData, low: number, high: number): boolean => {\n               if (low !== null && item.componentsNumber < low) {\n                  return false;\n               }\n               if (high !== null && item.componentsNumber > high) {\n                  return false;\n               }\n               return true;\n            };\n         }();\n\n   clusterNameFilter: ClrDatagridStringFilterInterface<SharedWitnessHostClusterData> =\n         new class implements ClrDatagridStringFilterInterface<SharedWitnessHostClusterData> {\n            accepts = (item: SharedWitnessHostClusterData, search: string): boolean => {\n               return item.cluster.name !== null && item.cluster.name.toLowerCase().indexOf(search) > -1;\n            };\n         }();\n\n   thresholdFilterActionLink: AlertActionLink = {\n      label: this.getComponentsThresholdFilterLabel(),\n      action: () => this.filterClustersByComponentsThreshold(),\n   };\n\n   @ScreenReaderAnnouncer()\n   srOnlyMessage: string;\n\n   constructor(private sharedWitnessService: SharedWitnessHostService,\n         private stretchedClusterService: VsanStretchedClusterService,\n         private permissionService: PermissionService,\n         private navigationService: NavigationService,\n         private taskSvc: TaskMonitorService,\n         private vsanCapabilityProvider: VsanCapabilityProvider) {\n   }\n\n   ngOnInit(): void {\n      this.fetch();\n   }\n\n   @RefreshHandler\n   @Loader({\n      srMessage: \"vsan.host.monitor.sharedWitnessClustersList.title\",\n      srMessageType: SrMessageType.PAGE_TITLE,\n   })\n   async fetch(): Promise<void> {\n      this.resetData();\n      const isSharedWitnessSupported: boolean = await this.vsanCapabilityProvider.getIsSharedWitnessSupported(\n            ManagedObject.contextObject);\n      if (!isSharedWitnessSupported) {\n         this.unavailableViewSpec = UnavailableViewSpec.SHARED_WITNESS_NOT_SUPPORTED;\n         return;\n      }\n      [this.clustersData, this.witnessLimits, this.hasEditPermissions] = await Promise.all([\n         this.sharedWitnessService.getWitnessHostData(ManagedObject.contextObject),\n         this.sharedWitnessService.getSharedWitnessLimits(ManagedObject.contextObject),\n         this.permissionService.hasPermissions(ManagedObject.contextObject, [Privileges.EDIT_CLUSTER()]),\n      ]);\n      this.updateSelection();\n      this.componentsWarningThreshold = this.getComponentsWarningThreshold();\n      this.ensureComponentsLimitAlert();\n      this.updateActionsAvailability();\n      if (!this.witnessLimits) {\n         this.alertType = AlertType.WARNING;\n         throw new Error(VsanUiUtils.getString(\"vsan.sharedWitness.limits.query.error\"));\n      }\n   }\n\n   private resetData(): void {\n      this.errorMessage = null;\n      this.alertType = AlertType.DANGER;\n      this.showComponentsLimitAlert = false;\n      this.componentsLimitAlertType = AlertType.WARNING;\n      this.componentsLimitAlertMessage = null;\n   }\n\n   private updateActionsAvailability(): void {\n      this.isAddClustersActionDisabled = false;\n      this.addClustersActionTitle = VsanUiUtils.getString(\n            \"vsan.host.monitor.sharedWitnessClustersList.addClusters.title\");\n      if (!this.clustersData || !this.witnessLimits) {\n         // The data is still not initialized, should not happen, just sanity check.\n         return;\n      }\n      if (VsanUiUtils.isNumericValue(this.witnessLimits.maxWitnessClusters) &&\n            (this.clustersData.length >= this.witnessLimits.maxWitnessClusters)) {\n         // The host already supports its max number of clusters\n         this.isAddClustersActionDisabled = true;\n         this.addClustersActionTitle = VsanUiUtils.getString(\n               \"vsan.host.monitor.sharedWitnessClustersList.addClusters.disabled.tooManyClusters\",\n               this.witnessLimits.maxWitnessClusters);\n      } else if (VsanUiUtils.isNumericValue(this.witnessLimits.maxComponentsPerCluster) &&\n            (this.witnessLimits.maxComponentsPerCluster <= this.getCurrentMaxComponentsCount())) {\n         // If we add even 1 cluster to this host, the components limit will be exceeded for some clusters.\n         this.isAddClustersActionDisabled = true;\n         this.addClustersActionTitle = VsanUiUtils.getString(\n               \"vsan.host.monitor.sharedWitnessClustersList.addClusters.disabled.notEnoughComponents\");\n      }\n   }\n\n   private updateSelection(): void {\n      // On reassign completed when data is fetched again clustersData may be empty\n      if (!VsanUiUtils.isEmpty(this.selectedClusters) && !VsanUiUtils.isEmpty(this.clustersData)) {\n         this.selectedClusters = this.clustersData.filter(\n               c => this.selectedClusters.some(s => s.cluster.moRef.value === c.cluster.moRef.value));\n      } else {\n         this.selectedClusters = [];\n      }\n   }\n\n   private getCurrentMaxComponentsCount(): number {\n      return this.clustersData.reduce((max: number, clusterData: SharedWitnessHostClusterData) =>\n            max = clusterData.componentsNumber > max\n                  ? clusterData.componentsNumber\n                  : max, 0);\n   }\n\n   private getComponentsWarningThreshold(): number {\n      if (!this.witnessLimits || !this.witnessLimits.maxComponentsPerCluster) {\n         return 0;\n      }\n      return this.witnessLimits.maxComponentsPerCluster * SharedWitnessConstants.CLUSTER_COMPONENTS_THRESHOLD_PERC;\n   }\n\n   private ensureComponentsLimitAlert(): void {\n      this.showComponentsLimitAlert = this.isAnyClusterReachingComponentsLimit();\n      if (this.showComponentsLimitAlert) {\n         const hasAnyClusterReachedComponentsLimit: boolean =\n               this.clustersData.some(c => this.hasReachedComponentsLimit(c));\n         this.componentsLimitAlertType = hasAnyClusterReachedComponentsLimit\n               ? AlertType.DANGER\n               : AlertType.WARNING;\n         this.componentsLimitAlertMessage = VsanUiUtils.getString(hasAnyClusterReachedComponentsLimit\n               ? \"vsan.host.monitor.sharedWitnessClustersList.clusters.warning.reachedLimit\"\n               : \"vsan.host.monitor.sharedWitnessClustersList.clusters.warning.reachingLimit\");\n      }\n   }\n\n   private isAnyClusterReachingComponentsLimit(): boolean {\n      return !VsanUiUtils.isEmpty(this.clustersData) &&\n            this.clustersData.some(c => this.isReachingComponentsLimit(c));\n   }\n\n   getReassignWitnessActionTitle(): string {\n      return VsanUiUtils.getString(this.selectedClusters.length\n            ? \"vsan.host.monitor.sharedWitnessClustersList.reassignWitness.title\"\n            : \"vsan.host.monitor.sharedWitnessClustersList.reassignWitness.disabled.noSelection\");\n   }\n\n   isReachingComponentsLimit(cluster: SharedWitnessHostClusterData): boolean {\n      return VsanUiUtils.isNumericValue(this.componentsWarningThreshold) &&\n            cluster.componentsNumber >= this.componentsWarningThreshold;\n   }\n\n   getComponentsLimitLabel(cluster: SharedWitnessHostClusterData): string {\n      const localizationKey: string = this.hasReachedComponentsLimit(cluster)\n            ? \"vsan.host.monitor.sharedWitnessClustersList.cluster.warning.reachedLimit\"\n            : \"vsan.host.monitor.sharedWitnessClustersList.cluster.warning.reachingLimit\";\n      return VsanUiUtils.getString(localizationKey, this.witnessLimits.maxComponentsPerCluster);\n   }\n\n   getComponentsLimitShape(cluster: SharedWitnessHostClusterData): string {\n      return this.hasReachedComponentsLimit(cluster)\n            ? Icon.CLR_ERROR_STANDARD_ICON_SHAPE\n            : Icon.CLR_WARN_STANDARD_ICON_SHAPE;\n   }\n\n   getComponentsLimitClass(cluster: SharedWitnessHostClusterData): string {\n      return Icon.clrIconShapeClassMap[this.getComponentsLimitShape(cluster)];\n   }\n\n   private hasReachedComponentsLimit(cluster: SharedWitnessHostClusterData): boolean {\n      return cluster.componentsNumber >= this.witnessLimits.maxComponentsPerCluster;\n   }\n\n   filterClustersByComponentsThreshold(): void {\n      const minValue: number = this.isComponentsThresholdFilterApplied()\n            ? null\n            : this.componentsWarningThreshold;\n      const maxValue: number = this.objectsCountFilterValue[1];\n      this.objectsCountFilterValue = [minValue, maxValue];\n   }\n\n   private getComponentsThresholdFilterLabel(): string {\n      return VsanUiUtils.getString(this.isComponentsThresholdFilterApplied()\n            ? \"vsan.host.monitor.sharedWitnessClustersList.clusters.warning.clearFilter\"\n            : \"vsan.host.monitor.sharedWitnessClustersList.clusters.warning.applyFilter\");\n   }\n\n   private isComponentsThresholdFilterApplied(): boolean {\n      return this.objectsCountFilterValue[0] === this.componentsWarningThreshold;\n   }\n\n   navigate(clusterRef: ManagedObject): void {\n      this.navigationService.navigateTo(PlatformExtension.CLUSTER_FAULT_DOMAIN, clusterRef);\n   }\n\n   async addClusters(): Promise<void> {\n      const eventTarget: EventTarget = event.target;\n      let hasDiskGroups: boolean = false;\n      try {\n         hasDiskGroups = await this.stretchedClusterService.hasDiskGroups(ManagedObject.contextObject);\n      } catch (error) {\n         // Don't cancel add clusters dialog opening if disk groups is not fetched.\n         Logger.error(error);\n      }\n      let appId: string = SharedWitnessRoutePaths.ADD_CLUSTERS_WIZARD_FULL;\n      let modalSize: number[] = ModalBuilder.WIZARD_XL;\n      if (hasDiskGroups) {\n         appId = SharedWitnessRoutePaths.SELECT_CLUSTERS_DIALOG_FULL;\n         modalSize = [700, 700];\n      }\n      new ModalBuilder(appId)\n            .setDimensions(modalSize)\n            .setEventTarget(eventTarget)\n            .open()\n            .then(this.refreshOnTaskCompleted);\n   }\n\n   reassignWitness(): void {\n      const context: ReassignWitnessContext = {\n         clustersData: this.selectedClusters.map(c => c.cluster),\n         currentWitnessHost: ManagedObject.contextObject,\n      };\n      new ModalBuilder(SharedWitnessRoutePaths.REASSIGN_WITNESS_WIZARD_FULL)\n            .setDimensions(ModalBuilder.WIZARD_XL)\n            .open(context)\n            .then(this.refreshOnTaskCompleted);\n   }\n\n   private refreshOnTaskCompleted = (task: ManagedObject) => {\n      if (!task) {\n         return;\n      }\n      this.taskSvc.getAwaitResult(task).then(() => this.fetch());\n   };\n\n   // Returns \"a (out of max b)\" label. If b is null, it is replaced by \"--\".\n   getAssignedClustersValueLabel(): string {\n      const naLabel: string = VsanUiUtils.getString(\"vsan.na.label\");\n      const assignedClustersCount: number = !VsanUiUtils.isEmpty(this.clustersData)\n            ? this.clustersData.length\n            : 0;\n      const maxWitnessClusters: number | string =\n            (this.witnessLimits && VsanUiUtils.isNumericValue(this.witnessLimits.maxWitnessClusters))\n                  ? this.witnessLimits.maxWitnessClusters\n                  : naLabel;\n      return VsanUiUtils.getString(\"vsan.host.monitor.sharedWitnessClustersList.clusters.limit.value\",\n            assignedClustersCount, maxWitnessClusters);\n   }\n\n   getComponentsLimitValueLabel(): string | number {\n      return this.witnessLimits && VsanUiUtils.isNumericValue(this.witnessLimits.maxComponentsPerCluster)\n            ? this.witnessLimits.maxComponentsPerCluster\n            : VsanUiUtils.getString(\"vsan.na.label\");\n   }\n}","/* Copyright 2020-2022 VMware, Inc. All rights reserved. -- VMware Confidential */\nexport class VsanDialogUtil {\n   static readonly CAPACITY_MANAGEMENT_DIALOG: VsanDialogProperties = {\n      width: 800,\n      height: 700,\n   };\n\n   static readonly DELETE_VOLUME_DIALOG: VsanDialogProperties = {\n      width: 500,\n      height: 250,\n   };\n\n   static readonly MIGRATE_VOLUME_DIALOG: VsanDialogProperties = {\n      width: 1030,\n      height: 710,\n   };\n\n   static readonly REAPPLY_VOLUME_POLICY_DIALOG: VsanDialogProperties = {\n      width: 700,\n      height: 250,\n   };\n\n   static readonly DUPLICATE_PCI_ID_MODEL_SELECTION_DIALOG: VsanDialogProperties = {\n      width: 800,\n      height: 500,\n   };\n\n   static readonly HEALTH_RESTORE_ACTION_DIALOG: VsanDialogProperties = {\n      width: 550,\n      height: 250,\n   };\n\n   // Keep in sync with plugin.xml extension point\n   static readonly CLUSTER_POWER_ON_DIALOG: VsanDialogProperties = {\n      width: 600,\n      height: 230,\n   };\n\n   static readonly VM_IO_DIAGNOSTICS_METRICS_DIALOG: VsanDialogProperties = {\n      width: 900,\n      height: 700,\n   };\n\n   static readonly VM_IO_DIAGNOSTICS_LATENCY_DIALOG: VsanDialogProperties = {\n      width: 1000,\n      height: 500,\n   };\n\n   static readonly VM_IO_DIAGNOSTICS_DOM_OWNER_LATENCY_DIALOG: VsanDialogProperties = {\n      width: 1000,\n      height: 400,\n   };\n\n   static readonly PERF_SVC_EDIT_ACTION_DIALOG: VsanDialogProperties = {\n      width: 800,\n      height: 450,\n   };\n\n   static readonly PERF_SVC_ENABLE_ACTION_DIALOG: VsanDialogProperties = {\n      width: 800,\n      height: 250,\n   };\n\n   static readonly CLAIM_DISKS_ACTION_DIALOG: VsanDialogProperties = {\n      width: 1200,\n      height: 650,\n   };\n\n   static readonly VSAN_DISK_CLAIM_ACTION_DIALOG: VsanDialogProperties = {\n      width: 670,\n      height: 300,\n   };\n}\n\nexport class VsanDialogProperties {\n   width: number;\n   height: number;\n}\n","<!-- Copyright 2019-2022 VMware, Inc. All rights reserved. VMware Confidential -->\n<h5 vsan-auto-focus>\n   {{\"vsan.host.monitor.sharedWitnessClustersList.title\" | localized}}\n</h5>\n<span *ngIf=\"loading\" class=\"busy-backdrop\">\n   <span class=\"spinner spinner-lg central-spinner\"></span>\n</span>\n<ng-container *ngIf=\"!loading\">\n   <vsan-unavailable-view *ngIf=\"unavailableViewSpec\"\n                          [unavailableViewSpec]=\"unavailableViewSpec\">\n   </vsan-unavailable-view>\n   <ng-container *ngIf=\"!unavailableViewSpec\">\n      <vsan-validation id=\"shared-witness-errors\"\n                       *ngIf=\"!!errorMessage\"\n                       [allowClose]=\"true\"\n                       [alertType]=\"alertType\"\n                       [alert]=\"errorMessage\"\n                       (onClosed)=\"errorMessage = null\">\n      </vsan-validation>\n      <clr-stack-view>\n         <clr-stack-block>\n            <clr-stack-label id=\"clustersLimitLabel\">\n               {{\"vsan.host.monitor.sharedWitnessClustersList.clusters.limit.label\" | localized}}\n            </clr-stack-label>\n            <clr-stack-content id=\"clustersLimitValue\">\n               {{getAssignedClustersValueLabel()}}\n            </clr-stack-content>\n         </clr-stack-block>\n         <clr-stack-block>\n            <clr-stack-label id=\"componentsLimitLabel\">\n               {{'vsan.host.monitor.sharedWitnessClustersList.components.limit.label' | localized}}\n            </clr-stack-label>\n            <clr-stack-content id=\"componentsLimitValue\">{{getComponentsLimitValueLabel()}}</clr-stack-content>\n         </clr-stack-block>\n      </clr-stack-view>\n\n      <vsan-validation *ngIf=\"showComponentsLimitAlert\"\n                       id=\"components-threshold-filter\"\n                       [alertType]=\"componentsLimitAlertType\"\n                       [alert]=\"componentsLimitAlertMessage\"\n                       [actionLink]=\"thresholdFilterActionLink\">\n      </vsan-validation>\n\n      <clr-button-group vsan-button-group class=\"btn-link\">\n         <clr-button id=\"add-clusters-action\"\n                     name=\"add-clusters-action\"\n                     (click)=\"addClusters()\"\n                     class=\"btn btn-sm\"\n                     [disabled]=\"isAddClustersActionDisabled || !hasEditPermissions\"\n                     [vsan-button-title]=\"addClustersActionTitle\">\n            {{\"vsan.host.monitor.sharedWitnessClustersList.addClusters.label\" | localized}}\n         </clr-button>\n         <clr-button id=\"reassign-witness-action\"\n                     name=\"reassign-witness-action\"\n                     (click)=\"reassignWitness()\"\n                     class=\"btn btn-sm\"\n                     [disabled]=\"!selectedClusters?.length || !hasEditPermissions\"\n                     [vsan-button-title]=\"getReassignWitnessActionTitle()\">\n            {{\"vsan.host.monitor.sharedWitnessClustersList.reassignWitness.label\" | localized}}\n         </clr-button>\n      </clr-button-group>\n\n      <clr-datagrid id=\"witness-host-clusters-list\"\n                    [(clrDgSelected)]=\"selectedClusters\">\n         <clr-dg-column id=\"cluster-name-column\" class=\"name-column\">\n            {{'vsan.host.monitor.sharedWitnessClustersList.cluster.name' | localized}}\n            <clr-dg-string-filter [clrDgStringFilter]=\"clusterNameFilter\"></clr-dg-string-filter>\n         </clr-dg-column>\n         <clr-dg-column id=\"cluster-components-column\">\n            {{'vsan.host.monitor.sharedWitnessClustersList.cluster.components' | localized}}\n            <clr-dg-numeric-filter [clrDgNumericFilter]=\"clusterObjectsCountFilter\"\n                                   [(clrFilterValue)]=\"objectsCountFilterValue\">\n            </clr-dg-numeric-filter>\n         </clr-dg-column>\n         <clr-dg-placeholder>\n            {{'vsan.host.monitor.sharedWitnessClustersList.clusters.no.result' | localized}}\n         </clr-dg-placeholder>\n         <clr-dg-row *clrDgItems=\"let clusterData of clustersData\" [clrDgItem]=\"clusterData\">\n            <clr-dg-cell vsan-show-title class=\"cluster-name-cell\">\n               <clr-icon [attr.shape]=\"clusterData.cluster?.primaryIconId\"></clr-icon>\n               <a href=\"javascript://\" (click)=\"navigate(clusterData.cluster?.moRef)\">\n                  {{clusterData.cluster?.name}}\n               </a>\n            </clr-dg-cell>\n            <clr-dg-cell class=\"cluster-components-cell no-vertical-padding\">\n               <span>{{clusterData.componentsNumber}}</span>\n               <vsan-health-status-cell *ngIf=\"isReachingComponentsLimit(clusterData)\"\n                                        [label]=\"getComponentsLimitLabel(clusterData)\"\n                                        [iconClass]=\"getComponentsLimitClass(clusterData)\"\n                                        [shape]=\"getComponentsLimitShape(clusterData)\">\n               </vsan-health-status-cell>\n            </clr-dg-cell>\n         </clr-dg-row>\n      </clr-datagrid>\n   </ng-container>\n</ng-container>\n","/* Copyright 2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {\n   AfterViewInit,\n   ComponentFactoryResolver,\n   Directive,\n   ElementRef,\n   Host,\n   Input,\n   Optional,\n   Renderer2,\n   Self,\n} from \"@angular/core\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {NavigationService} from \"@navigation/navigation.service\";\nimport {ClrButtonBaseDirective} from \"@directive/clr-button-group/clr-button-base.directive\";\nimport {ClrButton} from \"@clr/angular\";\n\n/**\n * Decorates a button or an anchor as external link. Requires one of the optional parameters articleId, helpId or url.\n *\n * @param external-link: Optional. Localization key of the text label of the external link. If omitted default label\n * will be used - \"Learn more\" for anchors or \"Ask VMWare\" for buttons.\n * @param articleId - Optional. Id of article in knowledge base.\n * @param helpId - Optional. Help id which will redirect to Knowledge Base.\n * @param url - Optional. External URL.\n */\n@Directive({\n   selector: \"a[external-link], button[external-link], clr-button[external-link]\",\n})\nexport class ExternalLinkDirective extends ClrButtonBaseDirective implements AfterViewInit {\n   private readonly ASK_VMWARE_DEFAULT_TEXT_KEY: string = \"vsan.common.askVMware\";\n   private readonly LEARN_MORE_DEFAULT_TEXT_KEY: string = \"vsan.common.learnMore\";\n\n   private readonly CONTAINER_CLASS: string = \"icon-name-container\";\n   private readonly NAVIGATION_EVENT_TYPE: string = \"click\";\n   private readonly LEAD_TO_NOWHERE_URL: string = \"javascript://\";\n   private readonly HTML_ELEMENT_SPAN_NAME: string = \"span\";\n   private readonly HTML_ELEMENT_ICON_NAME: string = \"clr-icon\";\n   private readonly HTML_ELEMENT_ROLE_ATTR_NAME: string = \"role\";\n   private readonly HTML_ELEMENT_ROLE_ATTR_VALUE: string = \"link\";\n   private readonly ICON_SHAPE_ATTR_NAME: string = \"shape\";\n   private readonly ICON_SHAPE_ATTR_VALUE: string = \"pop-out\";\n   private readonly ICON_SIZE_ATTR_NAME: string = \"size\";\n   private readonly ICON_SIZE_ATTR_VALUE: string = \"16\";\n   private readonly ICON_CLASS_ATTR_NAME: string = \"class\";\n   private readonly ICON_CLASS_ATTR_VALUE: string = \"link\";\n   private readonly ICON_TITLE_ATTR_NAME: string = \"title\";\n\n   private readonly KB_URL: string = \"http://kb.vmware.com/kb/\";\n\n   @Input(\"external-link\")\n   anchorText: string;\n\n   @Input()\n   articleId: string;\n\n   @Input()\n   helpId: string;\n\n   @Input()\n   url: string;\n\n   constructor(private el: ElementRef<HTMLElement>,\n         private resolver: ComponentFactoryResolver,\n         private renderer: Renderer2,\n         private navigationService: NavigationService,\n         // this variable will be initialized only if the host is clr-button\n         @Host() @Self() @Optional() clrButton: ClrButton) {\n      super(clrButton);\n   }\n\n   ngAfterViewInit(): void {\n      const element: HTMLElement = this.el.nativeElement;\n      // continue only if element is HTML link or button\n      if (!this.isLink(element) && !this.isButton(element)) {\n         // element is clr-button, wait until html button for it is resolved - handled by resloveButton\n         return;\n      }\n      this.prepareExternalLink(element);\n   }\n\n   resolveButton(clrButton: ClrButton, button: HTMLButtonElement, index: number): void {\n      // only if element is clr-button. At this point the html button is already resolved. Apply on it.\n      this.prepareExternalLink(button);\n   }\n\n   private prepareExternalLink(element: HTMLElement): void {\n      this.renderer.addClass(element, this.CONTAINER_CLASS);\n\n      this.setText(element);\n      if (this.isLink(element)) {\n         this.decorateLink(element);\n      } else {\n         this.addLinkRole(element);\n      }\n\n      this.initializeNavigationHandler(element);\n   }\n\n   private isButton(element: HTMLElement): boolean {\n      return element instanceof HTMLButtonElement;\n   }\n\n   private isLink(element: HTMLElement): boolean {\n      return element instanceof HTMLAnchorElement;\n   }\n\n   private setText(element: HTMLElement): void {\n      const span: HTMLSpanElement = this.renderer.createElement(this.HTML_ELEMENT_SPAN_NAME);\n      span.innerText = this.getText(element);\n      this.renderer.appendChild(element, span);\n\n      const icon: HTMLSpanElement = this.renderer.createElement(this.HTML_ELEMENT_ICON_NAME);\n      icon.setAttribute(this.ICON_SHAPE_ATTR_NAME, this.ICON_SHAPE_ATTR_VALUE);\n      icon.setAttribute(this.ICON_SIZE_ATTR_NAME, this.ICON_SIZE_ATTR_VALUE);\n      icon.setAttribute(this.ICON_CLASS_ATTR_NAME, this.ICON_CLASS_ATTR_VALUE);\n      // Set title of the icon for screen readers clarity\n      icon.setAttribute(this.ICON_TITLE_ATTR_NAME, VsanUiUtils.getString(\"vsan.screenReader.label.externalLink.icon\"));\n      this.renderer.appendChild(element, icon);\n   }\n\n   private getText(element: HTMLElement): string {\n      if (this.anchorText) {\n         return this.anchorText;\n      }\n      const key: string = this.isButton(element) ? this.ASK_VMWARE_DEFAULT_TEXT_KEY : this.LEARN_MORE_DEFAULT_TEXT_KEY;\n      return VsanUiUtils.getString(key);\n   }\n\n   private decorateLink(element: HTMLElement): void {\n      const linkElement: HTMLLinkElement = element as HTMLLinkElement;\n      // don't use href attribute. If omitted, the link will be not visualized properly.\n      linkElement.href = this.LEAD_TO_NOWHERE_URL;\n      // display link on same line\n      linkElement.style.display = \"inline-flex\";\n   }\n\n   private initializeNavigationHandler(element: HTMLElement): void {\n      element.addEventListener(this.NAVIGATION_EVENT_TYPE, () => {\n         if (this.helpId) {\n            this.navigationService.askVMware(this.helpId);\n            return;\n         }\n         if (this.articleId) {\n            this.navigationService.navigateToAddress(`${this.KB_URL}${this.articleId}`);\n            return;\n         }\n         if (this.url) {\n            this.navigationService.navigateToAddress(this.url);\n         }\n      });\n   }\n\n   // Indicate external navigation by assigning \"link\" role\n   private addLinkRole(element: HTMLElement): void {\n      this.renderer.setAttribute(element, this.HTML_ELEMENT_ROLE_ATTR_NAME, this.HTML_ELEMENT_ROLE_ATTR_VALUE);\n   }\n}","/* Copyright 2019-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {NgModule} from \"@angular/core\";\nimport {CommonModule} from \"@angular/common\";\nimport {ClarityModule} from \"@clr/angular\";\nimport {ActionButtonSeparatorComponent} from \"@component/action-button/action-button-separator.component\";\nimport {ButtonTitleDirective} from \"@component/action-button/button-title.directive\";\nimport {ButtonGroupDirective} from \"@component/action-button/button-group.directive\";\nimport {ButtonGroupWrapDirective} from \"@component/action-button/button-group-wrap.directive\";\n\n@NgModule({\n   imports: [\n      CommonModule,\n      ClarityModule,\n   ],\n   declarations: [\n      ActionButtonSeparatorComponent,\n      ButtonGroupDirective,\n      ButtonGroupWrapDirective,\n      ButtonTitleDirective,\n   ],\n   exports: [\n      ActionButtonSeparatorComponent,\n      ButtonGroupDirective,\n      ButtonGroupWrapDirective,\n      ButtonTitleDirective,\n   ]\n})\nexport class ActionButtonModule {\n}\n"],"sourceRoot":"webpack:///"}