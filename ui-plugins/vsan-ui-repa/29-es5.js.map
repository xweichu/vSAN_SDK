{"version":3,"sources":["webpack:///src/app/vsan/common/util/validation/validator.ts","webpack:///src/app/vsan/common/component/datagrid/tree-datagrid.module.ts","webpack:///src/app/vsan/common/component/popup-list/popup-list.module.ts","webpack:///src/app/vsan/common/component/virtual-objects-table/actions/validation/virtual-objects-action-availability.service.ts","webpack:///src/app/vsan/common/component/virtual-objects-table/virtual-objects-table.service.ts","webpack:///src/app/vsan/common/component/navigation/vsan-breadcrumb.module.ts","webpack:///src/app/vsan/common/util/validation/validators-group.ts","webpack:///src/app/vsan/common/component/virtual-objects-table/virtual-objects-table-state.service.ts","webpack:///src/app/vsan/common/component/virtual-objects-table/vm-cell.component.ts","webpack:///src/app/vsan/common/util/validation/action-available-status.ts","webpack:///src/app/vsan/common/component/virtual-objects-table/virtual-objects-table.module.ts","webpack:///src/app/vsan/common/vsan-common.module.ts","webpack:///src/app/vsan/common/component/action-button/action-button.module.ts","webpack:///src/app/vsan/common/component/export/export.module.ts","webpack:///src/app/vsan/common/component/virtual-objects-table/virtual-objects-type.util.ts","webpack:///src/app/vsan/common/component/virtual-objects-table/vm-cell.html"],"names":["Validator","errorCondition","errorMessage","instance","TreeDatagridModule","PopupListModule","VirtualObjectsActionAvailabilityService","isNotLoading","context","isLoading","getString","noneEmptySelection","isEmpty","selectedObjects","actionId","VIEW_PLACEMENT_DETAILS_ID","VIEW_PERFORMANCE_ID","VIEW_VOLUME_ID","VIEW_FILE_SHARE","isSingleVolumeObject","isSingleElement","isVolume","some","vo","isSingleFileShareOrFileVolumeObject","isFileShareOrFileVolume","isSingleObjectWithSupportedPerformance","isPerformanceSupported","viewPlacementDetailsAvailability","viewPerformanceAvailability","viewVolumeAvailability","viewFileShareOrFileVolumeAvailability","ctx","validate","viewPlacementDetailsSuccessKey","validatorsGroup","successMessageKey","getFirstError","isActionAvailable","statusMessage","length","VirtualObjectsTableService","resetFiltersEvent","onResetFilters","asObservable","next","VsanBreadcrumbModule","ValidatorsGroup","validators","entity","every","validator","filter","map","getErrorMessage","find","VirtualObjectsTableStateService","manuallyExpandedObjects","Set","autoExpandedObjects","selectionChanged","clear","virtualObject","isExpanded","add","getKey","toggleAutoExpand","virtualObjects","value","toggleSelection","children","child","isSelected","select","deselect","isVirtualObject","isParent","forEach","has","isMatchingTextSearch","selectedVirtualObjects","uid","push","isSingleSelectedObject","isParentObjectWithSelectedChild","i","name","getChildrenKey","join","VsanVmCell","isTooltipVisible","linkClick","getDisplayName","item","vmRef","type","displayType","VM","hasVmReadPermissions","ActionAvailableStatus","available","message","VirtualObjectsTableModule","VsanCommonModule","ActionButtonModule","ExportModule","VirtualObjectsTypeUtil","extensionId","extensionName","Factory","create","displayName","status","INACCESSIBLE","NOT_COMPLIANT","warn","extendedTypeName","typeToLabelKey","get","isAttachedBlockVolume","isVmdkOrAttachedFCD","childItem","isDetachedBlockVolume","isFileVolume","isExtensionBlockVolume","vmodlType","attachedCnsVolBlock","detachedCnsVolBlock","isFileShare","FILE_SHARE_OBJECT","FILE_SHARE","includes","FILE_VOLUME","FILE_VOLUME_OBJECT","cnsVolFile","CNS_VOLUME","extension","vdisk","improvedVirtualDisk","Map","DISK","EXTENSION_APP","FCD_DISK","FOLDER","ISCSI_LUN","ISCSI_TARGET","OTHER","REPLICATION","VM_MEMORY","VM_SWAP"],"mappings":"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","file":"29-es5.js","sourcesContent":["/* Copyright 2020-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\n\n/**\n * Validator accept two functions as constructor parameters:\n * 1. errorCondition - predicate which is telling us when the validation must fail.\n * 2. errorMessage - function which build error message OR error message when the errorCondition return TRUE.\n */\nexport class Validator<TEntity> {\n   constructor(\n         private readonly errorCondition: (entity: TEntity) => boolean,\n         private readonly errorMessage?: string | ((entity: TEntity) => string),\n   ) { }\n\n   validate(instance: TEntity): boolean {\n      return !this.errorCondition(instance);\n   }\n\n   getErrorMessage(instance: TEntity): string {\n      return typeof this.errorMessage === \"function\"\n            ? this.errorMessage(instance)\n            : this.errorMessage;\n   }\n}","/* Copyright 2019-2020 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {NgModule} from \"@angular/core\";\nimport {CommonModule} from \"@angular/common\";\nimport {FormsModule} from \"@angular/forms\";\nimport {ClarityModule} from \"@clr/angular\";\nimport {ValidationModule} from \"@component/validation/validation.module\";\nimport {CommonPipeModule} from \"@pipe/common-pipe.module\";\nimport {TreeExpanderComponent} from \"@component/datagrid/tree-expander.component\";\nimport {TreeColumnComponent} from \"@component/datagrid/tree-column.component\";\nimport {EnumeratedFilterComponent} from \"./filter/enumerated-filter.component\";\nimport {EnumeratedFilterItemComponent} from \"./filter/enumerated-filter-item.component\";\nimport {EnumFilterComponent} from \"@component/datagrid/filter/enum-filter.component\";\n\n@NgModule({\n   imports: [\n      CommonModule,\n      FormsModule,\n      ClarityModule,\n      ValidationModule,\n      CommonPipeModule,\n   ],\n   declarations: [\n      TreeColumnComponent,\n      TreeExpanderComponent,\n      EnumeratedFilterComponent,\n      EnumeratedFilterItemComponent,\n      EnumeratedFilterComponent,\n      EnumFilterComponent,\n   ],\n   exports: [\n      TreeColumnComponent,\n      TreeExpanderComponent,\n      EnumeratedFilterComponent,\n      EnumeratedFilterItemComponent,\n      EnumFilterComponent,\n   ],\n})\nexport class TreeDatagridModule {\n}\n","/* Copyright 2019 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {NgModule} from \"@angular/core\";\nimport {CommonModule} from \"@angular/common\";\nimport {ClarityModule} from \"@clr/angular\";\nimport {CommonPipeModule} from \"@pipe/common-pipe.module\";\nimport {PopupListComponent} from \"@component/popup-list/popup-list.component\";\nimport {PopupListItemDirective} from \"@component/popup-list/popup-list-item.directive\";\n\n@NgModule({\n   imports: [\n      CommonModule,\n      ClarityModule,\n      CommonPipeModule\n   ],\n   declarations: [\n      PopupListComponent,\n      PopupListItemDirective\n   ],\n   exports: [\n      PopupListComponent,\n      PopupListItemDirective\n   ]\n})\nexport class PopupListModule {\n}\n","/* Copyright 2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Injectable} from \"@angular/core\";\nimport {Validator} from \"@util/validation/validator\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {ValidatorsGroup} from \"@util/validation/validators-group\";\nimport {VirtualObjectsTypeUtil} from \"@component/virtual-objects-table/virtual-objects-type.util\";\nimport {VirtualObjectsActionContext} from \"@component/virtual-objects-table/actions/validation/virtual-objects-action-context\";\nimport {ActionAvailableStatus} from \"@util/validation/action-available-status\";\n\n@Injectable()\nexport class VirtualObjectsActionAvailabilityService {\n\n   static readonly VIEW_PLACEMENT_DETAILS_ID: string = \"view-placement-details\";\n   static readonly VIEW_PERFORMANCE_ID: string = \"view-performance\";\n   static readonly VIEW_VOLUME_ID: string = \"view-volumes\";\n   static readonly VIEW_FILE_SHARE: string = \"view-file-shares\";\n\n   private readonly isNotLoading: Validator<VirtualObjectsActionContext> = new Validator(\n         (context: VirtualObjectsActionContext): boolean => context.isLoading,\n         VsanUiUtils.getString(\"vsan.loading\"));\n\n   private readonly noneEmptySelection: Validator<VirtualObjectsActionContext> = new Validator(\n         (context: VirtualObjectsActionContext): boolean =>\n               VsanUiUtils.isEmpty(context.selectedObjects),\n         (context: VirtualObjectsActionContext): string => {\n            switch (context.actionId) {\n               case VirtualObjectsActionAvailabilityService.VIEW_PLACEMENT_DETAILS_ID:\n                  return VsanUiUtils.getString(\n                        \"vsan.monitor.cluster.virtualObjects.action.viewDetails.description.disabled.noSelection\");\n               case VirtualObjectsActionAvailabilityService.VIEW_PERFORMANCE_ID:\n                  return VsanUiUtils.getString(\n                        \"vsan.monitor.cluster.virtualObjects.action.viewPerformance.description.disabled.noSelection\");\n               case VirtualObjectsActionAvailabilityService.VIEW_VOLUME_ID:\n                  return VsanUiUtils.getString(\n                        \"vsan.monitor.cluster.virtualObjects.action.navigateToCnsVolumes.description.disabled.noSelection\");\n               case VirtualObjectsActionAvailabilityService.VIEW_FILE_SHARE:\n                  return VsanUiUtils.getString(\n                        \"vsan.monitor.cluster.virtualObjects.action.navigateToFileShares.description.disabled.noSelection\");\n            }\n         });\n\n   private readonly isSingleVolumeObject: Validator<VirtualObjectsActionContext> = new Validator(\n         (context: VirtualObjectsActionContext): boolean =>\n               !VsanUiUtils.isSingleElement(context.selectedObjects) ||\n               !VirtualObjectsTypeUtil.isVolume(context.selectedObjects[0]),\n         (context: VirtualObjectsActionContext) => {\n            if (!context.selectedObjects.some(vo => VirtualObjectsTypeUtil.isVolume(vo))) {\n               return VsanUiUtils.getString(\n                     \"vsan.monitor.cluster.virtualObjects.action.navigateToCnsVolumes.description.disabled.noSelection\");\n            } else {\n               return VsanUiUtils.getString(\n                     \"vsan.monitor.cluster.virtualObjects.action.navigateToCnsVolumes.description.disabled.multipleSelection\");\n            }\n         });\n\n   private readonly isSingleFileShareOrFileVolumeObject: Validator<VirtualObjectsActionContext> = new Validator(\n         (context: VirtualObjectsActionContext): boolean =>\n               !VsanUiUtils.isSingleElement(context.selectedObjects) ||\n               !VirtualObjectsTypeUtil.isFileShareOrFileVolume(context.selectedObjects[0]),\n         (context: VirtualObjectsActionContext) => {\n            if (!context.selectedObjects.some(vo => VirtualObjectsTypeUtil.isFileShareOrFileVolume(vo))) {\n               return VsanUiUtils.getString(\n                     \"vsan.monitor.cluster.virtualObjects.action.navigateToFileShares.description.disabled.noSelection\");\n            } else {\n               return VsanUiUtils.getString(\n                     \"vsan.monitor.cluster.virtualObjects.action.navigateToFileShares.description.disabled.multipleSelection\");\n            }\n         });\n\n   private readonly isSingleObjectWithSupportedPerformance: Validator<VirtualObjectsActionContext> = new Validator(\n         (context: VirtualObjectsActionContext): boolean =>\n               !VsanUiUtils.isSingleElement(context.selectedObjects) ||\n               !VirtualObjectsTypeUtil.isPerformanceSupported(context.selectedObjects[0]),\n         (context: VirtualObjectsActionContext) => {\n            if (!context.selectedObjects.some(vo => VirtualObjectsTypeUtil.isPerformanceSupported(vo))) {\n               return VsanUiUtils.getString(\n                     \"vsan.monitor.cluster.virtualObjects.action.viewPerformance.description.disabled.noSelection\");\n            } else {\n               return VsanUiUtils.getString(\n                     \"vsan.monitor.cluster.virtualObjects.action.viewPerformance.description.disabled.multipleSelection\");\n            }\n         });\n\n   checkAvailability(ctx: VirtualObjectsActionContext): any {\n      switch (ctx.actionId) {\n         case VirtualObjectsActionAvailabilityService.VIEW_PLACEMENT_DETAILS_ID:\n            return this.validate(this.viewPlacementDetailsAvailability, ctx,\n                  this.viewPlacementDetailsSuccessKey(ctx));\n         case VirtualObjectsActionAvailabilityService.VIEW_PERFORMANCE_ID:\n            return this.validate(this.viewPerformanceAvailability, ctx,\n                  \"vsan.monitor.cluster.virtualObjects.action.viewPerformance.description.one\");\n         case VirtualObjectsActionAvailabilityService.VIEW_VOLUME_ID:\n            return this.validate(this.viewVolumeAvailability, ctx,\n                  \"vsan.monitor.cluster.virtualObjects.action.navigateToCnsVolumes.description\");\n         case VirtualObjectsActionAvailabilityService.VIEW_FILE_SHARE:\n            return this.validate(this.viewFileShareOrFileVolumeAvailability, ctx,\n                  \"vsan.monitor.cluster.virtualObjects.action.navigateToFileShares.description\");\n      }\n   }\n\n   private validate(\n         validatorsGroup: ValidatorsGroup<VirtualObjectsActionContext>,\n         context: VirtualObjectsActionContext,\n         successMessageKey: string): ActionAvailableStatus {\n\n      const errorMessage: string = validatorsGroup.getFirstError(context);\n      const isActionAvailable: boolean = errorMessage === null;\n      const statusMessage: string = isActionAvailable ? VsanUiUtils.getString(successMessageKey) : errorMessage;\n\n      return new ActionAvailableStatus(isActionAvailable, statusMessage);\n   }\n\n   private readonly viewPlacementDetailsAvailability: ValidatorsGroup<VirtualObjectsActionContext> = new ValidatorsGroup([\n      this.isNotLoading,\n      this.noneEmptySelection,\n   ]);\n\n   private readonly viewPerformanceAvailability: ValidatorsGroup<VirtualObjectsActionContext> = new ValidatorsGroup([\n      this.isNotLoading,\n      this.noneEmptySelection,\n      this.isSingleObjectWithSupportedPerformance,\n   ]);\n\n   private readonly viewVolumeAvailability: ValidatorsGroup<VirtualObjectsActionContext> = new ValidatorsGroup([\n      this.isNotLoading,\n      this.noneEmptySelection,\n      this.isSingleVolumeObject,\n   ]);\n\n   private readonly viewFileShareOrFileVolumeAvailability:  ValidatorsGroup<VirtualObjectsActionContext> = new ValidatorsGroup([\n      this.isNotLoading,\n      this.noneEmptySelection,\n      this.isSingleFileShareOrFileVolumeObject,\n   ]);\n\n   private viewPlacementDetailsSuccessKey(context: VirtualObjectsActionContext): string {\n      return context.selectedObjects.length > 1\n            ? \"vsan.monitor.cluster.virtualObjects.action.viewDetails.description.many\"\n            : \"vsan.monitor.cluster.virtualObjects.action.viewDetails.description.one\";\n   }\n}","/* Copyright 2020 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Injectable} from \"@angular/core\";\nimport {Observable, Subject} from \"rxjs\";\n\n@Injectable()\nexport class VirtualObjectsTableService {\n\n   private resetFiltersEvent: Subject<void> = new Subject<void>();\n   onResetFilters: Observable<void> = this.resetFiltersEvent.asObservable();\n\n   resetFilters(): void {\n      this.resetFiltersEvent.next();\n   }\n}","/* Copyright 2020 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {NgModule} from \"@angular/core\";\nimport {VsanBreadcrumbNavComponent} from \"./vsan-breadcrumb-nav.component\";\nimport {ClarityModule} from \"@clr/angular\";\nimport {CommonModule} from \"@angular/common\";\nimport {CommonDirectiveModule} from \"@directive/common-directive.module\";\nimport {CommonPipeModule} from \"@pipe/common-pipe.module\";\n\n@NgModule({\n   imports: [CommonModule, ClarityModule, CommonDirectiveModule, CommonPipeModule],\n   declarations: [VsanBreadcrumbNavComponent],\n   exports: [\n      VsanBreadcrumbNavComponent,\n   ],\n})\nexport class VsanBreadcrumbModule {}\n","/* Copyright 2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Validator} from \"@util/validation/validator\";\n\nexport class ValidatorsGroup<TEntity> {\n\n   constructor(private validators: Validator<TEntity>[]) { }\n\n   validate(entity: TEntity): boolean {\n      return this.validators\n            .every(validator => validator.validate(entity));\n   }\n\n   getAllErrors(entity: TEntity): string[] {\n      return this.validators\n            .filter(validator => !validator.validate(entity))\n            .map(validator => validator.getErrorMessage(entity));\n   }\n\n   getFirstError(entity: TEntity): string {\n      return this.validators\n            .find(validator => !validator.validate(entity))\n            ?.getErrorMessage(entity) || null;\n   }\n}\n","/* Copyright 2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {VirtualObjectModel} from \"@generated/virtual-object-model\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {Subject} from \"rxjs\";\nimport {Injectable} from \"@angular/core\";\n\n/**\n * Holds the state of each virtual object (selected/expanded/indeterminate) displayed in the virtual objects datagrid\n */\n@Injectable()\nexport class VirtualObjectsTableStateService {\n   /**\n    * Holds the IDs of the virtual objects that are manually expanded by the user\n    * E.g. User click to expand/collapse a parent item\n    */\n   private manuallyExpandedObjects: Set<string> = new Set<string>();\n\n   /**\n    * Holds the IDs of the virtual objects that are expanded because we have applied filter.\n    * E.g. Filtering by name, filtering by health state\n    */\n   private autoExpandedObjects: Set<string> = new Set<string>();\n\n   /**\n    * Holds the IDs of the virtual objects that are selected\n    */\n   private selectedObjects: Set<string> = new Set<string>();\n\n   selectionChanged: Subject<void> = new Subject<void>();\n\n   reset(): void {\n      this.manuallyExpandedObjects.clear();\n      this.autoExpandedObjects.clear();\n      this.selectedObjects.clear();\n      this.selectionChanged.next();\n   }\n\n   toggleManualExpand(virtualObject: VirtualObjectModel, isExpanded: boolean): void {\n      if (isExpanded) {\n         this.manuallyExpandedObjects.add(this.getKey(virtualObject));\n      } else {\n         this.manuallyExpandedObjects.delete(this.getKey(virtualObject));\n         // We need to do that because otherwise it still will be expanded because we check both\n         this.toggleAutoExpand(virtualObject, false);\n      }\n   }\n\n   toggleAutoExpand(virtualObject: VirtualObjectModel, isExpanded: boolean): void {\n      if (isExpanded) {\n         this.autoExpandedObjects.add(this.getKey(virtualObject));\n      } else {\n         this.autoExpandedObjects.delete(this.getKey(virtualObject));\n      }\n   }\n\n   toggleSelectionOnAll(virtualObjects: VirtualObjectModel[], value: boolean): void {\n      if (VsanUiUtils.isEmpty(virtualObjects)) {\n         return;\n      }\n      for (const virtualObject of virtualObjects) {\n         this.toggleSelection(virtualObject, value);\n         if (virtualObject.children) {\n            for (const child of virtualObject.children) {\n               this.toggleSelection(child, value);\n            }\n         }\n      }\n   }\n\n   toggleSelection(virtualObject: VirtualObjectModel, isSelected: boolean): void {\n      if (isSelected) {\n         this.select(virtualObject);\n      } else {\n         this.deselect(virtualObject);\n      }\n   }\n\n   private select(virtualObject: VirtualObjectModel): void {\n      if (this.isVirtualObject(virtualObject)) {\n         this.selectedObjects.add(this.getKey(virtualObject));\n      }\n      if (this.isParent(virtualObject)) {\n         virtualObject.children.forEach(child => this.select(child));\n      }\n      this.selectionChanged.next();\n   }\n\n   private deselect(virtualObject: VirtualObjectModel): void {\n      if (this.isVirtualObject(virtualObject)) {\n         this.selectedObjects.delete(this.getKey(virtualObject));\n      }\n      if (this.isParent(virtualObject)) {\n         virtualObject.children.forEach(child => this.deselect(child));\n      }\n      this.selectionChanged.next();\n   }\n\n   isExpanded(virtualObject: VirtualObjectModel): boolean {\n      return this.manuallyExpandedObjects.has(this.getKey(virtualObject)) ||\n            this.autoExpandedObjects.has(this.getKey(virtualObject));\n   }\n\n   areAllSelected(virtualObjects: VirtualObjectModel[]): boolean {\n      if (VsanUiUtils.isEmpty(virtualObjects)) {\n         return false;\n      }\n      for (const virtualObject of virtualObjects) {\n         if (!this.isSelected(virtualObject)) {\n            return false;\n         }\n         if (virtualObject.children) {\n            for (const child of virtualObject.children) {\n               if (!this.isSelected(child)) {\n                  return false;\n               }\n            }\n         }\n      }\n      return true;\n   }\n\n   getSelectedVirtualObjects(\n         virtualObjects: VirtualObjectModel[],\n         isMatchingTextSearch: (parent: VirtualObjectModel, child: VirtualObjectModel) => boolean): VirtualObjectModel[] {\n      const selectedVirtualObjects: VirtualObjectModel[] = [];\n      if (VsanUiUtils.isEmpty(virtualObjects)) {\n         return selectedVirtualObjects;\n      }\n      virtualObjects.forEach(virtualObject => {\n         if (virtualObject.uid && this.isSelected(virtualObject) && isMatchingTextSearch(virtualObject, null)) {\n            selectedVirtualObjects.push(virtualObject);\n         }\n         if (virtualObject.children) {\n            virtualObject.children.forEach(child => {\n               if (child.uid && this.isSelected(child) && isMatchingTextSearch(virtualObject, child)) {\n                  selectedVirtualObjects.push(child);\n               }\n            });\n         }\n      });\n      return selectedVirtualObjects;\n   }\n\n   isSelected(virtualObject: VirtualObjectModel): boolean {\n      if (!this.isVirtualObject(virtualObject) && !this.isParent(virtualObject)) {\n         return false;\n      }\n\n      const isSingleSelectedObject: boolean =\n            !this.isParent(virtualObject) && this.selectedObjects.has(this.getKey(virtualObject));\n\n      const isParentObjectWithSelectedChild: boolean =\n            this.isParent(virtualObject) && virtualObject.children.some(child => this.isSelected(child));\n\n      return isSingleSelectedObject || isParentObjectWithSelectedChild;\n   }\n\n   isIndeterminate(virtualObject: VirtualObjectModel): boolean {\n      if (!this.isParent(virtualObject)) {\n         return false;\n      }\n\n      return virtualObject.children.some(\n            (child, i, children) => this.isSelected(child) !== this.isSelected(children[0]));\n   }\n\n   /**\n    * Check if it is a real virtual object or a fake one (used to group multiple virtual objects - E.g. VM)\n    */\n   private isVirtualObject(virtualObject: VirtualObjectModel): boolean {\n      return !!virtualObject.uid;\n   }\n\n   /**\n    * Only objects that are not real objects and have children are parent items.\n    */\n   private isParent(virtualObject: VirtualObjectModel): boolean {\n      return !this.isVirtualObject(virtualObject) && !VsanUiUtils.isEmpty(virtualObject.children);\n   }\n\n   /**\n    * Unique id per virtual object\n    */\n   private getKey(virtualObject: VirtualObjectModel): string {\n      // most of the root items have no uid\n      return `${virtualObject.name}-${virtualObject.uid}${this.getChildrenKey(virtualObject)}`;\n   }\n\n   private getChildrenKey(virtualObject: VirtualObjectModel): string {\n      return this.isParent(virtualObject)\n         ? `-${virtualObject.children.map(child => this.getKey(child)).join(\"-\")}`\n         : \"\";\n   }\n}","/* Copyright 2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, EventEmitter, Input, Output} from \"@angular/core\";\nimport {VirtualObjectsTypeUtil} from \"@component/virtual-objects-table/virtual-objects-type.util\";\nimport {DisplayObjectType} from \"@generated/display-object-type\";\nimport {VirtualObjectModel} from \"@generated/virtual-object-model\";\nimport {ManagedObject} from \"@service/managed-object\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\n\n@Component({\n   selector: \"vsan-vm-cell\",\n   templateUrl: \"vm-cell.html\",\n   styleUrls: [\"vm-cell.scss\"],\n})\nexport class VsanVmCell {\n\n   @Input()\n   item: VirtualObjectModel;\n\n   @Input()\n   isLink: boolean;\n\n   @Input()\n   isTooltipVisible: boolean = true;\n\n   @Output()\n   linkClick: EventEmitter<VirtualObjectModel> = new EventEmitter<VirtualObjectModel>();\n\n   get displayName(): string {\n      return VirtualObjectsTypeUtil.getDisplayName(this.item);\n   }\n\n   get isNoPermissionVm(): boolean {\n      return !!this.item.vmRef\n            && !!this.item.type\n            && this.item.type.displayType === DisplayObjectType.VM\n            && !this.item.hasVmReadPermissions;\n   }\n\n   getTooltipText(vmRef: ManagedObject): string {\n      return VsanUiUtils.getString(\"vsan.monitor.cluster.virtualObjects.noReadPermissions\", vmRef.value);\n   }\n}\n","/* Copyright 2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nexport class ActionAvailableStatus {\n   constructor(public available: boolean, public message: string) { }\n}","/* Copyright 2019-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {CommonModule} from \"@angular/common\";\nimport {NgModule} from \"@angular/core\";\nimport {FormsModule} from \"@angular/forms\";\nimport {ClarityModule} from \"@clr/angular\";\nimport {VirtualObjectsActionsComponent} from \"@component/virtual-objects-table/actions/virtual-objects-actions.component\";\nimport {CompositeHealthStatesFilterItemComponent} from \"@component/virtual-objects-table/filter/composite-health-states-filter-item.component\";\nimport {VirtualObjectsTypeFilterComponent} from \"@component/virtual-objects-table/filter/virtual-objects-type-filter.component\";\nimport {VirtualObjectsFilterableTableComponent} from \"@component/virtual-objects-table/virtual-objects-filterable-table.component\";\nimport {VirtualObjectsTableComponent} from \"@component/virtual-objects-table/virtual-objects-table.component\";\nimport {VirtualObjectsTableService} from \"@component/virtual-objects-table/virtual-objects-table.service\";\nimport {VsanVmCell} from \"@component/virtual-objects-table/vm-cell.component\";\nimport {VirtualObjectWhatIfStateIconClassPipe} from \"@component/virtual-objects-table/whatIf-state-icon-class.pipe\";\nimport {VirtualObjectWhatIfStateIconShapePipe} from \"@component/virtual-objects-table/whatIf-state-icon-shape.pipe\";\nimport {VirtualObjectWhatIfStateLabelPipe} from \"@component/virtual-objects-table/whatIf-state-label.pipe\";\nimport {ReferenceWatcher} from \"@util/reference-watcher\";\nimport {VsanCommonModule} from \"../../vsan-common.module\";\nimport {VirtualObjectsTableStateService} from \"@component/virtual-objects-table/virtual-objects-table-state.service\";\nimport {VirtualObjectsActionAvailabilityService} from \"@component/virtual-objects-table/actions/validation/virtual-objects-action-availability.service\";\nimport {ExportModule} from \"@component/export/export.module\";\n\n@NgModule({\n   imports: [\n      CommonModule,\n      FormsModule,\n      ClarityModule,\n      VsanCommonModule,\n      ExportModule,\n   ],\n   declarations: [\n      VirtualObjectsActionsComponent,\n      VirtualObjectsTableComponent,\n      VirtualObjectsFilterableTableComponent,\n      VsanVmCell,\n      CompositeHealthStatesFilterItemComponent,\n      VirtualObjectsTypeFilterComponent,\n      VirtualObjectWhatIfStateLabelPipe,\n      VirtualObjectWhatIfStateIconShapePipe,\n      VirtualObjectWhatIfStateIconClassPipe,\n   ],\n   exports: [\n      VirtualObjectsTableComponent,\n      VirtualObjectsFilterableTableComponent,\n      VsanVmCell,\n   ],\n   providers: [\n      VirtualObjectsTableService,\n      VirtualObjectsTableStateService,\n      ReferenceWatcher,\n      VirtualObjectsActionAvailabilityService,\n   ],\n})\nexport class VirtualObjectsTableModule {\n}\n","/* Copyright 2019 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {NgModule} from \"@angular/core\";\nimport {CommonDirectiveModule} from \"@directive/common-directive.module\";\nimport {CommonPipeModule} from \"@pipe/common-pipe.module\";\nimport {ValidationModule} from \"@component/validation/validation.module\";\nimport {ActionButtonModule} from \"@component/action-button/action-button.module\";\nimport {PromptModule} from \"@component/dialog/prompt/prompt.module\";\nimport {CommonCellsModule} from \"@component/cell/common-cells.module\";\nimport {InventoryBrowserModule} from \"@component/inventory/inventory-browser.module\";\nimport {SearchModule} from \"@component/search/search.module\";\nimport {TreeDatagridModule} from \"@component/datagrid/tree-datagrid.module\";\nimport {DatetimePickerModule} from \"@component/datetime-picker/datetime-picker.module\";\nimport {PopupListModule} from \"@component/popup-list/popup-list.module\";\nimport {VsanBreadcrumbModule} from \"@component/navigation/vsan-breadcrumb.module\";\n\n@NgModule({\n   imports: [\n         CommonDirectiveModule,\n         CommonPipeModule,\n         ValidationModule,\n         ActionButtonModule,\n         PromptModule,\n         CommonCellsModule,\n         InventoryBrowserModule,\n         SearchModule,\n         TreeDatagridModule,\n         DatetimePickerModule,\n         PopupListModule,\n         VsanBreadcrumbModule,\n   ],\n   exports: [\n      CommonDirectiveModule,\n      CommonPipeModule,\n      ValidationModule,\n      ActionButtonModule,\n      PromptModule,\n      CommonCellsModule,\n      InventoryBrowserModule,\n      SearchModule,\n      TreeDatagridModule,\n      DatetimePickerModule,\n      PopupListModule,\n      VsanBreadcrumbModule,\n   ],\n})\nexport class VsanCommonModule { }","/* Copyright 2019-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {NgModule} from \"@angular/core\";\nimport {CommonModule} from \"@angular/common\";\nimport {ClarityModule} from \"@clr/angular\";\nimport {ActionButtonSeparatorComponent} from \"@component/action-button/action-button-separator.component\";\nimport {ButtonTitleDirective} from \"@component/action-button/button-title.directive\";\nimport {ButtonGroupDirective} from \"@component/action-button/button-group.directive\";\nimport {ButtonGroupWrapDirective} from \"@component/action-button/button-group-wrap.directive\";\n\n@NgModule({\n   imports: [\n      CommonModule,\n      ClarityModule,\n   ],\n   declarations: [\n      ActionButtonSeparatorComponent,\n      ButtonGroupDirective,\n      ButtonGroupWrapDirective,\n      ButtonTitleDirective,\n   ],\n   exports: [\n      ActionButtonSeparatorComponent,\n      ButtonGroupDirective,\n      ButtonGroupWrapDirective,\n      ButtonTitleDirective,\n   ]\n})\nexport class ActionButtonModule {\n}\n","/* Copyright 2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {NgModule} from \"@angular/core\";\nimport {ClarityModule} from \"@clr/angular\";\nimport {CommonModule} from \"@angular/common\";\nimport {ExportComponent} from \"@component/export/export.component\";\nimport {CommonPipeModule} from \"@pipe/common-pipe.module\";\n\n@NgModule({\n   imports: [CommonModule, ClarityModule, CommonPipeModule],\n   declarations: [ExportComponent],\n   exports: [\n      ExportComponent,\n   ],\n})\nexport class ExportModule {}","/* Copyright 2021-2022 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {DisplayObjectType} from \"@generated/display-object-type\";\nimport {VirtualObjectModel} from \"@generated/virtual-object-model\";\nimport {VirtualObjectType} from \"@generated/virtual-object-type\";\nimport {VsanObjectType} from \"@generated/vsan-object-type\";\nimport {VsanWhatIfComplianceStatus} from \"@generated/vsan-what-if-compliance-status\";\nimport {Logger} from \"@util/logger\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\n\nexport class VirtualObjectsTypeUtil {\n\n   private static readonly typeToLabelKey: Map<DisplayObjectType, string> = new Map([\n      [DisplayObjectType.CNS_VOLUME, \"vsan.monitor.cluster.virtualObjects.type.cns_volume\"],\n      [DisplayObjectType.DISK, \"vsan.monitor.cluster.virtualObjects.type.disk\"],\n      [DisplayObjectType.EXTENSION_APP, \"vsan.monitor.cluster.virtualObjects.type.extension_app\"],\n      [DisplayObjectType.FCD_DISK, \"vsan.monitor.cluster.virtualObjects.type.fcd_disk\"],\n      [DisplayObjectType.FILE_SHARE, \"vsan.monitor.cluster.virtualObjects.type.file_share\"],\n      [DisplayObjectType.FILE_SHARE_OBJECT, \"vsan.monitor.cluster.virtualObjects.type.file_share_object\"],\n      [DisplayObjectType.FILE_VOLUME, \"vsan.monitor.cluster.virtualObjects.type.file_volume\"],\n      [DisplayObjectType.FILE_VOLUME_OBJECT, \"vsan.monitor.cluster.virtualObjects.type.file_volume_object\"],\n      [DisplayObjectType.FOLDER, \"vsan.monitor.cluster.virtualObjects.type.folder\"],\n      [DisplayObjectType.ISCSI_LUN, \"vsan.monitor.cluster.virtualObjects.type.iscsi_lun\"],\n      [DisplayObjectType.ISCSI_TARGET, \"vsan.monitor.cluster.virtualObjects.type.iscsi_target\"],\n      [DisplayObjectType.OTHER, \"vsan.monitor.cluster.virtualObjects.type.other\"],\n      [DisplayObjectType.REPLICATION, \"vsan.monitor.cluster.virtualObjects.type.replication\"],\n      [DisplayObjectType.VM, \"vsan.monitor.cluster.virtualObjects.type.vm\"],\n      [DisplayObjectType.VM_MEMORY, \"vsan.monitor.cluster.virtualObjects.type.vm_memory\"],\n      [DisplayObjectType.VM_SWAP, \"vsan.monitor.cluster.virtualObjects.type.vm_swap\"],\n   ]);\n\n   static getVirtualObjectTypeFilter(displayType: DisplayObjectType, extensionId?: string, extensionName?: string):\n         VirtualObjectType {\n      return VirtualObjectType.Factory.create(null, displayType, extensionId, extensionName);\n   }\n\n   static getDisplayName(virtualObject: VirtualObjectModel): string {\n      return virtualObject.displayName\n            ? virtualObject.displayName\n            : virtualObject.name;\n   }\n\n   static getComplianceStatusLabel(status: VsanWhatIfComplianceStatus): string {\n      if (!status) {\n         return VsanUiUtils.getString(\"vsan.na.label\");\n      }\n      switch (status) {\n         case VsanWhatIfComplianceStatus.INACCESSIBLE:\n            return VsanUiUtils.getString(\"vsan.monitor.cluster.virtualObjects.whatIfResult.inaccessible\");\n         case VsanWhatIfComplianceStatus.NOT_COMPLIANT:\n            return VsanUiUtils.getString(\"vsan.monitor.cluster.virtualObjects.whatIfResult.incompliant\");\n         default:\n            Logger.warn(\"Unknown VsanWhatIfComplianceStatus status: \" + status);\n            return VsanUiUtils.getString(\"vsan.objectHealth.unknown\");\n      }\n   }\n\n   static getTypeLabel(type: VirtualObjectType): string {\n      return type.extendedTypeName\n            ? type.extendedTypeName\n            : VsanUiUtils.getString(VirtualObjectsTypeUtil.typeToLabelKey.get(type.displayType));\n   }\n\n   static isPerformanceSupported(item: VirtualObjectModel): boolean {\n      return VirtualObjectsTypeUtil.isAttachedBlockVolume(item) ||\n            VirtualObjectsTypeUtil.isFileShareOrFileVolume(item) ||\n            VirtualObjectsTypeUtil.isVmdkOrAttachedFCD(item);\n   }\n\n   static isVmWithAttachedVolume(item: VirtualObjectModel): boolean {\n      return item.vmRef &&\n            item.children &&\n            item.children.some(childItem => VirtualObjectsTypeUtil.isAttachedBlockVolume(childItem));\n   }\n\n   static isVolume(item: VirtualObjectModel): boolean {\n      return VirtualObjectsTypeUtil.isAttachedBlockVolume(item) ||\n            VirtualObjectsTypeUtil.isDetachedBlockVolume(item) ||\n            VirtualObjectsTypeUtil.isFileVolume(item);\n   }\n\n   static isAttachedBlockVolume(item: VirtualObjectModel): boolean {\n      return item.vmRef &&\n            (this.isExtensionBlockVolume(item) || item.type.vmodlType === VsanObjectType.attachedCnsVolBlock);\n   }\n\n   static isDetachedBlockVolume(item: VirtualObjectModel): boolean {\n      return !item.vmRef &&\n            (this.isExtensionBlockVolume(item) || item.type.vmodlType === VsanObjectType.detachedCnsVolBlock);\n   }\n\n   static isFileShareOrFileVolume(item: VirtualObjectModel): boolean {\n      return VirtualObjectsTypeUtil.isFileShare(item) ||\n            VirtualObjectsTypeUtil.isFileVolume(item);\n   }\n\n   static isFileShare(item: VirtualObjectModel): boolean {\n      return [DisplayObjectType.FILE_SHARE_OBJECT, DisplayObjectType.FILE_SHARE].includes(item.type.displayType);\n   }\n\n   static isFileVolume(item: VirtualObjectModel): boolean {\n      return !item.vmRef &&\n            [DisplayObjectType.FILE_VOLUME, DisplayObjectType.FILE_VOLUME_OBJECT].includes(item.type.displayType) &&\n            item.type.vmodlType === VsanObjectType.cnsVolFile;\n   }\n\n   private static isExtensionBlockVolume(item: VirtualObjectModel): boolean {\n      return item.type.displayType === DisplayObjectType.CNS_VOLUME &&\n            item.type.vmodlType === VsanObjectType.extension;\n   }\n\n   static isVmdkOrAttachedFCD(item: VirtualObjectModel): boolean {\n      return item.vmRef && [VsanObjectType.vdisk, VsanObjectType.improvedVirtualDisk].includes(item.type.vmodlType);\n   }\n}\n","<!-- Copyright 2021 VMware, Inc. All rights reserved. -- VMware Confidential -->\n<clr-icon *ngIf=\"item.iconId\" [attr.shape]=\"item.iconId\"></clr-icon>\n\n<clr-tooltip *ngIf=\"isNoPermissionVm; else other\" vsan-show-title>\n   <span clrTooltipTrigger class=\"no-read-permissions path-label\">{{item.name}}</span>\n   <clr-tooltip-content *ngIf=\"isTooltipVisible\"\n                        clrPosition=\"middle-right\"\n                        clrSize=\"md\">\n      {{getTooltipText(item.vmRef)}}\n   </clr-tooltip-content>\n</clr-tooltip>\n<ng-template #other>\n   <a *ngIf=\"isLink; else noLink\"\n      href=\"javascript://\"\n      (click)=\"linkClick.emit(item)\"\n      vsan-show-title>\n      {{displayName}}\n   </a>\n\n   <ng-template #noLink>\n      <span class=\"path-label\" vsan-show-title>{{displayName}}</span>\n   </ng-template>\n</ng-template>\n"]}