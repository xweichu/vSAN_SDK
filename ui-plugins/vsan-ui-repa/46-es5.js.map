{"version":3,"sources":["webpack:///src/app/vsan/common/component/inventory/tree-view/tree-node.html","webpack:///src/app/vsan/common/component/inventory/tree-view/tree-view.html","webpack:///src/app/vsan/common/component/inventory/tree-view/tree-nodes.component.ts","webpack:///src/app/vsan/common/component/inventory/tree-view/tree-view.component.ts","webpack:///src/app/vsan/common/component/inventory/tree-view/tree-node.component.ts","webpack:///src/app/vsan/common/component/inventory/tree-view/tree-nodes.html"],"names":["TreeNodesComponent","onNodeClicked","onChangeNodeVisibility","TreeViewComponent","changeDetector","showSearch","allowMultipleSelection","areObjectsEqual","obj1","obj2","moRef","areEqual","uuid","error","name","selectedObjectInfosChange","onNodeVisibilityChanged","setTimeout","destroyed","detectChanges","_nodes","newNodes","setNodesClrSelectedStatuses","_selectedObjectInfos","objectInfos","nodes","reduce","accumulator","currentNode","isEmpty","children","isSelected","filterClrSelectedNodes","clickedNode","selectedObjectInfos","map","node","objectInfo","emit","some","visible","setMultipleSelectionNodesStatuses","setSingleSelectionNodesStatuses","forEach","treeNode","onClrSelectedStateChange","selected","clrSelectedState","SELECTED","nodeClicked","updateSingleSelectionNodesStatuses","UNSELECTED","$event","stopImmediatePropagation","stopPropagation","TreeNodeComponent","changeNodeVisibility","refreshFilter","filter","recursiveNameCheck","nodeNameIncludesFilter","child","trim","toLowerCase","includes","_filter","newFilter","isExpanded","length","MouseEvent","parentNode","isChildNodeSelected"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;uEAWM;AAAA;AAAA,sBAKwE,UALxE;;AAAoC;;;;;AAKnB;;;;;AALjB;AAAA,oM,GAAA,qN,EAAA;AAAA;AAAA;AAAA;AAAA,U,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,U,GAKwE,kF,IACxE,4E,IAAA;AAAA;AANoC,6BAAmC,KAAnC,CAAmC,UAAnC;;AAApC,wBAAoC,SAApC;;AACiB,6BAAa,KAAb;AACA,6BAAiD,uBAAjD;AACA,6BAAiB,OAAjB;AACA,6BAA2C,oBAA3C;;AAJjB,wBACiB,SADjB,EAEiB,SAFjB,EAGiB,SAHjB,EAIiB,SAJjB;AAI4D,S,EAAA,I;AAAA;;;uEAb/D;AAAA;AAAA,sBAEuD,UAFvD;;AAEe;;;;;AAFf;AAAA,sN,GAAA,qL,EAAA,oK,EAAA,2N,EAAA,mK,EAAA;AAAA;AAAA;AAAA;AAAA,U,EAAA;AAAA;AAAA,U,GAEuD,+E,IACpD,mJ,IAA+B,qF,IAC5B,2I,GAAA,qJ,EAAA,+O,GAAkE,qF,IAClE,oL,IAAoF,uG,IAE9E,kF,IACH,+E,IACN,gH,GAAA;AAAA;AAAA,gB,GAMkB,4E,IACrB;AAAA;AAde,6BAAuC,KAAvC,CAAuC,gBAAvC;;AAFf,wBAEe,SAFf;;AASoB,6BAAkB,WAAlB;;AAAjB,yBAAiB,SAAjB;AAAmC,S,EAAA;AAAA;;AARvB;;AADf;AAAA;;AAAA,wBACe,SADf;;AAIgB,6BAA4C,KAA5C,CAA4C,UAA5C,CAA4C,aAA5C;;AAAV,yBAAU,SAAV;;AACyB,6BAAyB,QAAzB;;AAA0B;;AAAnD,yBAAyB,SAAzB,EAAmD,SAAnD;;AAAoF;;AAAA;AAEpF,S;AAAA;;;uEAqBH;AAAA;AAAA,sBAMwE,UANxE;;AAAoC;;;;;AAKnB;;;;;AACA;;;;;AANjB;AAAA,oM,GAAA,qN,EAAA;AAAA;AAAA;AAAA;AAAA,U,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,U,GAMwE,kF,IACxE,4E,IAAA;AAAA;AAPoC,6BAAmC,KAAnC,CAAmC,UAAnC;;AAApC,wBAAoC,SAApC;;AACiB,6BAAa,KAAb;AACA,6BAAiD,uBAAjD;AACA,6BAAiB,OAAjB;AACA,6BAA2C,oBAA3C;;AAJjB,wBACiB,SADjB,EAEiB,SAFjB,EAGiB,SAHjB,EAIiB,SAJjB;AAI4D,S,EAAA,I;AAAA;;;uEAd/D,yX,GAAA,qL,EAAA,oK,EAAA,2N,EAAA,mK,EAAA,4kB,EAAA;AAAA;AAAA,U,GAC2F,+E,IACxF;AAAA;AAAA,sBAAiH,UAAjH;;AAAQ;;;;;AAAR;AAAA,sB,GAAA,+M,GAAiH,qF,IAC9G,uJ,IAA+B,wF,IAC5B,2I,GAAA,qJ,EAAA,+O,GAAkE,wF,IAClE,oL,IAAoF,6G,IAE9E,qF,IACH,kF,IACA,+E,IACT,gH,GAAA;AAAA;AAAA,gB,GAOkB,4E,IACrB;AAAA;;AAlBA;;AAUoB,6BAAkB,WAAlB;;AAAjB,yBAAiB,SAAjB;AAAmC,S,EAAA;AAAA;;AATvB;;AADf;AAAA;;AAAA,wBACe,SADf;;AAEiF,6BAAkC,KAAlC,CAAkC,UAAlC;;AAA9E,wBAA8E,SAA9E;;AAEgB,6BAA4C,KAA5C,CAA4C,UAA5C,CAA4C,aAA5C;;AAAV,yBAAU,SAAV;;AACyB,6BAAyB,QAAzB;;AAA0B;;AAAnD,yBAAyB,SAAzB,EAAmD,SAAnD;;AAAoF;;AAAA;AAEpF,S;AAAA;;;uEA1BZ,yH,IAAmC,+E,IAChC,mH,GAAA;AAAA;AAAA,gB,GAgBgB,iF,IAEhB,mH,GAAA;AAAA;AAAA,gB,GAkBgB,4E,IACnB;AAAA;AArCkB,6BAA8B,uBAA9B;;AAAf,wBAAe,SAAf;;AAkBe,8BAA+B,uBAA/B;;AAAf,wBAAe,SAAf;AAA8C,S,EAAA,I;AAAA;;;uEApBkC,4E,IACnF,mH,GAAA;AAAA;AAAA,gB,GAAmC;AAAA;AAArB,6BAAoB,KAApB,CAAoB,OAApB;;AAAd,wBAAc,SAAd;AAAkC,S,EAAA,I;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;uECAlC;AAAA;AAAA,sBAMiE,UANjE;;AAAmB;;;;;AACA;;;;;AACA;;;;;AAGA;;;;;AALnB;AAAA,oM,GAAA;AAAA;AAAA;AAAA;AAAA,U,GAMiE,4E,IACjE;AAAA;AADmB,6BAA6C,wBAA7C;;AANnB,wBAMmB,SANnB;AAMgE,S,EAAA,I;AAAA;;;uEAI7D,oJ,IAAsD,0F,GAAA,wD,GAAA,I,EAAA;AAAA;;AAAA;AAEtD,S;AAAA;;;uEACA;AAAA;AAAA,sBAMmE,UANnE;;AAKgB;;;;;AACA;;;;;AANhB;AAAA,gM,GAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,U,GAMmE,+E,IACnE;AAAA;AANgB,4BAAa,QAAb,CAAa,SAAb;AAEA,6BAAiB,OAAjB;AADA,6BAAiD,uBAAjD;AAEA,6BAA2C,oBAA3C;;AAJhB,wBACgB,SADhB,EAGgB,SAHhB,EAEgB,SAFhB,EAIgB,SAJhB;AAI2D,S,EAAA,I;AAAA;;;2MAlBqB,4E,IACnF,mH,GAAA;AAAA;AAAA,gB,GAOoB,8E,IAEpB;AAAA;;AAAA;;;;;;SAAA,E,8FAAA,E,kGAAA,C;;aAAsC,4E,IACnC,gH,GAAA;AAAA;AAAA,gB,GAEM,4E,IACN,gH,GAAA;AAAA;AAAA,gB,GAOiB,yE,IACT,4E,IACX;AAAA;AAnBmB,6BAAkB,WAAlB;;AAHnB,wBAGmB,SAHnB;;AAUgC,8BAAwB,gBAAxB;;AAA7B,yBAA6B,SAA7B;;AAGgB,6BAA0B,MAA1B;;AAAhB,yBAAgB,SAAhB;AAA0C,S,EAAA;AAJ7C;;AAAA;;AAAA;;AAAA;AAAsC,S;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACVtC;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;AAIA;;;;;UAQaA,kB,6BALb;AAAA;;AAoBG,aAAAC,aAAA,GAAwC,IAAI,0DAAJ,EAAxC;AAGA,aAAAC,sBAAA,GAA6C,IAAI,0DAAJ,EAA7C;AACF,O;;;;;;;;;;;;;;;;;AC/BD;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;AAiBA;;;;;;UAUaC,iB;AAiEV,mCAAoBC,cAApB,EAAuD;AAAA;;AAAA;;AAAnC,eAAAA,cAAA,GAAAA,cAAA;AA5DpB,eAAAC,UAAA,GAAsB,IAAtB;AAMA,eAAAC,sBAAA,GAAyB,KAAzB;AAEA;;;;;;AAMA,eAAAC,eAAA,GAAmE,UAACC,IAAD,EAAmBC,IAAnB,EAAwC;AACxG,gBAAI,CAACD,IAAD,IAAS,CAACC,IAAd,EAAoB;AACjB,qBAAO,KAAP;AACF,aAHuG,CAKxG;;;AACA,gBAAID,IAAI,CAACE,KAAL,IAAcD,IAAI,CAACC,KAAvB,EAA8B;AAC3B,qBAAO,sEAAcC,QAAd,CAAuBH,IAAI,CAACE,KAA5B,EAAmCD,IAAI,CAACC,KAAxC,CAAP;AACF;;AAED,gBAAIF,IAAI,CAACI,IAAL,IAAaH,IAAI,CAACG,IAAtB,EAA4B;AACzB,qBAAOJ,IAAI,CAACI,IAAL,KAAcH,IAAI,CAACG,IAA1B;AACF;;AAED,gEAAOC,KAAP,CACM,sGADN;;AAEA,mBAAOL,IAAI,CAACM,IAAL,KAAcL,IAAI,CAACK,IAA1B,CAhBwG,CAgBxE;AAClC,WAjBD;;AA4CA,eAAAC,yBAAA,GAAwD,IAAI,0DAAJ,EAAxD;;AAgCA,eAAAC,uBAAA,GAA0B,YAAM;AAC7BC,sBAAU,CAAC,YAAM;AACd,kBAAI,KAAI,CAACb,cAAL,IAAuB,CAAE,KAAI,CAACA,cAAL,CAAgCc,SAA7D,EAAwE;AACrE,qBAAI,CAACd,cAAL,CAAoBe,aAApB;AACF;AACH,aAJS,CAAV;AAKF,WAND;AA7BC;;;;eA1BD,eAAS;AACN,mBAAO,KAAKC,MAAZ;AACF,W;eAED,aACUC,QADV,EACgC;AAC7B,iBAAKD,MAAL,GAAcC,QAAQ,GAAGA,QAAH,GAAc,EAApC;AACA,iBAAKC,2BAAL;AACF;;;eAUD,eAAuB;AACpB,mBAAO,KAAKC,oBAAZ;AACF,W;eARD,aACwBC,WADxB,EACmD;AAChD,iBAAKD,oBAAL,GAA4BC,WAA5B;AACA,iBAAKF,2BAAL;AACF;;;iBAYO,gCAAuBG,KAAvB,EAAwC;AAAA;;AAC7C,mBAAOA,KAAK,CAACC,MAAN,CAAa,UAACC,WAAD,EAA0BC,WAA1B,EAAoD;AACrE,kBAAI,4DAAYC,OAAZ,CAAoBD,WAAW,CAACE,QAAhC,CAAJ,EAA+C;AAC5C,uBAAOF,WAAW,CAACG,UAAZ,kCACKJ,WADL,IACkBC,WADlB,KAECD,WAFR;AAGF;;AACD,qBAAOC,WAAW,CAACG,UAAZ,kCACK,MAAI,CAACC,sBAAL,CAA4BJ,WAAW,CAACE,QAAxC,CADL,IACwDF,WADxD,KAEC,MAAI,CAACI,sBAAL,CAA4BJ,WAAW,CAACE,QAAxC,CAFR;AAGF,aATM,EASJ,EATI,CAAP;AAUF;;;iBAED,qBAAYG,WAAZ,EAAmC;AAChC,gBAAI,KAAK3B,sBAAT,EAAiC;AAC9B,mBAAK4B,mBAAL,GAA2B,KAAKF,sBAAL,CAA4B,KAAKP,KAAjC,EAAwCU,GAAxC,CAA4C,UAAAC,IAAI;AAAA,uBAAIA,IAAI,CAACC,UAAT;AAAA,eAAhD,CAA3B;AACF,aAFD,MAEO;AACJ,mBAAKH,mBAAL,GAA2B,CAACD,WAAW,CAACI,UAAb,CAA3B;AACF;;AAED,iBAAKtB,yBAAL,CAA+BuB,IAA/B,CAAoC,KAAKJ,mBAAzC;AACF;;;eAED,eAAmB;AAChB,mBAAO,KAAKT,KAAL,IAAc,KAAKA,KAAL,CAAWc,IAAX,CAAgB,UAAAH,IAAI;AAAA,qBAAIA,IAAI,CAACI,OAAT;AAAA,aAApB,CAArB;AACF;;;iBAUO,uCAA8B;AACnC,gBAAI,KAAKlC,sBAAT,EAAiC;AAC9B,mBAAKmC,iCAAL;AACF,aAFD,MAEO;AACJ,mBAAKC,+BAAL;AACF;AACH;;;iBAEO,6CAAoC;AAAA;;AACzC,iBAAKjB,KAAL,CAAWkB,OAAX,CAAmB,UAAAC,QAAQ,EAAI;AAC5B;AACAA,sBAAQ,CAACC,wBAAT,GAAoC,IAApC;;AACA,kBAAMC,QAAQ,GAAY,CAAC,4DAAYjB,OAAZ,CAAoB,MAAI,CAACK,mBAAzB,CAAD,IACpB,MAAI,CAACA,mBAAL,CAAyBK,IAAzB,CAA8B,UAAAF,UAAU;AAAA,uBAAI,MAAI,CAAC9B,eAAL,CAAqB8B,UAArB,EAAiCO,QAAQ,CAACP,UAA1C,CAAJ;AAAA,eAAxC,CADN;;AAEA,kBAAIS,QAAJ,EAAc;AACXF,wBAAQ,CAACG,gBAAT,GAA4B,8DAAiBC,QAA7C;AACF,eAP2B,CAQ5B;;;AACAJ,sBAAQ,CAACC,wBAAT,GAAoC,UAACT,IAAD,EAAoB;AACrD,sBAAI,CAACa,WAAL,CAAiBb,IAAjB;AACF,eAFD;AAGF,aAZD;AAaF;;;iBAEO,2CAAkC;AACvC,iBAAKc,kCAAL,CAAwC,KAAKzB,KAA7C;AACF;;;iBAEO,4CAAmCA,KAAnC,EAAsD;AAAA;;AAC3D,gBAAI,4DAAYI,OAAZ,CAAoBJ,KAApB,CAAJ,EAAgC;AAC7B;AACF;;AACDA,iBAAK,CAACkB,OAAN,CAAc,UAAAP,IAAI,EAAI;AACnB,kBAAMU,QAAQ,GAAY,CAAC,4DAAYjB,OAAZ,CAAoB,MAAI,CAACK,mBAAzB,CAAD,IACpB,MAAI,CAAC3B,eAAL,CAAqB,MAAI,CAAC2B,mBAAL,CAAyB,CAAzB,CAArB,EAAkDE,IAAI,CAACC,UAAvD,CADN;;AAEAD,kBAAI,CAACW,gBAAL,GAAwBD,QAAQ,GAAG,8DAAiBE,QAApB,GAA+B,8DAAiBG,UAAhF;;AACA,kBAAI,CAAC,4DAAYtB,OAAZ,CAAoBO,IAAI,CAACN,QAAzB,CAAL,EAAyC;AACtC,sBAAI,CAACoB,kCAAL,CAAwCd,IAAI,CAACN,QAA7C;AACF;AACH,aAPD;AAQF;AAED;;;;;;;iBAIA,yBAAgBsB,MAAhB,EAA+B;AAC5BA,kBAAM,CAACC,wBAAP;AACAD,kBAAM,CAACE,eAAP;AACF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACnLJ;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;UAUaC,iB;AALb;AAAA;;AAAA;;AA0BG,eAAAjD,sBAAA,GAAyB,KAAzB;AAMA,eAAA2C,WAAA,GAAsC,IAAI,0DAAJ,EAAtC;AAGA,eAAAO,oBAAA,GAA2C,IAAI,0DAAJ,EAA3C;;AAyCQ,eAAAC,aAAA,GAAgB,YAAM;AAC3B,gBAAI,CAAC,MAAI,CAACC,MAAV,EAAkB;AACf,oBAAI,CAACtB,IAAL,CAAUI,OAAV,GAAoB,IAApB;AACF,aAFD,MAEO;AACJ,oBAAI,CAACJ,IAAL,CAAUI,OAAV,GAAoB,MAAI,CAACmB,kBAAL,CAAwB,MAAI,CAACvB,IAA7B,CAApB;AACF;;AACD,kBAAI,CAACoB,oBAAL,CAA0BlB,IAA1B;AACF,WAPO;;AASA,eAAAqB,kBAAA,GAAqB,UAACvB,IAAD,EAA6B;AACvD,gBAAI,MAAI,CAACwB,sBAAL,CAA4BxB,IAA5B,CAAJ,EAAuC;AACpC,qBAAO,IAAP;AACF;;AAHsD,uDAIrCA,IAAI,CAACN,QAJgC;AAAA;;AAAA;AAIvD,kEAAiC;AAAA,oBAAxB+B,KAAwB;;AAC9B,oBAAI,MAAI,CAACF,kBAAL,CAAwBE,KAAxB,CAAJ,EAAoC;AACjC,yBAAO,IAAP;AACF;AACH;AARsD;AAAA;AAAA;AAAA;AAAA;;AASvD,mBAAO,KAAP;AACF,WAVO;;AAYA,eAAAD,sBAAA,GAAyB,UAACxB,IAAD,EAA6B;AAC3D,mBAAO,MAAI,CAACsB,MAAL,IAAetB,IAAI,CAACC,UAAL,CAAgBvB,IAAhB,CAAqBgD,IAArB,GAA4BC,WAA5B,GAA0CC,QAA1C,CAAmD,MAAI,CAACN,MAAL,CAAYI,IAAZ,GAAmBC,WAAnB,EAAnD,CAAtB;AACF,WAFO;AAGV;;;;eAxFE,eAAU;AACP,mBAAO,KAAKE,OAAZ;AACF,W;eAED,aACWC,SADX,EAC8B;AAC3B,iBAAKD,OAAL,GAAeC,SAAf;;AACA,gBAAI,KAAKR,MAAT,EAAiB;AACd,mBAAKtB,IAAL,CAAU+B,UAAV,GAAuB,IAAvB;AACF;;AACD,iBAAKV,aAAL;AACF;;;eAcD,eAAc;AACX,mBAAO,KAAKrB,IAAL,CAAUN,QAAV,IAAsB,KAAKM,IAAL,CAAUN,QAAV,CAAmBsC,MAAnB,GAA4B,CAAzD;AACF;;;eAED,eAAW;AACR,mBAAO,KAAKR,sBAAL,CAA4B,KAAKxB,IAAjC,CAAP;AACF;;;iBAED,uBAAcgB,MAAd,EAA6C;AAC1C,gBAAIhB,IAAJ;;AACA,gBAAIgB,MAAM,YAAYiB,UAAtB,EAAkC;AAC/B;AACAjC,kBAAI,GAAG,KAAKA,IAAZ;AACAgB,oBAAM,CAACE,eAAP,GAH+B,CAGL;AAC5B,aAJD,MAIO;AACJlB,kBAAI,GAAGgB,MAAP,CADI,CACW;AACjB;;AAED,iBAAKH,WAAL,CAAiBX,IAAjB,CAAsBF,IAAtB;AACF,W,CAED;;;;iBACQ,6BAAoBkC,UAApB,EAAwC;AAC7C,gBAAI,CAACA,UAAU,CAACxC,QAAZ,IAAwBwC,UAAU,CAACxC,QAAX,CAAoBsC,MAApB,KAA+B,CAA3D,EAA8D;AAC3D,qBAAO,KAAP;AACF,aAH4C,CAI7C;;;AAJ6C,wDAK3BE,UAAU,CAACxC,QALgB;AAAA;;AAAA;AAK7C,qEAAuC;AAAA,oBAA9B+B,KAA8B;;AACpC,oBAAIA,KAAK,CAAC9B,UAAN,EAAJ,EAAwB;AACrB,yBAAO,IAAP;AACF;;AACD,oBAAI,KAAKwC,mBAAL,CAAyBV,KAAzB,MAAoC,IAAxC,EAA8C;AAC3C,yBAAO,IAAP;AACF;AACH,eAZ4C,CAa7C;;AAb6C;AAAA;AAAA;AAAA;AAAA;;AAc7C,mBAAO,KAAP;AACF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;uEC9EJ;AAAA;AAAA,sBAMuE,UANvE;;AAKgB;;;;;AACA;;;;;AANhB;AAAA,gM,GAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,U,GAMuE,4E,IACvE;AAAA;AANgB,4BAAc,QAAd,CAAc,SAAd;AAEA,6BAAiB,OAAjB;AADA,6BAAiD,uBAAjD;AAEA,6BAA2C,oBAA3C;;AAJhB,wBACgB,SADhB,EAGgB,SAHhB,EAEgB,SAFhB,EAIgB,SAJhB;AAI2D,S,EAAA,I;AAAA;;;uEALmB,4E,IAC9E,oH,GAAA;AAAA;AAAA,gB,GAMuE;AAAA;AANvD,uDAAoC,KAApC,CAAoC,QAApC;;AAAhB,wBAAgB,SAAhB;AAAoD,S,EAAA,I;AAAA","file":"46-es5.js","sourcesContent":["<!--Copyright 2019-2021 VMware, Inc. All rights reserved. -- VMware Confidential-->\n<ng-container *ngIf=\"node.visible\">\n   <clr-tree-node *ngIf=\"allowMultipleSelection\"\n                  id=\"{{'tree-node-' + node.objectInfo.name}}\"\n                  [(clrSelected)]=\"node.clrSelectedState\">\n      <div class=\"tree-node-content\">\n         <clr-icon [attr.shape]=\"node.objectInfo.primaryIconId\"></clr-icon>\n         <div class=\"text-nowrap\" [class.matched]=\"matched\" title=\"{{node.objectInfo.name}}\">\n            {{node.objectInfo.name}}\n         </div>\n      </div>\n      <vsan-tree-nodes *ngIf=\"expandable\" [(clrIfExpanded)]=\"node.isExpanded\"\n                       [node]=\"node\"\n                       [allowMultipleSelection]=\"allowMultipleSelection\"\n                       [filter]=\"filter\"\n                       [selectedObjectInfos]=\"selectedObjectInfos\"\n                       (onChangeNodeVisibility)=\"changeNodeVisibility.emit()\">\n      </vsan-tree-nodes>\n   </clr-tree-node>\n\n   <clr-tree-node *ngIf=\"!allowMultipleSelection\"\n                  id=\"{{'tree-node-' + node.objectInfo.name //noinspection XmlDuplicatedId}}\">\n      <button (click)=\"onNodeClicked($event)\" class=\"clr-treenode-link text-nowrap\" [class.active]=\"node.isSelected()\">\n         <div class=\"tree-node-content\">\n            <clr-icon [attr.shape]=\"node.objectInfo.primaryIconId\"></clr-icon>\n            <div class=\"text-nowrap\" [class.matched]=\"matched\" title=\"{{node.objectInfo.name}}\">\n               {{node.objectInfo.name}}\n            </div>\n         </div>\n      </button>\n      <vsan-tree-nodes *ngIf=\"expandable\" [(clrIfExpanded)]=\"node.isExpanded\"\n                       [node]=\"node\"\n                       [allowMultipleSelection]=\"allowMultipleSelection\"\n                       [filter]=\"filter\"\n                       [selectedObjectInfos]=\"selectedObjectInfos\"\n                       (onNodeClicked)=\"onNodeClicked($event)\"\n                       (onChangeNodeVisibility)=\"changeNodeVisibility.emit()\">\n      </vsan-tree-nodes>\n   </clr-tree-node>\n</ng-container>","<!--Copyright 2019-2020 VMware, Inc. All rights reserved. -- VMware Confidential-->\n<vsan-search-input (keyup)=\"stopPropagation($event)\"\n                   (keydown)=\"stopPropagation($event)\"\n                   (keypress)=\"stopPropagation($event)\"\n                   *ngIf=\"showSearch\"\n                   id=\"tree-view-search-input\"\n                   (filterChange)=\"filter=$event\"\n                   [inputAriaLabelKey]=\"searchInputAriaLabelKey\">\n</vsan-search-input>\n\n<clr-tree class=\"tree-view-container\">\n   <div id=\"no-items-available\" *ngIf=\"!hasVisibleNodes\">\n      {{\"inventory.browser.dialog.no.items\" | localized}}\n   </div>\n   <vsan-tree-node *ngFor=\"let node of nodes\"\n                   [node]=\"node\"\n                   [allowMultipleSelection]=\"allowMultipleSelection\"\n                   [filter]=\"filter\"\n                   [selectedObjectInfos]=\"selectedObjectInfos\"\n                   (nodeClicked)=\"nodeClicked($event)\"\n                   (changeNodeVisibility)=\"onNodeVisibilityChanged()\">\n   </vsan-tree-node>\n</clr-tree>\n","/* Copyright 2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, EventEmitter, Input, Output} from \"@angular/core\";\nimport {TreeNode} from \"./tree-node\";\nimport ObjectInfo from \"@component/inventory/tree-view/ObjectInfo\";\n/**\n * A separate component is required because of https://github.com/vmware/clarity/issues/5514\n */\n@Component({\n   selector: \"vsan-tree-nodes\",\n   templateUrl: \"tree-nodes.html\",\n   styleUrls: [\"tree-nodes.scss\"],\n})\nexport class TreeNodesComponent {\n\n   @Input()\n   node: TreeNode;\n\n   @Input()\n   allowMultipleSelection;\n\n   @Input()\n   filter: string;\n\n   @Input()\n   selectedObjectInfos: ObjectInfo[];\n\n   @Output()\n   onNodeClicked: EventEmitter<TreeNode> = new EventEmitter<TreeNode>();\n\n   @Output()\n   onChangeNodeVisibility: EventEmitter<void> = new EventEmitter<void>();\n}","/* Copyright 2019-2020 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {\n   ChangeDetectionStrategy,\n   ChangeDetectorRef,\n   Component,\n   EventEmitter,\n   Input,\n   Output,\n   ViewRef\n} from \"@angular/core\";\nimport {TreeNode} from \"./tree-node\";\nimport {ManagedObject} from \"@service/managed-object\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {ClrSelectedState} from \"@clr/angular\";\nimport ObjectInfo from \"@component/inventory/tree-view/ObjectInfo\";\nimport {Logger} from \"@util/logger\";\n\n/**\n * This component provides a search input and tree view, and the data for the tree view should be prepared in advance.\n * If the data for the tree view is lazy loading, you should use another component InventoryBrowserComponent.\n */\n@Component({\n   selector: \"vsan-tree-view\",\n   templateUrl: \"tree-view.html\",\n   styleUrls: [\"tree-view.scss\"],\n   changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TreeViewComponent {\n\n   filter: string;\n\n   @Input()\n   showSearch: boolean = true;\n\n   @Input()\n   searchInputAriaLabelKey: string;\n\n   @Input()\n   allowMultipleSelection = false;\n\n   /**\n    * Implement this comparator if the ObjectInfos does not have moRef or uuid\n    * @param obj1\n    * @param obj2\n    */\n   @Input()\n   areObjectsEqual: (obj1: ObjectInfo, obj2: ObjectInfo) => boolean = (obj1: ObjectInfo, obj2: ObjectInfo) => {\n      if (!obj1 || !obj2) {\n         return false;\n      }\n\n      // default implementation covering comparison by moRef or uuid\n      if (obj1.moRef && obj2.moRef) {\n         return ManagedObject.areEqual(obj1.moRef, obj2.moRef);\n      }\n\n      if (obj1.uuid && obj2.uuid) {\n         return obj1.uuid === obj2.uuid;\n      }\n\n      Logger.error(\n            \"Implement the object comparator in order for the TreeView selection functionality to work correctly!\");\n      return obj1.name === obj2.name; // compare by name (not perfect, but still something)\n   };\n\n   private _nodes: TreeNode[];\n\n   get nodes(): TreeNode[] {\n      return this._nodes;\n   }\n\n   @Input()\n   set nodes(newNodes: TreeNode[]) {\n      this._nodes = newNodes ? newNodes : [];\n      this.setNodesClrSelectedStatuses();\n   }\n\n   private _selectedObjectInfos: ObjectInfo[];\n\n   @Input()\n   set selectedObjectInfos(objectInfos: ObjectInfo[]) {\n      this._selectedObjectInfos = objectInfos;\n      this.setNodesClrSelectedStatuses();\n   }\n\n   get selectedObjectInfos(): ObjectInfo[] {\n      return this._selectedObjectInfos;\n   }\n\n   @Output()\n   selectedObjectInfosChange: EventEmitter<ObjectInfo[]> = new EventEmitter<ObjectInfo[]>();\n\n   constructor(private changeDetector: ChangeDetectorRef) {\n   }\n\n   private filterClrSelectedNodes(nodes: TreeNode[]): TreeNode[] {\n      return nodes.reduce((accumulator: TreeNode[], currentNode: TreeNode) => {\n         if (VsanUiUtils.isEmpty(currentNode.children)) {\n            return currentNode.isSelected()\n                  ? [...accumulator, currentNode]\n                  : accumulator;\n         }\n         return currentNode.isSelected()\n               ? [...this.filterClrSelectedNodes(currentNode.children), currentNode]\n               : this.filterClrSelectedNodes(currentNode.children);\n      }, []);\n   }\n\n   nodeClicked(clickedNode: TreeNode) {\n      if (this.allowMultipleSelection) {\n         this.selectedObjectInfos = this.filterClrSelectedNodes(this.nodes).map(node => node.objectInfo);\n      } else {\n         this.selectedObjectInfos = [clickedNode.objectInfo];\n      }\n\n      this.selectedObjectInfosChange.emit(this.selectedObjectInfos);\n   }\n\n   get hasVisibleNodes(): boolean {\n      return this.nodes && this.nodes.some(node => node.visible);\n   }\n\n   onNodeVisibilityChanged = () => {\n      setTimeout(() => {\n         if (this.changeDetector && !(this.changeDetector as ViewRef).destroyed) {\n            this.changeDetector.detectChanges();\n         }\n      });\n   };\n\n   private setNodesClrSelectedStatuses() {\n      if (this.allowMultipleSelection) {\n         this.setMultipleSelectionNodesStatuses();\n      } else {\n         this.setSingleSelectionNodesStatuses();\n      }\n   }\n\n   private setMultipleSelectionNodesStatuses() {\n      this.nodes.forEach(treeNode => {\n         // Remove the callback while setting the status manually to prevent in from multiple executions\n         treeNode.onClrSelectedStateChange = null;\n         const selected: boolean = !VsanUiUtils.isEmpty(this.selectedObjectInfos) &&\n               this.selectedObjectInfos.some(objectInfo => this.areObjectsEqual(objectInfo, treeNode.objectInfo));\n         if (selected) {\n            treeNode.clrSelectedState = ClrSelectedState.SELECTED;\n         }\n         // Add the callback after the status is set\n         treeNode.onClrSelectedStateChange = (node: TreeNode) => {\n            this.nodeClicked(node);\n         };\n      });\n   }\n\n   private setSingleSelectionNodesStatuses() {\n      this.updateSingleSelectionNodesStatuses(this.nodes);\n   }\n\n   private updateSingleSelectionNodesStatuses(nodes: TreeNode[]) {\n      if (VsanUiUtils.isEmpty(nodes)) {\n         return;\n      }\n      nodes.forEach(node => {\n         const selected: boolean = !VsanUiUtils.isEmpty(this.selectedObjectInfos) &&\n               this.areObjectsEqual(this.selectedObjectInfos[0], node.objectInfo);\n         node.clrSelectedState = selected ? ClrSelectedState.SELECTED : ClrSelectedState.UNSELECTED;\n         if (!VsanUiUtils.isEmpty(node.children)) {\n            this.updateSingleSelectionNodesStatuses(node.children);\n         }\n      });\n   }\n\n   /**\n    * Prevents propagation of the event.\n    * Useful to prevent behaviours such as closing of a dropdown when space is typed in the filter field.\n    */\n   stopPropagation($event: Event) {\n      $event.stopImmediatePropagation();\n      $event.stopPropagation();\n   }\n}\n","/* Copyright 2019-2020 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, EventEmitter, Input, Output} from \"@angular/core\";\nimport {TreeNode} from \"./tree-node\";\nimport ObjectInfo from \"@component/inventory/tree-view/ObjectInfo\";\n\n@Component({\n   selector: \"vsan-tree-node\",\n   templateUrl: \"tree-node.html\",\n   styleUrls: [\"tree-node.scss\"],\n})\nexport class TreeNodeComponent {\n\n   @Input()\n   node: TreeNode;\n\n   private _filter: string;\n\n   get filter(): string {\n      return this._filter;\n   }\n\n   @Input()\n   set filter(newFilter: string) {\n      this._filter = newFilter;\n      if (this.filter) {\n         this.node.isExpanded = true;\n      }\n      this.refreshFilter();\n   }\n\n   @Input()\n   allowMultipleSelection = false;\n\n   @Input()\n   selectedObjectInfos: ObjectInfo[];\n\n   @Output()\n   nodeClicked: EventEmitter<TreeNode> = new EventEmitter<TreeNode>();\n\n   @Output()\n   changeNodeVisibility: EventEmitter<void> = new EventEmitter<void>();\n\n   get expandable(): boolean {\n      return this.node.children && this.node.children.length > 0;\n   }\n\n   get matched(): boolean {\n      return this.nodeNameIncludesFilter(this.node);\n   }\n\n   onNodeClicked($event: MouseEvent | TreeNode) {\n      let node: TreeNode;\n      if ($event instanceof MouseEvent) {\n         // If the event is triggered by clicking on the target node, select the target node to emit\n         node = this.node;\n         $event.stopPropagation(); // We don't need to propagate the event to parent nodes\n      } else {\n         node = $event; // If the target node is already selected, pass it to the parent\n      }\n\n      this.nodeClicked.emit(node);\n   }\n\n   // Check recursively if any of the child nodes are selected\n   private isChildNodeSelected(parentNode: TreeNode): boolean {\n      if (!parentNode.children || parentNode.children.length === 0) {\n         return false;\n      }\n      // Checks if a child node is selected and expand its parents\n      for (let child of parentNode.children) {\n         if (child.isSelected()) {\n            return true;\n         }\n         if (this.isChildNodeSelected(child) === true) {\n            return true;\n         }\n      }\n      // None of the current children or their children are selected\n      return false;\n   }\n\n   private refreshFilter = () => {\n      if (!this.filter) {\n         this.node.visible = true;\n      } else {\n         this.node.visible = this.recursiveNameCheck(this.node);\n      }\n      this.changeNodeVisibility.emit();\n   };\n\n   private recursiveNameCheck = (node: TreeNode): boolean => {\n      if (this.nodeNameIncludesFilter(node)) {\n         return true;\n      }\n      for (let child of node.children) {\n         if (this.recursiveNameCheck(child)) {\n            return true;\n         }\n      }\n      return false;\n   };\n\n   private nodeNameIncludesFilter = (node: TreeNode): boolean => {\n      return this.filter && node.objectInfo.name.trim().toLowerCase().includes(this.filter.trim().toLowerCase());\n   };\n}","<!--Copyright 2021 VMware, Inc. All rights reserved. -- VMware Confidential-->\n<vsan-tree-node *ngFor=\"let child of node?.children\"\n                [node]=\"child\"\n                [allowMultipleSelection]=\"allowMultipleSelection\"\n                [filter]=\"filter\"\n                [selectedObjectInfos]=\"selectedObjectInfos\"\n                (nodeClicked)=\"onNodeClicked.emit($event)\"\n                (changeNodeVisibility)=\"onChangeNodeVisibility.emit()\">\n</vsan-tree-node>"]}