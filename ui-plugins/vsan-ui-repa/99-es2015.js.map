{"version":3,"sources":["./src/app/vsan/disk-management/views/filter/disk-mgmt-filter.html","./src/app/vsan/disk-management/views/actions/cluster-actions.html","./src/app/vsan/disk-management/views/filter/host-list-filter-health.component.ts","./src/app/vsan/disk-management/views/actions/adddisk/add-disk.html","./src/app/vsan/disk-management/disk-management.module.ts","./src/app/vsan/disk-management/views/filter/storage-group-details-filter-disk-tier.component.ts","./src/app/generated/unmount-disk-group-spec.ts","./src/app/vsan/common/directive/accessibility/dropdown-navigation.directive.ts","./src/app/vsan/disk-management/views/actions/stopmanagingpmem/stop-managing-pmem.component.ts","./src/app/vsan/disk-management/views/filter/storage-group-details-filter-transport-type.component.ts","./src/app/vsan/disk-management/views/model/view-objects-context.ts","./src/app/vsan/common/util/promise/promise-baton.ts","./src/app/vsan/disk-management/views/filter/storage-group-details-filter-claimable-state.component.ts","./src/app/vsan/disk-management/views/actions/mountdiskgroup/mount-disk-group.component.ts","./src/app/vsan/disk-management/views/filter/storage-group-details-filter-physical-location.component.ts","./src/app/vsan/common/component/navigation/vsan-breadcrumb-nav.html","./src/app/vsan/disk-management/views/host-health-icon-shape.pipe.ts","./src/app/vsan/disk-management/views/actions/deletediskgroup/delete-disk-group.component.ts","./src/app/vsan/common/component/navigation/breadcrumb-route.model.ts","./src/app/vsan/disk-management/disk-management-screen-reader.service.ts","./src/app/vsan/disk-management/views/filter/storage-group-details-filter-device-state.component.ts","./src/app/vsan/disk-management/views/actions/creategroup/create-group.html","./src/app/vsan/disk-management/views/actions/creategroup/create-group.component.ts","./src/app/vsan/disk-management/views/host-list.html","./src/app/vsan/disk-management/views/filter/storage-group-details-filter-device-operational-state.component.ts","./src/app/vsan/disk-management/views/filter/host-list-filter-health.html","./src/app/vsan/disk-management/views/actions/precheck/pre-check-issues.html","./src/app/vsan/disk-management/views/disk-mgmt-summary.component.ts","./src/app/vsan/common/component/navigation/vsan-breadcrumb-nav.component.ts","./src/app/vsan/disk-management/views/actions/marklocal/mark-local-prompt.component.ts","./src/app/vsan/disk-management/views/actions/unmountdiskgroup/unmount-disk-group.html","./src/app/vsan/disk-management/views/actions/deletediskgroup/dedup-enabled-warning.html","./src/app/vsan/disk-management/views/storage-group-details.component.ts","./src/app/vsan/disk-management/views/storage-capacity.component.ts","./src/app/vsan/disk-management/views/actions/adddisk/add-disk.component.ts","./src/app/vsan/common/component/navigation/vsan-breadcrumb.service.ts","./src/app/vsan/disk-management/disk-management.html","./src/app/vsan/disk-management/views/actions/deletedisks/delete-disks.component.ts","./src/app/vsan/disk-management/views/actions/host-actions.html","./src/app/vsan/disk-management/views/actions/unmountdiskgroup/unmount-disk-group.component.ts","./src/app/generated/remove-disk-group-spec.ts","./src/app/vsan/disk-management/views/actions/markssd/mark-ssd-prompt.component.ts","./src/app/vsan/disk-management/views/actions/stopmanagingpmem/stop-managing-pmem.html","./src/app/vsan/disk-management/views/actions/deletediskgroup/delete-disk-group.html","./src/app/vsan/disk-management/views/filter/storage-group-details-filter-health.component.ts","./src/app/vsan/common/component/diskmgmt/diskmgmt-common.module.ts","./src/app/vsan/common/model/loading-aware-property.ts","./src/app/vsan/disk-management/views/filter/host-list-filter-groups.component.ts","./src/app/vsan/disk-management/disk-management.component.ts","./src/app/vsan/disk-management/views/actions/mountdiskgroup/mount-disk-group.html","./src/app/vsan/disk-management/views/actions/deletedisks/delete-disks.html","./src/app/vsan/disk-management/views/actions/precheck/pre-check-issues.component.ts","./src/app/vsan/disk-management/views/actions/mountdisk/mount-storage-pool-disk.html","./src/app/generated/recreate-disk-group-spec.ts","./src/app/vsan/disk-management/views/actions/claim-disks/claim-disks-dialog.html","./src/app/vsan/disk-management/views/storage-groups.html","./src/app/vsan/disk-management/views/actions/host-actions.component.ts","./src/app/vsan/common/util/promise/race-condition-safe.decorator.ts","./src/app/vsan/disk-management/views/actions/recreatediskgroup/recreate-disk-group.html","./src/app/vsan/common/util/vsan-dialog-util.ts","./src/app/vsan/disk-management/disk-management-routing.service.ts","./src/app/vsan/disk-management/views/disk-mgmt-entities-summary-service.ts","./src/app/vsan/disk-management/views/storage-groups.component.ts","./src/app/vsan/disk-management/views/actions/storage-group-actions.component.ts","./src/app/vsan/disk-management/views/actions/cluster-actions.component.ts","./src/app/vsan/disk-management/views/actions/deletedisks/delete-vsan-direct-disks.component.ts","./src/app/vsan/disk-management/views/filter/storage-group-details-filter-drive-locality.component.ts","./src/app/vsan/disk-management/views/actions/claim-disks/claim-disks-dialog.component.ts","./src/app/vsan/common/component/diskmgmt/disks-property-retriever.ts","./src/app/vsan/disk-management/views/actions/marklocal/mark-local-prompt.html","./src/app/vsan/disk-management/views/host-list.component.ts","./src/app/vsan/disk-management/views/actions/recreatediskgroup/recreate-disk-group.component.ts","./src/app/vsan/disk-management/views/actions/deletedisks/delete-vsan-direct-disks.html","./src/app/vsan/disk-management/views/filter/disk-mgmt-filter.component.ts","./src/app/generated/vsan-query-data-evacuation-info-spec.ts","./src/app/vsan/disk-management/views/filter/host-list-filter-state.component.ts","./src/app/vsan/disk-management/views/actions/markssd/mark-ssd-prompt.html","./src/app/vsan/disk-management/views/disk-mgmt-summary.html","./src/app/vsan/disk-management/views/actions/storage-group-actions.html","./src/app/generated/remove-disk-spec.ts","./src/app/vsan/disk-management/views/model/storage-group-data.ts","./src/app/generated/disk-mapping-spec.ts","./src/app/vsan/common/component/diskmgmt/model/storage-data.ts","./src/app/vsan/disk-management/views/actions/storage-actions.html","./src/app/vsan/disk-management/views/actions/storage-actions.component.ts","./src/app/vsan/disk-management/views/actions/deletediskgroup/dedup-enabled-warning.component.ts","./src/app/vsan/disk-management/views/storage-group-details.html","./src/app/vsan/disk-management/views/filter/storage-group-details-filter-drive-type.component.ts","./src/app/vsan/common/service/flow/loader-name.ts","./src/app/vsan/disk-management/views/export/disk-mgmt-export-config.ts","./src/app/vsan/disk-management/views/storage-capacity.html","./src/app/vsan/disk-management/views/actions/mountdisk/mount-storage-pool-disk.component.ts","./src/app/vsan/disk-management/views/actions/unmountdisk/unmount-storage-pool-disk.component.ts","./src/app/vsan/common/directive/reactive-forms/disable-control.directive.ts","./src/app/vsan/disk-management/views/actions/unmountdisk/unmount-storage-pool-disk.html"],"names":[],"mappings":"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","file":"99-es2015.js","sourcesContent":["<!--Copyright 2020-2021 VMware, Inc. All rights reserved. -- VMware Confidential-->\n<vsan-enumerated-filter [selectionResolver]=\"comparator\"\n                        [filtersCount]=\"keys.length\">\n   <vsan-enumerated-filter-item *ngFor=\"let key of keys\"\n                                [label]=\"key | localized\"\n                                [value]=\"key\"\n                                [iconVisible]=\"false\">\n   </vsan-enumerated-filter-item>\n</vsan-enumerated-filter>\n","<!--Copyright 2020-2022 VMware, Inc. All rights reserved. -- VMware Confidential-->\n<clr-tooltip *ngIf=\"clusterCapabilities?.isObjectIdentitiesSupported\">\n   <span clrTooltipTrigger\n         [vsan-ignore-focus]=\"!actionDisabled(DiskManagementActionAvailabilityService.VIEW_CLUSTER_OBJECTS_ID)\">\n      <button id=\"{{DiskManagementActionAvailabilityService.VIEW_CLUSTER_OBJECTS_ID}}\"\n              class=\"btn btn-sm btn-link no-spacing\"\n              [disabled]=\"actionDisabled(DiskManagementActionAvailabilityService.VIEW_CLUSTER_OBJECTS_ID)\"\n              (click)=\"viewClusterObjects()\">\n         {{\"vsan.actions.viewClusterObjects.label\" | localized}}\n      </button>\n   </span>\n   <clr-tooltip-content\n         *ngIf=\"actionDisabled(DiskManagementActionAvailabilityService.VIEW_CLUSTER_OBJECTS_ID)\"\n         id=\"view-cluster-objects-description\"\n         clrPosition=\"top-right\"\n         clrSize=\"md\">\n      {{getActionButtonDisabledReason(DiskManagementActionAvailabilityService.VIEW_CLUSTER_OBJECTS_ID)}}\n   </clr-tooltip-content>\n</clr-tooltip>\n<clr-tooltip *ngIf=\"!autoClaimMode\">\n   <span clrTooltipTrigger\n         [vsan-ignore-focus]=\"!actionDisabled(DiskManagementActionAvailabilityService.SEMI_AUTO_CLAIM_DISKS_ID)\">\n      <button id=\"{{DiskManagementActionAvailabilityService.SEMI_AUTO_CLAIM_DISKS_ID}}\"\n              class=\"btn btn-sm btn-link no-spacing\"\n              [disabled]=\"actionDisabled(DiskManagementActionAvailabilityService.SEMI_AUTO_CLAIM_DISKS_ID)\"\n              (click)=\"invokeSemiAutoClaim()\">\n         {{\"vsan.actions.semiAutoClaimDisks.count.label\" | localized : clusterEligibleDiskCount}}\n      </button>\n   </span>\n   <clr-tooltip-content\n         *ngIf=\"actionDisabled(DiskManagementActionAvailabilityService.SEMI_AUTO_CLAIM_DISKS_ID)\"\n         id=\"claim-disks-description\"\n         clrPosition=\"top-right\"\n         clrSize=\"md\">\n      {{getActionButtonDisabledReason(DiskManagementActionAvailabilityService.SEMI_AUTO_CLAIM_DISKS_ID)}}\n   </clr-tooltip-content>\n</clr-tooltip>\n<clr-tooltip *ngIf=\"hasDuplicatePciIdDevices?.isLoading || hasDuplicatePciIdDevices?.data\">\n   <span clrTooltipTrigger\n         [vsan-ignore-focus]=\"!actionDisabled(DiskManagementActionAvailabilityService.VIEW_DUPLICATE_PCI_ID_DEVICES)\">\n      <button id=\"{{DiskManagementActionAvailabilityService.VIEW_DUPLICATE_PCI_ID_DEVICES}}\"\n              class=\"btn btn-sm btn-link no-spacing\"\n              [clrLoading]=\"hasDuplicatePciIdDevices.isLoading\"\n              [disabled]=\"actionDisabled(DiskManagementActionAvailabilityService.VIEW_DUPLICATE_PCI_ID_DEVICES)\"\n              (click)=\"viewDuplicatePciIdDevices()\">\n         {{\"vsan.cluster.duplicatePciIdDevices.diskMgmt.dialog.label\" | localized}}\n      </button>\n   </span>\n   <clr-tooltip-content\n         *ngIf=\"actionDisabled(DiskManagementActionAvailabilityService.VIEW_DUPLICATE_PCI_ID_DEVICES)\"\n         id=\"duplicate-pci-id-description\"\n         clrPosition=\"top-right\"\n         clrSize=\"md\">\n      {{getActionButtonDisabledReason(DiskManagementActionAvailabilityService.VIEW_DUPLICATE_PCI_ID_DEVICES)}}\n   </clr-tooltip-content>\n</clr-tooltip>\n<clr-tooltip *ngIf=\"clusterCapabilities.isVsanMaxSingleTierSupported && vsanConfig.isVsanMaxEnabled\">\n   <span clrTooltipTrigger\n         [vsan-ignore-focus]=\"!actionDisabled(DiskManagementActionAvailabilityService.EDIT_VSAN_MANAGED_DISK_CLAIM_ID)\">\n      <button id=\"{{DiskManagementActionAvailabilityService.EDIT_VSAN_MANAGED_DISK_CLAIM_ID}}\"\n              class=\"btn btn-sm btn-link no-spacing\"\n              [disabled]=\"actionDisabled(DiskManagementActionAvailabilityService.EDIT_VSAN_MANAGED_DISK_CLAIM_ID)\"\n              (click)=\"editVsanDiskManagement()\">\n         {{\"vsan.actions.max.diskClaim.title\" | localized}}\n      </button>\n   </span>\n   <clr-tooltip-content\n         *ngIf=\"actionDisabled(DiskManagementActionAvailabilityService.EDIT_VSAN_MANAGED_DISK_CLAIM_ID)\"\n         id=\"edit-vsan-setting-description\"\n         clrPosition=\"top-right\"\n         clrSize=\"md\">\n      {{getActionButtonDisabledReason(DiskManagementActionAvailabilityService.EDIT_VSAN_MANAGED_DISK_CLAIM_ID)}}\n   </clr-tooltip-content>\n</clr-tooltip>","/* Copyright 2020 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component} from \"@angular/core\";\nimport {DiskMgmtHostUtil} from \"@util/disk-mgmt-host.util\";\nimport {EnumeratedFilterSelectionResolver} from \"@component/datagrid/filter/enumerated-filter.component\";\nimport {HostData} from \"@generated/host-data\";\nimport {DiskMgmtFilterComponent} from \"./disk-mgmt-filter.component\";\n\n@Component({\n   templateUrl: \"host-list-filter-health.html\",\n   selector: \"vsan-host-list-filter-health\",\n   styleUrls: [\"disk-mgmt-filter.scss\"],\n})\nexport class HostListFilterHealthComponent extends DiskMgmtFilterComponent<HostData> {\n   readonly comparator: EnumeratedFilterSelectionResolver<HostData, string> =\n         new class extends EnumeratedFilterSelectionResolver<HostData, string> {\n            isSelected(item: HostData, selectedHealthLabels: string[]): boolean {\n               return selectedHealthLabels.some(health => (health === DiskMgmtHostUtil.getHealthKey(item)));\n            }\n         }();\n}","<!--Copyright 2017-2021 VMware, Inc. All rights reserved. -- VMware Confidential-->\n<vsan-create-prompt\n      [title]=\"getDialogTitle()\"\n      [subtitle]=\"diskGroup ? diskGroup.name : ''\"\n      [blockButton]=\"busy || disksLoading\"\n      [(alertMessages)]=\"alerts\"\n      [confirmText]=\"'vsan.common.add' | localized\"\n      (onConfirm)=\"onOkClicked()\">\n   <div class=\"dialog-body\">\n      <span id=\"select-disks-label\">\n         {{(isVsanMaxEnabled\n            ? \"vsan.dialog.addDisksToStoragePool.selectDisks\"\n            : \"vsan.dialog.addDisksToDiskGroup.selectDisks\")\n            | localized}}\n      </span>\n      <vsan-select-disks [clusterRef]=\"clusterRef\"\n                         [hostRef]=\"diskGroup.ownerHostRef\"\n                         [isAllFlashDiskGroup]=\"isAllFlashDiskGroup\"\n                         [isVsanMaxEnabled]=\"isVsanMaxEnabled\"\n                         (disksLoaded)=\"onLoadingComplete()\"\n                         (selectedDisksChange)=\"selectedDisks = $event\">\n      </vsan-select-disks>\n   </div>\n\n</vsan-create-prompt>\n","/* Copyright 2020-2022 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {CommonModule} from \"@angular/common\";\nimport {NgModule} from \"@angular/core\";\nimport {FormsModule} from \"@angular/forms\";\nimport {RouterModule, Routes} from \"@angular/router\";\nimport {ClarityModule} from \"@clr/angular\";\nimport {VsanChartModule} from \"@component/chart/chart.module\";\nimport {DiskmgmtCommonModule} from \"@component/diskmgmt/diskmgmt-common.module\";\nimport {ExportModule} from \"@component/export/export.module\";\nimport {PrecheckModule} from \"@component/precheck/pre-check.module\";\nimport {UnavailableViewModule} from \"@component/unavailable-view/unavailable-view.module\";\nimport {UpgradeModule} from \"@component/upgrade/upgrade.module\";\nimport {VirtualObjectsTableStateService} from \"@component/virtual-objects-table/virtual-objects-table-state.service\";\nimport {VirtualObjectsTableModule} from \"@component/virtual-objects-table/virtual-objects-table.module\";\nimport {SpaceEfficiencyService} from \"@service/space-efficiency-service\";\nimport {ReferenceWatcher} from \"@util/reference-watcher\";\nimport {VsanCommonModule} from \"app/vsan/common/vsan-common.module\";\nimport {ClipboardModule} from \"ngx-clipboard\";\nimport {DiskManagementRoutingService} from \"./disk-management-routing.service\";\nimport {DiskManagementScreenReaderService} from \"./disk-management-screen-reader.service\";\nimport {DiskManagementComponent} from \"./disk-management.component\";\nimport {AddDiskComponent} from \"./views/actions/adddisk/add-disk.component\";\nimport {ClaimDisksDialogComponent} from \"./views/actions/claim-disks/claim-disks-dialog.component\";\nimport {ClusterActionsComponent} from \"./views/actions/cluster-actions.component\";\nimport {CreateGroupComponent} from \"./views/actions/creategroup/create-group.component\";\nimport {DedupEnabledWarningComponent} from \"./views/actions/deletediskgroup/dedup-enabled-warning.component\";\nimport {DeleteDiskGroupComponent} from \"./views/actions/deletediskgroup/delete-disk-group.component\";\nimport {DeleteDisksComponent} from \"./views/actions/deletedisks/delete-disks.component\";\nimport {DeleteVsanDirectDisksComponent} from \"./views/actions/deletedisks/delete-vsan-direct-disks.component\";\nimport {HostActionsComponent} from \"./views/actions/host-actions.component\";\nimport {MarkLocalComponent} from \"./views/actions/marklocal/mark-local-prompt.component\";\nimport {MarkSsdComponent} from \"./views/actions/markssd/mark-ssd-prompt.component\";\nimport {MountStoragePoolDiskComponent} from \"./views/actions/mountdisk/mount-storage-pool-disk.component\";\nimport {MountDiskGroupComponent} from \"./views/actions/mountdiskgroup/mount-disk-group.component\";\nimport {PreCheckIssuesComponent} from \"./views/actions/precheck/pre-check-issues.component\";\nimport {RecreateDiskGroupComponent} from \"./views/actions/recreatediskgroup/recreate-disk-group.component\";\nimport {StopManagingPmemComponent} from \"./views/actions/stopmanagingpmem/stop-managing-pmem.component\";\nimport {StorageActionsComponent} from \"./views/actions/storage-actions.component\";\nimport {StorageGroupActionsComponent} from \"./views/actions/storage-group-actions.component\";\nimport {UnmountStoragePoolDiskComponent} from \"./views/actions/unmountdisk/unmount-storage-pool-disk.component\";\nimport {UnmountDiskGroupComponent} from \"./views/actions/unmountdiskgroup/unmount-disk-group.component\";\nimport {DiskMgmtEntitiesSummaryService} from \"./views/disk-mgmt-entities-summary-service\";\nimport {DiskMgmtSummaryComponent} from \"./views/disk-mgmt-summary.component\";\nimport {DiskMgmtFilterComponent} from \"./views/filter/disk-mgmt-filter.component\";\nimport {HostListFilterGroupsComponent} from \"./views/filter/host-list-filter-groups.component\";\nimport {HostListFilterHealthComponent} from \"./views/filter/host-list-filter-health.component\";\nimport {HostListFilterStateComponent} from \"./views/filter/host-list-filter-state.component\";\nimport {StorageGroupDetailsFilterClaimableStateComponent} from \"./views/filter/storage-group-details-filter-claimable-state.component\";\nimport {StorageGroupDetailsFilterDeviceOperationalStateComponent} from \"./views/filter/storage-group-details-filter-device-operational-state.component\";\nimport {StorageGroupDetailsFilterDeviceStateComponent} from \"./views/filter/storage-group-details-filter-device-state.component\";\nimport {StorageGroupDetailsFilterDiskTierComponent} from \"./views/filter/storage-group-details-filter-disk-tier.component\";\nimport {StorageGroupDetailsFilterDriveLocalityComponent} from \"./views/filter/storage-group-details-filter-drive-locality.component\";\nimport {StorageGroupDetailsFilterDriveTypeComponent} from \"./views/filter/storage-group-details-filter-drive-type.component\";\nimport {StorageGroupDetailsFilterHealthComponent} from \"./views/filter/storage-group-details-filter-health.component\";\nimport {StorageGroupDetailsFilterPhysicalLocationComponent} from \"./views/filter/storage-group-details-filter-physical-location.component\";\nimport {StorageGroupDetailsFilterTransportTypeComponent} from \"./views/filter/storage-group-details-filter-transport-type.component\";\nimport {HostHealthIconShapePipe} from \"./views/host-health-icon-shape.pipe\";\nimport {HostListComponent} from \"./views/host-list.component\";\nimport {StorageCapacityComponent} from \"./views/storage-capacity.component\";\nimport {StorageGroupDetailsComponent} from \"./views/storage-group-details.component\";\nimport {StorageGroupsComponent} from \"./views/storage-groups.component\";\nimport {DiskManagementActionAvailabilityService} from \"./views/validation/disk-management-action-availability.service\";\n\nconst routes: Routes = [\n   {\n      path: \"\",\n      component: DiskManagementComponent,\n   },\n   {\n      path: \"addDisk\",\n      component: AddDiskComponent,\n   },\n   {\n      path: \"createDiskGroup\",\n      component: CreateGroupComponent,\n   },\n   {\n      path: \"deleteDiskGroup\",\n      component: DeleteDiskGroupComponent,\n   },\n   {\n      path: \"deleteDisks\",\n      component: DeleteDisksComponent,\n   },\n   {\n      path: \"deleteVsanDirectDisks\",\n      component: DeleteVsanDirectDisksComponent,\n   },\n   {\n      path: \"deleteDiskUnsupportedDialog\",\n      component: DedupEnabledWarningComponent,\n   },\n   {\n      path: \"recreateDiskGroup\",\n      component: RecreateDiskGroupComponent,\n   },\n   {\n      path: \"mountDiskGroup\",\n      component: MountDiskGroupComponent,\n   },\n   {\n      path: \"unmountDiskGroup\",\n      component: UnmountDiskGroupComponent,\n   },\n   {\n      path: \"unmountStoragePoolDisk\",\n      component: UnmountStoragePoolDiskComponent,\n   },\n   {\n      path: \"mountStoragePoolDisk\",\n      component: MountStoragePoolDiskComponent,\n   },\n   {\n      path: \"markLocal\",\n      component: MarkLocalComponent,\n   },\n   {\n      path: \"markSsd\",\n      component: MarkSsdComponent,\n   },\n   {\n      path: \"semiAutoClaim\",\n      component: ClaimDisksDialogComponent,\n   },\n   {\n      path: \"preCheckIssues\",\n      component: PreCheckIssuesComponent,\n   },\n   {\n      path: \"stopManagingPmem\",\n      component: StopManagingPmemComponent,\n   },\n];\n\n@NgModule({\n   imports: [\n      CommonModule,\n      FormsModule,\n      ClarityModule,\n      VsanCommonModule,\n      UnavailableViewModule,\n      DiskmgmtCommonModule,\n      PrecheckModule,\n      UpgradeModule,\n      VsanChartModule,\n      VirtualObjectsTableModule,\n      ExportModule,\n      ClipboardModule,\n      RouterModule.forChild(routes),\n   ],\n   declarations: [\n      DiskManagementComponent,\n      DiskMgmtSummaryComponent,\n      HostListComponent,\n      HostHealthIconShapePipe,\n      DiskMgmtFilterComponent,\n      HostListFilterHealthComponent,\n      HostListFilterStateComponent,\n      HostListFilterGroupsComponent,\n      StorageGroupDetailsFilterHealthComponent,\n      StorageGroupDetailsFilterDriveTypeComponent,\n      StorageGroupDetailsFilterDiskTierComponent,\n      StorageGroupDetailsFilterDeviceStateComponent,\n      StorageGroupDetailsFilterClaimableStateComponent,\n      StorageGroupDetailsFilterDeviceOperationalStateComponent,\n      StorageGroupDetailsFilterDriveLocalityComponent,\n      StorageGroupDetailsFilterTransportTypeComponent,\n      StorageGroupDetailsFilterPhysicalLocationComponent,\n      StorageGroupsComponent,\n      StorageGroupDetailsComponent,\n      StorageCapacityComponent,\n      // Aggregated Actions\n      ClusterActionsComponent,\n      HostActionsComponent,\n      StorageGroupActionsComponent,\n      StorageActionsComponent,\n      // Actions\n      DedupEnabledWarningComponent,\n      RecreateDiskGroupComponent,\n      MountDiskGroupComponent,\n      UnmountDiskGroupComponent,\n      UnmountStoragePoolDiskComponent,\n      MountStoragePoolDiskComponent,\n      AddDiskComponent,\n      CreateGroupComponent,\n      DeleteDiskGroupComponent,\n      DeleteDisksComponent,\n      DeleteVsanDirectDisksComponent,\n      MarkLocalComponent,\n      MarkSsdComponent,\n      ClaimDisksDialogComponent,\n      PreCheckIssuesComponent,\n      StopManagingPmemComponent,\n   ],\n   providers: [\n      DiskManagementActionAvailabilityService,\n      DiskManagementRoutingService,\n      DiskManagementScreenReaderService,\n      DiskMgmtEntitiesSummaryService,\n      ReferenceWatcher,\n      SpaceEfficiencyService,\n      VirtualObjectsTableStateService,\n   ],\n})\nexport class DiskManagementModule {\n}\n","/* Copyright 2020 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component} from \"@angular/core\";\nimport {EnumeratedFilterSelectionResolver} from \"@component/datagrid/filter/enumerated-filter.component\";\nimport {DiskMgmtFilterComponent} from \"./disk-mgmt-filter.component\";\nimport {DiskMgmtDiskUtil} from \"@util/disk-mgmt-disk.util\";\nimport {StorageData} from \"@component/diskmgmt/model/storage-data\";\n\n@Component({\n   templateUrl: \"disk-mgmt-filter.html\",\n   selector: \"vsan-storage-group-details-filter-disk-tier\",\n   styleUrls: [\"disk-mgmt-filter.scss\"],\n})\nexport class StorageGroupDetailsFilterDiskTierComponent extends DiskMgmtFilterComponent<StorageData> {\n\n   readonly comparator: EnumeratedFilterSelectionResolver<StorageData, string> =\n         new class extends EnumeratedFilterSelectionResolver<StorageData, string> {\n            isSelected(item: StorageData, selectedStateKeys: string[]): boolean {\n               return selectedStateKeys.some(state =>\n                     state === DiskMgmtDiskUtil.getLocalizedStorage(item.claimOption));\n            }\n         }();\n}","import {VsanDiskMapping} from '@generated/vsan-disk-mapping';\nimport {DecommissionMode} from '@generated/decommission-mode';\n\nexport interface UnmountDiskGroupSpec {\n\n   diskMapping: VsanDiskMapping;\n   decommissionMode: DecommissionMode;\n} //class UnmountDiskGroupSpec\n\nexport module UnmountDiskGroupSpec{\nexport class Factory {\n\n   static create = (diskMapping: VsanDiskMapping, decommissionMode: DecommissionMode): UnmountDiskGroupSpec => {\n      return { diskMapping: diskMapping, decommissionMode: decommissionMode, };\n   }\n\n\n} //class Factory\n\n} //module UnmountDiskGroupSpec\n","/* Copyright (c) 2021 VMware, Inc. All rights reserved. VMware Confidential */\nimport {\n   AfterViewInit,\n   Directive, ElementRef, HostListener, Input,\n} from \"@angular/core\";\nimport {ReferenceWatcher} from \"@util/reference-watcher\";\n\n/**\n * A directive that provides keyboard navigation for clr-dropdown menus using Arrow keys and Tab / Shift + Tab.\n */\n@Directive({\n   selector: \"[vsan-dropdown-navigation]\",\n})\nexport class DropdownNavigationDirective implements AfterViewInit {\n   constructor(private el: ElementRef, private refWatcher: ReferenceWatcher) { }\n\n   /**\n    * Nesting level of the dropdown controls.\n    */\n   @Input(\"vsan-dropdown-navigation\")\n   nestingLevel: number = 1;\n\n   ngAfterViewInit(): void {\n      setTimeout(() => this.focusElements(this.el.nativeElement, this.nestingLevel), 0);\n   }\n\n   @HostListener(\"keydown\", [\"$event\"])\n   onKeydown(e: KeyboardEvent): void {\n      const ARROW_DOWN_KEY: string = \"ArrowDown\";\n      const ARROW_UP_KEY: string = \"ArrowUp\";\n      const TAB_KEY: string = \"Tab\";\n\n      let el: HTMLElement = document.activeElement as HTMLElement;\n      if (![TAB_KEY, ARROW_DOWN_KEY, ARROW_UP_KEY].includes(e.key)) {\n         if (e.key === \"Enter\") {\n            el.click();\n         }\n         return;\n      }\n\n      const isBackwards: boolean = e.key === ARROW_UP_KEY || (e.key === TAB_KEY && e.shiftKey);\n      el = this.getNextActive(el, isBackwards);\n\n      if (el?.focus) {\n         el.focus();\n      }\n\n      e.preventDefault();\n      e.stopImmediatePropagation();\n      e.stopPropagation();\n   }\n\n   private focusElements(target: HTMLElement, nestingLevel: number): void {\n      if (nestingLevel === 0) {\n         // Focus the first not disabled button.\n         let el: HTMLElement = target.children[0] as HTMLElement;\n         if ((el as HTMLSelectElement)?.disabled) {\n            el = this.getNextActive(el);\n         }\n         el.focus();\n         return;\n      }\n\n      this.focusElements(target.children[0] as HTMLElement, nestingLevel - 1);\n   }\n\n   private getNextActive(el: HTMLElement, isBackwards: boolean = false): HTMLElement {\n      let getNext: (current: HTMLElement) => HTMLElement;\n      if (!isBackwards) {\n         getNext = (current: HTMLElement) => current ? current.nextElementSibling as HTMLElement : null;\n      } else {\n         getNext = (current: HTMLElement) => current ? current.previousElementSibling as HTMLElement : null;\n      }\n\n      el = getNext(el);\n      while ((el as HTMLSelectElement)?.disabled) {\n         const next: HTMLElement = getNext(el);\n         if (!next) {\n            break;\n         }\n         el = next;\n      }\n\n      return el;\n   }\n}","/* Copyright 2020 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component} from \"@angular/core\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {ManagedObject} from \"@service/managed-object\";\nimport {ConfigureVsanClusterMutationProvider} from \"@generated/configure-vsan-cluster-mutation-provider\";\n\n@Component({\n   templateUrl: \"stop-managing-pmem.html\",\n   styleUrls: [\"../actions-common.scss\"],\n   selector: \"vsan-stop-managing-pmem\",\n})\nexport class StopManagingPmemComponent {\n   alerts: string[];\n   warningMessage: string;\n   footerText: string;\n\n   constructor(private configureClusterMutationProvider: ConfigureVsanClusterMutationProvider) { }\n\n   ngOnInit(): void {\n      this.warningMessage = VsanUiUtils.getString(\"vsan.dialog.stopManagingPmem.description\");\n      this.footerText = VsanUiUtils.getString(\"vsan.dialog.stopManagingPmem.confirm\");\n   }\n\n   onOkClicked = () => {\n      this.configureClusterMutationProvider.stopManagingPmem(ManagedObject.contextObject)\n            .then(this.handleTask)\n            .catch(this.onError);\n   };\n\n   private handleTask = (task: ManagedObject) => {\n      VsanUiUtils.closeModalDialog(task);\n   };\n\n   private onError = (message: any) => {\n      this.alerts = [message];\n   };\n}","/* Copyright 2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component} from \"@angular/core\";\nimport {EnumeratedFilterSelectionResolver} from \"@component/datagrid/filter/enumerated-filter.component\";\nimport {DiskMgmtFilterComponent} from \"./disk-mgmt-filter.component\";\nimport {StorageData} from \"@component/diskmgmt/model/storage-data\";\nimport {DiskMgmtDiskUtil} from \"@util/disk-mgmt-disk.util\";\n\n@Component({\n   templateUrl: \"disk-mgmt-filter.html\",\n   selector: \"vsan-storage-group-details-filter-transport-type\",\n   styleUrls: [\"disk-mgmt-filter.scss\"],\n})\nexport class StorageGroupDetailsFilterTransportTypeComponent extends DiskMgmtFilterComponent<StorageData> {\n\n   readonly comparator: EnumeratedFilterSelectionResolver<StorageData, string> =\n         new class extends EnumeratedFilterSelectionResolver<StorageData, string> {\n            isSelected(item: StorageData, selectedTransportTypeKeys: string[]): boolean {\n               return selectedTransportTypeKeys.some(\n                     transportType => transportType === DiskMgmtDiskUtil.getTransportTypeText(item.transportType));\n            }\n         }();\n}","/* Copyright 2020 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {DiskGroupData} from \"@generated/disk-group-data\";\nimport {StorageData} from \"@component/diskmgmt/model/storage-data\";\nimport {HostData} from \"@generated/host-data\";\n\n/**\n * A model for passing context from view cluster/host/diskgroup/storage objects action.\n */\nexport class ViewObjectsContext {\n   constructor(public host: HostData, public group: DiskGroupData, public storage: StorageData) {\n   }\n}","/* Copyright 2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {CancelablePromise} from \"@util/promise/cancelable-promise\";\n\nexport class PromiseBaton<TResult> {\n   private ongoingPromise: CancelablePromise<TResult>;\n\n   constructor() {\n      this.ongoingPromise = null;\n   }\n\n   /**\n    * Only the last passed promise will be resolved. Others will be canceled.\n    * @param promise - The only pending promise that we want to resolve.\n    * @param rejectOnCancel - Whether we want to rethrow the cancellation of the returned promise.\n    * @example\n    * ```ts\n    * // If later we cancel the returned promise it will be rejected with the following error: { canceled: true }.\n    * resolveOnly(promise, true);\n    * ```\n    * ```ts\n    * // If later we cancel the returned promise it won't be rejected and the 'catch' callback won't be invoked.\n    * resolveOnly(promise, false);\n    * ```\n    */\n   resolveOnly(promise: Promise<TResult>, rejectOnCancel: boolean = false): Promise<TResult> {\n      this.cancelLastOne();\n      // We wrap it into CancelablePromise to be able to cancel this one without affecting the original promise.\n      // Original promise subscribers still will be able to get the result.\n      this.ongoingPromise = new CancelablePromise(promise, rejectOnCancel);\n      return this.ongoingPromise.promise;\n   }\n\n   /**\n    * Reject the currently running promise.\n    */\n   cancelLastOne(): void {\n      if (this.ongoingPromise) {\n         this.ongoingPromise.cancel();\n      }\n   }\n}","/* Copyright 2020 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component} from \"@angular/core\";\nimport {EnumeratedFilterSelectionResolver} from \"@component/datagrid/filter/enumerated-filter.component\";\nimport {DiskMgmtFilterComponent} from \"./disk-mgmt-filter.component\";\nimport {DiskMgmtDiskUtil} from \"@util/disk-mgmt-disk.util\";\nimport {StorageData} from \"@component/diskmgmt/model/storage-data\";\n\n@Component({\n   templateUrl: \"disk-mgmt-filter.html\",\n   selector: \"vsan-storage-group-details-filter-claimable-state\",\n   styleUrls: [\"disk-mgmt-filter.scss\"],\n})\nexport class StorageGroupDetailsFilterClaimableStateComponent extends DiskMgmtFilterComponent<StorageData> {\n\n   readonly comparator: EnumeratedFilterSelectionResolver<StorageData, string> =\n         new class extends EnumeratedFilterSelectionResolver<StorageData, string> {\n            isSelected(item: StorageData, selectedStateKeys: string[]): boolean {\n               return selectedStateKeys.some(state =>\n                     state === DiskMgmtDiskUtil.localizeClaimableState(item.claimableState));\n            }\n         }();\n}","/* Copyright 2019-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, OnInit} from \"@angular/core\";\nimport {ManagedObject} from \"@service/managed-object\";\nimport {DiskGroupActionContext} from \"@navigation/context/disk-group-action-context\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {DiskGroupMutationService} from \"@generated/disk-group-mutation-service\";\nimport {HostActionData} from \"@model/host-action.data\";\nimport {DiskGroupActionData} from \"@model/disk-group-action.data\";\nimport {LoadingIndicator} from \"@service/flow/loading-indicator.decorator\";\nimport {Loader} from \"@service/flow/loader.decorator\";\nimport {ErrorHandler} from \"@service/flow/error-handler.decorator\";\n\n/**\n * This component is used to mount disk group.\n */\n@Component({\n   templateUrl: \"mount-disk-group.html\",\n   selector: \"vsan-mount-disk-group\",\n   styleUrls: [\"../actions-common.scss\"],\n})\nexport class MountDiskGroupComponent implements OnInit {\n\n   @LoadingIndicator()\n   loading: boolean;\n\n   alerts: string[] = [];\n   host: HostActionData;\n   diskGroup: DiskGroupActionData;\n\n   constructor(private diskGroupMutationService: DiskGroupMutationService) {\n   }\n\n   async ngOnInit(): Promise<void> {\n      const context: DiskGroupActionContext = VsanUiUtils.getModalContext();\n      this.host = context.host;\n      this.diskGroup = context.diskGroup;\n   }\n\n   @Loader()\n   async ok(): Promise<void> {\n      this.alerts = [];\n\n      const task: ManagedObject = await this.diskGroupMutationService.mountDiskGroup(this.host.hostRef, this.diskGroup.diskMapping);\n      this.closeDialog(task);\n   }\n\n   private closeDialog = (task: ManagedObject) => {\n      VsanUiUtils.closeModalDialog(task);\n   };\n\n   @ErrorHandler()\n   private handleError(error: any): void {\n      this.alerts = [error];\n   }\n}\n","/* Copyright 2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component} from \"@angular/core\";\nimport {EnumeratedFilterSelectionResolver} from \"@component/datagrid/filter/enumerated-filter.component\";\nimport {DiskMgmtFilterComponent} from \"./disk-mgmt-filter.component\";\nimport {DiskMgmtDiskUtil} from \"@util/disk-mgmt-disk.util\";\nimport {StorageData} from \"@component/diskmgmt/model/storage-data\";\n\n@Component({\n   templateUrl: \"disk-mgmt-filter.html\",\n   selector: \"vsan-storage-group-details-filter-physical-location\",\n   styleUrls: [\"disk-mgmt-filter.scss\"],\n})\nexport class StorageGroupDetailsFilterPhysicalLocationComponent extends DiskMgmtFilterComponent<StorageData> {\n\n   readonly comparator: EnumeratedFilterSelectionResolver<StorageData, string> =\n         new class extends EnumeratedFilterSelectionResolver<StorageData, string> {\n            isSelected(item: StorageData, selectedPhysicalLocationKeys: string[]): boolean {\n               return selectedPhysicalLocationKeys\n                     .some(locality => locality === DiskMgmtDiskUtil.getPhysicalLocation(item.physicalLocation));\n            }\n         }();\n}","<!-- Copyright 2020-2021 VMware, Inc. All rights reserved. -- VMware Confidential -->\n<ul>\n   <li *ngFor=\"let route of routes; let index = index\">\n      <ng-container *ngIf=\"!route.isHidden\">\n         <ng-container *ngIf=\"index\">\n            <ng-container *ngTemplateOutlet=\"rightCaret; context: {disabled: false}\"></ng-container>\n         </ng-container>\n         <ng-container *ngIf=\"!route.isList\">\n            <button class=\"btn btn-link no-spacing route-link\"\n                    vsan-show-title\n                    role=\"link\"\n                    *ngIf=\"route.onTrigger\"\n                    (click)=\"routeTo(route, true)\"\n                    [attr.aria-current]=\"getRouteAriaCurrent(index)\">\n               {{route.link}}\n            </button>\n            <ng-container *ngIf=\"!route.onTrigger\">\n               <button class=\"btn btn-link no-spacing disabled route-link\"\n                       tabindex=\"-1\"\n                       vsan-show-title\n                       role=\"link\">\n                  {{route.link}}\n                  <!-- Add right caret to the last non-anchor route-->\n                  <ng-container *ngIf=\"isLastRoute(index)\">\n                     <ng-container *ngTemplateOutlet=\"rightCaret; context: {disabled: true}\"></ng-container>\n                  </ng-container>\n               </button>\n            </ng-container>\n         </ng-container>\n         <clr-dropdown *ngIf=\"route.isList\"\n                       [clrCloseMenuOnItemClick]=\"false\"\n                       class=\"wide-item\">\n            <!-- Disable keyboard navigation for the route because:\n                    1) This action is already available from the \"All items\" dropdown menu\n                    2) Reduce navigation steps\n            -->\n            <button class=\"btn btn-link no-spacing route-link\"\n                    vsan-show-title\n                    tabindex=\"-1\"\n                    role=\"link\"\n                    [attr.aria-current]=\"getRouteAriaCurrent(index)\"\n                    (click)=\"routeTo(route, true)\"\n                    [ngClass]=\"{'selected': isLastRoute(index)}\">\n               {{route.selectedLink}}\n            </button>\n            <button class=\"dropdown-trigger\" clrDropdownTrigger [attr.aria-label]=\"route.links[0]\">\n               <clr-icon shape=\"caret down\"\n                         [vsan-icon-title]=\"'vsan.common.breadcrumb.toggleOptions.title' | localized\">\n               </clr-icon>\n            </button>\n            <clr-dropdown-menu *clrIfOpen\n                               [attr.aria-label]=\"'vsan.common.srMessage.dropdownMenu.optionsExpanded.label' | localized\">\n               <div *ngFor=\"let link of route.links\"\n                    clrDropdownItem\n                    [clrDisabled]=\"isLinkDisabled(route, link)\"\n                    (click)=\"onSelect(route, link)\"\n                    [ngClass]=\"{'selected': isSelected(route, link)}\">\n                  {{link}}\n               </div>\n            </clr-dropdown-menu>\n         </clr-dropdown>\n      </ng-container>\n   </li>\n</ul>\n<!-- Add aria-hidden to the last right caret only (i.e., it is disabled) as otherwise\nroutes are not navigated in browser mode -->\n<ng-template #rightCaret let-disabled=\"disabled\">\n   <clr-icon shape=\"caret right\"\n             class=\"right-caret\"\n             [attr.aria-hidden]=\"disabled ? true : null\">\n   </clr-icon>\n</ng-template>\n","/* Copyright 2020 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Pipe, PipeTransform} from \"@angular/core\";\nimport {Icon} from \"@util/icon\";\nimport {Logger} from \"@util/logger\";\nimport {DiskMgmtHostUtil} from \"@util/disk-mgmt-host.util\";\nimport {DiskMgmtDiskGroupUtil} from \"@util/disk-mgmt-disk-group.util\";\n\n@Pipe({\n   name: \"hostHealthIconShape\",\n})\nexport class HostHealthIconShapePipe implements PipeTransform {\n\n   transform(healthKey: string): string {\n      switch (healthKey) {\n         case DiskMgmtHostUtil.HEALTHY_MSG_KEY:\n            return Icon.CLR_SUCCESS_STANDARD_ICON_SHAPE;\n         case DiskMgmtDiskGroupUtil.LOCKED_MSG_KEY:\n            return Icon.CLR_WARN_STANDARD_ICON_SHAPE;\n         case DiskMgmtHostUtil.UNHEALTHY_MSG_KEY:\n            return Icon.CLR_ERROR_STANDARD_ICON_SHAPE;\n         case DiskMgmtHostUtil.UNKNOWN_MSG_KEY:\n            return Icon.CLR_HELP;\n         case DiskMgmtDiskGroupUtil.UNMOUNTED_MSG_KEY:\n            return Icon.EMPTY_ICON;\n         default:\n            Logger.warn(\"Unknown health key: \" + healthKey);\n            return Icon.EMPTY_ICON;\n      }\n   }\n}","/* Copyright 2017-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component} from \"@angular/core\";\nimport {ScsiDisk} from \"@component/diskmgmt/model/scsi-disk.data\";\nimport {DecommissionModeSummary} from \"@component/precheck/pre-check-evacuation-summary.component\";\nimport {DecommissionMode} from \"@generated/decommission-mode\";\nimport {DiskGroupMutationService} from \"@generated/disk-group-mutation-service\";\nimport {RemoveDiskGroupSpec} from \"@generated/remove-disk-group-spec\";\nimport {VsanPropertyProvider} from \"@generated/vsan-property-provider\";\nimport {VsanQueryDataEvacuationInfoSpec} from \"@generated/vsan-query-data-evacuation-info-spec\";\nimport {DiskGroupActionData} from \"@model/disk-group-action.data\";\nimport {HostActionData} from \"@model/host-action.data\";\nimport {DiskGroupActionContext} from \"@navigation/context/disk-group-action-context\";\nimport {EvacuationContext} from \"@navigation/context/evacuation.context\";\nimport {NavigationService, PlatformExtension} from \"@navigation/navigation.service\";\nimport {HostSystem} from \"@service/client/dataservice/data-service-property\";\nimport {DataServiceClient} from \"@service/client/dataservice/data-service.service\";\nimport {ErrorHandler} from \"@service/flow/error-handler.decorator\";\nimport {LoaderName} from \"@service/flow/loader-name\";\nimport {Loader} from \"@service/flow/loader.decorator\";\nimport {LoadingIndicator} from \"@service/flow/loading-indicator.decorator\";\nimport {ManagedObject} from \"@service/managed-object\";\nimport {SrMessageType} from \"@service/screen-reader-announcer.service\";\nimport {DiskMgmtDiskUtil} from \"@util/disk-mgmt-disk.util\";\nimport {Logger} from \"@util/logger\";\nimport {VsanDataMigrationUtil} from \"@util/vsan-data-migration-util\";\nimport {VsanDiskMgmtActionsUtil} from \"@util/vsan-disk-mgmt-actions-util\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\n\n@Component({\n   templateUrl: \"delete-disk-group.html\",\n   styleUrls: [\"../actions-common.scss\"],\n   selector: \"vsan-diskmgmt-delete-disk-group\",\n})\nexport class DeleteDiskGroupComponent {\n   host: HostActionData;\n   diskGroup: DiskGroupActionData;\n   evacuationEntityUuid: string;\n   goToPrecheckButtonText: string;\n   warningMessages: string[] = [];\n   dataOnDiskGroupLabel: string = VsanUiUtils.getString(\"vsan.dialog.deleteDiskGroup.evacuateDataLabel\");\n   shouldAllowDataMigration: boolean;\n   selectedDecommissionMode: DecommissionMode = DecommissionMode.ensureObjectAccessibility;\n\n   @LoadingIndicator({name: [LoaderName.ON_INIT, LoaderName.DATA_EVACUATION, LoaderName.ON_CONFIRM]})\n   busy: boolean;\n\n   alerts: string[];\n\n   isValidDecommisionMode: boolean = true;\n   isDiskResourcePrecheckSupported: boolean = true;\n   preselectedDecommissionMode: DecommissionMode;\n   localizedPreselectedDecommissionMode: string;\n\n   constructor(private vsanPropertyProvider: VsanPropertyProvider,\n         private diskGroupMutationService: DiskGroupMutationService,\n         private navigationService: NavigationService,\n         private dataService: DataServiceClient) {\n   }\n\n   @Loader({\n      name: LoaderName.ON_INIT,\n      srMessage: \"vsan.dialog.deleteDiskGroup.title\",\n      srMessageType: SrMessageType.PAGE_TITLE,\n   })\n   async ngOnInit(): Promise<void> {\n      const context: DiskGroupActionContext = VsanUiUtils.getModalContext();\n      this.host = context.host;\n      this.diskGroup = context.diskGroup;\n      this.preselectedDecommissionMode = context.decommissionMode;\n      this.localizedPreselectedDecommissionMode =\n            VsanDataMigrationUtil.getLocalizedDecommissionMode(this.preselectedDecommissionMode);\n\n      this.host.isInMaintenanceMode = await this.dataService\n            .getProperty(HostSystem.runtime.inMaintenanceMode, this.host.hostRef);\n      this.initUI();\n   }\n\n   @ErrorHandler({name: LoaderName.ON_INIT})\n   private handleInitError(): void {\n      this.alerts = [VsanUiUtils.getString(\"vsan.common.error.dataExtraction\")];\n   }\n\n   private initUI = () => {\n      this.evacuationEntityUuid = this.diskGroup.vsanUuid;\n\n      this.shouldAllowDataMigration = VsanDiskMgmtActionsUtil.shouldAllowDiskGroupDataMigration(\n            this.host, this.diskGroup);\n      if (!this.shouldAllowDataMigration) {\n         this.selectedDecommissionMode = DecommissionMode.noAction;\n         VsanUiUtils.setModalDialogHeight(VsanDiskMgmtActionsUtil.DELETE_DISK_GROUP_HEIGHT_SMALL);\n      }\n\n      const headerMessage: string = this.getHeaderMessage();\n      if (!!headerMessage) {\n         this.warningMessages.push(headerMessage);\n      }\n      const dataMigrationWarning: string = VsanDiskMgmtActionsUtil.getDataMigrationWarningForDiskGroup(\n            this.host.isInMaintenanceMode, this.diskGroup.isMounted);\n      if (!!dataMigrationWarning) {\n         this.warningMessages.push(dataMigrationWarning);\n      }\n      this.requestDataEvacuationProperty(this.diskGroup.diskMapping.ssd);\n   };\n\n   private getHeaderMessage = (): string => {\n      const groupUuid: string = this.diskGroup.vsanUuid;\n      if (this.host.isInMaintenanceMode) {\n         return VsanUiUtils.getString(\"vsan.confirmMultipleDisksRemove.dataEvacuation.text\", groupUuid);\n      } else if (this.host.isWitnessHost) {\n         return VsanUiUtils.getString(\"vsan.dialog.deleteDiskGroup.externalWitnessHostWarning\", groupUuid);\n      } else if (this.diskGroup.isMounted) {\n         return VsanUiUtils.getString(\"vsan.dialog.deleteDiskGroup.headerDataEvacuation\", groupUuid);\n      }\n   };\n\n   @Loader({name: LoaderName.DATA_EVACUATION})\n   private async requestDataEvacuationProperty(disk: ScsiDisk): Promise<void> {\n      if (!DiskMgmtDiskUtil.isScsiDiskHealthy(disk)) {\n         this.dataOnDiskGroupLabel = VsanUiUtils.getString(\"vsan.dialog.deleteDiskGroup.evacuateDataLabel.error\");\n         return;\n      }\n\n      const querySpec: VsanQueryDataEvacuationInfoSpec = VsanQueryDataEvacuationInfoSpec.Factory.create([disk]);\n      const result: number = await this.vsanPropertyProvider.getVsanDataEvacuationInfo(this.host.hostRef, querySpec);\n      this.onDataEvacuationPropertyRetrieved(result);\n   }\n\n   private onDataEvacuationPropertyRetrieved = (result: number) => {\n      if (result >= 0) {\n         const formattedSize: string = VsanUiUtils.formatFileSize(result);\n         this.dataOnDiskGroupLabel = VsanUiUtils.getString(\n               \"vsan.dialog.deleteDiskGroup.evacuateDataLabelWithSize\",\n               formattedSize);\n      }\n   };\n\n   @ErrorHandler({name: LoaderName.DATA_EVACUATION})\n   private onDataRetrievalError(message: any): void {\n      this.alerts = [VsanUiUtils.getString(\"vsan.common.error.dataExtraction\")];\n      this.dataOnDiskGroupLabel = VsanUiUtils.getString(\"vsan.dialog.deleteDiskGroup.evacuateDataLabel.error\");\n      Logger.error(\"Failed to retrieve vsanDataEvacuationInfo: \" + message);\n   }\n\n   onDecommissionModeSummaryChanged = (summary: DecommissionModeSummary) => {\n      this.selectedDecommissionMode = summary.value;\n      this.isValidDecommisionMode = summary.isValidDecommissionMode;\n      // change the dialog height based on the content\n      if (VsanDiskMgmtActionsUtil.isPrecheckWithObjects(summary) && !this.isDiskResourcePrecheckSupported) {\n         VsanUiUtils.setModalDialogHeight(VsanDiskMgmtActionsUtil.DELETE_DISK_GROUP_HEIGHT_LARGE);\n      } else if (this.isDiskResourcePrecheckSupported) {\n         VsanUiUtils.setModalDialogHeight(VsanDiskMgmtActionsUtil.DELETE_DISK_GROUP_HEIGHT_PRECHECK);\n      } else {\n         VsanUiUtils.setModalDialogHeight(VsanDiskMgmtActionsUtil.DELETE_DISK_GROUP_HEIGHT_MEDIUM);\n      }\n   };\n\n   onDiskResourcePrecheckSupportedChanged = (isSupported: boolean) => {\n      this.isDiskResourcePrecheckSupported = isSupported;\n      // Preselecting decommmission mode means that this dialog is opened from Data migration pre-check page,\n      // in which case GO TO PRE-CHECK button doesn't need to be display.\n      this.goToPrecheckButtonText = !this.preselectedDecommissionMode && this.isDiskResourcePrecheckSupported ?\n            VsanUiUtils.getString(\"vsan.actions.goToPrecheckDataMigration.label\") : \"\";\n   };\n\n   @Loader({name: LoaderName.ON_CONFIRM})\n   async onOkClicked(): Promise<void> {\n      const decommissionMode: DecommissionMode = this.preselectedDecommissionMode ?\n            this.preselectedDecommissionMode :\n            VsanDiskMgmtActionsUtil.getSelectedDecommissionMode(\n                  this.shouldAllowDataMigration, this.selectedDecommissionMode);\n      const diskGroupSpec: RemoveDiskGroupSpec = RemoveDiskGroupSpec.Factory.create(\n            decommissionMode,\n            [this.diskGroup.diskMapping]);\n\n      const task: ManagedObject = await this.diskGroupMutationService\n            .removeDiskGroups(ManagedObject.contextObject, this.host.hostRef, diskGroupSpec);\n      this.handleTaskList(task);\n   }\n\n   onGoToPrecheckClicked = () => {\n      const evacuationContext: EvacuationContext = VsanDiskMgmtActionsUtil.getEvacuationContext(\n            this.host.hostRef, this.evacuationEntityUuid, this.selectedDecommissionMode);\n      this.navigationService.navigateToAndCloseModal(PlatformExtension.CLUSTER_DATA_MIGRATION_PRE_CHECK,\n            ManagedObject.contextObjectUid, evacuationContext);\n   };\n\n   private handleTaskList = (task: ManagedObject) => {\n      VsanUiUtils.closeModalDialog(task);\n   };\n\n   @ErrorHandler({name: LoaderName.ON_CONFIRM})\n   private onDeleteOperationError(message: any): void {\n      this.alerts = [message];\n   }\n\n   get isDeleteButtonBlocked(): boolean {\n      return this.busy || !this.isValidDecommisionMode;\n   }\n}\n","/* Copyright 2020-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {VsanBreadcrumbService} from \"./vsan-breadcrumb.service\";\n\nexport class BreadcrumbRouteModel {\n   /**\n    * Keeps the route key. It is needed for routes ordering ex.\n    */\n   private _key: string;\n\n   /**\n    * Keeps route links values. It could be only 1 or multiple links displayed as dropdown.\n    */\n   private _links: string[] = [];\n\n   /**\n    * Currently selected link. Very useful when there is multiple links for 1 route.\n    */\n   private _selectedLink: string;\n\n   /**\n    * Component callback method name. When the route gets triggered, then this callback is called as well.\n    */\n   onTrigger: string;\n\n   /**\n    * A predicate that defines disabled state of links from dropdown.\n    */\n   isDisabled: IsDisabledLink;\n\n   /**\n    * Indicates whether a given route model should be hidden\n    */\n   isHidden: boolean;\n\n   static link(callback: string = \"\", isDisabled: IsDisabledLink = () => false, value: string = \"\"):\n         BreadcrumbRouteModel {\n      return new BreadcrumbRouteModel(callback, isDisabled, [value]);\n   }\n\n   static links(callback: string, isDisabled: IsDisabledLink = () => false, values: string[] = []):\n         BreadcrumbRouteModel {\n      return new BreadcrumbRouteModel(callback, isDisabled, values);\n   }\n\n   constructor(callback: string, isDisabled: IsDisabledLink, values: string[] = []) {\n      this.onTrigger = callback;\n      this.isDisabled = isDisabled;\n      this._links = values;\n   }\n\n   get key(): string {\n      return this._key;\n   }\n\n   set key(key: string) {\n      this._key = key;\n   }\n\n   get link(): string {\n      return this._links[0];\n   }\n\n   set link(value: string) {\n      this._links[0] = value;\n      this._selectedLink = value;\n   }\n\n   get links(): string[] {\n      return this._links;\n   }\n\n   set links(values: string[]) {\n      this._links = values;\n   }\n\n   get selectedLink(): string {\n      return this._selectedLink;\n   }\n\n   get isList(): boolean {\n      return this._links.length > 1;\n   }\n\n   select(value: string) {\n      if (this._links.indexOf(value) === -1) {\n         return;\n      }\n      this._selectedLink = value;\n   }\n\n   navigate() {\n      VsanBreadcrumbService.route.next(this);\n   }\n}\n\nexport type IsDisabledLink = (link: string) => boolean;\n","/* Copyright 2020-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {Injectable} from \"@angular/core\";\nimport {HostData} from \"@generated/host-data\";\nimport {DiskMgmtDiskGroupUtil, VsanDiskGroupLabelFormat} from \"@util/disk-mgmt-disk-group.util\";\nimport {ScreenReaderAnnouncer} from \"@service/screen-reader-announcer.service\";\nimport {StorageIdentifier} from \"@component/diskmgmt/model/storage-identifier\";\nimport {StorageGroupIdentifier} from \"@component/diskmgmt/model/storage-group-identifier\";\n\n/**\n * This service handles screen reader messages for disk management view.\n */\n@Injectable()\nexport class DiskManagementScreenReaderService {\n\n   @ScreenReaderAnnouncer()\n   srOnlyMessage: string;\n\n   informPageLoad(preselectedHost: HostData, preselectedGroup: StorageGroupIdentifier,\n         preselectedStorage: StorageIdentifier, isHostDetailsLevel: boolean, isVirtualObjectsView: boolean): void {\n      if (!preselectedHost) {\n         if (isVirtualObjectsView) {\n            // Disk Management page was loaded, virtual objects for cluster are loading.\n            this.srOnlyMessage = VsanUiUtils.getString(\"vsan.manage.diskManagement.srMessage.virtualObjects.cluster\");\n         } else {\n            // Disk management page was loaded\n            this.srOnlyMessage = VsanUiUtils.getString(\"vsan.screenReader.message.page.loaded\",\n                  VsanUiUtils.getString(\"manage.vsan.diskManagement\"));\n         }\n         return;\n      }\n      const hostName: string = preselectedHost.name;\n      if (!isHostDetailsLevel && !isVirtualObjectsView) {\n         // Disk management page was loaded and {hostName} was selected.\n         this.srOnlyMessage = VsanUiUtils.getString(\"vsan.screenReader.message.page.loaded.andItemSelected\",\n               VsanUiUtils.getString(\"manage.vsan.diskManagement\"), hostName);\n         return;\n      }\n      if (!preselectedGroup) {\n         if (isVirtualObjectsView) {\n            // Disk Management page was loaded, virtual objects for host {hostName} are loading.\n            this.srOnlyMessage =\n                  VsanUiUtils.getString(\"vsan.manage.diskManagement.srMessage.virtualObjects.host\", hostName);\n         } else {\n            // Disk Management page was loaded, disk groups for host {hostName} are listed.\n            this.srOnlyMessage =\n                  VsanUiUtils.getString(\"vsan.manage.diskManagement.srMessage.hostLevel.groups\", hostName);\n         }\n         return;\n      }\n      const groupName: string = DiskMgmtDiskGroupUtil.getLabel(preselectedGroup, VsanDiskGroupLabelFormat.TYPE_AND_UUID);\n      if (!preselectedStorage) {\n         if (isVirtualObjectsView) {\n            // Disk Management page was loaded, virtual objects for {groupName} from host {hostName} are loading.\n            this.srOnlyMessage = VsanUiUtils.getString(\"vsan.manage.diskManagement.srMessage.virtualObjects.group\",\n                  groupName, hostName);\n         } else {\n            // Disk Management page was loaded and {groupName} was expanded.\n            this.srOnlyMessage = VsanUiUtils.getString(\"vsan.screenReader.message.page.loaded.andItemExpanded\",\n                  VsanUiUtils.getString(\"manage.vsan.diskManagement\"), groupName);\n         }\n      } else {\n         if (isVirtualObjectsView) {\n            // Disk Management page was loaded, virtual objects for {storageName} in {groupName} from\n            // host {hostName} are loading.\n            this.srOnlyMessage = VsanUiUtils.getString(\"vsan.manage.diskManagement.srMessage.virtualObjects.storage\",\n                  preselectedStorage.name, groupName, hostName);\n         } else {\n            // Disk Management page was loaded, {groupName} was expanded and {storageName} was selected.\n            this.srOnlyMessage = VsanUiUtils.getString(\n                  \"vsan.manage.diskManagement.srMessage.hostLevel.groups.disk.singular\",\n                  groupName, preselectedStorage.name);\n         }\n      }\n   }\n\n   informVirtualObjectsLoad(): void {\n      // Virtual objects loaded.\n      this.srOnlyMessage = VsanUiUtils.getString(\"vsan.manage.diskManagement.srMessage.virtualObjects.loaded\");\n   }\n}\n","/* Copyright 2020-2022 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component} from \"@angular/core\";\nimport {EnumeratedFilterSelectionResolver} from \"@component/datagrid/filter/enumerated-filter.component\";\nimport {DiskMgmtFilterComponent} from \"./disk-mgmt-filter.component\";\nimport {DiskMgmtDiskUtil} from \"@util/disk-mgmt-disk.util\";\nimport {StorageData} from \"@component/diskmgmt/model/storage-data\";\n\n@Component({\n   templateUrl: \"disk-mgmt-filter.html\",\n   selector: \"vsan-storage-group-details-filter-device-state\",\n   styleUrls: [\"disk-mgmt-filter.scss\"],\n})\nexport class StorageGroupDetailsFilterDeviceStateComponent extends DiskMgmtFilterComponent<StorageData> {\n\n   readonly comparator: EnumeratedFilterSelectionResolver<StorageData, string> =\n         new class extends EnumeratedFilterSelectionResolver<StorageData, string> {\n            isSelected(item: StorageData, selectedStateKeys: string[]): boolean {\n               return selectedStateKeys.some(state =>\n                     state === DiskMgmtDiskUtil.localizeMountedState(item.diskStatus));\n            }\n         }();\n}","<!--Copyright 2017-2021 VMware, Inc. All rights reserved. -- VMware Confidential-->\n<vsan-create-prompt\n      [title]=\"'vsan.dialog.createDiskGroup.title' | localized\"\n      [subtitle]=\"hostName\"\n      [blockButton]=\"busy || !dataLoaded\"\n      [(alertMessages)]=\"isValidated && alertMessages\"\n      (onConfirm)=\"onOkClicked()\">\n   <vsan-create-disk-group-page\n         [clusterRef]=\"clusterRef\"\n         [hostRef]=\"hostRef\"\n         [isWitnessHost]=\"isWitnessHost\"\n         (dataLoaded)=\"dataLoad()\"\n         (configChanged)=\"configChange($event)\"\n         (validateConfig)=\"configValidate($event)\">\n   </vsan-create-disk-group-page>\n</vsan-create-prompt>\n","/* Copyright 2017-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component} from \"@angular/core\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {ManagedObject} from \"@service/managed-object\";\nimport {DiskGroupMutationService} from \"@generated/disk-group-mutation-service\";\nimport {VsanDiskMapping} from \"@generated/vsan-disk-mapping\";\nimport {DiskMappingSpec} from \"@generated/disk-mapping-spec\";\nimport {LoadingIndicator} from \"@service/flow/loading-indicator.decorator\";\nimport {Loader} from \"@service/flow/loader.decorator\";\nimport {SrMessageType} from \"@service/screen-reader-announcer.service\";\nimport {ErrorHandler} from \"@service/flow/error-handler.decorator\";\nimport {LoaderName} from \"@service/flow/loader-name\";\n\n@Component({\n   templateUrl: \"create-group.html\",\n   selector: \"vsan-diskmgmt-create-group\",\n})\nexport class CreateGroupComponent {\n\n   clusterRef: ManagedObject;\n   hostRef: ManagedObject;\n   hostName: string;\n   isWitnessHost: boolean;\n   diskMapping: VsanDiskMapping;\n\n   @LoadingIndicator({name: [LoaderName.ON_INIT, LoaderName.ON_CONFIRM]})\n   busy: boolean;\n\n   // This flag is needed, because `busy`'s value can't be changed, because of the LoadingIndicator\n   dataLoaded: boolean;\n\n   alertMessages: string[] = [];\n\n   // Flag to keep whether the user tried to submit the dialog.\n   isValidated: boolean = false;\n\n   constructor(private diskGroupMutationService: DiskGroupMutationService) {\n   }\n\n   @Loader({\n      name: LoaderName.ON_INIT,\n      srMessage: \"vsan.dialog.createDiskGroup.title\",\n      srMessageType: SrMessageType.PAGE_TITLE,\n   })\n   ngOnInit(): void {\n      this.alertMessages = [];\n\n      const context: any = VsanUiUtils.getModalContext();\n      this.clusterRef = ManagedObject.fromUid(context.clusterId);\n      this.hostRef = ManagedObject.fromUid(context.hostId);\n      this.hostName = context.hostName;\n      this.isWitnessHost = context.isWitnessHost;\n   }\n\n   dataLoad = (): void => {\n      this.dataLoaded = true;\n   };\n\n   configValidate = (errors: string[]) => {\n      this.alertMessages = errors;\n   };\n\n   configChange = (diskMapping: VsanDiskMapping) => {\n      this.diskMapping = diskMapping;\n   };\n\n   @Loader({name: LoaderName.ON_CONFIRM})\n   async onOkClicked(): Promise<void> {\n      this.isValidated = true;\n      if (this.alertMessages.length > 0) {\n         return;\n      }\n\n      const spec: DiskMappingSpec = DiskMappingSpec.Factory.create(\n            this.clusterRef,\n            [this.diskMapping]);\n\n      const result: ManagedObject = await this.diskGroupMutationService.createDiskGroup(this.hostRef, spec);\n      VsanUiUtils.closeModalDialog(result);\n   }\n\n   @ErrorHandler({name: LoaderName.ON_CONFIRM})\n   private handleError(error: string): void {\n      this.alertMessages = [error];\n   }\n}\n","<!-- Copyright 2020-2021 VMware, Inc. All rights reserved. -- VMware Confidential -->\n<vsan-host-actions *ngIf=\"selectedHost\"\n                   [autoClaimMode]=\"autoClaimMode\"\n                   [hasEditPermission]=\"hasEditPermission\"\n                   [clusterCapabilities]=\"clusterCapabilities\"\n                   [hasHostMaintenancePermission]=\"hasHostMaintenancePermission\"\n                   [selectedHost]=\"selectedHost\"\n                   [isHostListView]=\"true\">\n</vsan-host-actions>\n<clr-datagrid #dataGrid\n              [(clrDgSingleSelected)]=\"selectedHost\"\n              (clrDgSingleSelectedChange)=\"selectionChanged($event)\">\n   <!-- Datagrid Header -->\n   <clr-dg-column [clrDgField]=\"'name'\">\n      <ng-container *clrDgHideableColumn=\"{hidden: false}\">\n         {{\"vsan.manage.diskManagement.hostList.name\" | localized}}\n      </ng-container>\n   </clr-dg-column>\n   <clr-dg-column [clrDgSortBy]=\"healthComparator\">\n      <ng-container *clrDgHideableColumn=\"{hidden: false}\">\n         {{\"vsan.manage.diskManagement.hostList.health\" | localized}}\n      </ng-container>\n      <clr-dg-filter *ngIf=\"healthKeys?.size > 1\">\n         <vsan-host-list-filter-health [items]=\"healthKeys\">\n         </vsan-host-list-filter-health>\n      </clr-dg-filter>\n   </clr-dg-column>\n   <clr-dg-column>\n      <ng-container *clrDgHideableColumn=\"{hidden: false}\">\n         {{\"vsan.manage.diskManagement.hostList.disksInUse\" | localized}}\n      </ng-container>\n   </clr-dg-column>\n   <clr-dg-column [clrDgSortBy]=\"stateComparator\">\n      <ng-container *clrDgHideableColumn=\"{hidden: false}\">\n         {{\"vsan.manage.diskManagement.hostList.state\" | localized}}\n      </ng-container>\n      <clr-dg-filter *ngIf=\"stateKeys?.size > 1\">\n         <vsan-host-list-filter-state [items]=\"stateKeys\">\n         </vsan-host-list-filter-state>\n      </clr-dg-filter>\n   </clr-dg-column>\n   <clr-dg-column class=\"capacity-column\">\n      <ng-container *clrDgHideableColumn=\"{hidden: false}\">\n         {{\"vsan.manage.diskManagement.hostList.capacity\" | localized}}\n      </ng-container>\n   </clr-dg-column>\n   <clr-dg-column>\n      <ng-container *clrDgHideableColumn=\"{hidden: hideGroupTypeColumn()}\">\n         {{\"vsan.manage.diskManagement.hostList.contributesTo\" | localized}}\n      </ng-container>\n      <clr-dg-filter *ngIf=\"groupTypeKeys?.size > 1\">\n         <vsan-host-list-filter-groups [items]=\"groupTypeKeys\">\n         </vsan-host-list-filter-groups>\n      </clr-dg-filter>\n   </clr-dg-column>\n   <clr-dg-column [clrDgField]=\"'faultDomain'\">\n      <ng-container *clrDgHideableColumn=\"{hidden: hideFaultDomainColumn()}\">\n         {{\"vsan.manage.diskManagement.hostList.faultDomain\" | localized}}\n      </ng-container>\n   </clr-dg-column>\n   <clr-dg-column [clrDgField]=\"'networkPartitionGroup'\">\n      <ng-container *clrDgHideableColumn=\"{hidden: false}\">\n         {{\"vsan.manage.diskManagement.hostList.networkPartitionGroup\" | localized}}\n      </ng-container>\n   </clr-dg-column>\n\n   <!-- Row height set is required for to accommodate copy-to-clipboard icon height -->\n   <clr-dg-row *clrDgItems=\"let row of hostList\"\n               [clrDgItem]=\"row\"\n               class=\"signpost-row-height-fix\">\n      <clr-dg-cell>\n         <vsan-mor-cell [shape]=\"row.iconId\"\n                        [name]=\"row.name\"\n                        [suffix]=\"getHostSuffix(row)\"\n                        [objectId]=\"row.hostRef\">\n         </vsan-mor-cell>\n      </clr-dg-cell>\n      <clr-dg-cell>\n         <vsan-icon-item [label]=\"getHealthKey(row) | localized\"\n                         [shape]=\"getHealthKey(row) | hostHealthIconShape\"\n                         [iconClass]=\"Icon.CLR_SOLID_ICON_CLASS + ' ' +\n                                      Icon.clrIconShapeClassMap[getHealthKey(row) | hostHealthIconShape]\">\n         </vsan-icon-item>\n      </clr-dg-cell>\n      <clr-dg-cell vsan-show-title>{{getClaimedDisksLabel(row)}}</clr-dg-cell>\n      <clr-dg-cell vsan-show-title>{{getState(row)}}</clr-dg-cell>\n      <clr-dg-cell class=\"no-vertical-padding right-align-cell\">\n         <vsan-storage-capacity [capacity]=\"row.capacity\">\n         </vsan-storage-capacity>\n      </clr-dg-cell>\n      <clr-dg-cell class=\"no-vertical-padding\" vsan-show-title>\n         <ng-container *ngIf=\"getGroupTypeKeys(row); let groupKeys\">\n            <span *ngFor=\"let key of groupKeys\" class=\"label label-info\">\n               {{key | localized}}\n            </span>\n         </ng-container>\n      </clr-dg-cell>\n      <clr-dg-cell vsan-show-title>{{row.faultDomain}}</clr-dg-cell>\n      <clr-dg-cell vsan-show-title>\n         <ng-container *ngIf=\"row.networkPartitionGroup\">\n            {{\"vsan.host.list.partitionGroupFormat\" | localized: row.networkPartitionGroup}}\n         </ng-container>\n      </clr-dg-cell>\n   </clr-dg-row>\n   <!--Pagination-->\n   <clr-dg-footer>\n<!--      <vsan-export [source]=\"exportDataSource\"-->\n<!--                   [filename]=\"DiskMgmtExportConfig.hostListFileName\"-->\n<!--                   [dataExtractors]=\"DiskMgmtExportConfig.hostDataExtractors\">-->\n<!--      </vsan-export>-->\n      <clr-dg-pagination #pagination [clrDgPageSize]=\"hostGridPageSize\">\n         <clr-dg-page-size [hidden]=\"hideDgPageSize()\"\n                           [clrPageSizeOptions]=\"[hostGridPageSize, hostGridPageSize*2, 64]\">\n            {{\"vsan.common.datagrid.pageSize\" | localized}}\n         </clr-dg-page-size>\n         {{VsanUiUtils.getDatagridFooterLabel(hostList, pagination, hostGridPageSize)}}\n      </clr-dg-pagination>\n   </clr-dg-footer>\n</clr-datagrid>","/* Copyright 2022 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component} from \"@angular/core\";\nimport {EnumeratedFilterSelectionResolver} from \"@component/datagrid/filter/enumerated-filter.component\";\nimport {DiskMgmtFilterComponent} from \"./disk-mgmt-filter.component\";\nimport {DiskMgmtDiskUtil} from \"@util/disk-mgmt-disk.util\";\nimport {StorageData} from \"@component/diskmgmt/model/storage-data\";\n\n@Component({\n   templateUrl: \"disk-mgmt-filter.html\",\n   selector: \"vsan-storage-group-details-filter-device-operational-state\",\n   styleUrls: [\"disk-mgmt-filter.scss\"],\n})\nexport class StorageGroupDetailsFilterDeviceOperationalStateComponent extends DiskMgmtFilterComponent<StorageData> {\n\n   readonly comparator: EnumeratedFilterSelectionResolver<StorageData, string> =\n         new class extends EnumeratedFilterSelectionResolver<StorageData, string> {\n            isSelected(item: StorageData, selectedStateKeys: string[]): boolean {\n               return selectedStateKeys.some(state =>\n                     state === DiskMgmtDiskUtil.localizeOperationalState(item.deviceState));\n            }\n         }();\n}","<!--Copyright 2020-2021 VMware, Inc. All rights reserved. -- VMware Confidential-->\n<vsan-enumerated-filter [selectionResolver]=\"comparator\"\n                        [filtersCount]=\"keys.length\">\n   <vsan-enumerated-filter-item *ngFor=\"let key of keys\"\n                                [iconShape]=\"key | hostHealthIconShape\"\n                                [iconClass]=\"Icon.CLR_SOLID_ICON_CLASS + ' ' +\n                                      Icon.clrIconShapeClassMap[key | hostHealthIconShape]\"\n                                [label]=\"key | localized\"\n                                [value]=\"key\">\n   </vsan-enumerated-filter-item>\n</vsan-enumerated-filter>\n","<!--Copyright 2019-2022 VMware, Inc. All rights reserved. -- VMware Confidential-->\n<vsan-info-prompt [title]=\"'vsan.upgrade.manage.upgrade.confirm.title' | localized\"\n                  [subtitle]=\"subtitle\">\n   <vsan-validation id=\"alerts\"\n                    [(alerts)]=\"issues\"\n                    [allowClose]=\"false\"\n                    [alertType]=\"'warning'\"\n                    [alertsExpanded]=\"true\"\n                    [allowExpandCollapse]=\"false\">\n   </vsan-validation>\n</vsan-info-prompt>\n","/* Copyright 2020-2022 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {ChangeDetectionStrategy, Component, Input} from \"@angular/core\";\nimport {HostData} from \"@generated/host-data\";\nimport {VsanCapabilityData} from \"@generated/vsan-capability-data\";\nimport {VsanConfigSpec} from \"@generated/vsan-config-spec\";\nimport {LoadingAwareProperty} from \"@model/loading-aware-property\";\nimport {NavigationService} from \"@navigation/navigation.service\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {DiskMgmtEntitiesSummaryService, DiskMgmtEntitySummary} from \"./disk-mgmt-entities-summary-service\";\nimport {DiskManagementActionAvailabilityService} from \"./validation/disk-management-action-availability.service\";\n\n/**\n * The component is used as overview of disk management view. It shows the number of hosts, disk groups and\n * different types of disks per cluster or host level. Cluster / host level specific actions are provided in the footer.\n */\n@Component({\n   templateUrl: \"disk-mgmt-summary.html\",\n   selector: \"vsan-disk-mgmt-summary\",\n   styleUrls: [\"disk-mgmt-summary.scss\"],\n   changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class DiskMgmtSummaryComponent {\n\n   @Input()\n   clusterName: string;\n\n   /**\n    * Represents the index of the host from the hostList. When the index:\n    *    - equals to -1 the component will aggregate data on cluster level\n    *    - is equal or greater than 0 the component will aggregate data on a host level.\n    */\n   _hostIndex: number;\n   @Input()\n   get hostIndex(): number {\n      return this._hostIndex;\n   }\n\n   set hostIndex(value: number) {\n      if (VsanUiUtils.isUnset(value) || value === this._hostIndex) {\n         return;\n      }\n      this._hostIndex = value;\n      if (!VsanUiUtils.isEmpty(this.hostList)) {\n         this.setItemsCount();\n      }\n   }\n\n   _hostList: HostData[];\n   @Input()\n   get hostList(): HostData[] {\n      return this._hostList;\n   }\n\n   set hostList(value: HostData[]) {\n      if (VsanUiUtils.isUnset(value)) {\n         return;\n      }\n      this._hostList = value;\n      this.setItemsCount();\n   }\n\n   @Input()\n   autoClaimMode: boolean;\n\n   @Input()\n   hasEditPermission: boolean = false;\n\n   @Input()\n   clusterCapabilities: VsanCapabilityData;\n\n   @Input()\n   vsanConfig: VsanConfigSpec;\n\n   @Input()\n   hasHostMaintenancePermission: boolean;\n\n   @Input()\n   hasDuplicatePciIdDevices: LoadingAwareProperty<boolean>;\n\n   DiskManagementActionAvailabilityService: typeof DiskManagementActionAvailabilityService =\n         DiskManagementActionAvailabilityService;\n\n   summaryEntities: DiskMgmtEntitySummary[];\n\n   constructor(private navigationService: NavigationService,\n         private diskManagementActionAvailabilityService: DiskManagementActionAvailabilityService,\n         private diskMgmtEntitiesSummaryService: DiskMgmtEntitiesSummaryService) {\n   }\n\n   private setItemsCount(): void {\n      const hostsData: HostData[] = this.isHostDetailsLevel() ? [this.getHost()] : this.hostList;\n      this.summaryEntities = this.diskMgmtEntitiesSummaryService.createEntities(this.isHostDetailsLevel(), hostsData);\n   }\n\n   isHostDetailsLevel(): boolean {\n      return this.hostIndex > -1;\n   }\n\n   getHost(): HostData {\n      return this.isHostDetailsLevel() ? this.hostList[this.hostIndex] : null;\n   }\n}","/* Copyright 2020-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, HostBinding, OnInit} from \"@angular/core\";\nimport {VsanBreadcrumbService} from \"./vsan-breadcrumb.service\";\nimport {BreadcrumbRouteModel} from \"./breadcrumb-route.model\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\n\n@Component({\n   selector: \"vsan-breadcrumb-nav\",\n   templateUrl: \"vsan-breadcrumb-nav.html\",\n   styleUrls: [\"vsan-breadcrumb-nav.scss\"],\n})\nexport class VsanBreadcrumbNavComponent implements OnInit {\n   routes: BreadcrumbRouteModel[] = [];\n\n   @HostBinding(\"attr.aria-label\") ariaLabel: string = VsanUiUtils.getString(\"vsan.common.breadcrumb.ariaLabel\");\n\n   ngOnInit(): void {\n      VsanBreadcrumbService.route.subscribe(route => this.routeTo(route, false));\n   }\n\n   onSelect(toRoute: BreadcrumbRouteModel, selectedValue: string): void {\n      if (this.isLinkDisabled(toRoute, selectedValue)) {\n         return;\n      }\n      toRoute.select(selectedValue);\n      this.routeTo(toRoute, true);\n   }\n\n   isLinkDisabled = (route: BreadcrumbRouteModel, link: string): boolean =>\n         route && route.isDisabled && route.isDisabled(link);\n\n   private isNextRoute(newlyAddedRoute: BreadcrumbRouteModel): boolean {\n      const routesOrder: string[] = VsanBreadcrumbService.getRouteOrders();\n      const newlyAddedRouteIndex: number = routesOrder.indexOf(newlyAddedRoute.key);\n      if (this.routes.length === 0) {\n         return newlyAddedRouteIndex === 0;\n      }\n\n      const lastAddedRoute: BreadcrumbRouteModel = this.routes[this.routes.length - 1];\n      const lastAddedRouteIndex: number = routesOrder.indexOf(lastAddedRoute.key);\n      return newlyAddedRouteIndex - lastAddedRouteIndex === 1;\n   }\n\n   routeTo(toRoute: BreadcrumbRouteModel, innerEvent: boolean): void {\n      const index: number = this.routes.findIndex(route => route.key === toRoute.key);\n      if (index === -1) {\n         if (this.isNextRoute(toRoute)) {\n            this.routes.push(toRoute);\n         }\n         return;\n      }\n\n      this.routes = this.routes.slice(0, index + 1);\n      if (innerEvent) {\n         // When navigation event is triggered by breadcrumb component, then propagate to all hooked components as well.\n         VsanBreadcrumbService.onRouteClick.next(this.routes[this.routes.length - 1]);\n      }\n   }\n\n   isSelected = (route: BreadcrumbRouteModel, link: string): boolean => route.selectedLink === link;\n\n   isLastRoute = (index: number): boolean => index === this.routes.length - 1;\n\n   getRouteAriaCurrent(index: number): boolean {\n      return this.isLastRoute(index) ? true : null;\n   }\n}\n","/* Copyright 2017-2019 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, OnInit} from \"@angular/core\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\n\n@Component({\n   templateUrl: \"mark-local-prompt.html\",\n   selector: \"vsan-diskmgmt-mark-local\",\n})\nexport class MarkLocalComponent implements OnInit{\n\n   isLocal: boolean;\n   title: string;\n\n   ngOnInit(): void {\n      this.isLocal = VsanUiUtils.getModalContext();\n\n      this.title = VsanUiUtils.getString(this.isLocal\n            ? \"storage.adapters.devices.action.markAsLocal\"\n            : \"storage.adapters.devices.action.markAsRemote\");\n   }\n\n}","<!--Copyright 2019-2022 VMware, Inc. All rights reserved. -- VMware Confidential-->\n<vsan-default-prompt\n      [title]=\"'vsan.actions.unmountDiskGroup.dialogTitle' | localized\"\n      [subtitle]=\"diskGroup?.vsanUuid\"\n      [confirmText]=\"'vsan.actions.unmountDiskGroup.confirmText' | localized\"\n      [confirmStyle]=\"'btn-danger'\"\n      [(alertMessages)]=\"alerts\"\n      [blockContent]=\"loading\"\n      [blockButton]=\"loading || !isValidDecommisionMode\"\n      [additionalButtonText]=\"goToPrecheckButtonText\"\n      (onConfirm)=\"ok()\"\n      (onAdditionalAction)=\"onGoToPrecheckClicked()\">\n   <div class=\"dialog-body\">\n      <vsan-validation *ngIf=\"warningMessages?.length\"\n                       alertType=\"warning\"\n                       [allowClose]=\"false\"\n                       [alertsExpanded]=\"true\"\n                       [allowExpandCollapse]=\"false\"\n                       [(alerts)]=\"warningMessages\">\n      </vsan-validation>\n\n      <!--Preselected decommission mode-->\n      <form class=\"clr-form clr-form-horizontal\" *ngIf=\"preselectedDecommissionMode\">\n         <div class=\"clr-form-control\">\n            <label for=\"unmount-disk-group-decommission-mode\" class=\"clr-control-label\">\n               {{\"vsan.dialog.precheckEvacuation.label\" | localized}}\n            </label>\n            <span id=\"unmount-disk-group-decommission-mode\">\n               {{localizedPreselectedDecommissionMode}}\n            </span>\n         </div>\n      </form>\n\n      <!-- Select decommission mode -->\n      <ng-container *ngIf=\"!loading && shouldAllowDataMigration && !preselectedDecommissionMode\">\n         <div id=\"data-on-disk-label\" *ngIf=\"!isDiskResourcePrecheckSupported\">\n            {{dataOnDiskGroupLabel}}\n         </div>\n         <div class=\"migration-mode-label\">\n            <span id=\"select-migration-mode-label\">{{'vsan.dialog.deleteDiskGroup.migrationMode' | localized}}</span>\n            <clr-signpost [vsan-signpost-title]=\"'vsan.dialog.deleteDiskGroup.migrationMode.signpost.label' | localized\">\n               <clr-signpost-content *clrIfOpen clrPosition=\"center-right\">\n                  <span>{{'vsan.dialog.deleteDiskGroup.evacuateDataHelp' | localized}}</span>\n               </clr-signpost-content>\n            </clr-signpost>\n         </div>\n         <vsan-pre-check-evacuation-summary\n               id=\"precheck-evacuation-summary\"\n               [hostMor]=\"host.hostRef\"\n               [evacuationEntityUuid]=\"evacuationEntityUuid\"\n               [selectedDecommissionMode]=\"selectedDecommissionMode\"\n               [preCheckRecommendationMessage]=\"preCheckRecommendationMessage\"\n               (selectedDecommissionModeSummaryChanged)=\"onDecommisionModeSummaryChanged($event)\"\n               (isDiskResourcePrecheckSupportedRetrieved)=\"onDiskResourcePrecheckSupportedChanged($event)\">\n         </vsan-pre-check-evacuation-summary>\n      </ng-container>\n\n      <!-- Confirmation text -->\n      <div id=\"footer-unmount-disk-group\" class=\"strong-label\">\n         {{\"vsan.actions.unmountDiskGroup.dialogContent.confirmationLabel\" | localized}}\n      </div>\n   </div>\n</vsan-default-prompt>\n","<!--Copyright 2017-2021 VMware, Inc. All rights reserved. -- VMware Confidential-->\n<vsan-info-prompt [title]=\"'vsan.dialog.deleteDiskFromDiskGroup.title' | localized\"\n                  confirmText=\"vsan.common.ok\">\n   {{\"vsan.dialog.deleteDiskFromDiskGroup.validation.dedupEnabled\" | localized}}\n</vsan-info-prompt>","/* Copyright 2020-2022 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {AfterViewInit, Component, EventEmitter, Input, OnInit, Output, ViewChild} from \"@angular/core\";\nimport {ClrDatagrid, ClrDatagridComparatorInterface, ClrDatagridPagination, ClrDatagridSortOrder} from \"@clr/angular\";\nimport {Icon} from \"@util/icon\";\nimport {DiskData} from \"@generated/disk-data\";\nimport {HostData} from \"@generated/host-data\";\nimport {VsanCapabilityData} from \"@generated/vsan-capability-data\";\nimport {SpaceEfficiencyConfig} from \"@generated/space-efficiency-config\";\nimport {ClaimableState} from \"@util/disk-mgmt.util\";\nimport {DiskMgmtDiskUtil} from \"@util/disk-mgmt-disk.util\";\nimport {DiskMgmtDiskGroupUtil} from \"@util/disk-mgmt-disk-group.util\";\nimport {DiskType} from \"@generated/disk-type\";\nimport {DiskStatus} from \"@generated/disk-status\";\nimport {ClaimOption} from \"@generated/claim-option\";\nimport {StorageIdentifier} from \"@component/diskmgmt/model/storage-identifier\";\nimport {StorageData} from \"@component/diskmgmt/model/storage-data\";\nimport {StorageGroupData} from \"./model/storage-group-data\";\nimport {DiskLocalityType} from \"@generated/disk-locality-type\";\nimport {DiskMgmtExportConfig} from \"./export/disk-mgmt-export-config\";\nimport {ExportDataSource} from \"@component/export/export-data-source\";\nimport {ReferenceWatcher} from \"@util/reference-watcher\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\n\n@Component({\n   templateUrl: \"storage-group-details.html\",\n   selector: \"vsan-storage-details\",\n   styleUrls: [\"storage-group-details.scss\"],\n   providers: [ReferenceWatcher],\n})\nexport class StorageGroupDetailsComponent implements OnInit, AfterViewInit {\n\n   @ViewChild(\"dataGrid\")\n   datagrid: ClrDatagrid;\n\n   @Input()\n   autoClaimMode: boolean;\n\n   @Input()\n   spaceEfficiencyConfig: SpaceEfficiencyConfig = SpaceEfficiencyConfig.NONE;\n\n   @Input()\n   hasEditPermission: boolean = false;\n\n   @Input()\n   hasHostMaintenancePermission: boolean = false;\n\n   @Input()\n   clusterCapabilities: VsanCapabilityData;\n\n   private _storageGroup: StorageGroupData;\n\n   @Input()\n   set storageGroup(value: StorageGroupData) {\n      this._storageGroup = value;\n      if (!value) {\n         this.storageItems = undefined;\n         return;\n      }\n      this.storageItems = value.storageData;\n      value.storageData.forEach(storage => {\n         this.healthKeys.add(this.getDiskHealth(storage.diskStatus));\n         this.diskTierKeys.add(this.getDiskTier(storage.claimOption));\n         this.driveTypeKeys.add(this.getDriveType(storage.type));\n         this.claimableStateKeys.add(this.getClaimableStateLabel(storage.claimableState));\n         this.deviceMountStateKeys.add(this.getDiskMountedState(storage.diskStatus));\n         this.deviceOperationalStateKeys.add(this.getDiskOperationalState(storage.deviceState));\n         this.driveLocalityKeys.add(this.getDiskLocality(storage.driveLocality));\n         this.transportTypeKeys.add(this.getTransportTypeLabel(storage.transportType));\n         this.physicalLocationKeys.add(this.getPhysicalLocation(storage.physicalLocation));\n      });\n      this.updatePreselection();\n   }\n   get storageGroup(): StorageGroupData {\n      return this._storageGroup;\n   }\n\n   @Input()\n   host: HostData;\n\n   @Input()\n   preselectedStorage: StorageIdentifier;\n\n   @Output()\n   storageSelected: EventEmitter<StorageIdentifier> = new EventEmitter<StorageIdentifier>();\n\n   healthKeys: Set<string> = new Set<string>();\n   diskTierKeys: Set<string> = new Set<string>();\n   driveTypeKeys: Set<string> = new Set<string>();\n   claimableStateKeys: Set<string> = new Set<string>();\n   deviceMountStateKeys: Set<string> = new Set<string>();\n   deviceOperationalStateKeys: Set<string> = new Set<string>();\n   driveLocalityKeys: Set<string> = new Set<string>();\n   transportTypeKeys: Set<string> = new Set<string>();\n   physicalLocationKeys: Set<string> = new Set<string>();\n\n   healthComparator: ClrDatagridComparatorInterface<StorageData> = new HealthComparator();\n   deviceMountStateComparator: ClrDatagridComparatorInterface<StorageData> = new DeviceMountStateComparator();\n   deviceOperationalStateComparator: ClrDatagridComparatorInterface<StorageData> = new DeviceOperationalStateComparator();\n   driveTypeComparator: ClrDatagridComparatorInterface<StorageData> = new DriveTypeComparator();\n   claimableStateComparator: ClrDatagridComparatorInterface<StorageData> = new ClaimableStateComparator();\n   diskTierComparator: ClrDatagridComparatorInterface<StorageData> = new DiskTierComparator();\n   driveLocalityComparator: ClrDatagridComparatorInterface<StorageData> = new DriveLocalityComparator();\n   transportTypeComparator: ClrDatagridComparatorInterface<StorageData> = new TransportTypeComparator();\n   physicalLocationComparator: ClrDatagridComparatorInterface<StorageData> = new PhysicalLocationComparator();\n\n   ClaimableState: typeof ClaimableState = ClaimableState;\n   Icon: typeof Icon = Icon;\n   DiskMgmtExportConfig: typeof DiskMgmtExportConfig = DiskMgmtExportConfig;\n   storageItems: StorageData[] = [];\n   selectedStorageData: StorageData;\n   showGrid: boolean = false;\n\n   ascSort: ClrDatagridSortOrder = ClrDatagridSortOrder.ASC;\n\n   exportDataSource: ExportDataSource;\n   readonly DEFAULT_ITEMS_PER_PAGE: number = 10;\n\n   constructor(private refWatcher: ReferenceWatcher) { }\n\n   ngOnInit(): void {\n      this.updatePreselection();\n   }\n\n   /* The width of datagrid columns is not set when datagrid is inside an accordion.\n      See https://github.com/vmware/clarity/issues/3696 This causes:\n         1) Wrong column width when it is predefined.\n         2) When copyToClipboard icon is shown the row flickers because of cells misalignment.\n      The workaround is to display the grid on AfterViewInit.\n    */\n   ngAfterViewInit(): void {\n      this.showGrid = true;\n      this.refWatcher.setTimeout(() => this.exportDataSource = DiskMgmtExportConfig.createExportDataSource(this.datagrid), 0);\n   }\n\n   private updatePreselection(): void {\n      this.selectedStorageData = !this.preselectedStorage ?\n            this.sortDisksByHealth()[0] :\n            this.storageItems.find(storage => StorageIdentifier.areEqual(this.preselectedStorage, storage));\n      /* TODO: (vasilevd):\n       * 1) Check why component is initialized twice.\n       * 2) Default zero item selection is not passed to DiskManagementComponent, so that screen reader message\n       * doesn't include the selected storage. Check StorageGroupsComponent.toggleExpand().\n       */\n      this.selectionChanged(this.selectedStorageData, false);\n   }\n\n   selectionChanged(storageData: StorageData, emitSelection: boolean = true): void {\n      if (storageData && emitSelection) {\n         this.storageSelected.emit(new StorageIdentifier(storageData.uuid, storageData.name));\n      }\n   }\n\n   get claimableState(): ClaimableState {\n      return this.selectedStorageData && this.selectedStorageData.claimableState;\n   }\n\n   getPhysicalLocation = (physicalLocation: string[]): string => {\n      return DiskMgmtDiskUtil.getPhysicalLocation(physicalLocation);\n   };\n\n   getFsVersion = (diskStatus: DiskStatus): string => {\n      return DiskMgmtDiskUtil.getFormatVersion(diskStatus);\n   };\n\n   getDiskHealth = (diskStatus: DiskStatus): string => {\n      return DiskMgmtDiskUtil.getHealth(diskStatus);\n   };\n\n   getDriveType(type: DiskType): string {\n      return DiskMgmtDiskUtil.getDiskType(type);\n   }\n\n   getDiskTier(claimOption: ClaimOption): string {\n      return DiskMgmtDiskUtil.getLocalizedStorage(claimOption);\n   }\n\n   getDiskMountedState(diskStatus: DiskStatus): string {\n      return DiskMgmtDiskUtil.localizeMountedState(diskStatus);\n   }\n\n   getDiskOperationalState(deviceState: DiskData.DeviceState): string {\n      return DiskMgmtDiskUtil.localizeOperationalState(deviceState);\n   }\n\n   getDiskLocality(diskLocality: DiskLocalityType): string {\n      return DiskMgmtDiskUtil.localizeLocality(diskLocality);\n   }\n\n   getClaimableStateLabel(claimableState: ClaimableState): string {\n      return DiskMgmtDiskUtil.localizeClaimableState(claimableState);\n   }\n\n   getTransportTypeLabel(value: DiskData.StorageDeviceTransport): string {\n      return DiskMgmtDiskUtil.getTransportTypeText(value);\n   }\n\n   get isVsanDiskGroup(): boolean {\n      return DiskMgmtDiskGroupUtil.isVsanDiskGroup(this.storageGroup);\n   }\n\n   get isVsanMaxSingleTier(): boolean {\n      return DiskMgmtDiskGroupUtil.isVsanMaxSingleTier(this.storageGroup);\n   }\n\n   get isNotPmemGroup(): boolean {\n      return !DiskMgmtDiskGroupUtil.isPmemDiskGroup(this.storageGroup);\n   }\n\n   get isUnusedDiskGroup(): boolean {\n      return DiskMgmtDiskGroupUtil.isUnusedDiskGroup(this.storageGroup);\n   }\n\n   getPaginationLabel(pagination: ClrDatagridPagination): string {\n      return VsanUiUtils.getDatagridFooterLabel(this.storageItems, pagination, this.DEFAULT_ITEMS_PER_PAGE);\n   }\n\n   // Sort disks by health status in order to display unhealthy disks first\n   sortDisksByHealth(): StorageData[] {\n      return this.storageItems?.sort(DiskMgmtDiskUtil.compareDiskHealth);\n   }\n}\n\nexport class HealthComparator implements ClrDatagridComparatorInterface<StorageData> {\n   compare(o1: StorageData, o2: StorageData): number {\n      return DiskMgmtDiskUtil.compareDiskHealth(o1, o2);\n   }\n}\n\nexport class DeviceMountStateComparator implements ClrDatagridComparatorInterface<StorageData> {\n   compare(o1: StorageData, o2: StorageData): number {\n      return DiskMgmtDiskUtil.localizeMountedState(o1.diskStatus)\n            .localeCompare(DiskMgmtDiskUtil.localizeMountedState(o1.diskStatus));\n   }\n}\n\nexport class DeviceOperationalStateComparator implements ClrDatagridComparatorInterface<StorageData> {\n   compare(o1: StorageData, o2: StorageData): number {\n      return DiskMgmtDiskUtil.localizeOperationalState(o1.deviceState)\n            .localeCompare(DiskMgmtDiskUtil.localizeOperationalState(o2.deviceState));\n   }\n}\n\nexport class DriveTypeComparator implements ClrDatagridComparatorInterface<StorageData> {\n   compare(o1: StorageData, o2: StorageData): number {\n      return DiskMgmtDiskUtil.getDiskType(o1.type)\n            .localeCompare(DiskMgmtDiskUtil.getDiskType(o2.type));\n   }\n}\n\nexport class ClaimableStateComparator implements ClrDatagridComparatorInterface<StorageData> {\n   compare(o1: StorageData, o2: StorageData): number {\n      return DiskMgmtDiskUtil.localizeClaimableState(o1.claimableState)\n            .localeCompare(DiskMgmtDiskUtil.localizeClaimableState(o2.claimableState));\n   }\n}\n\nexport class DiskTierComparator implements ClrDatagridComparatorInterface<StorageData> {\n   compare(o1: StorageData, o2: StorageData): number {\n      return DiskMgmtDiskUtil.getLocalizedStorage(o1.claimOption)\n            .localeCompare(DiskMgmtDiskUtil.getLocalizedStorage(o2.claimOption));\n   }\n}\n\nexport class DriveLocalityComparator implements ClrDatagridComparatorInterface<StorageData> {\n   compare(o1: StorageData, o2: StorageData): number {\n      return DiskMgmtDiskUtil.localizeLocality(o1.driveLocality)\n            .localeCompare(DiskMgmtDiskUtil.localizeLocality(o2.driveLocality));\n   }\n}\n\nexport class TransportTypeComparator implements ClrDatagridComparatorInterface<StorageData> {\n   compare(o1: StorageData, o2: StorageData): number {\n      return DiskMgmtDiskUtil.getTransportTypeText(o1.transportType)\n            .localeCompare(DiskMgmtDiskUtil.getTransportTypeText(o2.transportType));\n   }\n}\n\nexport class PhysicalLocationComparator implements ClrDatagridComparatorInterface<StorageData> {\n   compare(o1: StorageData, o2: StorageData): number {\n      return DiskMgmtDiskUtil.getPhysicalLocation(o1.physicalLocation)\n            .localeCompare(DiskMgmtDiskUtil.getPhysicalLocation(o2.physicalLocation));\n   }\n}\n","/* Copyright 2018-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {AfterViewInit, Component, Input} from \"@angular/core\";\nimport {ChartSectionData} from \"@component/chart/model/chart-section.data\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {HighchartsThemeService} from \"@component/chart/highcharts-theme.service\";\nimport {TooltipOptions} from \"highcharts/highcharts.src\";\nimport {StorageCapacity} from \"@generated/storage-capacity\";\nimport {DiskMgmtUtil} from \"@util/disk-mgmt.util\";\nimport {TooltipValue} from \"@util/tooltip-value\";\nimport {BarChartService} from \"@component/chart/capacity-bar-chart/bar-chart.service\";\nimport {ReferenceWatcher} from \"@util/reference-watcher\";\nimport {CapacityType} from \"@util/capacity-type\";\n\n/**\n * A component that represents capacity as:\n *    - Total label when total is present only (e.g., cache disk, unmounted/unhealthy disk/disk group).\n *    - Chart when used / reserved capacity is present.\n *  The component is used in disk mgmt view on disk, disk group and host level.\n */\n@Component({\n   selector: \"vsan-storage-capacity\",\n   templateUrl: \"storage-capacity.html\",\n   styleUrls: [\"storage-capacity.scss\"],\n   providers: [ReferenceWatcher],\n})\nexport class StorageCapacityComponent implements AfterViewInit {\n\n   @Input()\n   capacity: StorageCapacity;\n\n   sectionsData: ChartSectionData[] = [];\n   // Set width, as otherwise tooltips content can be wrapped (e.g., in host lists).\n   // This behaves like a max-width + auto-resize.\n   tooltipOptions: TooltipOptions = {style: {width: 200}};\n\n   constructor(private highchartsThemeService: HighchartsThemeService,\n         private barChartService: BarChartService,\n         private refWatcher: ReferenceWatcher) {\n      this.refWatcher.watchSubscriptionRef(\n            this.highchartsThemeService.whenThemeChanged.subscribe(theme => this.updateSections()));\n   }\n\n   ngAfterViewInit(): void {\n      // Timeout is required to properly resize the chart\n      this.refWatcher.setTimeout(() => this.updateSections(), 0);\n   }\n\n   showOnlyTotalLabel(): boolean {\n      return this.capacity && !this.capacity.used;\n   }\n\n   getTotalLabel(): string {\n      return VsanUiUtils.formatFileSize(this.capacity.total);\n   }\n\n   private updateSections(): void {\n      if (this.showOnlyTotalLabel()) {\n         return;\n      }\n\n      const capacityColor: Map<CapacityType, string> = this.getCapacityColor();\n      const capacityTooltip: Map<string, TooltipValue> = DiskMgmtUtil.getCapacityTooltip(this.capacity, capacityColor);\n\n      this.sectionsData = [];\n      if (!VsanUiUtils.isUnset(this.capacity.used)) {\n         this.sectionsData.push(new ChartSectionData(\n               VsanUiUtils.getString(\"vsan.manage.diskManagement.capacity.used.label\"),\n               this.capacity.used,\n               \"diskManagementUsed\",\n               true,\n               capacityColor.get(CapacityType.USED),\n               capacityTooltip));\n      }\n   }\n\n   private getCapacityColor(): Map<CapacityType, string> {\n      return new Map<CapacityType, string>([\n               [CapacityType.USED, this.barChartService.getColorPalette()[0]],\n               [CapacityType.FREE, this.highchartsThemeService.getCapacityFreeColor()]]);\n   }\n}\n","/* Copyright 2017-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, OnInit} from \"@angular/core\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {ManagedObject} from \"@service/managed-object\";\nimport {DiskGroupMutationService} from \"@generated/disk-group-mutation-service\";\nimport {VsanDiskMapping} from \"@generated/vsan-disk-mapping\";\nimport {DiskData} from \"@generated/disk-data\";\nimport {DiskGroupData} from \"@generated/disk-group-data\";\nimport {ScsiDisk} from \"@component/diskmgmt/model/scsi-disk.data\";\nimport {LoadingIndicator} from \"@service/flow/loading-indicator.decorator\";\nimport {Loader} from \"@service/flow/loader.decorator\";\nimport {ErrorHandler} from \"@service/flow/error-handler.decorator\";\nimport {SrMessageType} from \"@service/screen-reader-announcer.service\";\nimport {DiskMgmtDiskGroupUtil} from \"@util/disk-mgmt-disk-group.util\";\n\n@Component({\n   templateUrl: \"add-disk.html\",\n   styleUrls: [\"../actions-common.scss\"],\n   selector: \"vsan-diskmgmt-add-disk\",\n})\nexport class AddDiskComponent implements OnInit {\n\n   @LoadingIndicator()\n   busy: boolean;\n\n   disksLoading: boolean = true;\n\n   clusterRef: ManagedObject;\n   diskGroup: DiskGroupData;\n   selectedDisks: DiskData[] = [];\n   alerts: string[];\n   isVsanMaxEnabled: boolean;\n   isAllFlashDiskGroup: boolean;\n\n   constructor(private diskGroupMutationService: DiskGroupMutationService) {\n   }\n\n   @Loader({srMessage: \"vsan.dialog.addDisksToDiskGroup.title\", srMessageType: SrMessageType.PAGE_TITLE})\n   ngOnInit(): void {\n      this.clusterRef = ManagedObject.contextObject;\n      this.diskGroup = VsanUiUtils.getModalContext();\n      this.isVsanMaxEnabled = DiskMgmtDiskGroupUtil.isVsanMaxSingleTier(this.diskGroup);\n      this.isAllFlashDiskGroup = DiskMgmtDiskGroupUtil.isAllFlashDiskGroup(this.diskGroup);\n   }\n\n   @ErrorHandler()\n   private handleError(error: string): void {\n      this.alerts = [error];\n   }\n\n   onLoadingComplete(): void {\n      this.disksLoading = false;\n   }\n\n   // invoked when the primary button is clicked\n   @Loader()\n   async onOkClicked(): Promise<void> {\n      if (this.selectedDisks.length === 0) {\n         this.alerts = [this.isVsanMaxEnabled\n               ? VsanUiUtils.getString(\"vsan.dialog.addDisksToStoragePool.error.selectDisks\")\n               : VsanUiUtils.getString(\"vsan.dialog.addDisksToDiskGroup.error.selectDisks\")];\n         return;\n      }\n\n      const taskRef: ManagedObject = this.isVsanMaxEnabled\n            ? await this.addDisksForVsanMax()\n            : await this.addDisksToDiskGroup();\n      VsanUiUtils.closeModalDialog(taskRef);\n   }\n\n   private addDisksForVsanMax(): Promise<ManagedObject> {\n      const diskNames: string[] = this.selectedDisks.map(selectedDisk => selectedDisk.disk.canonicalName);\n      return this.diskGroupMutationService.addDisksToStoragePool(this.diskGroup.ownerHostRef, diskNames);\n   }\n\n   private addDisksToDiskGroup(): Promise<ManagedObject> {\n      const disks: ScsiDisk[] = this.selectedDisks.map(selectedDisk => selectedDisk.disk);\n\n      // find the SSD disk of the group we are adding to\n      const ssd: DiskData = this.diskGroup.disks.find(d => d.isMappedAsCache);\n      const diskMapping: VsanDiskMapping = VsanDiskMapping.Factory.create(ssd.disk, disks);\n\n      return this.diskGroupMutationService.addDiskToDiskGroup(\n            this.clusterRef,\n            this.diskGroup.ownerHostRef,\n            diskMapping);\n   }\n\n   getDialogTitle(): string {\n      return this.isVsanMaxEnabled\n            ? VsanUiUtils.getString(\"vsan.dialog.addDisksToStoragePool.title\")\n            : VsanUiUtils.getString(\"vsan.dialog.addDisksToDiskGroup.title\");\n   }\n}\n","/* Copyright 2020 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Subject} from \"rxjs\";\nimport {BreadcrumbRouteModel} from \"./breadcrumb-route.model\";\n\nexport class VsanBreadcrumbService {\n   /**\n    * Keeps the routes keys of all components having @BreadcrumbNavigation annotated field in the correct order.\n    * Example:\n    * Parent component view routes:\n    *     parentViewRoutes = {\n    *        parentRoot: ...,\n    *        parentLevelA: ...,\n    *        parentLevelB: ...,\n    *     }\n    * Child component view routes:\n    *     childViewRoutes = {\n    *        childRoot: ...,\n    *        childLevelA: ...,\n    *        childLevelB: ...,\n    *     }\n    * Then the routeOrders will be [parentRoot, parentLevelA, parentLevelB, childRoot, childLevelA, childLevelB]\n    * This information is needed in order to be known navigated routes order even in multiple components navigation.\n    */\n   private static routeOrders: string[] = [];\n\n   static addRouteOrders(keys: string[]) {\n      VsanBreadcrumbService.routeOrders.push(...keys);\n   }\n\n   static getRouteOrders(): string[] {\n      return VsanBreadcrumbService.routeOrders;\n   }\n\n   /**\n    * Triggers event when breadcrumb navigation is enabled.\n    */\n   static enable: Subject<boolean> = new Subject();\n\n   /**\n    * Triggered when navigation from a component occurs.\n    */\n   static route: Subject<BreadcrumbRouteModel> = new Subject();\n\n   /**\n    * Triggered when route link is clicked in the breadcrumb nav.\n    */\n   static onRouteClick: Subject<BreadcrumbRouteModel> = new Subject();\n\n   static show(value: boolean) {\n      VsanBreadcrumbService.enable.next(value);\n   }\n}\n\n/** Example usage\n *  1. Define routing object and annotate it with @BreadcrumbNavigation.\n *     @BreadcrumbNavigation\n *     routes: any;\n *  2. Initialize the routing object in the ngOnInit hook.\n *     ngOnInit {\n *        this.routes = {\n *          root: BreadcrumbRouteModel.link(onRouteTriggeredCallbackName, \"some link value\"),\n *          levelA: BreadcrumbRouteModel.link(onRouteTriggeredCallbackName1, \"some link value\"),\n *          levelB: BreadcrumbRouteModel.link(onRouteTriggeredCallbackName2, \"some link value\"),\n *        };\n *     }\n *  3. Define the callback methods (onRouteTriggeredCallbackName).\n *     They will be called when the corresponding route link is clicked.\n *  4. Navigate to route from the component\n *     this.routes.levelA.navigate()\n *  NOTE: fields annotated with @BreadcrumbNavigation must be initialized in angular hooked callback like the ngOnInit.\n */\nexport function BreadcrumbNavigation(): any {\n   return (target: any, propertyKey: string) => {\n      let _routes: any = null;\n      Object.defineProperty(target, propertyKey, {\n         get: () => {\n            return _routes;\n         },\n         set: function (routes: any) {\n            // Gets reference to the angular component\n            const componentContext = this;\n            _routes = routes;\n            const keys = Object.keys(routes);\n            keys.forEach((key => {\n               (routes[key] as BreadcrumbRouteModel).key = key;\n            }));\n            // Pass the newly initialized component routes keys\n            VsanBreadcrumbService.addRouteOrders(keys);\n            VsanBreadcrumbService.onRouteClick.subscribe(route => {\n               if (!_routes[route.key]) {\n                  return;\n               }\n               _routes[route.key] = route;\n               // Call the angular component callback by given route\n               if (componentContext[_routes[route.key].onTrigger]) {\n                  componentContext[_routes[route.key].onTrigger]();\n               }\n            });\n         },\n      });\n   };\n}\n","<!--Copyright 2020-2022 VMware, Inc. All rights reserved. -- VMware Confidential-->\n<h5 vsan-auto-focus>\n   {{\"manage.vsan.diskManagement\" | localized}}\n</h5>\n<vsan-validation id=\"validation-message\"\n                 *ngIf=\"alertMessages.length\"\n                 [(alerts)]=\"alertMessages\"\n                 [allowReload]=\"true\"\n                 (onReload)=\"fetch()\"\n                 (onClosed)=\"clearErrors()\">\n</vsan-validation>\n\n<!-- busy indicator -->\n<span class=\"busy-backdrop\" *ngIf=\"loading\">\n   <span class=\"spinner central-spinner\"></span>\n</span>\n\n<vsan-unavailable-view *ngIf=\"!loading && noHostsView\"\n                       [unavailableViewSpec]=\"noHostsView\"\n                       [hasEditPrivilege]=\"hasEditPermission\"\n                       [clusterRef]=\"clusterRef\">\n</vsan-unavailable-view>\n\n<vsan-upgrade *ngIf=\"!loading && !noHostsView && upgradeData\"\n              [upgradeData]=\"upgradeData\"\n              [hasUpgradePermission]=\"hasEditPermission\"\n              [visibleWhenUpToDate]=\"isVsanUpgradeVisible\"\n              (upgradeComplete)=\"vsanUpgradeComplete()\"\n              (precheckComplete)=\"fetchPrecheckUpgradeData()\">\n</vsan-upgrade>\n\n<!--Breadcrumb must not be hidden once it's shown-->\n<vsan-breadcrumb-nav *ngIf=\"!noHostsView && isBreadcrumbNavigationEnabled\"></vsan-breadcrumb-nav>\n<ng-container *ngIf=\"!loading && !noHostsView\">\n   <ng-container *ngIf=\"!isVirtualObjectsView\">\n      <vsan-disk-mgmt-summary [hostList]=\"hostList\"\n                              [hostIndex]=\"hostIndex\"\n                              [vsanConfig]=\"vsanConfig\"\n                              [clusterName]=\"clusterName\"\n                              [autoClaimMode]=\"vsanConfig.autoClaimDisks\"\n                              [hasEditPermission]=\"hasEditPermission\"\n                              [hasDuplicatePciIdDevices]=\"hasDuplicatePciIdDevices\"\n                              [clusterCapabilities]=\"clusterCapabilities\"\n                              [hasHostMaintenancePermission]=\"hasHostMaintenancePermission\">\n      </vsan-disk-mgmt-summary>\n      <vsan-host-list *ngIf=\"!isHostDetailsLevel()\"\n                      [hostList]=\"hostList\"\n                      [autoClaimMode]=\"vsanConfig.autoClaimDisks\"\n                      [hasEditPermission]=\"hasEditPermission\"\n                      [clusterCapabilities]=\"clusterCapabilities\"\n                      [hasHostMaintenancePermission]=\"hasHostMaintenancePermission\"\n                      [selectedHost]=\"preselectedHost\"\n                      (hostSelected)=\"selectHost($event)\">\n      </vsan-host-list>\n      <vsan-storage-groups *ngIf=\"isHostDetailsLevel()\"\n                           [host]=\"preselectedHost\"\n                           [autoClaimMode]=\"vsanConfig.autoClaimDisks\"\n                           [spaceEfficiencyConfig]=\"vsanConfig.spaceEfficiencyConfig\"\n                           [hasEditPermission]=\"hasEditPermission\"\n                           [clusterCapabilities]=\"clusterCapabilities\"\n                           [hasHostMaintenancePermission]=\"hasHostMaintenancePermission\"\n                           [preselectedGroupIdentifier]=\"preselectedGroupIdentifier\"\n                           (groupSelected)=\"selectGroup($event)\"\n                           [preselectedStorage]=\"preselectedStorageIdentifier\"\n                           (storageSelected)=\"selectStorage($event)\">\n      </vsan-storage-groups>\n   </ng-container>\n   <ng-container *ngIf=\"isVirtualObjectsView\">\n      <div class=\"virtual-objects-actions\">\n         <button id=\"exit-virtual-objects-btn\"\n                 name=\"exit-virtual-objects-btn\"\n                 class=\"btn btn-sm btn-primary no-margin\"\n                 (click)=\"exitVirtualObjects()\">\n            <clr-icon shape=\"arrow\"></clr-icon>\n            {{getExitVirtualObjectsLabel()}}\n         </button>\n      </div>\n      <vsan-virtual-objects-filterable-table\n            id=\"virtual-objects-table\"\n            *ngIf=\"clusterCapabilities?.isObjectIdentitiesSupported\"\n            [loading]=\"!virtualObjects\"\n            [virtualObjects]=\"virtualObjects\">\n      </vsan-virtual-objects-filterable-table>\n   </ng-container>\n</ng-container>\n","/* Copyright 2019-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component} from \"@angular/core\";\nimport {ScsiDisk} from \"@component/diskmgmt/model/scsi-disk.data\";\nimport {DecommissionModeSummary} from \"@component/precheck/pre-check-evacuation-summary.component\";\nimport {DecommissionMode} from \"@generated/decommission-mode\";\nimport {DiskData} from \"@generated/disk-data\";\nimport {DiskGroupMutationService} from \"@generated/disk-group-mutation-service\";\nimport {RemoveDiskGroupSpec} from \"@generated/remove-disk-group-spec\";\nimport {RemoveDiskSpec} from \"@generated/remove-disk-spec\";\nimport {VsanDiskMapping} from \"@generated/vsan-disk-mapping\";\nimport {VsanPropertyProvider} from \"@generated/vsan-property-provider\";\nimport {VsanQueryDataEvacuationInfoSpec} from \"@generated/vsan-query-data-evacuation-info-spec\";\nimport {DiskGroupActionData} from \"@model/disk-group-action.data\";\nimport {HostActionData} from \"@model/host-action.data\";\nimport {DeleteDisksContext} from \"@navigation/context/delete-disks-context\";\nimport {EvacuationContext} from \"@navigation/context/evacuation.context\";\nimport {NavigationService, PlatformExtension} from \"@navigation/navigation.service\";\nimport {HostSystem} from \"@service/client/dataservice/data-service-property\";\nimport {DataServiceClient} from \"@service/client/dataservice/data-service.service\";\nimport {ErrorHandler} from \"@service/flow/error-handler.decorator\";\nimport {LoaderName} from \"@service/flow/loader-name\";\nimport {Loader} from \"@service/flow/loader.decorator\";\nimport {LoadingIndicator} from \"@service/flow/loading-indicator.decorator\";\nimport {ManagedObject} from \"@service/managed-object\";\nimport {SrMessageType} from \"@service/screen-reader-announcer.service\";\nimport {DiskMgmtDiskUtil} from \"@util/disk-mgmt-disk.util\";\nimport {Logger} from \"@util/logger\";\nimport {VsanDataMigrationUtil} from \"@util/vsan-data-migration-util\";\nimport {VsanDiskMgmtActionsUtil} from \"@util/vsan-disk-mgmt-actions-util\";\nimport {VsanDiskUtil} from \"@util/vsan-disk-util\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\n\n@Component({\n   templateUrl: \"delete-disks.html\",\n   styleUrls: [\"../actions-common.scss\"],\n   selector: \"vsan-diskmgmt-delete-disks\",\n})\nexport class DeleteDisksComponent {\n   subtitle: string;\n   warningMessages: string[] = [];\n   footerText: string;\n   dataOnDiskLabel: string = VsanUiUtils.getString(\"vsan.dialog.deleteDiskGroup.evacuateDataLabel\");\n   shouldAllowDataMigration: boolean;\n   selectedDecommissionMode: DecommissionMode = DecommissionMode.ensureObjectAccessibility;\n\n   @LoadingIndicator({\n      name: [LoaderName.ON_INIT, LoaderName.DATA_EVACUATION, LoaderName.ON_CONFIRM],\n   })\n   busy: boolean;\n\n   alerts: string[];\n   isValidDecommisionMode: boolean = true;\n   goToPrecheckButtonText: string;\n   host: HostActionData;\n   disks: DiskData[];\n   preselectedDecommissionMode: DecommissionMode;\n   localizedPreselectedDecommissionMode: string;\n   isVsanMaxEnabled: boolean;\n\n   private diskGroups: DiskGroupActionData[];\n   isDiskResourcePrecheckSupported: boolean = true;\n   private isAbsentDisk: boolean = false;\n\n   constructor(private vsanPropertyProvider: VsanPropertyProvider,\n         private diskGroupMutationService: DiskGroupMutationService,\n         private navigationService: NavigationService,\n         private dataService: DataServiceClient) {\n   }\n\n   @Loader({\n      name: LoaderName.ON_INIT,\n      srMessage: \"vsan.dialog.deleteDiskFromDiskGroup.title\",\n      srMessageType: SrMessageType.PAGE_TITLE,\n   })\n   async ngOnInit(): Promise<void> {\n      const context: DeleteDisksContext = VsanUiUtils.getModalContext();\n      this.host = context.host;\n      this.disks = context.disks;\n      this.diskGroups = context.diskGroups;\n      this.isVsanMaxEnabled = context.isVsanMaxEnabled;\n      this.isAbsentDisk = VsanDiskUtil.isAbsentDisk(this.disks[0].diskStatus);\n      if (this.isAbsentDisk) {\n         // We can only remove the absent disk with noAction mode.\n         this.preselectedDecommissionMode = DecommissionMode.noAction;\n      } else {\n         this.preselectedDecommissionMode = context.decommissionMode;\n      }\n      this.localizedPreselectedDecommissionMode =\n            VsanDataMigrationUtil.getLocalizedDecommissionMode(this.preselectedDecommissionMode);\n\n      this.host.isInMaintenanceMode = await this.dataService\n            .getProperty(HostSystem.runtime.inMaintenanceMode, this.host.hostRef);\n      this.initUI();\n   }\n\n   @ErrorHandler({name: LoaderName.ON_INIT})\n   private handleInitError(): void {\n      this.alerts = [VsanUiUtils.getString(\"vsan.common.error.dataExtraction\")];\n   }\n\n   private initUI(): void {\n      this.shouldAllowDataMigration = this.shouldAllowDisksDataMigration();\n      if (!this.shouldAllowDataMigration) {\n         this.selectedDecommissionMode = DecommissionMode.noAction;\n         VsanUiUtils.setModalDialogHeight(VsanDiskMgmtActionsUtil.DELETE_DISKS_HEIGHT_SMALL);\n      }\n\n      this.warningMessages.push(this.getHeaderMessage());\n      const dataMigrationWarning: string = this.getDataMigrationWarning(this.disks, this.host.isInMaintenanceMode);\n      if (dataMigrationWarning) {\n         this.warningMessages.push(dataMigrationWarning);\n      }\n\n      this.showForDisks();\n   }\n\n   private shouldAllowDisksDataMigration = (): boolean => {\n      const isHostEligible: boolean = this.host.isWhatIfSupported // feature is supported\n            && !this.host.isWitnessHost // not on a withness host\n            && !this.host.isInMaintenanceMode; // Not on a host in MM\n\n      return this.isVsanMaxEnabled\n            ? this.isDataMigrationAllowedForVsanMax(isHostEligible)\n            : this.isDataMigrationAllowedForVsan(isHostEligible);\n   };\n\n   private isDataMigrationAllowedForVsanMax(isHostEligible: boolean): boolean {\n      return isHostEligible && this.disks.every(disk => VsanDiskUtil.isVsanDiskMounted(disk));\n   }\n\n   private isDataMigrationAllowedForVsan(isHostEligible: boolean): boolean {\n      return isHostEligible\n            && this.diskGroups.some(group => group.isMounted) // the selected disks/group are mounted\n            && this.diskGroups.length === 1 && this.disks.length <= 1 // only for single/no disk\n            && this.diskGroups.some(group => !group.isLocked); // Not all groups are locked\n   }\n\n   private getHeaderMessage = (): string => {\n      const groupUuids: string = this.diskGroups.map(group => group.vsanUuid).join(\", \");\n      const dataMigrationMessage: string = this.getDataMigrationMessage(this.disks, groupUuids);\n      const removeAllCapacityDisksMessage: string = this.isRemovingAllCapacityDisks(this.diskGroups, this.disks) ?\n            VsanUiUtils.getString(\"vsan.confirmAllDataDisksRemove.text\") : \"\";\n\n      if (this.host.isInMaintenanceMode) {\n         return dataMigrationMessage;\n      } else if (this.host.isWitnessHost) {\n         return VsanUiUtils.getString(\"vsan.confirmDiskRemoveOperation.externalWitnessHostWarning\",\n               dataMigrationMessage, removeAllCapacityDisksMessage);\n      } else if (this.isAbsentDisk) {\n         return VsanUiUtils.getString(\"vsan.confirmDiskRemoveOperation.absentDisk\",\n               dataMigrationMessage, removeAllCapacityDisksMessage);\n      } else {\n         return VsanUiUtils.getString(\"vsan.confirmDiskRemoveOperation.headerDataEvacuation\",\n               dataMigrationMessage, removeAllCapacityDisksMessage);\n      }\n   };\n\n   private getDataMigrationMessage = (disks: DiskData[], groupUuids: string): string => {\n      if (!VsanUiUtils.isEmpty(groupUuids)) {\n         return disks.length === 1 ?\n               VsanUiUtils.getString(\"vsan.confirmSingleDiskRemove.dataEvacuation.text\", disks[0].name, groupUuids) :\n               VsanUiUtils.getString(\"vsan.confirmMultipleDisksRemove.dataEvacuation.text\", groupUuids);\n      } else {\n         return disks.length === 1 ?\n               VsanUiUtils.getString(\"vsan.confirmSingleDiskRemove.dataEvacuation.noGroups.text\", disks[0].name) :\n               VsanUiUtils.getString(\"vsan.confirmMultipleDisksRemove.dataEvacuation.noGroups.text\");\n      }\n   };\n\n   private isRemovingAllCapacityDisks = (groups: DiskGroupActionData[], disks: DiskData[]): boolean => {\n      const allCapacityDisks: ScsiDisk[] = [];\n      groups.forEach(group => allCapacityDisks.push(...group.diskMapping.nonSsd));\n      return disks.length === allCapacityDisks.length;\n   };\n\n   private getDataMigrationWarning = (disks: DiskData[], isInMaintenanceMode: boolean): string => {\n      if (isInMaintenanceMode) {\n         return this.isVsanMaxEnabled\n               ? VsanUiUtils.getString(\"vsan.dialog.deleteDisk.hostInMaintenance.warning\")\n               : VsanUiUtils.getString(\"vsan.dialog.deleteDiskFromDiskGroup.hostInMaintenance.warning\");\n      } else {\n         if (disks[0].deviceState === DiskData.DeviceState.OFF) {\n            return VsanUiUtils.getString(\"vsan.dialog.deleteDiskFromDiskGroup.unmountedDisk.warning\");\n         }\n      }\n   };\n\n   private showForDisks = () => {\n      this.footerText = this.disks.length === 1 ?\n            VsanUiUtils.getString(\"vsan.confirmDiskRemoveOperation.footerRemoveDisk\") :\n            VsanUiUtils.getString(\"vsan.confirmDiskRemoveOperation.footerRemoveDisks\");\n\n      switch (this.diskGroups.length) {\n         case 0:\n            this.subtitle = \"\";\n            break;\n         case 1:\n            this.subtitle = this.diskGroups[0].vsanUuid;\n            break;\n         default:\n            this.subtitle = VsanUiUtils.getString(\"vsan.dialog.deleteDiskFromDiskGroups.count\",\n                  this.diskGroups.length);\n      }\n      this.requestDataEvacuationProperty(this.disks.map(data => data.disk));\n   };\n\n   @Loader({name: LoaderName.DATA_EVACUATION})\n   private async requestDataEvacuationProperty(disks: ScsiDisk[]): Promise<void> {\n      if (!disks.every(DiskMgmtDiskUtil.isScsiDiskHealthy)) {\n         this.dataOnDiskLabel = VsanUiUtils.getString(\"vsan.dialog.deleteDiskGroup.evacuateDataLabel.error\");\n         return;\n      }\n\n      const spec: VsanQueryDataEvacuationInfoSpec = VsanQueryDataEvacuationInfoSpec.Factory.create(disks);\n      const result: number = await this.vsanPropertyProvider.getVsanDataEvacuationInfo(this.host.hostRef, spec);\n      this.onDataEvacuationPropertyRetrieved(result);\n   }\n\n   private onDataEvacuationPropertyRetrieved = (result: number) => {\n      if (result >= 0) {\n         const formattedSize: string = VsanUiUtils.formatFileSize(result);\n         this.dataOnDiskLabel = VsanUiUtils.getString(\"vsan.dialog.deleteDiskGroup.evacuateDataLabelWithSize\",\n               formattedSize);\n      }\n   };\n\n   @ErrorHandler({name: LoaderName.DATA_EVACUATION})\n   private onDataRetrievalError(message: any): void {\n      this.alerts = [VsanUiUtils.getString(\"vsan.common.error.dataExtraction\")];\n      this.dataOnDiskLabel = VsanUiUtils.getString(\"vsan.dialog.deleteDiskGroup.evacuateDataLabel.error\");\n      Logger.error(\"Failed to retrieve vsanDataEvacuationInfo: \" + message);\n   }\n\n   onDecommissionModeSummaryChanged = (summary: DecommissionModeSummary) => {\n      this.selectedDecommissionMode = summary.value;\n      this.isValidDecommisionMode = summary.isValidDecommissionMode;\n      // change the dialog height based on the content\n      if (VsanDiskMgmtActionsUtil.isPrecheckWithObjects(summary) && !this.isDiskResourcePrecheckSupported) {\n         VsanUiUtils.setModalDialogHeight(VsanDiskMgmtActionsUtil.DELETE_DISKS_HEIGHT_LARGE);\n      } else if (this.isDiskResourcePrecheckSupported) {\n         VsanUiUtils.setModalDialogHeight(VsanDiskMgmtActionsUtil.DELETE_DISKS_HEIGHT_PRECHECK);\n      } else {\n         VsanUiUtils.setModalDialogHeight(VsanDiskMgmtActionsUtil.DELETE_DISKS_HEIGHT_MEDIUM);\n      }\n   };\n\n   onDiskResourcePrecheckSupportedChanged = (isSupported: boolean) => {\n      this.isDiskResourcePrecheckSupported = isSupported;\n      // Preselecting decommmission mode means that this dialog is opened from Data migration pre-check page,\n      // in which case GO TO PRE-CHECK button doesn't need to be display.\n      this.goToPrecheckButtonText = !this.preselectedDecommissionMode && this.isDiskResourcePrecheckSupported ?\n            VsanUiUtils.getString(\"vsan.actions.goToPrecheckDataMigration.label\") : \"\";\n   };\n\n   @Loader({name: LoaderName.ON_CONFIRM})\n   async onOkClicked(): Promise<void> {\n      const decommissionMode: DecommissionMode = this.preselectedDecommissionMode ?\n            this.preselectedDecommissionMode :\n            VsanDiskMgmtActionsUtil.getSelectedDecommissionMode(\n                  this.shouldAllowDataMigration, this.selectedDecommissionMode);\n      let tasks: ManagedObject[] = [];\n      if (this.isVsanMaxEnabled) {\n         tasks.push(await this.deleteVsanMaxDisks(decommissionMode));\n      } else {\n         tasks.push(...await this.deleteVsanDisks(decommissionMode));\n      }\n\n      this.handleTaskList(tasks);\n   }\n\n   private deleteVsanDisks(decommissionMode: DecommissionMode): Promise<ManagedObject[]> {\n      const disksToDelete: ScsiDisk[] = [];\n      // Get disk group vsanUuid and its disks to be deleted.\n      const diskGroupsToDelete: { [diskGroupVsanUuid: string]: VsanDiskMapping; } = {};\n\n      this.disks.forEach((disk: DiskData) => {\n         const group: DiskGroupActionData = this.diskGroups.find(diskGroup => diskGroup.vsanUuid === disk.diskGroup);\n         const diskMapping: VsanDiskMapping = group.diskMapping;\n\n         if (diskMapping.nonSsd.length === 1) {\n            // We need to remove the whole disk group if the current disk is the last one capacity disk.\n            diskGroupsToDelete[disk.diskGroup] = diskMapping;\n         } else {\n            // The disk is not the last capacity disk in the group, remove it separately.\n            disksToDelete.push(disk.disk);\n         }\n      });\n\n      const diskGroupSpec: RemoveDiskGroupSpec = RemoveDiskGroupSpec.Factory.create(\n            decommissionMode,\n            Object.keys(diskGroupsToDelete).map(key => diskGroupsToDelete[key]));\n      const diskSpec: RemoveDiskSpec = RemoveDiskSpec.Factory.create(decommissionMode, disksToDelete);\n\n      return this.diskGroupMutationService.removeDisksAndMappings(\n            ManagedObject.contextObject, this.host.hostRef, diskGroupSpec, diskSpec);\n   }\n\n   private deleteVsanMaxDisks(decommissionMode: DecommissionMode): Promise<ManagedObject> {\n      const vSanMaxDisksToDelete: string[] = this.disks.map(disk => disk.vsanUuid);\n\n      return this.diskGroupMutationService.removeVsanMaxDisks(\n            ManagedObject.contextObject, decommissionMode, vSanMaxDisksToDelete);\n   }\n\n   onGoToPrecheckClicked = () => {\n      const evacuationContext: EvacuationContext = VsanDiskMgmtActionsUtil.getEvacuationContext(\n            this.host.hostRef, this.disks[0].vsanUuid, this.selectedDecommissionMode);\n      this.navigationService.navigateToAndCloseModal(PlatformExtension.CLUSTER_DATA_MIGRATION_PRE_CHECK,\n            ManagedObject.contextObjectUid, evacuationContext);\n   };\n\n   private handleTaskList = (tasks: ManagedObject[]) => {\n      VsanUiUtils.closeModalDialog(tasks);\n   };\n\n   @ErrorHandler({name: LoaderName.ON_CONFIRM})\n   private onDeleteOperationError(message: any): void {\n      this.alerts = [message];\n   }\n\n   get isDeleteButtonBlocked(): boolean {\n      return this.busy || !this.isValidDecommisionMode;\n   }\n}\n","<!--Copyright 2020-2021 VMware, Inc. All rights reserved. -- VMware Confidential-->\n<ng-container *ngIf=\"selectedHost\">\n   <button id=\"{{DiskManagementActionAvailabilityService.VIEW_HOST_STORAGE_AND_GROUPS_ID}}\"\n           class=\"btn btn-sm btn-link no-spacing\"\n           *ngIf=\"isHostListView\"\n           [disabled]=\"actionDisabled(DiskManagementActionAvailabilityService.VIEW_HOST_STORAGE_AND_GROUPS_ID)\"\n           (click)=\"viewHostDetails()\"\n           [attr.title]=\"getActionButtonTitle(DiskManagementActionAvailabilityService.VIEW_HOST_STORAGE_AND_GROUPS_ID)\">\n      {{\"vsan.actions.viewDisksAndGroups.label\" | localized}}\n   </button>\n   <button id=\"{{DiskManagementActionAvailabilityService.VIEW_HOST_OBJECTS_ID}}\"\n           class=\"btn btn-sm btn-link no-spacing\"\n           *ngIf=\"clusterCapabilities?.isObjectIdentitiesSupported\"\n           [disabled]=\"actionDisabled(DiskManagementActionAvailabilityService.VIEW_HOST_OBJECTS_ID)\"\n           (click)=\"viewHostObjects()\"\n           [attr.title]=\"getActionButtonTitle(DiskManagementActionAvailabilityService.VIEW_HOST_OBJECTS_ID)\">\n      {{\"vsan.actions.viewHostObjects.label\" | localized}}\n   </button>\n   <button id=\"{{DiskManagementActionAvailabilityService.CREATE_DISK_GROUP_ID}}\"\n           class=\"btn btn-sm btn-link no-spacing\"\n           *ngIf=\"hasCreateDiskGroupAction\"\n           [disabled]=\"actionDisabled(DiskManagementActionAvailabilityService.CREATE_DISK_GROUP_ID)\"\n           (click)=\"invokeCreateDiskGroup()\"\n           [attr.title]=\"getActionButtonTitle(DiskManagementActionAvailabilityService.CREATE_DISK_GROUP_ID)\">\n      {{\"vsan.actions.createDiskGroup.label\" | localized}}\n   </button>\n   <button id=\"{{DiskManagementActionAvailabilityService.PRE_CHECK_ID}}\"\n           class=\"btn btn-sm btn-link no-spacing\"\n           [disabled]=\"actionDisabled(DiskManagementActionAvailabilityService.PRE_CHECK_ID)\"\n           (click)=\"invokePrecheckEvacuation()\"\n           [attr.title]=\"getActionButtonTitle(DiskManagementActionAvailabilityService.PRE_CHECK_ID)\">\n      {{getPrecheckLabel()}}\n   </button>\n</ng-container>","/* Copyright 2019-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, OnInit} from \"@angular/core\";\nimport {ScsiDisk} from \"@component/diskmgmt/model/scsi-disk.data\";\nimport {DecommissionModeSummary} from \"@component/precheck/pre-check-evacuation-summary.component\";\nimport {DecommissionMode} from \"@generated/decommission-mode\";\nimport {DiskGroupMutationService} from \"@generated/disk-group-mutation-service\";\nimport {UnmountDiskGroupSpec} from \"@generated/unmount-disk-group-spec\";\nimport {VsanCapabilityProvider} from \"@generated/vsan-capability-provider\";\nimport {VsanPropertyProvider} from \"@generated/vsan-property-provider\";\nimport {VsanQueryDataEvacuationInfoSpec} from \"@generated/vsan-query-data-evacuation-info-spec\";\nimport {DiskGroupActionData} from \"@model/disk-group-action.data\";\nimport {HostActionData} from \"@model/host-action.data\";\nimport {DiskGroupActionContext} from \"@navigation/context/disk-group-action-context\";\nimport {EvacuationContext} from \"@navigation/context/evacuation.context\";\nimport {NavigationService, PlatformExtension} from \"@navigation/navigation.service\";\nimport {HostSystem} from \"@service/client/dataservice/data-service-property\";\nimport {DataServiceClient} from \"@service/client/dataservice/data-service.service\";\nimport {ErrorHandler} from \"@service/flow/error-handler.decorator\";\nimport {LoaderName} from \"@service/flow/loader-name\";\nimport {Loader} from \"@service/flow/loader.decorator\";\nimport {LoadingIndicator} from \"@service/flow/loading-indicator.decorator\";\nimport {ManagedObject} from \"@service/managed-object\";\nimport {SrMessageType} from \"@service/screen-reader-announcer.service\";\nimport {DiskMgmtDiskUtil} from \"@util/disk-mgmt-disk.util\";\nimport {Logger} from \"@util/logger\";\nimport {VsanDataMigrationUtil} from \"@util/vsan-data-migration-util\";\nimport {VsanDiskMgmtActionsUtil} from \"@util/vsan-disk-mgmt-actions-util\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\n\n/**\n * This component is used to unmount disk group.\n */\n@Component({\n   templateUrl: \"unmount-disk-group.html\",\n   selector: \"vsan-unmount-disk-group\",\n   styleUrls: [\"../actions-common.scss\"],\n})\nexport class UnmountDiskGroupComponent implements OnInit {\n   @LoadingIndicator({\n      name: [\n         LoaderName.ON_INIT, LoaderName.DATA_EVACUATION, LoaderName.ON_CONFIRM],\n   })\n   loading: boolean;\n\n   alerts: string[] = [];\n   warningMessages: string[] = [];\n   host: HostActionData;\n   diskGroup: DiskGroupActionData;\n\n   dataOnDiskGroupLabel: string = VsanUiUtils.getString(\"vsan.dialog.deleteDiskGroup.evacuateDataLabel\");\n   evacuationEntityUuid: string;\n   shouldAllowDataMigration: boolean;\n   isValidDecommisionMode: boolean = true;\n   selectedDecommissionMode: DecommissionMode = DecommissionMode.ensureObjectAccessibility;\n   goToPrecheckButtonText: string;\n   isDiskResourcePrecheckSupported: boolean = true;\n   preselectedDecommissionMode: DecommissionMode;\n   localizedPreselectedDecommissionMode: string;\n   preCheckRecommendationMessage: string = VsanUiUtils.getString(\n         \"vsan.dialog.precheckEvacuation.recommendationMesaage.diskGroup.unmount\");\n\n   constructor(private diskGroupMutationService: DiskGroupMutationService,\n         private vsanPropertyProvider: VsanPropertyProvider,\n         private capabilityProvider: VsanCapabilityProvider,\n         private navigationService: NavigationService,\n         private dataService: DataServiceClient) {\n   }\n\n   @Loader({\n      name: LoaderName.ON_INIT,\n      srMessage: \"vsan.actions.unmountDiskGroup.dialogTitle\",\n      srMessageType: SrMessageType.PAGE_TITLE,\n   })\n   async ngOnInit(): Promise<void> {\n      const context: DiskGroupActionContext = VsanUiUtils.getModalContext();\n      this.host = context.host;\n      this.diskGroup = context.diskGroup;\n      this.preselectedDecommissionMode = context.decommissionMode;\n      this.localizedPreselectedDecommissionMode =\n            VsanDataMigrationUtil.getLocalizedDecommissionMode(this.preselectedDecommissionMode);\n\n      this.host.isInMaintenanceMode = await this.dataService\n            .getProperty(HostSystem.runtime.inMaintenanceMode, this.host.hostRef);\n      this.initUI();\n   }\n\n   @ErrorHandler({name: LoaderName.ON_INIT})\n   private handleInitError(): void {\n      this.alerts = [VsanUiUtils.getString(\"vsan.common.error.dataExtraction\")];\n   }\n\n   private async initUI(): Promise<void> {\n      if (this.preselectedDecommissionMode) {\n         // TODO: Display DecommissionMode as a label instead of a select dropdown.\n      }\n\n      this.evacuationEntityUuid = this.diskGroup.vsanUuid;\n      this.requestDataEvacuationProperty(this.diskGroup.diskMapping.ssd);\n\n      try {\n         const isApiSupported: boolean =\n               await this.capabilityProvider.getIsUnmountWithMaintenanceModeSupported(this.host.hostRef);\n         this.setDialogContent(isApiSupported);\n      } catch (error) {\n         Logger.error(error);\n         this.alerts = [VsanUiUtils.getString(\"vsan.common.error.dataExtraction\")];\n      }\n   }\n\n   private setDialogContent = (isApiSupported: boolean) => {\n      this.shouldAllowDataMigration = isApiSupported && VsanDiskMgmtActionsUtil.shouldAllowDiskGroupDataMigration(\n            this.host, this.diskGroup);\n      if (!this.shouldAllowDataMigration) {\n         this.selectedDecommissionMode = DecommissionMode.noAction;\n         VsanUiUtils.setModalDialogHeight(VsanDiskMgmtActionsUtil.UNMOUNT_DISK_GROUP_DIALOG_HEIGHT_SMALL);\n      }\n\n      if (isApiSupported) {\n         const headerMessage: string = this.getHeaderMessage();\n         if (headerMessage) {\n            this.warningMessages.push(headerMessage);\n         }\n         const dataEvacuationWarningMessage: string = VsanDiskMgmtActionsUtil.getDataMigrationWarningForDiskGroup(\n               this.host.isInMaintenanceMode, this.diskGroup.isMounted);\n         if (dataEvacuationWarningMessage) {\n            this.warningMessages.push(dataEvacuationWarningMessage);\n         }\n      } else {\n         this.warningMessages = [VsanUiUtils.getString(\"vsan.actions.unmountDiskGroup.maintenanceMode.notSupported\")];\n      }\n   };\n\n   private getHeaderMessage = (): string => {\n      if (this.host.isInMaintenanceMode) {\n         return VsanUiUtils.getString(\"vsan.actions.unmountDiskGroup.dialogContent.headerDataEvacuation\");\n      } else if (this.host.isWitnessHost) {\n         return VsanUiUtils.getString(\n               \"vsan.actions.unmountDiskGroup.dialogContent.headerDataEvacuation.externalWitnessHostWarning\");\n      } else if (this.diskGroup.isMounted) {\n         return VsanUiUtils.getString(\n               \"vsan.actions.unmountDiskGroup.dialogContent.headerDataEvacuation.withMaintenanceMode\");\n      }\n   };\n\n   @Loader({name: LoaderName.DATA_EVACUATION})\n   private async requestDataEvacuationProperty(disk: ScsiDisk): Promise<void> {\n      if (!DiskMgmtDiskUtil.isScsiDiskHealthy(disk)) {\n         this.dataOnDiskGroupLabel = VsanUiUtils.getString(\"vsan.dialog.deleteDiskGroup.evacuateDataLabel.error\");\n         return;\n      }\n\n      const result: number = await this.vsanPropertyProvider.getVsanDataEvacuationInfo(\n            this.host.hostRef,\n            VsanQueryDataEvacuationInfoSpec.Factory.create([disk]));\n      this.onDataEvacuationPropertyRetrieved(result);\n   }\n\n   private onDataEvacuationPropertyRetrieved = (result: number) => {\n      if (result >= 0) {\n         const formattedSize: string = VsanUiUtils.formatFileSize(result);\n         this.dataOnDiskGroupLabel = VsanUiUtils.getString(\n               \"vsan.dialog.deleteDiskGroup.evacuateDataLabelWithSize\",\n               formattedSize);\n      }\n   };\n\n   @ErrorHandler({name: LoaderName.DATA_EVACUATION})\n   private onDataRetrievalError(error: any): void {\n      Logger.error(\"Unable to fetch disk group evacuation data: \", error);\n      this.alerts = [VsanUiUtils.getString(\"vsan.common.error.dataExtraction\")];\n      this.dataOnDiskGroupLabel = VsanUiUtils.getString(\"vsan.dialog.deleteDiskGroup.evacuateDataLabel.error\");\n   }\n\n   onDecommisionModeSummaryChanged = (summary: DecommissionModeSummary) => {\n      this.selectedDecommissionMode = summary.value;\n      this.isValidDecommisionMode = summary.isValidDecommissionMode;\n      if (VsanDiskMgmtActionsUtil.isPrecheckWithObjects(summary) && !this.isDiskResourcePrecheckSupported) {\n         VsanUiUtils.setModalDialogHeight(VsanDiskMgmtActionsUtil.UNMOUNT_DISK_GROUP_DIALOG_HEIGHT_LARGE);\n      } else if (this.isDiskResourcePrecheckSupported) {\n         VsanUiUtils.setModalDialogHeight(VsanDiskMgmtActionsUtil.UNMOUNT_DISK_GROUP_DIALOG_HEIGHT_PRECHECK);\n      } else {\n         VsanUiUtils.setModalDialogHeight(VsanDiskMgmtActionsUtil.UNMOUNT_DISK_GROUP_DIALOG_HEIGHT_MEDIUM);\n      }\n   };\n\n   onDiskResourcePrecheckSupportedChanged = (isSupported: boolean) => {\n      this.isDiskResourcePrecheckSupported = isSupported;\n      // Preselecting decommmission mode means that this dialog is opened from Data migration pre-check page,\n      // in which case GO TO PRE-CHECK button doesn't need to be display.\n      this.goToPrecheckButtonText = !this.preselectedDecommissionMode && this.isDiskResourcePrecheckSupported ?\n            VsanUiUtils.getString(\"vsan.actions.goToPrecheckDataMigration.label\") : \"\";\n   };\n\n   @Loader({name: LoaderName.ON_CONFIRM})\n   async ok(): Promise<void> {\n      this.alerts = [];\n\n      const decommissionMode: DecommissionMode = this.preselectedDecommissionMode ?\n            this.preselectedDecommissionMode :\n            VsanDiskMgmtActionsUtil.getSelectedDecommissionMode(\n                  this.shouldAllowDataMigration, this.selectedDecommissionMode);\n      const spec: UnmountDiskGroupSpec = UnmountDiskGroupSpec.Factory.create(\n            this.diskGroup.diskMapping, decommissionMode);\n\n      const task: ManagedObject = await this.diskGroupMutationService\n            .unmountDiskGroup(ManagedObject.contextObject, this.host.hostRef, spec);\n      this.closeDialog(task);\n   }\n\n   onGoToPrecheckClicked = () => {\n      const evacuationContext: EvacuationContext = VsanDiskMgmtActionsUtil.getEvacuationContext(\n            this.host.hostRef, this.evacuationEntityUuid, this.selectedDecommissionMode);\n      this.navigationService.navigateToAndCloseModal(PlatformExtension.CLUSTER_DATA_MIGRATION_PRE_CHECK,\n            ManagedObject.contextObjectUid, evacuationContext);\n   };\n\n   private closeDialog = (task: ManagedObject) => {\n      VsanUiUtils.closeModalDialog(task);\n   };\n\n   @ErrorHandler({name: LoaderName.ON_CONFIRM})\n   private handleError(error: any): void {\n      this.alerts = [error];\n   }\n}\n","import {VsanDiskMapping} from '@generated/vsan-disk-mapping';\nimport {DecommissionMode} from '@generated/decommission-mode';\n\nexport interface RemoveDiskGroupSpec {\n\n   decommissionMode: DecommissionMode;\n   mappings: VsanDiskMapping[];\n} //class RemoveDiskGroupSpec\n\nexport module RemoveDiskGroupSpec{\nexport class Factory {\n\n   static create = (decommissionMode: DecommissionMode, mappings: VsanDiskMapping[]): RemoveDiskGroupSpec => {\n      return { decommissionMode: decommissionMode, mappings: mappings, };\n   }\n\n\n} //class Factory\n\n} //module RemoveDiskGroupSpec\n","/* Copyright 2017-2019 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, OnInit} from \"@angular/core\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\n\n@Component({\n   templateUrl: \"mark-ssd-prompt.html\",\n   styleUrls: [\"mark-ssd-prompt.scss\"],\n   selector: \"vsan-diskmgmt-mark-ssd\",\n})\nexport class MarkSsdComponent implements OnInit{\n\n   isSsd: boolean;\n   title: string;\n\n   ngOnInit(): void {\n      this.isSsd = VsanUiUtils.getModalContext();\n      this.title = VsanUiUtils.getString(this.isSsd\n            ? \"storage.adapters.devices.action.tagAsSsd\"\n            : \"storage.adapters.devices.action.untagAsSsd\");\n   }\n\n}","<!--Copyright 2020 VMware, Inc. All rights reserved. -- VMware Confidential-->\n<vsan-delete-prompt\n      [title]=\"'vsan.dialog.stopManagingPmem.title' | localized\"\n      confirmText=\"vsan.common.unclaim\"\n      (onConfirm)=\"onOkClicked()\">\n   <div class=\"dialog-body\">\n\n      <span>{{warningMessage}}</span>\n\n      <!-- Confirmation text -->\n      <div id=\"delete-disks-footer\" class=\"strong-label\">\n         {{footerText}}\n      </div>\n   </div>\n</vsan-delete-prompt>","<!--Copyright 2017-2022 VMware, Inc. All rights reserved. -- VMware Confidential-->\n<vsan-delete-prompt\n      [title]=\"'vsan.dialog.deleteDiskGroup.title' | localized\"\n      [subtitle]=\"diskGroup.vsanUuid\"\n      [blockContent]=\"busy\"\n      [blockButton]=\"busy || !isValidDecommisionMode\"\n      [(alertMessages)]=\"alerts\"\n      confirmText=\"vsan.common.remove\"\n      (onConfirm)=\"onOkClicked()\"\n      [additionalButtonText]=\"goToPrecheckButtonText\"\n      (onAdditionalAction)=\"onGoToPrecheckClicked()\">\n   <div class=\"dialog-body\">\n      <vsan-validation *ngIf=\"warningMessages?.length\"\n                       alertType=\"warning\"\n                       [allowClose]=\"false\"\n                       [alertsExpanded]=\"true\"\n                       [allowExpandCollapse]=\"false\"\n                       [(alerts)]=\"warningMessages\">\n      </vsan-validation>\n\n      <!--Preselected decommission mode-->\n      <form class=\"clr-form clr-form-horizontal\" *ngIf=\"preselectedDecommissionMode\">\n         <div class=\"clr-form-control\">\n            <label for=\"delete-disk-group-decommission-mode\" class=\"clr-control-label\">\n               {{\"vsan.dialog.precheckEvacuation.label\" | localized}}\n            </label>\n            <span id=\"delete-disk-group-decommission-mode\">\n               {{localizedPreselectedDecommissionMode}}\n            </span>\n         </div>\n      </form>\n\n      <!-- Select decommission mode -->\n      <ng-container *ngIf=\"!busy && shouldAllowDataMigration && !preselectedDecommissionMode\">\n         <div id=\"data-on-disk-group-label\" *ngIf=\"!isDiskResourcePrecheckSupported\">\n            {{dataOnDiskGroupLabel}}\n         </div>\n         <div class=\"migration-mode-label\">\n            <span id=\"select-migration-mode-label\">{{'vsan.dialog.deleteDiskGroup.migrationMode' | localized}}</span>\n            <clr-signpost [vsan-signpost-title]=\"'vsan.dialog.deleteDiskGroup.migrationMode.signpost.label' | localized\">\n               <clr-signpost-content *clrIfOpen clrPosition=\"center-right\">\n                  <span>{{'vsan.dialog.deleteDiskGroup.evacuateDataHelp' | localized}}</span>\n               </clr-signpost-content>\n            </clr-signpost>\n         </div>\n         <vsan-pre-check-evacuation-summary\n               id=\"delete-disk-group-precheck-summary\"\n               [hostMor]=\"host.hostRef\"\n               [evacuationEntityUuid]=\"evacuationEntityUuid\"\n               [selectedDecommissionMode]=\"selectedDecommissionMode\"\n               [preCheckRecommendationMessage]=\n                     \"'vsan.dialog.precheckEvacuation.recommendationMesaage.diskGroup.delete' | localized\"\n               (selectedDecommissionModeSummaryChanged)=\"onDecommissionModeSummaryChanged($event)\"\n               (isDiskResourcePrecheckSupportedRetrieved)=\"onDiskResourcePrecheckSupportedChanged($event)\">\n         </vsan-pre-check-evacuation-summary>\n      </ng-container>\n\n      <!-- Confirmation text -->\n      <div id=\"footer-delete-disk-group\" class=\"strong-label\">\n         {{'vsan.dialog.deleteDiskGroup.footerDataEvacuation' | localized}}\n      </div>\n   </div>\n</vsan-delete-prompt>\n","/* Copyright 2020 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component} from \"@angular/core\";\nimport {EnumeratedFilterSelectionResolver} from \"@component/datagrid/filter/enumerated-filter.component\";\nimport {DiskMgmtFilterComponent} from \"./disk-mgmt-filter.component\";\nimport {DiskMgmtDiskUtil} from \"@util/disk-mgmt-disk.util\";\nimport {StorageData} from \"@component/diskmgmt/model/storage-data\";\n\n@Component({\n   templateUrl: \"disk-mgmt-filter.html\",\n   selector: \"vsan-storage-group-details-filter-health\",\n   styleUrls: [\"disk-mgmt-filter.scss\"],\n})\nexport class StorageGroupDetailsFilterHealthComponent extends DiskMgmtFilterComponent<StorageData> {\n\n   readonly comparator: EnumeratedFilterSelectionResolver<StorageData, string> =\n         new class extends EnumeratedFilterSelectionResolver<StorageData, string> {\n            isSelected(item: StorageData, selectedStateKeys: string[]): boolean {\n               return selectedStateKeys.some(state => (state === DiskMgmtDiskUtil.getHealth(item.diskStatus)));\n            }\n         }();\n}","/* Copyright 2019-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {NgModule} from \"@angular/core\";\nimport {CommonModule} from \"@angular/common\";\nimport {FormsModule} from \"@angular/forms\";\nimport {ClarityModule} from \"@clr/angular\";\nimport {DisksPropertyRetriever} from \"@component/diskmgmt/disks-property-retriever\";\nimport {ValidationModule} from \"@component/validation/validation.module\";\nimport {CommonPipeModule} from \"@pipe/common-pipe.module\";\nimport {CreateDiskGroupComponent} from \"@component/diskmgmt/create-disk-group.component\";\nimport {ClaimDisksComponent} from \"@component/diskmgmt/claim-disks.component\";\nimport {ValidationPanelComponent} from \"@component/diskmgmt/validation-panel.component\";\nimport {VsanCommonModule} from \"../../vsan-common.module\";\nimport {SpaceEfficiencyService} from \"@service/space-efficiency-service\";\nimport {VsanChartModule} from \"@component/chart/chart.module\";\nimport {VsanCapacityService} from \"@component/capacity/capacity.service\";\nimport {DisksCapacityChartComponent} from \"@component/diskmgmt/disks-capacity-chart.component\";\nimport {ClaimForPmemComponent} from \"@component/diskmgmt/claim-for-pmem.component\";\nimport {ClaimForVsanComponent} from \"@component/diskmgmt/claim-for-vsan.component\";\nimport {ClaimForVsanDirectComponent} from \"@component/diskmgmt/claim-for-vsan-direct.component\";\nimport {DisksGroupByPerspectiveComponent} from \"@component/diskmgmt/perspective/disks-group-by-perspective.component\";\nimport {TransportTypePipe} from \"../../../disk-management/views/pipes/transport-type.pipe\";\nimport {ClaimForVsanMaxComponent} from \"@component/diskmgmt/claim-for-vsan-max.component\";\nimport {ClaimModeToggleComponent} from \"@component/diskmgmt/claim-mode-toggle.component\";\nimport {AutoClaimDisksComponent} from \"@component/diskmgmt/auto-claim-disks.component\";\nimport {SelectDisksComponent} from \"@component/diskmgmt/select-disks.component\";\n\n@NgModule({\n   imports: [\n      CommonModule,\n      FormsModule,\n      ClarityModule,\n      ValidationModule,\n      CommonPipeModule,\n      VsanCommonModule,\n      VsanChartModule,\n   ],\n   declarations: [\n      CreateDiskGroupComponent,\n      ClaimDisksComponent,\n      ClaimModeToggleComponent,\n      AutoClaimDisksComponent,\n      DisksCapacityChartComponent,\n      ValidationPanelComponent,\n      ClaimForVsanComponent,\n      ClaimForPmemComponent,\n      ClaimForVsanMaxComponent,\n      ClaimForVsanDirectComponent,\n      DisksGroupByPerspectiveComponent,\n      TransportTypePipe,\n      SelectDisksComponent,\n   ],\n   exports: [\n      CreateDiskGroupComponent,\n      ClaimDisksComponent,\n      AutoClaimDisksComponent,\n      ClaimModeToggleComponent,\n      ClaimForPmemComponent,\n      ClaimForVsanComponent,\n      ClaimForVsanDirectComponent,\n      DisksGroupByPerspectiveComponent,\n      TransportTypePipe,\n      SelectDisksComponent,\n   ],\n   providers: [\n      SpaceEfficiencyService,\n      VsanCapacityService,\n      DisksPropertyRetriever,\n   ],\n})\nexport class DiskmgmtCommonModule {\n}\n","/* Copyright 2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {ClrLoadingState} from \"@clr/angular\";\n\n/**\n * Used to pass @Input() property between components which knows about its own loading state.\n */\nexport class LoadingAwareProperty<PropertyType> {\n   constructor(public data: PropertyType, private loadingState: ClrLoadingState = ClrLoadingState.DEFAULT) {}\n\n   get isLoading(): boolean {\n      return this.loadingState === ClrLoadingState.LOADING;\n   }\n\n   setToLoadingState(): void {\n      this.loadingState = ClrLoadingState.LOADING;\n   }\n\n   setToDefaultState(): void {\n      this.loadingState = ClrLoadingState.DEFAULT;\n   }\n}","/* Copyright 2020 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component} from \"@angular/core\";\nimport {DiskMgmtHostUtil} from \"@util/disk-mgmt-host.util\";\nimport {EnumeratedFilterSelectionResolver} from \"@component/datagrid/filter/enumerated-filter.component\";\nimport {HostData} from \"@generated/host-data\";\nimport {DiskMgmtFilterComponent} from \"./disk-mgmt-filter.component\";\n\n@Component({\n   templateUrl: \"disk-mgmt-filter.html\",\n   selector: \"vsan-host-list-filter-groups\",\n   styleUrls: [\"disk-mgmt-filter.scss\"],\n})\nexport class HostListFilterGroupsComponent extends DiskMgmtFilterComponent<HostData> {\n\n   readonly comparator: EnumeratedFilterSelectionResolver<HostData, string> =\n         new class extends EnumeratedFilterSelectionResolver<HostData, string> {\n            isSelected(item: HostData, selectedStateKeys: string[]): boolean {\n               return selectedStateKeys.some(state =>\n                     DiskMgmtHostUtil.getGroupTypeKeys(item).some(key => key === state));\n            }\n         }();\n}","/* Copyright 2020-2022 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {ChangeDetectorRef, Component, OnInit} from \"@angular/core\";\nimport {StorageData} from \"@component/diskmgmt/model/storage-data\";\nimport {StorageGroupIdentifier} from \"@component/diskmgmt/model/storage-group-identifier\";\nimport {StorageIdentifier} from \"@component/diskmgmt/model/storage-identifier\";\nimport {VsanBreadcrumbService} from \"@component/navigation/vsan-breadcrumb.service\";\nimport {UnavailableViewSpec} from \"@component/unavailable-view/unavailable-view-spec\";\nimport {UpgradeData} from \"@component/upgrade/upgrade.data\";\nimport {UpgradeService} from \"@component/upgrade/upgrade.service\";\nimport {VirtualObjectsTableStateService} from \"@component/virtual-objects-table/virtual-objects-table-state.service\";\nimport {DiskGroupData} from \"@generated/disk-group-data\";\nimport {DiskManagementService} from \"@generated/disk-management-service\";\nimport {HostData} from \"@generated/host-data\";\nimport {PermissionService} from \"@generated/permission-service\";\nimport {Privileges} from \"@generated/privileges\";\nimport {UpdateDuplicatePciIdDevicesService} from \"@generated/update-duplicate-pci-id-devices-service\";\nimport {VirtualObjectModel} from \"@generated/virtual-object-model\";\nimport {VirtualObjectsService} from \"@generated/virtual-objects-service\";\nimport {VsanCapabilityData} from \"@generated/vsan-capability-data\";\nimport {VsanCapabilityProvider} from \"@generated/vsan-capability-provider\";\nimport {VsanConfigService} from \"@generated/vsan-config-service\";\nimport {VsanConfigSpec} from \"@generated/vsan-config-spec\";\nimport {LoadingAwareProperty} from \"@model/loading-aware-property\";\nimport {DiskManagementNavigationContext} from \"@navigation/context/disk-management-navigation-context\";\nimport {ClusterComputeResource} from \"@service/client/dataservice/data-service-property\";\nimport {DataServiceClient} from \"@service/client/dataservice/data-service.service\";\nimport {ErrorHandler} from \"@service/flow/error-handler.decorator\";\nimport {Loader} from \"@service/flow/loader.decorator\";\nimport {LoadingIndicator} from \"@service/flow/loading-indicator.decorator\";\nimport {RefreshHandler} from \"@service/global-refresh.service\";\nimport {ManagedObject} from \"@service/managed-object\";\nimport {TaskMonitorService} from \"@service/task-monitor-service\";\nimport {Cached, TrackBy} from \"@util/cache/cached.decorator\";\nimport {DiskMgmtDiskGroupUtil} from \"@util/disk-mgmt-disk-group.util\";\nimport {DiskMgmtHostUtil} from \"@util/disk-mgmt-host.util\";\nimport {DiskMgmtUtil} from \"@util/disk-mgmt.util\";\nimport {Logger} from \"@util/logger\";\nimport {RaceConditionSafe} from \"@util/promise/race-condition-safe.decorator\";\nimport {ReferenceWatcher} from \"@util/reference-watcher\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {DiskManagementRoutingService} from \"./disk-management-routing.service\";\nimport {DiskManagementScreenReaderService} from \"./disk-management-screen-reader.service\";\nimport {ViewObjectsContext} from \"./views/model/view-objects-context\";\nimport {DiskManagementActionAvailabilityService} from \"./views/validation/disk-management-action-availability.service\";\n\n@Component({\n   templateUrl: \"disk-management.html\",\n   styleUrls: [\"disk-management.scss\"],\n   selector: \"vsan-disk-management\",\n   providers: [ReferenceWatcher],\n})\nexport class DiskManagementComponent implements OnInit {\n   @LoadingIndicator()\n   loading: boolean;\n\n   clusterRef: ManagedObject = ManagedObject.contextObject;\n   clusterName: string;\n   hostList: HostData[];\n   upgradeData: UpgradeData;\n   vsanConfig: VsanConfigSpec;\n   alertMessages: string[] = [];\n   hasEditPermission: boolean = false;\n   clusterCapabilities: VsanCapabilityData;\n   hasHostMaintenancePermission: boolean;\n   noHostsView: UnavailableViewSpec;\n   preselectedHost: HostData;\n   preselectedGroupIdentifier: StorageGroupIdentifier;\n   preselectedStorageIdentifier: StorageIdentifier;\n   preselectedGroup: DiskGroupData;\n   preselectedStorage: StorageData;\n   isVirtualObjectsView: boolean;\n   virtualObjects: VirtualObjectModel[];\n   hostIndex: number = -1;\n   private isInitLoad: boolean = true;\n   isBreadcrumbNavigationEnabled: boolean = false;\n   private preselectContext: DiskManagementNavigationContext;\n   isVsanUpgradeVisible: boolean = false;\n   hasDuplicatePciIdDevices: LoadingAwareProperty<boolean> = new LoadingAwareProperty(false);\n\n   constructor(private diskMgmtService: DiskManagementService,\n         private diskManagementRoutingService: DiskManagementRoutingService,\n         private diskManagementActionAvailabilityService: DiskManagementActionAvailabilityService,\n         private diskManagementScreenReaderService: DiskManagementScreenReaderService,\n         private dataService: DataServiceClient,\n         private permissionService: PermissionService,\n         private capabilityProvider: VsanCapabilityProvider,\n         private taskService: TaskMonitorService,\n         private vsanConfigService: VsanConfigService,\n         private virtualObjectsService: VirtualObjectsService,\n         private cdRef: ChangeDetectorRef,\n         private refWatcher: ReferenceWatcher,\n         private upgradeService: UpgradeService,\n         private virtualObjectsTableState: VirtualObjectsTableStateService,\n         private updatePciIdService: UpdateDuplicatePciIdDevicesService) {\n   }\n\n   async ngOnInit(): Promise<void> {\n      this.refWatcher.watchSubscriptionRef(this.diskManagementActionAvailabilityService.onTaskStarted\n            .subscribe(result => this.refreshRequested(result)));\n      this.refWatcher.watchSubscriptionRef(this.diskManagementActionAvailabilityService.onObjectsViewSelected\n            .subscribe(result => this.viewObjects(result)));\n      this.refWatcher.watchSubscriptionRef(this.diskManagementActionAvailabilityService.onHostDetailsViewSelected\n            .subscribe(() => this.setSelectHostIndex()));\n      this.refWatcher.watchSubscriptionRef(this.diskManagementRoutingService.onClusterNavigatedObs\n            .subscribe(() => {\n               this.selectClusterView();\n               this.diskManagementRoutingService.resetRootCallBack();\n            }));\n      this.refWatcher.watchSubscriptionRef(this.diskManagementRoutingService.onHostNavigatedObs\n            .subscribe(host => this.onHostNavigated(host)));\n      this.refWatcher.watchSubscriptionRef(this.diskManagementRoutingService.onVirtualObjectsRequested\n            .subscribe(viewObjectsContext => this.requestVirtualObjects(viewObjectsContext)));\n      this.refWatcher.watchSubscriptionRef(this.diskManagementRoutingService.onErrorCleared\n            .subscribe(() => this.clearErrors()));\n\n      this.preselectContext = VsanUiUtils.getNavigationData();\n      this.initializeBreadcrumbNavigation();\n      this.capabilityProvider.getVcCapabilityData(this.clusterRef)\n            .then((vcCapabilities: VsanCapabilityData) => {\n               if (vcCapabilities.isDuplicatePciIdFixSupported) {\n                  this.checkDuplicatePciIdDevices();\n               }\n            })\n            .catch(error => Logger.warn(\"Unable to get vc capabilities: \", error));\n\n      this.permissionService.hasPermissions(this.clusterRef, [Privileges.HOST_MAINTENANCE()])\n            .then(result => this.hasHostMaintenancePermission = result)\n            .catch(error => Logger.warn(\"Unable to check host maintenance privilege: \", error));\n\n      this.permissionService.hasPermissions(this.clusterRef,\n            [Privileges.EDIT_CLUSTER(), Privileges.CONFIG_STORAGE()])\n            .then(result => this.hasEditPermission = result)\n            .catch(error => Logger.warn(\"Unable to check cluster permissions: \", error));\n\n      try {\n         await this.fetch();\n      } catch (err) {\n         this.handleError(err);\n      }\n   }\n\n   private checkDuplicatePciIdDevices(): void {\n      this.hasDuplicatePciIdDevices.setToLoadingState();\n      this.updatePciIdService.hasDuplicatePciIdDevices(this.clusterRef)\n            .then(result => this.hasDuplicatePciIdDevices.data = result)\n            .catch(error => Logger.warn(\"Unable to get duplicate PCI ID devices status: \", error))\n            .finally(() => this.hasDuplicatePciIdDevices.setToDefaultState());\n   }\n\n   private initializeBreadcrumbNavigation(): void {\n      // Initialize component routes\n      this.diskManagementRoutingService.setInitialViewRoots();\n      VsanBreadcrumbService.enable\n            .subscribe(isEnabled => {\n               this.isBreadcrumbNavigationEnabled = isEnabled;\n               this.cdRef.detectChanges();\n            });\n   }\n\n   onHostNavigated(host: HostData): void {\n      this.selectHost(host);\n      // Update the selected host index if the view is on host details level\n      if (this.isHostDetailsLevel()) {\n         this.setSelectHostIndex();\n      }\n   }\n\n   @RefreshHandler\n   @Loader()\n   async fetch(): Promise<void> {\n\n      // remember what is currently selected to preselect it after the reload\n      this.prepareReloadContext();\n      this.reset();\n\n      let hostsData: HostData[];\n      [this.vsanConfig, hostsData, this.clusterCapabilities, this.clusterName] = await Promise.all([\n         this.vsanConfigService.getVsanConfigSpec(this.clusterRef),\n         this.diskMgmtService.listHosts(this.clusterRef),\n         // Get cluster level capabilities on each global refresh because we may add/remove old host in the meantime.\n         this.capabilityProvider.getClusterCapabilityData(this.clusterRef),\n         this.dataService.getProperty(ClusterComputeResource.name, this.clusterRef),\n      ]);\n\n      this.processHostsData(hostsData);\n      if (this.isInitLoad) {\n         this.diskManagementRoutingService.showBreadcrumbNavigation();\n         this.isInitLoad = false;\n      }\n      // Load all of the fetched host names and pass them to the hosts level navigation\n      this.diskManagementRoutingService.updateHostLinks();\n      this.preselect();\n      this.preselectVirtualObjects();\n      this.diskManagementScreenReaderService.informPageLoad(\n            this.preselectedHost,\n            this.preselectedGroupIdentifier,\n            this.preselectedStorageIdentifier,\n            this.isHostDetailsLevel(),\n            this.isVirtualObjectsView);\n   }\n\n   private reset(): void {\n      this.setHostList(null);\n      this.upgradeData = null;\n      this.virtualObjects = null;\n      this.preselectDiskMgmtEntities(null, null, null);\n      this.selectClusterView();\n      this.isVirtualObjectsView = false;\n      this.clearErrors();\n      this.noHostsView = null;\n   }\n\n   vsanUpgradeComplete(): void {\n      this.isVsanUpgradeVisible = true;\n      this.fetch();\n   }\n\n   private prepareReloadContext(): void {\n      if (!this.preselectedHost && !this.isVirtualObjectsView) {\n         // this is the first load of the current page, nothing to change\n         return;\n      }\n      this.preselectContext = {\n         hostRef: this.preselectedHost?.hostRef,\n         diskGroup: this.preselectedGroupIdentifier,\n         storage: this.preselectedStorageIdentifier,\n         isVirtualObjectsView: this.isVirtualObjectsView,\n         isHostDetailsLevel: this.isHostDetailsLevel() && !this.isVirtualObjectsView,\n      };\n   }\n\n   private processHostsData(data: HostData[]): void {\n      if (VsanUiUtils.isEmpty(data)) {\n         this.noHostsView = UnavailableViewSpec.DISK_MGMT_VIEW_NO_HOSTS;\n         return;\n      }\n      DiskMgmtHostUtil.orderHostsByHealth(data);\n      this.setHostList(data);\n      this.upgradeService.getUpgradeOnlyData(this.clusterRef, this.hostList)\n            .then((result: UpgradeData) => {\n               this.upgradeData = result;\n            })\n            .catch(this.handleError);\n      this.hostList.forEach(host =>\n            DiskMgmtUtil.sortDiskGroups(host.diskGroups,\n                  (diskGroup) => DiskMgmtDiskGroupUtil.isVsanDiskGroup(diskGroup)));\n   }\n\n   private setHostList(data: HostData[]): void {\n      this.hostList = data;\n      this.diskManagementRoutingService.setHostList(this.hostList);\n   }\n\n   async fetchPrecheckUpgradeData(): Promise<void> {\n      this.upgradeService.getUpgradeStatus(this.clusterRef)\n            .then(upgradeStatus => {\n               // Create a new instance to trigger the upgrade component's refresh\n               this.upgradeData = this.upgradeData.getNewInstance(upgradeStatus);\n            }).catch(this.handleError);\n   }\n\n   private preselect(): void {\n      if (!this.preselectContext || !this.preselectContext.hostRef) {\n         if (VsanUiUtils.isEmpty(this.hostList) ||\n               (this.preselectContext && this.preselectContext.isVirtualObjectsView)) {\n            return;\n         }\n\n         if (this.preselectContext && this.preselectContext.hostName) {\n            // If only host name is passed they find the host by name\n            this.preselectContext.hostRef =\n                  this.hostList.find(host => host.name === this.preselectContext.hostName).hostRef;\n         } else {\n            // Select the first host if non virtual objects view and no host selection.\n            this.preselectContext = {\n               hostRef: this.hostList[0].hostRef,\n            };\n         }\n      }\n      this.preselectHost();\n      if (this.preselectedHost && this.preselectContext.isHostDetailsLevel) {\n         this.setSelectHostIndex();\n      }\n      this.preselectDiskGroup();\n      this.preselectStorage();\n\n   }\n\n   private preselectVirtualObjects(): void {\n      if (!this.preselectContext || !this.preselectContext.isVirtualObjectsView) {\n         return;\n      }\n      this.viewObjects(new ViewObjectsContext(this.preselectedHost, this.preselectedGroup, this.preselectedStorage));\n   }\n\n   private preselectHost(): void {\n      const selectedHost: HostData =\n            this.hostList.find(host => host.hostRef.value === this.preselectContext.hostRef.value);\n      if (selectedHost) {\n         this.selectHost(selectedHost);\n      }\n   }\n\n   private preselectDiskGroup(): void {\n      if (!this.preselectedHost || (!this.preselectContext.diskGroup && !this.preselectContext.storage)) {\n         return;\n      }\n      // Find group from the passed context\n      if (this.preselectContext.diskGroup) {\n         this.preselectedGroup = this.findSelectedGroupByIdentifier(this.preselectContext.diskGroup);\n      }\n      // If group from the context is not found, try to find the group of the passed storage.\n      if (!this.preselectedGroup && this.preselectContext.storage) {\n         this.preselectedGroup = DiskMgmtDiskGroupUtil.findGroupByStorage(this.preselectedHost.diskGroups,\n               this.preselectContext.storage);\n      }\n      if (this.preselectedGroup) {\n         this.preselectedGroupIdentifier = StorageGroupIdentifier.fromDiskGroup(this.preselectedGroup);\n      }\n   }\n\n   private findSelectedGroupByIdentifier(groupIdentifier: StorageGroupIdentifier): DiskGroupData {\n      if (!this.preselectedHost || VsanUiUtils.isUnset(groupIdentifier)) {\n         return null;\n      }\n      return this.preselectedHost.diskGroups.find(diskGroup =>\n            StorageGroupIdentifier.areEqual(diskGroup, groupIdentifier));\n   }\n\n   private preselectStorage(): void {\n      if (!this.preselectedGroup || !this.preselectContext.storage) {\n         return;\n      }\n      const isStorageIdentifierValid: boolean =\n            !!DiskMgmtDiskGroupUtil.findGroupByStorage([this.preselectedGroup], this.preselectContext.storage);\n      if (isStorageIdentifierValid) {\n         this.selectStorage(this.preselectContext.storage);\n      }\n   }\n\n   refreshRequested = (taskRefs?: ManagedObject[]): void => {\n      if (!VsanUiUtils.isEmpty(taskRefs)) {\n         Promise.all(taskRefs.map(task => this.taskService.getAwaitResult(task)))\n               .then(r => this.fetch())\n               .catch(error => {\n                  const errorMessage: string = error.localizedMessage || error;\n                  this.handleError(errorMessage);\n               });\n      } else {\n         this.fetch();\n      }\n   };\n\n   selectHost(host: HostData): void {\n      if (!host) {\n         return;\n      }\n      let group: StorageGroupIdentifier = null;\n      // Preselect vSAN Max section if available\n      if (host.isSingleTierEnabled && !VsanUiUtils.isEmpty(host.diskGroups)) {\n         group = StorageGroupIdentifier.fromDiskGroup(host.diskGroups[0]);\n      }\n\n      this.preselectDiskMgmtEntities(host, group, null);\n   }\n\n   selectGroup(diskGroupIdentifier: StorageGroupIdentifier): void {\n      this.preselectedGroupIdentifier = diskGroupIdentifier;\n      this.preselectedGroup = this.findSelectedGroupByIdentifier(diskGroupIdentifier);\n   }\n\n   selectStorage(storageIdentifier: StorageIdentifier): void {\n      this.preselectedStorageIdentifier = storageIdentifier;\n      this.preselectedStorage = StorageData.findStorageByIdentifier(this.preselectedGroup, storageIdentifier);\n   }\n\n   isHostDetailsLevel(): boolean {\n      return this.hostIndex > -1;\n   }\n\n   getExitVirtualObjectsLabel(): string {\n      if (!this.isHostDetailsLevel()) {\n         return VsanUiUtils.getString(\"vsan.manage.diskManagement.virtualObjects.back.hostList\");\n      }\n\n      return this.vsanConfig.isVsanMaxEnabled\n            ? VsanUiUtils.getString(\"vsan.manage.diskManagement.virtualObjects.back.disks\")\n            : VsanUiUtils.getString(\"vsan.manage.diskManagement.virtualObjects.back.disksAndGroups\");\n   }\n\n   setSelectHostIndex(): void {\n      this.hostIndex = this.hostList.findIndex(h => ManagedObject.areEqual(h.hostRef, this.preselectedHost.hostRef));\n      if (this.isHostDetailsLevel()) {\n         this.diskManagementRoutingService.navigateToHostRoute(this.preselectedHost.name);\n         this.diskManagementRoutingService.setHostDetailsLevelRootCb();\n      }\n   }\n\n   private selectClusterView(): void {\n      this.hostIndex = -1;\n   }\n\n   @ErrorHandler()\n   private handleError(error: string): void {\n      this.alertMessages.push(error);\n   }\n\n   clearErrors(): void {\n      this.alertMessages = [];\n   }\n\n   viewObjects(context: ViewObjectsContext): void {\n      this.setIsVirtualObjectsView(true);\n      this.diskManagementRoutingService.viewObjects(context);\n   }\n\n   private requestVirtualObjects(viewObjectsContext: ViewObjectsContext): void {\n      // If we don't reset the VO table state we will keep all previous selections\n      this.virtualObjectsTableState.reset();\n      let objectUuids: string[] = null;\n      // Preselect host, group and storage when selected from virtual objects,\n      // in order to preserve them on refresh.\n      if (!viewObjectsContext) {\n         this.selectClusterView();\n         this.preselectDiskMgmtEntities(null, null, null);\n      } else if (viewObjectsContext.storage) {\n         objectUuids = viewObjectsContext.storage.objectUuids;\n         this.preselectDiskMgmtEntities(viewObjectsContext.host,\n               StorageGroupIdentifier.fromDiskGroup(viewObjectsContext.group),\n               new StorageIdentifier(viewObjectsContext.storage.uuid, viewObjectsContext.storage.name));\n      } else if (viewObjectsContext.group) {\n         objectUuids = viewObjectsContext.group.objectUuids;\n         this.preselectDiskMgmtEntities(viewObjectsContext.host,\n               StorageGroupIdentifier.fromDiskGroup(viewObjectsContext.group), null);\n      } else if (viewObjectsContext.host) {\n         objectUuids = viewObjectsContext.host.objectUuids;\n         this.preselectDiskMgmtEntities(viewObjectsContext.host, null, null);\n      }\n\n      if (objectUuids === null || !VsanUiUtils.isEmpty(objectUuids)) {\n         this.virtualObjects = null;\n         this.queryVirtualObjects(objectUuids)\n               .then((loadedObjects: VirtualObjectModel[]) => this.handleQueryVirtualObjectsResult(loadedObjects))\n               .catch((reason: any) => this.handleQueryVirtualObjectsError(reason));\n      } else {\n         this.setVirtualObjects([]);\n      }\n   }\n\n   /**\n    * Query virtual objects for the passed objectUuids. If objectUuids is:\n    * 1) Empty array - don't query virtual objects.\n    * 2) Non-empty array - query virtual objects for the passed objectUuids.\n    * 3) Null - query all virtual objects for the cluster.\n    */\n   @RaceConditionSafe()\n   @Cached({trackBy: TrackBy.INPUT_VALUES})\n   private async queryVirtualObjects(objectUuids: string[]): Promise<VirtualObjectModel[]> {\n      return this.virtualObjectsService.listVirtualObjects(ManagedObject.contextObject, objectUuids);\n   }\n\n   private handleQueryVirtualObjectsResult(loadedObjects: VirtualObjectModel[]): void {\n      // If virtualObjects is null that mean the we still wait for the objects and we display the loading spinner.\n      // A case when it's not null is when we select an item without virtual objects on it.\n      if (this.isVirtualObjectsView && this.virtualObjects === null) {\n         this.setVirtualObjects(loadedObjects);\n      }\n   }\n\n   private handleQueryVirtualObjectsError(reason: any): void {\n      if (this.isVirtualObjectsView) {\n         this.handleError(reason);\n         this.setVirtualObjects([]);\n      }\n   }\n\n   private setVirtualObjects(loadedVirtualObjects: VirtualObjectModel[]): void {\n      this.virtualObjects = loadedVirtualObjects;\n      this.diskManagementScreenReaderService.informVirtualObjectsLoad();\n   }\n\n   exitVirtualObjects(): void {\n      this.setIsVirtualObjectsView(false);\n      this.virtualObjects = null;\n      this.diskManagementRoutingService.resetHostsRoutes();\n      const hostToSelect: HostData = this.preselectedHost || this.hostList[0];\n      this.onHostNavigated(hostToSelect);\n      if (!this.isHostDetailsLevel()) {\n         this.diskManagementRoutingService.resetRootCallBack();\n         this.diskManagementRoutingService.navigateToRootRoute();\n      }\n   }\n\n   private setIsVirtualObjectsView(value: boolean): void {\n      this.isVirtualObjectsView = value;\n      this.diskManagementRoutingService.setIsVirtualObjectsView(value);\n   }\n\n   private preselectDiskMgmtEntities(host: HostData, group: StorageGroupIdentifier, storage: StorageIdentifier): void {\n      this.preselectedHost = host;\n      this.selectGroup(group);\n      this.selectStorage(storage);\n   }\n}\n","<!--Copyright 2019 VMware, Inc. All rights reserved. -- VMware Confidential-->\n<vsan-default-prompt\n      [title]=\"'vsan.actions.mountDiskGroup.dialogTitle' | localized\"\n      [subtitle]=\"diskGroup?.diskGroupName\"\n      [confirmText]=\"'vsan.actions.mountDiskGroup.confirmText' | localized\"\n      [(alertMessages)]=\"alerts\"\n      [blockContent]=\"loading\"\n      [blockButton]=\"loading\"\n      (onConfirm)=\"ok()\">\n   <div class=\"dialog-body\">\n      <span id=\"mount-description\">{{\"vsan.actions.mountDiskGroup.text\" | localized}}</span>\n      <span id=\"mount-confirmation-label\" class=\"strong-label\">\n         {{\"vsan.actions.mountDiskGroup.confirmationLabel\" | localized}}\n      </span>\n   </div>\n</vsan-default-prompt>","<!--Copyright 2019-2022 VMware, Inc. All rights reserved. -- VMware Confidential-->\n<vsan-delete-prompt\n      [title]=\"'vsan.dialog.deleteDiskFromDiskGroup.title' | localized\"\n      [subtitle]=\"subtitle\"\n      [blockContent]=\"busy\"\n      [blockButton]=\"busy || !isValidDecommisionMode\"\n      [(alertMessages)]=\"alerts\"\n      confirmText=\"vsan.common.remove\"\n      (onConfirm)=\"onOkClicked()\"\n      [additionalButtonText]=\"goToPrecheckButtonText\"\n      (onAdditionalAction)=\"onGoToPrecheckClicked()\">\n   <div class=\"dialog-body\">\n      <vsan-validation *ngIf=\"warningMessages?.length\"\n                       alertType=\"warning\"\n                       [allowClose]=\"false\"\n                       [alertsExpanded]=\"true\"\n                       [allowExpandCollapse]=\"false\"\n                       [(alerts)]=\"warningMessages\">\n      </vsan-validation>\n\n      <!--Preselected decommission mode-->\n      <form class=\"clr-form clr-form-horizontal\" *ngIf=\"preselectedDecommissionMode\">\n         <div class=\"clr-form-control\">\n            <label for=\"delete-disks-decommission-mode\" class=\"clr-control-label\">\n               {{\"vsan.dialog.precheckEvacuation.label\" | localized}}\n            </label>\n            <span id=\"delete-disks-decommission-mode\">\n               {{localizedPreselectedDecommissionMode}}\n            </span>\n         </div>\n      </form>\n\n      <!-- Select decommission mode -->\n      <ng-container *ngIf=\"!busy && shouldAllowDataMigration && !preselectedDecommissionMode\">\n         <div id=\"data-on-disk-label\" *ngIf=\"disks?.length === 1 && !isDiskResourcePrecheckSupported\">\n            {{dataOnDiskLabel}}\n         </div>\n         <div class=\"migration-mode-label\">\n            <span id=\"select-migration-mode-label\">{{'vsan.dialog.deleteDiskGroup.migrationMode' | localized}}</span>\n            <clr-signpost [vsan-signpost-title]=\"'vsan.dialog.deleteDiskGroup.migrationMode.signpost.label' | localized\">\n               <clr-signpost-content *clrIfOpen clrPosition=\"center-right\">\n                  <span>{{'vsan.dialog.deleteDiskGroup.evacuateDataHelp' | localized}}</span>\n               </clr-signpost-content>\n            </clr-signpost>\n         </div>\n         <vsan-pre-check-evacuation-summary\n               id=\"delete-disks-precheck-summary\"\n               [hostMor]=\"host.hostRef\"\n               [evacuationEntityUuid]=\"disks[0].vsanUuid\"\n               [selectedDecommissionMode]=\"selectedDecommissionMode\"\n               [preCheckRecommendationMessage]=\n                     \"'vsan.dialog.precheckEvacuation.recommendationMesaage.disk.delete' | localized\"\n               (selectedDecommissionModeSummaryChanged)=\"onDecommissionModeSummaryChanged($event)\"\n               (isDiskResourcePrecheckSupportedRetrieved)=\"onDiskResourcePrecheckSupportedChanged($event)\">\n         </vsan-pre-check-evacuation-summary>\n      </ng-container>\n\n      <!-- Confirmation text -->\n      <div id=\"delete-disks-footer\" class=\"strong-label\">\n         {{footerText}}\n      </div>\n   </div>\n</vsan-delete-prompt>\n","/* Copyright 2019 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, OnInit} from \"@angular/core\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {Logger} from \"@util/logger\";\n\n@Component({\n   templateUrl: \"pre-check-issues.html\",\n   styleUrls: [\"pre-check-issues.scss\"],\n   selector: \"vsan-diskmgmt-pre-check-issues\",\n})\nexport class PreCheckIssuesComponent implements OnInit {\n\n   subtitle: string;\n   issues: string[];\n\n   ngOnInit(): void {\n      const context: any = VsanUiUtils.getModalContext();\n      if (context) {\n         this.subtitle = context.clusterName;\n         this.issues = context.issues;\n      } else {\n         Logger.error(\"Unable to get modal context\");\n      }\n   }\n}","<!--Copyright 2022 VMware, Inc. All rights reserved. -- VMware Confidential-->\n<vsan-default-prompt\n      [title]=\"'vsan.dialog.mountDisk.dialogTitle' | localized\"\n      [subtitle]=\"diskName\"\n      [confirmText]=\"'vsan.dialog.mountDisk.confirmText' | localized\"\n      [(alertMessages)]=\"alerts\"\n      [blockButton]=\"loading\"\n      (onConfirm)=\"ok()\">\n   <div class=\"dialog-body\">\n      <span id=\"mount-description\">{{\"vsan.dialog.mountDisk.text\" | localized}}</span>\n      <span id=\"mount-confirmation-label\" class=\"strong-label\">\n         {{\"vsan.dialog.mountDisk.confirmationLabel\" | localized}}\n      </span>\n   </div>\n</vsan-default-prompt>","import {VsanDiskMapping} from '@generated/vsan-disk-mapping';\nimport {DecommissionMode} from '@generated/decommission-mode';\n\nexport interface RecreateDiskGroupSpec {\n\n   mapping: VsanDiskMapping;\n   decommissionMode: DecommissionMode;\n} //class RecreateDiskGroupSpec\n\nexport module RecreateDiskGroupSpec{\nexport class Factory {\n\n   static create = (mapping: VsanDiskMapping, decommissionMode: DecommissionMode): RecreateDiskGroupSpec => {\n      return { mapping: mapping, decommissionMode: decommissionMode, };\n   }\n\n\n} //class Factory\n\n} //module RecreateDiskGroupSpec\n","<!--Copyright 2019-2021 VMware, Inc. All rights reserved. -- VMware Confidential-->\n<vsan-create-prompt\n      [title]=\"'vsan.dialog.semiAutoClaimDialog.title' | localized\"\n      [blockContent]=\"loading || inProgress\"\n      [blockButton]=\"loading || !isConfigValid\"\n      [(alertMessages)]=\"alertMessages\"\n      (onConfirm)=\"onOkClicked()\">\n   <vsan-claim-disks\n         *ngIf=\"!loading\"\n         [isStandalone]=\"true\"\n         [clusterRef]=\"clusterRef\"\n         [vsanConfigSpec]=\"vsanConfigSpec\"\n         [hostsClaimingData]=\"hostsClaimingData\"\n         (configUpdated)=\"claimDisksSpecs=$event\"\n         (configValid)=\"configAcceptabilityChanged($event)\">\n   </vsan-claim-disks>\n</vsan-create-prompt>\n","<!-- Copyright 2020-2021 VMware, Inc. All rights reserved. -- VMware Confidential -->\n<clr-accordion clrAccordionMultiPanel=\"true\">\n   <clr-accordion-panel *ngFor=\"let row of storageGroups\"\n                        [clrAccordionPanelOpen]=\"isGroupExpanded(row)\"\n                        [vsan-panel-id]=\"createGroupId(row)\"\n                        [vsan-panel-model]=\"row\"\n                        (accordionPanelToggleExpand)=\"toggleExpand($event)\">\n      <clr-accordion-title (click)=\"handleAccordionTitleClick($event, triggerEl)\">\n         <div class=\"action-column\"\n              [ngClass]=\"getActionColumnClass(row)\"\n              #triggerEl>\n            <clr-dropdown>\n               <button clrDropdownTrigger>\n                  <clr-icon shape=\"ellipsis-vertical\"></clr-icon>\n               </button>\n               <clr-dropdown-menu *clrIfOpen=\"isGroupActionsDropdownOpen(triggerEl)\" clrPosition=\"right-top\"\n                                  [vsan-dropdown-navigation]=\"2\"\n                                  [attr.aria-label]=\"'vsan.common.srMessage.dropdownMenu.moreActions.label' | localized\">\n                  <vsan-storage-group-actions\n                        [autoClaimMode]=\"autoClaimMode\"\n                        [hasEditPermission]=\"hasEditPermission\"\n                        [clusterCapabilities]=\"clusterCapabilities\"\n                        [hasHostMaintenancePermission]=\"hasHostMaintenancePermission\"\n                        [selectedDiskGroup]=\"row\"\n                        [selectedHost]=\"host\">\n                  </vsan-storage-group-actions>\n               </clr-dropdown-menu>\n            </clr-dropdown>\n         </div>\n         <div class=\"wide-column\" vsan-show-title>\n            {{getDiskGroupLabel(row)}}\n         </div>\n         <div *ngIf=\"!host?.isSingleTierEnabled\"\n              class=\"mid-column\"\n              vsan-show-title>\n            <vsan-icon-item [label]=\"getHealthKey(row) | localized\"\n                            missingLabel=\"\"\n                            [shape]=\"getHealthKey(row) | hostHealthIconShape\"\n                            [iconClass]=\"Icon.CLR_SOLID_ICON_CLASS + ' ' +\n                                   Icon.clrIconShapeClassMap[getHealthKey(row) | hostHealthIconShape]\">\n            </vsan-icon-item>\n         </div>\n         <div class=\"mid-column right-align-cell\">\n            <vsan-storage-capacity *ngIf=\"!isUnusedDiskGroup(row)\"\n                                   [capacity]=\"row.capacity\">\n            </vsan-storage-capacity>\n         </div>\n         <div *ngIf=\"!host?.isSingleTierEnabled\"\n              class=\"mid-column\"\n              vsan-show-title>\n            {{getState(row)}}\n         </div>\n         <div class=\"mid-column\" vsan-show-title>\n            {{getClaimedDisksLabel(row)}}\n         </div>\n         <div *ngIf=\"!host?.isSingleTierEnabled\"\n              class=\"mid-column\"\n              vsan-show-title>\n            {{getGroupType(row)}}\n         </div>\n         <div *ngIf=\"!host?.isSingleTierEnabled\"\n              class=\"wide-column\"\n              vsan-show-title>\n            {{getAggregatedFsVersion(row)}}\n         </div>\n      </clr-accordion-title>\n      <clr-accordion-content *clrIfExpanded>\n         <vsan-storage-details [autoClaimMode]=\"autoClaimMode\"\n                               [spaceEfficiencyConfig]=\"spaceEfficiencyConfig\"\n                               [hasEditPermission]=\"hasEditPermission\"\n                               [clusterCapabilities]=\"clusterCapabilities\"\n                               [hasHostMaintenancePermission]=\"hasHostMaintenancePermission\"\n                               [storageGroup]=\"row\"\n                               [host]=\"host\"\n                               [preselectedStorage]=\"preselectedStorage\"\n                               (storageSelected)=\"selectStorage($event)\">\n         </vsan-storage-details>\n      </clr-accordion-content>\n   </clr-accordion-panel>\n</clr-accordion>\n","/* Copyright 2020-2022 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, Input, OnInit} from \"@angular/core\";\nimport {DiskManagementActionAvailabilityService} from \"../validation/disk-management-action-availability.service\";\nimport {NavigationService, PlatformExtension} from \"@navigation/navigation.service\";\nimport {ActionAvailableStatus} from \"@util/validation/action-available-status\";\nimport {DiskManagementActionContext} from \"../validation/disk-management-action-context\";\nimport {HostData} from \"@generated/host-data\";\nimport {DiskMgmtHostUtil} from \"@util/disk-mgmt-host.util\";\nimport {VsanDiskMgmtActionsUtil} from \"@util/vsan-disk-mgmt-actions-util\";\nimport {ManagedObject} from \"@service/managed-object\";\nimport {VsanCapabilityData} from \"@generated/vsan-capability-data\";\nimport {EvacuationContext} from \"@navigation/context/evacuation.context\";\nimport {ModalBuilder} from \"@util/modal-builder\";\nimport {PreCheckEvacuationDialogSize} from \"@component/precheck/pre-check-evacuation-dialog-size\";\nimport {ViewObjectsContext} from \"../model/view-objects-context\";\nimport {DiskGroupData} from \"@generated/disk-group-data\";\nimport {DiskMgmtDiskGroupUtil} from \"@util/disk-mgmt-disk-group.util\";\n\n@Component({\n   selector: \"vsan-host-actions\",\n   templateUrl: \"host-actions.html\",\n   styleUrls: [\"host-actions.scss\"],\n   host: {class: \"vsan-actions\"},\n})\nexport class HostActionsComponent implements OnInit {\n\n   @Input()\n   autoClaimMode: boolean;\n\n   @Input()\n   hasEditPermission: boolean = false;\n\n   @Input()\n   clusterCapabilities: VsanCapabilityData;\n\n   @Input()\n   hasHostMaintenancePermission: boolean;\n\n   @Input()\n   selectedHost: HostData;\n\n   @Input()\n   isHostListView: boolean;\n\n   hasCreateDiskGroupAction: boolean;\n\n   DiskManagementActionAvailabilityService: typeof DiskManagementActionAvailabilityService =\n         DiskManagementActionAvailabilityService;\n\n   constructor(private navigationService: NavigationService,\n         private diskManagementActionAvailabilityService: DiskManagementActionAvailabilityService) {}\n\n   ngOnInit(): void {\n      this.hasCreateDiskGroupAction =\n            !this.autoClaimMode && !this.isHostListView && !this.selectedHost?.isSingleTierEnabled;\n   }\n\n   actionDisabled = (actionId: string): boolean => {\n      return !this.getActionStatus(actionId).available;\n   };\n\n   getActionButtonTitle = (actionId: string): string => {\n      return this.getActionStatus(actionId).message;\n   };\n\n   private getActionStatus = (actionId: string): ActionAvailableStatus => {\n      return this.diskManagementActionAvailabilityService.checkAvailability(this.getActionValidationContext(actionId));\n   };\n\n   private getActionValidationContext(actionId: string): DiskManagementActionContext {\n      return {\n         actionId: actionId,\n         hasEditPermission: this.hasEditPermission,\n         vsanConfig: null,\n         isEmptyCluster: null,\n         autoClaimMode: this.autoClaimMode,\n         diskGroup: null,\n         host: this.selectedHost,\n         storageData: null,\n         clusterCapabilities: this.clusterCapabilities,\n         hasHostMaintenancePermission: this.hasHostMaintenancePermission,\n         spaceEfficiencyConfig: null,\n      };\n   }\n\n   getPrecheckLabel(): string {\n      return DiskMgmtHostUtil.getDataMigrationPrecheckLabel(this.clusterCapabilities);\n   }\n\n   invokePrecheckEvacuation = (): void => {\n      const clusterRefUid: string = ManagedObject.contextObjectUid;\n\n      if (this.clusterCapabilities.isHostResourcePrecheckSupported) {\n         const evacuationContext: EvacuationContext =\n               VsanDiskMgmtActionsUtil.getEvacuationContext(this.selectedHost.hostRef);\n         this.navigationService.navigateTo(PlatformExtension.CLUSTER_DATA_MIGRATION_PRE_CHECK,\n               clusterRefUid, evacuationContext);\n         return;\n      }\n      const context: any = {\n         hostMor: this.selectedHost.hostRef,\n         objectName: this.selectedHost.name,\n         objectUid: \"\",\n      };\n      new ModalBuilder(\"preCheckEvacuation\")\n            .setSize(PreCheckEvacuationDialogSize.WIDTH,\n                  PreCheckEvacuationDialogSize.HEIGHT_WITH_OBJECTS)\n            .open(context);\n   };\n\n   invokeCreateDiskGroup = (): void => {\n      const context = {\n         clusterId: ManagedObject.contextObjectUid,\n         hostId: ManagedObject.uid(this.selectedHost.hostRef),\n         hostName: this.selectedHost.name,\n         isWitnessHost: this.selectedHost.isWitnessHost,\n      };\n      new ModalBuilder(\"diskManagement/createDiskGroup\")\n            .setSize(1000, 730)\n            .open(context)\n            .then((task: ManagedObject) => this.diskManagementActionAvailabilityService.taskStarted.next([task]));\n   };\n\n   viewHostDetails = (): void  => this.diskManagementActionAvailabilityService.hostDetailsViewSelected.next();\n\n   viewHostObjects = (): void => this.diskManagementActionAvailabilityService.objectsViewSelected\n         .next(new ViewObjectsContext(this.selectedHost, this.getPreselectedGroup(), null));\n\n   // For vSAN Max single tier the first group holds all disks claimed for vSAN Max and should be preselected\n   private getPreselectedGroup = (): DiskGroupData | null => {\n      return DiskMgmtDiskGroupUtil.getBreadcrumbPreselectedDiskGroup(this.selectedHost);\n   };\n}","/* Copyright 2021-2022 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {GlobalRefreshService} from \"@service/global-refresh.service\";\nimport {IdGenerator} from \"@util/id-generator\";\nimport {PromiseBaton} from \"@util/promise/promise-baton\";\n\n/**\n * This decorator solve the race condition problem.\n * - Problem - Call single async method multiple times and we can't be sure which result will come last.\n * - Solution - It will resolve/reject only the last promise. On global refresh we cancel the ongoing promise.\n */\nexport function RaceConditionSafe(): MethodDecorator {\n   return function (targetClass: any, functionName: string, descriptor: PropertyDescriptor): void {\n      // Prototype level\n      const id: string = IdGenerator.getUniqueId();\n      const func: (...args: any[]) => Promise<any> = descriptor.value;\n      const promiseBaton: PromiseBaton<any> = new PromiseBaton();\n\n      // Instance level\n      descriptor.value = function (...args: any[]): Promise<any> {\n         addEventListeners(id, promiseBaton);\n         return promiseBaton.resolveOnly.call(promiseBaton, func.apply(this, args));\n      };\n   };\n\n   function addEventListeners(id: string, promiseBaton: PromiseBaton<any>): void {\n      GlobalRefreshService.Instance.registerRefreshHandler(id, () => promiseBaton.cancelLastOne(), null, false);\n   }\n}\n","<!--Copyright 2019-2022 VMware, Inc. All rights reserved. -- VMware Confidential-->\n<vsan-delete-prompt\n      title=\"{{'vsan.dialog.recreateDiskGroup.title' | localized}}\"\n      [subtitle]=\"diskGroup?.vsanUuid\"\n      confirmText=\"{{'vsan.dialog.recreateDiskGroup.confirmationButtonText' | localized}}\"\n      [blockContent]=\"busy\"\n      [blockButton]=\"busy || !isValidDecommisionMode\"\n      [(alertMessages)]=\"alerts\"\n      [additionalButtonText]=\"goToPrecheckButtonText\"\n      (onConfirm)=\"onOkClicked()\"\n      (onAdditionalAction)=\"onGoToPrecheckClicked()\">\n   <div class=\"dialog-body\">\n      <vsan-validation *ngIf=\"warningMessages?.length && !alerts?.length\"\n                       alertType=\"warning\"\n                       [allowClose]=\"false\"\n                       [alertsExpanded] = \"true\"\n                       [allowExpandCollapse] = \"false\"\n                       [(alerts)]=\"warningMessages\">\n      </vsan-validation>\n\n      <!--Preselected decommission mode-->\n      <form class=\"clr-form clr-form-horizontal\" *ngIf=\"preselectedDecommissionMode\">\n         <div class=\"clr-form-control\">\n            <label for=\"recreate-disk-group-decommission-mode\" class=\"clr-control-label\">\n               {{\"vsan.dialog.precheckEvacuation.label\" | localized}}\n            </label>\n            <span id=\"recreate-disk-group-decommission-mode\">\n               {{localizedPreselectedDecommissionMode}}\n            </span>\n         </div>\n      </form>\n\n      <!-- Select decommission mode -->\n      <ng-container *ngIf=\"!busy && shouldAllowDataMigration && !preselectedDecommissionMode\">\n         <div id=\"dataOnDiskLabel\" *ngIf=\"!isDiskResourcePrecheckSupported\">\n            {{dataOnDiskGroupLabel}}\n         </div>\n         <div class=\"migration-mode-label\">\n            <span id=\"selectMigrationModeLabel\">{{\"vsan.dialog.deleteDiskGroup.migrationMode\" | localized}}</span>\n            <clr-signpost [vsan-signpost-title]=\"'vsan.dialog.deleteDiskGroup.migrationMode.signpost.label' | localized\">\n               <clr-signpost-content *clrIfOpen clrPosition=\"center-right\">\n                  <span>{{\"vsan.dialog.deleteDiskGroup.evacuateDataHelp\" | localized}}</span>\n               </clr-signpost-content>\n            </clr-signpost>\n         </div>\n         <vsan-pre-check-evacuation-summary\n               id=\"preCheckSummary\"\n               [hostMor]=\"host.hostRef\"\n               [evacuationEntityUuid]=\"evacuationEntityUuid\"\n               [selectedDecommissionMode]=\"selectedDecommissionMode\"\n               [preCheckRecommendationMessage]=\"preCheckRecommendationMessage\"\n               (selectedDecommissionModeSummaryChanged)=\"onDecommisionModeSummaryChanged($event)\"\n               (isDiskResourcePrecheckSupportedRetrieved)=\"onDiskResourcePrecheckSupportedChanged($event)\">\n         </vsan-pre-check-evacuation-summary>\n      </ng-container>\n\n      <!-- Confirmation text -->\n      <div id=\"footer-recreate\" class=\"strong-label\">\n         {{\"vsan.dialog.recreateDiskGroup.confirmationLabel\" | localized}}\n      </div>\n   </div>\n</vsan-delete-prompt>\n","/* Copyright 2020-2022 VMware, Inc. All rights reserved. -- VMware Confidential */\nexport class VsanDialogUtil {\n   static readonly CAPACITY_MANAGEMENT_DIALOG: VsanDialogProperties = {\n      width: 800,\n      height: 700,\n   };\n\n   static readonly DELETE_VOLUME_DIALOG: VsanDialogProperties = {\n      width: 500,\n      height: 250,\n   };\n\n   static readonly MIGRATE_VOLUME_DIALOG: VsanDialogProperties = {\n      width: 1030,\n      height: 710,\n   };\n\n   static readonly REAPPLY_VOLUME_POLICY_DIALOG: VsanDialogProperties = {\n      width: 700,\n      height: 250,\n   };\n\n   static readonly DUPLICATE_PCI_ID_MODEL_SELECTION_DIALOG: VsanDialogProperties = {\n      width: 800,\n      height: 500,\n   };\n\n   static readonly HEALTH_RESTORE_ACTION_DIALOG: VsanDialogProperties = {\n      width: 550,\n      height: 250,\n   };\n\n   // Keep in sync with plugin.xml extension point\n   static readonly CLUSTER_POWER_ON_DIALOG: VsanDialogProperties = {\n      width: 600,\n      height: 230,\n   };\n\n   static readonly VM_IO_DIAGNOSTICS_METRICS_DIALOG: VsanDialogProperties = {\n      width: 900,\n      height: 700,\n   };\n\n   static readonly VM_IO_DIAGNOSTICS_LATENCY_DIALOG: VsanDialogProperties = {\n      width: 1000,\n      height: 500,\n   };\n\n   static readonly VM_IO_DIAGNOSTICS_DOM_OWNER_LATENCY_DIALOG: VsanDialogProperties = {\n      width: 1000,\n      height: 400,\n   };\n\n   static readonly PERF_SVC_EDIT_ACTION_DIALOG: VsanDialogProperties = {\n      width: 800,\n      height: 450,\n   };\n\n   static readonly PERF_SVC_ENABLE_ACTION_DIALOG: VsanDialogProperties = {\n      width: 800,\n      height: 250,\n   };\n\n   static readonly CLAIM_DISKS_ACTION_DIALOG: VsanDialogProperties = {\n      width: 1200,\n      height: 650,\n   };\n\n   static readonly VSAN_DISK_CLAIM_ACTION_DIALOG: VsanDialogProperties = {\n      width: 670,\n      height: 300,\n   };\n}\n\nexport class VsanDialogProperties {\n   width: number;\n   height: number;\n}\n","/* Copyright 2020-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {Injectable} from \"@angular/core\";\nimport {Observable, Subject} from \"rxjs\";\nimport {BreadcrumbNavigation, VsanBreadcrumbService} from \"@component/navigation/vsan-breadcrumb.service\";\nimport {BreadcrumbRouteModel} from \"@component/navigation/breadcrumb-route.model\";\nimport {HostData} from \"@generated/host-data\";\nimport {DiskGroupData} from \"@generated/disk-group-data\";\nimport {DiskMgmtDiskGroupUtil, VsanDiskGroupLabelFormat} from \"@util/disk-mgmt-disk-group.util\";\nimport {DiskData} from \"@generated/disk-data\";\nimport {PmemDiskData} from \"@generated/pmem-disk-data\";\nimport {ViewObjectsContext} from \"./views/model/view-objects-context\";\nimport {StorageData} from \"@component/diskmgmt/model/storage-data\";\n\n/**\n * This service orchestrates breadcrumb routing in disk manages view. For example initializing links and callbacks\n * for cluster and hosts; updating links and callbacks for cluster, hosts, groups and storage when switching to\n * virtual objects mode and vice versa.\n */\n@Injectable()\nexport class DiskManagementRoutingService {\n\n   private clusterNavigated: Subject<void> = new Subject<void>();\n   onClusterNavigatedObs: Observable<void> = this.clusterNavigated.asObservable();\n\n   private hostNavigated: Subject<HostData> = new Subject<HostData>();\n   onHostNavigatedObs: Observable<HostData> = this.hostNavigated.asObservable();\n\n   private virtualObjectsRequested: Subject<ViewObjectsContext> = new Subject<ViewObjectsContext>();\n   onVirtualObjectsRequested: Observable<ViewObjectsContext> = this.virtualObjectsRequested.asObservable();\n\n   // Clear errors only when clicking on breadcrumb links.\n   private errorCleared: Subject<void> = new Subject<void>();\n   onErrorCleared: Observable<void> = this.errorCleared.asObservable();\n\n   hostList: HostData[];\n   isVirtualObjectsView: boolean;\n\n   @BreadcrumbNavigation()\n   viewRoutes: {\n      root: BreadcrumbRouteModel,\n      hosts: BreadcrumbRouteModel,\n      groups: BreadcrumbRouteModel,\n      storage: BreadcrumbRouteModel,\n   };\n\n   setHostList(hostList: HostData[]): void {\n      this.hostList = hostList;\n   }\n\n   setIsVirtualObjectsView(isVirtualObjectsView: boolean): void {\n      this.isVirtualObjectsView = isVirtualObjectsView;\n   }\n\n   setInitialViewRoots(): void {\n      this.viewRoutes = {\n         root: BreadcrumbRouteModel.link(null, null, DiskManagementRoutingLabels.CLUSTER),\n         hosts: BreadcrumbRouteModel.links(this.onHostNavigated.name),\n         groups: BreadcrumbRouteModel.links(this.onVoGroupNavigated.name, this.isGroupDisabled),\n         storage: BreadcrumbRouteModel.links(this.onVoStorageNavigated.name, this.isStorageDisabled),\n      };\n   }\n\n   setHostDetailsLevelRootCb(): void {\n      this.viewRoutes.root.onTrigger = this.onClusterNavigated.name;\n   }\n\n   private onClusterNavigated(): void {\n      this.clusterNavigated.next();\n   }\n\n   private onHostNavigated(): void {\n      this.hostNavigated.next(this.getHostBySelectedLink());\n   }\n\n   showBreadcrumbNavigation(): void {\n      // Display the breadcrumb navigation\n      VsanBreadcrumbService.show(true);\n      // Navigate to the root route initially\n      this.navigateToRootRoute();\n   }\n\n   navigateToHostRoute(hostLink: string): void {\n      this.viewRoutes.hosts.select(hostLink);\n      this.viewRoutes.hosts.navigate();\n   }\n\n   /**\n    * The method handles view objects action for the corresponding disk mgmt entity as follows:\n    * 1) Context properties are null. Navigate to cluster and \"All hosts\". Query cluster objects.\n    * 2) Host - Only host is provided by the context. Navigate to host and \"All groups\".\n    * Query host objects.\n    * 3) Group - Host and group is provided by the context. Navigate to host, group and \"All disks\".\n    * Query group objects.\n    * 4) Storage - Host, group and storage is provided by the context. Navigate to host, group and storage.\n    * Query storage objects.\n    */\n   viewObjects(context: ViewObjectsContext): void {\n      if (context.host) {\n         this.routeToVirtualObjectsHost(context.host);\n      } else {\n         this.routeToVirtualObjectsHost(null);\n         this.queryClusterObjects();\n         return;\n      }\n      if (context.group) {\n         this.routeToVirtualObjectsGroups(this.getDiskGroupLabel(context.group));\n      }\n      if (context.storage) {\n         this.routeToVirtualObjectsStorage(context.storage.name);\n         this.queryStorageObjects();\n      } else if (context.group) {\n         this.routeToVirtualObjectsStorage();\n         this.queryGroupObjects();\n      } else {\n         this.routeToVirtualObjectsGroups();\n         this.queryHostObjects();\n      }\n   }\n\n   // region Virtual objects view specific methods for breadcrumb routing to host, group and storage\n   private routeToVirtualObjectsHost(host: HostData): void {\n      const hostName: string = host?.name || DiskManagementRoutingLabels.ALL_HOSTS;\n      this.viewRoutes.root.onTrigger = this.onVoClusterNavigated.name;\n      this.updateHostLinks();\n      this.viewRoutes.hosts.onTrigger = this.onVoHostNavigated.name;\n      this.viewRoutes.hosts.isDisabled = this.isHostDisabled;\n      this.viewRoutes.groups.isHidden = host?.isSingleTierEnabled;\n      this.navigateToHostRoute(hostName);\n   }\n\n   private routeToVirtualObjectsGroups(groupLabel: string = DiskManagementRoutingLabels.ALL_GROUPS): void {\n      const groupLinks: string[] = [DiskManagementRoutingLabels.ALL_GROUPS, ...this.getGroupLinks()];\n      this.viewRoutes.groups.links = groupLinks;\n      this.viewRoutes.groups.select(groupLabel);\n      this.viewRoutes.groups.navigate();\n   }\n\n   private routeToVirtualObjectsStorage(storageName?: string): void {\n      const storageLinks: string[] = [this.getAllStorageLabel(), ...this.getStorageLinks()];\n      this.viewRoutes.storage.links = storageLinks;\n      this.viewRoutes.storage.select(storageName ? storageName : this.getAllStorageLabel());\n      this.viewRoutes.storage.navigate();\n   }\n\n   private getGroupLinks(): string[] {\n      const host: HostData = this.getHostBySelectedLink();\n      const usedGroups: DiskGroupData[] =\n            host.diskGroups.filter(diskGroup => !DiskMgmtDiskGroupUtil.isUnusedDiskGroup(diskGroup));\n      return usedGroups.map(diskGroup => this.getDiskGroupLabel(diskGroup));\n   }\n\n   private getStorageLinks(): string[] {\n      const diskGroup: DiskGroupData = this.getGroupBySelectedLink();\n      return this.getUsedGroupStorage(diskGroup).map(storage => storage.name);\n   }\n   // endregion\n\n   // region Virtual objects view specific breadcrumb route callbacks on cluster, host, group and storage levels\n   onVoClusterNavigated(): void {\n      this.errorCleared.next();\n      this.navigateToHostRoute(DiskManagementRoutingLabels.ALL_HOSTS);\n      this.queryClusterObjects();\n   }\n\n   onVoHostNavigated(): void {\n      this.errorCleared.next();\n      if (this.viewRoutes.hosts.selectedLink === DiskManagementRoutingLabels.ALL_HOSTS) {\n         this.queryClusterObjects();\n         return;\n      }\n\n      // If vSAN max is enabled and host is selected,\n      // preselect first group (hide it visualy) and all disks from it\n      if (this.getHostBySelectedLink().isSingleTierEnabled) {\n         this.routeToVirtualObjectsGroups(this.getGroupLinks()[0]);\n         this.routeToVirtualObjectsStorage();\n         this.viewRoutes.groups.isHidden = true;\n      } else {\n         this.routeToVirtualObjectsGroups();\n      }\n\n      this.queryHostObjects();\n   }\n\n   onVoGroupNavigated(): void {\n      this.errorCleared.next();\n      if (this.viewRoutes.groups.selectedLink === DiskManagementRoutingLabels.ALL_GROUPS) {\n         this.queryHostObjects();\n         return;\n      }\n      this.routeToVirtualObjectsStorage();\n      this.queryGroupObjects();\n   }\n\n   onVoStorageNavigated(): void {\n      this.errorCleared.next();\n      if (this.viewRoutes.storage.selectedLink === this.getAllStorageLabel()) {\n         this.queryGroupObjects();\n         return;\n      }\n      this.queryStorageObjects();\n   }\n\n   // Disable only dropdown items with no objectUuids that represent certain disk mgmt entities.\n   // For example \"host1\" with no objectUuids will be disabled while \"All hosts\" item cannot be\n   // disabled because it is selected when the cluster is navigated.\n   isHostDisabled = (link: string): boolean => this.hasNoPlacedObjects(this.findHostByName(link));\n\n   isGroupDisabled = (link: string): boolean => this.hasNoPlacedObjects(this.findDiskGroupByLabel(link));\n\n   isStorageDisabled = (link: string): boolean => this.hasNoPlacedObjects(this.findStorageByName(link));\n\n   private hasNoPlacedObjects(entity: {objectUuids: string[]}): boolean {\n      return entity && VsanUiUtils.isEmpty(entity.objectUuids);\n   }\n   // endregion\n\n   // region Methods for querying virtual objects on cluster, host, group and storage levels\n   private queryClusterObjects = (): void => this.queryObjects(null);\n\n   private queryHostObjects = (): void =>\n         this.queryObjects(new ViewObjectsContext(this.getHostBySelectedLink(), this.getPreselectedDiskGroup(), null));\n\n   private queryGroupObjects = (): void =>\n         this.queryObjects(new ViewObjectsContext(this.getHostBySelectedLink(), this.getGroupBySelectedLink(), null));\n\n   private queryStorageObjects = (): void => this.queryObjects(new ViewObjectsContext(\n         this.getHostBySelectedLink(),\n         this.getGroupBySelectedLink(),\n         this.getStorageBySelectedLink(),\n   ));\n\n   private getPreselectedDiskGroup = (): DiskGroupData | null => {\n      return DiskMgmtDiskGroupUtil.getBreadcrumbPreselectedDiskGroup(this.getHostBySelectedLink());\n   };\n\n   private queryObjects = (viewObjectsContext: ViewObjectsContext): void =>\n         this.virtualObjectsRequested.next(viewObjectsContext);\n   // endregion\n\n   // region Methods for getting host, disk group and storage by the corresponding link\n   private getHostBySelectedLink(): HostData {\n      return this.findHostByName(this.viewRoutes.hosts.selectedLink);\n   }\n\n   private findHostByName(hostName: string): HostData {\n      return this.hostList && this.hostList.find(host => host.name === hostName);\n   }\n\n   private getGroupBySelectedLink(): DiskGroupData {\n      return this.findDiskGroupByLabel(this.viewRoutes.groups.selectedLink);\n   }\n\n   private findDiskGroupByLabel(groupLabel: string): DiskGroupData {\n      const host: HostData = this.getHostBySelectedLink();\n      return host && host.diskGroups.find(diskGroup =>\n            this.getDiskGroupLabel(diskGroup) === groupLabel);\n   }\n\n   private getDiskGroupLabel(diskGroup: DiskGroupData): string {\n      return DiskMgmtDiskGroupUtil.getLabel(diskGroup, VsanDiskGroupLabelFormat.TYPE_AND_UUID);\n   }\n\n   private getStorageBySelectedLink(): StorageData {\n      const diskData: DiskData | PmemDiskData = this.findStorageByName(this.viewRoutes.storage.selectedLink);\n      return this.isSelectedGroupPMEM() ?\n            StorageData.fromPmemDiskData(diskData as PmemDiskData) :\n            StorageData.fromDiskData(diskData as DiskData);\n   }\n\n   private findStorageByName(storageName: string): DiskData | PmemDiskData {\n      const diskGroup: DiskGroupData = this.getGroupBySelectedLink();\n      return this.getUsedGroupStorage(diskGroup).find(storage => storage.name === storageName);\n   }\n   // endregion\n\n   private getAllStorageLabel = (): string =>\n         DiskManagementRoutingLabels.getAllStorage(this.isSelectedGroupPMEM());\n\n   private isSelectedGroupPMEM = (): boolean => DiskMgmtDiskGroupUtil.isPmemDiskGroup(this.getGroupBySelectedLink());\n\n   private getUsedGroupStorage(diskGroup: DiskGroupData): Array<DiskData | PmemDiskData> {\n      if (!diskGroup) {\n         return [];\n      }\n      if (DiskMgmtDiskGroupUtil.isPmemDiskGroup(diskGroup)) {\n         return diskGroup.pmemStorage;\n      } else if (!DiskMgmtDiskGroupUtil.isUnusedDiskGroup(diskGroup)) {\n         return diskGroup.disks;\n      }\n      return [];\n   }\n\n   navigateToRootRoute(): void {\n      this.viewRoutes.root.navigate();\n   }\n\n   resetHostsRoutes(): void {\n      this.viewRoutes.hosts.onTrigger = this.onHostNavigated.name;\n      this.viewRoutes.hosts.isDisabled = (): boolean => false;\n      this.updateHostLinks();\n   }\n\n   resetRootCallBack(): void {\n      this.viewRoutes.root.onTrigger = null;\n   }\n\n   updateHostLinks(): void {\n      const hostLinks: string[] = this.hostList.map(host => host.name);\n      this.viewRoutes.hosts.links = this.isVirtualObjectsView ?\n            [DiskManagementRoutingLabels.ALL_HOSTS, ...hostLinks] :\n            hostLinks;\n   }\n}\n\nexport class DiskManagementRoutingLabels {\n   static readonly CLUSTER: string =\n         VsanUiUtils.getString(\"vsan.manage.diskManagement.breadcrumb.cluster\");\n   static readonly ALL_HOSTS: string =\n         VsanUiUtils.getString(\"vsan.manage.diskManagement.breadcrumb.host.allHosts\");\n   static readonly ALL_GROUPS: string =\n         VsanUiUtils.getString(\"vsan.manage.diskManagement.breadcrumb.group.allGroups\");\n   static getAllStorage = (isPMEM: boolean): string => VsanUiUtils.getString(isPMEM ?\n         \"vsan.manage.diskManagement.breadcrumb.storage.allDevices\" :\n         \"vsan.manage.diskManagement.breadcrumb.storage.allDisks\");\n}\n","/* Copyright 2020-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {Injectable} from \"@angular/core\";\nimport {Icon} from \"@util/icon\";\nimport {HostData} from \"@generated/host-data\";\nimport {DiskMgmtDiskGroupUtil} from \"@util/disk-mgmt-disk-group.util\";\nimport {AvailabilityState} from \"@generated/availability-state\";\nimport {DiskData} from \"@generated/disk-data\";\nimport {ClaimOption} from \"@generated/claim-option\";\n\n/**\n * This service calculates counts for disk mgmt entities (i.e., hosts, disk groups, capacity disks,\n * vSAN direct disks, pmem storage) and provides a factory method for these entities on host and cluster level.\n */\n@Injectable()\nexport class DiskMgmtEntitiesSummaryService  {\n\n   private typeToModel: Map<DiskMgmtEntityType, DiskMgmtEntitySummary> = new Map([\n      [DiskMgmtEntityType.HOST, new DiskMgmtEntitySummary(\n            DiskMgmtEntityType.HOST,\n            Icon.HOST,\n            \"vsan.manage.diskManagement.overview.host\",\n            \"vsan.manage.diskManagement.overview.hosts\")],\n      [DiskMgmtEntityType.CAPACITY_DISK, new DiskMgmtEntitySummary(\n            DiskMgmtEntityType.CAPACITY_DISK,\n            Icon.CLAIM_AS_CAPACITY,\n            \"vsan.manage.diskManagement.overview.capacityDisk\",\n            \"vsan.manage.diskManagement.overview.capacityDisks\")],\n      [DiskMgmtEntityType.DISK_GROUP, new DiskMgmtEntitySummary(\n            DiskMgmtEntityType.DISK_GROUP,\n            Icon.DISK_GROUP_IMAGE,\n            \"vsan.manage.diskManagement.overview.diskGroup\",\n            \"vsan.manage.diskManagement.overview.diskGroups\")],\n      [DiskMgmtEntityType.SINGLE_TIER_DISKS, new DiskMgmtEntitySummary(\n            DiskMgmtEntityType.SINGLE_TIER_DISKS,\n            Icon.DISK,\n            \"vsan.manage.diskManagement.overview.singleTierDisk\",\n            \"vsan.manage.diskManagement.overview.singleTierDisks\")],\n      [DiskMgmtEntityType.VSAN_DIRECT_DISK, new DiskMgmtEntitySummary(\n            DiskMgmtEntityType.VSAN_DIRECT_DISK,\n            null,\n            \"vsan.manage.diskManagement.overview.vSanDirectDisk\",\n            \"vsan.manage.diskManagement.overview.vSanDirectDisks\")],\n      [DiskMgmtEntityType.PMEM_HOST, new DiskMgmtEntitySummary(\n            DiskMgmtEntityType.PMEM_HOST,\n            null,\n            \"vsan.manage.diskManagement.overview.pmemHost\",\n            \"vsan.manage.diskManagement.overview.pmemHosts\")],\n      [DiskMgmtEntityType.PMEM_STORAGE, new DiskMgmtEntitySummary(\n            DiskMgmtEntityType.PMEM_STORAGE,\n            null,\n            \"vsan.manage.diskManagement.overview.pmemStorage\",\n            \"vsan.manage.diskManagement.overview.pmemStorage\")],\n   ])  as Map<DiskMgmtEntityType, DiskMgmtEntitySummary>;\n\n   private clusterLevelItems: DiskMgmtEntityType[] = [\n      DiskMgmtEntityType.HOST,\n      DiskMgmtEntityType.DISK_GROUP,\n      DiskMgmtEntityType.CAPACITY_DISK,\n      DiskMgmtEntityType.SINGLE_TIER_DISKS,\n      DiskMgmtEntityType.VSAN_DIRECT_DISK,\n      DiskMgmtEntityType.PMEM_HOST];\n\n   private hostLevelItems: DiskMgmtEntityType[] = [\n      DiskMgmtEntityType.DISK_GROUP,\n      DiskMgmtEntityType.CAPACITY_DISK,\n      DiskMgmtEntityType.SINGLE_TIER_DISKS,\n      DiskMgmtEntityType.VSAN_DIRECT_DISK,\n      DiskMgmtEntityType.PMEM_STORAGE];\n\n   // Setters:\n   private setHostCount(count: number): void {\n      this.typeToModel.get(DiskMgmtEntityType.HOST).count = count;\n   }\n\n   private setDiskGroupCount(count: number): void {\n      this.typeToModel.get(DiskMgmtEntityType.DISK_GROUP).count = count;\n   }\n\n   private setSingleTierDiskCount(count: number): void {\n      this.typeToModel.get(DiskMgmtEntityType.SINGLE_TIER_DISKS).count = count;\n   }\n\n   private setCapacityDiskCount(count: number): void {\n      this.typeToModel.get(DiskMgmtEntityType.CAPACITY_DISK).count = count;\n   }\n\n   private setVsanDirectDiskCount(count: number): void {\n      this.typeToModel.get(DiskMgmtEntityType.VSAN_DIRECT_DISK).count = count;\n   }\n\n   private setPmemHostCount(count: number): void {\n      this.typeToModel.get(DiskMgmtEntityType.PMEM_HOST).count = count;\n      this.typeToModel.get(DiskMgmtEntityType.PMEM_STORAGE).count = count;\n   }\n\n   // Getters:\n   private getHostCount(hostList: HostData[]): number {\n      return hostList.length;\n   }\n\n   private getDiskGroupCount(hostList: HostData[]): number {\n      return hostList.reduce((sum, host) =>\n            sum += host.diskGroups.filter(DiskMgmtDiskGroupUtil.isVsanDiskGroup).length, 0);\n   }\n\n   private getSingleTierDiskCount(hostList: HostData[]): number {\n      return hostList.reduce((sum, host) =>\n            sum += host.diskGroups\n                  .filter(DiskMgmtDiskGroupUtil.isVsanMaxSingleTier)\n                  .reduce((diskSum, diskgroup) => diskSum += diskgroup.disks.length, 0),\n            0);\n   }\n\n   private getCapacityDiskCount(hostList: HostData[]): number {\n      return hostList.reduce((sum, host) => sum += (host.disks[AvailabilityState.IN_USE_BY_VSAN] as DiskData[])\n            .filter(this.isClaimedForCapacity).length, 0);\n   }\n   private isClaimedForCapacity(disk: DiskData): boolean {\n      return disk.claimOption === ClaimOption.ClaimForStorage;\n   }\n\n   private getVsanDirectDiskCount(hostList: HostData[]): number {\n      return hostList.reduce((sum, host) => sum += host.disks[AvailabilityState.ONLY_MANAGED_BY_VSAN].length, 0);\n   }\n\n   private getPmemHostCount(hostList: HostData[]): number {\n      return hostList.filter(host => host.pmemStorage[AvailabilityState.ONLY_MANAGED_BY_VSAN].length).length;\n   }\n\n   createEntities(isHostLevel: boolean, hostsData: HostData[]): DiskMgmtEntitySummary[] {\n      this.populateSummary(hostsData);\n      let summaries: DiskMgmtEntitySummary[] = this.getSummaries(isHostLevel);\n\n      if (VsanUiUtils.isEmpty(summaries)) {\n         summaries = [this.getEmptySummary(hostsData)];\n      }\n\n      return summaries;\n   }\n\n   private populateSummary(hostsData: HostData[]): void {\n      this.setHostCount(this.getHostCount(hostsData));\n      this.setDiskGroupCount(this.getDiskGroupCount(hostsData));\n      this.setSingleTierDiskCount(this.getSingleTierDiskCount(hostsData));\n      this.setCapacityDiskCount(this.getCapacityDiskCount(hostsData));\n      this.setVsanDirectDiskCount(this.getVsanDirectDiskCount(hostsData));\n      this.setPmemHostCount(this.getPmemHostCount(hostsData));\n   }\n\n   private getSummaries(isHostLevel: boolean): DiskMgmtEntitySummary[] {\n      const result: DiskMgmtEntitySummary[] = [];\n      const levelEntities: DiskMgmtEntityType[] = isHostLevel ? this.hostLevelItems : this.clusterLevelItems;\n      levelEntities.forEach((itemType) => {\n         const item: DiskMgmtEntitySummary = this.typeToModel.get(itemType);\n         if (item.count) {\n            result.push(this.typeToModel.get(itemType));\n         }\n      });\n\n      return result;\n   }\n\n   // Handle empty summary:\n   // * Host level - if host has no disks and groups show \"0 vSAN disk groups\" item.\n   // * Cluster level - when there are no hosts, summary is not shown at all but unavailable-view component.\n   private getEmptySummary(hostsData: HostData[]): DiskMgmtEntitySummary {\n      const defaultType: DiskMgmtEntityType = hostsData.some(host => host.isSingleTierEnabled)\n            ? DiskMgmtEntityType.SINGLE_TIER_DISKS : DiskMgmtEntityType.DISK_GROUP;\n      return this.typeToModel.get(defaultType);\n   }\n}\n\nexport class DiskMgmtEntitySummary {\n   constructor(public type: DiskMgmtEntityType,\n         public icon: Icon,\n         public labelKeySing: string,\n         public labelKeyPlural: string,\n         public count?: number) {}\n\n   get label(): string {\n      return VsanUiUtils.getString(this.count === 1 ? this.labelKeySing : this.labelKeyPlural, this.count);\n   }\n}\n\nexport enum DiskMgmtEntityType {\n   HOST,\n   CAPACITY_DISK,\n   DISK_GROUP,\n   SINGLE_TIER_DISKS,\n   VSAN_DIRECT_DISK,\n   PMEM_HOST,\n   PMEM_STORAGE,\n}\n","/* Copyright 2020-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, EventEmitter, Input, Output} from \"@angular/core\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {Icon} from \"@util/icon\";\nimport {HostData} from \"@generated/host-data\";\nimport {DiskGroupData} from \"@generated/disk-group-data\";\nimport {VsanCapabilityData} from \"@generated/vsan-capability-data\";\nimport {DiskMgmtDiskGroupUtil, VsanDiskGroupLabelFormat} from \"@util/disk-mgmt-disk-group.util\";\nimport {StorageGroupData} from \"./model/storage-group-data\";\nimport {AccordionPanelToggleExpandEventArg} from \"@directive/clr-accordion/clr-accordion-panel.directive\";\nimport {StorageIdentifier} from \"@component/diskmgmt/model/storage-identifier\";\nimport {SpaceEfficiencyConfig} from \"@generated/space-efficiency-config\";\nimport {StorageGroupIdentifier} from \"@component/diskmgmt/model/storage-group-identifier\";\n\n@Component({\n   templateUrl: \"storage-groups.html\",\n   selector: \"vsan-storage-groups\",\n   styleUrls: [\"storage-groups.scss\"],\n})\nexport class StorageGroupsComponent {\n\n   static GROUP_ID_PREFIX: string = \"group-\";\n   static CLR_DROPDOWN_TRIGGER_ATTR: string = \"clrdropdowntrigger\";\n   static ACTIONS_CLASS_HIDDEN: string = \"is-hidden\";\n   static ACTIONS_CLASS_NONE: string = \"is-none-display\";\n   VsanUiUtils: typeof VsanUiUtils = VsanUiUtils;\n   Icon: typeof Icon = Icon;\n\n   @Input()\n   autoClaimMode: boolean;\n\n   @Input()\n   spaceEfficiencyConfig: SpaceEfficiencyConfig = SpaceEfficiencyConfig.NONE;\n\n   _host: HostData;\n   @Input()\n   get host(): HostData {\n      return this._host;\n   }\n\n   set host(value: HostData) {\n      this._host = value;\n      if (VsanUiUtils.isUnset(value)) {\n         this.storageGroups = [];\n         return;\n      }\n      const storageGroups: StorageGroupData[] = [];\n      if (!VsanUiUtils.isEmpty(value.diskGroups)) {\n         storageGroups.push(...value.diskGroups.map(StorageGroupData.fromDiskGroup));\n         const unusedStorageGroup: StorageGroupData = storageGroups.find(DiskMgmtDiskGroupUtil.isUnusedDiskGroup);\n         StorageGroupData.setUnusedStorageData(value, unusedStorageGroup);\n      }\n      this.storageGroups = storageGroups;\n   }\n\n   @Input()\n   hasEditPermission: boolean = false;\n\n   @Input()\n   clusterCapabilities: VsanCapabilityData;\n\n   @Input()\n   hasHostMaintenancePermission: boolean;\n\n   @Input()\n   preselectedGroupIdentifier: StorageGroupIdentifier;\n\n   @Input()\n   preselectedStorage: StorageIdentifier;\n\n   @Output()\n   groupSelected: EventEmitter<StorageGroupIdentifier> = new EventEmitter<StorageGroupIdentifier>();\n\n   @Output()\n   storageSelected: EventEmitter<StorageIdentifier> = new EventEmitter<StorageIdentifier>();\n\n   openedGroupActionsDropdownEl: HTMLElement;\n   storageGroups: StorageGroupData[];\n\n   isUnusedDiskGroup(diskGroup: DiskGroupData): boolean {\n      return DiskMgmtDiskGroupUtil.isUnusedDiskGroup(diskGroup);\n   }\n\n   getActionColumnClass(diskGroup: DiskGroupData): string {\n      if (this.host?.isSingleTierEnabled) {\n         return StorageGroupsComponent.ACTIONS_CLASS_NONE;\n      }\n\n      return this.isUnusedDiskGroup(diskGroup) ? StorageGroupsComponent.ACTIONS_CLASS_HIDDEN : \"\";\n   }\n\n   isGroupExpanded(groupData: StorageGroupData): boolean {\n      return !!(this.preselectedGroupIdentifier &&\n            (this.getDiskGroupLabel(this.preselectedGroupIdentifier, VsanDiskGroupLabelFormat.UUID) ===\n             this.getDiskGroupLabel(groupData, VsanDiskGroupLabelFormat.UUID)));\n   }\n\n   createGroupId(groupData: StorageGroupData): string {\n      const groupLabelFormatted: string = this.getDiskGroupLabel(groupData, VsanDiskGroupLabelFormat.TYPE_AND_UUID).toLowerCase()\n            .replace(/\\s/g, \"-\");\n      return `${StorageGroupsComponent.GROUP_ID_PREFIX}${groupLabelFormatted}`;\n   }\n\n   /**\n    *  Select lastly expanded/collapsed group. If a group is collapsed group selection is removed.\n    */\n   toggleExpand(args: AccordionPanelToggleExpandEventArg<StorageGroupData>): void {\n      this.selectStorage(null);\n      const storageGroupIdentifier: StorageGroupIdentifier =\n            !args.isExpanded ? null : StorageGroupIdentifier.fromDiskGroup(args.model);\n      this.groupSelected.emit(storageGroupIdentifier);\n   }\n\n   selectStorage(storageIdentifier: StorageIdentifier): void {\n      this.storageSelected.emit(storageIdentifier);\n   }\n\n   getDiskGroupLabel = (group: DiskGroupData | StorageGroupIdentifier,\n         labelFormat: VsanDiskGroupLabelFormat = VsanDiskGroupLabelFormat.TYPE): string => {\n      return DiskMgmtDiskGroupUtil.getLabel(group, labelFormat);\n   };\n\n   getHealthKey = (group: DiskGroupData): string => {\n      return DiskMgmtDiskGroupUtil.getHealthKey(group);\n   };\n\n   getState = (group: DiskGroupData): string => {\n      return DiskMgmtDiskGroupUtil.getState(group);\n   };\n\n   getClaimedDisksLabel = (group: DiskGroupData): string => {\n      if (this.isUnusedDiskGroup(group)) {\n         const disksCount: number = group.disks.length + group.pmemStorage.length;\n         return VsanUiUtils.getString(disksCount === 1 ?\n               \"vsan.manage.diskManagement.host.diskGroups.disk.label\" :\n               \"vsan.manage.diskManagement.host.diskGroups.disks.label\",\n               disksCount);\n      }\n      if (!DiskMgmtDiskGroupUtil.isPmemDiskGroup(group)) {\n         const disksCount: number = group.disks.length;\n         return VsanUiUtils.getString(disksCount === 1 ?\n               \"vsan.manage.diskManagement.host.diskGroups.disk.label\" :\n               \"vsan.manage.diskManagement.host.diskGroups.disks.label\",\n               disksCount);\n      }\n      const devicesCount: number = group.pmemStorage.length;\n      return VsanUiUtils.getString( devicesCount === 1 ?\n            \"vsan.manage.diskManagement.host.diskGroups.device.label\" :\n            \"vsan.manage.diskManagement.host.diskGroups.devices.label\",\n            devicesCount);\n   };\n\n   getGroupType = (group: DiskGroupData): string => {\n      return DiskMgmtDiskGroupUtil.getType(group);\n   };\n\n   getAggregatedFsVersion = (group: DiskGroupData): string => {\n      const formatVersion: string = DiskMgmtDiskGroupUtil.getAggregatedFsVersion(group);\n      return VsanUiUtils.isEmpty(formatVersion) ? formatVersion :\n            VsanUiUtils.getString(\"vsan.manage.diskManagement.host.diskGroups.version\", formatVersion);\n   };\n\n   isGroupActionsDropdownOpen(triggerEl: HTMLElement): boolean {\n      return this.openedGroupActionsDropdownEl === triggerEl;\n   }\n\n   handleAccordionTitleClick(e: Event, triggerEl: HTMLElement): void {\n      const targetEl: HTMLElement = e.target as HTMLElement;\n      const isClickedOnGroupActionsDropdown: boolean = triggerEl.contains(targetEl);\n\n      if (isClickedOnGroupActionsDropdown) {\n         // We need to manually cancel the event because it will toggle the accordion\n         this.cancelAccordionToggleEvent(e);\n         this.toggleGroupActionsDropdown(this.hasClrDropdownTriggerAttr(targetEl), triggerEl);\n      } else {\n         // If we click somewhere else then close the opened dropdown and don't cancel the toggle event\n         this.openedGroupActionsDropdownEl = null;\n      }\n   }\n\n   /**\n    * Cancel accordion expand/collapse event when clicked on the group actions dropdown trigger btn/icon.\n    */\n   private cancelAccordionToggleEvent(e: Event): void {\n      e.cancelBubble = true;\n      e.stopImmediatePropagation();\n      e.stopPropagation();\n   }\n\n   private hasClrDropdownTriggerAttr(el: HTMLElement): boolean {\n      return el.hasAttribute(StorageGroupsComponent.CLR_DROPDOWN_TRIGGER_ATTR) ||\n            el.parentElement.hasAttribute(StorageGroupsComponent.CLR_DROPDOWN_TRIGGER_ATTR);\n   }\n\n   /**\n    * - If we click on a new group actions dropdown then open it.\n    * - If we click on the currently opened group actions dropdown then close it.\n    * - If we click on a dropdown item (e.g. Remove) then close the currently opened group actions dropdown.\n    */\n   private toggleGroupActionsDropdown(isDropdownTriggerClick: boolean, clickedDropdownEl: HTMLElement): void {\n      this.openedGroupActionsDropdownEl =\n            (isDropdownTriggerClick && !this.isGroupActionsDropdownOpen(clickedDropdownEl))\n                  ? clickedDropdownEl\n                  : null;\n   }\n}","/* Copyright 2020-2022 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, HostBinding, Input} from \"@angular/core\";\nimport {DiskManagementActionAvailabilityService} from \"../validation/disk-management-action-availability.service\";\nimport {NavigationService, PlatformExtension} from \"@navigation/navigation.service\";\nimport {ActionAvailableStatus} from \"@util/validation/action-available-status\";\nimport {DiskManagementActionContext} from \"../validation/disk-management-action-context\";\nimport {DiskGroupData} from \"@generated/disk-group-data\";\nimport {HostData} from \"@generated/host-data\";\nimport {DiskMgmtDiskGroupUtil} from \"@util/disk-mgmt-disk-group.util\";\nimport {VsanDiskMgmtActionsUtil} from \"@util/vsan-disk-mgmt-actions-util\";\nimport {ManagedObject} from \"@service/managed-object\";\nimport {ModalBuilder} from \"@util/modal-builder\";\nimport {DiskGroupActionContext} from \"@navigation/context/disk-group-action-context\";\nimport {HostActionData} from \"@model/host-action.data\";\nimport {DiskGroupActionData} from \"@model/disk-group-action.data\";\nimport {VsanCapabilityData} from \"@generated/vsan-capability-data\";\nimport {EvacuationContext} from \"@navigation/context/evacuation.context\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {PreCheckEvacuationDialogSize} from \"@component/precheck/pre-check-evacuation-dialog-size\";\nimport {ViewObjectsContext} from \"../model/view-objects-context\";\n\n@Component({\n   selector: \"vsan-storage-group-actions\",\n   templateUrl: \"storage-group-actions.html\",\n   styleUrls: [\"storage-group-actions.scss\"],\n})\nexport class StorageGroupActionsComponent {\n\n   @HostBinding(\"class\")\n   hostClass: string = \"vsan-dropdown-actions\";\n\n   @Input()\n   autoClaimMode: boolean;\n\n   @Input()\n   hasEditPermission: boolean = false;\n\n   @Input()\n   clusterCapabilities: VsanCapabilityData;\n\n   @Input()\n   hasHostMaintenancePermission: boolean;\n\n   @Input()\n   selectedDiskGroup: DiskGroupData;\n\n   @Input()\n   selectedHost: HostData;\n\n   DiskManagementActionAvailabilityService: typeof DiskManagementActionAvailabilityService =\n         DiskManagementActionAvailabilityService;\n\n   constructor(private navigationService: NavigationService,\n         private diskManagementActionAvailabilityService: DiskManagementActionAvailabilityService) {}\n\n   actionDisabled = (actionId: string): boolean => {\n      return !this.getActionStatus(actionId).available;\n   };\n\n   getActionButtonTitle = (actionId: string): string => {\n      return this.getActionStatus(actionId).message;\n   };\n\n   private getActionStatus = (actionId: string): ActionAvailableStatus => {\n      return this.diskManagementActionAvailabilityService.checkAvailability(this.getActionValidationContext(actionId));\n   };\n\n   private getActionValidationContext(actionId: string): DiskManagementActionContext {\n      return {\n         actionId: actionId,\n         hasEditPermission: this.hasEditPermission,\n         vsanConfig: null,\n         isEmptyCluster: null,\n         autoClaimMode: this.autoClaimMode,\n         diskGroup: this.selectedDiskGroup,\n         host: this.selectedHost,\n         storageData: null,\n         clusterCapabilities: this.clusterCapabilities,\n         hasHostMaintenancePermission: this.hasHostMaintenancePermission,\n         spaceEfficiencyConfig: null,\n      };\n   }\n\n   get isVsanDiskGroup(): boolean {\n      return DiskMgmtDiskGroupUtil.isVsanDiskGroup(this.selectedDiskGroup);\n   }\n\n   get isPmemDiskGroup(): boolean {\n      return DiskMgmtDiskGroupUtil.isPmemDiskGroup(this.selectedDiskGroup);\n   }\n\n   get precheckUnavailable(): boolean {\n      return this.actionDisabled(DiskManagementActionAvailabilityService.PRE_CHECK_ID);\n   }\n\n   get canBeRecreated(): boolean {\n      return this.clusterCapabilities\n            && this.clusterCapabilities.isRecreateDiskGroupSupported\n            && !this.autoClaimMode;\n   }\n\n   getPrecheckLabel(): string {\n      return DiskMgmtDiskGroupUtil.getDataMigrationPrecheckLabel(this.clusterCapabilities);\n   }\n\n   viewGroupObjects = (): void => this.diskManagementActionAvailabilityService.objectsViewSelected\n         .next(new ViewObjectsContext(this.selectedHost, this.selectedDiskGroup, null));\n\n   showViewGroupObjectsAction = (): boolean => !DiskMgmtDiskGroupUtil.isUnusedDiskGroup(this.selectedDiskGroup) &&\n         this.clusterCapabilities.isObjectIdentitiesSupported;\n\n   goToPrecheckEvacuation = (): void => {\n      const clusterRefUid: string = ManagedObject.contextObjectUid;\n\n      // Use the cache disk's uuid as group's uuid.\n      const objUuid: string = this.selectedDiskGroup.disks.find(d => d.isMappedAsCache).vsanUuid;\n\n      if (this.clusterCapabilities.isDiskResourcePrecheckSupported) {\n         const evacuationContext: EvacuationContext =\n               VsanDiskMgmtActionsUtil.getEvacuationContext(this.selectedDiskGroup.ownerHostRef, objUuid);\n         this.navigationService.navigateTo(PlatformExtension.CLUSTER_DATA_MIGRATION_PRE_CHECK,\n               clusterRefUid, evacuationContext);\n         return;\n      }\n      const context: any = {\n         hostMor: this.selectedDiskGroup.ownerHostRef,\n         objectName: VsanUiUtils.getString(\"vsan.dialog.precheckEvacuation.subtitle\", this.selectedDiskGroup.name),\n         objectUid: objUuid,\n      };\n\n      new ModalBuilder(\"preCheckEvacuation\")\n            .setSize(PreCheckEvacuationDialogSize.WIDTH,\n                  PreCheckEvacuationDialogSize.HEIGHT_WITH_OBJECTS)\n            .open(context);\n   };\n\n   addDisks = (): void => {\n      new ModalBuilder(\"diskManagement/addDisk\")\n            .open(this.selectedDiskGroup)\n            .then((task: ManagedObject) => this.diskManagementActionAvailabilityService.taskStarted.next([task]));\n   };\n\n   delete = (): void => {\n      const height: number = this.precheckUnavailable ?\n            VsanDiskMgmtActionsUtil.DELETE_DISK_GROUP_HEIGHT_SMALL :\n            VsanDiskMgmtActionsUtil.DELETE_DISK_GROUP_HEIGHT_MEDIUM;\n\n      new ModalBuilder(\"diskManagement/deleteDiskGroup\")\n            .setSize(VsanDiskMgmtActionsUtil.DELETE_DISK_GROUP_WIDTH, height)\n            .open(this.getActionContext())\n            .then((task: ManagedObject) => {\n               this.diskManagementActionAvailabilityService.taskStarted.next([task]);\n            });\n   };\n\n   recreate = (): void => {\n      const height: number = this.precheckUnavailable\n            ? VsanDiskMgmtActionsUtil.RECREATE_DIALOG_HEIGHT_SMALL\n            : VsanDiskMgmtActionsUtil.RECREATE_DIALOG_HEIGHT_MEDIUM;\n      new ModalBuilder(\"diskManagement/recreateDiskGroup\")\n            .setSize(VsanDiskMgmtActionsUtil.RECREATE_DIALOG_WIDTH, height)\n            .open(this.getActionContext())\n            .then((task: ManagedObject) => {\n               this.diskManagementActionAvailabilityService.taskStarted.next([task]);\n            });\n   };\n\n   mount = (): void => {\n      new ModalBuilder(\"diskManagement/mountDiskGroup\")\n            .setSize(VsanDiskMgmtActionsUtil.MOUNT_DISK_GROUP_DIALOG_WIDTH,\n                  VsanDiskMgmtActionsUtil.MOUNT_DISK_GROUP_DIALOG_HEIGHT)\n            .open(this.getActionContext())\n            .then((task: ManagedObject) => {\n               this.diskManagementActionAvailabilityService.taskStarted.next([task]);\n            });\n   };\n\n   unmount = (): void => {\n      const height: number = this.precheckUnavailable\n            ? VsanDiskMgmtActionsUtil.UNMOUNT_DISK_GROUP_DIALOG_HEIGHT_SMALL\n            : VsanDiskMgmtActionsUtil.UNMOUNT_DISK_GROUP_DIALOG_HEIGHT_MEDIUM;\n      new ModalBuilder(\"diskManagement/unmountDiskGroup\")\n            .setSize(VsanDiskMgmtActionsUtil.UNMOUNT_DISK_GROUP_DIALOG_WIDTH, height)\n            .open(this.getActionContext())\n            .then((task: ManagedObject) => {\n               this.diskManagementActionAvailabilityService.taskStarted.next([task]);\n            });\n   };\n\n   stopManagingPmem(): void {\n      new ModalBuilder(\"diskManagement/stopManagingPmem\")\n            .setSize(VsanDiskMgmtActionsUtil.STOP_MANAGING_PMEM_WIDTH,\n                  VsanDiskMgmtActionsUtil.STOP_MANAGING_PMEM_HEIGHT)\n            .open()\n            .then((task: ManagedObject) => this.diskManagementActionAvailabilityService.taskStarted.next([task]));\n   }\n\n   private getActionContext = (): DiskGroupActionContext => {\n      return {\n         host: HostActionData.fromHostData(this.selectedHost),\n         diskGroup: DiskGroupActionData.fromDiskGroupData(this.selectedDiskGroup),\n      };\n   };\n}","/* Copyright 2020-2022 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {ChangeDetectionStrategy, Component, Input} from \"@angular/core\";\nimport {HostData} from \"@generated/host-data\";\nimport {VsanCapabilityData} from \"@generated/vsan-capability-data\";\nimport {VsanConfigSpec} from \"@generated/vsan-config-spec\";\nimport {LoadingAwareProperty} from \"@model/loading-aware-property\";\nimport {EditVsanManagedDiskClaimContext} from \"@navigation/context/edit-vsan-managed-disk-claim-context\";\nimport {ManagedObject} from \"@service/managed-object\";\nimport {DiskMgmtHostUtil} from \"@util/disk-mgmt-host.util\";\nimport {ModalBuilder} from \"@util/modal-builder\";\nimport {ActionAvailableStatus} from \"@util/validation/action-available-status\";\nimport {VsanDialogProperties, VsanDialogUtil} from \"@util/vsan-dialog-util\";\nimport {VsanRoutes} from \"../../../../vsan-routes\";\nimport {ViewObjectsContext} from \"../model/view-objects-context\";\nimport {DiskManagementActionAvailabilityService} from \"../validation/disk-management-action-availability.service\";\nimport {DiskManagementActionContext} from \"../validation/disk-management-action-context\";\n\n@Component({\n   selector: \"vsan-cluster-actions\",\n   templateUrl: \"cluster-actions.html\",\n   styleUrls: [\"cluster-actions.scss\"],\n   host: {class: \"vsan-actions\"},\n   changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ClusterActionsComponent {\n\n   @Input()\n   autoClaimMode: boolean;\n\n   @Input()\n   vsanConfig: VsanConfigSpec;\n\n   @Input()\n   clusterName: string;\n\n   @Input()\n   hasEditPermission: boolean = false;\n\n   @Input()\n   clusterCapabilities: VsanCapabilityData;\n\n   @Input()\n   hasDuplicatePciIdDevices: LoadingAwareProperty<boolean>;\n\n   private _allHosts: HostData[];\n   @Input()\n   set allHosts(value: HostData[]) {\n      this._allHosts = value;\n      this.clusterEligibleDiskCount = DiskMgmtHostUtil.getEligibleDiskCount(value);\n   }\n\n   get allHosts(): HostData[] {\n      return this._allHosts;\n   }\n\n   clusterEligibleDiskCount: number = 0;\n\n   DiskManagementActionAvailabilityService: typeof DiskManagementActionAvailabilityService =\n         DiskManagementActionAvailabilityService;\n\n   constructor(private diskManagementActionAvailabilityService: DiskManagementActionAvailabilityService) {}\n\n   actionDisabled(actionId: string): boolean {\n      return !this.getActionStatus(actionId).available;\n   }\n\n   getActionButtonDisabledReason(actionId: string): string {\n      if (actionId === DiskManagementActionAvailabilityService.VIEW_DUPLICATE_PCI_ID_DEVICES &&\n            this.hasDuplicatePciIdDevices.isLoading) {\n         return null;\n      }\n      return this.getActionStatus(actionId).message;\n   }\n\n   private getActionStatus(actionId: string): ActionAvailableStatus {\n      return this.diskManagementActionAvailabilityService.checkAvailability(this.getActionValidationContext(actionId));\n   }\n\n   private getActionValidationContext(actionId: string): DiskManagementActionContext {\n      return {\n         actionId: actionId,\n         hasEditPermission: this.hasEditPermission,\n         vsanConfig: this.vsanConfig,\n         isEmptyCluster: !this.allHosts?.length,\n         autoClaimMode: this.autoClaimMode,\n         allHosts: this.allHosts,\n         clusterCapabilities: this.clusterCapabilities,\n         hasHostMaintenancePermission: null,\n         spaceEfficiencyConfig: null,\n      };\n   }\n\n   invokeSemiAutoClaim(): void {\n      new ModalBuilder(`${VsanRoutes.DISK_MANAGEMENT_VIEW}/semiAutoClaim`)\n            .setSize(VsanDialogUtil.CLAIM_DISKS_ACTION_DIALOG.width,\n                  VsanDialogUtil.CLAIM_DISKS_ACTION_DIALOG.width)\n            .open()\n            .then((tasks: ManagedObject[]) =>\n                  this.diskManagementActionAvailabilityService.taskStarted.next(tasks));\n   }\n\n   viewDuplicatePciIdDevices(): void {\n      if (this.hasDuplicatePciIdDevices.isLoading) {\n         return;\n      }\n      new ModalBuilder(`${VsanRoutes.UPDATE_VIEW}/updateDuplicatePciIdDevices`)\n            .setSize(VsanDialogUtil.DUPLICATE_PCI_ID_MODEL_SELECTION_DIALOG.width,\n                  VsanDialogUtil.DUPLICATE_PCI_ID_MODEL_SELECTION_DIALOG.height)\n            .open();\n   }\n\n   editVsanDiskManagement(): void {\n      new ModalBuilder(`${VsanRoutes.SERVICES_VIEW}/editVsanManagedDiskClaim`)\n            .setSize(VsanDialogUtil.VSAN_DISK_CLAIM_ACTION_DIALOG.width,\n                  VsanDialogUtil.VSAN_DISK_CLAIM_ACTION_DIALOG.height)\n            .open({clusterName: this.clusterName} as EditVsanManagedDiskClaimContext)\n            .then((taskRef: ManagedObject) => {\n               this.diskManagementActionAvailabilityService.taskStarted.next([taskRef]);\n            });\n   }\n\n   viewClusterObjects = (): void => this.diskManagementActionAvailabilityService.objectsViewSelected\n         .next(new ViewObjectsContext(null, null, null));\n}","/* Copyright 2020-2022 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component} from \"@angular/core\";\nimport {ScsiDisk} from \"@component/diskmgmt/model/scsi-disk.data\";\nimport {DecommissionMode} from \"@generated/decommission-mode\";\nimport {DiskData} from \"@generated/disk-data\";\nimport {DiskGroupMutationService} from \"@generated/disk-group-mutation-service\";\nimport {RemoveDiskSpec} from \"@generated/remove-disk-spec\";\nimport {VsanCapabilityProvider} from \"@generated/vsan-capability-provider\";\nimport {DeleteVsanDirectDisksContext} from \"@navigation/context/delete-vsan-direct-disks-context\";\nimport {ErrorHandler} from \"@service/flow/error-handler.decorator\";\nimport {LoaderName} from \"@service/flow/loader-name\";\nimport {Loader} from \"@service/flow/loader.decorator\";\nimport {LoadingIndicator} from \"@service/flow/loading-indicator.decorator\";\nimport {ManagedObject} from \"@service/managed-object\";\nimport {SrMessageType} from \"@service/screen-reader-announcer.service\";\nimport {VsanDiskMgmtActionsUtil} from \"@util/vsan-disk-mgmt-actions-util\";\nimport {VsanSignpostUtil} from \"@util/vsan-signpost-util\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\n\n@Component({\n   templateUrl: \"delete-vsan-direct-disks.html\",\n   styleUrls: [\"../actions-common.scss\"],\n   selector: \"vsan-delete-vsan-direct-disks\",\n})\nexport class DeleteVsanDirectDisksComponent {\n   private readonly SIGNPOST_CONTENT_WIDTH: number = 360;\n   private readonly SIGNPOST_CONTENT_HEIGHT: number = 146;\n   readonly dataMigrationModeSignpostId: string = \"data-migration-mode-signpost\";\n\n   alerts: string[];\n   disks: DiskData[];\n   warningMessage: string;\n   footerText: string;\n   isDecomModeForVsanDirectDisksSupported: boolean;\n   selectedDecommissionMode: DecommissionMode = DecommissionMode.noAction;\n   unsupportedDecommissionModes: DecommissionMode[] = [DecommissionMode.ensureObjectAccessibility];\n\n   @LoadingIndicator({\n      name: [LoaderName.ON_INIT, LoaderName.ON_CONFIRM],\n   })\n   busy: boolean;\n\n   constructor(private diskGroupMutationService: DiskGroupMutationService,\n         private capabilitiesService: VsanCapabilityProvider) {\n   }\n\n   @Loader({\n      name: LoaderName.ON_INIT,\n      srMessage: \"vsan.dialog.deleteVsanDirectDisk.title\",\n      srMessageType: SrMessageType.PAGE_TITLE,\n   })\n   async ngOnInit(): Promise<void> {\n      const context: DeleteVsanDirectDisksContext = VsanUiUtils.getModalContext();\n      this.disks = context.disks;\n      this.warningMessage = VsanUiUtils.getString(\"vsan.dialog.deleteVsanDirectDisk.description\");\n      this.footerText = this.disks.length === 1\n            ? VsanUiUtils.getString(\"vsan.confirmDiskRemoveOperation.footerRemoveDisk\")\n            : VsanUiUtils.getString(\"vsan.confirmDiskRemoveOperation.footerRemoveDisks\");\n\n      this.isDecomModeForVsanDirectDisksSupported =\n            await this.capabilitiesService.getIsDecomModeForVsanDirectDisksSupported(ManagedObject.contextObject);\n      if (this.isDecomModeForVsanDirectDisksSupported) {\n         VsanUiUtils.setModalDialogHeight(VsanDiskMgmtActionsUtil.DELETE_VSAN_DIRECT_DISKS_HEIGHT_PRECHECK);\n      }\n   }\n\n   onSelectedDecommissionModeChanged = (decommissionMode: DecommissionMode) => {\n      this.selectedDecommissionMode = decommissionMode;\n   };\n\n   @Loader({name: LoaderName.ON_CONFIRM})\n   async onOkClicked(): Promise<void> {\n      const scsiDisks: ScsiDisk[] = this.disks.map(d => d.disk);\n      const spec: RemoveDiskSpec = RemoveDiskSpec.Factory.create(this.selectedDecommissionMode, scsiDisks);\n\n      const task: ManagedObject = await this.diskGroupMutationService.removeVsanDirectDisks(ManagedObject.contextObject,\n            spec);\n      this.handleTask(task);\n   }\n\n   private handleTask = (task: ManagedObject) => {\n      VsanUiUtils.closeModalDialog(task);\n   };\n\n   @ErrorHandler({name: LoaderName.ON_CONFIRM})\n   private onDeleteOperationError(message: any): void {\n      this.alerts = [message];\n   }\n\n   getDataMigrationModeSignpostPosition(): string {\n      return VsanSignpostUtil.getPosition(this.dataMigrationModeSignpostId, this.SIGNPOST_CONTENT_WIDTH,\n            this.SIGNPOST_CONTENT_HEIGHT, true);\n   }\n}\n","/* Copyright 2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component} from \"@angular/core\";\nimport {EnumeratedFilterSelectionResolver} from \"@component/datagrid/filter/enumerated-filter.component\";\nimport {DiskMgmtFilterComponent} from \"./disk-mgmt-filter.component\";\nimport {DiskMgmtDiskUtil} from \"@util/disk-mgmt-disk.util\";\nimport {StorageData} from \"@component/diskmgmt/model/storage-data\";\n\n@Component({\n   templateUrl: \"disk-mgmt-filter.html\",\n   selector: \"vsan-storage-group-details-filter-drive-locality\",\n   styleUrls: [\"disk-mgmt-filter.scss\"],\n})\nexport class StorageGroupDetailsFilterDriveLocalityComponent extends DiskMgmtFilterComponent<StorageData> {\n\n   readonly comparator: EnumeratedFilterSelectionResolver<StorageData, string> =\n         new class extends EnumeratedFilterSelectionResolver<StorageData, string> {\n            isSelected(item: StorageData, selectedLocalityKeys: string[]): boolean {\n               return selectedLocalityKeys\n                     .some(locality => locality === DiskMgmtDiskUtil.localizeLocality(item.driveLocality));\n            }\n         }();\n}","/* Copyright 2019-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {ChangeDetectorRef, Component, OnInit} from \"@angular/core\";\nimport {DiskGroupMutationService} from \"@generated/disk-group-mutation-service\";\nimport {DiskManagementService} from \"@generated/disk-management-service\";\nimport {VsanClaimDisksData} from \"@generated/vsan-claim-disks-data\";\nimport {VsanClaimHostDiskMappingsSpec} from \"@generated/vsan-claim-host-disk-mappings-spec\";\nimport {VsanConfigService} from \"@generated/vsan-config-service\";\nimport {VsanConfigSpec} from \"@generated/vsan-config-spec\";\nimport {ErrorHandler} from \"@service/flow/error-handler.decorator\";\nimport {LoaderName} from \"@service/flow/loader-name\";\nimport {Loader} from \"@service/flow/loader.decorator\";\nimport {LoadingIndicator} from \"@service/flow/loading-indicator.decorator\";\nimport {ManagedObject} from \"@service/managed-object\";\nimport {ArrayUtils} from \"@util/array-util\";\nimport {Logger} from \"@util/logger\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\n\n@Component({\n   templateUrl: \"claim-disks-dialog.html\",\n   selector: \"vsan-claim-disks-dialog\",\n})\nexport class ClaimDisksDialogComponent implements OnInit {\n\n   @LoadingIndicator()\n   loading: boolean;\n\n   @LoadingIndicator({name: LoaderName.ON_CONFIRM})\n   inProgress: boolean;\n\n   vsanConfigSpec: VsanConfigSpec;\n   hostsClaimingData: Map<string, VsanClaimDisksData>;\n\n   isConfigValid: boolean;\n   claimDisksSpecs: VsanClaimHostDiskMappingsSpec[];\n   alertMessages: string[] = [];\n   clusterRef: ManagedObject;\n\n   constructor(private vsanConfigService: VsanConfigService,\n         private diskManagementService: DiskManagementService,\n         private diskgroupService: DiskGroupMutationService,\n         private changeDetector: ChangeDetectorRef) {\n   }\n\n   @Loader()\n   async ngOnInit(): Promise<void> {\n      const context: any = VsanUiUtils.getModalContext();\n      // clusterRef is set via context when this dialog is opened from Datastore -> Capacity page.\n      this.clusterRef = context?.clusterRef || ManagedObject.contextObject;\n      this.vsanConfigSpec = await this.vsanConfigService.getVsanConfigSpec(this.clusterRef);\n      // We need to await the vsan config spec before we can query the disks data\n      this.hostsClaimingData = await this.queryHostClaimingData(this.vsanConfigSpec.isVsanMaxEnabled);\n   }\n\n   private async queryHostClaimingData(isVsanMaxEnabled: boolean): Promise<Map<string, VsanClaimDisksData>> {\n      const hostsClaimingData: any = await this.diskManagementService.getHostsClaimingData(this.clusterRef,\n            isVsanMaxEnabled);\n      return new Map<string, VsanClaimDisksData>(Object.entries(hostsClaimingData));\n   }\n\n   @Loader({name: LoaderName.ON_CONFIRM})\n   async onOkClicked(): Promise<void> {\n      if (!this.isConfigValid) {\n         return;\n      }\n      this.alertMessages = [];\n      const tasks: ManagedObject[] = this.vsanConfigSpec.isVsanMaxEnabled ?\n            [await this.claimVsanMaxDisks()] // Only one task from this API, so wrap as array here\n            : await this.claimDiskGroups();\n\n      VsanUiUtils.closeModalDialog(tasks);\n   }\n\n   private async claimDiskGroups(): Promise<ManagedObject[]> {\n      const claimDisksTasks: Promise<ManagedObject[]>[] = this.claimDisksSpecs\n            .filter(claimDisksSpec => !VsanUiUtils.isEmpty(claimDisksSpec.disks))\n            .map(claimDisksSpec => this.diskgroupService.claimDiskGroup(claimDisksSpec.hostRef, claimDisksSpec));\n\n      const tasksPerHost: ManagedObject[][] = await Promise.all(claimDisksTasks);\n      return ArrayUtils.flatten(tasksPerHost);\n   }\n\n   private async claimVsanMaxDisks(): Promise<ManagedObject> {\n      return this.diskgroupService.claimStoragePoolDisks(this.clusterRef, this.claimDisksSpecs);\n   }\n\n   @ErrorHandler()\n   private handleError(error: string): void {\n      Logger.debug(\"Failed to start one or more tasks!\", error);\n      this.alertMessages.push(error);\n   }\n\n   configAcceptabilityChanged(isValid: boolean): void {\n      this.isConfigValid = isValid;\n      this.changeDetector.detectChanges();\n   }\n}\n","/* Copyright 2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Injectable} from \"@angular/core\";\nimport {ResultItem} from \"@service/client/core/query.data\";\nimport {ClusterComputeResource, HostStorageSystem, HostSystem} from \"@service/client/dataservice/data-service-property\";\nimport {DataServiceQueryResult} from \"@service/client/dataservice/data-service.data\";\nimport {DataServiceClient} from \"@service/client/dataservice/data-service.service\";\nimport {VpxdModelFactory} from \"@service/client/vpxd/vpxd-model-factory.service\";\nimport {DataServiceResult} from \"@service/data-access.service\";\nimport {ManagedObject, ManagedObjectUtils} from \"@service/managed-object\";\n\n// TODO (REPA) After switch to remote plugin:\n//  * move to a proper service\n//  * create proper UI models for all the data being retrieved. Currently we cannot do so because the data in the local\n//  plugin is retrieved from H5C provider which returns its own model.\n@Injectable()\nexport class DisksPropertyRetriever {\n   private static readonly ICON_ID: string = \"primaryIconId\";\n\n   private static readonly MO_PREFIX_HOST: string = \"host\";\n   private static readonly MO_PREFIX_STORAGE_SYSTEM: string = \"storageSystem\";\n\n   constructor(private dataService: DataServiceClient,\n         private vpxdModelFactory: VpxdModelFactory) {\n   }\n\n   async getPropertiesForHosts(clusterRef: ManagedObject): Promise<DataServiceResult[]> {\n      const hostRefs: ManagedObject[] = await this.dataService\n            .getProperty(ClusterComputeResource.host.id, clusterRef);\n      const storageSystemRefs: ManagedObject[] = hostRefs.map(this.hostRefToStorateSystemRef);\n\n      let hostPropertiesResult: DataServiceResult[];\n      let storageDevicesPropertiesResult: DataServiceResult[];\n      [hostPropertiesResult, storageDevicesPropertiesResult] = await Promise.all([\n         this.getHostProperties(hostRefs),\n         this.getStorageDeviceProperties(storageSystemRefs),\n      ]);\n      return [...hostPropertiesResult, ...storageDevicesPropertiesResult];\n   }\n\n   async getStorageDevicePropertiesByHost(hostRef: ManagedObject): Promise<DataServiceResult[]> {\n      return this.getStorageDeviceProperties([this.hostRefToStorateSystemRef(hostRef)]);\n   }\n\n   static readonly PROP_VSAN_STORAGE_ADAPTER_DEVICES: string = \"vsanStorageAdapterDevices\";\n\n   private async getStorageDeviceProperties(storageSystemRefs: ManagedObject[]): Promise<DataServiceResult[]> {\n      const storageDevices: DataServiceQueryResult = await this.dataService\n            .select(HostStorageSystem.storageDeviceInfo.hostBusAdapter,\n                  HostStorageSystem.storageDeviceInfo.scsiLun,\n                  HostStorageSystem.storageDeviceInfo.plugStoreTopology.path,\n                  HostStorageSystem.storageDeviceInfo.plugStoreTopology.adapter,\n                  HostStorageSystem.storageDeviceInfo.plugStoreTopology.target,\n                  HostStorageSystem.storageDeviceInfo.plugStoreTopology.device)\n            .fromMoRef(...storageSystemRefs)\n            .execute();\n      return storageDevices.resultItems.map((ri: ResultItem) => {\n         const adapters: any[] = ri.get(HostStorageSystem.storageDeviceInfo.hostBusAdapter);\n         const luns: any[] = ri.get(HostStorageSystem.storageDeviceInfo.scsiLun);\n\n         // The PlugStoreTopology property contains the mapping between LUNs and other objects\n         // https://opengrok.eng.vmware.com/source/xref/main.perforce.1666/bora/vim/vmodl/vim/host/PlugStoreTopology.java#15\n         const topologyDevices: any[] = ri.get(HostStorageSystem.storageDeviceInfo.plugStoreTopology.device);\n         const topologyAdapters: any[] = ri.get(HostStorageSystem.storageDeviceInfo.plugStoreTopology.adapter);\n         const topologyPaths: any[] = ri.get(HostStorageSystem.storageDeviceInfo.plugStoreTopology.path);\n         const topologyTargets: any[] = ri.get(HostStorageSystem.storageDeviceInfo.plugStoreTopology.target);\n\n         // LUN-to-TRANSPORT mapping\n         // topologyDevice.path[] -> topologyPath.key\n         // topologyPath.target -> topologyTargets.key\n         // topologyTarget.transport\n\n         // LUN-to-ADAPTER mapping\n         // lun.key -> topologyDevices.lun\n         // topologyDevices.key -> topologyPath.device\n         // topologyPath.adapter -> topologyAdapters.key\n         // topologyAdapters.adapter -> adapter.key\n\n         const storageDeviceData: any[] = luns.map(lun => {\n            const topologyDevice: any = topologyDevices.find(td => td.lun === lun.key);\n            const topologyPath: any = topologyPaths.find(p => p.device === topologyDevice.key);\n            const topologyAdapter: any = topologyAdapters.find(ta => ta.key === topologyPath.adapter);\n            const adapter: any = adapters.find(a => a.key === topologyAdapter.adapter);\n            const topologyTarget: any = topologyTargets.find(t => t.key === topologyPath.target);\n\n            // This model is defined in the H5C code base. We need to stick to it as long as we have the local\n            // plugin part supported.\n            return {\n               underlyingLun: lun,\n               transport: this.getTransport(topologyTarget?.transport),\n               adapter: adapter.device,\n            };\n         });\n\n         const storageSystemRef: ManagedObject = ri.resourceObject;\n         const hostRef: ManagedObject = this.storageSystemRefToHostRef(storageSystemRef);\n         return this.createDataServiceResult(hostRef, DisksPropertyRetriever.PROP_VSAN_STORAGE_ADAPTER_DEVICES, storageDeviceData);\n      });\n   }\n\n   private async getHostProperties(hostRefs: ManagedObject[]): Promise<DataServiceResult[]> {\n      const hostProps: DataServiceQueryResult = await this.dataService\n            .select(HostSystem.name, HostSystem.config.product.version)\n            .fromMoRef(...hostRefs)\n            .execute();\n      const result: DataServiceResult[] = [];\n      hostProps.resultItems.forEach((ri: ResultItem) => {\n         const hostRef: ManagedObject = ri.resourceObject;\n         result.push(this.createDataServiceResult(hostRef, DisksPropertyRetriever.ICON_ID, ManagedObjectUtils.getObjectTypeIcon(hostRef)));\n         ri.propertyValues.forEach(((value: any, key: string) => {\n            result.push(this.createDataServiceResult(hostRef, key, value));\n         }));\n      });\n      return result;\n   }\n\n   private storageSystemRefToHostRef(storageSystemRef: ManagedObject): ManagedObject {\n      return ManagedObject.create(HostSystem.type,\n            storageSystemRef.value.replace(DisksPropertyRetriever.MO_PREFIX_STORAGE_SYSTEM, DisksPropertyRetriever.MO_PREFIX_HOST),\n            storageSystemRef.serverGuid);\n   }\n\n   private hostRefToStorateSystemRef(mo: ManagedObject): ManagedObject {\n      return ManagedObject.create(HostStorageSystem.type,\n            mo.value.replace(DisksPropertyRetriever.MO_PREFIX_HOST, DisksPropertyRetriever.MO_PREFIX_STORAGE_SYSTEM),\n            mo.serverGuid);\n   }\n\n   private createDataServiceResult(obj: ManagedObject, propertyName: string, value: any): DataServiceResult {\n      return {\n         resourceObject: obj,\n         value: value,\n         propertyName: propertyName,\n      } as DataServiceResult;\n   }\n\n   private getTransport(transport: any): string[] {\n      if (!transport) {\n         return [];\n      }\n\n      // https://opengrok.eng.vmware.com/source/xref/vim-clients.h5c-main.perforce.1666/h5c-main/applications/vsphere-client/server/modules-api/src/main/java/com/vmware/vsphere/client/storage/adapters/StorageDeviceTransport.java#37\n      const clazz: string = this.vpxdModelFactory.getObjectType(transport);\n      switch (clazz) {\n         case TransportType.HostFibreChannelOverEthernetTargetTransport:\n            return [\"FCOETRANSPORT\"];\n         case TransportType.HostFibreChannelTargetTransport:\n            return [\"FCTRANSPORT\"];\n         case TransportType.HostInternetScsiTargetTransport:\n            return [\"ISCSITRANSPORT\"];\n         case TransportType.HostParallelScsiTargetTransport:\n            return [\"PARALLELTRANSPORT\"];\n         case TransportType.HostBlockAdapterTargetTransport:\n            return [\"BLOCKTRANSPORT\"];\n         case TransportType.HostSerialAttachedTargetTransport:\n            return [\"SASTRANSPORT\"];\n         case TransportType.HostPcieTargetTransport:\n            return [\"PCIETRANSPORT\"];\n         case TransportType.HostRdmaTargetTransport:\n            return [\"RDMATRANSPORT\"];\n         case TransportType.HostTcpTargetTransport:\n            return [\"TCPTRANSPORT\"];\n         default:\n            return [];\n      }\n   }\n}\n\nenum TransportType {\n   HostFibreChannelOverEthernetTargetTransport = \"HostFibreChannelOverEthernetTargetTransport\",\n   HostFibreChannelTargetTransport = \"HostFibreChannelTargetTransport\",\n   HostInternetScsiTargetTransport = \"HostInternetScsiTargetTransport\",\n   HostParallelScsiTargetTransport = \"HostParallelScsiTargetTransport\",\n   HostBlockAdapterTargetTransport = \"HostBlockAdapterTargetTransport\",\n   HostSerialAttachedTargetTransport = \"HostSerialAttachedTargetTransport\",\n   HostPcieTargetTransport = \"HostPcieTargetTransport\",\n   HostRdmaTargetTransport = \"HostRdmaTargetTransport\",\n   HostTcpTargetTransport = \"HostTcpTargetTransport\",\n}\n\n\n","<!--Copyright 2017-2021 VMware, Inc. All rights reserved. -- VMware Confidential-->\n<vsan-question-prompt [title]=\"title\">\n   <span *ngIf=\"!isLocal\">\n      {{\"storage.adapters.devices.action.markAsRemote.prompt\" | localized}}\n   </span>\n   <span *ngIf=\"isLocal\">\n      {{\"storage.adapters.devices.action.markAsLocal.prompt\" | localized}}\n   </span>\n</vsan-question-prompt>","/* Copyright 2020-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {AfterViewInit, Component, EventEmitter, Input, Output, ViewChild} from \"@angular/core\";\nimport {HostData} from \"@generated/host-data\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {DiskMgmtHostUtil} from \"@util/disk-mgmt-host.util\";\nimport {DiskManagementActionAvailabilityService} from \"./validation/disk-management-action-availability.service\";\nimport {VsanCapabilityData} from \"@generated/vsan-capability-data\";\nimport {Icon} from \"@util/icon\";\nimport {DiskGroupKey, DiskMgmtDiskGroupUtil} from \"@util/disk-mgmt-disk-group.util\";\nimport {ClrDatagrid, ClrDatagridComparatorInterface} from \"@clr/angular\";\nimport {DiskMgmtExportConfig} from \"./export/disk-mgmt-export-config\";\nimport {ExportDataSource} from \"@component/export/export-data-source\";\n\n@Component({\n   templateUrl: \"host-list.html\",\n   selector: \"vsan-host-list\",\n   styleUrls: [\"host-list.scss\"],\n})\nexport class HostListComponent implements AfterViewInit {\n\n   @ViewChild(\"dataGrid\")\n   datagrid: ClrDatagrid;\n\n   _hostList: HostData[];\n   @Input()\n   get hostList(): HostData[] {\n      return this._hostList;\n   }\n\n   set hostList(value: HostData[]) {\n      if (VsanUiUtils.isUnset(value)) {\n         return;\n      }\n      this._hostList = value;\n      value.forEach(host => {\n         this.healthKeys.add(this.getHealthKey(host));\n         this.stateKeys.add(this.getState(host));\n         host.diskGroups.map(DiskMgmtDiskGroupUtil.getKey)\n               .filter(group => !!group)\n               .forEach(group => this.groupTypeKeys.add(group));\n      });\n   }\n\n   Icon: typeof Icon = Icon;\n   DiskMgmtExportConfig: typeof DiskMgmtExportConfig = DiskMgmtExportConfig;\n   VsanUiUtils: typeof VsanUiUtils = VsanUiUtils;\n   DiskManagementActionAvailabilityService: typeof DiskManagementActionAvailabilityService = DiskManagementActionAvailabilityService;\n   hostGridPageSize: number = 15;\n\n   @Input()\n   autoClaimMode: boolean;\n\n   @Input()\n   hasEditPermission: boolean = false;\n\n   @Input()\n   clusterCapabilities: VsanCapabilityData;\n\n   @Input()\n   hasHostMaintenancePermission: boolean;\n\n   @Input()\n   selectedHost: HostData;\n\n   @Output()\n   hostSelected: EventEmitter<HostData> = new EventEmitter<HostData>();\n\n   healthKeys: Set<string> = new Set<string>();\n   stateKeys: Set<string> = new Set<string>();\n   groupTypeKeys: Set<string> = new Set<string>();\n\n   healthComparator: ClrDatagridComparatorInterface<HostData> = new HealthComparator();\n   stateComparator: ClrDatagridComparatorInterface<HostData> = new StateComparator();\n\n   exportDataSource: ExportDataSource;\n\n   ngAfterViewInit(): void {\n      this.exportDataSource = DiskMgmtExportConfig.createExportDataSource(this.datagrid);\n   }\n\n   hideDgPageSize(): boolean {\n      return !this.hostList || this.hostList.length < this.hostGridPageSize;\n   }\n\n   getGroupTypeKeys = (host: HostData): string[] => {\n      return DiskMgmtHostUtil.getGroupTypeKeys(host);\n   };\n\n   hideGroupTypeColumn = (): boolean => {\n      return this.groupTypeKeys.size === 1 && this.groupTypeKeys.has(DiskGroupKey.VSAN);\n   };\n\n   hideFaultDomainColumn = (): boolean => {\n      return this.hostList?.every(host => VsanUiUtils.isEmpty(host.faultDomain));\n   };\n\n   getState = (host: HostData): string => {\n      return DiskMgmtHostUtil.getState(host);\n   };\n\n   getHealthKey = (host: HostData): string => {\n      return DiskMgmtHostUtil.getHealthKey(host);\n   };\n\n   getClaimedDisksLabel = (host: HostData): string => {\n      return DiskMgmtHostUtil.getClaimedDisksLabel(host);\n   };\n\n   selectionChanged(host: HostData): void {\n      this.hostSelected.emit(host);\n   }\n\n   getHostSuffix(host: HostData): string {\n      if (host.isWitnessHost && !host.isMetadataWitnessHost) {\n         return VsanUiUtils.getString(\"vsan.host.list.witnessHost\");\n      } else if (host.isMetadataWitnessHost) {\n         return VsanUiUtils.getString(\"vsan.host.list.metadataWitnessHost\");\n      }\n      return \"\";\n   }\n}\n\nexport class HealthComparator implements ClrDatagridComparatorInterface<HostData> {\n   compare(o1: HostData, o2: HostData): number {\n      return DiskMgmtHostUtil.getHealthKey(o1)\n            .localeCompare(DiskMgmtHostUtil.getHealthKey(o2));\n   }\n}\n\nexport class StateComparator implements ClrDatagridComparatorInterface<HostData> {\n   compare(o1: HostData, o2: HostData): number {\n      return DiskMgmtHostUtil.getState(o1)\n            .localeCompare(DiskMgmtHostUtil.getState(o2));\n   }\n}\n","/* Copyright 2019-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component} from \"@angular/core\";\nimport {ScsiDisk} from \"@component/diskmgmt/model/scsi-disk.data\";\nimport {DecommissionModeSummary} from \"@component/precheck/pre-check-evacuation-summary.component\";\nimport {DecommissionMode} from \"@generated/decommission-mode\";\nimport {DiskGroupMutationService} from \"@generated/disk-group-mutation-service\";\nimport {RecreateDiskGroupSpec} from \"@generated/recreate-disk-group-spec\";\nimport {VsanPropertyProvider} from \"@generated/vsan-property-provider\";\nimport {VsanQueryDataEvacuationInfoSpec} from \"@generated/vsan-query-data-evacuation-info-spec\";\nimport {DiskGroupActionData} from \"@model/disk-group-action.data\";\nimport {HostActionData} from \"@model/host-action.data\";\nimport {DiskGroupActionContext} from \"@navigation/context/disk-group-action-context\";\nimport {EvacuationContext} from \"@navigation/context/evacuation.context\";\nimport {NavigationService, PlatformExtension} from \"@navigation/navigation.service\";\nimport {HostSystem} from \"@service/client/dataservice/data-service-property\";\nimport {DataServiceClient} from \"@service/client/dataservice/data-service.service\";\nimport {ErrorHandler} from \"@service/flow/error-handler.decorator\";\nimport {LoaderName} from \"@service/flow/loader-name\";\nimport {Loader} from \"@service/flow/loader.decorator\";\nimport {LoadingIndicator} from \"@service/flow/loading-indicator.decorator\";\nimport {ManagedObject} from \"@service/managed-object\";\nimport {SrMessageType} from \"@service/screen-reader-announcer.service\";\nimport {DiskMgmtDiskUtil} from \"@util/disk-mgmt-disk.util\";\nimport {Logger} from \"@util/logger\";\nimport {VsanDataMigrationUtil} from \"@util/vsan-data-migration-util\";\nimport {VsanDiskMgmtActionsUtil} from \"@util/vsan-disk-mgmt-actions-util\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\n\n@Component({\n   templateUrl: \"recreate-disk-group.html\",\n   styleUrls: [\"../actions-common.scss\"],\n   selector: \"vsan-diskmgmt-recreate-disk-group\",\n})\nexport class RecreateDiskGroupComponent {\n   host: HostActionData;\n   diskGroup: DiskGroupActionData;\n   evacuationEntityUuid: string;\n   warningMessages: string[] = [];\n   dataOnDiskGroupLabel: string = VsanUiUtils.getString(\"vsan.dialog.deleteDiskGroup.evacuateDataLabel\");\n   shouldAllowDataMigration: boolean;\n   // These are being set via events from vsan-pre-check-evacuation-summary component\n   selectedDecommissionMode: DecommissionMode = DecommissionMode.ensureObjectAccessibility;\n\n   isValidDecommisionMode: boolean = true;\n\n   @LoadingIndicator({\n      name: [\n         LoaderName.ON_INIT, LoaderName.DATA_EVACUATION, LoaderName.ON_CONFIRM],\n   })\n   busy: boolean;\n\n   alerts: string[];\n   goToPrecheckButtonText: string;\n   isDiskResourcePrecheckSupported: boolean = true;\n   preselectedDecommissionMode: DecommissionMode;\n   localizedPreselectedDecommissionMode: string;\n   preCheckRecommendationMessage: string = VsanUiUtils.getString(\n         \"vsan.dialog.precheckEvacuation.recommendationMesaage.diskGroup.recreate\");\n\n\n   constructor(private vsanPropertyProvider: VsanPropertyProvider,\n         private diskGroupMutationService: DiskGroupMutationService,\n         private navigationService: NavigationService,\n         private dataService: DataServiceClient) {\n   }\n\n   @Loader({\n      name: LoaderName.ON_INIT,\n      srMessage: \"vsan.dialog.recreateDiskGroup.title\",\n      srMessageType: SrMessageType.PAGE_TITLE,\n   })\n   async ngOnInit(): Promise<void> {\n      const context: DiskGroupActionContext = VsanUiUtils.getModalContext();\n      this.host = context.host;\n      this.diskGroup = context.diskGroup;\n      this.evacuationEntityUuid = this.diskGroup.vsanUuid;\n      this.preselectedDecommissionMode = context.decommissionMode;\n      this.localizedPreselectedDecommissionMode =\n            VsanDataMigrationUtil.getLocalizedDecommissionMode(this.preselectedDecommissionMode);\n      this.host.isInMaintenanceMode = await this.dataService\n            .getProperty(HostSystem.runtime.inMaintenanceMode, this.host.hostRef);\n      this.initUI();\n   }\n\n   @ErrorHandler({name: LoaderName.ON_INIT})\n   private handleInitError(error: string): void {\n      this.alerts = [VsanUiUtils.getString(\"vsan.common.error.dataExtraction\")];\n   }\n\n   private initUI = () => {\n      this.shouldAllowDataMigration = VsanDiskMgmtActionsUtil.shouldAllowDiskGroupDataMigration(\n            this.host, this.diskGroup);\n      if (!this.shouldAllowDataMigration) {\n         this.selectedDecommissionMode = DecommissionMode.noAction;\n         VsanUiUtils.setModalDialogHeight(VsanDiskMgmtActionsUtil.RECREATE_DIALOG_HEIGHT_SMALL);\n      }\n\n      this.showMessage();\n      this.requestDataEvacuationProperty(this.diskGroup.diskMapping.ssd);\n   };\n\n   private showMessage = () => {\n      const headerMessage: string = this.getHeaderMessage();\n      if (headerMessage) {\n         this.warningMessages.push(headerMessage);\n      }\n\n      const dataEvacuationWarningMessage: string = VsanDiskMgmtActionsUtil.getDataMigrationWarningForDiskGroup(\n            this.host.isInMaintenanceMode, this.diskGroup.isMounted);\n      if (dataEvacuationWarningMessage) {\n         this.warningMessages.push(dataEvacuationWarningMessage);\n      }\n\n      // Check for disk errors and display a warning.\n      if (!DiskMgmtDiskUtil.isScsiDiskHealthy(this.diskGroup.diskMapping.ssd) ||\n            this.diskGroup.diskMapping.nonSsd.some(disk => !DiskMgmtDiskUtil.isScsiDiskHealthy(disk))) {\n         if (this.diskGroup.isLocked) {\n            this.warningMessages.push(VsanUiUtils.getString(\"vsan.dialog.recreateDiskGroup.warningLabel.locked\"));\n         } else {\n            this.warningMessages.push(VsanUiUtils.getString(\"vsan.dialog.recreateDiskGroup.warningLabel\"));\n         }\n      }\n   };\n\n   private getHeaderMessage = (): string => {\n      const groupUuid: string = this.diskGroup.vsanUuid;\n      if (this.host.isInMaintenanceMode || this.diskGroup.isMounted) {\n         return VsanUiUtils.getString(\"vsan.dialog.recreateDiskGroup.headerDataEvacuation\", groupUuid);\n      } else if (this.host.isWitnessHost) {\n         return VsanUiUtils.getString(\"vsan.dialog.recreateDiskGroup.externalWitnessHostWarning\", groupUuid);\n      }\n   };\n\n   onDiskResourcePrecheckSupportedChanged = (isSupported: boolean) => {\n      this.isDiskResourcePrecheckSupported = isSupported;\n      // Preselecting decommmission mode means that this dialog is opened from Data migration pre-check page,\n      // in which case GO TO PRE-CHECK button doesn't need to be display.\n      this.goToPrecheckButtonText = !this.preselectedDecommissionMode && this.isDiskResourcePrecheckSupported ?\n            VsanUiUtils.getString(\"vsan.actions.goToPrecheckDataMigration.label\") : \"\";\n   };\n\n   @Loader({name: LoaderName.DATA_EVACUATION})\n   private async requestDataEvacuationProperty(disk: ScsiDisk): Promise<void> {\n      if (!DiskMgmtDiskUtil.isScsiDiskHealthy(disk)) {\n         this.dataOnDiskGroupLabel = VsanUiUtils.getString(\"vsan.dialog.deleteDiskGroup.evacuateDataLabel.error\");\n         return;\n      }\n\n      const result: number = await this.vsanPropertyProvider.getVsanDataEvacuationInfo(\n            this.host.hostRef,\n            VsanQueryDataEvacuationInfoSpec.Factory.create([disk]));\n      this.onDataEvacuationPropertyRetrieved(result);\n   }\n\n   private onDataEvacuationPropertyRetrieved = (result: number) => {\n      if (result >= 0) {\n         const formattedSize: string = VsanUiUtils.formatFileSize(result);\n         this.dataOnDiskGroupLabel = VsanUiUtils.getString(\n               \"vsan.dialog.deleteDiskGroup.evacuateDataLabelWithSize\",\n               formattedSize);\n      }\n   };\n\n   @ErrorHandler({name: LoaderName.DATA_EVACUATION})\n   private onDataRetrievalError(error: any): void {\n      Logger.error(\"Unable to fetch disk group evacuation data: \", error);\n      this.alerts = [VsanUiUtils.getString(\"vsan.common.error.dataExtraction\")];\n      this.dataOnDiskGroupLabel = VsanUiUtils.getString(\"vsan.dialog.deleteDiskGroup.evacuateDataLabel.error\");\n   }\n\n   onDecommisionModeSummaryChanged = (summary: DecommissionModeSummary) => {\n      this.selectedDecommissionMode = summary.value;\n      this.isValidDecommisionMode = summary.isValidDecommissionMode;\n      if (VsanDiskMgmtActionsUtil.isPrecheckWithObjects(summary) && !this.isDiskResourcePrecheckSupported) {\n         VsanUiUtils.setModalDialogHeight(VsanDiskMgmtActionsUtil.RECREATE_DIALOG_HEIGHT_LARGE);\n      } else if (this.isDiskResourcePrecheckSupported) {\n         VsanUiUtils.setModalDialogHeight(VsanDiskMgmtActionsUtil.RECREATE_DIALOG_HEIGHT_PRECHECK);\n      } else {\n         VsanUiUtils.setModalDialogHeight(VsanDiskMgmtActionsUtil.RECREATE_DIALOG_HEIGHT_MEDIUM);\n      }\n   };\n\n   @Loader({name: LoaderName.ON_CONFIRM})\n   async onOkClicked(): Promise<void> {\n      const decommissionMode: DecommissionMode = this.preselectedDecommissionMode ?\n            this.preselectedDecommissionMode :\n            VsanDiskMgmtActionsUtil.getSelectedDecommissionMode(\n                  this.shouldAllowDataMigration, this.selectedDecommissionMode);\n      const rebuildSpec: RecreateDiskGroupSpec = RecreateDiskGroupSpec.Factory\n            .create(this.diskGroup.diskMapping, decommissionMode);\n\n      const task: any = await this.diskGroupMutationService.recreateDiskGroup(this.host.hostRef, rebuildSpec);\n      this.handleTaskList(task);\n   }\n\n   onGoToPrecheckClicked = () => {\n      const evacuationContext: EvacuationContext = VsanDiskMgmtActionsUtil.getEvacuationContext(\n            this.host.hostRef, this.evacuationEntityUuid, this.selectedDecommissionMode);\n      this.navigationService.navigateToAndCloseModal(PlatformExtension.CLUSTER_DATA_MIGRATION_PRE_CHECK,\n            ManagedObject.contextObjectUid, evacuationContext);\n   };\n\n   private handleTaskList = (task: ManagedObject) => {\n      VsanUiUtils.closeModalDialog(task);\n   };\n\n   @ErrorHandler({name: LoaderName.ON_CONFIRM})\n   private onRecreateOperationError(message: any): void {\n      this.alerts = [message];\n   }\n}\n","<!--Copyright 2020-2022 VMware, Inc. All rights reserved. -- VMware Confidential-->\n<vsan-delete-prompt\n      [title]=\"'vsan.dialog.deleteVsanDirectDisk.title' | localized\"\n      confirmText=\"vsan.common.remove\"\n      [blockButton]=\"busy\"\n      (onConfirm)=\"onOkClicked()\">\n   <div class=\"dialog-body\">\n\n      <span>{{warningMessage}}</span>\n\n      <!-- Select decommission mode -->\n      <ng-container *ngIf=\"isDecomModeForVsanDirectDisksSupported\">\n         <div class=\"migration-mode-label\">\n            <span id=\"select-migration-mode-label\">{{'vsan.dialog.deleteDiskGroup.migrationMode' | localized}}</span>\n            <clr-signpost id=\"{{dataMigrationModeSignpostId}}\"\n                          [vsan-signpost-title]=\"'vsan.dialog.deleteDiskGroup.migrationMode.signpost.label' | localized\">\n               <clr-signpost-content *clrIfOpen [clrPosition]=\"getDataMigrationModeSignpostPosition()\">\n                  <span>{{\"vsan.dialog.deleteDiskGroup.evacuateDataHelp\" | localized}}</span>\n               </clr-signpost-content>\n            </clr-signpost>\n         </div>\n         <vsan-pre-check-evacuation-select [selectLabel]=\"'vsan.decommisionMode.migrate.label' | localized\"\n                                           [selectedDecommissionMode]=\"selectedDecommissionMode\"\n                                           [unsupportedDecommissionModes]=\"unsupportedDecommissionModes\"\n                                           (selectedDecommisionModeChange)=\"onSelectedDecommissionModeChanged($event)\">\n         </vsan-pre-check-evacuation-select>\n      </ng-container>\n\n      <!-- Confirmation text -->\n      <div id=\"delete-disks-footer\" class=\"strong-label\">\n         {{footerText}}\n      </div>\n   </div>\n</vsan-delete-prompt>\n","/* Copyright 2020-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, Input} from \"@angular/core\";\nimport {Icon} from \"@util/icon\";\nimport {EnumeratedFilterSelectionResolver} from \"@component/datagrid/filter/enumerated-filter.component\";\n\n@Component({\n   templateUrl: \"disk-mgmt-filter.html\",\n   selector: \"vsan-disk-mgmt-filter\",\n   styleUrls: [\"disk-mgmt-filter.scss\"],\n})\nexport class DiskMgmtFilterComponent<T> {\n\n   Icon: typeof Icon = Icon;\n   keys: string[];\n\n   @Input()\n   set items(value: Set<string>) {\n      if (!value || !value.size) {\n         return;\n      }\n      this.keys = Array.from([...value.keys()].sort((a, b) => a.localeCompare(b)));\n   }\n\n   readonly comparator: EnumeratedFilterSelectionResolver<T, string>;\n}\n","\nexport interface VsanQueryDataEvacuationInfoSpec {\n\n   disks: any[];\n} //class VsanQueryDataEvacuationInfoSpec\n\nexport module VsanQueryDataEvacuationInfoSpec{\nexport class Factory {\n\n   static create = (disks: any[]): VsanQueryDataEvacuationInfoSpec => {\n      return { disks: disks, };\n   }\n\n\n} //class Factory\n\n} //module VsanQueryDataEvacuationInfoSpec\n","/* Copyright 2020 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component} from \"@angular/core\";\nimport {DiskMgmtHostUtil} from \"@util/disk-mgmt-host.util\";\nimport {EnumeratedFilterSelectionResolver} from \"@component/datagrid/filter/enumerated-filter.component\";\nimport {HostData} from \"@generated/host-data\";\nimport {DiskMgmtFilterComponent} from \"./disk-mgmt-filter.component\";\n\n@Component({\n   templateUrl: \"disk-mgmt-filter.html\",\n   selector: \"vsan-host-list-filter-state\",\n   styleUrls: [\"disk-mgmt-filter.scss\"],\n})\nexport class HostListFilterStateComponent extends DiskMgmtFilterComponent<HostData> {\n\n   readonly comparator: EnumeratedFilterSelectionResolver<HostData, string> =\n         new class extends EnumeratedFilterSelectionResolver<HostData, string> {\n            isSelected(item: HostData, selectedStateKeys: string[]): boolean {\n               return selectedStateKeys.some(state => (state === DiskMgmtHostUtil.getState(item)));\n            }\n         }();\n}","<!--Copyright 2017-2021 VMware, Inc. All rights reserved. -- VMware Confidential-->\n<vsan-question-prompt [title]=\"title\">\n   <span *ngIf=\"!isSsd\" id=\"untagLabel\">\n      {{\"storage.adapters.devices.action.untagAsSsd.prompt\" | localized}}\n   </span>\n   <span *ngIf=\"isSsd\" id=\"tagInfo\">\n      {{\"storage.adapters.devices.action.tagAsSsd.info\" | localized}}\n   </span>\n   <div *ngIf=\"isSsd\" id=\"tagLabel\">\n      {{\"storage.adapters.devices.action.tagAsSsd.prompt\" | localized}}\n   </div>\n</vsan-question-prompt>","<!-- Copyright 2020-2022 VMware, Inc. All rights reserved. -- VMware Confidential -->\n<div class=\"card\">\n   <div class=\"card-block\">\n      <div class=\"card-text\">\n         <ng-container *ngFor=\"let entity of summaryEntities\">\n            <vsan-icon-item [label]=\"entity.label\"\n                            [shape]=\"entity.icon\">\n            </vsan-icon-item>\n         </ng-container>\n      </div>\n   </div>\n   <div class=\"card-footer\">\n      <vsan-cluster-actions *ngIf=\"!isHostDetailsLevel()\"\n                            [autoClaimMode]=\"autoClaimMode\"\n                            [vsanConfig]=\"vsanConfig\"\n                            [clusterName]=\"clusterName\"\n                            [hasEditPermission]=\"hasEditPermission\"\n                            [hasDuplicatePciIdDevices]=\"hasDuplicatePciIdDevices\"\n                            [clusterCapabilities]=\"clusterCapabilities\"\n                            [allHosts]=\"hostList\">\n      </vsan-cluster-actions>\n      <vsan-host-actions *ngIf=\"isHostDetailsLevel()\"\n                         [autoClaimMode]=\"autoClaimMode\"\n                         [hasEditPermission]=\"hasEditPermission\"\n                         [clusterCapabilities]=\"clusterCapabilities\"\n                         [hasHostMaintenancePermission]=\"hasHostMaintenancePermission\"\n                         [selectedHost]=\"getHost()\"\n                         [isHostListView]=\"false\">\n      </vsan-host-actions>\n   </div>\n</div>\n","<!--Copyright 2020-2021 VMware, Inc. All rights reserved. -- VMware Confidential-->\n<clr-button-group [vsan-button-group]=\"10\">\n   <ng-container *ngIf=\"selectedDiskGroup\">\n      <clr-button id=\"{{DiskManagementActionAvailabilityService.VIEW_GROUP_OBJECTS_ID}}\"\n                  class=\"btn btn-sm\"\n                  *ngIf=\"showViewGroupObjectsAction()\"\n                  [disabled]=\"actionDisabled(DiskManagementActionAvailabilityService.VIEW_GROUP_OBJECTS_ID)\"\n                  (click)=\"viewGroupObjects()\"\n                  [vsan-button-title]=\"getActionButtonTitle(DiskManagementActionAvailabilityService.VIEW_GROUP_OBJECTS_ID)\">\n         {{\"vsan.actions.viewGroupObjects.label\" | localized}}\n      </clr-button>\n      <clr-button id=\"{{DiskManagementActionAvailabilityService.COPY_GROUP_UUID_ID}}\"\n                  class=\"btn btn-sm\"\n                  ngxClipboard\n                  [cbContent]=\"selectedDiskGroup?.name\"\n                  *ngIf=\"isVsanDiskGroup\"\n                  [vsan-button-title]=\"'vsan.actions.copyGroupUuid.description' | localized\">\n         {{\"vsan.actions.copyGroupUuid.label\" | localized}}\n      </clr-button>\n      <ng-container *ngIf=\"isVsanDiskGroup\">\n         <clr-button id=\"{{DiskManagementActionAvailabilityService.ADD_DISKS_TO_DISK_GROUP_ID}}\"\n                     class=\"btn btn-sm\"\n                     [disabled]=\"actionDisabled(DiskManagementActionAvailabilityService.ADD_DISKS_TO_DISK_GROUP_ID)\"\n                     (click)=\"addDisks()\"\n                     [vsan-button-title]=\"getActionButtonTitle(DiskManagementActionAvailabilityService.ADD_DISKS_TO_DISK_GROUP_ID)\">\n            {{\"vsan.actions.addDiskToDiskGroup.label\" | localized}}\n         </clr-button>\n         <clr-button id=\"{{DiskManagementActionAvailabilityService.PRE_CHECK_ID}}\"\n                     class=\"btn btn-sm\"\n                     [disabled]=\"actionDisabled(DiskManagementActionAvailabilityService.PRE_CHECK_ID)\"\n                     (click)=\"goToPrecheckEvacuation()\"\n                     [vsan-button-title]=\"getActionButtonTitle(DiskManagementActionAvailabilityService.PRE_CHECK_ID)\">\n            {{getPrecheckLabel()}}\n         </clr-button>\n         <clr-button id=\"{{DiskManagementActionAvailabilityService.DELETE_DISK_GROUP_ID}}\"\n                     class=\"btn btn-sm\"\n                     *ngIf=\"!autoClaimMode\"\n                     [disabled]=\"actionDisabled(DiskManagementActionAvailabilityService.DELETE_DISK_GROUP_ID)\"\n                     (click)=\"delete()\"\n                     [vsan-button-title]=\"getActionButtonTitle(DiskManagementActionAvailabilityService.DELETE_DISK_GROUP_ID)\">\n            {{\"vsan.actions.deleteDiskGroup.label\" | localized}}\n         </clr-button>\n         <clr-button id=\"{{DiskManagementActionAvailabilityService.RECREATE_DISK_GROUP_ID}}\"\n                     class=\"btn btn-sm\"\n                     *ngIf=\"canBeRecreated\"\n                     [disabled]=\"actionDisabled(DiskManagementActionAvailabilityService.RECREATE_DISK_GROUP_ID)\"\n                     (click)=\"recreate()\"\n                     [vsan-button-title]=\"getActionButtonTitle(DiskManagementActionAvailabilityService.RECREATE_DISK_GROUP_ID)\">\n            {{\"vsan.actions.recreateDiskGroup.label\" | localized}}\n         </clr-button>\n         <clr-button id=\"{{DiskManagementActionAvailabilityService.MOUNT_DISK_GROUP_ID}}\"\n                     class=\"btn btn-sm\"\n                     [disabled]=\"actionDisabled(DiskManagementActionAvailabilityService.MOUNT_DISK_GROUP_ID)\"\n                     (click)=\"mount()\"\n                     [vsan-button-title]=\"getActionButtonTitle(DiskManagementActionAvailabilityService.MOUNT_DISK_GROUP_ID)\">\n            {{\"vsan.actions.mountDiskGroup.label\" | localized}}\n         </clr-button>\n         <clr-button id=\"{{DiskManagementActionAvailabilityService.UNMOUNT_DISK_GROUP_ID}}\"\n                     class=\"btn btn-sm\"\n                     [disabled]=\"actionDisabled(DiskManagementActionAvailabilityService.UNMOUNT_DISK_GROUP_ID)\"\n                     (click)=\"unmount()\"\n                     [vsan-button-title]=\"getActionButtonTitle(DiskManagementActionAvailabilityService.UNMOUNT_DISK_GROUP_ID)\">\n            {{'vsan.actions.unmountDiskGroup.label' | localized}}\n         </clr-button>\n      </ng-container>\n      <clr-button id=\"{{DiskManagementActionAvailabilityService.STOP_MANAGING_PMEM_ID}}\"\n                  *ngIf=\"isPmemDiskGroup\"\n                  class=\"btn btn-sm\"\n                  [disabled]=\"actionDisabled(DiskManagementActionAvailabilityService.STOP_MANAGING_PMEM_ID)\"\n                  (click)=\"stopManagingPmem()\"\n                  [vsan-button-title]=\"getActionButtonTitle(DiskManagementActionAvailabilityService.STOP_MANAGING_PMEM_ID)\">\n         {{\"vsan.actions.stopManagingPmem.label\" | localized}}\n      </clr-button>\n   </ng-container>\n</clr-button-group>","import {DecommissionMode} from '@generated/decommission-mode';\n\nexport interface RemoveDiskSpec {\n\n   decommissionMode: DecommissionMode;\n   disks: any[];\n} //class RemoveDiskSpec\n\nexport module RemoveDiskSpec{\nexport class Factory {\n\n   static create = (decommissionMode: DecommissionMode, disks: any[]): RemoveDiskSpec => {\n      return { decommissionMode: decommissionMode, disks: disks, };\n   }\n\n\n} //class Factory\n\n} //module RemoveDiskSpec\n","/* Copyright 2020-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {DiskGroupData} from \"@generated/disk-group-data\";\nimport {DiskData} from \"@generated/disk-data\";\nimport {PmemDiskData} from \"@generated/pmem-disk-data\";\nimport {DiskGroupType} from \"@generated/disk-group-type\";\nimport {StorageData} from \"@component/diskmgmt/model/storage-data\";\nimport {ClaimableState} from \"@util/disk-mgmt.util\";\nimport {HostData} from \"@generated/host-data\";\nimport {DiskMgmtHostUtil} from \"@util/disk-mgmt-host.util\";\nimport {StorageCapacity} from \"@generated/storage-capacity\";\nimport {DiskMgmtDiskGroupUtil} from \"@util/disk-mgmt-disk-group.util\";\nimport {StorageIdentifier} from \"@component/diskmgmt/model/storage-identifier\";\n\nexport class StorageGroupData implements DiskGroupData {\n   name: string;\n   iconId: string;\n   isMounted: boolean;\n   disks: DiskData[];\n   pmemStorage: PmemDiskData[];\n   ownerHostRef: any;\n   diskGroupType: DiskGroupType;\n   isLocked: boolean;\n   capacity: StorageCapacity;\n   objectUuids: string[];\n   storageData: StorageData[];\n\n   static fromDiskGroup(diskGroupData: DiskGroupData): StorageGroupData {\n      const storageGroup: StorageGroupData = new StorageGroupData();\n      storageGroup.name = diskGroupData.name;\n      storageGroup.iconId = diskGroupData.iconId;\n      storageGroup.isMounted = diskGroupData.isMounted;\n      storageGroup.disks = diskGroupData.disks;\n      storageGroup.pmemStorage = diskGroupData.pmemStorage;\n      storageGroup.ownerHostRef = diskGroupData.ownerHostRef;\n      storageGroup.diskGroupType = diskGroupData.diskGroupType;\n      storageGroup.isLocked = diskGroupData.isLocked;\n      storageGroup.capacity = diskGroupData.capacity;\n      storageGroup.objectUuids = diskGroupData.objectUuids;\n      if (!DiskMgmtDiskGroupUtil.isUnusedDiskGroup(diskGroupData)) {\n         storageGroup.storageData =\n               StorageGroupData.getStorageItemsFromDiskData(diskGroupData.disks, ClaimableState.IN_USE).concat(\n               StorageGroupData.getStorageItemsFromPmemData(diskGroupData.pmemStorage, ClaimableState.IN_USE));\n      }\n      return storageGroup;\n   }\n\n   static setUnusedStorageData(host: HostData, storageGroup: StorageGroupData) {\n      if (!host || !storageGroup) {\n         return;\n      }\n      const eligibleDisks: DiskData[] = DiskMgmtHostUtil.getDisks(host, ClaimableState.USABLE);\n      const ineligibleDisks: DiskData[] = DiskMgmtHostUtil.getDisks(host, ClaimableState.NOT_USABLE);\n      const eligiblePmemStorage: PmemDiskData[] = DiskMgmtHostUtil.getPmemStorage(host, ClaimableState.USABLE);\n      const ineligiblePmemStorage: PmemDiskData[] = DiskMgmtHostUtil.getPmemStorage(host, ClaimableState.NOT_USABLE);\n      storageGroup.storageData =\n             StorageGroupData.getStorageItemsFromDiskData(eligibleDisks, ClaimableState.USABLE).concat(\n             StorageGroupData.getStorageItemsFromDiskData(ineligibleDisks, ClaimableState.NOT_USABLE)).concat(\n             StorageGroupData.getStorageItemsFromPmemData(eligiblePmemStorage, ClaimableState.USABLE)).concat(\n             StorageGroupData.getStorageItemsFromPmemData(ineligiblePmemStorage, ClaimableState.NOT_USABLE));\n   }\n\n   private static getStorageItemsFromDiskData(disks: DiskData[], claimableState: ClaimableState): StorageData[] {\n      if (!disks) {\n         return [];\n      }\n      return disks.map(disk => StorageData.fromDiskData(disk, claimableState));\n   }\n\n   private static getStorageItemsFromPmemData(\n         pmemStorage: PmemDiskData[], claimableState: ClaimableState): StorageData[] {\n      if (!pmemStorage) {\n         return [];\n      }\n      return pmemStorage.map(storage => StorageData.fromPmemDiskData(storage, claimableState));\n   }\n}","import {VsanDiskMapping} from '@generated/vsan-disk-mapping';\n\nexport interface DiskMappingSpec {\n\n   clusterRef: any;\n   mappings: VsanDiskMapping[];\n} //class DiskMappingSpec\n\nexport module DiskMappingSpec{\nexport class Factory {\n\n   static create = (clusterRef: any, mappings: VsanDiskMapping[]): DiskMappingSpec => {\n      return { clusterRef: clusterRef, mappings: mappings, };\n   }\n\n\n} //class Factory\n\n} //module DiskMappingSpec\n","/* Copyright 2020-2022 VMware, Inc. All rights reserved. -- VMware Confidential */\n\nimport {DiskType} from \"@generated/disk-type\";\nimport {DiskData} from \"@generated/disk-data\";\nimport {DiskLocalityType} from \"@generated/disk-locality-type\";\nimport {ClaimOption} from \"@generated/claim-option\";\nimport {DiskStatus} from \"@generated/disk-status\";\nimport {PmemDiskData} from \"@generated/pmem-disk-data\";\nimport {DiskMgmtDiskUtil} from \"@util/disk-mgmt-disk.util\";\nimport {ClaimableState} from \"@util/disk-mgmt.util\";\nimport {StorageCapacity} from \"@generated/storage-capacity\";\nimport {DiskGroupData} from \"@generated/disk-group-data\";\nimport {StorageIdentifier} from \"@component/diskmgmt/model/storage-identifier\";\n\n/**\n * ScsiDisk or PMemStorage presenter.\n */\nexport class StorageData {\n\n   private constructor(\n         public uuid: string,\n         public name: string,\n         public iconShape: string,\n         public type: DiskType,\n         public capacity: StorageCapacity,\n         public deviceState: DiskData.DeviceState,\n         public vsanUuid: string,\n         public diskGroup: string,\n         public driveLocality: DiskLocalityType,\n         public physicalLocation: string[],\n         public diskAdapter: string,\n         public transportType: DiskData.StorageDeviceTransport,\n         public claimOption: ClaimOption,\n         public diskStatus: DiskStatus,\n         public storage: DiskData | PmemDiskData,\n         public claimableState: ClaimableState,\n         public objectUuids: string[]) { }\n\n   static fromDiskData(disk: DiskData, claimableState?: ClaimableState): StorageData {\n      return new StorageData(\n            disk.uuid,\n            disk.name,\n            DiskMgmtDiskUtil.getIcon(disk),\n            DiskMgmtDiskUtil.getType(disk),\n            disk.capacity,\n            disk.deviceState,\n            disk.vsanUuid,\n            disk.diskGroup,\n            disk.driveLocality,\n            disk.physicalLocation,\n            disk.diskAdapter,\n            disk.transportType,\n            disk.claimOption,\n            disk.diskStatus,\n            disk,\n            claimableState,\n            disk.objectUuids);\n   }\n\n   static fromPmemDiskData(storage: PmemDiskData, claimableState?: ClaimableState): StorageData {\n      return new StorageData(\n            storage.uuid,\n            storage.name,\n            \"\",\n            DiskType.PMEM,\n            storage.capacity,\n            DiskMgmtDiskUtil.getPMemMountDiskState(storage.diskStatus),\n            \"\",\n            \"\",\n            null,\n            [],\n            \"\",\n            null,\n            storage.claimOption,\n            storage.diskStatus,\n            storage,\n            claimableState,\n            storage.objectUuids);\n   }\n\n   static findStorageByIdentifier(group: DiskGroupData, storage: StorageIdentifier): StorageData {\n      if (!group || !storage) {\n         return null;\n      }\n      const diskData: DiskData = group.disks?.find(disk => StorageIdentifier.areEqual(disk, storage));\n      if (diskData) {\n         return StorageData.fromDiskData(diskData);\n      }\n      const device: PmemDiskData = group.pmemStorage?.find(disk => StorageIdentifier.areEqual(disk, storage));\n      if (device) {\n         return StorageData.fromPmemDiskData(device);\n      }\n      return null;\n   }\n}","<!--Copyright 2020-2022 VMware, Inc. All rights reserved. -- VMware Confidential-->\n<clr-button-group [vsan-button-group]=\"4\" class=\"btn-link\">\n   <clr-button *ngIf=\"isVsanMaxClaimedDisk()\"\n               id=\"{{DiskManagementActionAvailabilityService.ADD_DISKS_TO_STORAGE_POOL_ID}}\"\n               class=\"btn btn-sm\"\n               [disabled]=\"actionDisabled(DiskManagementActionAvailabilityService.ADD_DISKS_TO_STORAGE_POOL_ID)\"\n               (click)=\"addDisks()\"\n               [vsan-button-title]=\"getActionButtonTitle(DiskManagementActionAvailabilityService.ADD_DISKS_TO_STORAGE_POOL_ID)\">\n      {{\"vsan.actions.addDiskToDiskGroup.label\" | localized}}\n   </clr-button>\n   <clr-button id=\"{{DiskManagementActionAvailabilityService.VIEW_STORAGE_OBJECTS_ID}}\"\n               class=\"btn btn-sm\"\n               *ngIf=\"showViewStorageObjectsAction()\"\n               [disabled]=\"actionDisabled(DiskManagementActionAvailabilityService.VIEW_STORAGE_OBJECTS_ID)\"\n               (click)=\"viewStorageObjects()\"\n               [vsan-button-title]=\"getActionButtonTitle(DiskManagementActionAvailabilityService.VIEW_STORAGE_OBJECTS_ID)\">\n      {{viewStorageObjectsLabel}}\n   </clr-button>\n   <ng-container *ngIf=\"selectedDisk\">\n      <ng-container *ngIf=\"isInUse\">\n         <clr-button id=\"{{DiskManagementActionAvailabilityService.DISK_PRE_CHECK_ID}}\"\n                     class=\"btn btn-sm\"\n                     *ngIf=\"showDataMigrationPrecheckAction()\"\n                     [disabled]=\"actionDisabled(DiskManagementActionAvailabilityService.DISK_PRE_CHECK_ID)\"\n                     (click)=\"invokePreCheckEvacuation()\"\n                     [vsan-button-title]=\"getActionButtonTitle(DiskManagementActionAvailabilityService.DISK_PRE_CHECK_ID)\">\n            {{precheckDataMigrationLabel}}\n         </clr-button>\n         <clr-button id=\"{{DiskManagementActionAvailabilityService.DELETE_VSAN_DISK_ID}}\"\n                     *ngIf=\"showDeleteVsanDiskAction()\"\n                     class=\"btn btn-sm\"\n                     [disabled]=\"actionDisabled(DiskManagementActionAvailabilityService.DELETE_VSAN_DISK_ID)\"\n                     (click)=\"invokeDeleteDisk()\"\n                     [vsan-button-title]=\"getActionButtonTitle(DiskManagementActionAvailabilityService.DELETE_VSAN_DISK_ID)\">\n            {{\"vsan.dialog.deleteDiskFromDiskGroup.label\" | localized}}\n         </clr-button>\n         <clr-button id=\"{{DiskManagementActionAvailabilityService.DELETE_VSAN_DIRECT_DISK_ID}}\"\n                     *ngIf=\"showDeleteVsanDirectDiskAction()\"\n                     class=\"btn btn-sm\"\n                     [disabled]=\"actionDisabled(DiskManagementActionAvailabilityService.DELETE_VSAN_DIRECT_DISK_ID)\"\n                     (click)=\"invokeDeleteVsanDirectDisk()\"\n                     [vsan-button-title]=\"getActionButtonTitle(DiskManagementActionAvailabilityService.DELETE_VSAN_DIRECT_DISK_ID)\">\n            {{\"vsan.dialog.deleteVsanDirectDisk.label\" | localized}}\n         </clr-button>\n         <ng-container *ngIf=\"isVsanMaxClaimedDisk()\">\n            <clr-button id=\"{{DiskManagementActionAvailabilityService.MOUNT_DISK_ID}}\"\n                        class=\"btn btn-sm\"\n                        [disabled]=\"actionDisabled(DiskManagementActionAvailabilityService.MOUNT_DISK_ID)\"\n                        (click)=\"mountDisk()\"\n                        [vsan-button-title]=\"getActionButtonTitle(DiskManagementActionAvailabilityService.MOUNT_DISK_ID)\">\n               {{\"vsan.actions.mountDisk.label\" | localized}}\n            </clr-button>\n            <clr-button id=\"{{DiskManagementActionAvailabilityService.UNMOUNT_DISK_ID}}\"\n                        class=\"btn btn-sm\"\n                        [disabled]=\"actionDisabled(DiskManagementActionAvailabilityService.UNMOUNT_DISK_ID)\"\n                        (click)=\"unmountDisk()\"\n                        [vsan-button-title]=\"getActionButtonTitle(DiskManagementActionAvailabilityService.UNMOUNT_DISK_ID)\">\n               {{\"vsan.actions.unmountDisk.label\" | localized}}\n            </clr-button>\n         </ng-container>\n      </ng-container>\n      <clr-button id=\"{{DiskManagementActionAvailabilityService.TURN_LED_ON_ID}}\"\n                  [disabled]=\"actionDisabled(DiskManagementActionAvailabilityService.TURN_LED_ON_ID)\"\n                  (click)=\"turnLed(true)\"\n                  class=\"btn btn-sm\"\n                  [vsan-button-title]=\"getActionButtonTitle(DiskManagementActionAvailabilityService.TURN_LED_ON_ID)\">\n         {{\"vsan.actions.turnLedOn.label\" | localized}}\n      </clr-button>\n      <clr-button id=\"{{DiskManagementActionAvailabilityService.TURN_LED_OFF_ID}}\"\n                  [disabled]=\"actionDisabled(DiskManagementActionAvailabilityService.TURN_LED_OFF_ID)\"\n                  (click)=\"turnLed(false)\"\n                  class=\"btn btn-sm\"\n                  [vsan-button-title]=\"getActionButtonTitle(DiskManagementActionAvailabilityService.TURN_LED_OFF_ID)\">\n         {{\"vsan.actions.turnLedOff.label\" | localized}}\n      </clr-button>\n   </ng-container>\n   <clr-button id=\"{{DiskManagementActionAvailabilityService.MARK_DISK_AS_SSD_ID}}\"\n               *ngIf=\"markSsdAvailable\"\n               [disabled]=\"actionDisabled(DiskManagementActionAvailabilityService.MARK_DISK_AS_SSD_ID)\"\n               (click)=\"markSsd(true)\"\n               class=\"btn btn-sm\"\n               [vsan-button-title]=\"getActionButtonTitle(DiskManagementActionAvailabilityService.MARK_DISK_AS_SSD_ID)\">\n      {{\"storage.adapters.devices.action.tagAsSsd\" | localized}}\n   </clr-button>\n   <clr-button id=\"{{DiskManagementActionAvailabilityService.MARK_DISK_AS_HDD_ID}}\"\n               *ngIf=\"markHddAvailable\"\n               [disabled]=\"actionDisabled(DiskManagementActionAvailabilityService.MARK_DISK_AS_HDD_ID)\"\n               (click)=\"markSsd(false)\"\n               class=\"btn btn-sm\"\n               [vsan-button-title]=\"getActionButtonTitle(DiskManagementActionAvailabilityService.MARK_DISK_AS_HDD_ID)\">\n      {{\"storage.adapters.devices.action.untagAsSsd\" | localized}}\n   </clr-button>\n   <clr-button id=\"{{DiskManagementActionAvailabilityService.MARK_DISK_AS_LOCAL_ID}}\"\n               *ngIf=\"markLocalAvailable\"\n               [disabled]=\"actionDisabled(DiskManagementActionAvailabilityService.MARK_DISK_AS_LOCAL_ID)\"\n               (click)=\"markLocal(true)\"\n               class=\"btn btn-sm\"\n               [vsan-button-title]=\"getActionButtonTitle(DiskManagementActionAvailabilityService.MARK_DISK_AS_LOCAL_ID)\">\n      {{\"storage.adapters.devices.action.markAsLocal\" | localized}}\n   </clr-button>\n   <clr-button id=\"{{DiskManagementActionAvailabilityService.MARK_DISK_AS_REMOTE_ID}}\"\n               *ngIf=\"markRemoteAvailable\"\n               [disabled]=\"actionDisabled(DiskManagementActionAvailabilityService.MARK_DISK_AS_REMOTE_ID)\"\n               (click)=\"markLocal(false)\"\n               class=\"btn btn-sm\"\n               [vsan-button-title]=\"getActionButtonTitle(DiskManagementActionAvailabilityService.MARK_DISK_AS_REMOTE_ID)\">\n      {{\"storage.adapters.devices.action.markAsRemote\" | localized}}\n   </clr-button>\n   <clr-button id=\"{{DiskManagementActionAvailabilityService.ERASE_DISK_PARTITIONS_ID}}\"\n               *ngIf=\"erasePartitionsAvailable\"\n               [disabled]=\"actionDisabled(DiskManagementActionAvailabilityService.ERASE_DISK_PARTITIONS_ID)\"\n               (click)=\"erasePartitions()\"\n               class=\"btn btn-sm\"\n               [vsan-button-title]=\"getActionButtonTitle(DiskManagementActionAvailabilityService.ERASE_DISK_PARTITIONS_ID)\">\n      {{\"storage.adapters.devices.action.erasePartitions\" | localized}}\n   </clr-button>\n</clr-button-group>","/* Copyright 2020-2022 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, Input} from \"@angular/core\";\nimport {StorageData} from \"@component/diskmgmt/model/storage-data\";\nimport {PreCheckEvacuationDialogSize} from \"@component/precheck/pre-check-evacuation-dialog-size\";\nimport {DiskData} from \"@generated/disk-data\";\nimport {DiskGroupData} from \"@generated/disk-group-data\";\nimport {DiskGroupMutationService} from \"@generated/disk-group-mutation-service\";\nimport {DiskGroupType} from \"@generated/disk-group-type\";\nimport {DiskLocalityType} from \"@generated/disk-locality-type\";\nimport {DiskType} from \"@generated/disk-type\";\nimport {HostData} from \"@generated/host-data\";\nimport {SpaceEfficiencyConfig} from \"@generated/space-efficiency-config\";\nimport {VsanCapabilityData} from \"@generated/vsan-capability-data\";\nimport {DiskGroupActionData} from \"@model/disk-group-action.data\";\nimport {HostActionData} from \"@model/host-action.data\";\nimport {DeleteDisksContext} from \"@navigation/context/delete-disks-context\";\nimport {DeleteVsanDirectDisksContext} from \"@navigation/context/delete-vsan-direct-disks-context\";\nimport {EvacuationContext} from \"@navigation/context/evacuation.context\";\nimport {MountDiskContext} from \"@navigation/context/mount-disk-context\";\nimport {UnmountDiskContext} from \"@navigation/context/unmount-disk-context\";\nimport {NavigationService, PlatformExtension} from \"@navigation/navigation.service\";\nimport {ManagedObject} from \"@service/managed-object\";\nimport {SpaceEfficiencyService} from \"@service/space-efficiency-service\";\nimport {DiskMgmtDiskGroupUtil} from \"@util/disk-mgmt-disk-group.util\";\nimport {DiskMgmtDiskUtil} from \"@util/disk-mgmt-disk.util\";\nimport {ClaimableState} from \"@util/disk-mgmt.util\";\nimport {Logger} from \"@util/logger\";\nimport {ModalBuilder} from \"@util/modal-builder\";\nimport {ActionAvailableStatus} from \"@util/validation/action-available-status\";\nimport {VsanDiskMgmtActionsUtil} from \"@util/vsan-disk-mgmt-actions-util\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {VsanRoutes} from \"../../../../vsan-routes\";\nimport {ViewObjectsContext} from \"../model/view-objects-context\";\nimport {DiskManagementActionAvailabilityService} from \"../validation/disk-management-action-availability.service\";\nimport {DiskManagementActionContext} from \"../validation/disk-management-action-context\";\nimport {DedupEnabledWarningComponent} from \"./deletediskgroup/dedup-enabled-warning.component\";\n\n@Component({\n   selector: \"vsan-storage-actions\",\n   templateUrl: \"storage-actions.html\",\n   styleUrls: [\"storage-actions.scss\"],\n   host: {class: \"vsan-actions\"},\n})\nexport class StorageActionsComponent {\n   DiskManagementActionAvailabilityService: typeof DiskManagementActionAvailabilityService =\n         DiskManagementActionAvailabilityService;\n\n   @Input()\n   autoClaimMode: boolean;\n\n   @Input()\n   spaceEfficiencyConfig: SpaceEfficiencyConfig = SpaceEfficiencyConfig.NONE;\n\n   @Input()\n   hasEditPermission: boolean = false;\n\n   @Input()\n   hasHostMaintenancePermission: boolean = false;\n\n   @Input()\n   clusterCapabilities: VsanCapabilityData;\n\n   @Input()\n   claimableState: ClaimableState = ClaimableState.IN_USE;\n\n   @Input()\n   selectedStorage: StorageData;\n\n   @Input()\n   host: HostData;\n\n   @Input()\n   diskGroup: DiskGroupData;\n\n   constructor(private diskGroupSvc: DiskGroupMutationService,\n         private navigationService: NavigationService,\n         private spaceEfficiencyService: SpaceEfficiencyService,\n         private diskManagementActionAvailabilityService: DiskManagementActionAvailabilityService) {\n   }\n\n   get selectedDisk(): DiskData {\n      return this.selectedStorage && !this.isSelectedStoragePmem() && this.selectedStorage.storage as DiskData;\n   }\n\n   get isInUse(): boolean {\n      return this.claimableState === ClaimableState.IN_USE;\n   }\n\n   actionDisabled = (actionId: string): boolean => {\n      return !this.getActionStatus(actionId).available;\n   };\n\n   getActionButtonTitle = (actionId: string): string => {\n      return this.getActionStatus(actionId).message;\n   };\n\n   private isVsanClaimedDisk(): boolean {\n      return DiskMgmtDiskUtil.isClaimedForVsan(this.selectedDisk.claimOption);\n   }\n\n   isVsanMaxClaimedDisk(): boolean {\n      return DiskMgmtDiskGroupUtil.isVsanMaxSingleTier(this.diskGroup);\n   }\n\n   private getActionStatus = (actionId: string): ActionAvailableStatus => {\n      return this.diskManagementActionAvailabilityService.checkAvailability(this.getActionValidationContext(actionId));\n   };\n\n   private getActionValidationContext(actionId: string): DiskManagementActionContext {\n      return {\n         actionId: actionId,\n         hasEditPermission: this.hasEditPermission,\n         vsanConfig: null,\n         isEmptyCluster: null,\n         autoClaimMode: this.autoClaimMode,\n         diskGroup: this.diskGroup,\n         host: this.host,\n         storageData: this.selectedStorage,\n         clusterCapabilities: this.clusterCapabilities,\n         hasHostMaintenancePermission: this.hasHostMaintenancePermission,\n         spaceEfficiencyConfig: this.spaceEfficiencyConfig,\n      };\n   }\n\n   turnLed = (on: boolean): void => {\n      this.diskGroupSvc.setDiskLedState(this.host.hostRef, [this.selectedDisk.uuid], on)\n            .then(taskRef => {\n               Logger.info(\"Turning LED indicator \" + (on ? \"on\" : \"off\") + \" for disk:\", this.selectedDisk.uuid);\n            });\n   };\n\n   invokePreCheckEvacuation = (): void => {\n      if (this.clusterCapabilities.isDiskResourcePrecheckSupported) {\n         const evacuationContext: EvacuationContext = VsanDiskMgmtActionsUtil.getEvacuationContext(\n               this.host.hostRef, this.selectedDisk.vsanUuid);\n         this.navigationService.navigateTo(PlatformExtension.CLUSTER_DATA_MIGRATION_PRE_CHECK,\n               ManagedObject.contextObject, evacuationContext);\n         return;\n      }\n\n      const context: any = {\n         objectName: this.selectedDisk.name,\n         objectUid: this.selectedDisk.vsanUuid,\n         hostMor: this.host.hostRef,\n      };\n\n      new ModalBuilder(\"preCheckEvacuation\")\n            .setSize(PreCheckEvacuationDialogSize.WIDTH, PreCheckEvacuationDialogSize.HEIGHT_WITH_OBJECTS)\n            .open(context);\n   };\n\n   /**\n    * This method is used to delete the disk the user selected.\n    */\n   invokeDeleteDisk = (): void => {\n      if (this.spaceEfficiencyService.isOnlyAllFlashSupportedForRemovingDisk(this.spaceEfficiencyConfig) &&\n            this.diskGroup.diskGroupType === DiskGroupType.ALL_FLASH) {\n         new ModalBuilder(\"diskManagement/deleteDiskUnsupportedDialog\")\n               .setSize(580, DedupEnabledWarningComponent.DIALOG_DELETE_DISK_HEIGHT_SMALL)\n               .open();\n         return;\n      }\n\n      const context: DeleteDisksContext = {\n         disks: [this.selectedDisk],\n         host: HostActionData.fromHostData(this.host),\n         diskGroups: this.getDiskGroupActionData(),\n         isVsanMaxEnabled: this.isVsanMaxClaimedDisk(),\n      };\n\n      const height: number = this.actionDisabled(DiskManagementActionAvailabilityService.DISK_PRE_CHECK_ID)\n            ? VsanDiskMgmtActionsUtil.DELETE_DISKS_HEIGHT_SMALL\n            : VsanDiskMgmtActionsUtil.DELETE_DISK_GROUP_HEIGHT_MEDIUM;\n\n      new ModalBuilder(\"diskManagement/deleteDisks\")\n            .setSize(VsanDiskMgmtActionsUtil.DELETE_DISKS_WIDTH, height)\n            .open(context)\n            .then((tasks: ManagedObject[]) => {\n               this.diskManagementActionAvailabilityService.taskStarted.next(tasks);\n            });\n   };\n\n   invokeDeleteVsanDirectDisk(): void {\n      const context: DeleteVsanDirectDisksContext = {\n         disks: [this.selectedDisk],\n      };\n\n      new ModalBuilder(\"diskManagement/deleteVsanDirectDisks\")\n            .setSize(\n                  VsanDiskMgmtActionsUtil.DELETE_VSAN_DIRECT_DISKS_WIDTH,\n                  VsanDiskMgmtActionsUtil.DELETE_VSAN_DIRECT_DISKS_HEIGHT)\n            .open(context)\n            .then((task: ManagedObject) => {\n               this.diskManagementActionAvailabilityService.taskStarted.next([task]);\n            });\n   }\n\n   mountDisk(): void {\n      const context: MountDiskContext = {\n         diskName: this.selectedDisk.name,\n         diskCanonicalName: this.selectedDisk.disk?.canonicalName,\n         hostRef: this.host.hostRef,\n      };\n\n      new ModalBuilder(`${VsanRoutes.DISK_MANAGEMENT_VIEW}/mountStoragePoolDisk`)\n            .setSize(VsanDiskMgmtActionsUtil.MOUNT_DISK_GROUP_DIALOG_WIDTH,\n                  VsanDiskMgmtActionsUtil.MOUNT_DISK_GROUP_DIALOG_HEIGHT)\n            .open(context)\n            .then((task: ManagedObject) => {\n               this.diskManagementActionAvailabilityService.taskStarted.next([task]);\n            });\n   }\n\n   unmountDisk(): void {\n      const context: UnmountDiskContext = {\n         disk: this.selectedDisk,\n         host: HostActionData.fromHostData(this.host),\n      };\n\n      new ModalBuilder(`${VsanRoutes.DISK_MANAGEMENT_VIEW}/unmountStoragePoolDisk`)\n            .setSize(VsanDiskMgmtActionsUtil.UNMOUNT_DISK_DIALOG_WIDTH,\n                  VsanDiskMgmtActionsUtil.UNMOUNT_DISK_DIALOG_HEIGHT)\n            .open(context)\n            .then((task: ManagedObject) => {\n               this.diskManagementActionAvailabilityService.taskStarted.next([task]);\n            });\n   }\n\n   get markSsdAvailable(): boolean {\n      if (!this.selectedDisk || this.claimableState === ClaimableState.IN_USE || this.host.isSingleTierEnabled) {\n         return false;\n      }\n      return !this.selectedDisk.isFlash;\n   }\n\n   get markHddAvailable(): boolean {\n      if (!this.selectedDisk || this.claimableState === ClaimableState.IN_USE || this.host.isSingleTierEnabled) {\n         return false;\n      }\n      return this.selectedDisk.isFlash;\n   }\n\n   markSsd = (ssd: boolean): void => {\n      new ModalBuilder(\"diskManagement/markSsd\")\n            .setSize(576, ssd ? 240 : 180)\n            .open(ssd)\n            .then(result => {\n               this.diskGroupSvc.setDiskType(this.host.hostRef, [this.selectedDisk.uuid], ssd)\n                     .then((tasks: ManagedObject[]) => {\n                        this.diskManagementActionAvailabilityService.taskStarted.next(tasks);\n                     });\n            });\n   };\n\n   get markLocalAvailable(): boolean {\n      if (!this.selectedDisk || this.claimableState !== ClaimableState.NOT_USABLE) {\n         return false;\n      }\n      return this.selectedDisk.driveLocality !== DiskLocalityType.Local;\n   }\n\n   get markRemoteAvailable(): boolean {\n      if (!this.selectedDisk || this.claimableState !== ClaimableState.NOT_USABLE) {\n         return false;\n      }\n      return this.selectedDisk.driveLocality !== DiskLocalityType.Remote;\n   }\n\n   markLocal = (local: boolean): void => {\n      new ModalBuilder(\"diskManagement/markLocal\")\n            .setSize(576, 160)\n            .open(local)\n            .then(result => {\n               this.diskGroupSvc.setDiskLocality(this.host.hostRef, [this.selectedDisk.uuid], local)\n                     .then((tasks: ManagedObject[]) => {\n                        this.diskManagementActionAvailabilityService.taskStarted.next(tasks);\n                     });\n            });\n   };\n\n   get erasePartitionsAvailable(): boolean {\n      return this.selectedDisk && this.claimableState === ClaimableState.NOT_USABLE;\n   }\n\n   get precheckDataMigrationLabel(): string {\n      return DiskMgmtDiskUtil.getDataMigrationPrecheckLabel(this.clusterCapabilities);\n   }\n\n   get viewStorageObjectsLabel(): string {\n      return VsanUiUtils.getString(this.isSelectedStoragePmem()\n            ? \"vsan.actions.viewDeviceObjects.label\"\n            : \"vsan.actions.viewDiskObjects.label\");\n   }\n\n   addDisks(): void {\n      new ModalBuilder(\"diskManagement/addDisk\")\n            .open(this.diskGroup)\n            .then((task: ManagedObject) => this.diskManagementActionAvailabilityService.taskStarted.next([task]));\n   }\n\n   showViewStorageObjectsAction = (): boolean => this.selectedStorage &&\n         !DiskMgmtDiskGroupUtil.isUnusedDiskGroup(this.diskGroup) &&\n         this.clusterCapabilities.isObjectIdentitiesSupported;\n\n   showDataMigrationPrecheckAction = (): boolean => this.isVsanClaimedDisk() || this.isVsanMaxClaimedDisk();\n\n   showDeleteVsanDiskAction = (): boolean => !this.autoClaimMode\n         && (this.isVsanClaimedDisk() || this.isVsanMaxClaimedDisk());\n\n   showDeleteVsanDirectDiskAction = (): boolean => !this.autoClaimMode\n         && !this.isVsanClaimedDisk() && !this.isVsanMaxClaimedDisk();\n\n   isSelectedStoragePmem = (): boolean => this.selectedStorage.type === DiskType.PMEM;\n\n   viewStorageObjects = (): void => this.diskManagementActionAvailabilityService.objectsViewSelected\n         .next(new ViewObjectsContext(this.host, this.diskGroup, this.selectedStorage));\n\n   erasePartitions = (): void => {\n      const context: any = {\n         selectedDevices: this.selectedDisk.disk,\n      };\n      this.navigationService.invokePlatformAction(PlatformExtension.ERASE_PARTITIONS,\n            [ManagedObject.uid(this.host.hostRef)],\n            context);\n   };\n\n   private getDiskGroupActionData(): DiskGroupActionData[] {\n      return this.isVsanMaxClaimedDisk()\n            ? []\n            : [DiskGroupActionData.fromDiskGroupData(this.diskGroup)];\n   }\n}","/* Copyright 2017-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component} from \"@angular/core\";\n\n@Component({\n   templateUrl: \"dedup-enabled-warning.html\",\n   selector: \"vsan-diskmgmt-delete-unavailable\",\n})\nexport class DedupEnabledWarningComponent {\n   static readonly DIALOG_DELETE_DISK_HEIGHT_SMALL: number = 210;\n}","<!-- Copyright 2020-2022 VMware, Inc. All rights reserved. -- VMware Confidential -->\n<vsan-storage-actions\n      [autoClaimMode]=\"autoClaimMode\"\n      [spaceEfficiencyConfig]=\"spaceEfficiencyConfig\"\n      [hasEditPermission]=\"hasEditPermission\"\n      [clusterCapabilities]=\"clusterCapabilities\"\n      [hasHostMaintenancePermission]=\"hasHostMaintenancePermission\"\n      [claimableState]=\"claimableState\"\n      [selectedStorage]=\"selectedStorageData\"\n      [host]=\"host\"\n      [diskGroup]=\"storageGroup\">\n</vsan-storage-actions>\n<clr-datagrid *ngIf=\"showGrid\"\n              #dataGrid\n              [(clrDgSingleSelected)]=\"selectedStorageData\"\n              (clrDgSingleSelectedChange)=\"selectionChanged($event)\">\n   <!-- Datagrid Header -->\n   <clr-dg-column [clrDgField]=\"'name'\" class=\"name-column\" vsan-show-title >\n      {{\"vsan.disk.list.name\" | localized}}\n   </clr-dg-column>\n   <clr-dg-column *ngIf=\"!isUnusedDiskGroup\"\n                  [clrDgSortBy]=\"healthComparator\"\n                  [clrDgSortOrder]=\"ascSort\"\n                  vsan-show-title>\n      {{\"vsan.disk.list.vsanHealthStatus\" | localized}}\n      <clr-dg-filter *ngIf=\"healthKeys?.size > 1\">\n         <vsan-storage-group-details-filter-health [items]=\"healthKeys\">\n         </vsan-storage-group-details-filter-health>\n      </clr-dg-filter>\n   </clr-dg-column>\n   <clr-dg-column class=\"capacity-column\">\n      {{\"vsan.disk.list.capacity\" | localized}}\n   </clr-dg-column>\n   <clr-dg-column *ngIf=\"isVsanDiskGroup || isVsanMaxSingleTier\"\n                  [clrDgField]=\"'vsanUuid'\" vsan-show-title>\n      <ng-container *clrDgHideableColumn=\"{hidden: true}\">\n         {{\"vsan.disk.list.uuid\" | localized}}\n      </ng-container>\n   </clr-dg-column>\n   <clr-dg-column [clrDgSortBy]=\"driveTypeComparator\" vsan-show-title>\n      {{\"vsan.disk.list.driveType\" | localized}}\n      <clr-dg-filter *ngIf=\"driveTypeKeys?.size > 1\">\n         <vsan-storage-group-details-filter-drive-type [items]=\"driveTypeKeys\">\n         </vsan-storage-group-details-filter-drive-type>\n      </clr-dg-filter>\n   </clr-dg-column>\n   <clr-dg-column *ngIf=\"isVsanDiskGroup\"\n                  [clrDgSortBy]=\"diskTierComparator\" vsan-show-title>\n      {{\"vsan.disk.list.diskRole\" | localized}}\n      <clr-dg-filter *ngIf=\"diskTierKeys?.size > 1\">\n         <vsan-storage-group-details-filter-disk-tier [items]=\"diskTierKeys\">\n         </vsan-storage-group-details-filter-disk-tier>\n      </clr-dg-filter>\n   </clr-dg-column>\n   <clr-dg-column *ngIf=\"isUnusedDiskGroup\"\n                  [clrDgSortBy]=\"deviceOperationalStateComparator\" vsan-show-title>\n      {{\"vsan.disk.list.operationalState\" | localized}}\n      <clr-dg-filter *ngIf=\"deviceOperationalStateKeys?.size > 1\">\n         <vsan-storage-group-details-filter-device-operational-state [items]=\"deviceOperationalStateKeys\">\n         </vsan-storage-group-details-filter-device-operational-state>\n      </clr-dg-filter>\n   </clr-dg-column>\n   <clr-dg-column *ngIf=\"!isUnusedDiskGroup\"\n                  [clrDgSortBy]=\"deviceMountStateComparator\" vsan-show-title>\n      {{\"vsan.disk.list.state\" | localized}}\n      <clr-dg-filter *ngIf=\"deviceMountStateKeys?.size > 1\">\n         <vsan-storage-group-details-filter-device-state [items]=\"deviceMountStateKeys\">\n         </vsan-storage-group-details-filter-device-state>\n      </clr-dg-filter>\n   </clr-dg-column>\n   <clr-dg-column *ngIf=\"isNotPmemGroup\"\n                  [clrDgSortBy]=\"driveLocalityComparator\"\n                  vsan-show-title>\n      <ng-container *clrDgHideableColumn=\"{hidden: true}\">\n         {{\"vsan.disk.list.driveLocality\" | localized}}\n      </ng-container>\n      <clr-dg-filter *ngIf=\"driveLocalityKeys?.size > 1\">\n         <vsan-storage-group-details-filter-drive-locality [items]=\"driveLocalityKeys\">\n         </vsan-storage-group-details-filter-drive-locality>\n      </clr-dg-filter>\n   </clr-dg-column>\n   <clr-dg-column *ngIf=\"isNotPmemGroup\"\n                  [clrDgField]=\"'diskAdapter'\" vsan-show-title>\n      <ng-container *clrDgHideableColumn=\"{hidden: true}\">\n         {{\"vsan.disk.list.diskAdapter\" | localized}}\n      </ng-container>\n   </clr-dg-column>\n   <clr-dg-column *ngIf=\"isNotPmemGroup\"\n                  [clrDgSortBy]=\"transportTypeComparator\"\n                  vsan-show-title>\n      <ng-container *clrDgHideableColumn=\"{hidden: true}\">\n         {{\"vsan.disk.list.transportType\" | localized}}\n      </ng-container>\n      <clr-dg-filter *ngIf=\"transportTypeKeys?.size > 1\">\n         <vsan-storage-group-details-filter-transport-type [items]=\"transportTypeKeys\">\n         </vsan-storage-group-details-filter-transport-type>\n      </clr-dg-filter>\n   </clr-dg-column>\n   <clr-dg-column [clrDgSortBy]=\"physicalLocationComparator\"\n                  vsan-show-title>\n      <ng-container *clrDgHideableColumn=\"{hidden: true}\">\n         {{\"vsan.disk.list.physicalLocation\" | localized}}\n      </ng-container>\n      <clr-dg-filter *ngIf=\"physicalLocationKeys?.size > 1\">\n         <vsan-storage-group-details-filter-physical-location [items]=\"physicalLocationKeys\">\n         </vsan-storage-group-details-filter-physical-location>\n      </clr-dg-filter>\n   </clr-dg-column>\n   <clr-dg-column *ngIf=\"isVsanDiskGroup || isVsanMaxSingleTier\">\n      <ng-container *clrDgHideableColumn=\"{hidden: true}\" vsan-show-title>\n         {{\"vsan.disk.list.fileSystemVersion\" | localized}}\n      </ng-container>\n   </clr-dg-column>\n   <clr-dg-column *ngIf=\"isUnusedDiskGroup\"\n                  [clrDgSortBy]=\"claimableStateComparator\" vsan-show-title>\n      {{\"vsan.disk.list.claimableState\" | localized}}\n      <clr-dg-filter *ngIf=\"claimableStateKeys?.size > 1\">\n         <vsan-storage-group-details-filter-claimable-state [items]=\"claimableStateKeys\">\n         </vsan-storage-group-details-filter-claimable-state>\n      </clr-dg-filter>\n   </clr-dg-column>\n\n   <clr-dg-row *clrDgItems=\"let row of storageItems\" [clrDgItem]=\"row\">\n      <clr-dg-cell vsan-show-title>\n         <clr-icon *ngIf=\"row.iconShape\" [attr.shape]=\"row.iconShape\"></clr-icon>\n         {{row.name}}\n      </clr-dg-cell>\n      <clr-dg-cell *ngIf=\"!isUnusedDiskGroup\" vsan-show-title>\n         {{getDiskHealth(row.diskStatus)}}\n      </clr-dg-cell>\n      <clr-dg-cell class=\"capacity-column right-align-cell no-vertical-padding\">\n         <vsan-storage-capacity [capacity]=\"row.capacity\">\n         </vsan-storage-capacity>\n      </clr-dg-cell>\n      <clr-dg-cell *ngIf=\"isVsanDiskGroup || isVsanMaxSingleTier\" vsan-show-title>\n         {{row.vsanUuid}}\n      </clr-dg-cell>\n      <clr-dg-cell vsan-show-title>\n         {{row.type | diskTypeLabel}}\n      </clr-dg-cell>\n      <clr-dg-cell *ngIf=\"isVsanDiskGroup\" vsan-show-title>\n         {{getDiskTier(row.claimOption)}}\n      </clr-dg-cell>\n      <clr-dg-cell *ngIf=\"isUnusedDiskGroup\" vsan-show-title>\n         {{getDiskOperationalState(row.deviceState)}}\n      </clr-dg-cell>\n      <clr-dg-cell *ngIf=\"!isUnusedDiskGroup\" vsan-show-title>\n         {{getDiskMountedState(row.diskStatus)}}\n      </clr-dg-cell>\n      <clr-dg-cell *ngIf=\"isNotPmemGroup\" vsan-show-title>\n         {{getDiskLocality(row.driveLocality)}}\n      </clr-dg-cell>\n      <clr-dg-cell *ngIf=\"isNotPmemGroup\" vsan-show-title>\n         {{row.diskAdapter}}\n      </clr-dg-cell>\n      <clr-dg-cell *ngIf=\"isNotPmemGroup\" vsan-show-title>\n         {{row.transportType | transportType}}\n      </clr-dg-cell>\n      <clr-dg-cell vsan-show-title>\n         {{getPhysicalLocation(row.physicalLocation)}}\n      </clr-dg-cell>\n      <clr-dg-cell *ngIf=\"isVsanDiskGroup || isVsanMaxSingleTier\" vsan-show-title>\n         {{getFsVersion(row.diskStatus)}}\n      </clr-dg-cell>\n      <clr-dg-cell *ngIf=\"isUnusedDiskGroup\" vsan-show-title>\n         {{getClaimableStateLabel(row.claimableState)}}\n      </clr-dg-cell>\n   </clr-dg-row>\n\n   <clr-dg-footer>\n<!--      <vsan-export [source]=\"exportDataSource\"-->\n<!--                   [filename]=\"DiskMgmtExportConfig.storageGroupDetailsFileName\"-->\n<!--                   [dataExtractors]=\"DiskMgmtExportConfig.getStorageDataExtractors(storageGroup)\">-->\n<!--      </vsan-export>-->\n      <clr-dg-pagination #pagination\n                         [clrDgPageSize]=\"DEFAULT_ITEMS_PER_PAGE\"\n                         [hidden]=\"!storageItems?.length\"\n                         [clrDgTotalItems]=\"storageItems?.length\">\n         {{getPaginationLabel(pagination)}}\n      </clr-dg-pagination>\n   </clr-dg-footer>\n</clr-datagrid>\n","/* Copyright 2020 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component} from \"@angular/core\";\nimport {EnumeratedFilterSelectionResolver} from \"@component/datagrid/filter/enumerated-filter.component\";\nimport {DiskMgmtFilterComponent} from \"./disk-mgmt-filter.component\";\nimport {DiskMgmtDiskUtil} from \"@util/disk-mgmt-disk.util\";\nimport {StorageData} from \"@component/diskmgmt/model/storage-data\";\n\n@Component({\n   templateUrl: \"disk-mgmt-filter.html\",\n   selector: \"vsan-storage-group-details-filter-drive-type\",\n   styleUrls: [\"disk-mgmt-filter.scss\"],\n})\nexport class StorageGroupDetailsFilterDriveTypeComponent extends DiskMgmtFilterComponent<StorageData> {\n\n   readonly comparator: EnumeratedFilterSelectionResolver<StorageData, string> =\n         new class extends EnumeratedFilterSelectionResolver<StorageData, string> {\n            isSelected(item: StorageData, selectedStateKeys: string[]): boolean {\n               return selectedStateKeys.some(state => state === DiskMgmtDiskUtil.getDiskType(item.type));\n            }\n         }();\n}","/* Copyright 2021 VMware, Inc. All rights reserved. -- VMware Confidential */\n\n/*\n   Names to use in the Loader decorator\n */\nexport enum LoaderName {\n   ON_INIT = \"on-init\",\n   ON_CONFIRM = \"on-confirm\",\n   PERFORM_CHANGE = \"perform-change\",\n   REGISTER = \"register\",\n   UPGRADE = \"upgrade\",\n   MONITOR = \"monitor\",\n   DATA_EVACUATION = \"data-evacuation\",\n}\n","/* Copyright 2021-2022 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {HostData} from \"@generated/host-data\";\nimport {DiskMgmtHostUtil} from \"@util/disk-mgmt-host.util\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {ExportDataExtractor} from \"@component/export/export-data-extractor\";\nimport {StorageGroupData} from \"../model/storage-group-data\";\nimport {DiskMgmtDiskGroupUtil} from \"@util/disk-mgmt-disk-group.util\";\nimport {StorageData} from \"@component/diskmgmt/model/storage-data\";\nimport {DiskMgmtDiskUtil} from \"@util/disk-mgmt-disk.util\";\nimport {ExportDataSource} from \"@component/export/export-data-source\";\nimport {ClrDatagrid} from \"@clr/angular\";\nimport {DatagridExportDataSourceAdapter} from \"@component/export/adapters/datagrid-export-data-source-adapter\";\nimport {DiskMgmtUtil} from \"@util/disk-mgmt.util\";\n\nexport class DiskMgmtExportConfig {\n\n   static createExportDataSource(datagrid: ClrDatagrid): ExportDataSource {\n      return new DatagridExportDataSourceAdapter(datagrid);\n   }\n\n   static readonly hostListFileName: string = \"disk_mgmt_hosts\";\n\n   static hostDataExtractors: ExportDataExtractor[] = [\n      {\n         label: \"vsan.manage.diskManagement.hostList.name\",\n         value: (host: HostData) => host.name,\n      },\n      {\n         label: \"vsan.manage.diskManagement.hostList.health\",\n         value: (host: HostData) => VsanUiUtils.getString(DiskMgmtHostUtil.getHealthKey(host)),\n      },\n      {\n         label: \"vsan.manage.diskManagement.hostList.disksInUse\",\n         value: (host: HostData) => DiskMgmtHostUtil.getClaimedDisksLabel(host),\n      },\n      {\n         label: \"vsan.manage.diskManagement.hostList.state\",\n         value: (host: HostData) => DiskMgmtHostUtil.getState(host),\n      },\n      {\n         label: \"vsan.manage.diskManagement.hostList.capacity\",\n         value: (host: HostData) => DiskMgmtUtil.stringifyCapacity(host.capacity),\n      },\n      {\n         label: \"vsan.manage.diskManagement.hostList.contributesTo\",\n         value: (host: HostData) =>  DiskMgmtHostUtil.getGroupTypeKeys(host)\n               .map(key => VsanUiUtils.getString(key))\n               .join(\";\"),\n      },\n      {\n         label: \"vsan.manage.diskManagement.hostList.faultDomain\",\n         value: (host: HostData) => host.faultDomain,\n      },\n      {\n         label: \"vsan.manage.diskManagement.hostList.networkPartitionGroup\",\n         value: (host: HostData) => host.networkPartitionGroup\n            ? VsanUiUtils.getString(\"vsan.host.list.partitionGroupFormat\", host.networkPartitionGroup)\n            : \"\",\n      },\n   ];\n\n   static readonly storageGroupDetailsFileName: string = \"disk_mgmt_storage\";\n\n   static getStorageDataExtractors(storageGroup: StorageGroupData): ExportDataExtractor[] {\n      return [\n         DiskMgmtExportConfig.storageName,\n         !DiskMgmtDiskGroupUtil.isUnusedDiskGroup(storageGroup) ? DiskMgmtExportConfig.storageHealth : null,\n         DiskMgmtExportConfig.storageCapacity,\n         DiskMgmtDiskGroupUtil.isVsanDiskGroup(storageGroup) || DiskMgmtDiskGroupUtil.isVsanMaxSingleTier(storageGroup)\n               ? DiskMgmtExportConfig.storageUuid : null,\n         DiskMgmtExportConfig.storageDriveType,\n         DiskMgmtDiskGroupUtil.isVsanDiskGroup(storageGroup) ? DiskMgmtExportConfig.storageTier : null,\n         !DiskMgmtDiskGroupUtil.isUnusedDiskGroup(storageGroup) ? DiskMgmtExportConfig.storageMountState : null,\n         DiskMgmtDiskGroupUtil.isUnusedDiskGroup(storageGroup) ? DiskMgmtExportConfig.storageOperationalState : null,\n         !DiskMgmtDiskGroupUtil.isPmemDiskGroup(storageGroup) ? DiskMgmtExportConfig.storageLocality : null,\n         !DiskMgmtDiskGroupUtil.isPmemDiskGroup(storageGroup) ? DiskMgmtExportConfig.storageDiskAdapter : null,\n         !DiskMgmtDiskGroupUtil.isPmemDiskGroup(storageGroup) ? DiskMgmtExportConfig.storageTransportType : null,\n         DiskMgmtExportConfig.storagePhysicalLocation,\n         DiskMgmtDiskGroupUtil.isVsanDiskGroup(storageGroup) || DiskMgmtDiskGroupUtil.isVsanMaxSingleTier(storageGroup)\n               ? DiskMgmtExportConfig.storageFsVersion : null,\n         DiskMgmtDiskGroupUtil.isUnusedDiskGroup(storageGroup) ? DiskMgmtExportConfig.storageClaimableState : null,\n      ].filter(dataExtractor => !!dataExtractor);\n   }\n\n   private static storageName: ExportDataExtractor = {\n      label: \"vsan.disk.list.name\",\n      value: (storage: StorageData) => storage.name,\n   };\n\n   private static storageHealth: ExportDataExtractor = {\n      label: \"vsan.disk.list.vsanHealthStatus\",\n      value: (storage: StorageData) => DiskMgmtDiskUtil.getHealth(storage.diskStatus),\n   };\n\n   private static storageCapacity: ExportDataExtractor = {\n      label: \"vsan.disk.list.capacity\",\n      value: (storage: StorageData) => DiskMgmtUtil.stringifyCapacity(storage.capacity),\n   };\n\n   private static storageUuid: ExportDataExtractor = {\n      label: \"vsan.disk.list.uuid\",\n      value: (storage: StorageData) => storage.vsanUuid,\n   };\n\n   private static storageDriveType: ExportDataExtractor = {\n      label: \"vsan.disk.list.driveType\",\n      value: (storage: StorageData) => DiskMgmtDiskUtil.getDiskType(storage.type),\n   };\n\n   private static storageTier: ExportDataExtractor = {\n      label: \"vsan.disk.list.diskRole\",\n      value: (storage: StorageData) => DiskMgmtDiskUtil.getLocalizedStorage(storage.claimOption),\n   };\n\n   private static storageMountState: ExportDataExtractor = {\n      label: \"vsan.disk.list.state\",\n      value: (storage: StorageData) => DiskMgmtDiskUtil.localizeMountedState(storage.diskStatus),\n   };\n\n   private static storageOperationalState: ExportDataExtractor = {\n      label: \"vsan.disk.list.operationalState\",\n      value: (storage: StorageData) => DiskMgmtDiskUtil.localizeOperationalState(storage.deviceState),\n   };\n\n   private static storageLocality: ExportDataExtractor = {\n      label: \"vsan.disk.list.driveLocality\",\n      value: (storage: StorageData) => DiskMgmtDiskUtil.localizeLocality(storage.driveLocality),\n   };\n\n   private static storageDiskAdapter: ExportDataExtractor = {\n      label: \"vsan.disk.list.diskAdapter\",\n      value: (storage: StorageData) => storage.diskAdapter,\n   };\n\n   private static storageTransportType: ExportDataExtractor = {\n      label: \"vsan.disk.list.transportType\",\n      value: (storage: StorageData) =>  DiskMgmtDiskUtil.getTransportTypeText(storage.transportType),\n   };\n\n   private static storagePhysicalLocation: ExportDataExtractor = {\n      label: \"vsan.disk.list.physicalLocation\",\n      value: (storage: StorageData) =>  DiskMgmtDiskUtil.getPhysicalLocation(storage.physicalLocation),\n   };\n\n   private static storageFsVersion: ExportDataExtractor = {\n      label: \"vsan.disk.list.fileSystemVersion\",\n      value: (storage: StorageData) =>  DiskMgmtDiskUtil.getFormatVersion(storage.diskStatus),\n   };\n\n   private static storageClaimableState: ExportDataExtractor = {\n      label: \"vsan.disk.list.claimableState\",\n      value: (storage: StorageData) =>  DiskMgmtDiskUtil.localizeClaimableState(storage.claimableState),\n   };\n}","<!--Copyright 2020-2021 VMware, Inc. All rights reserved. -- VMware Confidential-->\n<vsan-capacity-bar-chart *ngIf=\"!showOnlyTotalLabel()\"\n                         [barWidth]=\"14\"\n                         [chartHeight]=\"24\"\n                         [sections]=\"sectionsData\"\n                         [tooltipOptions]=\"tooltipOptions\"\n                         [isSharedTooltip]=\"true\"\n                         [enableKeyboardNavigation]=\"true\"\n                         [total]=\"capacity.total\">\n</vsan-capacity-bar-chart>\n<span *ngIf=\"showOnlyTotalLabel()\">\n   {{getTotalLabel()}}\n</span>","/* Copyright 2022 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, OnInit} from \"@angular/core\";\nimport {MountDiskContext} from \"@navigation/context/mount-disk-context\";\nimport {ManagedObject} from \"@service/managed-object\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {DiskGroupMutationService} from \"@generated/disk-group-mutation-service\";\nimport {LoadingIndicator} from \"@service/flow/loading-indicator.decorator\";\nimport {Loader} from \"@service/flow/loader.decorator\";\nimport {ErrorHandler} from \"@service/flow/error-handler.decorator\";\n\n/**\n * This component is used to mount a Vsan Max disk.\n */\n@Component({\n   templateUrl: \"mount-storage-pool-disk.html\",\n   selector: \"vsan-mount-storage-pool-disk\",\n   styleUrls: [\"mount-storage-pool-disk.scss\", \"../actions-common.scss\"],\n})\nexport class MountStoragePoolDiskComponent implements OnInit {\n\n   @LoadingIndicator()\n   loading: boolean;\n\n   alerts: string[] = [];\n   hostRef: ManagedObject;\n   diskName: string;\n   diskCanonicalName: string;\n\n   constructor(private diskGroupMutationService: DiskGroupMutationService) {\n   }\n\n   ngOnInit(): void {\n      const context: MountDiskContext = VsanUiUtils.getModalContext();\n      this.hostRef = context.hostRef;\n      this.diskName = context.diskName;\n      this.diskCanonicalName = context.diskCanonicalName;\n   }\n\n   @Loader()\n   async ok(): Promise<void> {\n      this.alerts = [];\n\n      // For mounting a disk to a storage pool, vsanAddStoragePoolDisk API is used\n      const task: ManagedObject = await this.diskGroupMutationService.addDisksToStoragePool(\n            this.hostRef, [this.diskCanonicalName]);\n      VsanUiUtils.closeModalDialog(task);\n   }\n\n   @ErrorHandler()\n   private handleError(error: any): void {\n      this.alerts = [error];\n   }\n}\n","/* Copyright 2022 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, OnInit} from \"@angular/core\";\nimport {DecommissionModeSummary} from \"@component/precheck/pre-check-evacuation-summary.component\";\nimport {DecommissionMode} from \"@generated/decommission-mode\";\nimport {DiskData} from \"@generated/disk-data\";\nimport {DiskGroupMutationService} from \"@generated/disk-group-mutation-service\";\nimport {HostActionData} from \"@model/host-action.data\";\nimport {EvacuationContext} from \"@navigation/context/evacuation.context\";\nimport {UnmountDiskContext} from \"@navigation/context/unmount-disk-context\";\nimport {NavigationService, PlatformExtension} from \"@navigation/navigation.service\";\nimport {ErrorHandler} from \"@service/flow/error-handler.decorator\";\nimport {LoaderName} from \"@service/flow/loader-name\";\nimport {Loader} from \"@service/flow/loader.decorator\";\nimport {LoadingIndicator} from \"@service/flow/loading-indicator.decorator\";\nimport {ManagedObject} from \"@service/managed-object\";\nimport {SrMessageType} from \"@service/screen-reader-announcer.service\";\nimport {VsanDataMigrationUtil} from \"@util/vsan-data-migration-util\";\nimport {VsanDiskMgmtActionsUtil} from \"@util/vsan-disk-mgmt-actions-util\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\n\n/**\n * This component is used to unmount vSAN Max disk.\n */\n@Component({\n   templateUrl: \"unmount-storage-pool-disk.html\",\n   selector: \"vsan-unmount-storage-pool-disk\",\n   styleUrls: [\"../actions-common.scss\"],\n})\nexport class UnmountStoragePoolDiskComponent implements OnInit {\n   @LoadingIndicator({name: [LoaderName.ON_INIT, LoaderName.ON_CONFIRM]})\n   loading: boolean;\n\n   alerts: string[] = [];\n   warningMessages: string[] = [VsanUiUtils.getString(\"vsan.dialog.unmountDisk.headerDataEvacuation\")];\n   host: HostActionData;\n   disk: DiskData;\n\n   shouldAllowDataMigration: boolean;\n   isValidDecommisionMode: boolean = true;\n   selectedDecommissionMode: DecommissionMode = DecommissionMode.ensureObjectAccessibility;\n   goToPrecheckButtonText: string;\n   preselectedDecommissionMode: DecommissionMode;\n   localizedPreselectedDecommissionMode: string;\n\n   constructor(private diskGroupMutationService: DiskGroupMutationService,\n         private navigationService: NavigationService) {\n   }\n\n   @Loader({\n      name: LoaderName.ON_INIT,\n      srMessage: \"vsan.dialog.unmountDisk.dialogTitle\",\n      srMessageType: SrMessageType.PAGE_TITLE,\n   })\n   async ngOnInit(): Promise<void> {\n      const context: UnmountDiskContext = VsanUiUtils.getModalContext();\n      this.disk = context.disk;\n      this.host = context.host;\n      this.preselectedDecommissionMode = context.decommissionMode;\n      this.localizedPreselectedDecommissionMode = VsanDataMigrationUtil.getLocalizedDecommissionMode(\n            this.preselectedDecommissionMode);\n\n      this.shouldAllowDataMigration = !this.host.isWitnessHost && !this.host.isInMaintenanceMode;\n      if (!this.shouldAllowDataMigration) {\n         this.selectedDecommissionMode = DecommissionMode.noAction;\n         VsanUiUtils.setModalDialogHeight(VsanDiskMgmtActionsUtil.UNMOUNT_DISK_DIALOG_HEIGHT_SMALL);\n      }\n\n      // Preselecting decommission mode means that this dialog is opened from Data migration pre-check page,\n      // in which case GO TO PRE-CHECK button doesn't need to be display.\n      if (!this.preselectedDecommissionMode && this.shouldAllowDataMigration) {\n         this.goToPrecheckButtonText = VsanUiUtils.getString(\"vsan.actions.goToPrecheckDataMigration.label\");\n      }\n\n      if (this.host.isInMaintenanceMode) {\n         this.warningMessages.push(\n               VsanUiUtils.getString(\"vsan.dialog.unmountDisk.headerDataEvacuation.withMaintenanceMode\"));\n      }\n      if (this.host.isWitnessHost) {\n         this.warningMessages.push(\n               VsanUiUtils.getString(\"vsan.dialog.unmountDisk.headerDataEvacuation.witnessHostWarning\"));\n      }\n   }\n\n   @ErrorHandler({name: LoaderName.ON_INIT})\n   private handleInitError(): void {\n      this.alerts = [VsanUiUtils.getString(\"vsan.common.error.dataExtraction\")];\n   }\n\n   onDecommisionModeSummaryChanged(summary: DecommissionModeSummary): void {\n      this.selectedDecommissionMode = summary.value;\n      this.isValidDecommisionMode = summary.isValidDecommissionMode;\n   }\n\n   onGoToPrecheckClicked(): void {\n      const evacuationContext: EvacuationContext = VsanDiskMgmtActionsUtil.getEvacuationContext(\n            this.host.hostRef, this.disk.vsanUuid, this.selectedDecommissionMode);\n      this.navigationService.navigateToAndCloseModal(PlatformExtension.CLUSTER_DATA_MIGRATION_PRE_CHECK,\n            ManagedObject.contextObjectUid, evacuationContext);\n   }\n\n   @Loader({name: LoaderName.ON_CONFIRM})\n   async unmount(): Promise<void> {\n      this.alerts = [];\n\n      const decommissionMode: DecommissionMode = this.preselectedDecommissionMode\n            ? this.preselectedDecommissionMode\n            : VsanDiskMgmtActionsUtil.getSelectedDecommissionMode(\n                  this.shouldAllowDataMigration, this.selectedDecommissionMode);\n\n      const task: ManagedObject = await this.diskGroupMutationService.unmountVsanMaxDisk(\n            ManagedObject.contextObject, decommissionMode, this.disk.vsanUuid);\n      VsanUiUtils.closeModalDialog(task);\n   }\n\n   @ErrorHandler({name: LoaderName.ON_CONFIRM})\n   private handleError(error: any): void {\n      this.alerts = [error];\n   }\n}\n","/* Copyright 2019-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport { NgControl } from '@angular/forms';\nimport {Directive, Input, OnInit} from \"@angular/core\";\n\n/**\n * This directive is used to provide declarative style disabling for angular reactive forms's input elements.\n * This is required since the reactive forms only provide a way to disable them initially,\n * but there is no binding as it seems and subsequent changes to the argument doesn't affect the\n * input's disabled element.\n * Here is a stackoverflow thread with the given issue and some more details on the current approach:\n * https://stackoverflow.com/questions/40494968/reactive-forms-disabled-attribute\n */\n@Directive({\n   selector: \"[vsan-disable-form-control]\"\n})\nexport class DisableControlDirective implements OnInit {\n\n   private isInit: boolean = false;\n\n   constructor( private ngControl : NgControl ) {\n   }\n\n   private _disableControl: boolean;\n\n   @Input(\"vsan-disable-form-control\")\n   set disableControl(value: boolean ) {\n      this._disableControl = value;\n      if (!this.ngControl.control || !this.isInit) {\n         return;\n      }\n      this.setDisabled();\n   }\n\n   get disableControl(): boolean {\n      return this._disableControl;\n   }\n\n   ngOnInit(): void {\n      this.setDisabled();\n      this.isInit = true;\n   }\n\n   private setDisabled(): void {\n      this.disableControl ? this.ngControl.control.disable() : this.ngControl.control.enable();\n   }\n}","<!--Copyright 2022 VMware, Inc. All rights reserved. -- VMware Confidential-->\n<vsan-delete-prompt\n      [title]=\"'vsan.dialog.unmountDisk.dialogTitle' | localized\"\n      [subtitle]=\"disk.name\"\n      [confirmText]=\"'vsan.actions.unmountDiskGroup.confirmText' | localized\"\n      [(alertMessages)]=\"alerts\"\n      [blockContent]=\"loading\"\n      [blockButton]=\"loading || !isValidDecommisionMode\"\n      [additionalButtonText]=\"goToPrecheckButtonText\"\n      (onConfirm)=\"unmount()\"\n      (onAdditionalAction)=\"onGoToPrecheckClicked()\">\n   <div class=\"dialog-body\">\n      <vsan-validation alertType=\"warning\"\n                       [allowClose]=\"false\"\n                       [alertsExpanded]=\"true\"\n                       [allowExpandCollapse]=\"false\"\n                       [alerts]=\"warningMessages\">\n      </vsan-validation>\n\n      <!--Preselected decommission mode-->\n      <form class=\"clr-form clr-form-horizontal\" *ngIf=\"preselectedDecommissionMode\">\n         <div class=\"clr-form-control\">\n            <label for=\"unmount-disk-group-decommission-mode\" class=\"clr-control-label\">\n               {{\"vsan.dialog.precheckEvacuation.label\" | localized}}\n            </label>\n            <span id=\"unmount-disk-group-decommission-mode\">\n               {{localizedPreselectedDecommissionMode}}\n            </span>\n         </div>\n      </form>\n\n      <!-- Select decommission mode -->\n      <ng-container *ngIf=\"!loading && shouldAllowDataMigration && !preselectedDecommissionMode\">\n         <div class=\"migration-mode-label\">\n            <span id=\"select-migration-mode-label\">{{\"vsan.dialog.deleteDiskGroup.migrationMode\" | localized}}</span>\n            <clr-signpost [vsan-signpost-title]=\"'vsan.dialog.deleteDiskGroup.migrationMode.signpost.label' | localized\">\n               <clr-signpost-content *clrIfOpen clrPosition=\"center-right\">\n                  <span>{{\"vsan.dialog.unmountDisk.evacuateDataHelp\" | localized}}</span>\n               </clr-signpost-content>\n            </clr-signpost>\n         </div>\n         <vsan-pre-check-evacuation-summary\n               id=\"precheck-evacuation-summary\"\n               [hostMor]=\"host.hostRef\"\n               [evacuationEntityUuid]=\"disk.vsanUuid\"\n               [selectedDecommissionMode]=\"selectedDecommissionMode\"\n               [preCheckRecommendationMessage]=\"'vsan.dialog.precheckEvacuation.recommendationMesaage.disk.unmount' | localized\"\n               (selectedDecommissionModeSummaryChanged)=\"onDecommisionModeSummaryChanged($event)\">\n         </vsan-pre-check-evacuation-summary>\n      </ng-container>\n\n      <!-- Confirmation text -->\n      <div id=\"footer-unmount-disk-group\" class=\"strong-label\">\n         {{\"vsan.dialog.unmountDisk.confirmationLabel\" | localized}}\n      </div>\n   </div>\n</vsan-delete-prompt>\n"],"sourceRoot":"webpack:///"}