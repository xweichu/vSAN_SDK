{"version":3,"sources":["./src/app/generated/hcl-update-offline-spec.ts","./src/app/vsan/update/action/update-actions.module.ts","./src/app/vsan/update/action/release-catalog-update-action.component.ts","./src/app/vsan/update/action/release-catalog-update-action.html","./src/app/vsan/common/directive/upload/file-selector.directive.ts","./src/app/vsan/update/action/hcl-database-update-action.html","./src/app/vsan/update/action/hcl-database-update-action.component.ts"],"names":[],"mappings":"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","file":"36-es2015.js","sourcesContent":["\nexport interface HclUpdateOfflineSpec {\n\n   hclDatabaseFileZlibCompressedContent: any[];\n} //class HclUpdateOfflineSpec\n\nexport module HclUpdateOfflineSpec{\nexport class Factory {\n\n   static create = (hclDatabaseFileZlibCompressedContent: any[]): HclUpdateOfflineSpec => {\n      return { hclDatabaseFileZlibCompressedContent: hclDatabaseFileZlibCompressedContent, };\n   }\n\n\n} //class Factory\n\n} //module HclUpdateOfflineSpec\n","/* Copyright 2019-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {NgModule} from \"@angular/core\";\nimport {HclDatabaseUpdateAction} from \"./hcl-database-update-action.component\";\nimport {VsanReleaseCatalogUpdateActionComponent} from \"./release-catalog-update-action.component\";\nimport {CommonModule} from \"@angular/common\";\nimport {ClarityModule} from \"@clr/angular\";\nimport {FormsModule} from \"@angular/forms\";\nimport {CommonDirectiveModule} from \"@directive/common-directive.module\";\nimport {CommonPipeModule} from \"@pipe/common-pipe.module\";\nimport {DuplicatePciIdUpdateActionComponent} from \"./duplicate-pci-id-update-action.component\";\n\n@NgModule({\n   imports: [\n         CommonModule,\n         ClarityModule,\n         FormsModule,\n         CommonPipeModule,\n         CommonDirectiveModule,\n   ],\n   declarations: [\n         HclDatabaseUpdateAction,\n         VsanReleaseCatalogUpdateActionComponent,\n         DuplicatePciIdUpdateActionComponent,\n   ],\n   exports: [\n         HclDatabaseUpdateAction,\n         VsanReleaseCatalogUpdateActionComponent,\n         DuplicatePciIdUpdateActionComponent,\n   ],\n})\nexport class UpdateActionsModule {\n}","/* Copyright 2018-2019 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, EventEmitter, Input, Output} from \"@angular/core\";\nimport {UpdateDbService} from \"@generated/update-db-service\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {ManagedObject} from \"@service/managed-object\";\n\n/**\n * Component that provides update release catalog action\n */\n@Component({\n   templateUrl: \"release-catalog-update-action.html\",\n   selector: \"vsan-release-catalog-update-action\",\n   styleUrls: [\"update-catalog-action.scss\"]\n})\nexport class VsanReleaseCatalogUpdateActionComponent {\n\n   constructor(private updateDbService: UpdateDbService) {}\n\n   /**\n    * The button styles are different from health details view and vSAN Update view\n    */\n   @Input()\n   btnClasses: string;\n\n   @Input()\n   hasEditPermissions: boolean = false;\n\n   @Output()\n   updateComplete: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n   @Output()\n   error: EventEmitter<string> = new EventEmitter<string>();\n\n   updating: boolean = false;\n\n   uploadCalatog = (bytes: number[]): void => {\n      this.updating = true;\n      this.updateDbService.uploadReleaseDb(ManagedObject.contextObject, bytes)\n         .then(this.handleActionSuccess)\n         .catch(this.handleError);\n   }\n\n   onFileReadError = (event: any): void => {\n      this.error.emit(VsanUiUtils.getString(\"vsan.vc.configure.releaseCatalog.error.fileUpload\"));\n   }\n\n   private handleActionSuccess = (): void => {\n      this.updating = false;\n      this.updateComplete.emit(true);\n   };\n\n   private handleError = (ex: Error): void => {\n      this.updating = false;\n      this.error.emit(VsanUiUtils.getString(\"vsan.vc.configure.releaseCatalog.error.updateCatalog\"));\n   };\n}","<!--Copyright 2018-2020 VMware, Inc. All rights reserved. -- VMware Confidential-->\n<button id=\"upload-catalog-button\"\n        [class]=\"btnClasses\"\n        [vsan-file-selector]=\"'vsan-release-catalog-file-selector'\"\n        (fileRead)=\"uploadCalatog($event)\"\n        (onFileReadError)=\"onFileReadError($event)\"\n        [disabled]=\"updating || !hasEditPermissions\"\n        type=\"button\">\n   {{\"vsan.vc.configure.releaseCatalog.button.update\" | localized}}\n</button>","/* Copyright 2018-2020 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Directive, ElementRef, EventEmitter, HostListener, Input, OnDestroy, OnInit, Output} from \"@angular/core\";\nimport {Logger} from \"../../util/logger\";\nimport * as zlib from \"pako\";\n\n/**\n * Attribute directive used to attach file upload functionality to a button.\n * The uploaded file is compressed using zlib.\n * @elementId - The id of the input element to be created that we serve for browsing a file and reading it.\n *\n * fileRead - Emits event upon successful file read, containing the compressed content of the file.\n * onFileReadError - Emits error event in case error occurs while reading the file.\n */\n@Directive({\n   selector: \"[vsan-file-selector]\",\n})\nexport class FileSelector implements OnInit, OnDestroy {\n\n   @Input(\"vsan-file-selector\")\n   elementId: string;\n\n   @Output()\n   fileRead: EventEmitter<number[]> = new EventEmitter<number[]>();\n\n   @Output()\n   onFileReadError: EventEmitter<void> = new EventEmitter<void>();\n\n   private fileSelector: any;\n   private buttonRef: ElementRef;\n\n   constructor(el: ElementRef) {\n      this.buttonRef = el;\n   }\n\n   ngOnInit(): void {\n      const fileInput: HTMLInputElement = document.createElement(\"input\");\n      fileInput.type = \"file\";\n      fileInput.id = this.elementId;\n      fileInput.hidden = true;\n      document.body.appendChild(fileInput);\n      this.fileSelector = fileInput;\n      this.fileSelector.onchange = this.upload;\n   }\n\n   ngOnDestroy(): void {\n      this.fileSelector = document.getElementById(this.elementId);\n      /* Delete the previous file selector and recreate it,\n       * since otherwise the fileRead emitter looses its subscribers and using the existing one\n       * doesn't trigger upload functionality.\n       */\n      if (this.fileSelector) {\n         document.body.removeChild(this.fileSelector);\n      }\n   }\n\n   @HostListener(\"click\")\n   onBtnClick(): void {\n      this.fileSelector.click();\n   }\n\n   private upload = (fileEvent: any): void => {\n      const file: File = fileEvent.target.files[0];\n      const reader: FileReader = new FileReader();\n      reader.readAsText(file, \"UTF-8\");\n\n      reader.onload = (readerEvent: any) => {\n         const data: string = readerEvent.target.result;\n         try {\n            const bytes: number[] = Array.from(zlib.deflate(data));\n            this.fileRead.emit(bytes);\n         } catch (err) {\n            Logger.error(\"Failed to compress file:\", err);\n            this.onFileReadError.emit();\n         }\n         this.fileSelector.value = null;\n      };\n\n      reader.onerror = () => {\n         Logger.error(\"Failed to load file:\", file);\n         this.fileSelector.value = null;\n         this.onFileReadError.emit();\n      };\n   };\n\n}","<!-- Copyright 2017-2020 VMware, Inc. All rights reserved. VMware Confidential -->\n<button id=\"update-from-file-btn\"\n        [class]=\"btnClasses\"\n        [disabled]=\"updating || isDisabled\"\n        [vsan-file-selector]=\"'hcl-db-file-selector'\"\n        (fileRead)=\"fileContentLoaded($event)\"\n        (onFileReadError)=\"onFileReadError($event)\">\n   {{'vsan.vc.configure.hclDatabase.button.updateOffline' | localized}}\n</button>\n<button id=\"update-online-btn\"\n        [class]=\"btnClasses\"\n        (click)=\"updateOnline()\"\n        [disabled]=\"updating || isDisabled\">\n   {{'vsan.vc.configure.hclDatabase.button.updateOnline' | localized}}\n</button>","/* Copyright 2017-2019 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, EventEmitter, Input, Output} from \"@angular/core\";\nimport {ManagedObject} from \"@service/managed-object\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {HclUpdateOfflineSpec} from \"@generated/hcl-update-offline-spec\";\nimport {UpdateDbService} from \"@generated/update-db-service\";\n\n/**\n * The component that provides the update hcl-db online/offline actions\n */\n@Component({\n   templateUrl: \"hcl-database-update-action.html\",\n   selector: \"vsan-hcl-database-update-action\",\n   styleUrls: [\"update-catalog-action.scss\"]\n})\nexport class HclDatabaseUpdateAction {\n\n   @Input()\n   btnClasses: string;\n\n   @Input()\n   isDisabled: boolean = false;\n\n   @Output()\n   updateComplete: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n   @Output()\n   error: EventEmitter<string> = new EventEmitter();\n\n   updating: boolean;\n\n   constructor(private updateDbService: UpdateDbService) {\n   }\n\n   updateOnline = (): void => {\n      this.updating = true;\n      this.updateDbService.updateHclDbFromWeb(ManagedObject.contextObject)\n                  .then(this.handleActionSuccess)\n                  .catch(this.onUpdateOnlineError);\n   };\n\n   fileContentLoaded = (bytes: number[]): void => {\n      this.updating = true;\n      this.updateDbService.uploadHclDb(ManagedObject.contextObject,\n            HclUpdateOfflineSpec.Factory.create(bytes))\n            .then(this.handleActionSuccess)\n            .catch(this.onUpdateOfflineError);\n   };\n\n   onFileReadError = (event: any): void => {\n      this.updating = false;\n      this.error.emit(VsanUiUtils.getString(\"vsan.vc.configure.hclDatabase.error.fileUpload\"));\n   };\n\n   private handleActionSuccess = (): void => {\n      this.updating = false;\n      this.updateComplete.emit(true);\n   };\n\n   private onUpdateOnlineError = (): void => {\n      this.updating = false;\n      this.error.emit(VsanUiUtils.getString(\"vsan.vc.configure.hclDatabase.error.onlineUpdate\"));\n   };\n\n   private onUpdateOfflineError = (ex: Error): void => {\n      this.updating = false;\n      this.error.emit(ex.toString());\n   };\n\n}"],"sourceRoot":"webpack:///"}