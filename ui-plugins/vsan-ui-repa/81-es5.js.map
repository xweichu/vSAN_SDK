{"version":3,"sources":["webpack:///src/app/vsan/shared-witness/dialog/select-clusters-dialog.component.ts","webpack:///src/app/vsan/shared-witness/common/shared-witness-constants.ts","webpack:///src/app/vsan/shared-witness/common/compatibility-cell.component.ts","webpack:///src/app/vsan/shared-witness/common/shared-witness-route-paths.ts","webpack:///src/app/vsan/shared-witness/common/select-clusters.html","webpack:///src/app/vsan/shared-witness/dialog/select-clusters-dialog.html","webpack:///src/app/vsan/shared-witness/common/select-clusters.component.ts","webpack:///src/app/vsan/shared-witness/common/compatibility-cell.html","webpack:///src/app/vsan/shared-witness/common/shared-witness-common.module.ts"],"names":["SelectClustersDialogComponent","configureSharedWitnessWorkflowBacking","sharedWitnessHostService","witnessHostService","loading","clustersRefs","validationMessages","witnessHostName","witnessHost","contextObject","skipWitnessValidation","Promise","all","getAssignedAndTwoNodeClusters","getWitnessHostNode","then","r","name","getSharedWitnessLimits","twoNodeClusters","sharedWitnessLimits","resetValidation","closeDialog","validateCompatibility","hasValidationError","configureSharedWitnessHost","task","closeModalDialog","isEmpty","validateSharedWitnessHost","infoMessage","getValidateCurrentWitnessHost","result","clustersValidationData","updateClustersValidation","witnessValidationResult","map","i","cluster","witnessHostValidation","handleSharedWitnessHostValidationResult","handleHostValidationError","WARNING","DANGER","includes","validationAlertType","INFO","SharedWitnessConstants","CompatibilityCellComponent","isClusterWitnessedByCurrentHost","isSelected","clusterValidationData","compatible","validationMessage","componentsCount","getString","clrIconShapeClassMap","getClusterValidationShape","CLR_ERROR_STANDARD_ICON_SHAPE","isReachingComponentsLimit","CLR_WARN_STANDARD_ICON_SHAPE","CLR_SUCCESS_STANDARD_ICON_SHAPE","componentsLimit","CLUSTER_COMPONENTS_THRESHOLD_PERC","SharedWitnessRoutePaths","SelectClustersComponent","selectionChanged","selectedClusters","selectedClustersAll","clusterData","areEqual","moRef","emit","clusters","filter","c","length","maxComponentsPerCluster","witnessLimits","getMaxWitnessClustersLabel","clustersCountKey","isExceedingLimit","getAllSelectedClustersCount","getMaxWitnessClusters","maxWitnessClusters","SharedWitnessCommonModule"],"mappings":"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","file":"81-es5.js","sourcesContent":["/* Copyright 2019-2020 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, OnInit} from \"@angular/core\";\nimport {ManagedObject} from \"@service/managed-object\";\nimport {ConfigureSharedWitnessWorkflowBacking} from \"@generated/configure-shared-witness-workflow-backing\";\nimport {TwoHostClusterData} from \"@generated/two-host-cluster-data\";\nimport {AlertType} from \"@component/validation/alert-type\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {WitnessHostValidation, WitnessValidationService} from \"@service/witness-validation.service\";\nimport {WitnessHostValidationResult} from \"@generated/witness-host-validation-result\";\nimport {SharedWitnessClusterValidationData} from \"@generated/shared-witness-cluster-validation-data\";\nimport {SharedWitnessHostService} from \"@generated/shared-witness-host-service\";\nimport {SharedWitnessLimits} from \"@generated/shared-witness-limits\";\n\n@Component({\n   templateUrl: \"select-clusters-dialog.html\",\n   selector: \"vsan-select-clusters-dialog\",\n})\nexport class SelectClustersDialogComponent implements OnInit {\n\n   loading: boolean = false;\n\n   twoNodeClusters: TwoHostClusterData[];\n   clustersRefs: ManagedObject[] = [];\n   sharedWitnessLimits: SharedWitnessLimits;\n\n   infoMessage: string;\n   validationMessages: string[] = [];\n   clustersValidationData: Map<string, SharedWitnessClusterValidationData>;\n\n   witnessHostName: string = \"\";\n   private witnessHost: ManagedObject = ManagedObject.contextObject;\n   // Flag to track if currently selected host & clusters have been validated against backend\n   private skipWitnessValidation: boolean = false;\n\n   constructor(private configureSharedWitnessWorkflowBacking: ConfigureSharedWitnessWorkflowBacking,\n         private sharedWitnessHostService: SharedWitnessHostService,\n         private witnessHostService: WitnessValidationService) {\n   }\n\n   async ngOnInit(): Promise<void> {\n      try {\n         this.loading = true;\n         [this.twoNodeClusters, this.witnessHostName, this.sharedWitnessLimits] = await Promise.all([\n            this.configureSharedWitnessWorkflowBacking.getAssignedAndTwoNodeClusters(this.witnessHost),\n            this.configureSharedWitnessWorkflowBacking.getWitnessHostNode(this.witnessHost).then(r => r.name),\n            this.sharedWitnessHostService.getSharedWitnessLimits(this.witnessHost)]);\n      } catch (e) {\n         this.validationMessages = [e];\n      } finally {\n         this.loading = false;\n      }\n   }\n\n   selectionChanged(clustersRefs: ManagedObject[]): void {\n      // Upon changing the clusters selection we need to call the backend for validation\n      this.resetValidation();\n      this.clustersRefs = clustersRefs;\n   }\n\n   async validate(): Promise<void> {\n      // Don't start validation if it has already passed and cluster/host selection hasn't been changed\n      if (this.skipWitnessValidation) {\n         await this.closeDialog();\n         return;\n      }\n      await this.validateCompatibility();\n      // Don't close dialog if the selected host had validation errors\n      if (!this.hasValidationError()) {\n         await this.closeDialog();\n      }\n   }\n\n   async closeDialog(): Promise<void> {\n      this.loading = true;\n      try {\n         const task: ManagedObject = await this.configureSharedWitnessWorkflowBacking\n               .configureSharedWitnessHost(this.clustersRefs, this.witnessHost, null);\n         VsanUiUtils.closeModalDialog(task);\n      } catch (error) {\n         this.validationMessages = [error];\n      } finally {\n         this.loading = false;\n      }\n   }\n\n   async validateCompatibility(): Promise<void> {\n      this.resetValidation();\n      if (VsanUiUtils.isEmpty(this.validationMessages)) {\n         await this.validateSharedWitnessHost();\n      }\n      if (!this.hasValidationError()) {\n         this.skipWitnessValidation = true;\n      }\n   }\n\n   resetValidation(): void {\n      this.infoMessage = null;\n      this.validationMessages = [];\n      this.skipWitnessValidation = false;\n   }\n\n   private hasValidationError(): boolean {\n      return !VsanUiUtils.isEmpty(this.validationMessages);\n   }\n\n   private async validateSharedWitnessHost(): Promise<void> {\n      this.loading = true;\n      let witnessHostValidation: WitnessHostValidation;\n      try {\n         const result: WitnessHostValidationResult = await this.configureSharedWitnessWorkflowBacking\n               .getValidateCurrentWitnessHost(this.clustersRefs, this.witnessHost);\n         this.clustersValidationData = this.witnessHostService.updateClustersValidation(\n               result.witnessValidationResult, this.clustersValidationData, this.twoNodeClusters.map(i => i.cluster));\n         witnessHostValidation = this.witnessHostService.handleSharedWitnessHostValidationResult(result);\n      } catch (error) {\n         witnessHostValidation = this.witnessHostService.handleHostValidationError(error);\n      }\n      if ([AlertType.WARNING, AlertType.DANGER].includes(witnessHostValidation.validationAlertType)) {\n         this.validationMessages = witnessHostValidation.validationMessages;\n      } else if (AlertType.INFO === witnessHostValidation.validationAlertType) {\n         this.infoMessage = witnessHostValidation.validationMessages[0];\n      }\n      this.loading = false;\n   }\n}","/* Copyright 2020 VMware, Inc. All rights reserved. -- VMware Confidential */\n\nexport enum SharedWitnessConstants {\n   MAX_NUMBER_OF_SHARED_CLUSTERS = 64,\n   CLUSTER_COMPONENTS_THRESHOLD_PERC = 0.9,\n}","/* Copyright 2019-2020 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, Input} from \"@angular/core\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {Icon} from \"@util/icon\";\nimport {SharedWitnessClusterValidationData} from \"@generated/shared-witness-cluster-validation-data\";\nimport {SharedWitnessConstants} from \"./shared-witness-constants\";\n\n@Component({\n   templateUrl: \"compatibility-cell.html\",\n   styleUrls: [\"compatibility-cell.scss\"],\n   selector: \"vsan-compatibility-cell\",\n})\nexport class CompatibilityCellComponent {\n\n   @Input()\n   clusterValidationData: SharedWitnessClusterValidationData;\n\n   @Input()\n   isClusterWitnessedByCurrentHost: boolean = false;\n\n   @Input()\n   private isSelected: boolean;\n\n   showCompatibilityResult() {\n      return this.isSelected // Cluster is not selected, so validation doesn't matter\n            && this.clusterValidationData;\n   }\n\n   getClusterValidationMessage(): string {\n      if (!this.clusterValidationData.compatible) {\n         return this.clusterValidationData.validationMessage;\n      }\n      if (this.clusterValidationData.componentsCount !== null) {\n         return VsanUiUtils.getString(\n               \"vsan.host.sharedWitness.reassign.wizard.selectClusters.validation.compatibleCluster\",\n               this.clusterValidationData.componentsCount);\n      }\n      // componentsCount may not be present if SW validation is not triggered. This happens when:\n      // 1) Host is not a witness and\n      // 2) There is a single robo cluster.\n      return VsanUiUtils.getString(\n            \"vsan.host.sharedWitness.reassign.wizard.selectClusters.validation.compatibleCluster.noComponents\");\n   }\n\n   getClusterValidationClass(): string {\n      return Icon.clrIconShapeClassMap[this.getClusterValidationShape()];\n   }\n\n   getClusterValidationShape(): string {\n      if (!this.clusterValidationData.compatible) {\n         return Icon.CLR_ERROR_STANDARD_ICON_SHAPE;\n      }\n      return this.isReachingComponentsLimit() ?\n            Icon.CLR_WARN_STANDARD_ICON_SHAPE : Icon.CLR_SUCCESS_STANDARD_ICON_SHAPE;\n   }\n\n   isReachingComponentsLimit(): boolean {\n      return this.clusterValidationData.componentsCount >\n            this.clusterValidationData.componentsLimit * SharedWitnessConstants.CLUSTER_COMPONENTS_THRESHOLD_PERC;\n   }\n}","/* Copyright 2020 VMware, Inc. All rights reserved. -- VMware Confidential */\n\nexport enum SharedWitnessRoutePaths {\n   ADD_CLUSTERS_WIZARD_FULL = \"sharedWitnessWizard/addClusters\",\n   ADD_CLUSTERS_WIZARD = \"addClusters\",\n   REASSIGN_WITNESS_WIZARD_FULL = \"sharedWitnessWizard/reassignWitness\",\n   REASSIGN_WITNESS_WIZARD = \"reassignWitness\",\n   SELECT_CLUSTERS_DIALOG_FULL = \"sharedWitness/selectClusters\",\n   SELECT_CLUSTERS_DIALOG = \"selectClusters\",\n   ADD_CLUSTERS_PRECHECK_DIALOG = \"addClustersPrecheck\",\n   REASSIGN_WITNESS_PRECHECK_DIALOG = \"reassignWitnessPrecheck\",\n}","<!-- Copyright 2019-2021 VMware, Inc. All rights reserved. -- VMware Confidential -->\n<div id=\"add-clusters-desc\">\n   {{getAddClustersDescription()}}\n</div>\n<div class=\"progress-block\">\n   <label>{{\"vsan.host.sharedWitness.addClusters.wizard.selectClusters.clustersAdded.label\" | localized}}</label>\n   <div class=\"progress\"\n        [ngClass]=\"{'danger': isExceedingLimit()}\">\n      <progress [value]=\"getAllSelectedClustersCount()\" [max]=\"getMaxWitnessClusters()\"></progress>\n   </div>\n   <span>{{getSelectedClustersCountLabel()}}</span>\n</div>\n<clr-datagrid id=\"witness-host-clusters-list\"\n              class=\"datagrid-compact\"\n              [(clrDgSelected)]=\"selectedClustersAll\"\n              (clrDgSelectedChange)=\"clusterSelectionChanged($event)\">\n   <clr-dg-column id=\"cluster-name-column\" class=\"name-column\">\n      {{\"vsan.host.sharedWitness.reassign.wizard.selectClusters.cluster.name\" | localized}}\n   </clr-dg-column>\n   <clr-dg-column id=\"current-witness-column\" class=\"name-column\">\n      {{\"vsan.host.sharedWitness.addClusters.wizard.selectClusters.cluster.witness\" | localized}}\n   </clr-dg-column>\n   <clr-dg-column id=\"cluster-compatibility-column\">\n      {{\"vsan.host.sharedWitness.reassign.wizard.selectClusters.cluster.compatibility\" | localized}}\n   </clr-dg-column>\n   <clr-dg-row *clrDgItems=\"let clusterData of twoNodeClusters\" [clrDgItem]=\"clusterData\"\n               [clrDgSelectable]=\"!isClusterWitnessedByCurrentHost(clusterData)\"\n               [clrDgSelected]=\"isClusterWitnessedByCurrentHost(clusterData)\"\n               [ngClass]=\"{'disable-action': isClusterWitnessedByCurrentHost(clusterData)}\">\n      <clr-dg-cell class=\"cluster-name-cell\">\n         <vsan-icon-item [label]=\"clusterData.cluster?.name\"\n                         [shape]=\"clusterData.cluster?.primaryIconId\">\n         </vsan-icon-item>\n      </clr-dg-cell>\n      <clr-dg-cell class=\"current-witnesshost-cell\">\n         <vsan-icon-item [label]=\"clusterData.witnessHost?.name\"\n                         [shape]=\"clusterData.witnessHost?.primaryIconId\">\n         </vsan-icon-item>\n      </clr-dg-cell>\n      <!-- Grid rows's height is expanded after triggering validation due to the icon's height reaching datagrid cell padding. -->\n      <clr-dg-cell class=\"cluster-compatibility-cell no-vertical-padding\">\n         <vsan-compatibility-cell vsan-show-title [copyToClipboard]=true\n                                  [isSelected]=\"selectedClustersAll.includes(clusterData)\"\n                                  [clusterValidationData]=\"clustersValidationData &&\n                                  clustersValidationData[clusterData.cluster.moRef.value]\"\n                                  [isClusterWitnessedByCurrentHost]=\"isClusterWitnessedByCurrentHost(clusterData)\">\n         </vsan-compatibility-cell>\n      </clr-dg-cell>\n   </clr-dg-row>\n</clr-datagrid>\n<clr-button-group class=\"btn-link\">\n   <clr-button id=\"validate-clusters-compatibility\"\n               name=\"validate-clusters-compatibility\"\n               type=\"button\"\n               class=\"btn btn-sm\"\n               (click)=\"compatibilityValidate()\"\n               [disabled]=\"!selectedClusters.length\">\n      {{\"vsan.host.sharedWitness.reassign.wizard.selectClusters.validateClusters.label\" | localized}}\n   </clr-button>\n</clr-button-group>","<!-- Copyright 2019-2020 VMware, Inc. All rights reserved. -- VMware Confidential -->\n<vsan-edit-prompt\n      [title]=\"'vsan.host.sharedWitness.addClusters.dialog.title' | localized\"\n      [subtitle]=\"witnessHostName\"\n      [blockContent]=\"loading\"\n      [blockButton]=\"loading || !clustersRefs?.length\"\n      [confirmText]=\"'vsan.common.add' | localized\"\n      [(alertMessages)]=\"validationMessages\"\n      (onConfirm)=\"validate()\">\n   <vsan-validation id=\"info-message\"\n                    alertType=\"info\"\n                    *ngIf=\"infoMessage\"\n                    [alert]=\"infoMessage\"\n                    [allowClose]=\"false\"\n                    [isSmall]=\"true\">\n   </vsan-validation>\n  <vsan-select-clusters [twoNodeClusters]=\"twoNodeClusters\"\n                        [clustersValidationData]=\"clustersValidationData\"\n                        [witnessLimits]=\"sharedWitnessLimits\"\n                        (selectionChanged)=\"selectionChanged($event)\"\n                        (validateCompatibility)=\"validateCompatibility()\">\n  </vsan-select-clusters>\n</vsan-edit-prompt>\n","/* Copyright 2019-2020 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, EventEmitter, Input, Output} from \"@angular/core\";\nimport {ManagedObject} from \"@service/managed-object\";\nimport {TwoHostClusterData} from \"@generated/two-host-cluster-data\";\nimport {SharedWitnessClusterValidationData} from \"@generated/shared-witness-cluster-validation-data\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {SharedWitnessLimits} from \"@generated/shared-witness-limits\";\n\n@Component({\n   templateUrl: \"select-clusters.html\",\n   styleUrls: [\"select-clusters.scss\"],\n   selector: \"vsan-select-clusters\",\n})\nexport class SelectClustersComponent {\n\n   @Input()\n   witnessLimits: SharedWitnessLimits;\n\n   @Input()\n   clustersValidationData: Map<string, SharedWitnessClusterValidationData>;\n\n   @Input()\n   twoNodeClusters: TwoHostClusterData[];\n\n   @Output()\n   selectionChanged: EventEmitter<ManagedObject[]> = new EventEmitter<ManagedObject[]>();\n\n   @Output()\n   validateCompatibility: EventEmitter<void> = new EventEmitter<void>();\n\n   // Selected clusters excluding ones witnessed by the current host\n   selectedClusters: TwoHostClusterData[] = [];\n\n   // Datagrid model for selection.\n   selectedClustersAll: TwoHostClusterData[] = [];\n\n   isClusterWitnessedByCurrentHost(clusterData: TwoHostClusterData) {\n      if (clusterData.witnessHost) {\n         return ManagedObject.areEqual(clusterData.witnessHost.moRef, ManagedObject.contextObject);\n      }\n      return false;\n   }\n\n   compatibilityValidate() {\n      this.validateCompatibility.emit();\n   }\n\n   clusterSelectionChanged(clusters: TwoHostClusterData[]) {\n      // Exclude already witnessed clusters\n      this.selectedClusters = clusters.filter(c => !this.isClusterWitnessedByCurrentHost(c));\n      const clustersRefs: ManagedObject[] = this.selectedClusters.map(c => c.cluster.moRef);\n      this.selectionChanged.emit(clustersRefs);\n   }\n\n   getAllSelectedClustersCount(): number {\n      return this.selectedClustersAll.length;\n   }\n\n   getAddClustersDescription(): string {\n      const maxComponentsPerCluster: string | number =\n            (this.witnessLimits && this.witnessLimits.maxComponentsPerCluster) ?\n                  this.witnessLimits.maxComponentsPerCluster : VsanUiUtils.getString(\"vsan.na.label\");\n      return VsanUiUtils.getString(\"vsan.host.sharedWitness.addClusters.wizard.selectClusters.description\",\n            this.getMaxWitnessClustersLabel(), maxComponentsPerCluster);\n   }\n\n   getSelectedClustersCountLabel(): string {\n      const clustersCountKey: string = this.isExceedingLimit() ?\n            \"vsan.host.sharedWitness.addClusters.wizard.selectClusters.clustersAdded.count.exceeded\" :\n            \"vsan.host.sharedWitness.addClusters.wizard.selectClusters.clustersAdded.count\";\n      return VsanUiUtils.getString(\n            clustersCountKey, this.getAllSelectedClustersCount(), this.getMaxWitnessClustersLabel());\n   }\n\n   isExceedingLimit(): boolean {\n      return this.getAllSelectedClustersCount() > this.getMaxWitnessClusters();\n   }\n\n   private getMaxWitnessClustersLabel(): string | number {\n      return this.getMaxWitnessClusters() ? this.getMaxWitnessClusters() : VsanUiUtils.getString(\"vsan.na.label\");\n   }\n\n   getMaxWitnessClusters(): number {\n      return (this.witnessLimits && this.witnessLimits.maxWitnessClusters) ? this.witnessLimits.maxWitnessClusters : 0;\n   }\n}","<!-- Copyright 2019 VMware, Inc. All rights reserved. -- VMware Confidential -->\n\n<ng-container *ngIf=\"showCompatibilityResult() && !isClusterWitnessedByCurrentHost\">\n   <clr-icon *ngIf=\"getClusterValidationShape()\"\n             [attr.shape]=\"getClusterValidationShape()\"\n             class=\"is-solid {{getClusterValidationClass()}}\">\n   </clr-icon>\n   <span>\n      {{getClusterValidationMessage()}}\n   </span>\n</ng-container>\n<span *ngIf=\"isClusterWitnessedByCurrentHost\">\n   {{'vsan.host.sharedWitness.addClusters.wizard.selectClusters.validation.alreadyAdded' | localized}}\n</span>\n","/* Copyright 2019-2020 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {NgModule} from \"@angular/core\";\nimport {SelectClustersComponent} from \"./select-clusters.component\";\nimport {CompatibilityCellComponent} from \"./compatibility-cell.component\";\nimport {ClarityModule} from \"@clr/angular\";\nimport {CommonModule} from \"@angular/common\";\nimport {PromptModule} from \"@component/dialog/prompt/prompt.module\";\nimport {CommonPipeModule} from \"@pipe/common-pipe.module\";\nimport {CommonDirectiveModule} from \"@directive/common-directive.module\";\nimport {SelectClustersDialogComponent} from \"../dialog/select-clusters-dialog.component\";\nimport {CommonCellsModule} from \"@component/cell/common-cells.module\";\nimport {ValidationModule} from \"@component/validation/validation.module\";\n\n@NgModule({\n   imports: [\n      CommonModule,\n      ClarityModule,\n      PromptModule,\n      CommonPipeModule,\n      CommonDirectiveModule,\n      CommonCellsModule,\n      ValidationModule,\n   ],\n   declarations: [\n      CompatibilityCellComponent,\n      SelectClustersComponent,\n      SelectClustersDialogComponent,\n   ],\n   exports: [\n      CompatibilityCellComponent,\n      SelectClustersComponent,\n      SelectClustersDialogComponent,\n   ],\n})\n\nexport class SharedWitnessCommonModule {\n}"]}