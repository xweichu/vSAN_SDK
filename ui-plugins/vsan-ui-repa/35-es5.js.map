{"version":3,"sources":["webpack:///src/app/vsan/common/component/cell/list-cell.component.ts","webpack:///src/app/vsan/common/component/cell/health-link-cell.component.ts","webpack:///src/app/vsan/common/component/cell/health-link-cell.html","webpack:///src/app/vsan/common/pipe/psp-health-label-class.pipe.ts","webpack:///src/app/vsan/common/component/cell/psp-health-state-item.component.ts","webpack:///src/app/vsan/common/component/cell/health-test-value.component.ts","webpack:///src/app/vsan/common/component/cell/list-cell.html","webpack:///src/app/vsan/common/component/cell/psp-health-state-item.html","webpack:///src/app/vsan/common/pipe/psp-health-status-text.pipe.ts","webpack:///src/app/vsan/common/component/cell/health-test-value.html"],"names":["ListCell","SEPARATOR","getString","values","value","getListCellData","HealthLinkCellComponent","cellValue","link","PspHealthLabelClassPipe","state","getPspHealthStateLabelClass","PspHealthStateItemComponent","HealthTestValueComponent","navigationService","VsanHealthUtil","isVirtualObjectsLinkShown","enableActionLink","navigateToVirtualObjects","healthState","compositeHealth","context","filterHealthStates","getHealthStates","navigateTo","VIRTUAL_OBJECTS","result","push","complianceState","incomplianceReason","rebuildState","policyState","isRemoteAccessibleCell","valueCell","REMOTE_ACCESSIBLE","healthInfo","status","PspHealthStatusTextPipe","getPspObjectHealthStatusText"],"mappings":";;;;;;;;;;;;;;;;;;;;AAGA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;UAQaA,Q;AALb;AAAA;;AAMY,eAAAC,SAAA,GAAoB,4DAAYC,SAAZ,CAAsB,mBAAtB,CAApB;AAOT,eAAAC,MAAA,GAAmB,EAAnB;AACF;;;;eANE,aACSC,KADT,EAC8B;AAC3B,iBAAKD,MAAL,GAAc,sEAAeE,eAAf,CAA+BD,KAA/B,CAAd;AACF;;;;;;;;;;;;;;;;;;;;;ACRJ;AAAA;;;AAAA;AAAA;AAAA;;UAAaE,uB;;;;;;;eAGV,aACSF,KADT,EAC8B;AAC3B,gBAAI,CAACA,KAAD,IAAU,CAACA,KAAK,CAACG,SAArB,EAAgC;AAC7B;AACF;;AACD,iBAAKC,IAAL,GAAYJ,KAAK,CAACG,SAAlB;AACF;;;iBAED,4BAAgB,CACb;AACF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;uECpBD;AAAA;AAAA,sBAEgC,UAFhC;;AAEG;;;;;AAFH;AAAA,sB,IAEgC,0F,IAAA,I,EAAA;AAAA;AAAA;;AAAA;AAEhC,S;AAAA;;;uEACA,sJ,IAEmB,0F,IAEnB,I,EAAA;AAAA;;AAHG;;AADH,wBACG,SADH;;AAEmB;;AAAA;AAEnB,S;AAAA;;;uEAVH,yH,IAA2B,+E,IACxB,yH,GAAA;AAAA;AAAA,gB,GAII,+E,IACJ,yH,GAAA;AAAA;AAAA,gB,GAII,4E,IACP;AAAA;AAVM,6BAAuB,KAAvB,CAAuB,UAAvB;;AAAH,wBAAG,SAAH;;AAKG,8BAAwB,KAAxB,CAAwB,UAAxB;;AAAH,wBAAG,SAAH;AAA2B,S,EAAA,I;AAAA;;;uEAPkD,4E,IAChF,yH,GAAA;AAAA;AAAA,gB,GAWe,4E,IACf;AAAA;AAZc,6BAAY,KAAZ;;AAAd,wBAAc,SAAd;AAA0B,S,EAAA,I;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;ACC1B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;UAMaE,uB;;;;;;;iBACV,mBAAUC,KAAV,EAAqC;AAClC,mBAAO,sEAAeC,2BAAf,CAA2CD,KAA3C,CAAP;AACF;;;;;;;;;;;;;;;;;;;;;ACFJ;AAAA;;;AAAA;AAAA;AAAA;;UAAaE,2B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACNb;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;UAaaC,wB;AAYV,0CAAoBC,iBAApB,EAA0D;AAAA;;AAAA;;AAAtC,eAAAA,iBAAA,GAAAA,iBAAA;AAXpB,eAAAC,cAAA,GAAwC,qEAAxC;AAMA,eAAAC,yBAAA,GAAqC,IAArC;AAGA,eAAAC,gBAAA,GAA4B,IAA5B;;AAKA,eAAAC,wBAAA,GAA2B,UAACC,WAAD,EAAqCC,eAArC,EAAoF;AAC5G,gBAAMC,OAAO,GAA0B,EAAvC;AACAA,mBAAO,CAACC,kBAAR,GAA6B,KAAI,CAACC,eAAL,CAAqBJ,WAArB,EAAkCC,eAAlC,CAA7B;;AACA,iBAAI,CAACN,iBAAL,CAAuBU,UAAvB,CAAkC,iFAAkBC,eAApD,EAAqE,IAArE,EAA2EJ,OAA3E;AACF,WAJD;AAFC;;;;iBAQO,yBAAgBF,WAAhB,EACFC,eADE,EACwC;AAC7C,gBAAMM,MAAM,GAAsB,EAAlC;;AACA,gBAAIP,WAAJ,EAAiB;AACdO,oBAAM,CAACC,IAAP,CAAYR,WAAZ;AACF;;AACD,gBAAIC,eAAJ,EAAqB;AAClB,kBAAIA,eAAe,CAACQ,eAApB,EAAqC;AAClCF,sBAAM,CAACC,IAAP,CAAYP,eAAe,CAACQ,eAA5B;AACF;;AACD,kBAAIR,eAAe,CAACS,kBAApB,EAAwC;AACrCH,sBAAM,CAACC,IAAP,CAAYP,eAAe,CAACS,kBAA5B;AACF;;AACD,kBAAIT,eAAe,CAACU,YAApB,EAAkC;AAC/BJ,sBAAM,CAACC,IAAP,CAAYP,eAAe,CAACU,YAA5B;AACF;;AACD,kBAAIV,eAAe,CAACW,WAApB,EAAiC;AAC9BL,sBAAM,CAACC,IAAP,CAAYP,eAAe,CAACW,WAA5B;AACF;AACH;;AACD,mBAAOL,MAAP;AACF;;;iBAED,wCAA4B;AACzB,mBAAO,KAAKV,yBAAL,IAAkC,CAAC,KAAKgB,sBAAL,EAA1C;AACF;;;iBAEO,kCAAsB;AAC3B,mBAAO,KAAKC,SAAL,IAAkB,KAAKA,SAAL,CAAe1B,SAAjC,IACD,KAAK0B,SAAL,CAAe1B,SAAf,KAA6B,0FAAsB2B,iBADzD;AAEF;;;iBAED,6BAAoBC,UAApB,EAA8C;AAC3C,mBAAOA,UAAU,CAACC,MAAlB;AACF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;uECpEE,qK,IAE6B,I,EAAA;AAAA;AADvB,6BAAuB,UAAvB;;AADN,wBACM,SADN;AAC6B,S;AAAA;;;uEAFhC,yH,IAAsD,kF,IACnD,0G,GAAA;AAAA;AAAA,gB,GAEoC,0F,IAEvC;AAJS;;AAAN,wBAAM,SAAN;AAAuB,S,EAAA;AAEa;;AAAA;AAEvC,S;AAAA;;;uEAP6E,4E,IAChF,iJ,IAA0B,+E,IACvB,0G,GAAA;AAAA;AAAA,gB,GAKO,4E,IACV;AAAA;AANS,6BAA+C,OAA/C;;AAAN,wBAAM,SAAN;AAAqD,S,EAAA,I;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;uECDxD,wJ,GAAA;AAAA;AAAA;AAAA,gB,EAEM,wD,EACA,wD,GAA+C,oF,GAAA,wD,GAErD;AAAA;AAJM;;AACA,0KAAqD,eAArD;;AAFN,wBACM,SADN,EAEM,SAFN;AAE2D,S,EAAA;AAAA;;AACrD,0KAA8C,eAA9C;;AAHN,wBAGM,SAHN;;AAGqD;;AAAA;AAErD,S;AAAA;;;mXANgF,4E,IAChF,6H,GAAA;AAAA;AAAA,gB,GAGqD;AAAA;AAH/C,6BAAsB,eAAtB;;AAAN,wBAAM,SAAN;AAA4B,S,EAAA,I;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;ACC5B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;UAMaC,uB;;;;;;;iBACV,mBAAU3B,KAAV,EAAqC;AAClC,mBAAO,sEAAe4B,4BAAf,CAA4C5B,KAA5C,CAAP;AACF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;uECVJ,yH,IAA2D,oF,IAAA,I,EAAA;AAAA;AAAA;;AAAA;AAE3D,S;AAAA;;;uEACA,yH,IAA8D,oF,IAAA,I,EAAA;AAAA;;AAAA;;AAAA;AAE9D,S;AAAA;;;uEACA,yH,IAA2D,oF,GAAA,wD,GAAA,I,EAAA;AAAA;;AAAA;;AAAA;AAE3D,S;AAAA;;;uEACA,sU,GAAA;AAAA;AAAA;AAAA,gB,GAE4F,4E,IAC5F;AAAA;;AAFyB,qEAAsE,UAAtE,CAAsE,SAAtE;;AACA,qEAAkE,UAAlE,CAAkE,SAAlE;;AAFzB,wBACyB,SADzB,EAEyB,SAFzB;AAE2F,S,EAAA,I;AAAA;;;uEAE3F,sU,GAAA;AAAA;AAAA;AAAA;AAAA,gB,GAG0F,4E,IAC1F;AAAA;;AAHyB,6FAA2F,UAA3F,CAA2F,SAA3F;;AACA,6FAAuF,UAAvF,CAAuF,SAAvF;;AACA,mEAAgE,UAAhE,CAAgE,SAAhE;;AAHzB,wBACyB,SADzB,EAEyB,SAFzB,EAGyB,SAHzB;AAGyF,S,EAAA,I;AAAA;;;uEAGtF,yH,IAA+F,I,EAAA,I;AAAA;;;uEADlG,yH,IAA6D,+E,IAC1D,0H,GAAA;AAAA;AAAA;AAAA,gB,EAAc;AAAA;AAAA,U,GAAgG,4E,IACjH;AAAA;;AADiB;;AAAA;;AAAd,wBAAc,SAAd,EAAc,SAAd;AAA8F,S,EAAA,I;AAAA;;;uEAG9F,yH,IAAkG,I,EAAA,I;AAAA;;;uEADrG,yH,IAAoE,+E,IACjE,0H,GAAA;AAAA;AAAA;AAAA,gB,EAAc;AAAA;AAAA,U,GAAmG,4E,IACpH;AAAA;;AADiB;;AAAA;;AAAd,wBAAc,SAAd,EAAc,SAAd;AAAiG,S,EAAA,I;AAAA;;;uEAEpG,qW,GAAA;AAAA;AAAA,gB,GACmE,4E,IACnE;AAAA;AAD4B,6BAAsC,UAAtC,CAAsC,SAAtC;;AAD5B,wBAC4B,SAD5B;AACkE,S,EAAA,I;AAAA;;;uEAElE,yU,GAAA;AAAA;AAAA;AAAA,gB,GAE4D,4E,IAC5D;AAAA;;AAFsB,+DAAiD,UAAjD;;AACA,6BAAqC,iBAArC;;AAFtB,wBACsB,SADtB,EAEsB,SAFtB;AAE2D,S,EAAA,I;AAAA;;;uEAE3D,6R,GAAA;AAAA;AAAA,gB,GACmC,4E,IACnC;AAAA;AADgB,6BAAkB,UAAlB;;AADhB,wBACgB,SADhB;AACkC,S,EAAA,I;AAAA;;;uEAElC,gV,GAAA;AAAA;AAAA,gB,GAC0C,4E,IAC1C;AAAA;AADuB,6BAAkB,UAAlB;;AADvB,wBACuB,SADvB;AACyC,S,EAAA,I;AAAA;;;uEAOnC;AAAA;AAAA,sBAEqE,UAFrE;;AAEG;;;;;AAFH;AAAA,sB,IAEqE,gG,GAAA,wD,GAAA,I,EAAA;AAAA;;AAAA;AAErE,S;AAAA;;;uEAT8F,+E,IACjG,yJ,IAAkC,kF,IAC/B,qV,GAAA;AAAA;AAAA;AAAA,gB,GAC4D,kF,IACnC,kF,IACzB,2H,GAAA;AAAA;AAAA,gB,GAII,+E,IACD,4E,IACT;AAAA;AAR8B,4BAAmC,QAAnC,CAAmC,eAAnC;AADA,4BAA4B,QAA5B,CAA4B,YAA5B;;AAAxB,wBACwB,SADxB,EAAwB,SAAxB;;AAIG,6BAAsC,6BAAtC;;AADH,wBACG,SADH;AACyC,S,EAAA,I;AAAA;;;2VA5CsC,4E,IACrF,0H,GAAA;AAAA;AAAA,gB,GAEe,4E,IACf,0H,GAAA;AAAA;AAAA,gB,GAEe,4E,IACf,0H,GAAA;AAAA;AAAA,gB,GAEe,4E,IACf,0H,GAAA;AAAA;AAAA,gB,GAG0B,4E,IAC1B,0H,GAAA;AAAA;AAAA,gB,GAI0B,4E,IAC1B,0H,GAAA;AAAA;AAAA,gB,GAEe,4E,IACf,0H,GAAA;AAAA;AAAA,gB,GAEe,4E,IACf,2H,GAAA;AAAA;AAAA,gB,GAE6B,4E,IAC7B,2H,GAAA;AAAA;AAAA,gB,GAGuB,4E,IACvB,2H,GAAA;AAAA;AAAA,gB,GAEiB,4E,IACjB,2H,GAAA;AAAA;AAAA,gB,GAEwB,4E,IACxB,wI,IAWc,4E,IACd;AAAA;;AAjDc,2DAA4C,UAA5C;;AAAd,wBAAc,SAAd;;AAGc,8DAA+C,UAA/C;;AAAd,wBAAc,SAAd;;AAGc,2DAA4C,UAA5C;;AAAd,yBAAc,SAAd;;AAGyB,mEAAoD,UAApD;;AAAzB,yBAAyB,SAAzB;;AAIyB,iEAAkD,UAAlD;;AAAzB,yBAAyB,SAAzB;;AAKc,6DAA8C,UAA9C;;AAAd,yBAAc,SAAd;;AAGc,oEAAqD,UAArD;;AAAd,yBAAc,SAAd;;AAG4B,qEAAsD,UAAtD;;AAA5B,yBAA4B,SAA5B;;AAGsB,0DAA2C,UAA3C;;AAAtB,yBAAsB,SAAtB;;AAIgB,oEAAqD,UAArD;;AAAhB,yBAAgB,SAAhB;;AAGuB,4DAA4C,UAA5C;;AAAvB,yBAAuB,UAAvB;AAAmE,S,EAAA,I;AAAA","file":"35-es5.js","sourcesContent":["/* Copyright 2020 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, Input} from \"@angular/core\";\nimport {VsanTestCell} from \"@generated/vsan-test-cell\";\nimport {VsanHealthUtil} from \"@util/vsan-health-util\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\n\n@Component({\n   templateUrl: \"list-cell.html\",\n   styleUrls: [\"list-cell.scss\"],\n   selector: \"vsan-list-cell\",\n})\nexport class ListCell {\n   readonly SEPARATOR: string = VsanUiUtils.getString(\"vsan.common.comma\");\n\n   @Input()\n   set cell(value: VsanTestCell) {\n      this.values = VsanHealthUtil.getListCellData(value);\n   }\n\n   values: string[] = [];\n}","/* Copyright 2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, Input} from \"@angular/core\";\nimport {VsanTestCell} from \"@generated/vsan-test-cell\";\nimport {VsanTestLink} from \"@generated/vsan-test-link\";\n\n@Component({\n   templateUrl: \"health-link-cell.html\",\n   selector: \"vsan-health-link-cell\",\n})\nexport class HealthLinkCellComponent {\n   link: VsanTestLink;\n\n   @Input()\n   set cell(value: VsanTestCell) {\n      if (!value || !value.cellValue) {\n         return;\n      }\n      this.link = value.cellValue as VsanTestLink;\n   }\n\n   navigateInternal(): void {\n      // TODO [mavrodievd] Implement internal navigation. Currently there are no health tests having internal links.\n   }\n}","<!-- Copyright 2021 VMware, Inc. All rights reserved. -- VMware Confidential -->\n<ng-container *ngIf=\"link\">\n   <a *ngIf=\"link.isInternal\"\n      href=\"javascript://\"\n      (click)=\"navigateInternal()\">\n      {{link.title}}\n   </a>\n   <a *ngIf=\"!link.isInternal\"\n      href=\"{{link.externalUrl}}\"\n      target=\"_blank\">\n      {{link.title}}\n   </a>\n</ng-container>\n","/* Copyright 2020 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Pipe} from \"@angular/core\";\nimport {VsanHealthUtil} from \"@util/vsan-health-util\";\nimport {PspObjectHealthState} from \"@generated/psp-object-health-state\";\n\n@Pipe({\n   name: \"pspHealthStateLabelClass\",\n})\nexport class PspHealthLabelClassPipe {\n   transform(state: PspObjectHealthState): string {\n      return VsanHealthUtil.getPspHealthStateLabelClass(state);\n   }\n}","/* Copyright 2020 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, Input} from \"@angular/core\";\nimport {PspObjectHealthState} from \"@generated/psp-object-health-state\";\n\n@Component({\n   templateUrl: \"psp-health-state-item.html\",\n   styleUrls: [\"health-state-item.scss\"],\n   selector: \"vsan-psp-health-state-item\",\n})\nexport class PspHealthStateItemComponent {\n   @Input()\n   pspHealthState: PspObjectHealthState;\n}","/* Copyright 2019-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, Input} from \"@angular/core\";\nimport {VsanTestCell} from \"@generated/vsan-test-cell\";\nimport {BaseHealthState, VsanHealthUtil} from \"@util/vsan-health-util\";\nimport {VirtualObjectsContext} from \"@navigation/context/virtual-objects-context\";\nimport {NavigationService, PlatformExtension} from \"@navigation/navigation.service\";\nimport {VsanObjectHealthState} from \"@generated/vsan-object-health-state\";\nimport {VsanObjectCompositeHealth} from \"@generated/vsan-object-composite-health\";\nimport {VsanHealthInfo} from \"@generated/vsan-health-info\";\nimport {VsanHealthStatus} from \"@generated/vsan-health-status\";\n\n@Component({\n   templateUrl: \"health-test-value.html\",\n   selector: \"vsan-health-test-value\",\n   styleUrls: [\"health-test-value.scss\"],\n})\nexport class HealthTestValueComponent {\n   VsanHealthUtil: typeof VsanHealthUtil = VsanHealthUtil;\n\n   @Input()\n   valueCell: VsanTestCell;\n\n   @Input()\n   isVirtualObjectsLinkShown: boolean = true;\n\n   @Input()\n   enableActionLink: boolean = true;\n\n   constructor(private navigationService: NavigationService) {\n   }\n\n   navigateToVirtualObjects = (healthState: VsanObjectHealthState, compositeHealth: VsanObjectCompositeHealth) => {\n      const context: VirtualObjectsContext = {};\n      context.filterHealthStates = this.getHealthStates(healthState, compositeHealth);\n      this.navigationService.navigateTo(PlatformExtension.VIRTUAL_OBJECTS, null, context);\n   };\n\n   private getHealthStates(healthState: VsanObjectHealthState,\n         compositeHealth: VsanObjectCompositeHealth): BaseHealthState[] {\n      const result: BaseHealthState[] = [];\n      if (healthState) {\n         result.push(healthState);\n      }\n      if (compositeHealth) {\n         if (compositeHealth.complianceState) {\n            result.push(compositeHealth.complianceState);\n         }\n         if (compositeHealth.incomplianceReason) {\n            result.push(compositeHealth.incomplianceReason);\n         }\n         if (compositeHealth.rebuildState) {\n            result.push(compositeHealth.rebuildState);\n         }\n         if (compositeHealth.policyState) {\n            result.push(compositeHealth.policyState);\n         }\n      }\n      return result;\n   }\n\n   getIsVirtualObjectsLinkShown(): boolean {\n      return this.isVirtualObjectsLinkShown && !this.isRemoteAccessibleCell();\n   }\n\n   private isRemoteAccessibleCell(): boolean {\n      return this.valueCell && this.valueCell.cellValue &&\n            this.valueCell.cellValue === VsanObjectHealthState.REMOTE_ACCESSIBLE;\n   }\n\n   getHealthInfoStatus(healthInfo: VsanHealthInfo): VsanHealthStatus {\n      return healthInfo.status;\n   }\n}\n","<!-- Copyright 2020 VMware, Inc. All rights reserved. -- VMware Confidential -->\n<div class=\"cell-content\">\n   <span *ngFor=\"let value of values; let index = index\">\n      <span *ngIf=\"index > 0\"\n            [innerHTML]=\"SEPARATOR\"\n            class=\"delimiter bold\"></span>\n      {{value}}\n   </span>\n</div>","<!-- Copyright 2020 VMware, Inc. All rights reserved. -- VMware Confidential -->\n<span *ngIf=\"pspHealthState\"\n      class=\"label\"\n      [ngClass]=\"pspHealthState | pspHealthStateLabelClass\"\n      [title]=\"pspHealthState | pspHealthStatusText\">\n   {{pspHealthState | pspHealthStatusText}}\n</span>","/* Copyright 2020 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Pipe} from \"@angular/core\";\nimport {VsanHealthUtil} from \"@util/vsan-health-util\";\nimport {PspObjectHealthState} from \"@generated/psp-object-health-state\";\n\n@Pipe({\n   name: \"pspHealthStatusText\",\n})\nexport class PspHealthStatusTextPipe {\n   transform(state: PspObjectHealthState): string {\n      return VsanHealthUtil.getPspObjectHealthStatusText(state);\n   }\n}","<!-- Copyright 2019-2020 VMware, Inc. All rights reserved. -- VMware Confidential -->\n<ng-container *ngIf=\"VsanHealthUtil.isTextCell(valueCell)\">\n   {{valueCell.cellValue}}\n</ng-container>\n<ng-container *ngIf=\"VsanHealthUtil.isNumericCell(valueCell)\">\n   {{VsanHealthUtil.formatedNumber(valueCell.cellValue, valueCell.cellType)}}\n</ng-container>\n<ng-container *ngIf=\"VsanHealthUtil.isDateCell(valueCell)\">\n   {{(valueCell.cellValue * 1000) | l10nDate}}\n</ng-container>\n<vsan-health-status-cell *ngIf=\"VsanHealthUtil.isHealthStatusCell(valueCell)\"\n                         [iconClass]=\"VsanHealthUtil.getHealthStatusClass(valueCell.cellValue)\"\n                         [shape]=\"VsanHealthUtil.getHealthStatusShape(valueCell.cellValue)\">\n</vsan-health-status-cell>\n<vsan-health-status-cell *ngIf=\"VsanHealthUtil.isHealthInfoCell(valueCell)\"\n                         [iconClass]=\"VsanHealthUtil.getHealthStatusClass(getHealthInfoStatus(valueCell.cellValue))\"\n                         [shape]=\"VsanHealthUtil.getHealthStatusShape(getHealthInfoStatus(valueCell.cellValue))\"\n                         [label]=\"VsanHealthUtil.getHealthInfoLabel(valueCell.cellValue)\">\n</vsan-health-status-cell>\n<ng-container *ngIf=\"VsanHealthUtil.isStatusCell(valueCell)\">\n   <ng-container *ngTemplateOutlet=\"healthStateItem;context: {healthStatus: valueCell.cellValue}\"></ng-container>\n</ng-container>\n<ng-container *ngIf=\"VsanHealthUtil.isHealthV2StateCell(valueCell)\">\n   <ng-container *ngTemplateOutlet=\"healthStateItem;context: {compositeHealth: valueCell.cellValue}\"></ng-container>\n</ng-container>\n<vsan-psp-health-state-item *ngIf=\"VsanHealthUtil.isPspHealthStateCell(valueCell)\"\n                            [pspHealthState]=\"valueCell.cellValue\">\n</vsan-psp-health-state-item>\n<vsan-health-mor-cell *ngIf=\"VsanHealthUtil.isMorCell(valueCell)\"\n                      [data]=\"VsanHealthUtil.getMorCellData(valueCell)\"\n                      [enableActionLink]=\"enableActionLink\">\n</vsan-health-mor-cell>\n<vsan-list-cell *ngIf=\"VsanHealthUtil.isPrimitiveListCell(valueCell)\"\n                [cell]=\"valueCell\">\n</vsan-list-cell>\n<vsan-health-link-cell *ngIf=\"VsanHealthUtil.isLinkCell(valueCell)\"\n                       [cell]=\"valueCell\">\n</vsan-health-link-cell>\n<ng-template #healthStateItem let-healthStatus=\"healthStatus\" let-compositeHealth=\"compositeHealth\">\n   <div class=\"health-state-wrapper\">\n      <vsan-health-state-item [healthState]=\"healthStatus\"\n                              [compositeHealth]=\"compositeHealth\">\n      </vsan-health-state-item>\n      <a href=\"javascript://\"\n         *ngIf=\"getIsVirtualObjectsLinkShown()\"\n         (click)=\"navigateToVirtualObjects(healthStatus, compositeHealth)\">\n         {{\"vsan.monitor.health.healthState.viewDetails\" | localized}}\n      </a>\n   </div>\n</ng-template>\n"]}