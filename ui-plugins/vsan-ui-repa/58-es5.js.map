{"version":3,"sources":["webpack:///src/app/vsan/common/directive/clr-button-group/clr-button-base.directive.ts","webpack:///src/app/vsan/common/component/datetime-picker/time-range-picker/time-range-picker.html","webpack:///src/app/vsan/common/service/performance-persistence.service.ts","webpack:///src/app/vsan/common/component/datetime-picker/time-range-picker/time-range-picker.component.ts","webpack:///src/app/vsan/common/util/vsan-dialog-util.ts","webpack:///src/app/vsan/common/directive/external-link/external-link.directive.ts"],"names":["ClrButtonBaseDirective","clrButton","name","Math","random","toString","directiveHolder","directives","push","PersistedSelection","PerformancePersistenceService","storageService","CACHE_DURATION_IN_MS","HOUR_IN_MILLISECONDS","CACHE_KEY","timeRange","state","expiresIn","Date","getTime","fullTimeRangeData","savedObject","fullTimeRangeSelection","set","persistedSelection","get","isCacheExpired","clearCacheIfExpired","persistedTimeRange","getPersistedSelection","remove","nowTimestamp","VsanTimeRangePickerComponent","perfProvider","refWatcher","perfPersistenceService","HR_AUTO_REFRESH_INTERVAL_MS","HR_INTERVAL_HOUR","RangePickerState","savedTimeRanges","hourIntervalError","getString","loading","DateFormat","enabled","allowSaving","_realtimeSupported","changeRange","initRange","_currentTimeRange","value","_currentPickerState","_setTimerange","_clusterRef","fetch","_fromDate","val","validate","_toDate","_hourInterval","realtimeSupported","isRealtime","currentPickerState","LAST_X_HOURS","noStateChange","isUnsupportedState","isLeavingRealtime","clearIntervals","_setCurrentPickerState","setInterval","extendCurrentTimeRange","createTimeRange","createDefaultStartTime","currentTimeRange","emit","timerange","REAL_TIME","initDefaultPicker","fromDate","from","toDate","to","hourInterval","currentOptionLabel","CUSTOM_RANGE","SAVED_RANGE","error","createDefaultEndTime","setDefaultTimeRange","getSavedTimeRanges","clusterRef","then","result","defaultSelectedTimeStart","createNoSecondsDate","getHourInterval","startTime","endTime","range","updateCurrentTimeRange","setSize","open","timeRangeIndex","findIndex","savedTimeRange","areEqual","splice","onTimeRangeDeletion","length","onRangeLastXHoursClick","onSelectTimeRange","fromDateError","toDateError","hourIntervalInvalid","isDecimal","currentTime","VsanDialogUtil","CAPACITY_MANAGEMENT_DIALOG","width","height","DELETE_VOLUME_DIALOG","MIGRATE_VOLUME_DIALOG","REAPPLY_VOLUME_POLICY_DIALOG","DUPLICATE_PCI_ID_MODEL_SELECTION_DIALOG","HEALTH_RESTORE_ACTION_DIALOG","CLUSTER_POWER_ON_DIALOG","VM_IO_DIAGNOSTICS_METRICS_DIALOG","VM_IO_DIAGNOSTICS_LATENCY_DIALOG","VM_IO_DIAGNOSTICS_DOM_OWNER_LATENCY_DIALOG","PERF_SVC_EDIT_ACTION_DIALOG","PERF_SVC_ENABLE_ACTION_DIALOG","CLAIM_DISKS_ACTION_DIALOG","VSAN_DISK_CLAIM_ACTION_DIALOG","VsanDialogProperties","ExternalLinkDirective","el","resolver","renderer","navigationService","ASK_VMWARE_DEFAULT_TEXT_KEY","LEARN_MORE_DEFAULT_TEXT_KEY","CONTAINER_CLASS","NAVIGATION_EVENT_TYPE","LEAD_TO_NOWHERE_URL","HTML_ELEMENT_SPAN_NAME","HTML_ELEMENT_ICON_NAME","HTML_ELEMENT_ROLE_ATTR_NAME","HTML_ELEMENT_ROLE_ATTR_VALUE","ICON_SHAPE_ATTR_NAME","ICON_SHAPE_ATTR_VALUE","ICON_SIZE_ATTR_NAME","ICON_SIZE_ATTR_VALUE","ICON_CLASS_ATTR_NAME","ICON_CLASS_ATTR_VALUE","ICON_TITLE_ATTR_NAME","KB_URL","element","nativeElement","isLink","isButton","prepareExternalLink","button","index","addClass","setText","decorateLink","addLinkRole","initializeNavigationHandler","HTMLButtonElement","HTMLAnchorElement","span","createElement","innerText","getText","appendChild","icon","setAttribute","anchorText","key","linkElement","href","style","display","addEventListener","helpId","askVMware","articleId","navigateToAddress","url"],"mappings":"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","file":"58-es5.js","sourcesContent":["/* Copyright 2020 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {ClrButton} from \"@clr/angular\";\n\n/**\n * Use this class as base class for directive, which handles clr-button. It will help to link the rendered button with\n * the clr-button on which the directive is applied.\n */\nexport abstract class ClrButtonBaseDirective {\n\n   constructor(private clrButton: ClrButton) {\n      if (!clrButton) {\n         return;\n      }\n      // name should be set, if not provided in template - generate one. ClrButtom#name is used to generate the name\n      // attribute of the markup button. Later the name is used to match the generated markup with the directive.\n      if (!clrButton.name) {\n         clrButton.name = Math.random().toString();\n      }\n\n      const directiveHolder: DirectiveHolder = (clrButton as DirectiveHolder);\n      directiveHolder.directives = directiveHolder.directives || [];\n      directiveHolder.directives.push(this);\n   }\n\n   /**\n    * This method will be called when the actual html button is rendered.\n    */\n   abstract resolveButton(clrButton: ClrButton, button: HTMLButtonElement, index: number);\n}\n\nexport interface DirectiveHolder extends ClrButton {\n   directives: ClrButtonBaseDirective[];\n}","<!--Copyright 2017-2022 VMware, Inc. All rights reserved. -- VMware Confidential-->\n<span id=\"time-range-label\" class=\"clr-control-label\">\n   {{\"vsan.perf.chart.timerange.label\" | localized}}\n</span>\n<clr-dropdown>\n   <button class=\"dropdown-toggle btn btn-sm btn-link\" clrDropdownToggle>\n      {{currentOptionLabel}}\n      <clr-icon shape=\"caret down\"></clr-icon>\n   </button>\n   <clr-dropdown-menu clrPosition=\"bottom-left\"\n                      [attr.aria-label]=\"'vsan.perf.chart.timerange.srMessage.dropdownMenu.label' | localized\">\n      <button *ngIf=\"realtimeSupported\"\n              clrDropdownItem (click)=\"onRealtimeClick()\">\n         {{\"vsan.perf.chart.timerange.realtime\" | localized}}\n      </button>\n      <button clrDropdownItem (click)=\"onRangeLastXHoursClick()\">\n         {{\"vsan.perf.chart.timerange.last\" | localized}}\n      </button>\n      <button clrDropdownItem (click)=\"onRangeCustomClick()\">\n         {{\"vsan.perf.chart.timerange.custom\" | localized}}\n      </button>\n      <button *ngIf=\"allowSaving\"\n              [disabled]=\"fromDateError || toDateError || hourIntervalInvalid\"\n              clrDropdownItem\n              (click)=\"onSaveRangeClick()\">\n         {{\"vsan.perf.chart.timerange.save\" | localized}}\n      </button>\n      <div class=\"dropdown-divider\" *ngIf=\"savedTimeRanges?.length > 0 || loading\"></div>\n      <button *ngIf=\"loading\" clrDropdownItem>\n         <div class=\"spinner spinner-inline\"></div>\n         {{\"vsan.loading\" | localized}}\n      </button>\n      <div *ngFor=\"let range of savedTimeRanges\" class=\"saved-range-container\">\n         <button clrDropdownItem\n                 (click)=\"onSelectTimeRange(range)\"\n                 [title]=\"range.name\">\n            {{range.name}}\n         </button>\n         <a href=\"javascript://\"\n            (click)=\"onDeleteTimeRange(range)\"\n            clrDropdownItem\n            title=\"{{'vsan.common.dialogOpen.title' | localized :\n               ('vsan.perf.chart.timerange.btn.del.tooltip' | localized)}}\">\n            <clr-icon shape=\"remove\" class=\"is-error\"></clr-icon>\n         </a>\n      </div>\n   </clr-dropdown-menu>\n</clr-dropdown>\n<clr-signpost *ngIf=\"isRealtime()\">\n   <clr-signpost-content *clrIfOpen clrPosition=\"right-bottom\">\n      <span id=\"real-time-description\">\n         {{\"vsan.perf.chart.timerange.realtime.info\" | localized}}\n      </span>\n   </clr-signpost-content>\n</clr-signpost>\n<div *ngIf=\"currentPickerState == RangePickerState.LAST_X_HOURS\"\n     class=\"clr-control-container clr-form-control hour-interval-container\"\n     [class.clr-error]=\"hourIntervalInvalid\">\n   <div class=\"clr-input-wrapper\">\n      <!--Place the input and unit text in the label to ensure that they are properly associated for accessibility.-->\n      <label>\n         <input id=\"hour-interval\"\n                name=\"hour-interval\"\n                [(ngModel)]=\"hourInterval\"\n                type=\"number\"\n                min=\"1\"\n                max=\"24\"\n                class=\"clr-input hour-interval-input\"\n                aria-describedby=\"hour-interval-error\">\n         <clr-icon class=\"clr-validate-icon\"\n                   shape=\"exclamation-circle\"\n                   title=\"{{'vsan.common.srMessage.error' | localized}}\"\n                   [attr.aria-label]=\"'vsan.common.srMessage.error' | localized\">\n         </clr-icon>\n         {{\"vsan.perf.chart.timerange.hours.label\" | localized}}\n      </label>\n   </div>\n   <span id=\"hour-interval-error\" class=\"clr-subtext\" *ngIf=\"hourIntervalInvalid\">\n      {{hourIntervalError}}\n   </span>\n</div>\n<span *ngIf=\"currentPickerState == RangePickerState.SAVED_RANGE\">\n   {{\"vsan.perf.chart.timerange.saved.from.label\" | localized}}\n   <span class=\"formatted-date\">\n      {{currentTimeRange.from | l10nDate:DateFormat.NO_SECONDS}}\n   </span>\n   {{\"vsan.perf.chart.timerange.saved.to.label\" | localized}}\n   <span class=\"formatted-date\">\n      {{currentTimeRange.to | l10nDate:DateFormat.NO_SECONDS}}\n   </span>\n</span>\n<ng-container *ngIf=\"currentPickerState == RangePickerState.CUSTOM_RANGE\">\n   <vsan-datetime-picker id=\"from-date-input\"\n                         [(datetime)]=\"fromDate\"\n                         [errorMessage]=\"fromDateError\"\n                         [disabled]=\"hourIntervalInvalid\"\n                         label=\"{{'vsan.perf.chart.timerange.custom.from' | localized}}\">\n   </vsan-datetime-picker>\n   <vsan-datetime-picker id=\"to-date-input\"\n                         [(datetime)]=\"toDate\"\n                         [errorMessage]=\"toDateError\"\n                         [disabled]=\"hourIntervalInvalid\"\n                         label=\"{{'vsan.perf.chart.timerange.custom.to' | localized}}\">\n   </vsan-datetime-picker>\n</ng-container>\n<button id=\"query-data-by-range-btn\"\n        *ngIf=\"currentPickerState == RangePickerState.LAST_X_HOURS || currentPickerState == RangePickerState.CUSTOM_RANGE\"\n        (click)=\"onRefreshBtnClick()\"\n        [disabled]=\"!enabled || fromDateError || toDateError || hourIntervalInvalid\"\n        class=\"btn btn-sm query-button\">\n   {{\"vsan.perf.chart.timerange.btn.refresh.label\" | localized}}\n</button>","/* Copyright 2020 VMware, Inc. All rights reserved. -- VMware Confidential */\n\nimport {PerfTimeRangeData} from \"@generated/perf-time-range-data\";\nimport {Injectable} from \"@angular/core\";\nimport {FullTimeRangeSelectionData} from \"@model/full-time-range-selection.data\";\nimport {PersistentStorageService} from \"@service/browser-storage.service\";\nimport {VsanDateTimeUtils} from \"@util/vsan-dateteime-util\";\nimport {RangePickerState} from \"@component/datetime-picker/time-range-picker/range-picker-state\";\n\nexport class PersistedSelection {\n   fullTimeRangeSelection: FullTimeRangeSelectionData;\n   expiresIn: number;\n}\n\n/**\n * Persist data which is needed between multiple performance views.\n */\n@Injectable()\nexport class PerformancePersistenceService {\n   /**\n    * Cached time range selection is kept for 1 hour.\n    */\n   private readonly CACHE_DURATION_IN_MS: number = VsanDateTimeUtils.HOUR_IN_MILLISECONDS;\n   private readonly CACHE_KEY: string = \"performance-timerange-selection\";\n\n   constructor(private storageService: PersistentStorageService) {\n   }\n\n   saveSelection(timeRange: PerfTimeRangeData, state: RangePickerState) {\n      const expiresIn: number =\n            new Date().getTime() + this.CACHE_DURATION_IN_MS;\n      const fullTimeRangeData: FullTimeRangeSelectionData = {\n         timeRange: timeRange,\n         state: state,\n      };\n      const savedObject: PersistedSelection = {\n         fullTimeRangeSelection: fullTimeRangeData,\n         expiresIn: expiresIn,\n      };\n      this.storageService.set(this.CACHE_KEY, savedObject);\n   }\n\n   getPersistedSelection(): FullTimeRangeSelectionData {\n      const persistedSelection: PersistedSelection =\n            this.storageService.get<PersistedSelection>(this.CACHE_KEY);\n\n      if (persistedSelection == null || persistedSelection.fullTimeRangeSelection == null) {\n         return null;\n      }\n\n      const isCacheExpired: boolean =\n            this.clearCacheIfExpired(persistedSelection);\n      if (isCacheExpired) {\n         return null;\n      }\n\n      return persistedSelection.fullTimeRangeSelection;\n   }\n\n   /**\n    * Check if deleted timeRange is persisted in the browser storage, if so then it should be removed as well.\n    */\n   onTimeRangeDeletion(timeRange: PerfTimeRangeData) {\n      const persistedTimeRange = this.getPersistedSelection();\n      if (persistedTimeRange != null && timeRange.name === persistedTimeRange.timeRange.name) {\n         this.storageService.remove(this.CACHE_KEY);\n      }\n   }\n\n   private clearCacheIfExpired(persistedSelection: PersistedSelection): boolean {\n      const nowTimestamp = new Date().getTime();\n      // If more then 1 hour has passed, then delete persisted selection\n      if (persistedSelection.expiresIn < nowTimestamp) {\n         this.storageService.remove(this.CACHE_KEY);\n         return true;\n      }\n\n      return false;\n   }\n}\n","/* Copyright 2017-2022 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, EventEmitter, Input, OnDestroy, OnInit, Output} from \"@angular/core\";\nimport {PerfTimeRangeData} from \"@generated/perf-time-range-data\";\nimport {VsanPerfPropertyProvider} from \"@generated/vsan-perf-property-provider\";\nimport {DateFormat} from \"@pipe/VsanDateFormatterPipe\";\nimport {ManagedObject} from \"@service/managed-object\";\nimport {PerformancePersistenceService} from \"@service/performance-persistence.service\";\nimport {Logger} from \"@util/logger\";\nimport {ModalBuilder} from \"@util/modal-builder\";\nimport {ReferenceWatcher} from \"@util/reference-watcher\";\nimport {TimeRangeUtil} from \"@util/time-range-util\";\nimport {VsanDateTimeUtils} from \"@util/vsan-dateteime-util\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {RangePickerState} from \"./range-picker-state\";\n\n@Component({\n   selector: \"vsan-time-range-picker\",\n   templateUrl: \"time-range-picker.html\",\n   styleUrls: [\"time-range-picker.scss\"],\n   providers: [ReferenceWatcher],\n})\nexport class VsanTimeRangePickerComponent implements OnInit, OnDestroy {\n   // high resolution auto refresh interval\n   private readonly HR_AUTO_REFRESH_INTERVAL_MS: number = 30 * 1000;\n   // high resolution time range hour interval\n   private readonly HR_INTERVAL_HOUR: number = 1;\n\n   RangePickerState: typeof RangePickerState = RangePickerState;\n\n   currentOptionLabel: string;\n   savedTimeRanges: PerfTimeRangeData[] = [];\n   hourIntervalInvalid: boolean;\n   hourIntervalError: string = VsanUiUtils.getString(\"vsan.perf.chart.timerange.last.hourInterval.error\");\n   fromDateError: string;\n   toDateError: string;\n   loading: boolean = false;\n   DateFormat: typeof DateFormat = DateFormat;\n\n   private _currentTimeRange: PerfTimeRangeData;\n\n   get currentTimeRange(): PerfTimeRangeData {\n      return this._currentTimeRange;\n   }\n\n   @Input()\n   set currentTimeRange(value: PerfTimeRangeData) {\n      this._currentTimeRange = value;\n      if (this._currentPickerState) {\n         this._setTimerange(this._currentTimeRange);\n      }\n   }\n\n   _clusterRef: ManagedObject;\n\n   get clusterRef(): ManagedObject {\n      return this._clusterRef;\n   }\n\n   @Input()\n   set clusterRef(value: ManagedObject) {\n      this._clusterRef = value;\n      if (value) {\n         this.fetch();\n      }\n   }\n\n   private _fromDate: Date;\n\n   get fromDate(): Date {\n      return this._fromDate;\n   }\n\n   @Input()\n   set fromDate(val: Date) {\n      this._fromDate = val;\n      this.validate();\n   }\n\n   private _toDate: Date;\n\n   get toDate(): Date {\n      return this._toDate;\n   }\n\n   @Input()\n   set toDate(val: Date) {\n      this._toDate = val;\n      this.validate();\n   }\n\n   private _hourInterval: number;\n\n   get hourInterval(): number {\n      return this._hourInterval;\n   }\n\n   @Input()\n   set hourInterval(value: number) {\n      this._hourInterval = value;\n      this.validate();\n   }\n\n   @Input()\n   enabled: boolean = true;\n\n   @Input()\n   allowSaving: boolean = true;\n\n   private _realtimeSupported: boolean = false;\n\n   get realtimeSupported(): boolean {\n      return this._realtimeSupported;\n   }\n\n   @Input()\n   set realtimeSupported(val: boolean) {\n      // change the picker state when user chooses top contributors or per vm charts\n      // because in the 2 views we don't support realtime, but before user can select them the view supports realtime\n      if (this.realtimeSupported && this.isRealtime() && !val) {\n         this.currentPickerState = RangePickerState.LAST_X_HOURS;\n      }\n      this._realtimeSupported = val;\n   }\n\n   private _currentPickerState: RangePickerState;\n\n   get currentPickerState(): RangePickerState {\n      return this._currentPickerState;\n   }\n\n   @Input()\n   set currentPickerState(value: RangePickerState) {\n      const noStateChange: boolean = this._currentPickerState === value;\n      if (noStateChange || this.isUnsupportedState(value)) {\n         return;\n      }\n\n      const isLeavingRealtime: boolean = this.isRealtime();\n      if (isLeavingRealtime) {\n         this.refWatcher.clearIntervals();\n      }\n      this._setCurrentPickerState(value);\n      if (this.isRealtime()) {\n         this.refWatcher.setInterval(() => this.extendCurrentTimeRange(), this.HR_AUTO_REFRESH_INTERVAL_MS);\n         this._currentTimeRange = this.createTimeRange(this.createDefaultStartTime());\n      }\n\n      if (this.currentTimeRange) {\n         this._setTimerange(this._currentTimeRange);\n         this.changeRange.emit(this.currentTimeRange);\n         this.validate();\n      }\n   }\n\n   /*\n   * Set persisted time range\n   * */\n   setTimerange(timerange: PerfTimeRangeData, state: RangePickerState): void {\n      if (state === RangePickerState.REAL_TIME && this.isUnsupportedState(state)) {\n         // If there is a persisted time range for REAL_TIME,\n         // but the current view doesn't support it, then use default time range.\n         this.initDefaultPicker();\n         return;\n      }\n\n      this._setTimerange(timerange);\n      this._setCurrentPickerState(state);\n      this.initRange.emit(this.currentTimeRange);\n   }\n\n   private _setTimerange(timerange: PerfTimeRangeData): void {\n      this._currentTimeRange = timerange;\n      this.fromDate = new Date(this.currentTimeRange.from);\n      this.toDate = new Date(this.currentTimeRange.to);\n\n      if (this.currentPickerState === RangePickerState.LAST_X_HOURS) {\n         // Get difference between 'from' and 'to' date in hours\n         this.hourInterval = (timerange.to - timerange.from) / VsanDateTimeUtils.HOUR_IN_MILLISECONDS;\n      }\n   }\n\n   private _setCurrentPickerState(state: RangePickerState): void {\n      if (this.isUnsupportedState(state)) {\n         return;\n      }\n      this._currentPickerState = state;\n      switch (state) {\n         case RangePickerState.REAL_TIME:\n            this.currentOptionLabel = VsanUiUtils.getString(\"vsan.perf.chart.timerange.realtime\");\n            return;\n         case RangePickerState.LAST_X_HOURS:\n            this.currentOptionLabel = VsanUiUtils.getString(\"vsan.perf.chart.timerange.last\");\n            break;\n         case RangePickerState.CUSTOM_RANGE:\n            this.currentOptionLabel = VsanUiUtils.getString(\"vsan.perf.chart.timerange.custom\");\n            break;\n         case RangePickerState.SAVED_RANGE:\n            this.currentOptionLabel = this.currentTimeRange.name;\n            break;\n         default:\n            Logger.error(\"Unknown RangePickerState: \" + state);\n      }\n   }\n\n   private isUnsupportedState(state: RangePickerState): boolean {\n      return !this.realtimeSupported && state === RangePickerState.REAL_TIME;\n   }\n\n   /**\n    * Triggered as a result of time change because of user interaction\n    */\n   @Output()\n   changeRange: EventEmitter<PerfTimeRangeData> = new EventEmitter<PerfTimeRangeData>(true);\n\n   /**\n    * Triggered as a result of time change because of automated process, i.e. set default value during initialization\n    * of component\n    */\n   @Output()\n   initRange: EventEmitter<PerfTimeRangeData> = new EventEmitter<PerfTimeRangeData>(true);\n\n   constructor(private perfProvider: VsanPerfPropertyProvider,\n         // private cdRef: ChangeDetectorRef,\n         private refWatcher: ReferenceWatcher,\n         private perfPersistenceService: PerformancePersistenceService) {\n   }\n\n   ngOnInit(): void {\n      if (this.currentTimeRange) {\n         this._setTimerange(this._currentTimeRange);\n         return;\n      }\n      this.initDefaultPicker();\n   }\n\n   private initDefaultPicker(): void {\n      if (!this.hourInterval) {\n         this.hourInterval = 1;\n      }\n\n      if (!this.currentPickerState || this.isUnsupportedState(this.currentPickerState)) {\n         this.currentPickerState = this.realtimeSupported ? RangePickerState.REAL_TIME : RangePickerState.LAST_X_HOURS;\n      }\n\n      this.fromDate = this.createDefaultStartTime();\n      this.toDate = VsanTimeRangePickerComponent.createDefaultEndTime();\n\n      if (!this.currentTimeRange) {\n         this.setDefaultTimeRange();\n      }\n   }\n\n   ngOnDestroy(): void {\n      this.refWatcher.clearIntervals();\n   }\n\n   fetch(): void {\n      this.loading = true;\n      this.perfProvider.getSavedTimeRanges(this.clusterRef).then((result: PerfTimeRangeData[]) => {\n         this.loading = false;\n         this.savedTimeRanges = result;\n      }, (error) => {\n         Logger.error(\"Cannot load saved time ranges: \", error);\n         this.loading = false;\n      });\n   }\n\n   isRealtime(): boolean {\n      return this.currentPickerState === RangePickerState.REAL_TIME;\n   }\n\n   private setDefaultTimeRange(): void {\n      const defaultSelectedTimeStart: Date = this.createDefaultStartTime();\n      this.currentTimeRange = this.createTimeRange(defaultSelectedTimeStart);\n      this.initRange.emit(this.currentTimeRange);\n   }\n\n   private createDefaultStartTime(): Date {\n      return VsanDateTimeUtils.createNoSecondsDate(this.getHourInterval());\n   }\n\n   private static createDefaultEndTime(): Date {\n      return VsanDateTimeUtils.createNoSecondsDate();\n   }\n\n   private createTimeRange(startTime: Date, endTime?: Date): PerfTimeRangeData {\n      return VsanDateTimeUtils.createTimeRange(this.currentPickerState, this.getHourInterval(), startTime, endTime);\n   }\n\n   private getHourInterval(): number {\n      return this.isRealtime() ? this.HR_INTERVAL_HOUR : this.hourInterval;\n   }\n\n   /**\n    * Move the current time range to 30s later. Used for high-resolution charts\n    */\n   private extendCurrentTimeRange(): void {\n      const range: PerfTimeRangeData = this.currentTimeRange;\n      if (!range) {\n         return;\n      }\n      this.currentTimeRange = this.createTimeRange(\n            new Date(range.from + this.HR_AUTO_REFRESH_INTERVAL_MS),\n            new Date(range.to + this.HR_AUTO_REFRESH_INTERVAL_MS));\n      this.changeRange.emit(this.currentTimeRange);\n   }\n\n   private updateCurrentTimeRange(): void {\n      if (this.currentPickerState === RangePickerState.CUSTOM_RANGE) {\n         const startTime: Date = new Date(this.fromDate);\n         const endTime: Date = new Date(this.toDate);\n         this.currentTimeRange = this.createTimeRange(startTime, endTime);\n      } else if (this.currentPickerState === RangePickerState.LAST_X_HOURS) {\n         /*\n            Have to reset the default because the time range is not correct\n            if user clicks the query button 30 minutes later after the page opened.\n         */\n         const defaultSelectedTimeStart: Date = this.createDefaultStartTime();\n         this.currentTimeRange = this.createTimeRange(defaultSelectedTimeStart);\n      }\n   }\n\n   onRealtimeClick(): void {\n      this.currentPickerState = RangePickerState.REAL_TIME;\n   }\n\n   onRangeLastXHoursClick(): void {\n      this.currentPickerState = RangePickerState.LAST_X_HOURS;\n   }\n\n   onSelectTimeRange(range: PerfTimeRangeData): void {\n      this.currentTimeRange = range;\n      this._setCurrentPickerState(RangePickerState.SAVED_RANGE);\n      this.changeRange.emit(range);\n   }\n\n   onRefreshBtnClick(): void {\n      this.updateCurrentTimeRange();\n      this.changeRange.emit(this.currentTimeRange);\n   }\n\n   onRangeCustomClick(): void {\n      this.currentPickerState = RangePickerState.CUSTOM_RANGE;\n   }\n\n   onDeleteTimeRange(range: PerfTimeRangeData): void {\n      new ModalBuilder(\"datePicker/deleteTimeRange\")\n            .setSize(500, 220)\n            .open({\n               clusterRef: this.clusterRef,\n               range: range,\n            })\n            .then((timeRange: PerfTimeRangeData) => {\n               let timeRangeIndex: number = this.savedTimeRanges\n                     .findIndex(savedTimeRange => TimeRangeUtil.areEqual(timeRange, savedTimeRange));\n               this.savedTimeRanges.splice(timeRangeIndex, 1);\n               this.perfPersistenceService.onTimeRangeDeletion(timeRange);\n\n               if (this.currentPickerState !== RangePickerState.SAVED_RANGE ||\n                     !TimeRangeUtil.areEqual(this.currentTimeRange, timeRange)) {\n                  return;\n               }\n\n               if (this.savedTimeRanges.length === 0) {\n                  // Choose LAST when there is no custom time range.\n                  this.onRangeLastXHoursClick();\n               } else {\n                  if (timeRangeIndex === this.savedTimeRanges.length) {\n                     // The deleted time range is the last one, then choose the first one.\n                     timeRangeIndex = 0;\n                  }\n                  this.onSelectTimeRange(this.savedTimeRanges[timeRangeIndex]);\n               }\n            });\n   }\n\n   onSaveRangeClick(): void {\n      this.updateCurrentTimeRange();\n      new ModalBuilder(\"datePicker/addTimeRange\")\n            .setSize(500, 280)\n            .open({\n               clusterRef: this.clusterRef,\n               from: this.currentTimeRange.from,\n               to: this.currentTimeRange.to,\n            })\n            .then((range: PerfTimeRangeData) => {\n               this.savedTimeRanges.push(range);\n               this.onSelectTimeRange(range);\n            });\n   }\n\n   private validate(): void {\n      this.fromDateError = \"\";\n      this.toDateError = \"\";\n      this.hourIntervalInvalid = false;\n\n      if (this.currentPickerState === RangePickerState.LAST_X_HOURS) {\n         if (this._hourInterval <= 0 || this._hourInterval > 24 || VsanUiUtils.isDecimal(this._hourInterval)) {\n            this.hourIntervalInvalid = true;\n            this.hourIntervalError = VsanUiUtils.isDecimal(this._hourInterval)\n                  ? VsanUiUtils.getString(\"vsan.perf.chart.timerange.last.hourInterval.decimal.error\")\n                  : VsanUiUtils.getString(\"vsan.perf.chart.timerange.last.hourInterval.error\");\n            return;\n         } else {\n            this.hourIntervalInvalid = false;\n         }\n      } else {\n         if (!this.fromDate) {\n            this.fromDateError = VsanUiUtils.getString(\"vsan.perf.chart.timerange.custom.startTime.empty.error\");\n            return;\n         }\n\n         if (!this.toDate) {\n            this.toDateError = VsanUiUtils.getString(\"vsan.perf.chart.timerange.custom.endTime.empty.error\");\n            return;\n         }\n\n         const currentTime: number = VsanDateTimeUtils.createNoSecondsDate().getTime();\n         const startTime: number = this.fromDate.getTime();\n         const endTime: number = this.toDate.getTime();\n\n         if (endTime - currentTime > 0) {\n            // The end time can not be greater than the current time.\n            this.toDateError = VsanUiUtils.getString(\"vsan.perf.chart.timerange.custom.endTime.error\");\n         } else if (endTime - startTime <= 0) {\n            // The end time should be greater than the start time.\n            this.fromDateError = VsanUiUtils.getString(\"vsan.perf.chart.timerange.custom.startTime.error\");\n         } else if ((endTime - startTime) / VsanDateTimeUtils.HOUR_IN_MILLISECONDS > 24) {\n            this.fromDateError = this.toDateError = VsanUiUtils.getString(\"vsan.perf.chart.timerange.last.hourInterval.error\");\n         }\n      }\n   }\n}","/* Copyright 2020-2022 VMware, Inc. All rights reserved. -- VMware Confidential */\nexport class VsanDialogUtil {\n   static readonly CAPACITY_MANAGEMENT_DIALOG: VsanDialogProperties = {\n      width: 800,\n      height: 700,\n   };\n\n   static readonly DELETE_VOLUME_DIALOG: VsanDialogProperties = {\n      width: 500,\n      height: 250,\n   };\n\n   static readonly MIGRATE_VOLUME_DIALOG: VsanDialogProperties = {\n      width: 1030,\n      height: 710,\n   };\n\n   static readonly REAPPLY_VOLUME_POLICY_DIALOG: VsanDialogProperties = {\n      width: 700,\n      height: 250,\n   };\n\n   static readonly DUPLICATE_PCI_ID_MODEL_SELECTION_DIALOG: VsanDialogProperties = {\n      width: 800,\n      height: 500,\n   };\n\n   static readonly HEALTH_RESTORE_ACTION_DIALOG: VsanDialogProperties = {\n      width: 550,\n      height: 250,\n   };\n\n   // Keep in sync with plugin.xml extension point\n   static readonly CLUSTER_POWER_ON_DIALOG: VsanDialogProperties = {\n      width: 600,\n      height: 230,\n   };\n\n   static readonly VM_IO_DIAGNOSTICS_METRICS_DIALOG: VsanDialogProperties = {\n      width: 900,\n      height: 700,\n   };\n\n   static readonly VM_IO_DIAGNOSTICS_LATENCY_DIALOG: VsanDialogProperties = {\n      width: 1000,\n      height: 500,\n   };\n\n   static readonly VM_IO_DIAGNOSTICS_DOM_OWNER_LATENCY_DIALOG: VsanDialogProperties = {\n      width: 1000,\n      height: 400,\n   };\n\n   static readonly PERF_SVC_EDIT_ACTION_DIALOG: VsanDialogProperties = {\n      width: 800,\n      height: 450,\n   };\n\n   static readonly PERF_SVC_ENABLE_ACTION_DIALOG: VsanDialogProperties = {\n      width: 800,\n      height: 250,\n   };\n\n   static readonly CLAIM_DISKS_ACTION_DIALOG: VsanDialogProperties = {\n      width: 1200,\n      height: 650,\n   };\n\n   static readonly VSAN_DISK_CLAIM_ACTION_DIALOG: VsanDialogProperties = {\n      width: 670,\n      height: 300,\n   };\n}\n\nexport class VsanDialogProperties {\n   width: number;\n   height: number;\n}\n","/* Copyright 2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {\n   AfterViewInit,\n   ComponentFactoryResolver,\n   Directive,\n   ElementRef,\n   Host,\n   Input,\n   Optional,\n   Renderer2,\n   Self,\n} from \"@angular/core\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {NavigationService} from \"@navigation/navigation.service\";\nimport {ClrButtonBaseDirective} from \"@directive/clr-button-group/clr-button-base.directive\";\nimport {ClrButton} from \"@clr/angular\";\n\n/**\n * Decorates a button or an anchor as external link. Requires one of the optional parameters articleId, helpId or url.\n *\n * @param external-link: Optional. Localization key of the text label of the external link. If omitted default label\n * will be used - \"Learn more\" for anchors or \"Ask VMWare\" for buttons.\n * @param articleId - Optional. Id of article in knowledge base.\n * @param helpId - Optional. Help id which will redirect to Knowledge Base.\n * @param url - Optional. External URL.\n */\n@Directive({\n   selector: \"a[external-link], button[external-link], clr-button[external-link]\",\n})\nexport class ExternalLinkDirective extends ClrButtonBaseDirective implements AfterViewInit {\n   private readonly ASK_VMWARE_DEFAULT_TEXT_KEY: string = \"vsan.common.askVMware\";\n   private readonly LEARN_MORE_DEFAULT_TEXT_KEY: string = \"vsan.common.learnMore\";\n\n   private readonly CONTAINER_CLASS: string = \"icon-name-container\";\n   private readonly NAVIGATION_EVENT_TYPE: string = \"click\";\n   private readonly LEAD_TO_NOWHERE_URL: string = \"javascript://\";\n   private readonly HTML_ELEMENT_SPAN_NAME: string = \"span\";\n   private readonly HTML_ELEMENT_ICON_NAME: string = \"clr-icon\";\n   private readonly HTML_ELEMENT_ROLE_ATTR_NAME: string = \"role\";\n   private readonly HTML_ELEMENT_ROLE_ATTR_VALUE: string = \"link\";\n   private readonly ICON_SHAPE_ATTR_NAME: string = \"shape\";\n   private readonly ICON_SHAPE_ATTR_VALUE: string = \"pop-out\";\n   private readonly ICON_SIZE_ATTR_NAME: string = \"size\";\n   private readonly ICON_SIZE_ATTR_VALUE: string = \"16\";\n   private readonly ICON_CLASS_ATTR_NAME: string = \"class\";\n   private readonly ICON_CLASS_ATTR_VALUE: string = \"link\";\n   private readonly ICON_TITLE_ATTR_NAME: string = \"title\";\n\n   private readonly KB_URL: string = \"http://kb.vmware.com/kb/\";\n\n   @Input(\"external-link\")\n   anchorText: string;\n\n   @Input()\n   articleId: string;\n\n   @Input()\n   helpId: string;\n\n   @Input()\n   url: string;\n\n   constructor(private el: ElementRef<HTMLElement>,\n         private resolver: ComponentFactoryResolver,\n         private renderer: Renderer2,\n         private navigationService: NavigationService,\n         // this variable will be initialized only if the host is clr-button\n         @Host() @Self() @Optional() clrButton: ClrButton) {\n      super(clrButton);\n   }\n\n   ngAfterViewInit(): void {\n      const element: HTMLElement = this.el.nativeElement;\n      // continue only if element is HTML link or button\n      if (!this.isLink(element) && !this.isButton(element)) {\n         // element is clr-button, wait until html button for it is resolved - handled by resloveButton\n         return;\n      }\n      this.prepareExternalLink(element);\n   }\n\n   resolveButton(clrButton: ClrButton, button: HTMLButtonElement, index: number): void {\n      // only if element is clr-button. At this point the html button is already resolved. Apply on it.\n      this.prepareExternalLink(button);\n   }\n\n   private prepareExternalLink(element: HTMLElement): void {\n      this.renderer.addClass(element, this.CONTAINER_CLASS);\n\n      this.setText(element);\n      if (this.isLink(element)) {\n         this.decorateLink(element);\n      } else {\n         this.addLinkRole(element);\n      }\n\n      this.initializeNavigationHandler(element);\n   }\n\n   private isButton(element: HTMLElement): boolean {\n      return element instanceof HTMLButtonElement;\n   }\n\n   private isLink(element: HTMLElement): boolean {\n      return element instanceof HTMLAnchorElement;\n   }\n\n   private setText(element: HTMLElement): void {\n      const span: HTMLSpanElement = this.renderer.createElement(this.HTML_ELEMENT_SPAN_NAME);\n      span.innerText = this.getText(element);\n      this.renderer.appendChild(element, span);\n\n      const icon: HTMLSpanElement = this.renderer.createElement(this.HTML_ELEMENT_ICON_NAME);\n      icon.setAttribute(this.ICON_SHAPE_ATTR_NAME, this.ICON_SHAPE_ATTR_VALUE);\n      icon.setAttribute(this.ICON_SIZE_ATTR_NAME, this.ICON_SIZE_ATTR_VALUE);\n      icon.setAttribute(this.ICON_CLASS_ATTR_NAME, this.ICON_CLASS_ATTR_VALUE);\n      // Set title of the icon for screen readers clarity\n      icon.setAttribute(this.ICON_TITLE_ATTR_NAME, VsanUiUtils.getString(\"vsan.screenReader.label.externalLink.icon\"));\n      this.renderer.appendChild(element, icon);\n   }\n\n   private getText(element: HTMLElement): string {\n      if (this.anchorText) {\n         return this.anchorText;\n      }\n      const key: string = this.isButton(element) ? this.ASK_VMWARE_DEFAULT_TEXT_KEY : this.LEARN_MORE_DEFAULT_TEXT_KEY;\n      return VsanUiUtils.getString(key);\n   }\n\n   private decorateLink(element: HTMLElement): void {\n      const linkElement: HTMLLinkElement = element as HTMLLinkElement;\n      // don't use href attribute. If omitted, the link will be not visualized properly.\n      linkElement.href = this.LEAD_TO_NOWHERE_URL;\n      // display link on same line\n      linkElement.style.display = \"inline-flex\";\n   }\n\n   private initializeNavigationHandler(element: HTMLElement): void {\n      element.addEventListener(this.NAVIGATION_EVENT_TYPE, () => {\n         if (this.helpId) {\n            this.navigationService.askVMware(this.helpId);\n            return;\n         }\n         if (this.articleId) {\n            this.navigationService.navigateToAddress(`${this.KB_URL}${this.articleId}`);\n            return;\n         }\n         if (this.url) {\n            this.navigationService.navigateToAddress(this.url);\n         }\n      });\n   }\n\n   // Indicate external navigation by assigning \"link\" role\n   private addLinkRole(element: HTMLElement): void {\n      this.renderer.setAttribute(element, this.HTML_ELEMENT_ROLE_ATTR_NAME, this.HTML_ELEMENT_ROLE_ATTR_VALUE);\n   }\n}"]}