{"version":3,"sources":["webpack:///src/app/vsan/common/component/chart/capacity-legend/capacity-legend.html","webpack:///src/app/vsan/common/component/chart/capacity-legend/capacity-legend.component.ts"],"names":["CapacityLegendComponent","capacityService","barChartService","capacityData","getCapacityLegendValue","index","customSectionColor","getSectionColor","used","total","warningThreshold","errorThreshold","getCapacityLegendValueLabel","chartData","id","sectionData","hoveredSeries","sectionLabel","name","borderColor","getBarChartBorder","color","LEGEND_BORDER_STYLE"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;uEAGG,wH,IAA+C,kF,IAC5C,6M,GAAA;AAAA;AAAA;AAAA,gB,EAEK;AAAA;AAAA,U,GAEsE,kF,IAC3E,mI,IAAgC,gG,IAEzB,+E,IACV;AAAA;AAPQ;;AACA,2DAA0D,OAA1D,CAA0D,OAA1D,CAA0D,SAA1D;;AAFL,wBACK,SADL,EAEK,SAFL;AAE+D,S,EAAA;AAAA;;AAF1D;;AAGA,0CAAuC,OAAvC,CAAuC,OAAvC,CAAuC,SAAvC;;AACA,mFAA+D,OAA/D,CAA+D,OAA/D,CAA+D,KAA/D;;AAJL,wBAAK,SAAL,EAGK,SAHL,EAIK,SAJL;;AAKM;;AAAN,wBAAM,SAAN;;AAAgC;;AAAA;AAEhC,S;AAAA;;;uEAVN,yH,IAA0E,+E,IACmC,+E,IAC1G,yH,GAAA;AAAA;AAAA,gB,GASM,4E,IACT;AAAA;AAVQ;;AAAL,wBAAK,SAAL;AAA8C,S,EAAA,I;AAAA;;;uEAH6B,4E,IAC9E,yH,GAAA;AAAA;AAAA,gB,GAA0E;AAAA;AAA5D,6BAA2D,iBAA3D;;AAAd,wBAAc,SAAd;AAAyE,S,EAAA,I;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACWzE;AAAA;;;AAAA;AAAA;AAAA;;AAAO;AAAA,YAAMA,uBAAN;AAGJ,2CAAoBC,eAApB,EACcC,eADd,EACgD;AAAA;;AAD5B,iBAAAD,eAAA,GAAAA,eAAA;AACN,iBAAAC,eAAA,GAAAA,eAAA;AAAoC;;AAJ9C;AAAA;AAAA,mBA2BJ,0BAAiBC,YAAjB,EAA+C;AAC5C,qBAAO,KAAKF,eAAL,CAAqBG,sBAArB,CAA4CD,YAA5C,CAAP;AACF;AA7BG;AAAA;AAAA,mBA+BJ,+BAAsBA,YAAtB,EAAsDE,KAAtD,EAAmE;AAChE,kBAAIF,YAAY,CAACG,kBAAjB,EAAqC;AAClC,uBAAOH,YAAY,CAACG,kBAApB;AACF;;AACD,qBAAO,KAAKL,eAAL,CAAqBM,eAArB,CAAqC,KAAKC,IAA1C,EAAgD,KAAKC,KAArD,EAA4DJ,KAA5D,EACD,KAAKK,gBADJ,EACsB,KAAKC,cAD3B,CAAP;AAEF;AArCG;AAAA;AAAA,mBAuCJ,+BAAsBR,YAAtB,EAAoD;AACjD,qBAAO,KAAKF,eAAL,CAAqBW,2BAArB,CAAiDT,YAAjD,EAA+D,KAAKM,KAApE,CAAP;AACF;AAzCG;AAAA;AAAA,mBA2CJ,sBAAaI,SAAb,EAAwC;AACrC;AACA,qBAAOA,SAAS,CAACC,EAAV,KAAiB,wBAAxB;AACF;AA9CG;AAAA;AAAA,mBAgDJ,mBAAUC,WAAV,EAAuC;AACpC,kBAAI,KAAKC,aAAL,IAAsBD,WAAW,CAACE,YAAZ,KAA6B,KAAKD,aAAL,CAAmBE,IAA1E,EAAgF;AAC7E,oBAAMC,WAAW,GAAW,KAAKjB,eAAL,CAAqBkB,iBAArB,CAAuC,KAAKJ,aAAL,CAAmBK,KAA1D,CAA5B;;AACA,oBAAIF,WAAJ,EAAiB;AACd,yBAAOnB,uBAAuB,CAACsB,mBAAxB,GAA8CH,WAArD;AACF;AACH;AACH;AAvDG;;AAAA;AAAA;;AACoB,gCAAAG,mBAAA,GAA8B,WAA9B;;OADpB","file":"39-es5.js","sourcesContent":["<!--Copyright 2020 VMware, Inc. All rights reserved. -- VMware Confidential-->\n<ng-container *ngFor=\"let sectionData of chartSectionData; let i = index\">\n   <!-- Only display legend items with positive value since they aren't displayed in the bar-chart either -->\n   <div *ngIf=\"getCapacityValue(sectionData) > 0\">\n      <div id=\"capacity-color-{{i}}\"\n           class=\"type-legend\"\n           [ngClass]=\"{'linear-gradient': showGradient(sectionData)}\"\n           [style.border]=\"getBorder(sectionData)\"\n           [style.backgroundColor]=\"getCapacityValueColor(sectionData, i)\"></div>\n      <span id=\"capacity-value-{{i}}\">\n         {{getCapacityValueLabel(sectionData)}}\n      </span>\n   </div>\n</ng-container>","/* Copyright 2020 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {ChangeDetectionStrategy, Component, Input} from \"@angular/core\";\nimport {ChartSectionData} from \"@component/chart/model/chart-section.data\";\nimport {VsanCapacityService} from \"@component/capacity/capacity.service\";\nimport {BarChartService} from \"@component/chart/capacity-bar-chart/bar-chart.service\";\n\n@Component({\n   templateUrl: \"capacity-legend.html\",\n   styleUrls: [\"capacity-legend.scss\"],\n   selector: \"vsan-capacity-legend\",\n   changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class CapacityLegendComponent {\n   private static readonly LEGEND_BORDER_STYLE: string = \"1px solid\";\n\n   constructor(private capacityService: VsanCapacityService,\n         private barChartService: BarChartService) {}\n\n   @Input()\n   chartSectionData: ChartSectionData[];\n\n   @Input()\n   used: number;\n\n   @Input()\n   total: number;\n\n   @Input()\n   warningThreshold: number;\n\n   @Input()\n   errorThreshold: number;\n\n   /**\n    * The hovered series in capacity bar chart component, used to display the corresponding legend border.\n    */\n   @Input()\n   hoveredSeries: any;\n\n   getCapacityValue(capacityData: ChartSectionData): number {\n      return this.capacityService.getCapacityLegendValue(capacityData);\n   }\n\n   getCapacityValueColor(capacityData: ChartSectionData, index: number): string {\n      if (capacityData.customSectionColor) {\n         return capacityData.customSectionColor;\n      }\n      return this.capacityService.getSectionColor(this.used, this.total, index,\n            this.warningThreshold, this.errorThreshold);\n   }\n\n   getCapacityValueLabel(capacityData: ChartSectionData): string {\n      return this.capacityService.getCapacityLegendValueLabel(capacityData, this.total);\n   }\n\n   showGradient(chartData: ChartSectionData): boolean {\n      // For transient capacity we use special gradient fill as color\n      return chartData.id === \"transientSpaceOverview\";\n   }\n\n   getBorder(sectionData: ChartSectionData): string {\n      if (this.hoveredSeries && sectionData.sectionLabel === this.hoveredSeries.name) {\n         const borderColor: string = this.barChartService.getBarChartBorder(this.hoveredSeries.color);\n         if (borderColor) {\n            return CapacityLegendComponent.LEGEND_BORDER_STYLE + borderColor;\n         }\n      }\n   }\n}"]}