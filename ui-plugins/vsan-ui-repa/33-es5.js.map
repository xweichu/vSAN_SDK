{"version":3,"sources":["webpack:///src/app/vsan/common/service/witness-validation.service.ts","webpack:///src/app/vsan/common/util/reactive-form-util.ts","webpack:///src/app/vsan/common/component/wizard/shared-pages/single-site-fault-domains-page.component.ts","webpack:///src/app/vsan/common/component/wizard/shared-pages/claim-disks-witness-host-page.component.ts","webpack:///src/app/vsan/common/component/wizard/shared-pages/delete-domain-warning.html","webpack:///src/app/vsan/common/component/wizard/shared-pages/witness-host-page.html","webpack:///src/app/vsan/common/component/wizard/shared-pages/create-fault-domain-host-filter.pipe.ts","webpack:///src/app/vsan/common/component/wizard/shared-pages/single-site-fault-domains-page.html","webpack:///src/app/vsan/common/component/wizard/shared-pages/fault-domains-page.html","webpack:///src/app/vsan/common/component/wizard/shared-pages/single-site-fault-domain-nodes.html","webpack:///src/app/vsan/common/component/wizard/shared-pages/fault-domain-nodes.html","webpack:///src/app/vsan/common/component/wizard/shared-pages/wizard-shared-pages.module.ts","webpack:///src/app/vsan/common/component/wizard/shared-pages/single-site-fault-domain-nodes.component.ts","webpack:///src/app/vsan/common/component/wizard/shared-pages/claim-disks-witness-host-page.html","webpack:///src/app/vsan/common/component/wizard/shared-pages/witness-host-requirements.html","webpack:///src/app/vsan/common/component/wizard/shared-pages/delete-domain-warning.component.ts","webpack:///src/app/vsan/common/component/wizard/shared-pages/fault-domain-nodes.component.ts","webpack:///src/app/vsan/common/component/wizard/shared-pages/witness-host-requirements.component.ts","webpack:///src/app/vsan/common/component/wizard/shared-pages/fault-domains-page.component.ts","webpack:///src/app/vsan/common/component/wizard/shared-pages/witness-host-page.component.ts","webpack:///src/app/vsan/common/component/wizard/shared-pages/create-fault-domain.html","webpack:///src/app/vsan/common/component/wizard/shared-pages/create-fault-domain.component.ts"],"names":["WitnessValidationService","hostValidationData","handleHostValidationResult","vsanConfig","aggregateClusterErrors","validationMessages","validateWitnessCandidate","validateSharedWitnessHost","validateWarningConditions","isEncrypted","vLCMToBeDisabled","WitnessHostValidation","INFO","getString","SUCCESS","hostValidationResult","isHostInTheSameCluster","DANGER","isHostInVsanEnabledCluster","isHostDisconnected","isPoweredOn","isHostInMaintenanceMode","hasVsanEnabledNic","isVsanMaxCompatible","isWitnessHost","isStretchedClusterSupported","witnessValidationResult","isEmpty","witnessHostValidationErrors","clustersValidation","clusterValidationResults","Object","values","clusterValidationError","find","result","compatible","validationMessage","enableRdma","enableDataInTransitEncryption","isDitSharedWitnessInteroperabilitySupported","WARNING","error","clustersValidationData","twoNodeClusters","validationData","clusterData","updatedValidationResult","moRef","value","validationAlertType","ReactiveFormUtil","FORM_CONTROLS_DELIMITER","validateAllFormFields","formGroup","markAsTouched","keys","controls","forEach","field","control","get","onlySelf","childControl","validateControls","updateValueAndValidity","emitEvent","updateFormControlsValueAndValidity","getFormControlPath","parts","join","SingleSiteFaultDomainsPage","Icon","createDomainDialogVisible","failuresToTolerate","treeContent","handleConfigChange","clearSelection","sortTree","updateFttText","item","selected","DomainTreeItem","hosts","host","sort","a","b","label","domainAndStandaloneHostsCount","domainsAndStandaloneHostsCount","domains","standaloneHosts","calculateFailuresToTolerate","availableWitnessHostsCount","selectItem","itemName","event","ctrlKey","onlyDomainsSelected","hostSelected","domainSelected","openCreateDomainDialog","deleteDomains","index","length","domainName","push","splice","pageControls","rebuildToc","updateDomains","newDomain","domainHosts","hostsIndex","domainHost","indexOf","HostTreeItem","deleteIndex","i","validate","faultDomainNames","vsanConfigSpec","faultDomainSpecs","faultDomain","Factory","create","hostRef","hintDropTarget","targetItem","draggedItem","badgeText","domain","findDomainByHost","matched","filter","itemDragged","clearDraggedItem","itemDropped","domainChildren","standAloneHosts","clusterHostFaultDomainData","hostFaultDomainData","hostUid","faultDomainName","hostItem","fromUid","name","primaryIconId","hasOwnProperty","FAULT_DOMAIN","domainsCount","standaloneHostsCount","TreeItem","icon","ClaimDisksWitnessHostPage","nextButtonIsDisabled","diskMapping","witnessHostDiskMapping","storagePoolDisks","errors","map","storagePoolDisk","disk","canonicalName","isVsanMaxWorkflow","required","HostFilterPipe","items","showOnlyStandaloneHosts","WizardSharedPagesModule","SingleSiteFaultDomainNodesComponent","onSelectItem","onDragEnter","onDragStart","onDrop","FaultDomainItem","DeleteDomainWarningComponent","dialogVisible","visibleChange","onConfirmation","detailsExpanded","apply","visible","emit","close","FaultDomainNodesComponent","onSelect","WitnessHostRequirementsComponent","headerKey","FaultDomainsPageComponent","availableDomains","preferredName","DEFAULT_PREFERRED_NAME","preferredDomains","secondaryName","DEFAULT_SECONDARY_NAME","secondaryDomains","hciWorkflow","selectPreferred","selectedPreferredItem","selectSecondary","selectedSecondaryItem","moveToPreferred","fromSecondaryToPreferred","moveToSecondary","fromPreferredToSecondary","dropToPreferred","dragData","dropToSecondary","preferredDomain","isPreferred","isHost","actualDomains","data","move","hasConnectedHosts","trim","domainsAndHosts","allHosts","children","firstConnectedHost","inMaintenanceMode","ifEmpty","WitnessHostPageComponent","hostInventoryService","hostValidationService","stretchedClusterService","configureStretchedClusterService","diskManagementService","hasDiskGroupsOnWitness","isWitnessDeployedFromOvf","inventoryRoot","vcRoot","clusterRef","serverGuid","setInventoryFilterContext","currentWitnessHostRef","filterContext","Map","set","CURRENT_WITNESS_HOST_REF","areEqual","node","nodeRef","witnessHost","resetValidation","updateSelection","queryAndValidateSelectedHost","hostValidation","clearValidationErrors","type","HOST","COMPUTE_RESOURCE","witnessHostName","setBusyState","Promise","all","getHostValidationResult","getIsWitnessDeployedFromOvf","hasWitnessClaimedDisks","clearBusyState","getNewWitnessHostValidationError","isVsanMaxEnabled","handleSingleClusterWitnessValidationResult","handleHostValidationError","getHostDisksClaimingData","witnessDisksData","hasVsanMaxClaimedDisks","hasDiskGroups","includes","ifNull","CreateFaultDomainComponent","formBuilder","DOMAIN_NAME","VALIDATION_ERROR","initialState","alertMessages","deleteDomainWarningVisible","selectedHosts","resetDialog","createFaultDomain","markAsUntouched","clearValidation","initData","isValid","domainsForDelete","createDomain","validateDomainName","invalidDomainNameMessage","getDomainNameErrorMessage","patchValue","applyFilter","onlyStandalone","getExistingDomainNames","onCreateNewDomainConfirmation","deleteEmptyDomains","group","_visible","valid","touched","invalid","hostHasToBeDeleted","every"],"mappings":"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","file":"33-es5.js","sourcesContent":["/* Copyright 2019-2022 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Injectable} from \"@angular/core\";\nimport {AlertType} from \"@component/validation/alert-type\";\nimport {InventoryNode as InventoryNodeInfo} from \"@generated/inventory-node\";\nimport {SharedWitnessClusterValidationData} from \"@generated/shared-witness-cluster-validation-data\";\nimport {SharedWitnessValidationData} from \"@generated/shared-witness-validation-data\";\nimport {VsanConfigSpec} from \"@generated/vsan-config-spec\";\nimport {WitnessHostValidationResult} from \"@generated/witness-host-validation-result\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\n\n/**\n * Provides validation for a selected witness host.\n */\n@Injectable()\nexport class WitnessValidationService {\n   handleSharedWitnessHostValidationResult(hostValidationData: WitnessHostValidationResult): WitnessHostValidation {\n      return this.handleHostValidationResult(hostValidationData, null, true);\n   }\n\n   handleSingleClusterWitnessValidationResult(hostValidationData: WitnessHostValidationResult,\n         vsanConfig: VsanConfigSpec): WitnessHostValidation {\n      return this.handleHostValidationResult(hostValidationData, vsanConfig, false);\n   }\n\n   /**\n    * Returns a single host level validation result.\n    * @param hostValidationData - The java side validation result\n    * @param vsanConfig - Contains the cluster's config. Used in single cluster scenarios like configure vSAN or HCI\n    * @param aggregateClusterErrors - Whether to report the cluster level errors as a host level error or return an\n    * aggregated error message.\n    * This is needed in shared witness scenarios, in order to show a general error message at the top of the page.\n    * We already show the per cluster error in the validation grid, so there is no information hiding.\n    * In the single cluster scenarios we show the cluster error from backend as it is more informative.\n    */\n   private handleHostValidationResult(hostValidationData: WitnessHostValidationResult, vsanConfig: VsanConfigSpec,\n         aggregateClusterErrors: boolean): WitnessHostValidation {\n\n      // First check the basics: is a connected host, is not in mm, has configured nic, etc.\n      let validationMessages: WitnessHostValidation = this.validateWitnessCandidate(hostValidationData);\n      if (validationMessages) {\n         return validationMessages;\n      }\n\n      // If all looks good, check if the shared witness host validation has passed\n      validationMessages = this.validateSharedWitnessHost(hostValidationData, vsanConfig, aggregateClusterErrors);\n      if (validationMessages) {\n         return validationMessages;\n      }\n\n      // Validate some conditions, to be reported as warnings\n      validationMessages = this.validateWarningConditions(hostValidationData.isEncrypted);\n      if (validationMessages) {\n         return validationMessages;\n      }\n      // Validate some minor conditions reported as infos\n      if (hostValidationData.vLCMToBeDisabled) {\n         return new WitnessHostValidation(AlertType.INFO,\n               [VsanUiUtils.getString(\"vsan.sharedWitness.assign.vLCM.warning\")]);\n      }\n      // All is good, return validation success\n      return new WitnessHostValidation(\n            AlertType.SUCCESS, [\n               VsanUiUtils.getString(\n                     \"vsan.faultDomains.stretchedCluster.wizard.configure.page.witnessHost.validation.compatibleHostState\"),\n            ]);\n   }\n\n   // Checks the basic host properties, such as connection state, powered state, etc..\n   private validateWitnessCandidate(hostValidationResult: WitnessHostValidationResult): WitnessHostValidation {\n      if (hostValidationResult.isHostInTheSameCluster) {\n         return new WitnessHostValidation(\n               AlertType.DANGER, [\n                  VsanUiUtils.getString(\n                        \"vsan.faultDomains.stretchedCluster.wizard.configure.page.witnessHost.validation.internalHostSelectedError\"),\n               ]);\n      } else if (hostValidationResult.isHostInVsanEnabledCluster) {\n         return new WitnessHostValidation(\n               AlertType.DANGER, [\n                  VsanUiUtils.getString(\n                        \"vsan.faultDomains.stretchedCluster.wizard.configure.page.witnessHost.validation.hostInVsanEnabledCluster\"),\n               ]);\n      } else if (hostValidationResult.isHostDisconnected) {\n         return new WitnessHostValidation(\n               AlertType.DANGER, [\n                  VsanUiUtils.getString(\n                        \"vsan.faultDomains.stretchedCluster.wizard.configure.page.witnessHost.validation.disconnectedHostState\"),\n               ]);\n      } else if (!hostValidationResult.isPoweredOn) {\n         return new WitnessHostValidation(\n               AlertType.DANGER, [\n                  VsanUiUtils.getString(\n                        \"vsan.faultDomains.stretchedCluster.wizard.configure.page.witnessHost.validation.notPoweredOnHostState\"),\n               ]);\n      } else if (hostValidationResult.isHostInMaintenanceMode) {\n         return new WitnessHostValidation(\n               AlertType.DANGER, [\n                  VsanUiUtils.getString(\n                        \"vsan.faultDomains.stretchedCluster.wizard.configure.page.witnessHost.validation.maintenanceModeHostState\"),\n               ]);\n      } else if (!hostValidationResult.hasVsanEnabledNic) {\n         return new WitnessHostValidation(\n               AlertType.DANGER, [\n                  VsanUiUtils.getString(\n                        \"vsan.faultDomains.stretchedCluster.wizard.configure.page.witnessHost.validation.noVsanNicEnabledOnHost\"),\n               ]);\n      } else if (!hostValidationResult.isVsanMaxCompatible) {\n         return new WitnessHostValidation(\n               AlertType.DANGER, [\n                  VsanUiUtils.getString(\n                        \"vsan.faultDomains.stretchedCluster.wizard.configure.page.witnessHost.validation.vsanMax.hostNotSupported\"),\n               ]);\n      }\n      return null;\n   }\n\n   private validateSharedWitnessHost(hostValidationData: WitnessHostValidationResult,\n         vsanConfig: VsanConfigSpec, aggregateClusterErrors: boolean): WitnessHostValidation {\n      if (hostValidationData.isWitnessHost && !hostValidationData.isStretchedClusterSupported) {\n         return new WitnessHostValidation(AlertType.DANGER, [\n            VsanUiUtils.getString(\n                  \"vsan.faultDomains.stretchedCluster.wizard.configure.page.witnessHost.validation.featureNotSupportedOnHost\"),\n         ]);\n      }\n\n      if (hostValidationData.witnessValidationResult) {\n         // Check if any API validation errors are returned for the witness host\n         if (!VsanUiUtils.isEmpty(hostValidationData.witnessValidationResult.witnessHostValidationErrors)) {\n            return new WitnessHostValidation(\n                  AlertType.DANGER, hostValidationData.witnessValidationResult.witnessHostValidationErrors);\n         }\n\n         // Check if any API validation errors are returned for the clusters. Aggregate them to a single host error\n         if (hostValidationData.witnessValidationResult.clustersValidation) {\n            const clusterValidationResults: SharedWitnessClusterValidationData[] =\n                  Object.values(hostValidationData.witnessValidationResult.clustersValidation);\n            const clusterValidationError: SharedWitnessClusterValidationData = clusterValidationResults\n                  .find(result => !result.compatible);\n            if (clusterValidationError) {\n               if (aggregateClusterErrors) {\n                  return new WitnessHostValidation(AlertType.DANGER, [\n                     VsanUiUtils.getString(\n                           \"vsan.host.sharedWitness.reassign.wizard.selectClusters.validation.incompatibleClusters\"),\n                  ]);\n               } else {\n                  return new WitnessHostValidation(AlertType.DANGER, [clusterValidationError.validationMessage]);\n               }\n            }\n\n         }\n      }\n\n      // RDMA is not supported when shared witness host is used\n      if (vsanConfig?.enableRdma && hostValidationData.isWitnessHost) {\n         return new WitnessHostValidation(AlertType.DANGER,\n               [VsanUiUtils.getString(\"vsan.sharedWitness.assign.rdma.error\")]);\n      }\n\n      // Finally check that if a shared witness host (which don't support DIT) is used when the DiT encryption is\n      // enabled\n      if (vsanConfig?.enableDataInTransitEncryption && hostValidationData.isWitnessHost\n            && !hostValidationData.isDitSharedWitnessInteroperabilitySupported) {\n         /**\n          * When Data-In-Transit Encryption is enabled, a shared witness host cannot be used.\n          */\n         return new WitnessHostValidation(AlertType.DANGER,\n               [VsanUiUtils.getString(\"vsan.sharedWitness.assign.dit.error\")]);\n      }\n      return null;\n   }\n\n   private validateWarningConditions(isEncrypted: boolean): WitnessHostValidation {\n      if (isEncrypted) {\n         return new WitnessHostValidation(AlertType.WARNING, [\n            VsanUiUtils.getString(\n                  \"vsan.faultDomains.stretchedCluster.wizard.configure.page.witnessHost.validation.hostIsEncrypted\"),\n         ]);\n      }\n      return null;\n   }\n\n   handleHostValidationError(error: string): WitnessHostValidation {\n      return new WitnessHostValidation(AlertType.DANGER, [error]);\n   }\n\n   updateClustersValidation(witnessValidationResult: SharedWitnessValidationData,\n         clustersValidationData: Map<string, SharedWitnessClusterValidationData>,\n         twoNodeClusters: InventoryNodeInfo[]): Map<string, SharedWitnessClusterValidationData> {\n      if (!witnessValidationResult) {\n         return clustersValidationData;\n      }\n      const validationData: any = witnessValidationResult.clustersValidation;\n      if (!clustersValidationData) {\n         // This is the first time we are doing the validation, just assign the result as is\n         clustersValidationData = validationData;\n         // If witness host validation is not passed cluster validation is null\n      } else if (validationData) {\n         // We need to only update the values, in case user deselected some of the clusters,\n         // we are not getting them as part of the validation result, but still want to show the original errors\n         for (const clusterData of twoNodeClusters) {\n            const updatedValidationResult: any = validationData[clusterData.moRef.value];\n            if (updatedValidationResult) {\n               clustersValidationData[clusterData.moRef.value] = updatedValidationResult;\n            }\n         }\n      }\n      return clustersValidationData;\n   }\n}\n\nexport class WitnessHostValidation {\n   constructor(\n         public validationAlertType: AlertType,\n         public validationMessages: string[],\n   ) {\n   }\n}","/* Copyright 2017 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {FormArray, FormControl, FormGroup} from \"@angular/forms\";\n\nexport class ReactiveFormUtil {\n\n   private static readonly FORM_CONTROLS_DELIMITER: string = \".\";\n\n   /*\n    * Trigger validation on all controls in a form group and mark them as touched to display errors\n    */\n   static validateAllFormFields = (formGroup: FormGroup): void => {\n      formGroup.markAsTouched();\n      Object.keys(formGroup.controls).forEach(field => {\n         const control = formGroup.get(field);\n         control.markAsTouched({ onlySelf: true });\n         if (control instanceof FormGroup) {\n            ReactiveFormUtil.validateAllFormFields(control);\n         } else if (control instanceof FormArray) {\n            control.controls.forEach(\n                  (childControl: FormGroup) => ReactiveFormUtil.validateAllFormFields(childControl));\n         } else if (control instanceof FormControl) {\n            ReactiveFormUtil.validateControls([control]);\n         }\n      });\n   };\n\n   static validateControls = (controls: FormControl[]): void => {\n      controls.forEach((control) => {\n         control.markAsTouched({onlySelf: true});\n         control.updateValueAndValidity({\n            onlySelf: false,\n            emitEvent: true\n         });\n      });\n   };\n\n   /**\n    * Trigger updateValueAndValidity() to call ValidatorFn and update validity of all controls in a form group.\n    */\n   static updateFormControlsValueAndValidity = (formGroup: FormGroup) => {\n      Object.keys(formGroup.controls).forEach(control => {\n         if (formGroup.get(control) instanceof FormControl) {\n            formGroup.get(control).updateValueAndValidity();\n         }\n      })\n   };\n\n   static getFormControlPath = (...parts: string[]): string => {\n      return parts.join(ReactiveFormUtil.FORM_CONTROLS_DELIMITER);\n   };\n}\n","/* Copyright 2017-2020 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, OnInit} from \"@angular/core\";\nimport {ManagedObject} from \"@service/managed-object\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {Icon} from \"@util/icon\";\nimport {InputProperty, OutputProperty, WizardPage} from \"@component/wizard/flow-metadata\";\nimport {OnValidate, PageControls} from \"@component/wizard/flow-wizard.component\";\nimport {VsanConfigSpec} from \"@generated/vsan-config-spec\";\nimport {VsanFaultDomainSpec} from \"@generated/vsan-fault-domain-spec\";\nimport {HostFaultDomainData} from \"@generated/host-fault-domain-data\";\nimport {FaultDomainsUtil} from \"@util/fault-domains-util\";\n\n@WizardPage(\n      VsanUiUtils.getString(\"vsan.cluster.configure.wizard.faultDomains.title\"),\n      VsanUiUtils.getString(\"vsan.cluster.configure.wizard.faultDomains.description\"),\n)\n@Component({\n   templateUrl: \"single-site-fault-domains-page.html\",\n   styleUrls: [\"single-site-fault-domains-page.scss\"],\n\n})\nexport class SingleSiteFaultDomainsPage implements OnInit, OnValidate {\n   @InputProperty()\n   pageControls: PageControls;\n\n   @InputProperty()\n   clusterHostFaultDomainData: HostFaultDomainData[];\n\n   @InputProperty()\n   @OutputProperty()\n   vsanConfigSpec: VsanConfigSpec;\n\n   @OutputProperty()\n   faultDomainNames: string[];\n\n   @InputProperty()\n   availableWitnessHostsCount: number;\n\n   Icon = Icon;\n\n   createDomainDialogVisible: boolean = false;\n\n   failuresToTolerate: string = VsanUiUtils.getString(\"vsan.na.label\");\n\n   treeContent: TreeItem[] = [];\n\n   private draggedItem: TreeItem;\n\n   ngOnInit() {\n      const domainChildren = {};\n      const domains: DomainTreeItem[] = [];\n      const standAloneHosts: HostTreeItem[] = [];\n\n      for (const hostFaultDomainData of this.clusterHostFaultDomainData) {\n         const hostUid = hostFaultDomainData.hostUid;\n\n         let domainName = hostFaultDomainData.faultDomainName;\n         if (domainName != null && domainName.length === 0) {\n            domainName = null;\n         }\n\n         const hostItem: HostTreeItem = new HostTreeItem(\n               ManagedObject.fromUid(hostUid),\n               hostFaultDomainData.name,\n               hostFaultDomainData.primaryIconId,\n               domainName,\n               false);\n\n         if (!domainName) {\n            standAloneHosts.push(hostItem);\n         } else {\n            const domainHosts: HostTreeItem[] =\n                  domainChildren.hasOwnProperty(domainName) ? domainChildren[domainName] : [];\n            domainHosts.push(hostItem);\n            domainChildren[domainName] = domainHosts;\n         }\n      }\n\n      for (const domainName of Object.keys(domainChildren)) {\n         domains.push(new DomainTreeItem(domainName, Icon.FAULT_DOMAIN, false, domainChildren[domainName]));\n      }\n\n      this.treeContent.push(...domains);\n      this.treeContent.push(...standAloneHosts);\n      this.handleConfigChange();\n   }\n\n   private handleConfigChange = () => {\n      this.clearSelection();\n      this.sortTree();\n      this.updateFttText();\n   };\n\n   private clearSelection = () => {\n      this.treeContent.forEach((item): void => {\n         item.selected = false;\n         if (item instanceof DomainTreeItem) {\n            item.hosts.forEach((host): void => {\n               host.selected = false;\n            });\n         }\n      });\n   };\n\n   private sortTree = (): void => {\n      // sort tree root elements\n      this.treeContent.sort((a: TreeItem, b: TreeItem): number => {\n         if (a instanceof DomainTreeItem === b instanceof DomainTreeItem) {\n            // comparing either domains or hosts\n            return a.label > b.label ? 1 : -1;\n         } else {\n            // comparing host to a domain\n            return a instanceof DomainTreeItem ? -1 : 1;\n         }\n      });\n\n      // sort domain hosts\n      this.treeContent.forEach((item) => {\n         if (item instanceof DomainTreeItem && item.hosts) {\n            item.hosts.sort((a: HostTreeItem, b: HostTreeItem): number => {\n               return a.label > b.label ? 1 : -1;\n            });\n         }\n      });\n   };\n\n   private updateFttText = (): void => {\n      const domainAndStandaloneHostsCount: [number, number] = this.domainsAndStandaloneHostsCount;\n      const domains: number = domainAndStandaloneHostsCount[0];\n      const standaloneHosts: number = domainAndStandaloneHostsCount[1];\n\n      this.failuresToTolerate = VsanUiUtils.getString(\"vsan.configure.faultDomains.faultsToTolerateText\",\n            FaultDomainsUtil.calculateFailuresToTolerate(standaloneHosts, domains, this.availableWitnessHostsCount));\n   };\n\n   private get domainsAndStandaloneHostsCount(): [number, number] {\n      let domainsCount: number = 0;\n      let standaloneHostsCount: number = 0;\n      this.treeContent.forEach((item) => {\n         if (item instanceof DomainTreeItem) {\n            domainsCount++;\n         } else if (item instanceof HostTreeItem) {\n            standaloneHostsCount++;\n         }\n      });\n\n      return [domainsCount, standaloneHostsCount];\n   }\n\n   selectItem = (itemName: string, event: any): void => {\n      // if CTRL is not pressed select only current item\n      if (!event.ctrlKey) {\n         this.treeContent.forEach((item) => {\n            item.selected = item.label === itemName;\n            if (item instanceof DomainTreeItem) {\n               item.hosts.forEach((host) => host.selected = host.label === itemName);\n            }\n         });\n      }\n\n      // if CTRL is pressed invert item selection and keep the rest of the selections\n      if (event.ctrlKey) {\n         this.treeContent.forEach((item) => {\n            if (item.label === itemName) {\n               item.selected = !item.selected;\n               return;\n            }\n\n            if (item instanceof DomainTreeItem) {\n               item.hosts.forEach((host) => {\n                  if (host.label === itemName) {\n                     host.selected = !host.selected;\n                  }\n               });\n            }\n         });\n      }\n   };\n\n   onlyDomainsSelected = (): boolean => {\n      let hostSelected: boolean = false;\n      let domainSelected: boolean = false;\n      this.treeContent.forEach((item) => {\n         if (item instanceof DomainTreeItem) {\n            if (item.selected) {\n               domainSelected = true;\n            }\n\n            item.hosts.forEach((host) => {\n               if (host.selected) {\n                  hostSelected = true;\n               }\n            });\n         } else {\n            // host item\n            if (item.selected) {\n               hostSelected = true;\n            }\n         }\n      });\n\n      return domainSelected && !hostSelected;\n   };\n\n   openCreateDomainDialog = (): void => {\n      this.createDomainDialogVisible = true;\n   };\n\n   deleteDomains = (): void => {\n      // iterate root elements and if it is a selected domain remove it\n      // and add its hosts to the end of the root elements list\n      let index: number = this.treeContent.length;\n      while (index--) {\n         const item: TreeItem  = this.treeContent[index];\n         if (item.selected && item instanceof DomainTreeItem) {\n            item.hosts.forEach((host) => host.domainName = null);\n            this.treeContent.push(...item.hosts);\n            this.treeContent.splice(index, 1);\n         }\n      }\n\n      this.handleConfigChange();\n      this.pageControls.rebuildToc();\n   };\n\n   updateDomains = (newDomain: DomainTreeItem): void => {\n      // Remove selected hosts out of the tree structure\n\n      let index: number = this.treeContent.length;\n      while (index--) {\n         const item: TreeItem  = this.treeContent[index];\n         if (item instanceof DomainTreeItem) {\n            if (item.label !== newDomain.label && item.hosts.length !== 0) {\n               const domainHosts: HostTreeItem[] = item.hosts;\n               let hostsIndex: number = domainHosts.length;\n               while (hostsIndex--) {\n                  const domainHost: HostTreeItem  = domainHosts[hostsIndex];\n                  if (newDomain.hosts.indexOf(domainHost) >= 0) {\n                     domainHosts.splice(hostsIndex, 1);\n                  }\n               }\n            }\n         } else if (item instanceof HostTreeItem) {\n            if (newDomain.hosts.indexOf(item) >= 0) {\n               this.treeContent.splice(index, 1);\n            }\n         }\n      }\n\n      // delete empty fault domains\n      let deleteIndex: number = this.treeContent.length;\n      while (deleteIndex--) {\n         const item: TreeItem  = this.treeContent[deleteIndex];\n         if (item instanceof DomainTreeItem && item.hosts.length === 0) {\n            this.treeContent.splice(deleteIndex, 1);\n         }\n      }\n\n      if (newDomain.hosts.length > 0) {\n         // add the new fault domain\n         newDomain.hosts.forEach((i) => i.domainName = newDomain.label);\n\n         /**\n          * Search the new domain in the tree items,\n          * if a new fault domain, we simply push it into the list, otherwise we do nothing.\n          */\n         if (!this.treeContent.find(item => item instanceof DomainTreeItem && item.label === newDomain.label)) {\n            this.treeContent.push(newDomain);\n         }\n      }\n\n      this.handleConfigChange();\n      this.pageControls.rebuildToc();\n   };\n\n   validate = (): string[] => {\n      this.faultDomainNames = [];\n      this.vsanConfigSpec.faultDomainSpecs = [];\n\n      // prepare fault domains specs and list of fault domain names\n      for (const item of this.treeContent) {\n         if (item instanceof DomainTreeItem) {\n            const faultDomain: string = item.label;\n            this.faultDomainNames.push(faultDomain);\n            for (const host of item.hosts) {\n               this.vsanConfigSpec.faultDomainSpecs.push(VsanFaultDomainSpec.Factory.create(faultDomain, host.hostRef));\n            }\n         } else if (item instanceof HostTreeItem) {\n            this.vsanConfigSpec.faultDomainSpecs.push(VsanFaultDomainSpec.Factory.create(\"\", item.hostRef));\n         }\n      }\n      return null;\n   };\n\n   /**\n    * Invoked when a host is dragged over a valid target\n    * in order to hint the user they can drop it.\n    * @param targetItem the potential drop target, can be fault domain,\n    *       other host or null (for header and footer)\n    */\n   hintDropTarget = (targetItem?: TreeItem) => {\n      if (!this.draggedItem || this.draggedItem instanceof DomainTreeItem) {\n         return;\n      }\n\n      this.draggedItem.badgeText = \"\";\n\n      let domain: DomainTreeItem = null;\n      if (targetItem) {\n         domain = targetItem instanceof DomainTreeItem ?\n               targetItem : this.findDomainByHost(targetItem as HostTreeItem);\n      }\n\n      if (domain != null) {\n         if (domain !== this.findDomainByHost(this.draggedItem as HostTreeItem)) {\n            this.draggedItem.badgeText = VsanUiUtils.getString(\n                  \"vsan.faultDomains.action.moveHosts.hint.move\", domain.label);\n         }\n      } else if (this.draggedItem instanceof HostTreeItem && this.draggedItem.domainName) {\n         // Drag a host out of a domain\n         domain = this.findDomainByHost(this.draggedItem);\n         if (domain) {\n            this.draggedItem.badgeText = VsanUiUtils.getString(\n                  \"vsan.faultDomains.action.moveHosts.hint.remove\", domain.label);\n         }\n      }\n   };\n\n   private findDomainByHost = (host: HostTreeItem): DomainTreeItem => {\n      if (!host) {\n         return null;\n      }\n      const matched: TreeItem[] = this.treeContent.filter(\n            item => item instanceof DomainTreeItem && item.hosts.indexOf(host) > -1);\n      if (matched.length > 0) {\n         return matched[0] as DomainTreeItem;\n      }\n      return null;\n   };\n\n   itemDragged = (item: TreeItem): void => {\n      this.draggedItem = item instanceof HostTreeItem ? item : null;\n   };\n\n   clearDraggedItem = (): void => {\n      if (this.draggedItem != null) {\n         this.draggedItem.badgeText = null;\n      }\n      this.draggedItem = null;\n   };\n\n   itemDropped = (event, targetItem?: TreeItem): void => {\n      if (!this.draggedItem) {\n         return;\n      }\n\n      let domain: DomainTreeItem = null;\n      if (targetItem) {\n         domain = targetItem instanceof DomainTreeItem ?\n               targetItem : this.findDomainByHost(targetItem as HostTreeItem);\n      }\n\n      if (domain != null && domain !== this.findDomainByHost(this.draggedItem as HostTreeItem)) {\n         domain.hosts.push(this.draggedItem as HostTreeItem);\n      } else if (domain == null) {\n         // Drag a host out of a fault domain\n         if (this.draggedItem instanceof HostTreeItem && this.draggedItem.domainName) {\n            domain = this.findDomainByHost(this.draggedItem);\n            domain.hosts.splice(domain.hosts.indexOf(this.draggedItem), 1);\n            this.treeContent.push(this.draggedItem);\n            this.draggedItem.domainName = null;\n         }\n      }\n      this.updateDomains(domain);\n      this.clearDraggedItem();\n   };\n}\n\nexport abstract class TreeItem {\n   protected constructor(public label: string, public icon: string,\n         public selected: boolean, public badgeText: string = null) {}\n}\n\nexport class DomainTreeItem extends TreeItem {\n   constructor(public label: string, public icon: string, public selected: boolean,\n         public hosts: HostTreeItem[]) {\n      super(label, icon, selected);\n   }\n}\n\nexport class HostTreeItem extends TreeItem {\n   constructor(public hostRef: ManagedObject, public label: string, public icon: string,\n         public domainName: string, public selected: boolean) {\n      super(label, icon, selected);\n   }\n}\n","/* Copyright 2017-2019 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, OnInit} from \"@angular/core\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {ManagedObject} from \"@service/managed-object\";\nimport {InputProperty, OutputProperty, WizardPage} from \"@component/wizard/flow-metadata\";\nimport {OnValidate, PageControls} from \"@component/wizard/flow-wizard.component\";\nimport {VsanDiskMapping} from \"@generated/vsan-disk-mapping\";\nimport {DiskData} from \"@generated/disk-data\";\nimport {PageItem} from \"@component/wizard/page-item\";\n\n@WizardPage(\n      VsanUiUtils.getString(\"vsan.cluster.configure.wizard.claimDisksWitnessHost.title\"),\n      VsanUiUtils.getString(\"vsan.cluster.configure.wizard.claimDisksWitnessHost.description\"),\n)\n@Component({\n   templateUrl: \"claim-disks-witness-host-page.html\",\n})\nexport class ClaimDisksWitnessHostPage implements OnInit, OnValidate {\n\n   @InputProperty()\n   pageControls: PageControls;\n\n   @InputProperty(InputProperty.required(false))\n   clusterRef: ManagedObject;\n\n   @InputProperty()\n   witnessHost: ManagedObject;\n\n   @InputProperty()\n   isVsanMaxWorkflow: boolean;\n\n   @OutputProperty()\n   witnessHostDiskMapping: VsanDiskMapping;\n\n   @OutputProperty()\n   storagePoolDisks: string[];\n\n   private errors: string[];\n\n   async ngOnInit(): Promise<void> {\n      // Block the Next button while host's disks are loading\n      (this.pageControls as PageItem).nextButtonIsDisabled = true;\n   }\n\n   onLoadingComplete(): void {\n      (this.pageControls as PageItem).nextButtonIsDisabled = false;\n   }\n\n   configChange(diskMapping: VsanDiskMapping): void {\n      this.witnessHostDiskMapping = diskMapping;\n      this.pageControls.rebuildToc();\n   }\n\n   onStoragePoolDisksChange(storagePoolDisks: DiskData[]): void {\n      if (VsanUiUtils.isEmpty(storagePoolDisks)) {\n         this.storagePoolDisks = null;\n         return;\n      }\n      this.errors = null;\n      this.storagePoolDisks = storagePoolDisks.map(storagePoolDisk => storagePoolDisk.disk.canonicalName);\n   }\n\n   configValidate(errors: string[]): void {\n      this.errors = errors;\n   }\n\n   validate(): string[] {\n      if (this.isVsanMaxWorkflow) {\n         if (VsanUiUtils.isEmpty(this.storagePoolDisks)) {\n            this.errors = [VsanUiUtils.getString(\"vsan.dialog.addDisksToStoragePool.error.selectDisks\")];\n         } else {\n            this.errors = null;\n         }\n      }\n      return VsanUiUtils.isEmpty(this.errors) ? null : this.errors;\n   }\n}","<!--Copyright 2017-2020 VMware, Inc. All rights reserved. -- VMware Confidential-->\n<div class=\"modal\" *ngIf=\"visible\">\n   <div class=\"modal-dialog modal-md\"\n        role=\"dialog\" aria-hidden=\"true\"\n        [ngClass]=\"detailsExpanded ? 'expanded-data': 'collapsed-data'\">\n      <div class=\"modal-content\">\n         <vsan-prompt [title]=\"dialogTitle\"\n                      [confirmText]=\"'vsan.common.ok' | localized\"\n                      [cancelText]=\"'vsan.common.cancel' | localized\"\n                      (onCancel)=\"close()\"\n                      (onConfirm)=\"apply()\">\n            <div class=\"dialog-container\">\n               <div>\n                  <clr-icon id=\"warning-icon\"\n                            shape=\"warning-standard\"\n                            size=\"24\"\n                            class=\"is-warning is-solid\"\n                            aria-hidden=\"true\">\n                  </clr-icon>\n                  <span id=\"warning-description\">{{warningDescription}}</span>\n               </div>\n               <div id=\"warning-details-container\">\n                  <a id=\"show-details-button\"\n                     *ngIf=\"!detailsExpanded\"\n                     href=\"javascript://\"\n                     (click)=\"detailsExpanded = true\">\n                     {{\"vsan.faultDomain.emptyFaultDomainWarning.buttons.showDetails\" | localized}}\n                  </a>\n                  <a id=\"hide-details-button\"\n                     *ngIf=\"detailsExpanded\"\n                     href=\"javascript://\"\n                     (click)=\"detailsExpanded = false\">\n                     {{\"vsan.faultDomain.emptyFaultDomainWarning.buttons.hideDetails\" | localized}}\n                  </a>\n               </div>\n               <ng-container *ngIf=\"detailsExpanded\">\n                  <span id=\"domains-datagrid-header\">\n                     {{\"vsan.faultDomain.emptyFaultDomainWarning.gridHeader\" | localized}}\n                  </span>\n                  <clr-datagrid id=\"domains-datagrid\">\n                     <clr-dg-column [clrDgField]=\"'label'\">\n                        {{\"vsan.faultDomain.emptyFaultDomainWarning.gridColumn\" | localized}}\n                     </clr-dg-column>\n\n                     <clr-dg-row *clrDgItems=\"let domain of domains\">\n                        <clr-dg-cell>{{domain.label}}</clr-dg-cell>\n                     </clr-dg-row>\n                  </clr-datagrid>\n               </ng-container>\n               <span id=\"delete-domains-question\">\n                  {{\"vsan.faultDomain.emptyFaultDomainWarning.confirm\" | localized}}\n               </span>\n            </div>\n         </vsan-prompt>\n      </div>\n   </div>\n</div>\n<div class=\"modal-backdrop opaque-backdrop\" *ngIf=\"visible\" aria-hidden=\"true\"></div>\n","<!--Copyright 2017-2022 VMware, Inc. All rights reserved. -- VMware Confidential-->\n<vsan-witness-host-requirements [headerKey]=\"'vsan.faultDomains.stretchedCluster.wizard.configure.page.witnessHost.description'\">\n</vsan-witness-host-requirements>\n<!-- Inventory list -->\n<vsan-inventory-browser\n      id=\"inventory-browser\"\n      [inventoryService]=\"hostInventoryService\"\n      [filterContext]=\"filterContext\"\n      [objRefs]=\"inventoryRoot\"\n      (nodeSelected)=\"hostSelected($event)\"\n      *ngIf=\"inventoryRoot\"\n      [searchInputAriaLabelKey]=\"'vsan.faultDomains.stretchedCluster.wizard.configure.page.witnessHost.searchInputAriaLabel'\">\n</vsan-inventory-browser>\n\n<!-- Validation message -->\n<vsan-validation id=\"witness-host-validation\"\n                 *ngIf=\"hostValidation\"\n                 [(alerts)]=\"hostValidation.validationMessages\"\n                 [alertType]=\"hostValidation.validationAlertType\"\n                 [allowClose]=\"false\">\n</vsan-validation>\n","/* Copyright 2017 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {PipeTransform, Pipe} from \"@angular/core\";\nimport {HostTreeItem} from \"@component/wizard/shared-pages/single-site-fault-domains-page.component\";\n\n@Pipe({\n   name: 'hostFilter'\n})\nexport class HostFilterPipe implements PipeTransform {\n\n   /**\n    * Filters host items list.\n    *\n    * @param items                     list to be filtered\n    * @param showOnlyStandaloneHosts   if only standalone hosts has to be left (standalone hosts are the ones that\n    *                                  are not part of a domain)\n    * @returns {HostTreeItem[]}        filtered list\n    */\n   transform(items: HostTreeItem[],  showOnlyStandaloneHosts: boolean): any {\n      return showOnlyStandaloneHosts ? items.filter((item: HostTreeItem) => !item.domainName) : items;\n   }\n}","<!--Copyright 2017-2021 VMware, Inc. All rights reserved. -- VMware Confidential-->\n<div>{{failuresToTolerate}}</div>\n\n<clr-button-group vsan-button-group class=\"btn-link\">\n   <clr-button id=\"createDomainAction\"\n               name=\"createDomainAction\"\n               (click)=\"openCreateDomainDialog()\"\n               class=\"btn btn-sm\"\n               [vsan-button-title]=\"'vsan.faultDomains.action.create.tooltip' | localized\">\n      {{\"vsan.faultDomains.action.create.label\" | localized}}\n   </clr-button>\n   <clr-button id=\"deleteDomainAction\"\n               name=\"deleteDomainAction\"\n               *ngIf=\"onlyDomainsSelected()\"\n               (click)=\"deleteDomains()\"\n               class=\"btn btn-sm\"\n               [vsan-button-title]=\"'vsan.faultDomains.action.removeHost.tooltip' | localized\">\n      {{\"vsan.faultDomains.action.removeHost.label\" | localized}}\n   </clr-button>\n</clr-button-group>\n\n<div droppable=\"true\" (onDrop)=\"itemDropped($event)\">\n   <clr-tree>\n      <clr-tree-node *ngFor=\"let rootItem of treeContent\">\n         <button (click)=\"selectItem(rootItem.label, $event)\"\n                 class=\"clr-treenode-link\"\n                 draggable=\"true\"\n                 [dragData]=\"rootItem\"\n                 (onDragEnter)=\"hintDropTarget(rootItem)\"\n                 (onDragStart)=\"itemDragged(rootItem)\"\n                 droppable=\"true\"\n                 (onDrop)=\"itemDropped($event, rootItem)\"\n                 [class.active]=\"rootItem.selected\">\n            <clr-icon [attr.shape]=\"rootItem.icon\"></clr-icon>\n            {{rootItem.label}}\n            <span class=\"badge badge-light-blue drop-hint-badge-opacity\"\n                  *ngIf=\"rootItem.badgeText\">\n               {{rootItem.badgeText}}\n            </span>\n         </button>\n         <vsan-single-site-fault-domain-nodes [clrIfExpanded]=\"true\" *ngIf=\"rootItem?.hosts\"\n                                              [rootItem]=\"rootItem\"\n                                              (onSelectItem)=\"selectItem($event.label, $event.event)\"\n                                              (onDragEnter)=\"hintDropTarget($event)\"\n                                              (onDragStart)=\"itemDragged($event)\"\n                                              (onDrop)=\"itemDropped($event.event, $event.host)\">\n         </vsan-single-site-fault-domain-nodes>\n      </clr-tree-node>\n   </clr-tree>\n</div>\n\n<vsan-create-fault-domain [domainsAndHosts]=\"treeContent\"\n                          [(visible)]=\"createDomainDialogVisible\"\n                          (onConfirmation)=\"updateDomains($event)\">\n</vsan-create-fault-domain>","<!-- TODO: restore dragOverClass property, it breaks Angular4 version of ng2-drag-drop -->\n<div class=\"configure-fd\">\n   <div class=\"fd-container\">\n      <div class=\"flex-input-wrapper\">\n         <clr-input-container class=\"control-full-width\">\n            <label for=\"preferredNameInput\">\n               {{\"vsan.faultDomains.stretchedCluster.wizard.configure.page.faultDomains.preferredDomain.label\" | localized}}\n            </label>\n            <input type=\"text\"\n                   clrInput\n                   class=\"fd-name\"\n                   id=\"preferredNameInput\"\n                   [(ngModel)]=\"preferredName\"\n                   maxlength=\"256\">\n         </clr-input-container>\n      </div>\n\n      <div droppable=\"true\"\n           [dropScope]=\"'secondary'\"\n           (onDrop)=\"dropToPreferred($event)\"\n           class=\"fd-tree-component\">\n         <clr-tree>\n            <clr-tree-node *ngFor=\"let domain of preferredDomains\">\n               <button (click)=\"selectPreferred(domain)\"\n                       (dblclick)=\"dropToSecondary({dragData: domain})\"\n                       class=\"clr-treenode-link\"\n                       [class.active]=\"domain === selectedPreferredItem\"\n                       draggable=\"true\"\n                       [dragScope]=\"'preferred'\"\n                       [dragData]=\"domain\">\n                  <clr-icon [attr.shape]=\"domain.iconId\"></clr-icon>\n                  <span>{{domain.label}}</span>\n               </button>\n               <vsan-fault-domain-nodes [clrIfExpanded]=\"true\" *ngIf=\"domain?.children\"\n                                        [domain]=\"domain\"\n                                        [selectedItem]=\"selectedPreferredItem\"\n                                        [dragScope]=\"'preferred'\"\n                                        (onSelect)=\"selectPreferred($event)\"\n                                        (onDrop)=\"dropToSecondary($event)\">\n               </vsan-fault-domain-nodes>\n            </clr-tree-node>\n         </clr-tree>\n      </div>\n   </div>\n\n   <div class=\"fd-move-button-group\">\n      <button class=\"btn fd-move-btn\"\n              id=\"moveToSecondaryButton\"\n              (click)=\"moveToSecondary()\"\n              [attr.aria-label]=\"'vsan.faultDomains.stretchedCluster.wizard.configure.page.faultDomains.moveToSecondaryDomain.label' | localized\">\n         <clr-icon shape=\"collapse right\"></clr-icon>\n      </button>\n      <button class=\"btn fd-move-btn\"\n              id=\"moveToPrimaryButton\"\n              (click)=\"moveToPreferred()\"\n              [attr.aria-label]=\"'vsan.faultDomains.stretchedCluster.wizard.configure.page.faultDomains.moveToPreferredDomain.label' | localized\">\n         <clr-icon shape=\"collapse left\"></clr-icon>\n      </button>\n   </div>\n\n   <div class=\"fd-container\">\n      <div class=\"flex-input-wrapper\">\n         <clr-input-container class=\"control-full-width\">\n            <label for=\"secondaryNameInput\">\n               {{\"vsan.faultDomains.stretchedCluster.wizard.configure.page.faultDomains.secondaryDomain.label\" | localized}}\n            </label>\n            <input type=\"text\"\n                   clrInput\n                   class=\"fd-name\"\n                   [(ngModel)]=\"secondaryName\"\n                   id=\"secondaryNameInput\"\n                   maxlength=\"256\">\n         </clr-input-container>\n      </div>\n\n      <div droppable=\"true\"\n           [dropScope]=\"'preferred'\"\n           (onDrop)=\"dropToSecondary($event)\"\n           class=\"fd-tree-component\">\n         <clr-tree>\n            <clr-tree-node *ngFor=\"let domain of secondaryDomains\">\n               <button (click)=\"selectSecondary(domain)\"\n                       (dblclick)=\"dropToPreferred({dragData: domain})\"\n                       class=\"clr-treenode-link\"\n                       [class.active]=\"domain === selectedSecondaryItem\"\n                       draggable=\"true\"\n                       [dragScope]=\"'secondary'\"\n                       [dragData]=\"domain\">\n                  <clr-icon [attr.shape]=\"domain.iconId\"></clr-icon>\n                  <span>{{domain.label}}</span>\n               </button>\n               <vsan-fault-domain-nodes [clrIfExpanded]=\"true\" *ngIf=\"domain?.children\"\n                                        [domain]=\"domain\"\n                                        [selectedItem]=\"selectedSecondaryItem\"\n                                        [dragScope]=\"'secondary'\"\n                                        (onSelect)=\"selectSecondary($event)\"\n                                        (onDrop)=\"dropToPreferred($event)\">\n               </vsan-fault-domain-nodes>\n            </clr-tree-node>\n         </clr-tree>\n      </div>\n   </div>\n</div>\n","<!--Copyright 2021 VMware, Inc. All rights reserved. -- VMware Confidential-->\n<clr-tree-node *ngFor=\"let host of rootItem.hosts\">\n   <button (click)=\"onSelectItem.emit({label: host.label, event: $event})\"\n           class=\"clr-treenode-link\"\n           draggable=\"true\"\n           [dragData]=\"host\"\n           (onDragEnter)=\"onDragEnter.emit(host)\"\n           (onDragStart)=\"onDragStart.emit(host)\"\n           droppable=\"true\"\n           (onDrop)=\"onDrop.emit({event: $event, host: host})\"\n           [class.active]=\"host.selected\">\n      <clr-icon [attr.shape]=\"host.icon\"></clr-icon>\n      {{host.label}}\n      <span class=\"badge badge-light-blue drop-hint-badge-opacity\"\n            *ngIf=\"host.badgeText\">\n      {{host.badgeText}}\n   </span>\n   </button>\n</clr-tree-node>\n","<!--Copyright 2021 VMware, Inc. All rights reserved. -- VMware Confidential-->\n<clr-tree-node *ngFor=\"let host of domain.children\">\n   <button (click)=\"onSelect.emit(host)\"\n           (dblclick)=\"onDrop.emit({dragData: host})\"\n           class=\"clr-treenode-link\"\n           [class.active]=\"domain === selectedItem || host === selectedItem\"\n           draggable=\"true\"\n           [dragScope]=\"dragScope\"\n           [dragData]=\"host\">\n      <clr-icon [attr.shape]=\"host.iconId\"></clr-icon>\n      <span>{{host.label}}</span>\n   </button>\n</clr-tree-node>","/* Copyright 2019-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {NgModule} from \"@angular/core\";\nimport {CommonModule} from \"@angular/common\";\nimport {FormsModule, ReactiveFormsModule} from \"@angular/forms\";\nimport {ClarityModule} from \"@clr/angular\";\nimport {CommonPipeModule} from \"@pipe/common-pipe.module\";\nimport {SingleSiteFaultDomainsPage} from \"@component/wizard/shared-pages/single-site-fault-domains-page.component\";\nimport {WitnessHostPageComponent} from \"@component/wizard/shared-pages/witness-host-page.component\";\nimport {ClaimDisksWitnessHostPage} from \"@component/wizard/shared-pages/claim-disks-witness-host-page.component\";\nimport {FaultDomainsPageComponent} from \"@component/wizard/shared-pages/fault-domains-page.component\";\nimport {VsanCommonModule} from \"app/vsan/common/vsan-common.module\";\nimport {NgDragDropModule} from \"ng-drag-drop\";\nimport {CreateFaultDomainComponent} from \"@component/wizard/shared-pages/create-fault-domain.component\";\nimport {DiskmgmtCommonModule} from \"@component/diskmgmt/diskmgmt-common.module\";\nimport {HostFilterPipe} from \"@component/wizard/shared-pages/create-fault-domain-host-filter.pipe\";\nimport {DeleteDomainWarningComponent} from \"@component/wizard/shared-pages/delete-domain-warning.component\";\nimport {WitnessValidationService} from \"@service/witness-validation.service\";\nimport {WitnessHostRequirementsComponent} from \"@component/wizard/shared-pages/witness-host-requirements.component\";\nimport {FaultDomainNodesComponent} from \"@component/wizard/shared-pages/fault-domain-nodes.component\";\nimport {SingleSiteFaultDomainNodesComponent} from \"@component/wizard/shared-pages/single-site-fault-domain-nodes.component\";\n\n@NgModule({\n   imports: [\n      CommonModule,\n      ClarityModule,\n      FormsModule,\n      ReactiveFormsModule,\n      CommonPipeModule,\n      VsanCommonModule,\n      NgDragDropModule.forRoot(),\n      DiskmgmtCommonModule\n   ],\n   declarations: [\n      SingleSiteFaultDomainsPage,\n      SingleSiteFaultDomainNodesComponent,\n      WitnessHostPageComponent,\n      WitnessHostRequirementsComponent,\n      ClaimDisksWitnessHostPage,\n      FaultDomainsPageComponent,\n      FaultDomainNodesComponent,\n      CreateFaultDomainComponent,\n      HostFilterPipe,\n      DeleteDomainWarningComponent\n   ],\n   entryComponents: [\n      SingleSiteFaultDomainsPage,\n      WitnessHostPageComponent,\n      WitnessHostRequirementsComponent,\n      ClaimDisksWitnessHostPage,\n      FaultDomainsPageComponent\n   ],\n   exports: [\n      SingleSiteFaultDomainsPage,\n      WitnessHostPageComponent,\n      WitnessHostRequirementsComponent,\n      ClaimDisksWitnessHostPage,\n      FaultDomainsPageComponent\n   ],\n   providers: [\n      WitnessValidationService\n   ]\n})\nexport class WizardSharedPagesModule {\n}","/* Copyright 2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, EventEmitter, Input, Output} from \"@angular/core\";\nimport {TreeItem} from \"@component/wizard/shared-pages/single-site-fault-domains-page.component\";\n/**\n * A separate component is required because of https://github.com/vmware/clarity/issues/5514\n */\n@Component({\n   selector: \"vsan-single-site-fault-domain-nodes\",\n   templateUrl: \"single-site-fault-domain-nodes.html\",\n   styleUrls: [\"single-site-fault-domain-nodes.scss\"],\n})\nexport class SingleSiteFaultDomainNodesComponent {\n   @Input()\n   rootItem: FaultDomainItem;\n\n   @Output()\n   onSelectItem: EventEmitter<{label: string, event: any}> = new EventEmitter<{label: string, event: any}>();\n\n   @Output()\n   onDragEnter: EventEmitter<any> = new EventEmitter<any>();\n\n   @Output()\n   onDragStart: EventEmitter<any> = new EventEmitter<any>();\n\n   @Output()\n   onDrop: EventEmitter<{event: any, host: any}> = new EventEmitter<{event: any, host: any}>();\n}\n\nexport class FaultDomainItem extends TreeItem {\n   hosts: any;\n}","<!--Copyright 2019-2021 VMware, Inc. All rights reserved. -- VMware Confidential-->\n<vsan-select-disks *ngIf=\"isVsanMaxWorkflow\"\n                   [clusterRef]=\"clusterRef\"\n                   [hostRef]=\"witnessHost\"\n                   [isVsanMaxEnabled]=\"isVsanMaxWorkflow\"\n                   (disksLoaded)=\"onLoadingComplete()\"\n                   (selectedDisksChange)=\"onStoragePoolDisksChange($event)\">\n</vsan-select-disks>\n<vsan-create-disk-group-page\n      *ngIf=\"!isVsanMaxWorkflow\"\n      [clusterRef]=\"clusterRef\"\n      [hostRef]=\"witnessHost\"\n      [isWitnessHost]=\"true\"\n      (dataLoaded)=\"onLoadingComplete()\"\n      (validateConfig)=\"configValidate($event)\"\n      (configChanged)=\"configChange($event)\">\n</vsan-create-disk-group-page>","<!--Copyright 2020-2021 VMware, Inc. All rights reserved. -- VMware Confidential-->\n<h6>\n   {{headerKey | localized}}\n   <clr-signpost id=\"witness-host-requirements\">\n      <clr-signpost-content clrPosition=\"bottom-left\" *clrIfOpen>\n         <h6>\n            {{\"vsan.faultDomains.stretchedCluster.wizard.configure.page.witnessHost.requirements\" | localized}}\n         </h6>\n         <ul class=\"list\">\n            <li>{{\"vsan.faultDomains.stretchedCluster.wizard.configure.page.witnessHost.req1\" | localized}}</li>\n            <li>{{\"vsan.faultDomains.stretchedCluster.wizard.configure.page.witnessHost.req2\" | localized}}</li>\n            <li>{{\"vsan.faultDomains.stretchedCluster.wizard.configure.page.witnessHost.req3\" | localized}}</li>\n         </ul>\n      </clr-signpost-content>\n   </clr-signpost>\n</h6>","/* Copyright 2017-2020 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, EventEmitter, Input, Output} from \"@angular/core\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {DomainTreeItem} from \"@component/wizard/shared-pages/single-site-fault-domains-page.component\";\n\n@Component({\n   templateUrl: \"delete-domain-warning.html\",\n   styleUrls: [\"delete-domain-warning.scss\"],\n   selector: \"vsan-delete-domain-warning\",\n})\nexport class DeleteDomainWarningComponent {\n\n   @Input()\n   domains: DomainTreeItem[] = [];\n\n   private dialogVisible: boolean = false;\n\n   @Input()\n   set visible(value: boolean) {\n      this.dialogVisible = value;\n      this.visibleChange.emit(value);\n   }\n\n   get visible(): boolean {\n      return this.dialogVisible;\n   }\n\n   @Output() visibleChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n   @Output() onConfirmation: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n   detailsExpanded: boolean = false;\n\n   apply = (): void => {\n      this.detailsExpanded = false;\n      this.visible = false;\n      this.onConfirmation.emit(true);\n   };\n\n   close = (): void => {\n      this.detailsExpanded = false;\n      this.visible = false;\n      this.onConfirmation.emit(false);\n   };\n\n   get dialogTitle(): string {\n      return this.domains.length > 1 ?\n            VsanUiUtils.getString(\"vsan.faultDomain.emptyFaultDomainWarning.titleMulti\", this.domains.length) :\n            VsanUiUtils.getString(\"vsan.faultDomain.emptyFaultDomainWarning.titleSingle\");\n   }\n\n   get warningDescription(): string {\n      return this.domains.length > 1 ?\n            VsanUiUtils.getString(\"vsan.faultDomain.emptyFaultDomainWarning.headerMulti\", this.domains.length) :\n            VsanUiUtils.getString(\"vsan.faultDomain.emptyFaultDomainWarning.headerSingle\");\n   }\n}","/* Copyright 2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, EventEmitter, Input, Output} from \"@angular/core\";\nimport {DomainOrHostData} from \"@generated/domain-or-host-data\";\n/**\n * A separate component is required because of https://github.com/vmware/clarity/issues/5514\n */\n@Component({\n   selector: \"vsan-fault-domain-nodes\",\n   templateUrl: \"fault-domain-nodes.html\",\n   styleUrls: [\"fault-domain-nodes.scss\"],\n})\nexport class FaultDomainNodesComponent {\n\n   @Input()\n   domain: DomainOrHostData;\n\n   @Input()\n   selectedItem: DomainOrHostData;\n\n   @Input()\n   dragScope: string;\n\n   @Output()\n   onSelect: EventEmitter<DomainOrHostData> = new EventEmitter<DomainOrHostData>();\n\n   @Output()\n   onDrop: EventEmitter<{dragData: DomainOrHostData}> = new EventEmitter<{dragData: DomainOrHostData}>();\n}","/* Copyright 2020-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, Input} from \"@angular/core\";\n\n@Component({\n   selector: \"vsan-witness-host-requirements\",\n   templateUrl: \"witness-host-requirements.html\",\n   styleUrls: [\"witness-host-requirements.scss\"]\n})\n\nexport class WitnessHostRequirementsComponent {\n\n   @Input()\n   headerKey: string = \"\";\n}\n","/* Copyright 2017-2019 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, OnInit} from \"@angular/core\";\nimport {InputProperty, OutputProperty, WizardPage} from \"@component/wizard/flow-metadata\";\nimport {OnValidate, PageControls} from \"@component/wizard/flow-wizard.component\";\nimport {DomainOrHostData} from \"@generated/domain-or-host-data\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {FaultDomainsUtil} from \"@util/fault-domains-util\";\n\n@Component({\n   templateUrl: \"fault-domains-page.html\",\n   styleUrls: [\"fault-domains-page.scss\"],\n})\n@WizardPage(\n      VsanUiUtils.getString(\"vsan.faultDomains.stretchedCluster.wizard.configure.page.faultDomains.title\"),\n      VsanUiUtils.getString(\"vsan.faultDomains.stretchedCluster.wizard.configure.page.faultDomains.description\"),\n)\nexport class FaultDomainsPageComponent implements OnInit, OnValidate {\n\n   static readonly DEFAULT_PREFERRED_NAME: string = VsanUiUtils.getString(\n         \"vsan.faultDomains.stretchedCluster.wizard.configure.page.faultDomains.defaultPreferredName\");\n   static readonly DEFAULT_SECONDARY_NAME: string = VsanUiUtils.getString(\n         \"vsan.faultDomains.stretchedCluster.wizard.configure.page.faultDomains.defaultSecondaryName\");\n\n   @InputProperty()\n   pageControls: PageControls;\n\n   @InputProperty()\n   availableDomains: DomainOrHostData[] = [];\n\n   @OutputProperty(OutputProperty.ifEmpty(VsanUiUtils.getString(\n         \"vsan.faultDomains.stretchedCluster.wizard.configure.page.faultDomains.validation.noName\")))\n   preferredName: string = FaultDomainsPageComponent.DEFAULT_PREFERRED_NAME;\n\n   @OutputProperty(OutputProperty.ifEmpty(VsanUiUtils.getString(\n         \"vsan.faultDomains.stretchedCluster.wizard.configure.page.faultDomains.validation.noHosts\")))\n   preferredDomains: DomainOrHostData[] = [];\n\n   @OutputProperty(OutputProperty.ifEmpty(VsanUiUtils.getString(\n         \"vsan.faultDomains.stretchedCluster.wizard.configure.page.faultDomains.validation.noName\")))\n   secondaryName: string = FaultDomainsPageComponent.DEFAULT_SECONDARY_NAME;\n\n   @OutputProperty(OutputProperty.ifEmpty(VsanUiUtils.getString(\n         \"vsan.faultDomains.stretchedCluster.wizard.configure.page.faultDomains.validation.noHosts\")))\n   secondaryDomains: DomainOrHostData[] = [];\n\n   @InputProperty(InputProperty.required(false))\n   hciWorkflow: boolean = false;\n\n   ngOnInit() {\n      const preferredDomain: DomainOrHostData = this.availableDomains.find(domain => domain.isPreferred);\n\n      if (preferredDomain) {\n         // This is the \"HCI extend\" workflow. We have preferred and secondary fault domains already set.\n         // Put the preferred fault domain and the standalone hosts into the first column.\n         // Others should be in the second one.\n         this.preferredDomains.push(...this.availableDomains.filter(domain => domain.isPreferred || domain.isHost));\n         this.secondaryDomains.push(...this.availableDomains.filter((domain) => !domain.isPreferred && !domain.isHost));\n      } else {\n         // This is the \"configure Stretched Cluster\" workflow and we don't have preferred fault domain set yet.\n         // Put everything in the \"preferred\" section and let the user organize them\n         this.preferredDomains.push(...this.availableDomains);\n      }\n\n      const actualDomains: DomainOrHostData[] = this.preferredDomains.filter(i => !i.isHost);\n      this.preferredName = actualDomains.length === 1\n            ? actualDomains[0].label\n            : FaultDomainsPageComponent.DEFAULT_PREFERRED_NAME;\n      this.secondaryName = FaultDomainsPageComponent.DEFAULT_SECONDARY_NAME;\n   }\n\n   selectedPreferredItem: DomainOrHostData;\n   selectedSecondaryItem: DomainOrHostData;\n\n   selectPreferred = (value: DomainOrHostData) => this.selectedPreferredItem = value;\n   selectSecondary = (value: DomainOrHostData) => this.selectedSecondaryItem = value;\n   moveToPreferred = () => this.fromSecondaryToPreferred(this.selectedSecondaryItem);\n   moveToSecondary = () => this.fromPreferredToSecondary(this.selectedPreferredItem);\n   dropToPreferred = (event) => this.fromSecondaryToPreferred(event.dragData);\n   dropToSecondary = (event) => this.fromPreferredToSecondary(event.dragData);\n\n   private fromPreferredToSecondary(data: DomainOrHostData) {\n      FaultDomainsUtil.move(data, this.preferredDomains, this.secondaryDomains);\n      this.selectedPreferredItem = null;\n      this.pageControls.rebuildToc();\n   }\n\n   private fromSecondaryToPreferred(data: DomainOrHostData) {\n      FaultDomainsUtil.move(data, this.secondaryDomains, this.preferredDomains);\n      this.selectedSecondaryItem = null;\n      this.pageControls.rebuildToc();\n   }\n\n   validate(): string[] {\n      if (!this.hciWorkflow &&\n            (!this.hasConnectedHosts(this.preferredDomains) || !this.hasConnectedHosts(this.secondaryDomains))) {\n         return [VsanUiUtils.getString(\n               \"vsan.faultDomains.stretchedCluster.wizard.configure.page.faultDomains.validation.noHosts\")];\n      }\n      if (this.preferredName.trim() === this.secondaryName.trim()) {\n         return [VsanUiUtils.getString(\n               \"vsan.faultDomains.stretchedCluster.wizard.configure.page.faultDomains.validation.duplicateName\")];\n      }\n      return null;\n   }\n\n   /**\n    * Returns true if the list of domains and hosts contain at least one connected host.\n    */\n   hasConnectedHosts(domainsAndHosts: DomainOrHostData[]): boolean {\n      const allHosts: DomainOrHostData[] = [];\n      for (const item of domainsAndHosts) {\n         if (item.isHost) {\n            allHosts.push(item);\n         } else {\n            allHosts.push(...item.children);\n         }\n      }\n      const firstConnectedHost = allHosts.find(host => !host.inMaintenanceMode);\n      return !!firstConnectedHost;\n   }\n}\n","/* Copyright 2017-2022 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, OnInit} from \"@angular/core\";\nimport {InventorySelectionEvent} from \"@component/inventory/inventory-node\";\nimport {AlertType} from \"@component/validation/alert-type\";\nimport {InputProperty, OutputProperty, WizardPage} from \"@component/wizard/flow-metadata\";\nimport {OnValidate, PageControls} from \"@component/wizard/flow-wizard.component\";\nimport {ConfigureStretchedClusterService} from \"@generated/configure-stretched-cluster-service\";\nimport {DiskManagementService} from \"@generated/disk-management-service\";\nimport {FilterContextKey} from \"@generated/filter-context-key\";\nimport {InventoryEntryData} from \"@generated/inventory-entry-data\";\nimport {VsanClaimDisksData} from \"@generated/vsan-claim-disks-data\";\nimport {VsanConfigSpec} from \"@generated/vsan-config-spec\";\nimport {VsanDiskMapping} from \"@generated/vsan-disk-mapping\";\nimport {VsanStretchedClusterService} from \"@generated/vsan-stretched-cluster-service\";\nimport {WitnessCandidateInventoryService} from \"@generated/witness-candidate-inventory-service\";\nimport {WitnessHostValidationResult} from \"@generated/witness-host-validation-result\";\nimport {ManagedObject, ManagedObjectUtils} from \"@service/managed-object\";\nimport {WitnessHostValidation, WitnessValidationService} from \"@service/witness-validation.service\";\nimport {DiskMgmtUtil} from \"@util/disk-mgmt.util\";\nimport {Logger} from \"@util/logger\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\n\n@Component({\n   templateUrl: \"witness-host-page.html\",\n   styleUrls: [\"witness-host-page.scss\"],\n})\n@WizardPage(\n      VsanUiUtils.getString(\"vsan.faultDomains.stretchedCluster.wizard.configure.page.witnessHost.title\"),\n)\nexport class WitnessHostPageComponent implements OnInit, OnValidate {\n\n   inventoryRoot: ManagedObject[];\n   filterContext: Map<FilterContextKey, ManagedObject>;\n   hostValidation: WitnessHostValidation;\n\n   @InputProperty()\n   vsanConfigSpec: VsanConfigSpec;\n\n   @InputProperty()\n   private pageControls: PageControls;\n\n   @InputProperty()\n   @OutputProperty()\n   clusterRef: ManagedObject;\n\n   @InputProperty(InputProperty.required(false))\n   currentWitnessHostRef: ManagedObject;\n\n   @OutputProperty(OutputProperty.ifNull(VsanUiUtils.getString(\n         \"vsan.faultDomains.stretchedCluster.wizard.configure.page.witnessHost.validation.noSelection\")))\n   witnessHost: ManagedObject;\n\n   @OutputProperty()\n   witnessHostName: string;\n\n   @OutputProperty()\n   hasDiskGroupsOnWitness: boolean = null;\n\n   /*\n    The witnessHostDiskMapping property is set in ClaimDisksWitnessHostPage.\n    It is conditional based on whether the selected host has disk groups.\n    Since the property is required for 'startingTaskProperty' method we must always define it.\n   */\n   @OutputProperty()\n   witnessHostDiskMapping: VsanDiskMapping;\n\n   /*\n    The storagePoolDisks property is set in ClaimDisksWitnessHostPage.\n    It is conditional based on whether the selected host is a Witness OVF virtual appliance and vsan max is enabled.\n    Since the property is required for 'startingTaskProperty' method we must always define it.\n    */\n   @OutputProperty()\n   storagePoolDisks: string[];\n\n   @OutputProperty()\n   isWitnessDeployedFromOvf: boolean = false;\n\n   /*\n    * Inject hostInventoryService as public as it is needed by the vsan-inventory-browser\n    */\n   constructor(public hostInventoryService: WitnessCandidateInventoryService,\n         private hostValidationService: WitnessValidationService,\n         private stretchedClusterService: VsanStretchedClusterService,\n         private configureStretchedClusterService: ConfigureStretchedClusterService,\n         private diskManagementService: DiskManagementService) {\n   }\n\n   async ngOnInit(): Promise<void> {\n      this.inventoryRoot = [ManagedObject.vcRoot(this.clusterRef.serverGuid)];\n      this.setInventoryFilterContext();\n   }\n\n   private setInventoryFilterContext(): void {\n      if (this.currentWitnessHostRef) {\n         const filterContext: Map<FilterContextKey, ManagedObject> = new Map();\n         filterContext.set(FilterContextKey.CURRENT_WITNESS_HOST_REF, this.currentWitnessHostRef);\n         this.filterContext = filterContext;\n      }\n   }\n\n   async hostSelected(event: InventorySelectionEvent): Promise<void> {\n      if (ManagedObject.areEqual(event.node.data.nodeRef, this.witnessHost)) {\n         // Same host selected, nothing to do\n         return;\n      }\n      this.resetValidation();\n      this.updateSelection(event.node.data);\n      if (!this.witnessHost) {\n         // Not a valid item selected from inventory, nothing to do further\n         return;\n      }\n      await this.queryAndValidateSelectedHost();\n   }\n\n   private resetValidation(): void {\n      this.hostValidation = null;\n      this.pageControls.clearValidationErrors();\n   }\n\n   private updateSelection(host: InventoryEntryData): void {\n      this.hasDiskGroupsOnWitness = false;\n      if (host.nodeRef.type === ManagedObjectUtils.HOST || host.nodeRef.type === ManagedObjectUtils.COMPUTE_RESOURCE) {\n         this.witnessHost = host.nodeRef;\n         this.witnessHostName = host.name;\n      } else {\n         this.witnessHost = null;\n         this.witnessHostName = \"\";\n      }\n   }\n\n   private async queryAndValidateSelectedHost(): Promise<void> {\n      this.pageControls.setBusyState();\n\n      [this.hostValidation, this.isWitnessDeployedFromOvf, this.hasDiskGroupsOnWitness] = await Promise.all([\n         this.getHostValidationResult(),\n         this.getIsWitnessDeployedFromOvf(),\n         this.hasWitnessClaimedDisks(),\n      ]);\n\n      this.pageControls.clearBusyState();\n      this.pageControls.rebuildToc();\n   }\n\n   private async getHostValidationResult(): Promise<WitnessHostValidation> {\n      try {\n         const hostValidationResult: WitnessHostValidationResult =\n               await this.configureStretchedClusterService.getNewWitnessHostValidationError(\n                     this.clusterRef,\n                     this.witnessHost,\n                     this.vsanConfigSpec.isVsanMaxEnabled);\n         return this.hostValidationService.handleSingleClusterWitnessValidationResult(\n               hostValidationResult, this.vsanConfigSpec);\n      } catch (error) {\n         Logger.error(\"Unable to get host validation result: \" + error);\n         return this.hostValidationService.handleHostValidationError(error);\n      }\n   }\n\n   private async getIsWitnessDeployedFromOvf(): Promise<boolean> {\n      try {\n         return await this.stretchedClusterService.isWitnessDeployedFromOvf(this.witnessHost);\n      } catch (error) {\n         Logger.error(\"Unable to determine if the selected host is a Virtual appliance deployed from an OVF: \", error);\n         return false;\n      }\n   }\n\n   private async hasWitnessClaimedDisks(): Promise<boolean> {\n      try {\n         const witnessDisksData: VsanClaimDisksData = await this.diskManagementService\n               .getHostDisksClaimingData(this.witnessHost, this.vsanConfigSpec.isVsanMaxEnabled);\n         return this.vsanConfigSpec.isVsanMaxEnabled\n               ? DiskMgmtUtil.hasVsanMaxClaimedDisks(witnessDisksData)\n               : DiskMgmtUtil.hasDiskGroups(witnessDisksData);\n      } catch (e) {\n         // TODO: dtsvetkova - remove this once 2927115 is resolved\n         Logger.error(\"Unable to get witness host's claimed disks: \" + e);\n         return false;\n      }\n\n   }\n\n   validate(): string[] {\n      if (this.hostValidation &&\n            [AlertType.DANGER, AlertType.WARNING].includes(this.hostValidation.validationAlertType)) {\n         // Prevent the user from proceeding if the selected host had validation errors.\n         return this.hostValidation.validationMessages;\n      }\n      return null;\n   }\n}\n","<div class=\"modal\" *ngIf=\"visible\">\n   <div class=\"modal-dialog\" role=\"dialog\" aria-hidden=\"true\">\n      <div class=\"modal-content\">\n         <vsan-prompt [title]=\"'vsan.faultDomains.action.createDomain.title' | localized\"\n                      [confirmText]=\"'vsan.common.ok' | localized\"\n                      [cancelText]=\"'vsan.common.cancel' | localized\"\n                      [blockButton]=\"isApplyButtonBlocked\"\n                      [(alertMessages)]=\"alertMessages\"\n                      (onCancel)=\"close()\"\n                      (onConfirm)=\"apply()\">\n            <form [formGroup]=\"createFaultDomain\">\n               <clr-input-container class=\"horizontal-layout label-auto-size control-full-width\">\n                  <label id=\"domain-name-label\" for=\"domain-name-input\">\n                     {{\"vsan.faultDomains.action.createDomain.nameInputLabel\" | localized}}\n                  </label>\n                  <input id=\"domain-name-input\"\n                         clrInput\n                         vsan-auto-focus\n                         formControlName=\"{{DOMAIN_NAME}}\"\n                         type=\"text\"\n                         name=\"domainName\" />\n                  <clr-control-error (error)=\"VALIDATION_ERROR\">\n                     {{invalidDomainNameMessage}}\n                  </clr-control-error>\n               </clr-input-container>\n\n               <clr-select-container class=\"horizontal-layout label-auto-size control-full-width\">\n                  <label for=\"host-filter\">\n                     {{\"vsan.faultDomains.action.createDomain.hostFilter.label\" | localized}}\n                  </label>\n                  <select id=\"host-filter\"\n                          class=\"filter-dropdown\"\n                          clrSelect\n                          (change)=\"applyFilter($event.target.selectedIndex == 0)\">\n                     <option [selected]=\"showOnlyStandaloneHosts == true\">\n                        {{\"vsan.faultDomains.action.createDomain.hostFilter.standaloneHosts\" | localized}}\n                     </option>\n                     <option [selected]=\"showOnlyStandaloneHosts == false\">\n                        {{\"vsan.faultDomains.action.createDomain.hostFilter.allHosts\" | localized}}\n                     </option>\n                  </select>\n               </clr-select-container>\n            </form>\n\n            <div>\n               {{\"vsan.faultDomains.action.createDomain.selectHostsHint\" | localized}}\n            </div>\n\n            <clr-datagrid id=\"host-list\" [(clrDgSelected)]=\"selectedHosts\">\n               <clr-dg-column [clrDgField]=\"'label'\">\n                  {{\"vsan.faultDomains.action.createDomain.hostColumn\" | localized}}\n               </clr-dg-column>\n               <clr-dg-column [clrDgField]=\"'domainName'\">\n                  {{\"vsan.faultDomains.action.createDomain.domainColumn\" | localized}}\n               </clr-dg-column>\n\n               <clr-dg-row *clrDgItems=\"let item of allHosts | hostFilter:showOnlyStandaloneHosts\"\n                           [clrDgItem]=\"item\">\n                  <clr-dg-cell>\n                     <clr-icon *ngIf=\"item.icon\" [attr.shape]=\"item.icon\"></clr-icon>\n                     {{item.label}}\n                  </clr-dg-cell>\n                  <clr-dg-cell>\n                     <clr-icon *ngIf=\"item.domainName\" shape=\"list\"></clr-icon>\n                     {{item.domainName}}\n                  </clr-dg-cell>\n               </clr-dg-row>\n\n               <clr-dg-footer>\n                  <span *ngIf=\"(allHosts | hostFilter:showOnlyStandaloneHosts).length == 1\">\n                     {{\"vsan.faultDomains.action.hostCountOne\" | localized}}\n                  </span>\n                  <span *ngIf=\"(allHosts | hostFilter:showOnlyStandaloneHosts).length != 1\">\n                     {{\"vsan.faultDomains.action.hostCount\" |\n                           localized:(allHosts | hostFilter:showOnlyStandaloneHosts).length}}\n                  </span>\n               </clr-dg-footer>\n            </clr-datagrid>\n         </vsan-prompt>\n\n         <vsan-delete-domain-warning [domains]=\"domainsForDelete\"\n                                     [(visible)]=\"deleteDomainWarningVisible\"\n                                     (onConfirmation)=\"onCreateNewDomainConfirmation($event)\">\n         </vsan-delete-domain-warning>\n      </div>\n   </div>\n</div>\n<div class=\"modal-backdrop opaque-backdrop\" *ngIf=\"visible\" aria-hidden=\"true\"></div>\n","/* Copyright 2017, 2019 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, EventEmitter, Input, Output} from \"@angular/core\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {Icon} from \"@util/icon\";\nimport {DomainTreeItem, HostTreeItem, TreeItem} from \"./single-site-fault-domains-page.component\";\nimport {\n   AbstractControl,\n   FormBuilder,\n   FormControl,\n   FormGroup,\n   ValidationErrors,\n   ValidatorFn\n} from \"@angular/forms\";\nimport {ReactiveFormUtil} from \"@util/reactive-form-util\";\n\n@Component({\n   templateUrl: \"create-fault-domain.html\",\n   styleUrls: [\"create-fault-domain.scss\"],\n   selector: \"vsan-create-fault-domain\"\n})\nexport class CreateFaultDomainComponent {\n\n   @Input()\n   domainsAndHosts: TreeItem[];\n\n   readonly DOMAIN_NAME: string = \"domainName\";\n   readonly VALIDATION_ERROR: string = \"validationError\";\n\n   createFaultDomain: FormGroup;\n\n   invalidDomainNameMessage: string;\n\n   private _visible: boolean;\n\n   // Used to track if the dialog was modified or not\n   private initialState: boolean = true;\n\n   constructor(private formBuilder: FormBuilder) {\n      this.createFaultDomain = this.formBuilder.group({\n         [this.DOMAIN_NAME]:\n               new FormControl(\"\", [this.validateDomainName])\n      });\n   }\n\n   @Input()\n   set visible(value: boolean) {\n      this._visible = value;\n      this.visibleChange.emit(value);\n      if (value) {\n         this.resetDialog();\n         this.initData();\n      }\n   }\n\n   get visible(): boolean {\n      return this._visible;\n   }\n\n   @Output()\n   visibleChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n   @Output()\n   onConfirmation: EventEmitter<DomainTreeItem> = new EventEmitter<DomainTreeItem>();\n\n   alertMessages: string[] = [];\n   showOnlyStandaloneHosts: boolean = true;\n   deleteDomainWarningVisible: boolean = false;\n\n   selectedHosts: HostTreeItem[] = [];\n   allHosts: HostTreeItem[] = [];\n\n   resetDialog = (): void => {\n      this.showOnlyStandaloneHosts = true;\n      this.allHosts = [];\n      this.selectedHosts = [];\n      this.initialState = true;\n      this.createFaultDomain.markAsUntouched();\n      this.clearValidation();\n   };\n\n   initData = (): void => {\n      if (this.domainsAndHosts) {\n         this.domainsAndHosts.forEach((item: TreeItem): void => {\n            if (item instanceof DomainTreeItem) {\n               if (item.hosts) {\n                  item.hosts.forEach((host: HostTreeItem): void => {\n                     this.allHosts.push(host);\n                     if (host.selected || item.selected) {\n                        this.selectedHosts.push(host);\n\n                        // if a host in a fault domain is selected\n                        // show all host in the datagrid\n                        this.showOnlyStandaloneHosts = false;\n                     }\n                  });\n               }\n            } else if (item instanceof HostTreeItem) {\n               this.allHosts.push(item);\n               if (item.selected) {\n                  this.selectedHosts.push(item);\n               }\n            }\n         });\n      }\n   };\n\n   apply = (): void => {\n      if (!this.isValid()) {\n         return;\n      }\n\n      if (this.domainsForDelete.length > 0) {\n         this.deleteDomainWarningVisible = true;\n      } else {\n         this.createDomain();\n         this.close();\n      }\n   };\n\n   isValid(): boolean {\n      this.initialState = false;\n      if (!this.createFaultDomain.valid) {\n         // If form is not touched, validation should be triggered manually in order to show validation errors\n         if (!this.createFaultDomain.touched) {\n            ReactiveFormUtil.validateAllFormFields(this.createFaultDomain);\n         }\n\n         return false;\n      }\n\n      if (this.selectedHosts.length === 0) {\n         this.alertMessages.push(VsanUiUtils.getString(\"vsan.faultDomains.action.createDomain.validation.noHost\"));\n         return false;\n      }\n      return true;\n   }\n\n   get isApplyButtonBlocked(): boolean {\n      return this.createFaultDomain.touched && this.createFaultDomain.invalid;\n   }\n\n   validateDomainName: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n      this.invalidDomainNameMessage = this.getDomainNameErrorMessage(control.value.trim());\n      if (!this.invalidDomainNameMessage) {\n         return null;\n      }\n\n      return {\n         [this.VALIDATION_ERROR]: {\n            value: this.invalidDomainNameMessage\n         }\n      };\n   };\n\n   getDomainNameErrorMessage(name: string): string {\n      if (!name) {\n         return VsanUiUtils.getString(\"vsan.faultDomains.action.createDomain.validation.noName\");\n      }  else if (name.length > 256) {\n         return VsanUiUtils.getString(\"vsan.faultDomains.action.renameDomain.validation.nameTooLong\");\n      } else if (this.getExistingDomainNames().indexOf(name) >= 0) {\n         return VsanUiUtils.getString(\"vsan.faultDomains.action.createDomain.validation.duplicateName\");\n      }\n\n      return null;\n   }\n\n   clearValidation = (): void => {\n      this.alertMessages = [];\n      this.invalidDomainNameMessage = null;\n   };\n\n   createDomain = (): void => {\n      const domainName = this.createFaultDomain.get(this.DOMAIN_NAME).value.trim();\n      this.createFaultDomain.get(this.DOMAIN_NAME).patchValue(\"\");\n\n      this.onConfirmation.emit(\n            new DomainTreeItem(domainName, Icon.FAULT_DOMAIN,\n                  false, this.selectedHosts));\n   };\n\n   close = (): void => {\n      this.visible = false;\n   };\n\n   applyFilter = (onlyStandalone: boolean): void => {\n      this.showOnlyStandaloneHosts = onlyStandalone;\n      // clear selected host if the datagrid perspective changes\n      this.selectedHosts = [];\n   };\n\n   getExistingDomainNames = (): string[] => {\n      const result: string[] = [];\n      this.domainsAndHosts.forEach((item): void => {\n         if (item instanceof DomainTreeItem) {\n            result.push(item.label);\n         }\n      });\n\n      return result;\n   };\n\n   get domainsForDelete(): DomainTreeItem[] {\n      const result: DomainTreeItem[] = [];\n      this.domainsAndHosts.forEach((item): void => {\n         if (item instanceof DomainTreeItem && item.hosts) {\n            // check which of the hosts under the domain are part of the selected hosts list\n            const hostHasToBeDeleted: boolean = item.hosts.every((host) => {\n               return this.selectedHosts.indexOf(host) !== -1;\n            });\n\n            if (hostHasToBeDeleted) {\n               result.push(item);\n            }\n         }\n      });\n\n      return result;\n   }\n\n   get createDomainDialogClass(): string {\n      return this.deleteDomainWarningVisible ? \"disable-action\" : \"\";\n   }\n\n   /**\n    * Handles user choice if a new domain has to be created or not.\n    * This is invoked only if the domain's host were part of domains\n    * that will be left empty. As there is no sense to keep empty domains,\n    * all empty domains will be deleted.\n    *\n    * @param deleteEmptyDomains    if the user confirmed that the new domains has to be deleted\n    *                              and all previously created domains without host will be wiped out\n    */\n   onCreateNewDomainConfirmation = (deleteEmptyDomains: boolean): void => {\n      if (deleteEmptyDomains) {\n         this.createDomain();\n         this.close();\n      }\n\n      this.deleteDomainWarningVisible = false;\n   };\n}\n"]}