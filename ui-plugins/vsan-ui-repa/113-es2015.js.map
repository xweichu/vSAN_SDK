{"version":3,"sources":["./src/app/vsan/common/directive/clr-button-group/clr-button-base.directive.ts","./src/app/vsan/common/directive/signpost-title/signpost-title.directive.ts","./src/app/vsan/common/component/datagrid/tree-datagrid.module.ts","./src/app/vsan/common/service/navigation/model/knowledge-base-id.ts","./src/app/vsan/common/util/modal-builder.ts","./src/app/vsan/proactivetests/view/test-details.component.ts","./src/app/vsan/common/component/popup-list/popup-list.module.ts","./src/app/vsan/proactivetests/view/run-test-dialog.component.ts","./src/app/vsan/common/component/navigation/vsan-breadcrumb.module.ts","./src/app/vsan/proactivetests/view/run-test-dialog.html","./src/app/vsan/common/component/unavailable-view/unavailable-view.module.ts","./src/app/vsan/common/component/inventory/tree-view/tree-node.ts","./src/app/vsan/common/util/vsan-dialog-util.ts","./src/app/vsan/common/component/cell/common-cells.module.ts","./src/app/vsan/proactivetests/view/proactive-tests.component.ts","./src/app/vsan/proactivetests/proactive-tests.module.ts","./src/app/vsan/proactivetests/model/proactive-test-result.ts","./src/app/vsan/proactivetests/view/test-details.html","./src/app/vsan/proactivetests/view/proactive-tests.html","./src/app/vsan/common/directive/external-link/external-link.directive.ts","./src/app/vsan/common/vsan-common.module.ts","./src/app/vsan/common/component/action-button/action-button.module.ts"],"names":[],"mappings":"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","file":"113-es2015.js","sourcesContent":["/* Copyright 2020 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {ClrButton} from \"@clr/angular\";\n\n/**\n * Use this class as base class for directive, which handles clr-button. It will help to link the rendered button with\n * the clr-button on which the directive is applied.\n */\nexport abstract class ClrButtonBaseDirective {\n\n   constructor(private clrButton: ClrButton) {\n      if (!clrButton) {\n         return;\n      }\n      // name should be set, if not provided in template - generate one. ClrButtom#name is used to generate the name\n      // attribute of the markup button. Later the name is used to match the generated markup with the directive.\n      if (!clrButton.name) {\n         clrButton.name = Math.random().toString();\n      }\n\n      const directiveHolder: DirectiveHolder = (clrButton as DirectiveHolder);\n      directiveHolder.directives = directiveHolder.directives || [];\n      directiveHolder.directives.push(this);\n   }\n\n   /**\n    * This method will be called when the actual html button is rendered.\n    */\n   abstract resolveButton(clrButton: ClrButton, button: HTMLButtonElement, index: number);\n}\n\nexport interface DirectiveHolder extends ClrButton {\n   directives: ClrButtonBaseDirective[];\n}","/* Copyright 2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {AfterViewInit, Directive, ElementRef, Input, Renderer2} from \"@angular/core\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\n\n/**\n * Attribute directive for setting a custom title to the clr-icon inside a clr-signpost.\n * It also adds aria-label with the same value and aria-expanded=\"false\" to the button, holding the icon.\n * Used for changing the title when a clr-icon is not explicitly added inside a clr-signpost.\n */\n@Directive({\n   selector: \"clr-signpost\",\n})\nexport class SignpostTitleDirective implements AfterViewInit {\n   private readonly BUTTON_TAG_NAME: string = \"button\";\n   private readonly CLR_ICON_TAG_NAME: string = \"clr-icon\";\n\n   private readonly TITLE_ATTRIBUTE: string = \"title\";\n   private readonly ARIA_EXPANDED_ATTRIBUTE: string = \"aria-expanded\";\n   private readonly ARIA_LABEL_ATTRIBUTE: string = \"aria-label\";\n\n   @Input(\"vsan-signpost-title\")\n   signpostTitle: string;\n\n   constructor(private el: ElementRef<HTMLElement>,\n         private renderer: Renderer2) {\n   }\n\n   ngAfterViewInit(): void {\n      if (!this.signpostTitle) {\n         return;\n      }\n\n      const signpostIcon: Element = this.el.nativeElement.getElementsByTagName(this.CLR_ICON_TAG_NAME).item(0);\n      if (signpostIcon) {\n         this.renderer.setAttribute(signpostIcon, this.TITLE_ATTRIBUTE, VsanUiUtils.getString(this.signpostTitle));\n      }\n      const button: Element = this.el.nativeElement.getElementsByTagName(this.BUTTON_TAG_NAME).item(0);\n      if (button) {\n         this.renderer.setAttribute(button, this.ARIA_EXPANDED_ATTRIBUTE, \"false\");\n         this.renderer.setAttribute(button, this.ARIA_LABEL_ATTRIBUTE, VsanUiUtils.getString(this.signpostTitle));\n      }\n   }\n}\n","/* Copyright 2019-2020 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {NgModule} from \"@angular/core\";\nimport {CommonModule} from \"@angular/common\";\nimport {FormsModule} from \"@angular/forms\";\nimport {ClarityModule} from \"@clr/angular\";\nimport {ValidationModule} from \"@component/validation/validation.module\";\nimport {CommonPipeModule} from \"@pipe/common-pipe.module\";\nimport {TreeExpanderComponent} from \"@component/datagrid/tree-expander.component\";\nimport {TreeColumnComponent} from \"@component/datagrid/tree-column.component\";\nimport {EnumeratedFilterComponent} from \"./filter/enumerated-filter.component\";\nimport {EnumeratedFilterItemComponent} from \"./filter/enumerated-filter-item.component\";\nimport {EnumFilterComponent} from \"@component/datagrid/filter/enum-filter.component\";\n\n@NgModule({\n   imports: [\n      CommonModule,\n      FormsModule,\n      ClarityModule,\n      ValidationModule,\n      CommonPipeModule,\n   ],\n   declarations: [\n      TreeColumnComponent,\n      TreeExpanderComponent,\n      EnumeratedFilterComponent,\n      EnumeratedFilterItemComponent,\n      EnumeratedFilterComponent,\n      EnumFilterComponent,\n   ],\n   exports: [\n      TreeColumnComponent,\n      TreeExpanderComponent,\n      EnumeratedFilterComponent,\n      EnumeratedFilterItemComponent,\n      EnumFilterComponent,\n   ],\n})\nexport class TreeDatagridModule {\n}\n","/* Copyright 2021 VMware, Inc. All rights reserved. -- VMware Confidential */\n/**\n * IDs used in external KB link navigation\n */\nexport enum KnowledgeBaseId {\n   PRECHECK_PCP = \"83954\",\n   VIRTUAL_OBJECTS = \"2108319\",\n   UPGRADE = \"2148493\",\n   PERFORMANCE_DIAGNOSTICS = \"2148770\",\n   SUPPORT_INSIGHT = \"60206\",\n}\n","/* Copyright 2017-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {environment} from \"@env/environment\";\nimport {ManagedObject} from \"@service/managed-object\";\nimport {Logger} from \"./logger\";\nimport {WebPlatform} from \"./platform\";\nimport {VsanUiUtils} from \"./vsan-util\";\n\nexport class ModalBuilder {\n\n   static readonly WIDTH: number = 0;\n   static readonly HEIGHT: number = 1;\n\n   static readonly DEFAULT_SIZE: number[] = [1000, 530];\n   static readonly WIZARD_XL: number[] = [1200, 700];\n\n   static readonly APP_URL: string = (environment.repa && environment.repaExtension)\n         ? \"index.html\"\n         : \"/ui/h5-vsan-ui/\";\n\n   private size: number[] = ModalBuilder.DEFAULT_SIZE;\n\n   // When null, the modal dialog will be headless and the docked\n   // view is expected to provide a title bar.\n   private title: string = null;\n\n   private accessibilityTitle: string = null;\n\n   private urlParams: any = {};\n\n   private eventTarget: EventTarget;\n\n   constructor(private appId: string) {\n   }\n\n   setDimensions(dimensions: number[]): ModalBuilder {\n      if (!dimensions || dimensions.length !== 2) {\n         Logger.warn(\"invalid modal dimensions\", dimensions);\n         dimensions = ModalBuilder.DEFAULT_SIZE;\n      }\n      return this.setSize(dimensions[ModalBuilder.WIDTH], dimensions[ModalBuilder.HEIGHT]);\n   }\n\n   setSize(width: number, height: number): ModalBuilder {\n      this.size = [width, height];\n      return this;\n   }\n\n   setUrlParameters(params: any): ModalBuilder {\n      this.urlParams = params;\n      return this;\n   }\n\n   /**\n    * Set to null if the view provides its own title bar\n    */\n   setTitle(title: string): ModalBuilder {\n      this.title = title;\n      return this;\n   }\n\n   setAccessibilityTitle(accessibilityTitle: string): ModalBuilder {\n      this.accessibilityTitle = accessibilityTitle;\n      return this;\n   }\n\n   /**\n    * Set explicit event target if it is changed before opening the modal.\n    * For example when making a preceding request the event target is the XMLHttpRequest object.\n    */\n   setEventTarget(eventTarget: EventTarget): ModalBuilder {\n      this.eventTarget = eventTarget;\n      return this;\n   }\n\n   /**\n    * Opens a modal dialog and returns a promise to collect the result; On close the target element is focused.\n    * @param context - any JS data object, can be retrieved by WebPlatform.getModalContext()\n    * @returns {Promise<any>} - Invoked if the dialog invokes WebPlatform.closeModalDialog(arg)\n    *       with non-null arg. The promise is never rejected.\n    */\n   open(context?: any): Promise<any> {\n      return new Promise<any>((accept) => {\n         VsanUiUtils.pluginContext.targetElement = this.eventTarget ? this.eventTarget :\n               (event && event.target ? event.target : null);\n         VsanUiUtils.pluginContext.modalResultHandler = (data?: any) => {\n            if (typeof data !== \"undefined\") {\n               // Deep copy of the object was required to resolve an issue with object's prototype overriding when\n               // passing complex objects in IE11/Edge; Keep it for safety.\n               accept(JSON.parse(JSON.stringify(data)));\n            } else if (VsanUiUtils.pluginContext.targetElement && VsanUiUtils.pluginContext.targetElement.focus) {\n               // On cancel just focus the target element. Timeout is required as otherwise the focus may be\n               // consumed by the mouse click.\n               setTimeout(() => VsanUiUtils.pluginContext.targetElement.focus(), 100);\n            }\n         };\n\n         let actionUrl: string = `${ModalBuilder.APP_URL}?viewId=${this.appId}`;\n\n         let separator: string = \"?\";\n         for (const param in this.urlParams) {\n            actionUrl += separator + param + \"=\" + this.urlParams[param];\n            separator = \"&\";\n         }\n\n         WebPlatform.openModalDialog(this.title,\n               actionUrl,\n               ManagedObject.contextObjectUid,\n               this.size[0], this.size[1],\n               this.title != null,\n               VsanUiUtils.pluginContext.modalResultHandler /* onClose */,\n               context /* retrieve with Platform.getModalContext() */,\n               this.accessibilityTitle);\n      });\n   }\n\n}\n","/* Copyright 2020-2022 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, Input} from \"@angular/core\";\nimport {VsanTestTable} from \"@generated/vsan-test-table\";\nimport {VsanHealthUtil} from \"@util/vsan-health-util\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {VsanHealthStatus} from \"@generated/vsan-health-status\";\nimport {VsanTestRow} from \"@generated/vsan-test-row\";\n\n@Component({\n   templateUrl: \"test-details.html\",\n   selector: \"vsan-tests-details\",\n   styleUrls: [\"test-details.scss\"],\n})\nexport class TestDetailsComponent {\n   VsanUiUtils: typeof VsanUiUtils = VsanUiUtils;\n   VsanHealthUtil: typeof VsanHealthUtil = VsanHealthUtil;\n   readonly DEFAULT_ITEMS_PER_PAGE: number = 10;\n\n   private _detailsArray: VsanTestTable[];\n\n   @Input()\n   loading: boolean;\n\n   @Input()\n   set detailsArray(data: VsanTestTable[]) {\n      if (VsanUiUtils.isEmpty(data)) {\n         this._detailsArray = [];\n         return;\n      }\n      if (VsanUiUtils.isEmpty(this._detailsArray)) {\n         this._detailsArray = data;\n         return;\n      }\n      this._detailsArray.map((item, index) => {\n         item.rows = data[index].rows;\n      });\n   }\n\n   get detailsArray(): VsanTestTable[] {\n      return this._detailsArray;\n   }\n\n   get testResults(): VsanTestRow[] {\n      return VsanUiUtils.isEmpty(this.detailsArray) ? null : this.detailsArray[0].rows;\n   }\n\n   getHealthStatusLabel(cellValue: any): string {\n      switch (cellValue) {\n         case VsanHealthStatus.yellow:\n            return VsanUiUtils.getString(\"vsan.health.monitor.proactive.warningStatus\");\n         case VsanHealthStatus.green:\n            return VsanUiUtils.getString(\"vsan.health.monitor.proactive.okStatus\");\n         case VsanHealthStatus.red:\n            return VsanUiUtils.getString(\"vsan.health.monitor.proactive.errorStatus\");\n      }\n   }\n}\n","/* Copyright 2019 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {NgModule} from \"@angular/core\";\nimport {CommonModule} from \"@angular/common\";\nimport {ClarityModule} from \"@clr/angular\";\nimport {CommonPipeModule} from \"@pipe/common-pipe.module\";\nimport {PopupListComponent} from \"@component/popup-list/popup-list.component\";\nimport {PopupListItemDirective} from \"@component/popup-list/popup-list-item.directive\";\n\n@NgModule({\n   imports: [\n      CommonModule,\n      ClarityModule,\n      CommonPipeModule\n   ],\n   declarations: [\n      PopupListComponent,\n      PopupListItemDirective\n   ],\n   exports: [\n      PopupListComponent,\n      PopupListItemDirective\n   ]\n})\nexport class PopupListModule {\n}\n","/* Copyright 2017-2020 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, OnInit} from \"@angular/core\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {ManagedObject} from \"@service/managed-object\";\nimport {ProactiveTestResult} from \"./../model/proactive-test-result\";\nimport {ProactiveTestData} from \"@generated/proactive-test-data\";\nimport {PerfStatsObjectInfo} from \"@generated/perf-stats-object-info\";\nimport {VsanPerfPropertyProvider} from \"@generated/vsan-perf-property-provider\";\nimport {VsanPerfMutationProvider} from \"@generated/vsan-perf-mutation-provider\";\nimport {VsanCapabilityProvider} from \"@generated/vsan-capability-provider\";\nimport {VsanCapabilityData} from \"@generated/vsan-capability-data\";\nimport {PerfStatesObjSpec} from \"@generated/perf-states-obj-spec\";\nimport {CsdService} from \"@generated/csd-service\";\n\n@Component({\n   templateUrl: \"run-test-dialog.html\",\n   styleUrls: [\"run-test-dialog.scss\"],\n   selector: \"vsan-run-test-dialog\",\n})\nexport class RunTestDialogComponent {\n   private static readonly MODAL_NON_NETWORK_DIAGNOSTICS_HEIGHT: number = 230;\n\n   dialogTitle: string;\n   dialogQuestion: string;\n   dialogContent: string;\n   errorMessage: string[];\n   perfSetting: PerfStatsObjectInfo;\n   networkDiagnosticsModeAllowed: boolean;\n   turnOnNetworkDiagnosticMode: boolean;\n   loading: boolean = false;\n\n   private isComputeOnlyCluster: boolean;\n   private clusterCapabilityData: VsanCapabilityData;\n   private selectedTest: ProactiveTestResult;\n\n   constructor(private capabilityProvider: VsanCapabilityProvider,\n         private perfPropertyProvider: VsanPerfPropertyProvider,\n         private perfMutationProvider: VsanPerfMutationProvider,\n         private csdService: CsdService) {\n   }\n\n   async ngOnInit(): Promise<void> {\n      this.selectedTest = VsanUiUtils.getModalContext();\n      this.dialogTitle = VsanUiUtils.getString(\"vsan.health.monitor.proactive.warning.title\",\n            this.selectedTest.name);\n      switch (this.selectedTest.type) {\n         case ProactiveTestData.PerfTestType.vmCreation:\n            this.dialogQuestion = VsanUiUtils.getString(\"vsan.health.monitor.proactive.warning.vmCreation.question\");\n            this.dialogContent = VsanUiUtils.getString(\"vsan.health.monitor.proactive.warning.vmCreation.desc\");\n            break;\n         case ProactiveTestData.PerfTestType.unicast:\n            VsanUiUtils.setModalDialogHeight(360);\n\n            this.dialogQuestion =\n                  VsanUiUtils.getString(\"vsan.health.monitor.proactive.warning.network.unicast.question\");\n            this.dialogContent =\n                  VsanUiUtils.getString(\"vsan.health.monitor.proactive.warning.network.unicast.desc\");\n            this.loading = true;\n            [this.perfSetting, this.clusterCapabilityData, this.isComputeOnlyCluster] = await Promise.all([\n               this.perfPropertyProvider.getPerfStatsInfo(ManagedObject.contextObject),\n               this.capabilityProvider.getClusterCapabilityData(ManagedObject.contextObject),\n               this.csdService.isComputeOnlyCluster(ManagedObject.contextObject)]);\n            this.determineNetworkDiagnosticsModeStatus();\n            this.loading = false;\n            break;\n      }\n   }\n\n   private determineNetworkDiagnosticsModeStatus(): void {\n      // Set as turned on by default. The only exception is compute-only cluster.\n      this.turnOnNetworkDiagnosticMode = !this.isComputeOnlyCluster;\n      this.networkDiagnosticsModeAllowed = !this.isComputeOnlyCluster &&\n            this.selectedTest.type === ProactiveTestData.PerfTestType.unicast &&\n            this.clusterCapabilityData && this.clusterCapabilityData.isPerfDiagnosticModeSupported;\n      if (!this.networkDiagnosticsModeAllowed) {\n         VsanUiUtils.setModalDialogHeight(RunTestDialogComponent.MODAL_NON_NETWORK_DIAGNOSTICS_HEIGHT);\n      }\n   }\n\n   get canEnableNetworkDiagnosticMode(): boolean {\n      return this.perfSetting && this.perfSetting.serviceEnabled && !this.perfSetting.networkDiagnosticModeEnabled;\n   }\n\n   get disabledReason(): string {\n      const perfEnabled: boolean = this.perfSetting && this.perfSetting.serviceEnabled;\n      if (!perfEnabled) {\n         return VsanUiUtils.getString(\"vsan.health.monitor.proactive.network.diagnostic.perf.disabled\");\n      }\n      return VsanUiUtils.getString(\"vsan.health.monitor.proactive.network.diagnostic.alreadyOn\");\n   }\n\n   onOkClicked = (): void => {\n      const perfEnabled: boolean = this.perfSetting && this.perfSetting.serviceEnabled;\n      if (this.networkDiagnosticsModeAllowed && this.turnOnNetworkDiagnosticMode\n            && perfEnabled && !this.perfSetting.networkDiagnosticModeEnabled) {\n         const perfSpec: PerfStatesObjSpec = PerfStatesObjSpec.Factory.create(ManagedObject.contextObject,\n               this.perfSetting.spbmProfileUuid,\n               this.perfSetting.verboseModeEnabled,\n               this.turnOnNetworkDiagnosticMode);\n         this.perfMutationProvider.editPerfConfiguration(perfSpec)\n               .then(() => VsanUiUtils.closeModalDialog(null))\n               .catch(err => this.errorMessage = err);\n         return;\n      }\n      VsanUiUtils.closeModalDialog(null);\n   };\n}\n","/* Copyright 2020 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {NgModule} from \"@angular/core\";\nimport {VsanBreadcrumbNavComponent} from \"./vsan-breadcrumb-nav.component\";\nimport {ClarityModule} from \"@clr/angular\";\nimport {CommonModule} from \"@angular/common\";\nimport {CommonDirectiveModule} from \"@directive/common-directive.module\";\nimport {CommonPipeModule} from \"@pipe/common-pipe.module\";\n\n@NgModule({\n   imports: [CommonModule, ClarityModule, CommonDirectiveModule, CommonPipeModule],\n   declarations: [VsanBreadcrumbNavComponent],\n   exports: [\n      VsanBreadcrumbNavComponent,\n   ],\n})\nexport class VsanBreadcrumbModule {}\n","<!-- Copyright 2017-2020 VMware, Inc. All rights reserved. -- VMware Confidential -->\n<vsan-default-prompt\n      [title]=\"dialogTitle\"\n      [(alertMessages)]=\"errorMessage\"\n      [blockContent]=\"loading\"\n      [confirmText]=\"'vsan.health.monitor.proactive.run' | localized\"\n      (onConfirm)=\"onOkClicked()\">\n   <div *ngIf=\"!loading\" class=\"dialog-container\">\n      <div id=\"description_text\">{{dialogContent}}</div>\n      <ng-container *ngIf=\"networkDiagnosticsModeAllowed\">\n         <div class=\"network-diagnostic-mode\">\n            <clr-checkbox-container>\n               <clr-checkbox-wrapper>\n                  <input type=\"checkbox\"\n                         clrCheckbox\n                         id=\"enable-network-diagnostic-mode\"\n                         name=\"enable-network-diagnostic-mode\"\n                         [disabled]=\"!canEnableNetworkDiagnosticMode\"\n                         [(ngModel)]=\"turnOnNetworkDiagnosticMode\"/>\n                  <label>{{\"vsan.services.performance.network.diagnostic.enable\" | localized}}</label>\n               </clr-checkbox-wrapper>\n            </clr-checkbox-container>\n            <clr-signpost class=\"checkbox-signpost\" *ngIf=\"!canEnableNetworkDiagnosticMode\">\n               <clr-signpost-content *clrIfOpen clrPosition=\"bottom-middle\">\n                  <span>{{disabledReason}}</span>\n               </clr-signpost-content>\n            </clr-signpost>\n         </div>\n         <div id=\"diagnostic_description\"\n              [class.disable-action]=\"!canEnableNetworkDiagnosticMode\">\n            {{\"vsan.services.performance.network.diagnostic.desc\" | localized}}\n         </div>\n      </ng-container>\n   </div>\n</vsan-default-prompt>\n","/* Copyright 2020 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {NgModule} from \"@angular/core\";\nimport {ClarityModule} from \"@clr/angular\";\nimport {CommonModule} from \"@angular/common\";\nimport {CommonPipeModule} from \"@pipe/common-pipe.module\";\nimport {CommonDirectiveModule} from \"@directive/common-directive.module\";\nimport {UnavailableViewComponent} from \"@component/unavailable-view/unavailable-view.component\";\nimport {ValidationModule} from \"@component/validation/validation.module\";\n\n@NgModule({\n   imports: [\n      CommonModule,\n      ClarityModule,\n      CommonPipeModule,\n      ValidationModule,\n      CommonDirectiveModule,\n   ],\n   declarations: [\n      UnavailableViewComponent,\n   ],\n   exports: [\n      UnavailableViewComponent,\n   ],\n})\nexport class UnavailableViewModule {\n}\n","/* Copyright 2019-2020 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {ClrSelectedState} from \"@clr/angular\";\nimport ObjectInfo from './ObjectInfo';\n\nexport class TreeNode {\n   private _childNodes: TreeNode[];\n\n   get children(): TreeNode[] {\n      return this._childNodes;\n   }\n\n   set children(nodes: TreeNode[]) {\n      this._childNodes = !!nodes ? nodes : [];\n   }\n\n   private _clrSelectedState: ClrSelectedState = ClrSelectedState.UNSELECTED;\n\n   get clrSelectedState(): ClrSelectedState {\n      return this._clrSelectedState;\n   }\n\n   set clrSelectedState(value) {\n      if (value != this._clrSelectedState) {\n         this._clrSelectedState = value;\n         // Timeout in order to wait for clarity to update the selected state of the children/parent\n         setTimeout(() => {\n            this.onClrSelectedStateChange && this.onClrSelectedStateChange(this);\n         });\n      }\n   }\n\n   visible: boolean;\n\n   isExpanded: boolean = false;\n\n   constructor(\n         public objectInfo: ObjectInfo,\n         public nodes: TreeNode[] = [],\n         public onClrSelectedStateChange: (node: TreeNode) => any = null) {\n      this.children = nodes;\n   }\n\n   public isSelected(): boolean {\n      return this.clrSelectedState === ClrSelectedState.SELECTED;\n   }\n}","/* Copyright 2020-2022 VMware, Inc. All rights reserved. -- VMware Confidential */\nexport class VsanDialogUtil {\n   static readonly CAPACITY_MANAGEMENT_DIALOG: VsanDialogProperties = {\n      width: 800,\n      height: 700,\n   };\n\n   static readonly DELETE_VOLUME_DIALOG: VsanDialogProperties = {\n      width: 500,\n      height: 250,\n   };\n\n   static readonly MIGRATE_VOLUME_DIALOG: VsanDialogProperties = {\n      width: 1030,\n      height: 710,\n   };\n\n   static readonly REAPPLY_VOLUME_POLICY_DIALOG: VsanDialogProperties = {\n      width: 700,\n      height: 250,\n   };\n\n   static readonly DUPLICATE_PCI_ID_MODEL_SELECTION_DIALOG: VsanDialogProperties = {\n      width: 800,\n      height: 500,\n   };\n\n   static readonly HEALTH_RESTORE_ACTION_DIALOG: VsanDialogProperties = {\n      width: 550,\n      height: 250,\n   };\n\n   // Keep in sync with plugin.xml extension point\n   static readonly CLUSTER_POWER_ON_DIALOG: VsanDialogProperties = {\n      width: 600,\n      height: 230,\n   };\n\n   static readonly VM_IO_DIAGNOSTICS_METRICS_DIALOG: VsanDialogProperties = {\n      width: 900,\n      height: 700,\n   };\n\n   static readonly VM_IO_DIAGNOSTICS_LATENCY_DIALOG: VsanDialogProperties = {\n      width: 1000,\n      height: 500,\n   };\n\n   static readonly VM_IO_DIAGNOSTICS_DOM_OWNER_LATENCY_DIALOG: VsanDialogProperties = {\n      width: 1000,\n      height: 400,\n   };\n\n   static readonly PERF_SVC_EDIT_ACTION_DIALOG: VsanDialogProperties = {\n      width: 800,\n      height: 450,\n   };\n\n   static readonly PERF_SVC_ENABLE_ACTION_DIALOG: VsanDialogProperties = {\n      width: 800,\n      height: 250,\n   };\n\n   static readonly CLAIM_DISKS_ACTION_DIALOG: VsanDialogProperties = {\n      width: 1200,\n      height: 650,\n   };\n\n   static readonly VSAN_DISK_CLAIM_ACTION_DIALOG: VsanDialogProperties = {\n      width: 670,\n      height: 300,\n   };\n}\n\nexport class VsanDialogProperties {\n   width: number;\n   height: number;\n}\n","/* Copyright 2019-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {NgModule} from \"@angular/core\";\nimport {CommonModule} from \"@angular/common\";\nimport {FormsModule} from \"@angular/forms\";\nimport {ClarityModule} from \"@clr/angular\";\nimport {ValidationModule} from \"@component/validation/validation.module\";\nimport {CommonPipeModule} from \"@pipe/common-pipe.module\";\nimport {CommonDirectiveModule} from \"@directive/common-directive.module\";\nimport {HealthStatusCell} from \"@component/cell/health-status-cell.component\";\nimport {LabelCell} from \"@component/cell/label-cell.component\";\nimport {StoragePolicyCell} from \"@component/cell/storage-policy-cell.component\";\nimport {MorCell} from \"@component/cell/mor-cell.component\";\nimport {IconItemComponent} from \"@component/cell/icon-item.component\";\nimport {HealthStateItemComponent} from \"@component/cell/health-state-item.component\";\nimport {ListCell} from \"@component/cell/list-cell.component\";\nimport {PspHealthStateItemComponent} from \"@component/cell/psp-health-state-item.component\";\nimport {HealthTestValueComponent} from \"@component/cell/health-test-value.component\";\nimport {HealthLinkCellComponent} from \"@component/cell/health-link-cell.component\";\nimport {HealthMorCellComponent} from \"@component/cell/health-mor-cell.component\";\n\n@NgModule({\n   imports: [\n      CommonModule,\n      FormsModule,\n      ClarityModule,\n      ValidationModule,\n      CommonPipeModule,\n      CommonDirectiveModule,\n   ],\n   // TODO: (vasilevd) Move health specific components to a separate common health module\n   declarations: [\n      HealthStatusCell,\n      HealthTestValueComponent,\n      LabelCell,\n      StoragePolicyCell,\n      MorCell,\n      HealthMorCellComponent,\n      ListCell,\n      IconItemComponent,\n      HealthStateItemComponent,\n      PspHealthStateItemComponent,\n      HealthLinkCellComponent,\n   ],\n   exports: [\n      HealthStatusCell,\n      HealthTestValueComponent,\n      LabelCell,\n      StoragePolicyCell,\n      MorCell,\n      HealthMorCellComponent,\n      ListCell,\n      IconItemComponent,\n      HealthStateItemComponent,\n      PspHealthStateItemComponent,\n      HealthLinkCellComponent,\n   ],\n})\nexport class CommonCellsModule {\n}\n","/* Copyright 2020 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, OnInit} from \"@angular/core\";\nimport {Logger} from \"@util/logger\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {ManagedObject} from \"@service/managed-object\";\nimport {RefreshHandler} from \"@service/global-refresh.service\";\nimport {ProactiveTestData} from \"@generated/proactive-test-data\";\nimport {ProactiveTestsService} from \"@generated/proactive-tests-service\";\nimport {ProactiveTestResult} from \"../model/proactive-test-result\";\nimport {PermissionService} from \"@generated/permission-service\";\nimport {Privileges} from \"@generated/privileges\";\nimport {CsdService} from \"@generated/csd-service\";\nimport {MountedRemoteDatastore} from \"@generated/mounted-remote-datastore\";\nimport {TreeNode} from \"@component/inventory/tree-view/tree-node\";\nimport {InventoryNode} from \"@generated/inventory-node\";\nimport {ModalBuilder} from \"@util/modal-builder\";\nimport {TaskMonitorService} from \"@service/task-monitor-service\";\nimport ObjectInfo from \"@component/inventory/tree-view/ObjectInfo\";\nimport {ScreenReaderAnnouncer} from \"@service/screen-reader-announcer.service\";\nimport {VsanHealthUtil} from \"@util/vsan-health-util\";\nimport {UnavailableViewSpec} from \"@component/unavailable-view/unavailable-view-spec\";\n\n@Component({\n   templateUrl: \"proactive-tests.html\",\n   styleUrls: [\"proactive-tests.scss\"],\n   selector: \"vsan-proactive-tests\",\n})\nexport class ProactiveTestsComponent implements OnInit {\n   VsanUiUtils: typeof VsanUiUtils = VsanUiUtils;\n   VsanHealthUtil: typeof VsanHealthUtil = VsanHealthUtil;\n   PerfTestType: typeof ProactiveTestData.PerfTestType = ProactiveTestData.PerfTestType;\n   readonly HCIBENCH_SITE: string = \"https://labs.vmware.com/flings/hcibench\";\n   readonly COMMUNITY_SITE: string = \"https://communities.vmware.com/community/vmtn/vsan\";\n   private static readonly RUNNING_TEST_KEY_SEPARATOR: string = \":\";\n\n   // The timeout time for the VM creation test, its value should be greater than 190.\n   private readonly TIMEOUT: number = 200;\n\n   // The value of runningTests and loadingTests looks like {\"vmCreation\", \"unicast\"} when CSD is not supported,\n   // or {\"datastore-65:vmCreation\", \"datastore-66:unicast\"} when CSD is supported.\n   private runningTests: Set<string> = new Set();\n   private loadingTests: Set<string> = new Set();\n\n   loading: boolean = true;\n   showReload: boolean = false;\n   alertMessage: string;\n   unavailableView: UnavailableViewSpec;\n   hasEditPermissions: boolean = false;\n\n   testTypeToResultMap: Map<ProactiveTestData.PerfTestType, ProactiveTestResult> =\n         new Map<ProactiveTestData.PerfTestType, ProactiveTestResult>();\n   testTypeToDatastoreObjectInfoMap: Map<ProactiveTestData.PerfTestType, InventoryNode> =\n         new Map<ProactiveTestData.PerfTestType, InventoryNode>();\n\n   isCsdSupported: boolean = false;\n   mountedDatastores: MountedRemoteDatastore[];\n   datastoreTreeNodes: TreeNode[];\n\n   @ScreenReaderAnnouncer()\n   srOnlyMessage: string;\n\n   constructor(private proactiveTestsService: ProactiveTestsService,\n         private permissionService: PermissionService,\n         private csdService: CsdService,\n         private taskMonitorService: TaskMonitorService) {\n   }\n\n   async ngOnInit(): Promise<void> {\n      this.isCsdSupported = await this.csdService.isCsdSupported(ManagedObject.contextObject);\n      this.fetch();\n   }\n\n   @RefreshHandler\n   async fetch(): Promise<void> {\n      this.loading = true;\n      this.alertMessage = null;\n      this.permissionService.hasPermissions(ManagedObject.contextObject, [Privileges.EDIT_CLUSTER()])\n            .then(result => this.hasEditPermissions = result);\n      this.mountedDatastores = (await this.csdService.getMountedDatastores(ManagedObject.contextObject))\n            .filter((ds: MountedRemoteDatastore) => ds.shareableDatastore.serverCluster);\n      if (!this.isCsdSupported) {\n         this.mountedDatastores = this.mountedDatastores.filter((ds: MountedRemoteDatastore) => ds.isLocal);\n      }\n      this.datastoreTreeNodes = this.getDatastoreTreeNodes();\n\n      if (VsanUiUtils.isEmpty(this.mountedDatastores)) {\n         this.unavailableView = UnavailableViewSpec.PROACTIVE_TESTS_NO_DATASTORE;\n      } else {\n         this.unavailableView = null;\n         this.getAllTestResults();\n      }\n      this.loading = false;\n   }\n\n   private async getAllTestResults(): Promise<void> {\n      try {\n         const selectedDatastoreRef: ManagedObject = VsanUiUtils.isEmpty(this.mountedDatastores) ? null :\n               this.mountedDatastores[0].shareableDatastore.datastore.moRef;\n         const selectedServerClusterRef: ManagedObject = VsanUiUtils.isEmpty(this.mountedDatastores) ? null :\n               this.mountedDatastores[0].shareableDatastore.serverCluster.moRef;\n         const results: ProactiveTestData[] = await this.proactiveTestsService.getProactiveTestResults(\n               ManagedObject.contextObject, selectedDatastoreRef, selectedServerClusterRef);\n         // Initialize the proactive tests page, the result is an array in this case\n         this.handleAllTestResults(results);\n      } catch (err) {\n         this.onCatch(err);\n      } finally {\n         this.loading = false;\n      }\n   }\n\n   private handleAllTestResults(results: ProactiveTestData[]): Promise<void> {\n      if (VsanUiUtils.isEmpty(results)) {\n         this.showReload = true;\n         this.alertMessage = VsanUiUtils.getString(\"vsan.health.monitor.proactive.no.data\");\n         return;\n      }\n      const selectedDatastoreObjectInfo: InventoryNode = !VsanUiUtils.isEmpty(this.datastoreTreeNodes)\n            ? this.datastoreTreeNodes[0].objectInfo as InventoryNode\n            : null;\n      results.forEach(item => {\n         this.testTypeToResultMap.set(item.perfTestType, new ProactiveTestResult(item));\n         this.testTypeToDatastoreObjectInfoMap.set(item.perfTestType, selectedDatastoreObjectInfo);\n      });\n      this.srOnlyMessage = VsanUiUtils.getString(\"vsan.screenReader.message.page.loaded\",\n            VsanUiUtils.getString(\"vsan.health.monitor.proactive.title\"));\n   }\n\n   private onCatch = (error: any) => {\n      this.showReload = true;\n      this.alertMessage = VsanUiUtils.getString(\"vsan.health.monitor.proactive.no.data\");\n      Logger.error(\"Unable to query Proactive Test History data: \" + error);\n   };\n\n   get displaySpinner(): boolean {\n      return this.loading && this.testTypeToResultMap.size === 0;\n   }\n\n   displayTestDetailsSpinner(type: ProactiveTestData.PerfTestType): boolean {\n      return type && (this.loading || this.isRunningTest(type) || this.isLoadingTest(type));\n   }\n\n   isRunTestButtonDisabled(type: ProactiveTestData.PerfTestType): boolean {\n      return !this.hasEditPermissions || this.displayTestDetailsSpinner(type) ||\n            VsanUiUtils.isEmpty(this.mountedDatastores);\n   }\n\n   get runTestButtonTitle(): string {\n      if (VsanUiUtils.isEmpty(this.mountedDatastores)) {\n         return VsanUiUtils.getString(\"vsan.health.monitor.proactive.runTest.noDatastores\");\n      }\n      return VsanUiUtils.getActionTitle(this.hasEditPermissions, \"vsan.health.monitor.proactive.runTest\");\n   }\n\n   get selectorVisible(): boolean {\n      return this.isCsdSupported && !VsanUiUtils.isEmpty(this.mountedDatastores) &&\n            this.mountedDatastores.some((ds: MountedRemoteDatastore) => !ds.isLocal);\n   }\n\n   openRunTestDialog(selectedTest: ProactiveTestResult): void {\n      new ModalBuilder(\"proactiveTests/runProactiveTest\")\n            .setSize(670, 260)\n            .open(selectedTest)\n            .then(() => this.runTest(selectedTest));\n   }\n\n   private runTest(selectedTest: ProactiveTestResult): void {\n      // After the task is completed, we use dataStoreRef and test type to delete the test from the running test list,\n      // store dataStoreRef to a new variable to avoid its value being changed after switching to another datastore.\n      const dataStoreRef: ManagedObject = this.getSelectedDatastoreRef(selectedTest.type);\n      this.runningTests.add(this.getRunningTestData(dataStoreRef, selectedTest.type));\n      if (selectedTest.type === ProactiveTestData.PerfTestType.vmCreation) {\n         this.proactiveTestsService.getVMCreationTestResult(\n               ManagedObject.contextObject, this.TIMEOUT, dataStoreRef)\n               .then(data => this.runTestSucceeded(data, dataStoreRef))\n               .catch(error => this.runTestFailed(error, selectedTest.name, ProactiveTestData.PerfTestType.vmCreation,\n                     dataStoreRef));\n      } else {\n         if (this.isNetworkTestAgainstLocalCluster(selectedTest.type)) {\n            const isTestMulticast: boolean = selectedTest.type === ProactiveTestData.PerfTestType.multicast;\n            this.proactiveTestsService.getNetworkPerfTestResult(ManagedObject.contextObject, isTestMulticast)\n                  .then(data => this.runTestSucceeded(data, dataStoreRef))\n                  .catch(error => this.runTestFailed(error, selectedTest.name, ProactiveTestData.PerfTestType.unicast,\n                        dataStoreRef));\n         } else {\n            this.proactiveTestsService.startNetworkPerfTestTask(\n                  ManagedObject.contextObject, this.getSelectedServerClusterRef(selectedTest.type))\n                  .then(task => this.handleNetworkTestTask(task, dataStoreRef, selectedTest.type))\n                  .catch(error => this.runTestFailed(error, selectedTest.name, ProactiveTestData.PerfTestType.multicast,\n                        dataStoreRef));\n         }\n      }\n   }\n\n   private async handleNetworkTestTask(task: ManagedObject, datastoreRef: ManagedObject,\n         type: ProactiveTestData.PerfTestType): Promise<void> {\n      await this.taskMonitorService.getAwaitResult(task);\n      const networkTestData: ProactiveTestData = await this.proactiveTestsService.getLastNetworkTestResult(\n            ManagedObject.contextObject, this.getSelectedServerClusterRef(type));\n      this.runTestSucceeded(networkTestData, datastoreRef);\n   }\n\n   private runTestSucceeded = (result: ProactiveTestData, dataStoreRef: ManagedObject) => {\n      this.runningTests.delete(this.getRunningTestData(dataStoreRef, result.perfTestType));\n      if (!this.isCsdSupported ||\n            ManagedObject.areEqual(this.getSelectedDatastoreRef(result.perfTestType), dataStoreRef)) {\n         this.handleSingleTestResult(result);\n      }\n   };\n\n   private handleSingleTestResult = (result: ProactiveTestData) => {\n      if (!result) {\n         this.showReload = true;\n         this.alertMessage = VsanUiUtils.getString(\"vsan.health.monitor.proactive.no.data\");\n         return;\n      }\n      this.testTypeToResultMap.set(result.perfTestType, new ProactiveTestResult(result));\n   };\n\n   private runTestFailed = (error: any, name: string, testType: ProactiveTestData.PerfTestType,\n         dataStoreRef: ManagedObject) => {\n      this.showReload = false;\n      this.runningTests.delete(this.getRunningTestData(dataStoreRef, testType));\n      this.alertMessage = VsanUiUtils.getString(\"vsan.health.monitor.proactive.running.error\", name);\n      Logger.error(`Unable to run ${name}: ` + error);\n   };\n\n   private isNetworkTestAgainstLocalCluster(type: ProactiveTestData.PerfTestType): boolean {\n      const mountedDatastore: MountedRemoteDatastore = this.getSelectedMountedRemoteDatastore(type);\n      return mountedDatastore ? mountedDatastore.isLocal : true;\n   }\n\n   isRunningTest(type: ProactiveTestData.PerfTestType): boolean {\n      return this.runningTests.has(this.getRunningTestData(this.getSelectedDatastoreRef(type), type));\n   }\n\n   private getRunningTestData(dataStoreRef: ManagedObject, testType: ProactiveTestData.PerfTestType): string {\n      return dataStoreRef ?\n            dataStoreRef.value + ProactiveTestsComponent.RUNNING_TEST_KEY_SEPARATOR + testType.toString() :\n            testType.toString();\n   }\n\n   getSelectedDatastoreObjectInfosBasedOnType(type: ProactiveTestData.PerfTestType): InventoryNode[] {\n      return [this.testTypeToDatastoreObjectInfoMap.get(type)];\n   }\n\n   onSelectedDatastoreObjectInfosChange(objectInfos: ObjectInfo[], type: ProactiveTestData.PerfTestType): void {\n      const datastoreRef: ManagedObject = this.getSelectedDatastoreRef(type);\n      if ((!datastoreRef && VsanUiUtils.isEmpty(objectInfos)) ||\n            ManagedObject.areEqual(datastoreRef, objectInfos[0].moRef)) {\n         return;\n      }\n      this.testTypeToDatastoreObjectInfoMap.set(type, objectInfos[0] as InventoryNode);\n      this.fetchLastTestResult(type);\n   }\n\n   private async fetchLastTestResult(type?: ProactiveTestData.PerfTestType): Promise<void> {\n      const datastoreRef: ManagedObject = this.getSelectedDatastoreRef(type);\n      this.loadingTests.add(this.getRunningTestData(datastoreRef, type));\n      // this.runningTests.add(this.getRunningTestData(datastoreRef, type));\n      if (type === ProactiveTestData.PerfTestType.vmCreation) {\n         const vmCreationTestResult: ProactiveTestData = await this.proactiveTestsService.getLastVmCreationTestResult(\n               ManagedObject.contextObject, datastoreRef);\n         this.loadTestSucceeded(vmCreationTestResult, datastoreRef);\n      } else {\n         const networkTestResult: ProactiveTestData = await this.proactiveTestsService.getLastNetworkTestResult(\n               ManagedObject.contextObject, this.getSelectedServerClusterRef(type));\n         this.loadTestSucceeded(networkTestResult, datastoreRef);\n      }\n   }\n\n   private loadTestSucceeded(result: ProactiveTestData, dataStoreRef: ManagedObject): void {\n      this.loadingTests.delete(this.getRunningTestData(dataStoreRef, result.perfTestType));\n      if (!this.isCsdSupported ||\n            ManagedObject.areEqual(this.getSelectedDatastoreRef(result.perfTestType), dataStoreRef)) {\n         this.handleSingleTestResult(result);\n      }\n   }\n\n   isLoadingTest(type: ProactiveTestData.PerfTestType): boolean {\n      return type && this.loadingTests.has(this.getRunningTestData(this.getSelectedDatastoreRef(type), type));\n   }\n\n   displayTestResult(testResult: ProactiveTestResult): boolean {\n      return testResult && !this.isLoadingTest(testResult.type) && !!testResult.status;\n   }\n\n   getSelectedDatastoreRef(type: ProactiveTestData.PerfTestType): ManagedObject | null {\n      const selectedDatastoreObjectInfo: InventoryNode = this.testTypeToDatastoreObjectInfoMap.get(type);\n      return selectedDatastoreObjectInfo ? selectedDatastoreObjectInfo.moRef : null;\n   }\n\n   getSelectedServerClusterRef(type: ProactiveTestData.PerfTestType): ManagedObject | null {\n      const mountedDatastore: MountedRemoteDatastore = this.getSelectedMountedRemoteDatastore(type);\n      return mountedDatastore ? mountedDatastore.shareableDatastore.serverCluster.moRef : null;\n   }\n\n   getSelectedMountedRemoteDatastore(type: ProactiveTestData.PerfTestType): MountedRemoteDatastore | null {\n      const selectedDatastoreObjectInfo: InventoryNode = this.testTypeToDatastoreObjectInfoMap.get(type);\n      if (!selectedDatastoreObjectInfo) {\n         return null;\n      }\n      return this.mountedDatastores.find(mountedDs => ManagedObject.areEqual(\n            mountedDs.shareableDatastore.datastore.moRef, selectedDatastoreObjectInfo.moRef));\n   }\n\n   private getDatastoreTreeNodes(): TreeNode[] {\n      return this.mountedDatastores.map((ds: MountedRemoteDatastore) => {\n         const clonedDS: MountedRemoteDatastore = VsanUiUtils.deepClone(ds);\n         clonedDS.shareableDatastore.datastore.name = VsanUiUtils.getString(\"vsan.csd.datastoreWithServerCluster\",\n               clonedDS.shareableDatastore.datastore.name, clonedDS.shareableDatastore.serverCluster.name);\n         return new TreeNode(clonedDS.shareableDatastore.datastore, null);\n      });\n   }\n}\n","/* Copyright 2020 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {NgModule} from \"@angular/core\";\nimport {RouterModule, Routes} from \"@angular/router\";\nimport {CommonModule} from \"@angular/common\";\nimport {ClarityModule} from \"@clr/angular\";\nimport {VsanCommonModule} from \"../common/vsan-common.module\";\nimport {ProactiveTestsComponent} from \"./view/proactive-tests.component\";\nimport {TestDetailsComponent} from \"./view/test-details.component\";\nimport {RunTestDialogComponent} from \"./view/run-test-dialog.component\";\nimport {FormsModule} from \"@angular/forms\";\nimport {UnavailableViewModule} from \"@component/unavailable-view/unavailable-view.module\";\n\nconst proactiveTestsRoutes: Routes = [\n   {\n      path: \"\",\n      component: ProactiveTestsComponent,\n   },\n   {\n      path: \"runProactiveTest\",\n      component: RunTestDialogComponent,\n   },\n];\n\n@NgModule({\n   imports: [\n      FormsModule,\n      CommonModule,\n      ClarityModule,\n      VsanCommonModule,\n      UnavailableViewModule,\n      RouterModule.forChild(proactiveTestsRoutes),\n   ],\n   declarations: [\n      TestDetailsComponent,\n      RunTestDialogComponent,\n      ProactiveTestsComponent,\n   ],\n\n})\nexport class ProactiveTestsModule {\n}\n","/* Copyright 2017-2020 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {VsanHealthStatus} from \"@generated/vsan-health-status\";\nimport {ProactiveTestData} from \"@generated/proactive-test-data\";\nimport {VsanTestTable} from \"@generated/vsan-test-table\";\nimport {VsanUiUtils} from \"../../common/util/vsan-util\";\nimport {VsanDateTimeUtils} from \"@util/vsan-dateteime-util\";\n\n/**\n * Get the data of proactive tests result\n */\nexport class ProactiveTestResult {\n   name: string;\n   type: ProactiveTestData.PerfTestType;\n   tooltip: string;\n   timestampLabel: string;\n   status: VsanHealthStatus;\n   statusLabel: string;\n   details: VsanTestTable[];\n   helpId: string;\n   description: string;\n\n   constructor(model: ProactiveTestData) {\n      // If model.timestamp is not null, the test has been run. Otherwise, the test has never been run.\n      switch (model.perfTestType) {\n         case ProactiveTestData.PerfTestType.vmCreation:\n            this.name = VsanUiUtils.getString(\"vsan.health.monitor.proactive.tests.vmCreation\");\n            this.tooltip = VsanUiUtils.getString(\"vsan.health.monitor.proactive.warning.vmCreation.desc\");\n            break;\n         case ProactiveTestData.PerfTestType.multicast:\n            this.name = VsanUiUtils.getString(\"vsan.health.monitor.proactive.tests.network.multicast\");\n            this.tooltip = VsanUiUtils.getString(\"vsan.health.monitor.proactive.warning.network.multicast.desc\");\n            break;\n         case ProactiveTestData.PerfTestType.unicast:\n            this.name = VsanUiUtils.getString(\"vsan.health.monitor.proactive.tests.network.unicast\");\n            this.tooltip = VsanUiUtils.getString(\"vsan.health.monitor.proactive.warning.network.unicast.desc\");\n            break;\n      }\n\n      this.type = model.perfTestType;\n      this.timestampLabel = VsanDateTimeUtils.formatDate(model.timestamp);\n\n      if (!model.generalData) {\n         return;\n      }\n\n      this.description = model.generalData.testDescription;\n      this.status = model.generalData.status;\n      switch (model.generalData.status) {\n         case VsanHealthStatus.red:\n            this.statusLabel = VsanUiUtils.getString(\"vsan.health.monitor.proactive.errorStatus\");\n            break;\n         case VsanHealthStatus.yellow:\n            this.statusLabel = VsanUiUtils.getString(\"vsan.health.monitor.proactive.warningStatus\");\n            break;\n         case VsanHealthStatus.green:\n            this.statusLabel = VsanUiUtils.getString(\"vsan.health.monitor.proactive.okStatus\");\n            break;\n         default:\n            this.statusLabel = VsanUiUtils.getString(\"vsan.na.label\");\n            break;\n      }\n\n      // expected exact one execution\n      if (model.generalData.instances && model.generalData.instances[0].details.length > 0) {\n         // details includes the result of running test, every test has only one result,\n         // so if the test has been run, details contains only one element.\n         this.details = model.generalData.instances[0].details;\n         for (const detail of this.details) {\n            detail.rows = detail.rows || [];\n         }\n      }\n   }\n\n   static createEmptyVmCreationTestResult() {\n      const testData: ProactiveTestData = ProactiveTestData.Factory.create(\n            null, null, ProactiveTestData.PerfTestType.vmCreation, null);\n      return new ProactiveTestResult(testData);\n   }\n}\n","<!-- Copyright 2020 VMware, Inc. All rights reserved. VMware Confidential -->\n<clr-datagrid id=\"test-details-datagrid\" [clrDgLoading]=\"loading\">\n   <clr-dg-placeholder>\n      {{\"vsan.health.monitor.proactive.noData\" | localized}}\n   </clr-dg-placeholder>\n   <ng-container *ngFor=\"let table of detailsArray\">\n      <clr-dg-column *ngFor=\"let column of table?.columns\" class=\"name-column\">\n         {{column.columnLabel}}\n      </clr-dg-column>\n      <clr-dg-row *clrDgItems=\"let row of table?.rows; let rowIndex = index\">\n         <clr-dg-cell id=\"test-details-cell-{{rowIndex}}-{{cellIndex}}\"\n                      vsan-show-title\n                      class=\"name-column\"\n                      [ngClass]=\"cellIndex === table.columns.length - 1 ? 'last-cell': ''\"\n                      *ngFor=\"let cell of row?.rowValues; let cellIndex = index\" >\n            <ng-container *ngIf=\"VsanHealthUtil.isTextCell(cell)\">\n               {{cell.cellValue}}\n            </ng-container>\n            <ng-container *ngIf=\"VsanHealthUtil.isNumericCell(cell)\">\n               {{VsanHealthUtil.formatedNumber(cell.cellValue, cell.cellType)}}\n            </ng-container>\n            <vsan-health-status-cell *ngIf=\"VsanHealthUtil.isHealthStatusCell(cell)\"\n                                     [label]=\"getHealthStatusLabel(cell.cellValue)\"\n                                     [iconClass]=\"VsanHealthUtil.getHealthStatusClass(cell.cellValue)\"\n                                     [shape]=\"VsanHealthUtil.getHealthStatusShape(cell.cellValue)\">\n            </vsan-health-status-cell>\n            <ng-container *ngIf=\"VsanHealthUtil.isStatusCell(cell)\">\n               <clr-icon [attr.shape]=\"VsanHealthUtil.getStatusShape(cell)\"\n                         class=\"{{VsanHealthUtil.getStatusClass(cell)}}\"\n                         aria-hidden=\"true\">\n               </clr-icon>\n               {{VsanHealthUtil.getStatusLabel(cell)}}\n            </ng-container>\n            <vsan-health-mor-cell *ngIf=\"VsanHealthUtil.isMorCell(cell)\"\n                                  [data]=\"VsanHealthUtil.getMorCellData(cell)\">\n            </vsan-health-mor-cell>\n         </clr-dg-cell>\n      </clr-dg-row>\n   </ng-container>\n   <clr-dg-footer>\n      <clr-dg-pagination #pagination\n                         [hidden]=\"!testResults\"\n                         [clrDgTotalItems]=\"testResults?.length\"\n                         [clrDgPageSize]=\"DEFAULT_ITEMS_PER_PAGE\">\n         {{VsanUiUtils.getDatagridFooterLabel(testResults, pagination, DEFAULT_ITEMS_PER_PAGE)}}\n      </clr-dg-pagination>\n   </clr-dg-footer>\n</clr-datagrid>\n","<!--Copyright 2020 VMware, Inc. All rights reserved. -- VMware Confidential-->\n<div *ngIf=\"displaySpinner\" class=\"spinner central-spinner\">{{\"vsan.loading\" | localized}}</div>\n\n<ng-container *ngIf=\"!displaySpinner\">\n   <vsan-validation id=\"validation-message\"\n                    *ngIf=\"alertMessage\"\n                    [alert]=\"alertMessage\"\n                    [allowReload]=\"showReload\"\n                    (onReload)=\"fetch()\"\n                    (onClosed)=\"alertMessage=null\">\n   </vsan-validation>\n   <h5 vsan-auto-focus>\n      {{\"vsan.health.monitor.proactive.title\" | localized}}\n   </h5>\n   <span>\n      {{\"vsan.health.monitor.proactive.desc\" | localized}}\n   </span>\n\n   <vsan-unavailable-view *ngIf=\"unavailableView\"\n                          [unavailableViewSpec]=\"unavailableView\">\n   </vsan-unavailable-view>\n\n   <clr-stack-view *ngIf=\"!unavailableView\">\n      <ng-container *ngTemplateOutlet=\"stackBlock; context: {\n                  id: 'vm-creation-test',\n                  label: 'vsan.health.monitor.proactive.tests.vmCreation',\n                  desc: 'vsan.health.monitor.proactive.vmCreationTest.desc',\n                  helpId: 'com.vmware.vsan.health.test.createvmtest',\n                  testResult: testTypeToResultMap.get(PerfTestType.vmCreation)}\"></ng-container>\n      <ng-container *ngTemplateOutlet=\"stackBlock; context: {\n                  id: 'network-performance-test',\n                  label: 'vsan.health.monitor.proactive.tests.network.unicast',\n                  desc: 'vsan.health.monitor.proactive.networkPerformanceTest.desc',\n                  helpId: 'com.vmware.vsan.health.test.unicastperftest',\n                  testResult: testTypeToResultMap.get(PerfTestType.unicast)}\"></ng-container>\n      <clr-stack-block>\n         <clr-stack-label id=\"storage-performance-test-label\">\n            {{\"vsan.health.monitor.proactive.tests.network.storagePerformanceTest\" | localized }}\n         </clr-stack-label>\n         <clr-stack-block class=\"test-section\">\n            <clr-stack-content>\n               <span>\n                  {{\"vsan.health.monitor.proactive.storage.performance.test.desc.part1\" | localized}}\n                  <a id=\"storage-desc-part2\"\n                     [url]=\"HCIBENCH_SITE\"\n                     [external-link]=\"'vsan.health.monitor.proactive.storage.performance.test.desc.part2' | localized\">\n                  </a>\n                  {{\"vsan.health.monitor.proactive.storage.performance.test.desc.part3\" | localized}}\n                  <a id=\"storage-desc-part4\"\n                     [url]=\"COMMUNITY_SITE\"\n                     [external-link]=\"'vsan.health.monitor.proactive.storage.performance.test.desc.part4' | localized\">\n                  </a>\n                  {{\"vsan.health.monitor.proactive.storage.performance.test.desc.part5\" | localized}}\n               </span>\n            </clr-stack-content>\n         </clr-stack-block>\n      </clr-stack-block>\n   </clr-stack-view>\n</ng-container>\n\n<ng-template #stackBlock let-id=\"id\" let-label=\"label\" let-desc=\"desc\" let-helpId=\"helpId\" let-testResult=\"testResult\">\n   <clr-stack-block *ngIf=\"testResult\">\n      <clr-stack-label id=\"{{id}}-label\">{{label | localized}}</clr-stack-label>\n      <clr-stack-block class=\"test-section\">\n         <clr-stack-content>\n            <span id=\"{{id}}-desc\">\n               {{desc | localized}}\n               <a id=\"{{id}}-ask-VMware\"\n                  name=\"{{id}}-ask-VMware\"\n                  [external-link]\n                  [helpId]=\"helpId\"\n                  [title]=\"'vsan.common.askVMware' | localized\"></a>\n            </span>\n            <div class=\"selector-container\">\n               <vsan-dropdown-object-selector *ngIf=\"selectorVisible\"\n                                              [label]=\"'vsan.health.monitor.proactive.runOn' | localized\"\n                                              [showSearch]=\"false\"\n                                              [nodes]=\"datastoreTreeNodes\"\n                                              [selectedObjectInfos]=\"getSelectedDatastoreObjectInfosBasedOnType(testResult.type)\"\n                                              (selectedObjectInfosChange)=\"onSelectedDatastoreObjectInfosChange($event, testResult.type)\">\n               </vsan-dropdown-object-selector>\n               <button id=\"{{id}}-run-test-btn\"\n                       name=\"{{id}}-run-test-btn\"\n                       class=\"btn btn-sm btn-primary run-test-btn\"\n                       [disabled]=\"isRunTestButtonDisabled(testResult?.type)\"\n                       (click)=\"openRunTestDialog(testResult)\"\n                       [title]=\"runTestButtonTitle\">\n                  {{\"vsan.health.monitor.proactive.runTestBtn\" | localized}}\n               </button>\n               <div *ngIf=\"displayTestResult(testResult)\" class=\"test-result\">\n                  {{\"vsan.health.monitor.proactive.timestampAndResult.label\" | localized: testResult.timestampLabel}}\n                  <clr-icon *ngIf=\"testResult.status\"\n                            aria-hidden=\"true\"\n                            [attr.shape]=\"VsanHealthUtil.getVsanHealthStatusIconShape(testResult.status)\"\n                            class=\"{{VsanHealthUtil.getVsanHealthStatusIconClass(testResult.status)}}\">\n                  </clr-icon>\n                  {{testResult.statusLabel}}\n               </div>\n               <span *ngIf=\"isLoadingTest(testResult?.type)\" class=\"spinner spinner-inline\">\n                  {{\"vsan.loading\" | localized}}\n               </span>\n            </div>\n            <vsan-tests-details [detailsArray]=\"testResult?.details\"\n                                [loading]=\"displayTestDetailsSpinner(testResult?.type)\">\n            </vsan-tests-details>\n         </clr-stack-content>\n      </clr-stack-block>\n   </clr-stack-block>\n</ng-template>\n","/* Copyright 2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {\n   AfterViewInit,\n   ComponentFactoryResolver,\n   Directive,\n   ElementRef,\n   Host,\n   Input,\n   Optional,\n   Renderer2,\n   Self,\n} from \"@angular/core\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {NavigationService} from \"@navigation/navigation.service\";\nimport {ClrButtonBaseDirective} from \"@directive/clr-button-group/clr-button-base.directive\";\nimport {ClrButton} from \"@clr/angular\";\n\n/**\n * Decorates a button or an anchor as external link. Requires one of the optional parameters articleId, helpId or url.\n *\n * @param external-link: Optional. Localization key of the text label of the external link. If omitted default label\n * will be used - \"Learn more\" for anchors or \"Ask VMWare\" for buttons.\n * @param articleId - Optional. Id of article in knowledge base.\n * @param helpId - Optional. Help id which will redirect to Knowledge Base.\n * @param url - Optional. External URL.\n */\n@Directive({\n   selector: \"a[external-link], button[external-link], clr-button[external-link]\",\n})\nexport class ExternalLinkDirective extends ClrButtonBaseDirective implements AfterViewInit {\n   private readonly ASK_VMWARE_DEFAULT_TEXT_KEY: string = \"vsan.common.askVMware\";\n   private readonly LEARN_MORE_DEFAULT_TEXT_KEY: string = \"vsan.common.learnMore\";\n\n   private readonly CONTAINER_CLASS: string = \"icon-name-container\";\n   private readonly NAVIGATION_EVENT_TYPE: string = \"click\";\n   private readonly LEAD_TO_NOWHERE_URL: string = \"javascript://\";\n   private readonly HTML_ELEMENT_SPAN_NAME: string = \"span\";\n   private readonly HTML_ELEMENT_ICON_NAME: string = \"clr-icon\";\n   private readonly HTML_ELEMENT_ROLE_ATTR_NAME: string = \"role\";\n   private readonly HTML_ELEMENT_ROLE_ATTR_VALUE: string = \"link\";\n   private readonly ICON_SHAPE_ATTR_NAME: string = \"shape\";\n   private readonly ICON_SHAPE_ATTR_VALUE: string = \"pop-out\";\n   private readonly ICON_SIZE_ATTR_NAME: string = \"size\";\n   private readonly ICON_SIZE_ATTR_VALUE: string = \"16\";\n   private readonly ICON_CLASS_ATTR_NAME: string = \"class\";\n   private readonly ICON_CLASS_ATTR_VALUE: string = \"link\";\n   private readonly ICON_TITLE_ATTR_NAME: string = \"title\";\n\n   private readonly KB_URL: string = \"http://kb.vmware.com/kb/\";\n\n   @Input(\"external-link\")\n   anchorText: string;\n\n   @Input()\n   articleId: string;\n\n   @Input()\n   helpId: string;\n\n   @Input()\n   url: string;\n\n   constructor(private el: ElementRef<HTMLElement>,\n         private resolver: ComponentFactoryResolver,\n         private renderer: Renderer2,\n         private navigationService: NavigationService,\n         // this variable will be initialized only if the host is clr-button\n         @Host() @Self() @Optional() clrButton: ClrButton) {\n      super(clrButton);\n   }\n\n   ngAfterViewInit(): void {\n      const element: HTMLElement = this.el.nativeElement;\n      // continue only if element is HTML link or button\n      if (!this.isLink(element) && !this.isButton(element)) {\n         // element is clr-button, wait until html button for it is resolved - handled by resloveButton\n         return;\n      }\n      this.prepareExternalLink(element);\n   }\n\n   resolveButton(clrButton: ClrButton, button: HTMLButtonElement, index: number): void {\n      // only if element is clr-button. At this point the html button is already resolved. Apply on it.\n      this.prepareExternalLink(button);\n   }\n\n   private prepareExternalLink(element: HTMLElement): void {\n      this.renderer.addClass(element, this.CONTAINER_CLASS);\n\n      this.setText(element);\n      if (this.isLink(element)) {\n         this.decorateLink(element);\n      } else {\n         this.addLinkRole(element);\n      }\n\n      this.initializeNavigationHandler(element);\n   }\n\n   private isButton(element: HTMLElement): boolean {\n      return element instanceof HTMLButtonElement;\n   }\n\n   private isLink(element: HTMLElement): boolean {\n      return element instanceof HTMLAnchorElement;\n   }\n\n   private setText(element: HTMLElement): void {\n      const span: HTMLSpanElement = this.renderer.createElement(this.HTML_ELEMENT_SPAN_NAME);\n      span.innerText = this.getText(element);\n      this.renderer.appendChild(element, span);\n\n      const icon: HTMLSpanElement = this.renderer.createElement(this.HTML_ELEMENT_ICON_NAME);\n      icon.setAttribute(this.ICON_SHAPE_ATTR_NAME, this.ICON_SHAPE_ATTR_VALUE);\n      icon.setAttribute(this.ICON_SIZE_ATTR_NAME, this.ICON_SIZE_ATTR_VALUE);\n      icon.setAttribute(this.ICON_CLASS_ATTR_NAME, this.ICON_CLASS_ATTR_VALUE);\n      // Set title of the icon for screen readers clarity\n      icon.setAttribute(this.ICON_TITLE_ATTR_NAME, VsanUiUtils.getString(\"vsan.screenReader.label.externalLink.icon\"));\n      this.renderer.appendChild(element, icon);\n   }\n\n   private getText(element: HTMLElement): string {\n      if (this.anchorText) {\n         return this.anchorText;\n      }\n      const key: string = this.isButton(element) ? this.ASK_VMWARE_DEFAULT_TEXT_KEY : this.LEARN_MORE_DEFAULT_TEXT_KEY;\n      return VsanUiUtils.getString(key);\n   }\n\n   private decorateLink(element: HTMLElement): void {\n      const linkElement: HTMLLinkElement = element as HTMLLinkElement;\n      // don't use href attribute. If omitted, the link will be not visualized properly.\n      linkElement.href = this.LEAD_TO_NOWHERE_URL;\n      // display link on same line\n      linkElement.style.display = \"inline-flex\";\n   }\n\n   private initializeNavigationHandler(element: HTMLElement): void {\n      element.addEventListener(this.NAVIGATION_EVENT_TYPE, () => {\n         if (this.helpId) {\n            this.navigationService.askVMware(this.helpId);\n            return;\n         }\n         if (this.articleId) {\n            this.navigationService.navigateToAddress(`${this.KB_URL}${this.articleId}`);\n            return;\n         }\n         if (this.url) {\n            this.navigationService.navigateToAddress(this.url);\n         }\n      });\n   }\n\n   // Indicate external navigation by assigning \"link\" role\n   private addLinkRole(element: HTMLElement): void {\n      this.renderer.setAttribute(element, this.HTML_ELEMENT_ROLE_ATTR_NAME, this.HTML_ELEMENT_ROLE_ATTR_VALUE);\n   }\n}","/* Copyright 2019 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {NgModule} from \"@angular/core\";\nimport {CommonDirectiveModule} from \"@directive/common-directive.module\";\nimport {CommonPipeModule} from \"@pipe/common-pipe.module\";\nimport {ValidationModule} from \"@component/validation/validation.module\";\nimport {ActionButtonModule} from \"@component/action-button/action-button.module\";\nimport {PromptModule} from \"@component/dialog/prompt/prompt.module\";\nimport {CommonCellsModule} from \"@component/cell/common-cells.module\";\nimport {InventoryBrowserModule} from \"@component/inventory/inventory-browser.module\";\nimport {SearchModule} from \"@component/search/search.module\";\nimport {TreeDatagridModule} from \"@component/datagrid/tree-datagrid.module\";\nimport {DatetimePickerModule} from \"@component/datetime-picker/datetime-picker.module\";\nimport {PopupListModule} from \"@component/popup-list/popup-list.module\";\nimport {VsanBreadcrumbModule} from \"@component/navigation/vsan-breadcrumb.module\";\n\n@NgModule({\n   imports: [\n         CommonDirectiveModule,\n         CommonPipeModule,\n         ValidationModule,\n         ActionButtonModule,\n         PromptModule,\n         CommonCellsModule,\n         InventoryBrowserModule,\n         SearchModule,\n         TreeDatagridModule,\n         DatetimePickerModule,\n         PopupListModule,\n         VsanBreadcrumbModule,\n   ],\n   exports: [\n      CommonDirectiveModule,\n      CommonPipeModule,\n      ValidationModule,\n      ActionButtonModule,\n      PromptModule,\n      CommonCellsModule,\n      InventoryBrowserModule,\n      SearchModule,\n      TreeDatagridModule,\n      DatetimePickerModule,\n      PopupListModule,\n      VsanBreadcrumbModule,\n   ],\n})\nexport class VsanCommonModule { }","/* Copyright 2019-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {NgModule} from \"@angular/core\";\nimport {CommonModule} from \"@angular/common\";\nimport {ClarityModule} from \"@clr/angular\";\nimport {ActionButtonSeparatorComponent} from \"@component/action-button/action-button-separator.component\";\nimport {ButtonTitleDirective} from \"@component/action-button/button-title.directive\";\nimport {ButtonGroupDirective} from \"@component/action-button/button-group.directive\";\nimport {ButtonGroupWrapDirective} from \"@component/action-button/button-group-wrap.directive\";\n\n@NgModule({\n   imports: [\n      CommonModule,\n      ClarityModule,\n   ],\n   declarations: [\n      ActionButtonSeparatorComponent,\n      ButtonGroupDirective,\n      ButtonGroupWrapDirective,\n      ButtonTitleDirective,\n   ],\n   exports: [\n      ActionButtonSeparatorComponent,\n      ButtonGroupDirective,\n      ButtonGroupWrapDirective,\n      ButtonTitleDirective,\n   ]\n})\nexport class ActionButtonModule {\n}\n"],"sourceRoot":"webpack:///"}