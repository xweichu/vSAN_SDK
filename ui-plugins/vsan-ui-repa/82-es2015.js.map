{"version":3,"sources":["./src/app/vsan/common/component/placement-details/placement-details.component.ts","./src/app/vsan/common/component/placement-details/placement-details-grouped.html","./src/app/vsan/common/component/placement-details/placement-details-grouped.component.ts","./src/app/vsan/common/component/datagrid/filter/base-filter.ts","./src/app/vsan/common/component/inventory/inventory-browser.module.ts","./src/app/vsan/common/component/placement-details/placement-details.html","./src/app/vsan/common/component/search/search.module.ts","./src/app/vsan/common/component/placement-details/model/virtual-object-branch-model.ts"],"names":[],"mappings":"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","file":"82-es2015.js","sourcesContent":["/* Copyright 2017-2022 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, Input, OnInit} from \"@angular/core\";\nimport {PhysicalPlacementService} from \"@generated/physical-placement-service\";\nimport {VirtualObjectBasicModel} from \"@generated/virtual-object-basic-model\";\nimport {VirtualObjectModel} from \"@generated/virtual-object-model\";\nimport {VirtualObjectPlacementModel} from \"@generated/virtual-object-placement-model\";\nimport {VsanConfigService} from \"@generated/vsan-config-service\";\nimport {ErrorMessage} from \"@service/flow/error-message.decorator\";\nimport {Loader} from \"@service/flow/loader.decorator\";\nimport {ManagedObject} from \"@service/managed-object\";\nimport {MapUtil} from \"@util/map-util\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\n\n@Component({\n   templateUrl: \"placement-details.html\",\n   styleUrls: [\"placement-details.scss\"],\n   selector: \"vsan-placement-details\",\n})\nexport class PlacementDetailsComponent implements OnInit {\n\n   @Input()\n   isGrouped: boolean = false;\n\n   @Input()\n   vmRef: ManagedObject;\n\n   private _loadingObjects: boolean;\n\n   @Input()\n   set loadingObjects(loadingObjects: boolean) {\n      this._loadingObjects = loadingObjects;\n      if (!loadingObjects) {\n         this.queryPlacementData();\n      }\n   }\n\n   get loadingObjects(): boolean {\n      return this._loadingObjects;\n   }\n\n   private _selectedVirtualObjects: VirtualObjectModel[];\n\n   @Input()\n   set selectedVirtualObjects(objects: VirtualObjectModel[]) {\n      this._selectedVirtualObjects = objects;\n      if (VsanUiUtils.isEmpty(objects)) {\n         return;\n      }\n      this.queryPlacementData();\n   }\n\n   get selectedVirtualObjects(): VirtualObjectModel[] {\n      return this._selectedVirtualObjects;\n   }\n\n   @Input()\n   virtualObjects: VirtualObjectModel[];\n\n   @Input()\n   clusterRef: ManagedObject;\n\n   @ErrorMessage()\n   errorMessage: string;\n\n   data: Map<string, VirtualObjectPlacementModel[]>;\n   isVsanMaxEnabled: boolean;\n\n   constructor(private physicalPlacementService: PhysicalPlacementService,\n         private configService: VsanConfigService) {\n   }\n\n   async ngOnInit(): Promise<void> {\n      await this.queryPlacementData();\n   }\n\n   @Loader()\n   private async queryPlacementData(): Promise<void> {\n      if (this.loadingObjects || !this.clusterRef || this.getObjectsUuids().size === 0) {\n         return;\n      }\n\n      let placementData: any;\n      [this.isVsanMaxEnabled, placementData] = await Promise.all([\n         this.configService.isVsanMaxEnabled(this.clusterRef),\n         this.physicalPlacementService.getPhysicalPlacement(\n               this.clusterRef,\n               this.getVsanObjectUuids(),\n               this.vsanDirectObjects),\n      ]);\n      const physicalPlacementDetails: Map<string, VirtualObjectPlacementModel[]> =\n            MapUtil.toMap<string, VirtualObjectPlacementModel[]>(placementData);\n      this.savePhysicalPlacementDetails(physicalPlacementDetails);\n   }\n\n   private getObjectsUuids(): Set<string> {\n      return new Set(this.selectedVirtualObjects?.map(virtualObject => virtualObject.uid));\n   }\n\n   private getVsanObjectUuids(): string[] {\n      return [...new Set(this.selectedVirtualObjects?.filter(vo => vo.diskUuid === null).map(vo => vo.uid))];\n   }\n\n   private get vsanDirectObjects(): VirtualObjectBasicModel[] {\n      return this.selectedVirtualObjects?.filter(vo => VsanUiUtils.isSet(vo.diskUuid))\n            .map(vo => VirtualObjectBasicModel.Factory.create(vo.uid, vo.name, vo.diskUuid));\n   }\n\n   private savePhysicalPlacementDetails(physicalPlacementDetails: Map<string, VirtualObjectPlacementModel[]>): void {\n      this.data = new Map<string, VirtualObjectPlacementModel[]>();\n      // Keep the original order of the selected virtual objects\n      this.selectedVirtualObjects\n            .filter(virtualObject => physicalPlacementDetails.has(virtualObject.uid))\n            .forEach(virtualObject => this.data.set(virtualObject.uid, physicalPlacementDetails.get(virtualObject.uid)));\n   }\n}","<!--Copyright 2017-2022 VMware, Inc. All rights reserved. -- VMware Confidential-->\n<div id=\"hosts-and-disks\">\n   <div>\n      {{\"vsan.monitor.cluster.virtualObjects.action.viewDetails.tabs.placement.hostsAndDisksLabel\" | localized}}\n   </div>\n\n   <div *ngIf=\"!physicalObjects?.rootItems?.length\" class=\"spinner central-spinner\">{{\"vsan.loading\" | localized}}</div>\n\n   <clr-datagrid *ngIf=\"physicalObjects?.rootItems.length\">\n      <clr-dg-column vsan-show-title>\n         {{\"vsan.monitor.cluster.virtualObjects.action.viewDetails.tabs.placement.name\" | localized}}\n      </clr-dg-column>\n      <clr-dg-column vsan-show-title>\n         {{\"vsan.monitor.cluster.virtualObjects.action.viewDetails.tabs.placement.state\" | localized}}\n      </clr-dg-column>\n\n      <clr-dg-row *ngFor=\"let row of physicalObjects.rows\"\n                  (click)=\"select(row.data)\"\n                  [class.grid-row-selected]=\"isSelected(row.data)\">\n         <clr-dg-cell vsan-show-title>\n            <vsan-expand [row]=\"row\"></vsan-expand>\n            <clr-icon *ngIf=\"row.data.iconId\" [attr.shape]=\"row.data.iconId\"></clr-icon>\n            <span [title]=\"row.data.tooltip\" [ngClass]=\"row.data.navigationTarget ? 'highlight-text' : ''\">\n               {{row.data.label}}\n            </span>\n            <span *ngIf=\"row.data.faultDomain\">({{row.data.faultDomain}})</span>\n         </clr-dg-cell>\n         <clr-dg-cell vsan-show-title>\n            <ng-container *ngIf=\"row.data.hasState\">\n               <div *ngIf=\"row.data.issues > 0; else noErrors\">\n                  <clr-icon [attr.shape]=\"row.data.incrementedIssue | componentStateIconShape\"\n                            [ngClass]=\"row.data.incrementedIssue | componentStateIconClass\"\n                            class=\"is-solid\">\n                  </clr-icon>\n                  <span class=\"state-label\">\n                     {{(row.data.issues > 1\n                        ? \"vsan.monitor.cluster.virtualObjects.action.viewDetails.tabs.placement.state.unhealthy.manyIssues\"\n                        : \"vsan.monitor.cluster.virtualObjects.action.viewDetails.tabs.placement.state.unhealthy.oneIssue\")\n                        | localized: row.data.issues}}\n                  </span>\n               </div>\n               <ng-template #noErrors>\n                  <clr-icon shape=\"success-standard\" class=\"is-solid is-success\" aria-hidden=\"true\"></clr-icon>\n                  <span class=\"state-label\">\n                     {{\"vsan.monitor.cluster.virtualObjects.action.viewDetails.tabs.placement.state.healthy\" | localized}}\n                  </span>\n               </ng-template>\n            </ng-container>\n         </clr-dg-cell>\n      </clr-dg-row>\n   </clr-datagrid>\n</div>\n\n<div id=\"virtual-components\">\n   <div>\n      {{\"vsan.monitor.cluster.virtualObjects.action.viewDetails.tabs.placement.virtualComponentsLabel\" | localized}}\n   </div>\n   <clr-stack-view *ngFor=\"let row of virtualComponents\">\n      <clr-stack-block *ngIf=\"row.datastoreType === DatastoreType.VSAN\" [clrSbExpanded]=\"true\">\n         <clr-stack-label>\n            <virtual-objects-placement-details-path [path]=\"row.path\"\n                                                    [isTooltipVisible]=\"false\">\n            </virtual-objects-placement-details-path>\n         </clr-stack-label>\n         <!--List all components of a given virtual object-->\n         <clr-stack-block *ngFor=\"let child of row.lastLevelComponents\">\n            <clr-stack-label>\n               {{child.label}}\n            </clr-stack-label>\n            <clr-stack-content>\n               <physical-placement-property-box [model]=\"child\"></physical-placement-property-box>\n            </clr-stack-content>\n         </clr-stack-block>\n      </clr-stack-block>\n      <clr-stack-block *ngIf=\"row.datastoreType !== DatastoreType.VSAN\" [clrSbExpanded]=\"true\">\n         <clr-stack-label>\n            <ng-container *ngIf=\"row.label && !row.path\">\n               <!--When we have label-->\n               <clr-icon *ngIf=\"row.iconId\" [attr.shape]=\"row.iconId\"></clr-icon>\n               <span>{{row.label}}</span>\n            </ng-container>\n            <ng-container *ngIf=\"row.path && !row.label\">\n               <!--When we have path-->\n               <virtual-objects-placement-details-path [path]=\"row.path\"\n                                                       [isTooltipVisible]=\"false\">\n               </virtual-objects-placement-details-path>\n            </ng-container>\n         </clr-stack-label>\n      </clr-stack-block>\n   </clr-stack-view>\n</div>\n","/* Copyright 2017-2022 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, EventEmitter, Input, Output} from \"@angular/core\";\nimport {TreeDatagrid} from \"@component/datagrid/tree-datagrid\";\nimport {VirtualObjectBranchModel} from \"@component/placement-details/model/virtual-object-branch-model\";\nimport {PlacementDetailsUtil} from \"@component/placement-details/placement-details-util\";\nimport {DatastoreType} from \"@generated/datastore-type\";\nimport {VirtualObjectModel} from \"@generated/virtual-object-model\";\nimport {VirtualObjectPlacementModel} from \"@generated/virtual-object-placement-model\";\nimport {VsanComponentState} from \"@generated/vsan-component-state\";\nimport {DiskMgmtUtil} from \"@util/disk-mgmt.util\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\n\n@Component({\n   templateUrl: \"placement-details-grouped.html\",\n   styleUrls: [\"placement-details-grouped.scss\"],\n   selector: \"virtual-objects-placement-details-grouped\",\n})\nexport class PlacementDetailsGroupedComponent {\n\n   DatastoreType: typeof DatastoreType = DatastoreType;\n   private componentsByVirtualObject: Map<string, VirtualObjectPlacementModel[]>;\n   private _virtualObjects: VirtualObjectModel[];\n\n   @Input()\n   isVsanMaxEnabled: boolean;\n\n   @Output()\n   onError: EventEmitter<string> = new EventEmitter<string>();\n\n   physicalObjects: TreeDatagrid = new TreeDatagrid(model => model.children);\n\n   virtualComponents: any[];\n\n   pathByVsanUuid: any = {}; // vsanUuid => VirtualObjectModel[]\n\n   selectedModel: any;\n\n   @Input()\n   set data(value: Map<string, VirtualObjectPlacementModel[]>) {\n      this.componentsByVirtualObject = value;\n      if (!value) {\n         this.physicalObjects.rootItems = [];\n         return;\n      }\n      this.loadData();\n   }\n\n   get data(): Map<string, VirtualObjectPlacementModel[]> {\n      return this.componentsByVirtualObject;\n   }\n\n   @Input()\n   set virtualObjects(models: VirtualObjectModel[]) {\n      models.forEach(model => {\n         if (model.uid) {\n            this.pathByVsanUuid[model.uid] = [model];\n         }\n         if (model.children) {\n            model.children.forEach(child => {\n               if (child.uid) {\n                  this.pathByVsanUuid[child.uid] = [model, child];\n               }\n            });\n         }\n      });\n      this._virtualObjects = models;\n      this.loadData();\n   }\n\n   get virtualObjects(): VirtualObjectModel[] {\n      return this._virtualObjects;\n   }\n\n   loadData = () => {\n      if (!this.virtualObjects) {\n         return;\n      }\n\n      const hostAndDisksData: any[] = this.prepareHostsAndDisksTree();\n      this.physicalObjects.rootItems = hostAndDisksData;\n      if (hostAndDisksData.length > 0) {\n         this.select(hostAndDisksData[0]);\n      }\n   };\n\n   select = (model: any) => {\n      if (!this.physicalObjects?.rootItems?.length) {\n         return;\n      }\n      this.selectedModel = model;\n      this.virtualComponents = [];\n\n      if (!model) {\n         return;\n      }\n\n      for (const uuid of this.data.keys()) {\n         // deep clone the models, because the mergeSingleRaidConfig will move the\n         // raid config children to the upper level and\n         // we don't want to change the original data as well\n         const models: VirtualObjectPlacementModel[] = JSON.parse(JSON.stringify(this.data.get(uuid)));\n\n         this.applyFilter(models, model);\n\n         if (models.length) {\n            this.virtualComponents.push(PlacementDetailsUtil.getPlacement(\n                  uuid, models, this.virtualObjects, (id) => this.pathByVsanUuid[uuid]));\n         }\n      }\n   };\n\n   isSelected = (model: any) => this.selectedModel === model;\n\n   private applyFilter(models: VirtualObjectPlacementModel[], filterModel: any) {\n      const predicate = (comp: VirtualObjectPlacementModel, filterBy: any) => {\n         if (filterBy.hostUuid) {\n            return filterBy.hostUuid === (comp.host\n                  ? comp.host.nodeUuid\n                  : \"\");\n         } else if (filterBy.cacheUuid) {\n            return filterBy.cacheUuid === (comp.cacheDisk\n                  ? comp.cacheDisk.nodeUuid\n                  : \"\");\n         } else if (filterBy.capacityUuid) {\n            return filterBy.capacityUuid === (comp.capacityDisk\n                  ? comp.capacityDisk.nodeUuid\n                  : \"\");\n         } else if (filterBy.capacityUuids) {\n            return filterBy.capacityUuids.includes(comp.capacityDisk.nodeUuid);\n         } else if (filterBy.children) {\n            for (const child of filterBy.children) {\n               if (predicate(comp, child)) {\n                  return true;\n               }\n            }\n         }\n         return false;\n      };\n      // apply the filter to the last level components\n      this.filterChildren(models, filterModel, predicate);\n   }\n\n   private filterChildren(models: VirtualObjectPlacementModel[], filterModel: any, filterFunction: (...args) => any) {\n      for (let i = models.length - 1; i >= 0; i--) {\n         if (models[i].children) {\n            this.filterChildren(models[i].children, filterModel, filterFunction);\n         } else {\n            if (!filterFunction(models[i], filterModel)) {\n               models.splice(i, 1);\n            }\n         }\n\n         // when all children are filtered out, remove the parent element\n         if (models[i] && models[i].children && models[i].children.length === 0) {\n            models.splice(i, 1);\n         }\n      }\n   }\n\n   private prepareHostsAndDisksTree(): any[] {\n      const hostByUuid = {};\n      const groupByUuid = {};\n      const unknownDisks = {};\n\n      // Set DEGRADED or ABSENT aggregate state per object, so we can show warning or error icon if there are issues.\n      const incrementIssue = (model: VirtualObjectBranchModel, issue: VsanComponentState, issueCount: number = 1) => {\n         model.issues += issueCount;\n         if (!model.incrementedIssue) {\n            model.incrementedIssue =\n                  (issue === VsanComponentState.DEGRADED)\n                        ? VsanComponentState.DEGRADED\n                        : VsanComponentState.ABSENT;\n         } else if ((model.incrementedIssue !== issue) && (issue === VsanComponentState.DEGRADED)) {\n            model.incrementedIssue = VsanComponentState.DEGRADED;\n         }\n      };\n\n      const acceptPartialModel = (model: VirtualObjectPlacementModel) => {\n         const hasDisk = (disk: VirtualObjectPlacementModel) => disk && disk.nodeUuid;\n\n         if (hasDisk(model.cacheDisk)) {\n            let unknownDisk = unknownDisks[model.cacheDisk.nodeUuid];\n            if (!unknownDisk) {\n               unknownDisk = VirtualObjectBranchModel.createDisk(model.cacheDisk, true);\n               unknownDisks[model.cacheDisk.nodeUuid] = unknownDisk;\n            }\n            if (model.state !== VsanComponentState.ACTIVE) {\n               incrementIssue(unknownDisk, model.state);\n            }\n         }\n\n         if (hasDisk(model.capacityDisk)) {\n            let unknownDisk = unknownDisks[model.capacityDisk.nodeUuid];\n            if (!unknownDisk) {\n               unknownDisk = VirtualObjectBranchModel.createDisk(model.capacityDisk, true);\n               unknownDisk.capacityUuid = model.capacityDisk.nodeUuid;\n               unknownDisks[model.capacityDisk.nodeUuid] = unknownDisk;\n            }\n            if (model.state !== VsanComponentState.ACTIVE) {\n               incrementIssue(unknownDisk, model.state);\n            }\n         }\n      };\n\n      const acceptModel = (placement: VirtualObjectPlacementModel) => {\n         if (placement.children) {\n            return placement.children.forEach(c => acceptModel(c));\n         }\n\n         if (!placement.host) {\n            return acceptPartialModel(placement);\n         }\n\n         let hostData: VirtualObjectBranchModel = hostByUuid[placement.host.nodeUuid];\n         if (!hostData) {\n            hostData = VirtualObjectBranchModel.createHost(placement.host);\n            hostByUuid[placement.host.nodeUuid] = hostData;\n         }\n\n         const hasState: boolean = placement.datastoreType === DatastoreType.VSAN;\n         if (hasState) {\n            // If at least one object placed on that host has state, then the host also has a state\n            hostData.hasState = true;\n         }\n\n         const groupUuid: string = PlacementDetailsUtil.getGroupUuid(placement, this.isVsanMaxEnabled);\n         const capacityDisk: VirtualObjectBranchModel =\n               VirtualObjectBranchModel.createCapacityDisk(placement, hasState);\n\n         let group: VirtualObjectBranchModel = groupByUuid[groupUuid];\n         if (!group) {\n            group = VirtualObjectBranchModel.createGroup(placement, capacityDisk, this.isVsanMaxEnabled);\n            groupByUuid[groupUuid] = group;\n            hostData.children.push(group);\n         } else if (group.capacityUuids?.indexOf(placement.capacityDisk?.nodeUuid) < 0) {\n            group.children.push(capacityDisk);\n            group.capacityUuids.push(capacityDisk.capacityUuid);\n         }\n\n         if (hasState && placement.state !== VsanComponentState.ACTIVE) {\n            incrementIssue(hostData, placement.state);\n            incrementIssue(group, placement.state);\n\n            // Find the concrete disk and increment its issues number\n            const disk: VirtualObjectBranchModel = group.children?.find((vo: VirtualObjectBranchModel) => {\n               return vo.capacityUuid === placement.capacityDisk.nodeUuid;\n            });\n            if (disk) {\n               incrementIssue(disk, placement.state);\n            }\n         }\n      };\n\n      for (const components of this.componentsByVirtualObject.values()) {\n         components.forEach(component => acceptModel(component));\n      }\n\n      if (Object.keys(unknownDisks).length > 0) {\n         const unknownDisksEntry: string = VsanUiUtils.getString(\n               \"vsan.monitor.cluster.virtualObjects.action.viewDetails.tabs.placement.unknownGroup\");\n         const unknownGroup: VirtualObjectBranchModel =\n               new VirtualObjectBranchModel(null, unknownDisksEntry, [], unknownDisksEntry);\n         Object.keys(unknownDisks).forEach(diskId => {\n            const disk = unknownDisks[diskId];\n            unknownGroup.children.push(disk);\n            incrementIssue(unknownGroup, disk.incrementedIssue, disk.issues);\n         });\n         hostByUuid[unknownDisksEntry] = unknownGroup;\n      }\n\n      const hostUuids: string[] = Object.keys(hostByUuid);\n\n      return hostUuids.map(uid => {\n         DiskMgmtUtil.sortDiskGroups(hostByUuid[uid].children, (diskGroup: VirtualObjectBranchModel) => {\n            return !VsanUiUtils.isEmpty(diskGroup.cacheUuid)\n                  && diskGroup.hasState\n                  && diskGroup.children.every(disk => disk.hasState);\n         });\n\n         return hostByUuid[uid];\n      });\n   }\n}\n","/* Copyright 2017-2020 VMware, Inc. All rights reserved. -- VMware Confidential */\n\nimport {Filter, TreeDatagridRow} from \"../tree-datagrid\";\nimport {ClrDatagridStringFilterInterface} from \"@clr/angular\";\n\n/**\n * Abstract filter class that needs to be extended in order to implement custom filtration.\n * The class has a single abstract method that takes an object of type T and returns its\n * string representation.\n */\nexport class BaseFilter<T> implements ClrDatagridStringFilterInterface<T>, Filter {\n\n   accepts(data: T, search: string): boolean {\n      // Handle correctly TreeDatagrid components\n      if (data instanceof TreeDatagridRow) {\n         data = data.data;\n      }\n\n      let label: string = this.stringify(data);\n      if (label) {\n         // Compare ignoring the case\n         return label.toLowerCase().indexOf(search.toLowerCase()) != -1;\n      } else {\n         return false;\n      }\n   }\n\n   match(data: T, search: string): boolean {\n      return this.accepts(data, search);\n   }\n\n   protected stringify(data: T): string  {\n      return data + \"\";\n   }\n\n}\n\n","/* Copyright 2019-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {NgModule} from \"@angular/core\";\nimport {CommonModule} from \"@angular/common\";\nimport {FormsModule} from \"@angular/forms\";\nimport {ClarityModule} from \"@clr/angular\";\nimport {CommonPipeModule} from \"@pipe/common-pipe.module\";\nimport {InventoryBrowserComponent} from \"@component/inventory/inventory-browser.component\";\nimport {InventoryNodeComponent} from \"@component/inventory/inventory-node.component\";\nimport {WitnessCandidateInventoryService} from \"@generated/witness-candidate-inventory-service\";\nimport {DatacenterInventoryService} from \"@generated/datacenter-inventory-service\";\nimport {NetworkInventoryService} from \"@generated/network-inventory-service\";\nimport {ComputeInventoryService} from \"@generated/compute-inventory-service\";\nimport {IoInsightInventoryService} from \"@generated/io-insight-inventory-service\";\nimport {SearchModule} from \"@component/search/search.module\";\nimport {TreeNodeComponent} from \"@component/inventory/tree-view/tree-node.component\";\nimport {TreeViewComponent} from \"@component/inventory/tree-view/tree-view.component\";\nimport {DropdownObjectSelectorComponent} from \"@component/inventory/dropdown-object-selector/dropdown-object-selector.component\";\nimport {CommonDirectiveModule} from \"@directive/common-directive.module\";\nimport {InventoryNodesComponent} from \"@component/inventory/inventory-nodes.component\";\nimport {TreeNodesComponent} from \"@component/inventory/tree-view/tree-nodes.component\";\n\n@NgModule({\n   imports: [\n      CommonModule,\n      FormsModule,\n      ClarityModule,\n      CommonPipeModule,\n      SearchModule,\n      CommonDirectiveModule,\n   ],\n   declarations: [\n      InventoryBrowserComponent,\n      InventoryNodesComponent,\n      InventoryNodeComponent,\n      TreeNodeComponent,\n      TreeNodesComponent,\n      TreeViewComponent,\n      DropdownObjectSelectorComponent,\n   ],\n   exports: [\n      InventoryBrowserComponent,\n      DropdownObjectSelectorComponent,\n      TreeViewComponent,\n   ],\n   providers: [\n      WitnessCandidateInventoryService,\n      DatacenterInventoryService,\n      NetworkInventoryService,\n      ComputeInventoryService,\n      IoInsightInventoryService,\n   ],\n})\nexport class InventoryBrowserModule {\n}","<!-- Copyright 2017-2022 VMware, Inc. All rights reserved. VMware Confidential -->\n<vsan-validation id=\"validation-message\"\n                 *ngIf=\"errorMessage\"\n                 [alert]=\"errorMessage\"\n                 [allowClose]=\"false\">\n</vsan-validation>\n<ng-container *ngIf=\"!errorMessage\">\n   <clr-checkbox-wrapper>\n      <input type=\"checkbox\" clrCheckbox id=\"toggleGrouped\" [(ngModel)]=\"isGrouped\">\n      <label>\n         {{\"vsan.monitor.cluster.virtualObjects.action.viewDetails.tabs.placement.groupingSwitch\" | localized}}\n      </label>\n   </clr-checkbox-wrapper>\n   <virtual-objects-placement-details-flat *ngIf=\"!isGrouped\"\n                                           [vmRef]=\"vmRef\"\n                                           [virtualObjects]=\"virtualObjects\"\n                                           [data]=\"data\"\n                                           [isVsanMaxEnabled]=\"isVsanMaxEnabled\">\n   </virtual-objects-placement-details-flat>\n   <virtual-objects-placement-details-grouped *ngIf=\"isGrouped\"\n                                              [virtualObjects]=\"virtualObjects\"\n                                              [data]=\"data\"\n                                              [isVsanMaxEnabled]=\"isVsanMaxEnabled\">\n   </virtual-objects-placement-details-grouped>\n</ng-container>","/* Copyright 2019 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {NgModule} from \"@angular/core\";\nimport {CommonModule} from \"@angular/common\";\nimport {FormsModule} from \"@angular/forms\";\nimport {ClarityModule} from \"@clr/angular\";\nimport {CommonPipeModule} from \"@pipe/common-pipe.module\";\nimport {SearchComponent} from \"@component/search/search.component\";\n\n@NgModule({\n   imports: [\n      CommonModule,\n      FormsModule,\n      ClarityModule,\n      CommonPipeModule\n   ],\n   declarations: [\n      SearchComponent\n   ],\n   exports: [\n      SearchComponent\n   ],\n})\nexport class SearchModule {\n}\n","/* Copyright 2021-2022 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {DatastoreType} from \"@generated/datastore-type\";\nimport {VirtualObjectPlacementModel} from \"@generated/virtual-object-placement-model\";\nimport {VsanComponentState} from \"@generated/vsan-component-state\";\nimport {ManagedObject} from \"@service/managed-object\";\nimport {Icon} from \"@util/icon\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\n\n// Represents a node from the hierarchical path to a virtual object (e.g. Host, Cache disk)\nexport class VirtualObjectBranchModel {\n   hostUuid: string;\n   cacheUuid: string;\n   capacityUuid: string;\n   capacityUuids: string[];\n   incrementedIssue: VsanComponentState;\n\n   constructor(\n         public iconId: string,\n         public label: string,\n         public children: VirtualObjectBranchModel[] = [],\n         public tooltip: string = \"\",\n         public faultDomain: string = null,\n         public navigationTarget: ManagedObject = null,\n         public issues: number = 0,\n         public hasState: boolean = false) {\n   }\n\n   static createHost = (host: VirtualObjectPlacementModel): VirtualObjectBranchModel => {\n      const result: VirtualObjectBranchModel = new VirtualObjectBranchModel(\n            host.iconId, host.label, [], host.nodeUuid, host.faultDomain, host.navigationTarget);\n      result.hostUuid = host.nodeUuid;\n      return result;\n   };\n\n   static createDisk = (placement: VirtualObjectPlacementModel, hasState: boolean): VirtualObjectBranchModel => {\n      const disk: VirtualObjectBranchModel =\n            new VirtualObjectBranchModel(placement.iconId, placement.label, null, placement.nodeUuid);\n      disk.hasState = hasState; // vSAN disks have state based on the component states\n      return disk;\n   };\n\n   static createCapacityDisk(placement: VirtualObjectPlacementModel, hasState: boolean): VirtualObjectBranchModel {\n      const disk: VirtualObjectBranchModel = VirtualObjectBranchModel.createDisk(placement.capacityDisk, hasState);\n      disk.capacityUuid = placement.capacityDisk.nodeUuid;\n      return disk;\n   }\n\n   static createGroup(\n         placement: VirtualObjectPlacementModel,\n         capacityDisk: VirtualObjectBranchModel,\n         isVsanMaxEnabled: boolean): VirtualObjectBranchModel {\n      switch (placement.datastoreType) {\n         case DatastoreType.VSAN:\n            return isVsanMaxEnabled\n                  ? capacityDisk\n                  : VirtualObjectBranchModel.createVsanDiskGroup(placement.cacheDisk, capacityDisk);\n         case DatastoreType.VSAN_DIRECT:\n         case DatastoreType.PMEM:\n            return VirtualObjectBranchModel.createManagedByVsanDiskGroup(capacityDisk, placement.datastoreType);\n      }\n   }\n\n   private static createVsanDiskGroup = (\n         cacheModel: VirtualObjectPlacementModel,\n         capacityModel: VirtualObjectBranchModel): VirtualObjectBranchModel => {\n      const result: VirtualObjectBranchModel = new VirtualObjectBranchModel(\n            Icon.DISK_GROUP_IMAGE,\n            VsanUiUtils.getString(\n                  \"vsan.monitor.cluster.virtualObjects.action.viewDetails.tabs.placement.diskGroup\",\n                  cacheModel.label),\n            [capacityModel]);\n      result.cacheUuid = cacheModel.nodeUuid;\n      result.capacityUuids = [capacityModel.capacityUuid];\n      result.hasState = true; // vSAN DG has state based on the component states\n      return result;\n   };\n\n   private static createManagedByVsanDiskGroup = (\n         capacityModel: VirtualObjectBranchModel,\n         datastoreType: DatastoreType): VirtualObjectBranchModel => {\n      const group: VirtualObjectBranchModel = new VirtualObjectBranchModel(\n            \"\",\n            datastoreType === DatastoreType.VSAN_DIRECT\n                  ? VsanUiUtils.getString(\"vsan.diskGroup.type.vsanDirect\")\n                  : VsanUiUtils.getString(\"vsan.diskGroup.type.pmem\"),\n            [capacityModel]);\n      group.capacityUuids = [capacityModel.capacityUuid];\n      return group;\n   };\n}"],"sourceRoot":"webpack:///"}