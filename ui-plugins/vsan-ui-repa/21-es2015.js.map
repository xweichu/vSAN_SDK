{"version":3,"sources":["./src/app/vsan/common/component/chart/capacity-bar-chart/capacity-bar-chart.component.ts","./src/app/vsan/common/component/chart/capacity-bar-chart/capacity-bar-chart.html"],"names":[],"mappings":"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","file":"21-es2015.js","sourcesContent":["/* Copyright 2018-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {\n   AfterViewInit,\n   ChangeDetectorRef,\n   Component,\n   ElementRef,\n   EventEmitter,\n   Input,\n   OnChanges,\n   Output,\n   SimpleChanges,\n   ViewChild,\n} from \"@angular/core\";\nimport {HighchartsPropertiesService} from \"../highcharts-properties.service\";\nimport {ChartSectionData, ChartSectionDirection, ChartSectionPlotLine} from \"../model/chart-section.data\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {BarChartService} from \"./bar-chart.service\";\nimport {HighchartsThemeService} from \"../highcharts-theme.service\";\nimport * as Highcharts from \"highcharts\";\nimport {ReferenceWatcher} from \"@util/reference-watcher\";\nimport {TooltipOptions} from \"highcharts/highcharts.src\";\nimport {VsanCapacityService} from \"@component/capacity/capacity.service\";\nimport {Icon} from \"@util/icon\";\nimport {CapacityAlertThreshold} from \"@component/chart/model/capacity-alert-threshold.model\";\n\n/**\n * Displays a capacity bar chart based on highcharts stacked bar chart.\n * - Show up to 4 sections in a given color palette.\n * - Show a tooltip for each ChartSectionData as well as the free section.\n * Free space is also calculated and added lastly in the list\n * - Determine chart color palette based on the total used capacity (all passed sections to display)\n * and a given threshold value the following way:\n *  -- Blue palette if there is no threshold value passed\n *  -- Green if the capacity is bellow the warning threshold value\n *  -- Yellow if the capacity is between warning and error threshold value\n *  -- Red if the capacity is over the error threshold value\n */\n@Component({\n   selector: \"vsan-capacity-bar-chart\",\n   templateUrl: \"capacity-bar-chart.html\",\n   styleUrls: [\"capacity-bar-chart.scss\"],\n   providers: [ReferenceWatcher],\n})\nexport class CapacityBarChartComponent implements OnChanges, AfterViewInit {\n   Icon: typeof Icon = Icon;\n\n   /**\n    * Sections to be displayed in the bar chart\n    */\n   @Input()\n   sections: ChartSectionData[];\n\n   /**\n    * Specifies any markers(a.k.a. plot lines) to be added to the bar chart.\n    * Their height is determined by the chartHeight option as they stretch as high as the chart.\n    */\n   @Input()\n   plotLines: ChartSectionPlotLine[];\n\n   /**\n    * Total size of the bar\n    */\n   @Input()\n   total: number;\n\n   /**\n    * Weather to have a free section as part of the bar chart, calculated based on the total.\n    */\n   @Input()\n   showFree: boolean = true;\n\n   /**\n    * Whether to round the bar chart's edges. Defaults to true.\n    */\n   @Input()\n   roundedBar: boolean = true;\n\n   /**\n    * Warning threshold value\n    */\n   @Input()\n   warningThreshold: CapacityAlertThreshold | number;\n\n   /**\n    * Error threshold value\n    */\n   @Input()\n   errorThreshold: CapacityAlertThreshold | number;\n\n   /**\n    * Whether to use shared tooltip for the entire chart.\n    */\n   @Input()\n   isSharedTooltip: boolean;\n\n   /**\n    * Tooltip settings for advanced styling options.\n    */\n   @Input()\n   tooltipOptions: TooltipOptions;\n\n   /**\n    * The height of the chart area in pixels. Default value is 45px.\n    * This can be increased if we want the bar chart to be displayed in a larger area for example.\n    */\n   @Input()\n   chartHeight: number;\n\n   /**\n    * The width of the bar in pixels. Applied to the pointWidth property of the chart.\n    * If increasing this, also consider increasing the chartHeight in case the tooltips get cropped.\n    */\n   @Input()\n   barWidth: number;\n\n   /**\n    * When it's enabled and the user use the keyboard to navigate to the capacity chart\n    * then Highcharts will display the tooltip and will allow user to use prev/next\n    * buttons to navigate between the sections.\n    */\n   @Input()\n   enableKeyboardNavigation: boolean = false;\n\n   /**\n    * Emit hovered series when mouse over, or null when mouse out.\n    */\n   @Output()\n   hoverBarChart: EventEmitter<any> = new EventEmitter<any>();\n\n   @Input()\n   showAlertThresholds: boolean = false;\n\n   @ViewChild(\"chart\")\n   chartElement: ElementRef;\n   chart: Highcharts.Chart;\n\n   @ViewChild(\"warningThresholdIcon\")\n   warningThresholdIcon: ElementRef;\n\n   @ViewChild(\"errorThresholdIcon\")\n   errorThresholdIcon: ElementRef;\n\n   @ViewChild(\"thresholdsChartContainer\")\n   thresholdsChartContainer: ElementRef;\n\n   private highchartOptions: any;\n   private static BORDER_RADIUS: string = \"20%\";\n\n   constructor(private highchartsService: HighchartsPropertiesService,\n         private barChartService: BarChartService,\n         private highchartsThemeService: HighchartsThemeService,\n         private refWatcher: ReferenceWatcher,\n         private capacityService: VsanCapacityService,\n         private cdRef: ChangeDetectorRef) {\n      this.refWatcher.watchSubscriptionRef(\n            this.highchartsThemeService.whenThemeChanged.subscribe(theme => this.onThemeChanged()));\n   }\n\n   ngAfterViewInit(): void {\n      this.render();\n      this.placeThresholdIcons();\n   }\n\n   ngOnChanges(changes: SimpleChanges): void {\n      this.updateChartSettings();\n      this.populateData();\n      this.updatePlotLines();\n      this.roundChartCorners();\n      this.render();\n      this.placeThresholdIcons();\n   }\n\n   private onThemeChanged(): void {\n      this.updateChartSettings();\n      this.update();\n   }\n\n   private updateChartSettings(): void {\n      if (this.isSharedTooltip) {\n         // Do not add mouse hover effects when using shared tooltip for the chart.\n         this.highchartOptions = this.highchartsService.getBarChartOptions();\n      } else {\n         const mouseOutEvent: Highcharts.SeriesMouseOutCallbackFunction = (event: any) => {\n            this.hoverBarChart.emit(null);\n            // Remove series border after mouse out.\n            this.chart.series[event.target.index].update({\n               borderWidth: 0,\n               type: undefined,\n            }, true);\n         };\n         const mouseOverEvent: Highcharts.SeriesMouseOverCallbackFunction = (event: any) => {\n            this.hoverBarChart.emit(event.target);\n\n            const borderColor: string = this.barChartService.getBarChartBorder(event.target.color);\n            // Display border when mouse over to help low vision user to distinguish the hovered series.\n            this.chart.series[event.target.index].update({\n               borderWidth: 1,\n               borderColor: borderColor,\n               type: undefined,\n            }, true);\n         };\n         // Combine the bar-chart options with the mouse hover events.\n         this.highchartOptions = this.highchartsService.getBarChartOptions(mouseOverEvent, mouseOutEvent);\n      }\n\n      if (this.chartHeight) {\n         this.highchartOptions.chart.height = this.chartHeight;\n      }\n      if (this.barWidth) {\n         this.highchartOptions.plotOptions.bar.pointWidth = this.barWidth;\n      }\n\n      this.highchartOptions.tooltip.shared = this.isSharedTooltip;\n      if (this.tooltipOptions) {\n         this.highchartOptions.tooltip = VsanUiUtils.deepmergeObjects(this.highchartOptions.tooltip,\n               this.tooltipOptions);\n      }\n   }\n\n   private populateData(): void {\n      if (!this.sections) {\n         // The sections are not always available on init. They will get set eventually.\n         return;\n      }\n      this.updateSectionsColors();\n\n      const sections: ChartSectionData[] = this.chartSections;\n      this.populateHighchartSeries(sections);\n      this.addAccessibilityDescription(sections);\n   }\n\n   private updateSectionsColors(): void {\n      // calculate total sections value\n      const totalSectionsSize: number = this.barChartService.getTotalSectionsSize(this.sections, true);\n      // assign colorPalette based on totalSectionsSize and threshold proportion\n      const colorPalette: string[] = this.barChartService.getColorPalette(\n            totalSectionsSize, this.total, this.warningThresholdValue, this.errorThresholdValue);\n\n      this.sections.forEach((sectionData: ChartSectionData, index: number) => {\n         // If the color is not specified, update it based on current color palette\n         if (!sectionData.customSectionColor) {\n            sectionData.customSectionColor = this.barChartService.getSectionColor(colorPalette, index);\n         }\n      });\n   }\n\n   private get chartSections(): ChartSectionData[] {\n      if (!this.highchartOptions) {\n         return[];\n      }\n\n      const sectionsAndFree: ChartSectionData[] = this.getSideSections(ChartSectionDirection.LEFT);\n      // Append the free space as a separate section to display it in the bar chart\n      if (this.showFree) {\n         sectionsAndFree.push(this.getFreeSectionChartData());\n      }\n      sectionsAndFree.push(...this.getSideSections(ChartSectionDirection.RIGHT));\n\n      // Remove zero valued series as they are not displayed and we don't need to apply the rounding to them.\n      return sectionsAndFree.filter((section: ChartSectionData) => section.sectionValueInBytes > 0);\n   }\n\n   private populateHighchartSeries(sections: ChartSectionData[]): void {\n      if (!this.highchartOptions) {\n         return;\n      }\n      this.highchartOptions.series = this.getBarchartSeriesData(sections);\n   }\n\n   private addAccessibilityDescription(sections: ChartSectionData[]): void {\n      if (!this.highchartOptions) {\n         return;\n      }\n\n      let text: string = \"\";\n      if (this.enableKeyboardNavigation) {\n         text = this.capacityService.getAccessibilityText(sections);\n      } else {\n         // If the chart is not interactive (keyboard navigation is not allowed),\n         // Override default announcement to exclude the word \"Interactive\".\n         this.highchartOptions.lang = this.highchartsService.getAccessibilityLangConfig();\n      }\n\n      // General accessibility settings\n      this.highchartOptions.accessibility =\n            this.highchartsService.getAccessibilityConfig(this.enableKeyboardNavigation, text);\n      // Capacity series specific description format\n      this.highchartOptions.accessibility.series = this.getCapacityAccessibilitySeriesDescription();\n      // Expose only the series element to screen readers, not its points.\n      this.highchartOptions.plotOptions.series.accessibility = this.highchartsService.getSeriesAccessibilityConfig();\n   }\n\n   private getCapacityAccessibilitySeriesDescription(): any {\n      return {\n         descriptionFormatter: (series: any) => this.capacityService.getSectionAccessibilityText(\n               series.userOptions.name, series.userOptions.data[0], this.total),\n      };\n   }\n\n   /**\n    * Gets the chart section data that should be added to a specified side of the bar-chart,\n    * e.g. left or right.\n    */\n   private getSideSections(direction: ChartSectionDirection): ChartSectionData[] {\n      return this.sections.filter(\n            section => section.appendDirection === direction);\n   }\n\n   // calculate and assign free section percentage, color and tooltip label\n   private getFreeSectionChartData = (): ChartSectionData => {\n      const totalSectionsSize: number = this.barChartService.getTotalSectionsSize(this.sections);\n      return new ChartSectionData(VsanUiUtils.getString(\"vsan.monitor.capacity.free\"),\n            this.barChartService.getFreeSectionValue(this.total, totalSectionsSize),\n            \"freeSpace\",\n            true,\n            this.barChartService.getFreeCapacityColor());\n   };\n\n   private updatePlotLines(): void {\n      if (VsanUiUtils.isEmpty(this.plotLines)) {\n         return;\n      }\n      this.barChartService.updatePlotLineThemeColors(this.plotLines);\n      this.highchartOptions.yAxis.plotLines = this.plotLines.map(plotLine => {\n         return this.highchartsService.getPlotLine(plotLine.id, plotLine.label, plotLine.value, plotLine.color);\n      });\n   }\n\n   private update(): void {\n      if (this.chart) {\n         this.chart.update(this.highchartOptions);\n      }\n   }\n\n   private render(): void {\n      if (this.chartElement) {\n         this.highchartOptions.chart.renderTo = this.chartElement.nativeElement;\n         this.chart = Highcharts.chart(this.highchartOptions);\n         this.refWatcher.watchChartRef(this.chart);\n      }\n   }\n\n   private roundChartCorners(): void {\n      const seriesCount: number = this.highchartOptions.series.length;\n      if (this.roundedBar && seriesCount > 0) {\n         // Update the first and last elements to have rounded borders if roundedBar flag is set to true\n         this.highchartOptions.series[0].borderRadiusBottomLeft = CapacityBarChartComponent.BORDER_RADIUS;\n         this.highchartOptions.series[0].borderRadiusBottomRight = CapacityBarChartComponent.BORDER_RADIUS;\n         this.highchartOptions.series[seriesCount - 1].borderRadiusTopLeft = CapacityBarChartComponent.BORDER_RADIUS;\n         this.highchartOptions.series[seriesCount - 1].borderRadiusTopRight = CapacityBarChartComponent.BORDER_RADIUS;\n      }\n   }\n\n   private getBarchartSeriesData(seriesData: ChartSectionData[]): any[] {\n      if (!seriesData) {\n         return [];\n      }\n      return seriesData.map((sectionData: ChartSectionData) => sectionData.toSeries());\n   }\n\n   get warningThresholdValue(): number {\n      return (this.warningThreshold instanceof CapacityAlertThreshold)\n            ? this.warningThreshold.basedOnTotalSpace\n            : this.warningThreshold;\n   }\n\n   get errorThresholdValue(): number {\n      return (this.errorThreshold instanceof CapacityAlertThreshold)\n            ? this.errorThreshold.basedOnTotalSpace\n            : this.errorThreshold;\n   }\n\n   getThresholdTooltipPosition(percentage: number): string {\n      return percentage >= 60 ? \"tooltip-top-left\" : \"tooltip-top-right\";\n   }\n\n   private placeThresholdIcons(): void {\n      if (!this.showAlertThresholds || !this.warningThreshold || !this.errorThreshold ||\n          !this.chart || !this.warningThresholdIcon || !this.errorThresholdIcon) {\n         return;\n      }\n\n      setTimeout(() => {\n          if (this.warningThreshold instanceof CapacityAlertThreshold &&\n              this.errorThreshold instanceof CapacityAlertThreshold) {\n              this.positionTooltipIcon(0, this.warningThresholdIcon, this.warningThresholdValue);\n              this.positionTooltipIcon(1, this.errorThresholdIcon, this.errorThresholdValue);\n              this.cdRef.detectChanges();\n          }\n      }, 0);\n   }\n\n   private positionTooltipIcon(index: number, elRef: ElementRef, thresholdValue: number): void {\n       const iconWidth: number = elRef.nativeElement.offsetWidth;\n       const iconHeight: number = elRef.nativeElement.offsetHeight;\n       this.thresholdsChartContainer.nativeElement.style.marginTop = `${iconHeight}px`;\n       let placement: number = ((this.chart.chartWidth / 100) * thresholdValue) - iconWidth / 2;\n       if (this.plotLines && this.plotLines.length) {\n          const plotLineWidth: number = 2;\n          placement -= plotLineWidth / 2 + index * plotLineWidth;\n       }\n\n       elRef.nativeElement.style.left = `${placement}px`;\n       elRef.nativeElement.style.top = `${-iconHeight}px`;\n   }\n\n   getWarningThresholdLabel(): string {\n      return VsanUiUtils.getString(\"vsan.services.enforcereservation.warningThreshold.label\",\n            (this.warningThreshold as CapacityAlertThreshold).basedOnTotalSpaceWithoutReservation);\n   }\n\n   getErrorThresholdLabel(): string {\n      return VsanUiUtils.getString(\"vsan.services.enforcereservation.errorThreshold.label\",\n            (this.errorThreshold as CapacityAlertThreshold).basedOnTotalSpaceWithoutReservation);\n   }\n}\n","<!--Copyright 2018-2020 VMware, Inc. All rights reserved. -- VMware Confidential-->\n<div class=\"chart-container\">\n   <div #thresholdsChartContainer class=\"thresholds-chart-container\" *ngIf=\"showAlertThresholds; else barChart\">\n      <!-- <a> instead of <clr-signpost> is needed\n           in order to set css styles dynamically in the component\n           if clr-tooltip is used then nativeElement.style is undefined-->\n      <a #warningThresholdIcon\n         role=\"tooltip\"\n         tabindex=\"0\"\n         aria-haspopup=\"true\"\n         class=\"tooltip\"\n         [ngClass]=\"getThresholdTooltipPosition(warningThresholdValue)\">\n         <clr-icon aria-hidden=\"true\"\n                   class=\"is-solid is-warning\"\n                   [attr.shape]=\"Icon.CLR_WARN_STANDARD_ICON_SHAPE\"></clr-icon>\n         <span class=\"tooltip-content\">\n            {{getWarningThresholdLabel()}}\n         </span>\n      </a>\n      <a #errorThresholdIcon\n         tabindex=\"0\"\n         role=\"tooltip\"\n         aria-haspopup=\"true\"\n         class=\"tooltip tooltip-md\"\n         [ngClass]=\"getThresholdTooltipPosition(errorThresholdValue)\">\n         <clr-icon aria-hidden=\"true\"\n                   class=\"is-solid is-error\"\n                   [attr.shape]=\"Icon.CLR_ERROR_STANDARD_ICON_SHAPE\"></clr-icon>\n         <span class=\"tooltip-content\">\n            {{getErrorThresholdLabel()}}\n         </span>\n      </a>\n      <ng-container *ngTemplateOutlet=\"barChart\"></ng-container>\n   </div>\n</div>\n\n<ng-template #barChart>\n   <div #chart [attr.tabindex]=\"enableKeyboardNavigation ? 0 : -1\" class=\"chart\"></div>\n</ng-template>\n"],"sourceRoot":"webpack:///"}