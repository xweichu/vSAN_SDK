{"version":3,"sources":["webpack:///src/app/vsan/common/component/datetime-picker/time-last-field-picker/last-field-date-picker.component.ts","webpack:///src/app/vsan/common/component/datetime-picker/time-last-field-picker/last-field-date-picker-util.ts","webpack:///src/app/vsan/common/component/datetime-picker/time-last-field-picker/last-field-date-picker.html","webpack:///src/app/vsan/common/component/action-button/action-button.module.ts"],"names":["LastFieldDatePickerComponent","maxDays","DEFAULT_MAX_DAYS","DurationPickerState","DateTimeSelectMode","earliestStartTimeErrorKey","dateRangeChange","currentPickerStateChange","DAY_IN_MILLISECONDS","_dateRange","_currentPickerState","value","rangeEndDate","createNoSecondsDate","getTime","LAST_HOUR","currentOptionLabel","getString","HOUR_IN_MILLISECONDS","LAST_DAY","LAST_WEEK","WEEK_IN_MILLISECONDS","LAST_MONTH","MONTH_IN_MILLISECONDS","CUSTOM_RANGE","ALL","maxDaysInMilliseconds","error","emit","currentPickerState","dateRange","pickerState","range","isValid","dateRangeError","isCustomRangeSelected","from","to","currentTime","Date","startTime","endTime","earliestAvailableTimestamp","getEarliestAvailableTimestamp","DAYS_IN_MONTH_DEFAULT","LastFieldDatePickerUtil","timePickerRange","timePickerState","items","result","isEmpty","now","filter","item","timeRange","ActionButtonModule"],"mappings":"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","file":"88-es5.js","sourcesContent":["/* Copyright 2020-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, EventEmitter, Input, OnInit, Output} from \"@angular/core\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {Logger} from \"@util/logger\";\nimport {DateTimeSelectMode} from \"@component/datetime-picker/datetime-picker.component\";\nimport {DateRangeData} from \"@component/datetime-picker/date-range-picker.component\";\nimport {VsanDateTimeUtils} from \"@util/vsan-dateteime-util\";\n\n@Component({\n   selector: \"vsan-last-field-date-picker\",\n   templateUrl: \"last-field-date-picker.html\",\n   styleUrls: [\"last-field-date-picker.scss\"],\n})\nexport class LastFieldDatePickerComponent implements OnInit {\n\n   static readonly DEFAULT_MAX_DAYS: number = VsanDateTimeUtils.DAYS_IN_MONTH_DEFAULT;\n\n   @Input()\n   maxDays: number = LastFieldDatePickerComponent.DEFAULT_MAX_DAYS;\n\n   get maxDaysInMilliseconds(): number {\n      return this.maxDays * VsanDateTimeUtils.DAY_IN_MILLISECONDS;\n   }\n\n   DurationPickerState: typeof DurationPickerState = DurationPickerState;\n   currentOptionLabel: string;\n   dateRangeError: string;\n   DateTimeSelectMode: typeof DateTimeSelectMode = DateTimeSelectMode;\n\n   _dateRange: DateRangeData;\n\n   get dateRange(): DateRangeData {\n      return this._dateRange;\n   }\n\n   private _currentPickerState: DurationPickerState;\n\n   get currentPickerState(): DurationPickerState {\n      return this._currentPickerState;\n   }\n\n   @Input()\n   set currentPickerState(value: DurationPickerState) {\n      if (value == null || this._currentPickerState === value) {\n         return;\n      }\n\n      this._currentPickerState = value;\n      const rangeEndDate: number = VsanDateTimeUtils.createNoSecondsDate().getTime();\n\n      switch (this._currentPickerState) {\n         case DurationPickerState.LAST_HOUR:\n            this.currentOptionLabel = VsanUiUtils.getString(\"vsan.monitor.performance.io.insight.timerange.last.hours\");\n            this._dateRange = new DateRangeData(rangeEndDate - VsanDateTimeUtils.HOUR_IN_MILLISECONDS, rangeEndDate);\n            break;\n         case DurationPickerState.LAST_DAY:\n            this.currentOptionLabel = VsanUiUtils.getString(\"vsan.monitor.performance.io.insight.timerange.last.days\");\n            this._dateRange = new DateRangeData(rangeEndDate - VsanDateTimeUtils.DAY_IN_MILLISECONDS, rangeEndDate);\n            break;\n         case DurationPickerState.LAST_WEEK:\n            this.currentOptionLabel = VsanUiUtils.getString(\"vsan.monitor.performance.io.insight.timerange.last.weeks\");\n            this._dateRange = new DateRangeData(rangeEndDate - VsanDateTimeUtils.WEEK_IN_MILLISECONDS, rangeEndDate);\n            break;\n         case DurationPickerState.LAST_MONTH:\n            this.currentOptionLabel = VsanUiUtils.getString(\"vsan.monitor.performance.io.insight.timerange.last.months\");\n            this._dateRange = new DateRangeData(rangeEndDate - VsanDateTimeUtils.MONTH_IN_MILLISECONDS, rangeEndDate);\n            break;\n         case DurationPickerState.CUSTOM_RANGE:\n            this.currentOptionLabel = VsanUiUtils.getString(\"vsan.perf.chart.timerange.custom\");\n            break;\n         case DurationPickerState.ALL:\n            this.currentOptionLabel = VsanUiUtils.getString(\"vsan.monitor.performance.io.insight.timerange.all\");\n            this._dateRange = new DateRangeData(rangeEndDate - this.maxDaysInMilliseconds, rangeEndDate);\n            break;\n         default:\n            Logger.error(\"Unknown RangePickerState: \" + value);\n      }\n      this.currentPickerStateChange.emit(this.currentPickerState);\n      this.dateRangeChange.emit(this.dateRange);\n   }\n\n   @Input()\n   earliestStartTimeErrorKey: string = \"vsan.monitor.performance.io.insight.timerange.custom.earliestStartTime.error\";\n\n   /**\n    * Triggered as a result of time change because of user interaction\n    */\n   @Output()\n   dateRangeChange: EventEmitter<DateRangeData> = new EventEmitter<DateRangeData>();\n\n   @Output()\n   currentPickerStateChange: EventEmitter<DurationPickerState> = new EventEmitter<DurationPickerState>();\n\n   ngOnInit(): void {\n      if (!this.currentPickerState) {\n         this.currentPickerState = DurationPickerState.ALL;\n      }\n   }\n\n   onTimeOptionClicked(pickerState: DurationPickerState): void {\n      this.currentPickerState = pickerState;\n   }\n\n   onDateRangeChange(range: DateRangeData): void {\n      if (!this.isValid(range)) {\n         return;\n      }\n\n      this.dateRangeChange.emit(range);\n   }\n\n   private isValid(range: DateRangeData): boolean {\n      this.dateRangeError = \"\";\n\n      if (this.isCustomRangeSelected()) {\n         if (!range.from) {\n            this.dateRangeError = VsanUiUtils.getString(\"vsan.perf.chart.timerange.custom.startTime.empty.error\");\n            return;\n         }\n\n         if (!range.to) {\n            this.dateRangeError = VsanUiUtils.getString(\"vsan.perf.chart.timerange.custom.endTime.empty.error\");\n            return;\n         }\n\n         const currentTime: number = new Date().getTime();\n         const startTime: number = range.from;\n         const endTime: number = range.to;\n\n         if (endTime - currentTime > 0) {\n            // The end time can not be greater than the current time.\n            this.dateRangeError = VsanUiUtils.getString(\"vsan.perf.chart.timerange.custom.endTime.error\");\n            return false;\n         } else if (endTime - startTime <= 0) {\n            // The end time should be greater than the start time.\n            this.dateRangeError = VsanUiUtils.getString(\"vsan.perf.chart.timerange.custom.startTime.error\");\n            return false;\n         } else {\n            // more than 'max days' back\n            const earliestAvailableTimestamp: number =\n                  VsanDateTimeUtils.getEarliestAvailableTimestamp(currentTime, this.maxDaysInMilliseconds);\n            if (startTime < earliestAvailableTimestamp) {\n               this.dateRangeError = VsanUiUtils.getString(this.earliestStartTimeErrorKey);\n               return false;\n            } else {\n               return true;\n            }\n         }\n         return true;\n      }\n   }\n\n   isCustomRangeSelected(): boolean {\n      return this.currentPickerState === DurationPickerState.CUSTOM_RANGE;\n   }\n\n   showMonthField(): boolean {\n      return this.maxDays > VsanDateTimeUtils.DAYS_IN_MONTH_DEFAULT;\n   }\n}\n\n/**\n * time range picker states enum to indicate what option is selected\n */\nexport enum DurationPickerState {\n   LAST_HOUR,\n   LAST_DAY,\n   LAST_WEEK,\n   LAST_MONTH,\n   CUSTOM_RANGE,\n   ALL,\n}","/* Copyright 2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {DateRangeData} from \"@component/datetime-picker/date-range-picker.component\";\nimport {DurationPickerState} from \"@component/datetime-picker/time-last-field-picker/last-field-date-picker.component\";\nimport {TimeRange} from \"@generated/time-range\";\n\nexport class LastFieldDatePickerUtil {\n   static filterItemsByTimeRange<T extends {timeRange: TimeRange}>(timePickerRange: DateRangeData,\n         timePickerState: DurationPickerState,\n         items: T[]): T[] {\n      let result: T[];\n      if (VsanUiUtils.isEmpty(items)) {\n         result = [];\n         // Is last field selected (non-custom range)\n      } else if (timePickerRange && timePickerState !== DurationPickerState.CUSTOM_RANGE) {\n         const now: number = new Date().getTime();\n         result = items.filter(item =>\n                               item.timeRange.startTime < now &&\n                               item.timeRange.endTime > timePickerRange.from);\n         // Is custom range selected\n      } else if (timePickerRange && timePickerState === DurationPickerState.CUSTOM_RANGE) {\n         // in case of custom range, use the specified end time\n         result = items.filter(item =>\n                               item.timeRange.startTime < timePickerRange.to &&\n                               item.timeRange.endTime > timePickerRange.from);\n      } else {\n         result = items;\n      }\n      return result;\n   }\n}","<!-- Copyright 2020-2021 VMware, Inc. All rights reserved. -- VMware Confidential -->\n<span class=\"form-label\">{{\"vsan.perf.chart.timerange.label\" | localized}}</span>\n<clr-dropdown>\n   <button class=\"dropdown-toggle btn btn-sm btn-link\" clrDropdownToggle>\n      {{currentOptionLabel}}\n      <clr-icon shape=\"caret down\"></clr-icon>\n   </button>\n   <clr-dropdown-menu clrPosition=\"bottom-left\"\n                      [attr.aria-label]=\"'vsan.perf.chart.timerange.srMessage.dropdownMenu.label' | localized\">\n      <button clrDropdownItem\n              (click)=\"onTimeOptionClicked(DurationPickerState.LAST_HOUR)\">\n         {{\"vsan.monitor.performance.io.insight.timerange.last.hours\" | localized}}\n      </button>\n      <button clrDropdownItem\n              (click)=\"onTimeOptionClicked(DurationPickerState.LAST_DAY)\">\n         {{\"vsan.monitor.performance.io.insight.timerange.last.days\" | localized}}\n      </button>\n      <button clrDropdownItem\n              (click)=\"onTimeOptionClicked(DurationPickerState.LAST_WEEK)\">\n         {{\"vsan.monitor.performance.io.insight.timerange.last.weeks\" | localized}}\n      </button>\n      <button *ngIf=\"showMonthField()\"\n              clrDropdownItem\n              (click)=\"onTimeOptionClicked(DurationPickerState.LAST_MONTH)\">\n         {{\"vsan.monitor.performance.io.insight.timerange.last.months\" | localized}}\n      </button>\n      <button clrDropdownItem\n              (click)=\"onTimeOptionClicked(DurationPickerState.CUSTOM_RANGE)\">\n         {{\"vsan.perf.chart.timerange.custom\" | localized}}\n      </button>\n      <button clrDropdownItem\n              (click)=\"onTimeOptionClicked(DurationPickerState.ALL)\">\n         {{\"vsan.monitor.performance.io.insight.timerange.all\" | localized}}\n      </button>\n   </clr-dropdown-menu>\n</clr-dropdown>\n<vsan-datetime-picker id=\"datetime-input\"\n                      *ngIf=\"isCustomRangeSelected()\"\n                      [datetime]=\"dateRange\"\n                      [errorMessage]=\"dateRangeError\"\n                      [selectMode]=\"DateTimeSelectMode.RANGE\"\n                      (datetimeChange)=\"onDateRangeChange($event)\">\n</vsan-datetime-picker>\n","/* Copyright 2019-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {NgModule} from \"@angular/core\";\nimport {CommonModule} from \"@angular/common\";\nimport {ClarityModule} from \"@clr/angular\";\nimport {ActionButtonSeparatorComponent} from \"@component/action-button/action-button-separator.component\";\nimport {ButtonTitleDirective} from \"@component/action-button/button-title.directive\";\nimport {ButtonGroupDirective} from \"@component/action-button/button-group.directive\";\nimport {ButtonGroupWrapDirective} from \"@component/action-button/button-group-wrap.directive\";\n\n@NgModule({\n   imports: [\n      CommonModule,\n      ClarityModule,\n   ],\n   declarations: [\n      ActionButtonSeparatorComponent,\n      ButtonGroupDirective,\n      ButtonGroupWrapDirective,\n      ButtonTitleDirective,\n   ],\n   exports: [\n      ActionButtonSeparatorComponent,\n      ButtonGroupDirective,\n      ButtonGroupWrapDirective,\n      ButtonTitleDirective,\n   ]\n})\nexport class ActionButtonModule {\n}\n"]}