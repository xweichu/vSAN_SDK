{"version":3,"sources":["webpack:///src/app/vsan/common/component/diskmgmt/claim-disks.component.ts","webpack:///src/app/vsan/common/component/diskmgmt/claim-for-pmem.html","webpack:///src/app/vsan/common/component/diskmgmt/perspective/disks-group-by-perspective.component.ts","webpack:///src/app/vsan/common/component/diskmgmt/disks-capacity-chart.component.ts","webpack:///src/app/vsan/common/component/diskmgmt/claim-for-pmem.component.ts","webpack:///src/app/vsan/common/component/diskmgmt/claim-for-vsan-direct.html","webpack:///src/app/vsan/common/directive/accessibility/refocus-after-change.directive.ts","webpack:///src/app/vsan/common/component/diskmgmt/claim-for-vsan.component.ts","webpack:///src/app/vsan/common/component/diskmgmt/validation-panel.html","webpack:///src/app/vsan/common/component/diskmgmt/model/vsan-disks-transport-type.data.ts","webpack:///src/app/vsan/common/component/diskmgmt/model/vsan-pmem-storage-list-item.ts","webpack:///src/app/vsan/common/component/diskmgmt/model/claim-disks-datagrid-footer-label.ts","webpack:///src/app/vsan/common/component/diskmgmt/model/vendor-map-result.data.ts","webpack:///src/app/vsan/common/component/diskmgmt/claim-for-vsan-max.component.ts","webpack:///src/app/vsan/common/directive/on-modal-escape.directive.ts","webpack:///src/app/vsan/common/component/diskmgmt/model/disks-claiming-config-info.data.ts","webpack:///src/app/vsan/common/component/diskmgmt/model/claim-root-list-item.data.ts","webpack:///src/app/vsan/common/component/diskmgmt/claim-disks.html","webpack:///src/app/generated/vsan-disk-claim-spec.ts","webpack:///src/app/generated/vsan-claim-host-disk-mappings-spec.ts","webpack:///src/app/vsan/common/component/diskmgmt/claim-for-vsan.html","webpack:///src/app/vsan/common/component/diskmgmt/perspective/disks-group-by-perspective.html","webpack:///src/app/vsan/common/component/diskmgmt/claim-for-vsan-direct.component.ts","webpack:///src/app/vsan/common/component/diskmgmt/model/claim-vendor-list-item.data.ts","webpack:///src/app/generated/query-util.ts","webpack:///src/app/vsan/common/component/diskmgmt/model/claim-host-list-item.data.ts","webpack:///src/app/vsan/common/directive/focus-trap.directive.ts","webpack:///src/app/vsan/common/component/diskmgmt/disks-capacity-chart.html","webpack:///src/app/vsan/common/component/diskmgmt/model/claimed-disks-data.ts","webpack:///src/app/vsan/common/component/diskmgmt/claim-for-vsan-max.html","webpack:///src/app/vsan/common/component/diskmgmt/validation-panel.component.ts"],"names":["ClaimDisksComponent","dataService","disksPropertyRetriever","dataAccessService","vsanConfigService","capabilityProvider","DatastoreType","isStandalone","configUpdated","disksClaimingConfigUpdated","configValid","datastoreTypes","isManagedVmfsSupported","allHostsInCluster","disksByVendor","disksClaimingConfigInfo","useRecommendedClaimOptions","clusterRef","contextObject","Promise","all","queryHostDsProperties","isManagedVmfsSupportedOnVc","hostProperties","initializeDisksData","getPropertiesForHosts","pipe","properties","Map","hostKey","property","resourceObject","value","has","set","get","push","toPromise","repa","getPropertiesForRelatedObject","uid","NAME_PROPERTY","HOST_VERSION_PROPERTY","PRIMARY_ICON_ID_PROPERTY","VSAN_HOST_STORAGE_ADAPTER_DEVICES","CLUSTER_HOST_PROPERTY","CLUSTER","getClusterHostsInInitialState","orderDatastoreTypes","getDatastoreTypes","selectedDatastoreType","getInitialSelectedDatastoreType","setInitialState","getDisksByVendor","getHostEligibleDisks","update","hosts","Array","from","Set","concat","map","host","availableDatastoreTypes","isEmpty","VSAN","forEach","hostsClaimingData","disks","hostItem","eligibleDisks","updateParentItemsClaimOption","updateHostsClaimingSummary","updateUsedDisksInfo","emit","getDiskMappings","updateClaimOption","disk","updateDisksData","updateClaimingData","clone","vendors","vendorToDisks","vendorDiskModelDisks","getVendorDisksByDiskModel","model","size","getVendorDisksByDiskType","isFlash","toString","result","diskModel","diskType","diskMappingSpecs","isAllFlashSupported","isAllFlashSupportedOnEveryHost","disksToClaim","getHostDisksToClaim","length","Factory","create","hostMor","allFlashSupported","datastoreType","getLocalizedDatastoreType","srMessage","srMessageType","PAGE_TITLE","DisksGroupByPerspectiveComponent","changePerspective","selectedPerspective","DISKS_BY_VENDOR","perspectives","DISKS_BY_HOST","perspective","getString","DisksCapacityChartComponent","_disksClaiming","capacitySections","getCapacityChartData","totalCapacity","usedOverallCapacity","totalUsedCapacity","getCapacityLabel","labelKey","capacityValue","formatFileSize","localizeNumber","asPercentage","disksClaiming","vsanCapacityChartSection","getLocalizedStorage","ClaimForStorage","getClaimedCapacity","VSAN_CAPACITY_SECTION_ID","VSAN_CAPACITY_SECTION_COLOR","vsanCacheChartSection","ClaimForCache","VSAN_CACHE_SECTION_ID","VSAN_CACHE_SECTION_COLOR","managedByVsanStorageChartSections","MANAGED_BY_VSAN_CLAIM_OPTIONS","filter","claimOption","getManagedByVsanChartId","getManagedByVsanChartColor","VMFS","VMFS_SECTION_ID","PMEM","PMEM_SECTION_ID","SingleTier","VSAN_MAX_SINGLE_TIER_SECTION_ID","VMFS_SECTION_COLOR","PMEM_SECTION_COLOR","ClaimForPmemComponent","isPmemManageableByVsanOnAllHosts","managePmemByVsan","hostIcons","image","eligiblePMemStorage","every","storage","isManageableByVsan","hostVersions","version","DoNotClaim","eligiblePmemStorage","canBeClaimedForPMem","RefocusAfterChangeDirective","el","refWatcher","e","setTimeout","document","body","classList","add","nativeElement","focus","preventDefault","stopPropagation","stopImmediatePropagation","ClaimForVsanComponent","CHILD_FIELD","DisksGroupByPerspective","ClaimDisksUtil","showWarning","claimFor","option","selectedTargets","target","data","getClaimOptions","claimOptions","getEligibleForVsanClaimOptions","Custom","includes","splice","indexOf","localizeClaimOption","getLocalizedClaimOption","hasDriveTypeWarningImage","listData","vendorItem","areAllItemsMarkedTheSame","shouldShowDriveTypeWarning","item","markedAsFlash","getHostIcon","isRoot","HOST","markSelectedItems","markAsFlash","selectedRow","markFlash","markHdd","markSelectedItemsAsFlash","hasSelectedDisksForClaiming","warningTitle","warningText","warningConfirmationHandler","markSelectedItemsAsHdd","disksToClaimFound","find","element","changeClaimOption","event","changeDriveType","changeDriveTypeEvent","FLASH","MARKED_AS_FLASH","HDD","MARKED_AS_HDD","cancelMarkAsAction","driveType","nameFilter","name","driveTypeFilter","driveTypeLabel","totalCapacityFilter","capacity","hostNameFilter","hostName","transportTypeFilter","transportType","diskAdapterFilter","diskAdapter","multipleSelection","selectionChangeHandler","selectionChange","datagridLoading","footerLabel","datagrid","possibleClaimOptions","co","VSAN_DIRECT_CLAIM_OPTIONS","getNameColumnTitle","VsanDisksTransportTypeData","_deviceTransportMap","_deviceAdapterMap","deviceData","deviceLun","underlyingLun","deviceUuid","uuid","transport","adapter","hasOwnProperty","VsanPmemStorageListItem","_claimOption","capacityNum","newClaimOption","localizeMountedState","diskStatus","isDiskHealthy","getHealth","isHealthy","CLR_SUCCESS_STANDARD_ICON_SHAPE","CLR_ERROR_STANDARD_ICON_SHAPE","clrIconShapeClassMap","healthIconShape","ClaimDisksDatagridFooterLabel","disksByHost","groupByHostLabel","getHostsPerspectiveLabel","groupByVendorLabel","getVendorPerspectiveLabel","hostsInCluster","reduce","total","eligibleDisksInDatastoreContext","hostsWithEligibleDisks","vendor","vendorsWithEligibleDisks","VendorMapResult","keys","models","items","hasDisks","ssdVendorItem","getDisks","nonSsdVendorItem","ClaimForVsanMaxComponent","ClaimOption","isVsanMaxCompatibleFilter","getIsVsanMaxCompatibleLabel","groupByPerspective","checked","undefined","getIsVsanMaxCompatible","CLR_SUCCESS_ICON_CLASS","CLR_WARN_ICON_CLASS","CLR_WARN_STANDARD_ICON_SHAPE","isVsanMaxCompatible","OnModalEscapeDirective","onEscape","DisksClaimingConfigInfo","resetAllFields","oldClaimedCapacity","claimedCapacity","oldClaimedCache","claimedCache","oldUnclaimedStorage","unclaimedStorage","initializeHostManagedByVsanSummary","hostsClaimData","setClaimingToInitialState","resetValidationResult","newClaimedCapacity","capacityFor","newClaimedCache","newUnclaimedStorage","getManagedByVsanClaimedSpace","addDisksToManagedByVsanClaimOptions","claimAllFlash","claimedDisksData","getManagedByVsanClaimOptionSummary","sum","claimedDisksSummary","claimedDisk","mixedDiskClaiming","disksNotEquallySpread","getOldClaimedCapacity","newClaimedDisksCount","resetClaimedDisksInManagedByVsanSummary","hostClaimOptionSummary","getClaimOptionSummary","oldClaimedDisksCount","summary","ClaimRootListItem","contextDatastoreType","_capacityNum","_eligibleDisks","getUpdatedClaimOption","newValue","updateChildrenClaimOption","isDiskEligible","isClaimedForVsanDirect","VSAN_CLAIM_OPTIONS","VSAN_DIRECT","isClaimedForVsan","isClaimedForOtherDsType","validDsTypeClaimOptions","isNotClaimedForOtherDsType","canBeClaimedForThatDsType","some","VsanDiskClaimSpec","VsanClaimHostDiskMappingsSpec","hostRef","ClaimForVsanDirectComponent","ClaimVendorListItem","_name","getFirstEligibleItem","newName","isClaimForStorageAvailable","isClaimForCacheAvailable","isClaimForVMFSAvailable","isDoNotClaimAvailable","types","possibleDriveTypes","CUSTOM","_capacity","lbaToBytes","getLocalizedDriveType","isHdd","getVendorHostLabel","markedAsSsd","areAllTheSame","disksPerHosts","getDisksPerHosts","isMixedMode","getHeterogeneousDistributionLabel","getHomogeneousDistributionLabel","values","val","i","arr","numOfHosts","numDisksPerHost","next","getHomogeneousDistributionLabelKey","QueryUtil","VC_CLUSTERS_PROPERTY","SERVER_GUID_PROPERTY","CLUSTER_PROPERTY","VM_PROPERTY","HAS_PRIVILEGES","VM_COUNT_PROPERTY","RESOURCE_POOL_PROPERTY","RESOURCE_POOL_OWNER_PROPERTY","DATASTORE_PROPERTY","CLUSTER_HOST_COUNT_PROPERTY","HOST_VSAN_NODE_UUID_PROPERTY","HOST_CONNECTION_STATE_PROPERTY","HOST_MAINTENANCE_MODE_PROPERTY","HOST_QUARANTINE_MODE_PROPERTY","HOST_VSAN_RUNTIME_INFO","WITNESS_HOST_RELATION","IS_WITNESS_HOST_PROPERTY","IS_WITNESS_VLCM_PROPERTY","ALL_VSAN_HOSTS_RELATION","VSAN_PHYSICAL_DISK_VIRTUAL_MAPPING","VM_DEVICES_PROPERTY","VM_NAMESPACE_CAPABILITY_METADATA","VM_PATH_NAME","VM_HOST","VM_VSAN_NODE_UUID_PROPERTY","VSAN_ENABLED_PROPERTY","HOST_VSAN_CONFIG_PROPERTY","HOST_VSAN_ENABLED_PROPERTY","VSAN_DISK_VERSION_PROPERTY_NAME","CLUSTER_VSAN_CONFIG_UUID_PROPERTY","CLUSTER_HA_ENABLED_PROPERTY","CLUSTER_DPM_ENABLED_PROPERTY","CLUSTER_DRS_ENABLED","VM_STORAGE_OBJECT_ID_PROPERTY","IS_POD_VM","DATASTORE_TYPE_PROPERTY","DATASTORE_URL","DATACENTER_RELATION","DATASTORE_HOST_MOUNTS","DATASTORE_SUMMARY","DATASTORE_SUMMARY_CAPACITY","DATASTORE_SUMMARY_FREE_SPACE","DATASTORE_CONTAINER_ID","DATASTORE_SERVER_HOSTS","PREFERRED_FD_PROPERTY","HOST_FAULT_DOMAIN","VM_IS_TEMPLATE","VM_POWER_STATE","VM_SWAP_STORAGE_OBJECT_ID","WCP_NAMESPACE","TANZU_KUBERNETES_CLUSTER","PARENT_PROPERTY","VIRTUAL_NIC_PROPERTY","HOST_PNIC","HOST_PORTGROUP","HOST_PROXY_SWITCH","HOST_OPAQUE_NETWORK","HOST_OPAQUE_SWITCH","NETWORK_PROPERTY","ACTIVE_UPLINK_PORT_PROPERTY","DISTRIBUTED_VIRTUAL_SWITCH_PROPERTY","HOST_VSANCONFIG_DISK_MAPPING_PROPERTY","VSAN_HOST_CONFIG_NETWORKINFO_PORT_PROPERTY","PMEM_STORAGE_UUID","PMEM_STORAGE_STATUS","IS_CLUSTER_VM_PROPERTY","ClaimHostListItem","claimingData","_numberSsdDisks","_numberDataDisks","_allFlashDiskGroupExist","_numSelectedCacheDisks","_numSelectedSsdDataDisks","_numSelectedHddDataDisks","_isValidConfiguration","_claimedCapacity","_claimedCache","_hybridDiskGroupExist","_isAllFlashSupported","propertyName","type","serverGuid","updateAllEligibleDisksHostName","primaryIconId","transportTypeData","storageAdapterDevices","deviceTransportData","setClaimingData","_hostMor","_infoText","_claimedDisksSummary","notInUseDisks","diskData","diskItem","isAllFlashAvailable","numNotInUseDataDisks","numNotInUseSsdDisks","hybridDiskGroupExist","allFlashDiskGroupExist","notInUsePmemStorage","initializeManagedByVsanSummary","populateDisksTransportType","populateInfoText","_deviceTransportData","getDeviceTransport","diskUuid","getDeviceAdapter","HOST_ERROR","numSelectedCacheDisks","numSelectedStorageHDDs","numSelectedStorageSSDs","retrieveConfigErrorTextInt","hybridSelection","numSelectedDataDisks","addDiskToManagedByVsanClaimOption","diskGroupExistText","diskSpecs","pmemStorage","isEligibleForVsan","isEligibleForVsanDirect","isEligibleForPmem","newSummary","claimedDisksCount","FocusTrapDirective","focusTrap","focusInitialElement","ClaimedDisksData","ValidationPanelComponent","spaceEfficiencyService","noSelectionIsError","isConfigAcceptable","vsanErrors","vsanWarnings","issuesListOpened","openIssueActionLink","label","action","validate","hostsData","vsanConfigSpec","validateAndFillErrorsAndWarnings","hasErrors","validateDiskClaiming","validateHostConfigs","validateEligibleDisks","isVsanMaxEnabled","validateVsanMaxDiskClaiming","numStorageSSDs","numStorageHDDs","numCacheSSDs","numManagedByVsanDisks","hasMixedStorageDisks","numSelectedManagedByVsanDisks","noDisksAreSelected","hasStorageHDDs","claims","getHostsClaimingOverview","isOnlyAllFlashSupportedForClaimingDisks","spaceEfficiencyConfig","toLabel","errorText","retrieveConfigErrorText","firstItem","hasEligibleDisks","numSelectedDisksPerHost","numSelectedDisks","numSelectedDiskGroups","createGroup","isCreateGroupOperation","editGroup","isEditGroupOperation","hasIncompatibleVsanMaxDisks"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAkCO;AAAA,YAAMA,mBAAN;AAiDJ,uCAAoBC,WAApB,EACcC,sBADd,EAEcC,iBAFd,EAGcC,iBAHd,EAIcC,kBAJd,EAI0D;AAAA;;AAJtC,iBAAAJ,WAAA,GAAAA,WAAA;AACN,iBAAAC,sBAAA,GAAAA,sBAAA;AACA,iBAAAC,iBAAA,GAAAA,iBAAA;AACA,iBAAAC,iBAAA,GAAAA,iBAAA;AACA,iBAAAC,kBAAA,GAAAA,kBAAA;AApDd,iBAAAC,aAAA,GAAsC,uEAAtC;AAKA;;;;AAIA,iBAAAC,YAAA,GAAwB,IAAxB;AAeA,iBAAAC,aAAA,GAA+D,IAAI,0DAAJ,EAA/D;AAGA,iBAAAC,0BAAA,GAAoE,IAAI,0DAAJ,EAApE;AAGA,iBAAAC,WAAA,GAAqC,IAAI,0DAAJ,EAArC;AASA,iBAAAC,cAAA,GAAkC,EAAlC;AAEA,iBAAAC,sBAAA,GAAkC,KAAlC;AACA,iBAAAC,iBAAA,GAAyC,EAAzC;AACA,iBAAAC,aAAA,GAAuC,EAAvC;AACA,iBAAAC,uBAAA,GAAmD,IAAI,iHAAJ,EAAnD;AAEA,iBAAAC,0BAAA,GAAsC,IAAtC;AAOC;;AAtDG;AAAA;AAAA,mBA4DE,oBAAQ;;;;;;;;AACX,6BAAKC,UAAL,GAAkB,KAAKA,UAAL,IAAmB,uEAAcC,aAAnD;;AAEqD,+BAAMC,OAAO,CAACC,GAAR,CAAY,CACpE,KAAKC,qBAAL,EADoE,EAEpE,KAAKhB,kBAAL,CAAwBiB,0BAAxB,CAAmD,KAAKL,UAAxD,CAFoE,CAAZ,CAAN;;;;;AAApD,6BAAKM,c;AAAgB,6BAAKX,sB;AAI3B,6BAAKY,mBAAL;;;;;;;;;AACF;AApEG;AAAA;AAAA,mBAsEI,iCAAqB;AAC1B,qBAAO,KAAKC,qBAAL,GACAC,IADA,CACK,4DAAI,UAACC,UAAD,EAAqC;AAC5C;AACA,oBAAMJ,cAAc,GAAuB,IAAIK,GAAJ,EAA3C;AACA,oBAAIC,OAAO,GAAW,IAAtB;;AAH4C,2DAKrBF,UALqB;AAAA;;AAAA;AAK5C,sEAAmC;AAAA,wBAAxBG,QAAwB;;AAChC,wBAAI,CAACA,QAAQ,CAACC,cAAd,EAA8B;AAC3B;AACF;;AACDF,2BAAO,GAAGC,QAAQ,CAACC,cAAT,CAAwBC,KAAlC;;AACA,wBAAI,CAACT,cAAc,CAACU,GAAf,CAAmBJ,OAAnB,CAAL,EAAkC;AAC/BN,oCAAc,CAACW,GAAf,CAAmBL,OAAnB,EAA4B,EAA5B;AACF;;AAEDN,kCAAc,CAACY,GAAf,CAAmBN,OAAnB,EAA4BO,IAA5B,CAAiCN,QAAjC;AACF;AAf2C;AAAA;AAAA;AAAA;AAAA;;AAgB5C,uBAAOP,cAAP;AACF,eAjBK,CADL,EAkBGc,SAlBH,EAAP;AAmBF;AA1FG;AAAA;AAAA,mBA4FI,iCAAqB;AAC1B,kBAAI,6DAAYC,IAAhB,EAAsB;AACnB,uBAAO,mDAAsB,KAAKpC,sBAAL,CAA4BuB,qBAA5B,CAAkD,KAAKR,UAAvD,CAAtB,CAAP;AACF,eAFD,MAEO;AACJ;AACA,uBAAO,KAAKd,iBAAL,CAAuBoC,6BAAvB,CACD,uEAAcC,GAAd,CAAkB,KAAKvB,UAAvB,CADC,EAED,CACG,gEAAUwB,aAAV,EADH,EAEG,gEAAUC,qBAAV,EAFH,EAGG,gEAAUC,wBAAV,EAHH,EAIG,gEAAUC,iCAAV,EAJH,CAFC,EAQD,gEAAUC,qBAAV,EARC,EASD,4EAAmBC,OATlB,CAAP;AAUF;AACH;AA5GG;AAAA;AAAA,mBA8GI,+BAAmB;AACxB,mBAAKjC,iBAAL,GAAyB,KAAKkC,6BAAL,EAAzB;AACA,mBAAKpC,cAAL,GAAsB,mEAAaqC,mBAAb,CAAiC,KAAKC,iBAAL,CAAuB,KAAKpC,iBAA5B,CAAjC,CAAtB;AACA,mBAAKqC,qBAAL,GAA6B,KAAKC,+BAAL,CAAqC,KAAKxC,cAA1C,CAA7B;AACA,mBAAKI,uBAAL,CAA6BqC,eAA7B,CAA6C,KAAKvC,iBAAlD;AACA,mBAAKC,aAAL,GAAqB,KAAKuC,gBAAL,CAAsB,KAAKC,oBAAL,EAAtB,CAArB;AACA,mBAAKC,MAAL;AACF;AArHG;AAAA;AAAA,mBAuHI,2BAAkBC,KAAlB,EAA4C;AAAA;;AACjD,qBAAOC,KAAK,CAACC,IAAN,CAAW,IAAIC,GAAJ,CAAQ,YAAGC,MAAH,gCAAaJ,KAAK,CAACK,GAAN,CAAU,UAAAC,IAAI;AAAA,uBAAIA,IAAI,CAACC,uBAAT;AAAA,eAAd,CAAb,EAAR,CAAX,CAAP;AACF;AAzHG;AAAA;AAAA,mBA2HI,yCAAgCpD,cAAhC,EAA+D;AACpE,qBAAO,CAAC,6DAAYqD,OAAZ,CAAoBrD,cAApB,CAAD,GACCA,cAAc,CAAC,CAAD,CADf,GAEC,wEAAcsD,IAFtB;AAGF;AA/HG;AAAA;AAAA,mBAiII,yCAA6B;AAAA;;AAClC,kBAAMpD,iBAAiB,GAAwB,EAA/C;AAEA,mBAAKU,cAAL,CAAoB2C,OAApB,CAA4B,UAAC3C,cAAD,EAAwBM,OAAxB,EAA4C;AACrEhB,iCAAiB,CAACuB,IAAlB,CAAuB,IAAI,qGAAJ,CACjBb,cADiB,EAEjB,KAAI,CAAC4C,iBAAL,CAAuBhC,GAAvB,CAA2BN,OAA3B,CAFiB,EAGjB,KAAI,CAACb,0BAHY,CAAvB;AAIF,eALD;AAOA,qBAAOH,iBAAP;AACF;AA5IG;AAAA;AAAA,mBA8II,gCAAoB;AACzB,kBAAIuD,KAAK,GAAuB,EAAhC;;AADyB,0DAGF,KAAKvD,iBAHH;AAAA;;AAAA;AAGzB,uEAA+C;AAAA,sBAApCwD,QAAoC;;AAC5C,sBAAIA,QAAQ,CAACC,aAAb,EAA4B;AACzBF,yBAAK,GAAGA,KAAK,CAACR,MAAN,CAAaS,QAAQ,CAACC,aAAtB,CAAR;AACF;AACH;AAPwB;AAAA;AAAA;AAAA;AAAA;;AASzB,qBAAOF,KAAP;AACF;AAxJG;AAAA;AAAA,mBA0JJ,kBAAM;AACH,mBAAKG,4BAAL;AACA,mBAAKC,0BAAL;AACA,mBAAKC,mBAAL;AACA,mBAAKjE,aAAL,CAAmBkE,IAAnB,CAAwB,KAAKC,eAAL,EAAxB;AACF;AA/JG;AAAA;AAAA,mBAiKJ,wCAA4B;AAAA,0DACN,KAAK9D,iBADC;AAAA;;AAAA;AACzB,uEAA2C;AAAA,sBAAhCiD,IAAgC;AACxCA,sBAAI,CAACc,iBAAL,CAAuB,KAAK1B,qBAA5B;AACF;AAHwB;AAAA;AAAA;AAAA;AAAA;;AAAA,0DAKN,KAAKpC,aALC;AAAA;;AAAA;AAKzB,uEAAuC;AAAA,sBAA5B+D,IAA4B;AACpCA,sBAAI,CAACD,iBAAL,CAAuB,KAAK1B,qBAA5B;AACF;AAPwB;AAAA;AAAA;AAAA;AAAA;AAQ3B;AAzKG;AAAA;AAAA,mBA2KJ,sCAA0B;AAAA,0DACJ,KAAKrC,iBADD;AAAA;;AAAA;AACvB,uEAA2C;AAAA,sBAAhCiD,IAAgC;AACxCA,sBAAI,CAACgB,eAAL;AACF;AAHsB;AAAA;AAAA;AAAA;AAAA;AAIzB;AA/KG;AAAA;AAAA,mBAiLJ,+BAAmB;AAChB,mBAAK/D,uBAAL,CAA6BgE,kBAA7B,CAAgD,KAAKlE,iBAArD;AACA,mBAAKE,uBAAL,GAA+B,KAAKA,uBAAL,CAA6BiE,KAA7B,EAA/B;AACA,mBAAKvE,0BAAL,CAAgCiE,IAAhC,CAAqC,KAAK3D,uBAA1C;AACF;AArLG;AAAA;AAAA,mBAuLI,0BAAiBqD,KAAjB,EAA0C;AAAA;;AAC/C,kBAAI,6DAAYJ,OAAZ,CAAoBI,KAApB,CAAJ,EAAgC;AAC7B,uBAAO,EAAP;AACF;;AAED,kBAAMa,OAAO,GAAa,EAA1B;AACA,kBAAMC,aAAa,GACb,IAAItD,GAAJ,EADN;AAGAwC,mBAAK,CAACF,OAAN,CAAc,UAAAW,IAAI,EAAI;AACnB,oBAAI,CAACA,IAAL,EAAW;AACR;AACF;;AAED,oBAAMM,oBAAoB,GACpB,MAAI,CAACC,yBAAL,CAA+BF,aAA/B,EAA8CL,IAAI,CAACQ,KAAnD,CADN;;AAGA,oBAAIF,oBAAoB,CAACG,IAArB,KAA8B,CAAlC,EAAqC;AAClCL,yBAAO,CAAC7C,IAAR,CAAayC,IAAI,CAACQ,KAAlB;AACF;;AAED,sBAAI,CAACE,wBAAL,CAA8BJ,oBAA9B,EAAoDN,IAAI,CAACW,OAAL,CAAaC,QAAb,EAApD,EAA6ErD,IAA7E,CAAkFyC,IAAlF;AACF,eAbD;AAeA,qBAAO,IAAI,gGAAJ,CAAoBI,OAApB,EAA6BC,aAA7B,EAA4CQ,MAAnD;AACF;AAhNG;AAAA;AAAA,mBAkNI,mCACFR,aADE,EAEFS,SAFE,EAEe;AACpB,kBAAI,CAACT,aAAa,CAACjD,GAAd,CAAkB0D,SAAlB,CAAL,EAAmC;AAChCT,6BAAa,CAAChD,GAAd,CAAkByD,SAAlB,EAA6B,IAAI/D,GAAJ,EAA7B;AACF;;AACD,qBAAOsD,aAAa,CAAC/C,GAAd,CAAkBwD,SAAlB,CAAP;AACF;AAzNG;AAAA;AAAA,mBA2NI,kCACFR,oBADE,EAEFS,QAFE,EAEc;AACnB,kBAAI,CAACT,oBAAoB,CAAClD,GAArB,CAAyB2D,QAAzB,CAAL,EAAyC;AACtCT,oCAAoB,CAACjD,GAArB,CAAyB0D,QAAzB,EAAmC,EAAnC;AACF;;AACD,qBAAOT,oBAAoB,CAAChD,GAArB,CAAyByD,QAAzB,CAAP;AACF;AAlOG;AAAA;AAAA,mBAoOI,2BAAe;AAAA;;AACpB,kBAAMC,gBAAgB,GAAoC,EAA1D;AACA,kBAAMC,mBAAmB,GAAY,KAAKC,8BAAL,EAArC;AAEA,mBAAKlF,iBAAL,CAAuBqD,OAAvB,CAA+B,UAACJ,IAAD,EAAU;AACtC,oBAAMkC,YAAY,GAAwBlC,IAAI,CAACmC,mBAAL,EAA1C;;AACA,oBAAID,YAAY,CAACE,MAAb,KAAwB,CAA5B,EAA+B;AAC5BL,kCAAgB,CAACzD,IAAjB,CACM,4GAA8B+D,OAA9B,CAAsCC,MAAtC,CACM,MAAI,CAACnF,UADX,EAEM6C,IAAI,CAACuC,OAFX,EAGML,YAHN,EAIMF,mBAJN,CADN;AAMF;AACH,eAVD;AAYA,qBAAOD,gBAAP;AACF;AArPG;AAAA;AAAA,mBAuPI,0CAA8B;AACnC,kBAAIS,iBAAiB,GAAY,IAAjC;;AADmC,0DAEhB,KAAKzF,iBAFW;AAAA;;AAAA;AAEnC,uEAA2C;AAAA,sBAAhCiD,IAAgC;AACxCwC,mCAAiB,GAAGA,iBAAiB,IAAIxC,IAAI,CAACgC,mBAA9C;AACF;AAJkC;AAAA;AAAA;AAAA;AAAA;;AAKnC,qBAAOQ,iBAAP;AACF;AA7PG;AAAA;AAAA,mBA+PJ,+BAAsBC,aAAtB,EAAkD;AAC/C,qBAAO,mEAAaC,yBAAb,CAAuCD,aAAvC,CAAP;AACF;AAjQG;AAAA;AAAA,mBAmQJ,6BAAoBA,aAApB,EAAgD;AAC7C,mBAAKrD,qBAAL,GAA6BqD,aAA7B;AACA,mBAAKhD,MAAL;AACF;AAtQG;;AAAA;AAAA;;AAkCJ,kEADC,qGACD,E,gFAAA,G,6BAAA,E,SAAA,E,MAAA;AAGA,kEADC,4FACD,E,+EAAA,G,6BAAA,E,cAAA,E,MAAA;AAuBA,kEAJC,+EAAO;AACLkD,mBAAS,EAAE,qCADN;AAELC,uBAAa,EAAE,wFAAcC;AAFxB,SAAP,CAID,E,iFAAA,E,iFAAA,E,sFAAA,G,6BAAA,E,UAAA,E,IAAA;;OA5DI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;uEC/BP,uW,GAAA;AAAA;AAAA;AAAA;AAAA,gB,EAIiB,wD,GAA0D,4E,IAC3E;AAHiB;;AAEA;;AADA;;AAHjB,wBAEiB,SAFjB,EAIiB,SAJjB,EAGiB,SAHjB;AAGqC,S,EAAA,I;AAAA;;;uEAIrC,mW,GAAA;AAAA;AAAA;AAAA;AAAA,gB,EAIiB,wD,GAAmD,4E,IACpE;AAHiB;;AAEA;;AADA;;AAHjB,wBAEiB,SAFjB,EAIiB,SAJjB,EAGiB,SAHjB;AAGqC,S,EAAA,I;AAAA;;;uEAmBlC,4b,GAAA,8M,EAAA,uY,EAAA,iV,EAAA;AAAA;AAAA,gB,EAAA;AAAA;AAAA,U,EAAA,iU,EAAA,sK,EAAA,6gB,GAA+G,uF,GAAA,yD,GAE/G,4E,IAAA;AAFyD;;AAAzD,wBAAyD,SAAzD;AAAqF,S,EAAA;AAArF;;AAAA;;AAAA;;AAA+G;;AAAA;AAE/G,S;AAAA;;;uEAmBG,ma,GAAA,uN,EAAA;AAAA;AAAA,U,EAAA,oU,GAAuD,6F,IAEvD,4E,IAAA;AAFA;AAAA,S,EAAA;AAAA;AAAA;AAAA;;AAAA;;AAAuD;;AAAA;AAEvD,S;AAAA;;;uEAPH,6a,GAAA,yK,EAAA,sL,EAAA,qK,EAAA;AAAA;AAAA,gB,EAAA;AAAA;AAAA,U,EAAA,gN,EAAA;AAAA;AAAA,U,EAAA,wV,EAAA,wV,GAAmF,kF,IAChF,wgB,GAAA,wN,EAAA;AAAA;AAAA,U,EAAA,qU,EAAA,wN,EAAA,sf,GAA6B,kF,IAC1B,wI,GAAA,qJ,EAAA,+O,GAAyE,8F,IAE9D,kF,IACd,oH,GAAA;AAAA;AAAA,gB,GAEc,kF,IACd,ugB,GAAA,wN,EAAA;AAAA;AAAA,U,EAAA,qU,EAAA,wN,EAAA,sf,GAA6B,8F,IAEf,kF,IACd,ia,GAAA,wN,EAAA;AAAA;AAAA,U,EAAA,qU,GAAa,8F,IAEC,kF,IACd,wgB,GAAA,wN,EAAA;AAAA;AAAA,U,EAAA,qU,EAAA,wN,EAAA,sf,GAA6B,kF,IAC1B,sM,GAAA;AAAA;AAAA;AAAA,gB,EAAA,qJ,EAAA,+O,GAI8C,qF,IACnC,8F,IAEA,kF,IACd,ia,GAAA,wN,EAAA;AAAA;AAAA,U,EAAA,qU,GAAa,8F,IAEC,+E,IACjB,4E,IAAA;AAAA;AA1B6D,4BAAqB,QAArB,CAAqB,SAArB;;AAA7D,wBAA6D,SAA7D;;AACG;;AAAA;;AAIa,+BAAyC,iCAAzC;;AAAb,yBAAa,UAAb;;AAGA;;AAAA;;AAGA;;AAGA;;AAAA;;AAGa;AAEA,6BAAmC,QAAnC,CAAmC,SAAnC,CAAmC,eAAnC;;AAJV,yBAEU,UAFV,EAIU,UAJV;;AAQH;AAAa,S,EAAA;AAAA;AAvBhB;;AAAA;;AAAA;;AAAA;;AACG;AAAA;AAAA;AAAA;AAAA;;AAAA;;AACa,8CAAmD,QAAnD,CAAmD,SAAnD,CAAmD,OAAnD,CAAmD,KAAnD;;AAAV,yBAAU,SAAV;;AAAyE;;AAAA;;AAM5E;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAA6B;;AAAA;;AAG7B;AAAA;;AAAA;;AAAa;;AAAA;;AAGb;AAAA;AAAA;AAAA;AAAA;;AAAA;;AACa,6BAAsC,QAAtC,CAAsC,SAAtC,CAAsC,eAAtC;;AAAV,yBAAU,UAAV;;AAKW;;AAAA;;AAGd;AAAA;;AAAA;;AAAa;;AAAA;AAEb,S;AAAA;;;4MAzEuD,4E,IAC7D,iJ,IAA0B,6E,GAAA,wD,GAAkD,8E,IAE5E,uH,GAAA;AAAA;AAAA,gB,GAKkB,8E,IAElB,uH,GAAA;AAAA;AAAA,gB,GAKkB,8E,IAElB,yZ,GAAA,wL,EAAA,8M,EAAA;AAAA;AAAA,U,EAAA,qK,GAAsB,+E,IACnB;AAAA;AAAA;;AAAA;;;;;;;;;;;;;;;AAIO;;;;;AACA;;;;;AALP;AAAA,sB,GAAA,qR,EAAA;AAAA;AAAA,0F,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA,U,EAAA,0L,EAAA,qN,EAAA,qc,EAAA;AAAA;AAAA,gB,GAKmC,+E,IACnC,0M,GAAA,ua,GAAwG,8E,GAAA,yD,GAA4D,4E,IAChJ,8E,IAEvB,8X,GAAA,qK,EAAA,qK,EAAA,qN,EAAA,uQ,EAAA,qN,EAAA,yT,EAAA,qK,EAAA,qN,EAAA,6T,EAAA,qK,EAAA,2W,EAAA,wN,EAAA,oK,EAAA,4zB,EAAA;AAAA;AAAA,U,EAAA;AAAA;AAAA,U,EAAA;AAAA;AAAA,U,EAAA;AAAA;AAAA,U,EAAA,8N,EAAA,8N,EAAA,qK,EAAA,8mB,EAAA;AAAA;AAAA,U,EAAA;AAAA;AAAA,U,EAAA,4J,EAAA,yV,EAAA,yV,GAAc,+E,IACa,+E,IACxB,6b,GAAA,8M,EAAA,uY,EAAA,iV,EAAA;AAAA;AAAA,gB,EAAA;AAAA;AAAA,U,EAAA,iU,EAAA,sK,EAAA,8gB,GAAkE,wF,GAAA,yD,GAElD,+E,IAChB,uH,GAAA;AAAA;AAAA,gB,GAEgB,+E,IAChB,gc,GAAA,8M,EAAA,uY,EAAA,iV,EAAA;AAAA;AAAA,gB,EAAA;AAAA;AAAA,U,EAAA,iU,EAAA,sK,EAAA,8gB,GAAiE,wF,GAAA,yD,GAEjD,+E,IAChB,8Z,GAAA,8M,EAAA,uY,EAAA,iV,EAAA;AAAA;AAAA,gB,EAAA;AAAA;AAAA,U,EAAA,iU,EAAA,sK,EAAA,8gB,GAAyC,wF,GAAA,0D,GAEzB,+E,IAChB,+Z,GAAA,8M,EAAA,uY,EAAA,iV,EAAA;AAAA;AAAA,gB,EAAA;AAAA;AAAA,U,EAAA,iU,EAAA,sK,EAAA,+gB,GAA6C,yF,GAAA,0D,GAE7B,+E,IAChB,+Z,GAAA,8M,EAAA,uY,EAAA,iV,EAAA;AAAA;AAAA,gB,EAAA;AAAA;AAAA,U,EAAA,iU,EAAA,sK,EAAA,+gB,GAAsC,yF,GAAA,0D,GAEtB,+E,IACS,+E,IACzB,uH,GAAA;AAAA;AAAA,gB,GA0Ba,4E,IACD,4E,IACf;AAAA;AAxEiB,8BAAyC,iCAAzC;;AADjB,wBACiB,SADjB;;AAQiB,6BAAwC,iCAAxC;;AADjB,yBACiB,SADjB;;AAOA;;AACU;AAIA,8BAA8B,iBAA9B;;AAJP,yBAAO,UAAP,EAIO,UAJP;;AAAA;;AAGO,+BAA+D,iCAA/D;;AAHP,yBAGO,UAHP;;AAMA;;AAKe;;AAAf,yBAAe,UAAf;;AAGe,+BAAyC,iCAAzC;;AAAf,yBAAe,UAAf;;AAGe;;AAAf,yBAAe,UAAf;;AAGe;;AAAf,yBAAe,UAAf;;AAGe;;AAAf,0BAAe,UAAf;;AAGe;;AAAf,0BAAe,UAAf;;AAIY,8BAAgD,oBAAhD;;AAAZ,0BAAY,UAAZ;AAA4D,S,EAAA;AAAA;;AA/CrC;;AAAA;;AAgB1B;;AAAA;;AAAA;;AACG;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAMO,+BAA0D,iCAA1D;;AAAP;;AAAA,yBAAO,UAAP;;AAAwG;;AAAA;;AAG3G;;AAAA;;AAAA;;AAEG;;AAAA;;AAAA;;AAAkE;;AAAA;;AAMlE;;AAAA;;AAAA;;AAAiE;;AAAA;;AAGjE;;AAAA;;AAAA;;AAAyC;;AAAA;;AAGzC;;AAAA;;AAAA;;AAA6C;;AAAA;;AAG7C;;AAAA;;AAAA;;AAAsC;;AAAA;AAEtC,S;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC9CH;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;UAUaC,gC;AALb;AAAA;;AAQG,eAAAC,iBAAA,GAA2D,IAAI,0DAAJ,EAA3D;AAEA,eAAAC,mBAAA,GAA+C,mHAAwBC,eAAvE;AACA,eAAAC,YAAA,GAA0C,CACpC,mHAAwBD,eADY,EAEpC,mHAAwBE,aAFY,CAA1C;AAmBF;;;;iBAdE,oBAAQ;AACL,iBAAKJ,iBAAL,CAAuBnC,IAAvB,CAA4B,KAAKoC,mBAAjC;AACF;;;iBAED,6BAAoBI,WAApB,EAAwD;AACrD,oBAAQA,WAAR;AACG,mBAAK,mHAAwBH,eAA7B;AACG,uBAAO,4DAAYI,SAAZ,CAAsB,qDAAtB,CAAP;;AACH,mBAAK,mHAAwBF,aAA7B;AACG,uBAAO,4DAAYE,SAAZ,CAAsB,mDAAtB,CAAP;;AACH;AACG,uBAAO,EAAP;AANN;AAQF;;;;;;;;;;;;;;;;;;;;;AC/BJ;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAWO;AAAA,YAAMC,2BAAN;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,iBAgCJ,eAAiB;AACd,qBAAO,KAAKC,cAAZ;AACF,aAlCG;AAAA,iBAmBJ,aACkBrF,KADlB,EACkD;AAC/C,mBAAKqF,cAAL,GAAsBrF,KAAtB;;AAEA,kBAAI,CAAC,KAAKqF,cAAV,EAA0B;AACvB;AACF;;AAED,mBAAKC,gBAAL,GAAwB,KAAKC,oBAAL,CAA0B,KAAKF,cAA/B,CAAxB;AACA,mBAAKG,aAAL,GAAqB,KAAKH,cAAL,CAAoBG,aAApB,EAArB;AACA,mBAAKC,mBAAL,GAA2B,KAAKJ,cAAL,CAAoBK,iBAApB,EAA3B;AACF;AA9BG;AAAA;AAAA,iBAoCJ,eAAqB;AAClB,qBAAO,KAAKC,gBAAL,CAAsB,8CAAtB,EAAsE,KAAKF,mBAA3E,CAAP;AACF;AAtCG;AAAA;AAAA,iBAwCJ,eAAqB;AAClB,qBAAO,KAAKE,gBAAL,CAAsB,kDAAtB,EACD,KAAKH,aAAL,GAAqB,KAAKC,mBADzB,CAAP;AAEF;AA3CG;AAAA;AAAA,mBA6CI,0BAAiBG,QAAjB,EAAmCC,aAAnC,EAAwD;AAC7D,qBAAO,4DAAYV,SAAZ,CACD,gCADC,EAED,4DAAYA,SAAZ,CAAsBS,QAAtB,CAFC,EAGD,4DAAYE,cAAZ,CAA2BD,aAA3B,CAHC,EAID,4DAAYE,cAAZ,CAA2B,4DAAYC,YAAZ,CAAyBH,aAAzB,EAAwC,KAAKL,aAA7C,CAA3B,CAJC,CAAP;AAKF;AAnDG;AAAA;AAAA,mBAqDJ,8BAAqBS,aAArB,EAA2D;AAAA;;AACxD,kBAAMC,wBAAwB,GAAqB,IAAI,0FAAJ,CAC7C,2EAAiBC,mBAAjB,CAAqC,oEAAYC,eAAjD,CAD6C,EAE7CH,aAAa,CAACI,kBAAd,CAAiC,oEAAYD,eAA7C,CAF6C,EAG7ChB,2BAA2B,CAACkB,wBAHiB,EAI7C,IAJ6C,EAK7C,sGAAgBC,2BAL6B,CAAnD;AAOA,kBAAMC,qBAAqB,GAAqB,IAAI,0FAAJ,CAC1C,2EAAiBL,mBAAjB,CAAqC,oEAAYM,aAAjD,CAD0C,EAE1CR,aAAa,CAACI,kBAAd,CAAiC,oEAAYI,aAA7C,CAF0C,EAG1CrB,2BAA2B,CAACsB,qBAHc,EAI1C,IAJ0C,EAK1C,sGAAgBC,wBAL0B,CAAhD;AAOA,kBAAMC,iCAAiC,GAAuB,EAA9D;;AAEA,yFAAiBC,6BAAjB,CACOC,MADP,CACc,UAACC,WAAD;AAAA,uBAA8Bd,aAAa,CAACI,kBAAd,CAAiCU,WAAjC,IAAgD,CAA9E;AAAA,eADd,EAEO7E,OAFP,CAEe,UAAC6E,WAAD,EAA8B;AACpCH,iDAAiC,CAACxG,IAAlC,CAAuC,IAAI,0FAAJ,CACjC,2EAAiB+F,mBAAjB,CAAqCY,WAArC,CADiC,EAEjCd,aAAa,CAACI,kBAAd,CAAiCU,WAAjC,CAFiC,EAGjC,MAAI,CAACC,uBAAL,CAA6BD,WAA7B,CAHiC,EAIjC,IAJiC,EAKjC,MAAI,CAACE,0BAAL,CAAgCF,WAAhC,CALiC,CAAvC;AAMF,eATP;;AAWA,sBAAQb,wBAAR,EAAkCM,qBAAlC,SAA4DI,iCAA5D;AACF;AAlFG;AAAA;AAAA,mBAoFI,iCAAwBG,WAAxB,EAAgD;AACrD,sBAAQA,WAAR;AACG,qBAAK,oEAAYG,IAAjB;AAAuB,yBAAO9B,2BAA2B,CAAC+B,eAAnC;;AACvB,qBAAK,oEAAYC,IAAjB;AAAuB,yBAAOhC,2BAA2B,CAACiC,eAAnC;;AACvB,qBAAK,oEAAYC,UAAjB;AAA6B,yBAAOlC,2BAA2B,CAACmC,+BAAnC;AAHhC;AAKF;AA1FG;AAAA;AAAA,mBA4FI,oCAA2BR,WAA3B,EAAmD;AACxD,sBAAQA,WAAR;AACG,qBAAK,oEAAYG,IAAjB;AAAuB,yBAAO,sGAAgBM,kBAAvB;;AACvB,qBAAK,oEAAYJ,IAAjB;AAAuB,yBAAO,sGAAgBK,kBAAvB;;AACvB,qBAAK,oEAAYH,UAAjB;AAA6B,yBAAO,sGAAgBf,2BAAvB;AAHhC;AAKF;AAlGG;;AAAA;AAAA;;AAWoB,oCAAAD,wBAAA,GAAmC,eAAnC;AACA,oCAAAI,qBAAA,GAAgC,YAAhC;AACA,oCAAAa,+BAAA,GAA0C,sBAA1C;AACA,oCAAAJ,eAAA,GAA0B,MAA1B;AACA,oCAAAE,eAAA,GAA0B,MAA1B;;OAfpB;;;;;;;;;;;;;;;;;ACdP;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;UAYaK,qB;AANb;AAAA;;AAWG,eAAAnG,MAAA,GAA6B,IAAI,0DAAJ,EAA7B;AAEA,eAAAoG,gCAAA,GAA4C,KAA5C;AACA,eAAAC,gBAAA,GAA4B,KAA5B;AA8BF;;;;iBA1BE,oBAAQ;AACL,iBAAKC,SAAL,GAAiB,IAAIjI,GAAJ,CAAQ,KAAKf,iBAAL,CAAuBgD,GAAvB,CAA2B,UAAAC,IAAI;AAAA,qBAAI,CAACA,IAAI,CAACuC,OAAL,CAAarE,KAAd,EAAqB8B,IAAI,CAACgG,KAA1B,CAAJ;AAAA,aAA/B,CAAR,CAAjB;AACA,iBAAKH,gCAAL,GAAwC,KAAKI,mBAAL,CAAyBC,KAAzB,CAA+B,UAAAC,OAAO;AAAA,qBAAIA,OAAO,CAACC,kBAAZ;AAAA,aAAtC,CAAxC;;AAEA,gBAAI,KAAKP,gCAAT,EAA2C;AACxC,mBAAKC,gBAAL,GAAwB,KAAKG,mBAAL,CAAyBC,KAAzB,CAA+B,UAAAC,OAAO;AAAA,uBAAIA,OAAO,CAAClB,WAAR,KAAwB,oEAAYK,IAAxC;AAAA,eAAtC,CAAxB;AACF,aAFD,MAEO;AACJ,mBAAKe,YAAL,GAAoB,IAAIvI,GAAJ,CAAQ,KAAKf,iBAAL,CAAuBgD,GAAvB,CAA2B,UAAAC,IAAI;AAAA,uBAAI,CAACA,IAAI,CAACuC,OAAL,CAAarE,KAAd,EAAqB8B,IAAI,CAACsG,OAA1B,CAAJ;AAAA,eAA/B,CAAR,CAApB;AACF;AACH;;;iBAED,kBAAM;AAAA;;AACH,iBAAKL,mBAAL,CAAyB7F,OAAzB,CAAiC,UAAA+F,OAAO;AAAA,qBAClCA,OAAO,CAAClB,WAAR,GAAsB,MAAI,CAACa,gBAAL,GAAwB,oEAAYR,IAApC,GAA2C,oEAAYiB,UAD3C;AAAA,aAAxC;AAEA,iBAAK9G,MAAL,CAAYmB,IAAZ;AACF;;;eAED,eAAuB;AACpB,gBAAMqF,mBAAmB,GAA8B,EAAvD;AACA,iBAAKlJ,iBAAL,CAAuBqD,OAAvB,CAA+B,UAAAJ,IAAI,EAAI;AACpCA,kBAAI,CAACwG,mBAAL,CACOxB,MADP,CACc,UAAAmB,OAAO;AAAA,uBAAIA,OAAO,CAACM,mBAAZ;AAAA,eADrB,EAEOrG,OAFP,CAEe,UAAA+F,OAAO;AAAA,uBAAIF,mBAAmB,CAAC3H,IAApB,CAAyB6H,OAAzB,CAAJ;AAAA,eAFtB;AAGF,aAJD;AAKA,mBAAOF,mBAAP;AACF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;uECpBD,ub,GAAA,8M,EAAA,uY,EAAA,iV,EAAA,qf,EAAA;AAAA;AAAA,U,EAAA,iU,EAAA,sK,EAAA,6gB,GAAwG,+E,IACrG,uU,GAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gB,EAGkB,yD,GAAqD,kF,IACpD,4E,IACtB,4E,IAAA;AAAA;;AANA;;AAIqB;;AADA,6BAAoC,oBAApC;AADA,6BAAyB,SAAzB;AADA;;AAAlB,yBAGkB,SAHlB,EAEkB,SAFlB,EACkB,SADlB,EAAkB,SAAlB;AAA0C,S,EAAA;AAD7C;;AAAA;;AAAA;AAAwG,S;AAAA;;;uEAOxG,ub,GAAA,8M,EAAA,uY,EAAA,iV,EAAA,qf,EAAA;AAAA;AAAA,U,EAAA,iU,EAAA,sK,EAAA,6gB,GAA0G,+E,IACvG,uU,GAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gB,EAGkB,yD,GAA4C,kF,IAC3C,4E,IACtB,4E,IAAA;AAAA;;AANA;;AAIqB;;AADA,6BAA+B,eAA/B;AADA,6BAAyB,SAAzB;AADA;;AAAlB,yBAGkB,SAHlB,EAEkB,SAFlB,EACkB,SADlB,EAAkB,SAAlB;AAA0C,S,EAAA;AAD7C;;AAAA;;AAAA;AAA0G,S;AAAA;;;uEAO1G,6Z,GAAA,8M,EAAA,uY,EAAA,iV,EAAA,qf,EAAA;AAAA;AAAA,U,EAAA,iU,EAAA,sK,EAAA,6gB,GAAoC,+E,IACjC,uU,GAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gB,EAGkB,yD,GAAqD,kF,IACpD,4E,IACtB,4E,IAAA;AAAA;;AANA;;AAIqB;;AADA,6BAAoC,oBAApC;AADA,6BAAyB,SAAzB;AADA;;AAAlB,yBAGkB,SAHlB,EAEkB,SAFlB,EACkB,SADlB,EAAkB,SAAlB;AAA+C,S,EAAA;AADlD;;AAAA;;AAAA;AAAoC,S;AAAA;;;uEAOpC,6Z,GAAA,8M,EAAA,uY,EAAA,iV,EAAA,qf,EAAA;AAAA;AAAA,U,EAAA,iU,EAAA,sK,EAAA,6gB,GAAoC,+E,IACjC,uU,GAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gB,EAGkB,yD,GAAmD,kF,IAClD,4E,IACtB,4E,IAAA;AAAA;;AANA;;AAIqB;;AADA,6BAAkC,kBAAlC;AADA,6BAAyB,SAAzB;AADA;;AAAlB,yBAGkB,SAHlB,EAEkB,SAFlB,EACkB,SADlB,EAAkB,SAAlB;AAA6C,S,EAAA;AADhD;;AAAA;;AAAA;AAAoC,S;AAAA;;;uEA0BjC,ygB,GAAA,uN,EAAA;AAAA;AAAA,U,EAAA,oU,EAAA,wN,EAAA,qf,GAAkG,6F,IAElG,4E,IAAA;AAFA;;AAAA;AAAA,S,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAkG;;AAAA;AAElG,S;AAAA;;;uEAEG,0I,GAAA,oJ,EAAA,8O,GAA6E,I,EAAA;AAAA;;AAArC,4CAAoC,OAApC,CAAoC,MAApC,CAAoC,OAApC,CAAoC,SAApC,CAAoC,IAApC;;AAAxC,wBAAwC,SAAxC;AAA4E,S;AAAA;;;uEAD/E,ygB,GAAA,uN,EAAA;AAAA;AAAA,U,EAAA,oU,EAAA,wN,EAAA,qf,GAAoG,kF,IACjG,0H,GAAA;AAAA;AAAA,gB,GAAwF,6F,IAE3F,4E,IAAA;AAAA;;AAHA;;AAAA;;AACa,4CAA6B,OAA7B,CAA6B,OAA7B,CAA6B,SAA7B,CAA6B,IAA7B;;AAAV,wBAAU,SAAV;AAAuC,S,EAAA;AAD1C;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAC2F;;AAAA;AAE3F,S;AAAA;;;uEACA,ma,GAAA,uN,EAAA;AAAA;AAAA,U,EAAA,oU,GAAkC,0E,IAA0B,4E,IAAA;AAA5D;AAAA,S,EAAA;AAAA;AAAA;;AAAA;;AAAkC;;AAAA;AAA0B,S;AAAA;;;uEAC5D,ma,GAAA,uN,EAAA;AAAA;AAAA,U,EAAA,oU,GAAkC,0E,IAAwB,4E,IAAA;AAA1D;AAAA,S,EAAA;AAAA;AAAA;;AAAA;;AAAkC;;AAAA;AAAwB,S;AAAA;;;uEA1B7D;AAAA;AAAA,sBAEgD,UAFhD;;AAEY;;;;;AAFZ;AAAA,4N,GAAA,yK,EAAA,sL,EAAA,qK,EAAA,2rB,EAAA;AAAA;AAAA,U,EAAA,gN,EAAA;AAAA;AAAA,U,EAAA,wV,EAAA,wV,GAEgD,kF,IAC7C,wgB,GAAA,wN,EAAA;AAAA;AAAA,U,EAAA,qU,EAAA,wN,EAAA,sf,GAA6B,kF,IAC1B,4U,GAAA;AAAA;AAAA,gB,GAAuC,kF,IACvC,wI,GAAA,qJ,EAAA,+O,GAAmD,kF,IACnD,uH,IAAM,8E,IAAwB,+E,IACnB,kF,IACd,8b,GAAA,wN,EAAA;AAAA;AAAA,U,EAAA,qU,GAAoC,kF,IACjC;AAAA;AAAA;;AAAA;;;;;AAIO;;;;;AAJP;AAAA,sB,GAAA,gZ,GAI4C,+E,IACjC,kF,IACd,2b,GAAA,wN,EAAA;AAAA;AAAA,U,EAAA,qU,GAAiC,8F,IAEnB,kF,IACd,0H,GAAA;AAAA;AAAA,gB,GAEc,kF,IACd,0H,GAAA;AAAA;AAAA,gB,GAGc,kF,IACd,0H,GAAA;AAAA;AAAA,gB,GAA0E,kF,IAC1E,2H,GAAA;AAAA;AAAA,gB,GAAwE,+E,IAC3E,4E,IAAA;AAAA;;AA3BA;;AAGG;;AAAA;;AACgB,4BAAW,QAAX,CAAW,SAAX;;AAAb,yBAAa,SAAb;;AAIH;;AACG;;AAMH;;AAGa,yDAAoE,wBAApE,CAAoE,aAApE;;AAAb,yBAAa,UAAb;;AAGa,yDAAsE,wBAAtE,CAAsE,eAAtE;;AAAb,yBAAa,UAAb;;AAIa,8BAAoB,aAApB;;AAAb,yBAAa,UAAb;;AACa,8BAAoB,aAApB;;AAAb,yBAAa,UAAb;AAAiC,S,EAAA;AAAA;;AAzBxB,8CAA8C,QAA9C,CAA8C,SAA9C;;AADZ;;AAAA;;AAAA;;AAAA,wBACY,SADZ;;AAGG;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAEa,6BAA6B,QAA7B,CAA6B,SAA7B,CAA6B,IAA7B,CAA6B,KAA7B;;AAAV,yBAAU,UAAV;;AACM;;AAAA;;AAET;AAAA;;AAAA;;AAIU,wEAAqD,YAArD,CAAqD,IAArD;;AAHP;;AAAA,yBAGO,UAHP;;AAMH;AAAA;;AAAA;;AAAiC;;AAAA;AAEjC,S;AAAA;;;4MA3E4D,4E,IAClE,yJ,IAAkC,6E,GAAA,wD,GAAqE,4E,IACtE,4E,IACjC,4I,IAAqB,+E,IAClB;AAAA;AAAA,sBACiF,UADjF;;AACiC;;;;;AADjC;AAAA,0R,GAAA;AAAA;AAAA,U,GACiF,+E,IAC/C,4E,IAC/B,8E,IAEyB,4E,IAC/B,2Z,GAAA,qK,EAAA,qK,EAAA,qN,EAAA,uQ,EAAA,qN,EAAA,yT,EAAA,qK,EAAA,qN,EAAA,6T,EAAA,qK,EAAA,2W,EAAA,wN,EAAA,oK,EAAA;AAAA;AAAA,gB,EAAA;AAAA;AAAA,U,EAAA;AAAA;AAAA,U,EAAA;AAAA;AAAA,U,EAAA;AAAA;AAAA,U,EAAA,8N,EAAA,8N,EAAA,qK,EAAA,8mB,EAAA;AAAA;AAAA,U,EAAA;AAAA;AAAA,U,EAAA,4J,EAAA,yV,EAAA,yV,GAAwE,+E,IAC7C,+E,IACxB,wb,GAAA,8M,EAAA,uY,EAAA,iV,EAAA,sf,EAAA;AAAA;AAAA,U,EAAA,iU,EAAA,sK,EAAA,8gB,GAAmC,+E,IAChC,uU,GAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gB,GAG4C,kF,IACzB,4E,IACN,+E,IAChB,8Z,GAAA,8M,EAAA,uY,EAAA,iV,EAAA,sf,EAAA;AAAA;AAAA,U,EAAA,iU,EAAA,sK,EAAA,8gB,GAAe,wF,GAAA,yD,GAEC,+E,IAChB,8Z,GAAA,8M,EAAA,uY,EAAA,iV,EAAA,sf,EAAA;AAAA;AAAA,U,EAAA,iU,EAAA,sK,EAAA,8gB,GAAe,+E,IACZ,uU,GAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gB,EAGkB,yD,GAAiD,kF,IAChD,4E,IACN,+E,IAChB,6H,GAAA;AAAA;AAAA,gB,GAMgB,+E,IAChB,6H,GAAA;AAAA;AAAA,gB,GAMgB,+E,IAChB,6H,GAAA;AAAA;AAAA,gB,GAMgB,+E,IAChB,6H,GAAA;AAAA;AAAA,gB,GAMgB,+E,IACS,+E,IACzB,6H,GAAA;AAAA;AAAA,gB,GA2Ba,iF,IAEW,+E,IACxB,uW,GAAA,2S,EAAA;AAAA;AAAA,U,GAAe,+E,IACZ,8W,GAAA;AAAA;AAAA,gB,EAAA;AAAA;AAAA,U,GAA4E,+F,IAExD,4E,IACP,4E,IACnB;AAAA;;AAzFG;;AAMW,6BAAgC,gBAAhC;;AAAd,yBAAc,SAAd;;AAEG;;AAIqB,6BAAyB,gBAAzB;AADA,6BAA2B,WAA3B;AADA,6BAAyB,SAAzB;AADA;;AAAlB,yBAGkB,SAHlB,EAEkB,SAFlB,EACkB,SADlB,EAAkB,SAAlB;;AAMH;;AAGA;;AAIqB;;AADA,8BAAgC,gBAAhC;AADA,8BAAyB,SAAzB;AADA;;AAAlB,yBAGkB,UAHlB,EAEkB,UAFlB,EACkB,UADlB,EAAkB,UAAlB;;AAMY,yDAAoE,wBAApE,CAAoE,aAApE;;AAAf,yBAAe,UAAf;;AAOe,yDAAsE,wBAAtE,CAAsE,eAAtE;;AAAf,yBAAe,UAAf;;AAOe,8BAAoB,aAApB;;AAAf,yBAAe,UAAf;;AAOe,8BAAoB,aAApB;;AAAf,yBAAe,UAAf;;AAQY,8BAAsC,SAAtC,CAAsC,IAAtC;;AAAZ,0BAAY,UAAZ;;AA+BsB,8BAAwD,eAAxD,CAAwD,uBAAxD;;AAAnB,0BAAmB,UAAnB;AAA2E,S,EAAA;AAAA;;AAxF/C;;AAAA;;AASlC;;AAAA;;AAAA;;AAEG;;AAAA;;AAAA;;AAOA;;AAAA;;AAAA;;AAAe;;AAAA;;AAGf;;AAAA;;AAAA;;AAkEA;;AAAA;;AACG;;AAAA;;AAA4E;;AAAA;AAE5E,S;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACrFN;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;;;UAOaS,2B;AACV,6CAAoBC,EAApB,EAA4CC,UAA5C,EAA0E;AAAA;;AAAtD,eAAAD,EAAA,GAAAA,EAAA;AAAwB,eAAAC,UAAA,GAAAA,UAAA;AAAiC;;;;iBAG7E,uBAAcC,CAAd,EAAsB;AAAA;;AACnB,iBAAKD,UAAL,CAAgBE,UAAhB,CAA2B,YAAM;AAC9BC,sBAAQ,CAACC,IAAT,CAAcC,SAAd,CAAwBC,GAAxB,CAA4B,cAA5B;;AACA,oBAAI,CAACP,EAAL,CAAQQ,aAAR,CAAsBC,KAAtB;AACF,aAHD,EAGG,EAHH;AAIAP,aAAC,CAACQ,cAAF;AACAR,aAAC,CAACS,eAAF;AACAT,aAAC,CAACU,wBAAF;AACF;;;;;;;;;;;;;;;;;;;;;ACzBJ;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAwBO;AAAA,YAAMC,qBAAN;AAAA;;AAAA;;AA0BJ,2CAAc;AAAA;;AAAA;;AACX,uCAAMA,qBAAqB,CAACC,WAA5B;AAzBH,mBAAAC,uBAAA,GAA0D,kHAA1D;AACA,mBAAAC,cAAA,GAAwC,mFAAxC;AAYA,mBAAAlI,MAAA,GAA6B,IAAI,0DAAJ,EAA7B;AAGA,mBAAAmI,WAAA,GAAuB,KAAvB;;AA6BA,mBAAAC,QAAA,GAAW,UAACC,MAAD,EAAyB;AAAA,0DACZ,OAAKC,eADO;AAAA;;AAAA;AACjC,uEAA2C;AAAA,sBAAhCC,MAAgC;AACxCA,wBAAM,CAACC,IAAP,CAAYhD,WAAZ,GAA0B6C,MAA1B;AACF;AAHgC;AAAA;AAAA;AAAA;AAAA;;AAIjC,qBAAKrI,MAAL,CAAYmB,IAAZ;AACF,aALD;;AAOA,mBAAAsH,eAAA,GAAkB,UAACD,IAAD,EAA2C;AAC1D,kBAAME,YAAY,GAAkB,OAAKC,8BAAL,CAAoCH,IAApC,CAApC;;AAEA,kBAAI,CAACE,YAAL,EAAmB;AAChB,uBAAO,EAAP;AACF,eALyD,CAO1D;AACA;;;AACA,kBAAIF,IAAI,CAAChD,WAAL,KAAqB,oEAAYoD,MAAjC,IAA2CF,YAAY,CAACG,QAAb,CAAsB,oEAAYD,MAAlC,CAA/C,EAA0F;AACvFF,4BAAY,CAACI,MAAb,CAAoBJ,YAAY,CAACK,OAAb,CAAqB,oEAAYH,MAAjC,CAApB,EAA8D,CAA9D;AACF;;AAED,qBAAOF,YAAP;AACF,aAdD;;AAuBA,mBAAAM,mBAAA,GAAsB,UAACxD,WAAD,EAAsC;AACzD,qBAAO,oFAAeyD,uBAAf,CAAuCzD,WAAvC,CAAP;AACF,aAFD;;AAIA,mBAAA0D,wBAAA,GAA2B,UAACC,QAAD,EAA0C;AAClE;AACA;AACA,kBAAIA,QAAQ,YAAY,yGAAxB,EAA6C;AAC1C,oBAAMC,UAAU,GAAwBD,QAAxC;;AACA,oBAAIC,UAAU,CAACC,wBAAX,MAAyC,OAAKC,0BAAL,CAAgCF,UAAhC,CAA7C,EAA0F;AACvF,yBAAO,IAAP;AACF;AACH,eALD,MAKO,IAAI,OAAKE,0BAAL,CAAgCH,QAAhC,CAAJ,EAA+C;AACnD,uBAAO,IAAP;AACF;;AAED,qBAAO,IAAP;AACF,aAbD;;AAmBA,mBAAAG,0BAAA,GAA6B,UAACC,IAAD,EAAqC;AAC/D,kBAAIA,IAAI,YAAY,qGAApB,EAAuC;AACpC,uBAAO,KAAP;AACF;;AAED,qBAAOA,IAAI,CAACC,aAAL,KAAuBD,IAAI,CAACtH,OAA5B,IAAuCsH,IAAI,CAAC/D,WAAL,KAAqB,oEAAYsB,UAA/E;AACF,aAND;;AAQA,mBAAA2C,WAAA,GAAc,UAACF,IAAD,EAAoC;AAC/C,qBAAOA,IAAI,CAACG,MAAL,GAAc,IAAd,GAAqB,iDAAKC,IAAjC;AACF,aAFD;;AAIA,mBAAAC,iBAAA,GAAoB,UAACC,WAAD,EAA0B;AAAA,0DACjB,OAAKvB,eADY;AAAA;;AAAA;AAC3C,uEAAgD;AAAA,sBAArCwB,WAAqC;AAC7CA,6BAAW,CAACtB,IAAZ,CAAiBgB,aAAjB,GAAiCK,WAAjC;AACF;AAH0C;AAAA;AAAA;AAAA;AAAA;;AAK3C,qBAAK7J,MAAL,CAAYmB,IAAZ;;AACA,qBAAKgH,WAAL,GAAmB,KAAnB;AACF,aAPD;;AASA,mBAAA4B,SAAA,GAAY,YAAM;AACf,qBAAKH,iBAAL,CAAuB,IAAvB;AACF,aAFD;;AAIA,mBAAAI,OAAA,GAAU,YAAM;AACb,qBAAKJ,iBAAL,CAAuB,KAAvB;AACF,aAFD;;AAIA,mBAAAK,wBAAA,GAA2B,YAAM;AAC9B,kBAAI,OAAKC,2BAAL,EAAJ,EAAwC;AACrC,uBAAKC,YAAL,GAAoB,6DAAYvG,SAAZ,CAAsB,0CAAtB,CAApB;AACA,uBAAKwG,WAAL,GAAmB,6DAAYxG,SAAZ,CAAsB,qDAAtB,CAAnB;AACA,uBAAKyG,0BAAL,GAAkC,OAAKN,SAAvC;AACA,uBAAK5B,WAAL,GAAmB,IAAnB;AACF,eALD,MAKO;AACJ,uBAAK4B,SAAL;AACF;AACH,aATD;;AAWA,mBAAAO,sBAAA,GAAyB,YAAM;AAC5B,kBAAI,OAAKJ,2BAAL,EAAJ,EAAwC;AACrC,uBAAKC,YAAL,GAAoB,6DAAYvG,SAAZ,CAAsB,4CAAtB,CAApB;AACA,uBAAKwG,WAAL,GAAmB,6DAAYxG,SAAZ,CAAsB,mDAAtB,CAAnB;AACA,uBAAKyG,0BAAL,GAAkC,OAAKL,OAAvC;AACA,uBAAK7B,WAAL,GAAmB,IAAnB;AACF,eALD,MAKO;AACJ,uBAAK6B,OAAL;AACF;AACH,aATD;;AAWQ,mBAAAE,2BAAA,GAA8B,YAAe;AAClD,kBAAMK,iBAAiB,GAAoB,OAAKjC,eAAL,CAAqBkC,IAArB,CAA0B,UAACC,OAAD,EAAsB;AACxF,uBAAOA,OAAO,CAACjC,IAAR,CAAahD,WAAb,KAA6B,oEAAYsB,UAAhD;AACF,eAF0C,CAA3C;;AAGA,qBAAO,CAAC,CAACyD,iBAAT;AACF,aALO;;AAOR,mBAAAG,iBAAA,GAAoB,UAACnB,IAAD,EAAYoB,KAAZ,EAA2B;AAC5CpB,kBAAI,CAAC/D,WAAL,GAAmBmF,KAAK,CAACpC,MAAN,CAAa9J,KAAhC;;AACA,qBAAKuB,MAAL,CAAYmB,IAAZ;AACF,aAHD;;AAKA,mBAAAyJ,eAAA,GAAkB,UAACD,KAAD,EAAgB;AAC/B,qBAAKE,oBAAL,GAA4BF,KAA5B;;AACA,kBAAIA,KAAK,CAACpC,MAAN,CAAa9J,KAAb,KAAuB,oFAAUqM,KAAV,CAAgB5I,QAAhB,EAAvB,IACEyI,KAAK,CAACpC,MAAN,CAAa9J,KAAb,KAAuB,oFAAUsM,eAAV,CAA0B7I,QAA1B,EAD7B,EACmE;AAChE,uBAAK+H,wBAAL;AACF,eAHD,MAGO,IAAIU,KAAK,CAACpC,MAAN,CAAa9J,KAAb,KAAuB,oFAAUuM,GAAV,CAAc9I,QAAd,EAAvB,IACLyI,KAAK,CAACpC,MAAN,CAAa9J,KAAb,KAAuB,oFAAUwM,aAAV,CAAwB/I,QAAxB,EADtB,EAC0D;AAC9D,uBAAKoI,sBAAL;AACF;AACH,aATD;;AAWA,mBAAAY,kBAAA,GAAqB,YAAM;AACxB,qBAAK/C,WAAL,GAAmB,KAAnB,CADwB,CAExB;AACA;AACA;;AACA,qBAAK0C,oBAAL,CAA0BtC,MAA1B,CAAiC9J,KAAjC,GAAyC,OAAK6J,eAAL,CAAqB,CAArB,EAAwBE,IAAxB,CAA6B2C,SAAtE;AACF,aAND;;AAYA,mBAAAC,UAAA,GAA+C,IAAI,yFAAJ,CAAmB,UAAC5C,IAAD,EAA4B;AAC3F,qBAAOA,IAAI,CAAC6C,IAAZ;AACF,aAF8C,CAA/C;AAIA,mBAAAC,eAAA,GAAoD,IAAI,yFAAJ,CAAmB,UAAC9C,IAAD,EAA4B;AAChG,qBAAOA,IAAI,CAAC+C,cAAZ;AACF,aAFmD,CAApD;AAIA,mBAAAC,mBAAA,GAAwD,IAAI,yFAAJ,CAAmB,UAAChD,IAAD,EAA4B;AACpG,qBAAOA,IAAI,CAACiD,QAAZ;AACF,aAFuD,CAAxD;AAIA,mBAAAC,cAAA,GAAmD,IAAI,yFAAJ,CAAmB,UAAClD,IAAD,EAA4B;AAC/F,qBAAOA,IAAI,CAACmD,QAAZ;AACF,aAFkD,CAAnD;AAIA,mBAAAC,mBAAA,GAAwD,IAAI,yFAAJ,CAAmB,UAACpD,IAAD,EAA4B;AACpG,qBAAOA,IAAI,CAACqD,aAAZ;AACF,aAFuD,CAAxD;AAIA,mBAAAC,iBAAA,GAAsD,IAAI,yFAAJ,CAAmB,UAACtD,IAAD,EAA4B;AAClG,qBAAOA,IAAI,CAACuD,WAAZ;AACF,aAFqD,CAAtD;AAlLG,mBAAKC,iBAAL,GAAyB,IAAzB;AACA,mBAAKC,sBAAL,GAA8B,OAAKC,eAAnC;AAHW;AAIb;;AA9BG;AAAA;AAAA,mBAgCJ,2BAAe;AACZ,mBAAKlM,MAAL,CAAYmB,IAAZ;AACF;AAlCG;AAAA;AAAA,mBAoCJ,oBAAQ;AACL,mBAAKgL,eAAL,GAAuB,KAAvB;AACA,mBAAKC,WAAL,GAAmB,IAAI,yHAAJ,CAAkC,KAAK9O,iBAAvC,EAA0D,KAAKC,aAA/D,CAAnB;AACF;AAvCG;AAAA;AAAA,mBAyCJ,2BAAkBoG,WAAlB,EAAsD;AACnD,mBAAKJ,mBAAL,GAA2BI,WAA3B;;AACA,kGAAeL,iBAAf,CACM,KAAKC,mBADX,EACgC,KAAK8I,QADrC,EAC+C,KAAK/O,iBADpD,EACuE,KAAKC,aAD5E;AAEF;AAyBD;;;;AAtEI;AAAA;AAAA,mBAyEI,wCAA+BiL,IAA/B,EAAqD;AAC1D,qBAAOA,IAAI,CAAC8D,oBAAL,CAA0B/G,MAA1B,CAAiC,UAAAgH,EAAE;AAAA,uBAAI,CAAC,4EAAiBC,yBAAjB,CAA2C3D,QAA3C,CAAoD0D,EAApD,CAAL;AAAA,eAAnC,CAAP;AACF;AA3EG;AAAA;AAAA,iBAgGJ,eAA6B;AAC1B,qBAAO,6DAAY3I,SAAZ,CAAsB,8DAAtB,CAAP;AACF;AAlGG;AAAA;AAAA,iBAsLJ,eAAmB;AAChB,qBAAO,oFAAe6I,kBAAf,CAAkC,KAAKlJ,mBAAvC,CAAP;AACF;AAxLG;AAAA;AAAA,iBAkNJ,eAAsB;AACnB,qBAAO,KAAKvG,YAAL,GAAoB,EAApB,GAAyB,sBAAhC;AACF;AApNG;AAAA;AAAA,iBAsNJ,eAAuB;AACpB,qBAAO,KAAKA,YAAL,GAAoB,EAApB,GAAyB,uBAAhC;AACF;AAxNG;;AAAA;AAAA,UAAoC,uFAApC;;AACY,8BAAAgL,WAAA,GAAsB,iCAAtB;;OADZ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;uECtBP,8W,GAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gB,EAIiB,wD,GACmC,4E,IACpD;AAAA;AAJiB,6BAAkC,qBAAlC;;AAEA;;AACA,6BAAkC,oBAAlC;AAFA;;AAHjB,wBAEiB,SAFjB,EAIiB,SAJjB,EAKiB,SALjB,EAGiB,SAHjB;AAGqC,S,EAAA,I;AAAA;;;uEAMrC,mW,GAAA;AAAA;AAAA;AAAA;AAAA,gB,GAIyC,4E,IACzC;AAAA;AAHiB;AAEA;AADA;;AAHjB,wBAEiB,SAFjB,EAIiB,SAJjB,EAGiB,SAHjB;AAGqC,S,EAAA,I;AAAA;;;uEAKrC,qW,GAAA;AAAA;AAAA;AAAA;AAAA,gB,GAI2C,4E,IAC3C;AAAA;AAHiB;AAEA;AADA;;AAHjB,wBAEiB,SAFjB,EAIiB,SAJjB,EAGiB,SAHjB;AAGqC,S,EAAA,I;AAAA;;;uEAuBzB;AAAA;AAAA,sBAK+C,UAL/C;;AAGiB;;;;;AAHjB;AAAA,4N,GAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,U,GAK+C,wF,IAC/C;AAAA;AALiB;AAEA,6BAAuB,WAAvB;AADA;AAEA;AACA;;AALjB,wBACiB,SADjB,EAGiB,SAHjB,EAEiB,SAFjB,EAIiB,SAJjB,EAKiB,SALjB;AAK8C,S,EAAA,I;AAAA;;;uEAE9C;AAAA;AAAA,sBAK+C,UAL/C;;AAGiB;;;;;AAHjB;AAAA,4N,GAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,U,GAK+C,wF,IAC/C;AAAA;AALiB;AAEA,6BAAyB,aAAzB;AADA;AAEA;AACA;;AALjB,wBACiB,SADjB,EAGiB,SAHjB,EAEiB,SAFjB,EAIiB,SAJjB,EAKiB,SALjB;AAK8C,S,EAAA,I;AAAA;;;uEA9B1D;AAAA;AAAA;;AAAA;;;;;AAKK;;;;;AALL;AAAA,sB,GAAA;AAAA;AAAA,U,EAAA,uS,GAK2C,+E,IACxC,8L,IAEuB,kF,IACpB,mJ,IAA2B,qF,IACxB,0K,IAAmD,wF,IAChD,6K,IACwB,6G,GAAA,yD,GAEnB,qF,IACF,qF,IACN;AAAA;;AAAA;;;;;;;;;;;SAAA,E,IAAA,E,IAAA,C,uJACwB,wF,IACrB,0H,GAAA;AAAA;AAAA,gB,GAMkB,wF,IAClB,0H,GAAA;AAAA;AAAA,gB,GAMkB,qF,IACf,qF,IACN,kJ,IAA0B,wF,IACvB;AAAA;AAAA,sBAE2C,UAF3C;;AAEQ;;;;;AAFR;AAAA,sB,IAE2C,6G,GAAA,yD,GAElC,qF,IACN,kF,IACH,+E,IACH,4E,IACT;AAAA;AAxB6B,+CAAuC,WAAvC,CAAuC,MAAvC;;AAAjB,yBAAiB,SAAjB;;AAOiB,iDAA2C,aAA3C,CAA2C,MAA3C;;AAAjB,yBAAiB,SAAjB;AAA4D,S,EAAA;AAbpC;;AAAA;;AAI3B;;AAAA;;AAoB8C;;AAAA;AAE3C,S;AAAA;;;uEAKZ,oM,IAEwB,4E,IACxB,I,EAAA,I;AAAA;;;2MAzEmF,4E,IACQ,4E,IAC3F,0H,GAAA;AAAA;AAAA,gB,GAMkB,8E,IAEe,4E,IACjC,0H,GAAA;AAAA;AAAA,gB,GAKkB,8E,IAEgB,4E,IAClC,0H,GAAA;AAAA;AAAA,gB,GAKkB,8E,IAEkB,4E,IACpC,0H,GAAA;AAAA;AAAA,gB,GA0CM,4E,IACN,0H,GAAA;AAAA;AAAA,gB,GAGM,4E,IACN;AAAA;AAxEiB,6BAA0B,mBAA1B;;AAAjB,wBAAiB,SAAjB;;AASiB,+CAAwC,mBAAxC;;AAAjB,wBAAiB,SAAjB;;AAQiB,iDAA0C,mBAA1C;;AAAjB,yBAAiB,SAAjB;;AAUK,6BAAwB,iBAAxB;;AAFL,yBAEK,SAFL;;AA2CK,6BAAwB,iBAAxB;;AAAL,yBAAK,SAAL;AAA6B,S,EAAA,I;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACtE7B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;UAEa0E,0B;;;;;;;;AAKV;;;;;AAKA,uBACMjO;AAAY;AADlB,YACoF;AACjF,gBAAI,CAACA,KAAL,EAAY;AACT;AACF;;AAED,iBAAKkO,mBAAL,GAA2B,EAA3B;AACA,iBAAKC,iBAAL,GAAyB,EAAzB,CANiF,CAQjF;;AARiF,wDASOnO,KATP;AAAA;;AAAA;AASjF,qEAA+F;AAAA,oBAAtFoO,UAAsF;AAC5F,oBAAIC,SAAS,GAAoBD,UAAU,CAACE,aAA5C;AACA,oBAAIC,UAAU,GAAWF,SAAS,CAACG,IAAnC;AACA,qBAAKN,mBAAL,CAAyBK,UAAzB,IAAuCH,UAAU,CAACK,SAAlD;AACA,qBAAKN,iBAAL,CAAuBI,UAAvB,IAAqCH,UAAU,CAACM,OAAhD;AACF;AAdgF;AAAA;AAAA;AAAA;AAAA;AAenF;AAED;;;;;;iBAGO,4BAAmBH,UAAnB,EAAqC;AACzC,gBAAI,KAAKL,mBAAL,IAA4B,KAAKA,mBAAL,CAAyBS,cAAzB,CAAwCJ,UAAxC,CAAhC,EAAqF;AAClF,qBAAO,KAAKL,mBAAL,CAAyBK,UAAzB,CAAP;AACF;;AAED,mBAAO,IAAP;AACF;AAED;;;;;;iBAGO,0BAAiBA,UAAjB,EAAmC;AACvC,gBAAI,KAAKJ,iBAAL,IAA0B,KAAKA,iBAAL,CAAuBQ,cAAvB,CAAsCJ,UAAtC,CAA9B,EAAiF;AAC9E,qBAAO,KAAKJ,iBAAL,CAAuBI,UAAvB,CAAP;AACF;;AAED,mBAAO,IAAP;AACF;;;;;;;;;;;;;;;;;;;;;AClDJ;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;UAQaK,uB;AAIV,yCAAoB3G,OAApB,EAAsDiF,QAAtD,EAA+E7I,OAA/E,EAAuG;AAAA;;AAAnF,eAAA4D,OAAA,GAAAA,OAAA;AAAkC,eAAAiF,QAAA,GAAAA,QAAA;AAAyB,eAAA7I,OAAA,GAAAA,OAAA;AAFvE,eAAAwK,YAAA,GAA4B,oEAAYxG,UAAxC;AAEkG;;;;eAE1G,eAAQ;AACL,mBAAO,KAAKJ,OAAL,CAAauG,IAApB;AACF;;;eAED,eAAQ;AACL,mBAAO,KAAKvG,OAAL,CAAa2E,IAApB;AACF;;;eAED,eAAY;AACT,mBAAO,4DAAY9G,cAAZ,CAA2B,KAAKgJ,WAAhC,CAAP;AACF;;;eAED,eAAe;AACZ,mBAAO,KAAK7G,OAAL,CAAa+E,QAApB;AACF;;;eAED,eAAe;AACZ,mBAAO,KAAK6B,YAAZ;AACF,W;eAED,aAAgBE,cAAhB,EAA6C;AAC1C,gBAAIA,cAAc,KAAK,oEAAY1G,UAA/B,IAA6C,KAAKwG,YAAL,KAAsB,oEAAYxG,UAAnF,EAA+F;AAC5F;AACF;;AAED,gBAAI0G,cAAc,KAAK,oEAAY3H,IAA/B,IAAuC2H,cAAc,KAAK,oEAAY1G,UAA1E,EAAsF;AACnF;AACF;;AAED,iBAAKwG,YAAL,GAAoBE,cAApB;AACF;;;eAED,eAAS;AACN,mBAAO,2EAAiBC,oBAAjB,CAAsC,KAAK/G,OAAL,CAAagH,UAAnD,CAAP;AACF;;;eAED,eAAa;AACV,mBAAO,KAAKhH,OAAL,CAAagH,UAAb,IAA2B,KAAKhH,OAAL,CAAagH,UAAb,CAAwBC,aAA1D;AACF;;;eAED,eAAgB;AACb,mBAAO,2EAAiBC,SAAjB,CAA2B,KAAKlH,OAAL,CAAagH,UAAxC,CAAP;AACF;;;eAED,eAAmB;AAChB,mBAAO,KAAKG,SAAL,GAAiB,gDAAKC,+BAAtB,GAAwD,gDAAKC,6BAApE;AACF;;;eAED,eAAmB;AAChB,mBAAO,gDAAKC,oBAAL,CAA0B,KAAKC,eAA/B,CAAP;AACF;;;eAED,eAAsB;AACnB,mBAAO,KAAKvH,OAAL,CAAaC,kBAApB;AACF;;;eAED,eAAuB;AACpB,mBAAO,KAAKnB,WAAL,KAAqB,oEAAYK,IAAjC,IAAyC,KAAKL,WAAL,KAAqB,oEAAYsB,UAAjF;AACF;;;;;;;;;;;;;;;;;;;;;ACrEJ;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;UAGaoH,6B;AAIV,+CAAoBC,WAApB,EAA8D5Q,aAA9D,EAAoG;AAAA;;AAAhF,eAAA4Q,WAAA,GAAAA,WAAA;AAA0C,eAAA5Q,aAAA,GAAAA,aAAA;AAC3D,eAAK6Q,gBAAL,GAAwB,KAAKC,wBAAL,CAA8BF,WAA9B,CAAxB;AACA,eAAKG,kBAAL,GAA0B,KAAKC,yBAAL,CAA+BhR,aAA/B,CAA1B;AACF;;;;iBAED,kBAASoG,WAAT,EAA6C;AAC1C,gBAAIA,WAAW,KAAK,mHAAwBD,aAA5C,EAA2D;AACxD,qBAAO,KAAK0K,gBAAZ;AACF;;AACD,mBAAO,KAAKE,kBAAZ;AACF;;;iBAEO,kCAAyBE,cAAzB,EAA4D;AACjE,gBAAMzN,aAAa,GAAWyN,cAAc,CACrCC,MADuB,CAChB,UAACC,KAAD,EAAQnO,IAAR,EAAiB;AAAD;;AAAC,qBAACmO,KAAK,UAAGnO,IAAI,CAACoO,+BAAR,MAAuC,IAAvC,IAAuC,aAAvC,GAAuC,MAAvC,GAAuC,GAAEhM,MAAzC,CAAN;AAAsD,aADvD,EACyD,CADzD,CAA9B;AAEA,gBAAMiM,sBAAsB,GAAWJ,cAAc,CAC9CjJ,MADgC,CACzB,UAAAhF,IAAI,EAAI;AAAD;;AAAC,4BAAAA,IAAI,CAACoO,+BAAL,MAAoC,IAApC,IAAoC,aAApC,GAAoC,MAApC,GAAoC,GAAEhM,MAAtC,IAA+C,CAA/C;AAAgD,aAD/B,EAEhCA,MAFP;AAIA,mBAAOiM,sBAAsB,GAAG,CAAzB,GACC,4DAAYhL,SAAZ,CAAsB,qDAAtB,EAA6EgL,sBAA7E,EACI7N,aADJ,CADD,GAGC,4DAAY6C,SAAZ,CAAsB,0DAAtB,CAHR;AAIF;;;iBAEO,mCAA0BrG,aAA1B,EAA8D;AACnE,gBAAMwD,aAAa,GAAWxD,aAAa,CACpCkR,MADuB,CAChB,UAACC,KAAD,EAAQG,MAAR,EAAmB;AAAD;;AAAC,qBAACH,KAAK,UAAGG,MAAM,CAACF,+BAAV,MAAyC,IAAzC,IAAyC,aAAzC,GAAyC,MAAzC,GAAyC,GAAEhM,MAA3C,CAAN;AAAwD,aAD3D,EAC6D,CAD7D,CAA9B;AAEA,gBAAMmM,wBAAwB,GAAWvR,aAAa,CAC/CgI,MADkC,CAC3B,UAAAsJ,MAAM,EAAI;AAAD;;AAAC,4BAAAA,MAAM,CAACF,+BAAP,MAAsC,IAAtC,IAAsC,aAAtC,GAAsC,MAAtC,GAAsC,GAAEhM,MAAxC,IAAiD,CAAjD;AAAkD,aADjC,EAElCA,MAFP;AAIA,mBAAOmM,wBAAwB,GAAG,CAA3B,GACC,4DAAYlL,SAAZ,CAAsB,0DAAtB,EACIkL,wBADJ,EAC8B/N,aAD9B,CADD,GAGC,4DAAY6C,SAAZ,CAAsB,0DAAtB,CAHR;AAIF;;;;;;;;;;;;;;;;;;;;;AC5CJ;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAEA;;;;;UAGamL,e;AAKV,iCAAYC,IAAZ,EAA4B7M,MAA5B,EAAkF;AAAA;;AAH1E,eAAA8M,MAAA,GAAmB,EAAnB;AAIL,eAAKA,MAAL,GAAcD,IAAd;AACA,eAAKE,KAAL,GAAa/M,MAAb;AACF;;;;eAED,eAAU;AACP,gBAAMA,MAAM,GAA0B,EAAtC;;AADO,yDAGa,KAAK8M,MAHlB;AAAA;;AAAA;AAGP,wEAAiC;AAAA,oBAAtBnN,KAAsB;;AAC9B,oBAAI,KAAKqN,QAAL,CAAcrN,KAAd,EAAqB,KAAKI,QAAL,EAArB,CAAJ,EAA2C;AACxC,sBAAMkN,aAAa,GAAwB,IAAI,yGAAJ,EAA3C;AACAA,+BAAa,CAACrO,aAAd,GAA8B,KAAKsO,QAAL,CAAcvN,KAAd,EAAqB,KAAKI,QAAL,EAArB,CAA9B;AACAkN,+BAAa,CAAC/D,IAAd,GAAqBvJ,KAArB;AACAK,wBAAM,CAACtD,IAAP,CAAYuQ,aAAZ;AACF;;AACD,oBAAI,KAAKD,QAAL,CAAcrN,KAAd,EAAqB,MAAMI,QAAN,EAArB,CAAJ,EAA4C;AACzC,sBAAMoN,gBAAgB,GAAwB,IAAI,yGAAJ,EAA9C;AACAA,kCAAgB,CAACvO,aAAjB,GAAiC,KAAKsO,QAAL,CAAcvN,KAAd,EAAqB,MAAMI,QAAN,EAArB,CAAjC;AACAoN,kCAAgB,CAACjE,IAAjB,GAAwBvJ,KAAxB;AACAK,wBAAM,CAACtD,IAAP,CAAYyQ,gBAAZ;AACF;AACH;AAhBM;AAAA;AAAA;AAAA;AAAA;;AAkBP,mBAAOnN,MAAP;AACF;;;iBAEO,kBAASC,SAAT,EAA4BC,QAA5B,EAA4C;AACjD,mBAAO,KAAK6M,KAAL,CAAWxQ,GAAX,CAAe0D,SAAf,KAA6B,KAAK8M,KAAL,CAAWtQ,GAAX,CAAewD,SAAf,EAA0B1D,GAA1B,CAA8B2D,QAA9B,CAApC;AACF;;;iBAEO,kBAASD,SAAT,EAA4BC,QAA5B,EAA4C;AACjD,mBAAO,KAAK6M,KAAL,CAAWtQ,GAAX,CAAewD,SAAf,EAA0BxD,GAA1B,CAA8ByD,QAA9B,CAAP;AACF;;;;;;;;;;;;;;;;;;;;;AC5CJ;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAqBO;AAAA,YAAMkN,wBAAN;AAAA;;AAAA;;AAqBJ,8CAAc;AAAA;;AAAA;;AACX,wCAAMA,wBAAwB,CAACvH,WAA/B;AApBH,mBAAAC,uBAAA,GAA0D,kHAA1D;AACA,mBAAAuH,WAAA,GAAkC,mEAAlC;AACA,mBAAAtH,cAAA,GAAwC,mFAAxC;AAYA,mBAAAlI,MAAA,GAA6B,IAAI,0DAAJ,EAA7B;AAgEA;;;;AAGA,mBAAAoL,UAAA,GAA+C,IAAI,yFAAJ,CAAmB,UAAC5C,IAAD,EAA4B;AAC3F,qBAAOA,IAAI,CAAC6C,IAAZ;AACF,aAF8C,CAA/C;AAIA,mBAAAC,eAAA,GAAoD,IAAI,yFAAJ,CAAmB,UAAC9C,IAAD,EAA4B;AAChG,qBAAOA,IAAI,CAAC+C,cAAZ;AACF,aAFmD,CAApD;AAIA,mBAAAkE,yBAAA,GAA8D,IAAI,yFAAJ,CAAmB,UAACjH,IAAD,EAA4B;AAC1G,qBAAO,KAAK,OAAKkH,2BAAL,CAAiClH,IAAjC,CAAZ;AACF,aAF6D,CAA9D;AAIA,mBAAAgD,mBAAA,GAAwD,IAAI,yFAAJ,CAAmB,UAAChD,IAAD,EAA4B;AACpG,qBAAOA,IAAI,CAACiD,QAAZ;AACF,aAFuD,CAAxD;AAIA,mBAAAC,cAAA,GAAmD,IAAI,yFAAJ,CAAmB,UAAClD,IAAD,EAA4B;AAC/F,qBAAOA,IAAI,CAACmD,QAAZ;AACF,aAFkD,CAAnD;AAIA,mBAAAC,mBAAA,GAAwD,IAAI,yFAAJ,CAAmB,UAACpD,IAAD,EAA4B;AACpG,qBAAOA,IAAI,CAACqD,aAAZ;AACF,aAFuD,CAAxD;AAIA,mBAAAC,iBAAA,GAAsD,IAAI,yFAAJ,CAAmB,UAACtD,IAAD,EAA4B;AAClG,qBAAOA,IAAI,CAACuD,WAAZ;AACF,aAFqD,CAAtD;AAtFc;AAEb;;AAvBG;AAAA;AAAA,mBAyBJ,oBAAQ;AACL,mBAAKI,eAAL,GAAuB,KAAvB;AACA,mBAAKC,WAAL,GAAmB,IAAI,yHAAJ,CAAkC,KAAK+B,WAAvC,EAAoD,KAAK5Q,aAAzD,CAAnB;AACF;AA5BG;AAAA;AAAA,mBA8BJ,2BAAkBoG,WAAlB,EAAsD;AACnD,mBAAKgM,kBAAL,GAA0BhM,WAA1B;;AACA,kGAAeL,iBAAf,CAAiC,KAAKqM,kBAAtC,EAA0D,KAAKtD,QAA/D,EAAyE,KAAK8B,WAA9E,EAA2F,KAAK5Q,aAAhG;AACF;AAjCG;AAAA;AAAA,mBAmCJ,qBAAYiL,IAAZ,EAAkC;AAC/B,qBAAOA,IAAI,CAACkB,MAAL,GAAc,IAAd,GAAqB,gDAAKC,IAAjC;AACF;AAED;;;;;AAvCI;AAAA;AAAA,mBA2CJ,wBAAenB,IAAf,EAAwCD,MAAxC,EAAmD;AAChDC,kBAAI,CAAChD,WAAL,GAAmB+C,MAAM,CAACqH,OAAP,GAAiB,oEAAY7J,UAA7B,GAA0C,oEAAYe,UAAzE;AACA0B,kBAAI,CAACgB,aAAL,GAAqBhB,IAAI,CAACvG,OAA1B;AACA,mBAAKjC,MAAL,CAAYmB,IAAZ;AACF;AA/CG;AAAA;AAAA,mBAiDJ,qCAA4BqH,IAA5B,EAAsE;AACnE;AACA,kBAAI,KAAKmH,kBAAL,KAA4B,mHAAwBjM,aAApD,IAAqE8E,IAAI,CAACkB,MAA9E,EAAsF;AACnF,uBAAOmG,SAAP;AACF;;AACD,qBAAO,KAAKC,sBAAL,CAA4BtH,IAA5B,IACD,4DAAY5E,SAAZ,CAAsB,mCAAtB,CADC,GAED,4DAAYA,SAAZ,CAAsB,qCAAtB,CAFN;AAGF;AAzDG;AAAA;AAAA,mBA2DJ,yCAAgC4E,IAAhC,EAA0E;AACvE,qBAAO,KAAKsH,sBAAL,CAA4BtH,IAA5B,IACD,gDAAKuH,sBADJ,GAC6B,gDAAKC,mBADzC;AAGF;AA/DG;AAAA;AAAA,mBAiEJ,yCAAgCxH,IAAhC,EAA0E;AACvE,qBAAO,KAAKsH,sBAAL,CAA4BtH,IAA5B,IACD,gDAAKsF,+BADJ,GACsC,gDAAKmC,4BADlD;AAEF;AApEG;AAAA;AAAA,mBAsEI,gCAAuBzH,IAAvB,EAAiE;AACtE,kBAAIA,IAAI,YAAY,8FAApB,EAAsC;AACnC,uBAAOA,IAAI,CAAC0H,mBAAZ;AACF,eAFD,MAEO,IAAI,KAAKP,kBAAL,KAA4B,mHAAwBnM,eAApD,IACF,CAAC,4DAAY/C,OAAZ,CAAoB+H,IAAI,CAACzH,aAAzB,CADH,EAC4C;AAChD,uBAAOyH,IAAI,CAACzH,aAAL,CAAmB,CAAnB,EAAsBmP,mBAA7B;AACF;;AACD,qBAAO,KAAP;AACF;AA9EG;;AAAA;AAAA,UAAuC,uFAAvC;;AACY,iCAAAlI,WAAA,GAAsB,iCAAtB;;OADZ;;;;;;;;;;;;;;;;;ACnBP;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAIA;;;;;;UAOamI,sB;AAHb;AAAA;;AAKG,eAAAC,QAAA,GAA+B,IAAI,0DAAJ,EAA/B;AASF;;;;iBANE,uBAAchJ,CAAd,EAA8B;AAC3BA,aAAC,CAACQ,cAAF;AACAR,aAAC,CAACU,wBAAF;AACAV,aAAC,CAACS,eAAF;AACA,iBAAKuI,QAAL,CAAcjP,IAAd;AACF;;;;;;;;;;;;;;;;;;;;;ACrBJ;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAMA;;;;;UAGakP,uB;AAaV,2CAAc;AAAA;;AACX,eAAKC,cAAL;AACF;;;;iBAED,yBAAgBhT,iBAAhB,EAAsD;AACnD,iBAAKgT,cAAL;;AADmD,yDAEhChT,iBAFgC;AAAA;;AAAA;AAEnD,wEAAsC;AAAA,oBAA3BiD,IAA2B;AACnC,qBAAKgQ,kBAAL,IAA2BhQ,IAAI,CAACiQ,eAAhC;AACA,qBAAKC,eAAL,IAAwBlQ,IAAI,CAACmQ,YAA7B;AACA,qBAAKC,mBAAL,IAA4BpQ,IAAI,CAACqQ,gBAAjC;AACA,qBAAKC,kCAAL,CAAwCtQ,IAAxC;AACF;AAPkD;AAAA;AAAA;AAAA;AAAA;AAQrD;;;iBAED,4BAAmBuQ,cAAnB,EAAsD;AAAA;;AACnD,iBAAKC,yBAAL;AACA,iBAAKC,qBAAL;AAEAF,0BAAc,CAACnQ,OAAf,CAAuB,UAACJ,IAAD,EAAU;AAC9B,oBAAI,CAAC0Q,kBAAL,IAA2B1Q,IAAI,CAAC2Q,WAAL,CAAiB,oEAAYrM,eAA7B,CAA3B;AACA,oBAAI,CAACsM,eAAL,IAAwB5Q,IAAI,CAAC2Q,WAAL,CAAiB,oEAAYhM,aAA7B,CAAxB;AACA,oBAAI,CAACkM,mBAAL,IAA4B7Q,IAAI,CAAC2Q,WAAL,CAAiB,oEAAYrM,eAA7B,CAA5B;AACA,oBAAI,CAACuM,mBAAL,IAA4B7Q,IAAI,CAAC2Q,WAAL,CAAiB,oEAAYhM,aAA7B,CAA5B;AACA,oBAAI,CAACkM,mBAAL,IAA4B7Q,IAAI,CAAC8Q,4BAAL,EAA5B;;AACA,oBAAI,CAACC,mCAAL,CAAyC/Q,IAAzC,EAN8B,CAQ9B;;;AACAA,kBAAI,CAACmC,mBAAL,GAA2B/B,OAA3B,CAAmC,UAACW,IAAD,EAA6B;AAC7D,oBAAIA,IAAI,CAACkE,WAAL,KAAqB,oEAAYX,eAArC,EAAsD;AACnD,wBAAI,CAAC0M,aAAL,GAAqBjQ,IAAI,CAACkI,aAA1B;AACF;AACH,eAJD;AAKF,aAdD;AAeF;;;iBAED,mCAA0BhE,WAA1B,EAAoD/G,KAApD,EAAiE;AAC9D,gBAAM+S,gBAAgB,GAAqB,KAAKC,kCAAL,CAAwCjM,WAAxC,CAA3C;AACAgM,4BAAgB,CAACP,kBAAjB,GAAsCxS,KAAtC;AACF;;;iBAED,yBAAa;AACV,mBAAO,KAAK2S,mBAAL,GAA2B,KAAKjN,iBAAL,EAAlC;AACF;;;iBAED,6BAAiB;AACd,mBAAO,KAAKW,kBAAL,CAAwB,oEAAYD,eAApC,IACC,KAAKC,kBAAL,CAAwB,oEAAYI,aAApC,CADD,GAEC,uDAAQwM,GAAR,CAAY,KAAKC,mBAAjB,EAAsC,UAACC,WAAD;AAAA,qBAAiBA,WAAW,CAACX,kBAA7B;AAAA,aAAtC,CAFR;AAGF;;;iBAED,iCAAqB;AAClB,iBAAKY,iBAAL,GAAyB,KAAzB;AACA,iBAAKC,qBAAL,GAA6B,KAA7B;AACF;;;iBAED,iBAAK;AACF,gBAAMpN,aAAa,GAA4B,IAAI2L,uBAAJ,EAA/C;AACA3L,yBAAa,CAAC6L,kBAAd,GAAmC,KAAKA,kBAAxC;AACA7L,yBAAa,CAAC+L,eAAd,GAAgC,KAAKA,eAArC;AACA/L,yBAAa,CAACiM,mBAAd,GAAoC,KAAKA,mBAAzC;AACAjM,yBAAa,CAACuM,kBAAd,GAAmC,KAAKA,kBAAxC;AACAvM,yBAAa,CAACyM,eAAd,GAAgC,KAAKA,eAArC;AACAzM,yBAAa,CAAC0M,mBAAd,GAAoC,KAAKA,mBAAzC;AACA1M,yBAAa,CAAC6M,aAAd,GAA8B,KAAKA,aAAnC;AACA7M,yBAAa,CAACmN,iBAAd,GAAkC,KAAKA,iBAAvC;AACAnN,yBAAa,CAACoN,qBAAd,GAAsC,KAAKA,qBAA3C;AACApN,yBAAa,CAACiN,mBAAd,GAAoC,KAAKA,mBAAzC;AACA,mBAAOjN,aAAP;AACF;;;iBAED,+BAAsBc,WAAtB,EAA8C;AAC3C,mBAAO,KAAKV,kBAAL,CAAwBU,WAAxB,IAAuC,KAAKuM,qBAAL,CAA2BvM,WAA3B,CAAvC,GAAiF,CAAxF;AACF;AAED;;;;;;iBAGA,+BAAsBA,WAAtB,EAA8C;AAC3C,gBAAIA,WAAW,KAAK,oEAAYN,aAAhC,EAA+C;AAC5C,qBAAO,KAAKuL,eAAZ;AACF,aAFD,MAEO,IAAIjL,WAAW,KAAK,oEAAYX,eAAhC,EAAiD;AACrD,qBAAO,KAAK0L,kBAAZ;AACF,aAFM,MAEA;AACJ,qBAAO,KAAKoB,mBAAL,CAAyBjT,GAAzB,CAA6B8G,WAA7B,IACC,KAAKmM,mBAAL,CAAyB/S,GAAzB,CAA6B4G,WAA7B,EAA0C+K,kBAD3C,GAEC,CAFR;AAGF;AACH;AAED;;;;;;iBAGA,4BAAmB/K,WAAnB,EAA2C;AACxC,oBAAQA,WAAR;AACG,mBAAK,oEAAYN,aAAjB;AACG,uBAAO,KAAKiM,eAAZ;;AACH,mBAAK,oEAAYtM,eAAjB;AACG,uBAAO,KAAKoM,kBAAZ;;AACH;AACG,uBAAO,KAAKU,mBAAL,CAAyBjT,GAAzB,CAA6B8G,WAA7B,IACD,KAAKmM,mBAAL,CAAyB/S,GAAzB,CAA6B4G,WAA7B,EAA0CyL,kBADzC,GAEC,CAFR;AANN;AAUF;AAED;;;;;;;;;;;iBAQA,6BAAoBzL,WAApB,EAA4C;AACzC,mBAAO,KAAKmM,mBAAL,CAAyBjT,GAAzB,CAA6B8G,WAA7B,IACD,KAAKmM,mBAAL,CAAyB/S,GAAzB,CAA6B4G,WAA7B,EAA0CwM,oBADzC,GACgE,CADvE;AAEF;;;iBAEO,0BAAc;AACnB,iBAAKzB,kBAAL,GAA0B,CAA1B;AACA,iBAAKE,eAAL,GAAuB,CAAvB;AACA,iBAAKE,mBAAL,GAA2B,CAA3B;AACA,iBAAKM,kBAAL,GAA0B,CAA1B;AACA,iBAAKE,eAAL,GAAuB,CAAvB;AACA,iBAAKC,mBAAL,GAA2B,CAA3B;AACA,iBAAKG,aAAL,GAAqB,KAArB;AACA,iBAAKM,iBAAL,GAAyB,KAAzB;AACA,iBAAKC,qBAAL,GAA6B,KAA7B;AACA,iBAAKH,mBAAL,GAA2B,IAAItT,GAAJ,EAA3B;AACF;;;iBAEO,qCAAyB;AAC9B,iBAAK4S,kBAAL,GAA0B,KAAKV,kBAA/B;AACA,iBAAKY,eAAL,GAAuB,KAAKV,eAA5B;AACA,iBAAKW,mBAAL,GAA2B,KAAKT,mBAAhC;AACA,iBAAKY,aAAL,GAAqB,KAArB;AACA,iBAAKU,uCAAL;AACF;;;iBAEO,4CAAmC1R,IAAnC,EAA0D;AAAA,yDACrC,2EAAiB+E,6BADoB;AAAA;;AAAA;AAC/D,wEAA0E;AAAA,oBAA/DE,WAA+D;AACvE,oBAAMgM,gBAAgB,GAAqB,KAAKC,kCAAL,CAAwCjM,WAAxC,CAA3C;AACA,oBAAM0M,sBAAsB,GAAqB3R,IAAI,CAAC4R,qBAAL,CAA2B3M,WAA3B,CAAjD;;AAEA,oBAAI0M,sBAAJ,EAA4B;AACzBV,kCAAgB,CAACY,oBAAjB,IAAyCF,sBAAsB,CAACE,oBAAhE;AACAZ,kCAAgB,CAACjB,kBAAjB,IAAuC2B,sBAAsB,CAAC3B,kBAA9D;AACF;AACH;AAT8D;AAAA;AAAA;AAAA;AAAA;AAUjE;;;iBAEO,6CAAoChQ,IAApC,EAA2D;AAAA,yDACtC,2EAAiB+E,6BADqB;AAAA;;AAAA;AAChE,wEAA0E;AAAA,oBAA/DE,WAA+D;AACvE,oBAAM0M,sBAAsB,GAAqB3R,IAAI,CAAC4R,qBAAL,CAA2B3M,WAA3B,CAAjD;;AAEA,oBAAI0M,sBAAJ,EAA4B;AACzB,sBAAMP,mBAAmB,GAAqB,KAAKA,mBAAL,CAAyB/S,GAAzB,CAA6B4G,WAA7B,CAA9C;AACAmM,qCAAmB,CAACK,oBAApB,IAA4CE,sBAAsB,CAACF,oBAAnE;AACAL,qCAAmB,CAACV,kBAApB,IAA0CiB,sBAAsB,CAACjB,kBAAjE;AACF;AACH;AAT+D;AAAA;AAAA;AAAA;AAAA;AAUlE;;;iBAEO,4CAAmCzL,WAAnC,EAA2D;AAChE,gBAAI,KAAKmM,mBAAL,CAAyBjT,GAAzB,CAA6B8G,WAA7B,CAAJ,EAA+C;AAC5C,qBAAO,KAAKmM,mBAAL,CAAyB/S,GAAzB,CAA6B4G,WAA7B,CAAP;AACF;;AAED,gBAAMmM,mBAAmB,GAAqB,IAAI,6FAAJ,EAA9C;AACA,iBAAKA,mBAAL,CAAyBhT,GAAzB,CAA6B6G,WAA7B,EAA0CmM,mBAA1C;AACA,mBAAOA,mBAAP;AACF;;;iBAEO,mDAAuC;AAC5C,mEAAQhR,OAAR,CAAgB,KAAKgR,mBAArB,EAA0C,UAACU,OAAD,EAAa;AACpDA,qBAAO,CAACL,oBAAR,GAA+BK,OAAO,CAACD,oBAAvC;AACAC,qBAAO,CAACpB,kBAAR,GAA6BoB,OAAO,CAAC9B,kBAArC;AACF,aAHD;AAIF;;;;;;;;;;;;;;;;;;;;;AC1MJ;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;UAOa+B,iB;;;;;AAAb;AAAA;;AAAA;;;AAGa,kBAAAC,oBAAA,GAAsC,wEAAc7R,IAApD;AA4BF,kBAAA8R,YAAA,GAAuB,CAAvB;AA/BX;AAgIC;;;;;AA/GE;;;AAGA,yBAAiB;AACd,mBAAO,KAAKC,cAAZ;AACF;AAED;;;;eAnBA,aAAkB5R,KAAlB,EAA6C;AAC1C,iBAAK4R,cAAL,GAAsB5R,KAAtB;AACA,iBAAK2E,WAAL,GAAmB,KAAKkN,qBAAL,EAAnB;AAEA,iBAAKF,YAAL,GAAoB,CAApB;;AACA,gBAAI,KAAKzR,aAAT,EAAwB;AAAA,2DACF,KAAKA,aADH;AAAA;;AAAA;AACrB,0EAAuC;AAAA,sBAA5BO,IAA4B;AACpC,uBAAKkR,YAAL,IAAqBlR,IAAI,CAACiM,WAA1B;AACF;AAHoB;AAAA;AAAA;AAAA;AAAA;AAIvB;AACH;;;eAYD,eAAoB;;;AACjB,mBAAO,YAAKkF,cAAL,MAAmB,IAAnB,IAAmB,aAAnB,GAAmB,MAAnB,GAAmB,GAAE9P,MAArB,IAA8B,CAArC;AACF;;;eAID,eAAe;AACZ,mBAAO,KAAK6P,YAAZ;AACF;AAED;;;;;;eAGA,eAAe;AACZ,mBAAO,KAAKlF,YAAZ;AACF,W;eAED,aAAgBqF,QAAhB,EAAuC;AACpC,iBAAKrF,YAAL,GAAoBqF,QAApB;;AACA,gBAAI,KAAKrF,YAAL,KAAsB,oEAAY1E,MAAtC,EAA8C;AAC3C,mBAAKgK,yBAAL;AACF;AACH;AAED;;;;;;;iBAIA,qCAAyB;AACtB,gBAAI,CAAC,KAAK7R,aAAV,EAAyB;AACtB;AACF;;AAHqB,yDAIH,KAAK4N,+BAJF;AAAA;;AAAA;AAItB,wEAAyD;AAAA,oBAA9CrN,IAA8C;AACtDA,oBAAI,CAACkE,WAAL,GAAmB,KAAKA,WAAxB;AACF;AANqB;AAAA;AAAA;AAAA;AAAA;AAOxB;AAED;;;;;;iBAGA,2BAAkBxC,aAAlB,EAA8C;AAC3C,iBAAKuP,oBAAL,GAA4BvP,aAA5B;AACA,iBAAKwC,WAAL,GAAmB,KAAKkN,qBAAL,EAAnB;AACF;;;iBAEO,iCAAqB;AAC1B,gBAAIlF,cAAc,GAAgB,oEAAY1G,UAA9C;AACA,gBAAMjG,KAAK,GAAuB,KAAK8N,+BAAvC;;AAEA,gBAAI9N,KAAK,CAAC8B,MAAN,GAAe,CAAnB,EAAsB;AACnB6K,4BAAc,GAAG3M,KAAK,CAAC,CAAD,CAAL,CAAS2E,WAA1B;;AADmB,2DAGA3E,KAHA;AAAA;;AAAA;AAGnB,0EAA0B;AAAA,sBAAfS,IAAe;;AACvB,sBAAIkM,cAAc,KAAKlM,IAAI,CAACkE,WAA5B,EAAyC;AACtCgI,kCAAc,GAAG,oEAAY5E,MAA7B;AACA;AACF;AACH;AARkB;AAAA;AAAA;AAAA;AAAA;AASrB;;AACD,mBAAO4E,cAAP;AACF;AAED;;;;;;;eAIA,eAAmC;AAAA;;AAChC,gBAAI,CAAC,KAAKzM,aAAN,IAAuB,CAAC,KAAKA,aAAL,CAAmB4B,MAA/C,EAAuD;AACpD,qBAAO,EAAP;AACF;;AAED,mBAAO,KAAK5B,aAAL,CAAmBwE,MAAnB,CAA0B,UAAAjE,IAAI,EAAI;AACtC,sBAAQ,OAAI,CAACiR,oBAAb;AACG,qBAAK,wEAAc7R,IAAnB;AACG,yBAAO,OAAI,CAACmS,cAAL,CACD,2EAAiBC,sBADhB,EAED,2EAAiBC,kBAFhB,EAGDzR,IAHC,CAAP;;AAIH,qBAAK,wEAAc0R,WAAnB;AACG,yBAAO,OAAI,CAACH,cAAL,CACD,2EAAiBI,gBADhB,EAED,2EAAiBzG,yBAFhB,EAGDlL,IAHC,CAAP;;AAIH;AACG,yBAAO,KAAP;AAZN;AAcF,aAfM,CAAP;AAgBF;;;iBAED,wBACM4R,uBADN,EAEMC,uBAFN,EAGM7R,IAHN,EAG4B;AACzB,gBAAM8R,0BAA0B,GAAY,CAACF,uBAAuB,CAAC5R,IAAI,CAACkE,WAAN,CAApE;AAEA,gBAAM6N,yBAAyB,GACzBF,uBAAuB,CAACG,IAAxB,CACM,UAAA9N,WAAW;AAAA,qBAAIlE,IAAI,CAACgL,oBAAL,IAA6BhL,IAAI,CAACgL,oBAAL,CAA0BzD,QAA1B,CAAmCrD,WAAnC,CAAjC;AAAA,aADjB,CADN;AAIA,mBAAO4N,0BAA0B,IAAIC,yBAArC;AACF;;;;QA/HmC,0E;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;uECNvC,4J,IAAqD,6E,GAAA,wD,GAAA,I,EAAA;AAAA;;AAAA;AAA8B,S;AAAA;;;uEAEhF,+W,GAAA;AAAA;AAAA;AAAA,gB,GAGwC,+E,IACxC;AAAA;AADiB,6BAAsB,aAAtB;AADA;;AAFjB,wBAGiB,SAHjB,EAEiB,SAFjB;AAEqC,S,EAAA,I;AAAA;;;uEAczB,yH,IAAyC,I,EAAA,I;AAAA;;;uEAD5C,wU,GAAA,0V,EAAA,gY,GAAwE,wF,IACrE,kH,GAAA;AAAA;AAAA,gB,GAAwD,qF,IAC3D;AADiB;;AAAd,wBAAc,SAAd;AAAwC,S,EAAA,I;AAAA;;;uEAP9C,mT,GAAA,oK,EAAA,iS,EAAA;AAAA;AAAA,U,EAAA;AAAA;AAAA,U,EAAA,qK,GAAsD,qF,IACnD;AAAA;AAAA;;AAAA;;;;;AAEQ;;;;;AAFR;AAAA,sB,GAAA;AAAA;AAAA,gB,EAAA,gY,GAEqD,6G,IAE5C,qF,IACT,kH,GAAA;AAAA;AAAA,gB,GAEkB,kF,IACrB;AAAA;;AARW;;AAAR,wBAAQ,SAAR;;AAKiB,uDAAsD,sBAAtD;;AAAjB,yBAAiB,UAAjB;AAAuE,S,EAAA;AAAA;AALvE;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAEqD;;AAAA;AAErD,S;AAAA;;;uEANN,8U,GAAA,mK,EAAA,6M,EAAA,qK,EAAA,sK,EAAA,4a,EAAA;AAAA;AAAA,U,EAAA,uJ,GAA4C,qF,IACzC,qH,GAAA;AAAA;AAAA,gB,GASU,kF,IACb;AAAA;AAVY,6BAA4C,eAA5C;;AAAT,yBAAS,SAAT;AAAqD,S,EAAA;AADxD;;AAAA;AAA4C,S;AAAA;;;uEAczC,yH,IAAyC,I,EAAA,I;AAAA;;;uEAD5C,yH,IAAgD,qF,IAC7C,sH,GAAA;AAAA;AAAA,gB,GAAwD,kF,IAC3D;AADiB;;AAAd,wBAAc,SAAd;AAAwC,S,EAAA,I;AAAA;;;uEAf9C,yH,IAAuD,kF,IACpD,qH,GAAA;AAAA;AAAA,gB,GAWW,oF,IAEX,qH,GAAA;AAAA;AAAA,gB,GAEe,+E,IAClB;AAAA;AAhBa;;AAAV,wBAAU,SAAV;;AAac;;AAAd,wBAAc,SAAd;AAA+C,S,EAAA,I;AAAA;;;uEAM/C,yH,IAA0C,I,EAAA,I;AAAA;;;uEAD7C,yH,IAAsD,kF,IACnD,sH,GAAA;AAAA;AAAA,gB,GAAyD,+E,IAC5D;AADiB;;AAAd,wBAAc,SAAd;AAAyC,S,EAAA,I;AAAA;;;uEAKtC,yH,IAAuC,I,EAAA,I;AAAA;;;uEAD1C,yH,IAAmE,qF,IAChE,sH,GAAA;AAAA;AAAA,gB,GAAsD,kF,IACzD;AADiB;;AAAd,wBAAc,SAAd;AAAsC,S,EAAA,I;AAAA;;;uEAGtC,yH,IAAuC,I,EAAA,I;AAAA;;;uEAD1C,yH,IAA0E,qF,IACvE,sH,GAAA;AAAA;AAAA,gB,GAAsD,kF,IACzD;AADiB;;AAAd,wBAAc,SAAd;AAAsC,S,EAAA,I;AAAA;;;uEAGtC,yH,IAAuC,I,EAAA,I;AAAA;;;uEAD1C,yH,IAAmE,qF,IAChE,sH,GAAA;AAAA;AAAA,gB,GAAsD,kF,IACzD;AADiB;;AAAd,wBAAc,SAAd;AAAsC,S,EAAA,I;AAAA;;;uEARvB,kF,IAClB,sH,GAAA;AAAA;AAAA,gB,GAEe,kF,IACf,sH,GAAA;AAAA;AAAA,gB,GAEe,kF,IACf,sH,GAAA;AAAA;AAAA,gB,GAEe,+E,IAClB;AAAA;AATiB,2DAAoD,cAApD,CAAoD,IAApD;;AAAd,wBAAc,SAAd;;AAGc,2DAA2D,cAA3D,CAA2D,WAA3D;;AAAd,wBAAc,SAAd;;AAGc,2DAAoD,cAApD,CAAoD,IAApD;;AAAd,wBAAc,SAAd;AAAkE,S,EAAA,I;AAAA;;;uEAKlD,kF,IAChB;AAAA;AAAA,sBAGyC,UAHzC;;AAGqB;;;;;AAHrB;AAAA,kN,GAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,U,GAGyC,kF,IACnB,+E,IACzB;AAAA;AALwB,6BAAuC,kBAAvC;AACA,6BAA+B,cAA/B;AACA,6BAA6B,aAA7B;;AAFrB,wBAAqB,SAArB,EACqB,SADrB,EAEqB,SAFrB;AAEkD,S,EAAA,I;AAAA;;;uEAK/B,kF,IACnB;AAAA;AAAA,sBAG6C,UAH7C;;AAGyB;;;;;AAHzB;AAAA,gO,GAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,U,GAG6C,kF,IACnB,+E,IAC7B;AAAA;AAL4B,6BAAiC,kBAAjC;AACA,6BAA+B,cAA/B;AACA,6BAA6B,aAA7B;;AAFzB,wBAAyB,SAAzB,EACyB,SADzB,EAEyB,SAFzB;AAEsD,S,EAAA,I;AAAA;;;uEAKtC,kF,IAChB;AAAA;AAAA,sBAGgD,UAHhD;;AAG4B;;;;;AAH5B;AAAA,8O,GAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,U,GAGgD,kF,IACnB,+E,IAChC;AAAA;AAL+B,6BAAuC,kBAAvC;AACA,6BAA+B,cAA/B;AACA,6BAA6B,aAA7B;;AAF5B,wBAA4B,SAA5B,EAC4B,SAD5B,EAE4B,SAF5B;AAEyD,S,EAAA,I;AAAA;;;uEAKzC,kF,IAChB;AAAA;AAAA,sBACyC,UADzC;;AACqB;;;;;AADrB;AAAA,oN,GAAA;AAAA;AAAA;AAAA;AAAA,U,GACyC,kF,IACnB,+E,IACzB;AAAA;AAHwB,6BAAuC,kBAAvC;;AAArB,wBAAqB,SAArB;AAA4D,S,EAAA,I;AAAA;;;uEApElE,0H,IAA+B,+E,IAC5B,qH,GAAA;AAAA;AAAA,gB,GAIkB,iF,IAElB,oW,GAAA;AAAA;AAAA,gB,GAAiG,+E,IACjG,qH,GAAA;AAAA;AAAA,gB,GAiBe,iF,IAEf,sH,GAAA;AAAA;AAAA,gB,GAEe,iF,IAEf,0H,IAUc,iF,IAEd,wH,IAMc,iF,IAEd,2H,IAMc,iF,IAEd,wH,IAMc,iF,IAEd,wH,IAIc,iF,IAEd;AAAA;AAAA,sBAMsD,UANtD;;AAMM;;;;;AANN;AAAA,8N,GAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,U,GAMsD,+E,IAC9B,4E,IAC3B;AAAA;AA/EoB,6BAAoB,aAApB;;AADjB,wBACiB,SADjB;;AAM2B,6BAAyC,wBAAzC;;AAA3B,wBAA2B,SAA3B;;AACc,8BAAwC,eAAxC,CAAwC,gBAAxC;;AAAd,wBAAc,SAAd;;AAmBc,6BAAuC,eAAvC,CAAuC,gBAAvC;;AAAd,yBAAc,SAAd;;AAkDM,6BAAiC,eAAjC;AACA,6BAAmD,wBAAnD;AAHA,6BAAmC,aAAnC;AACA,6BAA+B,kBAA/B;;AAHN,yBAIM,SAJN,EAKM,SALN,EAEM,SAFN,EAGM,SAHN;AAGqC,S,EAAA,I;AAAA;;;4MA9E0B,4E,IAClE,qH,GAAA;AAAA;AAAA,gB,GAAyF,4E,IACzF,qH,GAAA;AAAA;AAAA,gB,GAiFe,gF,IAGf;AAAA;AArFK,6BAAe,QAAf;;AAAL,wBAAK,SAAL;;AACc,8BAAgB,QAAhB;;AAAd,wBAAc,SAAd;AAA8B,S,EAAA,I;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACO9B;AAAA;;;AAAA;AAAA;AAAA;;AAAO,UAAOE,iBAAP;;AAAP,iBAAcA,iBAAd,EAA+B;AAAA,YAClB3Q,OADkB;AAAA;AAAA,YAQ7B;;;AALQ,gBAAAC,MAAA,GAAS,UAACvB,IAAD,EAAYkE,WAAZ,EAAsCgE,aAAtC,EAAoF;AACjG,iBAAO;AAAElI,gBAAI,EAAEA,IAAR;AAAckE,uBAAW,EAAEA,WAA3B;AAAwCgE,yBAAa,EAAEA;AAAvD,WAAP;AACF,SAFM;;AAFG,0BAAA5G,OAAA,GAAO,OAAP;AASZ,OAVD,EAAc2Q,iBAAiB,KAAjBA,iBAAiB,MAA/B,E,CAUE;;;;;;;;;;;;;;;;;;ACTF;AAAA;;;AAAA;AAAA;AAAA;;AAAO,UAAOC,6BAAP;;AAAP,iBAAcA,6BAAd,EAA2C;AAAA,YAC9B5Q,OAD8B;AAAA;AAAA,YAQzC;;;AALQ,gBAAAC,MAAA,GAAS,UAACnF,UAAD,EAAkB+V,OAAlB,EAAgC5S,KAAhC,EAA4D0B,mBAA5D,EAA4H;AACzI,iBAAO;AAAE7E,sBAAU,EAAEA,UAAd;AAA0B+V,mBAAO,EAAEA,OAAnC;AAA4C5S,iBAAK,EAAEA,KAAnD;AAA0D0B,+BAAmB,EAAEA;AAA/E,WAAP;AACF,SAFM;;AAFG,sCAAAK,OAAA,GAAO,OAAP;AASZ,OAVD,EAAc4Q,6BAA6B,KAA7BA,6BAA6B,MAA3C,E,CAUE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;uECSC,ub,GAAA,8M,EAAA,uY,EAAA,iV,EAAA,qf,EAAA;AAAA;AAAA,U,EAAA,iU,EAAA,sK,EAAA,6gB,GAAwG,+E,IACrG,uU,GAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gB,EAGkB,yD,GAAqD,kF,IACpD,4E,IACtB,4E,IAAA;AAAA;;AANA;;AAIqB;;AADA,6BAAoC,oBAApC;AADA,6BAAyB,SAAzB;AADA;;AAAlB,yBAGkB,SAHlB,EAEkB,SAFlB,EACkB,SADlB,EAAkB,SAAlB;AAA0C,S,EAAA;AAD7C;;AAAA;;AAAA;AAAwG,S;AAAA;;;uEAOxG,ub,GAAA,8M,EAAA,uY,EAAA,iV,EAAA,qf,EAAA;AAAA;AAAA,U,EAAA,iU,EAAA,sK,EAAA,6gB,GAA0G,+E,IACvG,uU,GAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gB,EAGkB,yD,GAA4C,kF,IAC3C,4E,IACtB,4E,IAAA;AAAA;;AANA;;AAIqB;;AADA,6BAA+B,eAA/B;AADA,6BAAyB,SAAzB;AADA;;AAAlB,yBAGkB,SAHlB,EAEkB,SAFlB,EACkB,SADlB,EAAkB,SAAlB;AAA0C,S,EAAA;AAD7C;;AAAA;;AAAA;AAA0G,S;AAAA;;;uEAO1G,6Z,GAAA,8M,EAAA,uY,EAAA,iV,EAAA,qf,EAAA;AAAA;AAAA,U,EAAA,iU,EAAA,sK,EAAA,6gB,GAAoC,+E,IACjC,uU,GAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gB,EAGkB,yD,GAAqD,kF,IACpD,4E,IACtB,4E,IAAA;AAAA;;AANA;;AAIqB;;AADA,6BAAoC,oBAApC;AADA,6BAAyB,SAAzB;AADA;;AAAlB,yBAGkB,SAHlB,EAEkB,SAFlB,EACkB,SADlB,EAAkB,SAAlB;AAA+C,S,EAAA;AADlD;;AAAA;;AAAA;AAAoC,S;AAAA;;;uEAOpC,6Z,GAAA,8M,EAAA,uY,EAAA,iV,EAAA,qf,EAAA;AAAA;AAAA,U,EAAA,iU,EAAA,sK,EAAA,6gB,GAAoC,+E,IACjC,uU,GAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gB,EAGkB,yD,GAAmD,kF,IAClD,4E,IACtB,4E,IAAA;AAAA;;AANA;;AAIqB;;AADA,6BAAkC,kBAAlC;AADA,6BAAyB,SAAzB;AADA;;AAAlB,yBAGkB,SAHlB,EAEkB,SAFlB,EACkB,SADlB,EAAkB,SAAlB;AAA6C,S,EAAA;AADhD;;AAAA;;AAAA;AAAoC,S;AAAA;;;uEAiB9B,0I,GAAA,oJ,EAAA,8O,GAAuE,I,EAAA;AAAxC,4BAAuC,OAAvC,CAAuC,OAAvC,CAAuC,SAAvC,CAAuC,IAAvC,CAAuC,eAAvC;;AAA/B,wBAA+B,SAA/B;AAAsE,S;AAAA;;;uEAEnE,2I,GAAA;AAAA;AAAA,gB,EAAA;AAAA;AAAA,gB,GAEoD,4G,IAEpD;AAHQ;;AADR,wBACQ,SADR;;AACQ;;AADR,wBACQ,SADR;AAC0B,S,EAAA;AAAA;AAClB,oDAA2C,OAA3C,CAA2C,OAA3C,CAA2C,SAA3C,CAA2C,IAA3C,CAA2C,WAA3C;;AAFR,wBAEQ,SAFR;;AAEoD;;AAAA;AAEpD,S;AAAA;;;uEAMA,+c,GAAA;AAAA;AAAA,gB,GAA6C,wF,IAC1C,sJ,IAAkC,6E,IAAoC,qF,IACzE;AAFgC;;AAAhC,wBAAgC,SAAhC;AAA4C,S,EAAA;AAAA;AAA5C;AAAA;AAAA;;AAAA;;AAAA;;AAAA;;AACqC;;AAAA;AAA6B,S;AAAA;;;uEAHrE,iV,GAAA,iL,EAAA,oK,EAAA,8I,EAAA,6M,EAAA,qK,GAAwD,qF,IACrD;AAAA;;AAAA;;;;;;;;;;;;;;;;;;;;;SAAA,E,IAAA,E,IAAA,C,ypBAA0E,qF,IAC1E,oH,GAAA;AAAA;AAAA,gB,GAEsB,kF,IACzB;AAHwB;;AAArB,yBAAqB,SAArB;AAA+B,S,EAAA;AAFlC;;AAAA;;AACG;;AAAA;;AAAA;;AAAA;AAA+D,S;AAAA;;;uEAQ/D,2I,GAAA;AAAA;AAAA,gB,EAAA;AAAA;AAAA,gB,GAEiD,4G,IAEjD;AAHQ;;AADR,wBACQ,SADR;;AACQ;;AADR,wBACQ,SADR;AACwB,S,EAAA;AAAA;AAChB,qDAAwC,OAAxC,CAAwC,MAAxC,CAAwC,OAAxC,CAAwC,SAAxC,CAAwC,IAAxC,CAAwC,SAAxC;;AAFR,wBAEQ,SAFR;;AAEiD;;AAAA;AAEjD,S;AAAA;;;uEAPH;AAAA;AAAA;;AAAA;;;;;;;;;;AAEQ;;;;;AAFR;AAAA,sB,GAAA,kY,EAAA,wN,EAAA,6U,GAE2C,wF,IACxC,wH,GAAA;AAAA;AAAA,gB,GAIS,qF,IACZ,4E,IAAA;AARA;;AAGW,4BAAgD,OAAhD,CAAgD,OAAhD,CAAgD,SAAhD,CAAgD,IAAhD,CAAgD,kBAAhD;;AAAR,wBAAQ,SAAR;AAAwD,S,EAAA;AAH3D;;AAAA;;AAAA;AAE2C,S;AAAA;;;uEAQ9C,ygB,GAAA,uN,EAAA;AAAA;AAAA,U,EAAA,oU,EAAA,wN,EAAA,sf,GAAkG,6F,IAElG,4E,IAAA;AAFA;;AAAA;AAAA,S,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAkG;;AAAA;AAElG,S;AAAA;;;uEAEG,0I,GAAA,oJ,EAAA,8O,GAA6E,I,EAAA;AAAA;;AAArC,4CAAoC,OAApC,CAAoC,MAApC,CAAoC,OAApC,CAAoC,SAApC,CAAoC,IAApC;;AAAxC,wBAAwC,SAAxC;AAA4E,S;AAAA;;;uEAD/E,ygB,GAAA,uN,EAAA;AAAA;AAAA,U,EAAA,oU,EAAA,wN,EAAA,sf,GAAoG,kF,IACjG,qH,GAAA;AAAA;AAAA,gB,GAAwF,6F,IAE3F,4E,IAAA;AAAA;;AAHA;;AAAA;;AACa,4CAA6B,OAA7B,CAA6B,OAA7B,CAA6B,SAA7B,CAA6B,IAA7B;;AAAV,wBAAU,SAAV;AAAuC,S,EAAA;AAD1C;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAC2F;;AAAA;AAE3F,S;AAAA;;;uEACA,ma,GAAA,uN,EAAA;AAAA;AAAA,U,EAAA,oU,GAAkC,0E,IAA0B,4E,IAAA;AAA5D;AAAA,S,EAAA;AAAA;AAAA;;AAAA;;AAAkC;;AAAA;AAA0B,S;AAAA;;;uEAC5D,ma,GAAA,uN,EAAA;AAAA;AAAA,U,EAAA,oU,GAAkC,0E,IAAwB,4E,IAAA;AAA1D;AAAA,S,EAAA;AAAA;AAAA;;AAAA;;AAAkC;;AAAA;AAAwB,S;AAAA;;;uEA3C7D;AAAA;AAAA,sBAEgD,UAFhD;;AAEY;;;;;AAFZ;AAAA,4N,GAAA,yK,EAAA,sL,EAAA,qK,EAAA,2rB,EAAA;AAAA;AAAA,U,EAAA,gN,EAAA;AAAA;AAAA,U,EAAA,wV,EAAA,wV,GAEgD,kF,IAC7C,wgB,GAAA,wN,EAAA;AAAA;AAAA,U,EAAA,qU,EAAA,wN,EAAA,uf,GAA6B,kF,IAC1B,4U,GAAA;AAAA;AAAA,gB,GAAuC,kF,IACvC,wI,GAAA,qJ,EAAA,+O,GAAmD,kF,IACnD,uH,IAAM,8E,IAAwB,+E,IACnB,kF,IACd,8b,GAAA,wN,EAAA;AAAA;AAAA,U,EAAA,qU,GAAmC,kF,IAChC,oH,GAAA;AAAA;AAAA,gB,GAAkF,kF,IAClF;AAAA;AAAA;;AAAA;;;;;;;;;;AAA4C;;;;;AAA5C;AAAA,sB,GAAA,mY,EAAA,wN,EAAA,8U,GAA2F,wF,IACxF,uH,GAAA;AAAA;AAAA,gB,GAIS,qF,IACH,+E,IACE,kF,IACd,0c,GAAA,wN,EAAA;AAAA;AAAA,U,EAAA,qU,GAA+C,kF,IAC5C,oH,GAAA;AAAA;AAAA,gB,GAKc,kF,IACd,qH,GAAA;AAAA;AAAA,gB,GAQS,+E,IACE,kF,IACd,qH,GAAA;AAAA;AAAA,gB,GAEc,kF,IACd,qH,GAAA;AAAA;AAAA,gB,GAGc,kF,IACd,qH,GAAA;AAAA;AAAA,gB,GAA0E,kF,IAC1E,qH,GAAA;AAAA;AAAA,gB,GAAwE,+E,IAC3E,4E,IAAA;AAAA;;AA5CA;;AAGG;;AAAA;;AACgB,4BAAW,QAAX,CAAW,SAAX;;AAAb,yBAAa,SAAb;;AAIH;;AACa,8BAAoB,aAApB;;AAAV,yBAAU,UAAV;;AACA;;AACW,iDAAgD,QAAhD,CAAgD,SAAhD,CAAgD,IAAhD;;AAAR,yBAAQ,UAAR;;AAON;;AACgB,0DAA0C,QAA1C,CAA0C,SAA1C,CAA0C,IAA1C;;AAAb,yBAAa,UAAb;;AAMkC,6BAA+B,QAA/B,CAA+B,SAA/B,CAA+B,IAA/B,CAA+B,cAA/B;;AAAlC,yBAAkC,UAAlC;;AAUU,yDAAoE,wBAApE,CAAoE,aAApE;;AAAb,yBAAa,UAAb;;AAGa,yDAAsE,wBAAtE,CAAsE,eAAtE;;AAAb,yBAAa,UAAb;;AAIa,8BAAoB,aAApB;;AAAb,yBAAa,UAAb;;AACa,8BAAoB,aAApB;;AAAb,yBAAa,UAAb;AAAiC,S,EAAA;AAAA;;AA1CxB,8CAA8C,QAA9C,CAA8C,SAA9C;;AADZ;;AAAA;;AAAA;;AAAA,wBACY,SADZ;;AAGG;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAEa,6BAA6B,QAA7B,CAA6B,SAA7B,CAA6B,IAA7B,CAA6B,KAA7B;;AAAV,yBAAU,UAAV;;AACM;;AAAA;;AAET;AAAA;;AAAA;;AAEG;;AAAA;;AAAA;;AAQH;AAAA;;AAAA;AAA+C,S;AAAA;;;uEAqCrD;AAAA;AAAA;;AAAA;;;;;AAIK;;;;;AAJL;AAAA,sB,GAAA;AAAA;AAAA,U,GAIsC,+E,IACnC,sK,IAAwC,kF,IACrC,mJ,IAA2B,qF,IACxB,yI,IAAiD,wF,IAC9C,wK,IAA2C,6G,IAEtC,qF,IACF,qF,IACN;AAAA;;AAAA;;;;;;;;;;;SAAA,E,IAAA,E,IAAA,C,uJAAkE,uG,IAE5D,qF,IACN,kJ,IAA0B,wF,IACvB;AAAA;AAAA,sBAGuC,UAHvC;;AAGQ;;;;;AAHR;AAAA,sB,IAGuC,6G,GAAA,yD,GAE9B,wF,IACT;AAAA;AAAA,sBAG+C,UAH/C;;AAGQ;;;;;AAHR;AAAA,sB,IAG+C,6G,GAAA,yD,GAEtC,qF,IACN,kF,IACH,+E,IACH,4E,IACT,I,EAAA;AAAA;;AAxBc;;AAAL,wBAAK,SAAL;;AAC8C;;AAAA;;AAIvB;;AAAvB;;AAAA,yBAAuB,SAAvB;;AAAkE;;AAAA;;AAOxB;;AAAA;;AAMQ;;AAAA;AAE/C,S;AAAA;;;uEAKZ,oM,IAEwB,4E,IACxB,I,EAAA,I;AAAA;;;4MApJkE,4E,IAClE,kJ,IAA2B,6E,GAAA,wD,GAAqE,4E,IAC/D,4E,IACjC,4I,IAAqB,+E,IAClB;AAAA;AAAA,sBACiF,UADjF;;AACiC;;;;;AADjC;AAAA,0R,GAAA;AAAA;AAAA,U,GACiF,+E,IAC/C,4E,IAC/B,8E,IAEyB,4E,IAC/B,2Z,GAAA,qK,EAAA,qK,EAAA,qN,EAAA,uQ,EAAA,qN,EAAA,yT,EAAA,qK,EAAA,qN,EAAA,6T,EAAA,qK,EAAA,2W,EAAA,wN,EAAA,oK,EAAA;AAAA;AAAA,gB,EAAA;AAAA;AAAA,U,EAAA;AAAA;AAAA,U,EAAA;AAAA;AAAA,U,EAAA;AAAA;AAAA,U,EAAA,8N,EAAA,8N,EAAA,qK,EAAA,8mB,EAAA;AAAA;AAAA,U,EAAA;AAAA;AAAA,U,EAAA,4J,EAAA,yV,EAAA,yV,GAAwE,+E,IAC7C,+E,IACxB,wb,GAAA,8M,EAAA,uY,EAAA,iV,EAAA,sf,EAAA;AAAA;AAAA,U,EAAA,iU,EAAA,sK,EAAA,8gB,GAAmC,+E,IAChC,uU,GAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gB,GAG4C,kF,IACzB,4E,IACN,+E,IAChB,8Z,GAAA,8M,EAAA,uY,EAAA,iV,EAAA,sf,EAAA;AAAA;AAAA,U,EAAA,iU,EAAA,sK,EAAA,8gB,GAAe,wF,GAAA,yD,GAEC,+E,IAChB,8Z,GAAA,8M,EAAA,uY,EAAA,iV,EAAA,sf,EAAA;AAAA;AAAA,U,EAAA,iU,EAAA,sK,EAAA,8gB,GAAe,+E,IACZ,uU,GAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gB,EAGkB,yD,GAAiD,kF,IAChD,4E,IACN,+E,IAChB,uH,GAAA;AAAA;AAAA,gB,GAMgB,+E,IAChB,uH,GAAA;AAAA;AAAA,gB,GAMgB,+E,IAChB,uH,GAAA;AAAA;AAAA,gB,GAMgB,+E,IAChB,uH,GAAA;AAAA;AAAA,gB,GAMgB,+E,IACS,+E,IACzB,uH,GAAA;AAAA;AAAA,gB,GA4Ca,iF,IAEW,+E,IACxB,uW,GAAA,2S,EAAA;AAAA;AAAA,U,GAAe,+E,IACZ,8W,GAAA;AAAA;AAAA,gB,EAAA;AAAA;AAAA,U,GAA4E,+F,IAExD,4E,IACP,4E,IACJ,8E,IAE0B,4E,IACzC,wH,GAAA;AAAA;AAAA,gB,GA+BM,4E,IACN,wH,GAAA;AAAA;AAAA,gB,GAEwB;AAAA;;AA/IrB;;AAMW,6BAAgC,gBAAhC;;AAAd,yBAAc,SAAd;;AAEG;;AAIqB,6BAAyB,gBAAzB;AADA,6BAA2B,WAA3B;AADA,6BAAyB,SAAzB;AADA;;AAAlB,yBAGkB,SAHlB,EAEkB,SAFlB,EACkB,SADlB,EAAkB,SAAlB;;AAMH;;AAGA;;AAIqB;;AADA,8BAAgC,gBAAhC;AADA,8BAAyB,SAAzB;AADA;;AAAlB,yBAGkB,UAHlB,EAEkB,UAFlB,EACkB,UADlB,EAAkB,UAAlB;;AAMY,yDAAoE,wBAApE,CAAoE,aAApE;;AAAf,yBAAe,UAAf;;AAOe,yDAAsE,wBAAtE,CAAsE,eAAtE;;AAAf,yBAAe,UAAf;;AAOe,8BAAoB,aAApB;;AAAf,yBAAe,UAAf;;AAOe,8BAAoB,aAApB;;AAAf,yBAAe,UAAf;;AAQY,8BAAsC,SAAtC,CAAsC,IAAtC;;AAAZ,0BAAY,UAAZ;;AAgDsB,8BAAwD,eAAxD,CAAwD,uBAAxD;;AAAnB,0BAAmB,UAAnB;;AAOD,8BAAmB,YAAnB;;AAAL,0BAAK,UAAL;;AAgCK,8BAAmB,YAAnB;;AAAL,0BAAK,UAAL;AAAwB,S,EAAA;AAAA;;AAhJG;;AAAA;;AAS3B;;AAAA;;AAAA;;AAEG;;AAAA;;AAAA;;AAOA;;AAAA;;AAAA;;AAAe;;AAAA;;AAGf;;AAAA;;AAAA;;AAmFA;;AAAA;;AACG;;AAAA;;AAA4E;;AAAA;AAE5E,S;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;uECtGA,2I,GAAA;AAAA;AAAA,gB,EAAA;AAAA;AAAA,gB,GAEoD,gG,IAEpD;AAHQ,4BAAkB,QAAlB,CAAkB,SAAlB;;AADR,wBACQ,SADR;;AACQ,4BAAkB,QAAlB,CAAkB,SAAlB;;AADR,wBACQ,SADR;AAC0B,S,EAAA;AAAA;AAClB,sDAA2C,oBAA3C;;AAFR,wBAEQ,SAFR;;AAEoD;;AAAA;AAEpD,S;AAAA;;;2MAV4D,4E,IAClE,+d,GAAA,yN,EAAA,qK,EAAA,wN,EAAA,kW,EAAA;AAAA;AAAA,U,EAAA;AAAA;AAAA,U,EAAA;AAAA;AAAA,U,EAAA;AAAA;AAAA,U,EAAA;AAAA;AAAA,U,EAAA,qK,GAAgE,+E,IAC7D,kK,GAAA;AAAA;AAAA,gB,GAAkC,8E,GAAA,yD,GAAgD,+E,IAClF;AAAA;AAAA;;AAAA;;;;;;;;;;;;;;;AACQ;;;;;AACA;;;;;AAFR;AAAA,sB,GAAA,kR,EAAA;AAAA;AAAA,uF,EAAA;AAAA;AAAA;AAAA;AAAA,U,EAAA,wL,EAAA,mN,EAAA;AAAA;AAAA,gB,GAE+D,kF,IAC5D,kI,GAAA;AAAA;AAAA,gB,GAIS,+E,IACH,4E,IACZ;AAAA;;AAXA;;AACU;;AAAP,yBAAO,SAAP;;AAEQ,8BAAiC,oBAAjC;;AADR,yBACQ,UADR;;AAAkB;;AAAlB,yBAAkB,UAAlB;;AAGW,8BAAmC,aAAnC;;AAAR,yBAAQ,UAAR;AAA2C,S,EAAA;AALjD;AAAA;;AAAA;;AAAA;;AACG;;AAAA;;AAAkC;;AAAA;;AAClC;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;AAE+D,S;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;ACLlE;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAmBO;AAAA,YAAME,2BAAN;AAAA;;AAAA;;AAqBJ,iDAAc;AAAA;;AAAA;;AACX,yCAAMA,2BAA2B,CAAC1L,WAAlC;AApBH,oBAAAC,uBAAA,GAA0D,kHAA1D;AACA,oBAAAuH,WAAA,GAAkC,mEAAlC;AACA,oBAAAtH,cAAA,GAAwC,mFAAxC;AAYA,oBAAAlI,MAAA,GAA6B,IAAI,0DAAJ,EAA7B;;AAeA,oBAAAsD,iBAAA,GAAoB,UAACK,WAAD,EAA0C;AAC3D,sBAAKJ,mBAAL,GAA2BI,WAA3B;;AACA,kGAAeL,iBAAf,CACM,QAAKC,mBADX,EACgC,QAAK8I,QADrC,EAC+C,QAAK/O,iBADpD,EACuE,QAAKC,aAD5E;AAEF,aAJD;;AAMA,oBAAAkM,WAAA,GAAc,UAACF,IAAD,EAAoC;AAC/C,qBAAOA,IAAI,CAACG,MAAL,GAAc,IAAd,GAAqB,gDAAKC,IAAjC;AACF,aAFD;;AAgBA,oBAAAyB,UAAA,GAA+C,IAAI,yFAAJ,CAAmB,UAAC5C,IAAD,EAA4B;AAC3F,qBAAOA,IAAI,CAAC6C,IAAZ;AACF,aAF8C,CAA/C;AAIA,oBAAAC,eAAA,GAAoD,IAAI,yFAAJ,CAAmB,UAAC9C,IAAD,EAA4B;AAChG,qBAAOA,IAAI,CAAC+C,cAAZ;AACF,aAFmD,CAApD;AAIA,oBAAAC,mBAAA,GAAwD,IAAI,yFAAJ,CAAmB,UAAChD,IAAD,EAA4B;AACpG,qBAAOA,IAAI,CAACiD,QAAZ;AACF,aAFuD,CAAxD;AAIA,oBAAAC,cAAA,GAAmD,IAAI,yFAAJ,CAAmB,UAAClD,IAAD,EAA4B;AAC/F,qBAAOA,IAAI,CAACmD,QAAZ;AACF,aAFkD,CAAnD;AAIA,oBAAAC,mBAAA,GAAwD,IAAI,yFAAJ,CAAmB,UAACpD,IAAD,EAA4B;AACpG,qBAAOA,IAAI,CAACqD,aAAZ;AACF,aAFuD,CAAxD;AAIA,oBAAAC,iBAAA,GAAsD,IAAI,yFAAJ,CAAmB,UAACtD,IAAD,EAA4B;AAClG,qBAAOA,IAAI,CAACuD,WAAZ;AACF,aAFqD,CAAtD;AAlDG,oBAAKC,iBAAL,GAAyB,IAAzB;AAFW;AAGb;;AAxBG;AAAA;AAAA,mBA0BJ,oBAAQ;AACL,mBAAKG,eAAL,GAAuB,KAAvB;AACA,mBAAKC,WAAL,GAAmB,IAAI,yHAAJ,CAAkC,KAAK9O,iBAAvC,EAA0D,KAAKC,aAA/D,CAAnB;AACF;AA7BG;AAAA;AAAA,iBAyCJ,eAAmB;AAChB,qBAAO,oFAAekP,kBAAf,CAAkC,KAAKlJ,mBAAvC,CAAP;AACF;AA3CG;AAAA;AAAA,mBA6CJ,wBAAeiF,IAAf,EAAwB;AACrBA,kBAAI,CAAChD,WAAL,GAAmBgD,IAAI,CAAChD,WAAL,KAAqB,oEAAYsB,UAAjC,IAA+C0B,IAAI,CAAChD,WAAL,KAAqB,oEAAYoD,MAAhF,GACX,oEAAYjD,IADD,GAEX,oEAAYmB,UAFpB;AAGA0B,kBAAI,CAACgB,aAAL,GAAqBhB,IAAI,CAACvG,OAA1B;AACA,mBAAKjC,MAAL,CAAYmB,IAAZ;AACF;AAnDG;;AAAA;AAAA,UAA0C,uFAA1C;;AACY,oCAAA6G,WAAA,GAAsB,iCAAtB;;OADZ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACnBP;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;UASa2L,mB;;;;;;;;;;;;;;AAIV;;;AAGA,yBAAQ;AACL,gBAAI,KAAKC,KAAT,EAAgB;AACb,qBAAO,KAAKA,KAAZ;AACF;;AAED,iBAAKA,KAAL,GAAa,KAAKC,oBAAL,GAA4B/R,KAAzC;AACA,mBAAO,KAAK8R,KAAZ;AACF,W;eAED,aAASE,OAAT,EAA0B;AACvB,iBAAKF,KAAL,GAAaE,OAAb;AACF;;;eAED,eAAS;AACN,mBAAO,KAAKD,oBAAL,GAA4BtN,KAAnC;AACF;;;eAED,eAAwB;AACrB,gBAAIwN,0BAA0B,GAAY,IAA1C;AACA,gBAAIC,wBAAwB,GAAY,IAAxC;AACA,gBAAIC,uBAAuB,GAAY,IAAvC;AACA,gBAAIC,qBAAqB,GAAY,IAArC;;AAJqB,yDAMF,KAAKnT,aANH;AAAA;;AAAA;AAMrB,wEAAuC;AAAA,oBAA5BwI,IAA4B;AACpCyK,wCAAwB,GAAGA,wBAAwB,IAC7CzK,IAAI,CAAC+C,oBAAL,CAA0BzD,QAA1B,CAAmC,oEAAY3D,aAA/C,CADN;AAEA6O,0CAA0B,GAAGA,0BAA0B,IACjDxK,IAAI,CAAC+C,oBAAL,CAA0BzD,QAA1B,CAAmC,oEAAYhE,eAA/C,CADN;AAEAoP,uCAAuB,GAAGA,uBAAuB,IAC3C1K,IAAI,CAAC+C,oBAAL,CAA0BzD,QAA1B,CAAmC,oEAAYlD,IAA/C,CADN;AAEAuO,qCAAqB,GAAGA,qBAAqB,IACvC3K,IAAI,CAAC+C,oBAAL,CAA0BzD,QAA1B,CAAmC,oEAAY/B,UAA/C,CADN;AAEF;AAfoB;AAAA;AAAA;AAAA;AAAA;;AAiBrB,gBAAM4B,YAAY,GAAkB,CAAC,oEAAYE,MAAb,CAApC;;AAEA,gBAAIoL,wBAAJ,EAA8B;AAC3BtL,0BAAY,CAAC7J,IAAb,CAAkB,oEAAYqG,aAA9B;AACF;;AAED,gBAAI6O,0BAAJ,EAAgC;AAC7BrL,0BAAY,CAAC7J,IAAb,CAAkB,oEAAYgG,eAA9B;AACF;;AAED,gBAAIoP,uBAAJ,EAA6B;AAC1BvL,0BAAY,CAAC7J,IAAb,CAAkB,oEAAY8G,IAA9B;AACF;;AAED,gBAAIuO,qBAAJ,EAA2B;AACxBxL,0BAAY,CAAC7J,IAAb,CAAkB,oEAAYiI,UAA9B;AACF;;AAED,mBAAO4B,YAAP;AACF;AAED;;;;;;eAGA,eAAsB;AACnB,gBAAI,CAAC,KAAK3H,aAAN,IAAuB,KAAKA,aAAL,CAAmB4B,MAAnB,KAA8B,CAAzD,EAA4D;AACzD,qBAAO,EAAP;AACF;;AAED,gBAAIwR,KAAK,GAAgB,EAAzB;AACA,iBAAKpT,aAAL,CAAmBJ,OAAnB,CAA2B,UAAAW,IAAI,EAAI;AAAA;;AAChC,wBAAA6S,KAAK,EAACtV,IAAN,kCAAcyC,IAAI,CAAC8S,kBAAnB;AACF,aAFD,EANmB,CASnB;;AACAD,iBAAK,GAAGjU,KAAK,CAACC,IAAN,CAAW,IAAIC,GAAJ,CAAQ+T,KAAR,CAAX,CAAR;;AAEA,gBAAI,CAAC,KAAK9K,wBAAL,EAAL,EAAsC;AACnC8K,mBAAK,CAACtV,IAAN,CAAW,iEAAUwV,MAArB;AACF;;AACD,mBAAOF,KAAP;AACF;AAED;;;;;;eAGA,eAAY;AACT,gBAAI,KAAKG,SAAT,EAAoB;AACjB,qBAAO,KAAKA,SAAZ;AACF,aAHQ,CAKT;;;AACA,gBAAM/G,WAAW,GACX,kEAAagH,UAAb,CAAwB,KAAKV,oBAAL,GAA4BvS,IAA5B,CAAiCmK,QAAzD,IAAqE,KAAK1K,aAAL,CAAmB4B,MAD9F;AAGA,iBAAK2R,SAAL,GAAiB,4DAAY/P,cAAZ,CAA2BgJ,WAA3B,CAAjB;AACA,mBAAO,KAAK+G,SAAZ;AACF;;;eAED,eAAU;AACP,mBAAO,KAAKT,oBAAL,GAA4BhF,MAAnC;AACF;;;eAED,eAAS;AACN,mBAAO,KAAKgF,oBAAL,GAA4BzR,SAAnC;AACF;;;eAED,eAAoB;AACjB,mBAAO,oFAAeoS,qBAAf,CAAqC,KAAKvS,OAAL,GAAe,iEAAU6I,KAAzB,GAAiC,iEAAUE,GAAhF,CAAP;AACF;AAED;;;;;;eAGA,eAAkB;AACf,mBAAO,oFAAewJ,qBAAf,CAAqC,KAAKrJ,SAA1C,CAAP;AACF;AAED;;;;;;eAGA,eAAa;AACV,gBAAI,CAAC,KAAK9B,wBAAL,EAAL,EAAsC;AACnC,qBAAO,iEAAUgL,MAAjB;AACF;;AAED,mBAAO,KAAKR,oBAAL,GAA4B1I,SAAnC;AACF;;;eAED,eAAW;AACR,mBAAO,KAAK0I,oBAAL,GAA4B5R,OAAnC;AACF;;;eAED,eAAS;AACN,mBAAO,KAAK4R,oBAAL,GAA4BY,KAAnC;AACF;;;eAQD,eAAiB;AACd,gBAAI,KAAKpL,wBAAL,EAAJ,EAAqC;AAClC,qBAAO,KAAKwK,oBAAL,GAA4BrK,aAAnC;AACF;;AAED,mBAAO,KAAP;AACF;AAED;;;;eAdA,aAAkBmJ,QAAlB,EAAqC;AAAA,yDACf,KAAKhE,+BADU;AAAA;;AAAA;AAClC,wEAAyD;AAAA,oBAA9CrN,IAA8C;AACtDA,oBAAI,CAACkI,aAAL,GAAqBmJ,QAArB;AACF;AAHiC;AAAA;AAAA;AAAA;AAAA;AAIpC;;;eAaD,eAAiB;AACd,mBAAO,KAAKkB,oBAAL,GAA4BhI,aAAnC;AACF;;;eAED,eAAY;AACT,mBAAO,KAAK6I,kBAAL,CAAwB,KAAK/F,+BAA7B,CAAP;AACF;;;eAED,eAA0B;AACvB,gBAAI,CAAC,KAAKtF,wBAAL,EAAL,EAAsC;AACnC,qBAAO,IAAP;AACF;;AAED,mBAAO,CAAC,KAAKwK,oBAAL,GAA4BrK,aAApC;AACF;;;eAED,eAAwB;AACrB,gBAAI,CAAC,KAAKH,wBAAL,EAAL,EAAsC;AACnC,qBAAO,IAAP;AACF;;AAED,mBAAO,KAAKwK,oBAAL,GAA4BrK,aAAnC;AACF;;;iBAED,oCAAwB;AACrB,gBAAMmL,WAAW,GAAY,KAAKd,oBAAL,GAA4BrK,aAAzD;AACA,gBAAIoL,aAAa,GAAY,IAA7B;;AAFqB,yDAGF,KAAKjG,+BAHH;AAAA;;AAAA;AAGrB,wEAAyD;AAAA,oBAA9CrN,IAA8C;;AACtD,oBAAIqT,WAAW,KAAKrT,IAAI,CAACkI,aAAzB,EAAwC;AACrCoL,+BAAa,GAAG,KAAhB;AACA;AACF;AACH;AARoB;AAAA;AAAA;AAAA;AAAA;;AAUrB,mBAAOA,aAAP;AACF;;;iBAEO,gCAAoB;AACzB,mBAAO,KAAKjG,+BAAL,CAAqC,CAArC,CAAP;AACF;AAED;;;;;;;;;;;;iBASQ,4BAAmB9N,KAAnB,EAA4C;AACjD,gBAAMgU,aAAa,GAAwB,KAAKC,gBAAL,CAAsBjU,KAAtB,CAA3C;AACA,mBAAO,KAAKkU,WAAL,CAAiBF,aAAjB,IACC,KAAKG,iCAAL,EADD,GAEC,KAAKC,+BAAL,CAAqCJ,aAArC,CAFR;AAGF;;;iBAEO,0BAAiBhU,KAAjB,EAA0C;AAC/C,gBAAMgU,aAAa,GAAwB,IAAIxW,GAAJ,EAA3C;;AAEA,gBAAI,4DAAYoC,OAAZ,CAAoBI,KAApB,CAAJ,EAAgC;AAC7B,qBAAOgU,aAAP;AACF;;AAEDhU,iBAAK,CAACF,OAAN,CAAc,UAAAW,IAAI,EAAI;AACnB,kBAAI,CAACuT,aAAa,CAACnW,GAAd,CAAkB4C,IAAI,CAACqK,QAAvB,CAAL,EAAuC;AACpCkJ,6BAAa,CAAClW,GAAd,CAAkB2C,IAAI,CAACqK,QAAvB,EAAiC,CAAjC;AACF;;AACDkJ,2BAAa,CAAClW,GAAd,CAAkB2C,IAAI,CAACqK,QAAvB,EAAiCkJ,aAAa,CAACjW,GAAd,CAAkB0C,IAAI,CAACqK,QAAvB,IAAmC,CAApE;AACF,aALD;AAOA,mBAAOkJ,aAAP;AACF;;;iBAEO,qBAAYA,aAAZ,EAA8C;AACnD,mBAAOA,aAAa,CAAC9S,IAAd,GAAqB,CAArB,GACC,CAAC7B,KAAK,CAACC,IAAN,CAAW0U,aAAa,CAACK,MAAd,EAAX,EAAmCzO,KAAnC,CAAyC,UAAC0O,GAAD,EAAMC,CAAN,EAASC,GAAT;AAAA,qBAAiBF,GAAG,KAAKE,GAAG,CAAC,CAAD,CAA5B;AAAA,aAAzC,CADF,GAEC,KAFR;AAGF;;;iBAEO,6CAAiC;AACtC,mBAAO,4DAAYzR,SAAZ,CAAsB,+DAAtB,CAAP;AACF;;;iBAEO,yCAAgCiR,aAAhC,EAAkE;AACvE,gBAAMS,UAAU,GAAWT,aAAa,CAAC9S,IAAzC;AACA,gBAAMwT,eAAe,GAAWD,UAAU,GAAG,CAAb,GAAiBT,aAAa,CAACK,MAAd,GAAuBM,IAAvB,GAA8B/W,KAA/C,GAAuD,CAAvF;AACA,gBAAM4F,QAAQ,GAAW,KAAKoR,kCAAL,CAAwCH,UAAxC,EAAoDC,eAApD,CAAzB;AACA,mBAAO,4DAAY3R,SAAZ,CAAsBS,QAAtB,EAAgCkR,eAAhC,EAAiDD,UAAjD,CAAP;AACF;;;iBAEO,4CAAmCA,UAAnC,EAAuDC,eAAvD,EAA8E;AACnF,gBAAIA,eAAe,KAAK,CAAxB,EAA2B;AACxB,qBAAOD,UAAU,KAAK,CAAf,GACC,mEADD,GAEC,qEAFR;AAGF,aAJD,MAIO;AACJ,qBAAOA,UAAU,KAAK,CAAf,GACC,qEADD,GAEC,wEAFR;AAGF;AACH;;;;QA/PqC,qG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACJzC;AAAA;;;AAAA;AAAA;AAAA;;AAAO,UAAOI,SAAP;;AAAP,iBAAcA,SAAd,EAAuB;AACvB,iBAAgBC,oBAAhB,GAAoC;AACjC,iBAAO,aAAP;AACF;;AAFe,kBAAAA,oBAAA,GAAoB,oBAApB;;AAIhB,iBAAgBC,oBAAhB,GAAoC;AACjC,iBAAO,YAAP;AACF;;AAFe,kBAAAA,oBAAA,GAAoB,oBAApB;;AAIhB,iBAAgB1W,aAAhB,GAA6B;AAC1B,iBAAO,MAAP;AACF;;AAFe,kBAAAA,aAAA,GAAa,aAAb;;AAIhB,iBAAgBE,wBAAhB,GAAwC;AACrC,iBAAO,eAAP;AACF;;AAFe,kBAAAA,wBAAA,GAAwB,wBAAxB;;AAIhB,iBAAgByW,gBAAhB,GAAgC;AAC7B,iBAAO,SAAP;AACF;;AAFe,kBAAAA,gBAAA,GAAgB,gBAAhB;;AAIhB,iBAAgBvW,qBAAhB,GAAqC;AAClC,iBAAO,MAAP;AACF;;AAFe,kBAAAA,qBAAA,GAAqB,qBAArB;;AAIhB,iBAAgBwW,WAAhB,GAA2B;AACxB,iBAAO,IAAP;AACF;;AAFe,kBAAAA,WAAA,GAAW,WAAX;;AAIhB,iBAAgBC,cAAhB,GAA8B;AAC3B,iBAAO,eAAP;AACF;;AAFe,kBAAAA,cAAA,GAAc,cAAd;;AAIhB,iBAAgBC,iBAAhB,GAAiC;AAC9B,iBAAO,YAAP;AACF;;AAFe,kBAAAA,iBAAA,GAAiB,iBAAjB;;AAIhB,iBAAgBC,sBAAhB,GAAsC;AACnC,iBAAO,cAAP;AACF;;AAFe,kBAAAA,sBAAA,GAAsB,sBAAtB;;AAIhB,iBAAgBC,4BAAhB,GAA4C;AACzC,iBAAO,OAAP;AACF;;AAFe,kBAAAA,4BAAA,GAA4B,4BAA5B;;AAIhB,iBAAgBC,kBAAhB,GAAkC;AAC/B,iBAAO,WAAP;AACF;;AAFe,kBAAAA,kBAAA,GAAkB,kBAAlB;;AAIhB,iBAAgBC,2BAAhB,GAA2C;AACxC,iBAAO,cAAP;AACF;;AAFe,kBAAAA,2BAAA,GAA2B,2BAA3B;;AAIhB,iBAAgBC,4BAAhB,GAA4C;AACzC,iBAAO,4CAAP;AACF;;AAFe,kBAAAA,4BAAA,GAA4B,4BAA5B;;AAIhB,iBAAgBC,8BAAhB,GAA8C;AAC3C,iBAAO,yBAAP;AACF;;AAFe,kBAAAA,8BAAA,GAA8B,8BAA9B;;AAIhB,iBAAgBC,8BAAhB,GAA8C;AAC3C,iBAAO,2BAAP;AACF;;AAFe,kBAAAA,8BAAA,GAA8B,8BAA9B;;AAIhB,iBAAgBC,6BAAhB,GAA6C;AAC1C,iBAAO,0BAAP;AACF;;AAFe,kBAAAA,6BAAA,GAA6B,6BAA7B;;AAIhB,iBAAgBC,sBAAhB,GAAsC;AACnC,iBAAO,yBAAP;AACF;;AAFe,kBAAAA,sBAAA,GAAsB,sBAAtB;;AAIhB,iBAAgBC,qBAAhB,GAAqC;AAClC,iBAAO,aAAP;AACF;;AAFe,kBAAAA,qBAAA,GAAqB,qBAArB;;AAIhB,iBAAgBC,wBAAhB,GAAwC;AACrC,iBAAO,eAAP;AACF;;AAFe,kBAAAA,wBAAA,GAAwB,wBAAxB;;AAIhB,iBAAgBC,wBAAhB,GAAwC;AACrC,iBAAO,+BAAP;AACF;;AAFe,kBAAAA,wBAAA,GAAwB,wBAAxB;;AAIhB,iBAAgBC,uBAAhB,GAAuC;AACpC,iBAAO,cAAP;AACF;;AAFe,kBAAAA,uBAAA,GAAuB,uBAAvB;;AAIhB,iBAAgBC,kCAAhB,GAAkD;AAC/C,iBAAO,gCAAP;AACF;;AAFe,kBAAAA,kCAAA,GAAkC,kCAAlC;;AAIhB,iBAAgBzX,iCAAhB,GAAiD;AAC9C,iBAAO,2BAAP;AACF;;AAFe,kBAAAA,iCAAA,GAAiC,iCAAjC;;AAIhB,iBAAgB0X,mBAAhB,GAAmC;AAChC,iBAAO,wBAAP;AACF;;AAFe,kBAAAA,mBAAA,GAAmB,mBAAnB;;AAIhB,iBAAgBC,gCAAhB,GAAgD;AAC7C,iBAAO,6BAAP;AACF;;AAFe,kBAAAA,gCAAA,GAAgC,gCAAhC;;AAIhB,iBAAgBC,YAAhB,GAA4B;AACzB,iBAAO,2BAAP;AACF;;AAFe,kBAAAA,YAAA,GAAY,YAAZ;;AAIhB,iBAAgBC,OAAhB,GAAuB;AACpB,iBAAO,sBAAP;AACF;;AAFe,kBAAAA,OAAA,GAAO,OAAP;;AAIhB,iBAAgBC,0BAAhB,GAA0C;AACvC,iBAAO,qBAAP;AACF;;AAFe,kBAAAA,0BAAA,GAA0B,0BAA1B;;AAIhB,iBAAgBC,qBAAhB,GAAqC;AAClC,iBAAO,qEAAP;AACF;;AAFe,kBAAAA,qBAAA,GAAqB,qBAArB;;AAIhB,iBAAgBjY,qBAAhB,GAAqC;AAClC,iBAAO,wBAAP;AACF;;AAFe,kBAAAA,qBAAA,GAAqB,qBAArB;;AAIhB,iBAAgBkY,yBAAhB,GAAyC;AACtC,iBAAO,uBAAP;AACF;;AAFe,kBAAAA,yBAAA,GAAyB,yBAAzB;;AAIhB,iBAAgBC,0BAAhB,GAA0C;AACvC,iBAAO,+BAAP;AACF;;AAFe,kBAAAA,0BAAA,GAA0B,0BAA1B;;AAIhB,iBAAgBC,+BAAhB,GAA+C;AAC5C,iBAAO,sBAAP;AACF;;AAFe,kBAAAA,+BAAA,GAA+B,+BAA/B;;AAIhB,iBAAgBC,iCAAhB,GAAiD;AAC9C,iBAAO,gFAAP;AACF;;AAFe,kBAAAA,iCAAA,GAAiC,iCAAjC;;AAIhB,iBAAgBC,2BAAhB,GAA2C;AACxC,iBAAO,gEAAP;AACF;;AAFe,kBAAAA,2BAAA,GAA2B,2BAA3B;;AAIhB,iBAAgBC,4BAAhB,GAA4C;AACzC,iBAAO,oEAAP;AACF;;AAFe,kBAAAA,4BAAA,GAA4B,4BAA5B;;AAIhB,iBAAgBC,mBAAhB,GAAmC;AAChC,iBAAO,yBAAP;AACF;;AAFe,kBAAAA,mBAAA,GAAmB,mBAAnB;;AAIhB,iBAAgBC,6BAAhB,GAA6C;AAC1C,iBAAO,0BAAP;AACF;;AAFe,kBAAAA,6BAAA,GAA6B,6BAA7B;;AAIhB,iBAAgBC,SAAhB,GAAyB;AACtB,iBAAO,SAAP;AACF;;AAFe,kBAAAA,SAAA,GAAS,SAAT;;AAIhB,iBAAgBC,uBAAhB,GAAuC;AACpC,iBAAO,cAAP;AACF;;AAFe,kBAAAA,uBAAA,GAAuB,uBAAvB;;AAIhB,iBAAgBC,aAAhB,GAA6B;AAC1B,iBAAO,aAAP;AACF;;AAFe,kBAAAA,aAAA,GAAa,aAAb;;AAIhB,iBAAgBC,mBAAhB,GAAmC;AAChC,iBAAO,IAAP;AACF;;AAFe,kBAAAA,mBAAA,GAAmB,mBAAnB;;AAIhB,iBAAgBC,qBAAhB,GAAqC;AAClC,iBAAO,MAAP;AACF;;AAFe,kBAAAA,qBAAA,GAAqB,qBAArB;;AAIhB,iBAAgBC,iBAAhB,GAAiC;AAC9B,iBAAO,SAAP;AACF;;AAFe,kBAAAA,iBAAA,GAAiB,iBAAjB;;AAIhB,iBAAgBC,0BAAhB,GAA0C;AACvC,iBAAO,kBAAP;AACF;;AAFe,kBAAAA,0BAAA,GAA0B,0BAA1B;;AAIhB,iBAAgBC,4BAAhB,GAA4C;AACzC,iBAAO,mBAAP;AACF;;AAFe,kBAAAA,4BAAA,GAA4B,4BAA5B;;AAIhB,iBAAgBC,sBAAhB,GAAsC;AACnC,iBAAO,kBAAP;AACF;;AAFe,kBAAAA,sBAAA,GAAsB,sBAAtB;;AAIhB,iBAAgBC,sBAAhB,GAAsC;AACnC,iBAAO,aAAP;AACF;;AAFe,kBAAAA,sBAAA,GAAsB,sBAAtB;;AAIhB,iBAAgBC,qBAAhB,GAAqC;AAClC,iBAAO,sBAAP;AACF;;AAFe,kBAAAA,qBAAA,GAAqB,qBAArB;;AAIhB,iBAAgBC,iBAAhB,GAAiC;AAC9B,iBAAO,4CAAP;AACF;;AAFe,kBAAAA,iBAAA,GAAiB,iBAAjB;;AAIhB,iBAAgBC,cAAhB,GAA8B;AAC3B,iBAAO,iBAAP;AACF;;AAFe,kBAAAA,cAAA,GAAc,cAAd;;AAIhB,iBAAgBC,cAAhB,GAA8B;AAC3B,iBAAO,YAAP;AACF;;AAFe,kBAAAA,cAAA,GAAc,cAAd;;AAIhB,iBAAgBC,yBAAhB,GAAyC;AACtC,iBAAO,4BAAP;AACF;;AAFe,kBAAAA,yBAAA,GAAyB,yBAAzB;;AAIhB,iBAAgBC,aAAhB,GAA6B;AAC1B,iBAAO,UAAP;AACF;;AAFe,kBAAAA,aAAA,GAAa,aAAb;;AAIhB,iBAAgBC,wBAAhB,GAAwC;AACrC,iBAAO,uCAAP;AACF;;AAFe,kBAAAA,wBAAA,GAAwB,wBAAxB;;AAIhB,iBAAgBC,eAAhB,GAA+B;AAC5B,iBAAO,QAAP;AACF;;AAFe,kBAAAA,eAAA,GAAe,eAAf;;AAIhB,iBAAgBC,oBAAhB,GAAoC;AACjC,iBAAO,qBAAP;AACF;;AAFe,kBAAAA,oBAAA,GAAoB,oBAApB;;AAIhB,iBAAgBC,SAAhB,GAAyB;AACtB,iBAAO,qBAAP;AACF;;AAFe,kBAAAA,SAAA,GAAS,SAAT;;AAIhB,iBAAgBC,cAAhB,GAA8B;AAC3B,iBAAO,0BAAP;AACF;;AAFe,kBAAAA,cAAA,GAAc,cAAd;;AAIhB,iBAAgBC,iBAAhB,GAAiC;AAC9B,iBAAO,4BAAP;AACF;;AAFe,kBAAAA,iBAAA,GAAiB,iBAAjB;;AAIhB,iBAAgBC,mBAAhB,GAAmC;AAChC,iBAAO,8BAAP;AACF;;AAFe,kBAAAA,mBAAA,GAAmB,mBAAnB;;AAIhB,iBAAgBC,kBAAhB,GAAkC;AAC/B,iBAAO,6BAAP;AACF;;AAFe,kBAAAA,kBAAA,GAAkB,kBAAlB;;AAIhB,iBAAgBC,gBAAhB,GAAgC;AAC7B,iBAAO,SAAP;AACF;;AAFe,kBAAAA,gBAAA,GAAgB,gBAAhB;;AAIhB,iBAAgBC,2BAAhB,GAA2C;AACxC,iBAAO,+EAAP;AACF;;AAFe,kBAAAA,2BAAA,GAA2B,2BAA3B;;AAIhB,iBAAgBC,mCAAhB,GAAmD;AAChD,iBAAO,iCAAP;AACF;;AAFe,kBAAAA,mCAAA,GAAmC,mCAAnC;;AAIhB,iBAAgBC,qCAAhB,GAAqD;AAClD,iBAAO,+CAAP;AACF;;AAFe,kBAAAA,qCAAA,GAAqC,qCAArC;;AAIhB,iBAAgBC,0CAAhB,GAA0D;AACvD,iBAAO,wCAAP;AACF;;AAFe,kBAAAA,0CAAA,GAA0C,0CAA1C;;AAIhB,iBAAgBC,iBAAhB,GAAiC;AAC9B,iBAAO,gBAAP;AACF;;AAFe,kBAAAA,iBAAA,GAAiB,iBAAjB;;AAIhB,iBAAgBC,mBAAhB,GAAmC;AAChC,iBAAO,eAAP;AACF;;AAFe,kBAAAA,mBAAA,GAAmB,mBAAnB;;AAIhB,iBAAgBC,sBAAhB,GAAsC;AACnC,iBAAO,aAAP;AACF;;AAFe,kBAAAA,sBAAA,GAAsB,sBAAtB;;AAzRO,YA6RVhX,OA7RU;AAAA;AAAA,YAoSrB;;;AALQ,gBAAAC,MAAA,GAAS,YAAiB;AAC9B,iBAAO,EAAP;AACF,SAFM;;AAFG,kBAAAD,OAAA,GAAO,OAAP;AASZ,OAtSD,EAAc8S,SAAS,KAATA,SAAS,MAAvB,E,CAsSE;;;;;;;;;;;;;;;;;;AC3SF;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;UAmBamE,iB;;;;;AA0BV,mCAAYzb,UAAZ,EAA+B0b,YAA/B,EAAiErc,0BAAjE,EAAsG;AAAA;;AAAA;;AACnG;AAxBK,kBAAAsc,eAAA,GAA0B,CAA1B;AACA,kBAAAC,gBAAA,GAA2B,CAA3B;AAGA,kBAAAC,uBAAA,GAAmC,KAAnC;AACA,kBAAAC,sBAAA,GAAiC,CAAjC;AACA,kBAAAC,wBAAA,GAAmC,CAAnC;AACA,kBAAAC,wBAAA,GAAmC,CAAnC;AACA,kBAAAC,qBAAA,GAAiC,IAAjC;AAIA,kBAAAC,gBAAA,GAA2B,CAA3B;AACA,kBAAAC,aAAA,GAAwB,CAAxB;AAEA,kBAAAC,qBAAA,GAAiC,KAAjC;AACA,kBAAAC,oBAAA,GAAgC,KAAhC;;AAO8F,uDAG5Erc,UAH4E;AAAA;;AAAA;AAGnG,sEAAmC;AAAA,kBAAxBG,QAAwB;;AAChC,sBAAQA,QAAQ,CAACmc,YAAjB;AACG,qBAAK,gEAAUxb,aAAV,EAAL;AACG,0BAAKmM,IAAL,GAAY9M,QAAQ,CAACE,KAArB;AACA,0BAAKqE,OAAL,GAAe,sEAAcD,MAAd,CACTtE,QAAQ,CAACC,cAAT,CAAwBmc,IADf,EAETpc,QAAQ,CAACC,cAAT,CAAwBC,KAFf,EAGTF,QAAQ,CAACC,cAAT,CAAwBoc,UAHf,CAAf;;AAIA,0BAAKC,8BAAL;;AACA;;AACH,qBAAK,gEAAU1b,qBAAV,EAAL;AACG,0BAAK0H,OAAL,GAAetI,QAAQ,CAACE,KAAxB;AACA;;AACH,qBAAK,gEAAUW,wBAAV,EAAL;AACG,0BAAK0b,aAAL,GAAqBvc,QAAQ,CAACE,KAA9B;AACA;;AACH,qBAAK,gEAAUY,iCAAV,EAAL;AACG,sBAAM0b,iBAAiB,GAA+B,IAAI,2FAAJ,EAAtD;AACAA,mCAAiB,CAACC,qBAAlB,GAA0Czc,QAAQ,CAACE,KAAnD;AACA,0BAAKwc,mBAAL,GAA2BF,iBAA3B;AACA;AAnBN;AAqBF;AAzBkG;AAAA;AAAA;AAAA;AAAA;;AA2BnG,kBAAKG,eAAL,CAAqBpB,YAArB,EAAmCrc,0BAAnC;;AA3BmG;AA4BrG;;;;eAED,eAAW;AACR,mBAAO,KAAK0d,QAAZ;AACF,W;eAED,aAAY1c,KAAZ,EAAkC;AAC/B,iBAAK0c,QAAL,GAAgB1c,KAAhB;AACF;;;eAED,eAAmB;AAChB,mBAAO,KAAK6b,gBAAZ;AACF,W;eAED,aAAoB7b,KAApB,EAAmC;AAChC,iBAAK6b,gBAAL,GAAwB7b,KAAxB;AACF;;;eAED,eAAgB;AACb,mBAAO,KAAK8b,aAAZ;AACF,W;eAED,aAAiB9b,KAAjB,EAAgC;AAC7B,iBAAK8b,aAAL,GAAqB9b,KAArB;AACF;;;eAED,eAAwB;AACrB,mBAAO,KAAK+b,qBAAZ;AACF;AAED;;;;;;eAGA,eAAuB;AACpB,mBAAO,KAAKC,oBAAZ;AACF;AAED;;;;;;;AAOA;;;AAGA,yBAAQ;AACL,gBAAI,KAAKW,SAAT,EAAoB;AACjB,qBAAO,6DAAYxX,SAAZ,CAAsB,+CAAtB,EAAuE,KAAKgQ,KAA5E,EAAmF,KAAKwH,SAAxF,CAAP;AACF;;AACD,mBAAO,KAAKxH,KAAZ;AACF,W;eAZD,aAASnV,KAAT,EAAwB;AACrB,iBAAKmV,KAAL,GAAanV,KAAb;AACF;;;iBAYO,yBAAgB+J,IAAhB,EAA0C/K,0BAA1C,EAA6E;AAAA;;AAClF,iBAAK4d,oBAAL,GAA4B,IAAIhd,GAAJ,EAA5B;;AAEA,gBAAImK,IAAI,IAAI,IAAZ,EAAkB;AACf,kBAAM3H,KAAK,GAAuB,EAAlC;;AADe,2DAEQ2H,IAAI,CAAC8S,aAFb;AAAA;;AAAA;AAEf,0EAA2C;AAAA,sBAAhCC,QAAgC;AACxC,sBAAMC,QAAQ,GACR,IAAI,sEAAJ,CAAqBD,QAArB,EAA+B9d,0BAA/B,EAA2D+K,IAAI,CAACiT,mBAAhE,CADN;AAEAD,0BAAQ,CAAC7P,QAAT,GAAoB,KAAKiI,KAAzB;AACA4H,0BAAQ,CAAC1Y,OAAT,GAAmB,KAAKA,OAAxB;AACAjC,uBAAK,CAAChC,IAAN,CAAW2c,QAAX;AACF;AARc;AAAA;AAAA;AAAA;AAAA;;AAUf,mBAAKza,aAAL,GAAqBF,KAArB;AAEA,mBAAK4Z,oBAAL,GAA4BjS,IAAI,CAACiT,mBAAjC;AACA,mBAAKzB,gBAAL,GAAwBxR,IAAI,CAACkT,oBAA7B;AACA,mBAAK3B,eAAL,GAAuBvR,IAAI,CAACmT,mBAA5B;AACA,mBAAKnB,qBAAL,GAA6BhS,IAAI,CAACoT,oBAAlC;AACA,mBAAK3B,uBAAL,GAA+BzR,IAAI,CAACqT,sBAApC;AACA,mBAAKvB,gBAAL,GAAwB9R,IAAI,CAACgI,eAA7B;AACA,mBAAK+J,aAAL,GAAqB/R,IAAI,CAACkI,YAA1B;AAEA,mBAAK3J,mBAAL,GAA2ByB,IAAI,CAACsT,mBAAL,CACpBxb,GADoB,CAChB,UAAAoG,OAAO;AAAA,uBAAI,IAAI,6GAAJ,CAA4BA,OAA5B,EAAqC,OAAI,CAACkN,KAA1C,EAAiD,OAAI,CAAC9Q,OAAtD,CAAJ;AAAA,eADS,CAA3B;AAGA,mBAAKiZ,8BAAL,CAAoCvT,IAAI,CAACmJ,mBAAzC;AACA,mBAAKqK,0BAAL;AACF,aAzBD,MAyBO;AACJ,mBAAKjb,aAAL,GAAqB,IAArB;AACF;;AACD,iBAAKkb,gBAAL;AACF;;;iBAEO,0CAA8B;AACnC,gBAAI,CAAC,KAAKlb,aAAV,EAAyB;AACtB;AACF;;AAHkC,yDAKhB,KAAKA,aALW;AAAA;;AAAA;AAKnC,wEAAuC;AAAA,oBAA5BO,IAA4B;AACpCA,oBAAI,CAACqK,QAAL,GAAgB,KAAKiI,KAArB;AACF;AAPkC;AAAA;AAAA;AAAA;AAAA;AAQrC;AAED;;;;;;eAGA,aAAwBsB,MAAxB,EAA4D;AACzD,iBAAKgH,oBAAL,GAA4BhH,MAA5B;AACA,iBAAK8G,0BAAL;AACF;AAED;;;;;;iBAGQ,sCAA0B;AAC/B,gBAAI,KAAKjb,aAAL,IAAsB,KAAKmb,oBAA/B,EAAqD;AAAA,2DAC/B,KAAKnb,aAD0B;AAAA;;AAAA;AAClD,0EAAuC;AAAA,sBAA5BwI,IAA4B;AACpCA,sBAAI,CAAC2D,SAAL,GAAiB,KAAKgP,oBAAL,CAA0BC,kBAA1B,CAA6C5S,IAAI,CAAC6S,QAAlD,CAAjB;AACA7S,sBAAI,CAACwC,WAAL,GAAmB,KAAKmQ,oBAAL,CAA0BG,gBAA1B,CAA2C9S,IAAI,CAAC6S,QAAhD,CAAnB;AACF;AAJiD;AAAA;AAAA;AAAA;AAAA;AAKpD;AACH;;;eAED,eAAwB;AACrB,gBAAM1T,YAAY,GAAkB,CAAC,oEAAYE,MAAb,EAAqB,oEAAY9B,UAAjC,CAApC;;AAEA,gBAAI,KAAKyL,oBAAL,KAA8B,wEAAcS,WAAhD,EAA6D;AAC1DtK,0BAAY,CAAC7J,IAAb,CAAkB,oEAAY8G,IAA9B;AACF;;AAED,mBAAO+C,YAAP;AACF;;;eAED,eAAS;AACN,mBAAO,KAAK2R,qBAAL,GACC,KAAKS,aADN,GAEC,iDAAKwB,UAFb;AAGF;;;eAED,eAA0B;AACvB,mBAAO,KAAKlC,wBAAZ;AACF;;;eAED,eAA0B;AACvB,mBAAO,KAAKD,wBAAZ;AACF;;;eAED,eAAyB;AACtB,mBAAO,KAAKD,sBAAZ;AACF;;;eAED,eAAiC;AAC9B,mBAAO,wDAAQxI,GAAR,CACD,KAAK2J,oBADJ,EAED,UAAChJ,OAAD;AAAA,qBAAaA,OAAO,CAACL,oBAArB;AAAA,aAFC,CAAP;AAGF;;;iBAED,wCAA4B;AACzB,mBAAO,wDAAQN,GAAR,CACD,KAAK2J,oBADJ,EAED,UAAChJ,OAAD;AAAA,qBAAaA,OAAO,CAACpB,kBAArB;AAAA,aAFC,CAAP;AAGF;;;iBAED,+BAAsBzL,WAAtB,EAA8C;AAC3C,gBAAI,KAAK6V,oBAAL,CAA0B3c,GAA1B,CAA8B8G,WAA9B,CAAJ,EAAgD;AAC7C,qBAAO,KAAK6V,oBAAL,CAA0Bzc,GAA1B,CAA8B4G,WAA9B,CAAP;AACF,aAFD,MAEO;AACJ,qBAAO,IAAP;AACF;AACH;;;eAED,eAAoB;AACjB,mBAAO,KAAK+W,qBAAL,GAA6B,KAAKC,sBAAlC,GAA2D,KAAKC,sBAAvE;AACF;AAED;;;;;;iBAGA,mCAAuB;AACpB,mBAAO,KAAKC,0BAAL,EAAP;AACF;;;iBAEO,sCAA0B;AAC/B;AACA,gBAAI,KAAKtC,wBAAL,KAAkC,CAAlC,IAAuC,KAAKD,wBAAL,KAAkC,CAA7E,EAAgF;AAC7E,kBAAI,CAAC,KAAKK,qBAAL,IAA8B,KAAKP,uBAApC,KAAgE,KAAKC,sBAAL,KAAgC,CAApG,EAAuG;AACpG;AACA,uBAAO,6DAAYtW,SAAZ,CAAsB,kEAAtB,EAA0F,KAAKyH,IAA/F,CAAP;AACF;;AAED,qBAAO,6DAAYzH,SAAZ,CAAsB,oEAAtB,EAA4F,KAAKyH,IAAjG,CAAP;AACF;;AAED,gBAAMsR,eAAe,GAAY,KAAKvC,wBAAL,KAAkC,CAAnE;AACA,gBAAMwC,oBAAoB,GACpBD,eAAe,GACP,KAAKvC,wBADE,GAEP,KAAKD,wBAHnB;;AAKA,gBAAI,KAAKD,sBAAL,KAAgC,CAAhC,IAAqC0C,oBAAoB,KAAK,CAAlE,EAAqE;AAClE;AACA,qBAAO,EAAP;AACF;;AAED,gBAAIA,oBAAoB,KAAK,CAA7B,EAAgC;AAC7B,qBAAO,6DAAYhZ,SAAZ,CAAsB,sDAAtB,EAA8E,KAAKyH,IAAnF,CAAP;AACF;;AAED,gBAAI,KAAK6O,sBAAL,KAAgC,CAApC,EAAuC;AACpC,kBAAK,KAAKM,qBAAL,IAA8BmC,eAA/B,IACG,KAAK1C,uBAAL,IAAgC,CAAC0C,eADxC,EAC0D;AACvD;AACA,uBAAO,EAAP;AACF;;AAED,qBAAO,6DAAY/Y,SAAZ,CAAsB,iDAAtB,EAAyE,KAAKyH,IAA9E,CAAP;AACF;;AAED,gBAAI,KAAK6O,sBAAL,GAA8B0C,oBAAlC,EAAwD;AACrD,qBAAO,6DAAYhZ,SAAZ,CAAsB,mDAAtB,EAA2E,KAAKyH,IAAhF,CAAP;AACF,aAtC8B,CAwC/B;;;AACA,mBAAO,EAAP;AACF;;;iBAED,qBAAY7F,WAAZ,EAAoC;AACjC,gBAAI,CAAC,KAAKzE,aAAV,EAAyB;AACtB,qBAAO,CAAP;AACF;;AAED,gBAAI0K,QAAQ,GAAW,CAAvB;;AALiC,yDAMd,KAAK1K,aANS;AAAA;;AAAA;AAMjC,wEAAuC;AAAA,oBAA5BO,IAA4B;;AACpC,oBAAIA,IAAI,CAACkE,WAAL,KAAqBA,WAAzB,EAAsC;AACnCiG,0BAAQ,IAAI,kEAAa8I,UAAb,CAAwBjT,IAAI,CAACA,IAAL,CAAUmK,QAAlC,CAAZ;AACF;AACH;AAVgC;AAAA;AAAA;AAAA;AAAA;;AAWjC,mBAAOA,QAAP;AACF;;;eAED,eAAoB;AACjB,gBAAIA,QAAQ,GAAW,CAAvB;;AAEA,gBAAI,KAAK1K,aAAT,EAAwB;AACrB,mBAAKA,aAAL,CAAmBJ,OAAnB,CAA2B,UAACW,IAAD;AAAA,uBAAUmK,QAAQ,IAAI,kEAAa8I,UAAb,CAAwBjT,IAAI,CAACA,IAAL,CAAUmK,QAAlC,CAAtB;AAAA,eAA3B;AACF;;AAED,gBAAI,KAAK1E,mBAAT,EAA8B;AAC3B,mBAAKA,mBAAL,CAAyBpG,OAAzB,CAAiC,UAAC+F,OAAD;AAAA,uBAAa+E,QAAQ,IAAI/E,OAAO,CAAC6G,WAAjC;AAAA,eAAjC;AACF;;AAED,mBAAO9B,QAAP;AACF;;;iBAED,2BAAe;AAAA;;AACZ,iBAAKyO,sBAAL,GAA8B,CAA9B;AACA,iBAAKE,wBAAL,GAAgC,CAAhC;AACA,iBAAKD,wBAAL,GAAgC,CAAhC;AACA,iBAAKlI,uCAAL;;AAEA,gBAAI,KAAKlR,aAAT,EAAwB;AAAA,2DACF,KAAKA,aADH;AAAA;;AAAA;AAAA;AAAA,sBACVO,IADU;;AAElB,sBAAMkE,WAAW,GACX,2EAAiBF,6BAAjB,CAA+CkF,IAA/C,CAAoD,UAAC+B,EAAD;AAAA,2BAAqBA,EAAE,KAAKjL,IAAI,CAACkE,WAAjC;AAAA,mBAApD,CADN;;AAEA,sBAAIA,WAAJ,EAAiB;AACd,2BAAI,CAACqX,iCAAL,CAAuCvb,IAAI,CAACiM,WAA5C,EAAyD/H,WAAzD;AACF,mBAFD,MAEO,IAAIlE,IAAI,CAACkE,WAAL,KAAqB,oEAAYN,aAArC,EAAoD;AACxD,2BAAI,CAACgV,sBAAL;AACF,mBAFM,MAEA,IAAI5Y,IAAI,CAACkE,WAAL,KAAqB,oEAAYX,eAArC,EAAsD;AAC1D,wBAAIvD,IAAI,CAACkI,aAAT,EAAwB;AACrB,6BAAI,CAAC2Q,wBAAL;AACF,qBAFD,MAEO;AACJ,6BAAI,CAACC,wBAAL;AACF;AACH;AAdiB;;AACrB,0EAAuC;AAAA;AActC;AAfoB;AAAA;AAAA;AAAA;AAAA;AAgBvB;;AAED,gBAAI,KAAKrT,mBAAT,EAA8B;AAAA,2DACL,KAAKA,mBADA;AAAA;;AAAA;AAAA;AAAA,sBAChBL,OADgB;;AAExB,sBAAMlB,WAAW,GACX,2EAAiBF,6BAAjB,CAA+CkF,IAA/C,CAAoD,UAAC+B,EAAD;AAAA,2BAAqBA,EAAE,KAAK7F,OAAO,CAAClB,WAApC;AAAA,mBAApD,CADN;;AAEA,sBAAIA,WAAJ,EAAiB;AACd,2BAAI,CAACqX,iCAAL,CAAuCnW,OAAO,CAAC6G,WAA/C,EAA4D/H,WAA5D;AACF;AANuB;;AAC3B,0EAAgD;AAAA;AAM/C;AAP0B;AAAA;AAAA;AAAA;AAAA;AAQ7B,aAhCW,CAkCZ;;;AACA,iBAAK6U,qBAAL,GAA6B,CAAC,KAAKqC,0BAAL,EAA9B;AACF;;;eAED,eAAwB;AACrB,mBAAO,KAAKH,qBAAL,KAA+B,CAA/B,KACC,KAAKC,sBAAL,GAA8B,CAA9B,IAAmC,KAAKhC,qBAAzC,IACM,KAAKiC,sBAAL,GAA8B,CAA9B,IAAmC,KAAKxC,uBAF9C,CAAP;AAGF;;;eAED,eAA0B;AACvB,mBAAO,KAAKsC,qBAAL,GAA6B,CAA7B,KACA,KAAKC,sBAAL,GAA8B,CAA9B,IAAmC,KAAKC,sBAAL,GAA8B,CADjE,CAAP;AAEF;AAED;;;;;;iBAGQ,4BAAgB;AACrB,gBAAI,KAAKjC,qBAAL,IAA8B,KAAKP,uBAAvC,EAAgE;AAC7D,mBAAKmB,SAAL,GAAiB,EAAjB;;AACA,kBAAM0B,kBAAkB,GAAW,6DAAYlZ,SAAZ,CAAsB,2CAAtB,CAAnC;;AAEA,kBAAI,KAAKmW,eAAL,KAAyB,CAAzB,IAA8B,KAAKC,gBAAL,KAA0B,CAA5D,EAA+D;AAC5D,qBAAKoB,SAAL,GAAiB,6DAAYxX,SAAZ,CAAsB,mDAAtB,CAAjB;AACF;;AAED,kBAAI,CAAC,KAAKwX,SAAV,EAAqB;AAClB,qBAAKA,SAAL,GAAiB0B,kBAAjB;AACF;AACH,aAXD,MAWO;AACJ,kBAAI,KAAK/C,eAAL,KAAyB,CAAzB,IAA8B,KAAKC,gBAAL,KAA0B,CAA5D,EAA+D;AAC5D,qBAAKoB,SAAL,GAAiB,6DAAYxX,SAAZ,CAAsB,kDAAtB,CAAjB;AACF,eAFD,MAEO,IAAI,KAAKmW,eAAL,KAAyB,CAA7B,EAAgC;AACpC,qBAAKqB,SAAL,GAAiB,6DAAYxX,SAAZ,CAAsB,iDAAtB,CAAjB;AACF;AACH;AACH;;;iBAED,+BAAmB;AAChB,gBAAMmZ,SAAS,GAAwB,EAAvC;;AAEA,gBAAI,KAAKhc,aAAT,EAAwB;AACrB,mBAAKA,aAAL,CAAmBJ,OAAnB,CAA2B,UAACW,IAAD,EAAU;AAClC,oBAAIA,IAAI,CAACkE,WAAL,KAAqB,oEAAYsB,UAArC,EAAiD;AAC9CiW,2BAAS,CAACle,IAAV,CAAe,kFAAkB+D,OAAlB,CAA0BC,MAA1B,CAAiCvB,IAAI,CAACA,IAAtC,EAA4CA,IAAI,CAACkE,WAAjD,EAA8DlE,IAAI,CAACkI,aAAnE,CAAf;AACF;AACH,eAJD;AAKF;;AAED,gBAAI,KAAKzC,mBAAT,EAA8B;AAC3B,mBAAKA,mBAAL,CAAyBpG,OAAzB,CAAiC,UAACqc,WAAD,EAAiB;AAC/C,oBAAIA,WAAW,CAACxX,WAAZ,KAA4B,oEAAYsB,UAA5C,EAAwD;AACrDiW,2BAAS,CAACle,IAAV,CAAe,kFAAkB+D,OAAlB,CAA0BC,MAA1B,CAAiC,IAAjC,EAAuCma,WAAW,CAACxX,WAAnD,EAAgE,KAAhE,CAAf;AACF;AACH,eAJD;AAKF;;AAED,mBAAOuX,SAAP;AACF;;;eAED,eAA2B;AACxB,gBAAME,iBAAiB,GAAY,CAAC,6DAAYxc,OAAZ,CAAoB,KAAKM,aAAzB,CAAD,IAC7B,KAAKA,aAAL,CAAmBuS,IAAnB,CACM,UAAAhS,IAAI;AAAA,qBAAIA,IAAI,CAACgL,oBAAL,CAA0BgH,IAA1B,CACF,UAAA9N,WAAW;AAAA,uBAAI,2EAAiBuN,kBAAjB,CAAoClK,QAApC,CAA6CrD,WAA7C,CAAJ;AAAA,eADT,CAAJ;AAAA,aADV,CADN;AAKA,gBAAM0X,uBAAuB,GAAY,CAAC,6DAAYzc,OAAZ,CAAoB,KAAKM,aAAzB,CAAD,IACnC,KAAKA,aAAL,CAAmBuS,IAAnB,CACM,UAAAhS,IAAI;AAAA,qBAAIA,IAAI,CAACgL,oBAAL,CAA0BgH,IAA1B,CACF,UAAA9N,WAAW;AAAA,uBAAI,2EAAiBgH,yBAAjB,CAA2C3D,QAA3C,CAAoDrD,WAApD,CAAJ;AAAA,eADT,CAAJ;AAAA,aADV,CADN;AAKA,gBAAM2X,iBAAiB,GAAY,CAAC,6DAAY1c,OAAZ,CAAoB,KAAKsG,mBAAzB,CAApC;AAEA,mBAAO,CACJkW,iBAAiB,GACT,wEAAcvc,IADL,GAET,IAHJ,EAIJwc,uBAAuB,GACf,wEAAclK,WADC,GAEf,IANJ,EAOJmK,iBAAiB,GACT,wEAActX,IADL,GAET,IATJ,EAULN,MAVK,CAUE,UAAAvC,aAAa;AAAA,qBAAIA,aAAa,IAAI,IAArB;AAAA,aAVf,CAAP;AAWF;;;iBAEO,wCAA+B2O,mBAA/B,EAAyE;AAAA;;AAAA,yDACpD,2EAAiBrM,6BADmC;AAAA;;AAAA;AAAA;AAAA,oBACnEE,WADmE;AAE3E,oBAAM4X,UAAU,GAAqB,IAAI,6FAAJ,EAArC;AACA,oBAAMlL,sBAAsB,GAAwBP,mBAAmB,GAC/DA,mBAAmB,CAACnH,IAApB,CAAyB,UAAA6H,OAAO;AAAA,yBAAIA,OAAO,CAAC7M,WAAR,KAAwBA,WAA5B;AAAA,iBAAhC,CAD+D,GAE/D,IAFR;;AAIA,oBAAI0M,sBAAJ,EAA4B;AACzBkL,4BAAU,CAAChL,oBAAX,GAAkCF,sBAAsB,CAACmL,iBAAzD;AACAD,4BAAU,CAAC7M,kBAAX,GAAgC2B,sBAAsB,CAAC1B,eAAvD;AACF;;AAED,uBAAI,CAAC6K,oBAAL,CAA0B1c,GAA1B,CAA8B6G,WAA9B,EAA2C4X,UAA3C;AAZ2E;;AAC9E,wEAA0E;AAAA;AAYzE;AAb6E;AAAA;AAAA;AAAA;AAAA;AAchF;;;iBAEO,mDAAuC;AAC5C,oEAAQzc,OAAR,CAAgB,KAAK0a,oBAArB,EAA2C,UAAChJ,OAAD,EAAa;AACrDA,qBAAO,CAACL,oBAAR,GAA+B,CAA/B;AACAK,qBAAO,CAACpB,kBAAR,GAA6B,CAA7B;AACF,aAHD;AAIF;;;iBAEO,2CAAkCxF,QAAlC,EAAoDjG,WAApD,EAA4E;AACjF,iBAAK6V,oBAAL,CAA0Bzc,GAA1B,CAA8B4G,WAA9B,EAA2CwM,oBAA3C,IAAmE,CAAnE;AACA,iBAAKqJ,oBAAL,CAA0Bzc,GAA1B,CAA8B4G,WAA9B,EAA2CyL,kBAA3C,IAAiExF,QAAjE;AACF;;;;QAlcmC,qG;;;;;;;;;;;;;;;;;AChBvC;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;;;UAMa6R,kB;AACV,oCAAoBpW,EAApB,EAA4CqW,SAA5C,EAAyE;AAAA;;AAArD,eAAArW,EAAA,GAAAA,EAAA;AAAwB,eAAAqW,SAAA,GAAAA,SAAA;AAC3C;;;;iBAED,2BAAe;AACZ,iBAAKA,SAAL,CAAe1a,MAAf,CAAsB,KAAKqE,EAAL,CAAQQ,aAA9B,EAA6C8V,mBAA7C;AACF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;uECf0E,4E,IAC9E,wJ,IAAiC,+E,IAC9B,qJ,IAA8B,6E,IAA4B,+E,IAC1D,6I,IAAsB,6E,IAA4B,4E,IAC/C,4E,IACN;AAAA;AAAA,sBAGgE,UAHhE;;AAGyB;;;;;AAHzB;AAAA,oR,GAAA,wN,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA,U,GAGgE,4E,IACtC,4E,IAC1B,iZ,GAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gB,GAIsD,4E,IACtD;AAAA;AATyB,6BAA6B,iBAA7B;AACA,6BAAuB,cAAvB;;AAFzB,yBACyB,SADzB,EAEyB,SAFzB;;AAMsB,6BAAqC,iBAArC;AACA,6BAA4B,oBAA5B;AACA,6BAAuB,cAAvB;AACA,6BAA+B,cAA/B;;AAJtB,yBACsB,SADtB,EAEsB,SAFtB,EAGsB,SAHtB,EAIsB,SAJtB;AAIqD,S,EAAA;AAAA;AAZpB;;AAAA;;AACR;;AAAA;AAAqB,S;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;ACH9C;AAAA;;;AAAA;AAAA;AAAA;AAAA;;AAEA;;;;;UAGaC,gB,6BAAb;AAAA;;AACG,aAAArL,oBAAA,GAA+B,CAA/B;AACA,aAAA7B,kBAAA,GAA6B,CAA7B;AACA,aAAAyB,oBAAA,GAA+B,CAA/B;AACA,aAAAf,kBAAA,GAA6B,CAA7B;AACF,O;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;uECyBE,6Z,GAAA,8M,EAAA,uY,EAAA,iV,EAAA,qf,EAAA;AAAA;AAAA,U,EAAA,iU,EAAA,sK,EAAA,6gB,GAAmF,+E,IAChF,uU,GAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gB,EAGkB,yD,GAAqD,kF,IACpD,4E,IACtB,4E,IAAA;AAAA;;AANA;;AAIqB;;AADA,6BAAoC,oBAApC;AADA,6BAAyB,SAAzB;AADA;;AAAlB,yBAGkB,SAHlB,EAEkB,SAFlB,EACkB,SADlB,EAAkB,SAAlB;AAA0C,S,EAAA;AAD7C;;AAAA;;AAAA;AAAmF,S;AAAA;;;uEAOnF,6Z,GAAA,8M,EAAA,uY,EAAA,iV,EAAA,qf,EAAA;AAAA;AAAA,U,EAAA,iU,EAAA,sK,EAAA,6gB,GAAqF,+E,IAClF,uU,GAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gB,EAGkB,yD,GAA4C,kF,IAC3C,4E,IACtB,4E,IAAA;AAAA;;AANA;;AAIqB;;AADA,6BAA+B,eAA/B;AADA,6BAAyB,SAAzB;AADA;;AAAlB,yBAGkB,SAHlB,EAEkB,SAFlB,EACkB,SADlB,EAAkB,SAAlB;AAA0C,S,EAAA;AAD7C;;AAAA;;AAAA;AAAqF,S;AAAA;;;uEAOrF,6Z,GAAA,8M,EAAA,uY,EAAA,iV,EAAA,qf,EAAA;AAAA;AAAA,U,EAAA,iU,EAAA,sK,EAAA,6gB,GAAoC,+E,IACjC,uU,GAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gB,EAGkB,yD,GAAqD,kF,IACpD,4E,IACtB,4E,IAAA;AAAA;;AANA;;AAIqB;;AADA,6BAAoC,oBAApC;AADA,6BAAyB,SAAzB;AADA;;AAAlB,yBAGkB,SAHlB,EAEkB,SAFlB,EACkB,SADlB,EAAkB,SAAlB;AAA+C,S,EAAA;AADlD;;AAAA;;AAAA;AAAoC,S;AAAA;;;uEAOpC,6Z,GAAA,8M,EAAA,uY,EAAA,iV,EAAA,qf,EAAA;AAAA;AAAA,U,EAAA,iU,EAAA,sK,EAAA,6gB,GAAoC,+E,IACjC,uU,GAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gB,EAGkB,yD,GAAmD,kF,IAClD,4E,IACtB,4E,IAAA;AAAA;;AANA;;AAIqB;;AADA,6BAAkC,kBAAlC;AADA,6BAAyB,SAAzB;AADA;;AAAlB,yBAGkB,SAHlB,EAEkB,SAFlB,EACkB,SADlB,EAAkB,SAAlB;AAA6C,S,EAAA;AADhD;;AAAA;;AAAA;AAAoC,S;AAAA;;;uEAiB9B,uT,GAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gB,GAIgE,qF,IAChE;AAAA;;AADgB,4DAA+C,OAA/C,CAA+C,OAA/C,CAA+C,SAA/C,CAA+C,IAA/C;;AADA,gEAAuD,OAAvD,CAAuD,OAAvD,CAAuD,SAAvD,CAAuD,IAAvD;;AADA,gEAAmD,OAAnD,CAAmD,OAAnD,CAAmD,SAAnD,CAAmD,IAAnD;;AADA;;AADhB,wBAIgB,SAJhB,EAGgB,SAHhB,EAEgB,SAFhB,EACgB,SADhB;AACoC,S,EAAA,I;AAAA;;;uEAgBvC,ygB,GAAA,uN,EAAA;AAAA;AAAA,U,EAAA,oU,EAAA,wN,EAAA,sf,GAAiG,6F,IAEjG,4E,IAAA;AAFA;;AAAA;AAAA,S,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAiG;;AAAA;AAEjG,S;AAAA;;;uEAIG,0I,GAAA,oJ,EAAA,+O,GAA6E,I,EAAA;AAAA;;AAArC,4CAAoC,OAApC,CAAoC,MAApC,CAAoC,OAApC,CAAoC,SAApC,CAAoC,IAApC;;AAAxC,wBAAwC,SAAxC;AAA4E,S;AAAA;;;uEAH/E,4iB,GAAA,uN,EAAA;AAAA;AAAA,U,EAAA,oU,EAAA,wN,EAAA,sf,GAE6B,kF,IAC1B,uH,GAAA;AAAA;AAAA,gB,GAAwF,kF,IACxF,uH,IAAM,8E,IAA4B,+E,IACrC,4E,IAAA;AAAA;;AALA;;AAAA;;AAGa,4CAA6B,OAA7B,CAA6B,OAA7B,CAA6B,SAA7B,CAA6B,IAA7B;;AAAV,wBAAU,SAAV;AAAuC,S,EAAA;AAH1C;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAIS;;AAAA;AAAqB,S;AAAA;;;uEAE9B,ma,GAAA,uN,EAAA;AAAA;AAAA,U,EAAA,oU,GAAkC,0E,IAA0B,4E,IAAA;AAA5D;AAAA,S,EAAA;AAAA;AAAA;;AAAA;;AAAkC;;AAAA;AAA0B,S;AAAA;;;uEAC5D,ma,GAAA,uN,EAAA;AAAA;AAAA,U,EAAA,oU,GAAkC,0E,IAAwB,4E,IAAA;AAA1D;AAAA,S,EAAA;AAAA;AAAA;;AAAA;;AAAkC;;AAAA;AAAwB,S;AAAA;;;uEApC7D;AAAA;AAAA,sBAEgD,UAFhD;;AAEY;;;;;AAFZ;AAAA,4N,GAAA,yK,EAAA,sL,EAAA,qK,EAAA,2rB,EAAA;AAAA;AAAA,U,EAAA,gN,EAAA;AAAA;AAAA,U,EAAA,wV,EAAA,wV,GAEgD,kF,IAC7C,kiB,GAAA,wN,EAAA;AAAA;AAAA,U,EAAA,qU,EAAA,wN,EAAA,uf,GAAiD,kF,IAC9C,4U,GAAA;AAAA;AAAA,gB,GAAuC,kF,IACvC,wI,GAAA,qJ,EAAA,gP,GAAmD,kF,IACnD,uH,IAAM,8E,IAAwB,+E,IACnB,kF,IACd,oc,GAAA,wN,EAAA;AAAA;AAAA,U,EAAA,qU,GAA0C,kF,IACvC,uH,GAAA;AAAA;AAAA,gB,GAKiB,+E,IACN,kF,IACd,6c,GAAA,wN,EAAA;AAAA;AAAA,U,EAAA,qU,GAAmD,kF,IAChD;AAAA;AAAA;;AAAA;;;;;AAIO;;;;;AAJP;AAAA,sB,GAAA,gZ,GAI2D,+E,IAChD,kF,IACd,2b,GAAA,wN,EAAA;AAAA;AAAA,U,EAAA,qU,GAAiC,8F,IAEnB,kF,IACd,uH,GAAA;AAAA;AAAA,gB,GAEc,kF,IACd,uH,GAAA;AAAA;AAAA,gB,GAKc,kF,IACd,wH,GAAA;AAAA;AAAA,gB,GAA0E,kF,IAC1E,wH,GAAA;AAAA;AAAA,gB,GAAwE,+E,IAC3E,4E,IAAA;AAAA;;AArCA;;AAGG;;AAAA;;AACgB,4BAAW,QAAX,CAAW,SAAX;;AAAb,yBAAa,SAAb;;AAIH;;AACmB,6DAA6C,QAA7C,CAA6C,SAA7C,CAA6C,IAA7C;;AAAhB,yBAAgB,UAAhB;;AAOH;;AACG;;AAMH;;AAGa,wDAAmE,wBAAnE,CAAmE,aAAnE;;AAAb,yBAAa,UAAb;;AAGa,wDAAqE,wBAArE,CAAqE,eAArE;;AAAb,yBAAa,UAAb;;AAMa,8BAAoB,aAApB;;AAAb,yBAAa,UAAb;;AACa,8BAAoB,aAApB;;AAAb,yBAAa,UAAb;AAAiC,S,EAAA;AAAA;;AAnCxB,8CAA8C,QAA9C,CAA8C,SAA9C;;AADZ;;AAAA;;AAAA;;AAAA,wBACY,SADZ;;AAGG;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAEa,6BAA6B,QAA7B,CAA6B,SAA7B,CAA6B,IAA7B,CAA6B,KAA7B;;AAAV,yBAAU,UAAV;;AACM;;AAAA;;AAET;AAAA;;AAAA;;AAQA;AAAA;;AAAA;;AAIU,wEAA2D,YAA3D,CAA2D,UAA3D;;AAHP;;AAAA,yBAGO,UAHP;;AAMH;AAAA;;AAAA;;AAAiC;;AAAA;AAEjC,S;AAAA;;;4MAzF4D,4E,IAClE,4I,IAAqB,+E,IAClB;AAAA;AAAA,sBAEsD,UAFtD;;AAEM;;;;;AAFN;AAAA,0R,GAAA;AAAA;AAAA,U,GAEsD,+E,IACpB,4E,IAC/B,8E,IAEsB,4E,IAC5B,4Z,GAAA,qK,EAAA,qK,EAAA,qN,EAAA,uQ,EAAA,qN,EAAA,yT,EAAA,qK,EAAA,qN,EAAA,6T,EAAA,qK,EAAA,2W,EAAA,wN,EAAA,oK,EAAA;AAAA;AAAA,gB,EAAA;AAAA;AAAA,U,EAAA;AAAA;AAAA,U,EAAA;AAAA;AAAA,U,EAAA;AAAA;AAAA,U,EAAA,8N,EAAA,8N,EAAA,qK,EAAA,8mB,EAAA;AAAA;AAAA,U,EAAA;AAAA;AAAA,U,EAAA,4J,EAAA,yV,EAAA,yV,GAAwE,+E,IAC7C,+E,IACxB,wb,GAAA,8M,EAAA,uY,EAAA,iV,EAAA,sf,EAAA;AAAA;AAAA,U,EAAA,iU,EAAA,sK,EAAA,8gB,GAAmC,+E,IAChC,uU,GAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gB,GAGkF,kF,IAC/D,4E,IACN,+E,IAChB,ic,GAAA,8M,EAAA,uY,EAAA,iV,EAAA,sf,EAAA;AAAA;AAAA,U,EAAA,iU,EAAA,sK,EAAA,8gB,GAA4C,+E,IACzC,uU,GAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gB,EAGkB,yD,GAA2D,kF,IAC1D,4E,IACN,+E,IAChB,yb,GAAA,8M,EAAA,uY,EAAA,iV,EAAA,sf,EAAA;AAAA;AAAA,U,EAAA,iU,EAAA,sK,EAAA,8gB,GAAoC,wF,GAAA,yD,GAEpB,+E,IAChB,8Z,GAAA,8M,EAAA,uY,EAAA,iV,EAAA,sf,EAAA;AAAA;AAAA,U,EAAA,iU,EAAA,sK,EAAA,8gB,GAAe,+E,IACZ,uU,GAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gB,EAGkB,yD,GAAiD,kF,IAChD,4E,IACN,+E,IAChB,0H,GAAA;AAAA;AAAA,gB,GAMgB,+E,IAChB,0H,GAAA;AAAA;AAAA,gB,GAMgB,+E,IAChB,0H,GAAA;AAAA;AAAA,gB,GAMgB,+E,IAChB,0H,GAAA;AAAA;AAAA,gB,GAMgB,+E,IACS,+E,IACzB,0H,GAAA;AAAA;AAAA,gB,GAqCa,iF,IAEW,+E,IACxB,uW,GAAA,2S,EAAA;AAAA;AAAA,U,GAAe,+E,IACZ,8W,GAAA;AAAA;AAAA,gB,EAAA;AAAA;AAAA,U,GAA4E,+F,IAExD,4E,IACP,4E,IACnB;AAAA;;AA3GG;;AAOW,6BAAgC,gBAAhC;;AAAd,yBAAc,SAAd;;AAEG;;AAIqB,mEAA+D,mBAA/D;;AADA,6BAA2B,WAA3B;AADA,6BAAyB,SAAzB;AADA;;AAAlB,yBAGkB,SAHlB,EAEkB,SAFlB,EACkB,SADlB,EAAkB,SAAlB;;AAMH;;AAIqB;;AADA,8BAA0C,0BAA1C;AADA,8BAAyB,SAAzB;AADA;;AAAlB,yBAGkB,UAHlB,EAEkB,UAFlB,EACkB,UADlB,EAAkB,UAAlB;;AAMH;;AAGA;;AAIqB;;AADA,8BAAgC,gBAAhC;AADA,8BAAyB,SAAzB;AADA;;AAAlB,yBAGkB,UAHlB,EAEkB,UAFlB,EACkB,UADlB,EAAkB,UAAlB;;AAMY,wDAAmE,wBAAnE,CAAmE,aAAnE;;AAAf,0BAAe,UAAf;;AAOe,wDAAqE,wBAArE,CAAqE,eAArE;;AAAf,0BAAe,UAAf;;AAOe,8BAAoB,aAApB;;AAAf,0BAAe,UAAf;;AAOe,8BAAoB,aAApB;;AAAf,0BAAe,UAAf;;AAQY,8BAAsC,SAAtC,CAAsC,IAAtC;;AAAZ,0BAAY,UAAZ;;AAyCsB,8BAAwD,eAAxD,CAAwD,uBAAxD;;AAAnB,0BAAmB,UAAnB;AAA2E,S,EAAA;AAAA;AAhGjF;;AAAA;;AAAA;;AAEG;;AAAA;;AAAA;;AAOA;;AAAA;;AAAA;;AAOA;;AAAA;;AAAA;;AAAoC;;AAAA;;AAGpC;;AAAA;;AAAA;;AA4EA;;AAAA;;AACG;;AAAA;;AAA4E;;AAAA;AAE5E,S;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC3GN;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;UAqBayM,wB;AA0BV,0CAAoBC,sBAApB,EAAoE;AAAA;;AAAA;;AAAhD,eAAAA,sBAAA,GAAAA,sBAAA;AAjBpB,eAAAC,kBAAA,GAA8B,IAA9B;AAMA,eAAAC,kBAAA,GAA4C,IAAI,0DAAJ,EAA5C;AAEA,eAAAC,UAAA,GAAuB,EAAvB;AACA,eAAAC,YAAA,GAAyB,EAAzB;AACA,eAAAC,gBAAA,GAA4B,KAA5B;AAEA,eAAAC,mBAAA,GAAuC;AACpCC,iBAAK,EAAE,4DAAYta,SAAZ,CAAsB,oDAAtB,CAD6B;AAEpCua,kBAAM,EAAE;AAAA,qBAAM,OAAI,CAACH,gBAAL,GAAwB,IAA9B;AAAA;AAF4B,WAAvC;AAKsE;;;;iBAEtE,uBAAW;AACR,iBAAKI,QAAL;AACF;;;iBAED,oBAAQ;AACL,gBAAI,CAAC,KAAKC,SAAN,IAAmB,CAAC,KAAKC,cAA7B,EAA6C;AAC1C;AACF;;AAED,iBAAKtN,qBAAL;AACA,iBAAKqN,SAAL,CAAe1d,OAAf,CAAuB,UAACJ,IAAD;AAAA,qBAAUA,IAAI,CAACgB,eAAL,EAAV;AAAA,aAAvB;AACA,iBAAKgd,gCAAL;AACA,iBAAKV,kBAAL,CAAwB1c,IAAxB,CAA6B,CAAC,KAAKqd,SAAnC;AACF;;;iBAEO,iCAAqB;AAC1B,iBAAKV,UAAL,GAAkB,EAAlB;AACA,iBAAKC,YAAL,GAAoB,EAApB;AACA,iBAAKvgB,uBAAL,CAA6BwT,qBAA7B;AACF;;;iBAEO,4CAAgC;AACrC,iBAAKyN,oBAAL;AACA,iBAAKC,mBAAL;AACA,iBAAKC,qBAAL;;AACA,gBAAI,KAAKL,cAAL,CAAoBM,gBAAxB,EAA0C;AACvC,mBAAKC,2BAAL;AACF;;AAED,iBAAKf,UAAL,GAAkB5d,KAAK,CAACC,IAAN,CAAW,IAAIC,GAAJ,CAAQ,KAAK0d,UAAb,CAAX,CAAlB;AACA,iBAAKC,YAAL,GAAoB7d,KAAK,CAACC,IAAN,CAAW,IAAIC,GAAJ,CAAQ,KAAK2d,YAAb,CAAX,CAApB;AACF;;;iBAEO,oCAAwB;AAC7B,gBAAIe,cAAc,GAAW,CAA7B;AACA,gBAAIC,cAAc,GAAW,CAA7B;AACA,gBAAIC,YAAY,GAAW,CAA3B;AACA,gBAAIC,qBAAqB,GAAW,CAApC;AACA,gBAAIC,oBAAoB,GAAY,KAApC;;AAL6B,yDAOV,KAAKb,SAPK;AAAA;;AAAA;AAO7B,wEAAmC;AAAA,oBAAxB9d,IAAwB;AAChCwe,8BAAc,IAAIxe,IAAI,CAACic,sBAAvB;AACAsC,8BAAc,IAAIve,IAAI,CAACkc,sBAAvB;AACAuC,4BAAY,IAAIze,IAAI,CAACgc,qBAArB;AACA0C,qCAAqB,IAAI1e,IAAI,CAAC4e,6BAA9B;;AACA,oBAAIJ,cAAc,KAAK,CAAnB,IAAwBD,cAAc,KAAK,CAA/C,EAAkD;AAC/CI,sCAAoB,GAAG,IAAvB;AACA;AACF;AACH;AAhB4B;AAAA;AAAA;AAAA;AAAA;;AAkB7B,mBAAO;AACJE,gCAAkB,EAAE,CAACJ,YAAD,IAAiB,CAACD,cAAlB,IAAoC,CAACD,cAArC,IAAuD,CAACG,qBADxE;AAEJC,kCAAoB,EAAEA,oBAFlB;AAGJG,4BAAc,EAAEN,cAAc,GAAG;AAH7B,aAAP;AAKF;;;iBAEO,gCAAoB;AACzB,gBAAMO,MAAM,GAA0B,KAAKC,wBAAL,EAAtC;;AACA,gBAAID,MAAM,CAACF,kBAAX,EAA+B;AAC5B;AACA,kBAAI,KAAKxB,kBAAT,EAA6B;AAC1B,qBAAKE,UAAL,CAAgBjf,IAAhB,CAAqB,4DAAY+E,SAAZ,CAAsB,iDAAtB,CAArB;AACF,eAFD,MAEO;AACJ,qBAAKma,YAAL,CAAkBlf,IAAlB,CAAuB,4DAAY+E,SAAZ,CAAsB,iDAAtB,CAAvB;AACF;AACH,aAPD,MAOO,IAAI0b,MAAM,CAACJ,oBAAX,EAAiC;AACrC;AACA,mBAAKpB,UAAL,CAAgBjf,IAAhB,CAAqB,4DAAY+E,SAAZ,CAAsB,6DAAtB,CAArB;AACF,aAHM,MAGA,IAAI,KAAK+Z,sBAAL,CAA4B6B,uCAA5B,CACP,KAAKlB,cAAL,CAAoBmB,qBADb,KACuCH,MAAM,CAACD,cADlD,EACkE;AACtE;AACA,mBAAKvB,UAAL,CAAgBjf,IAAhB,CACM,4DAAY+E,SAAZ,CACM,kEADN,EAEM,KAAK+Z,sBAAL,CAA4B+B,OAA5B,CAAoC,KAAKpB,cAAL,CAAoBmB,qBAAxD,CAFN,CADN;AAIF;AACH;;;iBAEO,+BAAmB;AAAA;;AACxB,iBAAKpB,SAAL,CAAe1d,OAAf,CAAuB,UAACG,QAAD,EAAc;AAClC,kBAAM6e,SAAS,GAAW7e,QAAQ,CAAC8e,uBAAT,EAA1B;;AACA,kBAAID,SAAJ,EAAe;AACZ,uBAAI,CAAC7B,UAAL,CAAgBjf,IAAhB,CAAqB8gB,SAArB;AACF;AACH,aALD;AAMF;;;iBAEO,iCAAqB;AAAA;;AAC1B,gBAAME,SAAS,GAAsB,KAAKxB,SAAL,CAAe7T,IAAf,CAAoB,UAACjK,IAAD;AAAA,qBAAUA,IAAI,CAACuf,gBAAf;AAAA,aAApB,CAArC;;AACA,gBAAI,CAACD,SAAL,EAAgB;AACb;AACF,aAJyB,CAK1B;;;AACA,gBAAME,uBAAuB,GAAWF,SAAS,CAACG,gBAAlD;AACA,gBAAMC,qBAAqB,GAAWJ,SAAS,CAACtD,qBAAhD;AACA,gBAAM2D,WAAW,GAAYL,SAAS,CAACM,sBAAvC;AACA,gBAAMC,SAAS,GAAYP,SAAS,CAACQ,oBAArC;AAEA,iBAAKhC,SAAL,CAAe1d,OAAf,CAAuB,UAACJ,IAAD,EAAU;AAC9B,kBAAI,CAACA,IAAI,CAACuf,gBAAV,EAA4B;AACzB;AACF;;AACD,kBAAIC,uBAAuB,KAAKxf,IAAI,CAACyf,gBAAjC,IACEC,qBAAqB,KAAK1f,IAAI,CAACgc,qBADrC,EAC4D;AACzD;AACA;AACA;AACA,uBAAI,CAAC/e,uBAAL,CAA6BsU,qBAA7B,GAAqD,IAArD;;AACA,uBAAI,CAACiM,YAAL,CAAkBlf,IAAlB,CACM,4DAAY+E,SAAZ,CAAsB,6DAAtB,CADN;AAEF;;AACD,kBAAIsc,WAAW,KAAK3f,IAAI,CAAC4f,sBAArB,IAA+CC,SAAS,KAAK7f,IAAI,CAAC8f,oBAAtE,EAA4F;AACzF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAI,CAAC7iB,uBAAL,CAA6BqU,iBAA7B,GAAiD,IAAjD;;AACA,uBAAI,CAACkM,YAAL,CAAkBlf,IAAlB,CACM,4DAAY+E,SAAZ,CAAsB,6DAAtB,CADN;AAEF;AACH,aAzBD;AA0BF;;;iBAEO,uCAA2B;AAAA;;AAChC,iBAAKya,SAAL,CACO9Y,MADP,CACc,UAAAhF,IAAI,EAAI;AAAD;;AAAA,2BAACA,IAAI,CAACQ,aAAN,MAAmB,IAAnB,IAAmB,aAAnB,GAAmB,MAAnB,GAAmB,GAAE4B,MAArB;AAA2B,aADhD,EAEOhC,OAFP,CAEe,UAACJ,IAAD,EAAU;AAChB,kBAAM+f,2BAA2B,GAAY/f,IAAI,CAACQ,aAAL,CACtCwE,MADsC,CAC/B,UAAAjE,IAAI;AAAA,uBAAIA,IAAI,CAACkE,WAAL,KAAqB,oEAAYO,UAArC;AAAA,eAD2B,EAEtCuN,IAFsC,CAEjC,UAAAhS,IAAI;AAAA,uBAAI,CAACA,IAAI,CAAC4O,mBAAV;AAAA,eAF6B,CAA7C;;AAGA,kBAAIoQ,2BAAJ,EAAiC;AAC9B,uBAAI,CAACvC,YAAL,CAAkBlf,IAAlB,CAAuB,4DAAY+E,SAAZ,CACjB,kEADiB,CAAvB;AAEF;AACH,aAVP;AAWF;;;eAED,eAAsB;AACnB,mBAAO,KAAKka,UAAL,CAAgBnb,MAAhB,GAAyB,KAAKob,YAAL,CAAkBpb,MAA3C,GAAoD,CAA3D;AACF;;;eAED,eAAwB;AACrB,mBAAO,KAAKmb,UAAL,CAAgBnb,MAAhB,GAAyB,CAAzB,GAA6B,QAA7B,GAAwC,SAA/C;AACF;;;eAED,eAAa;AACV,mBAAO,KAAKmb,UAAL,CAAgBnb,MAAhB,GAAyB,CAAhC;AACF;;;eAED,eAAe;AACZ,mBAAO,KAAKob,YAAL,CAAkBpb,MAAlB,GAA2B,CAAlC;AACF","file":"52-es5.js","sourcesContent":["/* Copyright 2017-2022 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, EventEmitter, Input, OnInit, Output} from \"@angular/core\";\nimport {DisksPropertyRetriever} from \"@component/diskmgmt/disks-property-retriever\";\nimport {ClaimHostListItem} from \"@component/diskmgmt/model/claim-host-list-item.data\";\nimport {ClaimVendorListItem} from \"@component/diskmgmt/model/claim-vendor-list-item.data\";\nimport {DisksClaimingConfigInfo} from \"@component/diskmgmt/model/disks-claiming-config-info.data\";\nimport {VendorMapResult} from \"@component/diskmgmt/model/vendor-map-result.data\";\nimport {VsanDiskListItem} from \"@component/diskmgmt/model/vsan-disk-list-item\";\nimport {environment} from \"@env/environment\";\nimport {QueryUtil} from \"@generated/query-util\";\nimport {DatastoreType} from \"@generated/datastore-type\";\nimport {VsanCapabilityProvider} from \"@generated/vsan-capability-provider\";\nimport {VsanClaimDisksData} from \"@generated/vsan-claim-disks-data\";\nimport {VsanClaimHostDiskMappingsSpec} from \"@generated/vsan-claim-host-disk-mappings-spec\";\nimport {VsanConfigService} from \"@generated/vsan-config-service\";\nimport {VsanConfigSpec} from \"@generated/vsan-config-spec\";\nimport {VsanDiskClaimSpec} from \"@generated/vsan-disk-claim-spec\";\nimport {DataServiceClient} from \"@service/client/dataservice/data-service.service\";\nimport {DataAccessService, DataServiceResult} from \"@service/data-access.service\";\nimport {ErrorMessage} from \"@service/flow/error-message.decorator\";\nimport {Loader} from \"@service/flow/loader.decorator\";\nimport {LoadingIndicator} from \"@service/flow/loading-indicator.decorator\";\nimport {ManagedObject, ManagedObjectUtils} from \"@service/managed-object\";\nimport {SrMessageType} from \"@service/screen-reader-announcer.service\";\nimport {DiskMgmtUtil} from \"@util/disk-mgmt.util\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {from as observableFromPromise, Observable} from \"rxjs\";\nimport {map} from \"rxjs/operators\";\n\n@Component({\n   selector: \"vsan-claim-disks\",\n   templateUrl: \"claim-disks.html\",\n   styleUrls: [\"claim-disks.scss\"],\n})\nexport class ClaimDisksComponent implements OnInit {\n   DatastoreType: typeof DatastoreType = DatastoreType;\n\n   @Input()\n   clusterRef: ManagedObject;\n\n   /**\n    * Whether the component is used in single page dialog or a wizard.\n    */\n   @Input()\n   isStandalone: boolean = true;\n\n   /**\n    * The cluster's configuration\n    */\n   @Input()\n   vsanConfigSpec: VsanConfigSpec;\n\n   /**\n    * Holds the claimable disks for each host.\n    */\n   @Input()\n   hostsClaimingData: Map<string, VsanClaimDisksData>;\n\n   @Output()\n   configUpdated: EventEmitter<VsanClaimHostDiskMappingsSpec[]> = new EventEmitter<VsanClaimHostDiskMappingsSpec[]>();\n\n   @Output()\n   disksClaimingConfigUpdated: EventEmitter<DisksClaimingConfigInfo> = new EventEmitter<DisksClaimingConfigInfo>();\n\n   @Output()\n   configValid: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n   @LoadingIndicator()\n   loading: boolean;\n\n   @ErrorMessage()\n   errorMessage: string;\n\n   selectedDatastoreType: DatastoreType;\n   datastoreTypes: DatastoreType[] = [];\n\n   isManagedVmfsSupported: boolean = false;\n   allHostsInCluster: ClaimHostListItem[] = [];\n   disksByVendor: ClaimVendorListItem[] = [];\n   disksClaimingConfigInfo: DisksClaimingConfigInfo = new DisksClaimingConfigInfo();\n   hostProperties: Map<string, any[]>;\n   useRecommendedClaimOptions: boolean = true;\n\n   constructor(private dataService: DataServiceClient,\n         private disksPropertyRetriever: DisksPropertyRetriever,\n         private dataAccessService: DataAccessService,\n         private vsanConfigService: VsanConfigService,\n         private capabilityProvider: VsanCapabilityProvider) {\n   }\n\n   @Loader({\n      srMessage: \"vsan.configure.claimDisksPage.title\",\n      srMessageType: SrMessageType.PAGE_TITLE,\n   })\n   async ngOnInit(): Promise<void> {\n      this.clusterRef = this.clusterRef || ManagedObject.contextObject;\n\n      [this.hostProperties, this.isManagedVmfsSupported] = await Promise.all([\n         this.queryHostDsProperties(),\n         this.capabilityProvider.isManagedVmfsSupportedOnVc(this.clusterRef),\n      ]);\n      this.initializeDisksData();\n   }\n\n   private queryHostDsProperties(): Promise<Map<string, any[]>> {\n      return this.getPropertiesForHosts()\n            .pipe(map((properties: DataServiceResult[]) => {\n               // group host properties by host\n               const hostProperties: Map<string, any[]> = new Map<string, any[]>();\n               let hostKey: string = null;\n\n               for (const property of properties) {\n                  if (!property.resourceObject) {\n                     continue;\n                  }\n                  hostKey = property.resourceObject.value;\n                  if (!hostProperties.has(hostKey)) {\n                     hostProperties.set(hostKey, []);\n                  }\n\n                  hostProperties.get(hostKey).push(property);\n               }\n               return hostProperties;\n            })).toPromise();\n   }\n\n   private getPropertiesForHosts(): Observable<DataServiceResult[]> {\n      if (environment.repa) {\n         return observableFromPromise(this.disksPropertyRetriever.getPropertiesForHosts(this.clusterRef));\n      } else {\n         // TODO (REPA) Delete once the JAVA is removed\n         return this.dataAccessService.getPropertiesForRelatedObject(\n               ManagedObject.uid(this.clusterRef),\n               [\n                  QueryUtil.NAME_PROPERTY(),\n                  QueryUtil.HOST_VERSION_PROPERTY(),\n                  QueryUtil.PRIMARY_ICON_ID_PROPERTY(),\n                  QueryUtil.VSAN_HOST_STORAGE_ADAPTER_DEVICES(),\n               ],\n               QueryUtil.CLUSTER_HOST_PROPERTY(),\n               ManagedObjectUtils.CLUSTER);\n      }\n   }\n\n   private initializeDisksData(): void {\n      this.allHostsInCluster = this.getClusterHostsInInitialState();\n      this.datastoreTypes = DiskMgmtUtil.orderDatastoreTypes(this.getDatastoreTypes(this.allHostsInCluster));\n      this.selectedDatastoreType = this.getInitialSelectedDatastoreType(this.datastoreTypes);\n      this.disksClaimingConfigInfo.setInitialState(this.allHostsInCluster);\n      this.disksByVendor = this.getDisksByVendor(this.getHostEligibleDisks());\n      this.update();\n   }\n\n   private getDatastoreTypes(hosts: ClaimHostListItem[]): DatastoreType[] {\n      return Array.from(new Set([].concat(...hosts.map(host => host.availableDatastoreTypes))));\n   }\n\n   private getInitialSelectedDatastoreType(datastoreTypes: DatastoreType[]): DatastoreType {\n      return !VsanUiUtils.isEmpty(datastoreTypes)\n            ? datastoreTypes[0]\n            : DatastoreType.VSAN;\n   }\n\n   private getClusterHostsInInitialState(): ClaimHostListItem[] {\n      const allHostsInCluster: ClaimHostListItem[] = [];\n\n      this.hostProperties.forEach((hostProperties: any[], hostKey: string) => {\n         allHostsInCluster.push(new ClaimHostListItem(\n               hostProperties,\n               this.hostsClaimingData.get(hostKey),\n               this.useRecommendedClaimOptions));\n      });\n\n      return allHostsInCluster;\n   }\n\n   private getHostEligibleDisks(): VsanDiskListItem[] {\n      let disks: VsanDiskListItem[] = [];\n\n      for (const hostItem of this.allHostsInCluster) {\n         if (hostItem.eligibleDisks) {\n            disks = disks.concat(hostItem.eligibleDisks);\n         }\n      }\n\n      return disks;\n   }\n\n   update(): void {\n      this.updateParentItemsClaimOption();\n      this.updateHostsClaimingSummary();\n      this.updateUsedDisksInfo();\n      this.configUpdated.emit(this.getDiskMappings());\n   }\n\n   updateParentItemsClaimOption(): void {\n      for (const host of this.allHostsInCluster) {\n         host.updateClaimOption(this.selectedDatastoreType);\n      }\n\n      for (const disk of this.disksByVendor) {\n         disk.updateClaimOption(this.selectedDatastoreType);\n      }\n   }\n\n   updateHostsClaimingSummary(): void {\n      for (const host of this.allHostsInCluster) {\n         host.updateDisksData();\n      }\n   }\n\n   updateUsedDisksInfo(): void {\n      this.disksClaimingConfigInfo.updateClaimingData(this.allHostsInCluster);\n      this.disksClaimingConfigInfo = this.disksClaimingConfigInfo.clone();\n      this.disksClaimingConfigUpdated.emit(this.disksClaimingConfigInfo);\n   }\n\n   private getDisksByVendor(disks: VsanDiskListItem[]): ClaimVendorListItem[] {\n      if (VsanUiUtils.isEmpty(disks)) {\n         return [];\n      }\n\n      const vendors: string[] = [];\n      const vendorToDisks: Map<string, Map<string, VsanDiskListItem[]>> =\n            new Map<string, Map<string, VsanDiskListItem[]>>();\n\n      disks.forEach(disk => {\n         if (!disk) {\n            return;\n         }\n\n         const vendorDiskModelDisks: Map<string, VsanDiskListItem[]> =\n               this.getVendorDisksByDiskModel(vendorToDisks, disk.model);\n\n         if (vendorDiskModelDisks.size === 0) {\n            vendors.push(disk.model);\n         }\n\n         this.getVendorDisksByDiskType(vendorDiskModelDisks, disk.isFlash.toString()).push(disk);\n      });\n\n      return new VendorMapResult(vendors, vendorToDisks).result;\n   }\n\n   private getVendorDisksByDiskModel(\n         vendorToDisks: Map<string, Map<string, VsanDiskListItem[]>>,\n         diskModel: string): Map<string, VsanDiskListItem[]> {\n      if (!vendorToDisks.has(diskModel)) {\n         vendorToDisks.set(diskModel, new Map<string, VsanDiskListItem[]>());\n      }\n      return vendorToDisks.get(diskModel);\n   }\n\n   private getVendorDisksByDiskType(\n         vendorDiskModelDisks: Map<string, VsanDiskListItem[]>,\n         diskType: string): VsanDiskListItem[] {\n      if (!vendorDiskModelDisks.has(diskType)) {\n         vendorDiskModelDisks.set(diskType, []);\n      }\n      return vendorDiskModelDisks.get(diskType);\n   }\n\n   private getDiskMappings(): VsanClaimHostDiskMappingsSpec[] {\n      const diskMappingSpecs: VsanClaimHostDiskMappingsSpec[] = [];\n      const isAllFlashSupported: boolean = this.isAllFlashSupportedOnEveryHost();\n\n      this.allHostsInCluster.forEach((host) => {\n         const disksToClaim: VsanDiskClaimSpec[] = host.getHostDisksToClaim();\n         if (disksToClaim.length !== 0) {\n            diskMappingSpecs.push(\n                  VsanClaimHostDiskMappingsSpec.Factory.create(\n                        this.clusterRef,\n                        host.hostMor,\n                        disksToClaim,\n                        isAllFlashSupported));\n         }\n      });\n\n      return diskMappingSpecs;\n   }\n\n   private isAllFlashSupportedOnEveryHost(): boolean {\n      let allFlashSupported: boolean = true;\n      for (const host of this.allHostsInCluster) {\n         allFlashSupported = allFlashSupported && host.isAllFlashSupported;\n      }\n      return allFlashSupported;\n   }\n\n   getDatastoreTypeLabel(datastoreType: DatastoreType): string {\n      return DiskMgmtUtil.getLocalizedDatastoreType(datastoreType);\n   }\n\n   changeDatastoreType(datastoreType: DatastoreType): void {\n      this.selectedDatastoreType = datastoreType;\n      this.update();\n   }\n}\n","<!-- Copyright (c) 2020 VMware, Inc. All Rights Reserved. -->\n<h5 id=\"pmem-claim-title\">{{\"vsan.pmem.claim.description\" | localized}}</h5>\n\n<vsan-validation id=\"pmem-not-manageable\"\n                 *ngIf=\"!isPmemManageableByVsanOnAllHosts\"\n                 [alertType]=\"'danger'\"\n                 [allowClose]=\"false\"\n                 [alert]=\"'vsan.pmem.claim.olderVersionHosts' | localized\">\n</vsan-validation>\n\n<vsan-validation id=\"pmem-limitation\"\n                 *ngIf=\"isPmemManageableByVsanOnAllHosts\"\n                 [alertType]=\"'info'\"\n                 [allowClose]=\"false\"\n                 [alert]=\"'vsan.pmem.claim.limitation' | localized\">\n</vsan-validation>\n\n<clr-checkbox-wrapper>\n   <input name=\"manage-pmem-by-vsan-toggle\"\n          type=\"checkbox\"\n          clrCheckbox\n          [vsan-disable-form-control]=\"!isPmemManageableByVsanOnAllHosts\"\n          [(ngModel)]=\"managePmemByVsan\"\n          (ngModelChange)=\"toggle()\"/>\n   <label [class.disable-action]=\"!isPmemManageableByVsanOnAllHosts\" id=\"manage-pmem-by-vsan-toggle-label\">{{\"vsan.pmem.claim.manageByVsan.label\" | localized}}</label>\n</clr-checkbox-wrapper>\n\n<clr-datagrid>\n   <!-- Datagrid Header -->\n   <clr-dg-column [clrDgField]=\"'hostName'\" class=\"host-name-column\">\n      {{\"vsan.pmem.claim.host\" | localized}}\n   </clr-dg-column>\n   <clr-dg-column *ngIf=\"!isPmemManageableByVsanOnAllHosts\" [clrDgField]=\"'hostVersion'\" class=\"host-name-column\">\n      {{\"vsan.pmem.claim.hostVersion\" | localized}}\n   </clr-dg-column>\n   <clr-dg-column [clrDgField]=\"'name'\" class=\"storage-name-column\">\n      {{\"vsan.pmem.claim.storage\" | localized}}\n   </clr-dg-column>\n   <clr-dg-column [clrDgField]=\"'capacity'\">\n      {{\"vsan.pmem.claim.capacity\" | localized}}\n   </clr-dg-column>\n   <clr-dg-column [clrDgField]=\"'healthStatus'\">\n      {{\"vsan.pmem.claim.health\" | localized}}\n   </clr-dg-column>\n   <clr-dg-column [clrDgField]=\"'state'\">\n      {{\"vsan.pmem.claim.state\" | localized}}\n   </clr-dg-column>\n   <!-- Datagrid Content -->\n   <clr-dg-row *clrDgItems=\"let storage of eligiblePMemStorage\" [clrDgItem]=\"storage\">\n      <clr-dg-cell vsan-show-title>\n         <clr-icon [attr.shape]=\"hostIcons.get(storage.hostMor.value)\"></clr-icon>\n         {{storage.hostName}}\n      </clr-dg-cell>\n      <clr-dg-cell *ngIf=\"!isPmemManageableByVsanOnAllHosts\">\n         {{hostVersions.get(storage.hostMor.value)}}\n      </clr-dg-cell>\n      <clr-dg-cell vsan-show-title>\n         {{storage.name}}\n      </clr-dg-cell>\n      <clr-dg-cell>\n         {{storage.capacity}}\n      </clr-dg-cell>\n      <clr-dg-cell vsan-show-title>\n         <clr-icon [attr.shape]=\"storage.healthIconShape\"\n                   aria-hidden=\"true\"\n                   class=\"is-solid\"\n                   size=\"18\"\n                   [ngClass]=\"storage.healthIconClass\">\n         </clr-icon>\n         {{storage.healthStatus}}\n      </clr-dg-cell>\n      <clr-dg-cell>\n         {{storage.state}}\n      </clr-dg-cell>\n   </clr-dg-row>\n</clr-datagrid>\n","/* Copyright 2020-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, EventEmitter, OnInit, Output} from \"@angular/core\";\nimport {DisksGroupByPerspective} from \"@component/diskmgmt/perspective/disks-group-by-perspective\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\n\n@Component({\n   selector: \"vsan-disks-group-by-perspective\",\n   templateUrl: \"disks-group-by-perspective.html\",\n   styleUrls: [\"disks-group-by-perspective.scss\"],\n})\nexport class DisksGroupByPerspectiveComponent implements OnInit {\n\n   @Output()\n   changePerspective: EventEmitter<DisksGroupByPerspective> = new EventEmitter<DisksGroupByPerspective>();\n\n   selectedPerspective: DisksGroupByPerspective = DisksGroupByPerspective.DISKS_BY_VENDOR;\n   perspectives: DisksGroupByPerspective[] = [\n         DisksGroupByPerspective.DISKS_BY_VENDOR,\n         DisksGroupByPerspective.DISKS_BY_HOST,\n   ];\n\n   ngOnInit(): void {\n      this.changePerspective.emit(this.selectedPerspective);\n   }\n\n   getPerspectiveLabel(perspective: DisksGroupByPerspective): string {\n      switch (perspective) {\n         case DisksGroupByPerspective.DISKS_BY_VENDOR:\n            return VsanUiUtils.getString(\"vsan.dialog.semiAutoClaimDialog.treeFilter.byVendor\");\n         case DisksGroupByPerspective.DISKS_BY_HOST:\n            return VsanUiUtils.getString(\"vsan.dialog.semiAutoClaimDialog.treeFilter.byHost\");\n         default:\n            return \"\";\n      }\n   }\n}","/* Copyright 2020 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, Input} from \"@angular/core\";\nimport {DisksClaimingConfigInfo} from \"@component/diskmgmt/model/disks-claiming-config-info.data\";\nimport {ChartSectionData} from \"@component/chart/model/chart-section.data\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {ClaimOption} from \"@generated/claim-option\";\nimport {BarChartService} from \"@component/chart/capacity-bar-chart/bar-chart.service\";\nimport {DiskMgmtDiskUtil} from \"@util/disk-mgmt-disk.util\";\n\n@Component({\n   selector: \"vsan-disks-capacity-chart\",\n   templateUrl: \"disks-capacity-chart.html\",\n   styleUrls: [\"disks-capacity-chart.scss\"],\n})\nexport class DisksCapacityChartComponent {\n\n   capacitySections: ChartSectionData[];\n   usedOverallCapacity: number;\n   totalCapacity: number;\n\n   /**\n    * The hovered series in capacity bar chart component, used to display the corresponding legend border.\n    */\n   hoveredSeries: any;\n\n   private static readonly VSAN_CAPACITY_SECTION_ID: string = \"vsan_capacity\";\n   private static readonly VSAN_CACHE_SECTION_ID: string = \"vsan_cache\";\n   private static readonly VSAN_MAX_SINGLE_TIER_SECTION_ID: string = \"vsan_max_single_tier\";\n   private static readonly VMFS_SECTION_ID: string = \"vmfs\";\n   private static readonly PMEM_SECTION_ID: string = \"pmem\";\n\n   private _disksClaiming: DisksClaimingConfigInfo;\n\n   @Input()\n   set disksClaiming(value: DisksClaimingConfigInfo) {\n      this._disksClaiming = value;\n\n      if (!this._disksClaiming) {\n         return;\n      }\n\n      this.capacitySections = this.getCapacityChartData(this._disksClaiming);\n      this.totalCapacity = this._disksClaiming.totalCapacity();\n      this.usedOverallCapacity = this._disksClaiming.totalUsedCapacity();\n   }\n\n   get disksClaiming(): DisksClaimingConfigInfo {\n      return this._disksClaiming;\n   }\n\n   get usedCapacityLabel(): string {\n      return this.getCapacityLabel(\"vsan.dialog.semiAutoClaimDialog.totalClaimed\", this.usedOverallCapacity);\n   }\n\n   get freeCapacityLabel(): string {\n      return this.getCapacityLabel(\"vsan.dialog.semiAutoClaimDialog.unclaimedStorage\",\n            this.totalCapacity - this.usedOverallCapacity);\n   }\n\n   private getCapacityLabel(labelKey: string, capacityValue: number): string {\n      return VsanUiUtils.getString(\n            \"vsan.capacity.withLabel.format\",\n            VsanUiUtils.getString(labelKey),\n            VsanUiUtils.formatFileSize(capacityValue),\n            VsanUiUtils.localizeNumber(VsanUiUtils.asPercentage(capacityValue, this.totalCapacity)));\n   }\n\n   getCapacityChartData(disksClaiming: DisksClaimingConfigInfo): ChartSectionData[] {\n      const vsanCapacityChartSection: ChartSectionData = new ChartSectionData(\n            DiskMgmtDiskUtil.getLocalizedStorage(ClaimOption.ClaimForStorage),\n            disksClaiming.getClaimedCapacity(ClaimOption.ClaimForStorage),\n            DisksCapacityChartComponent.VSAN_CAPACITY_SECTION_ID,\n            true,\n            BarChartService.VSAN_CAPACITY_SECTION_COLOR);\n\n      const vsanCacheChartSection: ChartSectionData = new ChartSectionData(\n            DiskMgmtDiskUtil.getLocalizedStorage(ClaimOption.ClaimForCache),\n            disksClaiming.getClaimedCapacity(ClaimOption.ClaimForCache),\n            DisksCapacityChartComponent.VSAN_CACHE_SECTION_ID,\n            true,\n            BarChartService.VSAN_CACHE_SECTION_COLOR);\n\n      const managedByVsanStorageChartSections: ChartSectionData[] = [];\n\n      DiskMgmtDiskUtil.MANAGED_BY_VSAN_CLAIM_OPTIONS\n            .filter((claimOption: ClaimOption) => disksClaiming.getClaimedCapacity(claimOption) > 0)\n            .forEach((claimOption: ClaimOption) => {\n               managedByVsanStorageChartSections.push(new ChartSectionData(\n                     DiskMgmtDiskUtil.getLocalizedStorage(claimOption),\n                     disksClaiming.getClaimedCapacity(claimOption),\n                     this.getManagedByVsanChartId(claimOption),\n                     true,\n                     this.getManagedByVsanChartColor(claimOption)));\n            });\n\n      return [vsanCapacityChartSection, vsanCacheChartSection, ...managedByVsanStorageChartSections];\n   }\n\n   private getManagedByVsanChartId(claimOption: ClaimOption): string {\n      switch (claimOption) {\n         case ClaimOption.VMFS: return DisksCapacityChartComponent.VMFS_SECTION_ID;\n         case ClaimOption.PMEM: return DisksCapacityChartComponent.PMEM_SECTION_ID;\n         case ClaimOption.SingleTier: return DisksCapacityChartComponent.VSAN_MAX_SINGLE_TIER_SECTION_ID;\n      }\n   }\n\n   private getManagedByVsanChartColor(claimOption: ClaimOption): string {\n      switch (claimOption) {\n         case ClaimOption.VMFS: return BarChartService.VMFS_SECTION_COLOR;\n         case ClaimOption.PMEM: return BarChartService.PMEM_SECTION_COLOR;\n         case ClaimOption.SingleTier: return BarChartService.VSAN_CAPACITY_SECTION_COLOR;\n      }\n   }\n}","/* Copyright 2020-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {ChangeDetectionStrategy, Component, EventEmitter, Input, OnInit, Output} from \"@angular/core\";\nimport {ClaimHostListItem} from \"@component/diskmgmt/model/claim-host-list-item.data\";\nimport {ClaimOption} from \"@generated/claim-option\";\nimport {VsanPmemStorageListItem} from \"@component/diskmgmt/model/vsan-pmem-storage-list-item\";\n\n@Component({\n   selector: \"vsan-claim-for-pmem\",\n   templateUrl: \"claim-for-pmem.html\",\n   styleUrls: [\"claim-for-pmem.scss\"],\n   changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ClaimForPmemComponent implements OnInit {\n   @Input()\n   allHostsInCluster: ClaimHostListItem[];\n\n   @Output()\n   update: EventEmitter<void> = new EventEmitter<void>();\n\n   isPmemManageableByVsanOnAllHosts: boolean = false;\n   managePmemByVsan: boolean = false;\n   hostVersions: Map<string, string>;\n   hostIcons: Map<string, string>;\n\n   ngOnInit(): void {\n      this.hostIcons = new Map(this.allHostsInCluster.map(host => [host.hostMor.value, host.image]));\n      this.isPmemManageableByVsanOnAllHosts = this.eligiblePMemStorage.every(storage => storage.isManageableByVsan);\n\n      if (this.isPmemManageableByVsanOnAllHosts) {\n         this.managePmemByVsan = this.eligiblePMemStorage.every(storage => storage.claimOption === ClaimOption.PMEM);\n      } else {\n         this.hostVersions = new Map(this.allHostsInCluster.map(host => [host.hostMor.value, host.version]));\n      }\n   }\n\n   toggle(): void {\n      this.eligiblePMemStorage.forEach(storage =>\n            storage.claimOption = this.managePmemByVsan ? ClaimOption.PMEM : ClaimOption.DoNotClaim);\n      this.update.emit();\n   }\n\n   get eligiblePMemStorage(): VsanPmemStorageListItem[] {\n      const eligiblePMemStorage: VsanPmemStorageListItem[] = [];\n      this.allHostsInCluster.forEach(host => {\n         host.eligiblePmemStorage\n               .filter(storage => storage.canBeClaimedForPMem)\n               .forEach(storage => eligiblePMemStorage.push(storage));\n      });\n      return eligiblePMemStorage;\n   }\n}","<!-- Copyright (c) 2020-2022 VMware, Inc. All Rights Reserved. -->\n<div id=\"vsan-direct-claim-title\">{{\"vsan.dialog.semiAutoClaimDialog.confInfo.vmfs\" | localized}}</div>\n<!--Eligible Disks Button Bar -->\n<div class=\"clr-row\">\n   <vsan-disks-group-by-perspective class=\"clr-offset-8 clr-col-4\"\n                                    (changePerspective)=\"changePerspective($event)\">\n   </vsan-disks-group-by-perspective>\n</div>\n\n<!--    Eligible Disks List -->\n<clr-datagrid [clrDgLoading]=\"datagridLoading\" class=\"datagrid-compact\">\n   <!-- Datagrid Header -->\n   <clr-dg-column class=\"name-column\">\n      <vsan-tree-column [dataField]=\"'name'\"\n                        [dataProvider]=\"datagrid\"\n                        [filterObject]=\"nameFilter\"\n                        [title]=\"nameColumnTitle\">\n      </vsan-tree-column>\n   </clr-dg-column>\n   <clr-dg-column>\n      {{\"vsan.disk.list.claimFor.vsanDirect\" | localized}}\n   </clr-dg-column>\n   <clr-dg-column>\n      <vsan-tree-column [dataField]=\"'driveTypeLabel'\"\n                        [dataProvider]=\"datagrid\"\n                        [filterObject]=\"driveTypeFilter\"\n                        [title]=\"'vsan.disk.list.driveType' | localized\">\n      </vsan-tree-column>\n   </clr-dg-column>\n   <clr-dg-column *ngIf=\"selectedPerspective == DisksGroupByPerspective.DISKS_BY_HOST\" class=\"name-column\">\n      <vsan-tree-column [dataField]=\"'capacity'\"\n                        [dataProvider]=\"datagrid\"\n                        [filterObject]=\"totalCapacityFilter\"\n                        [title]=\"'vsan.disk.list.totalCapacity' | localized\">\n      </vsan-tree-column>\n   </clr-dg-column>\n   <clr-dg-column *ngIf=\"selectedPerspective == DisksGroupByPerspective.DISKS_BY_VENDOR\" class=\"name-column\">\n      <vsan-tree-column [dataField]=\"'hostName'\"\n                        [dataProvider]=\"datagrid\"\n                        [filterObject]=\"hostNameFilter\"\n                        [title]=\"'vsan.disk.list.host' | localized\">\n      </vsan-tree-column>\n   </clr-dg-column>\n   <clr-dg-column *ngIf=\"isStandalone\">\n      <vsan-tree-column [dataField]=\"'transportType'\"\n                        [dataProvider]=\"datagrid\"\n                        [filterObject]=\"transportTypeFilter\"\n                        [title]=\"'vsan.disk.list.transportType' | localized\">\n      </vsan-tree-column>\n   </clr-dg-column>\n   <clr-dg-column *ngIf=\"isStandalone\">\n      <vsan-tree-column [dataField]=\"'diskAdapter'\"\n                        [dataProvider]=\"datagrid\"\n                        [filterObject]=\"diskAdapterFilter\"\n                        [title]=\"'vsan.disk.list.diskAdapter' | localized\">\n      </vsan-tree-column>\n   </clr-dg-column>\n   <!-- Datagrid Content -->\n   <clr-dg-row *clrDgItems=\"let row of datagrid.rows\"\n               [class.datagrid-selected]=\"isRowSelected(row)\"\n               (click)=\"selectTarget(row, $event)\">\n      <clr-dg-cell vsan-show-title>\n         <vsan-expand [row]=\"row\"></vsan-expand>\n         <clr-icon [attr.shape]=\"row.data.image\"></clr-icon>\n         <span>{{row.data.name}}</span>\n      </clr-dg-cell>\n      <clr-dg-cell class=\"claim-checkbox\">\n         <input name=\"manage-vsan-direct-by-vsan-toggle\"\n                type=\"checkbox\"\n                clrCheckbox\n                [checked]=\"row.data.claimOption === ClaimOption.VMFS\"\n                (change)=\"toggleClaiming(row.data)\"/>\n      </clr-dg-cell>\n      <clr-dg-cell class=\"text-nowrap\">\n         {{row.data.initialDriveType}}\n      </clr-dg-cell>\n      <clr-dg-cell *ngIf=\"selectedPerspective == DisksGroupByPerspective.DISKS_BY_HOST\" vsan-show-title>\n         {{row.data.capacity}}\n      </clr-dg-cell>\n      <clr-dg-cell *ngIf=\"selectedPerspective == DisksGroupByPerspective.DISKS_BY_VENDOR\" vsan-show-title>\n         <clr-icon *ngIf=\"getHostIcon(row.data)\" [attr.shape]=\"getHostIcon(row.data)\"></clr-icon>\n         {{row.data.hostName}}\n      </clr-dg-cell>\n      <clr-dg-cell *ngIf=\"isStandalone\">{{row.data.transportType}}</clr-dg-cell>\n      <clr-dg-cell *ngIf=\"isStandalone\">{{row.data.diskAdapter}}</clr-dg-cell>\n   </clr-dg-row>\n\n   <!-- Datagrid Footer -->\n   <clr-dg-footer>\n      <clr-dg-pagination [clrDgPageSize]=\"ClaimDisksUtil.DISKS_PER_DATAGRID_PAGE\">\n         {{footerLabel.getLabel(selectedPerspective)}}\n      </clr-dg-pagination>\n   </clr-dg-footer>\n</clr-datagrid>","/* Copyright (c) 2021 VMware, Inc. All rights reserved. VMware Confidential */\nimport {\n   Directive, ElementRef, HostListener,\n} from \"@angular/core\";\nimport {ReferenceWatcher} from \"@util/reference-watcher\";\n\n/**\n * A directive that handles onchange event for some input control and sets back the focus to it afterwards.\n */\n@Directive({\n   selector: \"[vsan-refocus-after-change]\",\n   providers: [ReferenceWatcher],\n})\nexport class RefocusAfterChangeDirective {\n   constructor(private el: ElementRef, private refWatcher: ReferenceWatcher) { }\n\n   @HostListener(\"change\", [\"$event\"])\n   processChange(e: Event): void {\n      this.refWatcher.setTimeout(() => {\n         document.body.classList.add(\"user-tabbing\");\n         this.el.nativeElement.focus();\n      }, 50);\n      e.preventDefault();\n      e.stopPropagation();\n      e.stopImmediatePropagation();\n   }\n}","/* Copyright 2020-2022 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, EventEmitter, Input, OnInit, Output} from \"@angular/core\";\nimport {FunctionFilter} from \"@component/datagrid/filter/function-filter\";\nimport {TreeDatagridRow} from \"@component/datagrid/tree-datagrid\";\nimport {TreeDatagridView} from \"@component/datagrid/tree-datagrid-view\";\nimport {ClaimDisksUtil} from \"@component/diskmgmt/claim-disks-util\";\nimport {ClaimDisksDatagridFooterLabel} from \"@component/diskmgmt/model/claim-disks-datagrid-footer-label\";\nimport {ClaimHostListItem} from \"@component/diskmgmt/model/claim-host-list-item.data\";\nimport {ClaimRootListItem} from \"@component/diskmgmt/model/claim-root-list-item.data\";\nimport {ClaimVendorListItem} from \"@component/diskmgmt/model/claim-vendor-list-item.data\";\nimport {DriveType} from \"@component/diskmgmt/model/drive-type.data\";\nimport {VsanBaseListItem} from \"@component/diskmgmt/model/vsan-base-list-item.data\";\nimport {VsanDiskListItem} from \"@component/diskmgmt/model/vsan-disk-list-item\";\nimport {DisksGroupByPerspective} from \"@component/diskmgmt/perspective/disks-group-by-perspective\";\nimport {ClaimOption} from \"@generated/claim-option\";\nimport {DiskMgmtDiskUtil} from \"@util/disk-mgmt-disk.util\";\nimport {Icon} from \"@util/icon\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\n\n@Component({\n   selector: \"vsan-claim-for-vsan\",\n   templateUrl: \"claim-for-vsan.html\",\n   styleUrls: [\"claim-for-vsan.scss\"],\n})\nexport class ClaimForVsanComponent extends TreeDatagridView implements OnInit {\n   static readonly CHILD_FIELD: string = \"eligibleDisksInDatastoreContext\";\n   DisksGroupByPerspective: typeof DisksGroupByPerspective = DisksGroupByPerspective;\n   ClaimDisksUtil: typeof ClaimDisksUtil = ClaimDisksUtil;\n\n   @Input()\n   allHostsInCluster: ClaimHostListItem[];\n\n   @Input()\n   disksByVendor: ClaimVendorListItem[];\n\n   @Input()\n   isStandalone: boolean;\n\n   @Output()\n   update: EventEmitter<void> = new EventEmitter<void>();\n\n   selectedPerspective: DisksGroupByPerspective;\n   showWarning: boolean = false;\n   warningTitle: string;\n   warningText: string;\n   warningConfirmationHandler: () => void;\n   footerLabel: ClaimDisksDatagridFooterLabel;\n\n   private changeDriveTypeEvent: any;\n\n   constructor() {\n      super(ClaimForVsanComponent.CHILD_FIELD);\n      this.multipleSelection = true;\n      this.selectionChangeHandler = this.selectionChange;\n   }\n\n   selectionChange(): void {\n      this.update.emit();\n   }\n\n   ngOnInit(): void {\n      this.datagridLoading = false;\n      this.footerLabel = new ClaimDisksDatagridFooterLabel(this.allHostsInCluster, this.disksByVendor);\n   }\n\n   changePerspective(perspective: DisksGroupByPerspective): void {\n      this.selectedPerspective = perspective;\n      ClaimDisksUtil.changePerspective(\n            this.selectedPerspective, this.datagrid, this.allHostsInCluster, this.disksByVendor);\n   }\n\n   claimFor = (option: ClaimOption) => {\n      for (const target of this.selectedTargets) {\n         target.data.claimOption = option;\n      }\n      this.update.emit();\n   };\n\n   getClaimOptions = (data: VsanBaseListItem): ClaimOption[] => {\n      const claimOptions: ClaimOption[] = this.getEligibleForVsanClaimOptions(data);\n\n      if (!claimOptions) {\n         return [];\n      }\n\n      // if the currently selected option is not Custom remove it\n      // this option appears when child items posses different claim options\n      if (data.claimOption !== ClaimOption.Custom && claimOptions.includes(ClaimOption.Custom)) {\n         claimOptions.splice(claimOptions.indexOf(ClaimOption.Custom), 1);\n      }\n\n      return claimOptions;\n   };\n\n   /**\n    * Skip vSAN Direct claim option\n    */\n   private getEligibleForVsanClaimOptions(data: VsanBaseListItem): ClaimOption[] {\n      return data.possibleClaimOptions.filter(co => !DiskMgmtDiskUtil.VSAN_DIRECT_CLAIM_OPTIONS.includes(co));\n   }\n\n   localizeClaimOption = (claimOption: ClaimOption): string => {\n      return ClaimDisksUtil.getLocalizedClaimOption(claimOption);\n   };\n\n   hasDriveTypeWarningImage = (listData: ClaimRootListItem): boolean => {\n      // In case we have vendor root item, then if all the child disks are\n      // with the same marking, check if we should show the warning\n      if (listData instanceof ClaimVendorListItem) {\n         const vendorItem: ClaimVendorListItem = listData as ClaimVendorListItem;\n         if (vendorItem.areAllItemsMarkedTheSame() && this.shouldShowDriveTypeWarning(vendorItem)) {\n            return true;\n         }\n      } else if (this.shouldShowDriveTypeWarning(listData)) {\n         return true;\n      }\n\n      return null;\n   };\n\n   get onWarningDriveTypeTooltip(): string {\n      return VsanUiUtils.getString(\"vsan.dialog.semiAutoClaimDialog.warning.markedNotClaimedDisk\");\n   }\n\n   shouldShowDriveTypeWarning = (item: VsanBaseListItem): boolean => {\n      if (item instanceof ClaimHostListItem) {\n         return false;\n      }\n\n      return item.markedAsFlash !== item.isFlash && item.claimOption === ClaimOption.DoNotClaim;\n   };\n\n   getHostIcon = (item: VsanBaseListItem): string => {\n      return item.isRoot ? null : Icon.HOST;\n   };\n\n   markSelectedItems = (markAsFlash: boolean) => {\n      for (const selectedRow of this.selectedTargets) {\n         selectedRow.data.markedAsFlash = markAsFlash;\n      }\n\n      this.update.emit();\n      this.showWarning = false;\n   };\n\n   markFlash = () => {\n      this.markSelectedItems(true);\n   };\n\n   markHdd = () => {\n      this.markSelectedItems(false);\n   };\n\n   markSelectedItemsAsFlash = () => {\n      if (this.hasSelectedDisksForClaiming()) {\n         this.warningTitle = VsanUiUtils.getString(\"storage.adapters.devices.action.tagAsSsd\");\n         this.warningText = VsanUiUtils.getString(\"vsan.dialog.semiAutoClaimDialog.markAsFlash.warning\");\n         this.warningConfirmationHandler = this.markFlash;\n         this.showWarning = true;\n      } else {\n         this.markFlash();\n      }\n   };\n\n   markSelectedItemsAsHdd = () => {\n      if (this.hasSelectedDisksForClaiming()) {\n         this.warningTitle = VsanUiUtils.getString(\"storage.adapters.devices.action.untagAsSsd\");\n         this.warningText = VsanUiUtils.getString(\"vsan.dialog.semiAutoClaimDialog.markAsHdd.warning\");\n         this.warningConfirmationHandler = this.markHdd;\n         this.showWarning = true;\n      } else {\n         this.markHdd();\n      }\n   };\n\n   private hasSelectedDisksForClaiming = (): boolean => {\n      const disksToClaimFound: TreeDatagridRow = this.selectedTargets.find((element): boolean => {\n         return element.data.claimOption !== ClaimOption.DoNotClaim;\n      });\n      return !!disksToClaimFound;\n   };\n\n   changeClaimOption = (item: any, event: any) => {\n      item.claimOption = event.target.value;\n      this.update.emit();\n   };\n\n   changeDriveType = (event: any) => {\n      this.changeDriveTypeEvent = event;\n      if (event.target.value === DriveType.FLASH.toString() ||\n            event.target.value === DriveType.MARKED_AS_FLASH.toString()) {\n         this.markSelectedItemsAsFlash();\n      } else if (event.target.value === DriveType.HDD.toString() ||\n            event.target.value === DriveType.MARKED_AS_HDD.toString()) {\n         this.markSelectedItemsAsHdd();\n      }\n   };\n\n   cancelMarkAsAction = () => {\n      this.showWarning = false;\n      // When clicking a new option in the select dropdown list, even if we don't update its binding value,\n      // its selected option will appear to change, which happens when the user cancels the \"Mark as\" action,\n      // resetting it to avoid this kind of situation.\n      this.changeDriveTypeEvent.target.value = this.selectedTargets[0].data.driveType;\n   };\n\n   get nameColumnTitle(): string {\n      return ClaimDisksUtil.getNameColumnTitle(this.selectedPerspective);\n   }\n\n   nameFilter: FunctionFilter<VsanDiskListItem> = new FunctionFilter((data: VsanDiskListItem) => {\n      return data.name;\n   });\n\n   driveTypeFilter: FunctionFilter<VsanDiskListItem> = new FunctionFilter((data: VsanDiskListItem) => {\n      return data.driveTypeLabel;\n   });\n\n   totalCapacityFilter: FunctionFilter<VsanDiskListItem> = new FunctionFilter((data: VsanDiskListItem) => {\n      return data.capacity;\n   });\n\n   hostNameFilter: FunctionFilter<VsanDiskListItem> = new FunctionFilter((data: VsanDiskListItem) => {\n      return data.hostName;\n   });\n\n   transportTypeFilter: FunctionFilter<VsanDiskListItem> = new FunctionFilter((data: VsanDiskListItem) => {\n      return data.transportType;\n   });\n\n   diskAdapterFilter: FunctionFilter<VsanDiskListItem> = new FunctionFilter((data: VsanDiskListItem) => {\n      return data.diskAdapter;\n   });\n\n   get warningHeaderClass(): string {\n      return this.isStandalone ? \"\" : \"warning-popup-header\";\n   }\n\n   get warningContentClass(): string {\n      return this.isStandalone ? \"\" : \"warning-popup-content\";\n   }\n}","<!--Copyright 2017-2022 VMware, Inc. All rights reserved. -- VMware Confidential-->\n<!-- Display aggregated issue if more than one error(s) and/or warning(s) are available -->\n<vsan-validation *ngIf=\"hasAggregatedIssue\"\n                 id=\"aggregated-issue-container\"\n                 [alertType]=\"aggregatedIssueClass\"\n                 [allowClose]=\"false\"\n                 [alert]=\"'vsan.dialog.semiAutoClaimDialog.aggregatedIssue' | localized\"\n                 [actionLink]=\"openIssueActionLink\">\n</vsan-validation>\n\n<!-- Single errors to display -->\n<vsan-validation *ngIf=\"hasErrors && !hasAggregatedIssue\"\n                 id=\"error-container\"\n                 [alertType]=\"'danger'\"\n                 [allowClose]=\"false\"\n                 [alert]=\"vsanErrors[0]\">\n</vsan-validation>\n\n<!-- Single warning to display -->\n<vsan-validation *ngIf=\"hasWarnings && !hasAggregatedIssue\"\n                 id=\"warning-container\"\n                 [alertType]=\"'warning'\"\n                 [allowClose]=\"false\"\n                 [alert]=\"vsanWarnings[0]\">\n</vsan-validation>\n\n<!-- Claiming issues list pop-up -->\n<div id=\"issues-list-dialog\"\n     class=\"modal\"\n     *ngIf=\"issuesListOpened\"\n     vsan-on-modal-escape\n     vsan-focus-trap\n     (onEscape)=\"issuesListOpened = false\">\n   <div class=\"modal-dialog\"\n        role=\"dialog\"\n        aria-modal=\"true\">\n      <div class=\"modal-content\">\n         <div class=\"modal-header issues-list-popup-header\">\n            <h3 id=\"issues-list-title\"\n                class=\"modal-title\">\n               {{\"vsan.dialog.semiAutoClaimDialog.claimingIssuesDialog.title\" | localized}}\n            </h3>\n         </div>\n         <div id=\"issues-list-content\"\n              class=\"modal-body\">\n            <vsan-validation *ngIf=\"vsanErrors && vsanErrors.length\"\n                             [alertType]=\"'danger'\"\n                             [allowClose]=\"false\"\n                             [(alerts)]=\"vsanErrors\"\n                             [alertsExpanded]=\"true\"\n                             [allowExpandCollapse]=\"false\">\n            </vsan-validation>\n            <vsan-validation *ngIf=\"vsanWarnings && vsanWarnings.length\"\n                             [alertType]=\"'warning'\"\n                             [allowClose]=\"false\"\n                             [(alerts)]=\"vsanWarnings\"\n                             [alertsExpanded]=\"true\"\n                             [allowExpandCollapse]=\"false\">\n            </vsan-validation>\n         </div>\n         <div class=\"modal-footer\">\n            <button type=\"button\"\n                    class=\"btn btn-primary\"\n                    (click)=\"issuesListOpened = false\">\n               {{\"vsan.common.close\" | localized}}\n            </button>\n         </div>\n      </div>\n   </div>\n</div>\n<div *ngIf=\"issuesListOpened\"\n     class=\"modal-backdrop opaque-backdrop fade in\"\n     aria-hidden=\"true\">\n</div>\n","/* Copyright 2017-2019 VMware, Inc. All rights reserved. -- VMware Confidential */\n\nexport class VsanDisksTransportTypeData {\n\n   private _deviceTransportMap: any;\n   private _deviceAdapterMap: any;\n\n   /**\n    * Host devices custom property.\n    * Populated by the StorageAdaptersPropertyProvider.\n    * [Model(property=\"vsanStorageAdapterDevices\")]\n    */\n   public set storageAdapterDevices(\n         value: any[]/*com.vmware.vsphere.client.storage.adapters.StorageDeviceData*/) {\n      if (!value) {\n         return;\n      }\n\n      this._deviceTransportMap = {};\n      this._deviceAdapterMap = {};\n\n      // Updates the list of storage adapters.\n      for (let deviceData /*com.vmware.vsphere.client.storage.adapters.StorageDeviceData*/ of value) {\n         let deviceLun: any /*ScsiLun*/ = deviceData.underlyingLun;\n         let deviceUuid: string = deviceLun.uuid;\n         this._deviceTransportMap[deviceUuid] = deviceData.transport;\n         this._deviceAdapterMap[deviceUuid] = deviceData.adapter;\n      }\n   }\n\n   /**\n    * Returns an array of transport types for the specified device.\n    */\n   public getDeviceTransport(deviceUuid: string): any[] {\n      if (this._deviceTransportMap && this._deviceTransportMap.hasOwnProperty(deviceUuid)) {\n         return this._deviceTransportMap[deviceUuid];\n      }\n\n      return null;\n   }\n\n   /**\n    * Returns an array of transport types for the specified device.\n    */\n   public getDeviceAdapter(deviceUuid: string): string {\n      if (this._deviceAdapterMap && this._deviceAdapterMap.hasOwnProperty(deviceUuid)) {\n         return this._deviceAdapterMap[deviceUuid];\n      }\n\n      return null;\n   }\n}\n","/* Copyright 2020-2022 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {ClaimOption} from \"@generated/claim-option\";\nimport {DiskMgmtDiskUtil} from \"@util/disk-mgmt-disk.util\";\nimport {VsanPmemDiskData} from \"@generated/vsan-pmem-disk-data\";\nimport {Icon} from \"@util/icon\";\nimport {ManagedObject} from \"@service/managed-object\";\n\nexport class VsanPmemStorageListItem {\n\n   private _claimOption: ClaimOption = ClaimOption.DoNotClaim;\n\n   constructor(private storage: VsanPmemDiskData, public hostName: string, public hostMor: ManagedObject) { }\n\n   get uuid(): string {\n      return this.storage.uuid;\n   }\n\n   get name(): string {\n      return this.storage.name;\n   }\n\n   get capacity(): string {\n      return VsanUiUtils.formatFileSize(this.capacityNum);\n   }\n\n   get capacityNum(): number {\n      return this.storage.capacity;\n   }\n\n   get claimOption(): ClaimOption {\n      return this._claimOption;\n   }\n\n   set claimOption(newClaimOption: ClaimOption) {\n      if (newClaimOption !== ClaimOption.DoNotClaim && this._claimOption !== ClaimOption.DoNotClaim) {\n         return;\n      }\n\n      if (newClaimOption !== ClaimOption.PMEM && newClaimOption !== ClaimOption.DoNotClaim) {\n         return;\n      }\n\n      this._claimOption = newClaimOption;\n   }\n\n   get state(): string {\n      return DiskMgmtDiskUtil.localizeMountedState(this.storage.diskStatus);\n   }\n\n   get isHealthy(): boolean {\n      return this.storage.diskStatus && this.storage.diskStatus.isDiskHealthy;\n   }\n\n   get healthStatus(): string {\n      return DiskMgmtDiskUtil.getHealth(this.storage.diskStatus);\n   }\n\n   get healthIconShape(): string {\n      return this.isHealthy ? Icon.CLR_SUCCESS_STANDARD_ICON_SHAPE : Icon.CLR_ERROR_STANDARD_ICON_SHAPE;\n   }\n\n   get healthIconClass(): string {\n      return Icon.clrIconShapeClassMap[this.healthIconShape];\n   }\n\n   get isManageableByVsan(): boolean {\n      return this.storage.isManageableByVsan;\n   }\n\n   get canBeClaimedForPMem(): boolean {\n      return this.claimOption === ClaimOption.PMEM || this.claimOption === ClaimOption.DoNotClaim;\n   }\n}\n","/* Copyright 2022 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {ClaimHostListItem} from \"@component/diskmgmt/model/claim-host-list-item.data\";\nimport {ClaimVendorListItem} from \"@component/diskmgmt/model/claim-vendor-list-item.data\";\nimport {DisksGroupByPerspective} from \"@component/diskmgmt/perspective/disks-group-by-perspective\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\n\nexport class ClaimDisksDatagridFooterLabel {\n   private readonly groupByHostLabel: string;\n   private readonly groupByVendorLabel: string;\n\n   constructor(private disksByHost: ClaimHostListItem[], private disksByVendor: ClaimVendorListItem[]) {\n      this.groupByHostLabel = this.getHostsPerspectiveLabel(disksByHost);\n      this.groupByVendorLabel = this.getVendorPerspectiveLabel(disksByVendor);\n   }\n\n   getLabel(perspective: DisksGroupByPerspective): string {\n      if (perspective === DisksGroupByPerspective.DISKS_BY_HOST) {\n         return this.groupByHostLabel;\n      }\n      return this.groupByVendorLabel;\n   }\n\n   private getHostsPerspectiveLabel(hostsInCluster: ClaimHostListItem[]): string {\n      const eligibleDisks: number = hostsInCluster\n            .reduce((total, host) => (total + host.eligibleDisksInDatastoreContext?.length), 0);\n      const hostsWithEligibleDisks: number = hostsInCluster\n            .filter(host => host.eligibleDisksInDatastoreContext?.length > 0)\n            .length;\n\n      return hostsWithEligibleDisks > 0\n            ? VsanUiUtils.getString(\"vsan.disk.semiAutoClaimDialog.hosts.datagrid.footer\", hostsWithEligibleDisks,\n                  eligibleDisks)\n            : VsanUiUtils.getString(\"vsan.disk.semiAutoClaimDialog.noeligible.datagrid.footer\");\n   }\n\n   private getVendorPerspectiveLabel(disksByVendor: ClaimVendorListItem[]): string {\n      const eligibleDisks: number = disksByVendor\n            .reduce((total, vendor) => (total + vendor.eligibleDisksInDatastoreContext?.length), 0);\n      const vendorsWithEligibleDisks: number = disksByVendor\n            .filter(vendor => vendor.eligibleDisksInDatastoreContext?.length > 0)\n            .length;\n\n      return vendorsWithEligibleDisks > 0\n            ? VsanUiUtils.getString(\"vsan.disk.semiAutoClaimDialog.size.model.datagrid.footer\",\n                  vendorsWithEligibleDisks, eligibleDisks)\n            : VsanUiUtils.getString(\"vsan.disk.semiAutoClaimDialog.noeligible.datagrid.footer\");\n   }\n}","/* Copyright 2017-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {VsanDiskListItem} from \"@component/diskmgmt/model/vsan-disk-list-item\";\nimport {ClaimVendorListItem} from \"@component/diskmgmt/model/claim-vendor-list-item.data\";\n\n/**\n * Disk mapping model between models and flash option.\n */\nexport class VendorMapResult {\n\n   private models: string[] = [];\n   private items: Map<string, Map<string, VsanDiskListItem[]>>; // [model][isFlash]->VsanDiskListItem[]\n\n   constructor(keys: string[], result: Map<string, Map<string, VsanDiskListItem[]>>) {\n      this.models = keys;\n      this.items = result;\n   }\n\n   get result(): ClaimVendorListItem[] {\n      const result: ClaimVendorListItem[] = [];\n\n      for (const model of this.models) {\n         if (this.hasDisks(model, true.toString())) {\n            const ssdVendorItem: ClaimVendorListItem = new ClaimVendorListItem();\n            ssdVendorItem.eligibleDisks = this.getDisks(model, true.toString());\n            ssdVendorItem.name = model;\n            result.push(ssdVendorItem);\n         }\n         if (this.hasDisks(model, false.toString())) {\n            const nonSsdVendorItem: ClaimVendorListItem = new ClaimVendorListItem();\n            nonSsdVendorItem.eligibleDisks = this.getDisks(model, false.toString());\n            nonSsdVendorItem.name = model;\n            result.push(nonSsdVendorItem);\n         }\n      }\n\n      return result;\n   }\n\n   private hasDisks(diskModel: string, diskType: string): boolean {\n      return this.items.has(diskModel) && this.items.get(diskModel).has(diskType);\n   }\n\n   private getDisks(diskModel: string, diskType: string): VsanDiskListItem[] {\n      return this.items.get(diskModel).get(diskType);\n   }\n}\n","/* Copyright 2021-2022 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, EventEmitter, Input, OnInit, Output} from \"@angular/core\";\nimport {FunctionFilter} from \"@component/datagrid/filter/function-filter\";\nimport {TreeDatagridView} from \"@component/datagrid/tree-datagrid-view\";\nimport {ClaimDisksUtil} from \"@component/diskmgmt/claim-disks-util\";\nimport {ClaimDisksDatagridFooterLabel} from \"@component/diskmgmt/model/claim-disks-datagrid-footer-label\";\nimport {ClaimHostListItem} from \"@component/diskmgmt/model/claim-host-list-item.data\";\nimport {ClaimRootListItem} from \"@component/diskmgmt/model/claim-root-list-item.data\";\nimport {ClaimVendorListItem} from \"@component/diskmgmt/model/claim-vendor-list-item.data\";\nimport {VsanBaseListItem} from \"@component/diskmgmt/model/vsan-base-list-item.data\";\nimport {VsanDiskListItem} from \"@component/diskmgmt/model/vsan-disk-list-item\";\nimport {DisksGroupByPerspective} from \"@component/diskmgmt/perspective/disks-group-by-perspective\";\nimport {ClaimOption} from \"@generated/claim-option\";\nimport {Icon} from \"@util/icon\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\n\n@Component({\n   selector: \"vsan-claim-for-vsan-max\",\n   templateUrl: \"claim-for-vsan-max.html\",\n   styleUrls: [\"claim-for-vsan-max.scss\"],\n})\nexport class ClaimForVsanMaxComponent extends TreeDatagridView implements OnInit {\n   static readonly CHILD_FIELD: string = \"eligibleDisksInDatastoreContext\";\n   DisksGroupByPerspective: typeof DisksGroupByPerspective = DisksGroupByPerspective;\n   ClaimOption: typeof ClaimOption = ClaimOption;\n   ClaimDisksUtil: typeof ClaimDisksUtil = ClaimDisksUtil;\n\n   @Input()\n   disksByHost: ClaimHostListItem[];\n\n   @Input()\n   disksByVendor: ClaimVendorListItem[];\n\n   @Input()\n   isStandalone: boolean;\n\n   @Output()\n   update: EventEmitter<void> = new EventEmitter<void>();\n\n   groupByPerspective: DisksGroupByPerspective;\n   footerLabel: ClaimDisksDatagridFooterLabel;\n\n   constructor() {\n      super(ClaimForVsanMaxComponent.CHILD_FIELD);\n   }\n\n   ngOnInit(): void {\n      this.datagridLoading = false;\n      this.footerLabel = new ClaimDisksDatagridFooterLabel(this.disksByHost, this.disksByVendor);\n   }\n\n   changePerspective(perspective: DisksGroupByPerspective): void {\n      this.groupByPerspective = perspective;\n      ClaimDisksUtil.changePerspective(this.groupByPerspective, this.datagrid, this.disksByHost, this.disksByVendor);\n   }\n\n   getHostIcon(data: VsanBaseListItem): string {\n      return data.isRoot ? null : Icon.HOST;\n   }\n\n   /*\n    * Toggle between Claimed/Unclaimed.\n    * For vSAN MAX's MVP release we only claim disks for Single tier.\n    */\n   toggleClaiming(data: ClaimRootListItem, target: any): void {\n      data.claimOption = target.checked ? ClaimOption.SingleTier : ClaimOption.DoNotClaim;\n      data.markedAsFlash = data.isFlash;\n      this.update.emit();\n   }\n\n   getIsVsanMaxCompatibleLabel(data: VsanDiskListItem | ClaimRootListItem): string {\n      // For grouping by host we cannot have a root level information displayed as the disks can be mixed.\n      if (this.groupByPerspective === DisksGroupByPerspective.DISKS_BY_HOST && data.isRoot) {\n         return undefined;\n      }\n      return this.getIsVsanMaxCompatible(data) ?\n            VsanUiUtils.getString(\"vsan.disk.list.vsanMax.compatible\") :\n            VsanUiUtils.getString(\"vsan.disk.list.vsanMax.incompatible\");\n   }\n\n   getIsVsanMaxCompatibleIconClass(data: VsanDiskListItem | ClaimRootListItem): string {\n      return this.getIsVsanMaxCompatible(data) ?\n            Icon.CLR_SUCCESS_ICON_CLASS : Icon.CLR_WARN_ICON_CLASS;\n\n   }\n\n   getIsVsanMaxCompatibleIconShape(data: VsanDiskListItem | ClaimRootListItem): string {\n      return this.getIsVsanMaxCompatible(data) ?\n            Icon.CLR_SUCCESS_STANDARD_ICON_SHAPE : Icon.CLR_WARN_STANDARD_ICON_SHAPE;\n   }\n\n   private getIsVsanMaxCompatible(data: VsanDiskListItem | ClaimRootListItem): boolean {\n      if (data instanceof VsanDiskListItem) {\n         return data.isVsanMaxCompatible;\n      } else if (this.groupByPerspective === DisksGroupByPerspective.DISKS_BY_VENDOR\n            && !VsanUiUtils.isEmpty(data.eligibleDisks)) {\n         return data.eligibleDisks[0].isVsanMaxCompatible;\n      }\n      return false;\n   }\n\n   /*\n    * Bellow this line >> Clarity column filters.\n    */\n   nameFilter: FunctionFilter<VsanDiskListItem> = new FunctionFilter((data: VsanDiskListItem) => {\n      return data.name;\n   });\n\n   driveTypeFilter: FunctionFilter<VsanDiskListItem> = new FunctionFilter((data: VsanDiskListItem) => {\n      return data.driveTypeLabel;\n   });\n\n   isVsanMaxCompatibleFilter: FunctionFilter<VsanDiskListItem> = new FunctionFilter((data: VsanDiskListItem) => {\n      return \"\" + this.getIsVsanMaxCompatibleLabel(data);\n   });\n\n   totalCapacityFilter: FunctionFilter<VsanDiskListItem> = new FunctionFilter((data: VsanDiskListItem) => {\n      return data.capacity;\n   });\n\n   hostNameFilter: FunctionFilter<VsanDiskListItem> = new FunctionFilter((data: VsanDiskListItem) => {\n      return data.hostName;\n   });\n\n   transportTypeFilter: FunctionFilter<VsanDiskListItem> = new FunctionFilter((data: VsanDiskListItem) => {\n      return data.transportType;\n   });\n\n   diskAdapterFilter: FunctionFilter<VsanDiskListItem> = new FunctionFilter((data: VsanDiskListItem) => {\n      return data.diskAdapter;\n   });\n}","/* Copyright (c) 2021 VMware, Inc. All rights reserved. VMware Confidential */\nimport { HostListener } from '@angular/core';\nimport {\n   Directive, EventEmitter, Output,\n} from \"@angular/core\";\n\n/**\n * Used to overwrite the \"escape\" key behavior.\n * Should be used when having a inline modal which needs to be closed on escape.\n */\n@Directive({\n   selector: \"[vsan-on-modal-escape]\",\n})\nexport class OnModalEscapeDirective {\n   @Output()\n   onEscape: EventEmitter<void> = new EventEmitter<void>();\n\n   @HostListener(\"document:keyup.escape\", [\"$event\"])\n   processEscape(e: KeyboardEvent): void {\n      e.preventDefault();\n      e.stopImmediatePropagation();\n      e.stopPropagation();\n      this.onEscape.emit();\n   }\n}","/* Copyright 2017-2022 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {ClaimHostListItem} from \"@component/diskmgmt/model/claim-host-list-item.data\";\nimport {ClaimOption} from \"@generated/claim-option\";\nimport {MapUtil} from \"@util/map-util\";\nimport {ClaimedDisksData} from \"@component/diskmgmt/model/claimed-disks-data\";\nimport {DiskMgmtDiskUtil} from \"@util/disk-mgmt-disk.util\";\nimport {VsanDiskClaimSpec} from \"@generated/vsan-disk-claim-spec\";\n\n/**\n * Holds summary information about disks claiming.\n */\nexport class DisksClaimingConfigInfo {\n   oldUnclaimedStorage: number;\n   newUnclaimedStorage: number;\n   claimAllFlash: boolean;\n   mixedDiskClaiming: boolean;\n   disksNotEquallySpread: boolean;\n   private oldClaimedCapacity: number;\n   private newClaimedCapacity: number;\n   private oldClaimedCache: number;\n   private newClaimedCache: number;\n   // TODO [tdardzhonov] make capacity and cache disks to use that map\n   private claimedDisksSummary: Map<ClaimOption, ClaimedDisksData>;\n\n   constructor() {\n      this.resetAllFields();\n   }\n\n   setInitialState(allHostsInCluster: ClaimHostListItem[]): void {\n      this.resetAllFields();\n      for (const host of allHostsInCluster) {\n         this.oldClaimedCapacity += host.claimedCapacity;\n         this.oldClaimedCache += host.claimedCache;\n         this.oldUnclaimedStorage += host.unclaimedStorage;\n         this.initializeHostManagedByVsanSummary(host);\n      }\n   }\n\n   updateClaimingData(hostsClaimData: ClaimHostListItem[]): void {\n      this.setClaimingToInitialState();\n      this.resetValidationResult();\n\n      hostsClaimData.forEach((host) => {\n         this.newClaimedCapacity += host.capacityFor(ClaimOption.ClaimForStorage);\n         this.newClaimedCache += host.capacityFor(ClaimOption.ClaimForCache);\n         this.newUnclaimedStorage -= host.capacityFor(ClaimOption.ClaimForStorage);\n         this.newUnclaimedStorage -= host.capacityFor(ClaimOption.ClaimForCache);\n         this.newUnclaimedStorage -= host.getManagedByVsanClaimedSpace();\n         this.addDisksToManagedByVsanClaimOptions(host);\n\n         // determine it we are claiming hybrid groups or all flash only\n         host.getHostDisksToClaim().forEach((disk: VsanDiskClaimSpec) => {\n            if (disk.claimOption === ClaimOption.ClaimForStorage) {\n               this.claimAllFlash = disk.markedAsFlash;\n            }\n         });\n      });\n   }\n\n   updateManagedClaimingData(claimOption: ClaimOption, value: number): void {\n      const claimedDisksData: ClaimedDisksData = this.getManagedByVsanClaimOptionSummary(claimOption);\n      claimedDisksData.newClaimedCapacity = value;\n   }\n\n   totalCapacity(): number {\n      return this.newUnclaimedStorage + this.totalUsedCapacity();\n   }\n\n   totalUsedCapacity(): number {\n      return this.getClaimedCapacity(ClaimOption.ClaimForStorage)\n            + this.getClaimedCapacity(ClaimOption.ClaimForCache)\n            + MapUtil.sum(this.claimedDisksSummary, (claimedDisk) => claimedDisk.newClaimedCapacity);\n   }\n\n   resetValidationResult(): void {\n      this.mixedDiskClaiming = false;\n      this.disksNotEquallySpread = false;\n   }\n\n   clone(): DisksClaimingConfigInfo {\n      const disksClaiming: DisksClaimingConfigInfo = new DisksClaimingConfigInfo();\n      disksClaiming.oldClaimedCapacity = this.oldClaimedCapacity;\n      disksClaiming.oldClaimedCache = this.oldClaimedCache;\n      disksClaiming.oldUnclaimedStorage = this.oldUnclaimedStorage;\n      disksClaiming.newClaimedCapacity = this.newClaimedCapacity;\n      disksClaiming.newClaimedCache = this.newClaimedCache;\n      disksClaiming.newUnclaimedStorage = this.newUnclaimedStorage;\n      disksClaiming.claimAllFlash = this.claimAllFlash;\n      disksClaiming.mixedDiskClaiming = this.mixedDiskClaiming;\n      disksClaiming.disksNotEquallySpread = this.disksNotEquallySpread;\n      disksClaiming.claimedDisksSummary = this.claimedDisksSummary;\n      return disksClaiming;\n   }\n\n   hasNewClaimedCapacity(claimOption: ClaimOption): boolean {\n      return this.getClaimedCapacity(claimOption) - this.getOldClaimedCapacity(claimOption) > 0;\n   }\n\n   /**\n    * Return already claimed capacity\n    */\n   getOldClaimedCapacity(claimOption: ClaimOption): number {\n      if (claimOption === ClaimOption.ClaimForCache) {\n         return this.oldClaimedCache;\n      } else if (claimOption === ClaimOption.ClaimForStorage) {\n         return this.oldClaimedCapacity;\n      } else {\n         return this.claimedDisksSummary.has(claimOption)\n               ? this.claimedDisksSummary.get(claimOption).oldClaimedCapacity\n               : 0;\n      }\n   }\n\n   /**\n    * Return already claimed capacity + newly claimed capacity\n    */\n   getClaimedCapacity(claimOption: ClaimOption): number {\n      switch (claimOption) {\n         case ClaimOption.ClaimForCache:\n            return this.newClaimedCache;\n         case ClaimOption.ClaimForStorage:\n            return this.newClaimedCapacity;\n         default:\n            return this.claimedDisksSummary.has(claimOption) ?\n                  this.claimedDisksSummary.get(claimOption).newClaimedCapacity\n                  : 0;\n      }\n   }\n\n   /**\n    * Return the number of disks contributing to the given capacity option.\n    * This is currently only used when vSAN MAX is enabled.\n    * IMPORTANT:\n    * This method currently only works for disks that are written to claimedDisksSummary map,\n    * e.g. the vSAN 1 disks that are not considered, when populating it cannot be retrieved from this method.\n    * Check the TODO at claimedDisksSummary's definition above.\n    */\n   getClaimedDiskCount(claimOption: ClaimOption): number {\n      return this.claimedDisksSummary.has(claimOption) ?\n            this.claimedDisksSummary.get(claimOption).newClaimedDisksCount : 0;\n   }\n\n   private resetAllFields(): void {\n      this.oldClaimedCapacity = 0;\n      this.oldClaimedCache = 0;\n      this.oldUnclaimedStorage = 0;\n      this.newClaimedCapacity = 0;\n      this.newClaimedCache = 0;\n      this.newUnclaimedStorage = 0;\n      this.claimAllFlash = false;\n      this.mixedDiskClaiming = false;\n      this.disksNotEquallySpread = false;\n      this.claimedDisksSummary = new Map<ClaimOption, ClaimedDisksData>();\n   }\n\n   private setClaimingToInitialState(): void {\n      this.newClaimedCapacity = this.oldClaimedCapacity;\n      this.newClaimedCache = this.oldClaimedCache;\n      this.newUnclaimedStorage = this.oldUnclaimedStorage;\n      this.claimAllFlash = false;\n      this.resetClaimedDisksInManagedByVsanSummary();\n   }\n\n   private initializeHostManagedByVsanSummary(host: ClaimHostListItem): void {\n      for (const claimOption of DiskMgmtDiskUtil.MANAGED_BY_VSAN_CLAIM_OPTIONS) {\n         const claimedDisksData: ClaimedDisksData = this.getManagedByVsanClaimOptionSummary(claimOption);\n         const hostClaimOptionSummary: ClaimedDisksData = host.getClaimOptionSummary(claimOption);\n\n         if (hostClaimOptionSummary) {\n            claimedDisksData.oldClaimedDisksCount += hostClaimOptionSummary.oldClaimedDisksCount;\n            claimedDisksData.oldClaimedCapacity += hostClaimOptionSummary.oldClaimedCapacity;\n         }\n      }\n   }\n\n   private addDisksToManagedByVsanClaimOptions(host: ClaimHostListItem): void {\n      for (const claimOption of DiskMgmtDiskUtil.MANAGED_BY_VSAN_CLAIM_OPTIONS) {\n         const hostClaimOptionSummary: ClaimedDisksData = host.getClaimOptionSummary(claimOption);\n\n         if (hostClaimOptionSummary) {\n            const claimedDisksSummary: ClaimedDisksData = this.claimedDisksSummary.get(claimOption);\n            claimedDisksSummary.newClaimedDisksCount += hostClaimOptionSummary.newClaimedDisksCount;\n            claimedDisksSummary.newClaimedCapacity += hostClaimOptionSummary.newClaimedCapacity;\n         }\n      }\n   }\n\n   private getManagedByVsanClaimOptionSummary(claimOption: ClaimOption): ClaimedDisksData {\n      if (this.claimedDisksSummary.has(claimOption)) {\n         return this.claimedDisksSummary.get(claimOption);\n      }\n\n      const claimedDisksSummary: ClaimedDisksData = new ClaimedDisksData();\n      this.claimedDisksSummary.set(claimOption, claimedDisksSummary);\n      return claimedDisksSummary;\n   }\n\n   private resetClaimedDisksInManagedByVsanSummary(): void {\n      MapUtil.forEach(this.claimedDisksSummary, (summary) => {\n         summary.newClaimedDisksCount = summary.oldClaimedDisksCount;\n         summary.newClaimedCapacity = summary.oldClaimedCapacity;\n      });\n   }\n}","/* Copyright 2017-2022 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {ClaimOption} from \"@generated/claim-option\";\nimport {DatastoreType} from \"@generated/datastore-type\";\nimport {DiskMgmtDiskUtil} from \"@util/disk-mgmt-disk.util\";\nimport {VsanBaseListItem} from \"./vsan-base-list-item.data\";\nimport {VsanDiskListItem} from \"./vsan-disk-list-item\";\n\nexport class ClaimRootListItem extends VsanBaseListItem {\n\n   private _eligibleDisks: VsanDiskListItem[];\n   protected contextDatastoreType: DatastoreType = DatastoreType.VSAN;\n\n   set eligibleDisks(disks: VsanDiskListItem[]) {\n      this._eligibleDisks = disks;\n      this.claimOption = this.getUpdatedClaimOption();\n\n      this._capacityNum = 0;\n      if (this.eligibleDisks) {\n         for (const disk of this.eligibleDisks) {\n            this._capacityNum += disk.capacityNum;\n         }\n      }\n   }\n\n   /**\n    * Return all eligible disk.\n    */\n   get eligibleDisks(): VsanDiskListItem[] {\n      return this._eligibleDisks;\n   }\n\n   /**\n    * Returns whether there are some eligible disks for claim by vsan on the host.\n    */\n   get hasEligibleDisks(): boolean {\n      return this._eligibleDisks?.length > 0;\n   }\n\n   private _capacityNum: number = 0;\n\n   get capacityNum(): number {\n      return this._capacityNum;\n   }\n\n   /**\n    * Gets the claim option for the root item\n    */\n   get claimOption(): ClaimOption {\n      return this._claimOption;\n   }\n\n   set claimOption(newValue: ClaimOption) {\n      this._claimOption = newValue;\n      if (this._claimOption !== ClaimOption.Custom) {\n         this.updateChildrenClaimOption();\n      }\n   }\n\n   /**\n    * Updates the claim option for model's children:\n    * Claim children when a model group is claimed.\n    */\n   updateChildrenClaimOption(): void {\n      if (!this.eligibleDisks) {\n         return;\n      }\n      for (const disk of this.eligibleDisksInDatastoreContext) {\n         disk.claimOption = this.claimOption;\n      }\n   }\n\n   /**\n    * Updates the claim option according to the children ones.\n    */\n   updateClaimOption(datastoreType: DatastoreType): void {\n      this.contextDatastoreType = datastoreType;\n      this.claimOption = this.getUpdatedClaimOption();\n   }\n\n   private getUpdatedClaimOption(): ClaimOption {\n      let newClaimOption: ClaimOption = ClaimOption.DoNotClaim;\n      const disks: VsanDiskListItem[] = this.eligibleDisksInDatastoreContext;\n\n      if (disks.length > 0) {\n         newClaimOption = disks[0].claimOption;\n\n         for (const disk of disks) {\n            if (newClaimOption !== disk.claimOption) {\n               newClaimOption = ClaimOption.Custom;\n               break;\n            }\n         }\n      }\n      return newClaimOption;\n   }\n\n   /**\n    * Return disks which can be claimed in the context of a datastore type.\n    * That mean that these disks have to be eligible and not to be claimed for another datastore type already.\n    */\n   get eligibleDisksInDatastoreContext(): VsanDiskListItem[] {\n      if (!this.eligibleDisks || !this.eligibleDisks.length) {\n         return [];\n      }\n\n      return this.eligibleDisks.filter(disk => {\n         switch (this.contextDatastoreType) {\n            case DatastoreType.VSAN:\n               return this.isDiskEligible(\n                     DiskMgmtDiskUtil.isClaimedForVsanDirect,\n                     DiskMgmtDiskUtil.VSAN_CLAIM_OPTIONS,\n                     disk);\n            case DatastoreType.VSAN_DIRECT:\n               return this.isDiskEligible(\n                     DiskMgmtDiskUtil.isClaimedForVsan,\n                     DiskMgmtDiskUtil.VSAN_DIRECT_CLAIM_OPTIONS,\n                     disk);\n            default:\n               return false;\n         }\n      });\n   }\n\n   isDiskEligible(\n         isClaimedForOtherDsType: (claimOption: ClaimOption) => boolean,\n         validDsTypeClaimOptions: ClaimOption[],\n         disk: VsanDiskListItem): boolean {\n      const isNotClaimedForOtherDsType: boolean = !isClaimedForOtherDsType(disk.claimOption);\n\n      const canBeClaimedForThatDsType: boolean =\n            validDsTypeClaimOptions.some(\n                  claimOption => disk.possibleClaimOptions && disk.possibleClaimOptions.includes(claimOption));\n\n      return isNotClaimedForOtherDsType && canBeClaimedForThatDsType;\n   }\n}\n","<!-- Copyright (c) 2019-2022 VMware, Inc. All Rights Reserved. -->\n<div *ngIf=\"loading\" class=\"spinner central-spinner\">{{\"vsan.loading\" | localized}}</div>\n<ng-container *ngIf=\"!loading\">\n   <vsan-validation id=\"semi-auto-claim-validations\"\n                    *ngIf=\"errorMessage\"\n                    [allowClose]=\"false\"\n                    [alert]=\"errorMessage\">\n   </vsan-validation>\n\n   <vsan-disks-capacity-chart [disksClaiming]=\"disksClaimingConfigInfo\"></vsan-disks-capacity-chart>\n   <ng-container *ngIf=\"!vsanConfigSpec.isVsanMaxEnabled\">\n      <clr-tabs *ngIf=\"datastoreTypes.length > 1\">\n         <clr-tab *ngFor=\"let datastoreType of datastoreTypes\">\n            <button id=\"{{'datastore-type-' + datastoreType}}\"\n                    clrTabLink\n                    (click)=\"changeDatastoreType(datastoreType)\">\n               {{getDatastoreTypeLabel(datastoreType)}}\n            </button>\n            <clr-tab-content *clrIfActive=\"datastoreType === selectedDatastoreType\">\n               <ng-container *ngTemplateOutlet=\"dsType\"></ng-container>\n            </clr-tab-content>\n         </clr-tab>\n      </clr-tabs>\n\n      <ng-container *ngIf=\"datastoreTypes.length < 2\">\n         <ng-container *ngTemplateOutlet=\"dsType\"></ng-container>\n      </ng-container>\n   </ng-container>\n\n   <ng-container *ngIf=\"vsanConfigSpec.isVsanMaxEnabled\">\n      <ng-container *ngTemplateOutlet=\"vsanMax\"></ng-container>\n   </ng-container>\n\n   <ng-template #dsType>\n      <ng-container *ngIf=\"selectedDatastoreType === DatastoreType.VSAN\">\n         <ng-container *ngTemplateOutlet=\"vsan\"></ng-container>\n      </ng-container>\n      <ng-container *ngIf=\"selectedDatastoreType === DatastoreType.VSAN_DIRECT\">\n         <ng-container *ngTemplateOutlet=\"vmfs\"></ng-container>\n      </ng-container>\n      <ng-container *ngIf=\"selectedDatastoreType === DatastoreType.PMEM\">\n         <ng-container *ngTemplateOutlet=\"pmem\"></ng-container>\n      </ng-container>\n   </ng-template>\n\n   <ng-template #vsan>\n      <vsan-claim-for-vsan [allHostsInCluster]=\"allHostsInCluster\"\n                           [disksByVendor]=\"disksByVendor\"\n                           [isStandalone]=\"isStandalone\"\n                           (update)=\"update()\">\n      </vsan-claim-for-vsan>\n   </ng-template>\n\n   <ng-template #vsanMax>\n      <vsan-claim-for-vsan-max [disksByHost]=\"allHostsInCluster\"\n                               [disksByVendor]=\"disksByVendor\"\n                               [isStandalone]=\"isStandalone\"\n                               (update)=\"update()\">\n      </vsan-claim-for-vsan-max>\n   </ng-template>\n\n   <ng-template #vmfs>\n      <vsan-claim-for-vsan-direct [allHostsInCluster]=\"allHostsInCluster\"\n                                  [disksByVendor]=\"disksByVendor\"\n                                  [isStandalone]=\"isStandalone\"\n                                  (update)=\"update()\">\n      </vsan-claim-for-vsan-direct>\n   </ng-template>\n\n   <ng-template #pmem>\n      <vsan-claim-for-pmem [allHostsInCluster]=\"allHostsInCluster\"\n                           (update)=\"update()\">\n      </vsan-claim-for-pmem>\n   </ng-template>\n\n   <vsan-validation-panel\n         id=\"validationContainer\"\n         [noSelectionIsError]=\"isStandalone\"\n         [hostsData]=\"allHostsInCluster\"\n         [vsanConfigSpec]=\"vsanConfigSpec\"\n         [disksClaimingConfigInfo]=\"disksClaimingConfigInfo\"\n         (isConfigAcceptable)=\"configValid.emit($event)\">\n   </vsan-validation-panel>\n</ng-container>\n\n\n","import {ClaimOption} from '@generated/claim-option';\n\nexport interface VsanDiskClaimSpec {\n\n   disk: any;\n   claimOption: ClaimOption;\n   markedAsFlash: boolean;\n} //class VsanDiskClaimSpec\n\nexport module VsanDiskClaimSpec{\nexport class Factory {\n\n   static create = (disk: any, claimOption: ClaimOption, markedAsFlash: boolean): VsanDiskClaimSpec => {\n      return { disk: disk, claimOption: claimOption, markedAsFlash: markedAsFlash, };\n   }\n\n\n} //class Factory\n\n} //module VsanDiskClaimSpec\n","import {VsanDiskClaimSpec} from '@generated/vsan-disk-claim-spec';\n\nexport interface VsanClaimHostDiskMappingsSpec {\n\n   clusterRef: any;\n   hostRef: any;\n   disks: VsanDiskClaimSpec[];\n   isAllFlashSupported: boolean;\n} //class VsanClaimHostDiskMappingsSpec\n\nexport module VsanClaimHostDiskMappingsSpec{\nexport class Factory {\n\n   static create = (clusterRef: any, hostRef: any, disks: VsanDiskClaimSpec[], isAllFlashSupported: boolean): VsanClaimHostDiskMappingsSpec => {\n      return { clusterRef: clusterRef, hostRef: hostRef, disks: disks, isAllFlashSupported: isAllFlashSupported, };\n   }\n\n\n} //class Factory\n\n} //module VsanClaimHostDiskMappingsSpec\n","<!-- Copyright (c) 2020-2022 VMware, Inc. All Rights Reserved. -->\n<div id=\"vsan-claim-title\">{{\"vsan.dialog.semiAutoClaimDialog.confInfo.vsan\" | localized}}</div>\n<!--Eligible Disks Button Bar -->\n<div class=\"clr-row\">\n   <vsan-disks-group-by-perspective class=\"clr-offset-8 clr-col-4\"\n                                    (changePerspective)=\"changePerspective($event)\">\n   </vsan-disks-group-by-perspective>\n</div>\n\n<!--    Eligible Disks List -->\n<clr-datagrid [clrDgLoading]=\"datagridLoading\" class=\"datagrid-compact\">\n   <!-- Datagrid Header -->\n   <clr-dg-column class=\"name-column\">\n      <vsan-tree-column [dataField]=\"'name'\"\n                        [dataProvider]=\"datagrid\"\n                        [filterObject]=\"nameFilter\"\n                        [title]=\"nameColumnTitle\">\n      </vsan-tree-column>\n   </clr-dg-column>\n   <clr-dg-column>\n      {{\"vsan.disk.list.claimFor\" | localized}}\n   </clr-dg-column>\n   <clr-dg-column>\n      <vsan-tree-column [dataField]=\"'driveTypeLabel'\"\n                        [dataProvider]=\"datagrid\"\n                        [filterObject]=\"driveTypeFilter\"\n                        [title]=\"'vsan.disk.list.driveType' | localized\">\n      </vsan-tree-column>\n   </clr-dg-column>\n   <clr-dg-column *ngIf=\"selectedPerspective == DisksGroupByPerspective.DISKS_BY_HOST\" class=\"name-column\">\n      <vsan-tree-column [dataField]=\"'capacity'\"\n                        [dataProvider]=\"datagrid\"\n                        [filterObject]=\"totalCapacityFilter\"\n                        [title]=\"'vsan.disk.list.totalCapacity' | localized\">\n      </vsan-tree-column>\n   </clr-dg-column>\n   <clr-dg-column *ngIf=\"selectedPerspective == DisksGroupByPerspective.DISKS_BY_VENDOR\" class=\"name-column\">\n      <vsan-tree-column [dataField]=\"'hostName'\"\n                        [dataProvider]=\"datagrid\"\n                        [filterObject]=\"hostNameFilter\"\n                        [title]=\"'vsan.disk.list.host' | localized\">\n      </vsan-tree-column>\n   </clr-dg-column>\n   <clr-dg-column *ngIf=\"isStandalone\">\n      <vsan-tree-column [dataField]=\"'transportType'\"\n                        [dataProvider]=\"datagrid\"\n                        [filterObject]=\"transportTypeFilter\"\n                        [title]=\"'vsan.disk.list.transportType' | localized\">\n      </vsan-tree-column>\n   </clr-dg-column>\n   <clr-dg-column *ngIf=\"isStandalone\">\n      <vsan-tree-column [dataField]=\"'diskAdapter'\"\n                        [dataProvider]=\"datagrid\"\n                        [filterObject]=\"diskAdapterFilter\"\n                        [title]=\"'vsan.disk.list.diskAdapter' | localized\">\n      </vsan-tree-column>\n   </clr-dg-column>\n   <!-- Datagrid Content -->\n   <clr-dg-row *clrDgItems=\"let row of datagrid.rows\"\n               [class.datagrid-selected]=\"isRowSelected(row)\"\n               (click)=\"selectTarget(row, $event)\">\n      <clr-dg-cell vsan-show-title>\n         <vsan-expand [row]=\"row\"></vsan-expand>\n         <clr-icon [attr.shape]=\"row.data.image\"></clr-icon>\n         <span>{{row.data.name}}</span>\n      </clr-dg-cell>\n      <clr-dg-cell class=\"dropdown-cell\">\n         <clr-icon *ngIf=\"isStandalone\" [attr.shape]=\"row.data.claimOptionIcon\"></clr-icon>\n         <select vsan-refocus-after-change clrSelect (change)=\"changeClaimOption(row.data, $event)\">\n            <option *ngFor=\"let option of getClaimOptions(row.data)\"\n                    value=\"{{option}}\"\n                    [selected]=\"option == row.data.claimOption\">\n               {{localizeClaimOption(option)}}\n            </option>\n         </select>\n      </clr-dg-cell>\n      <clr-dg-cell class=\"text-nowrap dropdown-cell\">\n         <clr-tooltip *ngIf=\"hasDriveTypeWarningImage(row.data)\">\n            <clr-icon shape=\"warning\" class=\"is-warning\" clrTooltipTrigger></clr-icon>\n            <clr-tooltip-content *clrIfOpen clrSize=\"lg\">\n               <span id=\"migration-mode-tooltip\">{{onWarningDriveTypeTooltip}}</span>\n            </clr-tooltip-content>\n         </clr-tooltip>\n         <select vsan-refocus-after-change *ngIf=\"row.data.driveTypeLabel\"\n                 clrSelect\n                 (change)=\"changeDriveType($event)\">\n            <option *ngFor=\"let type of row.data.possibleDriveTypes\"\n                    value=\"{{type}}\"\n                    [selected]=\"type === row.data.driveType\">\n               {{ClaimDisksUtil.getLocalizedDriveType(type)}}\n            </option>\n         </select>\n      </clr-dg-cell>\n      <clr-dg-cell *ngIf=\"selectedPerspective == DisksGroupByPerspective.DISKS_BY_HOST\" vsan-show-title>\n         {{row.data.capacity}}\n      </clr-dg-cell>\n      <clr-dg-cell *ngIf=\"selectedPerspective == DisksGroupByPerspective.DISKS_BY_VENDOR\" vsan-show-title>\n         <clr-icon *ngIf=\"getHostIcon(row.data)\" [attr.shape]=\"getHostIcon(row.data)\"></clr-icon>\n         {{row.data.hostName}}\n      </clr-dg-cell>\n      <clr-dg-cell *ngIf=\"isStandalone\">{{row.data.transportType}}</clr-dg-cell>\n      <clr-dg-cell *ngIf=\"isStandalone\">{{row.data.diskAdapter}}</clr-dg-cell>\n   </clr-dg-row>\n\n   <!-- Datagrid Footer -->\n   <clr-dg-footer>\n      <clr-dg-pagination [clrDgPageSize]=\"ClaimDisksUtil.DISKS_PER_DATAGRID_PAGE\">\n         {{footerLabel.getLabel(selectedPerspective)}}\n      </clr-dg-pagination>\n   </clr-dg-footer>\n</clr-datagrid>\n\n<!-- Mark as Flash/HDD Warning Dialog -->\n<div *ngIf=\"showWarning\"\n     id=\"warning-dialog\"\n     class=\"modal\"\n     vsan-on-modal-escape\n     (onEscape)=\"showWarning = false\">\n   <div class=\"modal-dialog\" role=\"dialog\">\n      <div class=\"modal-content\">\n         <div class=\"modal-header {{warningHeaderClass}}\">\n            <h3 id=\"warning-title\" class=\"modal-title\">\n               {{warningTitle}}\n            </h3>\n         </div>\n         <div id=\"warning-text\" class=\"modal-body {{warningContentClass}}\">\n            {{warningText}}\n         </div>\n         <div class=\"modal-footer\">\n            <button id=\"dismissal-button\"\n                    type=\"button\"\n                    class=\"btn btn-outline\"\n                    (click)=\"cancelMarkAsAction()\">\n               {{\"vsan.common.no\" | localized}}\n            </button>\n            <button id=\"confirmation-button\"\n                    type=\"button\"\n                    class=\"btn btn-primary\"\n                    (click)=\"warningConfirmationHandler()\">\n               {{\"vsan.common.yes\" | localized}}\n            </button>\n         </div>\n      </div>\n   </div>\n</div>\n<div *ngIf=\"showWarning\"\n     class=\"modal-backdrop opaque-backdrop fade in\"\n     aria-hidden=\"true\">\n</div>","<!-- Copyright (c) 2020-2021 VMware, Inc. All Rights Reserved. -->\n<clr-select-container class=\"horizontal-layout label-auto-size\">\n   <label for=\"perspective-dropdown\">{{\"vsan.disk.list.groupBy\" | localized}}</label>\n   <select clrSelect id=\"perspective-dropdown\"\n           [(ngModel)]=\"selectedPerspective\"\n           (change)=\"changePerspective.emit(selectedPerspective)\">\n      <option *ngFor=\"let option of perspectives\"\n              [ngValue]=\"option\"\n              [selected]=\"option === selectedPerspective\">\n         {{getPerspectiveLabel(option)}}\n      </option>\n   </select>\n</clr-select-container>","/* Copyright 2020-2022 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, EventEmitter, Input, OnInit, Output} from \"@angular/core\";\nimport {FunctionFilter} from \"@component/datagrid/filter/function-filter\";\nimport {TreeDatagridView} from \"@component/datagrid/tree-datagrid-view\";\nimport {ClaimDisksUtil} from \"@component/diskmgmt/claim-disks-util\";\nimport {ClaimDisksDatagridFooterLabel} from \"@component/diskmgmt/model/claim-disks-datagrid-footer-label\";\nimport {ClaimHostListItem} from \"@component/diskmgmt/model/claim-host-list-item.data\";\nimport {ClaimVendorListItem} from \"@component/diskmgmt/model/claim-vendor-list-item.data\";\nimport {VsanBaseListItem} from \"@component/diskmgmt/model/vsan-base-list-item.data\";\nimport {VsanDiskListItem} from \"@component/diskmgmt/model/vsan-disk-list-item\";\nimport {DisksGroupByPerspective} from \"@component/diskmgmt/perspective/disks-group-by-perspective\";\nimport {ClaimOption} from \"@generated/claim-option\";\nimport {Icon} from \"@util/icon\";\n\n@Component({\n   selector: \"vsan-claim-for-vsan-direct\",\n   templateUrl: \"claim-for-vsan-direct.html\",\n   styleUrls: [\"claim-for-vsan-direct.scss\"],\n})\nexport class ClaimForVsanDirectComponent extends TreeDatagridView implements OnInit {\n   static readonly CHILD_FIELD: string = \"eligibleDisksInDatastoreContext\";\n   DisksGroupByPerspective: typeof DisksGroupByPerspective = DisksGroupByPerspective;\n   ClaimOption: typeof ClaimOption = ClaimOption;\n   ClaimDisksUtil: typeof ClaimDisksUtil = ClaimDisksUtil;\n\n   @Input()\n   allHostsInCluster: ClaimHostListItem[];\n\n   @Input()\n   disksByVendor: ClaimVendorListItem[];\n\n   @Input()\n   isStandalone: boolean;\n\n   @Output()\n   update: EventEmitter<void> = new EventEmitter<void>();\n\n   selectedPerspective: DisksGroupByPerspective;\n   footerLabel: ClaimDisksDatagridFooterLabel;\n\n   constructor() {\n      super(ClaimForVsanDirectComponent.CHILD_FIELD);\n      this.multipleSelection = true;\n   }\n\n   ngOnInit(): void {\n      this.datagridLoading = false;\n      this.footerLabel = new ClaimDisksDatagridFooterLabel(this.allHostsInCluster, this.disksByVendor);\n   }\n\n   changePerspective = (perspective: DisksGroupByPerspective) => {\n      this.selectedPerspective = perspective;\n      ClaimDisksUtil.changePerspective(\n            this.selectedPerspective, this.datagrid, this.allHostsInCluster, this.disksByVendor);\n   };\n\n   getHostIcon = (item: VsanBaseListItem): string => {\n      return item.isRoot ? null : Icon.HOST;\n   };\n\n   get nameColumnTitle(): string {\n      return ClaimDisksUtil.getNameColumnTitle(this.selectedPerspective);\n   }\n\n   toggleClaiming(data: any): void {\n      data.claimOption = data.claimOption === ClaimOption.DoNotClaim || data.claimOption === ClaimOption.Custom\n            ? ClaimOption.VMFS\n            : ClaimOption.DoNotClaim;\n      data.markedAsFlash = data.isFlash;\n      this.update.emit();\n   }\n\n   nameFilter: FunctionFilter<VsanDiskListItem> = new FunctionFilter((data: VsanDiskListItem) => {\n      return data.name;\n   });\n\n   driveTypeFilter: FunctionFilter<VsanDiskListItem> = new FunctionFilter((data: VsanDiskListItem) => {\n      return data.driveTypeLabel;\n   });\n\n   totalCapacityFilter: FunctionFilter<VsanDiskListItem> = new FunctionFilter((data: VsanDiskListItem) => {\n      return data.capacity;\n   });\n\n   hostNameFilter: FunctionFilter<VsanDiskListItem> = new FunctionFilter((data: VsanDiskListItem) => {\n      return data.hostName;\n   });\n\n   transportTypeFilter: FunctionFilter<VsanDiskListItem> = new FunctionFilter((data: VsanDiskListItem) => {\n      return data.transportType;\n   });\n\n   diskAdapterFilter: FunctionFilter<VsanDiskListItem> = new FunctionFilter((data: VsanDiskListItem) => {\n      return data.diskAdapter;\n   });\n}","/* Copyright 2017-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {ClaimOption} from \"@generated/claim-option\";\nimport {ClaimRootListItem} from \"@component/diskmgmt/model/claim-root-list-item.data\";\nimport {VsanDiskListItem} from \"./vsan-disk-list-item\";\nimport {DriveType} from \"../model/drive-type.data\";\nimport {DiskMgmtUtil} from \"@util/disk-mgmt.util\";\nimport {ClaimDisksUtil} from \"@component/diskmgmt/claim-disks-util\";\n\nexport class ClaimVendorListItem extends ClaimRootListItem {\n\n   private _infoText: string;\n\n   /**\n    * Gets the vendor's name\n    */\n   get name(): string {\n      if (this._name) {\n         return this._name;\n      }\n\n      this._name = this.getFirstEligibleItem().model;\n      return this._name;\n   }\n\n   set name(newName: string) {\n      this._name = newName;\n   }\n\n   get image(): string {\n      return this.getFirstEligibleItem().image;\n   }\n\n   get possibleClaimOptions(): ClaimOption[] {\n      let isClaimForStorageAvailable: boolean = true;\n      let isClaimForCacheAvailable: boolean = true;\n      let isClaimForVMFSAvailable: boolean = true;\n      let isDoNotClaimAvailable: boolean = true;\n\n      for (const item of this.eligibleDisks) {\n         isClaimForCacheAvailable = isClaimForCacheAvailable &&\n               item.possibleClaimOptions.includes(ClaimOption.ClaimForCache);\n         isClaimForStorageAvailable = isClaimForStorageAvailable &&\n               item.possibleClaimOptions.includes(ClaimOption.ClaimForStorage);\n         isClaimForVMFSAvailable = isClaimForVMFSAvailable &&\n               item.possibleClaimOptions.includes(ClaimOption.VMFS);\n         isDoNotClaimAvailable = isDoNotClaimAvailable &&\n               item.possibleClaimOptions.includes(ClaimOption.DoNotClaim);\n      }\n\n      const claimOptions: ClaimOption[] = [ClaimOption.Custom];\n\n      if (isClaimForCacheAvailable) {\n         claimOptions.push(ClaimOption.ClaimForCache);\n      }\n\n      if (isClaimForStorageAvailable) {\n         claimOptions.push(ClaimOption.ClaimForStorage);\n      }\n\n      if (isClaimForVMFSAvailable) {\n         claimOptions.push(ClaimOption.VMFS);\n      }\n\n      if (isDoNotClaimAvailable) {\n         claimOptions.push(ClaimOption.DoNotClaim);\n      }\n\n      return claimOptions;\n   }\n\n   /**\n    * Return drive types that are valid for at least one disk.\n    */\n   get possibleDriveTypes(): DriveType[] {\n      if (!this.eligibleDisks || this.eligibleDisks.length === 0) {\n         return [];\n      }\n\n      let types: DriveType[] = [];\n      this.eligibleDisks.forEach(disk => {\n         types.push(...disk.possibleDriveTypes);\n      });\n      // Remove duplicate types.\n      types = Array.from(new Set(types));\n\n      if (!this.areAllItemsMarkedTheSame()) {\n         types.push(DriveType.CUSTOM);\n      }\n      return types;\n   }\n\n   /**\n    * Disk's capacity.\n    */\n   get capacity(): string {\n      if (this._capacity) {\n         return this._capacity;\n      }\n\n      // All disks must be with the same size\n      const capacityNum: number =\n            DiskMgmtUtil.lbaToBytes(this.getFirstEligibleItem().disk.capacity) * this.eligibleDisks.length;\n\n      this._capacity = VsanUiUtils.formatFileSize(capacityNum);\n      return this._capacity;\n   }\n\n   get vendor(): string {\n      return this.getFirstEligibleItem().vendor;\n   }\n\n   get model(): string {\n      return this.getFirstEligibleItem().diskModel;\n   }\n\n   get initialDriveType(): string {\n      return ClaimDisksUtil.getLocalizedDriveType(this.isFlash ? DriveType.FLASH : DriveType.HDD);\n   }\n\n   /**\n    * Disk's drive type label.\n    */\n   get driveTypeLabel(): string {\n      return ClaimDisksUtil.getLocalizedDriveType(this.driveType);\n   }\n\n   /**\n    * Disk's drive type.\n    */\n   get driveType(): DriveType {\n      if (!this.areAllItemsMarkedTheSame()) {\n         return DriveType.CUSTOM;\n      }\n\n      return this.getFirstEligibleItem().driveType;\n   }\n\n   get isFlash(): boolean {\n      return this.getFirstEligibleItem().isFlash;\n   }\n\n   get isHdd(): boolean {\n      return this.getFirstEligibleItem().isHdd;\n   }\n\n   set markedAsFlash(newValue: boolean) {\n      for (const disk of this.eligibleDisksInDatastoreContext) {\n         disk.markedAsFlash = newValue;\n      }\n   }\n\n   get markedAsFlash(): boolean {\n      if (this.areAllItemsMarkedTheSame()) {\n         return this.getFirstEligibleItem().markedAsFlash;\n      }\n\n      return false;\n   }\n\n   /**\n    * Disk's transport type.\n    */\n   get transportType(): string {\n      return this.getFirstEligibleItem().transportType;\n   }\n\n   get hostName(): string {\n      return this.getVendorHostLabel(this.eligibleDisksInDatastoreContext);\n   }\n\n   get isMarkAsFlashAvailable(): boolean {\n      if (!this.areAllItemsMarkedTheSame()) {\n         return true;\n      }\n\n      return !this.getFirstEligibleItem().markedAsFlash;\n   }\n\n   get isMarkAsHddAvailable(): boolean {\n      if (!this.areAllItemsMarkedTheSame()) {\n         return true;\n      }\n\n      return this.getFirstEligibleItem().markedAsFlash;\n   }\n\n   areAllItemsMarkedTheSame(): boolean {\n      const markedAsSsd: boolean = this.getFirstEligibleItem().markedAsFlash;\n      let areAllTheSame: boolean = true;\n      for (const disk of this.eligibleDisksInDatastoreContext) {\n         if (markedAsSsd !== disk.markedAsFlash) {\n            areAllTheSame = false;\n            break;\n         }\n      }\n\n      return areAllTheSame;\n   }\n\n   private getFirstEligibleItem(): VsanDiskListItem {\n      return this.eligibleDisksInDatastoreContext[0] as VsanDiskListItem;\n   }\n\n   /**\n    * Calculates the host field for a bunch of disks. Used for nodes combining\n    * multiple disks from different hosts where the 'host' property is needed.\n    * The result could be something like:\n    *  == If homogeneous distribution ==\n    *     X disk(s) on Y host(s)\n    *  == If heterogeneous distribution ==\n    *     Mixed distribution\n    */\n   private getVendorHostLabel(disks: VsanDiskListItem[]): string {\n      const disksPerHosts: Map<string, number> = this.getDisksPerHosts(disks);\n      return this.isMixedMode(disksPerHosts)\n            ? this.getHeterogeneousDistributionLabel()\n            : this.getHomogeneousDistributionLabel(disksPerHosts);\n   }\n\n   private getDisksPerHosts(disks: VsanDiskListItem[]): Map<string, number> {\n      const disksPerHosts: Map<string, number> = new Map<string, number>();\n\n      if (VsanUiUtils.isEmpty(disks)) {\n         return disksPerHosts;\n      }\n\n      disks.forEach(disk => {\n         if (!disksPerHosts.has(disk.hostName)) {\n            disksPerHosts.set(disk.hostName, 0);\n         }\n         disksPerHosts.set(disk.hostName, disksPerHosts.get(disk.hostName) + 1);\n      });\n\n      return disksPerHosts;\n   }\n\n   private isMixedMode(disksPerHosts: Map<string, number>): boolean {\n      return disksPerHosts.size > 0\n            ? !Array.from(disksPerHosts.values()).every((val, i, arr) => val === arr[0])\n            : false;\n   }\n\n   private getHeterogeneousDistributionLabel(): string {\n      return VsanUiUtils.getString(\"vsan.dialog.semiAutoClaimDialog.vendorHosts.mixedDistribution\");\n   }\n\n   private getHomogeneousDistributionLabel(disksPerHosts: Map<string, number>): string {\n      const numOfHosts: number = disksPerHosts.size;\n      const numDisksPerHost: number = numOfHosts > 0 ? disksPerHosts.values().next().value : 0;\n      const labelKey: string = this.getHomogeneousDistributionLabelKey(numOfHosts, numDisksPerHost);\n      return VsanUiUtils.getString(labelKey, numDisksPerHost, numOfHosts);\n   }\n\n   private getHomogeneousDistributionLabelKey(numOfHosts: number, numDisksPerHost: number): string {\n      if (numDisksPerHost === 1) {\n         return numOfHosts === 1\n               ? \"vsan.dialog.semiAutoClaimDialog.vendorHosts.formatOneDisksOneHost\"\n               : \"vsan.dialog.semiAutoClaimDialog.vendorHosts.formatOneDiskMultiHosts\";\n      } else {\n         return numOfHosts === 1\n               ? \"vsan.dialog.semiAutoClaimDialog.vendorHosts.formatMultiDisksOneHost\"\n               : \"vsan.dialog.semiAutoClaimDialog.vendorHosts.formatMultiDisksMultiHosts\";\n      }\n   }\n}\n","\nexport interface QueryUtil {\n\n} //class QueryUtil\n\nexport module QueryUtil{\nexport function VC_CLUSTERS_PROPERTY(): string {\n   return \"allClusters\";\n}\n\nexport function SERVER_GUID_PROPERTY(): string {\n   return \"serverGuid\";\n}\n\nexport function NAME_PROPERTY(): string {\n   return \"name\";\n}\n\nexport function PRIMARY_ICON_ID_PROPERTY(): string {\n   return \"primaryIconId\";\n}\n\nexport function CLUSTER_PROPERTY(): string {\n   return \"cluster\";\n}\n\nexport function CLUSTER_HOST_PROPERTY(): string {\n   return \"host\";\n}\n\nexport function VM_PROPERTY(): string {\n   return \"vm\";\n}\n\nexport function HAS_PRIVILEGES(): string {\n   return \"hasPrivileges\";\n}\n\nexport function VM_COUNT_PROPERTY(): string {\n   return \"vm._length\";\n}\n\nexport function RESOURCE_POOL_PROPERTY(): string {\n   return \"resourcePool\";\n}\n\nexport function RESOURCE_POOL_OWNER_PROPERTY(): string {\n   return \"owner\";\n}\n\nexport function DATASTORE_PROPERTY(): string {\n   return \"datastore\";\n}\n\nexport function CLUSTER_HOST_COUNT_PROPERTY(): string {\n   return \"host._length\";\n}\n\nexport function HOST_VSAN_NODE_UUID_PROPERTY(): string {\n   return \"config.vsanHostConfig.clusterInfo.nodeUuid\";\n}\n\nexport function HOST_CONNECTION_STATE_PROPERTY(): string {\n   return \"runtime.connectionState\";\n}\n\nexport function HOST_MAINTENANCE_MODE_PROPERTY(): string {\n   return \"runtime.inMaintenanceMode\";\n}\n\nexport function HOST_QUARANTINE_MODE_PROPERTY(): string {\n   return \"runtime.inQuarantineMode\";\n}\n\nexport function HOST_VSAN_RUNTIME_INFO(): string {\n   return \"runtime.vsanRuntimeInfo\";\n}\n\nexport function WITNESS_HOST_RELATION(): string {\n   return \"witnessHost\";\n}\n\nexport function IS_WITNESS_HOST_PROPERTY(): string {\n   return \"isWitnessHost\";\n}\n\nexport function IS_WITNESS_VLCM_PROPERTY(): string {\n   return \"isVsanWitnessLifecycleManaged\";\n}\n\nexport function ALL_VSAN_HOSTS_RELATION(): string {\n   return \"allVsanHosts\";\n}\n\nexport function VSAN_PHYSICAL_DISK_VIRTUAL_MAPPING(): string {\n   return \"vsanPhysicalDiskVirtualMapping\";\n}\n\nexport function VSAN_HOST_STORAGE_ADAPTER_DEVICES(): string {\n   return \"vsanStorageAdapterDevices\";\n}\n\nexport function VM_DEVICES_PROPERTY(): string {\n   return \"config.hardware.device\";\n}\n\nexport function VM_NAMESPACE_CAPABILITY_METADATA(): string {\n   return \"namespaceCapabilityMetadata\";\n}\n\nexport function VM_PATH_NAME(): string {\n   return \"summary.config.vmPathName\";\n}\n\nexport function VM_HOST(): string {\n   return \"summary.runtime.host\";\n}\n\nexport function VM_VSAN_NODE_UUID_PROPERTY(): string {\n   return \"config.instanceUuid\";\n}\n\nexport function VSAN_ENABLED_PROPERTY(): string {\n   return \"configurationEx[@type='ClusterConfigInfoEx'].vsanConfigInfo.enabled\";\n}\n\nexport function HOST_VERSION_PROPERTY(): string {\n   return \"config.product.version\";\n}\n\nexport function HOST_VSAN_CONFIG_PROPERTY(): string {\n   return \"config.vsanHostConfig\";\n}\n\nexport function HOST_VSAN_ENABLED_PROPERTY(): string {\n   return \"config.vsanHostConfig.enabled\";\n}\n\nexport function VSAN_DISK_VERSION_PROPERTY_NAME(): string {\n   return \"vsanDiskVersionsData\";\n}\n\nexport function CLUSTER_VSAN_CONFIG_UUID_PROPERTY(): string {\n   return \"configurationEx[@type='ClusterConfigInfoEx'].vsanConfigInfo.defaultConfig.uuid\";\n}\n\nexport function CLUSTER_HA_ENABLED_PROPERTY(): string {\n   return \"configurationEx[@type='ClusterConfigInfoEx'].dasConfig.enabled\";\n}\n\nexport function CLUSTER_DPM_ENABLED_PROPERTY(): string {\n   return \"configurationEx[@type='ClusterConfigInfoEx'].dpmConfigInfo.enabled\";\n}\n\nexport function CLUSTER_DRS_ENABLED(): string {\n   return \"configuration.drsConfig\";\n}\n\nexport function VM_STORAGE_OBJECT_ID_PROPERTY(): string {\n   return \"config.vmStorageObjectId\";\n}\n\nexport function IS_POD_VM(): string {\n   return \"isPodVM\";\n}\n\nexport function DATASTORE_TYPE_PROPERTY(): string {\n   return \"summary.type\";\n}\n\nexport function DATASTORE_URL(): string {\n   return \"summary.url\";\n}\n\nexport function DATACENTER_RELATION(): string {\n   return \"dc\";\n}\n\nexport function DATASTORE_HOST_MOUNTS(): string {\n   return \"host\";\n}\n\nexport function DATASTORE_SUMMARY(): string {\n   return \"summary\";\n}\n\nexport function DATASTORE_SUMMARY_CAPACITY(): string {\n   return \"summary.capacity\";\n}\n\nexport function DATASTORE_SUMMARY_FREE_SPACE(): string {\n   return \"summary.freeSpace\";\n}\n\nexport function DATASTORE_CONTAINER_ID(): string {\n   return \"info.containerId\";\n}\n\nexport function DATASTORE_SERVER_HOSTS(): string {\n   return \"serverHosts\";\n}\n\nexport function PREFERRED_FD_PROPERTY(): string {\n   return \"preferredFaultDomain\";\n}\n\nexport function HOST_FAULT_DOMAIN(): string {\n   return \"config.vsanHostConfig.faultDomainInfo.name\";\n}\n\nexport function VM_IS_TEMPLATE(): string {\n   return \"config.template\";\n}\n\nexport function VM_POWER_STATE(): string {\n   return \"powerState\";\n}\n\nexport function VM_SWAP_STORAGE_OBJECT_ID(): string {\n   return \"config.swapStorageObjectId\";\n}\n\nexport function WCP_NAMESPACE(): string {\n   return \"workload\";\n}\n\nexport function TANZU_KUBERNETES_CLUSTER(): string {\n   return \"com.vmware.wcp.TanzuKubernetesCluster\";\n}\n\nexport function PARENT_PROPERTY(): string {\n   return \"parent\";\n}\n\nexport function VIRTUAL_NIC_PROPERTY(): string {\n   return \"config.network.vnic\";\n}\n\nexport function HOST_PNIC(): string {\n   return \"config.network.pnic\";\n}\n\nexport function HOST_PORTGROUP(): string {\n   return \"config.network.portgroup\";\n}\n\nexport function HOST_PROXY_SWITCH(): string {\n   return \"config.network.proxySwitch\";\n}\n\nexport function HOST_OPAQUE_NETWORK(): string {\n   return \"config.network.opaqueNetwork\";\n}\n\nexport function HOST_OPAQUE_SWITCH(): string {\n   return \"config.network.opaqueSwitch\";\n}\n\nexport function NETWORK_PROPERTY(): string {\n   return \"network\";\n}\n\nexport function ACTIVE_UPLINK_PORT_PROPERTY(): string {\n   return \"config.defaultPortConfig.uplinkTeamingPolicy.uplinkPortOrder.activeUplinkPort\";\n}\n\nexport function DISTRIBUTED_VIRTUAL_SWITCH_PROPERTY(): string {\n   return \"config.distributedVirtualSwitch\";\n}\n\nexport function HOST_VSANCONFIG_DISK_MAPPING_PROPERTY(): string {\n   return \"config.vsanHostConfig.storageInfo.diskMapping\";\n}\n\nexport function VSAN_HOST_CONFIG_NETWORKINFO_PORT_PROPERTY(): string {\n   return \"config.vsanHostConfig.networkInfo.port\";\n}\n\nexport function PMEM_STORAGE_UUID(): string {\n   return \"info.pmem.uuid\";\n}\n\nexport function PMEM_STORAGE_STATUS(): string {\n   return \"overallStatus\";\n}\n\nexport function IS_CLUSTER_VM_PROPERTY(): string {\n   return \"isClusterVM\";\n}\n\nexport class Factory {\n\n   static create = (): QueryUtil => {\n      return { };\n   }\n\n\n} //class Factory\n\n} //module QueryUtil\n","/* Copyright 2017-2022 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {ClaimRootListItem} from \"@component/diskmgmt/model/claim-root-list-item.data\";\nimport {ClaimedDisksData} from \"@component/diskmgmt/model/claimed-disks-data\";\nimport {VsanPmemStorageListItem} from \"@component/diskmgmt/model/vsan-pmem-storage-list-item\";\nimport {ClaimOption} from \"@generated/claim-option\";\nimport {ClaimedDisksSummary} from \"@generated/claimed-disks-summary\";\nimport {DatastoreType} from \"@generated/datastore-type\";\nimport {QueryUtil} from \"@generated/query-util\";\nimport {VsanClaimDisksData} from \"@generated/vsan-claim-disks-data\";\nimport {VsanDiskClaimSpec} from \"@generated/vsan-disk-claim-spec\";\nimport {ManagedObject} from \"@service/managed-object\";\nimport {DiskMgmtDiskUtil} from \"@util/disk-mgmt-disk.util\";\nimport {DiskMgmtUtil} from \"@util/disk-mgmt.util\";\nimport {Icon} from \"@util/icon\";\nimport {MapUtil} from \"@util/map-util\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {VsanDiskListItem} from \"./vsan-disk-list-item\";\nimport {VsanDisksTransportTypeData} from \"./vsan-disks-transport-type.data\";\n\nexport class ClaimHostListItem extends ClaimRootListItem {\n\n   private _hostMor: ManagedObject;\n   private _numberSsdDisks: number = 0;\n   private _numberDataDisks: number = 0;\n   private _deviceTransportData: VsanDisksTransportTypeData;\n   private _infoText: string;\n   private _allFlashDiskGroupExist: boolean = false;\n   private _numSelectedCacheDisks: number = 0;\n   private _numSelectedSsdDataDisks: number = 0;\n   private _numSelectedHddDataDisks: number = 0;\n   private _isValidConfiguration: boolean = true;\n   // TODO [tdardzhonov] make capacity and cache disks to use that map\n   private _claimedDisksSummary: Map<ClaimOption, ClaimedDisksData>;\n\n   private _claimedCapacity: number = 0;\n   private _claimedCache: number = 0;\n\n   private _hybridDiskGroupExist: boolean = false;\n   private _isAllFlashSupported: boolean = false;\n\n   eligiblePmemStorage: VsanPmemStorageListItem[];\n\n   primaryIconId: string;\n   version: string;\n\n   constructor(properties: any[], claimingData: VsanClaimDisksData, useRecommendedClaimOptions: boolean) {\n      super();\n\n      for (const property of properties) {\n         switch (property.propertyName) {\n            case QueryUtil.NAME_PROPERTY():\n               this.name = property.value;\n               this.hostMor = ManagedObject.create(\n                     property.resourceObject.type,\n                     property.resourceObject.value,\n                     property.resourceObject.serverGuid);\n               this.updateAllEligibleDisksHostName();\n               break;\n            case QueryUtil.HOST_VERSION_PROPERTY():\n               this.version = property.value;\n               break;\n            case QueryUtil.PRIMARY_ICON_ID_PROPERTY():\n               this.primaryIconId = property.value;\n               break;\n            case QueryUtil.VSAN_HOST_STORAGE_ADAPTER_DEVICES():\n               const transportTypeData: VsanDisksTransportTypeData = new VsanDisksTransportTypeData();\n               transportTypeData.storageAdapterDevices = property.value;\n               this.deviceTransportData = transportTypeData;\n               break;\n         }\n      }\n\n      this.setClaimingData(claimingData, useRecommendedClaimOptions);\n   }\n\n   get hostMor(): ManagedObject {\n      return this._hostMor;\n   }\n\n   set hostMor(value: ManagedObject) {\n      this._hostMor = value;\n   }\n\n   get claimedCapacity(): number {\n      return this._claimedCapacity;\n   }\n\n   set claimedCapacity(value: number) {\n      this._claimedCapacity = value;\n   }\n\n   get claimedCache(): number {\n      return this._claimedCache;\n   }\n\n   set claimedCache(value: number) {\n      this._claimedCache = value;\n   }\n\n   get hybridDiskGroupExist(): boolean {\n      return this._hybridDiskGroupExist;\n   }\n\n   /**\n    * Flag indicating whether all flash feature is supported.\n    */\n   get isAllFlashSupported(): boolean {\n      return this._isAllFlashSupported;\n   }\n\n   /**\n    * Set the host's name\n    */\n   set name(value: string) {\n      this._name = value;\n   }\n\n   /**\n    * Gets the host's name\n    */\n   get name(): string {\n      if (this._infoText) {\n         return VsanUiUtils.getString(\"vsan.dialog.semiAutoClaimDialog.nameFormatted\", this._name, this._infoText);\n      }\n      return this._name;\n   }\n\n   private setClaimingData(data: VsanClaimDisksData, useRecommendedClaimOptions: boolean): void {\n      this._claimedDisksSummary = new Map<ClaimOption, ClaimedDisksData>();\n\n      if (data != null) {\n         const disks: VsanDiskListItem[] = [];\n         for (const diskData of data.notInUseDisks) {\n            const diskItem: VsanDiskListItem =\n                  new VsanDiskListItem(diskData, useRecommendedClaimOptions, data.isAllFlashAvailable);\n            diskItem.hostName = this._name;\n            diskItem.hostMor = this.hostMor;\n            disks.push(diskItem);\n         }\n\n         this.eligibleDisks = disks;\n\n         this._isAllFlashSupported = data.isAllFlashAvailable;\n         this._numberDataDisks = data.numNotInUseDataDisks;\n         this._numberSsdDisks = data.numNotInUseSsdDisks;\n         this._hybridDiskGroupExist = data.hybridDiskGroupExist;\n         this._allFlashDiskGroupExist = data.allFlashDiskGroupExist;\n         this._claimedCapacity = data.claimedCapacity;\n         this._claimedCache = data.claimedCache;\n\n         this.eligiblePmemStorage = data.notInUsePmemStorage\n               .map(storage => new VsanPmemStorageListItem(storage, this._name, this.hostMor));\n\n         this.initializeManagedByVsanSummary(data.claimedDisksSummary);\n         this.populateDisksTransportType();\n      } else {\n         this.eligibleDisks = null;\n      }\n      this.populateInfoText();\n   }\n\n   private updateAllEligibleDisksHostName(): void {\n      if (!this.eligibleDisks) {\n         return;\n      }\n\n      for (const disk of this.eligibleDisks) {\n         disk.hostName = this._name;\n      }\n   }\n\n   /**\n    * Sets the transport data for the disks.\n    */\n   set deviceTransportData(values: VsanDisksTransportTypeData) {\n      this._deviceTransportData = values;\n      this.populateDisksTransportType();\n   }\n\n   /**\n    * Sets the transport type of each eligible disk item.\n    */\n   private populateDisksTransportType(): void {\n      if (this.eligibleDisks && this._deviceTransportData) {\n         for (const item of this.eligibleDisks) {\n            item.transport = this._deviceTransportData.getDeviceTransport(item.diskUuid);\n            item.diskAdapter = this._deviceTransportData.getDeviceAdapter(item.diskUuid);\n         }\n      }\n   }\n\n   get possibleClaimOptions(): ClaimOption[] {\n      const claimOptions: ClaimOption[] = [ClaimOption.Custom, ClaimOption.DoNotClaim];\n\n      if (this.contextDatastoreType === DatastoreType.VSAN_DIRECT) {\n         claimOptions.push(ClaimOption.VMFS);\n      }\n\n      return claimOptions;\n   }\n\n   get image(): string {\n      return this._isValidConfiguration\n            ? this.primaryIconId\n            : Icon.HOST_ERROR;\n   }\n\n   get numSelectedStorageHDDs(): number {\n      return this._numSelectedHddDataDisks;\n   }\n\n   get numSelectedStorageSSDs(): number {\n      return this._numSelectedSsdDataDisks;\n   }\n\n   get numSelectedCacheDisks(): number {\n      return this._numSelectedCacheDisks;\n   }\n\n   get numSelectedManagedByVsanDisks(): number {\n      return MapUtil.sum(\n            this._claimedDisksSummary,\n            (summary) => summary.newClaimedDisksCount);\n   }\n\n   getManagedByVsanClaimedSpace(): number {\n      return MapUtil.sum(\n            this._claimedDisksSummary,\n            (summary) => summary.newClaimedCapacity);\n   }\n\n   getClaimOptionSummary(claimOption: ClaimOption): ClaimedDisksData {\n      if (this._claimedDisksSummary.has(claimOption)) {\n         return this._claimedDisksSummary.get(claimOption);\n      } else {\n         return null;\n      }\n   }\n\n   get numSelectedDisks(): number {\n      return this.numSelectedCacheDisks + this.numSelectedStorageHDDs + this.numSelectedStorageSSDs;\n   }\n\n   /**\n    * Gets an error text when the host configuration is invalid\n    */\n   retrieveConfigErrorText(): string {\n      return this.retrieveConfigErrorTextInt();\n   }\n\n   private retrieveConfigErrorTextInt(): string {\n      // Cannot create/edit all-flash and hybrid groups at the same time\n      if (this._numSelectedHddDataDisks !== 0 && this._numSelectedSsdDataDisks !== 0) {\n         if ((this._hybridDiskGroupExist || this._allFlashDiskGroupExist) && this._numSelectedCacheDisks === 0) {\n            // edit\n            return VsanUiUtils.getString(\"vsan.dialog.semiAutoClaimDialog.confError.mixedStorageDisks.edit\", this.name);\n         }\n\n         return VsanUiUtils.getString(\"vsan.dialog.semiAutoClaimDialog.confError.mixedStorageDisks.create\", this.name);\n      }\n\n      const hybridSelection: boolean = this._numSelectedHddDataDisks !== 0;\n      const numSelectedDataDisks: number =\n            hybridSelection\n                  ? this._numSelectedHddDataDisks\n                  : this._numSelectedSsdDataDisks;\n\n      if (this._numSelectedCacheDisks === 0 && numSelectedDataDisks === 0) {\n         // no error\n         return \"\";\n      }\n\n      if (numSelectedDataDisks === 0) {\n         return VsanUiUtils.getString(\"vsan.dialog.semiAutoClaimDialog.confError.noDataDisk\", this.name);\n      }\n\n      if (this._numSelectedCacheDisks === 0) {\n         if ((this._hybridDiskGroupExist && hybridSelection) ||\n               (this._allFlashDiskGroupExist && !hybridSelection)) {\n            // no error\n            return \"\";\n         }\n\n         return VsanUiUtils.getString(\"vsan.dialog.semiAutoClaimDialog.confError.noSsd\", this.name);\n      }\n\n      if (this._numSelectedCacheDisks > numSelectedDataDisks) {\n         return VsanUiUtils.getString(\"vsan.dialog.semiAutoClaimDialog.confError.moreSsd\", this.name);\n      }\n\n      // no error\n      return \"\";\n   }\n\n   capacityFor(claimOption: ClaimOption): number {\n      if (!this.eligibleDisks) {\n         return 0;\n      }\n\n      let capacity: number = 0;\n      for (const disk of this.eligibleDisks) {\n         if (disk.claimOption === claimOption) {\n            capacity += DiskMgmtUtil.lbaToBytes(disk.disk.capacity);\n         }\n      }\n      return capacity;\n   }\n\n   get unclaimedStorage(): number {\n      let capacity: number = 0;\n\n      if (this.eligibleDisks) {\n         this.eligibleDisks.forEach((disk) => capacity += DiskMgmtUtil.lbaToBytes(disk.disk.capacity));\n      }\n\n      if (this.eligiblePmemStorage) {\n         this.eligiblePmemStorage.forEach((storage) => capacity += storage.capacityNum);\n      }\n\n      return capacity;\n   }\n\n   updateDisksData(): void {\n      this._numSelectedCacheDisks = 0;\n      this._numSelectedHddDataDisks = 0;\n      this._numSelectedSsdDataDisks = 0;\n      this.resetClaimedDisksInManagedByVsanSummary();\n\n      if (this.eligibleDisks) {\n         for (const disk of this.eligibleDisks) {\n            const claimOption: ClaimOption =\n                  DiskMgmtDiskUtil.MANAGED_BY_VSAN_CLAIM_OPTIONS.find((co: ClaimOption) => co === disk.claimOption);\n            if (claimOption) {\n               this.addDiskToManagedByVsanClaimOption(disk.capacityNum, claimOption);\n            } else if (disk.claimOption === ClaimOption.ClaimForCache) {\n               this._numSelectedCacheDisks++;\n            } else if (disk.claimOption === ClaimOption.ClaimForStorage) {\n               if (disk.markedAsFlash) {\n                  this._numSelectedSsdDataDisks++;\n               } else {\n                  this._numSelectedHddDataDisks++;\n               }\n            }\n         }\n      }\n\n      if (this.eligiblePmemStorage) {\n         for (const storage of this.eligiblePmemStorage) {\n            const claimOption: ClaimOption =\n                  DiskMgmtDiskUtil.MANAGED_BY_VSAN_CLAIM_OPTIONS.find((co: ClaimOption) => co === storage.claimOption);\n            if (claimOption) {\n               this.addDiskToManagedByVsanClaimOption(storage.capacityNum, claimOption);\n            }\n         }\n      }\n\n      // Update the flag responsible for the icon\n      this._isValidConfiguration = !this.retrieveConfigErrorTextInt();\n   }\n\n   get isEditGroupOperation(): boolean {\n      return this.numSelectedCacheDisks === 0 &&\n            ((this.numSelectedStorageHDDs > 0 && this._hybridDiskGroupExist) ||\n                  (this.numSelectedStorageSSDs > 0 && this._allFlashDiskGroupExist));\n   }\n\n   get isCreateGroupOperation(): boolean {\n      return this.numSelectedCacheDisks > 0 &&\n            (this.numSelectedStorageHDDs > 0 || this.numSelectedStorageSSDs > 0);\n   }\n\n   /**\n    * Populates the host's info text\n    */\n   private populateInfoText(): void {\n      if (this._hybridDiskGroupExist || this._allFlashDiskGroupExist) {\n         this._infoText = \"\";\n         const diskGroupExistText: string = VsanUiUtils.getString(\"vsan.dialog.semiAutoClaimDialog.diskGroup\");\n\n         if (this._numberSsdDisks === 0 && this._numberDataDisks === 0) {\n            this._infoText = VsanUiUtils.getString(\"vsan.dialog.semiAutoClaimDialog.diskGroup.noDisks\");\n         }\n\n         if (!this._infoText) {\n            this._infoText = diskGroupExistText;\n         }\n      } else {\n         if (this._numberSsdDisks === 0 && this._numberDataDisks === 0) {\n            this._infoText = VsanUiUtils.getString(\"vsan.dialog.semiAutoClaimDialog.hostError.noDisk\");\n         } else if (this._numberSsdDisks === 0) {\n            this._infoText = VsanUiUtils.getString(\"vsan.dialog.semiAutoClaimDialog.hostError.noSsd\");\n         }\n      }\n   }\n\n   getHostDisksToClaim(): VsanDiskClaimSpec[] {\n      const diskSpecs: VsanDiskClaimSpec[] = [];\n\n      if (this.eligibleDisks) {\n         this.eligibleDisks.forEach((disk) => {\n            if (disk.claimOption !== ClaimOption.DoNotClaim) {\n               diskSpecs.push(VsanDiskClaimSpec.Factory.create(disk.disk, disk.claimOption, disk.markedAsFlash));\n            }\n         });\n      }\n\n      if (this.eligiblePmemStorage) {\n         this.eligiblePmemStorage.forEach((pmemStorage) => {\n            if (pmemStorage.claimOption !== ClaimOption.DoNotClaim) {\n               diskSpecs.push(VsanDiskClaimSpec.Factory.create(null, pmemStorage.claimOption, false));\n            }\n         });\n      }\n\n      return diskSpecs;\n   }\n\n   get availableDatastoreTypes(): DatastoreType[] {\n      const isEligibleForVsan: boolean = !VsanUiUtils.isEmpty(this.eligibleDisks) &&\n            this.eligibleDisks.some(\n                  disk => disk.possibleClaimOptions.some(\n                        claimOption => DiskMgmtDiskUtil.VSAN_CLAIM_OPTIONS.includes(claimOption)));\n\n      const isEligibleForVsanDirect: boolean = !VsanUiUtils.isEmpty(this.eligibleDisks) &&\n            this.eligibleDisks.some(\n                  disk => disk.possibleClaimOptions.some(\n                        claimOption => DiskMgmtDiskUtil.VSAN_DIRECT_CLAIM_OPTIONS.includes(claimOption)));\n\n      const isEligibleForPmem: boolean = !VsanUiUtils.isEmpty(this.eligiblePmemStorage);\n\n      return [\n         isEligibleForVsan\n               ? DatastoreType.VSAN\n               : null,\n         isEligibleForVsanDirect\n               ? DatastoreType.VSAN_DIRECT\n               : null,\n         isEligibleForPmem\n               ? DatastoreType.PMEM\n               : null,\n      ].filter(datastoreType => datastoreType != null);\n   }\n\n   private initializeManagedByVsanSummary(claimedDisksSummary: ClaimedDisksSummary[]): void {\n      for (const claimOption of DiskMgmtDiskUtil.MANAGED_BY_VSAN_CLAIM_OPTIONS) {\n         const newSummary: ClaimedDisksData = new ClaimedDisksData();\n         const hostClaimOptionSummary: ClaimedDisksSummary = claimedDisksSummary\n               ? claimedDisksSummary.find(summary => summary.claimOption === claimOption)\n               : null;\n\n         if (hostClaimOptionSummary) {\n            newSummary.oldClaimedDisksCount = hostClaimOptionSummary.claimedDisksCount;\n            newSummary.oldClaimedCapacity = hostClaimOptionSummary.claimedCapacity;\n         }\n\n         this._claimedDisksSummary.set(claimOption, newSummary);\n      }\n   }\n\n   private resetClaimedDisksInManagedByVsanSummary(): void {\n      MapUtil.forEach(this._claimedDisksSummary, (summary) => {\n         summary.newClaimedDisksCount = 0;\n         summary.newClaimedCapacity = 0;\n      });\n   }\n\n   private addDiskToManagedByVsanClaimOption(capacity: number, claimOption: ClaimOption): void {\n      this._claimedDisksSummary.get(claimOption).newClaimedDisksCount += 1;\n      this._claimedDisksSummary.get(claimOption).newClaimedCapacity += capacity;\n   }\n}\n","/* Copyright 2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Directive, ElementRef} from \"@angular/core\";\nimport {FocusTrapFactory} from \"@angular/cdk/a11y\";\n/**\n * Attribute directive for enabling focus trap on element when it's rendered.\n */\n@Directive({\n   selector: \"[vsan-focus-trap]\",\n})\nexport class FocusTrapDirective {\n   constructor(private el: ElementRef, private focusTrap: FocusTrapFactory) {\n   }\n\n   ngAfterViewInit(): void {\n      this.focusTrap.create(this.el.nativeElement).focusInitialElement();\n   }\n}","<!--Copyright 2020 VMware, Inc. All rights reserved. -- VMware Confidential-->\n<div id=\"used-capacity-overview\">\n   <span id=\"used-overall-label\">{{usedCapacityLabel}}</span>\n   <span id=\"free-label\">{{freeCapacityLabel}}</span>\n</div>\n<vsan-capacity-bar-chart id=\"capacity-overview-bar-chart\"\n                         [sections]=\"capacitySections\"\n                         [total]=\"totalCapacity\"\n                         (hoverBarChart)=\"hoveredSeries=$event\">\n</vsan-capacity-bar-chart>\n<vsan-capacity-legend id=\"capacity-legend\"\n                      [chartSectionData]=\"capacitySections\"\n                      [used]=\"usedOverallCapacity\"\n                      [total]=\"totalCapacity\"\n                      [hoveredSeries]=\"hoveredSeries\">\n</vsan-capacity-legend>","/* Copyright 2020-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\n\n/**\n * Claimed disk count and claimed disk space for a single claim option (old and new).\n */\nexport class ClaimedDisksData {\n   oldClaimedDisksCount: number = 0;\n   oldClaimedCapacity: number = 0;\n   newClaimedDisksCount: number = 0;\n   newClaimedCapacity: number = 0;\n}","<!-- Copyright (c) 2021-2022 VMware, Inc. All Rights Reserved. -->\n<div class=\"clr-row\">\n   <vsan-disks-group-by-perspective\n         class=\"clr-offset-8 clr-col-4\"\n         (changePerspective)=\"changePerspective($event)\">\n   </vsan-disks-group-by-perspective>\n</div>\n\n<!-- Eligible Disks List -->\n<clr-datagrid [clrDgLoading]=\"datagridLoading\" class=\"datagrid-compact\">\n   <!-- Datagrid Header -->\n   <clr-dg-column class=\"name-column\">\n      <vsan-tree-column [dataField]=\"'name'\"\n                        [dataProvider]=\"datagrid\"\n                        [filterObject]=\"nameFilter\"\n                        [title]=\"ClaimDisksUtil.getNameColumnTitle(groupByPerspective)\">\n      </vsan-tree-column>\n   </clr-dg-column>\n   <clr-dg-column class=\"compatibility-column\">\n      <vsan-tree-column [dataField]=\"'isVsanMaxCompatible'\"\n                        [dataProvider]=\"datagrid\"\n                        [filterObject]=\"isVsanMaxCompatibleFilter\"\n                        [title]=\"'vsan.disk.list.isVsanMaxCompatible' | localized\">\n      </vsan-tree-column>\n   </clr-dg-column>\n   <clr-dg-column class=\"claim-column\">\n      {{\"vsan.disk.list.claimFor.vsanMax\" | localized}}\n   </clr-dg-column>\n   <clr-dg-column>\n      <vsan-tree-column [dataField]=\"'driveTypeLabel'\"\n                        [dataProvider]=\"datagrid\"\n                        [filterObject]=\"driveTypeFilter\"\n                        [title]=\"'vsan.disk.list.driveType' | localized\">\n      </vsan-tree-column>\n   </clr-dg-column>\n   <clr-dg-column *ngIf=\"groupByPerspective == DisksGroupByPerspective.DISKS_BY_HOST\">\n      <vsan-tree-column [dataField]=\"'capacity'\"\n                        [dataProvider]=\"datagrid\"\n                        [filterObject]=\"totalCapacityFilter\"\n                        [title]=\"'vsan.disk.list.totalCapacity' | localized\">\n      </vsan-tree-column>\n   </clr-dg-column>\n   <clr-dg-column *ngIf=\"groupByPerspective == DisksGroupByPerspective.DISKS_BY_VENDOR\">\n      <vsan-tree-column [dataField]=\"'hostName'\"\n                        [dataProvider]=\"datagrid\"\n                        [filterObject]=\"hostNameFilter\"\n                        [title]=\"'vsan.disk.list.host' | localized\">\n      </vsan-tree-column>\n   </clr-dg-column>\n   <clr-dg-column *ngIf=\"isStandalone\">\n      <vsan-tree-column [dataField]=\"'transportType'\"\n                        [dataProvider]=\"datagrid\"\n                        [filterObject]=\"transportTypeFilter\"\n                        [title]=\"'vsan.disk.list.transportType' | localized\">\n      </vsan-tree-column>\n   </clr-dg-column>\n   <clr-dg-column *ngIf=\"isStandalone\">\n      <vsan-tree-column [dataField]=\"'diskAdapter'\"\n                        [dataProvider]=\"datagrid\"\n                        [filterObject]=\"diskAdapterFilter\"\n                        [title]=\"'vsan.disk.list.diskAdapter' | localized\">\n      </vsan-tree-column>\n   </clr-dg-column>\n   <!-- Datagrid Content -->\n   <clr-dg-row *clrDgItems=\"let row of datagrid.rows\"\n               [class.datagrid-selected]=\"isRowSelected(row)\"\n               (click)=\"selectTarget(row, $event)\">\n      <clr-dg-cell vsan-show-title class=\"name-column\">\n         <vsan-expand [row]=\"row\"></vsan-expand>\n         <clr-icon [attr.shape]=\"row.data.image\"></clr-icon>\n         <span>{{row.data.name}}</span>\n      </clr-dg-cell>\n      <clr-dg-cell class=\"compatibility-column\">\n         <vsan-icon-item *ngIf=\"getIsVsanMaxCompatibleLabel(row.data)\"\n                         [isIconSolid]=\"true\"\n                         [shape]=\"getIsVsanMaxCompatibleIconShape(row.data)\"\n                         [iconClass]=\"getIsVsanMaxCompatibleIconClass(row.data)\"\n                         [label]=\"getIsVsanMaxCompatibleLabel(row.data)\">\n         </vsan-icon-item>\n      </clr-dg-cell>\n      <clr-dg-cell class=\"claim-column centered-content\">\n         <input name=\"claim-by-vsan-checkbox\"\n                type=\"checkbox\"\n                clrCheckbox\n                [checked]=\"row.data.claimOption === ClaimOption.SingleTier\"\n                (change)=\"toggleClaiming(row.data, $event.target)\"/>\n      </clr-dg-cell>\n      <clr-dg-cell class=\"text-nowrap\">\n         {{row.data.initialDriveType}}\n      </clr-dg-cell>\n      <clr-dg-cell *ngIf=\"groupByPerspective == DisksGroupByPerspective.DISKS_BY_HOST\" vsan-show-title>\n         {{row.data.capacity}}\n      </clr-dg-cell>\n      <clr-dg-cell *ngIf=\"groupByPerspective == DisksGroupByPerspective.DISKS_BY_VENDOR\"\n                   class=\"icon-name-container\"\n                   vsan-show-title>\n         <clr-icon *ngIf=\"getHostIcon(row.data)\" [attr.shape]=\"getHostIcon(row.data)\"></clr-icon>\n         <span>{{row.data.hostName}}</span>\n      </clr-dg-cell>\n      <clr-dg-cell *ngIf=\"isStandalone\">{{row.data.transportType}}</clr-dg-cell>\n      <clr-dg-cell *ngIf=\"isStandalone\">{{row.data.diskAdapter}}</clr-dg-cell>\n   </clr-dg-row>\n\n   <!-- Datagrid Footer -->\n   <clr-dg-footer>\n      <clr-dg-pagination [clrDgPageSize]=\"ClaimDisksUtil.DISKS_PER_DATAGRID_PAGE\">\n         {{footerLabel.getLabel(groupByPerspective)}}\n      </clr-dg-pagination>\n   </clr-dg-footer>\n</clr-datagrid>","/* Copyright 2017-2022 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, EventEmitter, Input, OnChanges, Output} from \"@angular/core\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {ClaimHostListItem} from \"./model/claim-host-list-item.data\";\nimport {DisksClaimingConfigInfo} from \"./model/disks-claiming-config-info.data\";\nimport {SpaceEfficiencyService} from \"@service/space-efficiency-service\";\nimport {AlertActionLink} from \"@component/validation/alert-action-link\";\nimport {ClaimOption} from \"@generated/claim-option\";\nimport {VsanConfigSpec} from \"@generated/vsan-config-spec\";\n\ninterface HostsClaimingOverview {\n   noDisksAreSelected: boolean;\n   hasMixedStorageDisks: boolean;\n   hasStorageHDDs: boolean;\n}\n\n@Component({\n   selector: \"vsan-validation-panel\",\n   templateUrl: \"validation-panel.html\",\n   styleUrls: [\"validation-panel.scss\"],\n})\nexport class ValidationPanelComponent implements OnChanges {\n\n   @Input()\n   vsanConfigSpec: VsanConfigSpec;\n\n   @Input()\n   disksClaimingConfigInfo: DisksClaimingConfigInfo;\n\n   @Input()\n   noSelectionIsError: boolean = true;\n\n   @Input()\n   hostsData: ClaimHostListItem[];\n\n   @Output()\n   isConfigAcceptable: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n   vsanErrors: string[] = [];\n   vsanWarnings: string[] = [];\n   issuesListOpened: boolean = false;\n\n   openIssueActionLink: AlertActionLink = {\n      label: VsanUiUtils.getString(\"vsan.dialog.semiAutoClaimDialog.showWarningDetails\"),\n      action: () => this.issuesListOpened = true,\n   };\n\n   constructor(private spaceEfficiencyService: SpaceEfficiencyService) {}\n\n   ngOnChanges(): void {\n      this.validate();\n   }\n\n   validate(): void {\n      if (!this.hostsData || !this.vsanConfigSpec) {\n         return;\n      }\n\n      this.resetValidationResult();\n      this.hostsData.forEach((host) => host.updateDisksData());\n      this.validateAndFillErrorsAndWarnings();\n      this.isConfigAcceptable.emit(!this.hasErrors);\n   }\n\n   private resetValidationResult(): void {\n      this.vsanErrors = [];\n      this.vsanWarnings = [];\n      this.disksClaimingConfigInfo.resetValidationResult();\n   }\n\n   private validateAndFillErrorsAndWarnings(): void {\n      this.validateDiskClaiming();\n      this.validateHostConfigs();\n      this.validateEligibleDisks();\n      if (this.vsanConfigSpec.isVsanMaxEnabled) {\n         this.validateVsanMaxDiskClaiming();\n      }\n\n      this.vsanErrors = Array.from(new Set(this.vsanErrors));\n      this.vsanWarnings = Array.from(new Set(this.vsanWarnings));\n   }\n\n   private getHostsClaimingOverview(): HostsClaimingOverview {\n      let numStorageSSDs: number = 0;\n      let numStorageHDDs: number = 0;\n      let numCacheSSDs: number = 0;\n      let numManagedByVsanDisks: number = 0;\n      let hasMixedStorageDisks: boolean = false;\n\n      for (const host of this.hostsData) {\n         numStorageHDDs += host.numSelectedStorageHDDs;\n         numStorageSSDs += host.numSelectedStorageSSDs;\n         numCacheSSDs += host.numSelectedCacheDisks;\n         numManagedByVsanDisks += host.numSelectedManagedByVsanDisks;\n         if (numStorageHDDs !== 0 && numStorageSSDs !== 0) {\n            hasMixedStorageDisks = true;\n            break;\n         }\n      }\n\n      return {\n         noDisksAreSelected: !numCacheSSDs && !numStorageHDDs && !numStorageSSDs && !numManagedByVsanDisks,\n         hasMixedStorageDisks: hasMixedStorageDisks,\n         hasStorageHDDs: numStorageHDDs > 0,\n      } as HostsClaimingOverview;\n   }\n\n   private validateDiskClaiming(): void {\n      const claims: HostsClaimingOverview = this.getHostsClaimingOverview();\n      if (claims.noDisksAreSelected) {\n         // At least one disk should be claimed.\n         if (this.noSelectionIsError) {\n            this.vsanErrors.push(VsanUiUtils.getString(\"vsan.dialog.semiAutoClaimDialog.noDisksSelected\"));\n         } else {\n            this.vsanWarnings.push(VsanUiUtils.getString(\"vsan.dialog.semiAutoClaimDialog.noDisksSelected\"));\n         }\n      } else if (claims.hasMixedStorageDisks) {\n         // No mixed disk group creation.\n         this.vsanErrors.push(VsanUiUtils.getString(\"vsan.dialog.semiAutoClaimDialog.confError.mixedStorageDisks\"));\n      } else if (this.spaceEfficiencyService.isOnlyAllFlashSupportedForClaimingDisks(\n          this.vsanConfigSpec.spaceEfficiencyConfig) && claims.hasStorageHDDs) {\n         // Only All-Flash disk groups in case of data efficiency.\n         this.vsanErrors.push(\n               VsanUiUtils.getString(\n                     \"vsan.dialog.semiAutoClaimDialog.confError.dataEfficiencyWithHdds\",\n                     this.spaceEfficiencyService.toLabel(this.vsanConfigSpec.spaceEfficiencyConfig)));\n      }\n   }\n\n   private validateHostConfigs(): void {\n      this.hostsData.forEach((hostItem) => {\n         const errorText: string = hostItem.retrieveConfigErrorText();\n         if (errorText) {\n            this.vsanErrors.push(errorText);\n         }\n      });\n   }\n\n   private validateEligibleDisks(): void {\n      const firstItem: ClaimHostListItem = this.hostsData.find((host) => host.hasEligibleDisks);\n      if (!firstItem) {\n         return;\n      }\n      // Get the data for the first host, to validate that all hosts are claiming the same amount /vSAN case only/\n      const numSelectedDisksPerHost: number = firstItem.numSelectedDisks;\n      const numSelectedDiskGroups: number = firstItem.numSelectedCacheDisks;\n      const createGroup: boolean = firstItem.isCreateGroupOperation;\n      const editGroup: boolean = firstItem.isEditGroupOperation;\n\n      this.hostsData.forEach((host) => {\n         if (!host.hasEligibleDisks) {\n            return;\n         }\n         if (numSelectedDisksPerHost !== host.numSelectedDisks ||\n               numSelectedDiskGroups !== host.numSelectedCacheDisks) {\n            // Add warning if the configuration is not optimum - not the same\n            // amount of disk groups is selected for creation or some host are\n            // claiming less disks than others)\n            this.disksClaimingConfigInfo.disksNotEquallySpread = true;\n            this.vsanWarnings.push(\n                  VsanUiUtils.getString(\"vsan.dialog.semiAutoClaimDialog.warning.notOptimumSelection\"));\n         }\n         if (createGroup !== host.isCreateGroupOperation && editGroup !== host.isEditGroupOperation) {\n            // Add warning that there is mixed mode - on some hosts\n            // new disk groups will be created and on others - capacity\n            // disks will be added to existing disk groups if any\n            // NOTE: In the calculation the hosts with no selected disks\n            // or hosts where there is no existing group where the\n            // capacity disks will be added (there is an error for this)\n            // are not taken into account.\n            this.disksClaimingConfigInfo.mixedDiskClaiming = true;\n            this.vsanWarnings.push(\n                  VsanUiUtils.getString(\"vsan.dialog.semiAutoClaimDialog.warning.mixedCreateEditMode\"));\n         }\n      });\n   }\n\n   private validateVsanMaxDiskClaiming(): void {\n      this.hostsData\n            .filter(host => host.eligibleDisks?.length)\n            .forEach((host) => {\n               const hasIncompatibleVsanMaxDisks: boolean = host.eligibleDisks\n                     .filter(disk => disk.claimOption === ClaimOption.SingleTier)\n                     .some(disk => !disk.isVsanMaxCompatible);\n               if (hasIncompatibleVsanMaxDisks) {\n                  this.vsanWarnings.push(VsanUiUtils.getString(\n                        \"vsan.dialog.semiAutoClaimDialog.warning.vsanMaxIncompatibleDisks\"));\n               }\n            });\n   }\n\n   get hasAggregatedIssue(): boolean {\n      return this.vsanErrors.length + this.vsanWarnings.length > 1;\n   }\n\n   get aggregatedIssueClass(): string {\n      return this.vsanErrors.length > 0 ? \"danger\" : \"warning\";\n   }\n\n   get hasErrors(): boolean {\n      return this.vsanErrors.length > 0;\n   }\n\n   get hasWarnings(): boolean {\n      return this.vsanWarnings.length > 0;\n   }\n}"]}