{"version":3,"sources":["./src/app/vsan/common/service/flow/error-handler.decorator.ts","./src/app/vsan/common/component/upgrade/upgrade.component.ts","./src/app/vsan/common/component/upgrade/upgrade.html","./src/app/vsan/common/component/inventory/inventory-browser.module.ts","./src/app/vsan/common/component/search/search.module.ts"],"names":[],"mappings":"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","file":"59-es2015.js","sourcesContent":["/* Copyright 2021 VMware, Inc. All rights reserved. -- VMware Confidential */\n\nimport {LoadingFlowWrapper} from \"@service/flow/loading-flow-wrapper.data\";\n\n/**\n * This property decorator is supposed to be used along with the @Loader decorator.\n * If an exception is thrown during the execution of the method decorated with @Loader\n * the ErrorHandler method will be invoked. You can define as many ErrorHandlers as you want,\n * but they must be with different names. The name can be provided as input to the decorator.\n * If a name is set to the ErrorHandler it will handle only the errors thrown by Loader functions\n * with the same name. If no name is passed to the ErrorHandler, it will handle only the errors\n * from Loader functions with no name.\n *\n * <pre>\n * // Example 1:\n * @Loader()\n * loadSyncData(): any {\n *    throw new Error(\"Failed to load sync data\");\n * }\n *\n * @ErrorHandler()\n * handleError(err: any) {\n *    // handle the error.\n * }\n *...\n *\n * // Example 2\n *\n * @Loader({name: \"data-loading-flow})\n * async loadAsyncData(): Promise<any> {\n *    return Promise.reject(\"Failed to load async data\");\n * }\n *\n * @ErrorHandler({name: \"data-loading-flow})\n * handleError(err: any) {\n *    // handle the error.\n * }\n * ...\n * </pre>\n */\nexport function ErrorHandler(props?: ErrorHandlerProperties): MethodDecorator {\n   props = props || {};\n   return (targetClass: any, functionName: string, descriptor: PropertyDescriptor): void => {\n      (new LoadingFlowWrapper(targetClass, props.name)).errorHandler = descriptor.value;\n   };\n}\n\n/**\n * Properties of the ErrorHandler decorator.\n */\nexport interface ErrorHandlerProperties {\n\n   /**\n    * Indicates which @Loder should be handled by this @ErrorHandler\n    */\n   name?: string;\n}\n","/* Copyright 2016-2022 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, EventEmitter, HostBinding, Input, OnInit, Output} from \"@angular/core\";\nimport {UpgradeService} from \"@component/upgrade/upgrade.service\";\nimport {VsanUpgradeStatusData} from \"@generated/vsan-upgrade-status-data\";\nimport {ClusterComputeResource} from \"@service/client/dataservice/data-service-property\";\nimport {DataServiceClient} from \"@service/client/dataservice/data-service.service\";\nimport {ManagedObject} from \"@service/managed-object\";\nimport {TaskMonitorService} from \"@service/task-monitor-service\";\nimport {Icon} from \"@util/icon\";\nimport {Logger} from \"@util/logger\";\nimport {ModalBuilder} from \"@util/modal-builder\";\nimport {UpgradeData, VsanUpgradeStatus} from \"./upgrade.data\";\n\n@Component({\n   templateUrl: \"upgrade.html\",\n   styleUrls: [\"upgrade.scss\"],\n   selector: \"vsan-upgrade\",\n})\nexport class UpgradeComponent implements OnInit {\n\n   @Input()\n   hasUpgradePermission: boolean;\n\n   /**\n    * If this is true, we show an extra warning text, when there are disks or objects with old format.\n    */\n   @Input()\n   showCompatibilityWarning: boolean = false;\n\n   /**\n    * Whether to show the status, e.g. \"All 12 disks on 12.0 (latest)\", when all disks and objects are\n    * at latest version.\n    * Also applied, when there are no disks.\n    */\n   @Input()\n   visibleWhenUpToDate: boolean = true;\n\n   /* Holds the cluster's disks upgrade status data */\n   private _upgradeData: UpgradeData;\n\n   @Input()\n   set upgradeData(data: UpgradeData) {\n      this._upgradeData = data;\n      if (this.isInit) {\n         this.onUpgradeDataSet();\n      }\n   }\n\n   get upgradeData(): UpgradeData {\n      return this._upgradeData;\n   }\n\n   @Output()\n   upgradeComplete: EventEmitter<void> = new EventEmitter<void>();\n\n   @Output()\n   precheckComplete: EventEmitter<void> = new EventEmitter<void>();\n\n   @HostBinding(\"style.display\")\n   get display(): string {\n      return this.isVisible\n            ? \"flex\"\n            : \"none\";\n   }\n\n   Icon: typeof Icon = Icon;\n\n   upgradeActionRelevant: boolean = false;\n   overallUpgradePrecheckStatusIcon: string;\n   blockContent: boolean = false;\n   diskFormatVersionIcon: string;\n   precheckActionRelevant: boolean = false;\n   alertMessage: string;\n\n   private isInit: boolean = false;\n   private clusterName: string;\n   private isVisible: boolean = true;\n   private static readonly PROGRESS_BAR_REFRESH_INTERVAL_MS: number = 5000;\n   private static readonly PRE_CHECK_ISSUES_DIALOG_ALERT_ITEM_HEIGHT: number = 35;\n   private static readonly PRE_CHECK_ISSUES_DIALOG_INITIAL_HEIGHT: number = 200;\n\n   constructor(private dataService: DataServiceClient,\n         private upgradeService: UpgradeService,\n         private taskService: TaskMonitorService) {\n   }\n\n   async ngOnInit(): Promise<void> {\n      this.clusterName = await this.dataService.getProperty(ClusterComputeResource.name, ManagedObject.contextObject);\n      this.onUpgradeDataSet();\n      this.isInit = true;\n   }\n\n   private onUpgradeDataSet(): void {\n      this.resetData();\n      if (!this.upgradeData) {\n         return;\n      }\n      this.updateViewState();\n      this.handleUpgradeStatus();\n   }\n\n   resetData(): void {\n      this.alertMessage = null;\n      this.isVisible = true;\n   }\n\n   private updateViewState(): void {\n      this.precheckActionRelevant = this.upgradeData.upgradeDiskData.hasDisks &&\n            this.upgradeData.isAsyncPrecheckSupported &&\n            !this.upgradeData.isUpgraded;\n      this.upgradeActionRelevant = this.upgradeData.upgradeDiskData.hasDisks &&\n            (!this.upgradeData.isUpgraded || this.upgradeData.hasOldVsanObject);\n\n      this.diskFormatVersionIcon = this.getFormatVersionIcon();\n      this.overallUpgradePrecheckStatusIcon = this.getPrecheckUpgradeStatusIcon();\n      if (!this.visibleWhenUpToDate) {\n         // We only want to show the view, when there are old disks/objects, otherwise hide it.\n         this.isVisible = !this.upgradeData.isUpToDate;\n      }\n   }\n\n   /**\n    * Gets the icon for the on-disk-format version status icon.\n    */\n   private getFormatVersionIcon(): string {\n      if (this.upgradeService.isUpgradeNeeded(this.upgradeData)) {\n         return Icon.CLR_WARN_STANDARD_ICON_SHAPE;\n      }\n      return Icon.CLR_SUCCESS_STANDARD_ICON_SHAPE;\n   }\n\n   /**\n    * Gets the icon displayed for the vsan Upgrade Pre-checks row.\n    */\n   private getPrecheckUpgradeStatusIcon(): string {\n      if (!this.upgradeData.hasPrecheckRunInformation\n            || this.upgradeData.status !== VsanUpgradeStatus.COMPLETED\n            || this.upgradeData.hasPrecheckIssues) {\n         return Icon.CLR_WARN_STANDARD_ICON_SHAPE;\n      }\n      return Icon.CLR_SUCCESS_STANDARD_ICON_SHAPE;\n   }\n\n   getIconShapeClass(shape: string): string {\n      return Icon.clrIconShapeClassMap[shape] + \" \" + Icon.CLR_SOLID_ICON_CLASS;\n   }\n\n   /*\n    * Upgrade action\n    */\n   upgradeVsan(): void {\n      const context: any = {\n         clusterName: this.clusterName,\n         upgradeData: this.upgradeData,\n      };\n      new ModalBuilder(\"upgrade/upgrade\")\n            .setSize(700, 350)\n            .open(context)\n            .then(this.handleUpgradeVsanTask)\n            .catch(error => {\n               Logger.error(error);\n            });\n   }\n\n   /**\n    * Upon triggering upgrade task we want to monitor the progress and display it in the UI.\n    * @param taskRef - the upgrade task, used to monitor the upgrade completion and notify the parent view.\n    */\n   private handleUpgradeVsanTask = () => {\n      // Show upgrade current progress in progress bar\n      setTimeout(this.refreshUpgradeProgressBar, UpgradeComponent.PROGRESS_BAR_REFRESH_INTERVAL_MS);\n   };\n\n   private handleUpgradeStatus = (reloadPageUponUpgradeCompletion: boolean = false): void => {\n      if (this.upgradeData.isUpgradeInProgress) {\n         // Upgrade ongoing, keep refreshing the progress bar\n         setTimeout(this.refreshUpgradeProgressBar, UpgradeComponent.PROGRESS_BAR_REFRESH_INTERVAL_MS);\n      } else if (reloadPageUponUpgradeCompletion) {\n         // When the upgrade task completes reload the view, otherwise it shows the old disks upgrade info.\n         this.upgradeComplete.emit();\n      }\n   };\n\n   private refreshUpgradeProgressBar = (): void => {\n      this.upgradeService.getUpgradeStatus(ManagedObject.contextObject)\n            .then((upgradeStatus: VsanUpgradeStatusData) => {\n               if (this.upgradeData) {\n                  this.upgradeData.upgradeStatus = upgradeStatus;\n                  this.upgradeData.isUpgradeInProgress = upgradeStatus.inProgress;\n               }\n               this.handleUpgradeStatus(true);\n            })\n            .catch(error => {\n               Logger.error(error);\n            });\n   };\n\n   /*\n    * Pre-check upgrade action\n    */\n   async precheckUpgrade(): Promise<void> {\n      try {\n         this.alertMessage = null;\n         this.blockContent = true;\n         const task: ManagedObject = await this.upgradeService.precheckUpgrade(ManagedObject.contextObject);\n         await this.onPrecheckUpgrade(task);\n      } catch (error) {\n         this.alertMessage = error;\n      } finally {\n         this.blockContent = false;\n      }\n   }\n\n   private onPrecheckUpgrade = async (task: ManagedObject) => {\n      await this.taskService.getAwaitResult(task);\n      await this.precheckComplete.emit();\n      this.openIssuesDetails();\n   };\n\n   openIssuesDetails = () => {\n      if (!this.upgradeData.upgradeStatus || !this.upgradeData.upgradeStatus.issues) {\n         return;\n      }\n      const PRE_CHECK_ISSUES_DIALOG_HEIGHT: number =\n            UpgradeComponent.PRE_CHECK_ISSUES_DIALOG_INITIAL_HEIGHT +\n            UpgradeComponent.PRE_CHECK_ISSUES_DIALOG_ALERT_ITEM_HEIGHT\n            * this.upgradeData.upgradeStatus.issues.length;\n      const context: any = {\n         clusterName: this.clusterName,\n         issues: this.upgradeData.upgradeStatus.issues,\n      };\n      new ModalBuilder(\"diskManagement/preCheckIssues\")\n            .setSize(600, PRE_CHECK_ISSUES_DIALOG_HEIGHT)\n            .open(context);\n   };\n}\n","<!--Copyright 2016-2022 VMware, Inc. All rights reserved. -- VMware Confidential-->\n<div class=\"busy-backdrop\" *ngIf=\"blockContent\">\n   <span id=\"busy-spinner\" class=\"spinner spinner-md central-spinner\"></span>\n</div>\n\n<vsan-validation id=\"validation-message\"\n                 *ngIf=\"alertMessage\"\n                 [alert]=\"alertMessage\"\n                 (onClosed)=\"alertMessage = null\">\n</vsan-validation>\n\n<div *ngIf=\"!upgradeData\">\n   <span class=\"spinner spinner-sm spinner-inline\"></span>\n   <span>{{\"vsan.manage.diskManagement.upgradeComponent.loading\" | localized}}</span>\n</div>\n\n<!-- If upgrade is not currently in progress, show the current disks upgrade and precheck info -->\n<ng-container *ngIf=\"upgradeData\">\n   <ng-container *ngIf=\"!upgradeData.isUpgradeInProgress\">\n      <div id=\"vsanDiskFormatVersionRow\" class=\"icon-name-container\">\n         <clr-icon *ngIf=\"upgradeData.upgradeDiskData.hasDisks\"\n                   aria-hidden=\"true\"\n                   [attr.shape]=\"diskFormatVersionIcon\"\n                   class=\"{{getIconShapeClass(diskFormatVersionIcon)}}\">\n         </clr-icon>\n         <span>{{upgradeData.getOverallUpgradeStatus(showCompatibilityWarning)}}</span>\n         <div class=\"buttons-container\">\n            <button id=\"upgradeButton\"\n                    *ngIf=\"upgradeActionRelevant\"\n                    class=\"btn btn-sm btn-outline\"\n                    (click)=\"upgradeVsan()\"\n                    [disabled]=\"!hasUpgradePermission\"\n                    type=\"button\">\n               {{\"vsan.upgrade.manage.action.upgrade\" | localized}}\n            </button>\n            <button id=\"precheckButton\"\n                    *ngIf=\"precheckActionRelevant\"\n                    class=\"btn btn-sm btn-outline\"\n                    (click)=\"precheckUpgrade()\"\n                    [disabled]=\"!hasUpgradePermission\"\n                    type=\"button\">\n               {{\"vsan.upgrade.manage.action.precheckUpgrade\" | localized}}\n            </button>\n         </div>\n      </div>\n\n      <!-- Precheck has been run, show results -->\n      <div id=\"vsanUpgradePrechecksRow\" *ngIf=\"!upgradeData.isUpgraded\" class=\"icon-name-container\">\n         <clr-icon aria-hidden=\"true\"\n                   [attr.shape]=\"overallUpgradePrecheckStatusIcon\"\n                   class=\"{{getIconShapeClass(overallUpgradePrecheckStatusIcon)}}\">\n         </clr-icon>\n         <span>{{upgradeData.precheckStatus}}</span>\n         <a id=\"detailsButton\"\n            *ngIf=\"upgradeData.hasPrecheckIssues\"\n            [title]=\"'vsan.common.dialogOpen.title' | localized : ('vsan.upgrade.manage.upgrade.confirm.title' | localized)\"\n            href=\"javascript://\"\n            (click)=\"openIssuesDetails()\">\n            {{\"vsan.upgrade.manage.precheckDetailsButtonLabel\" | localized}}\n         </a>\n      </div>\n   </ng-container>\n\n   <!-- Upgrade in progress, only show upgrade task info -->\n   <div id=\"vsanUpgradeRow\" *ngIf=\"upgradeData.isUpgradeInProgress\">\n      <div *ngIf=\"showCompatibilityWarning\"\n           id=\"upgrade-inprogress-warning\"\n           class=\"icon-name-container\">\n         <clr-icon class=\"is-solid\"\n                   aria-hidden=\"true\"\n                   [attr.shape]=\"Icon.CLR_WARN_STANDARD_ICON_SHAPE\"\n                   [ngClass]=\"Icon.CLR_WARN_ICON_CLASS\">\n         </clr-icon>\n         <span>{{\"vsan.manage.upgrade.inprogress.compatibility.warning\" | localized}}</span>\n      </div>\n      <div>{{\"vsan.manage.upgrade.inProgress\" | localized : upgradeData.latestVersionAsString}}</div>\n\n      <div *ngIf=\"upgradeData.upgradeStatus.currentOperationName\">\n         {{\"vsan.upgrade.manage.progress.currentTaskFormat\" | localized : upgradeData.upgradeStatus.currentOperationName}}\n      </div>\n      <div class=\"progress labeled\" *ngIf=\"upgradeData.upgradeStatus.progress\">\n         <progress max=\"100\" value=\"0\" data-value=\"{{upgradeData.upgradeStatus.progress}}\"></progress>\n         <span>{{\"vsan.common.percentage\" | localized: upgradeData.upgradeStatus.progress}}</span>\n      </div>\n   </div>\n</ng-container>","/* Copyright 2019-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {NgModule} from \"@angular/core\";\nimport {CommonModule} from \"@angular/common\";\nimport {FormsModule} from \"@angular/forms\";\nimport {ClarityModule} from \"@clr/angular\";\nimport {CommonPipeModule} from \"@pipe/common-pipe.module\";\nimport {InventoryBrowserComponent} from \"@component/inventory/inventory-browser.component\";\nimport {InventoryNodeComponent} from \"@component/inventory/inventory-node.component\";\nimport {WitnessCandidateInventoryService} from \"@generated/witness-candidate-inventory-service\";\nimport {DatacenterInventoryService} from \"@generated/datacenter-inventory-service\";\nimport {NetworkInventoryService} from \"@generated/network-inventory-service\";\nimport {ComputeInventoryService} from \"@generated/compute-inventory-service\";\nimport {IoInsightInventoryService} from \"@generated/io-insight-inventory-service\";\nimport {SearchModule} from \"@component/search/search.module\";\nimport {TreeNodeComponent} from \"@component/inventory/tree-view/tree-node.component\";\nimport {TreeViewComponent} from \"@component/inventory/tree-view/tree-view.component\";\nimport {DropdownObjectSelectorComponent} from \"@component/inventory/dropdown-object-selector/dropdown-object-selector.component\";\nimport {CommonDirectiveModule} from \"@directive/common-directive.module\";\nimport {InventoryNodesComponent} from \"@component/inventory/inventory-nodes.component\";\nimport {TreeNodesComponent} from \"@component/inventory/tree-view/tree-nodes.component\";\n\n@NgModule({\n   imports: [\n      CommonModule,\n      FormsModule,\n      ClarityModule,\n      CommonPipeModule,\n      SearchModule,\n      CommonDirectiveModule,\n   ],\n   declarations: [\n      InventoryBrowserComponent,\n      InventoryNodesComponent,\n      InventoryNodeComponent,\n      TreeNodeComponent,\n      TreeNodesComponent,\n      TreeViewComponent,\n      DropdownObjectSelectorComponent,\n   ],\n   exports: [\n      InventoryBrowserComponent,\n      DropdownObjectSelectorComponent,\n      TreeViewComponent,\n   ],\n   providers: [\n      WitnessCandidateInventoryService,\n      DatacenterInventoryService,\n      NetworkInventoryService,\n      ComputeInventoryService,\n      IoInsightInventoryService,\n   ],\n})\nexport class InventoryBrowserModule {\n}","/* Copyright 2019 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {NgModule} from \"@angular/core\";\nimport {CommonModule} from \"@angular/common\";\nimport {FormsModule} from \"@angular/forms\";\nimport {ClarityModule} from \"@clr/angular\";\nimport {CommonPipeModule} from \"@pipe/common-pipe.module\";\nimport {SearchComponent} from \"@component/search/search.component\";\n\n@NgModule({\n   imports: [\n      CommonModule,\n      FormsModule,\n      ClarityModule,\n      CommonPipeModule\n   ],\n   declarations: [\n      SearchComponent\n   ],\n   exports: [\n      SearchComponent\n   ],\n})\nexport class SearchModule {\n}\n"],"sourceRoot":"webpack:///"}