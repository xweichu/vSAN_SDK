{"version":3,"sources":["./src/app/vsan/cluster/configure/action/disable-vsan/turn-off-vsan.component.ts","./src/app/vsan/cluster/configure/action/disable-vsan/turn-off-vsan.html","./src/app/vsan/cluster/configure/action/disable-vsan/turn-off-vsan.module.ts","./src/app/vsan/common/service/status-updates/vsan-status-change.data.ts"],"names":[],"mappings":"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","file":"142-es2015.js","sourcesContent":["/* Copyright 2017-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, OnInit} from \"@angular/core\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {ManagedObject} from \"@service/managed-object\";\nimport {ConfigureVsanClusterMutationProvider} from \"@generated/configure-vsan-cluster-mutation-provider\";\nimport {CsdService} from \"@generated/csd-service\";\nimport {InventoryNode} from \"@generated/inventory-node\";\nimport {VsanStatusService} from \"@service/status-updates/vsan-status.service\";\nimport {StatusChangeType, VsanStatusChangeData} from \"@service/status-updates/vsan-status-change.data\";\n\n@Component({\n   templateUrl: \"turn-off-vsan.html\",\n   selector: \"vsan-disable-dialog\",\n})\nexport class TurnOffVsanComponent implements OnInit {\n\n   alertMessages: string[] = [];\n   loading: boolean = false;\n   actionDisabled: boolean = false;\n   clusterName: string;\n   isComputeOnlyCluster: boolean;\n   serverClusters: InventoryNode[];\n   clientClusters: InventoryNode[];\n\n   constructor(\n         private configureVsanClusterMutationProvider: ConfigureVsanClusterMutationProvider,\n         private csdService: CsdService,\n         private vsanStatusService: VsanStatusService) {\n   }\n\n   ngOnInit(): void {\n      this.clusterName = VsanUiUtils.getModalContext().clusterName;\n      this.isComputeOnlyCluster = VsanUiUtils.getModalContext().isComputeOnlyCluster || false;\n      this.loadCsdData();\n   }\n\n   async loadCsdData(): Promise<void> {\n      const clusterRef: ManagedObject = ManagedObject.contextObject;\n      this.loading = true;\n      try {\n         if (await this.csdService.isCsdSupported(clusterRef)) {\n            [this.serverClusters, this.clientClusters] = await Promise.all([\n               this.csdService.getMountedDatastores(clusterRef)\n                     .then(res => res.filter(ds => !ds.isLocal).map(ds => ds.shareableDatastore.serverCluster)),\n               this.csdService.getClientClusters(clusterRef),\n            ]);\n\n            if (!VsanUiUtils.isEmpty(this.serverClusters)) {\n               this.alertMessages.push(VsanUiUtils.getString(\"vsan.generalConfig.disableVsan.error.mountsClusters\",\n                     this.serverClusters.map(cls => cls.name).join(\", \")));\n               this.actionDisabled = true;\n            }\n            if (!VsanUiUtils.isEmpty(this.clientClusters)) {\n               this.alertMessages.push(\n                     VsanUiUtils.getString(\"vsan.generalConfig.disableVsan.error.exportsToClusters\",\n                     this.clientClusters.map(cls => cls.name).join(\", \")));\n               this.actionDisabled = true;\n            }\n         }\n      } catch (e) {\n         this.handleError(e);\n      } finally {\n         this.loading = false;\n      }\n   }\n\n   canProceed = () => !this.actionDisabled && !this.loading;\n\n   async apply(): Promise<void> {\n      this.loading = true;\n      try {\n         const taskRef: ManagedObject = await this.configureVsanClusterMutationProvider\n               .turnOffVsan(ManagedObject.contextObject);\n         this.vsanStatusService.storeChange(\n               new VsanStatusChangeData(taskRef, StatusChangeType.VSAN_SERVICE_DISABLED));\n         VsanUiUtils.closeModalDialog(taskRef);\n      } catch (e) {\n         this.handleError(e);\n      }\n   }\n\n   handleError(error: any): void {\n      this.loading = false;\n      this.alertMessages = [error];\n   }\n}\n","<!--Copyright 2021 VMware, Inc. All rights reserved. -- VMware Confidential-->\n<vsan-delete-prompt\n      [title]=\"'vsan.generalConfig.disableVsan.warning.title' | localized\"\n      [subtitle]=\"clusterName\"\n      [confirmText]=\"'vsan.generalConfig.disableVsan.turn.off' | localized\"\n      [blockButton]=\"!canProceed()\"\n      [allowAlertClose]=\"!actionDisabled\"\n      [(alertMessages)]=\"alertMessages\"\n      (onConfirm)=\"apply()\">\n   <div *ngIf=\"canProceed()\" class=\"dialog-container\">\n      <div id=\"information\">\n         <ng-container *ngIf=\"!isComputeOnlyCluster\">\n            {{\"vsan.generalConfig.disableVsan.warning\" | localized}}\n         </ng-container>\n         <ng-container *ngIf=\"isComputeOnlyCluster\">\n            {{\"vsan.generalConfig.disableVsan.warning.computeOnly\" | localized}}\n         </ng-container>\n      </div>\n\n      <div id=\"confirmation\">\n         {{\"vsan.generalConfig.disableVsan.confirmation\" | localized : clusterName}}\n      </div>\n   </div>\n</vsan-delete-prompt>\n","/* Copyright 2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {NgModule} from \"@angular/core\";\nimport {CommonModule} from \"@angular/common\";\nimport {ClarityModule} from \"@clr/angular\";\nimport {CommonPipeModule} from \"@pipe/common-pipe.module\";\nimport {PromptModule} from \"@component/dialog/prompt/prompt.module\";\nimport {RouterModule, Routes} from \"@angular/router\";\nimport {TurnOffVsanComponent} from \"./turn-off-vsan.component\";\n\nconst routes: Routes = [\n   {\n      path: \"\",\n      component: TurnOffVsanComponent,\n   },\n];\n\n@NgModule({\n   imports: [\n      CommonModule,\n      ClarityModule,\n      CommonPipeModule,\n      PromptModule,\n      RouterModule.forChild(routes),\n   ],\n   declarations: [\n      TurnOffVsanComponent,\n   ],\n})\nexport class TurnOffVsanModule {\n\n}","/* Copyright 2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {ManagedObject} from \"@service/managed-object\";\nimport {TaskStatus} from \"@service/task-monitor-service\";\n\n/**\n * Holds info for a status change initiated by the current user on the vSAN cluster.\n * This data is stored in the Browser local storage, check <code>VsanStatusService</code>\n * and is accessible across iframes.\n */\nexport class VsanStatusChangeData {\n\n   /**\n    * A cluster managed object reference associated with this status change\n    */\n   clusterRef: ManagedObject;\n\n   /**\n    * A task moref, that is changing the status of the vSAN cluster.\n    */\n   taskRef: ManagedObject;\n\n   /**\n    * Enum value, holding information about what status change is happening with the vSAN cluster exactly.\n    */\n   changeType: StatusChangeType;\n\n   /**\n    * Upon completion of the task will hold either SUCCESS or ERROR, which could be used by subscribers.\n    */\n   taskStatus: TaskStatus;\n\n   constructor(taskRef: ManagedObject, status: StatusChangeType,\n         clusterRef: ManagedObject = ManagedObject.contextObject) {\n      this.taskRef = taskRef;\n      this.changeType = status;\n      this.clusterRef = clusterRef;\n   }\n}\n\n/**\n * Enum with codes, used to differentiate different vSAN configuration events like\n * vSAN enabled, cluster shutdown, etc.\n */\nexport enum StatusChangeType {\n   /**\n    * A cluster has had the vSAN service enabled.\n    */\n   VSAN_SERVICE_ENABLED,\n   /**\n    * A cluster has had the vSAN service disabled.\n    */\n   VSAN_SERVICE_DISABLED,\n   /**\n    * A vSAN cluster has been powered on.\n    */\n   VSAN_CLUSTER_POWER_ON,\n   /**\n    * A vSAN cluster has been shut down.\n    */\n   VSAN_CLUSTER_POWER_OFF,\n}"],"sourceRoot":"webpack:///"}