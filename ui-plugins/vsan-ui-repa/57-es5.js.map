{"version":3,"sources":["webpack:///src/app/vsan/common/util/reactive-form-util.ts","webpack:///src/app/generated/vsan-iscsi-auth-spec.ts","webpack:///src/app/vsan/common/component/iscsi-authentication/authentication.component.ts","webpack:///src/app/vsan/common/component/iscsi-authentication/authentication.module.ts","webpack:///src/app/vsan/common/component/iscsi-authentication/authentication.html","webpack:///src/app/vsan/common/directive/reactive-forms/disable-control.directive.ts"],"names":["ReactiveFormUtil","FORM_CONTROLS_DELIMITER","validateAllFormFields","formGroup","markAsTouched","Object","keys","controls","forEach","field","control","get","onlySelf","childControl","validateControls","updateValueAndValidity","emitEvent","updateFormControlsValueAndValidity","getFormControlPath","parts","join","VsanIscsiAuthSpec","Factory","create","authType","initiatorUsername","initiatorSecret","targetUsername","targetSecret","IscsiTargetAuthType","AuthenticationComponent","formBuilder","availableAuthTypes","AUTHENTICATION_TYPES","authTypeChange","onBlur","onTouched","authForm","restoreAuthData","getAuthType","CHAP","CHAP_Mutual","patchValue","originalAuthSpec","cleanAuthData","isOriginalAuthData","toString","getTargetUser","getTargetPassword","getInitiatorUser","getInitiatorPassword","isValidUsername","username","VALID_USERNAME_PATTERN","test","isValidSecret","secret","VALID_SECRET_PATTERN","trim","createAuthSpec","authSpec","group","disabled","isDisabled","validateTargetUsername","validateTargetPassword","validateInitiatorUsername","validateInitiatorSecret","controlValue","NoAuth","setValue","emit","fn","valueChanges","subscribe","value","disable","enable","ctrl","touched","invalid","SECRET_PLACEHOLDER","getString","IscsiAuthenticationModule","DisableControlDirective","ngControl","isInit","_disableControl","setDisabled","disableControl"],"mappings":"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","file":"57-es5.js","sourcesContent":["/* Copyright 2017 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {FormArray, FormControl, FormGroup} from \"@angular/forms\";\n\nexport class ReactiveFormUtil {\n\n   private static readonly FORM_CONTROLS_DELIMITER: string = \".\";\n\n   /*\n    * Trigger validation on all controls in a form group and mark them as touched to display errors\n    */\n   static validateAllFormFields = (formGroup: FormGroup): void => {\n      formGroup.markAsTouched();\n      Object.keys(formGroup.controls).forEach(field => {\n         const control = formGroup.get(field);\n         control.markAsTouched({ onlySelf: true });\n         if (control instanceof FormGroup) {\n            ReactiveFormUtil.validateAllFormFields(control);\n         } else if (control instanceof FormArray) {\n            control.controls.forEach(\n                  (childControl: FormGroup) => ReactiveFormUtil.validateAllFormFields(childControl));\n         } else if (control instanceof FormControl) {\n            ReactiveFormUtil.validateControls([control]);\n         }\n      });\n   };\n\n   static validateControls = (controls: FormControl[]): void => {\n      controls.forEach((control) => {\n         control.markAsTouched({onlySelf: true});\n         control.updateValueAndValidity({\n            onlySelf: false,\n            emitEvent: true\n         });\n      });\n   };\n\n   /**\n    * Trigger updateValueAndValidity() to call ValidatorFn and update validity of all controls in a form group.\n    */\n   static updateFormControlsValueAndValidity = (formGroup: FormGroup) => {\n      Object.keys(formGroup.controls).forEach(control => {\n         if (formGroup.get(control) instanceof FormControl) {\n            formGroup.get(control).updateValueAndValidity();\n         }\n      })\n   };\n\n   static getFormControlPath = (...parts: string[]): string => {\n      return parts.join(ReactiveFormUtil.FORM_CONTROLS_DELIMITER);\n   };\n}\n","\nexport interface VsanIscsiAuthSpec {\n\n   authType: string;\n   initiatorUsername: string;\n   initiatorSecret: string;\n   targetUsername: string;\n   targetSecret: string;\n} //class VsanIscsiAuthSpec\n\nexport module VsanIscsiAuthSpec{\nexport class Factory {\n\n   static create = (authType: string, initiatorUsername: string, initiatorSecret: string, targetUsername: string, targetSecret: string): VsanIscsiAuthSpec => {\n      return { authType: authType, initiatorUsername: initiatorUsername, initiatorSecret: initiatorSecret, targetUsername: targetUsername, targetSecret: targetSecret, };\n   }\n\n\n} //class Factory\n\n} //module VsanIscsiAuthSpec\n","/* Copyright 2017-2019 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, EventEmitter, Output} from \"@angular/core\";\nimport {\n   AbstractControl,\n   ControlValueAccessor,\n   FormBuilder, FormControl, FormGroup,\n   NG_VALIDATORS, NG_VALUE_ACCESSOR,\n   ValidationErrors,\n   Validator, ValidatorFn\n} from \"@angular/forms\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {VsanIscsiUtil} from \"@util/vsan-iscsi-util\";\nimport {VsanIscsiAuthSpec} from \"@generated/vsan-iscsi-auth-spec\";\nimport {VsanIscsiTargetConfig} from \"@generated/vsan-iscsi-target-config\";\nimport IscsiTargetAuthType = VsanIscsiTargetConfig.IscsiTargetAuthType;\nimport {ReactiveFormUtil} from \"@util/reactive-form-util\";\n\n@Component({\n   selector: \"vsan-authentication\",\n   templateUrl: \"authentication.html\",\n   styleUrls: [\"authentication.scss\"],\n   providers: [\n      {\n         provide: NG_VALUE_ACCESSOR,\n         multi: true,\n         useExisting: AuthenticationComponent\n      },\n      {\n         provide: NG_VALIDATORS,\n         multi: true,\n         useExisting: AuthenticationComponent\n      }\n   ],\n   host: {\n      // Announce messages for screen reader users when showing incoming/outgoing CHAP information.\n      \"aria-live\": \"polite\"\n   }\n})\nexport class AuthenticationComponent implements ControlValueAccessor, Validator {\n   private static readonly SECRET_PLACEHOLDER: string = \"••••••••\";\n   private static readonly VALID_USERNAME_PATTERN: RegExp = /^([a-zA-Z0-9][a-zA-Z0-9_\\-.@\\\\:]*)$/;\n   private static readonly VALID_SECRET_PATTERN: RegExp =\n         /^(?=.*[A-Z])(?=.*[a-z])(?=.*[0-9])(?=.*[!@#\\\\$%\\\\^&\\\\*]).{12,16}$/;\n\n   availableAuthTypes: any[] = VsanIscsiUtil.AUTHENTICATION_TYPES;\n\n   private onTouched: any;\n\n   private originalAuthSpec: VsanIscsiAuthSpec;\n   isDisabled: boolean;\n   authForm: FormGroup;\n\n   @Output()\n   authTypeChange: EventEmitter<IscsiTargetAuthType> = new EventEmitter<IscsiTargetAuthType>();\n\n   constructor(private formBuilder: FormBuilder) {\n      this.authForm = this.formBuilder.group({\n         authType: new FormControl({disabled: this.isDisabled}),\n         targetUsername: new FormControl(\"\", [\n               this.validateTargetUsername()\n         ]),\n         targetSecret: new FormControl(\"\", [\n               this.validateTargetPassword()\n         ]),\n         initiatorUsername: new FormControl(\"\", [\n               this.validateInitiatorUsername()\n         ]),\n         initiatorSecret: new FormControl(\"\", [\n               this.validateInitiatorSecret()\n         ])\n      });\n   }\n\n   writeValue(controlValue: any): void {\n      let authSpec: VsanIscsiAuthSpec = controlValue;\n      if (!authSpec) {\n         authSpec = VsanIscsiAuthSpec.Factory.create(\n               IscsiTargetAuthType.NoAuth.toString(), null, null, null, null);\n      }\n      // Keep the original value for validation checks later on\n      this.originalAuthSpec = authSpec;\n\n      // Update the form values\n      this.authForm.setValue({\n         authType: IscsiTargetAuthType[this.originalAuthSpec.authType],\n         targetUsername: this.originalAuthSpec.targetUsername,\n         targetSecret: this.originalAuthSpec.targetSecret,\n         initiatorUsername: this.originalAuthSpec.initiatorUsername,\n         initiatorSecret: this.originalAuthSpec.initiatorSecret\n      }, {emitEvent: false}); // Avoid emitting initial event\n      // Trigger auth change event for parent component\n      this.authTypeChange.emit(this.getAuthType());\n   }\n\n   registerOnChange(fn: (value: any) => void) {\n      this.authForm.valueChanges.subscribe(value => {\n         // Update the value of the component to match the expected model of type VsanIscsiAuthSpec\n         fn(this.createAuthSpec());\n      });\n   }\n\n   registerOnTouched(fn: (value: any) => void) {\n      this.onTouched = fn;\n   }\n\n   setDisabledState(isDisabled: boolean) {\n      this.isDisabled = isDisabled;\n      isDisabled ? this.authForm.disable({ emitEvent: false }) : this.authForm.enable({ emitEvent: false });\n   }\n\n   onBlur = () => {\n      this.onTouched();\n      ReactiveFormUtil.updateFormControlsValueAndValidity(this.authForm);\n   };\n\n   onAuthChange() {\n      if (!!this.originalAuthSpec &&\n            this.getAuthType() == IscsiTargetAuthType[this.originalAuthSpec.authType]) {\n         this.restoreAuthData();\n      } else {\n         this.cleanAuthData();\n      }\n      ReactiveFormUtil.updateFormControlsValueAndValidity(this.authForm);\n      this.authTypeChange.emit(this.getAuthType());\n   }\n\n   private restoreAuthData = () => {\n      if (this.getAuthType() == IscsiTargetAuthType.CHAP\n            || this.getAuthType() == IscsiTargetAuthType.CHAP_Mutual) {\n         this.authForm.patchValue({\n            targetUsername: this.originalAuthSpec.targetUsername,\n            targetSecret: this.originalAuthSpec.targetSecret\n         });\n      }\n      if (this.getAuthType() == IscsiTargetAuthType.CHAP_Mutual) {\n         this.authForm.patchValue({\n            initiatorUsername: this.originalAuthSpec.initiatorUsername,\n            initiatorSecret: this.originalAuthSpec.initiatorSecret\n         });\n      }\n   };\n\n   private cleanAuthData = () => {\n      this.authForm.patchValue({\n         targetUsername: null,\n         targetSecret: null,\n         initiatorUsername: null,\n         initiatorSecret: null\n      });\n   };\n\n   validate(ctrl: AbstractControl): ValidationErrors {\n      return this.authForm && this.authForm.touched && this.authForm.invalid ?\n            {'invalidAuthSettings' : { value: ctrl.value}} :\n            null;\n   }\n\n   validateTargetUsername(): ValidatorFn {\n      return (ctrl: AbstractControl): ValidationErrors | null => {\n         if (!this.authForm || this.isOriginalAuthData()) {\n            return null;\n         }\n\n         if ((this.getAuthType() == IscsiTargetAuthType.CHAP\n               || this.getAuthType() == IscsiTargetAuthType.CHAP_Mutual)\n               && !this.isValidUsername(this.getTargetUser())) {\n               return {'invalidTargetUser': {value: ctrl.value}};\n         }\n         return null;\n      };\n   }\n\n   validateTargetPassword(): ValidatorFn {\n      return (ctrl: AbstractControl): ValidationErrors | null => {\n         if (!this.authForm || this.isOriginalAuthData()) {\n            return null;\n         }\n\n         if ((this.getAuthType() == IscsiTargetAuthType.CHAP\n               || this.getAuthType() == IscsiTargetAuthType.CHAP_Mutual)\n               && !this.isValidSecret(this.getTargetPassword())) {\n            return {'invalidTargetSecret': {value: ctrl.value}};\n         }\n         return null;\n      };\n   }\n\n   validateInitiatorUsername(): ValidatorFn {\n      return (ctrl: AbstractControl): ValidationErrors | null => {\n         if (!this.authForm || this.isOriginalAuthData()) {\n            return null;\n         }\n\n         if (this.getAuthType() == IscsiTargetAuthType.CHAP_Mutual\n               && !this.isValidUsername(this.getInitiatorUser())) {\n            return {'invalidInitiatorUsername': {value: ctrl.value}};\n         }\n         return null;\n      };\n   }\n\n   validateInitiatorSecret(): ValidatorFn {\n      return (ctrl: AbstractControl): ValidationErrors | null => {\n         if (!this.authForm || this.isOriginalAuthData()) {\n            return null;\n         }\n\n         if (this.getAuthType() == IscsiTargetAuthType.CHAP_Mutual\n               && (!this.isValidSecret(this.getInitiatorPassword())\n                     || this.getTargetPassword() == this.getInitiatorPassword())) {\n            return {'invalidInitiatorSecret': {value: ctrl.value}};\n         }\n         return null;\n      };\n   }\n\n   private isOriginalAuthData = (): boolean => {\n      if (this.getAuthType().toString() !== this.originalAuthSpec.authType) {\n         return false;\n      }\n      switch (this.getAuthType()) {\n         case IscsiTargetAuthType.CHAP:\n            return this.getTargetUser() === this.originalAuthSpec.targetUsername\n                  && !this.getTargetPassword();\n         case IscsiTargetAuthType.CHAP_Mutual:\n            return this.getTargetUser() === this.originalAuthSpec.targetUsername\n                  && !this.getTargetPassword() &&\n                  this.getInitiatorUser() === this.originalAuthSpec.initiatorUsername\n                  && !this.getInitiatorPassword();\n         default:\n            return true;\n      }\n   };\n\n   private isValidUsername = (username: string): boolean => {\n      return username !== null && AuthenticationComponent.VALID_USERNAME_PATTERN.test(username);\n   };\n\n   private isValidSecret = (secret: string): boolean => {\n      return AuthenticationComponent.VALID_SECRET_PATTERN.test(secret) && secret == secret.trim();\n   };\n\n   /**\n    * If the authentication data is changed, return new authentication data.\n    * Otherwise, return null.\n    */\n   private createAuthSpec = (): VsanIscsiAuthSpec => {\n      if (this.isOriginalAuthData()) {\n         return null;\n      }\n\n      const authSpec: VsanIscsiAuthSpec = VsanIscsiAuthSpec.Factory.create(\n            this.getAuthType().toString(), null, null, null, null);\n      if (this.getAuthType() === IscsiTargetAuthType.CHAP || this.getAuthType() === IscsiTargetAuthType.CHAP_Mutual) {\n         authSpec.targetUsername = this.getTargetUser();\n         authSpec.targetSecret = this.getTargetPassword();\n      }\n      if (this.getAuthType() === IscsiTargetAuthType.CHAP_Mutual) {\n         authSpec.initiatorUsername = this.getInitiatorUser();\n         authSpec.initiatorSecret = this.getInitiatorPassword();\n      }\n      return authSpec;\n   };\n\n   private getAuthType(): IscsiTargetAuthType {\n      return this.authForm.get('authType').value;\n   }\n\n   private getTargetUser(): string {\n      return this.authForm.get('targetUsername').value;\n   }\n\n   private getTargetPassword(): string {\n      return this.authForm.get('targetSecret').value;\n   }\n\n   private getInitiatorUser(): string {\n      return this.authForm.get('initiatorUsername').value;\n   }\n\n   private getInitiatorPassword(): string {\n      return this.authForm.get('initiatorSecret').value;\n   }\n\n   get secretPlaceholder() {\n      if (this.isOriginalAuthData()) {\n         return AuthenticationComponent.SECRET_PLACEHOLDER;\n      }\n      return this.originalAuthSpec.authType === this.getAuthType().toString() ?\n            VsanUiUtils.getString(\"vsan.configure.iscsiTargets.target.dialog.secret.placeholder\") : \"\";\n   }\n\n   get incomingFieldsVisible(): boolean {\n      return this.getAuthType() == IscsiTargetAuthType.CHAP\n            || this.getAuthType() == IscsiTargetAuthType.CHAP_Mutual;\n   }\n\n   get outgoingFieldsVisible(): boolean {\n      return this.getAuthType() == IscsiTargetAuthType.CHAP_Mutual;\n   }\n}","/* Copyright 2019 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {NgModule} from \"@angular/core\";\nimport {CommonModule} from \"@angular/common\";\nimport {ClarityModule} from \"@clr/angular\";\nimport {CommonDirectiveModule} from \"@directive/common-directive.module\";\nimport {CommonPipeModule} from \"@pipe/common-pipe.module\";\nimport {AuthenticationComponent} from \"@component/iscsi-authentication/authentication.component\";\nimport {FormsModule, ReactiveFormsModule} from \"@angular/forms\";\n\n@NgModule({\n   imports: [\n      CommonModule,\n      FormsModule,\n      ReactiveFormsModule,\n      ClarityModule,\n      CommonDirectiveModule,\n      CommonPipeModule,\n   ],\n   declarations: [\n      AuthenticationComponent\n   ],\n   exports: [\n      AuthenticationComponent\n   ]\n})\nexport class IscsiAuthenticationModule {\n}","<!-- Authentication -->\n<ng-container [formGroup]=\"authForm\">\n   <clr-select-container>\n      <label for=\"auth-selector\" class=\"clr-col-12 clr-col-md-4\">\n         {{'vsan.configure.iscsiTargets.target.dialog.auth' | localized}}\n      </label>\n      <select clrSelect\n              id=\"auth-selector\"\n              class=\"clr-col-12 clr-col-md-8\"\n              name=\"auth-selector\"\n              formControlName=\"authType\"\n              (change)=\"onAuthChange()\"\n              [vsan-disable-form-control]=\"isDisabled\">\n         <option *ngFor=\"let auth of availableAuthTypes\"\n                 [ngValue]=\"auth.id\">\n            {{auth.label}}\n         </option>\n      </select>\n   </clr-select-container>\n\n   <ng-container *ngIf=\"incomingFieldsVisible\">\n      <!-- Incoming user -->\n      <clr-input-container>\n         <label for=\"incoming-username-input\" class=\"clr-col-12 clr-col-md-4\">\n            {{\"vsan.iscsi.action.edit.incomingUserLabel\" | localized}}\n         </label>\n         <input clrInput\n                id=\"incoming-username-input\"\n                class=\"clr-col-12 clr-col-md-8\"\n                name=\"incoming-username-input\"\n                formControlName=\"targetUsername\"\n                (blur)=\"onBlur()\"\n                [vsan-disable-form-control]=\"isDisabled\"/>\n         <clr-control-error id=\"incoming-username-rules\">\n            {{'vsan.configure.iscsiTargets.target.dialog.username.invalid' | localized}}\n            <ul class=\"list\">\n               <li>{{\"vsan.configure.iscsiTargets.target.dialog.userName.requirement1\" | localized}}</li>\n               <li>{{\"vsan.configure.iscsiTargets.target.dialog.userName.requirement2\" | localized}}</li>\n               <li>{{\"vsan.configure.iscsiTargets.target.dialog.userName.requirement3\" | localized}}</li>\n               <li>{{\"vsan.configure.iscsiTargets.target.dialog.userName.requirement4\" | localized}}</li>\n            </ul>\n         </clr-control-error>\n      </clr-input-container>\n      <!-- Incoming secret -->\n      <clr-input-container>\n         <label for=\"incoming-secret-input\" class=\"clr-col-12 clr-col-md-4\">\n            {{\"vsan.iscsi.action.edit.incomingSecretLabel\" | localized}}\n         </label>\n         <input clrInput\n                id=\"incoming-secret-input\"\n                class=\"clr-col-12 clr-col-md-8\"\n                name=\"incoming-secret-input\"\n                type=\"password\"\n                formControlName=\"targetSecret\"\n                (blur)=\"onBlur()\"\n                placeholder=\"{{secretPlaceholder}}\"\n                [vsan-disable-form-control]=\"isDisabled\"/>\n         <clr-control-error id=\"incoming-secret-rules\">\n            {{'vsan.configure.iscsiTargets.target.dialog.secret.invalid' | localized}}\n            <ul class=\"list\">\n               <li>{{\"vsan.configure.iscsiTargets.target.dialog.secret.requirement1\" | localized}}</li>\n               <li>{{\"vsan.configure.iscsiTargets.target.dialog.secret.requirement2\" | localized}}</li>\n               <li>{{\"vsan.configure.iscsiTargets.target.dialog.secret.requirement3\" | localized}}</li>\n               <li>{{\"vsan.configure.iscsiTargets.target.dialog.secret.requirement4\" | localized}}</li>\n               <li>{{\"vsan.configure.iscsiTargets.target.dialog.secret.requirement5\" | localized}}</li>\n               <li>{{\"vsan.configure.iscsiTargets.target.dialog.secret.requirement6\" | localized}}</li>\n               <li>{{\"vsan.configure.iscsiTargets.target.dialog.secret.requirement7.end\" | localized}}</li>\n            </ul>\n         </clr-control-error>\n      </clr-input-container>\n   </ng-container>\n   <ng-container *ngIf=\"outgoingFieldsVisible\">\n      <!-- Outgoing user -->\n      <clr-input-container>\n         <label for=\"outgoing-username-input\" class=\"clr-col-12 clr-col-md-4\">\n            {{\"vsan.iscsi.action.edit.outgoingUserLabel\" | localized}}\n         </label>\n         <input clrInput\n                id=\"outgoing-username-input\"\n                class=\"clr-col-12 clr-col-md-8\"\n                name=\"outgoing-username-input\"\n                formControlName=\"initiatorUsername\"\n                (blur)=\"onBlur()\"\n                [vsan-disable-form-control]=\"isDisabled\"/>\n         <clr-control-error id=\"outgoing-username-rules\">\n            {{'vsan.configure.iscsiTargets.target.dialog.username.invalid' | localized}}\n            <ul class=\"list\">\n               <li>{{\"vsan.configure.iscsiTargets.target.dialog.userName.requirement1\" | localized}}</li>\n               <li>{{\"vsan.configure.iscsiTargets.target.dialog.userName.requirement2\" | localized}}</li>\n               <li>{{\"vsan.configure.iscsiTargets.target.dialog.userName.requirement3\" | localized}}</li>\n               <li>{{\"vsan.configure.iscsiTargets.target.dialog.userName.requirement4\" | localized}}</li>\n            </ul>\n         </clr-control-error>\n      </clr-input-container>\n      <!-- Outgoing secret -->\n      <clr-input-container>\n         <label for=\"outgoing-secret-input\" class=\"clr-col-12 clr-col-md-4\">\n            {{\"vsan.iscsi.action.edit.outgoingSecretLabel\" | localized}}\n         </label>\n         <input clrInput\n                id=\"outgoing-secret-input\"\n                class=\"clr-col-12 clr-col-md-8\"\n                name=\"outgoing-secret-input\"\n                type=\"password\"\n                formControlName=\"initiatorSecret\"\n                (blur)=\"onBlur()\"\n                placeholder=\"{{secretPlaceholder}}\"\n                [vsan-disable-form-control]=\"isDisabled\"/>\n         <clr-control-error id=\"outgoing-secret-rules\">\n            {{'vsan.configure.iscsiTargets.target.dialog.secret.invalid' | localized}}\n            <ul class=\"list\">\n               <li>{{\"vsan.configure.iscsiTargets.target.dialog.secret.requirement1\" | localized}}</li>\n               <li>{{\"vsan.configure.iscsiTargets.target.dialog.secret.requirement2\" | localized}}</li>\n               <li>{{\"vsan.configure.iscsiTargets.target.dialog.secret.requirement3\" | localized}}</li>\n               <li>{{\"vsan.configure.iscsiTargets.target.dialog.secret.requirement4\" | localized}}</li>\n               <li>{{\"vsan.configure.iscsiTargets.target.dialog.secret.requirement5\" | localized}}</li>\n               <li>{{\"vsan.configure.iscsiTargets.target.dialog.secret.requirement6\" | localized}}</li>\n               <li>{{\"vsan.configure.iscsiTargets.target.dialog.secret.requirement7.middle\" | localized}}</li>\n               <li>{{\"vsan.configure.iscsiTargets.target.dialog.secret.requirement8\" | localized}}</li>\n            </ul>\n         </clr-control-error>\n      </clr-input-container>\n   </ng-container>\n</ng-container>","/* Copyright 2019-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport { NgControl } from '@angular/forms';\nimport {Directive, Input, OnInit} from \"@angular/core\";\n\n/**\n * This directive is used to provide declarative style disabling for angular reactive forms's input elements.\n * This is required since the reactive forms only provide a way to disable them initially,\n * but there is no binding as it seems and subsequent changes to the argument doesn't affect the\n * input's disabled element.\n * Here is a stackoverflow thread with the given issue and some more details on the current approach:\n * https://stackoverflow.com/questions/40494968/reactive-forms-disabled-attribute\n */\n@Directive({\n   selector: \"[vsan-disable-form-control]\"\n})\nexport class DisableControlDirective implements OnInit {\n\n   private isInit: boolean = false;\n\n   constructor( private ngControl : NgControl ) {\n   }\n\n   private _disableControl: boolean;\n\n   @Input(\"vsan-disable-form-control\")\n   set disableControl(value: boolean ) {\n      this._disableControl = value;\n      if (!this.ngControl.control || !this.isInit) {\n         return;\n      }\n      this.setDisabled();\n   }\n\n   get disableControl(): boolean {\n      return this._disableControl;\n   }\n\n   ngOnInit(): void {\n      this.setDisabled();\n      this.isInit = true;\n   }\n\n   private setDisabled(): void {\n      this.disableControl ? this.ngControl.control.disable() : this.ngControl.control.enable();\n   }\n}"]}