{"version":3,"sources":["webpack:///src/app/vsan/common/directive/clr-button-group/clr-button-base.directive.ts","webpack:///src/app/vsan/common/component/datagrid/tree-datagrid.module.ts","webpack:///src/app/vsan/common/service/navigation/model/ask-vmware-id.ts","webpack:///src/app/vsan/common/component/popup-list/popup-list.module.ts","webpack:///src/app/vsan/cluster-power/wizard/summary-page.html","webpack:///src/app/vsan/common/component/navigation/vsan-breadcrumb.module.ts","webpack:///src/app/vsan/cluster-power/wizard/precheck-page.html","webpack:///src/app/vsan/common/pipe/virtual-objects/health-state-label.pipe.ts","webpack:///src/app/vsan/cluster-power/wizard/vcenter-server-notice-page.html","webpack:///src/app/vsan/common/component/inventory/inventory-browser.module.ts","webpack:///src/app/vsan/common/service/status-updates/vsan-status-change.data.ts","webpack:///src/app/vsan/cluster-power/wizard/cluster-shutdown-wizard.html","webpack:///src/app/vsan/cluster-power/wizard/vcenter-server-notice-page.component.ts","webpack:///src/app/vsan/cluster-power/wizard/cluster-shutdown-wizard.component.ts","webpack:///src/app/vsan/common/directive/external-link/external-link.directive.ts","webpack:///src/app/vsan/cluster-power/wizard/cluster-shutdown-wizard.module.ts","webpack:///src/app/vsan/common/vsan-common.module.ts","webpack:///src/app/vsan/common/component/search/search.module.ts","webpack:///src/app/vsan/cluster-power/wizard/precheck-page.component.ts","webpack:///src/app/vsan/common/component/action-button/action-button.module.ts","webpack:///src/app/vsan/cluster-power/wizard/summary-page.component.ts"],"names":["ClrButtonBaseDirective","clrButton","name","Math","random","toString","directiveHolder","directives","push","TreeDatagridModule","AskVmwareId","PopupListModule","VsanBreadcrumbModule","VirtualObjectHealthStateLabelPipe","state","getVsanObjectHealthStatusText","InventoryBrowserModule","VsanStatusChangeData","taskRef","status","clusterRef","contextObject","changeType","StatusChangeType","VcenterServerNoticePageComponent","getString","ClusterShutdownWizardComponent","vsanStatusService","services","pages","isVcOnVsan","setWizardContext","context","storeChange","VSAN_CLUSTER_POWER_OFF","closeModalDialog","ExternalLinkDirective","el","resolver","renderer","navigationService","ASK_VMWARE_DEFAULT_TEXT_KEY","LEARN_MORE_DEFAULT_TEXT_KEY","CONTAINER_CLASS","NAVIGATION_EVENT_TYPE","LEAD_TO_NOWHERE_URL","HTML_ELEMENT_SPAN_NAME","HTML_ELEMENT_ICON_NAME","HTML_ELEMENT_ROLE_ATTR_NAME","HTML_ELEMENT_ROLE_ATTR_VALUE","ICON_SHAPE_ATTR_NAME","ICON_SHAPE_ATTR_VALUE","ICON_SIZE_ATTR_NAME","ICON_SIZE_ATTR_VALUE","ICON_CLASS_ATTR_NAME","ICON_CLASS_ATTR_VALUE","ICON_TITLE_ATTR_NAME","KB_URL","element","nativeElement","isLink","isButton","prepareExternalLink","button","index","addClass","setText","decorateLink","addLinkRole","initializeNavigationHandler","HTMLButtonElement","HTMLAnchorElement","span","createElement","innerText","getText","appendChild","icon","setAttribute","anchorText","key","linkElement","href","style","display","addEventListener","helpId","askVMware","articleId","navigateToAddress","url","routes","path","component","ClusterShutdownWizardModule","VsanCommonModule","SearchModule","PrecheckPageComponent","getHealthIconClass","getHealthStatusClass","getHealthIconShape","getHealthStatusShape","VsanHealthStatus","isEmpty","shutdownPrecheckFailedTests","vcOnVsanTest","find","test","isVcOnVsanTest","masterHost","getMasterHost","pageControls","rebuildToc","vmsShutdownTest","isVmsShutdownTest","redPrechecksCount","getRedPrechecksCount","nextButtonIsDisabled","isNextButtonDisabled","testId","VC_ON_VSAN_TEST_ID","VMS_SHUTDOWN_TEST_ID","infrastructureVMs","redChecks","filter","red","length","details","rows","rowValues","cellValue","warn","objectName","showInfrastructureVmsOption","isClusterPowerSelfContainSupported","showTestDetails","target","checked","map","row","create","object","type","value","serverGuid","MAX_POWERED_ON_VMS","ActionButtonModule","SummaryPageComponent","reasons","Map","reasonKeys","keys","isCustomReasonSelected","customReason","get","selectedReason","next","shutdownReason","undefined","trim","ifEmpty"],"mappings":"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","file":"114-es5.js","sourcesContent":["/* Copyright 2020 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {ClrButton} from \"@clr/angular\";\n\n/**\n * Use this class as base class for directive, which handles clr-button. It will help to link the rendered button with\n * the clr-button on which the directive is applied.\n */\nexport abstract class ClrButtonBaseDirective {\n\n   constructor(private clrButton: ClrButton) {\n      if (!clrButton) {\n         return;\n      }\n      // name should be set, if not provided in template - generate one. ClrButtom#name is used to generate the name\n      // attribute of the markup button. Later the name is used to match the generated markup with the directive.\n      if (!clrButton.name) {\n         clrButton.name = Math.random().toString();\n      }\n\n      const directiveHolder: DirectiveHolder = (clrButton as DirectiveHolder);\n      directiveHolder.directives = directiveHolder.directives || [];\n      directiveHolder.directives.push(this);\n   }\n\n   /**\n    * This method will be called when the actual html button is rendered.\n    */\n   abstract resolveButton(clrButton: ClrButton, button: HTMLButtonElement, index: number);\n}\n\nexport interface DirectiveHolder extends ClrButton {\n   directives: ClrButtonBaseDirective[];\n}","/* Copyright 2019-2020 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {NgModule} from \"@angular/core\";\nimport {CommonModule} from \"@angular/common\";\nimport {FormsModule} from \"@angular/forms\";\nimport {ClarityModule} from \"@clr/angular\";\nimport {ValidationModule} from \"@component/validation/validation.module\";\nimport {CommonPipeModule} from \"@pipe/common-pipe.module\";\nimport {TreeExpanderComponent} from \"@component/datagrid/tree-expander.component\";\nimport {TreeColumnComponent} from \"@component/datagrid/tree-column.component\";\nimport {EnumeratedFilterComponent} from \"./filter/enumerated-filter.component\";\nimport {EnumeratedFilterItemComponent} from \"./filter/enumerated-filter-item.component\";\nimport {EnumFilterComponent} from \"@component/datagrid/filter/enum-filter.component\";\n\n@NgModule({\n   imports: [\n      CommonModule,\n      FormsModule,\n      ClarityModule,\n      ValidationModule,\n      CommonPipeModule,\n   ],\n   declarations: [\n      TreeColumnComponent,\n      TreeExpanderComponent,\n      EnumeratedFilterComponent,\n      EnumeratedFilterItemComponent,\n      EnumeratedFilterComponent,\n      EnumFilterComponent,\n   ],\n   exports: [\n      TreeColumnComponent,\n      TreeExpanderComponent,\n      EnumeratedFilterComponent,\n      EnumeratedFilterItemComponent,\n      EnumFilterComponent,\n   ],\n})\nexport class TreeDatagridModule {\n}\n","/* Copyright 2021 VMware, Inc. All rights reserved. -- VMware Confidential */\n/**\n * IDs used in external navigation to Ask VMware pages\n */\nexport enum AskVmwareId {\n   CLUSTER_SHUTDOWN = \"com.vmware.vsan.clustershutdown.vmshutdown\",\n   FILE_SERVICE = \"fileservice.user.guide\",\n   FILE_SERVICE_IMBALANCE = \"com.vmware.vsan.fileservice.remediate.imbalance\",\n   TOP_CONTRIBUTORS = \"com.vmware.vsan.perf.graph.topn\",\n   OBFUSCATED_DATA = \"com.vmware.vsan.obfuscation.data.map\",\n   VM_CONSUMPTION_IOPS = \"com.vmware.vsan.perf.graph.cluster-domclient.iops\",\n}","/* Copyright 2019 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {NgModule} from \"@angular/core\";\nimport {CommonModule} from \"@angular/common\";\nimport {ClarityModule} from \"@clr/angular\";\nimport {CommonPipeModule} from \"@pipe/common-pipe.module\";\nimport {PopupListComponent} from \"@component/popup-list/popup-list.component\";\nimport {PopupListItemDirective} from \"@component/popup-list/popup-list-item.directive\";\n\n@NgModule({\n   imports: [\n      CommonModule,\n      ClarityModule,\n      CommonPipeModule\n   ],\n   declarations: [\n      PopupListComponent,\n      PopupListItemDirective\n   ],\n   exports: [\n      PopupListComponent,\n      PopupListItemDirective\n   ]\n})\nexport class PopupListModule {\n}\n","<!-- Copyright 2021 VMware, Inc. All rights reserved. -- VMware Confidential -->\n<div class=\"section-container\">\n   <div>{{\"vsan.cluster.shutdown.wizard.summaryPage.description\" | localized}}</div>\n   <div class=\"indent shutdown-steps\">\n      <ul>\n         <li>\n            <span>{{powerOffVmsMessage}}</span>\n            <vsan-validation [allowClose]=\"false\"\n                             [alert]=\"'vsan.cluster.shutdown.wizard.summaryPage.steps.powerOffVms.warning' | localized\"\n                             alertType=\"warning\">\n            </vsan-validation>\n         </li>\n         <li>{{\"vsan.cluster.shutdown.wizard.summaryPage.steps.turnOffDrsAndHa\" | localized}}</li>\n         <li>{{\"vsan.cluster.shutdown.wizard.summaryPage.steps.disableClusterMember\" | localized}}</li>\n         <li>{{\"vsan.cluster.shutdown.wizard.summaryPage.steps.disableAllCCPs\" | localized}}</li>\n         <li *ngIf=\"isVcOnVsan\">{{\"vsan.cluster.shutdown.wizard.summaryPage.steps.powerOffVcVm\" | localized}}</li>\n         <li>{{\"vsan.cluster.shutdown.wizard.summaryPage.steps.hostsInMaintenanceMode\" | localized}}</li>\n         <li>{{\"vsan.cluster.shutdown.wizard.summaryPage.steps.powerOffHosts\" | localized}}</li>\n      </ul>\n   </div>\n   <div>{{\"vsan.cluster.shutdown.wizard.summaryPage.steps.final\" | localized}}</div>\n</div>\n<div class=\"section-container-full\">\n   <clr-select-container>\n      <label for=\"shutdown-reason\">\n         {{\"vsan.cluster.shutdown.wizard.summaryPage.shutDownReason.label\" | localized}}\n      </label>\n      <select id=\"shutdown-reason\"\n              [(ngModel)]=\"selectedReason\"\n              (change)=\"shutdownReasonChanged()\"\n              clrSelect>\n         <option *ngFor=\"let reason of reasonKeys\"\n                 value=\"{{reason}}\">\n            {{reasons.get(reason) | localized}}</option>\n      </select>\n   </clr-select-container>\n   <clr-textarea-container class=\"control-full-width\"\n                           *ngIf=\"isCustomReasonSelected\">\n      <textarea id=\"manual-reason-input\"\n                class=\"reason-input\"\n                clrTextarea\n                vsan-auto-focus\n                [(ngModel)]=\"customReason\"\n                (keyup)=\"shutdownReasonChanged()\"\n                (keydown)=\"shutdownReasonChanged()\"\n                (keypress)=\"shutdownReasonChanged()\">\n      </textarea>\n   </clr-textarea-container>\n</div>","/* Copyright 2020 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {NgModule} from \"@angular/core\";\nimport {VsanBreadcrumbNavComponent} from \"./vsan-breadcrumb-nav.component\";\nimport {ClarityModule} from \"@clr/angular\";\nimport {CommonModule} from \"@angular/common\";\nimport {CommonDirectiveModule} from \"@directive/common-directive.module\";\nimport {CommonPipeModule} from \"@pipe/common-pipe.module\";\n\n@NgModule({\n   imports: [CommonModule, ClarityModule, CommonDirectiveModule, CommonPipeModule],\n   declarations: [VsanBreadcrumbNavComponent],\n   exports: [\n      VsanBreadcrumbNavComponent,\n   ],\n})\nexport class VsanBreadcrumbModule {}\n","<!-- Copyright 2021 VMware, Inc. All rights reserved. -- VMware Confidential -->\n<div class=\"precheck-tests-container\">\n   <div *ngIf=\"!shutdownPrecheckFailedTests.length\" class=\"icon-name-container\">\n      <clr-icon class=\"is-solid\"\n                size=\"18\"\n                [ngClass]=[getHealthIconClass(VsanHealthStatus.green)]\n                [attr.shape]=\"getHealthIconShape(VsanHealthStatus.green)\">\n      </clr-icon>\n      <span>{{\"vsan.cluster.shutdown.wizard.precheckPage.allTestsGreen\" | localized}}</span>\n   </div>\n   <ng-container *ngIf=\"shutdownPrecheckFailedTests.length\">\n      <div *ngFor=\"let test of shutdownPrecheckFailedTests\" class=\"precheck-test\">\n         <div class=\"icon-name-container\">\n            <clr-icon class=\"is-solid\"\n                      size=\"18\"\n                      [ngClass]=[getHealthIconClass(test.status)]\n                      [attr.shape]=\"getHealthIconShape(test.status)\">\n            </clr-icon>\n            <span>{{test.testName}}</span>\n         </div>\n         <div class=\"test-body indent\">\n            <div *ngIf=\"isVmsShutdownTest(test)\">\n               <div>{{getVmsShutdownTestAlert()}}</div>\n               <a id=\"learn-more-link\"\n                  [external-link]=\"'vsan.cluster.shutdown.wizard.precheckPage.vms.not.shutdown.link' | localized\"\n                  [helpId]=\"AskVmwareId.CLUSTER_SHUTDOWN\">\n               </a>\n            </div>\n            <div class=\"infrastructure-vm-option\">\n               <ng-container *ngIf=\"isVmsShutdownTest(test) && showInfrastructureVmsOption()\">\n                  <clr-checkbox-container>\n                     <clr-checkbox-wrapper>\n                        <input type=\"checkbox\"\n                               clrCheckbox\n                               id=\"mark-infrastructure-vms\"\n                               name=\"mark-infrastructure-vms\"\n                               (change)=\"markInfrastructureVms($event.target)\"/>\n                        <label for=\"mark-infrastructure-vms\">\n                           {{\"vsan.cluster.shutdown.wizard.precheckPage.infrastructure.vms\" | localized}}\n                        </label>\n                     </clr-checkbox-wrapper>\n                  </clr-checkbox-container>\n                  <vsan-validation *ngIf=\"infrastructureVMs?.length\"\n                                   [alertType]=\"'warning'\"\n                                   [allowClose]=\"false\"\n                                   [alert]=\"'vsan.cluster.shutdown.wizard.precheckPage.vms.not.shutdown.error.self.contain.cluster.warning' | localized\">\n                  </vsan-validation>\n               </ng-container>\n               <clr-datagrid *ngIf=\"showTestDetails(test)\"\n                             id=\"{{test.testId}}\">\n                  <clr-dg-column *ngFor=\"let column of test.details[0]?.columns\"\n                                 [ngClass]=\"{'string-column': column.columnType === 'string'}\">\n                     {{column.columnLabel}}\n                  </clr-dg-column>\n\n                  <clr-dg-row *ngFor=\"let row of test.details[0]?.rows; let rowIndex = index\">\n                     <clr-dg-cell id=\"cell-{{rowIndex}}-{{cellIndex}}\"\n                                  *ngFor=\"let cell of row?.rowValues; let cellIndex = index\"\n                                  vsan-show-title>\n                        <vsan-health-test-value [valueCell]=\"cell\"\n                                                [isVirtualObjectsLinkShown]=\"false\"\n                                                [enableActionLink]=\"false\">\n                        </vsan-health-test-value>\n                     </clr-dg-cell>\n                  </clr-dg-row>\n                  <clr-dg-footer *ngIf=\"test.details[0].rows?.length == 1\">\n                     {{\"vsan.common.datagrid.item\" | localized: test.details[0].rows?.length}}\n                  </clr-dg-footer>\n                  <clr-dg-footer *ngIf=\"test.details[0].rows?.length != 1\">\n                     {{\"vsan.common.datagrid.items\" | localized: test.details[0].rows ? test.details[0].rows.length : 0}}\n                  </clr-dg-footer>\n               </clr-datagrid>\n            </div>\n         </div>\n      </div>\n   </ng-container>\n</div>\n","/* Copyright 2017-2020 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Pipe, PipeTransform} from \"@angular/core\";\nimport {BaseHealthState, VsanHealthUtil} from \"@util/vsan-health-util\";\n\n@Pipe({\n   name: \"healthStateLabel\",\n})\nexport class VirtualObjectHealthStateLabelPipe implements PipeTransform {\n   transform(state: BaseHealthState | string): string {\n      return VsanHealthUtil.getVsanObjectHealthStatusText(state);\n   }\n}","<!-- Copyright 2021 VMware, Inc. All rights reserved. -- VMware Confidential -->\n<div>{{\"vsan.cluster.shutdown.vcOnVsan.label\" | localized}}</div>\n<ul>\n   <li>{{\"vsan.cluster.shutdown.vcOnVsan.services.unavailable.label\" | localized}}</li>\n   <li>{{\"vsan.cluster.shutdown.vcOnVsan.ui.unavailable.label\" | localized}}</li>\n</ul>\n<div class=\"not-responding-image\"></div>\n<div>{{\"vsan.cluster.shutdown.vcOnVsan.poweron.label\" | localized}}</div>\n<div class=\"highlight\">\n   {{\"vsan.cluster.shutdown.vcOnVsan.masterhost.label\" | localized}}\n</div>\n<vsan-icon-item [shape]=\"'host'\"\n                [label]=\"masterHost\"\n                [isIconSolid]=\"false\">\n</vsan-icon-item>","/* Copyright 2019-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {NgModule} from \"@angular/core\";\nimport {CommonModule} from \"@angular/common\";\nimport {FormsModule} from \"@angular/forms\";\nimport {ClarityModule} from \"@clr/angular\";\nimport {CommonPipeModule} from \"@pipe/common-pipe.module\";\nimport {InventoryBrowserComponent} from \"@component/inventory/inventory-browser.component\";\nimport {InventoryNodeComponent} from \"@component/inventory/inventory-node.component\";\nimport {WitnessCandidateInventoryService} from \"@generated/witness-candidate-inventory-service\";\nimport {DatacenterInventoryService} from \"@generated/datacenter-inventory-service\";\nimport {NetworkInventoryService} from \"@generated/network-inventory-service\";\nimport {ComputeInventoryService} from \"@generated/compute-inventory-service\";\nimport {IoInsightInventoryService} from \"@generated/io-insight-inventory-service\";\nimport {SearchModule} from \"@component/search/search.module\";\nimport {TreeNodeComponent} from \"@component/inventory/tree-view/tree-node.component\";\nimport {TreeViewComponent} from \"@component/inventory/tree-view/tree-view.component\";\nimport {DropdownObjectSelectorComponent} from \"@component/inventory/dropdown-object-selector/dropdown-object-selector.component\";\nimport {CommonDirectiveModule} from \"@directive/common-directive.module\";\nimport {InventoryNodesComponent} from \"@component/inventory/inventory-nodes.component\";\nimport {TreeNodesComponent} from \"@component/inventory/tree-view/tree-nodes.component\";\n\n@NgModule({\n   imports: [\n      CommonModule,\n      FormsModule,\n      ClarityModule,\n      CommonPipeModule,\n      SearchModule,\n      CommonDirectiveModule,\n   ],\n   declarations: [\n      InventoryBrowserComponent,\n      InventoryNodesComponent,\n      InventoryNodeComponent,\n      TreeNodeComponent,\n      TreeNodesComponent,\n      TreeViewComponent,\n      DropdownObjectSelectorComponent,\n   ],\n   exports: [\n      InventoryBrowserComponent,\n      DropdownObjectSelectorComponent,\n      TreeViewComponent,\n   ],\n   providers: [\n      WitnessCandidateInventoryService,\n      DatacenterInventoryService,\n      NetworkInventoryService,\n      ComputeInventoryService,\n      IoInsightInventoryService,\n   ],\n})\nexport class InventoryBrowserModule {\n}","/* Copyright 2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {ManagedObject} from \"@service/managed-object\";\nimport {TaskStatus} from \"@service/task-monitor-service\";\n\n/**\n * Holds info for a status change initiated by the current user on the vSAN cluster.\n * This data is stored in the Browser local storage, check <code>VsanStatusService</code>\n * and is accessible across iframes.\n */\nexport class VsanStatusChangeData {\n\n   /**\n    * A cluster managed object reference associated with this status change\n    */\n   clusterRef: ManagedObject;\n\n   /**\n    * A task moref, that is changing the status of the vSAN cluster.\n    */\n   taskRef: ManagedObject;\n\n   /**\n    * Enum value, holding information about what status change is happening with the vSAN cluster exactly.\n    */\n   changeType: StatusChangeType;\n\n   /**\n    * Upon completion of the task will hold either SUCCESS or ERROR, which could be used by subscribers.\n    */\n   taskStatus: TaskStatus;\n\n   constructor(taskRef: ManagedObject, status: StatusChangeType,\n         clusterRef: ManagedObject = ManagedObject.contextObject) {\n      this.taskRef = taskRef;\n      this.changeType = status;\n      this.clusterRef = clusterRef;\n   }\n}\n\n/**\n * Enum with codes, used to differentiate different vSAN configuration events like\n * vSAN enabled, cluster shutdown, etc.\n */\nexport enum StatusChangeType {\n   /**\n    * A cluster has had the vSAN service enabled.\n    */\n   VSAN_SERVICE_ENABLED,\n   /**\n    * A cluster has had the vSAN service disabled.\n    */\n   VSAN_SERVICE_DISABLED,\n   /**\n    * A vSAN cluster has been powered on.\n    */\n   VSAN_CLUSTER_POWER_ON,\n   /**\n    * A vSAN cluster has been shut down.\n    */\n   VSAN_CLUSTER_POWER_OFF,\n}","<!-- Copyright 2021 VMware, Inc. All rights reserved. -- VMware Confidential -->\n<vsan-validation *ngIf=\"errorMessage\" [alert]=\"errorMessage\" [allowClose]=\"false\"></vsan-validation>\n<vsan-flow-wizard\n      [title]=\"'vsan.cluster.shutdown.wizard.title' | localized\"\n      [pageSets]=\"pages\"\n      [contextProperties]=\"context\"\n      startingTaskProperty=\"shutdownCluster\"\n      [services]=\"services\"\n      [finishButtonText]=\"'vsan.cluster.shutdown.wizard.finishButton' | localized\"\n      [finishButtonStyle]=\"'btn-warning'\"\n      (onFinish)=\"onConfigureFinish($event)\">\n</vsan-flow-wizard>\n","/* Copyright 2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component} from \"@angular/core\";\nimport {InputProperty, WizardPage} from \"@component/wizard/flow-metadata\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\n\n@WizardPage(\n      VsanUiUtils.getString(\"vsan.cluster.shutdown.wizard.vcenterServerNotificationPage.title\"),\n)\n@Component({\n   templateUrl: \"vcenter-server-notice-page.html\",\n   styleUrls: [\"vcenter-server-notice-page.scss\"],\n})\nexport class VcenterServerNoticePageComponent {\n\n   /**\n    * The master host of the vSAN cluster.\n    */\n   @InputProperty()\n   masterHost: string;\n\n}","/* Copyright 2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, OnInit} from \"@angular/core\";\nimport {PageSet} from \"@component/wizard/flow-wizard.component\";\nimport {PrecheckPageComponent} from \"./precheck-page.component\";\nimport {VcenterServerNoticePageComponent} from \"./vcenter-server-notice-page.component\";\nimport {SummaryPageComponent} from \"./summary-page.component\";\nimport {ManagedObject} from \"@service/managed-object\";\nimport {ClusterShutdownService} from \"@generated/cluster-shutdown-service\";\nimport {VsanStatusService} from \"@service/status-updates/vsan-status.service\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {StatusChangeType, VsanStatusChangeData} from \"@service/status-updates/vsan-status-change.data\";\n\n@Component({\n   templateUrl: \"cluster-shutdown-wizard.html\",\n   selector: \"cluster-shutdown-wizard\",\n})\nexport class ClusterShutdownWizardComponent implements OnInit {\n   /**\n    * Holds wizard context data, shared between all the pages.\n    */\n   context: any;\n   errorMessage: string;\n   services: any[] = [ClusterShutdownService];\n\n   constructor(private vsanStatusService: VsanStatusService) {\n   }\n\n   ngOnInit(): void {\n      this.setWizardContext();\n   }\n\n   private setWizardContext(): void {\n      this.context = {\n         clusterRef: ManagedObject.contextObject,\n      };\n   }\n\n   pages: PageSet[] = [\n      new PageSet([PrecheckPageComponent]),\n      new PageSet([VcenterServerNoticePageComponent], (isVcOnVsan) => isVcOnVsan),\n      new PageSet([SummaryPageComponent]),\n   ];\n\n   onConfigureFinish(taskRef: ManagedObject): void {\n      this.vsanStatusService.storeChange(new VsanStatusChangeData(taskRef, StatusChangeType.VSAN_CLUSTER_POWER_OFF));\n      VsanUiUtils.closeModalDialog();\n   }\n}","/* Copyright 2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {\n   AfterViewInit,\n   ComponentFactoryResolver,\n   Directive,\n   ElementRef,\n   Host,\n   Input,\n   Optional,\n   Renderer2,\n   Self,\n} from \"@angular/core\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {NavigationService} from \"@navigation/navigation.service\";\nimport {ClrButtonBaseDirective} from \"@directive/clr-button-group/clr-button-base.directive\";\nimport {ClrButton} from \"@clr/angular\";\n\n/**\n * Decorates a button or an anchor as external link. Requires one of the optional parameters articleId, helpId or url.\n *\n * @param external-link: Optional. Localization key of the text label of the external link. If omitted default label\n * will be used - \"Learn more\" for anchors or \"Ask VMWare\" for buttons.\n * @param articleId - Optional. Id of article in knowledge base.\n * @param helpId - Optional. Help id which will redirect to Knowledge Base.\n * @param url - Optional. External URL.\n */\n@Directive({\n   selector: \"a[external-link], button[external-link], clr-button[external-link]\",\n})\nexport class ExternalLinkDirective extends ClrButtonBaseDirective implements AfterViewInit {\n   private readonly ASK_VMWARE_DEFAULT_TEXT_KEY: string = \"vsan.common.askVMware\";\n   private readonly LEARN_MORE_DEFAULT_TEXT_KEY: string = \"vsan.common.learnMore\";\n\n   private readonly CONTAINER_CLASS: string = \"icon-name-container\";\n   private readonly NAVIGATION_EVENT_TYPE: string = \"click\";\n   private readonly LEAD_TO_NOWHERE_URL: string = \"javascript://\";\n   private readonly HTML_ELEMENT_SPAN_NAME: string = \"span\";\n   private readonly HTML_ELEMENT_ICON_NAME: string = \"clr-icon\";\n   private readonly HTML_ELEMENT_ROLE_ATTR_NAME: string = \"role\";\n   private readonly HTML_ELEMENT_ROLE_ATTR_VALUE: string = \"link\";\n   private readonly ICON_SHAPE_ATTR_NAME: string = \"shape\";\n   private readonly ICON_SHAPE_ATTR_VALUE: string = \"pop-out\";\n   private readonly ICON_SIZE_ATTR_NAME: string = \"size\";\n   private readonly ICON_SIZE_ATTR_VALUE: string = \"16\";\n   private readonly ICON_CLASS_ATTR_NAME: string = \"class\";\n   private readonly ICON_CLASS_ATTR_VALUE: string = \"link\";\n   private readonly ICON_TITLE_ATTR_NAME: string = \"title\";\n\n   private readonly KB_URL: string = \"http://kb.vmware.com/kb/\";\n\n   @Input(\"external-link\")\n   anchorText: string;\n\n   @Input()\n   articleId: string;\n\n   @Input()\n   helpId: string;\n\n   @Input()\n   url: string;\n\n   constructor(private el: ElementRef<HTMLElement>,\n         private resolver: ComponentFactoryResolver,\n         private renderer: Renderer2,\n         private navigationService: NavigationService,\n         // this variable will be initialized only if the host is clr-button\n         @Host() @Self() @Optional() clrButton: ClrButton) {\n      super(clrButton);\n   }\n\n   ngAfterViewInit(): void {\n      const element: HTMLElement = this.el.nativeElement;\n      // continue only if element is HTML link or button\n      if (!this.isLink(element) && !this.isButton(element)) {\n         // element is clr-button, wait until html button for it is resolved - handled by resloveButton\n         return;\n      }\n      this.prepareExternalLink(element);\n   }\n\n   resolveButton(clrButton: ClrButton, button: HTMLButtonElement, index: number): void {\n      // only if element is clr-button. At this point the html button is already resolved. Apply on it.\n      this.prepareExternalLink(button);\n   }\n\n   private prepareExternalLink(element: HTMLElement): void {\n      this.renderer.addClass(element, this.CONTAINER_CLASS);\n\n      this.setText(element);\n      if (this.isLink(element)) {\n         this.decorateLink(element);\n      } else {\n         this.addLinkRole(element);\n      }\n\n      this.initializeNavigationHandler(element);\n   }\n\n   private isButton(element: HTMLElement): boolean {\n      return element instanceof HTMLButtonElement;\n   }\n\n   private isLink(element: HTMLElement): boolean {\n      return element instanceof HTMLAnchorElement;\n   }\n\n   private setText(element: HTMLElement): void {\n      const span: HTMLSpanElement = this.renderer.createElement(this.HTML_ELEMENT_SPAN_NAME);\n      span.innerText = this.getText(element);\n      this.renderer.appendChild(element, span);\n\n      const icon: HTMLSpanElement = this.renderer.createElement(this.HTML_ELEMENT_ICON_NAME);\n      icon.setAttribute(this.ICON_SHAPE_ATTR_NAME, this.ICON_SHAPE_ATTR_VALUE);\n      icon.setAttribute(this.ICON_SIZE_ATTR_NAME, this.ICON_SIZE_ATTR_VALUE);\n      icon.setAttribute(this.ICON_CLASS_ATTR_NAME, this.ICON_CLASS_ATTR_VALUE);\n      // Set title of the icon for screen readers clarity\n      icon.setAttribute(this.ICON_TITLE_ATTR_NAME, VsanUiUtils.getString(\"vsan.screenReader.label.externalLink.icon\"));\n      this.renderer.appendChild(element, icon);\n   }\n\n   private getText(element: HTMLElement): string {\n      if (this.anchorText) {\n         return this.anchorText;\n      }\n      const key: string = this.isButton(element) ? this.ASK_VMWARE_DEFAULT_TEXT_KEY : this.LEARN_MORE_DEFAULT_TEXT_KEY;\n      return VsanUiUtils.getString(key);\n   }\n\n   private decorateLink(element: HTMLElement): void {\n      const linkElement: HTMLLinkElement = element as HTMLLinkElement;\n      // don't use href attribute. If omitted, the link will be not visualized properly.\n      linkElement.href = this.LEAD_TO_NOWHERE_URL;\n      // display link on same line\n      linkElement.style.display = \"inline-flex\";\n   }\n\n   private initializeNavigationHandler(element: HTMLElement): void {\n      element.addEventListener(this.NAVIGATION_EVENT_TYPE, () => {\n         if (this.helpId) {\n            this.navigationService.askVMware(this.helpId);\n            return;\n         }\n         if (this.articleId) {\n            this.navigationService.navigateToAddress(`${this.KB_URL}${this.articleId}`);\n            return;\n         }\n         if (this.url) {\n            this.navigationService.navigateToAddress(this.url);\n         }\n      });\n   }\n\n   // Indicate external navigation by assigning \"link\" role\n   private addLinkRole(element: HTMLElement): void {\n      this.renderer.setAttribute(element, this.HTML_ELEMENT_ROLE_ATTR_NAME, this.HTML_ELEMENT_ROLE_ATTR_VALUE);\n   }\n}","/* Copyright 2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {NgModule} from \"@angular/core\";\nimport {CommonModule} from \"@angular/common\";\nimport {RouterModule, Routes} from \"@angular/router\";\nimport {ClarityModule} from \"@clr/angular\";\nimport {VsanCommonModule} from \"app/vsan/common/vsan-common.module\";\nimport {FlowWizardModule} from \"@component/wizard/flow-wizard.module\";\nimport {PrecheckPageComponent} from \"./precheck-page.component\";\nimport {ClusterShutdownWizardComponent} from \"./cluster-shutdown-wizard.component\";\nimport {VcenterServerNoticePageComponent} from \"./vcenter-server-notice-page.component\";\nimport {SummaryPageComponent} from \"./summary-page.component\";\nimport {FormsModule} from \"@angular/forms\";\n\nconst routes: Routes = [\n   {\n      path: \"\",\n      component: ClusterShutdownWizardComponent,\n   },\n];\n\n@NgModule({\n   imports: [\n      CommonModule,\n      ClarityModule,\n      VsanCommonModule,\n      FlowWizardModule,\n      FormsModule,\n      RouterModule.forChild(routes),\n   ],\n   declarations: [\n      ClusterShutdownWizardComponent,\n      PrecheckPageComponent,\n      VcenterServerNoticePageComponent,\n      SummaryPageComponent,\n   ],\n   entryComponents: [\n      PrecheckPageComponent,\n      VcenterServerNoticePageComponent,\n      SummaryPageComponent,\n   ],\n})\nexport class ClusterShutdownWizardModule {\n}","/* Copyright 2019 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {NgModule} from \"@angular/core\";\nimport {CommonDirectiveModule} from \"@directive/common-directive.module\";\nimport {CommonPipeModule} from \"@pipe/common-pipe.module\";\nimport {ValidationModule} from \"@component/validation/validation.module\";\nimport {ActionButtonModule} from \"@component/action-button/action-button.module\";\nimport {PromptModule} from \"@component/dialog/prompt/prompt.module\";\nimport {CommonCellsModule} from \"@component/cell/common-cells.module\";\nimport {InventoryBrowserModule} from \"@component/inventory/inventory-browser.module\";\nimport {SearchModule} from \"@component/search/search.module\";\nimport {TreeDatagridModule} from \"@component/datagrid/tree-datagrid.module\";\nimport {DatetimePickerModule} from \"@component/datetime-picker/datetime-picker.module\";\nimport {PopupListModule} from \"@component/popup-list/popup-list.module\";\nimport {VsanBreadcrumbModule} from \"@component/navigation/vsan-breadcrumb.module\";\n\n@NgModule({\n   imports: [\n         CommonDirectiveModule,\n         CommonPipeModule,\n         ValidationModule,\n         ActionButtonModule,\n         PromptModule,\n         CommonCellsModule,\n         InventoryBrowserModule,\n         SearchModule,\n         TreeDatagridModule,\n         DatetimePickerModule,\n         PopupListModule,\n         VsanBreadcrumbModule,\n   ],\n   exports: [\n      CommonDirectiveModule,\n      CommonPipeModule,\n      ValidationModule,\n      ActionButtonModule,\n      PromptModule,\n      CommonCellsModule,\n      InventoryBrowserModule,\n      SearchModule,\n      TreeDatagridModule,\n      DatetimePickerModule,\n      PopupListModule,\n      VsanBreadcrumbModule,\n   ],\n})\nexport class VsanCommonModule { }","/* Copyright 2019 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {NgModule} from \"@angular/core\";\nimport {CommonModule} from \"@angular/common\";\nimport {FormsModule} from \"@angular/forms\";\nimport {ClarityModule} from \"@clr/angular\";\nimport {CommonPipeModule} from \"@pipe/common-pipe.module\";\nimport {SearchComponent} from \"@component/search/search.component\";\n\n@NgModule({\n   imports: [\n      CommonModule,\n      FormsModule,\n      ClarityModule,\n      CommonPipeModule\n   ],\n   declarations: [\n      SearchComponent\n   ],\n   exports: [\n      SearchComponent\n   ],\n})\nexport class SearchModule {\n}\n","/* Copyright 2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, OnInit} from \"@angular/core\";\nimport {InputProperty, OutputProperty, WizardPage} from \"@component/wizard/flow-metadata\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {VsanHealthData} from \"@generated/vsan-health-data\";\nimport {VsanHealthStatus} from \"@generated/vsan-health-status\";\nimport {VsanHealthUtil} from \"@util/vsan-health-util\";\nimport {VsanTestData} from \"@generated/vsan-test-data\";\nimport {PageItem} from \"@component/wizard/page-item\";\nimport {PageControls} from \"@component/wizard/flow-wizard.component\";\nimport {Logger} from \"@util/logger\";\nimport {AskVmwareId} from '@service/navigation/model/ask-vmware-id';\nimport {ManagedObject} from \"@service/managed-object\";\n\n@WizardPage(\n      VsanUiUtils.getString(\"vsan.cluster.shutdown.wizard.precheckPage.title\"),\n)\n@Component({\n   templateUrl: \"precheck-page.html\",\n   styleUrls: [\"precheck-page.scss\"],\n})\nexport class PrecheckPageComponent implements OnInit {\n   readonly AskVmwareId: typeof AskVmwareId = AskVmwareId;\n\n   private static readonly VC_ON_VSAN_TEST_ID: string = \"com.vmware.vsan.health.test.vconvsan\";\n   private static readonly VMS_SHUTDOWN_TEST_ID: string = \"com.vmware.vsan.health.test.allvmsshutdown\";\n   private static readonly MAX_POWERED_ON_VMS: number = 10;\n\n   getHealthIconClass: (val: VsanHealthStatus) => string = VsanHealthUtil.getHealthStatusClass;\n   getHealthIconShape: (val: VsanHealthStatus) => string = VsanHealthUtil.getHealthStatusShape;\n\n   VsanHealthStatus: typeof VsanHealthStatus = VsanHealthStatus;\n\n   @InputProperty()\n   private pageControls: PageControls;\n\n   @InputProperty()\n   shutdownPrecheckFailedTests: VsanTestData[];\n\n   @InputProperty(\"clusterPowerSelfContainSupported\")\n   isClusterPowerSelfContainSupported: boolean;\n\n   @OutputProperty()\n   isVcOnVsan: boolean = false;\n\n   @OutputProperty()\n   masterHost: string;\n\n   @OutputProperty()\n   infrastructureVMs?: ManagedObject[];\n\n   vmsShutdownTest: VsanTestData;\n\n   private redPrechecksCount: number;\n\n   ngOnInit(): void {\n      if (VsanUiUtils.isEmpty(this.shutdownPrecheckFailedTests)) {\n         return;\n      }\n\n      const vcOnVsanTest: VsanTestData = this.shutdownPrecheckFailedTests.find(test => this.isVcOnVsanTest(test));\n      this.isVcOnVsan = !!vcOnVsanTest;\n      if (this.isVcOnVsan) {\n         this.masterHost = this.getMasterHost(vcOnVsanTest);\n         // Rebuild the wizard's TOC to show the VC notice page\n         this.pageControls.rebuildToc();\n      }\n      this.vmsShutdownTest = this.shutdownPrecheckFailedTests.find(test => this.isVmsShutdownTest(test));\n      this.redPrechecksCount = this.getRedPrechecksCount();\n\n      (this.pageControls as PageItem).nextButtonIsDisabled = this.isNextButtonDisabled();\n   }\n\n   private isVcOnVsanTest(test: VsanTestData): boolean {\n      return test.testId === PrecheckPageComponent.VC_ON_VSAN_TEST_ID;\n   }\n\n   isVmsShutdownTest(test: VsanTestData): boolean {\n      return test.testId === PrecheckPageComponent.VMS_SHUTDOWN_TEST_ID;\n   }\n\n   private isNextButtonDisabled(): boolean {\n      return this.redPrechecksCount > 0 && !this.vmsShutdownTest\n            || this.redPrechecksCount > 1\n            || this.vmsShutdownTest && VsanUiUtils.isEmpty(this.infrastructureVMs);\n   }\n\n   private getRedPrechecksCount(): number {\n      if (VsanUiUtils.isEmpty(this.shutdownPrecheckFailedTests)) {\n        return 0;\n      }\n      const redChecks: VsanTestData[] = this.shutdownPrecheckFailedTests.filter(test => test.status === VsanHealthStatus.red);\n      return redChecks ? redChecks.length : 0;\n   }\n\n   /**\n    * When the VC is on vSAN we need info for the master host, to show it in the vCenter server notice page\n    */\n   private getMasterHost(vcOnVsanTest: VsanTestData): string {\n      if (!vcOnVsanTest\n            || VsanUiUtils.isEmpty(vcOnVsanTest.details)\n            || VsanUiUtils.isEmpty(vcOnVsanTest.details[0].rows)\n            || VsanUiUtils.isEmpty(vcOnVsanTest.details[0].rows[0].rowValues)\n            || !vcOnVsanTest.details[0].rows[0].rowValues[0].cellValue) {\n         Logger.warn(\"Couldn't find master host for VC on vSAN cluster!\");\n         return null;\n      }\n      return vcOnVsanTest.details[0].rows[0].rowValues[0].cellValue.objectName;\n   }\n\n   getVmsShutdownTestAlert(): string {\n      return this.showInfrastructureVmsOption()\n            ? VsanUiUtils.getString(\"vsan.cluster.shutdown.wizard.precheckPage.vms.not.shutdown.error.self.contain.cluster\")\n            : VsanUiUtils.getString(\"vsan.cluster.shutdown.wizard.precheckPage.vms.not.shutdown.error\");\n   }\n\n   /**\n    * The infrastructure VMs option should be visible if the capability is set and the VC is on vSAN, but it should be\n    * hidden if not powered off VMs are more than 10\n    */\n   showInfrastructureVmsOption(): boolean {\n      return this.isClusterPowerSelfContainSupported && this.isVcOnVsan && this.showTestDetails(this.vmsShutdownTest);\n   }\n\n   markInfrastructureVms(target: any): void {\n      if (target.checked) {\n         this.infrastructureVMs = this.vmsShutdownTest.details[0].rows\n               .map(row => ManagedObject.create(\n                     row.rowValues[0]?.cellValue.object.type,\n                     row.rowValues[0]?.cellValue.object.value,\n                     row.rowValues[0]?.cellValue.object.serverGuid));\n      } else {\n         this.infrastructureVMs = null;\n      }\n\n      (this.pageControls as PageItem).nextButtonIsDisabled = this.isNextButtonDisabled();\n   }\n\n   showTestDetails(test: VsanTestData): boolean {\n      if (VsanUiUtils.isEmpty(test.details)) {\n         return false;\n      }\n\n      // TODO bbambalo [VSANCORE-7763] Check whether the limit of max visualized entities should be applied to the other\n      //  tests as well\n      return this.isVmsShutdownTest(test)\n            ? test.details[0].rows.length <= PrecheckPageComponent.MAX_POWERED_ON_VMS\n            : true;\n   }\n}","/* Copyright 2019-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {NgModule} from \"@angular/core\";\nimport {CommonModule} from \"@angular/common\";\nimport {ClarityModule} from \"@clr/angular\";\nimport {ActionButtonSeparatorComponent} from \"@component/action-button/action-button-separator.component\";\nimport {ButtonTitleDirective} from \"@component/action-button/button-title.directive\";\nimport {ButtonGroupDirective} from \"@component/action-button/button-group.directive\";\nimport {ButtonGroupWrapDirective} from \"@component/action-button/button-group-wrap.directive\";\n\n@NgModule({\n   imports: [\n      CommonModule,\n      ClarityModule,\n   ],\n   declarations: [\n      ActionButtonSeparatorComponent,\n      ButtonGroupDirective,\n      ButtonGroupWrapDirective,\n      ButtonTitleDirective,\n   ],\n   exports: [\n      ActionButtonSeparatorComponent,\n      ButtonGroupDirective,\n      ButtonGroupWrapDirective,\n      ButtonTitleDirective,\n   ]\n})\nexport class ActionButtonModule {\n}\n","/* Copyright 2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, OnInit} from \"@angular/core\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {InputProperty, OutputProperty, WizardPage} from \"@component/wizard/flow-metadata\";\nimport {PageControls} from \"@component/wizard/flow-wizard.component\";\nimport {PageItem} from \"@component/wizard/page-item\";\nimport {StringUtil} from \"@util/string-util\";\n\n@WizardPage(\n      VsanUiUtils.getString(\"vsan.cluster.shutdown.wizard.summaryPage.title\"),\n)\n@Component({\n   templateUrl: \"summary-page.html\",\n   styleUrls: [\"summary-page.scss\"],\n})\nexport class SummaryPageComponent implements OnInit {\n\n   reasons: Map<string, string> = new Map<string, string>([\n      [\"custom\", \"vsan.cluster.shutdown.wizard.summaryPage.shutDownReason.custom.label\"],\n      [\"maintenance\", \"vsan.cluster.shutdown.wizard.summaryPage.shutDownReason.maintenance.label\"],\n      [\"troubleshoot\", \"vsan.cluster.shutdown.wizard.summaryPage.shutDownReason.troubleshoot.label\"],\n      [\"upgrade\", \"vsan.cluster.shutdown.wizard.summaryPage.shutDownReason.upgrade.label\"],\n   ]);\n   reasonKeys: string[] = [...this.reasons.keys()];\n\n   @InputProperty()\n   private pageControls: PageControls;\n\n   @InputProperty()\n   isVcOnVsan: boolean;\n\n   @OutputProperty(OutputProperty.ifEmpty(VsanUiUtils.getString(\n         \"vsan.cluster.shutdown.wizard.summaryPage.emptyReason.error\")))\n   get shutdownReason(): string {\n      return this.isCustomReasonSelected ?\n            this.customReason :\n            VsanUiUtils.getString(this.reasons.get(this.selectedReason));\n   }\n\n   selectedReason: string;\n   customReason: string;\n\n   async ngOnInit(): Promise<void> {\n      // by default select the type custom reason\n      this.selectedReason = this.reasons.keys().next().value;\n      (this.pageControls as PageItem).nextButtonIsDisabled = true;\n   }\n\n   get isCustomReasonSelected(): boolean {\n      return this.selectedReason === this.reasons.keys().next().value;\n   }\n\n   get powerOffVmsMessage(): string {\n      return this.isVcOnVsan ?\n            VsanUiUtils.getString(\"vsan.cluster.shutdown.wizard.summaryPage.steps.powerOffVms.vcOnVsan\") :\n            VsanUiUtils.getString(\"vsan.cluster.shutdown.wizard.summaryPage.steps.powerOffVms\");\n   }\n\n   shutdownReasonChanged(): void {\n      (this.pageControls as PageItem).nextButtonIsDisabled = this.shutdownReason === undefined ||\n            this.shutdownReason.trim() === \"\";\n   }\n}\n"]}