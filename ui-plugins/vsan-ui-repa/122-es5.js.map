{"version":3,"sources":["webpack:///src/app/vsan/vm/io-diagnostics/dialog/IoLatencyPipe.ts","webpack:///src/app/vsan/vm/io-diagnostics/dialog/latency-export-dialog.html","webpack:///src/app/vsan/common/util/reactive-form-util.ts","webpack:///src/app/vsan/vm/io-diagnostics/dialog/latency-details-dialog.component.ts","webpack:///src/app/vsan/common/service/navigation/model/knowledge-base-id.ts","webpack:///src/app/vsan/vm/io-diagnostics/dialog/run-instance-dialog.html","webpack:///src/app/vsan/vm/io-diagnostics/dialog/run-instance-dialog.component.ts","webpack:///src/app/vsan/vm/io-diagnostics/dialog/io-diagnostics-dialog.module.ts","webpack:///src/app/vsan/vm/io-diagnostics/dialog/latency-details-dialog.html","webpack:///src/app/vsan/vm/io-diagnostics/dialog/latency-export-dialog.component.ts","webpack:///src/app/vsan/common/component/datagrid/filter/base-filter.ts","webpack:///src/app/vsan/common/util/dom-util.ts","webpack:///src/app/vsan/common/component/datagrid/tree-datagrid.ts"],"names":["IoLatencyPipe","latency","formatLatency","id","ReactiveFormUtil","FORM_CONTROLS_DELIMITER","validateAllFormFields","formGroup","markAsTouched","Object","keys","controls","forEach","field","control","get","onlySelf","childControl","validateControls","updateValueAndValidity","emitEvent","updateFormControlsValueAndValidity","getFormControlPath","parts","join","LatencyDetailsDialogComponent","navigationService","title","avgReadFilter","stddevReadFilter","avgWriteFilter","stddevWriteFilter","navigateToHealthPage","context","selectedSubTestId","getHealthTestId","navigateTo","CLUSTER_HEALTH","clsRef","closeModal","getModalContext","latencies","latenciesStats","sentenceCase","typeLabel","localizationKey","getLatencyType","DOM_OWNER","PERF_DOM_OWNER","CAPACITY_DOM_OWNER","NETWORK","PERF_NETWORK","CAPACITY_NETWORK","LSOM","PERF_LSOM","CAPACITY_LSOM","getString","isDomOwner","type","NETWORK_LATENCY_CHECK","PHYSICAL_DISK_OPERATION_HEALTH","closeModalDialog","KnowledgeBaseId","RunInstanceDialogComponent","ioDiagnosticsService","taskService","formBuilder","MIN_MINUTES","MAX_MINUTES","STEP_IN_MINUTES","durationInMinutes","durationInputFormControl","durationSliderFormControl","awaitThenReload","taskRef","getAwaitResult","then","runPrecheck","form","group","required","min","max","vmRef","controlName","currentInput","invalid","toNumber","value","setValue","runIODiagnosticsPrecheck","precheckResult","durationInSeconds","SECONDS_IN_MINUTE","runIoDiagnosticsInstance","supported","rethrow","routes","path","component","IoDiagnosticsDialogModule","LatencyExportDialogComponent","vmdksIdentifiers","selectedVmdksIdentifiers","Map","hasError","vmdkIdentifier","set","result","key","push","isEmpty","BaseFilter","data","search","label","stringify","toLowerCase","indexOf","accepts","DomUtil","element","callback","addEventListener","event","keyCode","selector","setTimeout","$","hide","show","elementName","document","getElementById","TreeDatagrid","childItems","rootItems","filters","clear","refreshGrid","rowData","collapseAll","rows","r","collapse","expandAll","expand","roots","content","flatten","filter","TreeFilter","index","splice","comparator","ascending","sortAscending","row","isExpanded","rowIndex","flattenedChildren","depth","length","removeCount","i","items","parent","sortedItems","sort","item1","item2","item","children","filteredOut","matchFilter","predicate","TreeDatagridRow","toggle","isExpandable","childField","apply","changes","_predicate","getValue","val"],"mappings":"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","file":"122-es5.js","sourcesContent":["/* Copyright 2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Pipe, PipeTransform} from \"@angular/core\";\nimport {IoDiagnosticsUtil} from \"../io-diagnostics.util\";\n\n@Pipe({name: 'ioLatency'})\nexport class IoLatencyPipe implements PipeTransform {\n   transform(latency: number): string {\n      return IoDiagnosticsUtil.formatLatency(latency);\n   }\n}","<!--Copyright 2021 VMware, Inc. All rights reserved. -- VMware Confidential-->\n<vsan-default-prompt\n      [title]=\"'vsan.monitor.vm.iodiagnostics.export.dialog.title' | localized\"\n      [confirmText]=\"'vsan.monitor.vm.iodiagnostics.export.dialog.export' | localized\"\n      (onConfirm)=\"onConfirm()\">\n   <div class=\"dialog-container\">\n      <vsan-validation id=\"validation-message\"\n                       *ngIf=\"hasError\"\n                       [alert]=\"'vsan.monitor.vm.iodiagnostics.export.dialog.validation.noSelection' | localized\"\n                       (onClosed)=\"hasError = false\">\n      </vsan-validation>\n      <div>{{\"vsan.monitor.vm.iodiagnostics.export.dialog.description\" | localized}}</div>\n      <div>{{\"vsan.monitor.vm.iodiagnostics.export.dialog.label\" | localized}}</div>\n      <div class=\"checkbox-container\">\n         <clr-checkbox-container *ngFor=\"let vmdkIdentifier of vmdksIdentifiers\">\n            <clr-checkbox-wrapper>\n               <input type=\"checkbox\"\n                      clrCheckbox\n                      id=\"{{vmdkIdentifier.id}}\"\n                      name=\"{{vmdkIdentifier.id}}\"\n                      [ngModel]=\"selectedVmdksIdentifiers.get(vmdkIdentifier.id)\"\n                      (ngModelChange)=\"selectedVmdksIdentifiers.set(vmdkIdentifier.id, $event)\"/>\n               <label>{{vmdkIdentifier.name}}</label>\n            </clr-checkbox-wrapper>\n         </clr-checkbox-container>\n      </div>\n   </div>\n</vsan-default-prompt>","/* Copyright 2017 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {FormArray, FormControl, FormGroup} from \"@angular/forms\";\n\nexport class ReactiveFormUtil {\n\n   private static readonly FORM_CONTROLS_DELIMITER: string = \".\";\n\n   /*\n    * Trigger validation on all controls in a form group and mark them as touched to display errors\n    */\n   static validateAllFormFields = (formGroup: FormGroup): void => {\n      formGroup.markAsTouched();\n      Object.keys(formGroup.controls).forEach(field => {\n         const control = formGroup.get(field);\n         control.markAsTouched({ onlySelf: true });\n         if (control instanceof FormGroup) {\n            ReactiveFormUtil.validateAllFormFields(control);\n         } else if (control instanceof FormArray) {\n            control.controls.forEach(\n                  (childControl: FormGroup) => ReactiveFormUtil.validateAllFormFields(childControl));\n         } else if (control instanceof FormControl) {\n            ReactiveFormUtil.validateControls([control]);\n         }\n      });\n   };\n\n   static validateControls = (controls: FormControl[]): void => {\n      controls.forEach((control) => {\n         control.markAsTouched({onlySelf: true});\n         control.updateValueAndValidity({\n            onlySelf: false,\n            emitEvent: true\n         });\n      });\n   };\n\n   /**\n    * Trigger updateValueAndValidity() to call ValidatorFn and update validity of all controls in a form group.\n    */\n   static updateFormControlsValueAndValidity = (formGroup: FormGroup) => {\n      Object.keys(formGroup.controls).forEach(control => {\n         if (formGroup.get(control) instanceof FormControl) {\n            formGroup.get(control).updateValueAndValidity();\n         }\n      })\n   };\n\n   static getFormControlPath = (...parts: string[]): string => {\n      return parts.join(ReactiveFormUtil.FORM_CONTROLS_DELIMITER);\n   };\n}\n","/* Copyright 2021-2022 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, OnInit} from \"@angular/core\";\nimport {PipeFilter} from \"@component/datagrid/filter/pipe-filter\";\nimport {VsanIoLatencyType} from \"@generated/vsan-io-latency-type\";\nimport {HealthContext} from \"@navigation/context/health-context\";\nimport {NavigationService, PlatformExtension} from \"@navigation/navigation.service\";\nimport {ManagedObject} from \"@service/managed-object\";\nimport {StringUtil} from \"@util/string-util\";\nimport {VsanHealthTestId} from \"@util/vsan-health-util\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {IoDiagnosticsUtil} from \"../io-diagnostics.util\";\nimport {VirtualDiskLatency} from \"../model/virtual-disk-latency\";\nimport {IoLatencyPipe} from \"./IoLatencyPipe\";\nimport {LatencyDetailsModalContextData} from \"./latency-details-modal-context.data\";\n\n@Component({\n   templateUrl: \"latency-details-dialog.html\",\n   styleUrls: [\"latency-details-dialog.scss\"],\n   selector: \"vsan-latency-details-dialog\",\n})\nexport class LatencyDetailsDialogComponent implements OnInit {\n\n   clsRef: ManagedObject;\n   latencies: VirtualDiskLatency[];\n   title: string = \"\";\n   avgReadFilter: PipeFilter<any> = new PipeFilter<any>(new IoLatencyPipe(), \"avgRead\");\n   stddevReadFilter: PipeFilter<any> = new PipeFilter<any>(new IoLatencyPipe(), \"stddevRead\");\n   avgWriteFilter: PipeFilter<any> = new PipeFilter<any>(new IoLatencyPipe(), \"avgWrite\");\n   stddevWriteFilter: PipeFilter<any> = new PipeFilter<any>(new IoLatencyPipe(), \"stddevWrite\");\n\n   constructor(private navigationService: NavigationService) {\n   }\n\n   ngOnInit(): void {\n      const context: LatencyDetailsModalContextData = VsanUiUtils.getModalContext();\n      this.latencies = context.latenciesStats;\n      this.title = StringUtil.sentenceCase(this.latencies[0].typeLabel);\n      this.clsRef = context.clsRef;\n   }\n\n   getCause(): string {\n      let localizationKey: string = \"\";\n      switch (this.getLatencyType()) {\n         case VsanIoLatencyType.DOM_OWNER:\n         case VsanIoLatencyType.PERF_DOM_OWNER:\n         case VsanIoLatencyType.CAPACITY_DOM_OWNER:\n            localizationKey = \"vsan.monitor.vm.iodiagnostics.graph.edge.dialog.latency.domOwner.cause\";\n            break;\n         case VsanIoLatencyType.NETWORK:\n         case VsanIoLatencyType.PERF_NETWORK:\n         case VsanIoLatencyType.CAPACITY_NETWORK:\n            localizationKey = \"vsan.monitor.vm.iodiagnostics.graph.edge.dialog.latency.network.cause\";\n            break;\n         case VsanIoLatencyType.LSOM:\n         case VsanIoLatencyType.PERF_LSOM:\n         case VsanIoLatencyType.CAPACITY_LSOM:\n            localizationKey = \"vsan.monitor.vm.iodiagnostics.graph.edge.dialog.latency.lsom.cause\";\n            break;\n      }\n      return VsanUiUtils.getString(localizationKey);\n   }\n\n   getTroubleshoot(): string {\n      let localizationKey: string = \"\";\n      switch (this.getLatencyType()) {\n         case VsanIoLatencyType.NETWORK:\n         case VsanIoLatencyType.PERF_NETWORK:\n         case VsanIoLatencyType.CAPACITY_NETWORK:\n            localizationKey = \"vsan.monitor.vm.iodiagnostics.graph.edge.dialog.latency.network.troubleshoot\";\n            break;\n         case VsanIoLatencyType.LSOM:\n         case VsanIoLatencyType.PERF_LSOM:\n         case VsanIoLatencyType.CAPACITY_LSOM:\n            localizationKey = \"vsan.monitor.vm.iodiagnostics.graph.edge.dialog.latency.lsom.troubleshoot\";\n            break;\n      }\n      return VsanUiUtils.getString(localizationKey);\n   }\n\n   formatLatency(latency: number): string {\n      return IoDiagnosticsUtil.formatLatency(latency);\n   }\n\n   isNotDomOwner(): boolean {\n      return !IoDiagnosticsUtil.isDomOwner(this.latencies?.[0].type);\n   }\n\n   navigateToHealthPage = () => {\n      const context: HealthContext = {\n         selectedSubTestId: this.getHealthTestId(),\n      };\n      this.navigationService.navigateTo(PlatformExtension.CLUSTER_HEALTH, this.clsRef, context);\n      this.closeModal();\n   };\n\n   getHealthTestId(): VsanHealthTestId {\n      switch (this.getLatencyType()) {\n         case VsanIoLatencyType.NETWORK:\n         case VsanIoLatencyType.PERF_NETWORK:\n         case VsanIoLatencyType.CAPACITY_NETWORK:\n            return VsanHealthTestId.NETWORK_LATENCY_CHECK;\n            break;\n         case VsanIoLatencyType.LSOM:\n         case VsanIoLatencyType.PERF_LSOM:\n         case VsanIoLatencyType.CAPACITY_LSOM:\n            return VsanHealthTestId.PHYSICAL_DISK_OPERATION_HEALTH;\n            break;\n      }\n   }\n\n   getHealthActionLabel(): string {\n      let localizationKey: string = \"\";\n      switch (this.getLatencyType()) {\n         case VsanIoLatencyType.NETWORK:\n         case VsanIoLatencyType.PERF_NETWORK:\n         case VsanIoLatencyType.CAPACITY_NETWORK:\n            localizationKey = \"vsan.monitor.vm.iodiagnostics.graph.edge.dialog.latency.network.view\";\n            break;\n         case VsanIoLatencyType.LSOM:\n         case VsanIoLatencyType.PERF_LSOM:\n         case VsanIoLatencyType.CAPACITY_LSOM:\n            localizationKey = \"vsan.monitor.vm.iodiagnostics.graph.edge.dialog.latency.lsom.view\";\n            break;\n      }\n      return VsanUiUtils.getString(localizationKey);\n   }\n\n   private getLatencyType(): VsanIoLatencyType {\n      return this.latencies?.[0].type;\n   }\n\n   closeModal(): void {\n      VsanUiUtils.closeModalDialog();\n   }\n}","/* Copyright 2021 VMware, Inc. All rights reserved. -- VMware Confidential */\n/**\n * IDs used in external KB link navigation\n */\nexport enum KnowledgeBaseId {\n   PRECHECK_PCP = \"83954\",\n   VIRTUAL_OBJECTS = \"2108319\",\n   UPGRADE = \"2148493\",\n   PERFORMANCE_DIAGNOSTICS = \"2148770\",\n   SUPPORT_INSIGHT = \"60206\",\n}\n","<!--Copyright 2021 VMware, Inc. All rights reserved. -- VMware Confidential-->\n<vsan-default-prompt\n      [title]=\"'vsan.monitor.vm.iodiagnostics.dialog.runInstance.title' | localized\"\n      [(alertMessage)]=\"errorMessage\"\n      [confirmText]=\"'vsan.monitor.vm.iodiagnostics.action.runInstance.action' | localized\"\n      [blockContent]=\"loading\"\n      [blockButton]=\"loading || isPrecheckFailed() || form.invalid\"\n      (onConfirm)=\"confirm()\">\n   <vsan-run-instance-validation *ngIf=\"precheckResult?.failedChecks?.length\"\n                                 [clsRef]=\"clsRef\"\n                                 [failedChecks]=\"precheckResult?.failedChecks\"\n                                 [onPerfServiceEnabled]=\"awaitThenReload\">\n   </vsan-run-instance-validation>\n   <form [formGroup]=\"form\" *ngIf=\"!isPrecheckFailed()\">\n      <clr-input-container class=\"horizontal-layout\">\n         <label>{{\"vsan.monitor.vm.iodiagnostics.dialog.runInstance.analyze.label\" | localized}}</label>\n         <input id=\"duration-number\"\n                [formControlName]=\"durationInputFormControl\"\n                type=\"number\"\n                name=\"duration-number\"\n                clrInput\n                [min]=\"MIN_MINUTES\"\n                [max]=\"MAX_MINUTES\"\n                (change)=\"setDuration(durationInputFormControl)\" />\n         <clr-control-helper>\n            {{\"vsan.monitor.vm.iodiagnostics.dialog.runInstance.analyze.description\" | localized}}\n         </clr-control-helper>\n         <clr-control-error>{{intervalConstraints}}</clr-control-error>\n      </clr-input-container>\n      <clr-range-container [clrRangeHasProgress]=\"true\">\n         <input id=\"duration-range\"\n                [formControlName]=\"durationSliderFormControl\"\n                type=\"range\"\n                clrRange\n                [min]=\"MIN_MINUTES\"\n                [max]=\"MAX_MINUTES\"\n                (change)=\"setDuration(durationSliderFormControl)\"\n                [step]=\"STEP_IN_MINUTES\"\n                [title]=\"durationInMinutes\"/>\n         <clr-control-helper class=\"interval-text\">\n            <div>{{intervalMinConstraint}}</div>\n            <div>{{intervalMaxConstraint}}</div>\n         </clr-control-helper>\n      </clr-range-container>\n   </form>\n</vsan-default-prompt>\n","/* Copyright 2021-2022 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, OnInit} from \"@angular/core\";\nimport {AbstractControl, FormBuilder, FormControl, FormGroup, Validators} from \"@angular/forms\";\nimport {IoDiagnosticsService} from \"@generated/io-diagnostics-service\";\nimport {VsanIODiagnosticsPrecheckResult} from \"@generated/vsan-i-o-diagnostics-precheck-result\";\nimport {ErrorMessage} from \"@service/flow/error-message.decorator\";\nimport {Loader} from \"@service/flow/loader.decorator\";\nimport {LoadingIndicator} from \"@service/flow/loading-indicator.decorator\";\nimport {ManagedObject} from \"@service/managed-object\";\nimport {TaskMonitorService} from \"@service/task-monitor-service\";\nimport {ReactiveFormUtil} from \"@util/reactive-form-util\";\nimport {VsanDateTimeUtils} from \"@util/vsan-dateteime-util\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {RunInstanceModalContextData} from \"./run-instance-modal-context.data\";\n\n@Component({\n   templateUrl: \"run-instance-dialog.html\",\n   styleUrls: [\"run-instance-dialog.scss\"],\n   selector: \"vsan-run-instance-dialog\",\n})\nexport class RunInstanceDialogComponent implements OnInit {\n\n   @ErrorMessage()\n   errorMessage: string;\n\n   @LoadingIndicator()\n   loading: boolean;\n\n   clsRef: ManagedObject;\n   vmRef: ManagedObject;\n   precheckResult: VsanIODiagnosticsPrecheckResult;\n\n   MIN_MINUTES: number = 5;\n   MAX_MINUTES: number = 60;\n   STEP_IN_MINUTES: number = 5;\n   durationInMinutes: number = 5;\n\n   form: FormGroup;\n   durationInputFormControl: string = \"duration-number\";\n   durationSliderFormControl: string = \"duration-range\";\n\n   constructor(private ioDiagnosticsService: IoDiagnosticsService,\n         private taskService: TaskMonitorService,\n         private formBuilder: FormBuilder) {\n   }\n\n   ngOnInit(): void {\n      this.form = this.formBuilder.group({\n         [this.durationInputFormControl]: new FormControl(this.durationInMinutes, [\n            Validators.required,\n            Validators.min(this.MIN_MINUTES),\n            Validators.max(this.MAX_MINUTES),\n         ]),\n         [this.durationSliderFormControl]: new FormControl(this.durationInMinutes, [\n            Validators.required,\n            Validators.min(this.MIN_MINUTES),\n            Validators.max(this.MAX_MINUTES),\n         ]),\n      });\n      const context: RunInstanceModalContextData = VsanUiUtils.getModalContext();\n      this.clsRef = context.clsRef;\n      this.vmRef = context.vmRef;\n      this.runPrecheck();\n   }\n\n   setDuration(controlName: string): void {\n      ReactiveFormUtil.validateAllFormFields(this.form);\n      const currentInput: AbstractControl = this.form.get(controlName);\n      if (currentInput.invalid) {\n         return;\n      }\n      this.durationInMinutes = VsanUiUtils.toNumber(currentInput.value);\n      this.form.get(this.durationInputFormControl).setValue(this.durationInMinutes);\n      this.form.get(this.durationSliderFormControl).setValue(this.durationInMinutes);\n   }\n\n   @Loader({rethrow: true})\n   async runPrecheck(): Promise<void> {\n      this.precheckResult = await this.ioDiagnosticsService.runIODiagnosticsPrecheck(this.clsRef, this.vmRef);\n   }\n\n   @Loader({rethrow: true})\n   async confirm(): Promise<void> {\n      if (this.form.invalid) {\n         return;\n      }\n      const durationInSeconds: number = this.durationInMinutes * VsanDateTimeUtils.SECONDS_IN_MINUTE;\n      const taskRef: ManagedObject =\n            await this.ioDiagnosticsService.runIoDiagnosticsInstance(this.clsRef, this.vmRef, durationInSeconds);\n      VsanUiUtils.closeModalDialog(taskRef);\n   }\n\n   get intervalMinConstraint(): string {\n      return VsanUiUtils.getString(\"vsan.monitor.vm.iodiagnostics.dialog.runInstance.constraints.min.helperText\",\n            this.MIN_MINUTES);\n   }\n\n   get intervalMaxConstraint(): string {\n      return VsanUiUtils.getString(\"vsan.monitor.vm.iodiagnostics.dialog.runInstance.constraints.max.helperText\",\n            this.MAX_MINUTES);\n   }\n\n   get intervalConstraints(): string {\n      return VsanUiUtils.getString(\"vsan.monitor.vm.iodiagnostics.dialog.runInstance.analyze.interval.error\",\n            this.MIN_MINUTES, this.MAX_MINUTES);\n   }\n\n   isPrecheckFailed(): boolean {\n      return this.precheckResult && !this.precheckResult.supported;\n   }\n\n   awaitThenReload = (taskRef: ManagedObject) => {\n      this.taskService.getAwaitResult(taskRef)\n            .then(() => this.runPrecheck());\n   };\n}\n","/* Copyright 2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {NgModule} from \"@angular/core\";\nimport {RouterModule, Routes} from \"@angular/router\";\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport {RunInstanceDialogComponent} from \"./run-instance-dialog.component\";\nimport {LatencyDetailsDialogComponent} from \"./latency-details-dialog.component\";\nimport {IoDiagnosticsCommonModule} from \"../io-diagnostics-common.module\";\nimport {ClarityModule} from \"@clr/angular\";\nimport {CommonModule} from \"@angular/common\";\nimport {PromptModule} from \"@component/dialog/prompt/prompt.module\";\nimport {CommonPipeModule} from \"@pipe/common-pipe.module\";\nimport {CommonDirectiveModule} from \"@directive/common-directive.module\";\nimport {LatencyExportDialogComponent} from \"./latency-export-dialog.component\";\nimport {IoLatencyPipe} from \"./IoLatencyPipe\";\n\nconst routes: Routes = [\n   {\n      path: \"runInstance\",\n      component: RunInstanceDialogComponent,\n   },\n   {\n      path: \"latencyDetails\",\n      component: LatencyDetailsDialogComponent,\n   },\n   {\n      path: \"latencyExport\",\n      component: LatencyExportDialogComponent,\n   },\n];\n\n@NgModule({\n   imports: [\n      CommonModule,\n      ClarityModule,\n      PromptModule,\n      CommonPipeModule,\n      CommonDirectiveModule,\n      FormsModule,\n      IoDiagnosticsCommonModule,\n      ReactiveFormsModule,\n      RouterModule.forChild(routes),\n   ],\n   declarations: [\n      RunInstanceDialogComponent,\n      LatencyDetailsDialogComponent,\n      LatencyExportDialogComponent,\n      IoLatencyPipe,\n   ],\n})\nexport class IoDiagnosticsDialogModule {\n}\n","<!--Copyright 2021-2022 VMware, Inc. All rights reserved. -- VMware Confidential-->\n<vsan-default-prompt [title]=\"title\"\n                     [cancelText]=\"null\"\n                     (onConfirm)=\"closeModal()\"\n                     [additionalButtonText]=\"isNotDomOwner() ? getHealthActionLabel() : null\"\n                     (onAdditionalAction)=\"navigateToHealthPage()\">\n   <clr-datagrid #dataGrid class=\"datagrid-compact\">\n      <clr-dg-column *ngIf=\"isNotDomOwner()\"\n                     [clrDgField]=\"'domComponentUuid'\"\n                     vsan-show-title\n                     class=\"small-column\">\n         {{\"vsan.monitor.vm.iodiagnostics.grid.column.domComponentUuid\" | localized}}\n      </clr-dg-column>\n      <clr-dg-column [clrDgField]=\"'avgRead'\">\n         {{\"vsan.monitor.vm.iodiagnostics.grid.column.readLatencyAvg\" | localized}}\n         <clr-dg-string-filter [clrDgStringFilter]=\"avgReadFilter\"></clr-dg-string-filter>\n      </clr-dg-column>\n      <clr-dg-column [clrDgField]=\"'stddevRead'\">\n         {{\"vsan.monitor.vm.iodiagnostics.grid.column.readLatencyStddev\" | localized}}\n         <clr-dg-string-filter [clrDgStringFilter]=\"stddevReadFilter\"></clr-dg-string-filter>\n      </clr-dg-column>\n      <clr-dg-column [clrDgField]=\"'avgWrite'\">\n         {{\"vsan.monitor.vm.iodiagnostics.grid.column.writeLatencyAvg\" | localized}}\n         <clr-dg-string-filter [clrDgStringFilter]=\"avgWriteFilter\"></clr-dg-string-filter>\n      </clr-dg-column>\n      <clr-dg-column [clrDgField]=\"'stddevWrite'\">\n         {{\"vsan.monitor.vm.iodiagnostics.grid.column.writeLatencyStddev\" | localized}}\n         <clr-dg-string-filter [clrDgStringFilter]=\"stddevWriteFilter\"></clr-dg-string-filter>\n      </clr-dg-column>\n      <clr-dg-row *clrDgItems=\"let latency of latencies\" [clrDgItem]=\"latency\">\n         <clr-dg-cell *ngIf=\"isNotDomOwner()\" vsan-show-title>{{latency.domComponentUuid}}</clr-dg-cell>\n         <clr-dg-cell class=\"right-align-cell\">{{latency.avgRead | ioLatency}}</clr-dg-cell>\n         <clr-dg-cell class=\"right-align-cell\">{{latency.stddevRead | ioLatency}}</clr-dg-cell>\n         <clr-dg-cell class=\"right-align-cell\">{{latency.avgWrite | ioLatency}}</clr-dg-cell>\n         <clr-dg-cell class=\"right-align-cell\">{{latency.stddevWrite | ioLatency}}</clr-dg-cell>\n      </clr-dg-row>\n   </clr-datagrid>\n   <section class=\"cause-section\">\n      <h4 class=\"bold\">{{\"vsan.monitor.vm.iodiagnostics.graph.edge.dialog.latency.cause\" | localized}}</h4>\n      <div>{{getCause()}}</div>\n   </section>\n   <section *ngIf=\"isNotDomOwner()\" class=\"troubleshoot-section\">\n      <h4 class=\"bold\">{{\"vsan.monitor.vm.iodiagnostics.graph.edge.dialog.latency.troubleshoot\" | localized}}</h4>\n      <div>{{getTroubleshoot()}}</div>\n   </section>\n</vsan-default-prompt>","/* Copyright 2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, OnInit} from \"@angular/core\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {LatencyExportModalContextData} from \"./latency-export-modal-context.data\";\nimport {VirtualDiskIdentifier} from \"../model/virtual-disk-identifier\";\n\n@Component({\n   templateUrl: \"latency-export-dialog.html\",\n   styleUrls: [\"latency-export-dialog.scss\"],\n   selector: \"vsan-latency-export-dialog\",\n})\nexport class LatencyExportDialogComponent implements OnInit {\n   vmdksIdentifiers: VirtualDiskIdentifier[] = [];\n   selectedVmdksIdentifiers: Map<string, boolean> = new Map<string, boolean>();\n   hasError: boolean = false;\n\n   ngOnInit(): void {\n      const context: LatencyExportModalContextData = VsanUiUtils.getModalContext();\n      this.vmdksIdentifiers = context.vmdksIdentifiers;\n      context.vmdksIdentifiers.forEach(vmdkIdentifier => {\n         this.selectedVmdksIdentifiers.set(vmdkIdentifier.id, true);\n      });\n   }\n\n   onConfirm(): void {\n      this.hasError = false;\n      const result: string[] = [];\n      this.selectedVmdksIdentifiers.forEach((value: boolean, key: string) => {\n         if (value) {\n            result.push(key);\n         }\n      });\n      if (VsanUiUtils.isEmpty(result)) {\n         this.hasError = true;\n         return;\n      }\n      VsanUiUtils.closeModalDialog(result);\n   }\n}","/* Copyright 2017-2020 VMware, Inc. All rights reserved. -- VMware Confidential */\n\nimport {Filter, TreeDatagridRow} from \"../tree-datagrid\";\nimport {ClrDatagridStringFilterInterface} from \"@clr/angular\";\n\n/**\n * Abstract filter class that needs to be extended in order to implement custom filtration.\n * The class has a single abstract method that takes an object of type T and returns its\n * string representation.\n */\nexport class BaseFilter<T> implements ClrDatagridStringFilterInterface<T>, Filter {\n\n   accepts(data: T, search: string): boolean {\n      // Handle correctly TreeDatagrid components\n      if (data instanceof TreeDatagridRow) {\n         data = data.data;\n      }\n\n      let label: string = this.stringify(data);\n      if (label) {\n         // Compare ignoring the case\n         return label.toLowerCase().indexOf(search.toLowerCase()) != -1;\n      } else {\n         return false;\n      }\n   }\n\n   match(data: T, search: string): boolean {\n      return this.accepts(data, search);\n   }\n\n   protected stringify(data: T): string  {\n      return data + \"\";\n   }\n\n}\n\n","/* Copyright 2021 VMware, Inc. All rights reserved. -- VMware Confidential */\n/**\n * Util methods for manipulating DOM\n */\nexport class DomUtil {\n   static onClick(element: HTMLElement, callback: () => any): void {\n      element.addEventListener(\"click\", () => callback());\n   }\n\n   static onEnterKeyUp(element: HTMLElement, callback: () => any): void {\n      element.addEventListener(\"keyup\", (event) => {\n         // Handle \"Enter\" key on the keyboard\n         if (event.keyCode === 13) {\n            callback();\n         }\n      });\n   }\n\n   static onMouseOver(element: HTMLElement, callback: () => any): void {\n      element.addEventListener(\"mouseover\", () => callback());\n   }\n\n   static onMouseOut(element: HTMLElement, callback: () => any): void {\n      element.addEventListener(\"mouseout\", () => callback());\n   }\n\n   /**\n    * Causes the DOM elements matching the given selector to be redrawn by the browser's layout enging.\n    * This is useful when the browser fails to render some elements correctly and by redrawing them, this is fixed.\n    */\n   static redraw(selector: string): void {\n      setTimeout(() => {\n         $(selector).hide().show(0);\n      }, 100);\n   }\n\n   static domElementExists(elementName: string): boolean {\n      return !!document.getElementById(elementName);\n   }\n}","/* Copyright 2016 VMware, Inc. All rights reserved. -- VMware Confidential */\n\nimport {BehaviorSubject} from \"rxjs\";\nimport {ClrDatagridFilterInterface} from \"@clr/angular\";\n\n/**\n * Hierarchical data provider.\n * This is a additional structure to the Clarity Datagrid that supports hierarchical data rendering.\n */\nexport class TreeDatagrid {\n\n   public static forChildProperty(childField: string, rowData?: any[]) {\n      return new TreeDatagrid(item => item[childField], rowData);\n   }\n\n   /**\n    * The data objects that are to be rendered as first-level rows.\n    */\n   protected roots: any[];\n\n   /**\n    * The flat row structure consisting of the root objects and their children\n    * in case the parents are expanded. Sorting and filtering are reflected here.\n    */\n   protected content: TreeDatagridRow[];\n\n   /**\n    * List of filters to be applied on the data.\n    */\n   protected filters: TreeFilter[] = [];\n\n   /**\n    * The comparator to be used to sort the items and their children.\n    */\n   public comparator: (item1: any, item2: any) => number;\n\n   /**\n    * Sorting direction.\n    */\n   public sortAscending: boolean;\n\n   /**\n    * @param childItems lambda for extracting the children of a given data object\n    * @param rootItems (optional) the initial data objects\n    */\n   constructor(private childItems: (parent: any) => any[], rootItems?: any[]) {\n      this.rootItems = rootItems;\n   }\n\n   /**\n    * Removes all items.\n    */\n   public clear = () => this.rootItems = [];\n\n   /**\n    * Sets the given data objects as content.\n    */\n   public refreshGrid = (rowData: any[]) => this.rootItems = rowData;\n\n   public set rootItems(value: any[]) {\n      this.roots = value ? value : [];\n      this.content = this.flatten(this.roots);\n   }\n\n   /**\n    * root data objects\n    */\n   public get rootItems(): any[] {\n      return this.roots;\n   }\n\n   /**\n    * The flat row structure consisting of the root objects and their children\n    * in case the parents are expanded. Sorting and filtering are reflected here.\n    */\n   public get rows(): TreeDatagridRow[] {\n      return this.content;\n   }\n\n   /**\n    * Registers a new filter in the data provider.\n    * Initially the filter will accept all items.\n    * The consumer can assign a predicate to the TreeFilter object\n    * to add filtering rule. All registered filters' predicates are\n    * evaluated using AND operator.\n    */\n   public registerFilter(): TreeFilter {\n      let filter: TreeFilter = new TreeFilter(() => this.content = this.flatten(this.rootItems));\n      this.filters.push(filter);\n      return filter;\n   }\n\n   public unregisterFilter(value: TreeFilter) {\n      let index: number = this.filters.indexOf(value);\n      if (index != -1) {\n         this.filters.splice(index, 1);\n      }\n   }\n\n   /**\n    * Applies sorting comparator and direction for the data provider.\n    */\n   public sort(comparator: (item1: any, item2: any) => number, ascending: boolean = true) {\n      this.comparator = comparator;\n      this.sortAscending = ascending;\n\n      // refresh content, will expand all nodes\n      this.content = this.flatten(this.rootItems);\n   }\n\n   public collapseAll = () => this.rows.forEach(r => this.collapse(r));\n\n   public expandAll = () => this.rows.forEach(r => this.expand(r));\n\n   protected expand(row: TreeDatagridRow) {\n      if (row.isExpanded) {\n         // already expanded\n         return;\n      }\n\n      let rowIndex = this.content.indexOf(row);\n      if (rowIndex == -1) {\n         // row is filtered out\n         return;\n      }\n\n      let flattenedChildren: TreeDatagridRow[] = this.flatten(this.childItems(row.data), row.depth + 1);\n      if (flattenedChildren.length > 0) {\n         this.content.splice(rowIndex + 1, 0, ... flattenedChildren);\n      }\n\n      row.isExpanded = true;\n   }\n\n   protected collapse(row: TreeDatagridRow) {\n      if (!row.isExpanded) {\n         // already collapsed\n         row.isExpanded = false;\n         return;\n      }\n\n      let rowIndex = this.content.indexOf(row);\n      if (rowIndex == -1) {\n         // row is filtered out\n         return;\n      }\n\n      let removeCount: number = 0;\n      for (let i = rowIndex + 1; i < this.content.length && row.depth < this.content[i].depth; i++) {\n         removeCount ++;\n      }\n\n      this.content.splice(rowIndex + 1, removeCount);\n      row.isExpanded = false;\n   }\n\n   // returns flattened list of the specified items and their children (and their children);\n   // sorting and filter are applied;\n   // items are returned in expanded state\n   protected flatten(items: any[], depth: number = 0, parent?: any): TreeDatagridRow[] {\n      if (!items) {\n         return [];\n      }\n\n      let sortedItems: any[] = [... items];\n      if (this.comparator) {\n         sortedItems.sort((item1: any, item2: any) => (this.sortAscending ? 1 : -1) * this.comparator(item1, item2));\n      }\n\n      let result: TreeDatagridRow[] = [];\n\n      for (let item of sortedItems) {\n\n         let childItems: any[] = this.childItems(item);\n\n         // flattened children, including their children\n         let children: TreeDatagridRow[] = this.flatten(childItems, depth + 1, item);\n\n         let filteredOut: boolean = false;\n         for (let filter of this.filters) {\n            // filter out items only if the filter is not applicable for the item or it's parent\n            const matchFilter: boolean = filter.predicate(item) || (!!parent && filter.predicate(parent));\n            if (!matchFilter) {\n               filteredOut = true;\n            }\n         }\n         if (!filteredOut || children.length > 0) {\n            let row: TreeDatagridRow = new TreeDatagridRow();\n            row.data = item;\n            row.toggle = () => row.isExpanded ? this.collapse(row) : this.expand(row);\n            row.depth = depth;\n            row.isExpanded = true;\n            row.isExpandable = childItems && childItems.length > 0;\n\n            result.push(row, ... children);\n         }\n      }\n\n      return result;\n   }\n\n}\n\n/**\n * Represents a single row in a flattened tree data provider.\n */\nexport class TreeDatagridRow {\n\n   /**\n    * The data object for the row\n    */\n   public data: any;\n\n   /**\n    * Will be true if the row has children\n    */\n   public isExpandable: boolean;\n\n   /**\n    * Will be true if the row is currently expanded\n    */\n   public isExpanded: boolean;\n\n   /**\n    * Will flip the row's expanded/collapsed state\n    */\n   public toggle: () => void;\n\n   /**\n    * The nesting level the row is rendered at\n    */\n   public depth: number;\n\n}\n\nexport interface Filter  {\n   match(data: any, filter:string): boolean;\n}\n\n/**\n * Allows specifying filtering predicate for the data provider.\n * @see TreeDatagrid.registerFilter\n */\nexport class TreeFilter implements ClrDatagridFilterInterface<any> {\n\n   private _predicate: (item: any) => boolean;\n   changes = new BehaviorSubject<boolean>(false);\n\n   constructor(private apply: () => void) {\n      this.clear();\n   }\n\n   public clear() {\n      this._predicate = (item: any) => true;\n      this.apply();\n   }\n\n   public set predicate(predicate: (item: any) => boolean) {\n      if (!predicate) {\n         this.clear();\n      } else {\n         this._predicate = predicate;\n         this.apply();\n      }\n   }\n\n   public get predicate(): (item: any) => boolean {\n      return this._predicate;\n   }\n\n   // Used by clarity filter\n   isActive(): boolean {\n      return this.changes.getValue();\n   }\n\n   // Used by clarity filter\n   accepts(val: any): boolean {\n      return true;\n   }\n}"]}