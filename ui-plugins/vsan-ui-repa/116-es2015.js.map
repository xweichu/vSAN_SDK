{"version":3,"sources":["./src/app/vsan/common/component/datagrid/tree-datagrid.module.ts","./src/app/vsan/csd/wizard/mount/select-remote-datastore-page.component.ts","./src/app/vsan/csd/wizard/mount/check-compatibility-page.component.ts","./src/app/vsan/csd/wizard/mount/mount-wizard.module.ts","./src/app/vsan/common/component/popup-list/popup-list.module.ts","./src/app/vsan/common/component/datagrid/comparator/numeric-comparator.ts","./src/app/vsan/common/component/datagrid/comparator/base-comparator.ts","./src/app/vsan/csd/wizard/mount/select-remote-datastore-page.html","./src/app/vsan/common/component/navigation/vsan-breadcrumb.module.ts","./src/app/vsan/csd/wizard/mount/mount-remote-datastore-wizard.component.ts.MountRemoteDatastoreWizardComponent.html","./src/app/vsan/common/component/cell/common-cells.module.ts","./src/app/vsan/common/component/datagrid/filter/object-filter.ts","./src/app/vsan/csd/wizard/mount/check-compatibility-page.html","./src/app/vsan/common/component/datagrid/filter/base-filter.ts","./src/app/vsan/common/component/inventory/inventory-browser.module.ts","./src/app/vsan/csd/wizard/mount/mount-remote-datastore-wizard.component.ts","./src/app/vsan/common/vsan-common.module.ts","./src/app/vsan/common/component/search/search.module.ts","./src/app/vsan/common/component/action-button/action-button.module.ts","./src/app/vsan/common/component/datagrid/tree-datagrid.ts"],"names":[],"mappings":"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","file":"116-es2015.js","sourcesContent":["/* Copyright 2019-2020 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {NgModule} from \"@angular/core\";\nimport {CommonModule} from \"@angular/common\";\nimport {FormsModule} from \"@angular/forms\";\nimport {ClarityModule} from \"@clr/angular\";\nimport {ValidationModule} from \"@component/validation/validation.module\";\nimport {CommonPipeModule} from \"@pipe/common-pipe.module\";\nimport {TreeExpanderComponent} from \"@component/datagrid/tree-expander.component\";\nimport {TreeColumnComponent} from \"@component/datagrid/tree-column.component\";\nimport {EnumeratedFilterComponent} from \"./filter/enumerated-filter.component\";\nimport {EnumeratedFilterItemComponent} from \"./filter/enumerated-filter-item.component\";\nimport {EnumFilterComponent} from \"@component/datagrid/filter/enum-filter.component\";\n\n@NgModule({\n   imports: [\n      CommonModule,\n      FormsModule,\n      ClarityModule,\n      ValidationModule,\n      CommonPipeModule,\n   ],\n   declarations: [\n      TreeColumnComponent,\n      TreeExpanderComponent,\n      EnumeratedFilterComponent,\n      EnumeratedFilterItemComponent,\n      EnumeratedFilterComponent,\n      EnumFilterComponent,\n   ],\n   exports: [\n      TreeColumnComponent,\n      TreeExpanderComponent,\n      EnumeratedFilterComponent,\n      EnumeratedFilterItemComponent,\n      EnumFilterComponent,\n   ],\n})\nexport class TreeDatagridModule {\n}\n","/* Copyright 2019-2020 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component} from \"@angular/core\";\nimport {InputProperty, OutputProperty, WizardPage} from \"@component/wizard/flow-metadata\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {ShareableDatastore} from \"@generated/shareable-datastore\";\nimport {ClrDatagridSortOrder} from \"@clr/angular\";\nimport {PageControls} from \"@component/wizard/flow-wizard.component\";\nimport {ObjectFilter} from \"@component/datagrid/filter/object-filter\";\nimport {NumericComparator} from \"@component/datagrid/comparator/numeric-comparator\";\nimport {StringComparator} from \"@component/datagrid/comparator/string-comparator\";\nimport {PageItem} from \"@component/wizard/page-item\";\n\n@WizardPage(VsanUiUtils.getString(\"vsan.csd.mountWizard.selectDatastore.title\"))\n@Component({\n   templateUrl: \"select-remote-datastore-page.html\"\n})\nexport class SelectRemoteDatastorePageComponent {\n\n   @InputProperty()\n   pageControls: PageControls;\n\n   @InputProperty()\n   availableShareableDatastores: ShareableDatastore[];\n\n   @OutputProperty(OutputProperty.ifEmpty(VsanUiUtils.getString(\n         \"vsan.csd.mountWizard.selectDatastore.noSelectedDatastore\")))\n   selectedDatastore: ShareableDatastore;\n\n   datastoreComparator = new StringComparator<any>(\"datastore.name\");\n   serverClusterComparator = new StringComparator<any>(\"serverCluster.name\");\n   capacityComparator = new NumericComparator<any>(\"capacityB\");\n   freeSpaceComparator = new NumericComparator<any>(\"freeSpaceB\");\n   ascSort = ClrDatagridSortOrder.ASC;\n\n   datastoreFilter = new ObjectFilter<any>(\"datastore.name\");\n   serverClusterFilter = new ObjectFilter<any>(\"serverCluster.name\");\n\n   ngOnInit() {\n      if (!this.availableShareableDatastores.length) {\n         (this.pageControls as PageItem).nextButtonIsDisabled = true;\n      }\n   }\n}","/* Copyright 2019-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component} from \"@angular/core\";\nimport {InputProperty, OutputProperty, WizardPage} from \"@component/wizard/flow-metadata\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {ShareableDatastore} from \"@generated/shareable-datastore\";\nimport {MountPrecheckTest} from \"@generated/mount-precheck-test\";\nimport {CsdMountService} from \"@generated/csd-mount-service\";\nimport {MountRemoteDatastoreContext} from \"@navigation/context/mount-remote-datastore-context\";\nimport {VsanHealthStatus} from \"@generated/vsan-health-status\";\nimport {VsanHealthUtil} from \"@util/vsan-health-util\";\nimport {Logger} from \"@util/logger\";\nimport {PageItem} from \"@component/wizard/page-item\";\nimport {PageControls} from \"@component/wizard/flow-wizard.component\";\nimport {AlertType} from \"@component/validation/alert-type\";\nimport {ScreenReaderAnnouncer} from \"@service/screen-reader-announcer.service\";\nimport {ManagedObject} from \"@service/managed-object\";\n\n@WizardPage(VsanUiUtils.getString(\"vsan.csd.mountWizard.checkCompatibility.title\"))\n@Component({\n   templateUrl: \"check-compatibility-page.html\",\n   styleUrls: [\"check-compatibility-page.scss\"],\n})\nexport class CheckCompatibilityPageComponent {\n\n   getHealthIconClass: (val: VsanHealthStatus) => string = VsanHealthUtil.getHealthStatusClass;\n   getHealthIconShape: (val: VsanHealthStatus) => string = VsanHealthUtil.getHealthStatusShape;\n\n   @InputProperty()\n   private pageControls: PageControls;\n\n   @InputProperty()\n   selectedDatastore: ShareableDatastore;\n\n   @ScreenReaderAnnouncer()\n   srOnlyMessage: string;\n\n   @OutputProperty()\n   get datastoreRef(): ManagedObject {\n      return this.selectedDatastore.datastore.moRef;\n   }\n\n   loadingTests: boolean = true;\n   hasError: boolean = false;\n\n   precheckTests: MountPrecheckTest[];\n   additionalMessages: PrecheckAdditionalMessage[];\n\n   constructor(private csdMountService: CsdMountService) {\n   }\n\n   async ngOnInit(): Promise<void> {\n      (this.pageControls as PageItem).nextButtonIsDisabled = true;\n      this.getPrecheckResult();\n   }\n\n   async getPrecheckResult(): Promise<void> {\n      try {\n         const context: MountRemoteDatastoreContext = VsanUiUtils.getModalContext();\n         this.precheckTests = await this.csdMountService.runCsdMountPrecheck(context.clusterRef,\n               this.selectedDatastore.datastore.moRef);\n         this.additionalMessages = this.getAdditionalMessages(this.precheckTests);\n         this.updateSrOnlyMessage();\n      } catch (err) {\n         Logger.error(\"Error running the mount pre-check: \" + err);\n         this.pageControls.setValidationErrors([err]);\n         this.hasError = true;\n      } finally {\n         this.loadingTests = false;\n         (this.pageControls as PageItem).nextButtonIsDisabled = !this.isMountPossible();\n      }\n   }\n\n   isMountPossible(): boolean {\n      return !this.hasError && !this.precheckTests.some(test => test.status === VsanHealthStatus.red);\n   }\n\n   private getAdditionalMessages(precheckTests: MountPrecheckTest[]): PrecheckAdditionalMessage[] {\n      return precheckTests\n            .filter(test => test.reasons)\n            .map(test => ({\n               alerts: test.reasons,\n               type: CheckCompatibilityPageComponent.getAlertType(test.status),\n            }) as PrecheckAdditionalMessage);\n   }\n\n   private updateSrOnlyMessage(): void {\n      try {\n         const failures: number = this.additionalMessages.filter(message => message.type === AlertType.DANGER).length;\n         const warnings: number = this.additionalMessages.filter(message => message.type === AlertType.WARNING).length;\n         this.srOnlyMessage =\n               VsanUiUtils.getString(\"vsan.csd.mountWizard.checkCompatibility.srOnlyMessage\", failures, warnings);\n      } catch (e) {\n         Logger.warn(\"Failed to build screenreader message.\");\n      }\n   }\n\n   private static getAlertType(testStatus: VsanHealthStatus): AlertType {\n      switch (testStatus) {\n         case VsanHealthStatus.yellow:\n            return AlertType.WARNING;\n         case VsanHealthStatus.red:\n            return AlertType.DANGER;\n         default:\n            return AlertType.INFO;\n      }\n   }\n}\n\ninterface PrecheckAdditionalMessage {\n   type: AlertType;\n   alerts: string[];\n}\n","/* Copyright 2019-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {RouterModule, Routes} from \"@angular/router\";\nimport {NgModule} from \"@angular/core\";\nimport {CommonModule} from \"@angular/common\";\nimport {ClarityModule} from \"@clr/angular\";\nimport {CommonPipeModule} from \"@pipe/common-pipe.module\";\nimport {ValidationModule} from \"@component/validation/validation.module\";\nimport {CommonDirectiveModule} from \"@directive/common-directive.module\";\nimport {FlowWizardModule} from \"@component/wizard/flow-wizard.module\";\nimport {VsanCommonModule} from \"../../../common/vsan-common.module\";\nimport {MountRemoteDatastoreWizardComponent} from \"./mount-remote-datastore-wizard.component\";\nimport {SelectRemoteDatastorePageComponent} from \"./select-remote-datastore-page.component\";\nimport {CheckCompatibilityPageComponent} from \"./check-compatibility-page.component\";\n\nconst mountWizardRoutes: Routes = [\n   {\n      path: \"\",\n      component: MountRemoteDatastoreWizardComponent\n   }\n];\n\n@NgModule({\n   imports: [\n      CommonModule,\n      ClarityModule,\n      VsanCommonModule,\n      CommonPipeModule,\n      ValidationModule,\n      CommonDirectiveModule,\n      FlowWizardModule,\n      RouterModule.forChild(mountWizardRoutes)\n   ],\n   declarations: [\n      MountRemoteDatastoreWizardComponent,\n      SelectRemoteDatastorePageComponent,\n      CheckCompatibilityPageComponent\n   ],\n   entryComponents: [\n      SelectRemoteDatastorePageComponent,\n      CheckCompatibilityPageComponent\n   ]\n})\nexport class MountWizardModule {\n}","/* Copyright 2019 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {NgModule} from \"@angular/core\";\nimport {CommonModule} from \"@angular/common\";\nimport {ClarityModule} from \"@clr/angular\";\nimport {CommonPipeModule} from \"@pipe/common-pipe.module\";\nimport {PopupListComponent} from \"@component/popup-list/popup-list.component\";\nimport {PopupListItemDirective} from \"@component/popup-list/popup-list-item.directive\";\n\n@NgModule({\n   imports: [\n      CommonModule,\n      ClarityModule,\n      CommonPipeModule\n   ],\n   declarations: [\n      PopupListComponent,\n      PopupListItemDirective\n   ],\n   exports: [\n      PopupListComponent,\n      PopupListItemDirective\n   ]\n})\nexport class PopupListModule {\n}\n","/* Copyright 2019 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {BaseComparator} from \"@component/datagrid/comparator/base-comparator\";\n\nexport class NumericComparator<T> extends BaseComparator<T> {\n   constructor(private dataField: string) {\n      super();\n   }\n\n   protected compareValue(a: T, b: T): number {\n      return a[this.dataField] - b[this.dataField];\n   }\n}\n","/* Copyright 2019 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {ClrDatagridComparatorInterface} from \"@clr/angular\";\nimport { VsanUiUtils } from '@util/vsan-util';\n\n/**\n * Basic comparator, the child component should override the compareValue method\n * We don't expect the compared value to be json format\n */\nexport class BaseComparator<T> implements ClrDatagridComparatorInterface<T> {\n   protected stringify(data: T, field: string): string {\n      return VsanUiUtils.stringify(data, field);\n   }\n\n   protected compareValue(a: T, b: T): number {\n      throw new Error(\"Method not implemented\");\n   }\n\n   compare(a: T, b: T): number {\n      return this.compareValue(a, b);\n   }\n}","<!--Copyright 2019 VMware, Inc. All rights reserved. VMware Confidential-->\n<clr-datagrid [(clrDgSingleSelected)]=\"selectedDatastore\">\n   <clr-dg-column class=\"datastore-column\"\n                  [clrDgSortBy]=\"datastoreComparator\"\n                  [clrDgSortOrder]=\"ascSort\">\n         {{\"vsan.csd.datastoreSharing.grid.datastore\" | localized}}\n      <clr-dg-string-filter [clrDgStringFilter]=\"datastoreFilter\"></clr-dg-string-filter>\n   </clr-dg-column>\n   <clr-dg-column class=\"server-cluster-column\"\n                  [clrDgSortBy]=\"serverClusterComparator\">\n         {{\"vsan.csd.datastoreSharing.grid.serverCluster\" | localized}}\n      <clr-dg-string-filter [clrDgStringFilter]=\"serverClusterFilter\"></clr-dg-string-filter>\n   </clr-dg-column>\n   <clr-dg-column class=\"storage-size-column\"\n                  [clrDgSortBy]=\"capacityComparator\">\n         {{\"vsan.csd.datastoreSharing.grid.capacity\" | localized}}\n   </clr-dg-column>\n   <clr-dg-column class=\"storage-size-column\"\n                  [clrDgSortBy]=\"freeSpaceComparator\">\n         {{\"vsan.csd.datastoreSharing.grid.freeSpace\" | localized}}\n   </clr-dg-column>\n\n   <clr-dg-placeholder>{{\"vsan.csd.mountWizard.selectDatastore.noAvailableDatastores\" | localized}}</clr-dg-placeholder>\n\n   <clr-dg-row\n         *clrDgItems=\"let datastore of availableShareableDatastores\"\n         [clrDgItem]=\"datastore\">\n      <clr-dg-cell vsan-show-title>\n         <clr-icon [attr.shape]=\"datastore.datastore.primaryIconId\"></clr-icon>\n         {{datastore.datastore.name}}\n      </clr-dg-cell>\n      <clr-dg-cell vsan-show-title>\n         <clr-icon [attr.shape]=\"datastore.serverCluster.primaryIconId\"></clr-icon>\n         {{datastore.serverCluster.name}}\n      </clr-dg-cell>\n      <clr-dg-cell>\n         {{datastore.capacityB | fileSize}}\n      </clr-dg-cell>\n      <clr-dg-cell>\n         {{datastore.freeSpaceB | fileSize}}\n      </clr-dg-cell>\n   </clr-dg-row>\n\n   <clr-dg-footer>\n      <clr-dg-pagination #pagination></clr-dg-pagination>\n   </clr-dg-footer>\n</clr-datagrid>\n\n","/* Copyright 2020 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {NgModule} from \"@angular/core\";\nimport {VsanBreadcrumbNavComponent} from \"./vsan-breadcrumb-nav.component\";\nimport {ClarityModule} from \"@clr/angular\";\nimport {CommonModule} from \"@angular/common\";\nimport {CommonDirectiveModule} from \"@directive/common-directive.module\";\nimport {CommonPipeModule} from \"@pipe/common-pipe.module\";\n\n@NgModule({\n   imports: [CommonModule, ClarityModule, CommonDirectiveModule, CommonPipeModule],\n   declarations: [VsanBreadcrumbNavComponent],\n   exports: [\n      VsanBreadcrumbNavComponent,\n   ],\n})\nexport class VsanBreadcrumbModule {}\n","\n      <vsan-flow-wizard\n            [title]=\"'vsan.csd.mountWizard.title' | localized\"\n            [pageSets]=\"pages\"\n            [startingTaskProperty]=\"'mountRemoteDatastore'\"\n            [contextProperties]=\"context\"\n            [services]=\"services\">\n      </vsan-flow-wizard>","/* Copyright 2019-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {NgModule} from \"@angular/core\";\nimport {CommonModule} from \"@angular/common\";\nimport {FormsModule} from \"@angular/forms\";\nimport {ClarityModule} from \"@clr/angular\";\nimport {ValidationModule} from \"@component/validation/validation.module\";\nimport {CommonPipeModule} from \"@pipe/common-pipe.module\";\nimport {CommonDirectiveModule} from \"@directive/common-directive.module\";\nimport {HealthStatusCell} from \"@component/cell/health-status-cell.component\";\nimport {LabelCell} from \"@component/cell/label-cell.component\";\nimport {StoragePolicyCell} from \"@component/cell/storage-policy-cell.component\";\nimport {MorCell} from \"@component/cell/mor-cell.component\";\nimport {IconItemComponent} from \"@component/cell/icon-item.component\";\nimport {HealthStateItemComponent} from \"@component/cell/health-state-item.component\";\nimport {ListCell} from \"@component/cell/list-cell.component\";\nimport {PspHealthStateItemComponent} from \"@component/cell/psp-health-state-item.component\";\nimport {HealthTestValueComponent} from \"@component/cell/health-test-value.component\";\nimport {HealthLinkCellComponent} from \"@component/cell/health-link-cell.component\";\nimport {HealthMorCellComponent} from \"@component/cell/health-mor-cell.component\";\n\n@NgModule({\n   imports: [\n      CommonModule,\n      FormsModule,\n      ClarityModule,\n      ValidationModule,\n      CommonPipeModule,\n      CommonDirectiveModule,\n   ],\n   // TODO: (vasilevd) Move health specific components to a separate common health module\n   declarations: [\n      HealthStatusCell,\n      HealthTestValueComponent,\n      LabelCell,\n      StoragePolicyCell,\n      MorCell,\n      HealthMorCellComponent,\n      ListCell,\n      IconItemComponent,\n      HealthStateItemComponent,\n      PspHealthStateItemComponent,\n      HealthLinkCellComponent,\n   ],\n   exports: [\n      HealthStatusCell,\n      HealthTestValueComponent,\n      LabelCell,\n      StoragePolicyCell,\n      MorCell,\n      HealthMorCellComponent,\n      ListCell,\n      IconItemComponent,\n      HealthStateItemComponent,\n      PspHealthStateItemComponent,\n      HealthLinkCellComponent,\n   ],\n})\nexport class CommonCellsModule {\n}\n","/* Copyright 2019-2020 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {BaseFilter} from \"./base-filter\";\nimport {VsanUiUtils} from '@util/vsan-util';\n\n/**\n * Extends BaseFilter by allowing the consumer to filter the hierarchical data field.\n * It tries to find the final string value of the data field by visiting the attribute hirarchy.\n */\nexport class ObjectFilter<T> extends BaseFilter<T> {\n   constructor(protected dataField: string){\n      super();\n   }\n\n   protected stringify(data: T): string {\n      return VsanUiUtils.stringify(data, this.dataField);\n   }\n}\n","<!--Copyright 2019-2022 VMware, Inc. All rights reserved. VMware Confidential-->\n<p class=\"page-description\">\n   {{'vsan.csd.mountWizard.checkCompatibility.description' | localized : selectedDatastore.datastore.name}}\n</p>\n\n<div *ngIf=\"loadingTests\" class=\"spinner spinner-md\"></div>\n<ng-container *ngIf=\"!loadingTests\">\n   <ng-container *ngIf=\"!hasError\">\n      <div class=\"precheck-tests-container\">\n         <div class=\"precheck-test\" *ngFor=\"let test of precheckTests\">\n            <clr-icon class=\"is-solid\"\n                      [ngClass]=[getHealthIconClass(test.status)]\n                      [attr.shape]=\"getHealthIconShape(test.status)\">\n            </clr-icon>\n            <span>{{test.description}}</span>\n         </div>\n      </div>\n\n      <div class=\"precheck-messages-container\">\n         <vsan-validation *ngFor=\"let message of additionalMessages\"\n                          [alertType]=\"message.type\"\n                          [(alerts)]=\"message.alerts\"\n                          [allowClose]=\"false\"\n                          [markedForFocus]=\"false\">\n         </vsan-validation>\n      </div>\n   </ng-container>\n</ng-container>\n","/* Copyright 2017-2020 VMware, Inc. All rights reserved. -- VMware Confidential */\n\nimport {Filter, TreeDatagridRow} from \"../tree-datagrid\";\nimport {ClrDatagridStringFilterInterface} from \"@clr/angular\";\n\n/**\n * Abstract filter class that needs to be extended in order to implement custom filtration.\n * The class has a single abstract method that takes an object of type T and returns its\n * string representation.\n */\nexport class BaseFilter<T> implements ClrDatagridStringFilterInterface<T>, Filter {\n\n   accepts(data: T, search: string): boolean {\n      // Handle correctly TreeDatagrid components\n      if (data instanceof TreeDatagridRow) {\n         data = data.data;\n      }\n\n      let label: string = this.stringify(data);\n      if (label) {\n         // Compare ignoring the case\n         return label.toLowerCase().indexOf(search.toLowerCase()) != -1;\n      } else {\n         return false;\n      }\n   }\n\n   match(data: T, search: string): boolean {\n      return this.accepts(data, search);\n   }\n\n   protected stringify(data: T): string  {\n      return data + \"\";\n   }\n\n}\n\n","/* Copyright 2019-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {NgModule} from \"@angular/core\";\nimport {CommonModule} from \"@angular/common\";\nimport {FormsModule} from \"@angular/forms\";\nimport {ClarityModule} from \"@clr/angular\";\nimport {CommonPipeModule} from \"@pipe/common-pipe.module\";\nimport {InventoryBrowserComponent} from \"@component/inventory/inventory-browser.component\";\nimport {InventoryNodeComponent} from \"@component/inventory/inventory-node.component\";\nimport {WitnessCandidateInventoryService} from \"@generated/witness-candidate-inventory-service\";\nimport {DatacenterInventoryService} from \"@generated/datacenter-inventory-service\";\nimport {NetworkInventoryService} from \"@generated/network-inventory-service\";\nimport {ComputeInventoryService} from \"@generated/compute-inventory-service\";\nimport {IoInsightInventoryService} from \"@generated/io-insight-inventory-service\";\nimport {SearchModule} from \"@component/search/search.module\";\nimport {TreeNodeComponent} from \"@component/inventory/tree-view/tree-node.component\";\nimport {TreeViewComponent} from \"@component/inventory/tree-view/tree-view.component\";\nimport {DropdownObjectSelectorComponent} from \"@component/inventory/dropdown-object-selector/dropdown-object-selector.component\";\nimport {CommonDirectiveModule} from \"@directive/common-directive.module\";\nimport {InventoryNodesComponent} from \"@component/inventory/inventory-nodes.component\";\nimport {TreeNodesComponent} from \"@component/inventory/tree-view/tree-nodes.component\";\n\n@NgModule({\n   imports: [\n      CommonModule,\n      FormsModule,\n      ClarityModule,\n      CommonPipeModule,\n      SearchModule,\n      CommonDirectiveModule,\n   ],\n   declarations: [\n      InventoryBrowserComponent,\n      InventoryNodesComponent,\n      InventoryNodeComponent,\n      TreeNodeComponent,\n      TreeNodesComponent,\n      TreeViewComponent,\n      DropdownObjectSelectorComponent,\n   ],\n   exports: [\n      InventoryBrowserComponent,\n      DropdownObjectSelectorComponent,\n      TreeViewComponent,\n   ],\n   providers: [\n      WitnessCandidateInventoryService,\n      DatacenterInventoryService,\n      NetworkInventoryService,\n      ComputeInventoryService,\n      IoInsightInventoryService,\n   ],\n})\nexport class InventoryBrowserModule {\n}","/* Copyright 2019 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, OnInit} from \"@angular/core\";\nimport {PageSet} from \"@component/wizard/flow-wizard.component\";\nimport {SelectRemoteDatastorePageComponent} from \"./select-remote-datastore-page.component\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {MountRemoteDatastoreContext} from \"@navigation/context/mount-remote-datastore-context\";\nimport {CheckCompatibilityPageComponent} from \"./check-compatibility-page.component\";\nimport {CsdMountService} from \"@generated/csd-mount-service\";\n\n@Component({\n   selector: \"vsan-mount-remote-datastore-wizard\",\n   template: `\n      <vsan-flow-wizard\n            [title]=\"'vsan.csd.mountWizard.title' | localized\"\n            [pageSets]=\"pages\"\n            [startingTaskProperty]=\"'mountRemoteDatastore'\"\n            [contextProperties]=\"context\"\n            [services]=\"services\">\n      </vsan-flow-wizard>`\n})\nexport class MountRemoteDatastoreWizardComponent implements OnInit {\n   // Get contextProperties from the modal builder in order to\n   // enable opening it across different context objects (datacenters, clusters, etc.)\n   context: MountRemoteDatastoreContext = VsanUiUtils.getModalContext();\n   pages: PageSet[];\n   services: any = [CsdMountService];\n\n   async ngOnInit() {\n      this.pages = [\n         new PageSet([SelectRemoteDatastorePageComponent, CheckCompatibilityPageComponent])\n      ];\n   }\n}\n","/* Copyright 2019 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {NgModule} from \"@angular/core\";\nimport {CommonDirectiveModule} from \"@directive/common-directive.module\";\nimport {CommonPipeModule} from \"@pipe/common-pipe.module\";\nimport {ValidationModule} from \"@component/validation/validation.module\";\nimport {ActionButtonModule} from \"@component/action-button/action-button.module\";\nimport {PromptModule} from \"@component/dialog/prompt/prompt.module\";\nimport {CommonCellsModule} from \"@component/cell/common-cells.module\";\nimport {InventoryBrowserModule} from \"@component/inventory/inventory-browser.module\";\nimport {SearchModule} from \"@component/search/search.module\";\nimport {TreeDatagridModule} from \"@component/datagrid/tree-datagrid.module\";\nimport {DatetimePickerModule} from \"@component/datetime-picker/datetime-picker.module\";\nimport {PopupListModule} from \"@component/popup-list/popup-list.module\";\nimport {VsanBreadcrumbModule} from \"@component/navigation/vsan-breadcrumb.module\";\n\n@NgModule({\n   imports: [\n         CommonDirectiveModule,\n         CommonPipeModule,\n         ValidationModule,\n         ActionButtonModule,\n         PromptModule,\n         CommonCellsModule,\n         InventoryBrowserModule,\n         SearchModule,\n         TreeDatagridModule,\n         DatetimePickerModule,\n         PopupListModule,\n         VsanBreadcrumbModule,\n   ],\n   exports: [\n      CommonDirectiveModule,\n      CommonPipeModule,\n      ValidationModule,\n      ActionButtonModule,\n      PromptModule,\n      CommonCellsModule,\n      InventoryBrowserModule,\n      SearchModule,\n      TreeDatagridModule,\n      DatetimePickerModule,\n      PopupListModule,\n      VsanBreadcrumbModule,\n   ],\n})\nexport class VsanCommonModule { }","/* Copyright 2019 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {NgModule} from \"@angular/core\";\nimport {CommonModule} from \"@angular/common\";\nimport {FormsModule} from \"@angular/forms\";\nimport {ClarityModule} from \"@clr/angular\";\nimport {CommonPipeModule} from \"@pipe/common-pipe.module\";\nimport {SearchComponent} from \"@component/search/search.component\";\n\n@NgModule({\n   imports: [\n      CommonModule,\n      FormsModule,\n      ClarityModule,\n      CommonPipeModule\n   ],\n   declarations: [\n      SearchComponent\n   ],\n   exports: [\n      SearchComponent\n   ],\n})\nexport class SearchModule {\n}\n","/* Copyright 2019-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {NgModule} from \"@angular/core\";\nimport {CommonModule} from \"@angular/common\";\nimport {ClarityModule} from \"@clr/angular\";\nimport {ActionButtonSeparatorComponent} from \"@component/action-button/action-button-separator.component\";\nimport {ButtonTitleDirective} from \"@component/action-button/button-title.directive\";\nimport {ButtonGroupDirective} from \"@component/action-button/button-group.directive\";\nimport {ButtonGroupWrapDirective} from \"@component/action-button/button-group-wrap.directive\";\n\n@NgModule({\n   imports: [\n      CommonModule,\n      ClarityModule,\n   ],\n   declarations: [\n      ActionButtonSeparatorComponent,\n      ButtonGroupDirective,\n      ButtonGroupWrapDirective,\n      ButtonTitleDirective,\n   ],\n   exports: [\n      ActionButtonSeparatorComponent,\n      ButtonGroupDirective,\n      ButtonGroupWrapDirective,\n      ButtonTitleDirective,\n   ]\n})\nexport class ActionButtonModule {\n}\n","/* Copyright 2016 VMware, Inc. All rights reserved. -- VMware Confidential */\n\nimport {BehaviorSubject} from \"rxjs\";\nimport {ClrDatagridFilterInterface} from \"@clr/angular\";\n\n/**\n * Hierarchical data provider.\n * This is a additional structure to the Clarity Datagrid that supports hierarchical data rendering.\n */\nexport class TreeDatagrid {\n\n   public static forChildProperty(childField: string, rowData?: any[]) {\n      return new TreeDatagrid(item => item[childField], rowData);\n   }\n\n   /**\n    * The data objects that are to be rendered as first-level rows.\n    */\n   protected roots: any[];\n\n   /**\n    * The flat row structure consisting of the root objects and their children\n    * in case the parents are expanded. Sorting and filtering are reflected here.\n    */\n   protected content: TreeDatagridRow[];\n\n   /**\n    * List of filters to be applied on the data.\n    */\n   protected filters: TreeFilter[] = [];\n\n   /**\n    * The comparator to be used to sort the items and their children.\n    */\n   public comparator: (item1: any, item2: any) => number;\n\n   /**\n    * Sorting direction.\n    */\n   public sortAscending: boolean;\n\n   /**\n    * @param childItems lambda for extracting the children of a given data object\n    * @param rootItems (optional) the initial data objects\n    */\n   constructor(private childItems: (parent: any) => any[], rootItems?: any[]) {\n      this.rootItems = rootItems;\n   }\n\n   /**\n    * Removes all items.\n    */\n   public clear = () => this.rootItems = [];\n\n   /**\n    * Sets the given data objects as content.\n    */\n   public refreshGrid = (rowData: any[]) => this.rootItems = rowData;\n\n   public set rootItems(value: any[]) {\n      this.roots = value ? value : [];\n      this.content = this.flatten(this.roots);\n   }\n\n   /**\n    * root data objects\n    */\n   public get rootItems(): any[] {\n      return this.roots;\n   }\n\n   /**\n    * The flat row structure consisting of the root objects and their children\n    * in case the parents are expanded. Sorting and filtering are reflected here.\n    */\n   public get rows(): TreeDatagridRow[] {\n      return this.content;\n   }\n\n   /**\n    * Registers a new filter in the data provider.\n    * Initially the filter will accept all items.\n    * The consumer can assign a predicate to the TreeFilter object\n    * to add filtering rule. All registered filters' predicates are\n    * evaluated using AND operator.\n    */\n   public registerFilter(): TreeFilter {\n      let filter: TreeFilter = new TreeFilter(() => this.content = this.flatten(this.rootItems));\n      this.filters.push(filter);\n      return filter;\n   }\n\n   public unregisterFilter(value: TreeFilter) {\n      let index: number = this.filters.indexOf(value);\n      if (index != -1) {\n         this.filters.splice(index, 1);\n      }\n   }\n\n   /**\n    * Applies sorting comparator and direction for the data provider.\n    */\n   public sort(comparator: (item1: any, item2: any) => number, ascending: boolean = true) {\n      this.comparator = comparator;\n      this.sortAscending = ascending;\n\n      // refresh content, will expand all nodes\n      this.content = this.flatten(this.rootItems);\n   }\n\n   public collapseAll = () => this.rows.forEach(r => this.collapse(r));\n\n   public expandAll = () => this.rows.forEach(r => this.expand(r));\n\n   protected expand(row: TreeDatagridRow) {\n      if (row.isExpanded) {\n         // already expanded\n         return;\n      }\n\n      let rowIndex = this.content.indexOf(row);\n      if (rowIndex == -1) {\n         // row is filtered out\n         return;\n      }\n\n      let flattenedChildren: TreeDatagridRow[] = this.flatten(this.childItems(row.data), row.depth + 1);\n      if (flattenedChildren.length > 0) {\n         this.content.splice(rowIndex + 1, 0, ... flattenedChildren);\n      }\n\n      row.isExpanded = true;\n   }\n\n   protected collapse(row: TreeDatagridRow) {\n      if (!row.isExpanded) {\n         // already collapsed\n         row.isExpanded = false;\n         return;\n      }\n\n      let rowIndex = this.content.indexOf(row);\n      if (rowIndex == -1) {\n         // row is filtered out\n         return;\n      }\n\n      let removeCount: number = 0;\n      for (let i = rowIndex + 1; i < this.content.length && row.depth < this.content[i].depth; i++) {\n         removeCount ++;\n      }\n\n      this.content.splice(rowIndex + 1, removeCount);\n      row.isExpanded = false;\n   }\n\n   // returns flattened list of the specified items and their children (and their children);\n   // sorting and filter are applied;\n   // items are returned in expanded state\n   protected flatten(items: any[], depth: number = 0, parent?: any): TreeDatagridRow[] {\n      if (!items) {\n         return [];\n      }\n\n      let sortedItems: any[] = [... items];\n      if (this.comparator) {\n         sortedItems.sort((item1: any, item2: any) => (this.sortAscending ? 1 : -1) * this.comparator(item1, item2));\n      }\n\n      let result: TreeDatagridRow[] = [];\n\n      for (let item of sortedItems) {\n\n         let childItems: any[] = this.childItems(item);\n\n         // flattened children, including their children\n         let children: TreeDatagridRow[] = this.flatten(childItems, depth + 1, item);\n\n         let filteredOut: boolean = false;\n         for (let filter of this.filters) {\n            // filter out items only if the filter is not applicable for the item or it's parent\n            const matchFilter: boolean = filter.predicate(item) || (!!parent && filter.predicate(parent));\n            if (!matchFilter) {\n               filteredOut = true;\n            }\n         }\n         if (!filteredOut || children.length > 0) {\n            let row: TreeDatagridRow = new TreeDatagridRow();\n            row.data = item;\n            row.toggle = () => row.isExpanded ? this.collapse(row) : this.expand(row);\n            row.depth = depth;\n            row.isExpanded = true;\n            row.isExpandable = childItems && childItems.length > 0;\n\n            result.push(row, ... children);\n         }\n      }\n\n      return result;\n   }\n\n}\n\n/**\n * Represents a single row in a flattened tree data provider.\n */\nexport class TreeDatagridRow {\n\n   /**\n    * The data object for the row\n    */\n   public data: any;\n\n   /**\n    * Will be true if the row has children\n    */\n   public isExpandable: boolean;\n\n   /**\n    * Will be true if the row is currently expanded\n    */\n   public isExpanded: boolean;\n\n   /**\n    * Will flip the row's expanded/collapsed state\n    */\n   public toggle: () => void;\n\n   /**\n    * The nesting level the row is rendered at\n    */\n   public depth: number;\n\n}\n\nexport interface Filter  {\n   match(data: any, filter:string): boolean;\n}\n\n/**\n * Allows specifying filtering predicate for the data provider.\n * @see TreeDatagrid.registerFilter\n */\nexport class TreeFilter implements ClrDatagridFilterInterface<any> {\n\n   private _predicate: (item: any) => boolean;\n   changes = new BehaviorSubject<boolean>(false);\n\n   constructor(private apply: () => void) {\n      this.clear();\n   }\n\n   public clear() {\n      this._predicate = (item: any) => true;\n      this.apply();\n   }\n\n   public set predicate(predicate: (item: any) => boolean) {\n      if (!predicate) {\n         this.clear();\n      } else {\n         this._predicate = predicate;\n         this.apply();\n      }\n   }\n\n   public get predicate(): (item: any) => boolean {\n      return this._predicate;\n   }\n\n   // Used by clarity filter\n   isActive(): boolean {\n      return this.changes.getValue();\n   }\n\n   // Used by clarity filter\n   accepts(val: any): boolean {\n      return true;\n   }\n}"],"sourceRoot":"webpack:///"}