{"version":3,"sources":["webpack:///src/app/vsan/common/component/precheck/pre-check-evacuation-dialog-size.ts","webpack:///src/app/vsan/common/component/precheck/pre-check-evacuation-summary.component.ts","webpack:///src/app/generated/what-if-spec.ts","webpack:///src/app/vsan/common/component/precheck/pre-check-evacuation-summary.html"],"names":["PreCheckEvacuationDialogSize","PreCheckEvacuationSummaryComponent","whatIfPropertyProvider","capabilityProvider","Icon","decommissionModeSummaries","noDataMigrationObjects","showErrorMessage","selectedDecommissionMode","ensureObjectAccessibility","isDecommissionModeChangeAllowed","selectedDecommissionModeSummaryChanged","isDiskResourcePrecheckSupportedRetrieved","onPreCheckEvacuationDataRetrieved","result","isWhatIfSupported","error","push","getDecommissionModeInfo","fullDataMigration","evacuateAllData","ensureAccessibility","noDataMigration","noAction","onSelectedDecommissionModeChanged","whatIfData","value","summary","DecommissionModeSummary","length","getString","successWithoutDataLoss","successWithInaccessibleOrNonCompliantObjects","alertType","WARNING","SUCCESS","DANGER","inaccessibleIncompliantObjects","objects","isValidDecommissionMode","success","selectedDecommissionModeSummary","getSelectedDecommissionModeSummary","emit","getDiskResourcePrecheckAlertType","showPrecheckRecommendationMessage","getDiskResourcePrecheckAlertMessage","preCheckRecommendationMessage","isDiskResourcePrecheckSupported","find","decommissionModeSummary","onError","clusterId","contextObj","fromUid","contextObject","preCheckEvacuationSpec","Factory","create","evacuationEntityUuid","loading","Promise","all","getIsDiskResourcePrecheckSupported","getWhatIfResult","hostMor","whatIfResult","WhatIfSpec","entityUuid","clusterRef","detailed"],"mappings":"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","file":"87-es5.js","sourcesContent":["/* Copyright 2020 VMware, Inc. All rights reserved. -- VMware Confidential */\nexport enum PreCheckEvacuationDialogSize {\n   HEIGHT_WITH_OBJECTS = 580,\n   HEIGHT_WITHOUT_OBJECTS = 280,\n   WIDTH = 1100,\n}","/* Copyright 2017-2019 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, EventEmitter, Input, Output, OnInit} from \"@angular/core\";\nimport {ManagedObject} from \"@service/managed-object\";\nimport {Logger} from \"@util/logger\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {Icon} from \"@util/icon\";\nimport {AlertType} from \"@component/validation/alert-type\";\nimport {WhatIfPropertyProvider} from \"@generated/what-if-property-provider\";\nimport {WhatIfSpec} from \"@generated/what-if-spec\";\nimport {WhatIfResult} from \"@generated/what-if-result\";\nimport {WhatIfData} from \"@generated/what-if-data\";\nimport {VirtualObjectModel} from \"@generated/virtual-object-model\";\nimport {VsanCapabilityProvider} from \"@generated/vsan-capability-provider\";\nimport {DecommissionMode} from \"@generated/decommission-mode\";\n\n@Component({\n   templateUrl: \"pre-check-evacuation-summary.html\",\n   styleUrls: [\"pre-check-evacuation-summary.scss\"],\n   selector: \"vsan-pre-check-evacuation-summary\"\n})\nexport class PreCheckEvacuationSummaryComponent implements OnInit {\n   Icon = Icon;\n   loading: boolean;\n   // used for holding the result data\n   decommissionModeSummaries: DecommissionModeSummary[] = [];\n   selectedDecommissionModeSummary: DecommissionModeSummary;\n\n   noDataMigrationObjects: VirtualObjectModel[] = [];\n   showErrorMessage: boolean = false;\n   isDiskResourcePrecheckSupported: boolean;\n\n   @Input()\n   hostMor: ManagedObject;\n\n   @Input()\n   clusterId: string;\n\n   @Input()\n   evacuationEntityUuid: string;\n\n   @Input()\n   selectedDecommissionMode: DecommissionMode = DecommissionMode.ensureObjectAccessibility;\n\n   @Input()\n   isDecommissionModeChangeAllowed: boolean = true;\n\n   @Input()\n   preCheckRecommendationMessage: string;\n\n   @Output()\n   selectedDecommissionModeSummaryChanged: EventEmitter<DecommissionModeSummary> =\n         new EventEmitter<DecommissionModeSummary>();\n\n   @Output()\n   isDiskResourcePrecheckSupportedRetrieved: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n   constructor(private whatIfPropertyProvider: WhatIfPropertyProvider,\n         private capabilityProvider: VsanCapabilityProvider) {\n   }\n\n   async ngOnInit() {\n      let contextObj: ManagedObject;\n\n      // When opening this via the Enter maintenance mode, the ManagedObject's contextObject is null, so we use the\n      // clusterId we get from it to build the contextObject.\n      if (this.clusterId) {\n         contextObj = ManagedObject.fromUid(this.clusterId);\n      } else {\n         contextObj = ManagedObject.contextObject;\n      }\n      let preCheckEvacuationSpec: WhatIfSpec = WhatIfSpec.Factory.create(\n            this.evacuationEntityUuid, contextObj, true);\n      try {\n         this.loading = true;\n         let whatIfResult: WhatIfResult;\n         [this.isDiskResourcePrecheckSupported, whatIfResult] = await Promise.all([\n            this.capabilityProvider.getIsDiskResourcePrecheckSupported(contextObj),\n            this.whatIfPropertyProvider.getWhatIfResult(this.hostMor, preCheckEvacuationSpec)\n         ]);\n\n         this.isDiskResourcePrecheckSupportedRetrieved.emit(this.isDiskResourcePrecheckSupported);\n         this.onPreCheckEvacuationDataRetrieved(whatIfResult);\n      } catch (error) {\n         this.onError(error);\n      } finally {\n         this.loading = false;\n      }\n   }\n\n   private onPreCheckEvacuationDataRetrieved = (result: WhatIfResult) => {\n      if (!result || !result.isWhatIfSupported) {\n         Logger.error(\"Failed to retrieve pre-check status or pre-check operation is unsupported.\");\n         this.showErrorMessage = true;\n         return;\n      }\n\n      this.decommissionModeSummaries.push(this.getDecommissionModeInfo(result.fullDataMigration,\n            DecommissionMode.evacuateAllData));\n      this.decommissionModeSummaries.push(this.getDecommissionModeInfo(result.ensureAccessibility,\n            DecommissionMode.ensureObjectAccessibility));\n      this.decommissionModeSummaries.push(this.getDecommissionModeInfo(result.noDataMigration,\n            DecommissionMode.noAction));\n\n      this.onSelectedDecommissionModeChanged(this.selectedDecommissionMode);\n   };\n\n   private getDecommissionModeInfo = (whatIfData: WhatIfData, value: DecommissionMode): DecommissionModeSummary => {\n      let summary: DecommissionModeSummary = new DecommissionModeSummary();\n      summary.value = value;\n\n      if (!whatIfData.summary || whatIfData.summary.length == 0) {\n         summary.summary = VsanUiUtils.getString(\"vsan.dialog.precheckEvacuation.result.unavailable\");\n      } else {\n         summary.summary = whatIfData.summary;\n      }\n\n      if (whatIfData.successWithoutDataLoss) {\n         if (whatIfData.successWithInaccessibleOrNonCompliantObjects) {\n            summary.alertType = AlertType.WARNING;\n         } else {\n            summary.alertType = AlertType.SUCCESS;\n         }\n      } else {\n         summary.alertType = AlertType.DANGER;\n      }\n\n      summary.inaccessibleIncompliantObjects = whatIfData.objects;\n      // Indicates whether the the data migration task will succeed or not\n      summary.isValidDecommissionMode = whatIfData.success;\n\n      return summary;\n   };\n\n   onSelectedDecommissionModeChanged = (value: DecommissionMode) => {\n      this.selectedDecommissionMode = value;\n      if (this.decommissionModeSummaries.length === 0) {\n         // No data has been found/retrieved yet\n         return;\n      }\n      this.selectedDecommissionModeSummary = this.getSelectedDecommissionModeSummary();\n      this.noDataMigrationObjects = this.selectedDecommissionModeSummary.inaccessibleIncompliantObjects;\n      this.selectedDecommissionModeSummaryChanged.emit(this.selectedDecommissionModeSummary);\n   };\n\n   getDiskResourcePrecheckAlertType = (): string => {\n     return this.showPrecheckRecommendationMessage() ? AlertType.WARNING : AlertType.DANGER;\n   };\n\n   getDiskResourcePrecheckAlertMessage = (): string => {\n     return this.showPrecheckRecommendationMessage() ? this.preCheckRecommendationMessage\n           : this.selectedDecommissionModeSummary.summary;\n   };\n\n   // When disk resource precheck is supported, error message is shown only when the operation will not succeed\n   // (e.g. there is insufficient space or there are currently inaccessible VMs),\n   // otherwise a recommendation message is shown in a warning banner\n   private showPrecheckRecommendationMessage = (): boolean => {\n      return this.isDiskResourcePrecheckSupported && this.selectedDecommissionModeSummary.isValidDecommissionMode;\n   };\n\n   private getSelectedDecommissionModeSummary = (): DecommissionModeSummary => {\n      return this.decommissionModeSummaries.find((decommissionModeSummary: DecommissionModeSummary) => {\n         return decommissionModeSummary.value === this.selectedDecommissionMode;\n      });\n   };\n\n   private onError = (error: any) => {\n      this.decommissionModeSummaries = [];\n      Logger.error(\"Retrieving precheck status failed with error:\" + error);\n      this.showErrorMessage = true;\n   };\n}\n\nexport class DecommissionModeSummary {\n   value: DecommissionMode;\n   alertType: AlertType;\n   summary: string;\n   inaccessibleIncompliantObjects: VirtualObjectModel[];\n   isValidDecommissionMode: boolean;\n}","\nexport interface WhatIfSpec {\n\n   entityUuid: string;\n   clusterRef: any;\n   detailed: boolean;\n} //class WhatIfSpec\n\nexport module WhatIfSpec{\nexport class Factory {\n\n   static create = (entityUuid: string, clusterRef: any, detailed: boolean): WhatIfSpec => {\n      return { entityUuid: entityUuid, clusterRef: clusterRef, detailed: detailed, };\n   }\n\n\n} //class Factory\n\n} //module WhatIfSpec\n","<vsan-validation id=\"common-status-error\"\n                 *ngIf=\"showErrorMessage\"\n                 [alertType]=\"'warning'\"\n                 [alert]=\"'vsan.dialog.precheckEvacuation.result.unavailable' | localized\"\n                 [allowClose]=\"false\">\n</vsan-validation>\n\n<!-- vSAN data migration select options -->\n<ng-container *ngIf=\"isDecommissionModeChangeAllowed\">\n   <vsan-pre-check-evacuation-select [selectedDecommissionMode]=\"selectedDecommissionMode\"\n                                     (selectedDecommisionModeChange)=\"onSelectedDecommissionModeChanged($event)\">\n   </vsan-pre-check-evacuation-select>\n</ng-container>\n<!-- vSAN data migration Selected migration summary -->\n<ng-container *ngIf=\"!loading\">\n   <!--Disk precheck is supported and summary is not invoked from EMM/Reboot dialog-->\n   <vsan-validation *ngIf=\"isDiskResourcePrecheckSupported && isDecommissionModeChangeAllowed\"\n                    [alertType]=\"getDiskResourcePrecheckAlertType()\"\n                    [alert]=\"getDiskResourcePrecheckAlertMessage()\"\n                    [allowClose]=\"false\"\n                    id=\"resource-precheck-message-container\">\n   </vsan-validation>\n   <!--Disk precheck is not supported or summary is invoked from EMM/Reboot dialog-->\n   <ng-container *ngIf=\"!isDiskResourcePrecheckSupported || !isDecommissionModeChangeAllowed\">\n      <vsan-validation id=\"selected-decommision-mode-summary\"\n                       *ngIf=\"selectedDecommissionModeSummary\"\n                       [alertType]=\"selectedDecommissionModeSummary.alertType\"\n                       [alert]=\"selectedDecommissionModeSummary.summary\"\n                       [isSmall]=\"true\"\n                       [allowClose]=\"false\">\n      </vsan-validation>\n      <vsan-virtual-objects-table *ngIf=\"noDataMigrationObjects?.length > 0\"\n                                  [loading]=\"loading\"\n                                  [isWhatIfData]=\"true\"\n                                  [hideRowSelection]=\"true\"\n                                  [clusterId]=\"clusterId\"\n                                  [virtualObjects]=\"noDataMigrationObjects\">\n      </vsan-virtual-objects-table>\n   </ng-container>\n</ng-container>\n<span *ngIf=\"loading\" class=\"spinner spinner-md\"></span>\n"]}