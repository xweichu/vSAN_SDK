{"version":3,"sources":["webpack:///src/app/vsan/cluster/configure/action/capacity/capacity-reservation-settings.html","webpack:///src/app/vsan/common/service/navigation/model/documentation-id.ts","webpack:///src/app/vsan/cluster/configure/action/capacity/capacity-management.module.ts","webpack:///src/app/vsan/cluster/configure/action/capacity/capacity-reservation-settings.component.ts","webpack:///src/app/vsan/cluster/configure/action/capacity/capacity-management-dialog.component.ts","webpack:///src/app/vsan/cluster/configure/action/capacity/capacity-management-dialog.html","webpack:///src/app/vsan/common/component/alert-threshold/customize-alert-threshold.component.ts","webpack:///src/app/vsan/common/component/alert-threshold/customize-alert-threshold.module.ts","webpack:///src/app/vsan/common/component/alert-threshold/customize-alert-threshold.html"],"names":["DocumentationId","routes","path","component","CapacityManagementModule","CapacityReservationSettingsComponent","reservationConfigChange","isSupported","reservationConfig","vsanOperationReservation","isEnabled","hostFailureReservation","getReservationFromBoolean","emit","reservation","isReservationDisabled","isReservationSupported","isReservationEnforced","CapacityManagementDialogComponent","capacityManagementService","capacityService","navigationService","capabilityProvider","Icon","showOldFormatInfo","capacitySectionsData","legendSectionsData","plotLines","isCapacityCustomizableThresholdsSupportedOnVc","selectedDatastoreType","VSAN","datastoreValidState","Map","DATASTORE_TYPE_KEY_GENERATOR","propKey","isConfigChanged","isReservationConfigChanged","originalReservationConfig","isCustomizableThresholdsChanged","getChangedAlertThresholds","length","documentationUrl","getVmwareHelpUrl","MONITORING_URL","ENFORCE_RESERVATION_DOCUMENTATION","context","getModalContext","clusterName","contextRef","contextObject","isCapacityCustomizableThresholdsSupported","Promise","all","getCapacityManagementData","capacityManagementData","parseAvailableDatastoresCapacityData","capacityReservationConfig","updateCapacityReservationData","customizableAlertThresholds","parseCustomizableThresholdsData","updateCapacityChartData","capacityDataPerDatastore","toMap","allDatastoresCapacityData","availableDatastoreTypes","orderDatastoreTypes","Array","from","keys","reservationOptionKeyGenerator","vSanDatastoreCapacityThresholdsData","deepClone","alertThresholdsPerDatastore","originalAlertThresholdsPerDatastore","get","alertThreshold","onCustomizedAlertThresholdChange","set","isValid","isCustomizableThresholdsInvalid","forEach","getDefaultThreshold","getCapacityData","datastoreType","getLocalizedDatastoreType","hostRebuildDisabled","descrKey","getString","VSAN_DIRECT","PMEM","has","capacityData","capacityTotal","totalSpace","capacityUsed","usedSpace","push","parseCapacityOverviewDataSections","updateChartThresholds","isVsanDatastoreSelected","getPlotLines","parseSlackSpaceCapacity","isReservationConfigInvalid","isUsedCapacityExceedingThreshold","errorThreshold","basedOnTotalSpace","alertMessage","hostReservationChartData","parseHostReservationDataSection","operationReservationChartData","parseVsanOperationDataSection","transientCapacity","parseTransientOverviewDataSections","customizedAlertThreshold","setCustomizedChartThresholds","setDefaultChartThresholds","warningThreshold","getCustomizedCapacityThreshold","defaultAlertThreshold","getDefaultAlertThreshold","getDefaultCapacityThreshold","isDefault","Math","floor","basedOnTotalSpaceWithoutReservation","closeModalDialog","configureCapacityManagement","taskRef","changedAlertThresholds","changedThreshold","originalThreshold","areEqual","srMessage","srMessageType","PAGE_TITLE","CustomizeAlertThresholdsComponent","ALERT_THRESHOLD_MIN_VALUE","ALERT_THRESHOLD_MAX_VALUE","WARNING_THRESHOLD_CONTROL_NAME","ERROR_THRESHOLD_CONTROL_NAME","ERRORS","alertThresholdChange","_alertThreshold","value","onThresholdChange","isCustomizeAlertsSelected","validateAll","haveErrors","validate","validatedControlName","isDecimal","isThresholdOutOfRange","thresholdRangeErrorMessage","areThresholdsOverlapping","thresholdsOverlappingErrorMessage","CustomizableThresholdsModule"],"mappings":"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","file":"126-es5.js","sourcesContent":["<!--Copyright 2020 VMware, Inc. All rights reserved. -- VMware Confidential-->\n<clr-toggle-container *ngIf=\"!isDisabled(reservationConfig.vsanOperationReservation)\">\n   <clr-toggle-wrapper>\n      <input id=\"vsan-operation-space-reservation\"\n             type=\"checkbox\"\n             clrToggle\n             name=\"slackSpaceCapacityReservation\"\n             [(ngModel)]=\"vsanOperationReservation\"\n             [disabled]=\"!isSupported(reservationConfig.vsanOperationReservation)\"\n             (change)=\"updateReservation()\"/>\n      <label id=\"vsan-operation-space-label\">\n         {{\"vsan.services.enforcereservation.vsanOperationSpace.label\" | localized}}\n      </label>\n   </clr-toggle-wrapper>\n   <clr-control-helper *ngIf=\"!isSupported(reservationConfig.vsanOperationReservation)\">\n      {{\"vsan.services.enforcereservation.action.notsupported\" | localized}}\n   </clr-control-helper>\n</clr-toggle-container>\n\n<clr-toggle-container *ngIf=\"!isDisabled(reservationConfig.hostFailureReservation)\">\n   <clr-toggle-wrapper>\n      <input id=\"host-rebuild-reservation\"\n             type=\"checkbox\"\n             clrToggle\n             name=\"hostFailureCapacityReservation\"\n             [(ngModel)]=\"hostFailureReservation\"\n             [disabled]=\"!isSupported(reservationConfig.hostFailureReservation) || !vsanOperationReservation\"\n             (change)=\"updateReservation()\"/>\n      <label id=\"host-rebuild-label\">\n         {{\"vsan.services.enforcereservation.hostRebuild.label\" | localized}}\n      </label>\n   </clr-toggle-wrapper>\n   <clr-control-helper *ngIf=\"isSupported(reservationConfig.hostFailureReservation) && !vsanOperationReservation\">\n      {{\"vsan.services.enforcereservation.hostRebuild.disabled.vsanOpSpace.reason\" | localized}}\n   </clr-control-helper>\n   <clr-control-helper *ngIf=\"!isSupported(reservationConfig.hostFailureReservation)\">\n      {{\"vsan.services.enforcereservation.action.notsupported\" | localized}}\n   </clr-control-helper>\n</clr-toggle-container>","/* Copyright 2021 VMware, Inc. All rights reserved. -- VMware Confidential */\n/**\n * IDs used in external navigation to official documentation\n */\nexport enum DocumentationId {\n   RDMA_DOCUMENTATION = \"GUID-48154235-C557-4074-8BEB-AB9A7BD84A92\",\n   IO_INSIGHT_DOCUMENTATION = \"GUID-3ABCB8EA-1FC7-40A4-B834-C9FEDF02A902\",\n   ENFORCE_RESERVATION_DOCUMENTATION = \"GUID-CD510EAE-1A9F-45D2-BB66-E893C8AAF20A\",\n}","/* Copyright 2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {NgModule} from \"@angular/core\";\nimport {CommonModule} from \"@angular/common\";\nimport {FormsModule} from \"@angular/forms\";\nimport {RouterModule, Routes} from \"@angular/router\";\nimport {ClarityModule} from \"@clr/angular\";\nimport {VsanChartModule} from \"@component/chart/chart.module\";\nimport {CapacityManagementDialogComponent} from \"./capacity-management-dialog.component\";\nimport {CapacityReservationSettingsComponent} from \"./capacity-reservation-settings.component\";\nimport {CommonPipeModule} from \"@pipe/common-pipe.module\";\nimport {ValidationModule} from \"@component/validation/validation.module\";\nimport {PromptModule} from \"@component/dialog/prompt/prompt.module\";\nimport {CommonDirectiveModule} from \"@directive/common-directive.module\";\nimport {CustomizableThresholdsModule} from \"@component/alert-threshold/customize-alert-threshold.module\";\nimport {VsanCapacityService} from \"@component/capacity/capacity.service\";\nimport {SpaceEfficiencyService} from \"@service/space-efficiency-service\";\n\nconst routes: Routes = [\n   {\n      path: \"\",\n      component: CapacityManagementDialogComponent,\n   },\n];\n\n@NgModule({\n   imports: [\n      CommonModule,\n      FormsModule,\n      ClarityModule,\n      CommonPipeModule,\n      CommonDirectiveModule,\n      ValidationModule,\n      PromptModule,\n      VsanChartModule,\n      CustomizableThresholdsModule,\n      RouterModule.forChild(routes),\n   ],\n   declarations: [\n      CapacityManagementDialogComponent,\n      CapacityReservationSettingsComponent,\n   ],\n   providers: [\n      VsanCapacityService,\n      SpaceEfficiencyService,\n   ],\n})\nexport class CapacityManagementModule {\n}","/* Copyright 2020-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, EventEmitter, Input, OnInit, Output} from \"@angular/core\";\nimport {CapacityReservationConfig} from \"@generated/capacity-reservation-config\";\nimport {CapacityReservationUtil} from \"@util/capacity-reservation-util\";\nimport {ReservationStatus} from \"@generated/reservation-status\";\n\n@Component({\n   templateUrl: \"capacity-reservation-settings.html\",\n   styleUrls: [\"capacity-reservation-settings.scss\"],\n   selector: \"vsan-capacity-reservation-settings\",\n})\nexport class CapacityReservationSettingsComponent implements OnInit {\n\n   vsanOperationReservation: boolean;\n   hostFailureReservation: boolean;\n\n   @Input()\n   reservationConfig: CapacityReservationConfig;\n\n   @Output()\n   reservationConfigChange: EventEmitter<CapacityReservationConfig> = new EventEmitter();\n\n   ngOnInit(): void {\n      if (this.isSupported(this.reservationConfig.vsanOperationReservation)) {\n         this.vsanOperationReservation = this.isEnabled(this.reservationConfig.vsanOperationReservation);\n      }\n      if (this.isSupported(this.reservationConfig.hostFailureReservation)) {\n         this.hostFailureReservation = this.isEnabled(this.reservationConfig.hostFailureReservation);\n      }\n   }\n\n   updateReservation(): void {\n      if (!this.vsanOperationReservation) {\n         // Make sure to set host failure reservation to false if vSAN operation space is turned off\n         this.hostFailureReservation = false;\n      }\n      this.reservationConfig.vsanOperationReservation = CapacityReservationUtil.getReservationFromBoolean(\n            this.reservationConfig.vsanOperationReservation, this.vsanOperationReservation);\n      this.reservationConfig.hostFailureReservation = CapacityReservationUtil.getReservationFromBoolean(\n            this.reservationConfig.hostFailureReservation, this.hostFailureReservation);\n      this.reservationConfigChange.emit(this.reservationConfig);\n   }\n\n   isDisabled(reservation: ReservationStatus): boolean {\n      return CapacityReservationUtil.isReservationDisabled(reservation);\n   }\n\n   isSupported(reservation: ReservationStatus): boolean {\n      return CapacityReservationUtil.isReservationSupported(reservation);\n   }\n\n   private isEnabled(reservationConfig: ReservationStatus) {\n      return CapacityReservationUtil.isReservationEnforced(reservationConfig);\n   }\n}\n","/* Copyright 2020-2022 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, OnInit} from \"@angular/core\";\nimport {VsanCapacityService} from \"@component/capacity/capacity.service\";\nimport {CapacityAlertThreshold} from \"@component/chart/model/capacity-alert-threshold.model\";\nimport {ChartSectionData, ChartSectionPlotLine} from \"@component/chart/model/chart-section.data\";\nimport {AlertThreshold} from \"@generated/alert-threshold\";\nimport {CapacityData} from \"@generated/capacity-data\";\nimport {CapacityManagementData} from \"@generated/capacity-management-data\";\nimport {CapacityManagementService} from \"@generated/capacity-management-service\";\nimport {CapacityReservationConfig} from \"@generated/capacity-reservation-config\";\nimport {CapacityReservationOption} from \"@generated/capacity-reservation-option\";\nimport {DatastoreType} from \"@generated/datastore-type\";\nimport {VsanCapabilityProvider} from \"@generated/vsan-capability-provider\";\nimport {CapacityManagementContext} from \"@navigation/context/capacity-management-context\";\nimport {DocumentationId} from \"@navigation/model/documentation-id\";\nimport {NavigationService} from \"@navigation/navigation.service\";\nimport {ErrorMessage} from \"@service/flow/error-message.decorator\";\nimport {Loader} from \"@service/flow/loader.decorator\";\nimport {LoadingIndicator} from \"@service/flow/loading-indicator.decorator\";\nimport {ManagedObject} from \"@service/managed-object\";\nimport {SrMessageType} from \"@service/screen-reader-announcer.service\";\nimport {AlertThresholdsUtil} from \"@util/alert-thresholds-util\";\nimport {CapacityReservationUtil} from \"@util/capacity-reservation-util\";\nimport {DiskMgmtUtil} from \"@util/disk-mgmt.util\";\nimport {Icon} from \"@util/icon\";\nimport {MapUtil} from \"@util/map-util\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport * as cloneDeep from \"lodash/cloneDeep\";\n\n@Component({\n   templateUrl: \"capacity-management-dialog.html\",\n   selector: \"vsan-capacity-management-dialog\",\n   styleUrls: [\"capacity-management-dialog.scss\"],\n})\nexport class CapacityManagementDialogComponent implements OnInit {\n   Icon: typeof Icon = Icon;\n\n   @ErrorMessage()\n   alertMessage: string;\n\n   @LoadingIndicator()\n   loading: boolean;\n\n   clusterName: string;\n   showOldFormatInfo: boolean = false;\n   capacityTotal: number;\n   capacityUsed: number;\n   capacitySectionsData: ChartSectionData[] = [];\n\n   /*\n      We need the used and reservations chart data separately to be able to add/remove the reservations dynamically\n    */\n   legendSectionsData: ChartSectionData[] = [];\n\n   plotLines: ChartSectionPlotLine[] = [];\n   warningThreshold: CapacityAlertThreshold;\n   errorThreshold: CapacityAlertThreshold;\n   /**\n    * The hovered series in capacity bar chart component, used to display the corresponding legend border.\n    */\n   hoveredSeries: any;\n\n   isCapacityCustomizableThresholdsSupportedOnVc: boolean = false;\n\n   selectedDatastoreType: DatastoreType = DatastoreType.VSAN;\n   availableDatastoreTypes: DatastoreType[];\n\n   reservationConfig: CapacityReservationConfig;\n   private contextRef: ManagedObject;\n   private originalReservationConfig: CapacityReservationConfig;\n\n   /*\n    Holds the validation result of the current used capacity compared to the errorThreshold, based on the\n    selected reservation. This is used to disable the apply button as used cannot exceed the error threshold,\n    when configuring the reservation.\n    */\n   isReservationConfigInvalid: boolean;\n\n   isCustomizableThresholdsInvalid: boolean;\n\n   private vSanDatastoreCapacityThresholdsData: Map<CapacityReservationOption, AlertThreshold>;\n   private capacityDataPerDatastore: Map<DatastoreType, CapacityData>;\n   private alertThresholdsPerDatastore: Map<DatastoreType, AlertThreshold>;\n   private originalAlertThresholdsPerDatastore: Map<DatastoreType, AlertThreshold>;\n   private datastoreValidState: Map<DatastoreType, boolean> = new Map<DatastoreType, boolean>();\n   private readonly DATASTORE_TYPE_KEY_GENERATOR = (propKey: string) => propKey as DatastoreType;\n\n   documentationUrl: string;\n\n   constructor(private capacityManagementService: CapacityManagementService,\n         private capacityService: VsanCapacityService,\n         private navigationService: NavigationService,\n         private capabilityProvider: VsanCapabilityProvider) {\n      this.documentationUrl = this.navigationService.getVmwareHelpUrl(NavigationService.MONITORING_URL,\n            DocumentationId.ENFORCE_RESERVATION_DOCUMENTATION);\n   }\n\n   @Loader({\n      srMessage: \"vsan.services.enforcereservation.title\",\n      srMessageType: SrMessageType.PAGE_TITLE,\n   })\n   async ngOnInit(): Promise<void> {\n      const context: CapacityManagementContext = VsanUiUtils.getModalContext();\n      this.clusterName = context.clusterName;\n      this.showOldFormatInfo = context.showOldFormatInfo;\n      this.contextRef = ManagedObject.contextObject;\n\n      let capacityManagementData: CapacityManagementData;\n      if (!context.isCapacityCustomizableThresholdsSupported) {\n         [capacityManagementData, this.isCapacityCustomizableThresholdsSupportedOnVc] = await Promise.all([\n            this.capacityManagementService.getCapacityManagementData(this.contextRef),\n            this.capabilityProvider.isCapacityCustomizableThresholdsSupportedOnVc(this.contextRef),\n         ]);\n      } else {\n         this.isCapacityCustomizableThresholdsSupportedOnVc = context.isCapacityCustomizableThresholdsSupported;\n         capacityManagementData = await this.capacityManagementService.getCapacityManagementData(this.contextRef);\n      }\n      this.parseAvailableDatastoresCapacityData(capacityManagementData);\n\n      if (capacityManagementData.capacityReservationConfig != null) {\n         this.updateCapacityReservationData(capacityManagementData);\n      }\n\n      if (this.isCapacityCustomizableThresholdsSupportedOnVc && capacityManagementData.customizableAlertThresholds) {\n         this.parseCustomizableThresholdsData(capacityManagementData);\n      }\n\n      this.updateCapacityChartData();\n   }\n\n   private parseAvailableDatastoresCapacityData(capacityManagementData: CapacityManagementData): void {\n      this.capacityDataPerDatastore = MapUtil.toMap<DatastoreType, CapacityData>(\n            capacityManagementData.allDatastoresCapacityData, this.DATASTORE_TYPE_KEY_GENERATOR);\n      this.availableDatastoreTypes =\n            DiskMgmtUtil.orderDatastoreTypes(Array.from(this.capacityDataPerDatastore.keys()));\n   }\n\n   private updateCapacityReservationData(capacityManagementData: CapacityManagementData): void {\n      const reservationOptionKeyGenerator: (propKey: string) => CapacityReservationOption\n            = (propKey: string) => CapacityReservationOption[propKey];\n      this.vSanDatastoreCapacityThresholdsData =\n            MapUtil.toMap<CapacityReservationOption, AlertThreshold>(\n                  capacityManagementData.vSanDatastoreCapacityThresholdsData, reservationOptionKeyGenerator);\n      this.reservationConfig = capacityManagementData.capacityReservationConfig;\n      this.originalReservationConfig = VsanUiUtils.deepClone<CapacityReservationConfig>(this.reservationConfig);\n   }\n\n   private parseCustomizableThresholdsData(capacityManagementData: CapacityManagementData): void {\n      this.alertThresholdsPerDatastore = MapUtil.toMap<DatastoreType, AlertThreshold>(\n            capacityManagementData.customizableAlertThresholds, this.DATASTORE_TYPE_KEY_GENERATOR);\n      this.originalAlertThresholdsPerDatastore = cloneDeep(this.alertThresholdsPerDatastore);\n   }\n\n   private getCapacityData(): CapacityData {\n      return this.capacityDataPerDatastore.get(this.selectedDatastoreType);\n   }\n\n   set customizedAlertThreshold(alertThreshold: AlertThreshold) {\n      this.onCustomizedAlertThresholdChange(alertThreshold);\n   }\n\n   get customizedAlertThreshold(): AlertThreshold {\n      if (!this.alertThresholdsPerDatastore) {\n         return null;\n      }\n      return this.alertThresholdsPerDatastore.get(this.selectedDatastoreType);\n   }\n\n   private onCustomizedAlertThresholdChange(alertThreshold: AlertThreshold): void {\n      this.datastoreValidState.set(this.selectedDatastoreType, alertThreshold.isValid);\n      this.isCustomizableThresholdsInvalid = false;\n      this.datastoreValidState.forEach(isValid =>\n            this.isCustomizableThresholdsInvalid = this.isCustomizableThresholdsInvalid || !isValid);\n      if (alertThreshold.isValid) {\n         this.alertThresholdsPerDatastore.set(this.selectedDatastoreType, alertThreshold);\n         this.updateCapacityChartData();\n      }\n   }\n\n   private getDefaultAlertThreshold(): AlertThreshold {\n      return AlertThresholdsUtil.getDefaultThreshold(\n            this.selectedDatastoreType,\n            this.getCapacityData(),\n            this.originalReservationConfig,\n            this.reservationConfig,\n            this.vSanDatastoreCapacityThresholdsData);\n   }\n\n   get isVsanDatastoreSelected(): boolean {\n      return this.selectedDatastoreType === DatastoreType.VSAN;\n   }\n\n   setDatastoreType(datastoreType: DatastoreType): void {\n      this.selectedDatastoreType = datastoreType;\n      this.updateCapacityChartData();\n   }\n\n   getDatastoreTypeLabel(datastoreType: DatastoreType): string {\n      return DiskMgmtUtil.getLocalizedDatastoreType(datastoreType);\n   }\n\n   getDescription(): string {\n      if (!this.reservationConfig) {\n         return \"\";\n      }\n      const hostRebuildDisabled: boolean = CapacityReservationUtil.isReservationDisabled(\n            this.reservationConfig.hostFailureReservation);\n      const descrKey: string = hostRebuildDisabled\n            ? \"vsan.services.enforcereservation.edit.description.operations.hostReserveDisabled\"\n            : \"vsan.services.enforcereservation.edit.description.operations\";\n      return VsanUiUtils.getString(descrKey);\n   }\n\n   get defaultThresholdsDescription(): string {\n      switch (this.selectedDatastoreType) {\n         case DatastoreType.VSAN:\n            return VsanUiUtils.getString(\"vsan.services.customizableThresholds.vsanDatastore.default.description\");\n         case DatastoreType.VSAN_DIRECT:\n            return VsanUiUtils.getString(\n                  \"vsan.services.customizableThresholds.nonVsanDatastore.default.description\", \"vSAN Direct\");\n         case DatastoreType.PMEM:\n            return VsanUiUtils.getString(\n                  \"vsan.services.customizableThresholds.nonVsanDatastore.default.description\", \"PMEM\");\n      }\n   }\n\n   isCustomizedAlertThresholdValid(datastoreType: DatastoreType): boolean {\n      return !this.datastoreValidState.has(datastoreType) ||\n            this.datastoreValidState.get(datastoreType);\n   }\n\n   updateCapacityChartData(): void {\n      const capacityData: CapacityData = this.getCapacityData();\n      this.capacitySectionsData = [];\n      this.legendSectionsData = [];\n      this.capacityTotal = capacityData.totalSpace;\n      this.capacityUsed = capacityData.usedSpace;\n      this.capacitySectionsData.push(...this.capacityService.parseCapacityOverviewDataSections(capacityData));\n      this.legendSectionsData.push(...this.capacitySectionsData);\n      this.updateChartThresholds();\n\n      if (this.isVsanDatastoreSelected && this.reservationConfig) {\n         this.plotLines = this.capacityService.getPlotLines(capacityData);\n         this.parseSlackSpaceCapacity(capacityData);\n      } else {\n         this.plotLines = [];\n      }\n\n      this.isReservationConfigInvalid = this.capacityService.isUsedCapacityExceedingThreshold(\n            capacityData, this.errorThreshold.basedOnTotalSpace);\n      this.alertMessage = this.isReservationConfigInvalid\n            ? VsanUiUtils.getString(\"vsan.services.enforcereservation.edit.invalid.config.error\")\n            : null;\n   }\n\n   /**\n    * This method processes the slack space related capacity and adds its series to the chart.\n    * It is important that the order of adding these series is maintained as otherwise, the chart will not be correct.\n    * Current order of how these must appear: host rebuild reservation > vSAN operation space > transient space.\n    */\n   private parseSlackSpaceCapacity(capacityData: CapacityData): void {\n      if (CapacityReservationUtil.isReservationEnforced(this.reservationConfig.hostFailureReservation)) {\n         const hostReservationChartData: ChartSectionData = this.capacityService.parseHostReservationDataSection(\n               capacityData);\n         if (hostReservationChartData) {\n            this.capacitySectionsData.push(hostReservationChartData);\n         }\n      }\n      if (CapacityReservationUtil.isReservationEnforced(this.reservationConfig.vsanOperationReservation)) {\n         const operationReservationChartData: ChartSectionData = this.capacityService.parseVsanOperationDataSection(\n               capacityData);\n         if (operationReservationChartData) {\n            this.capacitySectionsData.push(operationReservationChartData);\n         }\n      }\n      const transientCapacity: ChartSectionData = this.capacityService.parseTransientOverviewDataSections(\n            capacityData);\n      if (transientCapacity) {\n         this.legendSectionsData.push(transientCapacity);\n         this.capacitySectionsData.push(transientCapacity);\n      }\n   }\n\n   private updateChartThresholds(): void {\n      const capacityData: CapacityData = this.getCapacityData();\n      const customizedAlertThreshold: AlertThreshold = this.customizedAlertThreshold;\n      if (customizedAlertThreshold && customizedAlertThreshold.isEnabled) {\n         this.setCustomizedChartThresholds(capacityData, customizedAlertThreshold);\n      } else {\n         this.setDefaultChartThresholds(capacityData);\n      }\n   }\n\n   private setCustomizedChartThresholds(capacityData: CapacityData, customizedAlertThreshold: AlertThreshold): void {\n      this.warningThreshold = AlertThresholdsUtil.getCustomizedCapacityThreshold(\n            this.selectedDatastoreType,\n            customizedAlertThreshold.warningThreshold,\n            capacityData,\n            this.reservationConfig);\n      this.errorThreshold = AlertThresholdsUtil.getCustomizedCapacityThreshold(\n            this.selectedDatastoreType,\n            customizedAlertThreshold.errorThreshold,\n            capacityData,\n            this.reservationConfig);\n   }\n\n   private setDefaultChartThresholds(capacityData: CapacityData): void {\n      const defaultAlertThreshold: AlertThreshold = this.getDefaultAlertThreshold();\n      this.warningThreshold = AlertThresholdsUtil.getDefaultCapacityThreshold(\n            this.selectedDatastoreType,\n            defaultAlertThreshold.warningThreshold,\n            capacityData,\n            this.reservationConfig);\n      this.errorThreshold = AlertThresholdsUtil.getDefaultCapacityThreshold(\n            this.selectedDatastoreType,\n            defaultAlertThreshold.errorThreshold,\n            capacityData,\n            this.reservationConfig);\n\n      if (this.customizedAlertThreshold?.isDefault) {\n         // If customizable threshold is not set yet,\n         // use the current reservation threshold as customizable threshold by default.\n         this.customizedAlertThreshold.warningThreshold =\n               Math.floor(this.warningThreshold.basedOnTotalSpaceWithoutReservation);\n         this.customizedAlertThreshold.errorThreshold =\n               Math.floor(this.errorThreshold.basedOnTotalSpaceWithoutReservation);\n      }\n   }\n\n   @Loader()\n   async ok(): Promise<void> {\n      if (!this.isConfigChanged()) {\n         VsanUiUtils.closeModalDialog();\n         return;\n      }\n\n      const taskRef: ManagedObject = await this.capacityManagementService.configureCapacityManagement(\n            this.contextRef, this.reservationConfig, this.getChangedAlertThresholds());\n      VsanUiUtils.closeModalDialog(taskRef);\n   }\n\n   private isConfigChanged = (): boolean => {\n      let isReservationConfigChanged: boolean = false;\n      if (this.reservationConfig && this.originalReservationConfig) {\n         isReservationConfigChanged =\n               this.originalReservationConfig.vsanOperationReservation !==\n               this.reservationConfig.vsanOperationReservation\n               || this.originalReservationConfig.hostFailureReservation !==\n               this.reservationConfig.hostFailureReservation;\n      }\n\n      let isCustomizableThresholdsChanged: boolean = false;\n      if (this.isCapacityCustomizableThresholdsSupportedOnVc) {\n         isCustomizableThresholdsChanged = this.getChangedAlertThresholds().length > 0;\n      }\n\n      return isReservationConfigChanged || isCustomizableThresholdsChanged;\n   };\n\n   private getChangedAlertThresholds(): AlertThreshold[] {\n      if (!this.isCapacityCustomizableThresholdsSupportedOnVc) {\n         return [];\n      }\n      const changedAlertThresholds: AlertThreshold[] = [];\n      for (const datastoreType of this.availableDatastoreTypes) {\n         const changedThreshold: AlertThreshold = this.alertThresholdsPerDatastore.get(datastoreType);\n         const originalThreshold: AlertThreshold = this.originalAlertThresholdsPerDatastore.get(datastoreType);\n\n         if (!changedThreshold.isEnabled) {\n            // If the customizable threshold is disabled, then revert to the original values.\n            changedThreshold.warningThreshold = originalThreshold.warningThreshold;\n            changedThreshold.errorThreshold = originalThreshold.errorThreshold;\n         }\n\n         if (!AlertThresholdsUtil.areEqual(changedThreshold, originalThreshold)) {\n            changedAlertThresholds.push(changedThreshold);\n         }\n      }\n\n      return changedAlertThresholds;\n   }\n}\n","<!--Copyright 2020-2021 VMware, Inc. All rights reserved. -- VMware Confidential-->\n<vsan-edit-prompt\n      [title]=\"'vsan.services.enforcereservation.title' | localized\"\n      [subtitle]=\"clusterName\"\n      [blockContent]=\"loading\"\n      [blockButton]=\"loading || isReservationConfigInvalid || isCustomizableThresholdsInvalid\"\n      (onConfirm)=\"ok()\">\n   <div class=\"dialog-container\" *ngIf=\"!loading\">\n      <clr-tabs *ngIf=\"availableDatastoreTypes.length > 1\">\n         <clr-tab *ngFor=\"let datastoreType of availableDatastoreTypes\">\n            <button id=\"{{'datastore-type-' + datastoreType}}\"\n                    clrTabLink\n                    (click)=\"setDatastoreType(datastoreType)\">\n               <span>\n                  {{getDatastoreTypeLabel(datastoreType)}}\n               </span>\n               <clr-icon *ngIf=\"!isCustomizedAlertThresholdValid(datastoreType)\"\n                         [attr.shape]=\"Icon.CLR_ERROR_STANDARD_ICON_SHAPE\"\n                         class=\"is-error\">\n               </clr-icon>\n            </button>\n            <clr-tab-content *clrIfActive=\"datastoreType === selectedDatastoreType\">\n               <ng-container *ngTemplateOutlet=\"datastoreSections\"></ng-container>\n            </clr-tab-content>\n         </clr-tab>\n      </clr-tabs>\n      <vsan-validation *ngIf=\"alertMessage\"\n                       [alert]=\"alertMessage\"\n                       [allowClose]=\"false\">\n      </vsan-validation>\n      <vsan-validation *ngIf=\"showOldFormatInfo && isVsanDatastoreSelected\"\n                       [alertType]=\"'info'\"\n                       [alert]=\"'vsan.services.enforcereservation.edit.oldobjects.text' | localized\"\n                       [isSmall]=\"true\"\n                       [allowClose]=\"false\">\n      </vsan-validation>\n\n      <ng-container *ngIf=\"availableDatastoreTypes.length === 1\">\n         <ng-container *ngTemplateOutlet=\"datastoreSections\"></ng-container>\n      </ng-container>\n\n      <ng-template #datastoreSections>\n         <div id=\"datastore-sections-container\">\n            <div *ngIf=\"isVsanDatastoreSelected\">\n               <span>{{getDescription()}}</span>\n               <a id=\"learn-more\"\n                  [external-link]=\"'vsan.services.enforcereservation.link' | localized\"\n                  [url]=\"documentationUrl\">\n               </a>\n            </div>\n            <ng-container *ngIf=\"capacityTotal > 0\">\n               <!-- only show the capacity chart if there are any disks claimed, e.g. capacity > 0 -->\n               <span *ngIf=\"isVsanDatastoreSelected\">\n                  {{\"vsan.services.enforcereservation.edit.description.part2\" | localized}}\n               </span>\n               <vsan-capacity-bar-chart id=\"capacity-overview-bar-chart\"\n                                        [sections]=\"capacitySectionsData\"\n                                        [total]=\"capacityTotal\"\n                                        [plotLines]=\"plotLines\"\n                                        [showAlertThresholds]=\"isCapacityCustomizableThresholdsSupportedOnVc\"\n                                        (hoverBarChart)=\"hoveredSeries=$event\"\n                                        [warningThreshold]=\"warningThreshold\"\n                                        [errorThreshold]=\"errorThreshold\">\n               </vsan-capacity-bar-chart>\n               <vsan-capacity-legend id=\"capacity-legend\"\n                                     [chartSectionData]=\"legendSectionsData\"\n                                     [used]=\"capacityUsed\"\n                                     [total]=\"capacityTotal\"\n                                     [hoveredSeries]=\"hoveredSeries\">\n               </vsan-capacity-legend>\n            </ng-container>\n         </div>\n         <form class=\"capacity-management-controls\" clrForm>\n            <vsan-capacity-reservation-settings\n                  *ngIf=\"isVsanDatastoreSelected && reservationConfig\"\n                  [(reservationConfig)]=\"reservationConfig\"\n                  (reservationConfigChange)=\"updateCapacityChartData()\">\n            </vsan-capacity-reservation-settings>\n            <vsan-customize-alert-threshold\n                  *ngIf=\"isCapacityCustomizableThresholdsSupportedOnVc && customizedAlertThreshold\"\n                  [defaultThresholdsDescription]=\"defaultThresholdsDescription\"\n                  [(alertThreshold)]=\"customizedAlertThreshold\">\n            </vsan-customize-alert-threshold>\n         </form>\n      </ng-template>\n   </div>\n</vsan-edit-prompt>\n","/* Copyright 2020-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, EventEmitter, Input, Output} from \"@angular/core\";\nimport {Icon} from \"@util/icon\";\nimport {AlertThreshold} from \"@generated/alert-threshold\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\n\n@Component({\n   templateUrl: \"customize-alert-threshold.html\",\n   styleUrls: [\"customize-alert-threshold.scss\"],\n   selector: \"vsan-customize-alert-threshold\",\n})\nexport class CustomizeAlertThresholdsComponent {\n   readonly ALERT_THRESHOLD_MIN_VALUE: number = 1;\n   readonly ALERT_THRESHOLD_MAX_VALUE: number = 100;\n   readonly WARNING_THRESHOLD_CONTROL_NAME: string = \"warning-threshold\";\n   readonly ERROR_THRESHOLD_CONTROL_NAME: string = \"error-threshold\";\n   readonly ERRORS: any = {\n      [this.WARNING_THRESHOLD_CONTROL_NAME]: \"\",\n      [this.ERROR_THRESHOLD_CONTROL_NAME]: \"\",\n   };\n\n   Icon: typeof Icon = Icon;\n\n   @Input()\n   defaultThresholdsDescription: string;\n\n   _alertThreshold: AlertThreshold;\n\n   @Input()\n   set alertThreshold(value: AlertThreshold) {\n      this._alertThreshold = value;\n      this.onThresholdChange();\n   }\n\n   get alertThreshold(): AlertThreshold {\n      return this._alertThreshold;\n   }\n\n   @Output()\n   alertThresholdChange: EventEmitter<AlertThreshold> = new EventEmitter();\n\n   toggle(isCustomizeAlertsSelected: boolean): void {\n      this.alertThreshold.isEnabled = isCustomizeAlertsSelected;\n      this.onThresholdChange();\n   }\n\n   onThresholdChange(): void {\n      if (this.alertThreshold.isEnabled) {\n         this.validateAll();\n      }\n      this.alertThreshold.isValid = !this.alertThreshold.isEnabled || !this.haveErrors;\n      this.alertThresholdChange.emit(this.alertThreshold);\n   }\n\n   private get haveErrors(): boolean {\n      return !!this.ERRORS[this.WARNING_THRESHOLD_CONTROL_NAME] || !!this.ERRORS[this.ERROR_THRESHOLD_CONTROL_NAME];\n   }\n\n   private validateAll(): void {\n      this.validate(this.WARNING_THRESHOLD_CONTROL_NAME, this.alertThreshold.warningThreshold);\n      this.validate(this.ERROR_THRESHOLD_CONTROL_NAME, this.alertThreshold.errorThreshold);\n   }\n\n   private validate(validatedControlName: string, value: number): void {\n      this.ERRORS[validatedControlName] = null;\n\n      if (VsanUiUtils.isDecimal(value)) {\n         this.ERRORS[validatedControlName] =\n               VsanUiUtils.getString(\"vsan.common.setThreshold.input.floatingPointNumber.error\");\n      } else if (this.isThresholdOutOfRange(value)) {\n         this.ERRORS[validatedControlName] = this.thresholdRangeErrorMessage;\n      } else if (this.areThresholdsOverlapping()) {\n         this.ERRORS[this.WARNING_THRESHOLD_CONTROL_NAME] = this.thresholdsOverlappingErrorMessage;\n      }\n   }\n\n   private isThresholdOutOfRange(value: number): boolean {\n      return value == null || value < this.ALERT_THRESHOLD_MIN_VALUE || value > this.ALERT_THRESHOLD_MAX_VALUE;\n   }\n\n   private areThresholdsOverlapping(): boolean {\n      return this.alertThreshold.warningThreshold > this.alertThreshold.errorThreshold;\n   }\n\n   private get thresholdRangeErrorMessage(): string {\n      return VsanUiUtils.getString(\"vsan.services.customizableThresholds.input.range.error\",\n          this.ALERT_THRESHOLD_MIN_VALUE, this.ALERT_THRESHOLD_MAX_VALUE);\n   }\n\n   private get thresholdsOverlappingErrorMessage(): string {\n      return VsanUiUtils.getString(\"vsan.services.customizableThresholds.input.order.error\");\n   }\n}\n","/* Copyright 2020-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {NgModule} from \"@angular/core\";\nimport {ClarityModule} from \"@clr/angular\";\nimport {CommonPipeModule} from \"@pipe/common-pipe.module\";\nimport {CustomizeAlertThresholdsComponent} from \"./customize-alert-threshold.component\";\nimport {FormsModule} from \"@angular/forms\";\nimport {CommonModule} from \"@angular/common\";\nimport {CommonDirectiveModule} from \"@directive/common-directive.module\";\n@NgModule({\n   imports: [\n      CommonModule,\n      FormsModule,\n      ClarityModule,\n      CommonPipeModule,\n      CommonDirectiveModule,\n   ],\n   declarations: [\n      CustomizeAlertThresholdsComponent,\n   ],\n   exports: [\n      CustomizeAlertThresholdsComponent,\n   ],\n})\nexport class CustomizableThresholdsModule {\n}\n","<!-- Copyright 2020-2021 VMware, Inc. All rights reserved. -- VMware Confidential -->\n<div>{{defaultThresholdsDescription}}</div>\n<div class=\"icon-name-container\">\n   <clr-checkbox-wrapper>\n      <input #customizeAlerts\n             type=\"checkbox\"\n             clrCheckbox\n             ngModel\n             [ngModel]=\"alertThreshold.isEnabled\"\n             (change)=\"toggle(customizeAlerts.checked)\"/>\n      <label>\n         {{\"vsan.services.customizableThresholds.action.label\" | localized}}\n      </label>\n   </clr-checkbox-wrapper>\n   <clr-signpost id=\"customizable-thresholds-help\"\n                 [vsan-signpost-title]=\"'vsan.services.customizableThresholds.signpost.label' | localized\">\n      <clr-signpost-content *clrIfOpen clrPosition=\"top-right\">\n         {{\"vsan.services.customizableThresholds.action.description\" | localized}}\n      </clr-signpost-content>\n   </clr-signpost>\n</div>\n<div id=\"thresholds-container\" class=\"indent clr-form clr-form-horizontal\" *ngIf=\"alertThreshold.isEnabled\">\n   <div class=\"clr-form-control\">\n      <span>\n         <clr-icon id=\"warning-threshold\"\n                   aria-hidden=\"true\"\n                   class=\"is-solid is-warning\"\n                   [attr.shape]=\"Icon.CLR_WARN_STANDARD_ICON_SHAPE\"></clr-icon>\n         <span class=\"threshold-label\">{{\"vsan.services.customizableThresholds.input.label.warning\" | localized}}</span>\n      </span>\n      <div class=\"clr-control-container warning-threshold-container\"\n           [class.clr-error]=\"ERRORS[WARNING_THRESHOLD_CONTROL_NAME]\">\n         <div class=\"clr-row clr-input-wrapper\">\n            <label>\n               <input id=\"{{WARNING_THRESHOLD_CONTROL_NAME}}\"\n                      name=\"{{WARNING_THRESHOLD_CONTROL_NAME}}\"\n                      type=\"number\"\n                      [min]=\"ALERT_THRESHOLD_MIN_VALUE\"\n                      [max]=\"ALERT_THRESHOLD_MAX_VALUE\"\n                      class=\"clr-input warning-threshold-input\"\n                      [(ngModel)]=\"alertThreshold.warningThreshold\"\n                      (change)=\"onThresholdChange()\"\n                      aria-describedby=\"warning-threshold-error\">\n               <clr-icon class=\"clr-validate-icon\"\n                         shape=\"exclamation-circle\"\n                         title=\"{{'vsan.common.srMessage.error' | localized}}\"\n                         [attr.aria-label]=\"'vsan.common.srMessage.error' | localized\">\n               </clr-icon>\n            </label>\n         </div>\n         <span id=\"warning-threshold-error\" class=\"clr-subtext\" *ngIf=\"ERRORS[WARNING_THRESHOLD_CONTROL_NAME]\">\n             {{ERRORS[WARNING_THRESHOLD_CONTROL_NAME]}}\n         </span>\n         <span id=\"warning-threshold-helper-text\" class=\"clr-subtext\" *ngIf=\"!ERRORS[WARNING_THRESHOLD_CONTROL_NAME]\">\n             {{\"vsan.services.customizableThresholds.input.helperText.warning\" | localized}}\n         </span>\n      </div>\n   </div>\n\n   <div class=\"clr-form-control\">\n      <span>\n         <clr-icon id=\"error-threshold\"\n                   aria-hidden=\"true\"\n                   class=\"is-solid is-error\"\n                   [attr.shape]=\"Icon.CLR_ERROR_STANDARD_ICON_SHAPE\"></clr-icon>\n         <span class=\"threshold-label\">{{\"vsan.services.customizableThresholds.input.label.error\" | localized}}</span>\n      </span>\n      <div class=\"clr-control-container error-threshold-container\"\n           [class.clr-error]=\"ERRORS[ERROR_THRESHOLD_CONTROL_NAME]\">\n         <div class=\"clr-row clr-input-wrapper\">\n            <label>\n               <input id=\"{{ERROR_THRESHOLD_CONTROL_NAME}}\"\n                      name=\"{{ERROR_THRESHOLD_CONTROL_NAME}}\"\n                      type=\"number\"\n                      [min]=\"ALERT_THRESHOLD_MIN_VALUE\"\n                      [max]=\"ALERT_THRESHOLD_MAX_VALUE\"\n                      class=\"clr-input error-threshold-input\"\n                      [(ngModel)]=\"alertThreshold.errorThreshold\"\n                      (change)=\"onThresholdChange()\"\n                      aria-describedby=\"error-threshold-error\">\n               <clr-icon class=\"clr-validate-icon\"\n                         shape=\"exclamation-circle\"\n                         title=\"{{'vsan.common.srMessage.error' | localized}}\"\n                         [attr.aria-label]=\"'vsan.common.srMessage.error' | localized\">\n               </clr-icon>\n            </label>\n         </div>\n         <span id=\"error-threshold-error\" class=\"clr-subtext\" *ngIf=\"ERRORS[ERROR_THRESHOLD_CONTROL_NAME]\">\n           {{ERRORS[ERROR_THRESHOLD_CONTROL_NAME]}}\n         </span>\n         <span id=\"error-threshold-helper-text\" class=\"clr-subtext\" *ngIf=\"!ERRORS[ERROR_THRESHOLD_CONTROL_NAME]\">\n           {{\"vsan.services.customizableThresholds.input.helperText.error\" | localized}}\n         </span>\n      </div>\n   </div>\n</div>\n"]}