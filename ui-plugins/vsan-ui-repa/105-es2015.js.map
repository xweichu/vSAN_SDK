{"version":3,"sources":["./src/app/vsan/hci/configure/component/networking-settings.component.ts","./src/app/vsan/hci/configure/view/vmotion-traffic-page.html","./src/app/vsan/hci/configure/view/distributed-switches-page.validator.ts","./src/app/vsan/hci/configure/view/advanced-options-page.html","./src/app/vsan/hci/configure/view/claim-disks-page.html","./src/app/vsan/hci/configure/view/proxy-settings-page.html","./src/app/vsan/hci/configure/view/support-insight-page.html","./src/app/vsan/hci/configure/component/ipv6-settings.component.ts","./src/app/vsan/hci/configure/component/existing-dvs-selector-dialog.component.ts","./src/app/vsan/hci/configure/configure-hci-cluster-wizard.module.ts","./src/app/vsan/hci/configure/view/proxy-settings-page.component.ts","./src/app/vsan/hci/configure/view/storage-traffic-page.html","./src/app/vsan/common/component/general-settings/general-settings.module.ts","./src/app/vsan/common/util/vsan-rdma-util.ts","./src/app/vsan/hci/configure/view/vmotion-traffic-page.component.ts","./src/app/vsan/hci/configure/component/ipv4-settings.components.ts","./src/app/vsan/hci/configure/configure-hci-cluster-wizard.component.ts","./src/app/generated/dvs-spec.ts","./src/app/vsan/hci/configure/view/advanced-options-page.component.ts","./src/app/vsan/common/util/vsan-dit-util.ts","./src/app/vsan/hci/configure/view/storage-traffic-page.component.ts","./src/app/vsan/hci/configure/view/distributed-switches-page.component.ts","./src/app/vsan/hci/configure/service/support-insight-configuration.service.ts","./src/app/vsan/hci/configure/view/distributed-switches-page.html","./src/app/vsan/hci/configure/component/existing-dvpg-selector-dialog.component.ts","./src/app/vsan/hci/configure/view/hci-cluster-ready-to-complete-page.component.ts","./src/app/vsan/hci/configure/component/existing-dvpg-selector-dialog.html","./src/app/generated/dvpg-data.ts","./src/app/vsan/hci/configure/service/configure-hci.service.ts","./src/app/vsan/hci/configure/component/ipv4-settings.html","./src/app/vsan/hci/configure/component/ipv6-settings.html","./src/app/vsan/hci/configure/view/claim-disks-page.component.ts","./src/app/vsan/hci/configure/view/hci-cluster-ready-to-complete-page.html","./src/app/vsan/hci/configure/configure-hci-cluster-wizard.html","./src/app/vsan/hci/configure/component/existing-dvs-selector-dialog.html","./src/app/vsan/hci/configure/view/support-insight-page.component.ts","./src/app/vsan/hci/configure/component/networking-settings.html"],"names":[],"mappings":"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","file":"105-es2015.js","sourcesContent":["/* Copyright 2017-2020 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, Input, OnInit} from \"@angular/core\";\nimport {AbstractControl, FormArray, FormBuilder, FormControl, FormGroup, Validators} from \"@angular/forms\";\nimport {ManagedObject} from \"@service/managed-object\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {ReactiveFormUtil} from \"@util/reactive-form-util\";\nimport {PageControls} from \"@component/wizard/flow-wizard.component\";\nimport {NetServiceConfig} from \"@generated/net-service-config\";\nimport {Service} from \"@generated/service\";\nimport {DvpgData} from \"@generated/dvpg-data\";\nimport {VlanType} from \"@generated/vlan-type\";\nimport HostIpv4Config = NetServiceConfig.HostIpv4Config;\nimport HostIpv6Config = NetServiceConfig.HostIpv6Config;\nimport Protocol = NetServiceConfig.Protocol;\nimport IpType = NetServiceConfig.IpType;\nimport {InventoryNode} from \"@generated/inventory-node\";\n\n@Component({\n   templateUrl: \"networking-settings.html\",\n   selector: \"vsan-networking-settings\",\n   styleUrls: [\"networking-settings.scss\"],\n})\nexport class NetworkingSettingsComponent implements OnInit {\n\n   readonly Protocol: typeof Protocol = Protocol;\n\n   static readonly IPV4_SETTINGS_CONTROL_NAME: string = \"ipv4Settings\";\n   static readonly IPV6_SETTINGS_CONTROL_NAME: string = \"ipv6Settings\";\n   static readonly IP_TYPE_CONTROL_NAME: string = \"ipType\";\n   static readonly HOST_SETTINGS_CONTROL_NAME: string = \"hostSettings\";\n   private static readonly DEFAULT_USE_VLAN: boolean = true;\n   private static readonly DEFAULT_VLAN: number = 0;\n   private static readonly MIN_VLAN: number = 0;\n   private static readonly MAX_VLAN: number = 4095;\n   private static readonly DEFAULT_PROTOCOL: Protocol = Protocol.IPV4;\n   private static readonly USE_VLAN_CONTROL_NAME: string = \"useVlan\";\n   private static readonly VLAN_CONTROL_NAME: string = \"vlan\";\n   private static readonly PROTOCOL_CONTROL_NAME: string = \"protocol\";\n   private static readonly IPV4_CONTROL_NAME: string = \"ipv4\";\n   private static readonly SUBNET_MASK_CONTROL_NAME: string = \"subnetMask\";\n   private static readonly GATEWAY_CONTROL_NAME: string = \"gateway\";\n   private static readonly IPV6_CONTROL_NAME: string = \"ipv6\";\n   private static readonly PREFIX_CONTROL_NAME: string = \"prefix\";\n\n   @Input()\n   pageControls: PageControls;\n\n   @Input()\n   hosts: InventoryNode[] = [];\n\n   @Input()\n   dsName: string;\n\n   @Input()\n   dvpg: DvpgData;\n\n   @Input()\n   isExtend: boolean;\n\n   @Input()\n   vlanId: string;\n\n   @Input()\n   vlanType: VlanType;\n\n   @Input()\n   service: Service;\n\n   @Input()\n   isDefaultGatewaySupported: boolean;\n\n   form: FormGroup;\n   showDefaultGateway: boolean;\n   ipSettingsInfoMessage: string;\n\n   constructor(private fb: FormBuilder) {}\n\n   ngOnInit(): void {\n      this.buildForm();\n      this.registerFormControlChangeHandlers();\n\n      this.ipSettingsInfoMessage =\n          VsanUiUtils.getString(\"vsan.cluster.hci.configureHciCluster.wizard.networking.hostListDescription\");\n      if (this.service !== Service.VSAN || this.isDefaultGatewaySupported) {\n          this.showDefaultGateway = true;\n          this.ipSettingsInfoMessage = this.ipSettingsInfoMessage.concat(\" \", VsanUiUtils.getString(\n                \"vsan.cluster.hci.configureHciCluster.wizard.networking.DefaultGatewayDescription\"));\n      }\n   }\n\n   private buildForm = (): void => {\n      this.form = this.fb.group({\n         useVlan: [NetworkingSettingsComponent.DEFAULT_USE_VLAN, [Validators.required]],\n         vlan: [{value: NetworkingSettingsComponent.DEFAULT_VLAN, disabled: false},\n                [Validators.required, this.validateVlan]],\n         protocol: [NetworkingSettingsComponent.DEFAULT_PROTOCOL, [Validators.required]],\n      });\n   };\n\n   private registerFormControlChangeHandlers = (): void => {\n      if (!this.isExtend) {\n         this.useVlan.valueChanges.forEach(this.disableSubsequentPages);\n         this.vlan.valueChanges.forEach(this.disableSubsequentPages);\n      }\n\n      this.protocol.valueChanges.forEach((protocol: string) => this.toggleProtocol(Protocol[protocol]));\n   };\n\n   disableSubsequentPages = (): void => {\n      this.form.updateValueAndValidity();\n      this.pageControls.rebuildToc();\n   };\n\n   private toggleProtocol = (protocol: Protocol) => {\n      this.toggleIpSettingsAvailability(this.ipv4Settings, this.isIPv4Compatible(protocol));\n      this.toggleIpSettingsAvailability(this.ipv6Settings, this.isIPv6Compatible(protocol));\n      this.disableSubsequentPages();\n   };\n\n   private toggleIpSettingsAvailability = (ipSettings: FormGroup, enable: boolean): void => {\n      if (!ipSettings) {\n         return;\n      }\n\n      if (enable) {\n         const ipType: FormControl = ipSettings.get(NetworkingSettingsComponent.IP_TYPE_CONTROL_NAME) as FormControl;\n         if (ipType.value === IpType.DHCP) {\n            ipType.enable();\n         } else {\n            ipSettings.enable();\n         }\n      } else {\n         ipSettings.disable();\n      }\n   };\n\n   /** Form controls getters */\n\n   get useVlan(): FormControl {\n      return this.form.get(NetworkingSettingsComponent.USE_VLAN_CONTROL_NAME) as FormControl;\n   }\n\n   get vlan(): FormControl {\n      return this.form.get(NetworkingSettingsComponent.VLAN_CONTROL_NAME) as FormControl;\n   }\n\n   get vlanLabel(): string {\n      switch (this.vlanType) {\n         case VlanType.VLAN_ID:\n            return VsanUiUtils.getString(\"vsan.cluster.hci.configureHciCluster.wizard.networking.vlanIdLabel\");\n         case VlanType.VLAN_TRUNK:\n            return VsanUiUtils.getString(\"vsan.cluster.hci.configureHciCluster.wizard.networking.vlanTrunkLabel\");\n         case VlanType.PVLAN:\n            return VsanUiUtils.getString(\"vsan.cluster.hci.configureHciCluster.wizard.networking.pVlanIdLabel\");\n         default: return VsanUiUtils.getString(\"vsan.cluster.hci.configureHciCluster.wizard.networking.vlanIdLabel\");\n      }\n   }\n\n   get protocol(): FormControl {\n      return this.form.get(NetworkingSettingsComponent.PROTOCOL_CONTROL_NAME) as FormControl;\n   }\n\n   get ipv4Settings(): FormGroup {\n      return this.form.get(NetworkingSettingsComponent.IPV4_SETTINGS_CONTROL_NAME) as FormGroup;\n   }\n\n   get ipv6Settings(): FormGroup {\n      return this.form.get(NetworkingSettingsComponent.IPV6_SETTINGS_CONTROL_NAME) as FormGroup;\n   }\n\n   get showIpv4Tab(): boolean {\n      return this.isIPv4Compatible(this.protocol.value);\n   }\n\n   get showIpv6Tab(): boolean {\n      return this.isIPv6Compatible(this.protocol.value);\n   }\n\n   private isIPv4Compatible(protocol: Protocol): boolean {\n      return protocol === Protocol.IPV4 || protocol === Protocol.MIXED;\n   }\n\n   private isIPv6Compatible(protocol: Protocol): boolean {\n      return protocol === Protocol.IPV6 || protocol === Protocol.MIXED;\n   }\n\n   get ipv4TabError(): boolean {\n      const ipv4Settings: FormGroup =\n            this.form.get(NetworkingSettingsComponent.IPV4_SETTINGS_CONTROL_NAME) as FormGroup;\n\n      return this.isIpSettingsFormValid(ipv4Settings, true);\n   }\n\n   get ipv6TabError(): boolean {\n      const ipv6Settings: FormGroup =\n            this.form.get(NetworkingSettingsComponent.IPV6_SETTINGS_CONTROL_NAME) as FormGroup;\n\n      return this.isIpSettingsFormValid(ipv6Settings, false);\n   }\n\n   disableVlanInput = (): void => {\n      if (this.useVlan.value === false) {\n         this.vlan.disable();\n      } else {\n         this.vlan.enable();\n      }\n   };\n\n   invalid = (formControl: AbstractControl): boolean => {\n      return formControl.invalid && formControl.dirty;\n   };\n\n   validate(): string[] {\n      // validate only the enabled form fields\n      if (this.useVlan && this.useVlan.value === true) {\n         ReactiveFormUtil.validateControls([this.vlan]);\n      }\n      if (this.ipv4Settings && this.ipv4Settings.enabled) {\n         ReactiveFormUtil.validateAllFormFields(this.ipv4Settings);\n      }\n      if (this.ipv6Settings && this.ipv6Settings.enabled) {\n         ReactiveFormUtil.validateAllFormFields(this.ipv6Settings);\n      }\n\n      if (this.form.invalid) {\n         return [\n            VsanUiUtils.getString(\n                  \"vsan.cluster.hci.configureHciCluster.wizard.networking.notAcceptableErrors\"),\n         ];\n      }\n\n      return null;\n   }\n\n   getNetConfig = (service: Service): NetServiceConfig => {\n      const formValue: any = this.form.value;\n      let ipv4IpType: IpType = null;\n      let hostIpv4Configs: HostIpv4Config[] = [];\n      let ipv6IpType: IpType = null;\n      let hostIpv6Configs: HostIpv6Config[] = [];\n      if (this.isIPv4Compatible(formValue.protocol)) {\n         ipv4IpType = formValue.ipv4Settings.ipType;\n         if (ipv4IpType === IpType.STATIC) {\n            hostIpv4Configs =\n                  formValue.ipv4Settings.hostSettings.map((element) =>\n                        HostIpv4Config.Factory.create(element.name, element.ipv4, element.subnetMask, element.gateway),\n                  );\n         }\n      }\n\n      if (this.isIPv6Compatible(formValue.protocol)) {\n         ipv6IpType = formValue.ipv6Settings.ipType;\n         if (ipv6IpType === IpType.STATIC) {\n            hostIpv6Configs =\n                  formValue.ipv6Settings.hostSettings.map((element) =>\n                        HostIpv6Config.Factory.create(element.name, element.ipv6, +element.prefix, element.gateway),\n                  );\n         }\n      }\n\n      if (this.isExtend || this.dvpg.existingDvpg) {\n         formValue.useVlan = false;\n      }\n\n      const dvpgName: string = this.dvpg ? this.dvpg.name : \"\";\n      const existingDvpgMor: ManagedObject = this.dvpg ? this.dvpg.existingDvpg : null;\n\n      return NetServiceConfig.Factory.create(\n            service,\n            formValue.useVlan,\n            +formValue.vlan,\n            dvpgName,\n            existingDvpgMor,\n            formValue.protocol,\n            ipv4IpType,\n            hostIpv4Configs,\n            ipv6IpType ,\n            hostIpv6Configs);\n   };\n\n   /** Form control validators */\n\n   private validateVlan = (c: AbstractControl): {[key: string]: any} | null => {\n      const vlan: number = Number(c.value);\n      return vlan >= NetworkingSettingsComponent.MIN_VLAN && vlan <= NetworkingSettingsComponent.MAX_VLAN ? null : {\n         validateVlan: {\n            valid: false,\n         },\n      };\n   };\n\n   private isIpSettingsFormValid = (ipSettingsForm: FormGroup, isIpv4: boolean): boolean => {\n      if (!ipSettingsForm || !ipSettingsForm.touched || ipSettingsForm.valid || !ipSettingsForm.controls) {\n         return false;\n      }\n\n      const ipRows: FormArray = ipSettingsForm.controls[\n            NetworkingSettingsComponent.HOST_SETTINGS_CONTROL_NAME] as FormArray;\n\n      // display error if any of the rows is invalid and filled/touched\n      return ipRows.controls.some((hostControl: FormGroup) => {\n         return !hostControl.valid && (isIpv4 ? this.isIpv4ControlFilled(hostControl)\n                     : this.isIpv6ControlFilled(hostControl));\n      });\n   };\n\n   private isIpv4ControlFilled = (hostControl: FormGroup): boolean => {\n      const ipv4Control: AbstractControl = hostControl.get(\n            NetworkingSettingsComponent.IPV4_CONTROL_NAME);\n      const subnetMaskControl: AbstractControl = hostControl.get(\n            NetworkingSettingsComponent.SUBNET_MASK_CONTROL_NAME);\n      const gatewayControl: AbstractControl = hostControl.get(\n            NetworkingSettingsComponent.GATEWAY_CONTROL_NAME);\n\n      return (ipv4Control.touched || ipv4Control.value)\n            && (gatewayControl.touched || gatewayControl.value)\n            && (subnetMaskControl.touched || subnetMaskControl.value);\n   };\n\n   private isIpv6ControlFilled = (hostControl: FormGroup): boolean => {\n      const ipv6Control: AbstractControl = hostControl.get(\n            NetworkingSettingsComponent.IPV6_CONTROL_NAME);\n      const prefixControl: AbstractControl = hostControl.get(\n            NetworkingSettingsComponent.PREFIX_CONTROL_NAME);\n      const gatewayControl: AbstractControl = hostControl.get(\n            NetworkingSettingsComponent.GATEWAY_CONTROL_NAME);\n\n      return ipv6Control.touched && gatewayControl.touched && prefixControl.touched;\n   };\n}","<vsan-networking-settings [pageControls]=\"pageControls\"\n                          [hosts]=\"hosts\"\n                          [dsName]=\"vmotionDvsName\"\n                          [service]=\"currentService\"\n                          [dvpg]=\"vmotionDvpg\"\n                          [vlanId]=\"vlan\"\n                          [vlanType]=\"vlanType\"\n                          [isExtend]=\"configureWizardData.isExtend\"\n                          [isDefaultGatewaySupported]=\"clusterCapabilityData.isDefaultGatewaySupported\">\n</vsan-networking-settings>","/* Copyright 2017 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Injectable} from \"@angular/core\";\nimport {FormArray, FormControl} from \"@angular/forms\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\n\n@Injectable()\nexport class DistributedSwitchesPageValidator {\n\n   public static readonly DVS_TO_PG_ASSIGNMENT_VALIDATION: string = \"dvsToPgAssignmentValidation\";\n   public static readonly DVS_TO_ADAPTER_ASSIGNMENT_VALIDATION: string = \"dvsToAdapterAssignmentValidation\";\n   public static readonly DVS_LOCALLY_DUPLICATE_NAMES_VALIDATION: string = \"dvsLocalDuplicateNamesValidation\";\n   public static readonly DVS_EXISTING_DUPLICATE_NAMES_VALIDATION: string = \"dvsExistingDuplicateNamesValidation\";\n   public static readonly DVPG_LOCALLY_DUPLICATE_NAMES_VALIDATION: string = \"dvpgLocalDuplicateNamesValidation\";\n   public static readonly DVPG_EXISTING_DUPLICATE_NAMES_VALIDATION: string = \"dvpgExistingDuplicateNamesValidation\";\n\n   public invalidDvsNameControl = (control: FormControl): boolean => {\n      return control.touched && (control.hasError(\"required\")\n            || control.hasError(\"maxlength\")\n            || this.hasDvsLocalDuplicateNameError(control)\n            || this.hasDvsExistingDuplicateNameError(control));\n   };\n\n   public invalidDvpgNameControl = (control: FormControl): boolean => {\n      return control.touched && (control.hasError(\"required\")\n            || control.hasError(\"maxlength\")\n            || control.hasError(DistributedSwitchesPageValidator.DVPG_LOCALLY_DUPLICATE_NAMES_VALIDATION)\n            || control.hasError(DistributedSwitchesPageValidator.DVPG_EXISTING_DUPLICATE_NAMES_VALIDATION));\n   };\n\n   public getDvsNameControlErrors = (control: FormControl): string => {\n      if (control.hasError(\"required\")) {\n         return VsanUiUtils.getString(\n               \"vsan.cluster.hci.configureHciCluster.wizard.dvsConfig.distributedSwitchesSection.dvsNameRequiredError\");\n      }\n\n      if (control.hasError(\"maxlength\")) {\n         return VsanUiUtils.getString(\n               \"vsan.cluster.hci.configureHciCluster.wizard.dvsConfig.distributedSwitchesSection.dvsNameLengthError\");\n      }\n\n      if (this.hasDvsLocalDuplicateNameError(control)) {\n         return VsanUiUtils.getString(\n               \"vsan.cluster.hci.configureHciCluster.wizard.dvsConfig.distributedSwitchesSection.locallyDuplicateNameError\");\n      }\n\n      if (this.hasDvsExistingDuplicateNameError(control)) {\n         return VsanUiUtils.getString(\n               \"vsan.cluster.hci.configureHciCluster.wizard.dvsConfig.distributedSwitchesSection.existingDvsDuplicateNameError\");\n      }\n\n      return null;\n   };\n\n   public getDvpgNameControlErrors = (control: FormControl): string => {\n      if (control.hasError(\"required\")) {\n         return VsanUiUtils.getString(\n               \"vsan.cluster.hci.configureHciCluster.wizard.dvsConfig.distributedSwitchesSection.dvpgNameRequiredError\");\n      }\n\n      if (control.hasError(\"maxlength\")) {\n         return VsanUiUtils.getString(\n               \"vsan.cluster.hci.configureHciCluster.wizard.dvsConfig.distributedSwitchesSection.dvpgNameLengthError\");\n      }\n\n      if (control.hasError(DistributedSwitchesPageValidator.DVPG_LOCALLY_DUPLICATE_NAMES_VALIDATION)) {\n         return VsanUiUtils.getString(\n               \"vsan.cluster.hci.configureHciCluster.wizard.dvsConfig.distributedSwitchesSection.dvpgLocallyDuplicateNameError\");\n      }\n\n      if (control.hasError(DistributedSwitchesPageValidator.DVPG_EXISTING_DUPLICATE_NAMES_VALIDATION)) {\n         return VsanUiUtils.getString(\n               \"vsan.cluster.hci.configureHciCluster.wizard.dvsConfig.distributedSwitchesSection.dvpgExistingDuplicateNameError\");\n      }\n\n      return null;\n   };\n\n   public getDvsAssignmentErrors = (dvsFormControls: FormControl[]): string[] => {\n      let errors: string[] = [];\n      dvsFormControls.forEach((control) => {\n         if (this.hasDvsToAdapterAssignmentError(control)) {\n            errors.push(VsanUiUtils.getString(\n                  \"vsan.cluster.hci.configureHciCluster.wizard.dvsConfig.distributedSwitchesSection.assignmentError\",\n                  control.value));\n         }\n      });\n\n     return errors;\n   };\n\n   private hasDvsToAdapterAssignmentError = (control: FormControl): boolean => {\n      return control.hasError(DistributedSwitchesPageValidator.DVS_TO_ADAPTER_ASSIGNMENT_VALIDATION);\n   };\n\n   private hasDvsLocalDuplicateNameError = (control: FormControl): boolean => {\n      return this.hasDuplicateNameError(control, DistributedSwitchesPageValidator.DVS_LOCALLY_DUPLICATE_NAMES_VALIDATION);\n   };\n\n   private hasDvsExistingDuplicateNameError = (control: FormControl): boolean => {\n      return this.hasDuplicateNameError(control, DistributedSwitchesPageValidator.DVS_EXISTING_DUPLICATE_NAMES_VALIDATION);\n   };\n\n   private hasDuplicateNameError = (control: FormControl, expectedError: string): boolean => {\n      let formArray: FormArray = control.parent.parent as FormArray;\n\n      if (formArray.hasError(expectedError)) {\n         let error: any = formArray.getError(expectedError);\n         if (error.duplicateNames.indexOf(control.value) != -1) {\n            return true;\n         }\n      }\n\n      return false;\n   };\n}\n","<!-- Copyright 2017-2021 VMware, Inc. All rights reserved. -- VMware Confidential -->\n<clr-stack-view (change)=\"rebuildToc()\">\n   <!--HA section-->\n   <clr-stack-block id=\"ha-service-block\"\n                    clrSbExpandable=\"true\"\n                    [clrSbExpanded]=\"stackBlocksExpandedState[HA_SETTINGS_INDEX]\"\n                    (clrSbExpandedChange)=\"toggleStackBlockExpandedState(HA_SETTINGS_INDEX)\"\n                    *ngIf=\"clusterConfigData.basicConfig.haEnabled\">\n      <clr-stack-label id=\"ha-label\">\n         {{\"vsan.cluster.configure.wizard.advancedOptions.ha.label\" | localized}}\n      </clr-stack-label>\n      <clr-stack-block id=\"host-failure-monitoring-block\">\n         <clr-stack-label id=\"host-failure-monitoring-label\">\n            {{\"vsan.cluster.configure.wizard.advancedOptions.host.failure.monitor\" | localized}}\n         </clr-stack-label>\n         <clr-stack-content>\n            <clr-toggle-wrapper>\n               <input id=\"toggle-host-monitoring\"\n                      name=\"toggle-host-monitoring\"\n                      type=\"checkbox\"\n                      clrToggle\n                      [(ngModel)]=\"clusterConfigData.enableHostMonitoring\"\n                      aria-labelledby=\"ha-label host-failure-monitoring-label\">\n               <label for=\"toggle-host-monitoring\"></label>\n            </clr-toggle-wrapper>\n         </clr-stack-content>\n      </clr-stack-block>\n\n      <clr-stack-block id=\"virtual-machine-monitoring-block\">\n         <clr-stack-label id=\"virtual-machine-monitoring-label\">\n            {{\"vsan.cluster.configure.wizard.advancedOptions.vm.monitor.label\" | localized}}\n         </clr-stack-label>\n         <clr-stack-content>\n            <clr-toggle-wrapper>\n               <input id=\"toggle-vm-monitoring\"\n                      name=\"toggle-vm-monitoring\"\n                      type=\"checkbox\"\n                      clrToggle\n                      [(ngModel)]=\"clusterConfigData.enableVmMonitoring\"\n                      aria-labelledby=\"ha-label virtual-machine-monitoring-label\">\n               <label for=\"toggle-vm-monitoring\"></label>\n            </clr-toggle-wrapper>\n         </clr-stack-content>\n      </clr-stack-block>\n\n      <clr-stack-block id=\"admission-control-block\">\n         <clr-stack-label id=\"admission-control-label\">\n            {{\"vsan.cluster.configure.wizard.advancedOptions.admissionControl.label\" | localized}}\n         </clr-stack-label>\n         <clr-stack-content>\n            <clr-toggle-wrapper>\n               <input id=\"toggle-admission-control\"\n                      name=\"toggle-admission-control\"\n                      type=\"checkbox\"\n                      clrToggle\n                      [(ngModel)]=\"clusterConfigData.enableAdmissionControl\"\n                      aria-labelledby=\"ha-label admission-control-label\">\n               <label for=\"toggle-admission-control\"></label>\n            </clr-toggle-wrapper>\n         </clr-stack-content>\n      </clr-stack-block>\n\n      <clr-stack-block id=\"host-failure-to-tolerate-block\"\n                       [class.disable-action]=\"!clusterConfigData?.enableAdmissionControl\">\n         <clr-stack-label id=\"host-failure-to-tolerate-label\" class=\"nested\">\n            {{\"vsan.cluster.configure.wizard.advancedOptions.host.ftt.label\" | localized}}\n         </clr-stack-label>\n         <clr-stack-content>\n            <clr-select-container>\n               <select id=\"host-failure-ftt\"\n                       clrSelect\n                       [disabled]=\"!clusterConfigData?.enableAdmissionControl\"\n                       [(ngModel)]=\"selectedHostFtt\"\n                       (ngModelChange)=\"onHostFttChange()\"\n                       aria-labelledby=\"ha-label host-failure-to-tolerate-label\">\n                  <option *ngFor=\"let ftt of availableHostFtt\"\n                          [value]=\"+ftt\"\n                          [selected]=\"ftt == selectedHostFtt\">{{ftt}}</option>\n               </select>\n               <clr-control-helper>\n                  {{\"vsan.cluster.configure.wizard.advancedOptions.host.ftt.desc\" | localized}}\n               </clr-control-helper>\n            </clr-select-container>\n         </clr-stack-content>\n      </clr-stack-block>\n   </clr-stack-block>\n\n   <!--DRS section-->\n   <clr-stack-block id=\"drs-service-block\"\n                    clrSbExpandable=\"true\"\n                    [clrSbExpanded]=\"stackBlocksExpandedState[DRS_SETTINGS_INDEX]\"\n                    (clrSbExpandedChange)=\"toggleStackBlockExpandedState(DRS_SETTINGS_INDEX)\"\n                    *ngIf=\"clusterConfigData.basicConfig.drsEnabled\">\n      <clr-stack-label id=\"drs-label\">\n         {{\"vsan.cluster.configure.wizard.advancedOptions.drs.label\" | localized}}\n      </clr-stack-label>\n      <clr-stack-block id=\"automation-level-block\">\n         <clr-stack-label id=\"automation-level-label\">\n            {{\"vsan.cluster.configure.wizard.advancedOptions.auto.level\" | localized}}\n         </clr-stack-label>\n         <clr-stack-content>\n            <clr-select-container>\n               <select id=\"drs-automation-level\"\n                       clrSelect\n                       [(ngModel)]=\"clusterConfigData.automationLevel\"\n                       aria-labelledby=\"drs-label automation-level-label\">\n                  <option *ngFor=\"let opt of AUTOMATION_OPTS\"\n                          [selected]=\"opt.id == clusterConfigData?.automationLevel\"\n                          value=\"{{opt.id}}\">{{opt.label}}</option>\n               </select>\n            </clr-select-container>\n         </clr-stack-content>\n      </clr-stack-block>\n\n      <clr-stack-block id=\"migration-threshold-block\">\n         <clr-stack-label id=\"migration-threshold-label\">\n            {{\"vsan.cluster.configure.wizard.advancedOptions.migration.threshold\" | localized}}\n         </clr-stack-label>\n         <clr-stack-content>\n            <clr-select-container>\n               <select id=\"migration-threshold\"\n                       clrSelect\n                       name=\"migration-threshold\"\n                       [(ngModel)]=\"clusterConfigData.migrationThreshold\"\n                       (ngModelChange)=\"parseMigrationThreshold()\"\n                       aria-labelledby=\"drs-label migration-threshold-label\">\n                  <option *ngFor=\"let threshold of AVAILABLE_MIGRATION_THRESHOLD\"\n                          [selected]=\"threshold == clusterConfigData?.migrationThreshold\"\n                          value=\"{{threshold}}\">\n                     {{threshold}}\n                  </option>\n               </select>\n            </clr-select-container>\n            <clr-signpost [vsan-signpost-title]=\"'vsan.cluster.configure.wizard.advancedOptions.migration.threshold.signpost' | localized\">\n               <clr-signpost-content *clrIfOpen clrPosition=\"bottom-middle\">\n                  <span>{{\"vsan.cluster.hci.configureHciCluster.wizard.advancedOptionsPage.migrationTreshold.infoText\" | localized}}</span>\n               </clr-signpost-content>\n            </clr-signpost>\n         </clr-stack-content>\n      </clr-stack-block>\n   </clr-stack-block>\n\n   <!--vSAN options section-->\n   <clr-stack-block id=\"vsan-service-block\"\n                    clrSbExpandable=\"true\"\n                    [clrSbExpanded]=\"stackBlocksExpandedState[VSAN_SETTINGS_INDEX]\"\n                    (clrSbExpandedChange)=\"toggleStackBlockExpandedState(VSAN_SETTINGS_INDEX)\"\n                    *ngIf=\"clusterConfigData?.basicConfig.vsanEnabled\">\n      <clr-stack-label id=\"vsan-options-label\">\n         {{\"vsan.cluster.configure.wizard.advancedOptions.vsan.label\" | localized}}\n      </clr-stack-label>\n      <clr-stack-block *ngIf=\"showVsanMaxEnableOption\"\n                       id=\"vsan-max-block-prompt\"\n                       class=\"full-width hide-border-bottom\">\n         <clr-stack-label>\n            <vsan-validation [alertType]=\"AlertType.INFO\"\n                             [isSmall]=\"true\"\n                             [allowClose]=\"false\"\n                             [alert]=\"'vsan.cluster.configure.wizard.advancedOptions.vsan.max.prompt' | localized\">\n            </vsan-validation>\n         </clr-stack-label>\n      </clr-stack-block>\n      <clr-stack-block *ngIf=\"showVsanMaxEnableOption\">\n         <clr-stack-label id=\"vsan-max-label\">\n            {{\"vsan.cluster.configure.wizard.advancedOptions.vsan.max.label\" | localized}}\n         </clr-stack-label>\n         <clr-stack-content>\n            <clr-toggle-wrapper>\n               <input id=\"enable-vsan-max\"\n                      name=\"enable-vsan-max\"\n                      clrToggle\n                      [(ngModel)]=\"isVsanMaxWorkflow\"\n                      (change)=\"updateVsanMaxState()\"\n                      type=\"checkbox\"\n                      aria-labelledby=\"vsan-options-label vsan-max-label\">\n               <label for=\"enable-vsan-max\"></label>\n            </clr-toggle-wrapper>\n            <!-- Marketing content is not available yet. Once it is provided(expected 3 months before release, we can\n                 add the signpost again. -->\n            <!--<clr-signpost id=\"vsan-max-info\"\n                             [vsan-signpost-title]=\"'vsan.cluster.configure.wizard.advancedOptions.vsan.max.signpost' | localized\">\n               <clr-signpost-content *clrIfOpen clrPosition=\"bottom-middle\">\n                  TODO dtsvetkova: Update content when provided by marketing.\n               </clr-signpost-content>\n            </clr-signpost>-->\n         </clr-stack-content>\n      </clr-stack-block>\n      <clr-stack-block id=\"deployment-type-block\">\n         <clr-stack-label id=\"deployment-type-label\">\n            {{\"vsan.cluster.configure.wizard.advancedOptions.vsan.deployment.label\" | localized}}\n         </clr-stack-label>\n         <clr-stack-content>\n            <clr-select-container>\n               <select id=\"vsan-deployment-type\"\n                       clrSelect\n                       [(ngModel)]=\"configureWizardData.selectedVsanClusterType\"\n                       (change)=\"vsanClusterTypeChanged()\"\n                       aria-labelledby=\"vsan-options-label deployment-type-label\">\n                  <option *ngFor=\"let clusterType of availableVsanClusterTypes\"\n                          [selected]=\"configureWizardData.selectedVsanClusterType == clusterType.id\"\n                          value=\"{{clusterType.id}}\">{{clusterType.label}}</option>\n               </select>\n            </clr-select-container>\n         </clr-stack-content>\n      </clr-stack-block>\n\n      <clr-stack-block id=\"data-at-rest-encryption-block\"\n                       *ngIf=\"isEncryptionSupported\">\n         <clr-stack-label id=\"data-at-rest-encryption-label\">\n            {{\"configureVsan.settings.dataAtRestEncryptionLabel\" | localized}}\n         </clr-stack-label>\n         <clr-stack-content>\n            <clr-toggle-wrapper>\n               <input id=\"data-at-rest-toggle-encryption\"\n                      name=\"data-at-rest-encryption\"\n                      clrToggle\n                      [(ngModel)]=\"vsanConfigSpec.enableDataAtRestEncryption\"\n                      (change)=\"validateSelection()\"\n                      type=\"checkbox\"\n                      aria-labelledby=\"vsan-options-label data-at-rest-encryption-label\">\n               <label for=\"data-at-rest-toggle-encryption\"></label>\n            </clr-toggle-wrapper>\n         </clr-stack-content>\n      </clr-stack-block>\n\n      <clr-stack-block id=\"kms-cluster-block\"\n                       [class.disable-action]=\"!vsanConfigSpec.enableDataAtRestEncryption\"\n                       *ngIf=\"isEncryptionSupported\">\n         <clr-stack-label id=\"kms-cluster-label\" class=\"nested\">\n            {{\"vsan.generalConfig.kmsCluster\" | localized}}\n         </clr-stack-label>\n         <clr-stack-content>\n            <clr-select-container>\n               <select id=\"kms-server\"\n                       clrSelect\n                       [disabled]=\"!vsanConfigSpec.enableDataAtRestEncryption\"\n                       [(ngModel)]=\"vsanConfigSpec.kmipClusterId\"\n                       aria-labelledby=\"vsan-options-label kms-cluster-label\">\n                  <option *ngFor=\"let kmip of kmipClusterData.availableKmipClusters\"\n                          value=\"{{kmip}}\"\n                          [selected]=\"kmip == vsanConfigSpec.kmipClusterId\">\n                     {{kmip}}\n                  </option>\n               </select>\n            </clr-select-container>\n         </clr-stack-content>\n      </clr-stack-block>\n\n      <clr-stack-block id=\"data-in-transit-encryption-block\"\n                       *ngIf=\"isDataInTransitEncryptionSupported\">\n         <clr-stack-label id=\"data-in-transit-encryption-label\">\n            {{\"configureVsan.settings.dataInTransitEncryptionLabel\" | localized}}\n         </clr-stack-label>\n         <clr-stack-content class=\"validation-stack-content\">\n            <clr-toggle-container>\n               <clr-toggle-wrapper>\n                  <input id=\"data-in-transit-toggle-encryption\"\n                         name=\"data-in-transit-encryption\"\n                         clrToggle\n                         [(ngModel)]=\"vsanConfigSpec.enableDataInTransitEncryption\"\n                         (ngModelChange)=\"onDataInTransitEncryptionChange()\"\n                         (change)=\"validateSelection()\"\n                         [disabled]=\"!!ditUnavailableMessage\"\n                         type=\"checkbox\"\n                         aria-labelledby=\"vsan-options-label data-in-transit-encryption-label\">\n                  <label for=\"data-in-transit-toggle-encryption\"></label>\n               </clr-toggle-wrapper>\n               <clr-control-helper *ngIf=\"!!ditUnavailableMessage\">\n                  {{ditUnavailableMessage}}\n               </clr-control-helper>\n            </clr-toggle-container>\n         </clr-stack-content>\n      </clr-stack-block>\n\n      <clr-stack-block id=\"space-efficiency-block\" *ngIf=\"isSpaceEfficiencySupported\">\n         <clr-stack-label [ngClass]=\"{'disable-action' : isVsanMaxWorkflow}\">\n            {{\"configureVsan.settings.spaceEfficiency.label\" | localized}}\n         </clr-stack-label>\n         <clr-stack-content>\n            <clr-select-container>\n               <select id=\"space-efficiency-strategy\"\n                       clrSelect\n                       [disabled]=\"isVsanMaxWorkflow\"\n                       [(ngModel)]=\"vsanConfigSpec.spaceEfficiencyConfig\"\n                       (change)=\"validateSelection()\"\n                       ngDefaultControl>\n                  <option [ngValue]=\"SpaceEfficiencyConfig.NONE\" selected>\n                     {{\"configureVsan.settings.spaceEfficiency.noneLabel\" | localized}}\n                  </option>\n                  <option *ngIf=\"clusterCapabilityData?.isCompressionOnlySupported\"\n                          [ngValue]=\"SpaceEfficiencyConfig.COMPRESSION\">\n                     {{\"configureVsan.settings.spaceEfficiency.compressionLabel\" | localized}}\n                  </option>\n                  <option *ngIf=\"clusterCapabilityData?.isDeduplicationAndCompressionSupported\"\n                          [ngValue]=\"SpaceEfficiencyConfig.DEDUPLICATION_AND_COMPRESSION\">\n                     {{\"configureVsan.settings.spaceEfficiency.dedupAndCompressionLabel\" | localized}}\n                  </option>\n               </select>\n            </clr-select-container>\n            <clr-signpost id=\"space-efficiency-strategy-help\"\n                          [vsan-signpost-title]=\"'configureVsan.settings.spaceEfficiency.signpost.label' | localized\">\n               <clr-signpost-content *clrIfOpen clrPosition=\"top-middle\">\n                  <div *ngIf=\"isVsanMaxWorkflow\">\n                     {{\"vsan.generalConfig.spaceConfig.disabled.vsanMaxInfo\" | localized}}\n                  </div>\n                  <ul *ngIf=\"clusterCapabilityData?.isCompressionOnlySupported && !isVsanMaxWorkflow\">\n                     <li>\n                        {{\"configureVsan.settings.spaceEfficiency.compressionLabel\" | localized}}:\n                        {{\"configureVsan.settings.spaceEfficiency.compressionDescription\" | localized}}\n                     </li>\n                     <li>\n                        {{\"configureVsan.settings.spaceEfficiency.dedupAndCompressionLabel\" | localized}}:\n                        {{\"configureVsan.settings.spaceEfficiency.dedupAndCompressionDescription\" | localized}}\n                     </li>\n                  </ul>\n                  <ng-container *ngIf=\"!clusterCapabilityData?.isCompressionOnlySupported\">\n                     {{\"configureVsan.settings.spaceEfficiency.dedupAndCompressionDescription\" | localized}}\n                  </ng-container>\n               </clr-signpost-content>\n            </clr-signpost>\n         </clr-stack-content>\n      </clr-stack-block>\n\n      <clr-stack-block id=\"fault-domains-block\"\n                       [class.disable-action]=\"!allowCreateFaultDomains\"\n                       *ngIf=\"stretchClusterSupported\">\n         <clr-stack-label id=\"fault-domains-label\">\n            {{\"vsan.cluster.configure.wizard.advancedOptions.vsan.faultDomain.label\" | localized}}\n         </clr-stack-label>\n         <clr-stack-content>\n            <clr-toggle-wrapper>\n               <input id=\"toggle-fd\"\n                      name=\"toggle-fd\"\n                      clrToggle\n                      [disabled]=\"!allowCreateFaultDomains\"\n                      [(ngModel)]=\"configureWizardData.enableFaultDomainForSingleSiteCluster\"\n                      (change)=\"enableFaultDomainForSingleSiteClusterChanged()\"\n                      type=\"checkbox\"\n                      aria-labelledby=\"vsan-options-label fault-domains-label\">\n               <label for=\"toggle-fd\"></label>\n            </clr-toggle-wrapper>\n         </clr-stack-content>\n      </clr-stack-block>\n\n      <!-- Show toggle setting for large cluster support (more than 32 hosts) if it is NOT supported natively -->\n      <clr-stack-block id=\"large-scale-cluster-support-block\"\n                       *ngIf=\"!clusterCapabilityData.isNativeLargeClusterSupported\">\n         <clr-stack-label id=\"large-scale-cluster-support-label\">\n            {{\"vsan.cluster.configure.wizard.advancedOptions.vsan.largeClusters.label\" | localized}}\n         </clr-stack-label>\n         <clr-stack-content>\n            <clr-toggle-wrapper>\n               <input id=\"toggle-large-clusters\"\n                      name=\"toggle-large-clusters\"\n                      clrToggle\n                      [(ngModel)]=\"vsanConfigSpec.advancedOptions.largeClusterSupportEnabled\"\n                      (change)=\"updateRdmaState()\"\n                      type=\"checkbox\"\n                      aria-labelledby=\"vsan-options-label large-scale-cluster-support-label\">\n               <label for=\"toggle-large-clusters\"></label>\n            </clr-toggle-wrapper>\n            <clr-signpost [vsan-signpost-title]=\"'vsan.cluster.configure.wizard.advancedOptions.vsan.largeClusters.signpost' | localized\">\n               <clr-signpost-content *clrIfOpen clrPosition=\"top-middle\">\n                  <span>{{\"vsan.services.advancedOptions.largeClusterSupport.signpost\" | localized}}</span>\n               </clr-signpost-content>\n            </clr-signpost>\n         </clr-stack-content>\n      </clr-stack-block>\n\n      <clr-stack-block id=\"rdma-block\" *ngIf=\"clusterCapabilityData?.isRdmaSupported\">\n         <clr-stack-label id=\"rdma-label\" [ngClass]=\"!canEnableRdma ? 'disable-action' : ''\">\n            {{\"vsan.services.network.rdmaSupport.label\" | localized}}\n         </clr-stack-label>\n         <clr-stack-content>\n            <clr-toggle-wrapper>\n               <input id=\"toggle-rdma\"\n                      name=\"toggle-rdma\"\n                      clrToggle\n                      [(ngModel)]=\"vsanConfigSpec.enableRdma\"\n                      type=\"checkbox\"\n                      [disabled]=\"!canEnableRdma\"\n                      aria-labelledby=\"vsan-options-label rdma-label\">\n            </clr-toggle-wrapper>\n            <clr-signpost [vsan-signpost-title]=\"'vsan.services.network.rdmaSupport.signpost.label' | localized\">\n               <clr-signpost-content *clrIfOpen clrPosition=\"top-middle\">\n                  <div id=\"rdma-alert-message\" *ngIf=\"!canEnableRdma\">\n                     {{rdmaDisabledMessage}}\n                  </div>\n                  <div>{{\"vsan.services.network.rdmaSupport.signpost\" | localized}}</div>\n               </clr-signpost-content>\n            </clr-signpost>\n         </clr-stack-content>\n      </clr-stack-block>\n   </clr-stack-block>\n\n   <!--Host Options section-->\n   <clr-stack-block id=\"host-options-service-block\"\n                    clrSbExpandable=\"true\"\n                    [clrSbExpanded]=\"stackBlocksExpandedState[HOST_SETTINGS_INDEX]\"\n                    (clrSbExpandedChange)=\"toggleStackBlockExpandedState(HOST_SETTINGS_INDEX)\">\n      <clr-stack-label id=\"host-options-label\">\n         {{\"vsan.cluster.configure.wizard.advancedOptions.host.options.label\" | localized}}\n      </clr-stack-label>\n      <clr-stack-block id=\"lockdown-mode-block\">\n         <clr-stack-label id=\"lockdown-mode-label\">\n            {{\"vsan.cluster.configure.wizard.advancedOptions.host.options.lockdown.mode\" | localized}}\n         </clr-stack-label>\n         <clr-stack-content>\n            <clr-select-container>\n               <select id=\"lockdown-mode\"\n                       clrSelect\n                       [(ngModel)]=\"clusterConfigData.lockdownMode\"\n                       aria-labelledby=\"host-options-label lockdown-mode-label\">\n                  <option *ngFor=\"let opt of AVAILABLE_LOCKDOWN_MODES\"\n                          value=\"{{opt.id}}\">{{opt.label}}</option>\n               </select>\n            </clr-select-container>\n         </clr-stack-content>\n      </clr-stack-block>\n\n      <clr-stack-block id=\"ntp-server-block\">\n         <clr-stack-label id=\"ntp-server-label\">\n            {{\"vsan.cluster.configure.wizard.advancedOptions.host.options.ntp.server\" | localized}}\n         </clr-stack-label>\n         <clr-stack-content>\n            <clr-input-container>\n               <input id=\"ntp-server\"\n                      class=\"ntp-server-input\"\n                      type=\"text\"\n                      clrInput\n                      [(ngModel)]=\"clusterConfigData.ntpServer\"\n                      placeholder=\"{{'vsan.cluster.configure.wizard.advancedOptions.host.options.ntp.server.placeholder' | localized}}\"\n                      aria-labelledby=\"host-options-label ntp-server-label\"/>\n               <clr-control-helper>\n                  {{\"vsan.cluster.configure.wizard.advancedOptions.host.options.ntp.desc\" | localized}}\n               </clr-control-helper>\n            </clr-input-container>\n         </clr-stack-content>\n      </clr-stack-block>\n\n      <!-- VUM baseline preference -->\n      <clr-stack-block id=\"vum-baseline-preference-block\"\n                       *ngIf=\"vcCapabilityData?.isVumBaselineRecommendationSupported &&\n                              !clusterConfigData?.basicConfig.pmanEnabled\">\n         <clr-stack-label id=\"vum-baseline-preference-label\">\n            {{\"vsan.cluster.configure.wizard.advancedOptions.vsan.vumBaselinePreference.label\" | localized}}\n         </clr-stack-label>\n         <clr-stack-content>\n            <clr-select-container>\n               <select id=\"vum-baseline-preference\"\n                       clrSelect\n                       [(ngModel)]=\"clusterConfigData.vumBaselineRecommendationType\"\n                       aria-labelledby=\"host-options-label vum-baseline-preference-label\">\n                  <option *ngFor=\"let type of VUM_BASELINE_PREFERENCE_TYPES\"\n                          value=\"{{type.id}}\"\n                          [selected]=\"type.id == clusterConfigData?.vumBaselineRecommendationType\">\n                     {{type.label}}\n                  </option>\n               </select>\n            </clr-select-container>\n            <clr-signpost\n                  [vsan-signpost-title]=\"'vsan.cluster.configure.wizard.advancedOptions.vsan.vumBaselinePreference.signpost.label' | localized\">\n               <clr-signpost-content *clrIfOpen clrPosition=\"top-left\">\n                  <span id=\"vum-baseline-preference-signpost\">\n                     {{\"vsan.cluster.configure.wizard.advancedOptions.vsan.vumBaselinePreference.signpost\" | localized}}\n                  </span>\n               </clr-signpost-content>\n            </clr-signpost>\n         </clr-stack-content>\n      </clr-stack-block>\n   </clr-stack-block>\n\n   <!--Enhanced vMotion Capability section-->\n   <clr-stack-block id=\"vmotion-capability-service-block\"\n                    clrSbExpandable=\"true\"\n                    [clrSbExpanded]=\"stackBlocksExpandedState[EVM_SETTINGS_INDEX]\"\n                    (clrSbExpandedChange)=\"toggleStackBlockExpandedState(EVM_SETTINGS_INDEX)\">\n      <clr-stack-label id=\"vmotion-capability-service-label\">\n         {{\"vsan.cluster.configure.wizard.advancedOptions.enhanced.vmotion.capability.label\" | localized}}\n      </clr-stack-label>\n      <clr-stack-block id=\"enable-evc-block\"\n                       [class.disable-action]=\"evcModeConfigData.unsupportedEvcStatus\">\n         <clr-stack-label id=\"enable-evc-label\">\n            {{\"vsan.cluster.configure.wizard.advancedOptions.enable.evc.label\" | localized}}\n         </clr-stack-label>\n         <clr-stack-content>\n            <clr-toggle-wrapper>\n               <input id=\"toggle-evc\"\n                      name=\"toggle-evc\"\n                      clrToggle\n                      type=\"checkbox\"\n                      [disabled]=\"evcModeConfigData.unsupportedEvcStatus\"\n                      [(ngModel)]=\"clusterConfigData.enableEVC\"\n                      (change)=\"clearPageState()\"\n                      aria-labelledby=\"vmotion-capability-service-label enable-evc-label\">\n               <label for=\"toggle-evc\"></label>\n            </clr-toggle-wrapper>\n            <clr-signpost *ngIf=\"evcModeConfigData.unsupportedEvcStatus\"\n                          [vsan-signpost-title]=\"'vsan.cluster.configure.wizard.advancedOptions.enable.evc.label' | localized\">\n               <clr-signpost-content *clrIfOpen clrPosition=\"right-top\">\n                  <span id=\"unsupported-evc-status-label\">\n                     {{\"vsan.cluster.configure.wizard.advancedOptions.evc.unsupportedEvcStatus.message\" | localized}}\n                  </span>\n               </clr-signpost-content>\n            </clr-signpost>\n         </clr-stack-content>\n      </clr-stack-block>\n\n      <clr-stack-block id=\"evc-mode-block\"\n                       [class.disable-action]=\"!clusterConfigData?.enableEVC\">\n         <clr-stack-label id=\"evc-mode-label\" class=\"nested\">\n            {{\"vsan.cluster.configure.wizard.advancedOptions.evc.mode\" | localized}}\n         </clr-stack-label>\n         <clr-stack-content>\n            <clr-select-container>\n               <select id=\"evc-mode\"\n                       clrSelect\n                       [disabled]=\"!clusterConfigData?.enableEVC\"\n                       [(ngModel)]=\"clusterConfigData.selectedEvcMode\"\n                       (change)=\"clearPageState()\"\n                       aria-labelledby=\"vmotion-capability-service-label evc-mode-label\">\n                  <option *ngFor=\"let evc of evcModeConfigData.supportedIntelEvcMode\" value=\"{{evc.id}}\">\n                     {{evc.label}}\n                  </option>\n                  <option *ngFor=\"let evc of evcModeConfigData.supportedAmdEvcMode\" value=\"{{evc.id}}\">\n                     {{evc.label}}\n                  </option>\n               </select>\n            </clr-select-container>\n         </clr-stack-content>\n      </clr-stack-block>\n   </clr-stack-block>\n</clr-stack-view>\n","<!--Copyright 2017-2022 VMware, Inc. All rights reserved. -- VMware Confidential-->\n<ng-container *ngIf=\"vsanConfigSpec.isVsanMaxEnabled\">\n   <vsan-claim-mode-toggle [(isAutoClaim)]=\"isAutoClaim\"\n                           [isAutoClaimAllowed]=\"isAutoClaimAllowed\"\n                           (isAutoClaimChange)=\"onIsAutoClaimChange()\">\n   </vsan-claim-mode-toggle>\n   <vsan-auto-claim-disks *ngIf=\"isAutoClaim\"\n                          [hostsClaimingData]=\"hostsClaimingData\"\n                          (claimedDisksChange)=\"onAutoClaimedDisksChange($event)\">\n   </vsan-auto-claim-disks>\n</ng-container>\n<!-- Do not destroy the components when the toggle is pressed to avoid data re-fetch and rerender -->\n<vsan-claim-disks [ngClass]=\"{'hidden' : isAutoClaim}\"\n                  [isStandalone]=\"false\"\n                  [vsanConfigSpec]=\"vsanConfigSpec\"\n                  [hostsClaimingData]=\"hostsClaimingData\"\n                  (configUpdated)=\"onConfigChange($event)\"\n                  (configValid)=\"isConfigAcceptable=$event\"\n                  (disksClaimingConfigUpdated)=\"onDisksClaimingConfigChange($event)\">\n</vsan-claim-disks>","<!-- Copyright 2018-2020 VMware, Inc. All rights reserved. -- VMware Confidential -->\n<div id=\"hci-proxy-desc\" [innerHTML]=\"'vsan.cluster.hci.configureHciCluster.dialog.vcproxy.desc' | localized\"></div>\n<form clrForm clrLayout=\"horizontal\">\n   <vsan-proxy-inputs [enableInternet]=\"true\"></vsan-proxy-inputs>\n</form>","<!--Copyright 2021-2022 VMware, Inc. All rights reserved. -- VMware Confidential-->\n<vsan-validation id=\"disable-support-insight-warning\"\n                 *ngIf=\"disableSupportInsight\"\n                 [alertType]=\"'warning'\"\n                 [alert]=\"'vsan.cluster.hci.configureHciCluster.dialog.supportInsight.disabled.warning'| localized\">\n</vsan-validation>\n<div id=\"support-insight-desc\">\n   {{\"vsan.cluster.hci.configureHciCluster.dialog.supportInsight.desc\" | localized}}\n</div>\n<ul id=\"support-insight-benefits\">\n   <li id=\"support-insight-benefit1\">\n      {{\"vsan.cluster.hci.configureHciCluster.dialog.supportInsight.benefit1\" | localized}}\n   </li>\n   <li id=\"support-insight-benefit2\">\n      {{\"vsan.cluster.hci.configureHciCluster.dialog.supportInsight.benefit2\" | localized}}\n   </li>\n   <li id=\"support-insight-benefit3\">\n      {{\"vsan.cluster.hci.configureHciCluster.dialog.supportInsight.benefit3\" | localized}}\n   </li>\n</ul>\n<div class=\"note-section\" id=\"support-insight-note\">\n   {{\"vsan.cluster.hci.configureHciCluster.dialog.supportInsight.note\" | localized}}\n</div>\n<div id=\"support-insight-more-info\"\n     [innerHTML]=\"'vsan.cluster.hci.configureHciCluster.dialog.supportInsight.more' | localized\">\n</div>\n\n<div class=\"images-container\"></div>\n<clr-checkbox-container>\n   <clr-checkbox-wrapper>\n      <input type=\"checkbox\"\n             clrCheckbox\n             id=\"disable-support-insight-toggle\"\n             name=\"disable-support-insight-toggle\"\n             [(ngModel)]=\"disableSupportInsight\"/>\n      <label>{{\"vsan.cluster.hci.configureHciCluster.dialog.supportInsight.disable.label\" | localized}}</label>\n   </clr-checkbox-wrapper>\n</clr-checkbox-container>\n<clr-checkbox-container>\n   <clr-checkbox-wrapper>\n      <input type=\"checkbox\"\n             clrCheckbox\n             id=\"hide-this-step-toggle\"\n             name=\"hide-this-step-toggle\"\n             [(ngModel)]=\"hideSupportInsight\"\n             [disabled]=\"!disableSupportInsight\"/>\n      <label>{{\"vsan.cluster.hci.configureHciCluster.dialog.supportInsight.hide.label\" | localized}}</label>\n   </clr-checkbox-wrapper>\n   <clr-control-helper>\n      {{\"vsan.cluster.hci.configureHciCluster.dialog.supportInsight.hide.desc\" | localized}}\n   </clr-control-helper>\n</clr-checkbox-container>","/* Copyright 2017-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, EventEmitter, Input, OnInit, Output} from \"@angular/core\";\nimport {\n   AbstractControl,\n   FormArray,\n   FormBuilder,\n   FormControl,\n   FormGroup,\n   Validators,\n} from \"@angular/forms\";\nimport {IpParserService} from \"@service/ip-parser.service\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {PageControls} from \"@component/wizard/flow-wizard.component\";\nimport {NetworkingSettingsComponent} from \"./networking-settings.component\";\nimport {NetServiceConfig} from \"@generated/net-service-config\";\nimport IpType = NetServiceConfig.IpType;\nimport {ReactiveFormUtil} from \"@util/reactive-form-util\";\nimport {InventoryNode} from \"@generated/inventory-node\";\nimport {Icon} from \"@util/icon\";\n\n@Component({\n   templateUrl: \"ipv6-settings.html\",\n   selector: \"vsan-ipv6-settings\",\n   styleUrls: [\"ipv6-settings.scss\"],\n})\nexport class Ipv6Settings implements OnInit {\n\n   readonly IpType: typeof IpType = IpType;\n   readonly Icon: typeof Icon = Icon;\n\n   private static readonly NAME_CONTROL_NAME: string = \"name\";\n   private static readonly IPV6_CONTROL_NAME: string = \"ipv6\";\n   private static readonly PREFIX_CONTROL_NAME: string = \"prefix\";\n   private static readonly GATEWAY_CONTROL_NAME: string = \"gateway\";\n   private static readonly DEFAULT_IPV6_IP_TYPE: IpType = IpType.DHCP;\n   private static readonly IP_TYPE_CONTROL_PATH: string = ReactiveFormUtil.getFormControlPath(\n         NetworkingSettingsComponent.IPV6_SETTINGS_CONTROL_NAME,\n         NetworkingSettingsComponent.IP_TYPE_CONTROL_NAME);\n   private static readonly HOST_SETTINGS_GROUP_PATH: string = ReactiveFormUtil.getFormControlPath(\n         NetworkingSettingsComponent.IPV6_SETTINGS_CONTROL_NAME,\n         NetworkingSettingsComponent.HOST_SETTINGS_CONTROL_NAME);\n   private static readonly IPV6_VALIDATION: string = \"validateIp\";\n   private static readonly LINK_LOCAL_VALIDATION: string = \"validateLikLocalAddress\";\n   private static readonly PREFIX_VALIDATION: string = \"validatePrefix\";\n   private static readonly DUPLICATE_IPS_VALIDATION: string = \"validateDuplicateIps\";\n   private static readonly DIFFERENT_SUBNET_VALIDATION: string = \"validateDifferentSubnet\";\n\n   @Input()\n   private pageControls: PageControls;\n\n   @Input()\n   private hosts: InventoryNode[];\n\n   @Input()\n   private form: FormGroup;\n\n   @Input()\n   showDefaultGateway: boolean;\n\n   @Input()\n   ipSettingsInfoMessage: string;\n\n   @Output()\n   private onFormChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n   constructor(private fb: FormBuilder, private ipService: IpParserService) {}\n\n   ngOnInit(): void {\n      this.buildForm();\n      this.registerFormControlChangeHandlers();\n   }\n\n   private buildForm = (): void => {\n      const hostFormGroups: any = this.hosts.map((host) => {\n         return this.fb.group({\n            [Ipv6Settings.NAME_CONTROL_NAME]: [host.name, null],\n            [Ipv6Settings.IPV6_CONTROL_NAME]:\n                  [null, [Validators.required, this.validateIpv6, this.validateLinkLocalAddress]],\n            [Ipv6Settings.PREFIX_CONTROL_NAME]: [null, [Validators.required, this.validatePrefix]],\n            [Ipv6Settings.GATEWAY_CONTROL_NAME]: [null, [this.validateIpv6DefaultGateway]],\n         }, {validator: this.validateDifferentSubnetError});\n      });\n\n      const hostFormArray: any = this.fb.array(hostFormGroups, this.validateDuplicateIps);\n      const ipv6Settings: any = this.fb.group({\n         [NetworkingSettingsComponent.IP_TYPE_CONTROL_NAME]: [Ipv6Settings.DEFAULT_IPV6_IP_TYPE, [Validators.required]],\n         [NetworkingSettingsComponent.HOST_SETTINGS_CONTROL_NAME]: hostFormArray\n      });\n\n      this.form.addControl(NetworkingSettingsComponent.IPV6_SETTINGS_CONTROL_NAME, ipv6Settings);\n      this.toggleHostSettingsAvailability(this.ipType.value);\n   };\n\n   private registerFormControlChangeHandlers = (): void => {\n      this.ipType.valueChanges.forEach(this.toggleHostSettingsAvailability);\n      this.hostSettings.controls.forEach((formGroup: FormGroup) => {\n         for (const controlName in formGroup.controls) {\n            const control: FormControl = formGroup.controls[controlName] as FormControl;\n            control.statusChanges.forEach(() => {\n               this.pageControls.rebuildToc();\n            });\n         }\n      });\n   };\n\n   private toggleHostSettingsAvailability = (ipType: IpType): void => {\n      switch (ipType) {\n         case IpType.DHCP:\n         case IpType.ROUTER_ADVERTISEMENT:\n            this.hostSettings.disable();\n            break;\n         case IpType.STATIC:\n            this.hostSettings.enable();\n            break;\n      }\n\n      this.onFormChange.emit(true);\n   };\n\n   /** Form controls getters */\n\n   get ipv6Settings(): FormControl {\n      return this.form.get(NetworkingSettingsComponent.IPV6_SETTINGS_CONTROL_NAME) as FormControl;\n   }\n\n   get ipType(): FormControl {\n      return this.form.get(Ipv6Settings.IP_TYPE_CONTROL_PATH) as FormControl;\n   }\n\n   get hostSettings(): FormArray {\n      return this.form.get(Ipv6Settings.HOST_SETTINGS_GROUP_PATH) as FormArray;\n   }\n\n   get disabledStaticIpv6(): boolean {\n      return this.ipType.value !== IpType.STATIC;\n   }\n\n   getIpv6Control = (idx: string): FormControl => {\n      const controlPath: string = ReactiveFormUtil.getFormControlPath(\n            Ipv6Settings.HOST_SETTINGS_GROUP_PATH,\n            idx,\n            Ipv6Settings.IPV6_CONTROL_NAME);\n      return this.form.get(controlPath) as FormControl;\n   };\n\n   getPrefixControl = (idx: string): FormControl => {\n      const controlPath: string = ReactiveFormUtil.getFormControlPath(\n            Ipv6Settings.HOST_SETTINGS_GROUP_PATH,\n            idx,\n            Ipv6Settings.PREFIX_CONTROL_NAME);\n      return this.form.get(controlPath) as FormControl;\n   };\n\n   getGatewayControl = (idx: string): FormControl => {\n      const controlPath: string = ReactiveFormUtil.getFormControlPath(\n            Ipv6Settings.HOST_SETTINGS_GROUP_PATH,\n            idx,\n            Ipv6Settings.GATEWAY_CONTROL_NAME);\n      return this.form.get(controlPath) as FormControl;\n   };\n\n   private hasDifferentSubnet = (hostControls: FormGroup): boolean => {\n      const ipv6Control: AbstractControl = hostControls.get(Ipv6Settings.IPV6_CONTROL_NAME);\n      const prefixControl: AbstractControl = hostControls.get(Ipv6Settings.PREFIX_CONTROL_NAME);\n      const gatewayControl: AbstractControl = hostControls.get(Ipv6Settings.GATEWAY_CONTROL_NAME);\n\n      if (ipv6Control.touched && gatewayControl.touched && prefixControl.touched &&\n            ipv6Control.value && gatewayControl.value && prefixControl.value &&\n            ipv6Control.valid && gatewayControl.valid && prefixControl.valid) {\n         return !this.ipService.isSameIpv6Subnet(ipv6Control.value.trim(),\n               gatewayControl.value.trim(), prefixControl.value.trim());\n      }\n\n      return false;\n   };\n\n   invalid = (formControl: AbstractControl): boolean => {\n      return this.hostSettings.enabled && formControl.invalid && formControl.touched;\n   };\n\n   private hasSubnetMismatch = (formControl: AbstractControl): boolean => {\n      return formControl.parent.hasError(Ipv6Settings.DIFFERENT_SUBNET_VALIDATION);\n   };\n\n   invalidIpv6Control = (idx: string): boolean => {\n      const control: FormControl = this.getIpv6Control(idx);\n      return this.invalid(control) || this.hasSubnetMismatch(control) || this.hasDuplicateIp(control);\n   };\n\n   invalidPrefixControl = (idx: string): boolean => {\n      const control: FormControl = this.getPrefixControl(idx);\n      return this.invalid(control) || this.hasSubnetMismatch(control);\n   };\n\n   invalidGatewayControl = (idx: string): boolean => {\n      const control: FormControl = this.getGatewayControl(idx);\n      return this.invalid(control) || this.hasSubnetMismatch(control);\n   };\n\n   private hasDuplicateIp = (formControl: AbstractControl): boolean => {\n      const hostSettings: FormArray = formControl.parent.parent as FormArray;\n      hostSettings.updateValueAndValidity();\n      if (hostSettings.hasError(Ipv6Settings.DUPLICATE_IPS_VALIDATION)) {\n         const duplicateIps: string[] =\n               hostSettings.getError(Ipv6Settings.DUPLICATE_IPS_VALIDATION).duplicateIps;\n         if (duplicateIps.indexOf(this.ipService.getNormalizedIpv6Address(formControl.value.trim())) !== -1) {\n            return true;\n         }\n      }\n\n      return false;\n   };\n\n   private getDuplicateIps = (hostSettings: FormArray): string[] => {\n      const formGroups: FormGroup[] = hostSettings.controls as FormGroup[];\n\n      const ips: any = {};\n      const result: string[] = [];\n      formGroups.forEach((formGroup: FormGroup) => {\n         const ipv6: FormControl = formGroup.get(Ipv6Settings.IPV6_CONTROL_NAME) as FormControl;\n         if (!ipv6.invalid && ipv6.touched && ipv6.dirty) {\n            const ip: string = this.ipService.getNormalizedIpv6Address(ipv6.value.trim());\n            if (ips.hasOwnProperty(ip)) {\n               result.push(ip);\n            } else {\n               ips[ip] = true;\n            }\n         }\n      });\n\n      return result;\n   };\n\n   getIpv6ControlErrors = (idx: string): string[] => {\n      const formControl: FormControl = this.getIpv6Control(idx);\n\n      const result: string[] = [];\n      this.evaluateIpv6Validity(formControl, result);\n      this.evaluateDuplicateIpv6Validity(formControl, result);\n      const gatewayControl: FormControl = this.getGatewayControl(idx);\n      if (gatewayControl.value) {\n         this.evaluateDifferentSubnetValidity(formControl, result);\n      }\n      this.evaluateLinkLocalValidity(formControl, result);\n\n      return result;\n   };\n\n   getPrefixControlErrors = (idx: string): string[] => {\n      const formControl: FormControl = this.getPrefixControl(idx);\n\n      const result: string[] = [];\n      this.evaluatePrefixValidity(formControl, result);\n      const gatewayControl: FormControl = this.getGatewayControl(idx);\n      if (gatewayControl.value) {\n         this.evaluateDifferentSubnetValidity(formControl, result);\n      }\n\n      return result;\n   };\n\n   getGatewayControlErrors = (idx: string): string[] => {\n      const formControl: FormControl = this.getGatewayControl(idx);\n\n      const result: string[] = [];\n      if (formControl.value) {\n         this.evaluateGatewayValidity(formControl, result);\n         this.evaluateDifferentSubnetValidity(formControl, result);\n      }\n\n      return result;\n   };\n\n   private evaluateIpv6Validity = (formControl: FormControl, errors: string[]): void => {\n      if (formControl.hasError(Ipv6Settings.IPV6_VALIDATION)) {\n         errors.push(VsanUiUtils.getString(\n               \"vsan.cluster.hci.configureHciCluster.wizard.networking.ipv6Tab.ipv6.invalIpv6Address\"));\n      }\n   };\n\n   private evaluateLinkLocalValidity = (formControl: FormControl, errors: string[]): void => {\n      if (formControl.hasError(Ipv6Settings.LINK_LOCAL_VALIDATION)) {\n         errors.push(VsanUiUtils.getString(\n               \"vsan.cluster.hci.configureHciCluster.wizard.networking.ipv6Tab.ipv6.linkLocalAddress\"));\n      }\n   };\n\n   private evaluatePrefixValidity = (formControl: FormControl, errors: string[]): void => {\n      if (formControl.hasError(Ipv6Settings.PREFIX_VALIDATION)) {\n         errors.push(VsanUiUtils.getString(\n               \"vsan.cluster.hci.configureHciCluster.wizard.networking.ipv6Tab.prefix.wrongInput\"));\n      }\n   };\n\n   private evaluateDifferentSubnetValidity = (formControl: FormControl, errors: string[]): void => {\n      if (formControl.parent.hasError(Ipv6Settings.DIFFERENT_SUBNET_VALIDATION)) {\n         errors.push(VsanUiUtils.getString(\n               \"vsan.cluster.hci.configureHciCluster.wizard.networking.ipv4Tab.differentSubnetError\"));\n      }\n   };\n\n   private evaluateDuplicateIpv6Validity = (formControl: FormControl, errors: string[]): void => {\n      if (this.hasDuplicateIp(formControl)) {\n         errors.push(VsanUiUtils.getString(\n               \"vsan.cluster.hci.configureHciCluster.wizard.networking.ipv4Tab.duplicateIpsError\"));\n      }\n   };\n\n   private evaluateGatewayValidity = (formControl: FormControl, errors: string[]): void => {\n      if (formControl.hasError(Ipv6Settings.IPV6_VALIDATION)) {\n         errors.push(VsanUiUtils.getString(\n               \"vsan.cluster.hci.configureHciCluster.wizard.networking.ipv4Tab.gateway.wrongInput\"));\n      }\n   };\n\n   /** Form control validators */\n\n   private validateIpv6 = (ipv6Control: AbstractControl): {[key: string]: any} | null => {\n      const ip: string = String(ipv6Control.value ? ipv6Control.value : \"\").trim();\n      return this.ipService.isIpv6AddressValid(ip) ? null : {\n         [Ipv6Settings.IPV6_VALIDATION]: { valid: false},\n      };\n   };\n\n   private validateLinkLocalAddress = (ipv6Control: AbstractControl): {[key: string]: any} | null => {\n      const ip: string = String(ipv6Control.value).trim();\n      if (ipv6Control.parent) {\n         const prefix: number = +(ipv6Control.parent.get(Ipv6Settings.PREFIX_CONTROL_NAME).value);\n         return this.ipService.isLinkLocalIpv6Address(ip, prefix) ?\n               {[Ipv6Settings.LINK_LOCAL_VALIDATION]: {valid: false}} : null;\n      }\n   };\n\n   private validatePrefix = (prefixControl: AbstractControl): {[key: string]: any} | null => {\n      const prefix: string = String(prefixControl.value).trim();\n      return this.ipService.isSubnetPrefixValid(prefix) ? null :\n            {[Ipv6Settings.PREFIX_VALIDATION]: { valid: false }};\n   };\n\n   private validateIpv6DefaultGateway = (gatewayControl: AbstractControl):\n         {[key: string]: any} | null => {\n      return (gatewayControl && gatewayControl.value) ?\n            this.validateIpv6(gatewayControl) : null;\n   };\n\n   private validateDuplicateIps = (ipv6FormArray: FormArray): {[key: string]: any} | null => {\n      const duplicateIps: string[] = this.getDuplicateIps(ipv6FormArray);\n      return duplicateIps.length === 0 ? null : {\n         [Ipv6Settings.DUPLICATE_IPS_VALIDATION]: {\n            valid: false,\n            duplicateIps: duplicateIps,\n         },\n      };\n   };\n\n   private validateDifferentSubnetError = (formGroup: any): {[key: string]: any} | null => {\n      return !this.hasDifferentSubnet(formGroup) ? null : {\n         [Ipv6Settings.DIFFERENT_SUBNET_VALIDATION]: {valid: false},\n      };\n   };\n}","/* Copyright 2018-2020 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, OnInit} from \"@angular/core\";\nimport {HciClusterService} from \"@generated/hci-cluster-service\";\nimport {ManagedObject} from \"@service/managed-object\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {ExistingDvsData} from \"@generated/existing-dvs-data\";\n\n@Component({\n   templateUrl: \"existing-dvs-selector-dialog.html\",\n   selector: \"existing-dvs-selector-dialog\",\n   styleUrls: [\"existing-dvs-selector-dialog.scss\"],\n})\nexport class ExistingDvsSelectorDialogComponent implements OnInit {\n\n   static readonly DVS_GRID_PAGE_SIZE: number = 10;\n   VsanUiUtils = VsanUiUtils;\n\n   private clusterRef: ManagedObject;\n\n   isLoading: boolean;\n\n   existingDvsList: ExistingDvsData[];\n\n   selectedDvs: ExistingDvsData;\n\n   newDvsSelection: boolean;\n\n   private selectedDvsNames: string[];\n\n   private selectedExistingDvsName: string;\n\n   constructor(private hciClusterService: HciClusterService) {\n   }\n\n   ngOnInit() {\n      const context: any = VsanUiUtils.getModalContext();\n      this.clusterRef = context.clusterRef;\n      this.selectedExistingDvsName = context.selectedExistingDvsName;\n      this.selectedDvsNames = context.selectedDvsNames;\n\n      this.requestData();\n   }\n\n   get dvsGridPageSize() {\n      return ExistingDvsSelectorDialogComponent.DVS_GRID_PAGE_SIZE;\n   }\n\n   get alertMessage(): string {\n      // If the DVS is already selected in the dialog, an error should be shown\n      if (!this.newDvsSelection && !!this.selectedDvs && (this.selectedDvs.name !== this.selectedExistingDvsName) &&\n            this.selectedDvsNames && this.selectedDvsNames.some(dvsName => dvsName === this.selectedDvs.name)) {\n         return VsanUiUtils.getString(\n               \"vsan.cluster.hci.configureHciCluster.wizard.dvsConfig.existingNetworkSelectorDialog.errorMessage\");\n      }\n      return null;\n   }\n\n   onOkClicked = () => {\n      if (this.newDvsSelection) {\n         VsanUiUtils.closeModalDialog(null);\n      } else {\n         VsanUiUtils.closeModalDialog(this.selectedDvs);\n      }\n   };\n\n   private requestData = () => {\n      this.isLoading = true;\n      this.hciClusterService.getExistingDvs(this.clusterRef, this.selectedExistingDvsName)\n            .then(this.onDataRetrieved)\n            .catch(this.onRequestError);\n   };\n\n   private onDataRetrieved = (result: any) => {\n      if (result) {\n         this.existingDvsList = result;\n         if (this.existingDvsList && this.existingDvsList.length > 0 && this.existingDvsList[0].isSelected) {\n            this.selectedDvs = this.existingDvsList[0];\n         }\n      }\n\n      this.isLoading = false;\n   };\n\n   private onRequestError = (result: any) => {\n      this.isLoading = false;\n   };\n\n   get noDvsSelected(): boolean {\n      return !!this.alertMessage || (!this.newDvsSelection && !this.selectedDvs);\n   }\n}","/* Copyright 2019-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {NgModule} from \"@angular/core\";\nimport {CommonModule} from \"@angular/common\";\nimport {FormsModule, ReactiveFormsModule} from \"@angular/forms\";\nimport {RouterModule, Routes} from \"@angular/router\";\nimport {ClarityModule} from \"@clr/angular\";\nimport {GeneralSettingsModule} from \"@component/general-settings/general-settings.module\";\nimport {DiskmgmtCommonModule} from \"@component/diskmgmt/diskmgmt-common.module\";\nimport {NgDragDropModule} from \"ng-drag-drop\";\nimport {VsanCommonModule} from \"app/vsan/common/vsan-common.module\";\nimport {FlowWizardModule} from \"@component/wizard/flow-wizard.module\";\nimport {WizardSharedPagesModule} from \"@component/wizard/shared-pages/wizard-shared-pages.module\";\nimport {ConfigureHciClusterWizard} from \"./configure-hci-cluster-wizard.component\";\nimport {HciClusterService} from \"@generated/hci-cluster-service\";\nimport {ExistingDvpgSelectorDialogComponent} from \"./component/existing-dvpg-selector-dialog.component\";\nimport {ExistingDvsSelectorDialogComponent} from \"./component/existing-dvs-selector-dialog.component\";\nimport {AdvancedOptionsPageComponent} from \"./view/advanced-options-page.component\";\nimport {Ipv4Settings} from \"./component/ipv4-settings.components\";\nimport {Ipv6Settings} from \"./component/ipv6-settings.component\";\nimport {NetworkingSettingsComponent} from \"./component/networking-settings.component\";\nimport {HciClaimDisksPage} from \"./view/claim-disks-page.component\";\nimport {DistributedSwitchesPageComponent} from \"./view/distributed-switches-page.component\";\nimport {VmotionTrafficPageComponent} from \"./view/vmotion-traffic-page.component\";\nimport {DistributedSwitchesPageValidator} from \"./view/distributed-switches-page.validator\";\nimport {ProxySettingsPageComponent} from \"./view/proxy-settings-page.component\";\nimport {HciClusterReadyToCompletePageComponent} from \"./view/hci-cluster-ready-to-complete-page.component\";\nimport {StorageTrafficPageComponent} from \"./view/storage-traffic-page.component\";\nimport {SupportInsightPageComponent} from \"./view/support-insight-page.component\";\nimport {SupportInsightConfigurationService} from \"./service/support-insight-configuration.service\";\nimport {ProxySettingsModule} from \"@component/proxy-settings/proxy-settings.module\";\nimport {IpParserService} from \"@service/ip-parser.service\";\nimport {SpaceEfficiencyService} from \"@service/space-efficiency-service\";\nimport {FaultDomainValidationService} from \"@service/fault-domain-validation.service\";\nimport {ConfigureHciService} from \"./service/configure-hci.service\";\n\nconst configureHciWizardRoutes: Routes = [\n   {\n      path: \"\",\n      component: ConfigureHciClusterWizard,\n   },\n   {\n      path: \"existingDvpgSelector\",\n      component: ExistingDvpgSelectorDialogComponent,\n   },\n   {\n      path: \"existingDvsSelector\",\n      component: ExistingDvsSelectorDialogComponent,\n   },\n];\n\n@NgModule({\n   imports: [\n      CommonModule,\n      FormsModule,\n      ReactiveFormsModule,\n      ClarityModule,\n      NgDragDropModule,\n      VsanCommonModule,\n      FlowWizardModule,\n      GeneralSettingsModule,\n      DiskmgmtCommonModule,\n      WizardSharedPagesModule,\n      ProxySettingsModule,\n      RouterModule.forChild(configureHciWizardRoutes),\n   ],\n   declarations: [\n      ConfigureHciClusterWizard,\n      ExistingDvpgSelectorDialogComponent,\n      ExistingDvsSelectorDialogComponent,\n      AdvancedOptionsPageComponent,\n      Ipv4Settings,\n      Ipv6Settings,\n      NetworkingSettingsComponent,\n      HciClaimDisksPage,\n      DistributedSwitchesPageComponent,\n      VmotionTrafficPageComponent,\n      ProxySettingsPageComponent,\n      HciClusterReadyToCompletePageComponent,\n      StorageTrafficPageComponent,\n      SupportInsightPageComponent,\n   ],\n   entryComponents: [\n      AdvancedOptionsPageComponent,\n      HciClaimDisksPage,\n      DistributedSwitchesPageComponent,\n      VmotionTrafficPageComponent,\n      ProxySettingsPageComponent,\n      HciClusterReadyToCompletePageComponent,\n      StorageTrafficPageComponent,\n      SupportInsightPageComponent,\n   ],\n   providers: [\n      IpParserService,\n      HciClusterService,\n      DistributedSwitchesPageValidator,\n      ConfigureHciService,\n      SupportInsightConfigurationService,\n      SpaceEfficiencyService,\n      FaultDomainValidationService,\n   ],\n})\nexport class ConfigureHciClusterWizardModule {\n}\n","/* Copyright 2018-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {AfterViewInit, Component, OnInit, ViewChild} from \"@angular/core\";\nimport {InputProperty, OutputProperty, WizardPage} from \"@component/wizard/flow-metadata\";\nimport {OnValidate, PageControls} from \"@component/wizard/flow-wizard.component\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {ConfigureWizardData} from \"@generated/configure-wizard-data\";\nimport {ExternalProxySettingsConfig} from \"@generated/external-proxy-settings-config\";\nimport {ProxyInputsComponent, ProxySetting} from \"@component/proxy-settings/proxy-inputs.component\";\nimport {ReferenceWatcher} from \"@util/reference-watcher\";\n\n@WizardPage(\n      VsanUiUtils.getString(\"vsan.cluster.hci.configureHciCluster.dialog.vcproxy.tab.title\"),\n)\n@Component({\n   templateUrl: \"proxy-settings-page.html\",\n   styleUrls: [\"proxy-settings-page.scss\"],\n   providers: [ReferenceWatcher],\n})\nexport class ProxySettingsPageComponent implements AfterViewInit, OnValidate {\n   private static readonly HTTP_PREFIX: string = \"http://\";\n   private static readonly HTTPS_PREFIX: string = \"https://\";\n\n   @ViewChild(ProxyInputsComponent)\n   proxyInputs: ProxyInputsComponent;\n\n   @InputProperty()\n   @OutputProperty()\n   configureWizardData: ConfigureWizardData;\n\n   @InputProperty()\n   pageControls: PageControls;\n\n   enableProxy: boolean;\n\n   constructor(private refWatcher: ReferenceWatcher) {\n   }\n\n   ngAfterViewInit(): void {\n      // Invalidate the page whenever there is a change in the inner form.\n      this.refWatcher.watchSubscriptionRef(\n            this.proxyInputs.proxyForm.valueChanges.subscribe(this.pageControls.rebuildToc));\n   }\n\n   validate(): string[] {\n      this.pageControls.clearValidationErrors();\n      if (this.proxyInputs && this.proxyInputs.proxyForm && this.proxyInputs.proxyForm.invalid) {\n         return [VsanUiUtils.getString(\"vsan.cluster.hci.configureHciCluster.wizard.networking.notAcceptableErrors\")];\n      }\n      // Populate the spec only when inner form validation is passed\n      this.populateSpec();\n   }\n\n   /**\n    * the vAPI need a valid URL for the hostname, so we must check the protocol here\n    */\n   private resolveProxyUrl = (hostName: string): string => {\n      if (!hostName.startsWith(ProxySettingsPageComponent.HTTP_PREFIX)\n            && !hostName.startsWith(ProxySettingsPageComponent.HTTPS_PREFIX)) {\n         return ProxySettingsPageComponent.HTTPS_PREFIX + hostName;\n      }\n      return hostName;\n   };\n\n   private populateSpec(): void {\n      this.configureWizardData.proxySettingsConfig = ExternalProxySettingsConfig.Factory.create(\n            false, null, null, null, null, true);\n      const proxySettings: ProxySetting = this.proxyInputs.value();\n      if (proxySettings && proxySettings.enableProxy) {\n         this.configureWizardData.proxySettingsConfig.hostName = this.resolveProxyUrl(proxySettings.hostname);\n         this.configureWizardData.proxySettingsConfig.port = proxySettings.port;\n         this.configureWizardData.proxySettingsConfig.userName = proxySettings.username;\n         this.configureWizardData.proxySettingsConfig.password = proxySettings.password;\n      }\n   }\n}","<vsan-networking-settings [pageControls]=\"pageControls\"\n                          [hosts]=\"hosts\"\n                          [dsName]=\"storageDvsName\"\n                          [dvpg]=\"storageDvpg\"\n                          [service]=\"currentService\"\n                          [vlanId]=\"vlan\"\n                          [vlanType]=\"vlanType\"\n                          [isExtend]=\"configureWizardData.isExtend\"\n                          [isDefaultGatewaySupported]=\"clusterCapabilityData.isDefaultGatewaySupported\">\n</vsan-networking-settings>","/* Copyright 2019-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {NgModule} from \"@angular/core\";\nimport {CommonModule} from \"@angular/common\";\nimport {FormsModule} from \"@angular/forms\";\nimport {ClarityModule} from \"@clr/angular\";\nimport {ValidationModule} from \"@component/validation/validation.module\";\nimport {CommonPipeModule} from \"@pipe/common-pipe.module\";\nimport {GeneralSettingsComponent} from \"@component/general-settings/general-settings.component\";\nimport {VsanGeneralConfigService} from \"@component/general-settings/vsan-general-config.service\";\nimport {RekeyIntervalComponent} from \"@component/general-settings/utils/rekey-interval.component\";\nimport {CommonDirectiveModule} from \"@directive/common-directive.module\";\n\n@NgModule({\n   imports: [\n      CommonModule,\n      FormsModule,\n      ClarityModule,\n      ValidationModule,\n      CommonPipeModule,\n      CommonDirectiveModule,\n   ],\n   declarations: [\n      GeneralSettingsComponent,\n      RekeyIntervalComponent,\n   ],\n   exports: [\n      GeneralSettingsComponent,\n   ],\n   providers: [\n      VsanGeneralConfigService,\n   ],\n})\nexport class GeneralSettingsModule {\n}\n","/* Copyright 2020-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {VsanClusterType} from \"@generated/vsan-cluster-type\";\n\nexport class VsanRdmaUtil {\n\n   static canEnableRdma(hostHardwareSupportRdma: boolean, isLargeScaleSupportEnabled: boolean,\n         configType: VsanClusterType, isRdmaStretchedClusterSupported: boolean): boolean {\n      return hostHardwareSupportRdma && this.isClusterTypeSupported(configType, isRdmaStretchedClusterSupported)\n            && !isLargeScaleSupportEnabled;\n   }\n\n   static getRdmaDisabledMessage(hostHardwareSupportRdma: boolean, isLargeScaleSupportEnabled: boolean,\n         configType: VsanClusterType, isRdmaStretchedClusterSupported: boolean): string {\n      let errorMessage: string = !hostHardwareSupportRdma\n            ? VsanUiUtils.getString(\"vsan.services.network.rdmaSupport.notSupportedByAnyHostsHardware\")\n            : \"\";\n\n      if (!this.isClusterTypeSupported(configType, isRdmaStretchedClusterSupported)) {\n         errorMessage = errorMessage.concat(\" \",\n               VsanUiUtils.getString(\"vsan.services.network.rdmaSupport.notSupportedStretchedCluster\")).trim();\n      }\n\n      if (isLargeScaleSupportEnabled) {\n         errorMessage = errorMessage.concat(\" \",\n               VsanUiUtils.getString(\"vsan.services.network.rdmaSupport.notSupportedLargeScaleCluster\")).trim();\n      }\n\n      return errorMessage;\n   }\n\n   private static isClusterTypeSupported(configType: VsanClusterType,\n         isRdmaStretchedClusterSupported: boolean): boolean {\n      return !this.isStretchedOrTwoNodeCluster(configType) || isRdmaStretchedClusterSupported;\n   }\n\n   private static isStretchedOrTwoNodeCluster(configType: VsanClusterType): boolean {\n      return configType === VsanClusterType.STRETCHED_CLUSTER\n            || configType === VsanClusterType.TWO_HOST_VSAN_CLUSTER;\n   }\n}\n","/* Copyright 2017-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, OnInit, ViewChild} from \"@angular/core\";\nimport {InputProperty, OutputProperty, WizardPage} from \"@component/wizard/flow-metadata\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {OnValidate, PageControls} from \"@component/wizard/flow-wizard.component\";\nimport {NetworkingSettingsComponent} from \"../component/networking-settings.component\";\nimport {ClusterConfigData} from \"@generated/cluster-config-data\";\nimport {Service} from \"@generated/service\";\nimport {ConfigureWizardData} from \"@generated/configure-wizard-data\";\nimport {DvpgData} from \"@generated/dvpg-data\";\nimport {VlanType} from \"@generated/vlan-type\";\nimport {HciClusterService} from \"@generated/hci-cluster-service\";\nimport {VlanData} from \"@generated/vlan-data\";\nimport {VsanCapabilityData} from \"@generated/vsan-capability-data\";\nimport {InventoryNode} from \"@generated/inventory-node\";\n\n@WizardPage(\n      VsanUiUtils.getString(\"vsan.cluster.hci.configureHciCluster.wizard.vmotionTrafficPage.title\"),\n      VsanUiUtils.getString(\"vsan.cluster.hci.configureHciCluster.wizard.vmotionTrafficPage.description\"),\n)\n@Component({\n   templateUrl: \"vmotion-traffic-page.html\",\n})\nexport class VmotionTrafficPageComponent implements OnInit, OnValidate {\n\n   @ViewChild(NetworkingSettingsComponent)\n   networkingSettings: NetworkingSettingsComponent;\n\n   @InputProperty()\n   pageControls: PageControls;\n\n   @InputProperty(\"notConfiguredClusterHosts\")\n   hosts: InventoryNode[] = [];\n\n   @InputProperty()\n   clusterConfigData: ClusterConfigData;\n\n   @InputProperty(InputProperty.required(false))\n   vmotionDvsName: string;\n\n   @InputProperty()\n   configureWizardData: ConfigureWizardData;\n\n   @InputProperty(InputProperty.required(false))\n   vmotionDvpg: DvpgData;\n\n   @InputProperty()\n   clusterCapabilityData: VsanCapabilityData;\n\n   currentService: Service = Service.VMOTION;\n\n   vlan: string;\n\n   vlanType: VlanType;\n\n   constructor(private hciService: HciClusterService) {\n   }\n\n   @OutputProperty()\n   vmotionTrafficForm: any;\n\n   ngOnInit(): void {\n      if (this.configureWizardData.isExtend) {\n         this.vmotionDvsName =\n               this.clusterConfigData.basicConfig.dvsDataByService[Service.VMOTION].dvsName;\n         this.vlan =\n               this.clusterConfigData.basicConfig.dvsDataByService[Service.VMOTION].vlan;\n         this.vlanType =\n               this.clusterConfigData.basicConfig.dvsDataByService[Service.VMOTION].vlanType;\n      }\n\n      if (this.vmotionDvpg && this.vmotionDvpg.existingDvpg) {\n         this.hciService.getDvpgVlan(this.vmotionDvpg.existingDvpg).then((vlanData: VlanData) => {\n            if (vlanData) {\n               this.vlanType = vlanData.vlanType;\n               this.vlan = vlanData.vlan;\n            }\n         });\n      }\n   }\n\n   validate(): string[] {\n      const result: string[] = this.networkingSettings.validate();\n      if (!result) {\n         // remove previous config\n         if (this.clusterConfigData.netServiceConfigs) {\n            this.clusterConfigData.netServiceConfigs =\n                  this.clusterConfigData.netServiceConfigs.filter((config) => config.service !== Service.VMOTION);\n         } else {\n            this.clusterConfigData.netServiceConfigs = [];\n         }\n\n         // fill cluster config with vMotion configuration\n         this.clusterConfigData.netServiceConfigs.push(this.networkingSettings.getNetConfig(Service.VMOTION));\n      }\n\n      return result;\n   }\n}\n","/* Copyright 2017-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, EventEmitter, Input, OnInit, Output} from \"@angular/core\";\nimport {AbstractControl, FormArray, FormBuilder, FormControl, FormGroup, Validators} from \"@angular/forms\";\nimport {IpParserService} from \"@service/ip-parser.service\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {PageControls} from \"@component/wizard/flow-wizard.component\";\nimport {NetworkingSettingsComponent} from \"./networking-settings.component\";\nimport {NetServiceConfig} from \"@generated/net-service-config\";\nimport {IpAddressesRequestSpec} from \"@generated/ip-addresses-request-spec\";\nimport {NetworkService} from \"@generated/network-service\";\nimport IpType = NetServiceConfig.IpType;\nimport {Icon} from \"@util/icon\";\nimport {ReactiveFormUtil} from \"@util/reactive-form-util\";\nimport {InventoryNode} from \"@generated/inventory-node\";\n\n@Component({\n   templateUrl: \"ipv4-settings.html\",\n   selector: \"vsan-ipv4-settings\",\n   styleUrls: [\"ipv4-settings.scss\"],\n})\nexport class Ipv4Settings implements OnInit {\n\n   readonly IpType: typeof IpType = IpType;\n   readonly Icon: typeof Icon = Icon;\n\n   private static readonly IPV4_CONTROL_NAME: string = \"ipv4\";\n   private static readonly SUBNET_MASK_CONTROL_NAME: string = \"subnetMask\";\n   private static readonly GATEWAY_CONTROL_NAME: string = \"gateway\";\n   private static readonly NAME_CONTROL_NAME: string = \"name\";\n   private static readonly DEFAULT_IPV4_IP_TYPE: IpType = IpType.DHCP;\n   private static readonly IP_TYPE_CONTROL_PATH: string = ReactiveFormUtil.getFormControlPath(\n         NetworkingSettingsComponent.IPV4_SETTINGS_CONTROL_NAME,\n         NetworkingSettingsComponent.IP_TYPE_CONTROL_NAME);\n   private static readonly HOST_SETTINGS_GROUP_PATH: string = ReactiveFormUtil.getFormControlPath(\n         NetworkingSettingsComponent.IPV4_SETTINGS_CONTROL_NAME,\n         NetworkingSettingsComponent.HOST_SETTINGS_CONTROL_NAME);\n   private static readonly IPV4_VALIDATION: string = \"validateIp\";\n   private static readonly DUPLICATE_IPS_VALIDATION: string = \"validateDuplicateIps\";\n   private static readonly DIFFERENT_SUBNET_VALIDATION: string = \"validateDifferentSubnet\";\n   private static readonly SUBNET_MASK_VALIDATION: string = \"validateSubnetMask\";\n   private static readonly FIRST_ROW_INDEX: string = \"0\";\n\n   @Input()\n   private pageControls: PageControls;\n\n   @Input()\n   hosts: InventoryNode[];\n\n   @Input()\n   private form: FormGroup;\n\n   @Input()\n   showDefaultGateway: boolean;\n\n   @Input()\n   ipSettingsInfoMessage: string;\n\n   @Output()\n   private onFormChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n   @Output()\n   private ipAddressesRequestSpec: IpAddressesRequestSpec;\n\n   requestingData: boolean;\n\n   constructor(private fb: FormBuilder,\n         private ipService: IpParserService,\n         private networkService: NetworkService) {\n   }\n\n   ngOnInit(): void {\n      this.buildForm();\n      this.registerFormControlChangeHandlers();\n   }\n\n   private buildForm = (): void => {\n      const hostFormGroups: FormGroup[] = this.hosts.map((host) =>\n         this.fb.group({\n            [Ipv4Settings.NAME_CONTROL_NAME]:\n                  [host.name, null],\n            [Ipv4Settings.IPV4_CONTROL_NAME]:\n                  [null, [Validators.required, this.validateIpv4]],\n            [Ipv4Settings.SUBNET_MASK_CONTROL_NAME]:\n                  [null, [Validators.required, this.validateSubnetMask]],\n            [Ipv4Settings.GATEWAY_CONTROL_NAME]:\n                  [null, [this.validateDefaultGateway]],\n         }, {validator: this.validateDifferentSubnetError}));\n      const hostFormArray: FormArray = this.fb.array(hostFormGroups, this.validateDuplicateIps);\n\n      const ipv4Settings: FormGroup = this.fb.group({\n         [NetworkingSettingsComponent.IP_TYPE_CONTROL_NAME]: [Ipv4Settings.DEFAULT_IPV4_IP_TYPE, [Validators.required]],\n         [NetworkingSettingsComponent.HOST_SETTINGS_CONTROL_NAME]: hostFormArray,\n      });\n\n      this.form.addControl(NetworkingSettingsComponent.IPV4_SETTINGS_CONTROL_NAME, ipv4Settings);\n      this.toggleHostSettingsAvailability(this.ipType.value);\n   };\n\n   registerFormControlChangeHandlers = (): void => {\n      this.ipType.valueChanges.forEach(this.toggleHostSettingsAvailability);\n\n      this.hostSettings.controls.forEach((formGroup: FormGroup) => {\n         for (const controlName in formGroup.controls) {\n            const control: FormControl = formGroup.controls[controlName] as FormControl;\n            control.statusChanges.forEach(() => {\n               this.pageControls.rebuildToc();\n            });\n         }\n      });\n   };\n\n   private toggleHostSettingsAvailability = (ipType: IpType): void => {\n      switch (ipType) {\n         case IpType.DHCP:\n            this.hostSettings.disable();\n            break;\n         case IpType.STATIC:\n            this.hostSettings.enable();\n            break;\n      }\n\n      this.onFormChange.emit(true);\n   };\n\n   /** Form controls getters */\n\n   get ipv4Settings(): FormGroup {\n      return this.form.get(NetworkingSettingsComponent.IPV4_SETTINGS_CONTROL_NAME) as FormGroup;\n   }\n\n   get ipType(): FormControl {\n      return this.form.get(Ipv4Settings.IP_TYPE_CONTROL_PATH) as FormControl;\n   }\n\n   get hostSettings(): FormArray {\n      return this.form.get(Ipv4Settings.HOST_SETTINGS_GROUP_PATH) as FormArray;\n   }\n\n   get dhcpOnIpv4(): boolean {\n      return this.ipType.value === IpType.DHCP;\n   }\n\n   getIpv4Control = (idx: string): FormControl => {\n      const controlPath: string = ReactiveFormUtil.getFormControlPath(\n            Ipv4Settings.HOST_SETTINGS_GROUP_PATH,\n            idx,\n            Ipv4Settings.IPV4_CONTROL_NAME);\n      return this.form.get(controlPath) as FormControl;\n   };\n\n   getSubnetMaskControl = (idx: string): FormControl => {\n      const controlPath: string = ReactiveFormUtil.getFormControlPath(\n            Ipv4Settings.HOST_SETTINGS_GROUP_PATH,\n            idx,\n            Ipv4Settings.SUBNET_MASK_CONTROL_NAME);\n      return this.form.get(controlPath) as FormControl;\n   };\n\n   getGatewayControl = (idx: string): FormControl => {\n      const controlPath: string = ReactiveFormUtil.getFormControlPath(\n            Ipv4Settings.HOST_SETTINGS_GROUP_PATH,\n            idx,\n            Ipv4Settings.GATEWAY_CONTROL_NAME);\n      return this.form.get(controlPath) as FormControl;\n   };\n\n   private hasDifferentSubnet = (hostControls: FormGroup): boolean => {\n      const ipv4Control: AbstractControl = hostControls.get(Ipv4Settings.IPV4_CONTROL_NAME);\n      const subnetMaskControl: AbstractControl = hostControls.get(Ipv4Settings.SUBNET_MASK_CONTROL_NAME);\n      const gatewayControl: AbstractControl = hostControls.get(Ipv4Settings.GATEWAY_CONTROL_NAME);\n\n      if (this.isRowFilled(ipv4Control, gatewayControl, subnetMaskControl)) {\n         return !this.ipService.isSameIpv4Subnet(ipv4Control.value.trim(),\n               gatewayControl.value.trim(), subnetMaskControl.value.trim());\n      }\n\n      return false;\n   };\n\n   invalid = (formControl: AbstractControl): boolean => {\n      return this.hostSettings.enabled && formControl.invalid && formControl.touched;\n   };\n\n   private hasSubnetMismatch = (formControl: AbstractControl): boolean => {\n      return formControl.parent.hasError(Ipv4Settings.DIFFERENT_SUBNET_VALIDATION);\n   };\n\n   invalidIpv4Control = (idx: string): boolean => {\n      const control: FormControl = this.getIpv4Control(idx);\n      return this.invalid(control) || this.hasSubnetMismatch(control) || this.hasDuplicateIp(control);\n   };\n\n   invalidSubnetMaskControl = (idx: string): boolean => {\n      const control: FormControl = this.getSubnetMaskControl(idx);\n      return this.invalid(control) || this.hasSubnetMismatch(control);\n   };\n\n   invalidGatewayControl = (idx: string): boolean => {\n      const control: FormControl = this.getGatewayControl(idx);\n      return this.invalid(control) || this.hasSubnetMismatch(control);\n   };\n\n   validAutofillControl = (idx: string): boolean => {\n      const ipv4: FormControl = this.getIpv4Control(idx);\n      const subnet: FormControl = this.getSubnetMaskControl(idx);\n      const gateway: FormControl = this.getGatewayControl(idx);\n      if (this.isRowFilled(ipv4, gateway, subnet)) {\n         return this.ipService.isSameIpv4Subnet(ipv4.value.trim(), gateway.value.trim(), subnet.value.trim());\n      } else if (!gateway.value) {\n         return ipv4.dirty && subnet.dirty && ipv4.value && subnet.value && ipv4.valid && subnet.valid;\n      }\n\n      return false;\n   };\n\n   private hasDuplicateIp = (formControl: AbstractControl): boolean => {\n      const hostSettings: FormArray = formControl.parent.parent as FormArray;\n      hostSettings.updateValueAndValidity();\n      if (hostSettings.hasError(Ipv4Settings.DUPLICATE_IPS_VALIDATION)) {\n         const duplicateIps: string[] =\n               hostSettings.getError(Ipv4Settings.DUPLICATE_IPS_VALIDATION).duplicateIps;\n         if (duplicateIps.indexOf(formControl.value) !== -1) {\n            return true;\n         }\n      }\n\n      return false;\n   };\n\n   private getDuplicateIps = (hostSettings: FormArray): string[] => {\n      const formGroups: FormGroup[] = hostSettings.controls as FormGroup[];\n\n      const ips: any = {};\n      const result: string[] = [];\n      formGroups.forEach((formGroup: FormGroup) => {\n         const ipv4: FormControl = formGroup.get(Ipv4Settings.IPV4_CONTROL_NAME) as FormControl;\n         const ip: string = ipv4.value;\n         if (!ipv4.invalid && ipv4.touched && ipv4.dirty) {\n            if (ips.hasOwnProperty(ip)) {\n               result.push(ip);\n            } else {\n               ips[ip] = true;\n            }\n         }\n      });\n\n      return result;\n   };\n\n   getIpv4ControlErrors = (idx: string): string[] => {\n      const formControl: FormControl = this.getIpv4Control(idx);\n\n      const result: string[] = [];\n      this.evaluateIpv4Validity(formControl, result);\n      this.evaluateDuplicateIpv4Validity(formControl, result);\n      const gatewayControl: FormControl = this.getGatewayControl(idx);\n      if (gatewayControl.value) {\n         this.evaluateDifferentSubnetValidity(formControl, result);\n      }\n\n      return result;\n   };\n\n   getSubnetMaskControlErrors = (idx: string): string[] => {\n      const formControl: FormControl = this.getSubnetMaskControl(idx);\n\n      const result: string[] = [];\n      this.evaluateSubnetMaskValidity(formControl, result);\n      const gatewayControl: FormControl = this.getGatewayControl(idx);\n      if (gatewayControl.value) {\n         this.evaluateDifferentSubnetValidity(formControl, result);\n      }\n\n      return result;\n   };\n\n   getGatewayControlErrors = (idx: string): string[] => {\n      const formControl: FormControl = this.getGatewayControl(idx);\n\n      const result: string[] = [];\n      if (formControl.value) {\n         this.evaluateGatewayValidity(formControl, result);\n         this.evaluateDifferentSubnetValidity(formControl, result);\n      }\n\n      return result;\n   };\n\n   autoFillAddresses = (): void => {\n      this.requestingData = true;\n      const ipAddress: FormControl = this.getIpv4Control(Ipv4Settings.FIRST_ROW_INDEX);\n      const subnetMask: FormControl = this.getSubnetMaskControl(Ipv4Settings.FIRST_ROW_INDEX);\n\n      const ipv4RequestSpec: IpAddressesRequestSpec = IpAddressesRequestSpec.Factory.create(\n            ipAddress.value.trim(), subnetMask.value.trim(), this.hostSettings.controls.length);\n\n      this.networkService.getConsequentHostAddresses(ipv4RequestSpec)\n            .then(this.fillSubsequentAddresses)\n            .catch(() => this.requestingData = false);\n   };\n\n   private evaluateIpv4Validity = (formControl: FormControl, errors: string[]): void => {\n      if (formControl.hasError(Ipv4Settings.IPV4_VALIDATION)) {\n         errors.push(\n               VsanUiUtils.getString(\n                     \"vsan.cluster.hci.configureHciCluster.wizard.networking.ipv4Tab.ipv4.wrongInput\"));\n      }\n   };\n\n   private evaluateSubnetMaskValidity = (formControl: FormControl, errors: string[]): void => {\n      if (formControl.hasError(Ipv4Settings.SUBNET_MASK_VALIDATION)) {\n         errors.push(\n               VsanUiUtils.getString(\n                     \"vsan.cluster.hci.configureHciCluster.wizard.networking.ipv4Tab.subnetMask.wrongInput\"));\n      }\n   };\n\n   private evaluateDifferentSubnetValidity = (formControl: FormControl, errors: string[]): void => {\n      if (formControl.parent.hasError(Ipv4Settings.DIFFERENT_SUBNET_VALIDATION)) {\n         errors.push(\n               VsanUiUtils.getString(\n                     \"vsan.cluster.hci.configureHciCluster.wizard.networking.ipv4Tab.differentSubnetError\"));\n      }\n   };\n\n   private evaluateDuplicateIpv4Validity = (formControl: FormControl, errors: string[]): void => {\n      if (this.hasDuplicateIp(formControl)) {\n         errors.push(\n               VsanUiUtils.getString(\n                     \"vsan.cluster.hci.configureHciCluster.wizard.networking.ipv4Tab.duplicateIpsError\"));\n      }\n   };\n\n   private evaluateGatewayValidity = (formControl: FormControl, errors: string[]): void => {\n      if (formControl.hasError(Ipv4Settings.IPV4_VALIDATION)) {\n         errors.push(\n               VsanUiUtils.getString(\n                     \"vsan.cluster.hci.configureHciCluster.wizard.networking.ipv4Tab.gateway.wrongInput\"));\n      }\n   };\n\n   /** Form control validators */\n\n   private validateIpv4 = (c: AbstractControl): { [key: string]: any } | null => {\n      const ip: string = String(c.value).trim();\n      return this.ipService.isIpv4AddressValid(ip) ? null : {\n         [Ipv4Settings.IPV4_VALIDATION]: {\n            valid: false\n         }\n      };\n   };\n\n   private validateDefaultGateway = (c: AbstractControl): { [key: string]: any } | null => {\n      return (c && c.value) ? this.validateIpv4(c) : null;\n   };\n\n   private validateSubnetMask = (c: AbstractControl): { [key: string]: any } | null => {\n      const subnetMask: string = String(c.value).trim();\n      return this.ipService.isSubnetMaskValid(subnetMask) ? null : {\n         [Ipv4Settings.SUBNET_MASK_VALIDATION]: {valid: false},\n      };\n   };\n\n   private validateDuplicateIps = (ipv4FormArray: FormArray): { [key: string]: any } | null => {\n      const duplicateIps: string[] = this.getDuplicateIps(ipv4FormArray);\n      return duplicateIps.length === 0 ? null : {\n         [Ipv4Settings.DUPLICATE_IPS_VALIDATION]: {\n            valid: false,\n            duplicateIps: duplicateIps\n         }\n      };\n   };\n\n   private validateDifferentSubnetError = (formGroup: any): { [key: string]: any } | null => {\n      return !this.hasDifferentSubnet(formGroup) ? null : {\n         [Ipv4Settings.DIFFERENT_SUBNET_VALIDATION]: {valid: false},\n      };\n   };\n\n   private isRowFilled(ipv4Control: AbstractControl, gatewayControl: AbstractControl,\n         subnetMaskControl: AbstractControl): boolean {\n      return ipv4Control.dirty && gatewayControl.dirty && subnetMaskControl.dirty &&\n            ipv4Control.value && gatewayControl.value && subnetMaskControl.value &&\n            ipv4Control.valid && gatewayControl.valid && subnetMaskControl.valid;\n   }\n\n   private fillSubsequentAddresses = (result: string[]): void => {\n      const defaultGateway: FormControl = this.getGatewayControl(Ipv4Settings.FIRST_ROW_INDEX);\n      const subnetMask: FormControl = this.getSubnetMaskControl(Ipv4Settings.FIRST_ROW_INDEX);\n\n      for (let index: number = 1; index < this.hostSettings.controls.length; index++) {\n         const formGroup: FormGroup = this.hostSettings.controls[index] as FormGroup;\n         for (const controlName in formGroup.controls) {\n            const control: FormControl = formGroup.controls[controlName] as FormControl;\n            switch (controlName) {\n               case Ipv4Settings.IPV4_CONTROL_NAME:\n                  control.setValue(result[index - 1]);\n                  break;\n               case Ipv4Settings.SUBNET_MASK_CONTROL_NAME:\n                  control.setValue(subnetMask.value);\n                  break;\n               case Ipv4Settings.GATEWAY_CONTROL_NAME:\n                  control.setValue(defaultGateway.value);\n                  break;\n            }\n         }\n      }\n\n      this.requestingData = false;\n      this.pageControls.rebuildToc();\n   };\n}","/* Copyright 2017-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, OnInit} from \"@angular/core\";\nimport {PageSet} from \"@component/wizard/flow-wizard.component\";\nimport {ClaimDisksWitnessHostPage} from \"@component/wizard/shared-pages/claim-disks-witness-host-page.component\";\nimport {FaultDomainsPageComponent} from \"@component/wizard/shared-pages/fault-domains-page.component\";\nimport {SingleSiteFaultDomainsPage} from \"@component/wizard/shared-pages/single-site-fault-domains-page.component\";\nimport {WitnessHostPageComponent} from \"@component/wizard/shared-pages/witness-host-page.component\";\nimport {ClusterConfigData} from \"@generated/cluster-config-data\";\nimport {ConfigureClusterService} from \"@generated/configure-cluster-service\";\nimport {ConfigureStretchedClusterService} from \"@generated/configure-stretched-cluster-service\";\nimport {ConfigureWizardData} from \"@generated/configure-wizard-data\";\nimport {EncryptionPropertyProvider} from \"@generated/encryption-property-provider\";\nimport {HciClusterService} from \"@generated/hci-cluster-service\";\nimport {VsanCapabilityData} from \"@generated/vsan-capability-data\";\nimport {VsanCapabilityProvider} from \"@generated/vsan-capability-provider\";\nimport {VsanClusterType} from \"@generated/vsan-cluster-type\";\nimport {VsanStretchedClusterService} from \"@generated/vsan-stretched-cluster-service\";\nimport {HciConfigureWizardContext} from \"@navigation/context/hci-configure-wizard-context\";\nimport {ManagedObject} from \"@service/managed-object\";\nimport {NetworkProxyConfig, NetworkProxyService} from \"@service/vapi/network-proxy.service\";\nimport {Logger} from \"@util/logger\";\nimport {WebPlatform} from \"@util/platform\";\nimport {VsanQuickstartUtil} from \"@util/vsan-quickstart-util\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {WitnessHostUtil} from \"@util/witness-host.util\";\nimport {ConfigureHciService} from \"./service/configure-hci.service\";\nimport {AdvancedOptionsPageComponent} from \"./view/advanced-options-page.component\";\nimport {HciClaimDisksPage} from \"./view/claim-disks-page.component\";\nimport {DistributedSwitchesPageComponent} from \"./view/distributed-switches-page.component\";\nimport {HciClusterReadyToCompletePageComponent} from \"./view/hci-cluster-ready-to-complete-page.component\";\nimport {ProxySettingsPageComponent} from \"./view/proxy-settings-page.component\";\nimport {StorageTrafficPageComponent} from \"./view/storage-traffic-page.component\";\nimport {SupportInsightPageComponent} from \"./view/support-insight-page.component\";\nimport {VmotionTrafficPageComponent} from \"./view/vmotion-traffic-page.component\";\n\n@Component({\n   selector: \"vsan-configure-hci-cluster\",\n   templateUrl: \"configure-hci-cluster-wizard.html\",\n   styleUrls: [\"configure-hci-cluster-wizard.scss\"],\n})\nexport class ConfigureHciClusterWizard implements OnInit {\n   private configureWizardData: ConfigureWizardData;\n   private clusterCapabilityData: VsanCapabilityData;\n   private vcCapabilityData: VsanCapabilityData;\n   private clusterConfigData: ClusterConfigData;\n   private httpsProxySetting: NetworkProxyConfig;\n\n   dataLoaded: boolean = false;\n\n   context: any = {};\n   services: any[] = [\n      HciClusterService,\n      ConfigureClusterService,\n      ConfigureStretchedClusterService,\n      VsanStretchedClusterService,\n      ConfigureHciService];\n   pages: PageSet[] = [];\n\n   constructor(private hciService: HciClusterService,\n         private capabilityProvider: VsanCapabilityProvider,\n         private networkProxyService: NetworkProxyService,\n         private encryptionPropertyProvider: EncryptionPropertyProvider) {\n   }\n\n   async ngOnInit(): Promise<void> {\n      const modalContext: HciConfigureWizardContext = VsanUiUtils.getModalContext();\n      this.configureWizardData = modalContext.configureWizardData;\n      const isVsanMaxSupportedOnHosts: boolean = modalContext.isVsanMaxSupportedOnHosts;\n\n      // assign a11y title here due to additional loading logic\n      WebPlatform.setAccessibilityTitle(VsanUiUtils.getString(\"vsan.cluster.hci.configureHciCluster.wizard.title\"));\n      let hasEncryptionPermissions: boolean;\n      let hasRekeyPermission: boolean;\n      [\n         hasEncryptionPermissions,\n         hasRekeyPermission,\n         this.clusterConfigData,\n         this.clusterCapabilityData,\n         this.vcCapabilityData,\n      ] = await Promise.all([\n         this.encryptionPropertyProvider.getEncryptionPermissions(ManagedObject.contextObject),\n         this.encryptionPropertyProvider.getReKeyPermissions(ManagedObject.contextObject),\n         this.hciService.getClusterConfigData(ManagedObject.contextObject),\n         this.capabilityProvider.getClusterCapabilityData(ManagedObject.contextObject),\n         this.capabilityProvider.getVcCapabilityData(ManagedObject.contextObject),\n      ]);\n      if (this.clusterConfigData !== null) {\n         // query Support Insight Proxy settings only when the following prerequisites are met:\n         //    1. encryption permissions are granted\n         //    2. vSAN is enabled\n         //    3. is in the creation cluster wizard\n         //    4. this feature is supported\n         if (hasEncryptionPermissions && this.clusterConfigData.basicConfig.vsanEnabled\n               && VsanQuickstartUtil.isHciWorkflowInProgress(this.clusterConfigData.basicConfig.hciWorkflowState)\n               && this.clusterCapabilityData.isSupportInsightSupported) {\n            await this.networkProxyService.getSettings(ManagedObject.contextObject)\n                  .then(httpsProxySetting => this.httpsProxySetting = httpsProxySetting)\n                  .catch(error => Logger.error(\"Failed to query VC proxy settings\", error));\n         }\n\n         this.context = {\n            moRef: ManagedObject.contextObject,\n            clusterRef: ManagedObject.contextObject,\n            contextClusterRef: ManagedObject.contextObject,\n            configureWizardData: this.configureWizardData,\n            clusterHosts: this.configureWizardData.hosts,\n            notConfiguredClusterHosts: this.configureWizardData.notConfiguredHosts,\n            clusterConfigData: this.clusterConfigData,\n            hasDiskGroupsOnWitness: false,\n            isVsanMaxSupportedOnHosts: isVsanMaxSupportedOnHosts,\n            // Needed for hostsClaimingData InputProperty's retrieval in claim-disks page.\n            isVsanMaxWorkflow: this.clusterConfigData.vsanConfigSpec.isVsanMaxEnabled,\n\n            // This spec is used for all vsan specific configs. All vSAN pages + Advanced options page\n            // use this spec which is copied back to the clusterConfigData in the ready to complete page.\n            // This workaround is needed in order to keep the configure vSAN and configure stretch cluster wizards\n            // separate from the configure HCI cluster wizard\n            vsanConfigSpec: this.clusterConfigData.vsanConfigSpec,\n            hciWorkflow: true,\n            vcCapabilityData: this.vcCapabilityData,\n            clusterCapabilityData: this.clusterCapabilityData,\n            encryptionPermissions: hasEncryptionPermissions,\n            rekeyPermission: hasRekeyPermission,\n         };\n\n         this.pages = this.getPages();\n      }\n      this.dataLoaded = true;\n   }\n\n   private getPages(): PageSet[] {\n      const pages: PageSet[] = [\n         new PageSet([DistributedSwitchesPageComponent],\n               () => this.configureWizardData.showDvsPage),\n         new PageSet([VmotionTrafficPageComponent],\n               () => this.configureWizardData.showVmotionTrafficPage && !this.configureWizardData.optOutOfNetworking),\n         new PageSet([StorageTrafficPageComponent],\n               () => this.configureWizardData.showVsanTrafficPage && !this.configureWizardData.optOutOfNetworking),\n         new PageSet([AdvancedOptionsPageComponent],\n               () => this.configureWizardData.showAdvancedOptionsPage),\n\n         new PageSet([HciClaimDisksPage],\n               () => this.configureWizardData.showClaimDisksPage),\n      ];\n      /* Include the Support Insight configuration page statically. E.g. we do not want it to disappear when the\n       user click the \"Hide this page\" checkbox in it.\n       1. Proxy setting information is collected\n       2. SupportInsight is supported and enabled\n       3. CEIP is not enabled.\n       */\n      if (this.httpsProxySetting\n            && !this.configureWizardData.isSupportInsightStepHidden\n            && !this.configureWizardData.ceipEnabled) {\n         pages.push(new PageSet([SupportInsightPageComponent]));\n      }\n\n      pages.push(...[\n         /* Include the proxy setting view when:\n          1. SupportInsight is supported and enabled\n          2. User hasn't checked the 'Hide support insight' checkbox\n          3. Proxy setting information is collected and proxy is not set\n         */\n         new PageSet([ProxySettingsPageComponent],\n               () => !this.configureWizardData.isSupportInsightStepHidden\n                     && !this.configureWizardData.disableSupportInsight\n                     && this.httpsProxySetting\n                     && !this.httpsProxySetting.enabled),\n         new PageSet([FaultDomainsPageComponent],\n               () => this.configureWizardData.selectedVsanClusterType === VsanClusterType.STRETCHED_CLUSTER),\n      ]);\n\n      // In extend mode the witness host is already configured, so skip related pages.\n      if (!this.configureWizardData.isExtend) {\n         pages.push(...[\n            new PageSet([WitnessHostPageComponent],\n                  () => this.configureWizardData.selectedVsanClusterType === VsanClusterType.STRETCHED_CLUSTER\n                        || this.configureWizardData.selectedVsanClusterType === VsanClusterType.TWO_HOST_VSAN_CLUSTER),\n            new PageSet([ClaimDisksWitnessHostPage], this.includeClaimDisksPage),\n         ]);\n      }\n      pages.push(...[\n         new PageSet([SingleSiteFaultDomainsPage],\n               () => this.configureWizardData.showSingleSiteFaultDomainsPage),\n         new PageSet([HciClusterReadyToCompletePageComponent]),\n      ]);\n      return pages;\n   }\n\n   private includeClaimDisksPage = (\n         hasDiskGroupsOnWitness: boolean,\n         isWitnessDeployedFromOvf: boolean,\n         isVsanMaxWorkflow: boolean): boolean => {\n      return WitnessHostUtil.isClaimDisksPageVisible(this.configureWizardData.selectedVsanClusterType,\n            hasDiskGroupsOnWitness, isWitnessDeployedFromOvf, isVsanMaxWorkflow);\n   };\n}\n","import {Service} from '@generated/service';\nimport {HostAdapter} from '@generated/host-adapter';\n\nexport interface DvsSpec {\n\n   name: string;\n   services: Service[];\n   adapters: HostAdapter[];\n   existingDvsMor: any;\n} //class DvsSpec\n\nexport module DvsSpec{\nexport class Factory {\n\n   static create = (name: string, services: Service[], adapters: HostAdapter[], existingDvsMor: any): DvsSpec => {\n      return { name: name, services: services, adapters: adapters, existingDvsMor: existingDvsMor, };\n   }\n\n\n} //class Factory\n\n} //module DvsSpec\n","/* Copyright 2017-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, OnInit} from \"@angular/core\";\nimport {AlertType} from \"@component/validation/alert-type\";\nimport {InputProperty, OutputProperty, WizardPage} from \"@component/wizard/flow-metadata\";\nimport {OnValidate, PageControls} from \"@component/wizard/flow-wizard.component\";\nimport {PageItem} from \"@component/wizard/page-item\";\nimport {ClusterConfigData} from \"@generated/cluster-config-data\";\nimport {ConfigureClusterService} from \"@generated/configure-cluster-service\";\nimport {ConfigureWizardData} from \"@generated/configure-wizard-data\";\nimport {CsdService} from \"@generated/csd-service\";\nimport {DrsAutoLevel} from \"@generated/drs-auto-level\";\nimport {EncryptionPropertyProvider} from \"@generated/encryption-property-provider\";\nimport {EvcModeConfigData} from \"@generated/evc-mode-config-data\";\nimport {EvcModeValidationResult} from \"@generated/evc-mode-validation-result\";\nimport {HciClusterService} from \"@generated/hci-cluster-service\";\nimport {HostFaultDomainData} from \"@generated/host-fault-domain-data\";\nimport {KmipClusterData} from \"@generated/kmip-cluster-data\";\nimport {LockdownMode} from \"@generated/lockdown-mode\";\nimport {Service} from \"@generated/service\";\nimport {SpaceEfficiencyConfig} from \"@generated/space-efficiency-config\";\nimport {VsanCapabilityData} from \"@generated/vsan-capability-data\";\nimport {VsanClusterType} from \"@generated/vsan-cluster-type\";\nimport {VsanConfigSpec} from \"@generated/vsan-config-spec\";\nimport {VsanRdmaService} from \"@generated/vsan-rdma-service\";\nimport {VumBaselineRecommendationType} from \"@generated/vum-baseline-recommendation-type\";\nimport {FaultDomainValidationService} from \"@service/fault-domain-validation.service\";\nimport {ManagedObject} from \"@service/managed-object\";\nimport {VsanDitUtil} from \"@util/vsan-dit-util\";\nimport {VsanRdmaUtil} from \"@util/vsan-rdma-util\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\n\n@WizardPage(\n      VsanUiUtils.getString(\"vsan.cluster.hci.configureHciCluster.wizard.advancedOptionsPage.title\"),\n      VsanUiUtils.getString(\"vsan.cluster.hci.configureHciCluster.wizard.advancedOptionsPage.description\"),\n      [ConfigureClusterService, EncryptionPropertyProvider, CsdService],\n)\n@Component({\n   templateUrl: \"advanced-options-page.html\",\n   styleUrls: [\"advanced-options-page.scss\"],\n})\nexport class AdvancedOptionsPageComponent implements OnInit, OnValidate {\n   SpaceEfficiencyConfig: typeof SpaceEfficiencyConfig = SpaceEfficiencyConfig;\n\n   AlertType: typeof AlertType = AlertType;\n\n   @InputProperty()\n   stretchClusterSupported: boolean;\n\n   @InputProperty()\n   hasSharedWitnessHost: boolean;\n\n   @InputProperty()\n   isClusterClientOrServer: boolean;\n\n   @InputProperty()\n   pageControls: PageControls;\n\n   @InputProperty()\n   kmipClusterData: KmipClusterData;\n\n   @InputProperty()\n   encryptionPermissions: boolean;\n\n   @InputProperty()\n   rekeyPermission: boolean;\n\n   @InputProperty()\n   private clusterHostFaultDomainData: HostFaultDomainData[];\n\n   @InputProperty()\n   @OutputProperty()\n   clusterConfigData: ClusterConfigData;\n\n   @InputProperty()\n   @OutputProperty()\n   configureWizardData: ConfigureWizardData;\n\n   // All vSAN specific configuration should be recorded in this parameter\n   @InputProperty()\n   @OutputProperty()\n   vsanConfigSpec: VsanConfigSpec;\n\n   @InputProperty()\n   isVsanMaxSupportedOnHosts: boolean;\n\n   @InputProperty()\n   @OutputProperty()\n   evcModeConfigData: EvcModeConfigData;\n\n   @InputProperty()\n   clusterCapabilityData: VsanCapabilityData;\n\n   @InputProperty()\n   vcCapabilityData: VsanCapabilityData;\n\n   @OutputProperty()\n   isVsanMaxWorkflow: boolean;\n\n   selectedHostFtt: string;\n   allowCreateFaultDomains: boolean = true;\n   showVsanMaxEnableOption: boolean = false;\n\n   stackBlocksExpandedState: boolean[] = Array(5).fill(false);\n   readonly HA_SETTINGS_INDEX: number = 0;\n   readonly DRS_SETTINGS_INDEX: number = 1;\n   readonly VSAN_SETTINGS_INDEX: number = 2;\n   readonly HOST_SETTINGS_INDEX: number = 3;\n   readonly EVM_SETTINGS_INDEX: number = 4;\n\n   readonly AUTOMATION_OPTS: SelectorOption[] = [\n      {\n         id: DrsAutoLevel.MANUAL,\n         label: VsanUiUtils.getString(\"vsan.cluster.configure.wizard.advancedOptions.auto.manual\"),\n      },\n      {\n         id: DrsAutoLevel.PARTIALLY_AUTOMATED,\n         label: VsanUiUtils.getString(\"vsan.cluster.configure.wizard.advancedOptions.auto.partially\"),\n      },\n      {\n         id: DrsAutoLevel.FULLY_AUTOMATED,\n         label: VsanUiUtils.getString(\"vsan.cluster.configure.wizard.advancedOptions.auto.fully\"),\n      }];\n\n   static readonly DEFAULT_MIGRATION_THRESHOLD: number = 3;\n   readonly AVAILABLE_MIGRATION_THRESHOLD: number[] = [1, 2, 3, 4, 5];\n\n   private _clusterTypes: SelectorOption[];\n\n   constructor(private hciClusterService: HciClusterService,\n         private vsanRdmaService: VsanRdmaService,\n         private faultDomainValidationService: FaultDomainValidationService) {\n   }\n\n   get availableVsanClusterTypes(): SelectorOption[] {\n      if (this._clusterTypes) {\n         return this._clusterTypes;\n      }\n\n      this._clusterTypes = [];\n      this._clusterTypes.push({\n         id: VsanClusterType.SINGLE_SITE_CLUSTER,\n         label: VsanUiUtils.getString(\"vsan.cluster.configure.wizard.configurationType.singleSite.label\"),\n      });\n\n      if (this.clusterConfigData.basicConfig.totalHosts === 2) {\n         this._clusterTypes.push({\n            id: VsanClusterType.TWO_HOST_VSAN_CLUSTER,\n            label: VsanUiUtils.getString(\"vsan.cluster.configure.wizard.configurationType.twoHosts.label\"),\n         });\n      }\n\n      if (this.stretchClusterSupported && this.clusterConfigData.basicConfig.totalHosts > 1) {\n         this._clusterTypes.push({\n            id: VsanClusterType.STRETCHED_CLUSTER,\n            label: VsanUiUtils.getString(\"vsan.cluster.configure.wizard.configurationType.stretchCluster.label\"),\n         });\n      }\n\n      return this._clusterTypes;\n   }\n\n   readonly VUM_BASELINE_PREFERENCE_TYPES: SelectorOption[] = [\n      {\n         id: VumBaselineRecommendationType.latestRelease,\n         label: VsanUiUtils.getString(\"vsan.vum.baseline.recommendation.option.latest.release.label\"),\n      },\n      {\n         id: VumBaselineRecommendationType.latestPatch,\n         label: VsanUiUtils.getString(\"vsan.vum.baseline.recommendation.option.latest.patch.label\"),\n      },\n      {\n         id: VumBaselineRecommendationType.noRecommendation,\n         label: VsanUiUtils.getString(\"vsan.vum.baseline.recommendation.option.no.recommendation.label\"),\n      },\n   ];\n\n   readonly AVAILABLE_LOCKDOWN_MODES: SelectorOption[] = [\n      {\n         id: LockdownMode.DISABLED,\n         label: VsanUiUtils.getString(\n               \"vsan.cluster.configure.wizard.advancedOptions.host.options.lockdown.mode.disabled\"),\n      },\n      {\n         id: LockdownMode.NORMAL,\n         label: VsanUiUtils.getString(\n               \"vsan.cluster.configure.wizard.advancedOptions.host.options.lockdown.mode.normal\"),\n      },\n      {\n         id: LockdownMode.STRICT,\n         label: VsanUiUtils.getString(\n               \"vsan.cluster.configure.wizard.advancedOptions.host.options.lockdown.mode.strict\"),\n      },\n   ];\n\n   availableHostFtt: number[] = [];\n   hostHardwareSupportRdma: boolean = false;\n\n   async ngOnInit(): Promise<void> {\n      if (this.evcModeConfigData.supportedIntelEvcMode\n            && this.evcModeConfigData.supportedIntelEvcMode.length > 0) {\n         this.clusterConfigData.selectedEvcMode = this.evcModeConfigData.supportedIntelEvcMode[0].id;\n      } else if (this.evcModeConfigData.supportedAmdEvcMode\n            && this.evcModeConfigData.supportedAmdEvcMode.length > 0) {\n         this.clusterConfigData.selectedEvcMode = this.evcModeConfigData.supportedAmdEvcMode[0].id;\n      }\n\n      if (!this.clusterConfigData.migrationThreshold) {\n         this.clusterConfigData.migrationThreshold = AdvancedOptionsPageComponent.DEFAULT_MIGRATION_THRESHOLD;\n      }\n\n      if (this.clusterConfigData.basicConfig.totalHosts < 2) {\n         // In case the cluster doesn't have a host, set the available ftt=1\n         this.availableHostFtt.push(1);\n      } else {\n         // Start from 1 because the minimum FTT is 1\n         for (let i: number = 1; i < this.clusterConfigData.basicConfig.totalHosts; i++) {\n            this.availableHostFtt.push(i);\n         }\n      }\n\n      if (this.isEncryptionSupported && this.kmipClusterData.availableKmipClusters &&\n            this.kmipClusterData.availableKmipClusters.length) {\n         this.vsanConfigSpec.kmipClusterId =\n               this.vsanConfigSpec.kmipClusterId || this.kmipClusterData.availableKmipClusters[0];\n      }\n\n      // There is problem with setting numbers directly in select ngModel\n      // this requires the value to be stored in a string property and\n      // on change to be moved to the real mode object\n      this.selectedHostFtt = \"\" + this.clusterConfigData.hostFTT;\n\n      // Override the largeClusterSupportEnabled value from Configure wizard data\n      // as there is a custom logic for it in HciClusterService.java\n      this.vsanConfigSpec.advancedOptions.largeClusterSupportEnabled\n            = this.configureWizardData.largeScaleClusterSupport;\n\n      // Check if vSAN Max is already enabled on the cluster\n      this.isVsanMaxWorkflow = this.vsanConfigSpec.isVsanMaxEnabled;\n\n      if (this.clusterConfigData.basicConfig.vsanEnabled) {\n         await this.getRdmaState();\n      }\n\n      if (this.isVsanMaxSupportedOnHosts\n            && this.clusterConfigData.basicConfig.vsanEnabled\n            && !this.clusterConfigData.basicConfig.isVsanMaxEnabled) {\n         this.showVsanMaxEnableOption = true;\n      }\n      this.initStackBlocksExpandedState();\n      this.validateSelection();\n   }\n\n   private initStackBlocksExpandedState(): void {\n      if (this.showVsanMaxEnableOption) {\n         // If we show the banner to enable vSAN MAX we should auto-expand the vSAN settings section,\n         // where the setting is present.\n         this.stackBlocksExpandedState[this.VSAN_SETTINGS_INDEX] = true;\n      } else if (this.clusterConfigData.basicConfig.haEnabled) {\n         this.stackBlocksExpandedState[this.HA_SETTINGS_INDEX] = true;\n      } else if (this.clusterConfigData.basicConfig.drsEnabled) {\n         this.stackBlocksExpandedState[this.DRS_SETTINGS_INDEX] = true;\n      } else if (this.clusterConfigData.basicConfig.vsanEnabled) {\n         this.stackBlocksExpandedState[this.VSAN_SETTINGS_INDEX] = true;\n      } else {\n         this.stackBlocksExpandedState[this.HOST_SETTINGS_INDEX] = true;\n      }\n   }\n\n   toggleStackBlockExpandedState(stackBlockIndex: number): boolean {\n      const newIndexState: boolean = !this.stackBlocksExpandedState[stackBlockIndex];\n      this.stackBlocksExpandedState.forEach((value, index) => {\n         this.stackBlocksExpandedState[index] = index === stackBlockIndex ? newIndexState : false;\n      });\n      return newIndexState;\n   }\n\n   get isEncryptionSupported(): boolean {\n      return this.clusterCapabilityData?.isEncryptionSupported &&\n            this.encryptionPermissions;\n   }\n\n   get isDataInTransitEncryptionSupported(): boolean {\n      return this.clusterCapabilityData?.isDataInTransitEncryptionSupported && this.rekeyPermission;\n   }\n\n   get isSpaceEfficiencySupported(): boolean {\n      return this.clusterCapabilityData?.isDeduplicationAndCompressionSupported\n            || this.clusterCapabilityData?.isCompressionOnlySupported;\n   }\n\n   onDataInTransitEncryptionChange(): void {\n      if (this.vsanConfigSpec.enableDataInTransitEncryption) {\n         this.vsanConfigSpec.rekeyInterval = VsanDitUtil.DEFAULT_DIT_REKEY_INTERVAL;\n      }\n   }\n\n   onHostFttChange(): void {\n      this.clusterConfigData.hostFTT = +this.selectedHostFtt;\n   }\n\n   validateAdvancedSettings(): string[] {\n      const validationErrors: string[] = [];\n      if (!this.clusterConfigData.basicConfig.vsanEnabled) {\n         return validationErrors;\n      }\n\n      if (this.isEncryptionSupported && this.vsanConfigSpec.enableDataAtRestEncryption\n            && !this.vsanConfigSpec.kmipClusterId) {\n         validationErrors.push(VsanUiUtils.getString(\"vsan.generalConfig.kmsNotSelected.warning\"));\n      }\n\n      switch (this.configureWizardData.selectedVsanClusterType) {\n         case VsanClusterType.SINGLE_SITE_CLUSTER:\n            if (this.allowCreateFaultDomains) {\n               validationErrors.push(...this.faultDomainValidationService.getFaultDomainValidationErrors(this.clusterHostFaultDomainData));\n            }\n            break;\n         case VsanClusterType.TWO_HOST_VSAN_CLUSTER:\n            if (this.clusterConfigData.basicConfig.totalHosts !== 2) {\n               validationErrors.push(\n                     VsanUiUtils.getString(\"vsan.generalConfig.wrongHostNumberForRobo\",\n                           this.clusterConfigData.basicConfig.totalHosts));\n            }\n            validationErrors.push(...this.faultDomainValidationService.getFaultDomainValidationErrors(this.clusterHostFaultDomainData));\n            break;\n         case VsanClusterType.STRETCHED_CLUSTER:\n            if (!this.stretchClusterSupported) {\n               validationErrors.push(VsanUiUtils.getString(\"vsan.generalConfig.stretchedClusterNotSupported\"));\n            } else if (this.clusterConfigData.basicConfig.totalHosts < 2) {\n               validationErrors.push(VsanUiUtils.getString(\"vsan.generalConfig.notEnoughHostsForStretchedCluster\"));\n               validationErrors.push(...this.faultDomainValidationService.getFaultDomainValidationErrors(this.clusterHostFaultDomainData));\n            }\n            break;\n      }\n      return validationErrors;\n   }\n\n   validate(): string[] | Promise<string[]> {\n      const advancedOptionsValidation: string[] = this.validateAdvancedSettings();\n      return advancedOptionsValidation.length > 0 ? advancedOptionsValidation : this.validateEvcMode();\n   }\n\n   vsanClusterTypeChanged(): void {\n      switch (this.configureWizardData.selectedVsanClusterType) {\n         case VsanClusterType.STRETCHED_CLUSTER:\n            this.configureWizardData.showSingleSiteFaultDomainsPage = false;\n            this.configureWizardData.enableFaultDomainForSingleSiteCluster = true;\n            this.allowCreateFaultDomains = false;\n            break;\n         case VsanClusterType.TWO_HOST_VSAN_CLUSTER:\n            this.configureWizardData.showSingleSiteFaultDomainsPage = false;\n            this.configureWizardData.enableFaultDomainForSingleSiteCluster = false;\n            this.allowCreateFaultDomains = false;\n            break;\n         case VsanClusterType.SINGLE_SITE_CLUSTER:\n            this.configureWizardData.enableFaultDomainForSingleSiteCluster = false;\n            this.configureWizardData.showSingleSiteFaultDomainsPage =\n                  this.configureWizardData.enableFaultDomainForSingleSiteCluster;\n            this.allowCreateFaultDomains = true;\n            break;\n      }\n\n      this.updateRdmaState();\n\n      this.validateSelection();\n   }\n\n   // Disable RDMA toggle when Stretched/2 node or large scale cluster is enabled\n   updateRdmaState(): void {\n      if (this.clusterCapabilityData?.isRdmaSupported && !this.canEnableRdma) {\n         this.vsanConfigSpec.enableRdma = false;\n      }\n   }\n\n   enableFaultDomainForSingleSiteClusterChanged(): void {\n      this.configureWizardData.showSingleSiteFaultDomainsPage =\n            this.configureWizardData.enableFaultDomainForSingleSiteCluster;\n      this.validateSelection();\n   }\n\n   updateVsanMaxState(): void {\n      this.clusterConfigData.basicConfig.isVsanMaxEnabled = this.isVsanMaxWorkflow;\n      this.vsanConfigSpec.isVsanMaxEnabled = this.isVsanMaxWorkflow;\n      if (this.isVsanMaxWorkflow) {\n         this.vsanConfigSpec.spaceEfficiencyConfig = SpaceEfficiencyConfig.NONE;\n      }\n   }\n\n   validateSelection(): void {\n      let disableNextButton: boolean = false;\n      this.clearPageState();\n\n      const errorMessages: string[] = this.validateAdvancedSettings();\n      if (errorMessages.length) {\n         this.pageControls.addValidationErrors(errorMessages);\n         disableNextButton = true;\n      }\n      (this.pageControls as PageItem).nextButtonIsDisabled = disableNextButton;\n   }\n\n   /**\n    * There is a bug in angular2 on <select> element with *ngFor,\n    * https://github.com/angular/angular/issues/4843\n    * To workaround this, we have to parse the string to number manually\n    */\n   parseMigrationThreshold = (): void => {\n      this.clusterConfigData.migrationThreshold = +this.clusterConfigData.migrationThreshold;\n   };\n\n   clearPageState = (): void => {\n      this.rebuildToc();\n      this.pageControls.clearValidationErrors();\n   };\n\n   // Triggered on changed value in the page\n   rebuildToc(): void {\n      this.pageControls.rebuildToc();\n   }\n\n   validateEvcMode = (): Promise<string[]> => {\n      if (!this.clusterConfigData.enableEVC) {\n         return null;\n      }\n\n      return this.hciClusterService.getEvcModeValidationResult(ManagedObject.contextObject,\n            this.clusterConfigData.selectedEvcMode)\n            .then((results: EvcModeValidationResult[]) => {\n               if (results.length) {\n                  return this.aggregateEvcModeValidationResults(results);\n               }\n            })\n            .catch((error) => {\n               return [error];\n            });\n   };\n\n   /**\n    * The evc validation results are seperated by the host.\n    * This means the error messages could be the same for all the hosts,\n    * we need to group them to avoid displaying duplicated messages.\n    *\n    * Another thing is, the host in the validation result is host id, something like 'host-15'.\n    * This is not what we wanted, we need the IP address, and it can be found in the clusterHostFaultDomainData\n    */\n   private aggregateEvcModeValidationResults = (results: EvcModeValidationResult[]): string[] => {\n      const errorMap: Map<string, string[]> = new Map();\n      results.forEach((result: EvcModeValidationResult) => {\n         const hosts: string[] = errorMap.get(result.errorMessage) || [];\n         Array.prototype.push.apply(hosts, result.hostRefs\n               .filter(host => hosts.indexOf(host.value) === -1)\n               .map((host): string => {\n                  return host.value;\n               }));\n         errorMap.set(result.errorMessage, hosts);\n      });\n\n      const errorMessages: string[] = [];\n      errorMap.forEach((val: string[], key: string): void => {\n         const hostNames: string[] = val.map((host): string => {\n            return this.clusterHostFaultDomainData\n                  .filter(domain => ManagedObject.fromUid(domain.hostUid).value === host)[0].name;\n         });\n         errorMessages.push(`${key} ${hostNames.join(\", \")}`);\n      });\n\n      return errorMessages;\n   };\n\n   private async getRdmaState(): Promise<void> {\n      // Due to some corner cases when RDMA is enabled when starting HCI configure wizard,\n      // it should be explicitly disabled.\n      this.vsanConfigSpec.enableRdma = false;\n      await this.getIsRdmaHardwareSupported();\n   }\n\n   private async getIsRdmaHardwareSupported(): Promise<void> {\n      this.pageControls.setBusyState();\n      let vSanHostAdapters: string[] = [];\n\n      // Check if there are configured dvsSpecs, because in the HCI wizard - the network settings could be skipped\n      if (this.clusterConfigData.dvsSpecs) {\n         vSanHostAdapters = this.clusterConfigData.dvsSpecs.find(\n               dvs => dvs.services.includes(Service.VSAN)).adapters.map(adapter => adapter.deviceName);\n      }\n\n      try {\n         this.hostHardwareSupportRdma = await this.vsanRdmaService.isRdmaHardwareSupported(\n               ManagedObject.contextObject, vSanHostAdapters);\n      } catch (error) {\n         this.pageControls.addValidationErrors([error]);\n      }\n\n      this.pageControls.clearBusyState();\n   }\n\n   get canEnableRdma(): boolean {\n      return VsanRdmaUtil.canEnableRdma(this.hostHardwareSupportRdma,\n            this.vsanConfigSpec.advancedOptions.largeClusterSupportEnabled,\n            this.configureWizardData.selectedVsanClusterType,\n            this.clusterCapabilityData.isRdmaStretchedClusterSupported);\n   }\n\n   get rdmaDisabledMessage(): string {\n      return VsanRdmaUtil.getRdmaDisabledMessage(this.hostHardwareSupportRdma,\n            this.vsanConfigSpec.advancedOptions.largeClusterSupportEnabled,\n            this.configureWizardData.selectedVsanClusterType,\n            this.clusterCapabilityData.isRdmaStretchedClusterSupported);\n   }\n\n   get ditUnavailableMessage(): string {\n      return VsanDitUtil.getDitUnavailableMessage(\n            this.vsanConfigSpec,\n            this.isClusterClientOrServer,\n            this.hasSharedWitnessHost,\n            this.clusterCapabilityData.isDitSharedWitnessInteroperabilitySupported);\n   }\n}\n\n/**\n * The interface to represent the object type of a HTML select option\n */\ninterface SelectorOption {\n   id: DrsAutoLevel | LockdownMode | VsanClusterType | VumBaselineRecommendationType;\n   label: string;\n}\n","/* Copyright 2020-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {VsanConfigSpec} from \"@generated/vsan-config-spec\";\n\nexport class VsanDitUtil {\n   static readonly DEFAULT_DIT_REKEY_INTERVAL: number = 24 * 60;\n\n   static getDitUnavailableMessage(vsanConfigSpec: VsanConfigSpec,\n         isClusterClientOrServer: boolean,\n         hasSharedWitnessHost: boolean,\n         isDitSharedWitnessInteroperabilitySupported: boolean): string {\n\n      if (vsanConfigSpec.autoClaimDisks) {\n         return VsanUiUtils.getString(\"vsan.dataInTransitEncryption.unavailable.autoClaimDisks\");\n      }\n\n      if (isClusterClientOrServer) {\n         return VsanUiUtils.getString(\"vsan.dataInTransitEncryption.unavailable.isServerOrClient\");\n      }\n\n      if (hasSharedWitnessHost && !isDitSharedWitnessInteroperabilitySupported) {\n         return VsanUiUtils.getString(\"vsan.dataInTransitEncryption.unavailable.hasSharedWitness\");\n      }\n\n   }\n}\n","/* Copyright 2017-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, OnInit, ViewChild} from \"@angular/core\";\nimport {InputProperty, OutputProperty, WizardPage} from \"@component/wizard/flow-metadata\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {OnValidate, PageControls} from \"@component/wizard/flow-wizard.component\";\nimport {NetworkingSettingsComponent} from \"../component/networking-settings.component\";\nimport {ClusterConfigData} from \"@generated/cluster-config-data\";\nimport {Service} from \"@generated/service\";\nimport {ConfigureWizardData} from \"@generated/configure-wizard-data\";\nimport {DvpgData} from \"@generated/dvpg-data\";\nimport {VlanType} from \"@generated/vlan-type\";\nimport {HciClusterService} from \"@generated/hci-cluster-service\";\nimport {VlanData} from \"@generated/vlan-data\";\nimport {VsanCapabilityData} from \"@generated/vsan-capability-data\";\nimport {InventoryNode} from \"@generated/inventory-node\";\n\n@WizardPage(\n      VsanUiUtils.getString(\"vsan.cluster.hci.configureHciCluster.wizard.storageTrafficPage.title\"),\n      VsanUiUtils.getString(\"vsan.cluster.hci.configureHciCluster.wizard.storageTrafficPage.description\"),\n)\n@Component({\n   templateUrl: \"storage-traffic-page.html\",\n})\nexport class StorageTrafficPageComponent implements OnInit, OnValidate {\n   @ViewChild(NetworkingSettingsComponent)\n   networkingSettings: NetworkingSettingsComponent;\n\n   @InputProperty()\n   pageControls: PageControls;\n\n   @InputProperty(\"notConfiguredClusterHosts\")\n   hosts: InventoryNode[] = [];\n\n   @InputProperty()\n   @OutputProperty()\n   clusterConfigData: ClusterConfigData;\n\n   @InputProperty(InputProperty.required(false))\n   storageDvsName: string;\n\n   @InputProperty()\n   configureWizardData: ConfigureWizardData;\n\n   @InputProperty(InputProperty.required(false))\n   storageDvpg: DvpgData;\n\n   currentService: Service = Service.VSAN;\n\n   vlan: string;\n\n   vlanType: VlanType;\n\n   constructor(private hciService: HciClusterService) {\n   }\n\n   @OutputProperty()\n   storageTrafficForm: any;\n\n   @InputProperty()\n   clusterCapabilityData: VsanCapabilityData;\n\n   ngOnInit(): void {\n      if (this.configureWizardData.isExtend) {\n         this.storageDvsName =\n               this.clusterConfigData.basicConfig.dvsDataByService[Service.VSAN].dvsName;\n         this.vlan =\n               this.clusterConfigData.basicConfig.dvsDataByService[Service.VSAN].vlan;\n         this.vlanType =\n               this.clusterConfigData.basicConfig.dvsDataByService[Service.VSAN].vlanType;\n      }\n\n      if (this.storageDvpg && this.storageDvpg.existingDvpg) {\n         this.hciService.getDvpgVlan(this.storageDvpg.existingDvpg).then((vlanData: VlanData) => {\n            if (vlanData) {\n               this.vlanType = vlanData.vlanType;\n               this.vlan = vlanData.vlan;\n            }\n         });\n      }\n   }\n\n   validate(): string[] {\n      const result: string[] = this.networkingSettings.validate();\n      if (!result) {\n         // remove previous config\n         if (this.clusterConfigData.netServiceConfigs) {\n            this.clusterConfigData.netServiceConfigs =\n                  this.clusterConfigData.netServiceConfigs.filter((config) => config.service !== Service.VSAN);\n         } else {\n            this.clusterConfigData.netServiceConfigs = [];\n         }\n\n         // fill cluster config with vsan configuration\n         this.clusterConfigData.netServiceConfigs.push(this.networkingSettings.getNetConfig(Service.VSAN));\n      }\n      return result;\n   }\n}\n","/* Copyright 2017-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component} from \"@angular/core\";\nimport {AbstractControl, FormArray, FormBuilder, FormControl, FormGroup, Validators} from \"@angular/forms\";\nimport {InputProperty, OutputProperty, WizardPage} from \"@component/wizard/flow-metadata\";\nimport {OnValidate, PageControls} from \"@component/wizard/flow-wizard.component\";\nimport {ClusterConfigData} from \"@generated/cluster-config-data\";\nimport {ConfigureWizardData} from \"@generated/configure-wizard-data\";\nimport {DvpgData} from \"@generated/dvpg-data\";\nimport {DvsSpec} from \"@generated/dvs-spec\";\nimport {ExistingDvpgData} from \"@generated/existing-dvpg-data\";\nimport {ExistingDvsData} from \"@generated/existing-dvs-data\";\nimport {HciClusterService} from \"@generated/hci-cluster-service\";\nimport {HostAdapter} from \"@generated/host-adapter\";\nimport {Service} from \"@generated/service\";\nimport {NavigationService} from \"@navigation/navigation.service\";\nimport {ManagedObject} from \"@service/managed-object\";\nimport {Logger} from \"@util/logger\";\nimport {ModalBuilder} from \"@util/modal-builder\";\nimport {ReactiveFormUtil} from \"@util/reactive-form-util\";\nimport {StringUtil} from \"@util/string-util\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {DistributedSwitchesPageValidator} from \"./distributed-switches-page.validator\";\n\n@WizardPage(\n      VsanUiUtils.getString(\"vsan.cluster.hci.configureHciCluster.wizard.distributedSwitchesPage.title\"),\n      VsanUiUtils.getString(\"vsan.cluster.hci.configureHciCluster.wizard.distributedSwitchesPage.description\"),\n)\n@Component({\n   templateUrl: \"distributed-switches-page.html\",\n   styleUrls: [\"distributed-switches-page.scss\"],\n})\nexport class DistributedSwitchesPageComponent implements OnValidate {\n\n   static readonly VVD_ROUTE: string = \"/solutions/software-defined-datacenter/validated-designs.html\";\n\n   static readonly OPT_OUT_OF_NET_CONFIG_CONTROL_NAME: string = \"optOutOfNetworking\";\n\n   static readonly NET_MAX_COUNT: number = 3;\n   static readonly NET_CONFIG_FORM_GROUP: string = \"netConfigSection\";\n   static readonly DVS_COUNT_CONTROL_NAME: string = \"physicalNetworksCount\";\n   static readonly DVS_COUNT_CONTROL_PATH: string = ReactiveFormUtil.getFormControlPath(\n         DistributedSwitchesPageComponent.NET_CONFIG_FORM_GROUP,\n         DistributedSwitchesPageComponent.DVS_COUNT_CONTROL_NAME);\n   static readonly DVS_COUNT_DEFAULT_VALUE: number = 1;\n\n   static readonly DVS_FORM_ARRAY: string = \"switchesSection\";\n   static readonly DVS_FORM_ARRAY_PATH: string = ReactiveFormUtil.getFormControlPath(\n         DistributedSwitchesPageComponent.NET_CONFIG_FORM_GROUP,\n         DistributedSwitchesPageComponent.DVS_FORM_ARRAY);\n   static readonly DVS_CONTROL_NAME: string = \"switch\";\n\n   static readonly PG_FORM_GROUP: string = \"portGroupSection\";\n   static readonly PG_FORM_GROUP_PATH: string = ReactiveFormUtil.getFormControlPath(\n         DistributedSwitchesPageComponent.NET_CONFIG_FORM_GROUP,\n         DistributedSwitchesPageComponent.PG_FORM_GROUP);\n   readonly VMOTION_PG_CONTROL_NAME: string = Service.VMOTION;\n   readonly VSAN_PG_CONTROL_NAME: string = Service.VSAN;\n\n   static readonly VMOTION_PG_NAME_CONTROL_NAME: string = \"dvpgVmotionName\";\n   static readonly VSAN_PG_NAME_CONTROL_NAME: string = \"dvpgVsanName\";\n\n   static readonly VMOTION_PG_NAME: string = \"vMotion\";\n   static readonly VSAN_PG_NAME: string = \"vSAN\";\n\n   static readonly PG_DEFAULT_SWITCH: string = \"0\";\n\n   static readonly ADAPTERS_FORM_ARRAY: string = \"adaptersSection\";\n   static readonly ADAPTERS_FORM_ARRAY_PATH: string = ReactiveFormUtil.getFormControlPath(\n         DistributedSwitchesPageComponent.NET_CONFIG_FORM_GROUP,\n         DistributedSwitchesPageComponent.ADAPTERS_FORM_ARRAY);\n   static readonly ADAPTER_NOT_IN_USE: string = \"notInUse\";\n\n   static readonly DVS_TO_ADAPTER_ASSIGNMENT_VALIDATION: string = \"dvsToAdapterAssignmentValidation\";\n   static readonly DVS_LOCALLY_DUPLICATE_NAMES_VALIDATION: string = \"dvsLocalDuplicateNamesValidation\";\n   static readonly DVS_EXISTING_DUPLICATE_NAMES_VALIDATION: string = \"dvsExistingDuplicateNamesValidation\";\n   static readonly DVPG_LOCALLY_DUPLICATE_NAMES_VALIDATION: string = \"dvpgLocalDuplicateNamesValidation\";\n   static readonly DVPG_EXISTING_DUPLICATE_NAMES_VALIDATION: string = \"dvpgExistingDuplicateNamesValidation\";\n   private static readonly DVS_SERVICE_SEPARATOR: string = \"-\";\n   private static readonly DVS_SERVICE_WORD_SEPARATOR: string = \" \";\n\n   private readonly HCI_WIZARD_ROUTE_PATH: string = \"hciCluster_configureWizard/\";\n   private readonly EXISTING_DVS_SELECTOR_COMPONENT: string = \"existingDvsSelector\";\n   private readonly EXISTING_DVPG_SELECTOR_COMPONENT: string = \"existingDvpgSelector\";\n\n   @InputProperty()\n   private clusterRef: ManagedObject;\n\n   @InputProperty()\n   private pageControls: PageControls;\n\n   @InputProperty()\n   @OutputProperty()\n   clusterConfigData: ClusterConfigData;\n\n   @InputProperty()\n   private uniqueNewDvsNames: string[];\n\n   @InputProperty()\n   private existingDvsNames: string[];\n\n   @InputProperty()\n   private existingPgNames: string[];\n\n   @InputProperty()\n   physicalAdapters: HostAdapter[];\n\n   @InputProperty()\n   configureWizardData: ConfigureWizardData;\n\n   @OutputProperty()\n   private vmotionDvsName: string;\n\n   @OutputProperty()\n   private storageDvsName: string;\n\n   @OutputProperty()\n   vmotionDvpg: DvpgData;\n\n   @OutputProperty()\n   storageDvpg: DvpgData;\n\n   distributedSwitchesForm: FormGroup;\n   selectedExistingDvs: ExistingDvsData[] = [];\n   existingVmotionDvpg: ExistingDvpgData;\n   existingStorageDvpg: ExistingDvpgData;\n   showExistingVmotionButton: boolean = false;\n   showExistingVsanButton: boolean = false;\n   dvsNames: string[] = [];\n\n   constructor(\n         private formBuilder: FormBuilder,\n         public validator: DistributedSwitchesPageValidator,\n         private hciClusterService: HciClusterService,\n         private navigationService: NavigationService) {\n   }\n\n   ngOnInit(): void {\n      this.buildForm();\n      this.registerFormControlChangeHandlers();\n   }\n\n   private buildForm = (): void => {\n      const dvsFormArray: FormArray =\n            this.createDvsFormArray(DistributedSwitchesPageComponent.DVS_COUNT_DEFAULT_VALUE);\n\n      const controlsConfig: any = {};\n\n      if (this.clusterConfigData.basicConfig.drsEnabled) {\n         controlsConfig[this.VMOTION_PG_CONTROL_NAME] =\n               [DistributedSwitchesPageComponent.PG_DEFAULT_SWITCH, null];\n         controlsConfig[DistributedSwitchesPageComponent.VMOTION_PG_NAME_CONTROL_NAME] = [\n            this.getDvpgUniqueName(this.uniqueNewDvsNames[0], Service.VMOTION),\n            [Validators.required, Validators.maxLength(80), this.validateDuplicateDvpg],\n         ];\n      }\n\n      if (this.clusterConfigData.basicConfig.vsanEnabled) {\n         controlsConfig[this.VSAN_PG_CONTROL_NAME] =\n               [DistributedSwitchesPageComponent.PG_DEFAULT_SWITCH, null];\n         controlsConfig[DistributedSwitchesPageComponent.VSAN_PG_NAME_CONTROL_NAME] = [\n            this.getDvpgUniqueName(this.uniqueNewDvsNames[0], Service.VSAN),\n            [Validators.required, Validators.maxLength(80), this.validateDuplicateDvpg],\n         ];\n      }\n\n      const pgFormGroup: FormGroup = this.formBuilder.group(controlsConfig);\n\n      const adaptersFormGroups: FormGroup[] = [];\n      for (const physicalAdapter of this.physicalAdapters) {\n         adaptersFormGroups.push(this.formBuilder.group(\n               {\n                  [physicalAdapter.deviceName]:\n                        [DistributedSwitchesPageComponent.ADAPTER_NOT_IN_USE, null],\n               }));\n      }\n\n      const adaptersFormArray: FormArray = this.formBuilder.array(adaptersFormGroups);\n\n      const netConfigFormGroup: FormGroup = this.formBuilder.group({\n         [DistributedSwitchesPageComponent.DVS_COUNT_CONTROL_NAME]:\n               [DistributedSwitchesPageComponent.DVS_COUNT_DEFAULT_VALUE, [Validators.required]],\n         [DistributedSwitchesPageComponent.DVS_FORM_ARRAY]: dvsFormArray,\n         [DistributedSwitchesPageComponent.PG_FORM_GROUP]: pgFormGroup,\n         [DistributedSwitchesPageComponent.ADAPTERS_FORM_ARRAY]: adaptersFormArray,\n      });\n\n      this.distributedSwitchesForm = this.formBuilder.group({\n         [DistributedSwitchesPageComponent.OPT_OUT_OF_NET_CONFIG_CONTROL_NAME]:\n               [this.configureWizardData.optOutOfNetworking, [Validators.required]],\n         [DistributedSwitchesPageComponent.NET_CONFIG_FORM_GROUP]: netConfigFormGroup,\n      });\n\n      if (this.configureWizardData.optOutOfNetworking) {\n         this.disableNetworking(true);\n         if (this.configureWizardData.optOutOfNetworkingDisabled) {\n            this.optOutOfNetConfigControl.disable();\n         }\n      }\n\n      this.setDvsNames();\n   };\n\n   private registerFormControlChangeHandlers = (): void => {\n      this.optOutOfNetConfigControl.valueChanges.forEach(this.disableNetworking);\n      this.dvsCountControl.valueChanges.forEach(this.changeDvsCount);\n\n      this.pgFormControls.forEach((control) => {\n         control.valueChanges.forEach(this.validateDvsNameControls);\n      });\n\n      this.adapterFormControls.forEach((control) => {\n         control.valueChanges.forEach(this.validateDvsNameControls);\n      });\n\n      this.dvsNameControls.forEach((control) => {\n         control.valueChanges.forEach(() => this.pageControls.rebuildToc());\n      });\n\n      if (this.clusterConfigData.basicConfig.drsEnabled) {\n         this.vmotionPgNameFormControl.valueChanges.forEach(() => this.pageControls.rebuildToc());\n      }\n\n      if (this.clusterConfigData.basicConfig.vsanEnabled) {\n         this.vsanPgNameFormControl.valueChanges.forEach(() => this.pageControls.rebuildToc());\n      }\n   };\n\n   private validateDvsNameControls = (): void => {\n      ReactiveFormUtil.validateControls(this.dvsNameControls);\n      this.pageControls.rebuildToc();\n   };\n\n   private validateDvpgNameControls = (): void => {\n      if (this.clusterConfigData.basicConfig.drsEnabled) {\n         ReactiveFormUtil.validateControls([this.vmotionPgNameFormControl]);\n      }\n\n      if (this.clusterConfigData.basicConfig.vsanEnabled) {\n         ReactiveFormUtil.validateControls([this.vsanPgNameFormControl]);\n      }\n\n      this.pageControls.rebuildToc();\n   };\n\n   /** Form control getters */\n\n   get optOutOfNetConfigControl(): FormControl {\n      return this.distributedSwitchesForm.get(\n            DistributedSwitchesPageComponent.OPT_OUT_OF_NET_CONFIG_CONTROL_NAME) as FormControl;\n   }\n\n   get netConfigFormGroup(): FormGroup {\n      return this.distributedSwitchesForm.get(DistributedSwitchesPageComponent.NET_CONFIG_FORM_GROUP) as FormGroup;\n   }\n\n   get dvsCountControl(): FormControl {\n      return this.distributedSwitchesForm.get(DistributedSwitchesPageComponent.DVS_COUNT_CONTROL_PATH) as FormControl;\n   }\n\n   get dvsFormArray(): FormArray {\n      return this.distributedSwitchesForm.get(DistributedSwitchesPageComponent.DVS_FORM_ARRAY_PATH) as FormArray;\n   }\n\n   get dvsNameFormGroups(): FormGroup[] {\n      return this.dvsFormArray.controls as FormGroup[];\n   }\n\n   get dvsNameControls(): FormControl[] {\n      return this.dvsNameFormGroups.map((group) =>\n            group.get(DistributedSwitchesPageComponent.DVS_CONTROL_NAME) as FormControl);\n   }\n\n   getDvsNameControl = (idx: number): FormControl => {\n      const controlPath: string = ReactiveFormUtil.getFormControlPath(\n            DistributedSwitchesPageComponent.DVS_FORM_ARRAY_PATH,\n            idx.toString(),\n            DistributedSwitchesPageComponent.DVS_CONTROL_NAME);\n      return this.distributedSwitchesForm.get(controlPath) as FormControl;\n   };\n\n   get pgFormGroup(): FormGroup {\n      return this.distributedSwitchesForm.get(DistributedSwitchesPageComponent.PG_FORM_GROUP_PATH) as FormGroup;\n   }\n\n   get pgFormControls(): FormControl[] {\n      const controls: any = this.pgFormGroup.controls;\n      return Object.keys(controls).map((key) => controls[key]);\n   }\n\n   get adapterFormArray(): FormArray {\n      return this.distributedSwitchesForm.get(DistributedSwitchesPageComponent.ADAPTERS_FORM_ARRAY_PATH) as FormArray;\n   }\n\n   get adapterFormGroups(): FormGroup[] {\n      return this.adapterFormArray.controls as FormGroup[];\n   }\n\n   get adapterFormControls(): FormControl[] {\n      return this.adapterFormGroups\n            .map((group) => group.controls[Object.keys(group.controls)[0]] as FormControl);\n   }\n\n   get vmotionPgFormControl(): FormControl {\n      const controlPath: string = ReactiveFormUtil.getFormControlPath(\n            DistributedSwitchesPageComponent.NET_CONFIG_FORM_GROUP,\n            DistributedSwitchesPageComponent.PG_FORM_GROUP,\n            this.VMOTION_PG_CONTROL_NAME);\n      return this.distributedSwitchesForm.get(controlPath) as FormControl;\n   }\n\n   get vmotionPgNameFormControl(): FormControl {\n      const controlPath: string = ReactiveFormUtil.getFormControlPath(\n            DistributedSwitchesPageComponent.NET_CONFIG_FORM_GROUP,\n            DistributedSwitchesPageComponent.PG_FORM_GROUP,\n            DistributedSwitchesPageComponent.VMOTION_PG_NAME_CONTROL_NAME);\n      return this.distributedSwitchesForm.get(controlPath) as FormControl;\n   }\n\n   get vsanPgFormControl(): FormControl {\n      const controlPath: string = ReactiveFormUtil.getFormControlPath(\n            DistributedSwitchesPageComponent.NET_CONFIG_FORM_GROUP,\n            DistributedSwitchesPageComponent.PG_FORM_GROUP,\n            this.VSAN_PG_CONTROL_NAME);\n      return this.distributedSwitchesForm.get(controlPath) as FormControl;\n   }\n\n   get vsanPgNameFormControl(): FormControl {\n      const controlPath: string = ReactiveFormUtil.getFormControlPath(\n            DistributedSwitchesPageComponent.NET_CONFIG_FORM_GROUP,\n            DistributedSwitchesPageComponent.PG_FORM_GROUP,\n            DistributedSwitchesPageComponent.VSAN_PG_NAME_CONTROL_NAME);\n      return this.distributedSwitchesForm.get(controlPath) as FormControl;\n   }\n\n   /** Form control properties getters */\n\n   get maxDvsCount(): number {\n      return Math.min(DistributedSwitchesPageComponent.NET_MAX_COUNT, this.physicalAdapters.length);\n   }\n\n   get dvsCountOptions(): number[] {\n      // creates array of type [1, ..., dvsCount]\n      return Array.from(new Array(this.maxDvsCount), (value, index) => index + 1);\n   }\n\n   get dvsCount(): number {\n      return Number(this.dvsCountControl.value);\n   }\n\n   get dvsFormValues(): string[] {\n      const dvsFormGroups: FormGroup[] = this.dvsFormArray.controls as FormGroup[];\n      return dvsFormGroups\n            .map((group) => group.get(DistributedSwitchesPageComponent.DVS_CONTROL_NAME).value)\n            .filter((name) => !!name);\n   }\n\n   // used to reduce the watchers in the component.\n   setDvsNames(): void {\n      this.dvsNames = this.dvsFormValues;\n   }\n\n   get netConfigDisabled(): boolean {\n      return this.optOutOfNetConfigControl.value;\n   }\n\n   get localDuplicateDvsNames(): string[] {\n      return this.dvsFormValues.sort().filter((element, index, array) => array.indexOf(element) !== index);\n   }\n\n   getDvsPortGroupsCount = (dvsIndex: number): number => {\n      return this.pgFormControls.filter((control) => control.value === String(dvsIndex)).length;\n   };\n\n   getDvsUplinksCount = (dvsIndex: number): number => {\n      return this.adapterFormControls.filter((control) => control.value === String(dvsIndex)).length;\n   };\n\n   getExistingDvsSelected = (): boolean => {\n      return this.selectedExistingDvs && this.selectedExistingDvs.some(dvs => dvs && !!dvs.name);\n   };\n\n   getExistingDvsWarning(): string {\n      let warning: string = VsanUiUtils.getString(\n            \"vsan.cluster.hci.configureHciCluster.wizard.dvsConfig.existingDvsWarning\");\n\n      if (this.clusterConfigData.basicConfig.vsanEnabled\n            && this.selectedExistingDvs.some(dvs => dvs && dvs.name === this.getStorageDvsName())) {\n         warning = warning.concat(VsanUiUtils.getString(\n               \"vsan.cluster.hci.configureHciCluster.wizard.dvsConfig.existingDvsVsanWarning\"));\n      }\n\n      return warning;\n   }\n\n   /** Form validation */\n\n   private validateDuplicateDvsNames = (dvsFormArray: FormArray): { [key: string]: any } | null => {\n      if (!dvsFormArray.parent) {\n         return null;\n      }\n\n      // check for local duplicates only if there are more than one DVSes\n      if (this.dvsCount > 1 && this.localDuplicateDvsNames.length) {\n         return {\n            [DistributedSwitchesPageComponent.DVS_LOCALLY_DUPLICATE_NAMES_VALIDATION]: {\n               valid: false,\n               duplicateNames: this.localDuplicateDvsNames,\n            },\n         };\n      }\n\n      let duplicateNames: string[] =\n            this.dvsFormValues.filter((element) => this.existingDvsNames.indexOf(element) !== -1);\n\n      if (this.selectedExistingDvs && this.selectedExistingDvs.length) {\n         duplicateNames = duplicateNames.filter((element) => {\n            return this.selectedExistingDvs.map((elem) => elem ? elem.name : \"\").indexOf(element) === -1;\n         });\n      }\n\n      if (duplicateNames.length) {\n         return {\n            [DistributedSwitchesPageComponent.DVS_EXISTING_DUPLICATE_NAMES_VALIDATION]: {\n               valid: false,\n               duplicateNames: duplicateNames,\n            },\n         };\n      }\n\n      return null;\n   };\n\n   private validateDuplicateDvpg = (dvpgNameControl: AbstractControl): { [key: string]: any } | null => {\n      if (!this.existingPgNames || !dvpgNameControl || !dvpgNameControl.parent) {\n         return null;\n      }\n\n      if ((this.existingVmotionDvpg && this.existingVmotionDvpg.name === dvpgNameControl.value) ||\n            (this.existingStorageDvpg && this.existingStorageDvpg.name === dvpgNameControl.value)) {\n         return null;\n      }\n\n      if (this.getVmotionDvpgName() === this.getStorageDvpgName()) {\n         return {\n            [DistributedSwitchesPageComponent.DVPG_LOCALLY_DUPLICATE_NAMES_VALIDATION]: {\n               valid: false,\n            },\n         };\n      }\n\n      return !this.existingPgNames.includes(dvpgNameControl.value.trim()) ? null : {\n         [DistributedSwitchesPageComponent.DVPG_EXISTING_DUPLICATE_NAMES_VALIDATION]: {\n            valid: false,\n         },\n      };\n   };\n\n   private validateAssignment = (dvsNameFormControl: FormControl): { [key: string]: any } | null => {\n      // validators are run before wiring the form\n      if (!dvsNameFormControl.parent) {\n         return null;\n      }\n\n      const groupIndex: number = this.getDvsNameGroupIndex(dvsNameFormControl.parent as FormGroup);\n\n      const result: any = {};\n      const assignedAdapters: FormControl[] = this.adapterFormControls.filter(\n            (control) => control.value === String(groupIndex));\n      if (!assignedAdapters.length) {\n         result[DistributedSwitchesPageComponent.DVS_TO_ADAPTER_ASSIGNMENT_VALIDATION] = {valid: false};\n      }\n\n      return result;\n   };\n\n   private getDvsNameGroupIndex = (formGroup: FormGroup): number => {\n      const array: FormArray = formGroup.parent as FormArray;\n      for (let idx: number = 0; idx < array.controls.length; idx++) {\n         if (array.at(idx) === formGroup) {\n            return idx;\n         }\n      }\n\n      Logger.error(\"Controls configuration problem, \");\n   };\n\n   private disableNetworking = (optOutOfNetConfig: boolean) => {\n      this.configureWizardData.optOutOfNetworking = optOutOfNetConfig;\n      if (optOutOfNetConfig) {\n         this.netConfigFormGroup.disable();\n      } else {\n         this.netConfigFormGroup.enable();\n      }\n\n      this.pageControls.rebuildToc();\n   };\n\n   private changeDvsCount = (dvsCount: number): void => {\n      const dvsFormArray: FormArray =\n            this.createDvsFormArray(dvsCount, this.dvsFormValues);\n      const netSettingsFormGroup: FormGroup =\n            this.distributedSwitchesForm.get(DistributedSwitchesPageComponent.NET_CONFIG_FORM_GROUP) as FormGroup;\n      netSettingsFormGroup.setControl(DistributedSwitchesPageComponent.DVS_FORM_ARRAY, dvsFormArray);\n\n      // DVSes are reduced - resetting the selections that are no valid any more\n      if (dvsCount < this.maxDvsCount) {\n         const highestDvsIndex: number = dvsCount - 1;\n         this.setPortGroupsDvs(String(0), highestDvsIndex);\n         this.setAdaptorsDvs(DistributedSwitchesPageComponent.ADAPTER_NOT_IN_USE, highestDvsIndex);\n         this.selectedExistingDvs = this.selectedExistingDvs.slice(0, dvsCount);\n      }\n\n      this.dvsNameControls.forEach((control) => {\n         control.valueChanges.forEach(() => this.pageControls.rebuildToc());\n      });\n\n      this.setDvsNames();\n\n      this.pageControls.rebuildToc();\n   };\n\n   private setPortGroupsDvs = (newDvsName: string, marginDvsName: number): void => {\n      const controls: any = this.pgFormGroup.controls;\n      Object.keys(controls)\n            .map((key) => controls[key])\n            .map((control) => {\n               if (+control.value > +marginDvsName) {\n                  control.setValue(newDvsName);\n               }\n            });\n   };\n\n   private setAdaptorsDvs = (newDvsName: string, marginDvsName: number): void => {\n      this.adapterFormGroups.map((group) => {\n         const control: FormControl = group.controls[Object.keys(group.controls)[0]] as FormControl;\n         if (+control.value > +marginDvsName) {\n            control.setValue(newDvsName);\n         }\n      });\n   };\n\n   private createDvsFormArray = (dvsCount: number, dvsNames?: string[]): FormArray => {\n      const dvsFormGroups: FormGroup[] = [];\n      let existingDvsSelected: number = 0;\n      for (let idx: number = 0; idx < dvsCount; idx++) {\n         let dvsName: string;\n         let isExistingDvs: boolean;\n         if (this.selectedExistingDvs[idx]) {\n            dvsName = this.selectedExistingDvs[idx].name;\n            existingDvsSelected++;\n            isExistingDvs = true;\n         } else if (dvsNames && dvsNames.length > idx) {\n            dvsName = this.dvsFormValues[idx];\n         } else {\n            dvsName = this.uniqueNewDvsNames[idx - existingDvsSelected];\n         }\n\n         const validators: any[] = isExistingDvs ? [] : [\n            this.validateAssignment,\n            Validators.required,\n            Validators.maxLength(80),\n         ];\n\n         dvsFormGroups.push(\n               this.formBuilder.group({\n                  [DistributedSwitchesPageComponent.DVS_CONTROL_NAME]: [dvsName, validators],\n               }),\n         );\n      }\n\n      return this.formBuilder.array(dvsFormGroups, this.validateDuplicateDvsNames);\n   };\n\n   private getVmotionDvsName = (): string => {\n      return this.vmotionPgFormControl && this.vmotionPgFormControl.value ?\n            this.getDvsNameControl(this.vmotionPgFormControl.value).value : \"\";\n   };\n\n   private getStorageDvsName = (): string => {\n      return this.vsanPgFormControl && this.vsanPgFormControl.value\n            ? this.getDvsNameControl(this.vsanPgFormControl.value).value : \"\";\n   };\n\n   private getVmotionDvpgName = (): string => {\n      return this.vmotionPgNameFormControl ? this.vmotionPgNameFormControl.value : \"\";\n   };\n\n   private getStorageDvpgName = (): string => {\n      return this.vsanPgNameFormControl ? this.vsanPgNameFormControl.value : \"\";\n   };\n\n   validate(): string[] | Promise<string[]> {\n      const dvsAssignmentErrors: string[] =\n            this.validator.getDvsAssignmentErrors(this.dvsNameControls);\n\n      if (dvsAssignmentErrors.length) {\n         return dvsAssignmentErrors;\n      }\n\n      if (!this.configureWizardData.optOutOfNetworking) {\n         const hasInvalidDvsName: boolean = this.dvsNameControls\n               .some(control => this.validator.invalidDvsNameControl(control));\n         ReactiveFormUtil.validateAllFormFields(this.distributedSwitchesForm);\n         if (this.distributedSwitchesForm.invalid || hasInvalidDvsName) {\n            return [\n               VsanUiUtils.getString(\"vsan.cluster.hci.configureHciCluster.wizard.networking.notAcceptableErrors\"),\n            ];\n         }\n         return this.validatePermissions();\n      }\n\n      return this.populateSpec();\n   }\n\n   private validatePermissions(): Promise<any> {\n      const permissionPromises: Promise<any>[] = [];\n\n      // check permissions for creating new DVS/DVPG\n      const checkDvsCreatePermission: boolean = this.dvsFormValues\n            .some((dvsName) => {\n               return !this.selectedExistingDvs.some(dvs => dvs && dvs.name === dvsName);\n            });\n\n      const checkDvpgCreatePermission: boolean =\n            (this.clusterConfigData.basicConfig.drsEnabled && !this.existingVmotionDvpg)\n            || (this.clusterConfigData.basicConfig.vsanEnabled && !this.existingStorageDvpg);\n      if (checkDvsCreatePermission || checkDvpgCreatePermission) {\n         permissionPromises.push(this.hciClusterService.hasNetworkingCreatePermissions(\n               this.clusterRef, checkDvsCreatePermission, checkDvpgCreatePermission));\n      }\n\n      // check permissions for existing DVS/DVPG\n      if ((this.selectedExistingDvs && this.selectedExistingDvs.length)\n            || this.existingStorageDvpg || this.existingVmotionDvpg) {\n         // get selected existing dvsMors\n         const dvsMors: ManagedObject[] = this.selectedExistingDvs.filter(dvs => !!dvs).map(dvs => dvs.dvsRef);\n         const dvpgMors: ManagedObject[] = this.existingStorageDvpg ? [this.existingStorageDvpg.dvpgRef] : [];\n         if (this.existingVmotionDvpg) {\n            dvpgMors.push(this.existingVmotionDvpg.dvpgRef);\n         }\n\n         permissionPromises.push(this.hciClusterService.hasNetworkingModifyPermissions(dvsMors, dvpgMors));\n      }\n\n      return Promise.all(permissionPromises).then((result) => {\n         // if any permission is not granted, show error\n         if (result && result.length && (result[0] === false || result[1] === false)) {\n            return [VsanUiUtils.getString(\n                  \"vsan.cluster.hci.configureHciCluster.wizard.dvsConfig.permissionErrorMessage\")];\n         }\n\n         return this.populateSpec();\n      });\n   }\n\n   private populateSpec = async (): Promise<string[]> => {\n      // prepare output parameters\n      if (this.clusterConfigData.basicConfig.drsEnabled) {\n         this.vmotionDvsName = this.getVmotionDvsName();\n         if (this.existingVmotionDvpg) {\n            this.vmotionDvpg = DvpgData.Factory.create(this.existingVmotionDvpg.name, this.existingVmotionDvpg.dvpgRef);\n         } else {\n            this.vmotionDvpg = DvpgData.Factory.create(this.getVmotionDvpgName(), null);\n         }\n      }\n\n      if (this.clusterConfigData.basicConfig.vsanEnabled) {\n         this.storageDvsName = this.getStorageDvsName();\n         if (this.existingStorageDvpg) {\n            this.storageDvpg = DvpgData.Factory.create(this.existingStorageDvpg.name, this.existingStorageDvpg.dvpgRef);\n         } else {\n            this.storageDvpg = DvpgData.Factory.create(this.getStorageDvpgName(), null);\n         }\n      }\n\n      // fill the cluster configure spec\n      this.clusterConfigData.optOutOfNetConfig = this.configureWizardData.optOutOfNetworking;\n      if (!this.configureWizardData.optOutOfNetworking) {\n         this.clusterConfigData.dvsSpecs = this.dvsFormArray.controls.map((group, idx) => {\n            const control: FormControl = group.get(DistributedSwitchesPageComponent.DVS_CONTROL_NAME) as FormControl;\n            const dvsMor: ManagedObject | null =\n                  this.selectedExistingDvs[idx] ? this.selectedExistingDvs[idx].dvsRef : null;\n            return DvsSpec.Factory.create(\n                  control.value,\n                  this.getDvsServices(idx),\n                  this.getDvsHostAdapters(idx),\n                  dvsMor);\n         });\n\n         const validationMessages: string[] = await this.hciClusterService\n               .validateNetworkSpecification(this.clusterRef, this.clusterConfigData);\n         // Empty array is considered as invalid validation result\n         return validationMessages?.length ? validationMessages : null;\n      }\n\n      return null;\n   };\n\n   private getDvsServices = (dvsIdx: number): Service[] => {\n      const controls: any = this.pgFormGroup.controls;\n      return Object.keys(controls)\n            .filter((key) => (controls[key].value) === String(dvsIdx))\n            .map((key) => key as Service);\n   };\n\n   private getDvsHostAdapters = (dvsIdx: number): HostAdapter[] => {\n      const groups: FormGroup[] = this.adapterFormGroups;\n      return groups\n            .map((group) => {\n               const controlsObject: { [key: string]: AbstractControl } = group.controls;\n               const deviceName: string = Object.keys(controlsObject)[0];\n               const hostAdapter: HostAdapter = this.getHostAdapter(deviceName);\n               if (controlsObject[deviceName].value === String(dvsIdx)) {\n                  hostAdapter.dvsName = this.getDvsNameControl(controlsObject[deviceName].value).value;\n                  return hostAdapter;\n               }\n\n               return null;\n            })\n            .filter((element) => element != null);\n   };\n\n   private getHostAdapter = (deviceName: string): HostAdapter => {\n      return this.physicalAdapters.find((adapter) => adapter.deviceName === deviceName);\n   };\n\n   navigateToVvd(): void {\n      this.navigationService.navigateToVmwareCom(DistributedSwitchesPageComponent.VVD_ROUTE);\n   }\n\n   onVmotionDvsChange(dvsIdx: number): void {\n      const dvsName: string = this.getDvsNameControl(dvsIdx).value;\n      this.existingVmotionDvpg = null;\n      this.showExistingVmotionButton = this.selectedExistingDvs.some(dvs => dvs && dvs.name === dvsName);\n      this.vmotionPgNameFormControl.setValue(this.getDvpgUniqueName(dvsName, Service.VMOTION));\n   }\n\n   onVsanDvsChange(dvsIdx: number): void {\n      const dvsName: string = this.getDvsNameControl(dvsIdx).value;\n      this.existingStorageDvpg = null;\n      this.showExistingVsanButton = this.selectedExistingDvs.some(dvs => dvs && dvs.name === dvsName);\n      this.vsanPgNameFormControl.setValue(this.getDvpgUniqueName(dvsName, Service.VSAN));\n   }\n\n   populateDvpgName = (dvsName: string, showExistingButton?: boolean) => {\n      if (dvsName === this.getVmotionDvsName() && this.vmotionPgNameFormControl) {\n         this.showExistingVmotionButton = showExistingButton;\n         this.vmotionPgNameFormControl.setValue(this.getDvpgUniqueName(dvsName, Service.VMOTION));\n      }\n\n      if (dvsName === this.getStorageDvsName() && this.vsanPgNameFormControl) {\n         this.showExistingVsanButton = showExistingButton;\n         this.vsanPgNameFormControl.setValue(this.getDvpgUniqueName(dvsName, Service.VSAN));\n      }\n\n      this.setDvsNames();\n   };\n\n   openExistingDvsDialog(dvsIdx: number): void {\n      const dvsName: string = this.selectedExistingDvs && this.selectedExistingDvs[dvsIdx]\n            ? this.selectedExistingDvs[dvsIdx].name : \"\";\n      new ModalBuilder(this.HCI_WIZARD_ROUTE_PATH + this.EXISTING_DVS_SELECTOR_COMPONENT)\n            .setSize(800, 450)\n            .open({\n               clusterRef: this.clusterRef,\n               selectedExistingDvsName: dvsName,\n               selectedDvsNames: this.selectedExistingDvs.map(dvs => dvs ? dvs.name : \"\"),\n            })\n            .then((existingDvsSelection: ExistingDvsData | null): void => {\n               if (this.getVmotionDvsName() === dvsName) {\n                  this.existingVmotionDvpg = null;\n               }\n\n               if (this.getStorageDvsName() === dvsName) {\n                  this.existingStorageDvpg = null;\n               }\n\n               if (existingDvsSelection && this.selectedExistingDvs.indexOf(existingDvsSelection) === -1) {\n                  this.selectedExistingDvs[dvsIdx] = existingDvsSelection;\n                  const newDvsName: string = existingDvsSelection.name;\n                  this.dvsNameControls[dvsIdx].setValue(newDvsName);\n                  this.populateDvpgName(newDvsName, true);\n               } else if (!existingDvsSelection) {\n                  this.selectedExistingDvs[dvsIdx] = null;\n                  const newDvsName: string = this.uniqueNewDvsNames.find((el) => this.dvsFormValues.indexOf(el) === -1);\n                  this.dvsNameControls[dvsIdx].setValue(newDvsName);\n                  this.populateDvpgName(newDvsName, false);\n               }\n\n               this.setDvsNames();\n            });\n   }\n\n   openExistingDvpgVmotionDialog(): void {\n      const existingDvs: ExistingDvsData = this.selectedExistingDvs.find(dvs => dvs\n            && dvs.name === this.getVmotionDvsName());\n\n      const networkName: string = this.existingVmotionDvpg && this.existingVmotionDvpg.name\n            ? this.existingVmotionDvpg.name : \"\";\n\n      const dialogPromise: Promise<ExistingDvpgData | null> =\n            this.openExistingDvpgDialog(existingDvs.dvsRef, networkName);\n\n      dialogPromise.then((existingDvpgSelection: ExistingDvpgData | null): void => {\n         this.existingVmotionDvpg = existingDvpgSelection;\n         if (existingDvpgSelection) {\n            this.vmotionPgNameFormControl.setValue(this.existingVmotionDvpg.name);\n         } else {\n            this.populateDvpgName(existingDvs.name, true);\n         }\n\n         this.validateDvpgNameControls();\n      });\n   }\n\n   openExistingDvpgVsanDialog(): void {\n      const existingDvs: ExistingDvsData = this.selectedExistingDvs.find(dvs => dvs\n            && dvs.name === this.getStorageDvsName());\n\n      const networkName: string = this.existingStorageDvpg && this.existingStorageDvpg.name\n            ? this.existingStorageDvpg.name : \"\";\n\n      const dialogPromise: Promise<ExistingDvpgData | null> =\n            this.openExistingDvpgDialog(existingDvs.dvsRef, networkName);\n\n      dialogPromise.then((existingDvpgSelection: ExistingDvpgData | null): void => {\n         this.existingStorageDvpg = existingDvpgSelection;\n         if (existingDvpgSelection) {\n            this.vsanPgNameFormControl.setValue(this.existingStorageDvpg.name);\n         } else {\n            this.populateDvpgName(existingDvs.name, true);\n         }\n\n         this.validateDvpgNameControls();\n      });\n   }\n\n   private getDvpgUniqueName(dvsName: string, service: Service): string {\n      return StringUtil.createUniqueIndexedString(\n            this.existingPgNames,\n            this.getDefaultDvpgName(service, dvsName),\n            DistributedSwitchesPageComponent.DVS_SERVICE_WORD_SEPARATOR);\n   }\n\n   private openExistingDvpgDialog(\n         dvsRef: ManagedObject, selectedExistingDvpgName: string): Promise<ExistingDvpgData | null> {\n      return new ModalBuilder(this.HCI_WIZARD_ROUTE_PATH + this.EXISTING_DVPG_SELECTOR_COMPONENT)\n            .setSize(800, 450)\n            .open({\n               dvsRef: dvsRef,\n               selectedExistingDvpgName: selectedExistingDvpgName,\n            });\n   }\n\n   private getDefaultDvpgName(service: Service, dvsName: string): string {\n      let dvpgName: string = dvsName + DistributedSwitchesPageComponent.DVS_SERVICE_SEPARATOR;\n      switch (service) {\n         case Service.VSAN:\n            dvpgName += DistributedSwitchesPageComponent.VSAN_PG_NAME;\n            break;\n         case Service.VMOTION:\n            dvpgName += DistributedSwitchesPageComponent.VMOTION_PG_NAME;\n            break;\n      }\n\n      return dvpgName;\n   }\n}\n","/* Copyright 2018-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Injectable} from \"@angular/core\";\nimport {IdGenerator} from \"@util/id-generator\";\nimport {WebPlatform} from \"@util/platform\";\nimport {CookieService} from \"ngx-cookie-service\";\nimport {HttpClient, HttpHeaders} from \"@angular/common/http\";\nimport {DataAccessService} from \"@service/data-access.service\";\nimport {ManagedObject} from \"@service/managed-object\";\nimport {Logger} from \"@util/logger\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {ConfigureWizardData} from \"@generated/configure-wizard-data\";\nimport {ClusterConfigData} from \"@generated/cluster-config-data\";\nimport {ExternalProxySettingsConfig} from \"@generated/external-proxy-settings-config\";\nimport {NetworkProxyService} from \"@service/vapi/network-proxy.service\";\nimport {CeipService} from \"@generated/ceip-service\";\n\n// TODO [kaleksandrov] Remove cookie-service and start using CookieAdapter\n@Injectable()\nexport class SupportInsightConfigurationService {\n   private static readonly CEIP_URL: string = WebPlatform.webContextPath + \"/../ceip-ui/ctrl/ceip/status/\";\n   private static readonly VSPHERE_UI_XSRF_TOKEN_HEADER: string = \"X-VSPHERE-UI-XSRF-TOKEN\";\n   private static readonly VSPHERE_UI_XSRF_TOKEN_COOKIE: string = \"VSPHERE-UI-XSRF-TOKEN\";\n\n   constructor(private http: HttpClient,\n         private networkProxyService: NetworkProxyService,\n         private ceipService: CeipService,\n         private cookieService: CookieService) {\n   }\n\n   async configureSupportInsight(configureWizardData: ConfigureWizardData,\n         clusterConfigData: ClusterConfigData): Promise<void> {\n      const promises: Promise<any>[] = [];\n      const clusterRef: ManagedObject = ManagedObject.contextObject;\n\n      if (clusterConfigData.basicConfig.vsanEnabled\n            && !configureWizardData.ceipEnabled\n            && !configureWizardData.disableSupportInsight) {\n         promises.push(this.joinCeip());\n      }\n      if (!configureWizardData.disableSupportInsight\n            && configureWizardData.proxySettingsConfig?.hostName) {\n         promises.push(this.saveProxySettings(configureWizardData.proxySettingsConfig));\n      }\n      if (configureWizardData.isSupportInsightStepHidden) {\n         promises.push(this.ceipService.hideSupportInsightStep(clusterRef));\n      }\n\n      try {\n         if (promises.length > 0) {\n            await Promise.all(promises);\n         }\n         return;\n\n      } catch (err) {\n         Logger.error(\"Faild to configure vSAN Support Insight.\", err);\n         return Promise.reject(err);\n      }\n   }\n\n   private joinCeip(): Promise<void> {\n      const dataUrl: string = SupportInsightConfigurationService.CEIP_URL + true;\n      return this.doRequest(dataUrl, HTTP_METHOD.PUT, null, this.prepareCeipHeader());\n   }\n\n   /**\n    * To enable/disable the ceip service successfully via the REST API, this xsrf token is required\n    */\n   private prepareCeipHeader(): { headers: HttpHeaders } {\n      const options: { headers: HttpHeaders } = DataAccessService.getDsRequestOptions();\n      const xsrfToken: string =\n            this.cookieService.get(SupportInsightConfigurationService.VSPHERE_UI_XSRF_TOKEN_COOKIE);\n      options.headers =\n            options.headers.append(SupportInsightConfigurationService.VSPHERE_UI_XSRF_TOKEN_HEADER, xsrfToken);\n      return options;\n   }\n\n   /**\n    * Save the VC proxy settings for https connection to be used by Support Insight service\n    */\n   private saveProxySettings(proxySettings: ExternalProxySettingsConfig): Promise<void> {\n      return this.networkProxyService.updateSettings(ManagedObject.contextObject, true, proxySettings.hostName,\n            proxySettings.port, proxySettings.userName, proxySettings.password)\n            .catch(err => Logger.error(\"Failed to save VC proxy settings\", err));\n   }\n\n   private doRequest = (dataUrl: string,\n         httpMethod: HTTP_METHOD,\n         body?: any,\n         opts?: { headers: HttpHeaders }): Promise<any> => {\n      opts = opts || DataAccessService.getDsRequestOptions();\n      return new Promise<any>((accept, reject) => {\n         const date: Date = new Date();\n         const time: number = date.getTime();\n         const requestId: string = IdGenerator.getUniqueRequestId();\n         Logger.debug(requestId + \" [\" + date.toLocaleString() + \"]\", dataUrl);\n\n         const encodedDataUrl: string = encodeURI(dataUrl);\n         let promise: Promise<any> = null;\n         switch (httpMethod) {\n            case HTTP_METHOD.GET:\n               promise = this.http.get(encodedDataUrl, opts).toPromise();\n               break;\n            case HTTP_METHOD.PUT:\n               let requestJson: string;\n               if (body) {\n                  requestJson = JSON.stringify(body);\n               }\n               promise = this.http.put(encodedDataUrl, requestJson, opts).toPromise();\n               break;\n            case HTTP_METHOD.POST:\n               promise = this.http.post(encodedDataUrl, null, opts).toPromise();\n               break;\n            default:\n               const error: string = \"Invalid request found: \" + httpMethod;\n               Logger.warn(error);\n               reject(error);\n         }\n         if (promise) {\n            promise.then((r) => {\n               const duration: number = new Date().getTime() - time;\n               Logger.debug(requestId + \" [\" + duration + \"ms]:\", r);\n               accept(r);\n            }).catch((error) => {\n               Logger.error(requestId + \":\", error);\n               reject(error.message ? error.message : VsanUiUtils.getString(\"vsan.common.error.taskError\"));\n            });\n         }\n      });\n   };\n}\n\nexport enum HTTP_METHOD {\n   GET, PUT, POST,\n}\n","<!--Copyright 2017-2021 VMware, Inc. All rights reserved. -- VMware Confidential-->\n<form class=\"clr-form clr-form-compact\" [formGroup]=\"distributedSwitchesForm\">\n   <div id=\"dvs-page-description\">\n      {{\"vsan.cluster.hci.configureHciCluster.wizard.dvsConfig.distributedSwitchesPage.info\" | localized:\n         (\"vsan.cluster.hci.configureHciCluster.wizard.dvsConfig.distributedSwitchesPage.vvdLabel\" | localized)}}\n      <a id=\"vvd-link\" href=\"javascript://\" (click)=\"navigateToVvd()\">\n         {{\"vsan.cluster.hci.configureHciCluster.wizard.dvsConfig.distributedSwitchesPage.vvdLabel\" | localized}}\n      </a>\n   </div>\n   <div id=\"disable-net-config-settings-container\" class=\"clr-form-control\">\n      <div class=\"clr-checkbox-wrapper\">\n         <input id=\"optOutOfNetworking\"\n                class=\"clr-checkbox\"\n                formControlName=\"optOutOfNetworking\"\n                [vsan-disable-form-control]=\"configureWizardData.optOutOfNetworkingDisabled\"\n                type=\"checkbox\">\n         <label id=\"opt-out-of-net-config-label\" for=\"optOutOfNetworking\">\n            {{\"vsan.cluster.hci.configureHciCluster.wizard.dvsConfig.optOutOfNetConfigLabel\" | localized}}\n         </label>\n         <clr-signpost\n               [vsan-signpost-title]=\"'vsan.cluster.hci.configureHciCluster.wizard.dvsConfig.optOutOfNetConfigLabel.signpost.label' | localized\">\n            <clr-signpost-content *clrIfOpen clrPosition=\"bottom-right\">\n               <span id=\"opt-out-of-net-config-info-label\">\n                  {{\"vsan.cluster.hci.configureHciCluster.wizard.dvsConfig.optOutOfNetConfig.info\" | localized}}\n               </span>\n            </clr-signpost-content>\n         </clr-signpost>\n      </div>\n   </div>\n   <div formGroupName=\"netConfigSection\"\n        class=\"settings-container\"\n        [ngClass]=\"{'disable-action':netConfigDisabled}\">\n      <h4 id=\"dvs-label\">\n         {{\"vsan.cluster.hci.configureHciCluster.wizard.dvsConfig.distributedSwitchesLabel\" | localized}}\n      </h4>\n      <div class=\"clr-form-control clr-row\">\n         <label id=\"physical-networks-count-label\"\n                for=\"physicalNetworksCount\"\n                class=\"clr-control-label clr-col-4\">\n            {{\"vsan.cluster.hci.configureHciCluster.wizard.dvsConfig.physicalNetworksNumberLabel\" | localized}}\n         </label>\n         <div class=\"clr-control-container clr-col-8\">\n            <div class=\"clr-select-wrapper\">\n               <select id=\"physicalNetworksCount\"\n                       formControlName=\"physicalNetworksCount\"\n                       class=\"clr-select\">\n                  <option *ngFor=\"let option of dvsCountOptions\" value=\"{{option}}\">\n                     {{option}}\n                  </option>\n               </select>\n            </div>\n            <clr-signpost for=\"physicalNetworksCount\">\n               <clr-signpost-content *clrIfOpen clrPosition=\"bottom-right\">\n                  <span id=\"physical-networks-count-info\">\n                     {{\"vsan.cluster.hci.configureHciCluster.wizard.dvsConfig.physicalNetworksNumber.info\" | localized}}\n                  </span>\n               </clr-signpost-content>\n            </clr-signpost>\n         </div>\n      </div>\n      <ng-container formArrayName=\"switchesSection\">\n         <div id=\"dvs-description\">\n            {{\"vsan.cluster.hci.configureHciCluster.wizard.dvsConfig.distributedSwitchesDescription\" | localized}}\n         </div>\n         <div class=\"clr-row\">\n            <div id=\"dvs-name-header\" class=\"clr-col-7 grid-header\">\n               {{\"vsan.cluster.hci.configureHciCluster.wizard.dvsConfig.nameLabel\" | localized}}\n            </div>\n            <div id=\"dvs-port-groups-header\" class=\"clr-col-2 grid-header center-text\">\n               {{\"vsan.cluster.hci.configureHciCluster.wizard.dvsConfig.portGroupsLabel\" | localized}}\n            </div>\n            <div id=\"dvs-uplinks-header\" class=\"clr-col-2 grid-header center-text\">\n               {{\"vsan.cluster.hci.configureHciCluster.wizard.dvsConfig.uplinksLabel\" | localized}}\n            </div>\n         </div>\n         <div class=\"clr-form-control clr-row\"\n              role=\"group\"\n              aria-labelledby=\"dvs-label\"\n              *ngFor=\"let switchBoxFormGroup of dvsNameFormGroups; let idx = index\"\n              [formGroup]=\"switchBoxFormGroup\">\n            <div class=\"clr-control-container clr-col-3 error-control\"\n                 [ngClass]=\"{'clr-error':validator.invalidDvsNameControl(getDvsNameControl(idx))}\">\n               <div *ngIf=\"selectedExistingDvs[idx]\" id=\"existing-dvsName-{{idx}}\" vsan-show-title>\n                  {{selectedExistingDvs[idx].name}}\n               </div>\n               <div class=\"clr-input-wrapper\" *ngIf=\"!selectedExistingDvs[idx]\">\n                  <input id=\"dvsName-{{idx}}\"\n                         formControlName=\"switch\"\n                         required\n                         max=\"80\"\n                         (blur)=\"populateDvpgName(getDvsNameControl(idx)?.value)\"\n                         class=\"clr-input\"\n                         [attr.aria-describedby]=\"'dvs-name-error-'+idx\"\n                         [attr.aria-label]=\"'vsan.cluster.hci.configureHciCluster.wizard.dvsConfig.nameAriaLabel'|localized: idx\"/>\n                  <clr-icon class=\"clr-validate-icon\"\n                            shape=\"exclamation-circle\"\n                            title=\"{{'vsan.common.srMessage.error' | localized}}\"\n                            [attr.aria-label]=\"'vsan.common.srMessage.error' | localized\">\n                  </clr-icon>\n               </div>\n               <span class=\"clr-subtext\" id=\"dvs-name-error-{{idx}}\">\n                  {{validator.getDvsNameControlErrors(getDvsNameControl(idx))}}\n               </span>\n            </div>\n            <button id=\"hci-distributed-switches-existing-button-{{idx}}\"\n                    class=\"btn btn-link clr-col-4\"\n                    (click)=\"openExistingDvsDialog(idx)\">\n               {{(selectedExistingDvs[idx]\n                  ? \"vsan.cluster.hci.configureHciCluster.wizard.dvsConfig.changeExistingNetworkButtonLabel\"\n                  : \"vsan.cluster.hci.configureHciCluster.wizard.dvsConfig.existingNetworkButtonLabel\") | localized}}\n            </button>\n            <div class=\"clr-col-2 center-text\">\n               <div id=\"dvs-port-groups-count-{{idx}}\">{{getDvsPortGroupsCount(idx)}}</div>\n            </div>\n            <div class=\"clr-col-2 center-text\">\n               <div id=\"dvs-uplinks-count-{{idx}}\">{{getDvsUplinksCount(idx)}}</div>\n            </div>\n         </div>\n      </ng-container>\n\n      <vsan-validation *ngIf=\"getExistingDvsSelected()\"\n                       [alertType]=\"'warning'\"\n                       [allowClose]=\"false\"\n                       [alert]=\"getExistingDvsWarning()\">\n      </vsan-validation>\n\n      <ng-container *ngIf=\"clusterConfigData.basicConfig.drsEnabled || clusterConfigData.basicConfig.vsanEnabled\">\n         <h5 id=\"port-groups-label\">\n            {{\"vsan.cluster.hci.configureHciCluster.wizard.dvsConfig.portGroupsSection.title\" | localized}}\n         </h5>\n         <div *ngIf=\"dvsCount === 1\" id=\"port-groups-single-switch-description\">\n            {{\"vsan.cluster.hci.configureHciCluster.wizard.dvsConfig.portGroupsSection.singleSwitch.description\" | localized}}\n         </div>\n         <div *ngIf=\"dvsCount > 1\" id=\"port-groups-description\">\n            {{\"vsan.cluster.hci.configureHciCluster.wizard.dvsConfig.portGroupsSection.description\" | localized}}\n         </div>\n         <div id=\"pg-settings-container\"\n              formArrayName=\"portGroupSection\"\n              class=\"settings-container\"\n              role=\"group\"\n              aria-labelledby=\"port-groups-label\">\n            <div class=\"clr-form-control clr-row\" *ngIf=\"clusterConfigData.basicConfig.drsEnabled\">\n               <label for=\"vmotionPg\" class=\"clr-control-label clr-col-4\">\n                  {{\"vsan.cluster.hci.configureHciCluster.wizard.dvsConfig.portGroupsSection.vmotionNetworkLabel\" | localized}}\n               </label>\n               <div class=\"clr-control-container clr-col-8\">\n                  <div class=\"clr-select-wrapper\">\n                     <select id=\"vmotionPg\"\n                             [formControlName]=\"VMOTION_PG_CONTROL_NAME\"\n                             class=\"clr-select\"\n                             (change)=\"onVmotionDvsChange($event?.target?.value)\">\n                        <option *ngFor=\"let dvsName of dvsNames; let idx = index\" value=\"{{idx}}\">\n                           {{dvsName}}\n                        </option>\n                     </select>\n                  </div>\n               </div>\n            </div>\n            <div *ngIf=\"clusterConfigData.basicConfig.drsEnabled\" class=\"clr-form-control clr-row\">\n               <label for=\"dvpg-name-drs\" class=\"clr-control-label clr-col-4\">\n                  <!-- dummy label to make the input appear at the correct position -->\n               </label>\n               <!--Existing vMotion portgroup name-->\n               <div *ngIf=\"existingVmotionDvpg\"\n                    class=\"clr-control-container clr-col-5\"\n                    id=\"existing-vmotion-dvpg-name\"\n                    vsan-show-title>\n                  {{existingVmotionDvpg.name}}\n               </div>\n               <!--New vMotion portgroup name-->\n               <div *ngIf=\"!existingVmotionDvpg\"\n                    class=\"clr-control-container clr-col-5 error-control\"\n                    [ngClass]=\"{'clr-error' : validator.invalidDvpgNameControl(vmotionPgNameFormControl)}\">\n                  <div class=\"clr-input-wrapper\">\n                     <input type=\"text\"\n                            id=\"dvpg-name-drs\"\n                            class=\"clr-input\"\n                            formControlName=\"dvpgVmotionName\"\n                            aria-describedby=\"dvpg-name-drs-error\">\n                     <clr-icon class=\"clr-validate-icon\"\n                               shape=\"exclamation-circle\"\n                               title=\"{{'vsan.common.srMessage.error' | localized}}\"\n                               [attr.aria-label]=\"'vsan.common.srMessage.error' | localized\">\n                     </clr-icon>\n                  </div>\n                  <span id=\"dvpg-name-drs-error\" class=\"clr-subtext\">\n                     {{validator.getDvpgNameControlErrors(vmotionPgNameFormControl)}}\n                  </span>\n               </div>\n\n               <button *ngIf=\"showExistingVmotionButton\"\n                       vsan-show-title\n                       class=\"btn btn-link clr-col-3\"\n                       (click)=\"openExistingDvpgVmotionDialog()\"\n                       id=\"hci-distributed-switches-vmotion-dvpg-existing-button\">\n                  {{(existingVmotionDvpg\n                     ? \"vsan.cluster.hci.configureHciCluster.wizard.dvsConfig.changeExistingNetworkButtonLabel\"\n                     : \"vsan.cluster.hci.configureHciCluster.wizard.dvsConfig.existingNetworkButtonLabel\") | localized}}\n               </button>\n            </div>\n            <div class=\"clr-form-control clr-row\" *ngIf=\"clusterConfigData.basicConfig.vsanEnabled\">\n               <label id=\"vsan-network-label\" for=\"vsanPg\" class=\"clr-control-label clr-col-4\">\n                  {{\"vsan.cluster.hci.configureHciCluster.wizard.dvsConfig.portGroupsSection.vsanNetworkLabel\" | localized}}\n               </label>\n               <div class=\"clr-control-container clr-col-8\">\n                  <div class=\"clr-select-wrapper\">\n                     <select id=\"vsanPg\"\n                             [formControlName]=\"VSAN_PG_CONTROL_NAME\"\n                             class=\"clr-select\"\n                             (change)=\"onVsanDvsChange($event?.target?.value)\">\n                        <option *ngFor=\"let dvsName of dvsNames; let idx = index\" value=\"{{idx}}\">\n                           {{dvsName}}\n                        </option>\n                     </select>\n                  </div>\n               </div>\n            </div>\n            <div *ngIf=\"clusterConfigData.basicConfig.vsanEnabled\" class=\"clr-form-control clr-row\">\n               <label for=\"dvpg-name-vsan\" class=\"clr-control-label clr-col-4\">\n                  <!-- dummy label to make the input appear at the correct position -->\n               </label>\n               <!--Existing vSAN portgroup name-->\n               <div *ngIf=\"existingStorageDvpg\"\n                    class=\"clr-control-container clr-col-5\"\n                    id=\"existing-vsan-dvpg-name\"\n                    vsan-show-title>\n                  {{existingStorageDvpg.name}}\n               </div>\n               <!--New vSAN portgroup name-->\n               <div *ngIf=\"!existingStorageDvpg\"\n                    class=\"clr-control-container clr-col-5 error-control\"\n                    [ngClass]=\"{'clr-error' : validator.invalidDvpgNameControl(vsanPgNameFormControl)}\">\n                  <div class=\"clr-input-wrapper\">\n                     <input type=\"text\"\n                            id=\"dvpg-name-vsan\"\n                            class=\"clr-input\"\n                            formControlName=\"dvpgVsanName\"\n                            aria-describedby=\"dvpg-name-vsan-error\"/>\n                     <clr-icon class=\"clr-validate-icon\"\n                               shape=\"exclamation-circle\"\n                               title=\"{{'vsan.common.srMessage.error' | localized}}\"\n                               [attr.aria-label]=\"'vsan.common.srMessage.error' | localized\">\n                     </clr-icon>\n                  </div>\n                  <span id=\"dvpg-name-vsan-error\" class=\"clr-subtext\">\n                     {{validator.getDvpgNameControlErrors(vsanPgNameFormControl)}}\n                  </span>\n               </div>\n               <button *ngIf=\"showExistingVsanButton\"\n                       vsan-show-title\n                       class=\"btn btn-link clr-col-3\"\n                       (click)=\"openExistingDvpgVsanDialog()\"\n                       id=\"hci-distributed-switches-vsan-dvpg-existing-button\">\n                  {{(existingStorageDvpg\n                     ? \"vsan.cluster.hci.configureHciCluster.wizard.dvsConfig.changeExistingNetworkButtonLabel\"\n                     : \"vsan.cluster.hci.configureHciCluster.wizard.dvsConfig.existingNetworkButtonLabel\") | localized}}\n               </button>\n            </div>\n         </div>\n      </ng-container>\n      <h4 id=\"physical-adapters-label\">\n         {{\"vsan.cluster.hci.configureHciCluster.wizard.dvsConfig.adaptersSection.title\" | localized}}\n      </h4>\n      <div id=\"physical-adapters-description\">\n         {{\"vsan.cluster.hci.configureHciCluster.wizard.dvsConfig.adaptersSection.description\" | localized}}\n      </div>\n      <ng-container formArrayName=\"adaptersSection\">\n         <div *ngFor=\"let adapterFormGroup of adapterFormGroups; let idx = index\"\n              [formGroupName]=\"idx\"\n              class=\"clr-form-control clr-row\"\n              role=\"group\"\n              aria-labelledby=\"physical-adapters-label\">\n            <label for=\"adapter-{{idx}}\" class=\"clr-control-label clr-col-4\">\n               {{physicalAdapters[idx].name}}\n            </label>\n            <div class=\"clr-control-container clr-col-8\">\n               <div class=\"clr-select-wrapper\">\n                  <select id=\"adapter-{{idx}}\"\n                          formControlName=\"{{physicalAdapters[idx].deviceName}}\"\n                          class=\"clr-select\">\n                     <option value=\"notInUse\">\n                        {{\"vsan.cluster.hci.configureHciCluster.wizard.dvsConfig.adaptersSection.notInUse\" | localized}}\n                     </option>\n                     <option *ngFor=\"let dvsName of dvsNames; let idx = index\" value=\"{{idx}}\">\n                        {{dvsName}}\n                     </option>\n                  </select>\n               </div>\n            </div>\n         </div>\n      </ng-container>\n   </div>\n</form>\n","/* Copyright 2018-2020 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, OnInit} from \"@angular/core\";\nimport {HciClusterService} from \"@generated/hci-cluster-service\";\nimport {ManagedObject} from \"@service/managed-object\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {ExistingDvpgData} from \"@generated/existing-dvpg-data\";\n\n@Component({\n   templateUrl: \"existing-dvpg-selector-dialog.html\",\n   selector: \"existing-dvpg-selector-dialog\",\n   styleUrls: [\"existing-dvpg-selector-dialog.scss\"],\n})\nexport class ExistingDvpgSelectorDialogComponent implements OnInit {\n\n   static readonly DVPG_GRID_PAGE_SIZE: number = 10;\n   VsanUiUtils = VsanUiUtils;\n\n   private dvsRef: ManagedObject;\n\n   isLoading: boolean;\n\n   existingDvpgList: ExistingDvpgData[];\n\n   selectedDvpg: ExistingDvpgData;\n\n   newDvpgSelection: boolean;\n\n   private selectedExistingDvpgName: string;\n\n   constructor(private hciClusterService: HciClusterService) {\n   }\n\n   ngOnInit() {\n      const context: any = VsanUiUtils.getModalContext();\n      this.dvsRef = context.dvsRef;\n      this.selectedExistingDvpgName = context.selectedExistingDvpgName;\n      this.requestData();\n   }\n\n   get dvpgGridPageSize() {\n      return ExistingDvpgSelectorDialogComponent.DVPG_GRID_PAGE_SIZE;\n   }\n\n   onOkClicked() {\n      if (this.newDvpgSelection) {\n         VsanUiUtils.closeModalDialog(null);\n      } else {\n         VsanUiUtils.closeModalDialog(this.selectedDvpg);\n      }\n   }\n\n   private requestData = (): void => {\n      this.isLoading = true;\n      this.hciClusterService.getExistingDvpg(this.dvsRef, this.selectedExistingDvpgName)\n            .then(this.onDataRetrieved)\n            .catch(this.onRequestError);\n   };\n\n   private onDataRetrieved = (result: any): void => {\n      if (result) {\n         this.existingDvpgList = result;\n         if (this.existingDvpgList && this.existingDvpgList.length > 0 && this.existingDvpgList[0].isSelected) {\n            this.selectedDvpg = this.existingDvpgList[0];\n         }\n      }\n\n      this.isLoading = false;\n   };\n\n   private onRequestError = (result: any): void => {\n      this.isLoading = false;\n   };\n}","/* Copyright 2017-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, OnInit} from \"@angular/core\";\nimport {InputProperty, OutputProperty, WizardPage} from \"@component/wizard/flow-metadata\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {ClusterConfigData} from \"@generated/cluster-config-data\";\nimport {LockdownMode} from \"@generated/lockdown-mode\";\nimport {DomainOrHostData} from \"@generated/domain-or-host-data\";\nimport {ManagedObject} from \"@service/managed-object\";\nimport {VsanDiskMapping} from \"@generated/vsan-disk-mapping\";\nimport {Service} from \"@generated/service\";\nimport {NetServiceConfig} from \"@generated/net-service-config\";\nimport {VsanClusterType} from \"@generated/vsan-cluster-type\";\nimport {ConfigureWizardData} from \"@generated/configure-wizard-data\";\nimport {VsanConfigSpec} from \"@generated/vsan-config-spec\";\nimport {VsanStretchedClusterConfig} from \"@generated/vsan-stretched-cluster-config\";\nimport {ExternalProxySettingsConfig} from \"@generated/external-proxy-settings-config\";\nimport {VsanCapabilityData} from \"@generated/vsan-capability-data\";\nimport {VsanCapabilityProvider} from \"@generated/vsan-capability-provider\";\nimport {VumBaselineRecommendationType} from \"@generated/vum-baseline-recommendation-type\";\nimport {DisksClaimingConfigInfo} from \"@component/diskmgmt/model/disks-claiming-config-info.data\";\nimport {SpaceEfficiencyConfig} from \"@generated/space-efficiency-config\";\nimport {SpaceEfficiencyService} from \"@service/space-efficiency-service\";\nimport {ClaimOption} from \"@generated/claim-option\";\nimport Protocol = NetServiceConfig.Protocol;\nimport IpType = NetServiceConfig.IpType;\nimport {DiskMgmtDiskUtil} from \"@util/disk-mgmt-disk.util\";\nimport {VsanQuickstartUtil} from \"@util/vsan-quickstart-util\";\nimport {InventoryNode} from \"@generated/inventory-node\";\nimport {AutoClaimSummaryData} from \"@component/diskmgmt/model/auto-claim-summary.data\";\n\n@WizardPage(\n      VsanUiUtils.getString(\"vsan.cluster.hci.configureHciCluster.wizard.rtc.title\"),\n      null,\n      [VsanCapabilityProvider],\n)\n@Component({\n   templateUrl: \"hci-cluster-ready-to-complete-page.html\",\n   styleUrls: [\"hci-cluster-ready-to-complete-page.scss\"],\n})\nexport class HciClusterReadyToCompletePageComponent implements OnInit {\n   SpaceEfficiencyConfig: typeof SpaceEfficiencyConfig = SpaceEfficiencyConfig;\n   ClaimOption: typeof ClaimOption = ClaimOption;\n\n   @InputProperty(InputProperty.required(false))\n   configureWizardData: ConfigureWizardData;\n\n   @InputProperty()\n   @OutputProperty()\n   clusterConfigData: ClusterConfigData;\n\n   @InputProperty()\n   vsanConfigSpec: VsanConfigSpec;\n\n   @InputProperty(InputProperty.required(false))\n   disksClaimingConfigInfo: DisksClaimingConfigInfo;\n\n   @InputProperty(InputProperty.required(false))\n   isAutoClaim: boolean;\n\n   @InputProperty(InputProperty.required(false))\n   autoClaimedDisks: AutoClaimSummaryData;\n\n   @InputProperty(InputProperty.required(false))\n   faultDomainNames: string[];\n\n   @InputProperty(InputProperty.required(false))\n   preferredName: string;\n\n   @InputProperty(InputProperty.required(false))\n   preferredDomains: DomainOrHostData[];\n\n   @InputProperty(InputProperty.required(false))\n   secondaryName: string;\n\n   @InputProperty(InputProperty.required(false))\n   secondaryDomains: DomainOrHostData[];\n\n   @InputProperty(InputProperty.required(false))\n   witnessHost: ManagedObject;\n\n   @InputProperty(InputProperty.required(false))\n   witnessHostName: string;\n\n   @InputProperty(InputProperty.required(false))\n   witnessHostDiskMapping: VsanDiskMapping;\n\n   @InputProperty(InputProperty.required(false))\n   storagePoolDisks: string[];\n\n   @InputProperty(\"clusterHosts\")\n   hosts: InventoryNode[] = [];\n\n   @InputProperty(InputProperty.required(false))\n   proxySettingsConfig: ExternalProxySettingsConfig;\n\n   @InputProperty()\n   vcCapabilityData: VsanCapabilityData;\n\n   @InputProperty()\n   clusterCapabilityData: VsanCapabilityData;\n\n   preferredHosts: DomainOrHostData[] = [];\n   secondaryHosts: DomainOrHostData[] = [];\n   isStretchedCluster: boolean;\n   displaySingleSiteFaultDomainNames: boolean;\n   hasSupportInsightConfiguration: boolean;\n\n   /**\n    * The vSAN Max claim options with new claimed capacity.\n    */\n   vsanMaxClaimOptions: ClaimOption[];\n\n   /**\n    * The vSAN Direct claim options with new claimed capacity.\n    */\n   vsanDirectClaimOptions: ClaimOption[];\n\n   /**\n    * The PMEM claim options with new claimed capacity.\n    */\n   pmemClaimOptions: ClaimOption[];\n\n   constructor(private spaceEfficiencyService: SpaceEfficiencyService) {\n   }\n\n   ngOnInit(): void {\n      if (!this.clusterConfigData.basicConfig.vsanEnabled) {\n         return;\n      }\n      // vSAN configuration is filled in the vsanConfigSpec property in the previous pages.\n      // copy it's content to the clusterConfigData as this is the spec that is passed to the task.\n      this.clusterConfigData.vsanConfigSpec = this.vsanConfigSpec;\n\n      // Populate some data for the template to display.\n      this.populateDatastoreClaimedDisksInfo();\n      this.populateStretchedClusterConfig();\n      this.hasSupportInsightConfiguration = this.clusterCapabilityData.isSupportInsightSupported\n            && VsanQuickstartUtil.isHciWorkflowInProgress(this.clusterConfigData.basicConfig.hciWorkflowState)\n            && this.clusterConfigData.basicConfig.vsanEnabled\n            && !this.configureWizardData.ceipEnabled\n            && !this.configureWizardData.disableSupportInsight;\n   }\n\n   private populateDatastoreClaimedDisksInfo(): void {\n      this.vsanMaxClaimOptions = DiskMgmtDiskUtil.VSAN_SINGLE_TIER_CLAIM_OPTIONS\n            .filter(claimOption => this.disksClaimingConfigInfo.hasNewClaimedCapacity(claimOption));\n      this.vsanDirectClaimOptions = DiskMgmtDiskUtil.VSAN_DIRECT_CLAIM_OPTIONS\n            .filter(claimOption => this.disksClaimingConfigInfo.hasNewClaimedCapacity(claimOption));\n      this.pmemClaimOptions = DiskMgmtDiskUtil.PMEM_CLAIM_OPTIONS.filter(\n            claimOption => this.disksClaimingConfigInfo.hasNewClaimedCapacity(claimOption));\n   }\n\n   /* Configure in create cluster mode for stretched and two host clusters\n      Some of the vSAN specific pages do not fill the vsanConfigSpec property.\n      These pages are related to two host and stretched cluster.\n      In order to supply the needed vSAN specs, copy all the entered data from these pages:\n      FaultDomainsPageComponent, WitnessHostPageComponent and ClaimDisksWitnessHostPage\n    */\n   private populateStretchedClusterConfig(): void {\n      // First populate the FD details. This must happen before getStretchedClusterConfig!\n      this.populateDomains();\n      this.isStretchedCluster = this.configureWizardData.selectedVsanClusterType === VsanClusterType.STRETCHED_CLUSTER;\n      if (this.isStretchedCluster\n            || this.configureWizardData.selectedVsanClusterType === VsanClusterType.TWO_HOST_VSAN_CLUSTER) {\n         this.clusterConfigData.vsanConfigSpec.stretchedClusterConfig = this.getStretchedClusterConfig();\n      }\n   }\n\n   private populateDomains(): void {\n      this.displaySingleSiteFaultDomainNames =\n            this.configureWizardData.selectedVsanClusterType === VsanClusterType.SINGLE_SITE_CLUSTER\n            && !VsanUiUtils.isEmpty(this.faultDomainNames);\n\n      if (!VsanUiUtils.isEmpty(this.preferredDomains)) {\n         this.preferredDomains.forEach(item => this.preferredHosts.push(...(item.isHost ? [item] : item.children)));\n         this.preferredHosts.sort((h1, h2) => h1.label.localeCompare(h2.label));\n      }\n\n      if (!VsanUiUtils.isEmpty(this.secondaryDomains)) {\n         this.secondaryDomains.forEach(item => this.secondaryHosts.push(...(item.isHost ? [item] : item.children)));\n         this.secondaryHosts.sort((h1, h2) => h1.label.localeCompare(h2.label));\n      }\n   }\n\n   private getStretchedClusterConfig(): VsanStretchedClusterConfig {\n      let preferredFdName: string = null;\n      let secondaryFdName: string = null;\n      let preferredFdDomains: ManagedObject[] = null;\n      let secondaryFdDomains: ManagedObject[] = null;\n\n      switch (this.configureWizardData.selectedVsanClusterType) {\n         case VsanClusterType.TWO_HOST_VSAN_CLUSTER:\n            preferredFdName = VsanUiUtils.getString(\n                  \"vsan.faultDomains.stretchedCluster.wizard.configure.page.faultDomains.defaultPreferredName\");\n            secondaryFdName = VsanUiUtils.getString(\n                  \"vsan.faultDomains.stretchedCluster.wizard.configure.page.faultDomains.defaultSecondaryName\");\n            preferredFdDomains = [this.hosts[0].moRef];\n            secondaryFdDomains = [this.hosts[1].moRef];\n            break;\n         case VsanClusterType.STRETCHED_CLUSTER:\n            preferredFdName = this.preferredName;\n            secondaryFdName = this.secondaryName;\n            preferredFdDomains = this.preferredHosts.map((item) => ManagedObject.fromUid(item.uid));\n            secondaryFdDomains = this.secondaryHosts.map((item) => ManagedObject.fromUid(item.uid));\n            break;\n      }\n\n      return this.clusterConfigData.vsanConfigSpec.stretchedClusterConfig = VsanStretchedClusterConfig.Factory.create(\n            this.witnessHost,\n            this.witnessHostDiskMapping,\n            this.storagePoolDisks,\n            preferredFdName,\n            preferredFdDomains,\n            secondaryFdName,\n            secondaryFdDomains,\n            true,\n      );\n   }\n\n   get spaceEfficiencyLabel(): string {\n      return VsanUiUtils.getString(\n         \"vsan.cluster.hci.configureHciCluster.wizard.rtc.services.spaceEfficiency.label\",\n            this.spaceEfficiencyService.toLabel(this.clusterConfigData.vsanConfigSpec.spaceEfficiencyConfig));\n   }\n\n   getLockdownModeText(): string {\n      if (this.clusterConfigData.lockdownMode === LockdownMode.DISABLED) {\n         return VsanUiUtils.getString(\"vsan.cluster.hci.configureHciCluster.wizard.rtc.lockdown.disabled.label\");\n      }\n      return VsanUiUtils.getString(\"vsan.cluster.hci.configureHciCluster.wizard.rtc.lockdown.label\");\n   }\n\n   getNtpServerText(): string {\n      if (this.clusterConfigData.ntpServer) {\n         return VsanUiUtils.getString(\"vsan.cluster.hci.configureHciCluster.wizard.rtc.ntp.set.label\",\n               this.clusterConfigData.ntpServer);\n      }\n      return VsanUiUtils.getString(\"vsan.cluster.hci.configureHciCluster.wizard.rtc.ntp.notset.label\");\n   }\n\n   getEvcModeText(): string {\n      if (this.clusterConfigData.enableEVC) {\n         return VsanUiUtils.getString(\"vsan.cluster.hci.configureHciCluster.wizard.rtc.evc.label\");\n      }\n      return VsanUiUtils.getString(\"vsan.cluster.hci.configureHciCluster.wizard.rtc.evc.disabled.label\");\n   }\n\n   getRdmaText(): string {\n      return this.vsanConfigSpec.enableRdma ?\n            VsanUiUtils.getString(\"vsan.services.network.rdmaSupport.enabled.label\")\n            : VsanUiUtils.getString(\"vsan.services.network.rdmaSupport.disabled.label\");\n   }\n\n   getHostUpdatePreference(): string {\n      let type: string = \"\";\n      switch (this.clusterConfigData.vumBaselineRecommendationType) {\n         case VumBaselineRecommendationType.latestRelease:\n            type = VsanUiUtils.getString(\"vsan.vum.baseline.recommendation.option.latest.release.label\");\n            break;\n         case VumBaselineRecommendationType.latestPatch:\n            type = VsanUiUtils.getString(\"vsan.vum.baseline.recommendation.option.latest.patch.label\");\n            break;\n         case VumBaselineRecommendationType.noRecommendation:\n            type = VsanUiUtils.getString(\"vsan.vum.baseline.recommendation.option.no.recommendation.label\");\n            break;\n      }\n      return VsanUiUtils.getString(\n            \"vsan.cluster.configure.wizard.advancedOptions.vsan.vumBaselinePreference.readyToComplete.label\", type);\n   }\n\n   getClaimedDisksType(): string {\n      if (!this.disksClaimingConfigInfo.hasNewClaimedCapacity(ClaimOption.ClaimForStorage)) {\n         return VsanUiUtils.getString(\"vsan.cluster.configure.summary.diskClaiming.noDiskClaimed\");\n      }\n\n      if (this.disksClaimingConfigInfo.claimAllFlash) {\n         return VsanUiUtils.getString(\"vsan.cluster.configure.summary.diskClaiming.allFlash\");\n      }\n\n      if (!this.disksClaimingConfigInfo.claimAllFlash) {\n         return VsanUiUtils.getString(\"vsan.cluster.configure.summary.diskClaiming.hybrid\");\n      }\n   }\n\n   getClaimedCapacity(claimOption: ClaimOption): string {\n      if (this.isAutoClaim) {\n         return VsanUiUtils.formatFileSize(this.autoClaimedDisks.totalClaimedCapacity);\n      } else {\n         if (this.disksClaimingConfigInfo.getOldClaimedCapacity(claimOption) === 0) {\n            return VsanUiUtils.formatFileSize(this.disksClaimingConfigInfo.getClaimedCapacity(claimOption));\n         } else {\n            return VsanUiUtils.getString(\n                  \"vsan.cluster.configure.summary.totalAndOldCapacityFormat\",\n                  VsanUiUtils.formatFileSize(this.disksClaimingConfigInfo.getClaimedCapacity(claimOption)),\n                  VsanUiUtils.formatFileSize(this.disksClaimingConfigInfo.getOldClaimedCapacity(claimOption)));\n         }\n      }\n   }\n\n   getClaimedDiskCount(claimOption: ClaimOption): number {\n      if (this.isAutoClaim) {\n         return this.autoClaimedDisks.disksCount;\n      } else {\n         return this.disksClaimingConfigInfo.getClaimedDiskCount(claimOption);\n      }\n   }\n\n   getClaimLabel(): string {\n      return this.isAutoClaim ?\n            VsanUiUtils.getString(\n                  \"vsan.cluster.hci.configureHciCluster.wizard.rtc.vsanMaxDatastore.claimedDisks.auto.label\")\n            : VsanUiUtils.getString(\n                  \"vsan.cluster.hci.configureHciCluster.wizard.rtc.vsanMaxDatastore.claimedDisks.manual.label\");\n   }\n\n   hasEnabledServices(): boolean {\n      return this.clusterConfigData.basicConfig.drsEnabled\n            || this.clusterConfigData.basicConfig.haEnabled\n            || this.clusterConfigData.basicConfig.vsanEnabled\n                  && (this.clusterConfigData.vsanConfigSpec.enableDataAtRestEncryption\n                     || this.clusterConfigData.vsanConfigSpec.enableDataInTransitEncryption\n                     || this.clusterConfigData.vsanConfigSpec.spaceEfficiencyConfig !== SpaceEfficiencyConfig.NONE\n                     || this.isStretchedCluster\n                     || this.displaySingleSiteFaultDomainNames\n                     || this.vsanConfigSpec.advancedOptions.largeClusterSupportEnabled)\n            || this.hasSupportInsightConfiguration;\n   }\n\n   get physicalNetworksDescription(): string {\n      switch (this.clusterConfigData.dvsSpecs.length) {\n         case 1:\n            return VsanUiUtils.getString(\"vsan.cluster.hci.configureHciCluster.wizard.rtc.networking.oneNet\");\n         case 2:\n            return VsanUiUtils.getString(\"vsan.cluster.hci.configureHciCluster.wizard.rtc.networking.twoNet\");\n         case 3:\n            return VsanUiUtils.getString(\"vsan.cluster.hci.configureHciCluster.wizard.rtc.networking.threeNet\");\n      }\n      return \"\";\n   }\n\n   get vmotionDescription(): string {\n      const config: NetServiceConfig = this.getNetServiceConfig(Service.VMOTION);\n      return config ? this.getServiceDescriptionText(config) : \"\";\n   }\n\n   get storageDescription(): string {\n      const config: NetServiceConfig = this.getNetServiceConfig(Service.VSAN);\n      return config ? this.getServiceDescriptionText(config) : \"\";\n   }\n\n   private getNetServiceConfig(service: Service): NetServiceConfig {\n      return this.clusterConfigData.netServiceConfigs.filter((config) => config.service === service)[0];\n   }\n\n   private getServiceDescriptionText(config: NetServiceConfig): string {\n      const hostNum: number = this.hosts.length;\n      return hostNum === 1 ?\n            this.getServiceDescriptionForOneHost(config) :\n            this.getServiceDescriptionForMultipleHosts(config);\n   }\n\n   private getServiceDescriptionForOneHost(config: NetServiceConfig): string {\n      switch (config.protocol) {\n         case Protocol.IPV4:\n            return this.getServiceDescriptionForOneHostIpv4(config);\n         case Protocol.IPV6:\n            return this.getServiceDescriptionForOneHostIpv6(config);\n         case Protocol.MIXED:\n            return this.getServiceDescriptionForOneHostMixedProtocol(config);\n      }\n   }\n\n   private getServiceDescriptionForOneHostIpv4(config: NetServiceConfig): string {\n      switch (config.ipv4IpType) {\n         case IpType.STATIC:\n            if (config.useVlan) {\n               return VsanUiUtils.getString(\n                     \"vsan.cluster.hci.configureHciCluster.wizard.rtc.networking.staticOneHostIpv4Vlan\", config.vlan);\n            } else {\n               return VsanUiUtils.getString(\n                     \"vsan.cluster.hci.configureHciCluster.wizard.rtc.networking.staticOneHostIpv4\");\n            }\n         case IpType.DHCP:\n            if (config.useVlan) {\n               return VsanUiUtils.getString(\n                     \"vsan.cluster.hci.configureHciCluster.wizard.rtc.networking.dhcpOneHostIpv4Vlan\", config.vlan);\n            } else {\n               return VsanUiUtils.getString(\n                     \"vsan.cluster.hci.configureHciCluster.wizard.rtc.networking.dhcpOneHostIpv4\");\n            }\n      }\n   }\n\n   private getServiceDescriptionForOneHostIpv6(config: NetServiceConfig): string {\n      switch (config.ipv6IpType) {\n         case IpType.STATIC:\n            if (config.useVlan) {\n               return VsanUiUtils.getString(\n                     \"vsan.cluster.hci.configureHciCluster.wizard.rtc.networking.staticOneHostIpv6Vlan\", config.vlan);\n            } else {\n               return VsanUiUtils.getString(\n                     \"vsan.cluster.hci.configureHciCluster.wizard.rtc.networking.staticOneHostIpv6\");\n            }\n         case IpType.DHCP:\n            if (config.useVlan) {\n               return VsanUiUtils.getString(\n                     \"vsan.cluster.hci.configureHciCluster.wizard.rtc.networking.dhcpOneHostIpv6Vlan\", config.vlan);\n            } else {\n               return VsanUiUtils.getString(\n                     \"vsan.cluster.hci.configureHciCluster.wizard.rtc.networking.dhcpOneHostIpv6\");\n            }\n         case IpType.ROUTER_ADVERTISEMENT:\n            if (config.useVlan) {\n               return VsanUiUtils.getString(\n                     \"vsan.cluster.hci.configureHciCluster.wizard.rtc.networking.routerOneHostIpv6Vlan\", config.vlan);\n            } else {\n               return VsanUiUtils.getString(\n                     \"vsan.cluster.hci.configureHciCluster.wizard.rtc.networking.routerOneHostIpv6\");\n            }\n      }\n   }\n\n   private getServiceDescriptionForOneHostMixedProtocol(config: NetServiceConfig): string {\n      return this.getServiceDescriptionMixedProtocol(config, false);\n   }\n\n   private getServiceDescriptionForMultipleHosts(config: NetServiceConfig): string {\n      switch (config.protocol) {\n         case Protocol.IPV4:\n            return this.getServiceDescriptionForMultipleHostsIpv4(config);\n         case Protocol.IPV6:\n            return this.getServiceDescriptionForMultipleHostsIpv6(config);\n         case Protocol.MIXED:\n            return this.getServiceDescriptionForMultipleHostsMixedProtocol(config);\n      }\n   }\n\n   private getServiceDescriptionForMultipleHostsIpv4(config: NetServiceConfig): string {\n      switch (config.ipv4IpType) {\n         case IpType.STATIC:\n            if (config.useVlan) {\n               return VsanUiUtils.getString(\n                     \"vsan.cluster.hci.configureHciCluster.wizard.rtc.networking.staticManyHostsIpv4Vlan\",\n                     this.hosts.length, config.vlan);\n            } else {\n               return VsanUiUtils.getString(\n                     \"vsan.cluster.hci.configureHciCluster.wizard.rtc.networking.staticManyHostsIpv4\",\n                     this.hosts.length);\n            }\n         case IpType.DHCP:\n            if (config.useVlan) {\n               return VsanUiUtils.getString(\n                     \"vsan.cluster.hci.configureHciCluster.wizard.rtc.networking.dhcpManyHostsIpv4Vlan\",\n                     this.hosts.length, config.vlan);\n            } else {\n               return VsanUiUtils.getString(\n                     \"vsan.cluster.hci.configureHciCluster.wizard.rtc.networking.dhcpManyHostsIpv4\",\n                     this.hosts.length);\n            }\n      }\n   }\n\n   private getServiceDescriptionForMultipleHostsIpv6(config: NetServiceConfig): string {\n      switch (config.ipv6IpType) {\n         case IpType.STATIC:\n            if (config.useVlan) {\n               return VsanUiUtils.getString(\n                     \"vsan.cluster.hci.configureHciCluster.wizard.rtc.networking.staticManyHostsIpv6Vlan\",\n                     this.hosts.length, config.vlan);\n            } else {\n               return VsanUiUtils.getString(\n                     \"vsan.cluster.hci.configureHciCluster.wizard.rtc.networking.staticManyHostsIpv6\",\n                     this.hosts.length);\n            }\n         case IpType.DHCP:\n            if (config.useVlan) {\n               return VsanUiUtils.getString(\n                     \"vsan.cluster.hci.configureHciCluster.wizard.rtc.networking.dhcpManyHostsIpv6Vlan\",\n                     this.hosts.length, config.vlan);\n            } else {\n               return VsanUiUtils.getString(\n                     \"vsan.cluster.hci.configureHciCluster.wizard.rtc.networking.dhcpManyHostsIpv6\",\n                     this.hosts.length);\n            }\n         case IpType.ROUTER_ADVERTISEMENT:\n            if (config.useVlan) {\n               return VsanUiUtils.getString(\n                     \"vsan.cluster.hci.configureHciCluster.wizard.rtc.networking.routerManyHostsIpv6Vlan\",\n                     this.hosts.length, config.vlan);\n            } else {\n               return VsanUiUtils.getString(\n                     \"vsan.cluster.hci.configureHciCluster.wizard.rtc.networking.routerManyHostsIpv6\",\n                     this.hosts.length);\n            }\n      }\n   }\n\n   private getServiceDescriptionForMultipleHostsMixedProtocol(config: NetServiceConfig): string {\n      return this.getServiceDescriptionMixedProtocol(config, true);\n   }\n\n   private getServiceDescriptionMixedProtocol(config: NetServiceConfig, multipleHosts: boolean): string {\n      if (config.ipv4IpType === IpType.STATIC) {\n         if (config.ipv6IpType === IpType.STATIC) {\n            return this.getStaticIpv4Ipv6Label(config, multipleHosts);\n         } else if (config.ipv6IpType === IpType.DHCP) {\n            return this.getStaticIpv4DhcpIpv6Label(config, multipleHosts);\n         } else if (config.ipv6IpType === IpType.ROUTER_ADVERTISEMENT) {\n            return this.getStaticIpv4RouterIpv6Label(config, multipleHosts);\n         }\n      } else if (config.ipv4IpType === IpType.DHCP) {\n         if (config.ipv6IpType === IpType.DHCP) {\n            return this.getDhcpIpv4Ipv6Label(config, multipleHosts);\n         } else if (config.ipv6IpType === IpType.STATIC) {\n            return this.getDhcpIpv4StaticIpv6Label(config, multipleHosts);\n         } else if (config.ipv6IpType === IpType.ROUTER_ADVERTISEMENT) {\n            return this.getDhcpIpv4RouterIpv6Label(config, multipleHosts);\n         }\n      }\n   }\n\n   private getStaticIpv4Ipv6Label(config: NetServiceConfig, multipleHosts?: boolean): string {\n      if (config.useVlan) {\n         return multipleHosts ? VsanUiUtils.getString(\n               \"vsan.cluster.hci.configureHciCluster.wizard.rtc.networking.staticManyHostsIpv46Vlan\",\n                     this.hosts.length, config.vlan)\n               : VsanUiUtils.getString(\n                     \"vsan.cluster.hci.configureHciCluster.wizard.rtc.networking.staticOneHostIpv46Vlan\",\n                     config.vlan);\n      }\n\n      return multipleHosts ?\n            VsanUiUtils.getString(\n                  \"vsan.cluster.hci.configureHciCluster.wizard.rtc.networking.staticManyHostsIpv46\",\n                  this.hosts.length)\n            : VsanUiUtils.getString(\n                  \"vsan.cluster.hci.configureHciCluster.wizard.rtc.networking.staticOneHostIpv46\");\n   }\n\n   private getDhcpIpv4Ipv6Label(config: NetServiceConfig, multipleHosts?: boolean): string {\n      if (config.useVlan) {\n         return multipleHosts ?\n               VsanUiUtils.getString(\n               \"vsan.cluster.hci.configureHciCluster.wizard.rtc.networking.dhcpManyHostsIpv46Vlan\",\n                    this.hosts.length, config.vlan)\n               : VsanUiUtils.getString(\n                     \"vsan.cluster.hci.configureHciCluster.wizard.rtc.networking.dhcpOneHostIpv46Vlan\",\n                     config.vlan);\n      }\n\n      return multipleHosts ?\n            VsanUiUtils.getString(\n                  \"vsan.cluster.hci.configureHciCluster.wizard.rtc.networking.dhcpManyHostsIpv46\",\n                  this.hosts.length)\n            : VsanUiUtils.getString(\n                  \"vsan.cluster.hci.configureHciCluster.wizard.rtc.networking.dhcpOneHostIpv46\");\n   }\n\n   private getDhcpIpv4StaticIpv6Label(config: NetServiceConfig, multipleHosts?: boolean): string {\n      if (config.useVlan) {\n         return multipleHosts ?\n               VsanUiUtils.getString(\n               \"vsan.cluster.hci.configureHciCluster.wizard.rtc.networking.manyHostsDhcpIpv4StaticIpv6Vlan\",\n                    this.hosts.length, config.vlan)\n               : VsanUiUtils.getString(\n                     \"vsan.cluster.hci.configureHciCluster.wizard.rtc.networking.oneHostDhcpIpv4StaticIpv6Vlan\",\n                     config.vlan);\n      }\n\n      return multipleHosts ?\n            VsanUiUtils.getString(\n            \"vsan.cluster.hci.configureHciCluster.wizard.rtc.networking.manyHostsDhcpIpv4StaticIpv6\",\n                 this.hosts.length)\n            : VsanUiUtils.getString(\n                  \"vsan.cluster.hci.configureHciCluster.wizard.rtc.networking.oneHostDhcpIpv4StaticIpv6\");\n   }\n\n   private getDhcpIpv4RouterIpv6Label(config: NetServiceConfig, multipleHosts?: boolean): string {\n      if (config.useVlan) {\n         return multipleHosts ?\n               VsanUiUtils.getString(\n               \"vsan.cluster.hci.configureHciCluster.wizard.rtc.networking.manyHostsDhcpIpv4RouterIpv6Vlan\",\n                     this.hosts.length, config.vlan)\n               : VsanUiUtils.getString(\n                     \"vsan.cluster.hci.configureHciCluster.wizard.rtc.networking.oneHostDhcpIpv4RouterIpv6Vlan\",\n                     config.vlan);\n      }\n\n      return multipleHosts ? VsanUiUtils.getString(\n            \"vsan.cluster.hci.configureHciCluster.wizard.rtc.networking.manyHostsDhcpIpv4RouterIpv6\",\n                 this.hosts.length)\n            : VsanUiUtils.getString(\n                  \"vsan.cluster.hci.configureHciCluster.wizard.rtc.networking.oneHostDhcpIpv4RouterIpv6\");\n   }\n\n   private getStaticIpv4DhcpIpv6Label(config: NetServiceConfig, multipleHosts?: boolean): string {\n      if (config.useVlan) {\n         return multipleHosts ?\n               VsanUiUtils.getString(\n               \"vsan.cluster.hci.configureHciCluster.wizard.rtc.networking.manyHostsStaticIpv4DhcpIpv6Vlan\",\n                    this.hosts.length, config.vlan)\n               : VsanUiUtils.getString(\n                    \"vsan.cluster.hci.configureHciCluster.wizard.rtc.networking.oneHostStaticIpv4DhcpIpv6Vlan\",\n                    config.vlan);\n      }\n\n      return multipleHosts ?\n            VsanUiUtils.getString(\n                  \"vsan.cluster.hci.configureHciCluster.wizard.rtc.networking.manyHostsStaticIpv4DhcpIpv6\",\n                  this.hosts.length)\n            : VsanUiUtils.getString(\n                  \"vsan.cluster.hci.configureHciCluster.wizard.rtc.networking.oneHostStaticIpv4DhcpIpv6\");\n   }\n\n   private getStaticIpv4RouterIpv6Label(config: NetServiceConfig, multipleHosts?: boolean): string {\n      if (config.useVlan) {\n         return multipleHosts ?\n               VsanUiUtils.getString(\n               \"vsan.cluster.hci.configureHciCluster.wizard.rtc.networking.manyHostsStaticIpv4RouterIpv6Vlan\",\n                    this.hosts.length, config.vlan)\n               : VsanUiUtils.getString(\n                    \"vsan.cluster.hci.configureHciCluster.wizard.rtc.networking.oneHostStaticIpv4RouterIpv6Vlan\",\n                    config.vlan);\n      }\n\n      return multipleHosts ?\n            VsanUiUtils.getString(\n            \"vsan.cluster.hci.configureHciCluster.wizard.rtc.networking.manyHostsStaticIpv4RouterIpv6\",\n                 this.hosts.length)\n            : VsanUiUtils.getString(\n                 \"vsan.cluster.hci.configureHciCluster.wizard.rtc.networking.oneHostStaticIpv4RouterIpv6\");\n   }\n}\n","<!-- Copyright 2018-2020 VMware, Inc. All rights reserved. -- VMware Confidential -->\n<vsan-default-prompt\n      [title]=\"'vsan.cluster.hci.configureHciCluster.wizard.dvsConfig.existingNetworkSelectorDialog.dvpgTitle' | localized\"\n      (onConfirm)=\"onOkClicked()\">\n   <div class=\"dialog-container\">\n      <span>{{\"vsan.cluster.hci.configureHciCluster.wizard.dvsConfig.existingNetworkSelectorDialog.existingDvpgText\" | localized}}</span>\n      <!--Existing DVPG datagrid-->\n      <clr-datagrid [clrDgLoading]=\"isLoading\" [(clrDgSingleSelected)]=\"selectedDvpg\"\n                    class= \"existing-dvpg\" [ngClass]=\"{'disable-action': newDvpgSelection}\">\n         <clr-dg-column [clrDgField]=\"'name'\">\n            {{\"vsan.cluster.hci.configureHciCluster.wizard.dvsConfig.existingNetworkSelectorDialog.grid.nameLabel\" | localized}}\n         </clr-dg-column>\n         <clr-dg-row *clrDgItems=\"let dvpg of existingDvpgList\"\n                     [clrDgItem]=\"dvpg\">\n            <!-- name -->\n            <clr-dg-cell>{{dvpg.name}}</clr-dg-cell>\n         </clr-dg-row>\n         <!--Pagination-->\n         <clr-dg-footer>\n            {{VsanUiUtils.getDatagridFooterLabel(existingDvpgList, pagination, dvpgGridPageSize)}}\n            <clr-dg-pagination #pagination [clrDgPageSize]=\"10\"></clr-dg-pagination>\n         </clr-dg-footer>\n      </clr-datagrid>\n      <!--Select new DVPG checkbox-->\n      <div class=\"checkbox-inline\">\n         <input id=\"configure-hci-existing-network-list-new-network\"\n                type=\"checkbox\"\n                [(ngModel)]=\"newDvpgSelection\">\n         <label for=\"configure-hci-existing-network-list-new-network\">\n            {{\"vsan.cluster.hci.configureHciCluster.wizard.dvsConfig.existingNetworkSelectorDialog.newDvpgLabel\" | localized}}\n         </label>\n      </div>\n   </div>\n</vsan-default-prompt>\n","\nexport interface DvpgData {\n\n   name: string;\n   existingDvpg: any;\n} //class DvpgData\n\nexport module DvpgData{\nexport class Factory {\n\n   static create = (name: string, existingDvpg: any): DvpgData => {\n      return { name: name, existingDvpg: existingDvpg, };\n   }\n\n\n} //class Factory\n\n} //module DvpgData\n","/* Copyright 2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Injectable} from \"@angular/core\";\nimport {ClusterConfigData} from \"@generated/cluster-config-data\";\nimport {ConfigureWizardData} from \"@generated/configure-wizard-data\";\nimport {HciClusterService} from \"@generated/hci-cluster-service\";\nimport {IManagedObject} from \"@service/client/core/imanaged-object.data\";\nimport {ManagedObject} from \"@service/managed-object\";\nimport {tsService} from \"@service/service-metadata\";\nimport {Logger} from \"@util/logger\";\nimport {VsanQuickstartUtil} from \"@util/vsan-quickstart-util\";\nimport {SupportInsightConfigurationService} from \"./support-insight-configuration.service\";\n\n@Injectable()\nexport class ConfigureHciService {\n\n   constructor(private supportInsightService: SupportInsightConfigurationService,\n         private hciClusterService: HciClusterService) {\n   }\n\n   @tsService(\"configureHciCluster\")\n   async configureSupportInsight(configureWizardData: ConfigureWizardData,\n         clusterConfigData: ClusterConfigData): Promise<IManagedObject> {\n      // Only save support insight related configurations in cluster creation step\n      if (VsanQuickstartUtil.isHciWorkflowInProgress(clusterConfigData.basicConfig.hciWorkflowState)) {\n         try {\n            await this.supportInsightService.configureSupportInsight(configureWizardData, clusterConfigData);\n         } catch (e) {\n            // Don't break the HCI Configure workflow because of the support insight failure.\n            Logger.warn(e);\n         }\n      }\n      return this.hciClusterService.configureCluster(ManagedObject.contextObject, clusterConfigData);\n   }\n}\n","<!--Copyright 2017-2020 VMware, Inc. All rights reserved. -- VMware Confidential-->\n<form [formGroup]=\"ipv4Settings\" class=\"clr-form clr-form-compact\">\n   <div class=\"clr-form-control clr-row\">\n      <label for=\"ipv4IpType\" class=\"clr-control-label clr-col-4\">\n         {{\"vsan.cluster.hci.configureHciCluster.wizard.networking.ipTypeLabel\" | localized}}\n      </label>\n      <div class=\"clr-control-container clr-col-8\">\n         <div class=\"clr-select-wrapper\">\n            <select id=\"ipv4IpType\"\n                    class=\"clr-select\"\n                    formControlName=\"ipType\">\n               <option value=\"{{IpType.DHCP}}\">\n                  {{\"vsan.cluster.hci.configureHciCluster.wizard.networking.ipType.dhcp\" | localized}}\n               </option>\n               <option value=\"{{IpType.STATIC}}\">\n                  {{\"vsan.cluster.hci.configureHciCluster.wizard.networking.ipType.static\" | localized}}\n               </option>\n            </select>\n         </div>\n      </div>\n   </div>\n   <div [class.disable-action]=\"dhcpOnIpv4\" class=\"ip-static-settings\">\n      <div>{{ipSettingsInfoMessage}}</div>\n      <div formArrayName=\"hostSettings\">\n         <div *ngFor=\"let hostSettings of hostSettings.controls; let i=index\" [formGroupName]=\"i\"\n              class=\"ip-configuration\"\n              role=\"group\"\n              [attr.aria-label]=\"'vsan.cluster.hci.configureHciCluster.wizard.networking.ipv4Label' | localized\">\n            <div vsan-show-title class=\"host-name\">\n               <vsan-icon-item [label]=\"hostSettings.value.name\" [shape]=\"Icon.HOST\"></vsan-icon-item>\n            </div>\n            <div class=\"ip-inputs-container\">\n               <div class=\"clr-control-container\"\n                    [ngClass]=\"{'clr-error' : invalidIpv4Control(i)}\">\n                  <div class=\"clr-input-wrapper\">\n                     <input type=\"text\"\n                            id=\"ipv4-{{i}}\"\n                            class=\"clr-input\"\n                            placeholder=\"{{'vsan.cluster.hci.configureHciCluster.wizard.networking.ipv4Label' | localized}}\"\n                            formControlName=\"ipv4\"\n                            [required]=\"true\"\n                            [attr.aria-describedby]=\"'ipv4-error-'+i\"/>\n                     <clr-icon class=\"clr-validate-icon\"\n                               shape=\"exclamation-circle\"\n                               title=\"{{'vsan.common.srMessage.error' | localized}}\"\n                               [attr.aria-label]=\"'vsan.common.srMessage.error' | localized\">\n                     </clr-icon>\n                     <clr-icon *ngIf=\"!invalidIpv4Control(i)\" shape=\"no-icon\"></clr-icon>\n                  </div>\n                  <span id=\"ipv4-error-{{i}}\" class=\"clr-subtext\" *ngIf=\"invalidIpv4Control(i)\">\n                    <ul [ngClass]=\"getIpv4ControlErrors(i).length > 1 ? 'list' : 'list-unstyled'\">\n                        <li *ngFor=\"let error of getIpv4ControlErrors(i)\">\n                           {{error}}\n                        </li>\n                     </ul>\n                  </span>\n               </div>\n               <div class=\"clr-control-container\"\n                    [ngClass]=\"{'clr-error' : invalidSubnetMaskControl(i)}\">\n                  <div class=\"clr-input-wrapper\">\n                     <input type=\"text\"\n                            id=\"subnetMask-ipv4-{{i}}\"\n                            class=\"clr-input\"\n                            placeholder=\"{{'vsan.cluster.hci.configureHciCluster.wizard.networking.subnetMaskLabel' | localized}}\"\n                            formControlName=\"subnetMask\"\n                            [required]=\"true\"\n                            [attr.aria-describedby]=\"'subnetMask-ipv4-error-'+i\"/>\n                     <clr-icon class=\"clr-validate-icon\"\n                               shape=\"exclamation-circle\"\n                               title=\"{{'vsan.common.srMessage.error' | localized}}\"\n                               [attr.aria-label]=\"'vsan.common.srMessage.error' | localized\">\n                     </clr-icon>\n                     <clr-icon *ngIf=\"!invalidSubnetMaskControl(i)\" shape=\"no-icon\"></clr-icon>\n                  </div>\n                  <span id=\"subnetMask-ipv4-error-{{i}}\" class=\"clr-subtext\" *ngIf=\"invalidSubnetMaskControl(i)\">\n                    <ul [ngClass]=\"getSubnetMaskControlErrors(i).length > 1 ? 'list' : 'list-unstyled'\">\n                        <li *ngFor=\"let error of getSubnetMaskControlErrors(i)\">\n                           {{error}}\n                        </li>\n                     </ul>\n                  </span>\n               </div>\n               <div class=\"clr-control-container\"\n                    *ngIf=\"showDefaultGateway\"\n                    [ngClass]=\"{'clr-error' : invalidGatewayControl(i)}\">\n                  <div class=\"clr-input-wrapper\">\n                     <input type=\"text\"\n                            id=\"gateway-ipv4-{{i}}\"\n                            placeholder=\"{{'vsan.cluster.hci.configureHciCluster.wizard.networking.gateway' | localized}}\"\n                            formControlName=\"gateway\"\n                            class=\"clr-input\"\n                            [attr.aria-describedby]=\"'gateway-ipv4-error-'+i\"/>\n                     <clr-icon class=\"clr-validate-icon\"\n                               shape=\"exclamation-circle\"\n                               title=\"{{'vsan.common.srMessage.error' | localized}}\"\n                               [attr.aria-label]=\"'vsan.common.srMessage.error' | localized\">\n                     </clr-icon>\n                     <clr-icon *ngIf=\"!invalidGatewayControl(i)\" shape=\"no-icon\"></clr-icon>\n                  </div>\n                  <span id=\"gateway-ipv4-error-{{i}}\" class=\"clr-subtext\" *ngIf=\"invalidGatewayControl(i)\">\n                    <ul [ngClass]=\"getGatewayControlErrors(i).length > 1 ? 'list' : 'list-unstyled'\">\n                        <li *ngFor=\"let error of getGatewayControlErrors(i)\">\n                           {{error}}\n                        </li>\n                     </ul>\n                  </span>\n               </div>\n               <!-- use div wrapper to reserve the space for the rows without a button-->\n               <div class=\"clr-control-container\">\n                  <button *ngIf=\"hosts.length > 1 && i === 0\"\n                          class=\"btn btn-link ipv4-page-autofill\"\n                          [disabled]=\"!validAutofillControl(i) || requestingData\"\n                          (click)=\"autoFillAddresses()\">\n                     {{\"vsan.cluster.hci.configureHciCluster.wizard.networking.ipv4Tab.autoFillButton\" | localized}}\n                  </button>\n               </div>\n            </div>\n         </div>\n      </div>\n   </div>\n</form>\n","<!--Copyright 2017-2020 VMware, Inc. All rights reserved. -- VMware Confidential-->\n<form [formGroup]=\"ipv6Settings\" class=\"clr-form clr-form-compact\">\n   <div class=\"clr-form-control clr-row\">\n      <label for=\"ipv6IpType\" class=\"clr-control-label clr-col-md-4\">\n         {{\"vsan.cluster.hci.configureHciCluster.wizard.networking.ipTypeLabel\" | localized}}\n      </label>\n      <div class=\"clr-control-container clr-col-md-8\">\n         <div class=\"clr-select-wrapper\">\n            <select id=\"ipv6IpType\"\n                    class=\"clr-select\"\n                    formControlName=\"ipType\">\n               <option value=\"{{IpType.DHCP}}\">\n                  {{\"vsan.cluster.hci.configureHciCluster.wizard.networking.ipType.dhcp\" | localized}}\n               </option>\n               <option value=\"{{IpType.ROUTER_ADVERTISEMENT}}\">\n                  {{\"vsan.cluster.hci.configureHciCluster.wizard.networking.ipType.routerAdvertisement\" | localized}}\n               </option>\n               <option value=\"{{IpType.STATIC}}\">\n                  {{\"vsan.cluster.hci.configureHciCluster.wizard.networking.ipType.static\" | localized}}\n               </option>\n            </select>\n         </div>\n      </div>\n   </div>\n   <div [class.disable-action]=\"disabledStaticIpv6\" class=\"ip-static-settings\">\n      <div>{{ipSettingsInfoMessage}}</div>\n      <div formArrayName=\"hostSettings\">\n         <div *ngFor=\"let hostSettings of hostSettings.controls; let i=index\" [formGroupName]=\"i\"\n              class=\"ip-configuration\"\n              role=\"group\"\n              [attr.aria-label]=\"'vsan.cluster.hci.configureHciCluster.wizard.networking.ipv6Label' | localized\">\n            <div vsan-show-title class=\"host-name\">\n               <vsan-icon-item [label]=\"hostSettings.value.name\" [shape]=\"Icon.HOST\"></vsan-icon-item>\n            </div>\n            <div class=\"ip-inputs-container\">\n               <div class=\"clr-control-container\"\n                    [ngClass]=\"{'clr-error' : invalidIpv6Control(i)}\">\n                  <div class=\"clr-input-wrapper\">\n                     <input type=\"text\"\n                            id=\"ipv6-{{i}}\"\n                            class=\"clr-input\"\n                            placeholder=\"{{'vsan.cluster.hci.configureHciCluster.wizard.networking.ipv6Label' | localized}}\"\n                            formControlName=\"ipv6\"\n                            [attr.aria-describedby]=\"'ipv6-error-'+i\"/>\n                     <clr-icon class=\"clr-validate-icon\"\n                               shape=\"exclamation-circle\"\n                               title=\"{{'vsan.common.srMessage.error' | localized}}\"\n                               [attr.aria-label]=\"'vsan.common.srMessage.error' | localized\">\n                     </clr-icon>\n                     <clr-icon *ngIf=\"!invalidIpv6Control(i)\" shape=\"no-icon\"></clr-icon>\n                  </div>\n                  <span id=\"ipv6-error-{{i}}\" class=\"clr-subtext\" *ngIf=\"invalidIpv6Control(i)\">\n                    <ul [ngClass]=\"getIpv6ControlErrors(i).length > 1 ? 'list' : 'list-unstyled'\">\n                        <li *ngFor=\"let error of getIpv6ControlErrors(i)\">\n                           {{error}}\n                        </li>\n                     </ul>\n                  </span>\n               </div>\n               <div class=\"clr-control-container\"\n                    [class.invalid]=\"invalidPrefixControl(i)\"\n                    [ngClass]=\"{'clr-error' : invalidPrefixControl(i)}\">\n                  <div class=\"clr-input-wrapper\">\n                     <input type=\"text\"\n                            id=\"prefix-{{i}}\"\n                            class=\"clr-input prefix-input\"\n                            size=\"5\"\n                            placeholder=\"{{'vsan.cluster.hci.configureHciCluster.wizard.networking.prefixLabel' | localized}}\"\n                            formControlName=\"prefix\"\n                            [attr.aria-describedby]=\"'prefix-error-'+i\"/>\n                     <clr-icon class=\"clr-validate-icon\"\n                               shape=\"exclamation-circle\"\n                               title=\"{{'vsan.common.srMessage.error' | localized}}\"\n                               [attr.aria-label]=\"'vsan.common.srMessage.error' | localized\">\n                     </clr-icon>\n                     <clr-icon *ngIf=\"!invalidPrefixControl(i)\" shape=\"no-icon\"></clr-icon>\n                  </div>\n                  <span id=\"prefix-error-{{i}}\" class=\"clr-subtext\" *ngIf=\"invalidPrefixControl(i)\">\n                       <ul [ngClass]=\"getPrefixControlErrors(i).length > 1 ? 'list' : 'list-unstyled'\">\n                           <li *ngFor=\"let error of getPrefixControlErrors(i)\">\n                              {{error}}\n                           </li>\n                        </ul>\n                  </span>\n               </div>\n               <div class=\"clr-control-container\"\n                    *ngIf=\"showDefaultGateway\"\n                    [ngClass]=\"{'clr-error' : invalidGatewayControl(i)}\">\n                  <div class=\"clr-input-wrapper\">\n                     <input type=\"text\"\n                            id=\"gateway-ipv6-{{i}}\"\n                            class=\"clr-input\"\n                            placeholder=\"{{'vsan.cluster.hci.configureHciCluster.wizard.networking.gateway' | localized}}\"\n                            formControlName=\"gateway\"\n                            [attr.aria-describedby]=\"'gateway-ipv6-error-'+i\"/>\n                     <clr-icon class=\"clr-validate-icon\"\n                               shape=\"exclamation-circle\"\n                               title=\"{{'vsan.common.srMessage.error' | localized}}\"\n                               [attr.aria-label]=\"'vsan.common.srMessage.error' | localized\">\n                     </clr-icon>\n                     <clr-icon *ngIf=\"!invalidGatewayControl(i)\" shape=\"no-icon\"></clr-icon>\n                  </div>\n                  <span id=\"gateway-ipv6-error-{{i}}\" class=\"clr-subtext\" *ngIf=\"invalidGatewayControl(i)\">\n                        <ul [ngClass]=\"getGatewayControlErrors(i).length > 1 ? 'list' : 'list-unstyled'\">\n                           <li *ngFor=\"let error of getGatewayControlErrors(i)\">\n                              {{error}}\n                           </li>\n                        </ul>\n                  </span>\n               </div>\n            </div>\n         </div>\n      </div>\n   </div>\n</form>\n","/* Copyright 2017-2022 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, OnInit} from \"@angular/core\";\nimport {AutoClaimSummaryData} from \"@component/diskmgmt/model/auto-claim-summary.data\";\nimport {DisksClaimingConfigInfo} from \"@component/diskmgmt/model/disks-claiming-config-info.data\";\nimport {InputProperty, OutputProperty, WizardPage} from \"@component/wizard/flow-metadata\";\nimport {OnValidate, PageControls} from \"@component/wizard/flow-wizard.component\";\nimport {PageItem} from \"@component/wizard/page-item\";\nimport {DiskManagementService} from \"@generated/disk-management-service\";\nimport {SpaceEfficiencyConfig} from \"@generated/space-efficiency-config\";\nimport {VsanClaimDisksData} from \"@generated/vsan-claim-disks-data\";\nimport {VsanClaimHostDiskMappingsSpec} from \"@generated/vsan-claim-host-disk-mappings-spec\";\nimport {VsanConfigSpec} from \"@generated/vsan-config-spec\";\nimport {DiskMgmtUtil} from \"@util/disk-mgmt.util\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\n\n@WizardPage(\n      VsanUiUtils.getString(\"vsan.configure.claimDisksPage.title\"),\n      VsanUiUtils.getString(\"vsan.configure.claimDisksPage.description\"),\n      [DiskManagementService],\n)\n@Component({\n   templateUrl: \"claim-disks-page.html\",\n   styleUrls: [\"claim-disks-page.scss\"],\n})\nexport class HciClaimDisksPage implements OnInit, OnValidate {\n\n   @InputProperty()\n   pageControls: PageControls;\n\n   @InputProperty()\n   @OutputProperty()\n   vsanConfigSpec: VsanConfigSpec;\n\n   private _hostsClaimingData: Map<string, VsanClaimDisksData>;\n\n   get hostsClaimingData(): Map<string, VsanClaimDisksData> {\n      return this._hostsClaimingData;\n   }\n\n   @InputProperty()\n   set hostsClaimingData(value: Map<string, VsanClaimDisksData>) {\n      this._hostsClaimingData = new Map<string, VsanClaimDisksData>(Object.entries(value));\n   }\n\n   @OutputProperty()\n   isAutoClaim: boolean = false;\n\n   @OutputProperty()\n   disksClaimingConfigInfo: DisksClaimingConfigInfo;\n\n   @OutputProperty()\n   autoClaimedDisks: AutoClaimSummaryData;\n\n   isAutoClaimAllowed: boolean = false;\n   dataEfficiency: SpaceEfficiencyConfig;\n   isConfigAcceptable: boolean;\n   // Set to \"true\" when disk data for manual claiming is collected\n   private isManualClaimDiskDataLoaded: boolean = false;\n\n   ngOnInit(): void {\n      this.dataEfficiency = this.vsanConfigSpec.spaceEfficiencyConfig;\n      // Set auto claim ON for vsan MAX, when there are compatible disks\n      this.isAutoClaimAllowed = DiskMgmtUtil.hasVsanMaxCompatibleDisks([...this.hostsClaimingData?.values()]);\n      this.isAutoClaim = this.vsanConfigSpec.isVsanMaxEnabled && this.isAutoClaimAllowed;\n      // Disable the next button, when manual claim mode page is loaded initially\n      // as it loads some more data upon initialization.\n      if (!this.isAutoClaim) {\n         this.disableNextButton();\n      }\n   }\n\n   validate(): string[] {\n      if (!this.isConfigAcceptable) {\n         return [VsanUiUtils.getString(\"vsan.dialog.semiAutoClaimDialog.confError.notAcceptableErrors\")];\n      }\n\n      return null;\n   }\n\n   onConfigChange(diskMappings: VsanClaimHostDiskMappingsSpec[]): void {\n      this.vsanConfigSpec.diskMappings = diskMappings;\n      this.pageControls.rebuildToc();\n      (this.pageControls as PageItem).nextButtonIsDisabled = false;\n      this.isManualClaimDiskDataLoaded = true;\n   }\n\n   onIsAutoClaimChange(): void {\n      this.vsanConfigSpec.isDiskClaimVsanManaged = this.isAutoClaim;\n      // Disable Next button on initial switch between auto/manual claim if the manual claim disk data is not yet collected.\n      if (!this.isManualClaimDiskDataLoaded && !this.isAutoClaim) {\n         this.disableNextButton();\n      }\n   }\n\n   onDisksClaimingConfigChange(disksClaimingConfig: DisksClaimingConfigInfo): void {\n      this.disksClaimingConfigInfo = disksClaimingConfig;\n   }\n\n   onAutoClaimedDisksChange(autoClaimedDisks: AutoClaimSummaryData): void {\n      this.autoClaimedDisks = autoClaimedDisks;\n   }\n\n   private disableNextButton(): void {\n      (this.pageControls as PageItem).nextButtonIsDisabled = true;\n   }\n}\n","<!-- Copyright 2017-2021 VMware, Inc. All rights reserved. -- VMware Confidential -->\n<!-- Networking config -->\n<ng-container *ngIf=\"!clusterConfigData.optOutOfNetConfig\">\n   <ng-container *ngIf=\"!configureWizardData.isExtend\">\n      <h6>\n         {{\"vsan.cluster.hci.configureHciCluster.wizard.rtc.networking.physicalNetworksLabel\" | localized}}\n      </h6>\n      <div class=\"desc-text\">{{physicalNetworksDescription}}</div>\n   </ng-container>\n   <ng-container *ngIf=\"configureWizardData.showVmotionTrafficPage && clusterConfigData.basicConfig.drsEnabled\">\n      <h6>\n         {{\"vsan.cluster.hci.configureHciCluster.wizard.rtc.networking.vmotionTrafficLabel\" | localized}}\n      </h6>\n      <div class=\"desc-text\">{{vmotionDescription}}</div>\n   </ng-container>\n\n   <ng-container *ngIf=\"configureWizardData.showVsanTrafficPage && clusterConfigData.basicConfig.vsanEnabled\">\n      <h6>\n         {{\"vsan.cluster.hci.configureHciCluster.wizard.rtc.networking.storageTrafficLabel\" | localized}}\n      </h6>\n      <div class=\"desc-text\">{{storageDescription}}</div>\n   </ng-container>\n</ng-container>\n\n<!--Advanced options section-->\n<ng-container *ngIf=\"!configureWizardData.isExtend\">\n   <h6>\n      {{\"vsan.cluster.hci.configureHciCluster.wizard.advancedOptionsPage.title\" | localized}}\n   </h6>\n   <div class=\"desc-text\">\n      {{\"vsan.cluster.hci.configureHciCluster.wizard.rtc.options.label\" | localized}}\n   </div>\n   <ul class=\"selected-service-list nested\">\n      <!--Because of the custom list styling always format the list items on a single row in order to avoid unwanted whitespaces-->\n      <li>{{getLockdownModeText()}}</li>\n      <li>{{getNtpServerText()}}</li>\n      <li>{{getEvcModeText()}}</li>\n      <li id=\"host-update-preference-label\" *ngIf=\"clusterConfigData.basicConfig.vsanEnabled\n            && vcCapabilityData.isVumBaselineRecommendationSupported\">{{getHostUpdatePreference()}}</li>\n      <li id=\"host-rdma-communication-label\" *ngIf=\"clusterCapabilityData.isRdmaSupported\">{{getRdmaText()}}</li>\n   </ul>\n</ng-container>\n\n<!--vSAN datastore section-->\n<ng-container *ngIf=\"clusterConfigData.basicConfig.vsanEnabled\">\n   <h6>\n      {{\"vsan.cluster.hci.configureHciCluster.wizard.rtc.vsanDatastore.label\" | localized}}\n   </h6>\n   <div class=\"desc-text\">\n      {{\"vsan.cluster.hci.configureHciCluster.wizard.rtc.vsanDatastore.desc\" |\n         localized : clusterConfigData.basicConfig.totalHosts }}\n   </div>\n   <ng-container *ngIf=\"!clusterConfigData.basicConfig.isVsanMaxEnabled\">\n      <vsan-validation *ngIf=\"disksClaimingConfigInfo.disksNotEquallySpread\"\n                       alertType=\"warning\"\n                       [alert]=\"'vsan.cluster.configure.summary.semiAutoClaimDialog.warning.notOptimumSelection' | localized\"\n                       [isSmall]=\"true\"\n                       [allowClose]=\"false\" >\n      </vsan-validation>\n      <vsan-validation *ngIf=\"disksClaimingConfigInfo.mixedDiskClaiming\"\n                       alertType=\"warning\"\n                       [alert]=\"'vsan.cluster.configure.summary.semiAutoClaimDialog.warning.mixedCreateEditMode' | localized\"\n                       [isSmall]=\"true\"\n                       [allowClose]=\"false\" >\n      </vsan-validation>\n      <div class=\"nested\">\n         <label class=\"summary-label\">{{\"vsan.cluster.configure.summary.diskClaiming\" | localized}}</label>\n         <span class=\"summary-value\">\n            {{getClaimedDisksType()}}\n         </span>\n         <label class=\"summary-label\">\n            {{\"vsan.cluster.hci.configureHciCluster.wizard.rtc.vsanDatastore.cacheSize.label\" | localized}}\n         </label>\n         <span class=\"summary-value\">{{getClaimedCapacity(ClaimOption.ClaimForCache)}}</span>\n         <label class=\"summary-label\">\n            {{\"vsan.cluster.hci.configureHciCluster.wizard.rtc.vsanDatastore.capacitySize.label\" | localized}}\n         </label>\n         <span class=\"summary-value\">{{getClaimedCapacity(ClaimOption.ClaimForStorage)}}</span>\n      </div>\n   </ng-container>\n   <div *ngIf=\"clusterConfigData.basicConfig.isVsanMaxEnabled\" class=\"nested\">\n      <label class=\"summary-label\">\n         {{\"vsan.cluster.hci.configureHciCluster.wizard.rtc.vsanMaxDatastore.capacitySize.label\" | localized}}\n      </label>\n      <span class=\"summary-value\">{{getClaimedCapacity(ClaimOption.SingleTier)}}</span>\n      <label class=\"summary-label\">\n         {{\"vsan.cluster.hci.configureHciCluster.wizard.rtc.vsanMaxDatastore.claimedDisks.label\" | localized}}\n      </label>\n      <span class=\"summary-value\" *ngIf=\"vsanMaxClaimOptions.length || isAutoClaim\">\n         {{\"vsan.cluster.hci.configureHciCluster.wizard.rtc.vsanMaxDatastore.claimedDisks.value\" | localized\n               : getClaimedDiskCount(ClaimOption.SingleTier)\n               : getClaimLabel()\n         }}\n      </span>\n      <span class=\"summary-value\" *ngIf=\"!vsanMaxClaimOptions.length && !isAutoClaim\">\n         {{\"vsan.cluster.configure.summary.diskClaiming.noDiskClaimed\" | localized}}\n      </span>\n   </div>\n</ng-container>\n\n<ng-container *ngIf=\"clusterConfigData.basicConfig.vsanEnabled && vsanDirectClaimOptions.length\">\n   <h6>\n      {{\"vsan.cluster.hci.configureHciCluster.wizard.rtc.vsanDirectDatastore.label\" | localized}}\n   </h6>\n   <div class=\"nested\">\n      <ng-container *ngFor=\"let claimOption of vsanDirectClaimOptions\">\n         <label class=\"summary-label\">\n            {{\"vsan.cluster.hci.configureHciCluster.wizard.rtc.vsanDirectDatastore.capacitySize.label\" | localized}}\n         </label>\n         <span class=\"summary-value\">{{getClaimedCapacity(claimOption)}}</span>\n      </ng-container>\n   </div>\n</ng-container>\n\n<ng-container *ngIf=\"clusterConfigData.basicConfig.vsanEnabled && pmemClaimOptions.length\">\n   <h6>\n      {{\"vsan.cluster.hci.configureHciCluster.wizard.rtc.pmem.label\" | localized}}\n   </h6>\n   <div class=\"nested\">\n      <ng-container *ngFor=\"let claimOption of pmemClaimOptions\">\n         <label class=\"summary-label\">\n            {{\"vsan.cluster.hci.configureHciCluster.wizard.rtc.pmem.capacitySize.label\" | localized}}\n         </label>\n         <span class=\"summary-value\"> {{getClaimedCapacity(claimOption)}}</span>\n      </ng-container>\n   </div>\n</ng-container>\n\n<!--cluster services section-->\n<ng-container *ngIf=\"hasEnabledServices()\">\n   <h6>{{\"manage.vsan.general\" | localized}}</h6>\n   <div class=\"desc-text\">{{\"vsan.cluster.hci.configureHciCluster.wizard.rtc.services.label\" | localized}}</div>\n   <div class=\"nested\">\n      <ul class=\"selected-service-list\">\n         <li id=\"drs-configuration-section\" *ngIf=\"clusterConfigData.basicConfig.drsEnabled\">\n            {{\"vsan.cluster.hci.configureHciCluster.wizard.rtc.services.drs.label\" | localized }}\n         </li>\n         <li id=\"ha-configuration-section\" *ngIf=\"clusterConfigData.basicConfig.haEnabled\">\n            {{\"vsan.cluster.hci.configureHciCluster.wizard.rtc.services.ha.label\" | localized}}\n         </li>\n         <ng-container *ngIf=\"clusterConfigData.basicConfig.vsanEnabled\">\n            <li id=\"vsan-data-at-rest-encryption-section\"\n                *ngIf=\"clusterConfigData.vsanConfigSpec.enableDataAtRestEncryption\">\n               {{\"vsan.cluster.hci.configureHciCluster.wizard.rtc.services.dataAtRestEncryption.label\" | localized}}\n            </li>\n            <li id=\"vsan-data-in-transition-encryption-section\"\n                *ngIf=\"clusterConfigData.vsanConfigSpec.enableDataInTransitEncryption\">\n               {{\"vsan.cluster.hci.configureHciCluster.wizard.rtc.services.dataInTransitEncryption.label\" | localized}}\n            </li>\n            <li id=\"vsan-space-efficiency\"\n                *ngIf=\"clusterConfigData.vsanConfigSpec.spaceEfficiencyConfig !== SpaceEfficiencyConfig.NONE\">\n               {{spaceEfficiencyLabel}}\n            </li>\n            <li id=\"vsan-fault-domain-section\" *ngIf=\"isStretchedCluster || displaySingleSiteFaultDomainNames\">\n               <ng-container *ngIf=\"isStretchedCluster\">\n                  <span class=\"desc-text\">\n                     {{\"vsan.cluster.hci.configureHciCluster.wizard.rtc.services.faultDomain.label\" | localized}}\n                  </span>\n                  <div class=\"nested\">\n                     <label class=\"summary-label\">\n                        {{\"vsan.faultDomains.stretchedCluster.wizard.configure.page.summary.preferredName\" | localized}}\n                     </label>\n                     <span id=\"preferred-domain-name\" class=\"summary-value\">{{preferredName}}</span>\n                     <label class=\"summary-label\">\n                        {{\"vsan.faultDomains.stretchedCluster.wizard.configure.page.summary.preferredHosts\" | localized}}\n                     </label>\n                     <span id=\"preferred-domain-hosts-list\" class=\"summary-value\">\n                        <div *ngFor=\"let host of preferredHosts; let i = index\">{{host.label}}</div>\n                     </span>\n                     <label class=\"summary-label\">\n                        {{\"vsan.faultDomains.stretchedCluster.wizard.configure.page.summary.secondaryName\" | localized}}\n                     </label>\n                     <span id=\"secondary-domain-name\" class=\"summary-value\">{{secondaryName}}</span>\n                        <label class=\"summary-label\">\n                           {{\"vsan.faultDomains.stretchedCluster.wizard.configure.page.summary.secondaryHosts\" | localized}}\n                        </label>\n                        <span id=\"secondary-domain-host-list\" class=\"summary-value\">\n                        <div *ngFor=\"let host of secondaryHosts; let i = index\">{{host.label}}</div>\n                   </span>\n                     <label class=\"summary-label\">\n                        {{\"vsan.faultDomains.stretchedCluster.wizard.configure.page.summary.witnessHost\" | localized}}\n                     </label>\n                     <span id=\"witness-host-name\" class=\"summary-value\">{{witnessHostName}}</span>\n                  </div>\n               </ng-container>\n               <ng-container *ngIf=\"displaySingleSiteFaultDomainNames\">\n                  <span>\n                     {{\"vsan.cluster.hci.configureHciCluster.wizard.rtc.services.faultDomain.label\" | localized}}\n                  </span>\n                  <div id=\"fault-domain-{{i}}\" class=\"nested\" *ngFor=\"let domain of faultDomainNames; let i = index\">\n                     {{domain}}\n                  </div>\n               </ng-container>\n            </li>\n            <li id=\"vsan-large-scale-cluster-support-section\"\n                *ngIf=\"vsanConfigSpec.advancedOptions?.largeClusterSupportEnabled\">\n               {{\"vsan.cluster.configure.wizard.advancedOptions.vsan.largeClusters.label\" | localized}}\n            </li>\n            <li id=\"vsan-support-insight-section\" *ngIf=\"hasSupportInsightConfiguration\">\n                <span class=\"desc-text\">\n                   {{\"vsan.cluster.hci.configureHciCluster.dialog.supportInsight.tab.title\" | localized}}\n                </span>\n               <div *ngIf=\"configureWizardData.proxySettingsConfig?.enableInternetAccess\" class=\"nested\">\n                  <div>\n                     {{\"vsan.cluster.hci.configureHciCluster.wizard.rtc.services.supportInsight.internet.label\" | localized}}\n                  </div>\n                  <ng-container *ngIf=\"configureWizardData.proxySettingsConfig.hostName\">\n                     <label class=\"summary-label\">\n                        {{\"vsan.manage.externalProxySettings.action.edit.hostName\" | localized}}\n                     </label>\n                     <span id=\"proxy-host-name\" class=\"summary-value\">\n                       {{configureWizardData.proxySettingsConfig.hostName}}\n                    </span>\n                  </ng-container>\n                  <ng-container *ngIf=\"configureWizardData.proxySettingsConfig.port\">\n                     <label class=\"summary-label\">\n                        {{\"vsan.manage.externalProxySettings.action.edit.port\" | localized}}\n                     </label>\n                     <span id=\"proxy-host-port\" class=\"summary-value\">\n                       {{configureWizardData.proxySettingsConfig.port}}\n                    </span>\n                  </ng-container>\n               </div>\n            </li>\n         </ng-container>\n      </ul>\n   </div>\n</ng-container>\n","<!--Copyright 2018-2021 VMware, Inc. All rights reserved. -- VMware Confidential-->\n<div *ngIf=\"!dataLoaded\" class=\"spinner central-spinner\"></div>\n<vsan-flow-wizard *ngIf=\"dataLoaded\"\n                  [title]=\"'vsan.cluster.hci.configureHciCluster.wizard.title' | localized\"\n                  [pageSets]=\"pages\"\n                  [contextProperties]=\"context\"\n                  [startingTaskProperty]=\"'configureHciCluster'\"\n                  [services]=\"services\">\n</vsan-flow-wizard>","<!-- Copyright 2018-2022 VMware, Inc. All rights reserved. -- VMware Confidential -->\n<vsan-default-prompt\n      [title]=\"'vsan.cluster.hci.configureHciCluster.wizard.dvsConfig.existingNetworkSelectorDialog.dvsTitle' | localized\"\n      [blockButton]=\"noDvsSelected\"\n      (onConfirm)=\"onOkClicked()\"\n      class=\"existing-dvs-selector-dialog\">\n   <div class=\"dialog-container\">\n      <!-- Alert shown if duplicate DVS is selected-->\n      <vsan-validation id=\"duplicate-dvs-error\"\n                       *ngIf=\"alertMessage\"\n                       [alert]=\"alertMessage\"\n                       [allowClose]=\"false\">\n      </vsan-validation>\n      <span>{{\"vsan.cluster.hci.configureHciCluster.wizard.dvsConfig.existingNetworkSelectorDialog.existingDvsText\" | localized}}</span>\n      <!--Existing DVS datagrid-->\n      <clr-datagrid [clrDgLoading]=\"isLoading\"\n                    [(clrDgSingleSelected)]=\"selectedDvs\"\n                    [ngClass]=\"{'disable-action': newDvsSelection}\">\n         <clr-dg-column [clrDgField]=\"'name'\" class=\"name-column\">\n            {{\"vsan.cluster.hci.configureHciCluster.wizard.dvsConfig.existingNetworkSelectorDialog.grid.nameLabel\" | localized}}\n         </clr-dg-column>\n         <clr-dg-column [clrDgField]=\"'version'\"  class=\"version-column\">\n            {{\"vsan.cluster.hci.configureHciCluster.wizard.dvsConfig.existingNetworkSelectorDialog.grid.versionLabel\" | localized}}\n         </clr-dg-column>\n         <clr-dg-column [clrDgField]=\"'niocVersion'\" class=\"nioc-column\">\n            {{\"vsan.cluster.hci.configureHciCluster.wizard.dvsConfig.existingNetworkSelectorDialog.grid.niocVersionLabel\" | localized}}\n         </clr-dg-column>\n         <clr-dg-column [clrDgField]=\"'lacpVersion'\" class=\"lacp-column\">\n            {{\"vsan.cluster.hci.configureHciCluster.wizard.dvsConfig.existingNetworkSelectorDialog.grid.lapVersionLabel\" | localized}}\n         </clr-dg-column>\n         <clr-dg-row *clrDgItems=\"let dvs of existingDvsList\" [clrDgItem]=\"dvs\">\n            <!-- name -->\n            <clr-dg-cell vsan-show-title>{{dvs.name}}</clr-dg-cell>\n            <!-- version -->\n            <clr-dg-cell>{{dvs.version}}</clr-dg-cell>\n            <!-- NIOC version -->\n            <clr-dg-cell>{{dvs.niocVersion}}</clr-dg-cell>\n            <!-- LACP version -->\n            <clr-dg-cell>{{dvs.lacpVersion}}</clr-dg-cell>\n         </clr-dg-row>\n\n         <!--Pagination-->\n         <clr-dg-footer>\n            {{VsanUiUtils.getDatagridFooterLabel(existingDvsList, pagination, dvsGridPageSize)}}\n            <clr-dg-pagination #pagination [clrDgPageSize]=\"10\"></clr-dg-pagination>\n         </clr-dg-footer>\n      </clr-datagrid>\n      <!--Select new DVS checkbox-->\n      <clr-checkbox-wrapper>\n         <input id=\"configure-hci-existing-network-list-new-network\"\n                clrCheckbox\n                type=\"checkbox\"\n                [(ngModel)]=\"newDvsSelection\"/>\n         <label for=\"configure-hci-existing-network-list-new-network\">\n            {{\"vsan.cluster.hci.configureHciCluster.wizard.dvsConfig.existingNetworkSelectorDialog.newDvsLabel\" | localized}}\n         </label>\n      </clr-checkbox-wrapper>\n   </div>\n</vsan-default-prompt>\n","/* Copyright 2018-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component} from \"@angular/core\";\nimport {InputProperty, OutputProperty, WizardPage} from \"@component/wizard/flow-metadata\";\nimport {PageControls} from \"@component/wizard/flow-wizard.component\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {ConfigureWizardData} from \"@generated/configure-wizard-data\";\n\n@WizardPage(\n      VsanUiUtils.getString(\"vsan.cluster.hci.configureHciCluster.dialog.supportInsight.tab.title\"),\n      VsanUiUtils.getString(\"vsan.cluster.hci.configureHciCluster.dialog.supportInsight.title\"),\n)\n@Component({\n   templateUrl: \"support-insight-page.html\",\n   styleUrls: [\"support-insight-page.scss\"],\n})\nexport class SupportInsightPageComponent {\n\n   @InputProperty()\n   pageControls: PageControls;\n\n   @InputProperty()\n   @OutputProperty()\n   configureWizardData: ConfigureWizardData;\n\n   private _hideSupportInsight: boolean;\n\n   get hideSupportInsight(): boolean {\n      return this._hideSupportInsight;\n   }\n\n   set hideSupportInsight(value: boolean) {\n      this._hideSupportInsight = value;\n      this.configureWizardData.isSupportInsightStepHidden = value;\n      this.pageControls.rebuildToc();\n   }\n\n   private _disableSupportInsight: boolean = false;\n\n   get disableSupportInsight(): boolean {\n      return this._disableSupportInsight;\n   }\n\n   set disableSupportInsight(val: boolean) {\n      this._disableSupportInsight = val;\n      this.configureWizardData.disableSupportInsight = val;\n      // The hide checkbox only makes sense if the service is disabled, so reset it's state if it is enabled.\n      if (!val) {\n         this.hideSupportInsight = false;\n      }\n      this.pageControls.rebuildToc();\n   }\n}","<!--Copyright 2017-2020 VMware, Inc. All rights reserved. -- VMware Confidential-->\n<form [formGroup]=\"form\" class=\"clr-form clr-form-compact\" data-test-id=\"general-settings-container\">\n   <div class=\"clr-form-control clr-row\">\n      <label for=\"dsName-{{service}}\" class=\"clr-control-label clr-col-4\">\n         {{\"vsan.cluster.hci.configureHciCluster.wizard.networking.distributedSwitchLabel\" | localized}}\n      </label>\n      <span id=\"dsName-{{service}}\" class=\"text-nowrap clr-col-8\" title=\"{{dsName}}\">\n         {{dsName}}\n      </span>\n   </div>\n   <div class=\"clr-form-control clr-row\" *ngIf=\"!isExtend\">\n      <label class=\"clr-control-label clr-col-4\">\n         {{\"vsan.cluster.hci.configureHciCluster.wizard.networking.distributedPortGroupLabel\" | localized}}\n      </label>\n      <span id=\"dvpgName-{{service}}\" class=\"text-nowrap clr-col-8\" title=\"{{dvpg.name}}\">\n         {{dvpg.name}}\n      </span>\n   </div>\n\n   <div *ngIf=\"isExtend || dvpg?.existingDvpg\" class=\"clr-row\">\n      <div id=\"extend-cluster-networking-vlan-id-label\" class=\"clr-col-4\">\n         {{vlanLabel}}\n      </div>\n      <div id=\"vlan-id-value\" class=\"clr-col-8\">{{vlanId}}</div>\n   </div>\n   <ng-container *ngIf=\"!isExtend && !dvpg?.existingDvpg\">\n      <div class=\"clr-form-control clr-row\">\n         <div class=\"clr-checkbox-wrapper clr-col-4\">\n            <input id=\"useVlan-{{service}}\"\n                   formControlName=\"useVlan\"\n                   class=\"clr-checkbox\"\n                   type=\"checkbox\"\n                   (change)=\"disableVlanInput()\">\n            <label for=\"useVlan-{{service}}\">\n               {{\"vsan.cluster.hci.configureHciCluster.wizard.networking.useVlanLabel\" | localized}}\n            </label>\n         </div>\n         <div class=\"clr-control-container clr-col-8 error-control\"\n              [ngClass]=\"{'clr-error' : invalid(vlan)}\">\n            <div class=\"clr-input-wrapper\">\n               <input type=\"text\"\n                      id=\"vlan-{{service}}\"\n                      class=\"clr-input\"\n                      formControlName=\"vlan\"\n                      [required]=\"useVlan\"\n                      size=\"4\"\n                      [attr.aria-describedby]=\"'vlan-'+service+'-error'\"/>\n               <clr-icon class=\"clr-validate-icon\"\n                         shape=\"exclamation-circle\"\n                         title=\"{{'vsan.common.srMessage.error' | localized}}\"\n                         [attr.aria-label]=\"'vsan.common.srMessage.error' | localized\">\n               </clr-icon>\n            </div>\n            <span id=\"vlan-{{service}}-error\" class=\"clr-subtext\" *ngIf=\"invalid(vlan)\">\n              {{'vsan.cluster.hci.configureHciCluster.wizard.networking.useVlan.wrongInput' | localized}}\n            </span>\n         </div>\n      </div>\n   </ng-container>\n   <div class=\"clr-form-control clr-row\">\n      <label for=\"protocol-{{service}}\" class=\"clr-control-label clr-col-4\">\n         {{\"vsan.cluster.hci.configureHciCluster.wizard.networking.protocolLabel\" | localized}}\n      </label>\n      <div class=\"clr-control-container clr-col-8\">\n         <div class=\"clr-select-wrapper\">\n            <select id=\"protocol-{{service}}\" formControlName=\"protocol\" class=\"clr-select\">\n               <option value=\"{{Protocol.IPV4}}\">\n                  {{\"vsan.cluster.hci.configureHciCluster.wizard.networking.protocolOption.ipv4\" | localized}}\n               </option>\n               <option value=\"{{Protocol.IPV6}}\">\n                  {{\"vsan.cluster.hci.configureHciCluster.wizard.networking.protocolOption.ipv6\" | localized}}\n               </option>\n               <option value=\"{{Protocol.MIXED}}\">\n                  {{\"vsan.cluster.hci.configureHciCluster.wizard.networking.protocolOption.mixed\" | localized}}\n               </option>\n            </select>\n         </div>\n      </div>\n   </div>\n</form>\n\n<clr-tabs data-test-id=\"host-settings-container\" *ngIf=\"showIpv4Tab && !showIpv6Tab\">\n   <clr-tab>\n      <button clrTabLink class=\"btn btn-link ipv4-tab-link\"><!-- keep ipv4-tab-link for automation -->\n         {{'vsan.cluster.hci.configureHciCluster.wizard.networking.ipv4Tab.title' | localized}}\n         <clr-icon *ngIf=\"ipv4TabError\" shape=\"error-standard\" class=\"is-error\"></clr-icon>\n      </button>\n      <clr-tab-content *clrIfActive>\n         <vsan-ipv4-settings [hosts]=\"hosts\"\n                             [pageControls]=\"pageControls\"\n                             [form]=\"form\"\n                             [showDefaultGateway]=\"showDefaultGateway\"\n                             [ipSettingsInfoMessage]=\"ipSettingsInfoMessage\"\n                             (onFormChange)=\"disableSubsequentPages()\">\n         </vsan-ipv4-settings>\n      </clr-tab-content>\n   </clr-tab>\n</clr-tabs>\n<clr-tabs *ngIf=\"!showIpv4Tab && showIpv6Tab\">\n   <clr-tab>\n      <button clrTabLink class=\"btn btn-link ipv6-tab-link\">\n         {{'vsan.cluster.hci.configureHciCluster.wizard.networking.ipv6Tab.title' | localized}}\n         <clr-icon *ngIf=\"ipv6TabError\" shape=\"error-standard\" class=\"is-error\"></clr-icon>\n      </button>\n      <clr-tab-content *clrIfActive>\n         <vsan-ipv6-settings [hosts]=\"hosts\"\n                             [pageControls]=\"pageControls\"\n                             [form]=\"form\"\n                             [showDefaultGateway]=\"showDefaultGateway\"\n                             [ipSettingsInfoMessage]=\"ipSettingsInfoMessage\"\n                             (onFormChange)=\"disableSubsequentPages()\">\n         </vsan-ipv6-settings>\n      </clr-tab-content>\n   </clr-tab>\n</clr-tabs>\n<clr-tabs *ngIf=\"showIpv4Tab && showIpv6Tab\">\n   <clr-tab>\n      <button clrTabLink class=\"btn btn-link ipv4-tab-link\">\n         {{'vsan.cluster.hci.configureHciCluster.wizard.networking.ipv4Tab.title' | localized}}\n         <clr-icon *ngIf=\"ipv4TabError\" shape=\"error-standard\" class=\"is-error\"></clr-icon>\n      </button>\n      <clr-tab-content *clrIfActive>\n         <vsan-ipv4-settings [hosts]=\"hosts\"\n                             [pageControls]=\"pageControls\"\n                             [form]=\"form\"\n                             [showDefaultGateway]=\"showDefaultGateway\"\n                             [ipSettingsInfoMessage]=\"ipSettingsInfoMessage\"\n                             (onFormChange)=\"disableSubsequentPages()\">\n         </vsan-ipv4-settings>\n      </clr-tab-content>\n   </clr-tab>\n   <clr-tab>\n      <button clrTabLink class=\"btn btn-link ipv6-tab-link\">\n         {{'vsan.cluster.hci.configureHciCluster.wizard.networking.ipv6Tab.title' | localized}}\n         <clr-icon *ngIf=\"ipv6TabError\" shape=\"error-standard\" class=\"is-error\"></clr-icon>\n      </button>\n      <clr-tab-content *clrIfActive>\n         <vsan-ipv6-settings [hosts]=\"hosts\"\n                             [pageControls]=\"pageControls\"\n                             [form]=\"form\"\n                             [showDefaultGateway]=\"showDefaultGateway\"\n                             [ipSettingsInfoMessage]=\"ipSettingsInfoMessage\"\n                             (onFormChange)=\"disableSubsequentPages()\">\n         </vsan-ipv6-settings>\n      </clr-tab-content>\n   </clr-tab>\n</clr-tabs>\n"],"sourceRoot":"webpack:///"}