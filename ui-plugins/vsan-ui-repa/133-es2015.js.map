{"version":3,"sources":["./src/app/vsan/cluster/configure/action/performance/edit-perf.component.ts","./src/app/vsan/common/service/flow/loading-indicator.decorator.ts","./src/app/vsan/common/service/flow/error-handler.decorator.ts","./src/app/vsan/common/service/flow/loader.decorator.ts","./src/app/vsan/cluster/configure/action/performance/edit-perf.html","./src/app/vsan/cluster/configure/action/performance/edit-perf.module.ts","./src/app/vsan/common/service/flow/loading-flow-wrapper.data.ts"],"names":[],"mappings":"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","file":"133-es2015.js","sourcesContent":["/* Copyright 2017-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, OnInit} from \"@angular/core\";\nimport {AlertType} from \"@component/validation/alert-type\";\nimport {PbmDataProvider} from \"@generated/pbm-data-provider\";\nimport {PerfEditData} from \"@generated/perf-edit-data\";\nimport {PerfStatesObjSpec} from \"@generated/perf-states-obj-spec\";\nimport {PerfStatsObjectInfo} from \"@generated/perf-stats-object-info\";\nimport {StoragePolicyData} from \"@generated/storage-policy-data\";\nimport {VsanCapabilityData} from \"@generated/vsan-capability-data\";\nimport {VsanCapabilityProvider} from \"@generated/vsan-capability-provider\";\nimport {VsanPerfMutationProvider} from \"@generated/vsan-perf-mutation-provider\";\nimport {VsanPerfPropertyProvider} from \"@generated/vsan-perf-property-provider\";\nimport {ClusterComputeResource} from \"@service/client/dataservice/data-service-property\";\nimport {DataServiceClient} from \"@service/client/dataservice/data-service.service\";\nimport {ErrorHandler} from \"@service/flow/error-handler.decorator\";\nimport {Loader} from \"@service/flow/loader.decorator\";\nimport {LoadingIndicator} from \"@service/flow/loading-indicator.decorator\";\nimport {ManagedObject} from \"@service/managed-object\";\nimport {SrMessageType} from \"@service/screen-reader-announcer.service\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\n\n@Component({\n   templateUrl: \"edit-perf.html\",\n   styleUrls: [\"edit-perf.scss\"],\n   selector: \"vsan-edit-perf-config\",\n})\nexport class EditPerfComponent implements OnInit {\n   AlertType: typeof AlertType = AlertType;\n   VsanUiUtils: typeof VsanUiUtils = VsanUiUtils;\n\n   private static readonly EMPTY_CLUSTER_DEFAULT_PROFILE_NAME: string = \"vSAN Default Storage Policy\";\n\n   isPerfServiceEnabled: boolean;\n\n   private vcCapabilityData: VsanCapabilityData;\n   private clusterCapabilityData: VsanCapabilityData;\n\n   verboseModeSupported: boolean;\n   turnOnverboseMode: boolean;\n\n   networkDiagnosticModeSupported: boolean;\n   originalNetworkDiagnosticModeTurnedOn: boolean = false;\n   turnOnNetworkDiagnosticMode: boolean = false;\n\n   errorMessages: string[] = [];\n   availablePolicies: StoragePolicyData[] = [];\n\n   clusterRef: ManagedObject;\n   clusterName: string;\n   perfObject: PerfStatsObjectInfo;\n\n   @LoadingIndicator()\n   loading: boolean;\n\n   policyAlert: string;\n   policyAlertType: string;\n\n   private isFileAnalyticsEnabled: boolean;\n\n   private _currentPolicyId: string;\n\n   get currentPolicyId(): string {\n      return this._currentPolicyId;\n   }\n\n   set currentPolicyId(id: string) {\n      this._currentPolicyId = id;\n      this.updatePolicyAlert();\n   }\n\n   constructor(private propertyProvider: VsanPerfPropertyProvider,\n         private mutationProvider: VsanPerfMutationProvider,\n         private pbmProvider: PbmDataProvider,\n         private capabilityProvider: VsanCapabilityProvider,\n         private dataSvc: DataServiceClient) {\n   }\n\n   @Loader({srMessage: \"vsan.services.performance.service.dlg.title\", srMessageType: SrMessageType.PAGE_TITLE})\n   async ngOnInit(): Promise<void> {\n      const context: any = VsanUiUtils.getModalContext();\n      this.clusterRef = context.clusterRef;\n      this.clusterName = context.clusterName;\n\n      // Query cluster name if it is not passed by parent view.\n      if (!this.clusterName) {\n         this.clusterName = await this.dataSvc.getProperty(ClusterComputeResource.name, this.clusterRef);\n      }\n\n      await this.loadConfigData();\n      this.readPerfSettings();\n   }\n\n   private readPerfSettings(): void {\n      if (this.perfObject) {\n         this.originalNetworkDiagnosticModeTurnedOn = this.perfObject.networkDiagnosticModeEnabled;\n         this.turnOnverboseMode = this.perfObject.verboseModeEnabled;\n      }\n      this.verboseModeSupported = this.vcCapabilityData.isPerfVerboseModeSupported;\n      this.networkDiagnosticModeSupported = this.clusterCapabilityData.isPerfDiagnosticModeSupported;\n\n      this.updatePolicyAlert();\n\n      this.turnOnNetworkDiagnosticMode = this.originalNetworkDiagnosticModeTurnedOn;\n\n      if (!this.currentPolicyId && this.availablePolicies.length > 0) {\n         const defaultPolicy: StoragePolicyData = this.availablePolicies.find(policy => policy.isDefault);\n         if (defaultPolicy) {\n            this.currentPolicyId = defaultPolicy.id;\n         } else {\n            /**\n             * There could be no default policy if the cluster is empty,\n             * we should choose the 'vSAN Default Storage Policy' in this case.\n             */\n            const vsanDefault: StoragePolicyData = this.availablePolicies.find(policy =>\n                  policy.name === EditPerfComponent.EMPTY_CLUSTER_DEFAULT_PROFILE_NAME);\n            this.currentPolicyId = !vsanDefault ? this.availablePolicies[0].id : vsanDefault.id;\n         }\n      }\n   }\n\n   private async loadConfigData(): Promise<void> {\n      let perfEditData: PerfEditData;\n      [\n         perfEditData,\n         this.vcCapabilityData,\n         this.clusterCapabilityData,\n         this.availablePolicies] = await Promise.all([\n         this.propertyProvider.getPerfEditData(this.clusterRef),\n         this.capabilityProvider.getVcCapabilityData(this.clusterRef),\n         this.capabilityProvider.getClusterCapabilityData(this.clusterRef),\n         this.pbmProvider.getStoragePolicies(this.clusterRef),\n      ]);\n\n      this.isPerfServiceEnabled = perfEditData.isPerformanceEnabled;\n      this.isFileAnalyticsEnabled = perfEditData.isFileAnalyticsEnabled;\n      this.currentPolicyId = perfEditData.policyId;\n      this.perfObject = perfEditData.perfStatsObjectInfo;\n   }\n\n   private updatePolicyAlert(): void {\n      this.policyAlert = null;\n\n      const currentPolicy: StoragePolicyData =\n            this.availablePolicies.find(policy => policy.id === this.currentPolicyId);\n      if (!currentPolicy) {\n         this.policyAlertType = AlertType.WARNING;\n         if (!this.isPerfServiceEnabled) {\n            // Enable performance services without selecting any policies.\n            this.policyAlert = VsanUiUtils.getString(\"vsan.services.performance.policy.add.no.policy\");\n         } else {\n            // Edit performance services without selecting any policies.\n            this.policyAlert = VsanUiUtils.getString(\"vsan.services.performance.policy.edit.no.policy\");\n         }\n      } else if (!currentPolicy.isCompatible) {\n         this.policyAlertType = AlertType.WARNING;\n         this.policyAlert = VsanUiUtils.getString(\"vsan.services.performance.policy.notCompliant\");\n      } else if (!currentPolicy.hasVsanNamespace) {\n         this.policyAlertType = AlertType.WARNING;\n         this.policyAlert = VsanUiUtils.getString(\"vsan.services.performance.policy.no.vsan.namespace\");\n      }\n   }\n\n   ok(): void {\n      if (!this.isPerfServiceEnabled) {\n         this.onTurnOnPerf();\n      } else {\n         if (!this.validateNetworkDiagnosticModeSetting()) {\n            this.errorMessages = [VsanUiUtils.getString(\"vsan.perf.config.network.diagnostic.mode.off\")];\n            return;\n         }\n         this.onPerfConfigurationChange();\n      }\n   }\n\n   private validateNetworkDiagnosticModeSetting(): boolean {\n      // if the current cluster/hosts doesn't support network diagnostic mode(it could be turned off on vc,\n      // or the cluster has old hosts), but the network diagnostic mode was turned on,\n      // we should only allow user to turn off it\n      return !this.turnOnNetworkDiagnosticMode || this.networkDiagnosticModeSupported;\n   }\n\n   @Loader()\n   private async onTurnOnPerf(): Promise<void> {\n      const taskRef: any = await this.mutationProvider.enablePerfService(\n            this.createPerfStateObjSpec(false, false));\n      this.close(taskRef);\n   }\n\n   @Loader()\n   private async onPerfConfigurationChange(): Promise<void> {\n      const taskRef: any = await this.mutationProvider.editPerfConfiguration(\n            this.createPerfStateObjSpec(this.turnOnverboseMode, this.turnOnNetworkDiagnosticMode));\n      this.close(taskRef);\n   }\n\n   private createPerfStateObjSpec(turnOnVerboseMode: boolean, turnOnNetworkDiagnosticMode: boolean): PerfStatesObjSpec {\n      return PerfStatesObjSpec\n            .Factory\n            .create(this.clusterRef, this.currentPolicyId, turnOnVerboseMode, turnOnNetworkDiagnosticMode);\n   }\n\n   @ErrorHandler()\n   private handleError(error: string): void {\n      this.errorMessages = [error];\n   }\n\n   get isApplyButtonBlocked(): boolean {\n      return this.loading || this.policyAlertType === AlertType.DANGER;\n   }\n\n   close(taskRef: ManagedObject = null): void {\n      VsanUiUtils.closeModalDialog(taskRef);\n   }\n}\n","/* Copyright 2021 VMware, Inc. All rights reserved. -- VMware Confidential */\n\n\n\nimport {LoadingFlowWrapper} from \"@service/flow/loading-flow-wrapper.data\";\n\n/**\n * This property decorator is supposed to be used along with the @Loader decorator.\n * As the @Loader decorator keeps track of all the active loading operations,\n * we can easily know if all the loading is completed. If there are any ongoing loading\n * operations, the property decorated with @LoadingIndicator will be set to \"true\", otherwise - it will be \"false\".\n * You can have as many properties decorated with @LoadingIndicator as you want, but they need to have different names.\n * The LoadingIndicator will show the loading state of the Loader methods with the same name.\n *\n * <pre>\n * @Loader()\n * loadDataSync(): any {\n *    // Load some data\n * }\n *\n * @Loader()\n * loadDataAsync(): Promise<any> {\n *    // Load some data\n * }\n *\n * @LoadingIndicator\n * isLoading: boolean; // The field will be set to \"false\" when the both the methods are complete and the Promise is resolved.\n * </pre>\n */\nexport function LoadingIndicator(props?: LoadingIndicatorProperties): PropertyDecorator {\n   props = props || {};\n   return (targetClass: any, propertyKey: string): void => {\n      Object.defineProperty(targetClass, propertyKey, {\n         get: function (): boolean {\n            if (Array.isArray(props.name)) {\n               return props.name.some((loaderName: string) => (new LoadingFlowWrapper(this, loaderName)).isLoading);\n            }\n\n            return (new LoadingFlowWrapper(this, props.name)).isLoading;\n         },\n      });\n   };\n}\n\nexport interface LoadingIndicatorProperties {\n   name?: string | string[];\n}\n","/* Copyright 2021 VMware, Inc. All rights reserved. -- VMware Confidential */\n\nimport {LoadingFlowWrapper} from \"@service/flow/loading-flow-wrapper.data\";\n\n/**\n * This property decorator is supposed to be used along with the @Loader decorator.\n * If an exception is thrown during the execution of the method decorated with @Loader\n * the ErrorHandler method will be invoked. You can define as many ErrorHandlers as you want,\n * but they must be with different names. The name can be provided as input to the decorator.\n * If a name is set to the ErrorHandler it will handle only the errors thrown by Loader functions\n * with the same name. If no name is passed to the ErrorHandler, it will handle only the errors\n * from Loader functions with no name.\n *\n * <pre>\n * // Example 1:\n * @Loader()\n * loadSyncData(): any {\n *    throw new Error(\"Failed to load sync data\");\n * }\n *\n * @ErrorHandler()\n * handleError(err: any) {\n *    // handle the error.\n * }\n *...\n *\n * // Example 2\n *\n * @Loader({name: \"data-loading-flow})\n * async loadAsyncData(): Promise<any> {\n *    return Promise.reject(\"Failed to load async data\");\n * }\n *\n * @ErrorHandler({name: \"data-loading-flow})\n * handleError(err: any) {\n *    // handle the error.\n * }\n * ...\n * </pre>\n */\nexport function ErrorHandler(props?: ErrorHandlerProperties): MethodDecorator {\n   props = props || {};\n   return (targetClass: any, functionName: string, descriptor: PropertyDescriptor): void => {\n      (new LoadingFlowWrapper(targetClass, props.name)).errorHandler = descriptor.value;\n   };\n}\n\n/**\n * Properties of the ErrorHandler decorator.\n */\nexport interface ErrorHandlerProperties {\n\n   /**\n    * Indicates which @Loder should be handled by this @ErrorHandler\n    */\n   name?: string;\n}\n","/* Copyright 2021-2022 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {ErrorContext, FunctionWrapper} from \"@service/flow/function-wrapper\";\nimport {LoadingFlowWrapper} from \"@service/flow/loading-flow-wrapper.data\";\nimport {ScreenReaderAnnouncerService, SrEvent, SrMessageType} from \"@service/screen-reader-announcer.service\";\nimport {Reflection} from \"@util/reflection\";\nimport {GlobalLogger} from \"../../../../vsan-app.module\";\n\n/**\n * Method decorator that does the following:\n *  - watches for errors and if such appear:\n *       - the error is logged in the browser's console\n *       - the error is logged in the H5C server log\n *       - the related @ErrorMessage fields are populated\n *       - the related @ErrorHandler methods are invoked\n *  - Updates the @LoadingIndicator decorated fields\n *  - Invokes the screen reader service once the loading operation completes successfully\n */\nexport function Loader(params?: LoaderParams): MethodDecorator {\n   // If no params are passed, initialize the variable in order to avoid multiple null-checks\n   params = params || {};\n   return (targetClass: any, functionName: string, descriptor: PropertyDescriptor): void => {\n      // Use the component name as tag in order easily find where the error was thrown.\n      const tag: string = Reflection.getClassName(targetClass);\n      const loaderName: string = params.name;\n      const originalFn: any = descriptor.value;\n\n      descriptor.value = function (): any {\n         const loadingFlowWrapper: LoadingFlowWrapper = new LoadingFlowWrapper(this, loaderName);\n         return (new FunctionWrapper(originalFn))\n               .preExecute(() => {\n                  loadingFlowWrapper.error = undefined;\n                  loadingFlowWrapper.incrementLoads();\n                  ScreenReaderAnnouncerService.invoke(\n                        params.preLoadSrMessage || params.srMessage,\n                        params.srMessageType, SrEvent.LOADING);\n               })\n               .postExecute(() => {\n                  ScreenReaderAnnouncerService.invoke(params.srMessage, params.srMessageType, SrEvent.LOADED);\n               })\n               .onError((ex: any) => {\n                  processError(loadingFlowWrapper, tag, ex);\n                  const rethrow: boolean = shouldRethrow(loadingFlowWrapper, params);\n                  if (!rethrow) {\n                     ex = invokeErrorHandler(loadingFlowWrapper, ex);\n                  }\n                  return new ErrorContext(rethrow, ex);\n               })\n               .finally(() => {\n                  loadingFlowWrapper.decrementLoads();\n               })\n               .invoke(loadingFlowWrapper.backingObject, arguments);\n      };\n   };\n}\n\n/**\n * Parameters for the @Loader decorator\n */\nexport interface LoaderParams {\n\n   /**\n    * The name of the loader by which will be resolved te @LoadingIndicator, @ErrorHandler and @ErrorMessage\n    */\n   name?: string;\n\n   /**\n    * Indicates if the error should be rethrown after being processed by the @ErrorHandlers\n    */\n   rethrow?: boolean;\n\n   /**\n    * Used along with srMessageType to create the screen reader message to be announced after the loading\n    * operation completes successfully.\n    * If preLoadSrMessage is not set, srMessage will also be announced when the loading operation starts.\n    */\n   srMessage?: string;\n\n   /**\n    * Used when the message in preExecute() should be different than the one in postExecute().\n    * If not set, srMessage will be used in both places.\n    * Should be given a value when the srMessageType is set to CUSTOM,\n    * because otherwise the exact same message will be announced in preExecute() and postExecute().\n    */\n   preLoadSrMessage?: string;\n\n   /**\n    * The screen reader message type. Used for creating an appropriate message.\n    */\n   srMessageType?: SrMessageType;\n}\n\n/**\n * Handles the given error by:\n *  - logging the error in the browsers console\n *  - logging the error in the H5C backend log\n *  - updates all @ErrorMessage fields\n */\nfunction processError(wrapper: LoadingFlowWrapper, tag: string, ex: any): void {\n   // Log the error to the backend\n   GlobalLogger.error(tag, ex);\n\n   // Cache the error so it can be retrieved by @ErrorMessage decorated fields\n   wrapper.error = ex;\n}\n\n/**\n * Invokes the error handler (if defined)\n */\nfunction invokeErrorHandler(wrapper: LoadingFlowWrapper, ex: any): any {\n   const handler: any = wrapper.errorHandler;\n   return !!handler\n         ? handler.call(wrapper.backingObject, ex)\n         : null;\n}\n\n/**\n * Reject the promise only if:\n * 1. there are no handlers declared\n * 2. the components has explicitly requested the error to be rethrown\n */\nfunction shouldRethrow(wrapper: LoadingFlowWrapper, params: LoaderParams): boolean {\n   return !wrapper.errorHandler && !wrapper.errorMessageGetter\n         || !!params.rethrow;\n}\n","<!--Copyright 2021-2022 VMware, Inc. All rights reserved. -- VMware Confidential-->\n<vsan-edit-prompt\n      [title]=\"'vsan.services.performance.service.dlg.title' | localized\"\n      [subtitle]=\"clusterName\"\n      [blockContent]=\"loading\"\n      [blockButton]=\"isApplyButtonBlocked\"\n      [confirmText]=\"VsanUiUtils.getEditServiceButtonText(isPerfServiceEnabled)\"\n      [(alertMessages)]=\"errorMessages\"\n      (onConfirm)=\"ok()\">\n   <div class=\"dialog-container\">\n       <vsan-validation id=\"policy-alert\"\n                       *ngIf=\"policyAlert\"\n                       [isSmall]=\"true\"\n                       [allowClose]=\"false\"\n                       [alert]=\"policyAlert\"\n                       [alertType]=\"policyAlertType\">\n      </vsan-validation>\n\n      <form clrForm clrLayout=\"horizontal\">\n         <clr-select-container>\n            <label class=\"clr-col-12 clr-col-md-4\">{{\"vsan.services.performance.policy.label\" | localized}}</label>\n            <select clrSelect\n                    id=\"policy-selector\"\n                    class=\"clr-col-12 clr-col-md-8\"\n                    name=\"profileSelector\"\n                    [(ngModel)]=\"currentPolicyId\">\n               <option *ngFor=\"let policy of availablePolicies\"\n                       [value]=\"policy.id\"\n                       [selected]=\"currentPolicyId == policy.id\">\n                  {{policy.name}}\n               </option>\n            </select>\n            <clr-control-helper>\n               {{\"vsan.services.performance.service.policy.desc\" | localized}}\n            </clr-control-helper>\n         </clr-select-container>\n\n\n         <clr-checkbox-container *ngIf=\"verboseModeSupported && isPerfServiceEnabled\">\n            <label class=\"clr-col-12 clr-col-md-4\">{{\"vsan.services.performance.verbose.label\" | localized}}</label>\n            <clr-checkbox-wrapper>\n               <input type=\"checkbox\"\n                      class=\"clr-col-12 clr-col-md-8\"\n                      clrCheckbox\n                      id=\"enable-perf-verbose-mode-toggle\"\n                      name=\"enable-perf-verbose-mode-toggle\"\n                      [(ngModel)]=\"turnOnverboseMode\"/>\n               <label>{{\"vsan.services.performance.verboseMode.enable\" | localized}}</label>\n            </clr-checkbox-wrapper>\n            <clr-control-helper>\n               {{\"vsan.services.performance.edit.verbose.warning\" | localized}}\n            </clr-control-helper>\n         </clr-checkbox-container>\n\n         <ng-container\n               *ngIf=\"isPerfServiceEnabled && (networkDiagnosticModeSupported || originalNetworkDiagnosticModeTurnedOn)\">\n            <clr-checkbox-container>\n               <label class=\"clr-col-12 clr-col-md-4\">\n                  {{\"vsan.services.performance.network.diagnostic.label\" | localized}}\n               </label>\n               <clr-checkbox-wrapper>\n                  <input type=\"checkbox\"\n                         class=\"clr-col-12 clr-col-md-8\"\n                         clrCheckbox\n                         id=\"enable-network-diagnostics-mode-toggle\"\n                         name=\"enable-network-diagnostics-mode-toggle\"\n                         [(ngModel)]=\"turnOnNetworkDiagnosticMode\"/>\n                  <label>{{\"vsan.services.performance.network.diagnostic.enable\" | localized}}</label>\n               </clr-checkbox-wrapper>\n               <clr-control-helper>\n                  {{\"vsan.services.performance.network.diagnostic.desc\" | localized}}\n               </clr-control-helper>\n            </clr-checkbox-container>\n         </ng-container>\n      </form>\n   </div>\n</vsan-edit-prompt>\n","/* Copyright 2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {NgModule} from \"@angular/core\";\nimport {CommonModule} from \"@angular/common\";\nimport {FormsModule} from \"@angular/forms\";\nimport {RouterModule, Routes} from \"@angular/router\";\nimport {ClarityModule} from \"@clr/angular\";\nimport {CommonPipeModule} from \"@pipe/common-pipe.module\";\nimport {ValidationModule} from \"@component/validation/validation.module\";\nimport {PromptModule} from \"@component/dialog/prompt/prompt.module\";\nimport {CommonDirectiveModule} from \"@directive/common-directive.module\";\nimport {EditPerfComponent} from './edit-perf.component';\n\n\nconst routes: Routes = [\n   {\n      path: \"\",\n      component: EditPerfComponent,\n   },\n];\n\n@NgModule({\n   imports: [\n      CommonModule,\n      FormsModule,\n      ClarityModule,\n      CommonPipeModule,\n      CommonDirectiveModule,\n      ValidationModule,\n      PromptModule,\n      RouterModule.forChild(routes),\n   ],\n   declarations: [\n      EditPerfComponent,\n   ],\n})\nexport class EditPerfModule {\n}","/* Copyright 2021 VMware, Inc. All rights reserved. -- VMware Confidential */\n\n/**\n * This class is used internally by the @Loader decorator and the decorators related to it.\n * It encapsulates the logic for accessing internal properties needed for the decorators to work.\n * The state of this class is kept in the \"backingObject\" passed to the constructor. This allows\n * the wrapper class to be easily recreated wherever it is needed without worrying about keeping its reference.\n *\n * <pre>\n * const obj: any = {};\n *\n * // Create a new LoadingFlowWrapper over obj\n * const wrapper1: LoadingFlowWrapper = new LoadingFlowWrapper(obj);\n * // Set the error field to \"alabala\" string\n * wrapper1.error = \"alabala\";\n *\n * // Create a new LoadingFlowWrapper over obj\n * const wrapper2: LoadingFlowWrapper = new LoadingFlowWrapper(obj);\n * console.log(wrapper2.error); // Prints \"alabala\" because the backing object is the same\n * </pre>\n */\nexport class LoadingFlowWrapper {\n\n   private static readonly ERROR_HOLDER: string = \"__ex__\";\n   private static readonly ERROR_HANDLERS_REF_HOLDER: string = \"__errorHandlers__\";\n   private static readonly ERROR_MESSAGE_GETTERS_REF_HOLDER: string = \"__errorMessageGetters__\";\n   private static readonly LOADS_COUNT_HOLDER: string = \"__loadsCount__\";\n\n   private static readonly DEFAULT_NAME: string = \"default-loader\";\n\n   constructor(private _backingObject: any,\n         private loaderName: string) {\n      this.loaderName = loaderName || LoadingFlowWrapper.DEFAULT_NAME;\n\n      // Init all collections\n      this.initCollection(LoadingFlowWrapper.ERROR_HOLDER);\n      this.initCollection(LoadingFlowWrapper.ERROR_HANDLERS_REF_HOLDER);\n      this.initCollection(LoadingFlowWrapper.ERROR_MESSAGE_GETTERS_REF_HOLDER);\n      this.initCollection(LoadingFlowWrapper.LOADS_COUNT_HOLDER);\n   }\n\n   private initCollection(collectionName: string): void {\n      // Check first if the collection hasn't been initialized by another wrapper.\n      // If so, do nothing as we don't want to override the data already set.\n      if (!this.backingObject[collectionName]) {\n         this.backingObject[collectionName] = [];\n      }\n   }\n\n   /**\n    * The original object which methods/properties were decorated\n    */\n   get backingObject(): any {\n      return this._backingObject;\n   }\n\n   /**\n    * Returns the thrown error\n    */\n   get error(): any {\n      return this.backingObject[LoadingFlowWrapper.ERROR_HOLDER][this.loaderName];\n   }\n\n   /**\n    * Sets the thrown error\n    */\n   set error(val: any) {\n      this.backingObject[LoadingFlowWrapper.ERROR_HOLDER][this.loaderName] = val;\n   }\n\n   /**\n    * Returns the number of active loading operations\n    */\n   private get loadsCount(): number {\n      return this.backingObject[LoadingFlowWrapper.LOADS_COUNT_HOLDER][this.loaderName];\n   }\n\n   /**\n    * Returns true if there are running loader methods or promises.\n    */\n   get isLoading(): boolean {\n      return !!this.loadsCount;\n   }\n\n   /**\n    * Increase the number of active loading operations by one\n    */\n   incrementLoads(): void {\n      // Initialize the counter if it hasn't been initialized yet\n      if (!this.loadsCount) {\n         this.backingObject[LoadingFlowWrapper.LOADS_COUNT_HOLDER][this.loaderName] = 0;\n      }\n      this.backingObject[LoadingFlowWrapper.LOADS_COUNT_HOLDER][this.loaderName] += 1;\n   }\n\n   /**\n    * Decreases the number of active loading operations by one\n    */\n   decrementLoads(): void {\n      this.backingObject[LoadingFlowWrapper.LOADS_COUNT_HOLDER][this.loaderName] -= 1;\n   }\n\n   get errorHandler(): any {\n      return this.backingObject[LoadingFlowWrapper.ERROR_HANDLERS_REF_HOLDER][this.loaderName];\n   }\n\n   /**\n    * Registers a new error handler.\n    */\n   set errorHandler(errorHandler: any) {\n      if (!!this.errorHandler) {\n         throw new Error(`ErrorHandler for loader \"${this.loaderName}\" already registered!`);\n      }\n      this.backingObject[LoadingFlowWrapper.ERROR_HANDLERS_REF_HOLDER][this.loaderName] = errorHandler;\n   }\n\n   get errorMessageGetter(): any {\n      return this.backingObject[LoadingFlowWrapper.ERROR_MESSAGE_GETTERS_REF_HOLDER][this.loaderName];\n   }\n\n   set errorMessageGetter(getter: any) {\n      if (!!this.errorMessageGetter) {\n         throw new Error(`ErrorMessage for loader \"${this.loaderName}\" already registered!`);\n      }\n      this.backingObject[LoadingFlowWrapper.ERROR_MESSAGE_GETTERS_REF_HOLDER][this.loaderName] = getter;\n   }\n}\n"],"sourceRoot":"webpack:///"}