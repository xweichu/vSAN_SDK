{"version":3,"sources":["./src/app/vsan/performance/view/perf-detail-charts.html","./src/app/vsan/performance/view/perf-detail-charts.component.ts","./src/app/vsan/performance/export/perf-chart-export.html","./src/app/vsan/performance/view/single-entity-data-perf.component.ts","./src/app/vsan/performance/view/base-entity-data-perf.component.ts","./src/app/vsan/performance/export/perf-chart-export.component.ts","./src/app/vsan/performance/view/single-entity-data-perf.html"],"names":[],"mappings":"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","file":"55-es2015.js","sourcesContent":["<!--Copyright 2017-2020 VMware, Inc. All rights reserved. -- VMware Confidential-->\n<div class=\"spinner spinner-lg central-spinner\"\n     *ngIf=\"loading || perfOrchestrator.isLoading\">\n</div>\n<vsan-validation id=\"details-error-msg\"\n                 alertType=\"danger\"\n                 *ngIf=\"alertMessage\"\n                 [alert]=\"alertMessage\"\n                 [allowReload]=\"allowReloadWhenError\"\n                 (onReload)=\"reload()\"\n                 (onClosed)=\"alertMessage = null\">\n</vsan-validation>\n<ng-container *ngIf=\"!loading && !parentLoading && !perfOrchestrator.isLoading\">\n   <ng-container *ngIf=\"perfOrchestrator.isShowSpecificModeEnabled\">\n      <ng-container *ngIf=\"perfOrchestrator.isSeparatlyViewStateEnabled\">\n         <div class=\"title\" *ngIf=\"perfOrchestrator.data.specifiedEntitiesMetrics.length !== 0\">\n            <span>{{perfOrchestrator.entityGraph?.description}}</span>\n            <clr-button-group class=\"btn-link buttons-group\">\n               <clr-button id=\"ask-vmware\"\n                           *ngIf=\"isAskVmwareLinkVisible\"\n                           class=\"btn btn-sm\"\n                           (click)=\"askVMware()\">\n                  {{\"vsan.perf.chart.link\" | localized}}\n               </clr-button>\n            </clr-button-group>\n         </div>\n         <!-- We need to manually add the vsan unavailable view, because when perfOrchestrator.data.specifiedEntitiesMetrics is empty, -->\n         <!-- there is no vsan-perf-charts-container at all. -->\n         <vsan-unavailable-view *ngIf=\"perfOrchestrator.data.specifiedEntitiesMetrics.length === 0\"\n                                [unavailableViewSpec]=\"separateViewNoDataAvailable\">\n         </vsan-unavailable-view>\n         <section *ngFor=\"let data of perfOrchestrator.data.specifiedEntitiesMetrics\" class=\"nav-group\">\n            <vsan-perf-charts-container class=\"separately-chart\"\n                                        [data]=\"perfOrchestrator.getEntityGraphDataById(data.entityRefId)\"\n                                        [icon]=\"getEntityByVsanUuid(data.entityRefId).icon\"\n                                        [title]=\"getEntityByVsanUuid(data.entityRefId).entityName\"\n                                        [compactMode]=\"entity?.configSpec.graphs.length > 2\"\n                                        [currentTimeRange]=\"timeRange\"\n                                        [isShowAllLinkVisible]=\"false\"\n                                        [isZoomButtonVisible]=\"true\"\n                                        [isAskVmwareLinkVisible]=\"false\"\n                                        [isShowGraphDescription]=\"false\"\n                                        [isEmptyChartsVisible]=\"!alertMessage\"\n                                        [customizableThresholds]=\"customizableThresholds\"\n                                        (allChartsLoaded)=\"onSpecifiedEntitiesChartsLoaded($event, getEntityByVsanUuid(data.entityRefId).entityName)\">\n            </vsan-perf-charts-container>\n         </section>\n      </ng-container>\n      <vsan-perf-charts-container *ngIf=\"perfOrchestrator.isConsolidatedViewStateEnabled\"\n                                  id=\"consolidated-charts-container\"\n                                  [consolidatedEntitiesData]=\"consolidatedEntitiesData\"\n                                  [consolidatedData]=\"perfOrchestrator.data.entitiesGraphData\"\n                                  [title]=\"perfOrchestrator.entityGraph?.description\"\n                                  [subtitle]=\"extraDesc\"\n                                  [showHeaderSection]=\"showHeaderSection\"\n                                  [currentTimeRange]=\"timeRange\"\n                                  [isShowAllLinkVisible]=\"false\"\n                                  [visibleGraphId]=\"visibleGraphId\"\n                                  [isAskVmwareLinkVisible]=\"isAskVmwareLinkVisible\"\n                                  [isEmptyChartsVisible]=\"!alertMessage\"\n                                  [customizableThresholds]=\"customizableThresholds\"\n                                  [chartWidth]=\"chartWidth\"\n                                  [chartHeight]=\"chartHeight\"\n                                  (allChartsLoaded)=\"onAllChartsLoaded($event)\">\n      </vsan-perf-charts-container>\n   </ng-container>\n\n   <vsan-perf-charts-container *ngIf=\"perfOrchestrator.isShowAverageModeEnabled\"\n                               id=\"charts-container\"\n                               [parentLoading]=\"loading && parentLoading\"\n                               [isRealtime]=\"isRealtime\"\n                               [data]=\"graphsData\"\n                               [title]=\"collapsible ? null : averageModeEntityDescription\"\n                               [subtitle]=\"extraDesc\"\n                               [currentTimeRange]=\"timeRange\"\n                               [isShowAllLinkVisible]=\"false\"\n                               [isAskVmwareLinkVisible]=\"isAskVmwareLinkVisible\"\n                               [isEmptyChartsVisible]=\"!alertMessage\"\n                               [collapsible]=\"collapsible\"\n                               [customizableThresholds]=\"customizableThresholds\"\n                               [visibleGraphId]=\"visibleGraphId\"\n                               (allChartsLoaded)=\"onAllChartsLoaded($event)\"\n                               [keepPlotLineOnClick]=\"keepPlotLineOnClick\"\n                               [showHeaderSection]=\"showHeaderSection\"\n                               (onPlotLineChanged)=\"onPlotLineChanged.emit($event)\"\n                               (onTooltipActionClicked)=\"onTooltipActionClicked.emit($event)\"\n                               [selectedPlotLineValue]=\"selectedPlotLineValue\"\n                               [actionLink]=\"actionLink\">\n   </vsan-perf-charts-container>\n   <vsan-perf-charts-container *ngIf=\"perfOrchestrator.isShowAverageModeEnabled && ioInsightGraphsData.length > 0\"\n                               id=\"ioinsight-charts-container\"\n                               [data]=\"ioInsightGraphsData\"\n                               [title]=\"getIoInsightInstances()\"\n                               [subtitle]=\"extraDesc\"\n                               [currentTimeRange]=\"timeRange\"\n                               [isShowAllLinkVisible]=\"false\"\n                               [isAskVmwareLinkVisible]=\"isAskVmwareLinkVisible\"\n                               [isEmptyChartsVisible]=\"!alertMessage\"\n                               [collapsible]=\"collapsible\"\n                               [customizableThresholds]=\"customizableThresholds\"\n                               (allChartsLoaded)=\"onAllChartsLoaded($event)\">\n   </vsan-perf-charts-container>\n</ng-container>\n","/* Copyright 2017-2022 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, EventEmitter, Input, OnInit, Output} from \"@angular/core\";\nimport {ChartPlotLineSelectionData} from \"@component/chart/model/chart-plot-line-selection.data\";\nimport {GraphMetric} from \"@component/chart/performance/graph-metrics.data\";\nimport {PerfChartDataConstants, PerfChartUtil} from \"@component/chart/performance/perf-chart-util\";\nimport {PerfExportData} from \"@component/chart/performance/perf-export-data\";\nimport {PerfGraph} from \"@component/chart/performance/perf-graph\";\nimport {UnavailableViewSpec} from \"@component/unavailable-view/unavailable-view-spec\";\nimport {IoInsightInstance} from \"@generated/io-insight-instance\";\nimport {IoInsightService} from \"@generated/io-insight-service\";\nimport {PerfEntityStateData} from \"@generated/perf-entity-state-data\";\nimport {PerfGraphThreshold} from \"@generated/perf-graph-threshold\";\nimport {PerfMonitorCommonPropsData} from \"@generated/perf-monitor-common-props-data\";\nimport {PerfQueryErrors} from \"@generated/perf-query-errors\";\nimport {PerfQuerySpec} from \"@generated/perf-query-spec\";\nimport {PerfTimeRangeData} from \"@generated/perf-time-range-data\";\nimport {VsanPerfPropertyProvider} from \"@generated/vsan-perf-property-provider\";\nimport {NavigationService} from \"@navigation/navigation.service\";\nimport {ManagedObject} from \"@service/managed-object\";\nimport {Logger} from \"@util/logger\";\nimport {PerfChangeContext} from \"@util/performance/perf-data\";\nimport {PerfOrchestratorService} from \"@util/performance/perf-orchestrator-service\";\nimport {ReferenceWatcher} from \"@util/reference-watcher\";\nimport {VsanDateTimeUtils} from \"@util/vsan-dateteime-util\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {BasePerfEntity} from \"../model/base-perf-entity\";\nimport {NestedPerfEntity} from \"../model/nested-perf-entity\";\nimport {ConsolidatedEntitiesData} from \"./consolidated-entities-data.data\";\nimport {AskVmwareId} from \"@navigation/model/ask-vmware-id\";\n\n@Component({\n   selector: \"vsan-perf-detail-charts\",\n   templateUrl: \"perf-detail-charts.html\",\n   styleUrls: [\"perf-detail-charts.scss\"],\n   providers: [ReferenceWatcher],\n})\nexport class PerfDetailChartsComponent implements OnInit {\n   constructor(private perfPropProvider: VsanPerfPropertyProvider,\n         public perfOrchestrator: PerfOrchestratorService,\n         private navigationService: NavigationService,\n         private ioInsightService: IoInsightService,\n         private refWatcher: ReferenceWatcher) {\n   }\n   VsanUiUtils: typeof VsanUiUtils = VsanUiUtils;\n\n   loading: boolean;\n   alertMessage: string;\n   graphsData: GraphMetric[];\n   ioInsightGraphsData: GraphMetric[] = [];\n   timeRange: PerfTimeRangeData;\n   allowReloadWhenError: boolean = true;\n   ioInsightInstances: IoInsightInstance[] = [];\n   specifiedEntitiesExportData: PerfExportData[] = [];\n   loadedSpecifiedEntitiesCount: number = 0;\n\n   @Input()\n   extraDesc: string;\n\n   @Input()\n   parentLoading: boolean = false;\n\n   @Input()\n   commonPerfData: PerfMonitorCommonPropsData;\n\n   @Input()\n   customizableThresholds: PerfGraphThreshold[];\n\n   @Input()\n   visibleGraphId: string;\n\n   @Input()\n   showHeaderSection: boolean = true;\n\n   @Output()\n   allChartsLoaded: EventEmitter<PerfExportData[]> = new EventEmitter<PerfExportData[]>(true);\n\n   @Input()\n   isAskVmwareLinkVisible: boolean = true;\n\n   @Input()\n   keepPlotLineOnClick: boolean = false;\n\n   @Input()\n   isRealtime: boolean = false;\n\n   @Output()\n   onPlotLineChanged: EventEmitter<ChartPlotLineSelectionData> = new EventEmitter<ChartPlotLineSelectionData>();\n\n   @Output()\n   onTooltipActionClicked: EventEmitter<ChartPlotLineSelectionData> = new EventEmitter<ChartPlotLineSelectionData>();\n\n   @Input()\n   selectedPlotLineValue: string;\n\n   @Input()\n   actionLink: string;\n\n   @Input()\n   consolidatedEntitiesData: ConsolidatedEntitiesData;\n\n   private _entity: BasePerfEntity;\n\n   @Input()\n   set entity(val: BasePerfEntity) {\n      if (val && val.equals(this.entity)) {\n         return;\n      }\n\n      this._entity = val;\n      this.updateGprahsData();\n   }\n\n   get entity(): BasePerfEntity {\n      return this._entity;\n   }\n\n   _chartMetrics: PerfEntityStateData[];\n\n   get chartMetrics(): PerfEntityStateData[] {\n      return this._chartMetrics;\n   }\n\n   @Input()\n   set chartMetrics(value: PerfEntityStateData[]) {\n      this._chartMetrics = value;\n      this.updateGprahsData();\n   }\n\n   @Input()\n   collapsible: boolean;\n\n   @Input()\n   set currentTimeRange(value: PerfTimeRangeData) {\n      this.queryChartsDataByTimeRange(value);\n   }\n\n   @Input()\n   chartWidth: number;\n\n   @Input()\n   chartHeight: number;\n\n   /**\n    * Queries the chart data for the specified time range.\n    * @param timeRange\n    * @param targetCluster Which cluster should the API be invoked onto.\n    *                      In the case of compute-only cluster, the API should be invoked onto the selected\n    *                      server cluster. The compute-only cluster uuid should be passed as an argument.\n    */\n   async queryChartsDataByTimeRange(timeRange: PerfTimeRangeData,\n         targetCluster: ManagedObject = this.commonPerfData.clusterRef,\n         showLoading: boolean = true): Promise<void> {\n      if (!this.isRealtime && !VsanUiUtils.isEmpty(this._chartMetrics)) {\n         this.updateGprahsData();\n         return;\n      }\n\n      this.loading = showLoading || !this.chartMetrics;\n      this.timeRange = timeRange;\n      this.alertMessage = \"\";\n\n      await this.perfPropProvider.getEntityPerfState(targetCluster, this.getPerfMetricsQuerySpecs())\n            .then((data: PerfEntityStateData[]): void => {\n               if (!VsanUiUtils.isEmpty(data)) {\n                  this.chartMetrics = data;\n               }\n               this.loading = false;\n            }).catch(err => {\n               this.handleError(err);\n            });\n   }\n\n   getEntityByVsanUuid(uuid: string): BasePerfEntity {\n      return this.perfOrchestrator.getEntityByVsanUuid(uuid);\n   }\n\n   get averageModeEntityDescription(): string {\n      if (!(this.entity instanceof NestedPerfEntity)) {\n         return this.entity?.configSpec?.description;\n      }\n\n      return `${this.entity?.configSpec?.description} ${this.entity?.combinedEntity?.configSpec?.description}`;\n   }\n\n   getIoInsightInstances(): string {\n      if (this.ioInsightInstances.length === 1) {\n         return VsanUiUtils.getString(\"vsan.monitor.vm.performance.virtualDisk.ioInsight.single\",\n               this.ioInsightInstances[0].name);\n      } else if (this.ioInsightInstances.length > 1) {\n         const instances: string = this.ioInsightInstances.map(instance => instance.name).join(\", \");\n         return VsanUiUtils.getString(\"vsan.monitor.vm.performance.virtualDisk.ioInsight.multy\", instances);\n      }\n   }\n\n   ngOnInit(): void {\n      /*\n      * When selection is changed, then load performance data\n      */\n      this.refWatcher.watchSubscriptionRef(this.perfOrchestrator.change.subscribe((change: PerfChangeContext) => {\n         if (change == null || change === PerfChangeContext.METRICS_FETCHED) {\n            this.resetSpecifiedEntitiesExportData();\n            return;\n         }\n\n         if (this.perfOrchestrator.isShowSpecificModeEnabled && this.perfOrchestrator.data.timeRangeData) {\n            this.requestConsolidatedMetrics();\n         }\n      }));\n   }\n\n   private getPerfMetricsQuerySpecs(): PerfQuerySpec[] {\n      const querySpecs: PerfQuerySpec[] = [];\n      querySpecs.push(this.createQuerySpec(this.entity, this.entity.entityType));\n\n      if (this.entity instanceof NestedPerfEntity) {\n         querySpecs.push(this.createQuerySpec(this.entity.combinedEntity, this.entity.combinedEntity.entityType));\n         if (this.entity.additionalConfigSpecId) {\n            // for virtual-disk charts request also ioinsight charts\n            const entityType: string = this.commonPerfData.entityTypes[this.entity.additionalConfigSpecId].name;\n            querySpecs.push(this.createQuerySpec(this.entity.combinedEntity, entityType));\n         }\n      }\n      return querySpecs;\n   }\n\n   private resetSpecifiedEntitiesExportData(): void {\n      this.loadedSpecifiedEntitiesCount = 0;\n      this.specifiedEntitiesExportData = [];\n      this.allChartsLoaded.emit(null);\n   }\n\n   private async requestConsolidatedMetrics(): Promise<void> {\n      this.loading = true;\n      this.resetSpecifiedEntitiesExportData();\n      this.timeRange = this.perfOrchestrator.data.timeRangeData;\n      const querySpecs: PerfQuerySpec[] = [];\n\n      /*\n      * Create query spec for all selected entities in order to retrieve performance data for them\n      */\n      this.perfOrchestrator.data.selectedEntities\n            .forEach((entity: BasePerfEntity) => {\n               querySpecs.push(this.createQuerySpec(entity, entity.entityType));\n            });\n\n      if (querySpecs.length === 0) {\n         this.perfOrchestrator.data.specifiedEntitiesMetrics = [];\n         this.perfOrchestrator.onEntityPerfDataLoaded();\n         this.loading = false;\n         return;\n      }\n\n      try {\n         this.loading = true;\n         const data: PerfEntityStateData[] = await this.perfPropProvider.getEntityPerfState(\n               this.commonPerfData.clusterRef, querySpecs);\n         this.perfOrchestrator.data.specifiedEntitiesMetrics = data;\n         this.perfOrchestrator.onEntityPerfDataLoaded(data.length);\n      } catch (err) {\n         this.handleError(err);\n      } finally {\n         this.loading = false;\n      }\n   }\n\n   private createQuerySpec(entity: BasePerfEntity, entityType: string): PerfQuerySpec {\n      return PerfQuerySpec.Factory.create(\n            entityType,\n            entity.entityUuid,\n            null, /* group:string, not used*/\n            this.timeRange.from,\n            this.timeRange.to,\n            null, /* interval:number , not used*/\n            null /* labels:string[], not used*/);\n   }\n\n   private handleError = (err: any): void => {\n      if (err.message === PerfQueryErrors.INVALID_ENTITY_REF_ID_KEY()) {\n         this.allowReloadWhenError = false;\n         this.alertMessage = VsanUiUtils.getString(\"vsan.perf.service.chart.unsupportedEntityType.error\");\n      } else {\n         this.allowReloadWhenError = true;\n         this.alertMessage = VsanUiUtils.getString(\"vsan.perf.service.chart.common.error\");\n      }\n      this.graphsData = [];\n      this.ioInsightGraphsData = [];\n      this.ioInsightInstances = [];\n      this.loading = false;\n      Logger.error(err);\n   };\n\n   private updateGprahsData = (): void => {\n      if (!this.chartMetrics || !this.entity) {\n         return;\n      }\n\n      const graphs: PerfGraph[] =\n            this.entity.configSpec.graphs.map(graph => PerfChartUtil.getGraphDefinition(graph));\n\n      if (this.entity instanceof NestedPerfEntity) {\n         // for virtual disks we have combined entity for scsi graphs and additionalConfigSpecs for ioinsight graphs\n         // which have to be handled too\n         graphs.push(...this.entity.combinedEntity.configSpec.graphs\n               .map(graph => PerfChartUtil.getGraphDefinition(graph)));\n\n         this.updateIoInsightGraphsData();\n\n         this.graphsData = this.chartMetrics\n               .filter(metric => !metric.entityRefId.startsWith(PerfChartDataConstants.IOINSIGHT))\n               .map(metric => new GraphMetric(metric, graphs));\n      } else {\n         this.graphsData = this.chartMetrics.map(metric => new GraphMetric(metric, graphs));\n      }\n   };\n\n   private updateIoInsightGraphsData(): void {\n      this.ioInsightGraphsData = [];\n\n      const ioInsightGraphs: PerfGraph[] = [];\n      const additionalConfigSpec: any = this.commonPerfData.entityTypes[this.entity.additionalConfigSpecId];\n      if (additionalConfigSpec) {\n         const ioInsightMetrics: PerfEntityStateData[] =\n               this.chartMetrics.filter(metric => metric.entityRefId.startsWith(PerfChartDataConstants.IOINSIGHT));\n         if (additionalConfigSpec.name && additionalConfigSpec.name === PerfChartDataConstants.IOINSIGHT &&\n               ioInsightMetrics.length) {\n            this.ioInsightService\n                  .getIoInsightInstancesByTime(ManagedObject.contextObject, this.timeRange.from, this.timeRange.to)\n                  .then((data: IoInsightInstance[]): void => {\n                     this.ioInsightInstances = data;\n                  }).catch(this.handleError);\n            ioInsightGraphs.push(...additionalConfigSpec.graphs\n                  .map(graph => PerfChartUtil.getGraphDefinition(graph)));\n            if (ioInsightGraphs.length > 0) {\n               this.ioInsightGraphsData =\n                     ioInsightMetrics.map(metric => new GraphMetric(metric, ioInsightGraphs));\n            }\n         }\n      }\n   }\n\n   onAllChartsLoaded(perfExportData: PerfExportData[]): void {\n      if (this.entity && perfExportData) {\n         perfExportData.forEach(data => data.subEntityName = this.entity.entityLabelName);\n      }\n      this.allChartsLoaded.emit(perfExportData);\n   }\n\n   /**\n    * The export data should be updated when all charts for the specified entities are loaded\n    * in case of composite vm view with show separate charts by VMs is selected\n    * @param perfExportData the export data(charts) for the specified entity(VM)\n    * @param entityName the name of the VM\n    */\n   onSpecifiedEntitiesChartsLoaded(perfExportData: PerfExportData[], entityName: string): void {\n      this.specifiedEntitiesExportData = this.specifiedEntitiesExportData.concat(perfExportData);\n      this.loadedSpecifiedEntitiesCount++;\n      perfExportData.forEach(exportData => exportData.subEntityName = entityName);\n      if (this.perfOrchestrator.data.specifiedEntitiesMetrics.length === this.loadedSpecifiedEntitiesCount) {\n         this.allChartsLoaded.emit(this.specifiedEntitiesExportData);\n      }\n   }\n\n   reload = () => {\n      this._chartMetrics = null;\n      this.queryChartsDataByTimeRange(this.timeRange);\n   };\n\n   askVMware(): void {\n      this.navigationService.askVMware(AskVmwareId.VM_CONSUMPTION_IOPS);\n   }\n\n   get separateViewNoDataAvailable(): UnavailableViewSpec {\n      return VsanDateTimeUtils.isRecentTimeRange(this.timeRange) ?\n            UnavailableViewSpec.PERF_VIEW_NO_DATA :\n            UnavailableViewSpec.PERF_VIEW_NO_DATA_FOR_SELECTED_PERIOD;\n   }\n}","<!--Copyright 2020-2021 VMware, Inc. All rights reserved. -- VMware Confidential-->\n<button class=\"btn btn-link btn-sm\"\n        id=\"export-btn\"\n        (click)=\"onExportAllClicked()\"\n        *ngIf=\"data?.length\">\n   {{\"vsan.perf.chart.exportAll.button\" | localized}}\n</button>\n\n<!--for IOInsight we need to create charts for each graph, because the charts in the IOInsight metrics view\ncan be hidden/collapsed by accordion-->\n<ng-container *ngIf=\"entityToMetricsMap?.size\">\n   <div hidden=\"true\" *ngFor=\"let perfEntity of chartsEntities\">\n      <vsan-perf-detail-charts\n            [commonPerfData]=\"commonPerfData\"\n            [extraDesc]=\"extraDesc\"\n            [chartMetrics]=\"entityToMetricsMap.get(perfEntity)\"\n            [entity]=\"perfEntity\"\n            [collapsible]=\"true\"\n            (allChartsLoaded)=\"data = data.concat($event)\">\n      </vsan-perf-detail-charts>\n   </div>\n</ng-container>\n","/* Copyright 2017-2022 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {ChangeDetectorRef, Component, Input, OnChanges, SimpleChanges, ViewRef} from \"@angular/core\";\nimport {PerfChartDataConstants} from \"@component/chart/performance/perf-chart-util\";\nimport {PerfExportData} from \"@component/chart/performance/perf-export-data\";\nimport {UnavailableViewSpec} from \"@component/unavailable-view/unavailable-view-spec\";\nimport {DiskManagementService} from \"@generated/disk-management-service\";\nimport {VsanPerfPropertyProvider} from \"@generated/vsan-perf-property-provider\";\nimport {DataServiceClient} from \"@service/client/dataservice/data-service.service\";\nimport {RefreshHandler} from \"@service/global-refresh.service\";\nimport {ManagedObject} from \"@service/managed-object\";\nimport {DomUtil} from \"@util/dom-util\";\nimport {Logger} from \"@util/logger\";\nimport {ReferenceWatcher} from \"@util/reference-watcher\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {BasePerfEntity} from \"../model/base-perf-entity\";\nimport {PerformanceUtils} from \"../util/perf-utils\";\nimport {BaseEntityDataPerfComponent} from \"./base-entity-data-perf.component\";\nimport {ConsolidatedEntitiesData} from \"./consolidated-entities-data.data\";\n\n@Component({\n   selector: \"vsan-single-entity-data-perf\",\n   templateUrl: \"single-entity-data-perf.html\",\n   styleUrls: [\"single-entity-data-perf.scss\"],\n   providers: [ReferenceWatcher],\n})\nexport class SingleEntityDataPerfComponent extends BaseEntityDataPerfComponent implements OnChanges {\n   currentEntityId: string;\n   loading: boolean = false;\n   unavailableView: UnavailableViewSpec;\n   exportData: PerfExportData[] = [];\n\n   /**\n    * the entity type id used to get the entity config spec from entityTypes dictionary\n    * this id is hard-coded from backend\n    * example: com.vmware.vsan.perf.entity.cluster-domclient\n    */\n   @Input()\n   entityTypeId: string;\n\n   @Input()\n   actionLink: string;\n\n   /**\n    * Whether the performance of a compute-only cluster is observed\n    */\n   @Input()\n   isComputeOnlyCluster: boolean;\n\n   /**\n    * If the case of CSD, this is the reference to the monitored server cluster (local or remote)\n    */\n   @Input()\n   monitoredServerCluster: ManagedObject;\n\n   @Input()\n   consolidatedEntitiesData: ConsolidatedEntitiesData;\n\n   @Input()\n   visibleGraphId: string;\n\n   @Input()\n   isAskVmwareLinkVisible: boolean = true;\n\n   @Input()\n   showExportAllButton: boolean = true;\n\n   @Input()\n   showHeaderSection: boolean = true;\n\n   @Input()\n   chartWidth: number;\n\n   @Input()\n   chartHeight: number;\n\n   /**\n    * Caches which server clusters have perfsvc enabled,\n    * in order to show unavailable view if the server perfsvc is disabled.\n    */\n   private serverClusterRefToPersvcEnabledState: Map<string, boolean> = new Map();\n\n   constructor(private vsanPerfPropertyProvider: VsanPerfPropertyProvider,\n         private diskMgmtService: DiskManagementService,\n         private dataService: DataServiceClient,\n         private changeDetector: ChangeDetectorRef,\n         private refWatcher: ReferenceWatcher) {\n      super();\n      this.refWatcher.watchGlobalRefreshSubscription(SingleEntityDataPerfComponent.prototype.constructor.name);\n   }\n\n   ngOnChanges(changes: SimpleChanges): void {\n      // clear the chart when the first time user changes the time rage state\n      if (changes.isRealtime && this.chartsView) {\n         this.chartsView.chartMetrics = null;\n      }\n      // In case the entityType changed, we need to update the query\n      if (changes.entityTypeId && changes.entityTypeId.currentValue ||\n            changes.monitoredServerCluster && changes.monitoredServerCluster.currentValue) {\n         this.fetch();\n      } else {\n         this.fetchChartsData();\n      }\n   }\n\n   @RefreshHandler\n   async fetch(): Promise<void> {\n      this.loading = true;\n      this.unavailableView = null;\n\n      if (this.isVsanDirectPerfView && !(await this.diskMgmtService.hasVsanDirectDisks(ManagedObject.contextObject))) {\n         this.unavailableView = UnavailableViewSpec.PERF_NO_VSAN_DIRECT_DISKS_CLAIMED;\n         this.loading = false;\n         return;\n      }\n\n      if (this.isComputeOnlyCluster && !(await this.isServerClusterPerfsvcEnabled())) {\n         this.unavailableView = UnavailableViewSpec.PERF_COMPUTE_ONLY_SERVER_PERFSVC_DISABLED;\n         this.loading = false;\n         return;\n      }\n\n      if (this.isShownInVolumeDetailedPerfView) {\n         this.loading = false;\n         this.currentEntityId = this.currentEntity.entityUuid;\n         this.fetchChartsData();\n      }\n\n      const queryProperty: string = this.getQueryProperty(this.entityTypeId);\n      if (!queryProperty) {\n         this.loading = false;\n         return;\n      }\n      try {\n         const entityId: string = await this.getEntityId(queryProperty);\n         this.loading = false;\n         this.handleEntityId(entityId);\n      } catch (err) {\n         this.handleError(err);\n      }\n   }\n\n   private get isVsanDirectPerfView(): boolean {\n      return this.entityTypeId === PerfChartDataConstants.CLUSTER_VSAN_DIRECT_ENTITY ||\n            this.entityTypeId === PerfChartDataConstants.HOST_VSAN_DIRECT_ENTITY;\n   }\n\n   /**\n    * Returns true if the component is shown in volume's details performance tab.\n    */\n   private get isShownInVolumeDetailedPerfView(): boolean {\n      return this.isFileSharePerfView || this.isAttachedVolumePerfView;\n   }\n\n   private get isFileSharePerfView(): boolean {\n      return this.entityTypeId === PerfChartDataConstants.CLUSTER_FILE_SERVICE_ENTITY;\n   }\n\n   private get isAttachedVolumePerfView(): boolean {\n      return this.entityTypeId === PerfChartDataConstants.VM_VIRTUAL_DISK_ENTITY;\n   }\n\n   private async getEntityId(queryProperty: string): Promise<string> {\n      if (this.isComputeOnlyCluster) {\n         const [clientUuid, serverUuid]: [string, string] = await Promise.all([\n            this.dataService.getProperty(queryProperty, ManagedObject.contextObject),\n            this.dataService.getProperty(queryProperty, this.monitoredServerCluster),\n         ]);\n         return `${serverUuid}|${clientUuid}`;\n      }\n      return await this.dataService.getProperty(queryProperty, this.getQueryObject());\n   }\n\n   handleEntityId(entityId: string): void {\n      this.extraDesc = this.entityTypeId === PerfChartDataConstants.HOST_NETWORK_ENTITY\n            ? VsanUiUtils.getString(\"vsan.perf.chart.host.network.description.extra\")\n            : null;\n      this.currentEntityId = entityId;\n      this.fetchChartsData();\n   }\n\n   private getQueryObject = (): ManagedObject => {\n      if (!this.isComputeOnlyCluster && this.monitoredServerCluster &&\n            !ManagedObject.areEqual(this.monitoredServerCluster, ManagedObject.contextObject)) {\n         // If a server cluster is monitored and it is not the local one\n         return this.monitoredServerCluster;\n      } else {\n         return ManagedObject.contextObject;\n      }\n   };\n\n   private getQueryProperty = (entityTypeId: string): string => {\n      switch (entityTypeId) {\n         case PerfChartDataConstants.CLUSTER_VM_CONSUMPTION_ENTITY:\n         case PerfChartDataConstants.CLUSTER_VM_CONSUMPTION_REMOTE_ENTITY:\n         case PerfChartDataConstants.CLUSTER_COMPUTE_ONLY_VM_REMOTE_CONSUMPTION_ENTITY:\n         case PerfChartDataConstants.CLUSTER_BACKEND_ENTITY:\n         case PerfChartDataConstants.PMEM_CLUSTER_ENTITY:\n         case PerfChartDataConstants.CLUSTER_VSAN_DIRECT_ENTITY:\n\n            return PerfChartDataConstants.CLUSTER_VSAN_CONFIGINFO_UUID_PROPERTY;\n         case PerfChartDataConstants.HOST_VM_CONSUMPTION_ENTITY:\n         case PerfChartDataConstants.HOST_BACKEND_ENTITY:\n         case PerfChartDataConstants.HOST_NETWORK_ENTITY:\n         case PerfChartDataConstants.HOST_ISCSI_ENTITY:\n         case PerfChartDataConstants.HOST_VSAN_DIRECT_ENTITY:\n         case PerfChartDataConstants.PMEM_HOST_ENTITY:\n            return PerfChartDataConstants.HOST_VSAN_CONFIGINFO_NODEUUID_PROPERTY;\n         case PerfChartDataConstants.VM_CONSUMPTION_ENTITY:\n            return PerfChartDataConstants.VM_CONFIG_INSTANCE_UUID_PROPERTY;\n         default:\n            return null;\n      }\n   };\n\n   handleError = (err: any) => {\n      this.loading = false;\n      Logger.error(err);\n   };\n\n   async fetchChartsData(): Promise<void> {\n      await this.waitForChartsContainer();\n\n      if (!this.commonPerfData.entityTypes ||\n            !this.commonPerfData.clusterRef || !this.currentEntityId || !this.currentTimeRange) {\n         return;\n      }\n      if (!this.isRealtime) {\n         this.chartsView.chartMetrics = null;\n      }\n      if (this.isShownInVolumeDetailedPerfView) {\n         // the currentEntity is set outside of the view, so update only entity type here.\n         PerformanceUtils.updatePerfEntityType(this.currentEntity, this.commonPerfData);\n      } else {\n         this.currentEntity = this.createBasePerfEntity(this.entityTypeId);\n      }\n      this.chartsView.entity = this.currentEntity;\n      this.chartsView.queryChartsDataByTimeRange(this.currentTimeRange, this.getTargetCluster(), !this.isRealtime);\n   }\n\n   waitForChartsContainer(): Promise<void> {\n      if (DomUtil.domElementExists(\"singleEntitiesChartsView\")) {\n         return Promise.resolve();\n      }\n      return new Promise((resolve) => {\n         this.refWatcher.setTimeout(() => {\n            resolve(this.waitForChartsContainer());\n         }, 1000);\n      });\n   }\n\n   private getTargetCluster(): ManagedObject {\n      return this.commonPerfData.isComputeOnlyCluster\n            ? this.monitoredServerCluster\n            : this.commonPerfData.clusterRef;\n   }\n\n   private createBasePerfEntity = (entityTypeId: string): BasePerfEntity => {\n      const entity: BasePerfEntity = new BasePerfEntity();\n      entity.entityId = entityTypeId;\n      entity.entityUuid = this.currentEntityId;\n      entity.configSpec = this.commonPerfData.entityTypes[entityTypeId];\n      return entity;\n   };\n\n   onAllChartsLoaded($event: any): void {\n      this.exportData = $event;\n      if (!(this.changeDetector as ViewRef).destroyed) {\n         this.changeDetector.detectChanges();\n      }\n   }\n\n   /**\n    * Checks and caches the perfsvc status of the server cluster\n    */\n   private async isServerClusterPerfsvcEnabled(): Promise<boolean> {\n      try {\n         const serverClusterRefString: string = ManagedObject.uid(this.monitoredServerCluster);\n         if (!this.serverClusterRefToPersvcEnabledState.has(serverClusterRefString)) {\n            this.serverClusterRefToPersvcEnabledState.set(\n                  serverClusterRefString,\n                  await this.vsanPerfPropertyProvider.getPerfServiceEnabled(this.monitoredServerCluster),\n            );\n         }\n         return this.serverClusterRefToPersvcEnabledState.get(serverClusterRefString);\n      } catch (err) {\n         this.handleError(err);\n      }\n   }\n\n   onEntitySelect(entity: BasePerfEntity): void {\n      this.toggleHighResolutionSpecName(entity);\n   }\n}\n","/* Copyright 2017-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Directive, EventEmitter, Input, Output, ViewChild} from \"@angular/core\";\nimport {BasePerfEntity} from \"../model/base-perf-entity\";\nimport {PerfTimeRangeData} from \"@generated/perf-time-range-data\";\nimport {PerfDetailChartsComponent} from \"./perf-detail-charts.component\";\nimport {PerfMonitorCommonPropsData} from \"@generated/perf-monitor-common-props-data\";\nimport {IllustratedMessageType} from \"@component/illustrated-message/illustrated-message.component\";\nimport {ChartPlotLineSelectionData} from \"@component/chart/model/chart-plot-line-selection.data\";\nimport {PerfChartDataConstants} from \"@component/chart/performance/perf-chart-util\";\nimport {NestedPerfEntity} from \"../model/nested-perf-entity\";\nimport {RangePickerState} from \"@component/datetime-picker/time-range-picker/range-picker-state\";\n\n@Directive()\nexport abstract class BaseEntityDataPerfComponent {\n   extraDesc: string;\n\n   private _currentEntity: BasePerfEntity;\n\n   IllustratedMessageType: typeof IllustratedMessageType = IllustratedMessageType;\n\n   get currentEntity(): BasePerfEntity {\n      return this._currentEntity;\n   }\n\n   @Input()\n   set currentEntity(val: BasePerfEntity) {\n      if (this._currentEntity === val) {\n         return;\n      }\n      this._currentEntity = val;\n\n      this.onEntitySelect(val);\n   }\n\n   private _currentTimeRange: PerfTimeRangeData;\n\n   @Input()\n   set currentTimeRange(val: PerfTimeRangeData) {\n      if (!val) {\n         return;\n      }\n\n      this._currentTimeRange = val;\n      this.currentTimeRangeChange.emit(this._currentTimeRange);\n   }\n\n   get currentTimeRange(): PerfTimeRangeData {\n      return this._currentTimeRange;\n   }\n\n   @Output()\n   currentTimeRangeChange: EventEmitter<PerfTimeRangeData> = new EventEmitter<PerfTimeRangeData>();\n\n   private _currentPickerState: RangePickerState;\n\n   @Input()\n   set currentPickerState(val: RangePickerState) {\n      if (val == null) {\n         return;\n      }\n      this._currentPickerState = val;\n      this.currentPickerStateChange.emit(this._currentPickerState);\n   }\n\n   get currentPickerState(): RangePickerState {\n      return this._currentPickerState;\n   }\n\n   @Output()\n   currentPickerStateChange: EventEmitter<RangePickerState> = new EventEmitter<RangePickerState>();\n\n   private _hourInterval: number;\n\n   get currentHourInterval(): number {\n      return this._hourInterval;\n   }\n\n   @Input()\n   set currentHourInterval(val: number) {\n      if (val == null) {\n         return;\n      }\n      this._hourInterval = val;\n   }\n\n   @Output()\n   currentHourIntervalChange: EventEmitter<number> = new EventEmitter<number>();\n\n   @Input()\n   commonPerfData: PerfMonitorCommonPropsData;\n\n   /**\n    * Whether to show loading spinner. For auto refresh we don't want to show the spinner.\n    */\n   @Input()\n   showLoading: boolean = true;\n\n   @Input()\n   isRealtime: boolean;\n\n   @Output()\n   onTooltipActionClicked: EventEmitter<ChartPlotLineSelectionData> = new EventEmitter<ChartPlotLineSelectionData>();\n\n   @ViewChild(PerfDetailChartsComponent)\n   chartsView: PerfDetailChartsComponent;\n\n   /**\n    * Add \"hr-\" prefix to the entity.configSpec.name if it's realtime, or remove it if user leaves realtime chart mode\n    */\n   protected toggleHighResolutionSpecName(entity: BasePerfEntity): BasePerfEntity {\n      if (!entity?.configSpec) {\n         return entity;\n      }\n      if (entity instanceof NestedPerfEntity) {\n         this.toggleHighResolutionSpecName(entity.combinedEntity);\n      }\n      if (this.isRealtime) {\n         if (!this.hasHighResolutionPrefix(entity.configSpec.name)) {\n            entity.configSpec.name = `${PerfChartDataConstants.HIGH_RESOLUTION_PREFIX}${entity.configSpec.name}`;\n         }\n      } else {\n         if (this.hasHighResolutionPrefix(entity.configSpec.name)) {\n            entity.configSpec.name = entity.configSpec.name.replace(PerfChartDataConstants.HIGH_RESOLUTION_PREFIX, \"\");\n         }\n      }\n      return entity;\n   }\n\n   private hasHighResolutionPrefix(configSpecName: string): boolean {\n      return configSpecName.startsWith(PerfChartDataConstants.HIGH_RESOLUTION_PREFIX);\n   }\n\n   abstract fetchChartsData(): Promise<void> | void;\n\n   abstract onEntitySelect(entity: BasePerfEntity): void;\n}","/* Copyright 2020-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, Input} from \"@angular/core\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {PerfMonitorCommonPropsData} from \"@generated/perf-monitor-common-props-data\";\nimport {PerfEntityStateData} from \"@generated/perf-entity-state-data\";\nimport {BasePerfEntity} from \"../model/base-perf-entity\";\nimport {PerfExportData} from \"@component/chart/performance/perf-export-data\";\nimport {ModalBuilder} from \"@util/modal-builder\";\nimport {PerfChartExportContextData} from \"./perf-chart-export-context.data\";\nimport {PerfChartExportOptions} from \"./perf-chart-export-options\";\nimport {ZipDownloader} from \"@component/export/downloaders/zip-downloader\";\n\n@Component({\n   templateUrl: \"perf-chart-export.html\",\n   selector: \"vsan-perf-chart-export\",\n   styleUrls: [\"perf-chart-export.scss\"],\n})\nexport class PerfChartExportComponent {\n   private readonly DEFAULT_ZIP_NAME: string = \"results\";\n   VsanUiUtils: typeof VsanUiUtils = VsanUiUtils;\n\n   private options: PerfChartExportOptions;\n\n   @Input()\n   data: PerfExportData[] = [];\n\n   @Input()\n   commonPerfData: PerfMonitorCommonPropsData;\n\n   private _entityToMetricsMap: Map<BasePerfEntity, PerfEntityStateData[]>;\n\n   @Input()\n   set entityToMetricsMap(val: Map<BasePerfEntity, PerfEntityStateData[]>) {\n      this._entityToMetricsMap = val;\n      this.chartsEntities = [...val.keys()];\n   }\n\n   get entityToMetricsMap(): Map<BasePerfEntity, PerfEntityStateData[]> {\n      if (!this._entityToMetricsMap) {\n         return new Map<BasePerfEntity, PerfEntityStateData[]>();\n      }\n      return this._entityToMetricsMap;\n   }\n\n   @Input()\n   extraDesc: string;\n\n   @Input()\n   entity: BasePerfEntity;\n\n   @Input()\n   showSubEntities: boolean = false;\n\n   chartsEntities: BasePerfEntity[];\n\n   onExportAllClicked(): void {\n      const context: PerfChartExportContextData = {\n         exportData: this.data.filter(chartData => chartData),\n         showSubEntities: this.showSubEntities,\n      };\n\n      new ModalBuilder(\"performanceCommon/exportOptions\")\n            .setSize(790, 300)\n            .open(context)\n            .then(this.onSelectOptions);\n   }\n\n   private onSelectOptions = async (options: PerfChartExportOptions) => {\n      this.options = options;\n      this.exportCharts();\n   };\n\n   private exportCharts = () => {\n      const zip: ZipDownloader = new ZipDownloader();\n\n      this.data\n            .filter(perfData => this.isDataRequested(perfData))\n            .forEach(perfData =>\n                  zip.goToFolder(this.getFolder(perfData))\n                     .addSvg(perfData.graphName, perfData.chart.getSVG())\n                     .addCsvRaw(perfData.graphName, perfData.chart.getCSV(true)));\n\n      zip.download(this.zipName);\n   };\n\n   private isDataRequested(perfData: PerfExportData): boolean {\n      if (!this.options.selectedGraphs.includes(perfData.graphName)) {\n         return false;\n      }\n      if (perfData.subEntityName && !this.options.selectedSubEntities.includes(perfData.subEntityName)) {\n         return false;\n      }\n      return true;\n   }\n\n   private getFolder(perfData: PerfExportData): string | null {\n      return perfData.subEntityName ? perfData.subEntityName : null;\n   }\n\n   private get zipName(): string {\n      return this.entity.entityName ? this.entity.entityName : this.DEFAULT_ZIP_NAME;\n   }\n}\n","<!-- Copyright 2020 VMware, Inc. All rights reserved. -- VMware Confidential -->\n<div class=\"spinner spinner-lg central-spinner\" *ngIf=\"loading\"></div>\n\n<ng-container *ngIf=\"!loading\">\n   <vsan-unavailable-view *ngIf=\"unavailableView\"\n                          [unavailableViewSpec]=\"unavailableView\">\n   </vsan-unavailable-view>\n   <vsan-perf-chart-export *ngIf=\"!unavailableView && currentEntity && showExportAllButton\"\n                           class=\"export-button\"\n                           extraDesc=\"extraDesc\"\n                           [commonPerfData]=\"commonPerfData\"\n                           [entity]=\"currentEntity\"\n                           [data]=\"exportData\">\n   </vsan-perf-chart-export>\n</ng-container>\n\n<vsan-perf-detail-charts id=\"singleEntitiesChartsView\"\n                         *ngIf=\"!unavailableView\"\n                         [commonPerfData]=\"commonPerfData\"\n                         [consolidatedEntitiesData]=\"consolidatedEntitiesData\"\n                         [parentLoading]=\"loading\"\n                         [extraDesc]=\"extraDesc\"\n                         [visibleGraphId]=\"visibleGraphId\"\n                         [isAskVmwareLinkVisible]=\"isAskVmwareLinkVisible\"\n                         [showHeaderSection]=\"showHeaderSection\"\n                         [actionLink]=\"actionLink\"\n                         [chartWidth]=\"chartWidth\"\n                         [chartHeight]=\"chartHeight\"\n                         [isRealtime]=\"isRealtime\"\n                         (allChartsLoaded)=\"onAllChartsLoaded($event)\"\n                         (onTooltipActionClicked)=\"onTooltipActionClicked.emit($event)\">\n</vsan-perf-detail-charts>"],"sourceRoot":"webpack:///"}