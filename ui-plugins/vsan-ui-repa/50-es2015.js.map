{"version":3,"sources":["./src/app/vsan/common/component/general-settings/utils/default-rekey-values.ts","./src/app/vsan/common/component/general-settings/utils/rekey-interval.component.ts","./src/app/vsan/common/component/general-settings/vsan-general-config.service.ts","./src/app/vsan/common/component/general-settings/general-config.data.ts","./src/app/vsan/common/component/general-settings/service.data.ts"],"names":[],"mappings":"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","file":"50-es2015.js","sourcesContent":["/* Copyright 2020 VMware, Inc. All rights reserved. -- VMware Confidential */\nexport enum DefaultRekeyValues {\n   SIX_HOURS = 6 * 60,\n   TWELVE_HOURS = 12 * 60,\n   ONE_DAY = 24 * 60,\n   THREE_DAYS = 3 * 24 * 60,\n   SEVEN_DAYS = 7 * 24 * 60\n}","/* Copyright 2019-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, EventEmitter, Input, OnInit, Output} from \"@angular/core\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {RekeyValueModel} from \"@component/general-settings/utils/rekey-value.model\";\nimport {DefaultRekeyValues} from \"@component/general-settings/utils/default-rekey-values\";\n\nenum RekeyMode {\n   DEFAULT,\n   CUSTOM,\n}\n\n@Component({\n   templateUrl: \"rekey-interval.html\",\n   styleUrls: [\"rekey-interval.scss\"],\n   selector: \"vsan-dit-rekey-interval\",\n})\nexport class RekeyIntervalComponent implements OnInit {\n\n   @Input()\n   rekeyInterval: number;\n\n   @Output()\n   rekeyIntervalChange: EventEmitter<number> = new EventEmitter(true);\n\n   @Input()\n   isDataInTransitEncryptionEnabled: boolean;\n\n   rekeyDefaultValuesMap: RekeyValueModel[] = [];\n\n   selectedRekeyMode: RekeyMode;\n\n   RekeyMode: typeof RekeyMode = RekeyMode;\n\n   readonly DEFAULT_REKEY_HELPER_TEXT: string =\n         VsanUiUtils.getString(\"configureVsan.settings.dataInTransitEncryption.rekey.mode.default.label\");\n\n   readonly CUSTOM_REKEY_HELPER_TEXT: string =\n         VsanUiUtils.getString(\"configureVsan.settings.dataInTransitEncryption.rekey.mode.custom.minutesLabel\",\n            RekeyIntervalComponent.DATA_IN_TRANSIT_REKEY_MIN,\n            RekeyIntervalComponent.DATA_IN_TRANSIT_REKEY_MAX);\n\n   // Min rekey interval is 30 minutes\n   static readonly DATA_IN_TRANSIT_REKEY_MIN: number = 30;\n\n   // Max rekey interval is 7 days\n   static readonly DATA_IN_TRANSIT_REKEY_MAX: number = DefaultRekeyValues.SEVEN_DAYS;\n\n   async ngOnInit(): Promise<void> {\n      this.rekeyDefaultValuesMap = this.getRekeyDefaultIntervals();\n\n      if (!this.isDataInTransitEncryptionEnabled) {\n         this.selectedRekeyMode = RekeyMode.DEFAULT;\n         this.resetDefaultRekeyInterval();\n         return;\n      }\n\n      this.selectedRekeyMode =\n            this.isRekeyIntervalAmongDefaultValues(this.rekeyInterval) ? RekeyMode.DEFAULT : RekeyMode.CUSTOM;\n   }\n\n   onRekeyModeChange(): void {\n      if (this.isDefaultRekeyInterval()) {\n         this.resetDefaultRekeyInterval();\n      }\n   }\n\n   onRekeyIntervalChange(): void {\n      // Parse to number because when selection comes from dropdown list then value is of type string\n      this.rekeyIntervalChange.emit(Number(this.rekeyInterval));\n   }\n\n   isDefaultRekeyInterval(): boolean {\n      return Number(this.selectedRekeyMode) === RekeyMode.DEFAULT;\n   }\n\n   isCustomRekeyInterval(): boolean {\n      return Number(this.selectedRekeyMode) === RekeyMode.CUSTOM;\n   }\n\n   private getRekeyDefaultIntervals(): RekeyValueModel[] {\n      return [\n         {\n            name: VsanUiUtils.getString(\"vsan.time.common.hours\", 6),\n            valueInMinutes: DefaultRekeyValues.SIX_HOURS,\n         },\n         {\n            name: VsanUiUtils.getString(\"vsan.time.common.hours\", 12),\n            valueInMinutes: DefaultRekeyValues.TWELVE_HOURS,\n         },\n         {\n            name: VsanUiUtils.getString(\"vsan.time.common.day\"),\n            valueInMinutes: DefaultRekeyValues.ONE_DAY,\n         },\n         {\n            name: VsanUiUtils.getString(\"vsan.time.common.days\", 3),\n            valueInMinutes: DefaultRekeyValues.THREE_DAYS,\n         },\n         {\n            name: VsanUiUtils.getString(\"vsan.time.common.days\", 7),\n            valueInMinutes: DefaultRekeyValues.SEVEN_DAYS,\n         },\n      ];\n   }\n\n   private resetDefaultRekeyInterval(): void {\n      this.rekeyInterval = DefaultRekeyValues.ONE_DAY;\n      this.onRekeyIntervalChange();\n   }\n\n   private isRekeyIntervalAmongDefaultValues(rekeyInterval: number): boolean {\n      return this.rekeyDefaultValuesMap.some(\n            defaultRekeyValue => defaultRekeyValue.valueInMinutes === rekeyInterval);\n   }\n}\n","/* Copyright 2018-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Injectable} from \"@angular/core\";\nimport {ManagedObject} from \"@service/managed-object\";\nimport {GeneralConfigData} from \"./general-config.data\";\nimport {VsanConfigService} from \"@generated/vsan-config-service\";\nimport {VsanCapabilityData} from \"@generated/vsan-capability-data\";\nimport {VsanCapabilityProvider} from \"@generated/vsan-capability-provider\";\nimport {VsanConfigSpec} from \"@generated/vsan-config-spec\";\nimport {EncryptionPropertyProvider} from \"@generated/encryption-property-provider\";\nimport {KmipClusterData} from \"@generated/kmip-cluster-data\";\nimport {Privileges} from \"@generated/privileges\";\nimport {PermissionService} from \"@generated/permission-service\";\nimport {Logger} from \"@util/logger\";\nimport {ClusterPowerState} from \"@generated/cluster-power-state\";\nimport {ClusterPowerService} from \"@generated/cluster-power-service\";\n\n@Injectable()\nexport class VsanGeneralConfigService {\n\n   constructor(private encryptionProvider: EncryptionPropertyProvider,\n         private permissionService: PermissionService,\n         private vsanConfigService: VsanConfigService,\n         private capabilityProvider: VsanCapabilityProvider,\n         private clusterPowerService: ClusterPowerService) {}\n\n   /**\n    * Fetch the vSAN config settings for the given cluster ref\n    */\n   async getVsanGeneralConfigData(clusterRef: ManagedObject): Promise<GeneralConfigData> {\n      let vsanConfigSpec: VsanConfigSpec;\n      let vcCapabilitiesData: VsanCapabilityData;\n      let clusterCapabilitiesData: VsanCapabilityData;\n      let clusterPowerState: ClusterPowerState;\n      let clusterPermissions: Map<string, boolean>;\n      let vcPermissions: Map<string, boolean>;\n      let kmipClusterData: KmipClusterData;\n\n      [\n         vsanConfigSpec,\n         kmipClusterData,\n         vcCapabilitiesData,\n         clusterCapabilitiesData,\n         clusterPowerState,\n         clusterPermissions,\n         vcPermissions,\n      ] = await Promise.all([\n                  this.vsanConfigService.getVsanConfigSpec(clusterRef),\n                  this.encryptionProvider.getKmipClusterData(clusterRef),\n                  this.capabilityProvider.getVcCapabilityData(clusterRef),\n                  this.capabilityProvider.getClusterCapabilityData(clusterRef),\n                  this.clusterPowerService.getPowerState(clusterRef),\n                  this.queryClusterPermissions(clusterRef),\n                  this.queryVcPermissions(clusterRef)]);\n\n      return new GeneralConfigData(vsanConfigSpec, vcCapabilitiesData, clusterCapabilitiesData, clusterPowerState,\n            kmipClusterData, clusterPermissions, vcPermissions);\n   }\n\n   private async queryClusterPermissions(clusterRef: ManagedObject): Promise<Map<string, boolean>> {\n      let permissions: Map<string, boolean>;\n      try {\n         let clusterPermissions: any;\n         clusterPermissions = await this.permissionService.queryPermissions(\n               clusterRef, this.clusterPermissionProperties);\n\n         permissions = new Map([\n               ...Object.entries(clusterPermissions),\n         ]) as Map<string, boolean>;\n\n      } catch (e) {\n         Logger.debug(e);\n         permissions = new Map<string, boolean>();\n         // In case of error during permissions' query, set all to true by default\n         for (const permission of Object.values(this.clusterPermissionProperties)) {\n            permissions.set(permission, true);\n         }\n      }\n      return permissions;\n   }\n\n   private async queryVcPermissions(clusterRef: ManagedObject): Promise<Map<string, boolean>> {\n      const vcRef: ManagedObject = ManagedObject.vcRoot(clusterRef.serverGuid);\n      let permissions: Map<string, boolean>;\n      try {\n         const vcPermissions: any = await this.permissionService.queryPermissions(vcRef, this.vcPermissionProperties);\n         permissions = new Map([...Object.entries(vcPermissions)]) as Map<string, boolean>;\n\n      } catch (e) {\n         Logger.debug(e);\n         permissions = new Map<string, boolean>();\n         // In case of error during permissions' query, set all to true by default\n         for (const permission of Object.keys(this.vcPermissionProperties)) {\n            permissions.set(permission, true);\n         }\n      }\n      return permissions;\n   }\n\n   private get clusterPermissionProperties(): string[] {\n      return [\n         Privileges.EDIT_CLUSTER(),\n         Privileges.CONFIG_STORAGE(),\n         Privileges.MANAGE_KEYS(),\n         Privileges.MANAGE_ENCRYPTION_POLICIES(),\n         Privileges.MANAGE_KEY_SERVERS(),\n         Privileges.SHALLOW_REKEY(),\n         Privileges.SHUTDOWN_CLUSTER(),\n      ];\n   }\n\n   private get vcPermissionProperties(): string[] {\n      return [\n         Privileges.READ_POLICIES(),\n         Privileges.GLOBAL_VCSERVER(),\n         Privileges.GLOBAL_SETTINGS(),\n      ];\n   }\n}\n","/* Copyright 2016-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {KmipClusterData} from \"@generated/kmip-cluster-data\";\nimport {ServiceStatus} from \"./service.data\";\nimport {VsanCapabilityData} from \"@generated/vsan-capability-data\";\nimport {VsanConfigSpec} from \"@generated/vsan-config-spec\";\nimport {RekeyIntervalComponent} from \"@component/general-settings/utils/rekey-interval.component\";\nimport {Privileges} from \"@generated/privileges\";\nimport {ClusterPowerState} from \"@generated/cluster-power-state\";\n\nexport class GeneralConfigData {\n\n   private readonly vsanConfigSpec: VsanConfigSpec;\n\n   vcCapabilityData: VsanCapabilityData;\n   clusterCapabilityData: VsanCapabilityData;\n   clusterPowerState: ClusterPowerState;\n\n   availableKmipClusters: string[];\n\n   clusterPermissions: Map<string, boolean>;\n   vcPermissions: Map<string, boolean>;\n   hasEncryptionPermissions: boolean;\n   hasDataInTransitEncryptionPermissions: boolean;\n\n   constructor(vsanConfigSpec: VsanConfigSpec,\n         vcCapabilityData: VsanCapabilityData,\n         clusterCapabilityData: VsanCapabilityData,\n         clusterPowerState: ClusterPowerState,\n         kmipClusterData: KmipClusterData,\n         clusterPermissions: Map<string, boolean>,\n         vcPermissions: Map<string, boolean>) {\n\n      this.vsanConfigSpec = vsanConfigSpec;\n\n      this.vcCapabilityData = vcCapabilityData;\n      this.clusterCapabilityData = clusterCapabilityData;\n      this.clusterPowerState = clusterPowerState;\n\n      if (kmipClusterData && kmipClusterData.availableKmipClusters) {\n         this.availableKmipClusters = kmipClusterData.availableKmipClusters;\n      }\n\n      this.clusterPermissions = clusterPermissions;\n      this.vcPermissions = vcPermissions;\n      this.hasEncryptionPermissions = clusterPermissions.get(Privileges.MANAGE_KEYS())\n            && clusterPermissions.get(Privileges.MANAGE_ENCRYPTION_POLICIES())\n            && clusterPermissions.get(Privileges.MANAGE_KEY_SERVERS());\n      this.hasDataInTransitEncryptionPermissions = clusterPermissions.get(Privileges.MANAGE_KEYS());\n   }\n\n   get diskClaimPolicyText(): string {\n      return this.vsanConfigSpec.autoClaimDisks ?\n         VsanUiUtils.getString(\"vsan.generalConfig.diskClaimPolicy.auto\")\n         : VsanUiUtils.getString(\"vsan.generalConfig.diskClaimPolicy.manual\");\n   }\n\n   get diskClaimPolicies(): string[] {\n      return [\n            VsanUiUtils.getString(\"vsan.generalConfig.diskClaimPolicy.auto\"),\n            VsanUiUtils.getString(\"vsan.generalConfig.diskClaimPolicy.manual\"),\n      ];\n   }\n\n   get isSpaceEfficiencySupported(): boolean {\n      return this.clusterCapabilityData.isDeduplicationAndCompressionSupported\n            || this.clusterCapabilityData.isCompressionOnlySupported;\n   }\n\n   get wipeDiskText(): string {\n      if (!this.vsanConfigSpec.enableDataAtRestEncryption) {\n         return \"\";\n      }\n      if (this.vsanConfigSpec.eraseDisksBeforeUse) {\n         return VsanUiUtils.getString(\"vsan.generalConfig.encryptionState.enabled\");\n      } else {\n         return VsanUiUtils.getString(\"vsan.generalConfig.encryptionState.disabled\");\n      }\n   }\n\n   get dataAtRestEncryptionServiceStatus(): ServiceStatus {\n      if (!this.clusterCapabilityData.isEncryptionSupported) {\n         return ServiceStatus.NOT_SUPPORTED;\n      }\n      return this.vsanConfigSpec.enableDataAtRestEncryption ? ServiceStatus.ENABLED : ServiceStatus.DISABLED;\n   }\n\n   get rekeyEnabled(): boolean {\n      return this.vsanConfigSpec.kmipClusterId\n               && this.clusterCapabilityData.isEncryptionSupported\n               && this.dataAtRestEncryptionServiceStatus === ServiceStatus.ENABLED;\n   }\n\n   validateConfig(vsanConfigSpec: VsanConfigSpec): string[] {\n      const validationErrors: string[] = [];\n\n      if (vsanConfigSpec.enableDataAtRestEncryption && this.hasEncryptionPermissions) {\n         // Validate whether encryption settings are complete\n         if (!vsanConfigSpec.kmipClusterId) {\n            validationErrors.push(VsanUiUtils.getString(\"vsan.generalConfig.kmsNotSelected.warning\"));\n         }\n      }\n\n      if (vsanConfigSpec.enableDataInTransitEncryption && this.hasDataInTransitEncryptionPermissions) {\n         const rekeyInterval: number = vsanConfigSpec.rekeyInterval;\n         if (!rekeyInterval ||\n               rekeyInterval < RekeyIntervalComponent.DATA_IN_TRANSIT_REKEY_MIN ||\n               rekeyInterval > RekeyIntervalComponent.DATA_IN_TRANSIT_REKEY_MAX) {\n            const error: string =\n                  VsanUiUtils.getString(\"configureVsan.settings.dataInTransitEncryption.rekey.rangeError\",\n                        RekeyIntervalComponent.DATA_IN_TRANSIT_REKEY_MIN,\n                        RekeyIntervalComponent.DATA_IN_TRANSIT_REKEY_MAX);\n            validationErrors.push(error);\n         }\n      }\n      return validationErrors;\n   }\n\n   clone(): GeneralConfigData {\n      return VsanUiUtils.deepmergeObjects({}, this);\n   }\n\n   isConfigChanged(originalConfigSpec: VsanConfigSpec): boolean {\n      if (!Object.is(originalConfigSpec.enableDataInTransitEncryption,\n            this.vsanConfigSpec.enableDataInTransitEncryption)\n            || !Object.is(originalConfigSpec.enableDataAtRestEncryption, this.vsanConfigSpec.enableDataAtRestEncryption)\n            || !Object.is(originalConfigSpec.spaceEfficiencyConfig, this.vsanConfigSpec.spaceEfficiencyConfig)\n            || !Object.is(originalConfigSpec.autoClaimDisks, this.vsanConfigSpec.autoClaimDisks)\n            || !Object.is(originalConfigSpec.enableRdma, this.vsanConfigSpec.enableRdma)\n            || !Object.is(originalConfigSpec.advancedOptions.largeClusterSupportEnabled,\n                  this.vsanConfigSpec.advancedOptions.largeClusterSupportEnabled)) {\n         return true;\n      }\n\n      if (originalConfigSpec.enableDataInTransitEncryption &&\n            !Object.is(originalConfigSpec.rekeyInterval, this.vsanConfigSpec.rekeyInterval)) {\n         return true;\n      }\n\n      if (originalConfigSpec.enableDataAtRestEncryption) {\n         if (!Object.is(originalConfigSpec.kmipClusterId, this.vsanConfigSpec.kmipClusterId)\n               || !Object.is(originalConfigSpec.eraseDisksBeforeUse, this.vsanConfigSpec.eraseDisksBeforeUse)) {\n            return true;\n         }\n      }\n\n      if (originalConfigSpec.advancedOptions.capacityReservationConfig !== null) {\n         if (!Object.is(originalConfigSpec.advancedOptions.capacityReservationConfig.vsanOperationReservation,\n               this.vsanConfigSpec.advancedOptions.capacityReservationConfig.vsanOperationReservation)\n               || !Object.is(originalConfigSpec.advancedOptions.capacityReservationConfig.hostFailureReservation,\n                     this.vsanConfigSpec.advancedOptions.capacityReservationConfig.hostFailureReservation)) {\n            return true;\n         }\n      }\n\n      return false;\n   }\n\n   cloneVsanConfigSpec(): VsanConfigSpec {\n      return VsanUiUtils.deepmergeObjects({}, this.vsanConfigSpec);\n   }\n}\n","/* Copyright 2017 VMware, Inc. All rights reserved. -- VMware Confidential */\n\nexport enum ServiceStatus {\n   UNKNOWN = -1,\n   ENABLED = 0,\n   DISABLED = 1,\n   NOT_SUPPORTED = 2\n}\n"],"sourceRoot":"webpack:///"}