{"version":3,"sources":["webpack:///src/app/vsan/common/directive/clr-button-group/clr-button-base.directive.ts","webpack:///src/app/vsan/common/component/popup-list/popup-list.component.ts","webpack:///src/app/vsan/common/util/vsan-dialog-util.ts","webpack:///src/app/vsan/common/component/popup-list/popup-list-item.directive.ts","webpack:///src/app/vsan/common/component/inventory/inventory-browser.module.ts","webpack:///src/app/vsan/common/directive/external-link/external-link.directive.ts","webpack:///src/app/vsan/common/component/search/search.module.ts","webpack:///src/app/vsan/common/component/popup-list/popup-list.html"],"names":["ClrButtonBaseDirective","clrButton","name","Math","random","toString","directiveHolder","directives","push","PopupListComponent","shownItemsCount","signpostPosition","allItems","shownItems","itemsToSet","toArray","slice","hiddenItemsCount","length","VsanDialogUtil","CAPACITY_MANAGEMENT_DIALOG","width","height","DELETE_VOLUME_DIALOG","MIGRATE_VOLUME_DIALOG","REAPPLY_VOLUME_POLICY_DIALOG","DUPLICATE_PCI_ID_MODEL_SELECTION_DIALOG","HEALTH_RESTORE_ACTION_DIALOG","CLUSTER_POWER_ON_DIALOG","VM_IO_DIAGNOSTICS_METRICS_DIALOG","VM_IO_DIAGNOSTICS_LATENCY_DIALOG","VM_IO_DIAGNOSTICS_DOM_OWNER_LATENCY_DIALOG","PERF_SVC_EDIT_ACTION_DIALOG","PERF_SVC_ENABLE_ACTION_DIALOG","CLAIM_DISKS_ACTION_DIALOG","VSAN_DISK_CLAIM_ACTION_DIALOG","VsanDialogProperties","PopupListItemDirective","InventoryBrowserModule","ExternalLinkDirective","el","resolver","renderer","navigationService","ASK_VMWARE_DEFAULT_TEXT_KEY","LEARN_MORE_DEFAULT_TEXT_KEY","CONTAINER_CLASS","NAVIGATION_EVENT_TYPE","LEAD_TO_NOWHERE_URL","HTML_ELEMENT_SPAN_NAME","HTML_ELEMENT_ICON_NAME","HTML_ELEMENT_ROLE_ATTR_NAME","HTML_ELEMENT_ROLE_ATTR_VALUE","ICON_SHAPE_ATTR_NAME","ICON_SHAPE_ATTR_VALUE","ICON_SIZE_ATTR_NAME","ICON_SIZE_ATTR_VALUE","ICON_CLASS_ATTR_NAME","ICON_CLASS_ATTR_VALUE","ICON_TITLE_ATTR_NAME","KB_URL","element","nativeElement","isLink","isButton","prepareExternalLink","button","index","addClass","setText","decorateLink","addLinkRole","initializeNavigationHandler","HTMLButtonElement","HTMLAnchorElement","span","createElement","innerText","getText","appendChild","icon","setAttribute","getString","anchorText","key","linkElement","href","style","display","addEventListener","helpId","askVMware","articleId","navigateToAddress","url","SearchModule"],"mappings":"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","file":"84-es5.js","sourcesContent":["/* Copyright 2020 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {ClrButton} from \"@clr/angular\";\n\n/**\n * Use this class as base class for directive, which handles clr-button. It will help to link the rendered button with\n * the clr-button on which the directive is applied.\n */\nexport abstract class ClrButtonBaseDirective {\n\n   constructor(private clrButton: ClrButton) {\n      if (!clrButton) {\n         return;\n      }\n      // name should be set, if not provided in template - generate one. ClrButtom#name is used to generate the name\n      // attribute of the markup button. Later the name is used to match the generated markup with the directive.\n      if (!clrButton.name) {\n         clrButton.name = Math.random().toString();\n      }\n\n      const directiveHolder: DirectiveHolder = (clrButton as DirectiveHolder);\n      directiveHolder.directives = directiveHolder.directives || [];\n      directiveHolder.directives.push(this);\n   }\n\n   /**\n    * This method will be called when the actual html button is rendered.\n    */\n   abstract resolveButton(clrButton: ClrButton, button: HTMLButtonElement, index: number);\n}\n\nexport interface DirectiveHolder extends ClrButton {\n   directives: ClrButtonBaseDirective[];\n}","/* Copyright 2019 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, ContentChildren, Input, QueryList, TemplateRef} from \"@angular/core\";\nimport {PopupListItemDirective}\n   from \"@component/popup-list/popup-list-item.directive\";\n\n@Component({\n   selector: \"vsan-popup-list\",\n   templateUrl: \"popup-list.html\",\n   styleUrls: [\"popup-list.scss\"]\n})\n/**\n * Use this component when you need to display a list of items next to each other.\n * The items of the list must be wrapped inside ng-template,\n * that is marked by the vsan-popup-list-item.\n * shownItemsCount defines what is the count initially shown items. Default value is 1.\n * signpostPosition defines where the signpost will appear.\n * Example usage:\n * <vsan-popup-list>\n *    <ng-template vsan-popup-list-item *ngFor=\"let cluster of volume.containerClusters\">\n *       <div vsan-show-title>{{cluster.name}}</div>\n *    </ng-template>\n * </vsan-popup-list>\n */\nexport class PopupListComponent {\n   @Input()\n   shownItemsCount: number = 1;\n\n   @Input()\n   signpostPosition: string = 'right-bottom';\n\n   hiddenItemsCount: number;\n\n   allItems: TemplateRef<PopupListItemDirective>[] = [];\n\n   shownItems: TemplateRef<PopupListItemDirective>[] = [];\n\n   @ContentChildren(PopupListItemDirective, {read: TemplateRef})\n   set items(itemsToSet: QueryList<TemplateRef<PopupListItemDirective>>) {\n      this.allItems = itemsToSet.toArray();\n      this.shownItems = itemsToSet.toArray().slice(0, this.shownItemsCount);\n      this.hiddenItemsCount = this.allItems.length - this.shownItems.length;\n   }\n}","/* Copyright 2020-2022 VMware, Inc. All rights reserved. -- VMware Confidential */\nexport class VsanDialogUtil {\n   static readonly CAPACITY_MANAGEMENT_DIALOG: VsanDialogProperties = {\n      width: 800,\n      height: 700,\n   };\n\n   static readonly DELETE_VOLUME_DIALOG: VsanDialogProperties = {\n      width: 500,\n      height: 250,\n   };\n\n   static readonly MIGRATE_VOLUME_DIALOG: VsanDialogProperties = {\n      width: 1030,\n      height: 710,\n   };\n\n   static readonly REAPPLY_VOLUME_POLICY_DIALOG: VsanDialogProperties = {\n      width: 700,\n      height: 250,\n   };\n\n   static readonly DUPLICATE_PCI_ID_MODEL_SELECTION_DIALOG: VsanDialogProperties = {\n      width: 800,\n      height: 500,\n   };\n\n   static readonly HEALTH_RESTORE_ACTION_DIALOG: VsanDialogProperties = {\n      width: 550,\n      height: 250,\n   };\n\n   // Keep in sync with plugin.xml extension point\n   static readonly CLUSTER_POWER_ON_DIALOG: VsanDialogProperties = {\n      width: 600,\n      height: 230,\n   };\n\n   static readonly VM_IO_DIAGNOSTICS_METRICS_DIALOG: VsanDialogProperties = {\n      width: 900,\n      height: 700,\n   };\n\n   static readonly VM_IO_DIAGNOSTICS_LATENCY_DIALOG: VsanDialogProperties = {\n      width: 1000,\n      height: 500,\n   };\n\n   static readonly VM_IO_DIAGNOSTICS_DOM_OWNER_LATENCY_DIALOG: VsanDialogProperties = {\n      width: 1000,\n      height: 400,\n   };\n\n   static readonly PERF_SVC_EDIT_ACTION_DIALOG: VsanDialogProperties = {\n      width: 800,\n      height: 450,\n   };\n\n   static readonly PERF_SVC_ENABLE_ACTION_DIALOG: VsanDialogProperties = {\n      width: 800,\n      height: 250,\n   };\n\n   static readonly CLAIM_DISKS_ACTION_DIALOG: VsanDialogProperties = {\n      width: 1200,\n      height: 650,\n   };\n\n   static readonly VSAN_DISK_CLAIM_ACTION_DIALOG: VsanDialogProperties = {\n      width: 670,\n      height: 300,\n   };\n}\n\nexport class VsanDialogProperties {\n   width: number;\n   height: number;\n}\n","/* Copyright 2019 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Directive} from \"@angular/core\";\n\n@Directive({\n   selector: \"[vsan-popup-list-item]\"\n})\nexport class PopupListItemDirective {\n}","/* Copyright 2019-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {NgModule} from \"@angular/core\";\nimport {CommonModule} from \"@angular/common\";\nimport {FormsModule} from \"@angular/forms\";\nimport {ClarityModule} from \"@clr/angular\";\nimport {CommonPipeModule} from \"@pipe/common-pipe.module\";\nimport {InventoryBrowserComponent} from \"@component/inventory/inventory-browser.component\";\nimport {InventoryNodeComponent} from \"@component/inventory/inventory-node.component\";\nimport {WitnessCandidateInventoryService} from \"@generated/witness-candidate-inventory-service\";\nimport {DatacenterInventoryService} from \"@generated/datacenter-inventory-service\";\nimport {NetworkInventoryService} from \"@generated/network-inventory-service\";\nimport {ComputeInventoryService} from \"@generated/compute-inventory-service\";\nimport {IoInsightInventoryService} from \"@generated/io-insight-inventory-service\";\nimport {SearchModule} from \"@component/search/search.module\";\nimport {TreeNodeComponent} from \"@component/inventory/tree-view/tree-node.component\";\nimport {TreeViewComponent} from \"@component/inventory/tree-view/tree-view.component\";\nimport {DropdownObjectSelectorComponent} from \"@component/inventory/dropdown-object-selector/dropdown-object-selector.component\";\nimport {CommonDirectiveModule} from \"@directive/common-directive.module\";\nimport {InventoryNodesComponent} from \"@component/inventory/inventory-nodes.component\";\nimport {TreeNodesComponent} from \"@component/inventory/tree-view/tree-nodes.component\";\n\n@NgModule({\n   imports: [\n      CommonModule,\n      FormsModule,\n      ClarityModule,\n      CommonPipeModule,\n      SearchModule,\n      CommonDirectiveModule,\n   ],\n   declarations: [\n      InventoryBrowserComponent,\n      InventoryNodesComponent,\n      InventoryNodeComponent,\n      TreeNodeComponent,\n      TreeNodesComponent,\n      TreeViewComponent,\n      DropdownObjectSelectorComponent,\n   ],\n   exports: [\n      InventoryBrowserComponent,\n      DropdownObjectSelectorComponent,\n      TreeViewComponent,\n   ],\n   providers: [\n      WitnessCandidateInventoryService,\n      DatacenterInventoryService,\n      NetworkInventoryService,\n      ComputeInventoryService,\n      IoInsightInventoryService,\n   ],\n})\nexport class InventoryBrowserModule {\n}","/* Copyright 2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {\n   AfterViewInit,\n   ComponentFactoryResolver,\n   Directive,\n   ElementRef,\n   Host,\n   Input,\n   Optional,\n   Renderer2,\n   Self,\n} from \"@angular/core\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {NavigationService} from \"@navigation/navigation.service\";\nimport {ClrButtonBaseDirective} from \"@directive/clr-button-group/clr-button-base.directive\";\nimport {ClrButton} from \"@clr/angular\";\n\n/**\n * Decorates a button or an anchor as external link. Requires one of the optional parameters articleId, helpId or url.\n *\n * @param external-link: Optional. Localization key of the text label of the external link. If omitted default label\n * will be used - \"Learn more\" for anchors or \"Ask VMWare\" for buttons.\n * @param articleId - Optional. Id of article in knowledge base.\n * @param helpId - Optional. Help id which will redirect to Knowledge Base.\n * @param url - Optional. External URL.\n */\n@Directive({\n   selector: \"a[external-link], button[external-link], clr-button[external-link]\",\n})\nexport class ExternalLinkDirective extends ClrButtonBaseDirective implements AfterViewInit {\n   private readonly ASK_VMWARE_DEFAULT_TEXT_KEY: string = \"vsan.common.askVMware\";\n   private readonly LEARN_MORE_DEFAULT_TEXT_KEY: string = \"vsan.common.learnMore\";\n\n   private readonly CONTAINER_CLASS: string = \"icon-name-container\";\n   private readonly NAVIGATION_EVENT_TYPE: string = \"click\";\n   private readonly LEAD_TO_NOWHERE_URL: string = \"javascript://\";\n   private readonly HTML_ELEMENT_SPAN_NAME: string = \"span\";\n   private readonly HTML_ELEMENT_ICON_NAME: string = \"clr-icon\";\n   private readonly HTML_ELEMENT_ROLE_ATTR_NAME: string = \"role\";\n   private readonly HTML_ELEMENT_ROLE_ATTR_VALUE: string = \"link\";\n   private readonly ICON_SHAPE_ATTR_NAME: string = \"shape\";\n   private readonly ICON_SHAPE_ATTR_VALUE: string = \"pop-out\";\n   private readonly ICON_SIZE_ATTR_NAME: string = \"size\";\n   private readonly ICON_SIZE_ATTR_VALUE: string = \"16\";\n   private readonly ICON_CLASS_ATTR_NAME: string = \"class\";\n   private readonly ICON_CLASS_ATTR_VALUE: string = \"link\";\n   private readonly ICON_TITLE_ATTR_NAME: string = \"title\";\n\n   private readonly KB_URL: string = \"http://kb.vmware.com/kb/\";\n\n   @Input(\"external-link\")\n   anchorText: string;\n\n   @Input()\n   articleId: string;\n\n   @Input()\n   helpId: string;\n\n   @Input()\n   url: string;\n\n   constructor(private el: ElementRef<HTMLElement>,\n         private resolver: ComponentFactoryResolver,\n         private renderer: Renderer2,\n         private navigationService: NavigationService,\n         // this variable will be initialized only if the host is clr-button\n         @Host() @Self() @Optional() clrButton: ClrButton) {\n      super(clrButton);\n   }\n\n   ngAfterViewInit(): void {\n      const element: HTMLElement = this.el.nativeElement;\n      // continue only if element is HTML link or button\n      if (!this.isLink(element) && !this.isButton(element)) {\n         // element is clr-button, wait until html button for it is resolved - handled by resloveButton\n         return;\n      }\n      this.prepareExternalLink(element);\n   }\n\n   resolveButton(clrButton: ClrButton, button: HTMLButtonElement, index: number): void {\n      // only if element is clr-button. At this point the html button is already resolved. Apply on it.\n      this.prepareExternalLink(button);\n   }\n\n   private prepareExternalLink(element: HTMLElement): void {\n      this.renderer.addClass(element, this.CONTAINER_CLASS);\n\n      this.setText(element);\n      if (this.isLink(element)) {\n         this.decorateLink(element);\n      } else {\n         this.addLinkRole(element);\n      }\n\n      this.initializeNavigationHandler(element);\n   }\n\n   private isButton(element: HTMLElement): boolean {\n      return element instanceof HTMLButtonElement;\n   }\n\n   private isLink(element: HTMLElement): boolean {\n      return element instanceof HTMLAnchorElement;\n   }\n\n   private setText(element: HTMLElement): void {\n      const span: HTMLSpanElement = this.renderer.createElement(this.HTML_ELEMENT_SPAN_NAME);\n      span.innerText = this.getText(element);\n      this.renderer.appendChild(element, span);\n\n      const icon: HTMLSpanElement = this.renderer.createElement(this.HTML_ELEMENT_ICON_NAME);\n      icon.setAttribute(this.ICON_SHAPE_ATTR_NAME, this.ICON_SHAPE_ATTR_VALUE);\n      icon.setAttribute(this.ICON_SIZE_ATTR_NAME, this.ICON_SIZE_ATTR_VALUE);\n      icon.setAttribute(this.ICON_CLASS_ATTR_NAME, this.ICON_CLASS_ATTR_VALUE);\n      // Set title of the icon for screen readers clarity\n      icon.setAttribute(this.ICON_TITLE_ATTR_NAME, VsanUiUtils.getString(\"vsan.screenReader.label.externalLink.icon\"));\n      this.renderer.appendChild(element, icon);\n   }\n\n   private getText(element: HTMLElement): string {\n      if (this.anchorText) {\n         return this.anchorText;\n      }\n      const key: string = this.isButton(element) ? this.ASK_VMWARE_DEFAULT_TEXT_KEY : this.LEARN_MORE_DEFAULT_TEXT_KEY;\n      return VsanUiUtils.getString(key);\n   }\n\n   private decorateLink(element: HTMLElement): void {\n      const linkElement: HTMLLinkElement = element as HTMLLinkElement;\n      // don't use href attribute. If omitted, the link will be not visualized properly.\n      linkElement.href = this.LEAD_TO_NOWHERE_URL;\n      // display link on same line\n      linkElement.style.display = \"inline-flex\";\n   }\n\n   private initializeNavigationHandler(element: HTMLElement): void {\n      element.addEventListener(this.NAVIGATION_EVENT_TYPE, () => {\n         if (this.helpId) {\n            this.navigationService.askVMware(this.helpId);\n            return;\n         }\n         if (this.articleId) {\n            this.navigationService.navigateToAddress(`${this.KB_URL}${this.articleId}`);\n            return;\n         }\n         if (this.url) {\n            this.navigationService.navigateToAddress(this.url);\n         }\n      });\n   }\n\n   // Indicate external navigation by assigning \"link\" role\n   private addLinkRole(element: HTMLElement): void {\n      this.renderer.setAttribute(element, this.HTML_ELEMENT_ROLE_ATTR_NAME, this.HTML_ELEMENT_ROLE_ATTR_VALUE);\n   }\n}","/* Copyright 2019 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {NgModule} from \"@angular/core\";\nimport {CommonModule} from \"@angular/common\";\nimport {FormsModule} from \"@angular/forms\";\nimport {ClarityModule} from \"@clr/angular\";\nimport {CommonPipeModule} from \"@pipe/common-pipe.module\";\nimport {SearchComponent} from \"@component/search/search.component\";\n\n@NgModule({\n   imports: [\n      CommonModule,\n      FormsModule,\n      ClarityModule,\n      CommonPipeModule\n   ],\n   declarations: [\n      SearchComponent\n   ],\n   exports: [\n      SearchComponent\n   ],\n})\nexport class SearchModule {\n}\n","<!-- Copyright 2019 VMware, Inc. All rights reserved. -- VMware Confidential -->\n<ng-container *ngIf=\"!allItems?.length\">\n   <span>{{'vsan.na.label' | localized}}</span>\n</ng-container>\n\n<ng-container *ngIf=\"allItems?.length\">\n   <div class=\"shown-items\">\n      <ng-container *ngFor=\"let item of shownItems\">\n         <ng-container [ngTemplateOutlet]='item'></ng-container>\n      </ng-container>\n   </div>\n\n   <clr-signpost *ngIf=\"hiddenItemsCount > 0\">\n      <button class=\"btn btn-link btn-sm popup-list-trigger\" clrSignpostTrigger>\n         {{\"vsan.common.expandList\" | localized : hiddenItemsCount}}\n      </button>\n      <clr-signpost-content *clrIfOpen [clrPosition]=\"signpostPosition\">\n         <ng-container *ngFor=\"let item of allItems\">\n            <div>\n               <ng-container [ngTemplateOutlet]='item'></ng-container>\n            </div>\n         </ng-container>\n      </clr-signpost-content>\n   </clr-signpost>\n</ng-container>\n\n"]}