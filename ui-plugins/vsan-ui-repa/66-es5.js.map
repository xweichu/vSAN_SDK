{"version":3,"sources":["webpack:///src/app/vsan/disk-management/views/validation/disk-management-action-availability.service.ts","webpack:///src/app/vsan/disk-management/views/validation/disk-group-error.ts"],"names":["DeviceState","DiskManagementActionAvailabilityService","spaceEfficiencyService","taskStarted","onTaskStarted","asObservable","objectsViewSelected","onObjectsViewSelected","hostDetailsViewSelected","onHostDetailsViewSelected","hasEditPermission","context","getString","isVsanMaxEnabled","ctx","vsanConfig","isNotEmptyCluster","isDiskClaimVsanManaged","isEmptyCluster","isNotAutoClaimMode","autoClaimMode","hasClusterEligibleDisks","getEligibleDiskCount","allHosts","isDiskGroupPreCheckAllowed","clusterCapabilities","isDiskResourcePrecheckSupported","hasHostMaintenancePermission","isHostPreCheckAllowed","isHostResourcePrecheckSupported","isDiskPreCheckAllowed","clusterHasObjectUuids","some","hasObjectUuids","hostIsConnected","host","state","connected","hostIsNotInMaintenanceMode","isInMaintenanceMode","isNotWitnessHost","isWitnessHost","hostHasObjectUuids","hostHasEligibleDisks","getClaimDistribution","get","USABLE","diskGroupIsNotLocked","diskGroup","isLocked","actionId","PRE_CHECK_ID","diskGroupIsNotMounted","isMounted","diskGroupIsMounted","diskGroupRecreationIsPossible","checkDiskGroup","ALL_CAPACITY_DISKS_ARE_UNHEALTHY","CACHE_DISK_IS_UNHEALTHY","diskGroupHasObjectUuids","diskIsMounted","isVsanDiskMounted","storageData","storage","diskIsUnMounted","diskIsNotDeadOrWithError","deviceState","ERROR","isVsanCapacityDisk","isMappedAsCache","DISK_PRE_CHECK_ID","spaceEfficiencySupportDiskPreCheck","isDiskPreCheckEvacuationSupported","spaceEfficiencyConfig","storageHasObjectUuids","isPmem","entity","isEmpty","objectUuids","type","PMEM","checkAvailability","VIEW_HOST_STORAGE_AND_GROUPS_ID","validate","viewDisksAndGroupsAvailability","VIEW_CLUSTER_OBJECTS_ID","viewClusterObjectsAvailability","VIEW_HOST_OBJECTS_ID","viewHostObjectsAvailability","VIEW_GROUP_OBJECTS_ID","viewDiskGroupObjectsAvailability","ADD_DISKS_TO_DISK_GROUP_ID","addDisksToDiskGroupAvailability","DELETE_DISK_GROUP_ID","removeDiskGroupAvailability","RECREATE_DISK_GROUP_ID","recreateDiskGroupAvailability","MOUNT_DISK_GROUP_ID","mountDiskGroupAvailability","UNMOUNT_DISK_GROUP_ID","unmountDiskGroupAvailability","SEMI_AUTO_CLAIM_DISKS_ID","semiAutoClaimDisksAvailability","CREATE_DISK_GROUP_ID","createDiskGroupAvailability","diskGroupPreCheckAvailability","diskGroupPreCheckSuccessKey","hostPreCheckAvailability","hostPreCheckSuccessKey","ADD_DISK_TO_DISK_GROUP_ID","addDiskToDiskGroupAvailability","diskPreCheckAvailability","diskPreCheckSuccessKey","DELETE_VSAN_DISK_ID","deleteVsanDiskAvailability","DELETE_VSAN_DIRECT_DISK_ID","deleteVsanDirectDiskAvailability","VIEW_STORAGE_OBJECTS_ID","viewStorageObjectsAvailability","viewStorageObjectsSuccessKey","TURN_LED_ON_ID","toggleDiskLedAvailability","TURN_LED_OFF_ID","MARK_DISK_AS_SSD_ID","changeDiskTypeAvailability","MARK_DISK_AS_HDD_ID","MARK_DISK_AS_LOCAL_ID","MARK_DISK_AS_REMOTE_ID","ERASE_DISK_PARTITIONS_ID","eraseDiskPartitionsAvailability","STOP_MANAGING_PMEM_ID","stopManagingPmemAvailability","VIEW_DUPLICATE_PCI_ID_DEVICES","viewDuplicatePciIdDevicesAvailability","ADD_DISKS_TO_STORAGE_POOL_ID","addDisksToStoragePoolAvailability","MOUNT_DISK_ID","mountDiskToStoragePoolAvailability","UNMOUNT_DISK_ID","unmountDiskFromStoragePoolAvailability","EDIT_VSAN_MANAGED_DISK_CLAIM_ID","editVsanManagedDiskClaimAvailability","capacityDisks","disks","filter","disk","claimOption","ClaimForStorage","unhealthyCapacityDisks","isHealthy","length","cacheDiskIsUnhealthy","find","ClaimForCache","validatorsGroup","successMessageKey","errorMessage","getFirstError","isActionAvailable","statusMessage","COPY_GROUP_UUID_ID","DiskGroupError"],"mappings":"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","file":"66-es5.js","sourcesContent":["/* Copyright 2020-2022 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Injectable} from \"@angular/core\";\nimport {ClaimOption} from \"@generated/claim-option\";\nimport {ConnectionState} from \"@generated/connection-state\";\nimport {DiskData} from \"@generated/disk-data\";\nimport {DiskType} from \"@generated/disk-type\";\nimport {ManagedObject} from \"@service/managed-object\";\nimport {SpaceEfficiencyService} from \"@service/space-efficiency-service\";\nimport {DiskMgmtDiskUtil} from \"@util/disk-mgmt-disk.util\";\nimport {DiskMgmtHostUtil} from \"@util/disk-mgmt-host.util\";\nimport {ClaimableState} from \"@util/disk-mgmt.util\";\nimport {ActionAvailableStatus} from \"@util/validation/action-available-status\";\nimport {Validator} from \"@util/validation/validator\";\nimport {ValidatorsGroup} from \"@util/validation/validators-group\";\nimport {VsanDiskUtil} from \"@util/vsan-disk-util\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {Observable, Subject} from \"rxjs\";\nimport {ViewObjectsContext} from \"../model/view-objects-context\";\nimport {DiskGroupError} from \"./disk-group-error\";\nimport {DiskManagementActionContext} from \"./disk-management-action-context\";\nimport DeviceState = DiskData.DeviceState;\n\n/**\n * This service holds:\n *    1) The validation logic related to disk management actions. It stores action ids and mappings between them and\n *    the validations. Based on the specified actionId and context this class validates the action availability.\n *    2) Subjects and observables to facilitate sending and subscribing to the actions' result between components.\n */\n@Injectable()\nexport class DiskManagementActionAvailabilityService {\n\n   taskStarted: Subject<ManagedObject[]> = new Subject<ManagedObject[]>();\n   onTaskStarted: Observable<ManagedObject[]> = this.taskStarted.asObservable();\n   objectsViewSelected: Subject<ViewObjectsContext> = new Subject<ViewObjectsContext>();\n   onObjectsViewSelected: Observable<ViewObjectsContext> = this.objectsViewSelected.asObservable();\n   hostDetailsViewSelected: Subject<void> = new Subject<void>();\n   onHostDetailsViewSelected: Observable<void> = this.hostDetailsViewSelected.asObservable();\n\n   constructor(private spaceEfficiencyService: SpaceEfficiencyService) {\n   }\n\n   // Cluster level action IDs\n   static readonly SEMI_AUTO_CLAIM_DISKS_ID: string = \"vsphere.core.cluster.vsan.semiAutoClaimDisks\";\n   static readonly STOP_MANAGING_PMEM_ID: string = \"vsphere.core.cluster.vsan.stopManagingPmemAction\";\n   static readonly VIEW_CLUSTER_OBJECTS_ID: string = \"vsphere.core.cluster.vsan.viewObjects\";\n   static readonly VIEW_DUPLICATE_PCI_ID_DEVICES: string = \"viewDuplicatePciIdDevices\";\n   static readonly EDIT_VSAN_MANAGED_DISK_CLAIM_ID: string = \"editVsanManagedDiskClaim\";\n\n   // Host and disk group common action IDs\n   static readonly PRE_CHECK_ID: string = \"vsphere.core.cluster.vsan.preCheckEvacuationAction\";\n\n   // Host action IDs\n   static readonly CREATE_DISK_GROUP_ID: string = \"vsphere.core.cluster.vsan.createDiskGroupAction\";\n   static readonly VIEW_HOST_OBJECTS_ID: string = \"vsphere.core.cluster.vsan.host.viewObjects\";\n   static readonly VIEW_HOST_STORAGE_AND_GROUPS_ID: string = \"vsphere.core.cluster.vsan.host.viewDisksAndGroups\";\n\n   // Disk group action IDs\n   static readonly ADD_DISKS_TO_DISK_GROUP_ID: string = \"vsphere.core.cluster.vsan.addDiskToDiskGroupAction\";\n   static readonly DELETE_DISK_GROUP_ID: string = \"vsphere.core.cluster.vsan.deleteDiskGroupAction\";\n   static readonly RECREATE_DISK_GROUP_ID: string = \"vsphere.core.cluster.vsan.recreateDiskGroupAction\";\n   static readonly MOUNT_DISK_GROUP_ID: string = \"vsphere.core.cluster.vsan.mountDiskGroupAction\";\n   static readonly UNMOUNT_DISK_GROUP_ID: string = \"vsphere.core.cluster.vsan.unmountDiskGroupAction\";\n   static readonly VIEW_GROUP_OBJECTS_ID: string = \"vsphere.core.cluster.vsan.group.viewObjects\";\n   static readonly COPY_GROUP_UUID_ID: string = \"vsphere.core.cluster.vsan.group.copyGroupUuid\";\n\n   // Disk action IDs\n   static readonly ADD_DISK_TO_DISK_GROUP_ID: string = \"vsphere.core.cluster.vsan.disk.addDiskToDiskGroupAction\";\n   static readonly ADD_DISKS_TO_STORAGE_POOL_ID: string = \"vsphere.core.cluster.vsan.disk.addDisksToStoragePoolAction\";\n   static readonly DISK_PRE_CHECK_ID: string = \"vsphere.core.cluster.vsan.disk.preCheckEvacuationAction\";\n   static readonly DELETE_VSAN_DISK_ID: string = \"vsphere.core.cluster.vsan.disk.deleteDiskAction\";\n   static readonly DELETE_VSAN_DIRECT_DISK_ID: string = \"vsphere.core.cluster.vsan.disk.deleteDiskAction.vsanDirect\";\n   static readonly UNMOUNT_DISK_ID: string = \"vsphere.core.cluster.vsan.unmountDiskAction\";\n   static readonly MOUNT_DISK_ID: string = \"vsphere.core.cluster.vsan.mountDiskAction\";\n   static readonly TURN_LED_ON_ID: string = \"vsphere.core.cluster.vsan.turnLedOn\";\n   static readonly TURN_LED_OFF_ID: string = \"vsphere.core.cluster.vsan.turnLedOff\";\n   static readonly MARK_DISK_AS_SSD_ID: string = \"vsphere.core.cluster.vsan.tagAsSsd\";\n   static readonly MARK_DISK_AS_HDD_ID: string = \"vsphere.core.cluster.vsan.tagAsHdd\";\n   static readonly MARK_DISK_AS_LOCAL_ID: string = \"vsphere.core.cluster.vsan.markAsLocal\";\n   static readonly MARK_DISK_AS_REMOTE_ID: string = \"vsphere.core.cluster.vsan.markAsRemote\";\n   static readonly ERASE_DISK_PARTITIONS_ID: string = \"vsphere.core.cluster.vsan.erasePartitions\";\n   static readonly VIEW_STORAGE_OBJECTS_ID: string = \"vsphere.core.cluster.vsan.storage.viewObjects\";\n\n   /*\n    * Permission checks\n    */\n   private readonly hasEditPermission: Validator<DiskManagementActionContext> = new Validator(\n         (context: DiskManagementActionContext): boolean => !context.hasEditPermission,\n         VsanUiUtils.getString(\"vsan.common.nopermissions\"));\n\n   /*\n    * Validates that vSAN Max is enabled on the cluster.\n    */\n   private readonly isVsanMaxEnabled: Validator<DiskManagementActionContext> =  new Validator(\n         (ctx) => !ctx.vsanConfig?.isVsanMaxEnabled,\n         VsanUiUtils.getString(\"vsan.services.vsan.max.disabled.reason\"),\n   );\n\n   /*\n    * Whether the cluster is empty when checking for vSAN managed disk claim.\n    * Not a required validation if the vSAN managed disk claim is already enabled,\n    * as we want to allow the users to disable it.\n    */\n   private readonly isNotEmptyCluster: Validator<DiskManagementActionContext> =  new Validator(\n         // When the cluster is empty do not allow enabling this setting,\n         // however if it was already enabled we should let the user disable it.\n         (ctx) => !ctx.vsanConfig?.isDiskClaimVsanManaged && ctx.isEmptyCluster,\n         VsanUiUtils.getString(\"vsan.services.vsan.max.emptyCluster.reason\"),\n   );\n\n   /*\n    * Validates that auto claim mode is not enabled.\n    */\n   private readonly isNotAutoClaimMode: Validator<DiskManagementActionContext> = new Validator(\n         (context: DiskManagementActionContext): boolean => context.autoClaimMode,\n         VsanUiUtils.getString(\"vsan.diskmanagement.action.unsupportedReason.autoclaimMode\"));\n\n   /*\n    * Validates that the cluster has eligible disks for claiming.\n    */\n   private readonly hasClusterEligibleDisks: Validator<DiskManagementActionContext> = new Validator(\n         (context: DiskManagementActionContext): boolean => !DiskMgmtHostUtil.getEligibleDiskCount(context.allHosts),\n         VsanUiUtils.getString(\"vsan.actions.semiAutoClaimDisks.description.disabled\"));\n\n   /*\n    * Validates that the cluster has the disk group pre-check capability enabled and the host can be placed in MM\n    * with the current user's permissions.\n    */\n   private readonly isDiskGroupPreCheckAllowed: Validator<DiskManagementActionContext> = new Validator(\n         (context: DiskManagementActionContext): boolean =>\n               context.clusterCapabilities.isDiskResourcePrecheckSupported && !context.hasHostMaintenancePermission,\n         VsanUiUtils.getString(\"vsan.common.nopermissions\"));\n\n   /*\n    * Validates that the cluster has the host pre-check capability enabled and the host can be placed in MM\n    * with the current user's permissions.\n    */\n   private readonly isHostPreCheckAllowed: Validator<DiskManagementActionContext> = new Validator(\n         (context: DiskManagementActionContext): boolean =>\n               context.clusterCapabilities.isHostResourcePrecheckSupported && !context.hasHostMaintenancePermission,\n         VsanUiUtils.getString(\"vsan.common.nopermissions\"));\n\n   /*\n    * Validates that the cluster has the disk pre-check capability enabled and the host can be placed in MM\n    * with the current user's permissions.\n    */\n   private readonly isDiskPreCheckAllowed: Validator<DiskManagementActionContext> = new Validator(\n         (context: DiskManagementActionContext): boolean =>\n               context.clusterCapabilities.isDiskResourcePrecheckSupported && !context.hasHostMaintenancePermission,\n         VsanUiUtils.getString(\"vsan.common.nopermissions\"));\n\n   /*\n    * Validates that the cluster has objects on its hosts.\n    */\n   private readonly clusterHasObjectUuids: Validator<DiskManagementActionContext> = new Validator(\n         (context: DiskManagementActionContext): boolean =>\n               !(context.allHosts && context.allHosts.some(this.hasObjectUuids)),\n         VsanUiUtils.getString(\"vsan.actions.viewClusterObjects.description.disabled\"));\n\n   /*\n    * Host related checks\n    */\n   private readonly hostIsConnected: Validator<DiskManagementActionContext> = new Validator(\n         (context: DiskManagementActionContext): boolean => context.host.state !== ConnectionState.connected,\n         VsanUiUtils.getString(\"vsan.diskmanagement.action.unsupportedReason.hostDisconnected\"));\n\n   private readonly hostIsNotInMaintenanceMode: Validator<DiskManagementActionContext> = new Validator(\n         (context: DiskManagementActionContext): boolean => context.host.isInMaintenanceMode,\n         VsanUiUtils.getString(\"vsan.diskmanagement.action.unsupportedReason.hostInMaintenanceMode\"));\n\n   private readonly isNotWitnessHost: Validator<DiskManagementActionContext> = new Validator(\n         (context: DiskManagementActionContext): boolean => context.host.isWitnessHost,\n         VsanUiUtils.getString(\"vsan.dialog.precheckEvacuation.unsupportedWitness\"));\n\n   private readonly hostHasObjectUuids: Validator<DiskManagementActionContext> = new Validator(\n         (context: DiskManagementActionContext): boolean => !this.hasObjectUuids(context.host),\n         VsanUiUtils.getString(\"vsan.actions.viewHostObjects.description.disabled\"));\n\n   private readonly hostHasEligibleDisks: Validator<DiskManagementActionContext> = new Validator(\n         (context: DiskManagementActionContext): boolean =>\n               !DiskMgmtHostUtil.getClaimDistribution(context.host).get(ClaimableState.USABLE),\n         VsanUiUtils.getString(\"vsan.actions.semiAutoClaimDisks.description.disabled\"));\n\n   /*\n    * Disk group related checks\n    */\n   private readonly diskGroupIsNotLocked: Validator<DiskManagementActionContext> = new Validator(\n         (context: DiskManagementActionContext): boolean => context.diskGroup.isLocked,\n         (context: DiskManagementActionContext): string =>\n               context.actionId !== DiskManagementActionAvailabilityService.PRE_CHECK_ID\n                     ? VsanUiUtils.getString(\"vsan.diskmanagement.action.unsupportedReason.lockedDiskGroup\")\n                     : VsanUiUtils.getString(\"vsan.dialog.precheckEvacuation.unsupportedLockedDiskGroup\"));\n\n   private readonly diskGroupIsNotMounted: Validator<DiskManagementActionContext> = new Validator(\n         (context: DiskManagementActionContext): boolean => context.diskGroup.isMounted,\n         VsanUiUtils.getString(\"vsan.diskmanagement.action.unsupportedReason.mountedDiskGroup\"));\n\n   private readonly diskGroupIsMounted: Validator<DiskManagementActionContext> = new Validator(\n         (context: DiskManagementActionContext): boolean => !context.diskGroup.isMounted,\n         (context: DiskManagementActionContext): string =>\n               context.actionId !== DiskManagementActionAvailabilityService.PRE_CHECK_ID\n                     ? VsanUiUtils.getString(\"vsan.diskmanagement.action.unsupportedReason.unmountedDiskGroups\")\n                     : VsanUiUtils.getString(\"vsan.dialog.precheckEvacuation.unsupportedUnmountedDiskGroup\"));\n\n   private readonly diskGroupRecreationIsPossible: Validator<DiskManagementActionContext> = new Validator(\n         (context: DiskManagementActionContext): boolean => this.checkDiskGroup(context) !== null,\n         (context: DiskManagementActionContext): string => {\n            switch (this.checkDiskGroup(context)) {\n               case DiskGroupError.ALL_CAPACITY_DISKS_ARE_UNHEALTHY:\n                  return VsanUiUtils.getString(\n                        \"vsan.diskmanagement.action.unsupportedReason.unhealthyCapacityDisks\");\n               case DiskGroupError.CACHE_DISK_IS_UNHEALTHY:\n                  return VsanUiUtils.getString(\n                        \"vsan.diskmanagement.action.unsupportedReason.unhealthyCacheDisk\");\n            }\n         },\n   );\n\n   private checkDiskGroup(context: DiskManagementActionContext): DiskGroupError {\n      const capacityDisks: DiskData[] =\n            context.diskGroup.disks.filter(disk => disk.claimOption === ClaimOption.ClaimForStorage);\n      const unhealthyCapacityDisks: DiskData[] =\n            capacityDisks.filter(disk => !DiskMgmtDiskUtil.isHealthy(disk));\n\n      if (capacityDisks.length === unhealthyCapacityDisks.length) {\n         return DiskGroupError.ALL_CAPACITY_DISKS_ARE_UNHEALTHY;\n      }\n\n      const cacheDiskIsUnhealthy: boolean = !DiskMgmtDiskUtil.isHealthy(\n            context.diskGroup.disks.find(disk => disk.claimOption === ClaimOption.ClaimForCache));\n\n      if (cacheDiskIsUnhealthy) {\n         return DiskGroupError.CACHE_DISK_IS_UNHEALTHY;\n      }\n\n      return null;\n   }\n\n   private readonly diskGroupHasObjectUuids: Validator<DiskManagementActionContext> = new Validator(\n         (context: DiskManagementActionContext): boolean => !this.hasObjectUuids(context.diskGroup),\n         VsanUiUtils.getString(\"vsan.actions.viewGroupObjects.description.disabled\"));\n\n   /**\n    * Disk related checks\n    */\n   private readonly diskIsMounted: Validator<DiskManagementActionContext> = new Validator(\n         (context: DiskManagementActionContext): boolean =>\n               !VsanDiskUtil.isVsanDiskMounted(context.storageData.storage as DiskData),\n         VsanUiUtils.getString(\"vsan.dialog.precheckEvacuation.unsupportedUnmountedDiskGroup\"));\n\n   private readonly diskIsUnMounted: Validator<DiskManagementActionContext> = new Validator(\n         (context: DiskManagementActionContext): boolean =>\n               VsanDiskUtil.isVsanDiskMounted(context.storageData.storage as DiskData),\n         VsanUiUtils.getString(\"vsan.diskmanagement.action.unsupportedReason.mountedDiskGroup\"));\n\n   private readonly diskIsNotDeadOrWithError: Validator<DiskManagementActionContext> = new Validator(\n         (context: DiskManagementActionContext): boolean =>\n               (context.storageData.storage as DiskData).deviceState === DeviceState.ERROR,\n         VsanUiUtils.getString(\"vsan.dialog.precheckEvacuation.diskInDeadOrError\"));\n\n   private readonly isVsanCapacityDisk: Validator<DiskManagementActionContext> = new Validator(\n         (context: DiskManagementActionContext): boolean =>\n               (context.storageData.storage as DiskData).isMappedAsCache,\n         (context: DiskManagementActionContext): string => {\n            return context.actionId === DiskManagementActionAvailabilityService.DISK_PRE_CHECK_ID\n                  ? VsanUiUtils.getString(\"vsan.dialog.precheckEvacuation.unsupportedCacheDisk\")\n                  : VsanUiUtils.getString(\"vsan.diskmanagement.action.unsupportedReason.cacheDisk\");\n         });\n\n   private readonly spaceEfficiencySupportDiskPreCheck: Validator<DiskManagementActionContext> = new Validator(\n         (context: DiskManagementActionContext): boolean =>\n               !this.spaceEfficiencyService.isDiskPreCheckEvacuationSupported(context.spaceEfficiencyConfig),\n         VsanUiUtils.getString(\"vsan.dialog.precheckEvacuation.deduplicationEnabled\"));\n\n   private readonly storageHasObjectUuids: Validator<DiskManagementActionContext> = new Validator(\n         (context: DiskManagementActionContext): boolean => !this.hasObjectUuids(context.storageData.storage),\n         (context: DiskManagementActionContext): string =>\n               VsanUiUtils.getString(this.isPmem(context)\n                     ? \"vsan.actions.viewDeviceObjects.description.disabled\"\n                     : \"vsan.actions.viewDiskObjects.description.disabled\"));\n\n   private hasObjectUuids = (entity: { objectUuids: string[] }): boolean => !VsanUiUtils.isEmpty(entity.objectUuids);\n\n   private isPmem = (context: DiskManagementActionContext): boolean => context.storageData.type === DiskType.PMEM;\n\n   checkAvailability = (ctx: DiskManagementActionContext): ActionAvailableStatus => {\n      switch (ctx.actionId) {\n         case DiskManagementActionAvailabilityService.VIEW_HOST_STORAGE_AND_GROUPS_ID:\n            return this.validate(this.viewDisksAndGroupsAvailability, ctx,\n                  \"vsan.actions.viewDisksAndGroups.description\");\n         case DiskManagementActionAvailabilityService.VIEW_CLUSTER_OBJECTS_ID:\n            return this.validate(this.viewClusterObjectsAvailability, ctx,\n                  \"vsan.actions.viewClusterObjects.description\");\n         case DiskManagementActionAvailabilityService.VIEW_HOST_OBJECTS_ID:\n            return this.validate(this.viewHostObjectsAvailability, ctx,\n                  \"vsan.actions.viewHostObjects.description\");\n         case DiskManagementActionAvailabilityService.VIEW_GROUP_OBJECTS_ID:\n            return this.validate(this.viewDiskGroupObjectsAvailability, ctx,\n                  \"vsan.actions.viewGroupObjects.description\");\n         case DiskManagementActionAvailabilityService.ADD_DISKS_TO_DISK_GROUP_ID:\n            return this.validate(this.addDisksToDiskGroupAvailability, ctx,\n                  \"vsan.actions.addDiskToDiskGroup.description\");\n         case DiskManagementActionAvailabilityService.DELETE_DISK_GROUP_ID:\n            return this.validate(this.removeDiskGroupAvailability, ctx,\n                  \"vsan.actions.deleteDiskGroup.description\");\n         case DiskManagementActionAvailabilityService.RECREATE_DISK_GROUP_ID:\n            return this.validate(this.recreateDiskGroupAvailability, ctx,\n                  \"vsan.actions.recreateDiskGroup.description\");\n         case DiskManagementActionAvailabilityService.MOUNT_DISK_GROUP_ID:\n            return this.validate(this.mountDiskGroupAvailability, ctx,\n                  \"vsan.actions.mountDiskGroup.description\");\n         case DiskManagementActionAvailabilityService.UNMOUNT_DISK_GROUP_ID:\n            return this.validate(this.unmountDiskGroupAvailability, ctx,\n                  \"vsan.actions.unmountDiskGroup.description\");\n         case DiskManagementActionAvailabilityService.SEMI_AUTO_CLAIM_DISKS_ID:\n            return this.validate(this.semiAutoClaimDisksAvailability, ctx,\n                  \"vsan.actions.semiAutoClaimDisks.description\");\n         case DiskManagementActionAvailabilityService.CREATE_DISK_GROUP_ID:\n            return this.validate(this.createDiskGroupAvailability, ctx,\n                  \"vsan.actions.createDiskGroup.description\");\n         case DiskManagementActionAvailabilityService.PRE_CHECK_ID:\n            return ctx.diskGroup\n                  ? this.validate(this.diskGroupPreCheckAvailability, ctx, this.diskGroupPreCheckSuccessKey(ctx))\n                  : this.validate(this.hostPreCheckAvailability, ctx, this.hostPreCheckSuccessKey(ctx));\n         case DiskManagementActionAvailabilityService.ADD_DISK_TO_DISK_GROUP_ID:\n            return this.validate(this.addDiskToDiskGroupAvailability, ctx,\n                  \"vsan.actions.addDiskToDiskGroup.description\");\n         case DiskManagementActionAvailabilityService.DISK_PRE_CHECK_ID:\n            return this.validate(this.diskPreCheckAvailability, ctx,\n                  this.diskPreCheckSuccessKey(ctx));\n         case DiskManagementActionAvailabilityService.DELETE_VSAN_DISK_ID:\n            return this.validate(this.deleteVsanDiskAvailability, ctx,\n                  \"vsan.actions.deleteDiskFromDiskGroup.description\");\n         case DiskManagementActionAvailabilityService.DELETE_VSAN_DIRECT_DISK_ID:\n            return this.validate(this.deleteVsanDirectDiskAvailability, ctx,\n                  \"vsan.actions.deleteVsanDirectDisk.description\");\n         case DiskManagementActionAvailabilityService.VIEW_STORAGE_OBJECTS_ID:\n            return this.validate(this.viewStorageObjectsAvailability, ctx,\n                  this.viewStorageObjectsSuccessKey(ctx));\n         case DiskManagementActionAvailabilityService.TURN_LED_ON_ID:\n            return this.validate(this.toggleDiskLedAvailability, ctx,\n                  \"vsan.actions.turnLedOn.description\");\n         case DiskManagementActionAvailabilityService.TURN_LED_OFF_ID:\n            return this.validate(this.toggleDiskLedAvailability, ctx,\n                  \"vsan.actions.turnLedOff.description\");\n         case DiskManagementActionAvailabilityService.MARK_DISK_AS_SSD_ID:\n            return this.validate(this.changeDiskTypeAvailability, ctx,\n                  \"storage.adapters.devices.action.tagAsSsd\");\n         case DiskManagementActionAvailabilityService.MARK_DISK_AS_HDD_ID:\n            return this.validate(this.changeDiskTypeAvailability, ctx,\n                  \"storage.adapters.devices.action.untagAsSsd\");\n         case DiskManagementActionAvailabilityService.MARK_DISK_AS_LOCAL_ID:\n            return this.validate(this.changeDiskTypeAvailability, ctx,\n                  \"storage.adapters.devices.action.markAsLocal\");\n         case DiskManagementActionAvailabilityService.MARK_DISK_AS_REMOTE_ID:\n            return this.validate(this.changeDiskTypeAvailability, ctx,\n                  \"storage.adapters.devices.action.markAsRemote\");\n         case DiskManagementActionAvailabilityService.ERASE_DISK_PARTITIONS_ID:\n            return this.validate(this.eraseDiskPartitionsAvailability, ctx,\n                  \"storage.adapters.devices.action.erasePartitions\");\n         case DiskManagementActionAvailabilityService.STOP_MANAGING_PMEM_ID:\n            return this.validate(this.stopManagingPmemAvailability, ctx,\n                  \"vsan.actions.stopManagingPmem.description\");\n         case DiskManagementActionAvailabilityService.VIEW_DUPLICATE_PCI_ID_DEVICES:\n            return this.validate(this.viewDuplicatePciIdDevicesAvailability, ctx,\n                  \"vsan.cluster.duplicatePciIdDevices.diskMgmt.dialog.label\");\n         case DiskManagementActionAvailabilityService.ADD_DISKS_TO_STORAGE_POOL_ID:\n            return this.validate(this.addDisksToStoragePoolAvailability, ctx,\n                  \"vsan.dialog.addDisksToStoragePool.title\");\n         case DiskManagementActionAvailabilityService.MOUNT_DISK_ID:\n            return this.validate(this.mountDiskToStoragePoolAvailability, ctx,\n                  \"vsan.dialog.mountDisk.dialogTitle\");\n         case DiskManagementActionAvailabilityService.UNMOUNT_DISK_ID:\n            return this.validate(this.unmountDiskFromStoragePoolAvailability, ctx,\n                  \"vsan.actions.unmountDisk.label\");\n         case DiskManagementActionAvailabilityService.EDIT_VSAN_MANAGED_DISK_CLAIM_ID:\n            return this.validate(this.editVsanManagedDiskClaimAvailability, ctx);\n      }\n   };\n\n   private validate(\n         validatorsGroup: ValidatorsGroup<DiskManagementActionContext>,\n         context: DiskManagementActionContext,\n         successMessageKey: string = \"\"): ActionAvailableStatus {\n\n      const errorMessage: string = validatorsGroup.getFirstError(context);\n      const isActionAvailable: boolean = errorMessage === null;\n      const statusMessage: string = isActionAvailable\n            ? VsanUiUtils.getString(successMessageKey)\n            : errorMessage;\n\n      return new ActionAvailableStatus(isActionAvailable, statusMessage);\n   }\n\n   // Cluster level action availabilities\n   private readonly semiAutoClaimDisksAvailability: ValidatorsGroup<DiskManagementActionContext> = new ValidatorsGroup([\n      this.hasEditPermission,\n      this.hasClusterEligibleDisks,\n   ]);\n\n   private readonly stopManagingPmemAvailability: ValidatorsGroup<DiskManagementActionContext> = new ValidatorsGroup([\n      this.hasEditPermission,\n   ]);\n\n   private readonly viewClusterObjectsAvailability: ValidatorsGroup<DiskManagementActionContext> = new ValidatorsGroup([\n      this.clusterHasObjectUuids,\n   ]);\n\n   private readonly viewDuplicatePciIdDevicesAvailability: ValidatorsGroup<DiskManagementActionContext> =\n         new ValidatorsGroup([this.hasEditPermission]);\n\n   private readonly editVsanManagedDiskClaimAvailability: ValidatorsGroup<DiskManagementActionContext> =\n         new ValidatorsGroup([\n               this.hasEditPermission,\n               this.isVsanMaxEnabled,\n               this.isNotEmptyCluster,\n         ]);\n\n   private readonly addDisksToStoragePoolAvailability: ValidatorsGroup<DiskManagementActionContext> =\n         new ValidatorsGroup([\n            this.hasEditPermission,\n            this.hostIsConnected,\n            this.hostHasEligibleDisks,\n         ]);\n\n   private readonly unmountDiskFromStoragePoolAvailability: ValidatorsGroup<DiskManagementActionContext> =\n         new ValidatorsGroup([\n            this.hasEditPermission,\n            this.hostIsConnected,\n            this.diskIsMounted,\n         ]);\n\n   private readonly mountDiskToStoragePoolAvailability: ValidatorsGroup<DiskManagementActionContext> =\n         new ValidatorsGroup([\n            this.hasEditPermission,\n            this.hostIsConnected,\n            this.diskIsUnMounted,\n         ]);\n\n   // Host action availabilities\n   private readonly createDiskGroupAvailability: ValidatorsGroup<DiskManagementActionContext> = new ValidatorsGroup([\n      this.hasEditPermission,\n      this.hostIsConnected,\n      this.isNotAutoClaimMode,\n   ]);\n\n   private readonly hostPreCheckAvailability: ValidatorsGroup<DiskManagementActionContext> = new ValidatorsGroup([\n      this.hostIsConnected,\n      this.hostIsNotInMaintenanceMode,\n      this.isNotWitnessHost,\n      this.isHostPreCheckAllowed,\n   ]);\n\n   private readonly viewDisksAndGroupsAvailability: ValidatorsGroup<DiskManagementActionContext> = new ValidatorsGroup([\n      this.hostIsConnected,\n   ]);\n\n   private readonly viewHostObjectsAvailability: ValidatorsGroup<DiskManagementActionContext> = new ValidatorsGroup([\n      this.hostIsConnected,\n      this.hostHasObjectUuids,\n   ]);\n\n   // Disk group action availabilities\n   private readonly addDisksToDiskGroupAvailability: ValidatorsGroup<DiskManagementActionContext> =\n         new ValidatorsGroup([\n            this.hasEditPermission,\n            this.hostIsConnected,\n            this.isNotAutoClaimMode,\n            this.diskGroupIsNotLocked,\n         ]);\n\n   private readonly diskGroupPreCheckAvailability: ValidatorsGroup<DiskManagementActionContext> = new ValidatorsGroup([\n      this.hostIsConnected,\n      this.hostIsNotInMaintenanceMode,\n      this.isNotWitnessHost,\n      this.isDiskGroupPreCheckAllowed,\n      this.diskGroupIsNotLocked,\n      this.diskGroupIsMounted,\n   ]);\n\n   private readonly removeDiskGroupAvailability: ValidatorsGroup<DiskManagementActionContext> = new ValidatorsGroup([\n      this.hasEditPermission,\n      this.hostIsConnected,\n      this.isNotAutoClaimMode,\n   ]);\n\n   private readonly recreateDiskGroupAvailability: ValidatorsGroup<DiskManagementActionContext> = new ValidatorsGroup([\n      this.hasEditPermission,\n      this.hostIsConnected,\n      this.isNotAutoClaimMode,\n      this.diskGroupIsNotLocked,\n      this.diskGroupRecreationIsPossible,\n      this.diskGroupIsMounted,\n   ]);\n\n   private readonly mountDiskGroupAvailability: ValidatorsGroup<DiskManagementActionContext> = new ValidatorsGroup([\n      this.hasEditPermission,\n      this.hostIsConnected,\n      this.diskGroupIsNotMounted,\n   ]);\n\n   private readonly unmountDiskGroupAvailability: ValidatorsGroup<DiskManagementActionContext> = new ValidatorsGroup([\n      this.hasEditPermission,\n      this.hostIsConnected,\n      this.diskGroupIsMounted,\n   ]);\n\n   private readonly viewDiskGroupObjectsAvailability: ValidatorsGroup<DiskManagementActionContext> =\n         new ValidatorsGroup([\n            this.hostIsConnected,\n            this.diskGroupHasObjectUuids,\n         ]);\n\n   // Disk action availabilities\n   private readonly addDiskToDiskGroupAvailability: ValidatorsGroup<DiskManagementActionContext> = new ValidatorsGroup([\n      this.hasEditPermission,\n      this.hostIsConnected,\n      this.isNotAutoClaimMode,\n   ]);\n\n   private readonly diskPreCheckAvailability: ValidatorsGroup<DiskManagementActionContext> = new ValidatorsGroup([\n      this.hostIsConnected,\n      this.hostIsNotInMaintenanceMode,\n      this.isNotWitnessHost,\n      this.isDiskPreCheckAllowed,\n      this.diskIsMounted,\n      this.diskIsNotDeadOrWithError,\n      this.isVsanCapacityDisk,\n      this.spaceEfficiencySupportDiskPreCheck,\n   ]);\n\n   private readonly deleteVsanDiskAvailability: ValidatorsGroup<DiskManagementActionContext> = new ValidatorsGroup([\n      this.hasEditPermission,\n      this.hostIsConnected,\n      this.isNotAutoClaimMode,\n      this.isVsanCapacityDisk,\n   ]);\n\n   private readonly deleteVsanDirectDiskAvailability: ValidatorsGroup<DiskManagementActionContext> =\n         new ValidatorsGroup([\n            this.hasEditPermission,\n            this.hostIsConnected,\n            this.isNotAutoClaimMode,\n         ]);\n\n   private readonly toggleDiskLedAvailability: ValidatorsGroup<DiskManagementActionContext> = new ValidatorsGroup([\n      this.hasEditPermission,\n      this.hostIsConnected,\n      this.isNotAutoClaimMode,\n   ]);\n\n   private readonly changeDiskTypeAvailability: ValidatorsGroup<DiskManagementActionContext> = new ValidatorsGroup([\n      this.hasEditPermission,\n      this.hostIsConnected,\n      this.isNotAutoClaimMode,\n   ]);\n\n   private readonly eraseDiskPartitionsAvailability: ValidatorsGroup<DiskManagementActionContext> =\n         new ValidatorsGroup([\n            this.hasEditPermission,\n            this.hostIsConnected,\n            this.isNotAutoClaimMode,\n         ]);\n\n   private readonly viewStorageObjectsAvailability: ValidatorsGroup<DiskManagementActionContext> = new ValidatorsGroup([\n      this.hostIsConnected,\n      this.storageHasObjectUuids,\n   ]);\n\n   private diskPreCheckSuccessKey = (context: DiskManagementActionContext): string => {\n      return context.clusterCapabilities.isDiskResourcePrecheckSupported\n            ? \"vsan.actions.goToPrecheckDataMigration.disk.description\"\n            : \"vsan.actions.precheckDiskEvacuation.description\";\n   };\n\n   private diskGroupPreCheckSuccessKey = (context: DiskManagementActionContext): string => {\n      return context.clusterCapabilities.isDiskResourcePrecheckSupported\n            ? \"vsan.actions.goToPrecheckDataMigration.diskGroup.description\"\n            : \"vsan.actions.precheckDiskGroupEvacuation.description\";\n   };\n\n   private hostPreCheckSuccessKey = (context: DiskManagementActionContext): string => {\n      return context.clusterCapabilities.isHostResourcePrecheckSupported\n            ? \"vsan.actions.goToPrecheckDataMigration.host.description\"\n            : \"vsan.actions.precheckHostEvacuation.description\";\n   };\n\n   private viewStorageObjectsSuccessKey = (context: DiskManagementActionContext): string => {\n      return this.isPmem(context)\n            ? \"vsan.actions.viewDeviceObjects.description\"\n            : \"vsan.actions.viewDiskObjects.description\";\n   };\n}\n","/* Copyright 2020 VMware, Inc. All rights reserved. -- VMware Confidential */\nexport enum DiskGroupError {\n   ALL_CAPACITY_DISKS_ARE_UNHEALTHY,\n   CACHE_DISK_IS_UNHEALTHY\n}"]}