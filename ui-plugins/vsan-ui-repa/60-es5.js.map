{"version":3,"sources":["webpack:///src/app/vsan/common/component/precheck/pre-check-evacuation-select.html","webpack:///src/app/vsan/common/component/precheck/pre-check-evacuation-select.component.ts","webpack:///src/app/vsan/common/util/vsan-disk-mgmt-actions-util.ts","webpack:///src/app/vsan/common/component/precheck/pre-check.module.ts","webpack:///src/app/vsan/common/util/vsan-signpost-util.ts"],"names":["PreCheckEvacuationSelectComponent","decommissionModeSignpostId","_selectedDecommissionMode","ensureObjectAccessibility","selectLabel","getString","unsupportedDecommissionModes","selectedDecommisionModeChange","decommissionModeOptions","value","evacuateAllData","label","noAction","DecommissionMode","emit","mode","isEmpty","includes","SIGNPOST_WIDTH","SIGNPOST_HEIGHT","getPosition","VsanDiskMgmtActionsUtil","STOP_MANAGING_PMEM_HEIGHT","STOP_MANAGING_PMEM_WIDTH","DELETE_DISK_GROUP_HEIGHT_LARGE","DELETE_DISK_GROUP_HEIGHT_MEDIUM","DELETE_DISK_GROUP_HEIGHT_SMALL","DELETE_DISK_GROUP_HEIGHT_PRECHECK","DELETE_DISK_GROUP_WIDTH","DELETE_DISKS_HEIGHT_LARGE","DELETE_DISKS_HEIGHT_MEDIUM","DELETE_DISKS_HEIGHT_SMALL","DELETE_DISKS_HEIGHT_PRECHECK","DELETE_DISKS_WIDTH","DELETE_VSAN_DIRECT_DISKS_HEIGHT","DELETE_VSAN_DIRECT_DISKS_HEIGHT_PRECHECK","DELETE_VSAN_DIRECT_DISKS_WIDTH","RECREATE_DIALOG_HEIGHT_LARGE","RECREATE_DIALOG_HEIGHT_MEDIUM","RECREATE_DIALOG_HEIGHT_SMALL","RECREATE_DIALOG_HEIGHT_PRECHECK","RECREATE_DIALOG_WIDTH","MOUNT_DISK_GROUP_DIALOG_HEIGHT","MOUNT_DISK_GROUP_DIALOG_WIDTH","UNMOUNT_DISK_GROUP_DIALOG_HEIGHT_LARGE","UNMOUNT_DISK_GROUP_DIALOG_HEIGHT_MEDIUM","UNMOUNT_DISK_GROUP_DIALOG_HEIGHT_SMALL","UNMOUNT_DISK_GROUP_DIALOG_HEIGHT_PRECHECK","UNMOUNT_DISK_GROUP_DIALOG_WIDTH","UNMOUNT_DISK_DIALOG_HEIGHT","UNMOUNT_DISK_DIALOG_HEIGHT_SMALL","UNMOUNT_DISK_DIALOG_WIDTH","shouldAllowDiskGroupDataMigration","host","diskGroup","isWhatIfSupported","isWitnessHost","isInMaintenanceMode","isMounted","isLocked","getDataMigrationWarningForDiskGroup","isHostInMaintenanceMode","isDiskGroupMounted","getSelectedDecommissionMode","shouldAllowDataMigration","selectedDecommissionMode","getVsanDiskMapping","group","cacheDisk","capacityDisks","disks","forEach","disk","isMappedAsCache","push","Factory","create","map","isPrecheckWithObjects","precheckSummary","inaccessibleIncompliantObjects","length","getEvacuationContext","hostRef","entityUuid","selectedEntity","uid","selectedEvacuationType","objectUuid","PrecheckModule","VsanSignpostUtil","elementId","signpostWidth","signpostHeight","isInModal","elementBox","document","getElementById","getBoundingClientRect","modalVerticalPadding","MODAL_VERTICAL_PADDING","verticalPosition","getVerticalPosition","ARROW_SIZE","modalHorizontalPadding","MODAL_HORIZONTAL_PADDING","horizontalPosition","getHorizontalPosition","elementHeight","bodyBox","body","bottom","height","BOTTOM","top","TOP","MIDDLE","elementWidth","right","width","RIGHT","left","LEFT"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;uEAYe,2H,GAAA;AAAA;AAAA,gB,EAAA;AAAA;AAAA,gB,GAAuG,kH,IAEvG;AAFoE,4BAAkC,OAAlC,CAAkC,OAAlC,CAAkC,SAAlC,CAAkC,KAAlC;;AAApE,wBAAoE,SAApE;;AAAoE,4BAAkC,OAAlC,CAAkC,OAAlC,CAAkC,SAAlC,CAAkC,KAAlC;;AAApE,wBAAoE,SAApE;AAAsG,S,EAAA;AAAC;;AAAA;AAEvG,S;AAAA;;;uEAHH,yH,IAAuE,2F,IACpE,mI,GAAA;AAAA;AAAA,gB,GAES,wF,IACZ;AAAA;;AAHW,4DAA2D,QAA3D,CAA2D,SAA3D,CAA2D,KAA3D;;AAAR,wBAAQ,SAAR;AAAmE,S,EAAA,I;AAAA;;;uEAShE,uH,IAA0E,wH,GAAA,wD,GAAA,I,EAAA;AAAA;;AAAA;AAE1E,S;AAAA;;;uEACA,uH,IAAoF,wH,GAAA,wD,GAAA,I,EAAA;AAAA;;AAAA;AAEpF,S;AAAA;;;uEAPN,6Z,GAAA,oK,EAAA;AAAA;AAAA,gB,GAAuF,wF,IACpF,qH,IAAI,8F,IACD,mI,GAAA;AAAA;AAAA,gB,GAEK,8F,IACL,mI,GAAA;AAAA;AAAA,gB,GAEK,8F,IACL,wH,IAAI,yH,GAAA,yD,GAEC,2F,IACH,qF,IACR;AAAA;;AAZiC,6BAAqD,oCAArD;;AAAjC,wBAAiC,SAAjC;;AAEU,6DAAqE,iBAArE,CAAqE,eAArE;;AAAJ,wBAAI,SAAJ;;AAGI,6DAA+E,iBAA/E,CAA+E,yBAA/E;;AAAJ,yBAAI,SAAJ;AAAmF,S,EAAA;AALzF;;AAAA;;AAAA;;AAAA;;AAQU;;AAAA;AAEJ,S;AAAA;;;2MA7BiE,4E,IACnF;AAAA;;AAAA;;;;;;;;;;;SAAA,E,IAAA,E,IAAA,C,+uBAA2C,+E,IACxC,sJ,IAA8B,kF,IAC3B,iN,GAAA;AAAA;AAAA,gB,GAAwE,iG,IAEhE,kF,IACR,4J,IAAmC,qF,IAChC;AAAA;AAAA;;AAAA;;;;;;;;;;;;;;;AAGQ;;;;;AAHR;AAAA,sB,GAAA,kR,EAAA;AAAA;AAAA,uF,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA,U,EAAA,wL,EAAA,mN,EAAA;AAAA;AAAA,gB,GAG+C,wF,IAC5C,mI,GAAA;AAAA;AAAA,gB,GAIe,qF,IACT,qF,IACT,oW,GAAA,iL,EAAA,sK,EAAA,sK,EAAA,oN,EAAA;AAAA;AAAA,U,EAAA;AAAA;AAAA,gB,EACc,yD,EADd,6M,GACkG,qF,IAC/F,gI,GAAA;AAAA;AAAA,gB,GAYuB,kF,IACX,kF,IACZ,+E,IACH,4E,IACF,4E,IACP;AAAA;AAjCa;;AAAP,yBAAO,SAAP;;AAMW;AACA,8BAAsC,yBAAtC;;AAHR,yBAEQ,UAFR,EAGQ,UAHR;;AAAQ;;AAAR,yBAAQ,UAAR;;AAIiB,8BAAwD,wBAAxD;;AAAd,yBAAc,UAAd;;AAOW;;AADd,yBACc,UADd;;AAEyB;;AAAtB,yBAAsB,UAAtB;AAAgC,S,EAAA;AAAA;;AAlB5C;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAEM;;AAAA;;AAAwE;;AAAA;;AAIrE;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAUc;;AAAd;;AAAA,yBAAc,UAAd;AACkG,S;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClB3G;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;UAWaA,iC;AALb;AAAA;;AAMY,eAAAC,0BAAA,GAAqC,uCAArC;AAED,eAAAC,yBAAA,GAA8C,8EAAiBC,yBAA/D;AAGR,eAAAC,WAAA,GAAsB,4DAAYC,SAAZ,CAAsB,sCAAtB,CAAtB;AAeA,eAAAC,4BAAA,GAAmD,EAAnD;AAGA,eAAAC,6BAAA,GAAgE,IAAI,0DAAJ,EAAhE;AAEA,eAAAC,uBAAA,GAAoD,CACjD;AACGC,iBAAK,EAAE,8EAAiBC,eAD3B;AAEGC,iBAAK,EAAE,4DAAYN,SAAZ,CAAsB,kDAAtB;AAFV,WADiD,EAKjD;AACGI,iBAAK,EAAE,8EAAiBN,yBAD3B;AAEGQ,iBAAK,EAAE,4DAAYN,SAAZ,CAAsB,oDAAtB;AAFV,WALiD,EASjD;AACGI,iBAAK,EAAE,8EAAiBG,QAD3B;AAEGD,iBAAK,EAAE,4DAAYN,SAAZ,CAAsB,gDAAtB;AAFV,WATiD,CAApD;AAeA,eAAAQ,gBAAA,GAA4C,6EAA5C;AAcF;;;;eAvCE,eAA4B;AACzB,mBAAO,KAAKX,yBAAZ;AACF,W;eAVD,aAC6BO,KAD7B,EACsD;AACnD,gBAAIA,KAAK,KAAK,KAAKP,yBAAnB,EAA8C;AAC3C,mBAAKA,yBAAL,GAAiCO,KAAjC;AACA,mBAAKF,6BAAL,CAAmCO,IAAnC,CAAwCL,KAAxC;AACF;AACH;;;iBA6BD,qCAA4BM,IAA5B,EAAkD;AAC/C,mBAAO,4DAAYC,OAAZ,CAAoB,KAAKV,4BAAzB,KACD,CAAC,KAAKA,4BAAL,CAAkCW,QAAlC,CAA2CF,IAA3C,CADP;AAEF;;;iBAED,+CAAmC;AAChC,gBAAMG,cAAc,GAAW,GAA/B;AACA,gBAAMC,eAAe,GAAW,GAAhC;AACA,mBAAO,0EAAiBC,WAAjB,CAA6B,KAAKnB,0BAAlC,EAA8DiB,cAA9D,EAA8EC,eAA9E,EACD,IADC,CAAP;AAEF;;;;;;;;;;;;;;;;;;;;;AChEJ;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAYO;AAAA,YAAME,uBAAN;AAAA;AAAA,YAEJ;;;AACgB,gCAAAC,yBAAA,GAAoC,GAApC;AACA,gCAAAC,wBAAA,GAAmC,GAAnC,CAJZ,CAMJ;;AACgB,gCAAAC,8BAAA,GAAyC,GAAzC;AACA,gCAAAC,+BAAA,GAA0C,GAA1C;AACA,gCAAAC,8BAAA,GAAyC,GAAzC;AACA,gCAAAC,iCAAA,GAA4C,GAA5C;AACA,gCAAAC,uBAAA,GAAkC,IAAlC,CAXZ,CAaJ;;AACgB,gCAAAC,yBAAA,GAAoC,GAApC;AACA,gCAAAC,0BAAA,GAAqC,GAArC;AACA,gCAAAC,yBAAA,GAAoC,GAApC;AACA,gCAAAC,4BAAA,GAAuC,GAAvC;AACA,gCAAAC,kBAAA,GAA6B,IAA7B;AACA,gCAAAC,+BAAA,GAA0C,GAA1C;AACA,gCAAAC,wCAAA,GAAmD,GAAnD;AACA,gCAAAC,8BAAA,GAAyC,GAAzC,CArBZ,CAuBJ;;AACgB,gCAAAC,4BAAA,GAAuC,GAAvC;AACA,gCAAAC,6BAAA,GAAwC,GAAxC;AACA,gCAAAC,4BAAA,GAAuC,GAAvC;AACA,gCAAAC,+BAAA,GAA0C,GAA1C;AACA,gCAAAC,qBAAA,GAAgC,IAAhC,CA5BZ,CA8BJ;;AACgB,gCAAAC,8BAAA,GAAyC,GAAzC;AACA,gCAAAC,6BAAA,GAAwC,GAAxC,CAhCZ,CAkCJ;;AACgB,gCAAAC,sCAAA,GAAiD,GAAjD;AACA,gCAAAC,uCAAA,GAAkD,GAAlD;AACA,gCAAAC,sCAAA,GAAiD,GAAjD;AACA,gCAAAC,yCAAA,GAAoD,GAApD;AACA,gCAAAC,+BAAA,GAA0C,IAA1C,CAvCZ,CAyCJ;;AACgB,gCAAAC,0BAAA,GAAqC,GAArC;AACA,gCAAAC,gCAAA,GAA2C,GAA3C;AACA,gCAAAC,yBAAA,GAAoC,IAApC;;AAET,gCAAAC,iCAAA,GAAoC,UAACC,IAAD,EAAuBC,SAAvB,EAAmE;AAC3G,iBAAOD,IAAI,CAACE,iBAAL,IAA0B,CAACF,IAAI,CAACG,aAAhC,IAAiD,CAACH,IAAI,CAACI,mBAAvD,IACDH,SAAS,CAACI,SADT,IACsB,CAACJ,SAAS,CAACK,QADxC;AAEF,SAHM;;AAKA,gCAAAC,mCAAA,GAAsC,UAACC,uBAAD,EACvCC,kBADuC,EACC;AAC3C,cAAID,uBAAJ,EAA6B;AAC1B,mBAAO,4DAAYxD,SAAZ,CAAsB,uDAAtB,CAAP;AACF;;AACD,cAAI,CAACyD,kBAAL,EAAyB;AACtB,mBAAO,4DAAYzD,SAAZ,CAAsB,wDAAtB,CAAP;AACF;AACH,SARM;;AAUA,gCAAA0D,2BAAA,GAA8B,UAACC,wBAAD,EAC/BC,wBAD+B,EACmC;AACrE,cAAI,CAACD,wBAAL,EAA+B;AAC5B,mBAAO,8EAAiBpD,QAAxB;AACF;;AAED,iBAAOqD,wBAAwB,IAAI,8EAAiB9D,yBAApD;AACF,SAPM;;AASA,gCAAA+D,kBAAA,GAAqB,UAACC,KAAD,EAA2C;AACpE,cAAIC,SAAJ;AACA,cAAMC,aAAa,GAAe,EAAlC;AACAF,eAAK,CAACG,KAAN,CAAYC,OAAZ,CAAoB,UAAAC,IAAI,EAAI;AACzB,gBAAIA,IAAI,CAACC,eAAT,EAA0B;AACvBL,uBAAS,GAAGI,IAAZ;AACF,aAFD,MAEO;AACJH,2BAAa,CAACK,IAAd,CAAmBF,IAAnB;AACF;AACH,WAND;AAOA,iBAAO,6EAAgBG,OAAhB,CAAwBC,MAAxB,CAA+BR,SAAS,SAAT,IAAAA,SAAS,WAAT,GAAS,MAAT,GAAAA,SAAS,CAAEI,IAA1C,EAAgDH,aAAa,CAACQ,GAAd,CAAkB,UAAAL,IAAI;AAAA,mBAAIA,IAAI,CAACA,IAAT;AAAA,WAAtB,CAAhD,CAAP;AACF,SAXM;;AAaA,gCAAAM,qBAAA,GAAwB,UAACC,eAAD,EAAuD;AACnF;AACA,iBAAOA,eAAe,CAACC,8BAAhB,IACED,eAAe,CAACC,8BAAhB,CAA+CC,MAA/C,GAAwD,CADjE;AAEF,SAJM;;AAMA,gCAAAC,oBAAA,GAAuB,UAACC,OAAD,EAAyBC,UAAzB,EACxBnB,wBADwB,EAC2C;AACtE,cAAMoB,cAAc,GAAW,sEAAcC,GAAd,CAAkBH,OAAlB,CAA/B;;AACA,cAAMI,sBAAsB,GACtBlE,uBAAuB,CAAC0C,2BAAxB,CAAoD,IAApD,EAA0DE,wBAA1D,CADN;AAEA,iBAAO;AACJoB,0BAAc,EAAEA,cADZ;AAEJG,sBAAU,EAAEJ,UAFR;AAGJG,kCAAsB,EAAEA;AAHpB,WAAP;AAKF,SAVM;;;OAzFH;;;;;;;;;;;;;;;;;ACeP;AAAA;;;AAAA;AAAA;AAAA;;UAAaE,c;;;;;;;;;;;;;;;;;;;AC3Bb;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAEO;AAAA,YAAMC,gBAAN;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,mBAcJ,qBAAmBC,SAAnB,EAAsCC,aAAtC,EAA6DC,cAA7D,EACgC;AAAA,kBAA1BC,SAA0B,uEAAL,KAAK;AAC7B,kBAAMC,UAAU,GAAYC,QAAQ,CAACC,cAAT,CAAwBN,SAAxB,EAAmCO,qBAAnC,EAA5B;AACA,kBAAMC,oBAAoB,GAAWL,SAAS,GACtCJ,gBAAgB,CAACU,sBADqB,GAEtC,CAFR;AAGA,kBAAMC,gBAAgB,GAAWX,gBAAgB,CAACY,mBAAjB,CAC3BP,UAD2B,EACfF,cAAc,GAAGH,gBAAgB,CAACa,UAAlC,GAA+CJ,oBADhC,CAAjC;AAEA,kBAAMK,sBAAsB,GAAWV,SAAS,GACxCJ,gBAAgB,CAACe,wBADuB,GAExC,CAFR;AAGA,kBAAMC,kBAAkB,GAAWhB,gBAAgB,CAACiB,qBAAjB,CAC7BZ,UAD6B,EACjBH,aAAa,GAAGF,gBAAgB,CAACa,UAAjC,GAA8CC,sBAD7B,CAAnC;AAEA,+BAAUH,gBAAV,cAA8BK,kBAA9B;AACF;AA5BG;AAAA;AAAA,mBA8BI,6BAA2BX,UAA3B,EAAmDa,aAAnD,EAAwE;AAC7E,kBAAMC,OAAO,GAAYb,QAAQ,CAACc,IAAT,CAAcZ,qBAAd,EAAzB;;AACA,kBAAIH,UAAU,CAACgB,MAAX,GAAoBH,aAApB,GAAoCC,OAAO,CAACG,MAAhD,EAAwD;AACrD;AACA,uBAAOtB,gBAAgB,CAACuB,MAAxB;AACF,eAHD,MAGO,IAAIlB,UAAU,CAACmB,GAAX,GAAiBN,aAAjB,GAAiC,CAArC,EAAwC;AAC5C,uBAAOlB,gBAAgB,CAACyB,GAAxB;AACF,eAFM,MAEA;AACJ,uBAAOzB,gBAAgB,CAAC0B,MAAxB;AACF;AACH;AAxCG;AAAA;AAAA,mBA0CI,+BAA6BrB,UAA7B,EAAqDsB,YAArD,EAAyE;AAC9E,kBAAMR,OAAO,GAAYb,QAAQ,CAACc,IAAT,CAAcZ,qBAAd,EAAzB;;AACA,kBAAIH,UAAU,CAACuB,KAAX,GAAmBD,YAAnB,GAAkCR,OAAO,CAACU,KAA9C,EAAqD;AAClD;AACA,uBAAO7B,gBAAgB,CAAC8B,KAAxB;AACF,eAHD,MAGO,IAAIzB,UAAU,CAAC0B,IAAX,GAAkBJ,YAAlB,GAAiC,CAArC,EAAwC;AAC5C,uBAAO3B,gBAAgB,CAACgC,IAAxB;AACF,eAFM,MAEA;AACJ,uBAAOhC,gBAAgB,CAAC0B,MAAxB;AACF;AACH;AApDG;;AAAA;AAAA,aACJ;;;AACwB,yBAAAb,UAAA,GAAqB,EAArB,CAFpB,CAGJ;;AACwB,yBAAAE,wBAAA,GAAmC,EAAnC,CAJpB,CAKJ;;AACwB,yBAAAL,sBAAA,GAAiC,EAAjC;AAEA,yBAAAe,GAAA,GAAc,KAAd;AACA,yBAAAO,IAAA,GAAe,MAAf;AACA,yBAAAF,KAAA,GAAgB,OAAhB;AACA,yBAAAP,MAAA,GAAiB,QAAjB;AACA,yBAAAG,MAAA,GAAiB,QAAjB;;OAZpB","file":"60-es5.js","sourcesContent":["<!--Copyright 2019-2021 VMware, Inc. All rights reserved. -- VMware Confidential-->\n<form class=\"clr-form clr-form-horizontal\">\n   <div class=\"clr-form-control\">\n      <label for=\"vsan-pre-check-evacuation-select\" class=\"clr-control-label\">\n         {{selectLabel}}\n      </label>\n      <div class=\"clr-control-container\">\n         <select id=\"vsan-pre-check-evacuation-select\"\n                 clrSelect\n                 name=\"decommissionMode\"\n                 [(ngModel)]=\"selectedDecommissionMode\">\n            <ng-container *ngFor=\"let decommissionMode of decommissionModeOptions\">\n               <option *ngIf=\"isDecommissionModeSupported(decommissionMode.value)\" [ngValue]=\"decommissionMode.value\">\n                  {{decommissionMode.label}}\n               </option>\n            </ng-container>\n         </select>\n         <clr-signpost id=\"{{decommissionModeSignpostId}}\"\n                       [vsan-signpost-title]=\"'vsan.dialog.precheckEvacuation.signpost.label' | localized\">\n            <clr-signpost-content *clrIfOpen [clrPosition]=\"getDecommissionModeSignpostPosition()\">\n               <ul>\n                  <li *ngIf=\"isDecommissionModeSupported(DecommissionMode.evacuateAllData)\">\n                     {{\"vsan.dialog.precheckEvacuation.signpost.fullDataMigration\"| localized}}\n                  </li>\n                  <li *ngIf=\"isDecommissionModeSupported(DecommissionMode.ensureObjectAccessibility)\">\n                     {{\"vsan.dialog.precheckEvacuation.signpost.ensureAccesibility\"| localized}}\n                  </li>\n                  <li>\n                     {{\"vsan.dialog.precheckEvacuation.signpost.noDataMigration\" | localized}}\n                  </li>\n               </ul>\n            </clr-signpost-content>\n         </clr-signpost>\n      </div>\n   </div>\n</form>\n","/* Copyright 2019-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, EventEmitter, Input, Output} from \"@angular/core\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {VsanSignpostUtil} from \"@util/vsan-signpost-util\";\nimport {DecommissionMode} from \"@generated/decommission-mode\";\n\n@Component({\n   templateUrl: \"pre-check-evacuation-select.html\",\n   styleUrls: [\"pre-check-evacuation-select.scss\"],\n   selector: \"vsan-pre-check-evacuation-select\",\n})\nexport class PreCheckEvacuationSelectComponent {\n   readonly decommissionModeSignpostId: string = \"pre-check-evacuaton-summary-sign-post\";\n\n   private _selectedDecommissionMode: DecommissionMode = DecommissionMode.ensureObjectAccessibility;\n\n   @Input()\n   selectLabel: string = VsanUiUtils.getString(\"vsan.dialog.precheckEvacuation.label\");\n\n   @Input()\n   set selectedDecommissionMode(value: DecommissionMode) {\n      if (value !== this._selectedDecommissionMode) {\n         this._selectedDecommissionMode = value;\n         this.selectedDecommisionModeChange.emit(value);\n      }\n   }\n\n   get selectedDecommissionMode(): DecommissionMode {\n      return this._selectedDecommissionMode;\n   }\n\n   @Input()\n   unsupportedDecommissionModes: DecommissionMode[] = [];\n\n   @Output()\n   selectedDecommisionModeChange: EventEmitter<DecommissionMode> = new EventEmitter<DecommissionMode>();\n\n   decommissionModeOptions: DecommissionModeOption[] = [\n      {\n         value: DecommissionMode.evacuateAllData,\n         label: VsanUiUtils.getString(\"vsan.dialog.precheckEvacuation.fullDataMigration\"),\n      },\n      {\n         value: DecommissionMode.ensureObjectAccessibility,\n         label: VsanUiUtils.getString(\"vsan.dialog.precheckEvacuation.ensureAccessibility\"),\n      },\n      {\n         value: DecommissionMode.noAction,\n         label: VsanUiUtils.getString(\"vsan.dialog.precheckEvacuation.noDataMigration\"),\n      },\n   ];\n\n   DecommissionMode: typeof DecommissionMode = DecommissionMode;\n\n   isDecommissionModeSupported(mode: DecommissionMode): boolean {\n      return VsanUiUtils.isEmpty(this.unsupportedDecommissionModes) ||\n            !this.unsupportedDecommissionModes.includes(mode);\n   }\n\n   getDecommissionModeSignpostPosition(): string {\n      const SIGNPOST_WIDTH: number = 360;\n      const SIGNPOST_HEIGHT: number = 250;\n      return VsanSignpostUtil.getPosition(this.decommissionModeSignpostId, SIGNPOST_WIDTH, SIGNPOST_HEIGHT,\n            true);\n   }\n\n}\n\ninterface DecommissionModeOption {\n   value: DecommissionMode;\n   label: string;\n}","/* Copyright 2018-2020 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {ManagedObject} from \"@service/managed-object\";\nimport {EvacuationContext} from \"@navigation/context/evacuation.context\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {DecommissionModeSummary} from \"@component/precheck/pre-check-evacuation-summary.component\";\nimport {DiskGroupData} from \"@generated/disk-group-data\";\nimport {DecommissionMode} from \"@generated/decommission-mode\";\nimport {VsanDiskMapping} from \"@generated/vsan-disk-mapping\";\nimport {DiskData} from \"@generated/disk-data\";\nimport {HostActionData} from \"@model/host-action.data\";\nimport {DiskGroupActionData} from \"@model/disk-group-action.data\";\n\nexport class VsanDiskMgmtActionsUtil {\n\n   // Stop managing Pmem dialog size\n   static readonly STOP_MANAGING_PMEM_HEIGHT: number = 250;\n   static readonly STOP_MANAGING_PMEM_WIDTH: number = 760;\n\n   // Delete disk group dialog size.\n   static readonly DELETE_DISK_GROUP_HEIGHT_LARGE: number = 730;\n   static readonly DELETE_DISK_GROUP_HEIGHT_MEDIUM: number = 420;\n   static readonly DELETE_DISK_GROUP_HEIGHT_SMALL: number = 290;\n   static readonly DELETE_DISK_GROUP_HEIGHT_PRECHECK: number = 370;\n   static readonly DELETE_DISK_GROUP_WIDTH: number = 1100;\n\n   // Delete disks dialog size\n   static readonly DELETE_DISKS_HEIGHT_LARGE: number = 730;\n   static readonly DELETE_DISKS_HEIGHT_MEDIUM: number = 420;\n   static readonly DELETE_DISKS_HEIGHT_SMALL: number = 280;\n   static readonly DELETE_DISKS_HEIGHT_PRECHECK: number = 370;\n   static readonly DELETE_DISKS_WIDTH: number = 1100;\n   static readonly DELETE_VSAN_DIRECT_DISKS_HEIGHT: number = 250;\n   static readonly DELETE_VSAN_DIRECT_DISKS_HEIGHT_PRECHECK: number = 370;\n   static readonly DELETE_VSAN_DIRECT_DISKS_WIDTH: number = 900;\n\n   // Recreate disk group dialog size\n   static readonly RECREATE_DIALOG_HEIGHT_LARGE: number = 730;\n   static readonly RECREATE_DIALOG_HEIGHT_MEDIUM: number = 440;\n   static readonly RECREATE_DIALOG_HEIGHT_SMALL: number = 300;\n   static readonly RECREATE_DIALOG_HEIGHT_PRECHECK: number = 370;\n   static readonly RECREATE_DIALOG_WIDTH: number = 1100;\n\n   // Mount disk group dialog size\n   static readonly MOUNT_DISK_GROUP_DIALOG_HEIGHT: number = 230;\n   static readonly MOUNT_DISK_GROUP_DIALOG_WIDTH: number = 600;\n\n   // Unmount disk group dialog size\n   static readonly UNMOUNT_DISK_GROUP_DIALOG_HEIGHT_LARGE: number = 730;\n   static readonly UNMOUNT_DISK_GROUP_DIALOG_HEIGHT_MEDIUM: number = 420;\n   static readonly UNMOUNT_DISK_GROUP_DIALOG_HEIGHT_SMALL: number = 290;\n   static readonly UNMOUNT_DISK_GROUP_DIALOG_HEIGHT_PRECHECK: number = 390;\n   static readonly UNMOUNT_DISK_GROUP_DIALOG_WIDTH: number = 1100;\n\n   // Unmount disk dialog size\n   static readonly UNMOUNT_DISK_DIALOG_HEIGHT: number = 390;\n   static readonly UNMOUNT_DISK_DIALOG_HEIGHT_SMALL: number = 290;\n   static readonly UNMOUNT_DISK_DIALOG_WIDTH: number = 1100;\n\n   static shouldAllowDiskGroupDataMigration = (host: HostActionData, diskGroup: DiskGroupActionData): boolean => {\n      return host.isWhatIfSupported && !host.isWitnessHost && !host.isInMaintenanceMode &&\n            diskGroup.isMounted && !diskGroup.isLocked;\n   };\n\n   static getDataMigrationWarningForDiskGroup = (isHostInMaintenanceMode: boolean,\n         isDiskGroupMounted: boolean): string => {\n      if (isHostInMaintenanceMode) {\n         return VsanUiUtils.getString(\"vsan.dialog.deleteDiskGroup.hostInMaintenance.warning\");\n      }\n      if (!isDiskGroupMounted) {\n         return VsanUiUtils.getString(\"vsan.dialog.deleteDiskGroup.unmountedDiskGroup.warning\");\n      }\n   };\n\n   static getSelectedDecommissionMode = (shouldAllowDataMigration: boolean,\n         selectedDecommissionMode?: DecommissionMode): DecommissionMode => {\n      if (!shouldAllowDataMigration) {\n         return DecommissionMode.noAction;\n      }\n\n      return selectedDecommissionMode || DecommissionMode.ensureObjectAccessibility;\n   };\n\n   static getVsanDiskMapping = (group: DiskGroupData): VsanDiskMapping => {\n      let cacheDisk: DiskData;\n      const capacityDisks: DiskData[] = [];\n      group.disks.forEach(disk => {\n         if (disk.isMappedAsCache) {\n            cacheDisk = disk;\n         } else {\n            capacityDisks.push(disk);\n         }\n      });\n      return VsanDiskMapping.Factory.create(cacheDisk?.disk, capacityDisks.map(disk => disk.disk));\n   };\n\n   static isPrecheckWithObjects = (precheckSummary: DecommissionModeSummary): boolean => {\n      // Checks whether the result from precheck includes any inaccessible objects this is\n      return precheckSummary.inaccessibleIncompliantObjects\n            && precheckSummary.inaccessibleIncompliantObjects.length > 0;\n   };\n\n   static getEvacuationContext = (hostRef: ManagedObject, entityUuid?: string,\n         selectedDecommissionMode?: DecommissionMode): EvacuationContext => {\n      const selectedEntity: string = ManagedObject.uid(hostRef);\n      const selectedEvacuationType: DecommissionMode =\n            VsanDiskMgmtActionsUtil.getSelectedDecommissionMode(true, selectedDecommissionMode);\n      return {\n         selectedEntity: selectedEntity,\n         objectUuid: entityUuid,\n         selectedEvacuationType: selectedEvacuationType,\n      };\n   };\n}\n","/* Copyright 2019 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {NgModule} from \"@angular/core\";\nimport {CommonModule} from \"@angular/common\";\nimport {FormsModule} from \"@angular/forms\";\nimport {ClarityModule} from \"@clr/angular\";\nimport {VsanCommonModule} from \"../../vsan-common.module\";\nimport {PreCheckEvacuationSelectComponent} from \"@component/precheck/pre-check-evacuation-select.component\";\nimport {PreCheckEvacuationSummaryComponent} from \"@component/precheck/pre-check-evacuation-summary.component\";\nimport {VirtualObjectsTableModule} from \"@component/virtual-objects-table/virtual-objects-table.module\";\n\n@NgModule({\n   imports: [\n      CommonModule,\n      FormsModule,\n      ClarityModule,\n      VsanCommonModule,\n      VirtualObjectsTableModule,\n   ],\n   declarations: [\n      PreCheckEvacuationSelectComponent,\n      PreCheckEvacuationSummaryComponent\n   ],\n   exports: [\n      PreCheckEvacuationSelectComponent,\n      PreCheckEvacuationSummaryComponent\n   ]\n})\nexport class PrecheckModule {\n}","/* Copyright 2019-2022 VMware, Inc. All rights reserved. -- VMware Confidential */\n\nexport class VsanSignpostUtil {\n   // The signpost's arrow is 12px in Clarity 2.2.0\n   private static readonly ARROW_SIZE: number = 12;\n   // The modal left or right padding is 24px.\n   private static readonly MODAL_HORIZONTAL_PADDING: number = 24;\n   // The modal top padding and title height or the bottom padding and footer height is 72px.\n   private static readonly MODAL_VERTICAL_PADDING: number = 72;\n\n   private static readonly TOP: string = \"top\";\n   private static readonly LEFT: string = \"left\";\n   private static readonly RIGHT: string = \"right\";\n   private static readonly BOTTOM: string = \"bottom\";\n   private static readonly MIDDLE: string = \"middle\";\n\n   static getPosition(elementId: string, signpostWidth: number, signpostHeight: number,\n         isInModal: boolean = false): string {\n      const elementBox: DOMRect = document.getElementById(elementId).getBoundingClientRect();\n      const modalVerticalPadding: number = isInModal\n            ? VsanSignpostUtil.MODAL_VERTICAL_PADDING\n            : 0;\n      const verticalPosition: string = VsanSignpostUtil.getVerticalPosition(\n            elementBox, signpostHeight + VsanSignpostUtil.ARROW_SIZE + modalVerticalPadding);\n      const modalHorizontalPadding: number = isInModal\n            ? VsanSignpostUtil.MODAL_HORIZONTAL_PADDING\n            : 0;\n      const horizontalPosition: string = VsanSignpostUtil.getHorizontalPosition(\n            elementBox, signpostWidth + VsanSignpostUtil.ARROW_SIZE + modalHorizontalPadding);\n      return `${verticalPosition}-${horizontalPosition}`;\n   }\n\n   private static getVerticalPosition(elementBox: ClientRect, elementHeight: number): string {\n      const bodyBox: DOMRect = document.body.getBoundingClientRect();\n      if (elementBox.bottom + elementHeight < bodyBox.height) {\n         // There is enough space to fit the signpost below the trigger\n         return VsanSignpostUtil.BOTTOM;\n      } else if (elementBox.top - elementHeight > 0) {\n         return VsanSignpostUtil.TOP;\n      } else {\n         return VsanSignpostUtil.MIDDLE;\n      }\n   }\n\n   private static getHorizontalPosition(elementBox: ClientRect, elementWidth: number): string {\n      const bodyBox: DOMRect = document.body.getBoundingClientRect();\n      if (elementBox.right + elementWidth < bodyBox.width) {\n         // There is enough space to fit the signpost on the right side of the view\n         return VsanSignpostUtil.RIGHT;\n      } else if (elementBox.left - elementWidth > 0) {\n         return VsanSignpostUtil.LEFT;\n      } else {\n         return VsanSignpostUtil.MIDDLE;\n      }\n   }\n}"]}