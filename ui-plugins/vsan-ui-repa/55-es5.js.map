{"version":3,"sources":["webpack:///src/app/vsan/performance/view/perf-detail-charts.html","webpack:///src/app/vsan/performance/view/perf-detail-charts.component.ts","webpack:///src/app/vsan/performance/export/perf-chart-export.html","webpack:///src/app/vsan/performance/view/single-entity-data-perf.component.ts","webpack:///src/app/vsan/performance/view/base-entity-data-perf.component.ts","webpack:///src/app/vsan/performance/export/perf-chart-export.component.ts","webpack:///src/app/vsan/performance/view/single-entity-data-perf.html"],"names":["PerfDetailChartsComponent","perfPropProvider","perfOrchestrator","navigationService","ioInsightService","refWatcher","VsanUiUtils","ioInsightGraphsData","allowReloadWhenError","ioInsightInstances","specifiedEntitiesExportData","loadedSpecifiedEntitiesCount","parentLoading","showHeaderSection","allChartsLoaded","isAskVmwareLinkVisible","keepPlotLineOnClick","isRealtime","onPlotLineChanged","onTooltipActionClicked","handleError","err","message","INVALID_ENTITY_REF_ID_KEY","alertMessage","getString","graphsData","loading","error","updateGprahsData","chartMetrics","entity","graphs","configSpec","map","graph","getGraphDefinition","push","combinedEntity","updateIoInsightGraphsData","filter","metric","entityRefId","startsWith","IOINSIGHT","reload","_chartMetrics","queryChartsDataByTimeRange","timeRange","_entity","val","equals","value","targetCluster","commonPerfData","clusterRef","showLoading","isEmpty","getEntityPerfState","getPerfMetricsQuerySpecs","then","data","uuid","getEntityByVsanUuid","description","length","name","instances","instance","join","watchSubscriptionRef","change","subscribe","METRICS_FETCHED","resetSpecifiedEntitiesExportData","isShowSpecificModeEnabled","timeRangeData","requestConsolidatedMetrics","querySpecs","createQuerySpec","entityType","additionalConfigSpecId","entityTypes","emit","selectedEntities","forEach","specifiedEntitiesMetrics","onEntityPerfDataLoaded","Factory","create","entityUuid","from","to","ioInsightGraphs","additionalConfigSpec","ioInsightMetrics","getIoInsightInstancesByTime","contextObject","perfExportData","subEntityName","entityLabelName","entityName","concat","exportData","askVMware","VM_CONSUMPTION_IOPS","isRecentTimeRange","PERF_VIEW_NO_DATA","PERF_VIEW_NO_DATA_FOR_SELECTED_PERIOD","SingleEntityDataPerfComponent","vsanPerfPropertyProvider","diskMgmtService","dataService","changeDetector","showExportAllButton","serverClusterRefToPersvcEnabledState","Map","getQueryObject","isComputeOnlyCluster","monitoredServerCluster","areEqual","getQueryProperty","entityTypeId","CLUSTER_VM_CONSUMPTION_ENTITY","CLUSTER_VM_CONSUMPTION_REMOTE_ENTITY","CLUSTER_COMPUTE_ONLY_VM_REMOTE_CONSUMPTION_ENTITY","CLUSTER_BACKEND_ENTITY","PMEM_CLUSTER_ENTITY","CLUSTER_VSAN_DIRECT_ENTITY","CLUSTER_VSAN_CONFIGINFO_UUID_PROPERTY","HOST_VM_CONSUMPTION_ENTITY","HOST_BACKEND_ENTITY","HOST_NETWORK_ENTITY","HOST_ISCSI_ENTITY","HOST_VSAN_DIRECT_ENTITY","PMEM_HOST_ENTITY","HOST_VSAN_CONFIGINFO_NODEUUID_PROPERTY","VM_CONSUMPTION_ENTITY","VM_CONFIG_INSTANCE_UUID_PROPERTY","createBasePerfEntity","entityId","currentEntityId","watchGlobalRefreshSubscription","prototype","constructor","changes","chartsView","currentValue","fetch","fetchChartsData","unavailableView","isVsanDirectPerfView","hasVsanDirectDisks","PERF_NO_VSAN_DIRECT_DISKS_CLAIMED","isServerClusterPerfsvcEnabled","PERF_COMPUTE_ONLY_SERVER_PERFSVC_DISABLED","isShownInVolumeDetailedPerfView","currentEntity","queryProperty","getEntityId","handleEntityId","isFileSharePerfView","isAttachedVolumePerfView","CLUSTER_FILE_SERVICE_ENTITY","VM_VIRTUAL_DISK_ENTITY","Promise","all","getProperty","clientUuid","serverUuid","extraDesc","waitForChartsContainer","currentTimeRange","updatePerfEntityType","getTargetCluster","domElementExists","resolve","setTimeout","$event","destroyed","detectChanges","serverClusterRefString","uid","has","getPerfServiceEnabled","set","get","toggleHighResolutionSpecName","BaseEntityDataPerfComponent","IllustratedMessageType","currentTimeRangeChange","currentPickerStateChange","currentHourIntervalChange","_currentEntity","onEntitySelect","_currentTimeRange","_currentPickerState","_hourInterval","hasHighResolutionPrefix","HIGH_RESOLUTION_PREFIX","replace","configSpecName","PerfChartExportComponent","DEFAULT_ZIP_NAME","showSubEntities","onSelectOptions","options","exportCharts","zip","perfData","isDataRequested","goToFolder","getFolder","addSvg","graphName","chart","getSVG","addCsvRaw","getCSV","download","zipName","_entityToMetricsMap","chartsEntities","keys","context","chartData","setSize","open","selectedGraphs","includes","selectedSubEntities"],"mappings":"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","file":"55-es5.js","sourcesContent":["<!--Copyright 2017-2020 VMware, Inc. All rights reserved. -- VMware Confidential-->\n<div class=\"spinner spinner-lg central-spinner\"\n     *ngIf=\"loading || perfOrchestrator.isLoading\">\n</div>\n<vsan-validation id=\"details-error-msg\"\n                 alertType=\"danger\"\n                 *ngIf=\"alertMessage\"\n                 [alert]=\"alertMessage\"\n                 [allowReload]=\"allowReloadWhenError\"\n                 (onReload)=\"reload()\"\n                 (onClosed)=\"alertMessage = null\">\n</vsan-validation>\n<ng-container *ngIf=\"!loading && !parentLoading && !perfOrchestrator.isLoading\">\n   <ng-container *ngIf=\"perfOrchestrator.isShowSpecificModeEnabled\">\n      <ng-container *ngIf=\"perfOrchestrator.isSeparatlyViewStateEnabled\">\n         <div class=\"title\" *ngIf=\"perfOrchestrator.data.specifiedEntitiesMetrics.length !== 0\">\n            <span>{{perfOrchestrator.entityGraph?.description}}</span>\n            <clr-button-group class=\"btn-link buttons-group\">\n               <clr-button id=\"ask-vmware\"\n                           *ngIf=\"isAskVmwareLinkVisible\"\n                           class=\"btn btn-sm\"\n                           (click)=\"askVMware()\">\n                  {{\"vsan.perf.chart.link\" | localized}}\n               </clr-button>\n            </clr-button-group>\n         </div>\n         <!-- We need to manually add the vsan unavailable view, because when perfOrchestrator.data.specifiedEntitiesMetrics is empty, -->\n         <!-- there is no vsan-perf-charts-container at all. -->\n         <vsan-unavailable-view *ngIf=\"perfOrchestrator.data.specifiedEntitiesMetrics.length === 0\"\n                                [unavailableViewSpec]=\"separateViewNoDataAvailable\">\n         </vsan-unavailable-view>\n         <section *ngFor=\"let data of perfOrchestrator.data.specifiedEntitiesMetrics\" class=\"nav-group\">\n            <vsan-perf-charts-container class=\"separately-chart\"\n                                        [data]=\"perfOrchestrator.getEntityGraphDataById(data.entityRefId)\"\n                                        [icon]=\"getEntityByVsanUuid(data.entityRefId).icon\"\n                                        [title]=\"getEntityByVsanUuid(data.entityRefId).entityName\"\n                                        [compactMode]=\"entity?.configSpec.graphs.length > 2\"\n                                        [currentTimeRange]=\"timeRange\"\n                                        [isShowAllLinkVisible]=\"false\"\n                                        [isZoomButtonVisible]=\"true\"\n                                        [isAskVmwareLinkVisible]=\"false\"\n                                        [isShowGraphDescription]=\"false\"\n                                        [isEmptyChartsVisible]=\"!alertMessage\"\n                                        [customizableThresholds]=\"customizableThresholds\"\n                                        (allChartsLoaded)=\"onSpecifiedEntitiesChartsLoaded($event, getEntityByVsanUuid(data.entityRefId).entityName)\">\n            </vsan-perf-charts-container>\n         </section>\n      </ng-container>\n      <vsan-perf-charts-container *ngIf=\"perfOrchestrator.isConsolidatedViewStateEnabled\"\n                                  id=\"consolidated-charts-container\"\n                                  [consolidatedEntitiesData]=\"consolidatedEntitiesData\"\n                                  [consolidatedData]=\"perfOrchestrator.data.entitiesGraphData\"\n                                  [title]=\"perfOrchestrator.entityGraph?.description\"\n                                  [subtitle]=\"extraDesc\"\n                                  [showHeaderSection]=\"showHeaderSection\"\n                                  [currentTimeRange]=\"timeRange\"\n                                  [isShowAllLinkVisible]=\"false\"\n                                  [visibleGraphId]=\"visibleGraphId\"\n                                  [isAskVmwareLinkVisible]=\"isAskVmwareLinkVisible\"\n                                  [isEmptyChartsVisible]=\"!alertMessage\"\n                                  [customizableThresholds]=\"customizableThresholds\"\n                                  [chartWidth]=\"chartWidth\"\n                                  [chartHeight]=\"chartHeight\"\n                                  (allChartsLoaded)=\"onAllChartsLoaded($event)\">\n      </vsan-perf-charts-container>\n   </ng-container>\n\n   <vsan-perf-charts-container *ngIf=\"perfOrchestrator.isShowAverageModeEnabled\"\n                               id=\"charts-container\"\n                               [parentLoading]=\"loading && parentLoading\"\n                               [isRealtime]=\"isRealtime\"\n                               [data]=\"graphsData\"\n                               [title]=\"collapsible ? null : averageModeEntityDescription\"\n                               [subtitle]=\"extraDesc\"\n                               [currentTimeRange]=\"timeRange\"\n                               [isShowAllLinkVisible]=\"false\"\n                               [isAskVmwareLinkVisible]=\"isAskVmwareLinkVisible\"\n                               [isEmptyChartsVisible]=\"!alertMessage\"\n                               [collapsible]=\"collapsible\"\n                               [customizableThresholds]=\"customizableThresholds\"\n                               [visibleGraphId]=\"visibleGraphId\"\n                               (allChartsLoaded)=\"onAllChartsLoaded($event)\"\n                               [keepPlotLineOnClick]=\"keepPlotLineOnClick\"\n                               [showHeaderSection]=\"showHeaderSection\"\n                               (onPlotLineChanged)=\"onPlotLineChanged.emit($event)\"\n                               (onTooltipActionClicked)=\"onTooltipActionClicked.emit($event)\"\n                               [selectedPlotLineValue]=\"selectedPlotLineValue\"\n                               [actionLink]=\"actionLink\">\n   </vsan-perf-charts-container>\n   <vsan-perf-charts-container *ngIf=\"perfOrchestrator.isShowAverageModeEnabled && ioInsightGraphsData.length > 0\"\n                               id=\"ioinsight-charts-container\"\n                               [data]=\"ioInsightGraphsData\"\n                               [title]=\"getIoInsightInstances()\"\n                               [subtitle]=\"extraDesc\"\n                               [currentTimeRange]=\"timeRange\"\n                               [isShowAllLinkVisible]=\"false\"\n                               [isAskVmwareLinkVisible]=\"isAskVmwareLinkVisible\"\n                               [isEmptyChartsVisible]=\"!alertMessage\"\n                               [collapsible]=\"collapsible\"\n                               [customizableThresholds]=\"customizableThresholds\"\n                               (allChartsLoaded)=\"onAllChartsLoaded($event)\">\n   </vsan-perf-charts-container>\n</ng-container>\n","/* Copyright 2017-2022 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, EventEmitter, Input, OnInit, Output} from \"@angular/core\";\nimport {ChartPlotLineSelectionData} from \"@component/chart/model/chart-plot-line-selection.data\";\nimport {GraphMetric} from \"@component/chart/performance/graph-metrics.data\";\nimport {PerfChartDataConstants, PerfChartUtil} from \"@component/chart/performance/perf-chart-util\";\nimport {PerfExportData} from \"@component/chart/performance/perf-export-data\";\nimport {PerfGraph} from \"@component/chart/performance/perf-graph\";\nimport {UnavailableViewSpec} from \"@component/unavailable-view/unavailable-view-spec\";\nimport {IoInsightInstance} from \"@generated/io-insight-instance\";\nimport {IoInsightService} from \"@generated/io-insight-service\";\nimport {PerfEntityStateData} from \"@generated/perf-entity-state-data\";\nimport {PerfGraphThreshold} from \"@generated/perf-graph-threshold\";\nimport {PerfMonitorCommonPropsData} from \"@generated/perf-monitor-common-props-data\";\nimport {PerfQueryErrors} from \"@generated/perf-query-errors\";\nimport {PerfQuerySpec} from \"@generated/perf-query-spec\";\nimport {PerfTimeRangeData} from \"@generated/perf-time-range-data\";\nimport {VsanPerfPropertyProvider} from \"@generated/vsan-perf-property-provider\";\nimport {NavigationService} from \"@navigation/navigation.service\";\nimport {ManagedObject} from \"@service/managed-object\";\nimport {Logger} from \"@util/logger\";\nimport {PerfChangeContext} from \"@util/performance/perf-data\";\nimport {PerfOrchestratorService} from \"@util/performance/perf-orchestrator-service\";\nimport {ReferenceWatcher} from \"@util/reference-watcher\";\nimport {VsanDateTimeUtils} from \"@util/vsan-dateteime-util\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {BasePerfEntity} from \"../model/base-perf-entity\";\nimport {NestedPerfEntity} from \"../model/nested-perf-entity\";\nimport {ConsolidatedEntitiesData} from \"./consolidated-entities-data.data\";\nimport {AskVmwareId} from \"@navigation/model/ask-vmware-id\";\n\n@Component({\n   selector: \"vsan-perf-detail-charts\",\n   templateUrl: \"perf-detail-charts.html\",\n   styleUrls: [\"perf-detail-charts.scss\"],\n   providers: [ReferenceWatcher],\n})\nexport class PerfDetailChartsComponent implements OnInit {\n   constructor(private perfPropProvider: VsanPerfPropertyProvider,\n         public perfOrchestrator: PerfOrchestratorService,\n         private navigationService: NavigationService,\n         private ioInsightService: IoInsightService,\n         private refWatcher: ReferenceWatcher) {\n   }\n   VsanUiUtils: typeof VsanUiUtils = VsanUiUtils;\n\n   loading: boolean;\n   alertMessage: string;\n   graphsData: GraphMetric[];\n   ioInsightGraphsData: GraphMetric[] = [];\n   timeRange: PerfTimeRangeData;\n   allowReloadWhenError: boolean = true;\n   ioInsightInstances: IoInsightInstance[] = [];\n   specifiedEntitiesExportData: PerfExportData[] = [];\n   loadedSpecifiedEntitiesCount: number = 0;\n\n   @Input()\n   extraDesc: string;\n\n   @Input()\n   parentLoading: boolean = false;\n\n   @Input()\n   commonPerfData: PerfMonitorCommonPropsData;\n\n   @Input()\n   customizableThresholds: PerfGraphThreshold[];\n\n   @Input()\n   visibleGraphId: string;\n\n   @Input()\n   showHeaderSection: boolean = true;\n\n   @Output()\n   allChartsLoaded: EventEmitter<PerfExportData[]> = new EventEmitter<PerfExportData[]>(true);\n\n   @Input()\n   isAskVmwareLinkVisible: boolean = true;\n\n   @Input()\n   keepPlotLineOnClick: boolean = false;\n\n   @Input()\n   isRealtime: boolean = false;\n\n   @Output()\n   onPlotLineChanged: EventEmitter<ChartPlotLineSelectionData> = new EventEmitter<ChartPlotLineSelectionData>();\n\n   @Output()\n   onTooltipActionClicked: EventEmitter<ChartPlotLineSelectionData> = new EventEmitter<ChartPlotLineSelectionData>();\n\n   @Input()\n   selectedPlotLineValue: string;\n\n   @Input()\n   actionLink: string;\n\n   @Input()\n   consolidatedEntitiesData: ConsolidatedEntitiesData;\n\n   private _entity: BasePerfEntity;\n\n   @Input()\n   set entity(val: BasePerfEntity) {\n      if (val && val.equals(this.entity)) {\n         return;\n      }\n\n      this._entity = val;\n      this.updateGprahsData();\n   }\n\n   get entity(): BasePerfEntity {\n      return this._entity;\n   }\n\n   _chartMetrics: PerfEntityStateData[];\n\n   get chartMetrics(): PerfEntityStateData[] {\n      return this._chartMetrics;\n   }\n\n   @Input()\n   set chartMetrics(value: PerfEntityStateData[]) {\n      this._chartMetrics = value;\n      this.updateGprahsData();\n   }\n\n   @Input()\n   collapsible: boolean;\n\n   @Input()\n   set currentTimeRange(value: PerfTimeRangeData) {\n      this.queryChartsDataByTimeRange(value);\n   }\n\n   @Input()\n   chartWidth: number;\n\n   @Input()\n   chartHeight: number;\n\n   /**\n    * Queries the chart data for the specified time range.\n    * @param timeRange\n    * @param targetCluster Which cluster should the API be invoked onto.\n    *                      In the case of compute-only cluster, the API should be invoked onto the selected\n    *                      server cluster. The compute-only cluster uuid should be passed as an argument.\n    */\n   async queryChartsDataByTimeRange(timeRange: PerfTimeRangeData,\n         targetCluster: ManagedObject = this.commonPerfData.clusterRef,\n         showLoading: boolean = true): Promise<void> {\n      if (!this.isRealtime && !VsanUiUtils.isEmpty(this._chartMetrics)) {\n         this.updateGprahsData();\n         return;\n      }\n\n      this.loading = showLoading || !this.chartMetrics;\n      this.timeRange = timeRange;\n      this.alertMessage = \"\";\n\n      await this.perfPropProvider.getEntityPerfState(targetCluster, this.getPerfMetricsQuerySpecs())\n            .then((data: PerfEntityStateData[]): void => {\n               if (!VsanUiUtils.isEmpty(data)) {\n                  this.chartMetrics = data;\n               }\n               this.loading = false;\n            }).catch(err => {\n               this.handleError(err);\n            });\n   }\n\n   getEntityByVsanUuid(uuid: string): BasePerfEntity {\n      return this.perfOrchestrator.getEntityByVsanUuid(uuid);\n   }\n\n   get averageModeEntityDescription(): string {\n      if (!(this.entity instanceof NestedPerfEntity)) {\n         return this.entity?.configSpec?.description;\n      }\n\n      return `${this.entity?.configSpec?.description} ${this.entity?.combinedEntity?.configSpec?.description}`;\n   }\n\n   getIoInsightInstances(): string {\n      if (this.ioInsightInstances.length === 1) {\n         return VsanUiUtils.getString(\"vsan.monitor.vm.performance.virtualDisk.ioInsight.single\",\n               this.ioInsightInstances[0].name);\n      } else if (this.ioInsightInstances.length > 1) {\n         const instances: string = this.ioInsightInstances.map(instance => instance.name).join(\", \");\n         return VsanUiUtils.getString(\"vsan.monitor.vm.performance.virtualDisk.ioInsight.multy\", instances);\n      }\n   }\n\n   ngOnInit(): void {\n      /*\n      * When selection is changed, then load performance data\n      */\n      this.refWatcher.watchSubscriptionRef(this.perfOrchestrator.change.subscribe((change: PerfChangeContext) => {\n         if (change == null || change === PerfChangeContext.METRICS_FETCHED) {\n            this.resetSpecifiedEntitiesExportData();\n            return;\n         }\n\n         if (this.perfOrchestrator.isShowSpecificModeEnabled && this.perfOrchestrator.data.timeRangeData) {\n            this.requestConsolidatedMetrics();\n         }\n      }));\n   }\n\n   private getPerfMetricsQuerySpecs(): PerfQuerySpec[] {\n      const querySpecs: PerfQuerySpec[] = [];\n      querySpecs.push(this.createQuerySpec(this.entity, this.entity.entityType));\n\n      if (this.entity instanceof NestedPerfEntity) {\n         querySpecs.push(this.createQuerySpec(this.entity.combinedEntity, this.entity.combinedEntity.entityType));\n         if (this.entity.additionalConfigSpecId) {\n            // for virtual-disk charts request also ioinsight charts\n            const entityType: string = this.commonPerfData.entityTypes[this.entity.additionalConfigSpecId].name;\n            querySpecs.push(this.createQuerySpec(this.entity.combinedEntity, entityType));\n         }\n      }\n      return querySpecs;\n   }\n\n   private resetSpecifiedEntitiesExportData(): void {\n      this.loadedSpecifiedEntitiesCount = 0;\n      this.specifiedEntitiesExportData = [];\n      this.allChartsLoaded.emit(null);\n   }\n\n   private async requestConsolidatedMetrics(): Promise<void> {\n      this.loading = true;\n      this.resetSpecifiedEntitiesExportData();\n      this.timeRange = this.perfOrchestrator.data.timeRangeData;\n      const querySpecs: PerfQuerySpec[] = [];\n\n      /*\n      * Create query spec for all selected entities in order to retrieve performance data for them\n      */\n      this.perfOrchestrator.data.selectedEntities\n            .forEach((entity: BasePerfEntity) => {\n               querySpecs.push(this.createQuerySpec(entity, entity.entityType));\n            });\n\n      if (querySpecs.length === 0) {\n         this.perfOrchestrator.data.specifiedEntitiesMetrics = [];\n         this.perfOrchestrator.onEntityPerfDataLoaded();\n         this.loading = false;\n         return;\n      }\n\n      try {\n         this.loading = true;\n         const data: PerfEntityStateData[] = await this.perfPropProvider.getEntityPerfState(\n               this.commonPerfData.clusterRef, querySpecs);\n         this.perfOrchestrator.data.specifiedEntitiesMetrics = data;\n         this.perfOrchestrator.onEntityPerfDataLoaded(data.length);\n      } catch (err) {\n         this.handleError(err);\n      } finally {\n         this.loading = false;\n      }\n   }\n\n   private createQuerySpec(entity: BasePerfEntity, entityType: string): PerfQuerySpec {\n      return PerfQuerySpec.Factory.create(\n            entityType,\n            entity.entityUuid,\n            null, /* group:string, not used*/\n            this.timeRange.from,\n            this.timeRange.to,\n            null, /* interval:number , not used*/\n            null /* labels:string[], not used*/);\n   }\n\n   private handleError = (err: any): void => {\n      if (err.message === PerfQueryErrors.INVALID_ENTITY_REF_ID_KEY()) {\n         this.allowReloadWhenError = false;\n         this.alertMessage = VsanUiUtils.getString(\"vsan.perf.service.chart.unsupportedEntityType.error\");\n      } else {\n         this.allowReloadWhenError = true;\n         this.alertMessage = VsanUiUtils.getString(\"vsan.perf.service.chart.common.error\");\n      }\n      this.graphsData = [];\n      this.ioInsightGraphsData = [];\n      this.ioInsightInstances = [];\n      this.loading = false;\n      Logger.error(err);\n   };\n\n   private updateGprahsData = (): void => {\n      if (!this.chartMetrics || !this.entity) {\n         return;\n      }\n\n      const graphs: PerfGraph[] =\n            this.entity.configSpec.graphs.map(graph => PerfChartUtil.getGraphDefinition(graph));\n\n      if (this.entity instanceof NestedPerfEntity) {\n         // for virtual disks we have combined entity for scsi graphs and additionalConfigSpecs for ioinsight graphs\n         // which have to be handled too\n         graphs.push(...this.entity.combinedEntity.configSpec.graphs\n               .map(graph => PerfChartUtil.getGraphDefinition(graph)));\n\n         this.updateIoInsightGraphsData();\n\n         this.graphsData = this.chartMetrics\n               .filter(metric => !metric.entityRefId.startsWith(PerfChartDataConstants.IOINSIGHT))\n               .map(metric => new GraphMetric(metric, graphs));\n      } else {\n         this.graphsData = this.chartMetrics.map(metric => new GraphMetric(metric, graphs));\n      }\n   };\n\n   private updateIoInsightGraphsData(): void {\n      this.ioInsightGraphsData = [];\n\n      const ioInsightGraphs: PerfGraph[] = [];\n      const additionalConfigSpec: any = this.commonPerfData.entityTypes[this.entity.additionalConfigSpecId];\n      if (additionalConfigSpec) {\n         const ioInsightMetrics: PerfEntityStateData[] =\n               this.chartMetrics.filter(metric => metric.entityRefId.startsWith(PerfChartDataConstants.IOINSIGHT));\n         if (additionalConfigSpec.name && additionalConfigSpec.name === PerfChartDataConstants.IOINSIGHT &&\n               ioInsightMetrics.length) {\n            this.ioInsightService\n                  .getIoInsightInstancesByTime(ManagedObject.contextObject, this.timeRange.from, this.timeRange.to)\n                  .then((data: IoInsightInstance[]): void => {\n                     this.ioInsightInstances = data;\n                  }).catch(this.handleError);\n            ioInsightGraphs.push(...additionalConfigSpec.graphs\n                  .map(graph => PerfChartUtil.getGraphDefinition(graph)));\n            if (ioInsightGraphs.length > 0) {\n               this.ioInsightGraphsData =\n                     ioInsightMetrics.map(metric => new GraphMetric(metric, ioInsightGraphs));\n            }\n         }\n      }\n   }\n\n   onAllChartsLoaded(perfExportData: PerfExportData[]): void {\n      if (this.entity && perfExportData) {\n         perfExportData.forEach(data => data.subEntityName = this.entity.entityLabelName);\n      }\n      this.allChartsLoaded.emit(perfExportData);\n   }\n\n   /**\n    * The export data should be updated when all charts for the specified entities are loaded\n    * in case of composite vm view with show separate charts by VMs is selected\n    * @param perfExportData the export data(charts) for the specified entity(VM)\n    * @param entityName the name of the VM\n    */\n   onSpecifiedEntitiesChartsLoaded(perfExportData: PerfExportData[], entityName: string): void {\n      this.specifiedEntitiesExportData = this.specifiedEntitiesExportData.concat(perfExportData);\n      this.loadedSpecifiedEntitiesCount++;\n      perfExportData.forEach(exportData => exportData.subEntityName = entityName);\n      if (this.perfOrchestrator.data.specifiedEntitiesMetrics.length === this.loadedSpecifiedEntitiesCount) {\n         this.allChartsLoaded.emit(this.specifiedEntitiesExportData);\n      }\n   }\n\n   reload = () => {\n      this._chartMetrics = null;\n      this.queryChartsDataByTimeRange(this.timeRange);\n   };\n\n   askVMware(): void {\n      this.navigationService.askVMware(AskVmwareId.VM_CONSUMPTION_IOPS);\n   }\n\n   get separateViewNoDataAvailable(): UnavailableViewSpec {\n      return VsanDateTimeUtils.isRecentTimeRange(this.timeRange) ?\n            UnavailableViewSpec.PERF_VIEW_NO_DATA :\n            UnavailableViewSpec.PERF_VIEW_NO_DATA_FOR_SELECTED_PERIOD;\n   }\n}","<!--Copyright 2020-2021 VMware, Inc. All rights reserved. -- VMware Confidential-->\n<button class=\"btn btn-link btn-sm\"\n        id=\"export-btn\"\n        (click)=\"onExportAllClicked()\"\n        *ngIf=\"data?.length\">\n   {{\"vsan.perf.chart.exportAll.button\" | localized}}\n</button>\n\n<!--for IOInsight we need to create charts for each graph, because the charts in the IOInsight metrics view\ncan be hidden/collapsed by accordion-->\n<ng-container *ngIf=\"entityToMetricsMap?.size\">\n   <div hidden=\"true\" *ngFor=\"let perfEntity of chartsEntities\">\n      <vsan-perf-detail-charts\n            [commonPerfData]=\"commonPerfData\"\n            [extraDesc]=\"extraDesc\"\n            [chartMetrics]=\"entityToMetricsMap.get(perfEntity)\"\n            [entity]=\"perfEntity\"\n            [collapsible]=\"true\"\n            (allChartsLoaded)=\"data = data.concat($event)\">\n      </vsan-perf-detail-charts>\n   </div>\n</ng-container>\n","/* Copyright 2017-2022 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {ChangeDetectorRef, Component, Input, OnChanges, SimpleChanges, ViewRef} from \"@angular/core\";\nimport {PerfChartDataConstants} from \"@component/chart/performance/perf-chart-util\";\nimport {PerfExportData} from \"@component/chart/performance/perf-export-data\";\nimport {UnavailableViewSpec} from \"@component/unavailable-view/unavailable-view-spec\";\nimport {DiskManagementService} from \"@generated/disk-management-service\";\nimport {VsanPerfPropertyProvider} from \"@generated/vsan-perf-property-provider\";\nimport {DataServiceClient} from \"@service/client/dataservice/data-service.service\";\nimport {RefreshHandler} from \"@service/global-refresh.service\";\nimport {ManagedObject} from \"@service/managed-object\";\nimport {DomUtil} from \"@util/dom-util\";\nimport {Logger} from \"@util/logger\";\nimport {ReferenceWatcher} from \"@util/reference-watcher\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {BasePerfEntity} from \"../model/base-perf-entity\";\nimport {PerformanceUtils} from \"../util/perf-utils\";\nimport {BaseEntityDataPerfComponent} from \"./base-entity-data-perf.component\";\nimport {ConsolidatedEntitiesData} from \"./consolidated-entities-data.data\";\n\n@Component({\n   selector: \"vsan-single-entity-data-perf\",\n   templateUrl: \"single-entity-data-perf.html\",\n   styleUrls: [\"single-entity-data-perf.scss\"],\n   providers: [ReferenceWatcher],\n})\nexport class SingleEntityDataPerfComponent extends BaseEntityDataPerfComponent implements OnChanges {\n   currentEntityId: string;\n   loading: boolean = false;\n   unavailableView: UnavailableViewSpec;\n   exportData: PerfExportData[] = [];\n\n   /**\n    * the entity type id used to get the entity config spec from entityTypes dictionary\n    * this id is hard-coded from backend\n    * example: com.vmware.vsan.perf.entity.cluster-domclient\n    */\n   @Input()\n   entityTypeId: string;\n\n   @Input()\n   actionLink: string;\n\n   /**\n    * Whether the performance of a compute-only cluster is observed\n    */\n   @Input()\n   isComputeOnlyCluster: boolean;\n\n   /**\n    * If the case of CSD, this is the reference to the monitored server cluster (local or remote)\n    */\n   @Input()\n   monitoredServerCluster: ManagedObject;\n\n   @Input()\n   consolidatedEntitiesData: ConsolidatedEntitiesData;\n\n   @Input()\n   visibleGraphId: string;\n\n   @Input()\n   isAskVmwareLinkVisible: boolean = true;\n\n   @Input()\n   showExportAllButton: boolean = true;\n\n   @Input()\n   showHeaderSection: boolean = true;\n\n   @Input()\n   chartWidth: number;\n\n   @Input()\n   chartHeight: number;\n\n   /**\n    * Caches which server clusters have perfsvc enabled,\n    * in order to show unavailable view if the server perfsvc is disabled.\n    */\n   private serverClusterRefToPersvcEnabledState: Map<string, boolean> = new Map();\n\n   constructor(private vsanPerfPropertyProvider: VsanPerfPropertyProvider,\n         private diskMgmtService: DiskManagementService,\n         private dataService: DataServiceClient,\n         private changeDetector: ChangeDetectorRef,\n         private refWatcher: ReferenceWatcher) {\n      super();\n      this.refWatcher.watchGlobalRefreshSubscription(SingleEntityDataPerfComponent.prototype.constructor.name);\n   }\n\n   ngOnChanges(changes: SimpleChanges): void {\n      // clear the chart when the first time user changes the time rage state\n      if (changes.isRealtime && this.chartsView) {\n         this.chartsView.chartMetrics = null;\n      }\n      // In case the entityType changed, we need to update the query\n      if (changes.entityTypeId && changes.entityTypeId.currentValue ||\n            changes.monitoredServerCluster && changes.monitoredServerCluster.currentValue) {\n         this.fetch();\n      } else {\n         this.fetchChartsData();\n      }\n   }\n\n   @RefreshHandler\n   async fetch(): Promise<void> {\n      this.loading = true;\n      this.unavailableView = null;\n\n      if (this.isVsanDirectPerfView && !(await this.diskMgmtService.hasVsanDirectDisks(ManagedObject.contextObject))) {\n         this.unavailableView = UnavailableViewSpec.PERF_NO_VSAN_DIRECT_DISKS_CLAIMED;\n         this.loading = false;\n         return;\n      }\n\n      if (this.isComputeOnlyCluster && !(await this.isServerClusterPerfsvcEnabled())) {\n         this.unavailableView = UnavailableViewSpec.PERF_COMPUTE_ONLY_SERVER_PERFSVC_DISABLED;\n         this.loading = false;\n         return;\n      }\n\n      if (this.isShownInVolumeDetailedPerfView) {\n         this.loading = false;\n         this.currentEntityId = this.currentEntity.entityUuid;\n         this.fetchChartsData();\n      }\n\n      const queryProperty: string = this.getQueryProperty(this.entityTypeId);\n      if (!queryProperty) {\n         this.loading = false;\n         return;\n      }\n      try {\n         const entityId: string = await this.getEntityId(queryProperty);\n         this.loading = false;\n         this.handleEntityId(entityId);\n      } catch (err) {\n         this.handleError(err);\n      }\n   }\n\n   private get isVsanDirectPerfView(): boolean {\n      return this.entityTypeId === PerfChartDataConstants.CLUSTER_VSAN_DIRECT_ENTITY ||\n            this.entityTypeId === PerfChartDataConstants.HOST_VSAN_DIRECT_ENTITY;\n   }\n\n   /**\n    * Returns true if the component is shown in volume's details performance tab.\n    */\n   private get isShownInVolumeDetailedPerfView(): boolean {\n      return this.isFileSharePerfView || this.isAttachedVolumePerfView;\n   }\n\n   private get isFileSharePerfView(): boolean {\n      return this.entityTypeId === PerfChartDataConstants.CLUSTER_FILE_SERVICE_ENTITY;\n   }\n\n   private get isAttachedVolumePerfView(): boolean {\n      return this.entityTypeId === PerfChartDataConstants.VM_VIRTUAL_DISK_ENTITY;\n   }\n\n   private async getEntityId(queryProperty: string): Promise<string> {\n      if (this.isComputeOnlyCluster) {\n         const [clientUuid, serverUuid]: [string, string] = await Promise.all([\n            this.dataService.getProperty(queryProperty, ManagedObject.contextObject),\n            this.dataService.getProperty(queryProperty, this.monitoredServerCluster),\n         ]);\n         return `${serverUuid}|${clientUuid}`;\n      }\n      return await this.dataService.getProperty(queryProperty, this.getQueryObject());\n   }\n\n   handleEntityId(entityId: string): void {\n      this.extraDesc = this.entityTypeId === PerfChartDataConstants.HOST_NETWORK_ENTITY\n            ? VsanUiUtils.getString(\"vsan.perf.chart.host.network.description.extra\")\n            : null;\n      this.currentEntityId = entityId;\n      this.fetchChartsData();\n   }\n\n   private getQueryObject = (): ManagedObject => {\n      if (!this.isComputeOnlyCluster && this.monitoredServerCluster &&\n            !ManagedObject.areEqual(this.monitoredServerCluster, ManagedObject.contextObject)) {\n         // If a server cluster is monitored and it is not the local one\n         return this.monitoredServerCluster;\n      } else {\n         return ManagedObject.contextObject;\n      }\n   };\n\n   private getQueryProperty = (entityTypeId: string): string => {\n      switch (entityTypeId) {\n         case PerfChartDataConstants.CLUSTER_VM_CONSUMPTION_ENTITY:\n         case PerfChartDataConstants.CLUSTER_VM_CONSUMPTION_REMOTE_ENTITY:\n         case PerfChartDataConstants.CLUSTER_COMPUTE_ONLY_VM_REMOTE_CONSUMPTION_ENTITY:\n         case PerfChartDataConstants.CLUSTER_BACKEND_ENTITY:\n         case PerfChartDataConstants.PMEM_CLUSTER_ENTITY:\n         case PerfChartDataConstants.CLUSTER_VSAN_DIRECT_ENTITY:\n\n            return PerfChartDataConstants.CLUSTER_VSAN_CONFIGINFO_UUID_PROPERTY;\n         case PerfChartDataConstants.HOST_VM_CONSUMPTION_ENTITY:\n         case PerfChartDataConstants.HOST_BACKEND_ENTITY:\n         case PerfChartDataConstants.HOST_NETWORK_ENTITY:\n         case PerfChartDataConstants.HOST_ISCSI_ENTITY:\n         case PerfChartDataConstants.HOST_VSAN_DIRECT_ENTITY:\n         case PerfChartDataConstants.PMEM_HOST_ENTITY:\n            return PerfChartDataConstants.HOST_VSAN_CONFIGINFO_NODEUUID_PROPERTY;\n         case PerfChartDataConstants.VM_CONSUMPTION_ENTITY:\n            return PerfChartDataConstants.VM_CONFIG_INSTANCE_UUID_PROPERTY;\n         default:\n            return null;\n      }\n   };\n\n   handleError = (err: any) => {\n      this.loading = false;\n      Logger.error(err);\n   };\n\n   async fetchChartsData(): Promise<void> {\n      await this.waitForChartsContainer();\n\n      if (!this.commonPerfData.entityTypes ||\n            !this.commonPerfData.clusterRef || !this.currentEntityId || !this.currentTimeRange) {\n         return;\n      }\n      if (!this.isRealtime) {\n         this.chartsView.chartMetrics = null;\n      }\n      if (this.isShownInVolumeDetailedPerfView) {\n         // the currentEntity is set outside of the view, so update only entity type here.\n         PerformanceUtils.updatePerfEntityType(this.currentEntity, this.commonPerfData);\n      } else {\n         this.currentEntity = this.createBasePerfEntity(this.entityTypeId);\n      }\n      this.chartsView.entity = this.currentEntity;\n      this.chartsView.queryChartsDataByTimeRange(this.currentTimeRange, this.getTargetCluster(), !this.isRealtime);\n   }\n\n   waitForChartsContainer(): Promise<void> {\n      if (DomUtil.domElementExists(\"singleEntitiesChartsView\")) {\n         return Promise.resolve();\n      }\n      return new Promise((resolve) => {\n         this.refWatcher.setTimeout(() => {\n            resolve(this.waitForChartsContainer());\n         }, 1000);\n      });\n   }\n\n   private getTargetCluster(): ManagedObject {\n      return this.commonPerfData.isComputeOnlyCluster\n            ? this.monitoredServerCluster\n            : this.commonPerfData.clusterRef;\n   }\n\n   private createBasePerfEntity = (entityTypeId: string): BasePerfEntity => {\n      const entity: BasePerfEntity = new BasePerfEntity();\n      entity.entityId = entityTypeId;\n      entity.entityUuid = this.currentEntityId;\n      entity.configSpec = this.commonPerfData.entityTypes[entityTypeId];\n      return entity;\n   };\n\n   onAllChartsLoaded($event: any): void {\n      this.exportData = $event;\n      if (!(this.changeDetector as ViewRef).destroyed) {\n         this.changeDetector.detectChanges();\n      }\n   }\n\n   /**\n    * Checks and caches the perfsvc status of the server cluster\n    */\n   private async isServerClusterPerfsvcEnabled(): Promise<boolean> {\n      try {\n         const serverClusterRefString: string = ManagedObject.uid(this.monitoredServerCluster);\n         if (!this.serverClusterRefToPersvcEnabledState.has(serverClusterRefString)) {\n            this.serverClusterRefToPersvcEnabledState.set(\n                  serverClusterRefString,\n                  await this.vsanPerfPropertyProvider.getPerfServiceEnabled(this.monitoredServerCluster),\n            );\n         }\n         return this.serverClusterRefToPersvcEnabledState.get(serverClusterRefString);\n      } catch (err) {\n         this.handleError(err);\n      }\n   }\n\n   onEntitySelect(entity: BasePerfEntity): void {\n      this.toggleHighResolutionSpecName(entity);\n   }\n}\n","/* Copyright 2017-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Directive, EventEmitter, Input, Output, ViewChild} from \"@angular/core\";\nimport {BasePerfEntity} from \"../model/base-perf-entity\";\nimport {PerfTimeRangeData} from \"@generated/perf-time-range-data\";\nimport {PerfDetailChartsComponent} from \"./perf-detail-charts.component\";\nimport {PerfMonitorCommonPropsData} from \"@generated/perf-monitor-common-props-data\";\nimport {IllustratedMessageType} from \"@component/illustrated-message/illustrated-message.component\";\nimport {ChartPlotLineSelectionData} from \"@component/chart/model/chart-plot-line-selection.data\";\nimport {PerfChartDataConstants} from \"@component/chart/performance/perf-chart-util\";\nimport {NestedPerfEntity} from \"../model/nested-perf-entity\";\nimport {RangePickerState} from \"@component/datetime-picker/time-range-picker/range-picker-state\";\n\n@Directive()\nexport abstract class BaseEntityDataPerfComponent {\n   extraDesc: string;\n\n   private _currentEntity: BasePerfEntity;\n\n   IllustratedMessageType: typeof IllustratedMessageType = IllustratedMessageType;\n\n   get currentEntity(): BasePerfEntity {\n      return this._currentEntity;\n   }\n\n   @Input()\n   set currentEntity(val: BasePerfEntity) {\n      if (this._currentEntity === val) {\n         return;\n      }\n      this._currentEntity = val;\n\n      this.onEntitySelect(val);\n   }\n\n   private _currentTimeRange: PerfTimeRangeData;\n\n   @Input()\n   set currentTimeRange(val: PerfTimeRangeData) {\n      if (!val) {\n         return;\n      }\n\n      this._currentTimeRange = val;\n      this.currentTimeRangeChange.emit(this._currentTimeRange);\n   }\n\n   get currentTimeRange(): PerfTimeRangeData {\n      return this._currentTimeRange;\n   }\n\n   @Output()\n   currentTimeRangeChange: EventEmitter<PerfTimeRangeData> = new EventEmitter<PerfTimeRangeData>();\n\n   private _currentPickerState: RangePickerState;\n\n   @Input()\n   set currentPickerState(val: RangePickerState) {\n      if (val == null) {\n         return;\n      }\n      this._currentPickerState = val;\n      this.currentPickerStateChange.emit(this._currentPickerState);\n   }\n\n   get currentPickerState(): RangePickerState {\n      return this._currentPickerState;\n   }\n\n   @Output()\n   currentPickerStateChange: EventEmitter<RangePickerState> = new EventEmitter<RangePickerState>();\n\n   private _hourInterval: number;\n\n   get currentHourInterval(): number {\n      return this._hourInterval;\n   }\n\n   @Input()\n   set currentHourInterval(val: number) {\n      if (val == null) {\n         return;\n      }\n      this._hourInterval = val;\n   }\n\n   @Output()\n   currentHourIntervalChange: EventEmitter<number> = new EventEmitter<number>();\n\n   @Input()\n   commonPerfData: PerfMonitorCommonPropsData;\n\n   /**\n    * Whether to show loading spinner. For auto refresh we don't want to show the spinner.\n    */\n   @Input()\n   showLoading: boolean = true;\n\n   @Input()\n   isRealtime: boolean;\n\n   @Output()\n   onTooltipActionClicked: EventEmitter<ChartPlotLineSelectionData> = new EventEmitter<ChartPlotLineSelectionData>();\n\n   @ViewChild(PerfDetailChartsComponent)\n   chartsView: PerfDetailChartsComponent;\n\n   /**\n    * Add \"hr-\" prefix to the entity.configSpec.name if it's realtime, or remove it if user leaves realtime chart mode\n    */\n   protected toggleHighResolutionSpecName(entity: BasePerfEntity): BasePerfEntity {\n      if (!entity?.configSpec) {\n         return entity;\n      }\n      if (entity instanceof NestedPerfEntity) {\n         this.toggleHighResolutionSpecName(entity.combinedEntity);\n      }\n      if (this.isRealtime) {\n         if (!this.hasHighResolutionPrefix(entity.configSpec.name)) {\n            entity.configSpec.name = `${PerfChartDataConstants.HIGH_RESOLUTION_PREFIX}${entity.configSpec.name}`;\n         }\n      } else {\n         if (this.hasHighResolutionPrefix(entity.configSpec.name)) {\n            entity.configSpec.name = entity.configSpec.name.replace(PerfChartDataConstants.HIGH_RESOLUTION_PREFIX, \"\");\n         }\n      }\n      return entity;\n   }\n\n   private hasHighResolutionPrefix(configSpecName: string): boolean {\n      return configSpecName.startsWith(PerfChartDataConstants.HIGH_RESOLUTION_PREFIX);\n   }\n\n   abstract fetchChartsData(): Promise<void> | void;\n\n   abstract onEntitySelect(entity: BasePerfEntity): void;\n}","/* Copyright 2020-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, Input} from \"@angular/core\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {PerfMonitorCommonPropsData} from \"@generated/perf-monitor-common-props-data\";\nimport {PerfEntityStateData} from \"@generated/perf-entity-state-data\";\nimport {BasePerfEntity} from \"../model/base-perf-entity\";\nimport {PerfExportData} from \"@component/chart/performance/perf-export-data\";\nimport {ModalBuilder} from \"@util/modal-builder\";\nimport {PerfChartExportContextData} from \"./perf-chart-export-context.data\";\nimport {PerfChartExportOptions} from \"./perf-chart-export-options\";\nimport {ZipDownloader} from \"@component/export/downloaders/zip-downloader\";\n\n@Component({\n   templateUrl: \"perf-chart-export.html\",\n   selector: \"vsan-perf-chart-export\",\n   styleUrls: [\"perf-chart-export.scss\"],\n})\nexport class PerfChartExportComponent {\n   private readonly DEFAULT_ZIP_NAME: string = \"results\";\n   VsanUiUtils: typeof VsanUiUtils = VsanUiUtils;\n\n   private options: PerfChartExportOptions;\n\n   @Input()\n   data: PerfExportData[] = [];\n\n   @Input()\n   commonPerfData: PerfMonitorCommonPropsData;\n\n   private _entityToMetricsMap: Map<BasePerfEntity, PerfEntityStateData[]>;\n\n   @Input()\n   set entityToMetricsMap(val: Map<BasePerfEntity, PerfEntityStateData[]>) {\n      this._entityToMetricsMap = val;\n      this.chartsEntities = [...val.keys()];\n   }\n\n   get entityToMetricsMap(): Map<BasePerfEntity, PerfEntityStateData[]> {\n      if (!this._entityToMetricsMap) {\n         return new Map<BasePerfEntity, PerfEntityStateData[]>();\n      }\n      return this._entityToMetricsMap;\n   }\n\n   @Input()\n   extraDesc: string;\n\n   @Input()\n   entity: BasePerfEntity;\n\n   @Input()\n   showSubEntities: boolean = false;\n\n   chartsEntities: BasePerfEntity[];\n\n   onExportAllClicked(): void {\n      const context: PerfChartExportContextData = {\n         exportData: this.data.filter(chartData => chartData),\n         showSubEntities: this.showSubEntities,\n      };\n\n      new ModalBuilder(\"performanceCommon/exportOptions\")\n            .setSize(790, 300)\n            .open(context)\n            .then(this.onSelectOptions);\n   }\n\n   private onSelectOptions = async (options: PerfChartExportOptions) => {\n      this.options = options;\n      this.exportCharts();\n   };\n\n   private exportCharts = () => {\n      const zip: ZipDownloader = new ZipDownloader();\n\n      this.data\n            .filter(perfData => this.isDataRequested(perfData))\n            .forEach(perfData =>\n                  zip.goToFolder(this.getFolder(perfData))\n                     .addSvg(perfData.graphName, perfData.chart.getSVG())\n                     .addCsvRaw(perfData.graphName, perfData.chart.getCSV(true)));\n\n      zip.download(this.zipName);\n   };\n\n   private isDataRequested(perfData: PerfExportData): boolean {\n      if (!this.options.selectedGraphs.includes(perfData.graphName)) {\n         return false;\n      }\n      if (perfData.subEntityName && !this.options.selectedSubEntities.includes(perfData.subEntityName)) {\n         return false;\n      }\n      return true;\n   }\n\n   private getFolder(perfData: PerfExportData): string | null {\n      return perfData.subEntityName ? perfData.subEntityName : null;\n   }\n\n   private get zipName(): string {\n      return this.entity.entityName ? this.entity.entityName : this.DEFAULT_ZIP_NAME;\n   }\n}\n","<!-- Copyright 2020 VMware, Inc. All rights reserved. -- VMware Confidential -->\n<div class=\"spinner spinner-lg central-spinner\" *ngIf=\"loading\"></div>\n\n<ng-container *ngIf=\"!loading\">\n   <vsan-unavailable-view *ngIf=\"unavailableView\"\n                          [unavailableViewSpec]=\"unavailableView\">\n   </vsan-unavailable-view>\n   <vsan-perf-chart-export *ngIf=\"!unavailableView && currentEntity && showExportAllButton\"\n                           class=\"export-button\"\n                           extraDesc=\"extraDesc\"\n                           [commonPerfData]=\"commonPerfData\"\n                           [entity]=\"currentEntity\"\n                           [data]=\"exportData\">\n   </vsan-perf-chart-export>\n</ng-container>\n\n<vsan-perf-detail-charts id=\"singleEntitiesChartsView\"\n                         *ngIf=\"!unavailableView\"\n                         [commonPerfData]=\"commonPerfData\"\n                         [consolidatedEntitiesData]=\"consolidatedEntitiesData\"\n                         [parentLoading]=\"loading\"\n                         [extraDesc]=\"extraDesc\"\n                         [visibleGraphId]=\"visibleGraphId\"\n                         [isAskVmwareLinkVisible]=\"isAskVmwareLinkVisible\"\n                         [showHeaderSection]=\"showHeaderSection\"\n                         [actionLink]=\"actionLink\"\n                         [chartWidth]=\"chartWidth\"\n                         [chartHeight]=\"chartHeight\"\n                         [isRealtime]=\"isRealtime\"\n                         (allChartsLoaded)=\"onAllChartsLoaded($event)\"\n                         (onTooltipActionClicked)=\"onTooltipActionClicked.emit($event)\">\n</vsan-perf-detail-charts>"]}