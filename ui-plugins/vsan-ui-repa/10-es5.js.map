{"version":3,"sources":["webpack:///src/app/vsan/common/component/unavailable-view/unavailable-view.html","webpack:///src/app/vsan/common/component/unavailable-view/unavailable-view.component.ts"],"names":["UnavailableViewComponent","taskService","navigationService","quickstartStatusService","perfProvider","isTaskRunning","displayActionButton","displayQuickstartBtn","_ensureMasterNodeElected","refreshAfterCompletion","configureComplete","onMasterNodeElected","hasMasterNodeElected","clusterRef","hasMasterNode","masterNodeElectedCallBack","onConfigureComplete","setTimeout","SERVICE_ENABLE_REFRESH_INTERVAL_MS","value","fetch","loading","getHciDataWithStatus","then","fetched","quickstartNotCompleted","isVsanEnabled","isHciWorkflowInProgress","clusterData","hciWorkflowState","e","error","IMAGES_FOLDER","isLightTheme","unavailableViewSpec","lightThemeImage","darkThemeImage","statusDescription","getString","unavailableService","hasEditPrivilege","actionDisable","spec","externalExtensionId","navigateTo","openVsanDialog","CEIP_VIEW","navigateWithoutContextObject","errorMessage","context","dialogContext","actionModuleId","setSize","actionDialogWidth","actionDialogHeight","open","tasks","handleTasks","ensureMasterNodeElected","handleError","QUICKSTART","runningTasks","getTasks","isEmpty","promises","map","t","getAwaitResult","Promise","all","Array","isArray","emit","globalRefresh","repa","repaExtension"],"mappings":"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","file":"10-es5.js","sourcesContent":["<!--Copyright 2020-2021 VMware, Inc. All rights reserved. -- VMware Confidential-->\n<div id=\"feature-description\" *ngIf=\"unavailableViewSpec?.featureDescription\">\n   <span>{{unavailableViewSpec.featureDescription}}</span>\n   <a *ngIf=\"unavailableViewSpec?.kbArticleId\" [external-link] [articleId]=\"unavailableViewSpec.kbArticleId\"></a>\n</div>\n\n<div *ngIf=\"loading\" class=\"spinner central-spinner\"></div>\n<vsan-validation *ngIf=\"!loading && errorMessage\" [alert]=\"errorMessage\"></vsan-validation>\n\n<div class=\"content-container\" *ngIf=\"!loading && unavailableViewSpec\">\n   <div *ngIf=\"imagePath\"\n        class=\"image\"\n        [ngStyle]=\"{'background-image':'url(' + imagePath + ')'}\">\n   </div>\n\n   <div class=\"status\">\n      <label id=\"status-label\" class=\"clr-control-label\">\n         {{unavailableViewSpec.statusLabel}}\n      </label>\n      <div class=\"horizontally-centered-content\">\n         <span class=\"spinner spinner-inline\" *ngIf=\"isTaskRunning\"></span>\n         <span id=\"status-description\" *ngIf=\"unavailableViewSpec.statusDescription || isTaskRunning\">\n            {{ descriptionLabel }}\n         </span>\n      </div>\n   </div>\n\n   <ng-container *ngIf=\"displayQuickstartBtn && quickstartNotCompleted else actionBtn\">\n      <ng-container *ngTemplateOutlet=\"quickstartBtn\"></ng-container>\n   </ng-container>\n   <ng-template #actionBtn>\n      <ng-container *ngTemplateOutlet=\"btn; context: {index: 0, styles: 'btn-primary', service: unavailableViewSpec,\n                    signpostPosition: 'top-right'}\">\n      </ng-container>\n   </ng-template>\n</div>\n\n<ng-container *ngIf=\"!loading && unavailableViewSpec?.multipleServicesRequired\">\n   <span id=\"multiple-services-description\"\n         *ngIf=\"unavailableViewSpec.requiredServicesData.multipleServicesDescription\">\n         {{unavailableViewSpec.requiredServicesData.multipleServicesDescription}}\n   </span>\n   <div class=\"clr-row\"\n        *ngFor=\"let service of unavailableViewSpec.requiredServicesData.requiredServices; let index=index\">\n      <div class=\"clr-col\">\n         <div class=\"card\">\n            <div class=\"card-block\">\n               <div class=\"card-text\">\n                  {{service.name}}\n               </div>\n               <div *ngIf=\"service.isEnabled\" class=\"clr-timeline-step\">\n                  <clr-icon size=\"24\" shape=\"success-standard\"></clr-icon>\n               </div>\n               <ng-container *ngIf=\"!service.isEnabled\">\n                  <ng-container *ngTemplateOutlet=\"btn; context: {index: index, styles: 'btn-sm btn-link',\n                                service: service.unavailableViewSpec, signpostPosition: 'top-left'}\">\n                  </ng-container>\n               </ng-container>\n            </div>\n         </div>\n      </div>\n   </div>\n</ng-container>\n\n<ng-template #btn let-index=\"index\" let-styles=\"styles\" let-unavailableService=\"service\"\n             let-signpostPosition=\"signpostPosition\">\n   <clr-tooltip *ngIf=\"displayActionButton && unavailableService.actionLabel\">\n      <span clrTooltipTrigger\n            [vsan-ignore-focus]=\"!disabledActionButton(unavailableService)\">\n         <!-- wrapped in span, because disabled element could not be clrTooltipTrigger for the tooltip -->\n         <button vsan-show-title\n                 id=\"action-button-{{index}}\"\n                 class=\"btn no-margin\"\n                 [ngClass]=\"styles\"\n                 (click)=\"btnClick(unavailableService)\"\n                 [disabled]=\"disabledActionButton(unavailableService)\">\n            {{unavailableService.actionLabel}}\n         </button>\n      </span>\n      <clr-tooltip-content *ngIf=\"!hasEditPrivilege\"\n                           clrPosition=\"top-left\"\n                           clrSize=\"lg\">\n         {{\"vsan.common.nopermissions\" | localized}}\n      </clr-tooltip-content>\n      <clr-tooltip-content *ngIf=\"hasEditPrivilege && unavailableService.actionDisable\"\n                           clrPosition=\"top-left\"\n                           clrSize=\"lg\">\n         {{unavailableService.actionDisableReason}}\n      </clr-tooltip-content>\n   </clr-tooltip>\n</ng-template>\n\n<ng-template #quickstartBtn>\n   <clr-tooltip>\n      <span clrTooltipTrigger\n            [vsan-ignore-focus]=\"hasEditPrivilege\">\n         <!-- wrapped in span, because disabled element could not be clrTooltipTrigger for the tooltip -->\n         <button vsan-show-title\n                 id=\"go-to-quickstart\"\n                 class=\"btn btn-primary\"\n                 (click)=\"goToQuickstart()\"\n                 [disabled]=\"!hasEditPrivilege\">\n            {{\"vsan.disabledService.common.goToQuickstart\" | localized}}\n         </button>\n      </span>\n      <ng-container *ngIf=\"!hasEditPrivilege\">\n         <clr-tooltip-content clrPosition=\"top-right\" clrSize=\"lg\" *clrIfOpen>\n            <span>{{\"vsan.common.nopermissions\" | localized}}</span>\n         </clr-tooltip-content>\n      </ng-container>\n   </clr-tooltip>\n</ng-template>\n","/* Copyright 2020-2022 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, EventEmitter, Input, OnInit, Output} from \"@angular/core\";\nimport {UnavailableViewSpec} from \"@component/unavailable-view/unavailable-view-spec\";\nimport {environment} from \"@env/environment\";\nimport {HciQuickstartStatusService} from \"@generated/hci-quickstart-status-service\";\nimport {VsanPerfPropertyProvider} from \"@generated/vsan-perf-property-provider\";\nimport {NavigationService, PlatformExtension} from \"@navigation/navigation.service\";\nimport {RefreshHandler} from \"@service/global-refresh.service\";\nimport {ManagedObject} from \"@service/managed-object\";\nimport {TaskMonitorService} from \"@service/task-monitor-service\";\nimport {Logger} from \"@util/logger\";\nimport {ModalBuilder} from \"@util/modal-builder\";\nimport {VsanQuickstartUtil} from \"@util/vsan-quickstart-util\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\n\n@Component({\n   templateUrl: \"unavailable-view.html\",\n   styleUrls: [\"unavailable-view.scss\"],\n   selector: \"vsan-unavailable-view\",\n})\nexport class UnavailableViewComponent implements OnInit {\n   private static readonly SERVICE_ENABLE_REFRESH_INTERVAL_MS: number = 2000;\n   private static readonly IMAGES_FOLDER: string = (environment.repa && environment.repaExtension)\n         ? \"images/svg/\"\n         : \"/ui/h5-vsan-ui/images/svg/\";\n   loading: boolean;\n   quickstartNotCompleted: boolean;\n   errorMessage: string;\n   isTaskRunning: boolean = false;\n\n   @Input()\n   unavailableViewSpec: UnavailableViewSpec;\n\n   @Input()\n   hasEditPrivilege: boolean;\n\n   @Input()\n   clusterRef: ManagedObject;\n\n   @Input()\n   dialogContext: any;\n\n   /**\n    * In cases where the service has external dependancy and it cannot be enabled.\n    * In such a case the user of this component is responsible for providing means to enable the service.\n    */\n   @Input()\n   displayActionButton: boolean = true;\n\n   // Set it to true if we need to display Go TO Quickstart button when quickstart is not completed.\n   @Input()\n   displayQuickstartBtn: boolean = false;\n\n   /**\n    * Ensure master node is elected after perf service is enabled.\n    */\n   _ensureMasterNodeElected: boolean = false;\n   @Input()\n   set ensureMasterNodeElected(value: boolean) {\n      this._ensureMasterNodeElected = value;\n   }\n\n   get ensureMasterNodeElected(): boolean {\n      return !!(this._ensureMasterNodeElected || this.masterNodeElectedCallBack);\n   }\n\n   /**\n    * A callback function that is executed after master node is elected.\n    */\n   @Input()\n   masterNodeElectedCallBack: () => any;\n\n   // Set it to true if global refresh is required after the task is completed.\n   @Input()\n   refreshAfterCompletion: boolean = true;\n\n   @Output()\n   configureComplete: EventEmitter<void> = new EventEmitter<void>();\n\n   constructor(private taskService: TaskMonitorService,\n         private navigationService: NavigationService,\n         private quickstartStatusService: HciQuickstartStatusService,\n         private perfProvider: VsanPerfPropertyProvider) {\n   }\n\n   ngOnInit(): void {\n      this.fetch();\n   }\n\n   @RefreshHandler\n   fetch(): void {\n      if (!this.clusterRef) {\n         return;\n      }\n      this.loading = true;\n      this.quickstartStatusService.getHciDataWithStatus(this.clusterRef)\n            .then(fetched => {\n               this.quickstartNotCompleted = fetched.isVsanEnabled &&\n                     VsanQuickstartUtil.isHciWorkflowInProgress(fetched.clusterData.hciWorkflowState);\n            })\n            .catch(e => Logger.error(\"Unable to retrieve HCI cluster data.\", e))\n            .finally(() => {\n               this.loading = false;\n            });\n   }\n\n   get imagePath(): string {\n      return UnavailableViewComponent.IMAGES_FOLDER +\n            (VsanUiUtils.isLightTheme()\n                  ? this.unavailableViewSpec.lightThemeImage\n                  : this.unavailableViewSpec.darkThemeImage);\n   }\n\n   get descriptionLabel(): string {\n      return this.unavailableViewSpec.statusDescription\n            ? this.unavailableViewSpec.statusDescription\n            : VsanUiUtils.getString(\"vsan.common.configuring\");\n   }\n\n   disabledActionButton(unavailableService: UnavailableViewSpec): boolean {\n      return !this.hasEditPrivilege || unavailableService.actionDisable || this.isTaskRunning;\n   }\n\n   btnClick(spec: UnavailableViewSpec): void {\n      if (spec.externalExtensionId) {\n         this.navigateTo(spec);\n      } else {\n         this.openVsanDialog(spec);\n      }\n   }\n\n   private navigateTo(spec: UnavailableViewSpec): void {\n      if (spec.externalExtensionId === PlatformExtension.CEIP_VIEW) {\n         this.navigationService.navigateWithoutContextObject(spec.externalExtensionId);\n      } else {\n         this.navigationService.navigateTo(spec.externalExtensionId, this.clusterRef);\n      }\n   }\n\n   private openVsanDialog(spec: UnavailableViewSpec): void {\n      this.errorMessage = null;\n      const context: any = this.dialogContext\n            ? this.dialogContext\n            : {clusterRef: this.clusterRef};\n      new ModalBuilder(spec.actionModuleId)\n            .setSize(spec.actionDialogWidth, spec.actionDialogHeight)\n            .open(context)\n            .then(async (tasks: ManagedObject | ManagedObject[]) => {\n               this.isTaskRunning = true;\n               await this.handleTasks(tasks);\n               if (this.ensureMasterNodeElected) {\n                  this.isTaskRunning = true;\n                  setTimeout(this.onMasterNodeElected, UnavailableViewComponent.SERVICE_ENABLE_REFRESH_INTERVAL_MS);\n               }\n            })\n            .catch((error) => this.handleError(error));\n   }\n\n   goToQuickstart(): void {\n      this.navigationService.navigateTo(PlatformExtension.QUICKSTART, this.clusterRef);\n   }\n\n   private async handleTasks(tasks: ManagedObject | ManagedObject[]): Promise<void> {\n      const runningTasks: ManagedObject[] = this.getTasks(tasks);\n\n      if (VsanUiUtils.isEmpty(runningTasks)) {\n         this.isTaskRunning = false;\n         return;\n      }\n\n      const promises: Promise<any>[] = runningTasks.map(t => this.taskService.getAwaitResult(t));\n      try {\n         await Promise.all(promises);\n         if (!this.ensureMasterNodeElected) {\n            this.onConfigureComplete();\n         }\n      } catch (error) {\n         this.handleError(error);\n      }\n   }\n\n   private getTasks(tasks: ManagedObject | ManagedObject[]): ManagedObject[] {\n      if (!tasks) {\n         return null;\n      }\n      if (!Array.isArray(tasks)) {\n         return [tasks];\n      }\n      return tasks;\n   }\n\n   private handleError(error: string): void {\n      this.errorMessage = error;\n      this.isTaskRunning = false;\n   }\n\n   private onMasterNodeElected = async (): Promise<void> => {\n      const hasMasterNode: boolean = await this.perfProvider.hasMasterNodeElected(this.clusterRef);\n      if (hasMasterNode) {\n         if (this.masterNodeElectedCallBack) {\n            this.masterNodeElectedCallBack();\n         }\n         this.onConfigureComplete();\n         return;\n      }\n      setTimeout(this.onMasterNodeElected, UnavailableViewComponent.SERVICE_ENABLE_REFRESH_INTERVAL_MS);\n   };\n\n   private onConfigureComplete(): void {\n      this.isTaskRunning = false;\n      this.configureComplete.emit();\n      if (this.refreshAfterCompletion) {\n         VsanUiUtils.globalRefresh();\n      }\n   }\n}\n"]}