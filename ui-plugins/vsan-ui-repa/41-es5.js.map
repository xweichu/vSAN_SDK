{"version":3,"sources":["webpack:///src/app/vsan/health/view/historical/historical-instance.html","webpack:///src/app/vsan/health/action/remediate-action-constants.ts","webpack:///src/app/vsan/health/view/historical/periods/largest-period.ts","webpack:///src/app/vsan/update/action/duplicate-pci-id-update-action.component.ts","webpack:///src/app/vsan/update/action/duplicate-pci-id-update-action.html","webpack:///src/app/vsan/health/action/proactive-rebalance-action.component.ts","webpack:///src/app/vsan/health/health-details-card.module.ts","webpack:///src/app/vsan/health/view/historical/historical-test-details.html","webpack:///src/app/vsan/health/model/health-silent-change.data.ts","webpack:///src/app/vsan/health/action/proactive-rebalance-action.html","webpack:///src/app/vsan/health/view/historical/historical-period.component.ts","webpack:///src/app/vsan/health/view/historical/periods/day-period.ts","webpack:///src/app/vsan/health/view/historical/historical-instance.component.ts","webpack:///src/app/vsan/health/view/historical/periods/base-period.ts","webpack:///src/app/vsan/common/service/telemetry.service.ts","webpack:///src/app/vsan/health/view/historical/periods/week-period.ts","webpack:///src/app/vsan/health/view/card/health-messages.html","webpack:///src/app/vsan/health/view/historical/historical-period.html","webpack:///src/app/vsan/health/view/health-lazy-data-loading-util.ts","webpack:///src/app/vsan/health/model/health-test-nav-params.ts","webpack:///src/app/vsan/health/view/card/details-card.html","webpack:///src/app/vsan/health/model/health-retest-event.data.ts","webpack:///src/app/vsan/health/view/historical/historical-test-details.component.ts","webpack:///src/app/vsan/common/directive/show-hide/show-hide.directive.ts","webpack:///src/app/vsan/health/view/card/details-card.component.ts","webpack:///src/app/vsan/health/view/card/health-messages.component.ts"],"names":["RemediateActions","LargestPeriod","id","timestamp","getFirstDayOfWeek","getTime","DuplicatePciIdUpdateActionComponent","onModelSelected","hasEditPermission","getString","context","clusterName","clusterRef","isOpenedFromHealthCheck","UPDATE_VIEW","setSize","DUPLICATE_PCI_ID_MODEL_SELECTION_DIALOG","width","height","open","then","isConfigChanged","emit","ProactiveRebalanceActionComponent","healthMutationProvider","taskSvc","changeDetector","onStopDiskRebalance","onFinishDiskRebalance","isDisabled","startDiskRebalance","rebalanceCluster","contextObject","task","getAwaitResult","isRunning","errorMessage","showConfirmationDlog","detectChanges","stopDiskRebalance","isStopping","stopRebalanceCluster","_data","val","actions","length","enabled","testData","HealthDetailsCardModule","HealthSilentChangeData","isSilent","settings","HistoricalPeriodComponent","VsanHealthStatus","onClick","status","green","info","yellow","red","DayPeriod","formatDate","getStartOfTheDay","testInstances","HistoricalInstanceComponent","formatInstanceTitleTimestamp","formatInstanceTimestamp","BasePeriod","SHORT_DATE_OPTIONS","month","day","hour12","propagatedInstancesCount","propagatedErrorInstancesCount","propagatedWarningInstancesCount","propagatedInfoInstancesCount","childPeriods","testInstance","updatePropagatedTestInstancesInfo","isLeaf","child","getChild","propagateTestInstance","push","isEmpty","childId","getChildId","find","value","createChild","parentPeriod","date","TelemetryService","EVENT_TYPE","h5Window","window","parent","paq","_paq","error","eventCategory","eventAction","eventName","EventCategory","WeekPeriod","firstDayTitle","generateTitle","lastDayTitle","HealthLazyDataLoadingUtil","data","callbackFunction","callbackParams","CALLBACK_FUNCTION","CALLBACK_PARAMS","PENDING_LOADING","apply","Promise","resolve","reject","HealthTestNavParams","testId","HealthRetestEventData","retestOnlineHealth","HistoricalTestDetailsComponent","GROUPING_ELEMENTS_COUNT","MINIMUM_PERIODS_TO_DISPLAY","FEW_INSTANCES_COUNT_THRESHOLD","NEUTRAL_HEALTH_STATUSES","unknown","instancesByStatus","isOverviewCorrelationsDisplayed","onInstanceSelect","_selectedPeriod","getInstancesByStatus","values","_instances","rootPeriod","calculateRootPeriod","forEach","instance","selectedInstanceTimestamp","preselectInstance","selectedPeriod","getPeriodToDrillDown","selectPeriodLatestInstance","selectInstance","expandPreselectedInstanceGroup","periods","concat","current","pop","hasTestInstance","instancesGroup","instances","details","defaultExpandableGroupState","SHOWN","selectedInstance","instanceDate","getVsanHealthStatusText","firstTimestamp","lastTimestamp","DAY_IN_MILLISECONDS","DAYS_IN_WEEK","HOUR_IN_MILLISECONDS","HOURS_IN_DAY","period","getPeriodToDrillUp","result","VsanTestInstancesGroup","instancesLeft","slice","previousGroup","count","findCountOfFirstWithSameStatus","splice","i","findInstanceByTimestamp","latestPeriodInstance","timespamp","group","hasStatusSwitches","DISABLED","isExpandable","firstInstanceStatus","some","HIDDEN","ShowHideDirective","viewContainerRef","el","refWatcher","DISPLAY_HIDE","DISPLAY_SHOW","_state","ShowHideState","showElement","$event","prepareTrigger","hideTriggerElement","hideElement","nativeElement","style","display","showTriggerElement","setTimeout","onStateChanged","state","disableFunctionality","clear","triggerElement","clickFunction","setFocus","triggerElementViewRef","createEmbeddedView","triggerNode","findTriggerDomNode","cursor","onclick","focusableElement","getFirstFocusableElement","focus","rootNodes","isElementNode","node","nodeType","Node","ELEMENT_NODE","element","isElementFocusable","children","item","tabIndex","DetailsCardComponent","healthProvider","capabilityProvider","permissionService","navigationService","telemetryService","dataService","VsanUiUtils","VsanHealthUtil","IllustratedMessageType","GOTO_HELP_EVENT","EVENT_PARAM_NAME","TEST_ID_SKYLINE","HELP_ID_HCL_UPTODATE","HELP_ID_RELEASE_CATALOG_UPTODATE","HELP_ID_DISK_BALANCE","HELP_ID_DISK_SPACE","HELP_ID_SELECT_VCG_DEVICE_MODELS","onRetest","onSilentChange","onHealthTestNavigation","onError","isDiskSpaceActionShown","hasEditPermissions","showTestName","isSilentCheck","isOnlineTest","silentCheckSupported","hasStoragePermissions","isActionSupported","actionId","undefined","getTabTitle","table","title","navigateToServicesPage","advancedOptionsExpanded","navigateTo","CLUSTER_SERVICES","navigateToVumClusterSettings","CLUSTER_UPDATES","isActionDisabled","action","actionTitle","description","isDataDrivenActionDisabled","isPurgeInaccessibleVmSwapObjectsAction","PurgeInaccessSwapObjs","remediateBtnClick","RemediateDedup","params","isDedupAction","refreshWhenTaskDone","RemediateFileService","RemediateClusterConfig","RepairClusterObjectsAction","repairClusterObjectsImmediate","alertMessage","isPurgeInaccessibleVmSwapObjectsSupported","RelayoutVsanObjects","UpgradeVsanDiskFormat","LoginVumIsoDepot","EnablePerformanceServiceAction","PERFORMANCE_CONFIG","PERF_SVC_EDIT_ACTION_DIALOG","EnableCeip","navigateWithoutContextObject","CEIP_VIEW","ClusterUpgrade","RemediateFileServiceImbalance","warn","triggerRetestWithoutOnlineHealth","loadDataHealthCapabilityAndPermissions","getProperty","name","isCluster","uid","all","getIsPurgeInaccessibleVmSwapObjectsSupported","getIsCapacityCustomizableThresholdsSupported","results","isCapacityCustomizableThresholdsSupported","err","hasPermissions","CONFIG_STORAGE","loadingTestInstances","hasLoadTestError","load","resetTabFocus","isHistoricalTestData","initializeSelectedInstanceDetails","tabs","first","click","logAction","VSAN_HEALTH","helpId","askVMware","messages","showOldFormatInfo","CAPACITY_MANAGEMENT","CAPACITY_MANAGEMENT_DIALOG","taskRef","isInfoTab","hasSupportedActions","areTestActionsVisibleInTab","isHclDbUpToDateAction","isReleaseCatalogUpToDateAction","isDiskBalanceAction","isDiskSpaceAction","isDeviceModelSelectAction","instanceTimestamp","hasLoadInstanceDetailsError","loadingDetails","e","restoreAlert","silenceAlert","silenceTestId","isVsphereHealth","silent","HEALTH_RESTORE_ACTION_DIALOG","setSilentChecks","testName","testDescription","isVirtualObjectsLinkShown","HealthMessagesComponent","onTestNavigation","filter","m","isCausedIssueBannerMessage","isCoreIssueBannerMessage","verifyMessage","hasTestData","coreIssueTest","map","causedIssuesTests","t","message","alertType","basicTestData","messageType","INFO","WARNING","healthMessage","links","banner","link","label","causedIssuesTest"],"mappings":"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","file":"41-es5.js","sourcesContent":["<!-- Copyright 2020 VMware, Inc. All rights reserved. -- VMware Confidential -->\n<div class=\"tooltip tooltip-md tooltip-bottom-right\">\n   <button id=\"instance-{{timestamp}}\"\n           class=\"item instance\"\n           [class.selected]=\"isActive\"\n           [class.green-item]=\"status === VsanHealthStatus.green\"\n           [class.blue-item]=\"status === VsanHealthStatus.info\"\n           [class.yellow-item]=\"status === VsanHealthStatus.yellow\"\n           [class.red-item]=\"status === VsanHealthStatus.red\"\n           [class.grey-item]=\"status === VsanHealthStatus.unknown\"\n           [vsan-auto-focus]=\"isActive\"\n           (click)=\"onClick.emit(timestamp)\">\n      <svg *ngIf=\"status === VsanHealthStatus.green\" width=\"16\"\n           id=\"instance-icon-{{timestamp}}-green\"\n           class=\"green-item\"\n           height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n         <rect class=\"icon\" x=\"0.444444\" y=\"0.444444\" width=\"15.1111\" height=\"15.1111\" rx=\"7.55556\" stroke-width=\"1\"/>\n      </svg>\n      <svg *ngIf=\"status === VsanHealthStatus.info\" width=\"16\"\n           id=\"instance-icon-{{timestamp}}-blue\"\n           class=\"blue-item\"\n           height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n         <rect class=\"icon\" height=\"15.1111\" rx=\"7.55556\" stroke-width=\"1\" width=\"15.1111\" x=\"0.444444\" y=\"0.444444\"/>\n         <rect id=\"info_square\" x=\"7\" y=\"3\" width=\"2\" height=\"2\" fill=\"#00567A\"/>\n         <rect id=\"info_rect\" x=\"7\" y=\"6\" width=\"2\" height=\"7\" fill=\"#00567A\"/>\n      </svg>\n      <svg *ngIf=\"status === VsanHealthStatus.unknown\" width=\"16\"\n           id=\"instance-icon-{{timestamp}}-grey\"\n           class=\"grey-item\"\n           height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n         <rect class=\"icon\" x=\"0.444444\" y=\"0.444444\" width=\"15.1111\" height=\"15.1111\" rx=\"7.55556\" stroke-width=\"1\"/>\n      </svg>\n      <svg *ngIf=\"status === VsanHealthStatus.yellow\"\n           id=\"instance-icon-{{timestamp}}-yellow\"\n           class=\"yellow-item\"\n           width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n         <path class=\"icon\" d=\"M9.00428 1.19524L15.039 13.6368C15.3609 14.3005 15.0848 15.0993 14.4246 15.4213C14.2435 15.5097 14.0448 15.5556 13.8435 15.5556H1.77408C1.04091 15.5556 0.444444 14.9592 0.444444 14.221C0.444444 14.0185 0.490334 13.8188 0.578592 13.6368L6.6133 1.19524C6.93488 0.532238 7.73043 0.257404 8.38993 0.579069C8.65749 0.709569 8.8739 0.926455 9.00428 1.19524Z\" stroke-width=\"1\"/>\n      </svg>\n      <svg *ngIf=\"status === VsanHealthStatus.red\"\n           id=\"instance-icon-{{timestamp}}-red\"\n           class=\"red-item\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n         <rect class=\"icon\" x=\"0.444444\" y=\"0.444444\" width=\"15.1111\" height=\"15.1111\" rx=\"1.55556\" stroke-width=\"1\"/>\n      </svg>\n   </button>\n   <span id=\"instance-tooltip-{{timestamp}}\" class=\"tooltip-content\">\n      {{formatInstanceDetails(timestamp)}}\n   </span>\n</div>\n<span *ngIf=\"showTitle\" id=\"instance-{{timestamp}}-title\" class=\"title\">{{formatTitle(timestamp)}}</span>","/* Copyright 2018-2020 VMware, Inc. All rights reserved. -- VMware Confidential */\n\n/**\n * Holds the action ids from the cluster > monitor > health check page\n */\nexport enum RemediateActions {\n   RemediateClusterConfig,\n   RemediateDedup,\n   UpgradeVsanDiskFormat,\n   RepairClusterObjectsAction,\n   PurgeInaccessSwapObjs,\n   LoginVumIsoDepot,\n   EnablePerformanceServiceAction,\n   RemediateFileService,\n   EnableCeip,\n   ClusterUpgrade,\n   RelayoutVsanObjects,\n   RemediateFileServiceImbalance,\n}\n","/* Copyright 2020 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {BasePeriod} from \"./base-period\";\nimport {VsanDateTimeUtils} from \"@util/vsan-dateteime-util\";\nimport {WeekPeriod} from \"./week-period\";\n\n/**\n * The root of the tree of periods. It should be not included as a child in any other period.\n */\nexport class LargestPeriod extends BasePeriod {\n\n   generateTitle(): string {\n      return \"\";\n   }\n\n   protected createChild(id: number): BasePeriod {\n      return new WeekPeriod(id);\n   }\n\n   protected getChildId(timestamp: any): number {\n      return VsanDateTimeUtils.getFirstDayOfWeek(timestamp).getTime();\n   }\n\n   protected isLeaf(): boolean {\n      return false;\n   }\n\n}","/* Copyright 2021-2022 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, EventEmitter, Input, Output} from \"@angular/core\";\nimport {DuplicatePciIdUpdateDialogContext} from \"@navigation/context/duplicate-pci-id-update-context\";\nimport {ManagedObject} from \"@service/managed-object\";\nimport {ModalBuilder} from \"@util/modal-builder\";\nimport {VsanDialogUtil} from \"@util/vsan-dialog-util\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {VsanRoutes} from \"../../../vsan-routes\";\n\n@Component({\n   templateUrl: \"duplicate-pci-id-update-action.html\",\n   selector: \"vsan-duplicate-pci-id-update-action\",\n   styleUrls: [\"update-catalog-action.scss\"],\n})\nexport class DuplicatePciIdUpdateActionComponent {\n   @Input()\n   clusterName: string;\n\n   @Input()\n   clusterRef: ManagedObject;\n\n   @Input()\n   isDisabled: boolean;\n\n   @Input()\n   hasEditPermission: boolean;\n\n   @Output()\n   onModelSelected: EventEmitter<void> = new EventEmitter<void>();\n\n   get title(): string {\n      return !this.hasEditPermission\n            ? VsanUiUtils.getString(\"vsan.common.nopermissions\")\n            : VsanUiUtils.getString(\"vsan.cluster.duplicatePciIdDevices.remediateAction.label\");\n   }\n\n   openSelectDialog(): void {\n      const context: DuplicatePciIdUpdateDialogContext = {\n         clusterName: this.clusterName,\n         clusterRef: this.clusterRef,\n         isOpenedFromHealthCheck: true,\n      };\n      new ModalBuilder(`${VsanRoutes.UPDATE_VIEW}/updateDuplicatePciIdDevices`)\n            .setSize(VsanDialogUtil.DUPLICATE_PCI_ID_MODEL_SELECTION_DIALOG.width,\n                  VsanDialogUtil.DUPLICATE_PCI_ID_MODEL_SELECTION_DIALOG.height)\n            .open(context)\n            .then((isConfigChanged: boolean) => {\n               if (isConfigChanged) {\n                  this.onModelSelected.emit();\n               }\n            });\n   }\n}","<!-- Copyright 2021 VMware, Inc. All rights reserved. VMware Confidential -->\n<button id=\"update-duplicate-pci-id-devices\"\n        class=\"btn btn-link btn-sm\"\n        [disabled]=\"isDisabled || !hasEditPermission\"\n        [attr.title]=\"title\"\n        (click)=\"openSelectDialog()\">\n   {{\"vsan.cluster.duplicatePciIdDevices.remediateAction.label\" | localized}}\n</button>","/* Copyright 2017 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {ChangeDetectorRef, Component, EventEmitter, Input, Output} from \"@angular/core\";\nimport {ManagedObject} from \"@service/managed-object\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {VsanHealthMutationProvider} from \"@generated/vsan-health-mutation-provider\";\nimport {VsanTestData} from \"@generated/vsan-test-data\";\nimport {TaskMonitorService} from \"@service/task-monitor-service\";\n\n@Component({\n   selector: \"vsan-proactive-rebalance-action\",\n   templateUrl: \"proactive-rebalance-action.html\",\n})\nexport class ProactiveRebalanceActionComponent {\n\n   errorMessage: string;\n   showConfirmationDlog: boolean;\n   isRunning: boolean;\n   isStopping: boolean;\n   private _data: VsanTestData;\n\n   @Input()\n   set testData(val: VsanTestData) {\n      this._data = val;\n      /**\n       * The actions is a 2-element array, start/stop balance action\n       */\n      this.isRunning = val.actions && val.actions.length > 1 ? val.actions[1].enabled : false;\n   }\n\n   get testData(): VsanTestData {\n      return this._data;\n   }\n\n   @Output()\n   private onStopDiskRebalance: EventEmitter<boolean> = new EventEmitter();\n\n   @Output()\n   private onFinishDiskRebalance: EventEmitter<boolean> = new EventEmitter();\n\n   @Input()\n   isDisabled: boolean = false;\n\n   constructor(private healthMutationProvider: VsanHealthMutationProvider,\n         private taskSvc: TaskMonitorService,\n         private changeDetector: ChangeDetectorRef) {\n   }\n\n   startDiskRebalance = (): void => {\n      this.healthMutationProvider.rebalanceCluster(ManagedObject.contextObject)\n            .then((task: ManagedObject) => {\n               this.taskSvc.getAwaitResult(task).then(() => {\n                  this.isRunning = false;\n                  this.onFinishDiskRebalance.emit(true);\n               });\n            })\n            .catch(() => {\n               this.isRunning = false;\n               this.errorMessage = VsanUiUtils.getString(\"vsan.monitor.cluster.disk.rebalance.start.error\");\n            });\n      this.isRunning = true;\n      this.showConfirmationDlog = false;\n      this.changeDetector.detectChanges();\n   };\n\n   stopDiskRebalance = (): void => {\n      this.isStopping = true;\n      this.healthMutationProvider.stopRebalanceCluster(ManagedObject.contextObject)\n            .then((task: ManagedObject) => {\n               this.taskSvc.getAwaitResult(task).then(() => {\n                  this.isRunning = false;\n                  this.isStopping = false;\n                  this.onStopDiskRebalance.emit(true);\n               });\n            })\n            .catch(() => {\n               this.isStopping = false;\n               this.errorMessage = VsanUiUtils.getString(\"vsan.monitor.cluster.disk.rebalance.stop.error\");\n            });\n   };\n\n   get startActionDisabled(): boolean {\n      /**\n       * If the init value is disabled, then we should disable the start proactive button\n       */\n      return !this.testData || !this.testData.actions[0].enabled;\n   }\n\n   get stopActionDisabled(): boolean {\n      /**\n       * disable the stop proactive button when:\n       * 1. the stop proactive button is disabled from the backend data\n       * 2. no running disk rebalance task\n       * 3. the rebalance task is stopping\n       */\n      return ((!this.testData || !this.testData.actions[1].enabled)\n            && !this.isRunning)\n            || this.isStopping;\n   }\n}","/* Copyright 2019-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {NgModule} from \"@angular/core\";\nimport {CommonModule} from \"@angular/common\";\nimport {ClarityModule} from \"@clr/angular\";\nimport {DetailsCardComponent} from \"./view/card/details-card.component\";\nimport {UpdateActionsModule} from \"../update/action/update-actions.module\";\nimport {CommonPipeModule} from \"@pipe/common-pipe.module\";\nimport {ValidationModule} from \"@component/validation/validation.module\";\nimport {ActionButtonModule} from \"@component/action-button/action-button.module\";\nimport {CommonCellsModule} from \"@component/cell/common-cells.module\";\nimport {CommonDirectiveModule} from \"@directive/common-directive.module\";\nimport {TelemetryService} from \"@service/telemetry.service\";\nimport {HistoricalTestDetailsComponent} from \"./view/historical/historical-test-details.component\";\nimport {HistoricalInstanceComponent} from \"./view/historical/historical-instance.component\";\nimport {HistoricalPeriodComponent} from \"./view/historical/historical-period.component\";\nimport {IllustratedMessageModule} from \"@component/illustrated-message/illustrated-message.module\";\nimport {HealthMessagesComponent} from \"./view/card/health-messages.component\";\nimport {HealthActionsModule} from \"./action/health-actions.module\";\n\n@NgModule({\n   imports: [\n      CommonModule,\n      ClarityModule,\n      CommonPipeModule,\n      CommonCellsModule,\n      ActionButtonModule,\n      CommonDirectiveModule,\n      ValidationModule,\n      UpdateActionsModule,\n      HealthActionsModule,\n      IllustratedMessageModule,\n   ],\n   declarations: [\n      DetailsCardComponent,\n      HistoricalTestDetailsComponent,\n      HistoricalInstanceComponent,\n      HistoricalPeriodComponent,\n      HealthMessagesComponent,\n   ],\n   exports: [\n      DetailsCardComponent,\n      HistoricalTestDetailsComponent,\n   ],\n   providers: [TelemetryService],\n})\nexport class HealthDetailsCardModule {\n}\n","<!-- Copyright 2020 VMware, Inc. All rights reserved. -- VMware Confidential -->\n<button *ngIf=\"getPeriodToDrillUp(selectedPeriod)\"\n         id=\"back-button\" class=\"back-button\"\n        (click)=\"drillUp()\">&lt;</button>\n<div id=\"items-pane\" class=\"items-pane\">\n   <div *ngIf=\"selectedPeriod?.testInstances?.length\"\n        id=\"instances\"\n        [class.large-spacing]=\"hasFewInstances()\"\n        class=\"instances\">\n      <div *ngFor=\"let group of instancesByStatus\"\n           id=\"instances-group-{{getGroupPeriod(group)}}\"\n           class=\"instances-group\"\n           [class.large-spacing]=\"hasFewInstances()\"\n           [vsan-show-hide]=\"getGroupState(group)\"\n           [showTriggerElement]=\"showTrigger\"\n           [hideTriggerElement]=\"hideTrigger\">\n         <vsan-historical-instance *ngFor=\"let instance of group.instances\"\n                                   [status]=\"instance.status\"\n                                   [timestamp]=\"instance.timestamp\"\n                                   [isActive]=\"selectedInstance?.timestamp === instance.timestamp\"\n                                   [showTitle]=\"isInstanceTitleVisible(instance.timestamp)\"\n                                   (onClick)=\"selectInstance($event)\">\n         </vsan-historical-instance>\n         <ng-template #showTrigger>\n            <vsan-historical-period id=\"show-{{getGroupPeriod(group)}}\"\n                                    [status]=\"getGroupStatus(group)\"\n                                    [details]=\"'vsan.health.historical.graph.seemore' | localized:  group.instances.length.toString()\">\n            </vsan-historical-period>\n         </ng-template>\n         <ng-template #hideTrigger>\n            <vsan-historical-period id=\"hide-{{getGroupPeriod(group)}}\"\n                                    [status]=\"getGroupStatus(group)\"\n                                    [details]=\"'vsan.health.historical.graph.seeless' | localized:  group.instances.length.toString()\">\n            </vsan-historical-period>\n         </ng-template>\n      </div>\n   </div>\n\n   <div *ngIf=\"selectedPeriod?.childPeriods?.length\" id=\"periods\" class=\"periods\">\n      <vsan-historical-period *ngFor=\"let period of selectedPeriod.childPeriods\"\n                              [id]=\"period.id\"\n                              [status]=\"period.status\"\n                              [title]=\"period.generateTitle()\"\n                              [details]=\"'vsan.health.historical.graph.seemore' | localized:  period.propagatedInstancesCount\"\n                              [tooltip]=\"'vsan.health.historical.period.details' | localized: period.propagatedErrorInstancesCount: period.propagatedWarningInstancesCount\"\n                              (onClick)=\"drillDown(period)\">\n      </vsan-historical-period>\n   </div>\n\n   <div *ngIf=\"selectedInstance\"\n        id=\"instance-overview-wrapper\" class=\"instance-overview-wrapper\">\n      <div id=\"instance-overview\"\n           class=\"instance-overview\"\n           [innerHTML]=\"getOverviewLabel(selectedInstance)\">\n      </div>\n   </div>\n</div>","/* Copyright 2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {RestoreHealthSettings} from \"../action/model/restore-health-settings.data\";\n\nexport class HealthSilentChangeData {\n   constructor(public isSilent: boolean, public settings: RestoreHealthSettings = null) {}\n}","<vsan-validation id=\"alert\"\n                 (onClosed)=\"errorMessage = null\"\n                 [alert]=\"errorMessage\">\n</vsan-validation>\n<clr-button-group class=\"btn-link\">\n   <clr-button id=\"start-disk-rebalance-btn\"\n               name=\"start-disk-rebalance-btn\"\n               class=\"btn btn-sm\"\n               (click)=\"showConfirmationDlog = true\"\n               [disabled]=\"startActionDisabled || isDisabled\"\n               *ngIf=\"!isRunning\">\n      {{testData.actions[0]?.label}}\n   </clr-button>\n   <clr-button id=\"stop-disk-rebalance-btn\"\n               name=\"stop-disk-rebalance-btn\"\n               class=\"btn btn-sm\"\n               (click)=\"stopDiskRebalance()\"\n               [disabled]=\"stopActionDisabled || isDisabled\"\n               *ngIf=\"isRunning\">\n      {{testData.actions[1]?.label}}\n   </clr-button>\n</clr-button-group>\n\n<clr-modal *ngIf=\"showConfirmationDlog\"\n           [(clrModalOpen)]=\"showConfirmationDlog\"\n           [clrModalStaticBackdrop]=\"true\">\n   <h3 class=\"modal-title\">{{'vsan.monitor.cluster.disk.rebalance.dlg.title' | localized}}</h3>\n   <div class=\"modal-body\">\n      <p>{{'vsan.monitor.cluster.disk.rebalance.warning' | localized}}</p>\n   </div>\n   <div class=\"modal-footer\">\n      <button type=\"button\" class=\"btn btn-outline\" (click)=\"showConfirmationDlog = false\">{{'vsan.common.cancel' |\n            localized}}\n      </button>\n      <button type=\"button\" class=\"btn btn-primary\" (click)=\"startDiskRebalance()\">{{'vsan.common.ok' | localized}}\n      </button>\n   </div>\n</clr-modal>","/* Copyright 2020 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, EventEmitter, Input, Output} from \"@angular/core\";\nimport {VsanHealthStatus} from \"@generated/vsan-health-status\";\n\n@Component({\n   templateUrl: \"historical-period.html\",\n   styleUrls: [\"historical-period.scss\"],\n   selector: \"vsan-historical-period\",\n})\nexport class HistoricalPeriodComponent {\n\n   VsanHealthStatus = VsanHealthStatus;\n\n   @Input()\n   id: string;\n\n   @Input()\n   status: VsanHealthStatus;\n\n   @Input()\n   title: string;\n\n   @Input()\n   details: string;\n\n   @Input()\n   tooltip: string;\n\n   @Output()\n   onClick: EventEmitter<void> = new EventEmitter();\n\n   getItemClass(): string {\n      switch (this.status) {\n         case VsanHealthStatus.green: return \"green-item\";\n         case VsanHealthStatus.info: return \"blue-item\";\n         case VsanHealthStatus.yellow: return \"yellow-item\";\n         case VsanHealthStatus.red: return \"red-item\";\n         default: return \"grey-item\";\n      }\n   }\n}","/* Copyright 2020 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {BasePeriod} from \"./base-period\";\nimport {VsanDateTimeUtils} from \"@util/vsan-dateteime-util\";\n\n/**\n * A period of one day.\n */\nexport class DayPeriod extends BasePeriod {\n\n   protected createChild(id: number): BasePeriod {\n      return null;\n   }\n\n   generateTitle(): string {\n      return this.formatDate(VsanDateTimeUtils.getStartOfTheDay(this.testInstances[0].timestamp));\n   }\n\n   protected getChildId(timestamp: number): number {\n      return null;\n   }\n\n   protected isLeaf(): boolean {\n      return true;\n   }\n\n}","/* Copyright 2020-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, EventEmitter, Input, Output} from \"@angular/core\";\nimport {VsanHealthStatus} from \"@generated/vsan-health-status\";\nimport {VsanHealthUtil} from \"@util/vsan-health-util\";\n\n@Component({\n   templateUrl: \"historical-instance.html\",\n   styleUrls: [\"historical-instance.scss\"],\n   selector: \"vsan-historical-instance\",\n})\nexport  class HistoricalInstanceComponent {\n\n   VsanHealthStatus: typeof VsanHealthStatus = VsanHealthStatus;\n\n   @Input()\n   isActive: boolean;\n\n   @Input()\n   status: VsanHealthStatus;\n\n   @Input()\n   timestamp: number;\n\n   @Input()\n   showTitle: boolean;\n\n   @Output()\n   onClick: EventEmitter<number> = new EventEmitter<number>();\n\n   formatTitle(timestamp: number): string {\n      return VsanHealthUtil.formatInstanceTitleTimestamp(timestamp);\n   }\n\n   formatInstanceDetails(timestamp: number): string {\n      return VsanHealthUtil.formatInstanceTimestamp(timestamp);\n   }\n}","/* Copyright 2020-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {VsanTestInstanceDetails} from \"@generated/vsan-test-instance-details\";\nimport {VsanHealthStatus} from \"@generated/vsan-health-status\";\nimport {VsanDateTimeUtils} from \"@util/vsan-dateteime-util\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\n\n/**\n * A period of time. Each period should know its parent period, if it contains child periods + how to\n * build them, if it contains test instances, how to build its own title.\n * This class implements an element of a tree. Only the leafs hold instances.\n */\nexport abstract class BasePeriod {\n   private readonly SHORT_DATE_OPTIONS: Intl.DateTimeFormatOptions = {\n      month: \"short\",\n      day: \"numeric\",\n      hour12: false,\n   };\n\n   constructor(public id?: number) {\n   }\n\n   /**\n    * The status of the period. It is summarized status of all propagated test instances.\n    */\n   status: VsanHealthStatus = VsanHealthStatus.green;\n\n   /**\n    * The count of the test instances which are propagated through the period.\n    */\n   propagatedInstancesCount: number = 0;\n\n   /**\n    * The count of the test instances with red status which are propagated through the period.\n    */\n   propagatedErrorInstancesCount: number = 0;\n\n   /**\n    * The count of the test instances with yellow status which are propagated through the period.\n    */\n   propagatedWarningInstancesCount: number = 0;\n\n   /**\n    * The count of the test instances with info status which are propagated through the period.\n    */\n   propagatedInfoInstancesCount: number = 0;\n\n   /**\n    * Reference to the parent of the period\n    */\n   parentPeriod: BasePeriod;\n\n   /**\n    * References to children periods\n    */\n   childPeriods: BasePeriod[] = [];\n\n   /**\n    * Propagated test instances. Only leafs may have test instances.\n    */\n   testInstances: VsanTestInstanceDetails[] = [];\n\n   /**\n    * Returns a title of the period\n    */\n   abstract generateTitle(): string;\n\n   /**\n    * Returns the id of its child element where a test instance with given timestamp should be propagated.\n    */\n   protected abstract getChildId(timestamp: number): number;\n\n   /**\n    * Creates a new child element.\n    */\n   protected abstract createChild(id: number): BasePeriod;\n\n   /**\n    * Returns if the period is a leaf. If element is a leaf, it has no child periods. Only leafs have test instaces.\n    */\n   protected abstract isLeaf(): boolean;\n\n   /**\n    * Propagates the given test instace to test instances (if the period is a leaf) or to a child period. At the end of\n    * loop the instance should be added to a leaf period.\n    */\n   propagateTestInstance(testInstance: VsanTestInstanceDetails): void {\n      this.updatePropagatedTestInstancesInfo(testInstance);\n      if (!this.isLeaf()) {\n         const child: BasePeriod = this.getChild(testInstance);\n         child.propagateTestInstance(testInstance);\n      }\n\n      if (this.isLeaf()) {\n         this.testInstances.push(testInstance);\n      }\n   }\n\n   /**\n    * Checks if the period has a test instance in a given timestamp.\n    */\n   hasTestInstance(timestamp: number): boolean {\n      if (VsanUiUtils.isEmpty(this.testInstances)) {\n         return false;\n      }\n      return this.testInstances[0].timestamp <= timestamp &&\n            this.testInstances[this.testInstances.length - 1].timestamp >= timestamp;\n   }\n\n   private updatePropagatedTestInstancesInfo(testInstance: VsanTestInstanceDetails): void {\n      this.propagatedInstancesCount++;\n\n      // update status information\n      switch (testInstance.status) {\n         case VsanHealthStatus.red:\n            this.propagatedErrorInstancesCount++;\n            this.status = VsanHealthStatus.red;\n            break;\n         case VsanHealthStatus.yellow:\n            this.propagatedWarningInstancesCount++;\n            if (this.status !== VsanHealthStatus.red) {\n               this.status = VsanHealthStatus.yellow;\n            }\n            break;\n         case VsanHealthStatus.info:\n            this.propagatedInfoInstancesCount++;\n            if (this.status !== VsanHealthStatus.red && this.status !== VsanHealthStatus.yellow) {\n               this.status = VsanHealthStatus.info;\n            }\n            break;\n      }\n   }\n\n   private getChild(testInstance: VsanTestInstanceDetails): BasePeriod {\n      const childId: number = this.getChildId(testInstance.timestamp);\n      let child: BasePeriod = this.childPeriods.find(value => value.id === childId);\n      if (!child) {\n         child = this.createChild(childId);\n         child.parentPeriod = this;\n         this.childPeriods.push(child);\n      }\n      return child;\n   }\n\n   /**\n    * Returns a formatted date including only month and day of month\n    */\n   protected formatDate(date: Date): string {\n      return VsanDateTimeUtils.formatDate(date, this.SHORT_DATE_OPTIONS);\n   }\n}","/* Copyright 2020 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Injectable} from \"@angular/core\";\nimport {Logger} from \"@util/logger\";\n\n/**\n * Introduces h5 client telemetry service. The telemetry base may be accessed at {@link http://url/q7n2}.\n * NOTE: The replication of logged event to the base may take up to 24 hours.\n */\n@Injectable()\nexport class TelemetryService {\n\n   private readonly EVENT_TYPE: string = \"trackEvent\";\n\n   // h5 client initializes global variable, which is used to handle telemetry.\n   private h5Window: Window = window.parent;\n   private paq: any;\n\n   constructor() {\n      this.paq = (this.h5Window as PaqAware)._paq;\n      if (!this.paq) {\n         Logger.error(\"Unable to initialize telemetry service\");\n      }\n   }\n\n   logAction(eventCategory: EventCategory, eventAction: string, eventName: string, value: any) {\n      if (!this.paq) {\n         Logger.error(\"Telemetry service is not initialized. Entry is not collected.\");\n         return;\n      }\n      this.paq.push([this.EVENT_TYPE, EventCategory[eventCategory], eventAction, eventName, value]);\n   }\n}\n\nexport interface PaqAware extends Window {\n   // h5 client initializes this global variable, which is used to handle telemetry. Pushing a value to will be logged\n   // into the telemetry database.\n   _paq: any;\n}\n\n/**\n * Category for the telemetry entry. To ease the search in the base, add \"vsan_\" prefix to all new categories.\n */\nexport enum EventCategory {\n   VSAN_HEALTH,\n}","/* Copyright 2020 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {BasePeriod} from \"./base-period\";\nimport {DayPeriod} from \"./day-period\";\nimport {VsanDateTimeUtils} from \"@util/vsan-dateteime-util\";\n\n/**\n * Represents one week. It may be only a part of the week, depending of children days.\n */\nexport class WeekPeriod extends BasePeriod {\n\n   protected createChild(id: number): BasePeriod {\n      return new DayPeriod(id);\n   }\n\n   generateTitle(): string {\n      if (!this.childPeriods || !this.childPeriods.length) {\n         return \"\";\n      }\n\n      const firstDayTitle: string = this.childPeriods[0].generateTitle();\n      const lastDayTitle: string = this.childPeriods[this.childPeriods.length - 1].generateTitle();\n      return firstDayTitle === lastDayTitle ? firstDayTitle : `${firstDayTitle} - ${lastDayTitle}`;\n   }\n\n   protected getChildId(timestamp: number): number {\n      return VsanDateTimeUtils.getStartOfTheDay(timestamp).getTime();\n   }\n\n   protected isLeaf(): boolean {\n      return false;\n   }\n\n}","<!-- Copyright 2021 VMware, Inc. All rights reserved. -- VMware Confidential -->\n<vsan-validation *ngFor=\"let bannerMessage of basicMessages\"\n                 [alertType]=\"getAlertType(bannerMessage.alertType)\"\n                 [alert]=\"bannerMessage.message\"\n                 [allowExpandCollapse]=\"false\"\n                 [allowClose]=\"false\">\n</vsan-validation>\n\n<ng-container *ngIf=\"showHealthCorrelationMessages\">\n   <clr-alert class=\"cause-issue-alert-message\"\n              *ngFor=\"let causeIssueMessage of causedIssueMessages\"\n              [clrAlertType]=\"getAlertType(causeIssueMessage.alertType)\"\n              [clrAlertClosed]=\"false\"\n              [clrAlertClosable]=\"false\">\n      <clr-alert-item>\n         <div class=\"alert-text\"\n              [copyToClipboard]=\"true\"\n              vsan-show-title>\n         <span>\n            {{causeIssueMessage.message}}\n         </span>\n            <a href=\"javascript://\"\n               (click)=\"getActionLinks(causeIssueMessage)[0].action()\">\n               {{getActionLinks(causeIssueMessage)[0].label}}\n            </a>\n         </div>\n      </clr-alert-item>\n   </clr-alert>\n\n   <clr-alert class=\"core-issue-alert-message\"\n              *ngFor=\"let coreIssueMessage of coreIssueMessages\"\n              [clrAlertType]=\"getAlertType(coreIssueMessage.alertType)\"\n              [clrAlertClosed]=\"false\"\n              [clrAlertClosable]=\"false\">\n      <clr-alert-item>\n         <div class=\"show-separate-links\">\n         <span class=\"alert-text\"\n               [copyToClipboard]=\"true\"\n               vsan-show-title>\n            {{coreIssueMessage.message}}\n         </span>\n            <span *ngFor=\"let link of getActionLinks(coreIssueMessage);\" class=\"alert-link\">\n               <a href=\"javascript://\"\n                  (click)=\"link.action()\">\n                  {{link.label}}\n               </a>\n         </span>\n         </div>\n      </clr-alert-item>\n   </clr-alert>\n</ng-container>\n\n","<!-- Copyright 2020 VMware, Inc. All rights reserved. -- VMware Confidential -->\n<div class=\"tooltip tooltip-md tooltip-bottom-right\">\n   <button id=\"period-{{id}}\"\n           class=\"item period\"\n           [ngClass]=\"getItemClass()\"\n           (click)=\"onClick.emit()\">\n      <span id=\"period-instances-count-{{id}}\" class=\"instances-count\">{{details}}</span>\n      <svg *ngIf=\"status === VsanHealthStatus.green\"\n           id=\"period-{{id}}-green\"\n           class=\"green-item\" width=\"34\" height=\"16\" viewBox=\"0 0 34 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n         <path class=\"icon\" d=\"M8 0.5H26C30.1421 0.5 33.5 3.85786 33.5 8C33.5 12.1421 30.1421 15.5 26 15.5H8C3.85786 15.5 0.5 12.1421 0.5 8C0.5 3.85786 3.85786 0.5 8 0.5Z\" stroke-width=\"1\"/>\n      </svg>\n      <svg *ngIf=\"status === VsanHealthStatus.info\"\n           id=\"period-{{id}}-blue\"\n           class=\"blue-item\" width=\"34\" height=\"16\" viewBox=\"0 0 34 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n         <path class=\"icon\" d=\"M8 0.5H26C30.1421 0.5 33.5 3.85786 33.5 8C33.5 12.1421 30.1421 15.5 26 15.5H8C3.85786 15.5 0.5 12.1421 0.5 8C0.5 3.85786 3.85786 0.5 8 0.5Z\" stroke-width=\"1\"/>\n      </svg>\n      <svg *ngIf=\"status === VsanHealthStatus.yellow\"\n           id=\"period-{{id}}-yellow\"\n           class=\"yellow-item\" width=\"34\" height=\"16\" viewBox=\"0 0 34 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n         <path class=\"icon\" d=\"M4.65985 0.5H27.3401C28.062 0.5 28.6814 1.01411 28.8145 1.72357L31.0645 13.7236C31.2375 14.6467 30.5294 15.5 29.5901 15.5H2.40985C1.47065 15.5 0.762459 14.6467 0.935544 13.7236L3.18554 1.72357C3.31857 1.01411 3.93803 0.5 4.65985 0.5Z\" stroke-width=\"1\"/>\n      </svg>\n      <svg *ngIf=\"status === VsanHealthStatus.red\"\n           id=\"period-{{id}}-red\"\n           class=\"red-item\" width=\"32\" height=\"16\" viewBox=\"0 0 32 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n         <path class=\"icon\" d=\"M2 0.444444H30C30.8591 0.444444 31.5556 1.14089 31.5556 2V14C31.5556 14.8591 30.8591 15.5556 30 15.5556H2C1.14089 15.5556 0.444444 14.8591 0.444444 14V2C0.444444 1.14089 1.14089 0.444444 2 0.444444Z\" stroke-width=\"1\"/>\n      </svg>\n      <svg *ngIf=\"status === VsanHealthStatus.unknown\"\n           id=\"period-{{id}}-grey\"\n           class=\"grey-item\" width=\"34\" height=\"16\" viewBox=\"0 0 34 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n         <path class=\"icon\" d=\"M8 0.5H26C30.1421 0.5 33.5 3.85786 33.5 8C33.5 12.1421 30.1421 15.5 26 15.5H8C3.85786 15.5 0.5 12.1421 0.5 8C0.5 3.85786 3.85786 0.5 8 0.5Z\" stroke-width=\"1\"/>\n      </svg>\n   </button>\n   <span *ngIf=\"tooltip\" id=\"period-tooltip-{{id}}\" class=\"tooltip-content\">{{tooltip}}</span>\n</div>\n<a *ngIf=\"title\" id=\"period-{{id}}-title\" class=\"title pointer\" (click)=\"onClick.emit()\">{{title}}</a>","/* Copyright 2019-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nexport class HealthLazyDataLoadingUtil {\n\n   // following properties will be added to the object when the lazy loading is initialized. Keeping them with unusual\n   // names will minimize the change to override existint property.\n   private static readonly CALLBACK_FUNCTION: string  = \"hldluCallbackFunction\";\n   private static readonly CALLBACK_PARAMS: string  = \"hldluCallbackParams\";\n   private static readonly PENDING_LOADING: string  = \"hldluPendingLoading\";\n\n   /**\n    * Adds lazy loading functionality for provided object.\n    * @param data - Data object\n    * @param callbackFunction - Function which will load the data on request\n    * @param callbackParams - Optional. Parameters for the callback function.\n    */\n   static initLazyLoading(data: any, callbackFunction: Function, callbackParams: any[]): void {\n      data[HealthLazyDataLoadingUtil.CALLBACK_FUNCTION] = callbackFunction;\n      data[HealthLazyDataLoadingUtil.CALLBACK_PARAMS] = callbackParams;\n      data[HealthLazyDataLoadingUtil.PENDING_LOADING] = true;\n   }\n\n   /**\n    * Loads data using the callback function. Data is loaded once. On further load the callback function is not\n    * triggered.\n    */\n   static async load(data: any): Promise<void> {\n      if (!data) {\n         return;\n      }\n      const callbackFunction: Function = data[HealthLazyDataLoadingUtil.CALLBACK_FUNCTION];\n      if (!callbackFunction) {\n         return;\n      }\n\n      if (!data[HealthLazyDataLoadingUtil.PENDING_LOADING]) {\n         return;\n      }\n\n      const callbackParams: any[] = data[HealthLazyDataLoadingUtil.CALLBACK_PARAMS];\n      data[HealthLazyDataLoadingUtil.PENDING_LOADING] = false;\n      try {\n         await callbackFunction.apply(callbackFunction, callbackParams);\n         return await Promise.resolve();\n      } catch (e) {\n         return await Promise.reject(e);\n      }\n   }\n}","/* Copyright 2021 VMware, Inc. All rights reserved. -- VMware Confidential */\n\n/**\n * Model used for the health test navigation\n */\nexport class HealthTestNavParams {\n   constructor(public testId: string, public timestamp: number = null) {}\n}\n","<!-- Copyright 2017-2021 VMware, Inc. All rights reserved. -- VMware Confidential -->\n<div *ngIf=\"isTestNameShown() || isSilnceCheckAvailable()\" class=\"header-container\">\n   <h4 *ngIf=\"isTestNameShown()\" id=\"title\">\n      {{data?.testName}}\n   </h4>\n   <button id=\"silent-setting\"\n           *ngIf=\"isSilnceCheckAvailable()\"\n           class=\"btn btn-sm btn-outline\"\n           (click)=\"switchSilentCheck()\"\n           [disabled]=\"isActionDisabled()\"\n           type=\"button\">\n      {{getSilenceRestoreAlertTitle()}}\n   </button>\n</div>\n\n<!-- Show info/warnings messages for the current health test -->\n<vsan-health-messages *ngIf=\"testMessages?.length\"\n                            [messages]=\"testMessages\"\n                            [showHealthCorrelationMessages]=\"showHealthCorrelationMessages\"\n                            (onTestNavigation)=\"navigateToHealthTest($event)\">\n</vsan-health-messages>\n\n<ng-container *ngIf=\"!loadingTestInstances\">\n\n   <!-- Error while retrieve details for historical test -->\n   <vsan-validation id=\"load-test-error\"\n                    *ngIf=\"hasLoadTestError\"\n                    [alert]=\"'vsan.health.historical.details.test.data.error' | localized\">\n   </vsan-validation>\n\n   <!-- No instances for historical test for selected period -->\n   <div *ngIf=\"isHistoricalTestData && !hasLoadTestError && !data.instances?.length\" id=\"no-test-data\" class=\"no-test-data\">\n      <clr-icon shape=\"minus-circle\" class=\"is-solid\"></clr-icon>\n      <div>{{'vsan.health.historical.details.test.data.missing' | localized}}</div>\n   </div>\n\n   <vsan-historical-test-details *ngIf=\"isHistoricalTestData && !hasLoadTestError && data?.instances?.length\"\n                                 [selectedInstanceTimestamp]=\"preselectTimestamp\"\n                                 [instances]=\"data.instances\"\n                                 (onInstanceSelect)=\"instanceSelected($event)\">\n   </vsan-historical-test-details>\n\n   <!-- Test instance details -->\n   <ng-container *ngIf=\"!loadingDetails && !hasLoadTestError && data?.instances?.length\">\n      <!-- No details for historical test instance for selected period -->\n      <vsan-illustrated-message *ngIf=\"isHistoricalTestData && !selectedInstance\"\n                                [type]=\"IllustratedMessageType.MISSING_SELECTION\"\n                                [message]=\"'vsan.health.historical.details.select.instance' | localized\">\n      </vsan-illustrated-message>\n\n      <ng-container *ngIf=\"selectedInstance\">\n         <!-- Error while retrieve details for historical test -->\n         <vsan-validation id=\"load-instance-details-error\"\n                          *ngIf=\"hasLoadInstanceDetailsError\"\n                          [alert]=\"'vsan.health.historical.details.test.instance.data.error' | localized\">\n         </vsan-validation>\n         <!-- No details for historical test instance for selected period -->\n         <div *ngIf=\"isHistoricalTestData && !hasLoadInstanceDetailsError && !selectedInstance.details?.length\"\n              id=\"no-instance-data\" class=\"no-test-data\">\n            <clr-icon shape=\"minus-circle\" class=\"is-solid\"></clr-icon>\n            <div>{{'vsan.health.historical.details.test.data.missing' | localized}}</div>\n         </div>\n\n         <!-- There are instance details - display them -->\n         <ng-container *ngIf=\"!hasLoadInstanceDetailsError && (!isHistoricalTestData || selectedInstance.details?.length)\">\n            <clr-tabs class=\"tab-container\">\n               <!--Create a separate tab for each result table.-->\n               <clr-tab *ngFor=\"let table of selectedInstance?.details; let i = index\">\n                  <button id=\"link-{{i}}\" clrTabLink\n                          [attr.title]=\"getTabTitle(table)\">\n                     {{getTabTitle(table)}}\n                  </button>\n                  <clr-tab-content id=\"content-{{i}}\" *clrIfActive=\"i==0\">\n                     <section class=\"content\">\n                        <ng-container *ngTemplateOutlet=\"warnings_actions; context: {tabIndex: i, isInfoTab: false}\"></ng-container>\n                        <clr-datagrid>\n                           <clr-dg-column *ngFor=\"let column of table?.columns\"\n                                          [ngClass]=\"{'string-column': column.columnType?.toString() ==='string'}\"\n                                          vsan-show-title>\n                              {{column.columnLabel}}\n                           </clr-dg-column>\n\n                           <clr-dg-row *ngFor=\"let row of table?.rows; let rowIndex = index\">\n                              <clr-dg-cell id=\"cell-{{rowIndex}}-{{cellIndex}}\"\n                                           *ngFor=\"let cell of row?.rowValues; let cellIndex = index\"\n                                           vsan-show-title>\n                                 <vsan-health-test-value [valueCell]=\"cell\"\n                                                         [isVirtualObjectsLinkShown]=\"displayVirtualObjectNavigationLink()\">\n                                 </vsan-health-test-value>\n                              </clr-dg-cell>\n                              <ng-container ngProjectAs=\"clr-dg-row-detail\" *ngFor=\"let detailsRow of row.nestedRows; let detailsRowIndex = index\">\n                                 <clr-dg-row-detail *clrIfExpanded>\n                                    <clr-dg-cell id=\"cell-{{rowIndex}}-{{detailsRowIndex}}-{{cellIndex}}\"\n                                                 *ngFor=\"let cell of detailsRow.rowValues; let cellIndex = index; let isFirst = first\"\n                                                 [ngClass]=\"{'indented-content': isFirst}\"\n                                                 vsan-show-title>\n                                       <vsan-health-test-value [valueCell]=\"cell\"\n                                                               [isVirtualObjectsLinkShown]=\"displayVirtualObjectNavigationLink()\">\n                                       </vsan-health-test-value>\n                                    </clr-dg-cell>\n                                 </clr-dg-row-detail>\n                              </ng-container>\n                           </clr-dg-row>\n                           <clr-dg-footer *ngIf=\"table.rows?.length == 1\">\n                              {{'vsan.common.datagrid.item' | localized: table.rows?.length.toString()}}\n                           </clr-dg-footer>\n                           <clr-dg-footer *ngIf=\"table.rows?.length != 1\">\n                              {{'vsan.common.datagrid.items' | localized: table.rows ? table.rows.length.toString() : \"0\"}}\n                           </clr-dg-footer>\n                        </clr-datagrid>\n                     </section>\n                  </clr-tab-content>\n               </clr-tab>\n               <clr-tab *ngIf=\"selectedInstance || !isHistoricalTestData\">\n                  <button id=\"link-info\" clrTabLink\n                          [attr.title]=\"'vsan.monitor.health.info' | localized\">\n                     {{'vsan.monitor.health.info' | localized}}\n                  </button>\n                  <clr-tab-content id=\"content-info\" *clrIfActive=\"data?.details?.length == 0\">\n                     <section class=\"content\">\n                        <ng-container *ngTemplateOutlet=\"warnings_actions; context: {tabIndex: 'info', isInfoTab: true}\"></ng-container>\n                        <div class=\"description\" [innerHTML]=\"data?.testDescription\"></div>\n                     </section>\n                  </clr-tab-content>\n               </clr-tab>\n            </clr-tabs>\n         </ng-container>\n      </ng-container>\n   </ng-container>\n</ng-container>\n\n<!-- loading indicator for loading instances data and instance details -->\n<div *ngIf=\"loadingTestInstances || loadingDetails\" class=\"loading-wrapper\">\n   <div class=\"spinner\"></div>\n</div>\n\n<ng-template #warnings_actions let-tabIndex=\"tabIndex\" let-isInfoTab=\"isInfoTab\">\n   <vsan-validation id=\"alert-{{tabIndex}}\"\n                    *ngIf=\"alertMessage\"\n                    (onClosed)=\"alertMessage = null\"\n                    [alert]=\"alertMessage\">\n   </vsan-validation>\n\n   <div *ngIf=\"displayInfoTab(isInfoTab) ||\n               displayDataDrivenActions(isInfoTab) ||\n               displayHclDbUpToDateAction(isInfoTab) ||\n               displayReleaseCatalogUpToDateAction(isInfoTab) ||\n               displayDiskBalanceAction(isInfoTab) ||\n               displayDiskSpaceAction(isInfoTab) ||\n               displayDeviceModelSelectAction(isInfoTab)\"\n        class=\"actions-wrapper\">\n\n      <!-- Action with custom handling -->\n      <ng-container *ngIf=\"displayHclDbUpToDateAction(isInfoTab)\">\n         <vsan-hcl-database-update-action btnClasses=\"btn btn-sm btn-link\"\n                                          [isDisabled]=\"!hasEditPermissions\"\n                                          (updateComplete)=\"triggerRetestWithoutOnlineHealth()\"\n                                          (error)=\"setErrorMessage($event)\">\n         </vsan-hcl-database-update-action>\n      </ng-container>\n\n      <ng-container *ngIf=\"displayReleaseCatalogUpToDateAction(isInfoTab)\">\n         <vsan-release-catalog-update-action btnClasses=\"btn btn-sm btn-link\"\n                                             [hasEditPermissions]=\"hasEditPermissions\"\n                                             (updateComplete)=\"triggerRetestWithoutOnlineHealth()\"\n                                             (error)=\"setErrorMessage($event)\">\n         </vsan-release-catalog-update-action>\n      </ng-container>\n\n      <ng-container *ngIf=\"displayDiskSpaceAction(isInfoTab)\">\n         <!-- Open Capacity Management Dialog -->\n         <clr-button-group class=\"btn-link\">\n            <clr-button id=\"capacity-management-config\"\n                        name=\"capacity-management-config\"\n                        class=\"btn btn-sm\"\n                        (click)=\"openCapacityManagementDialog()\">\n               {{\"vsan.services.enforcereservation.action.title\" | localized}}\n            </clr-button>\n         </clr-button-group>\n      </ng-container>\n\n      <ng-container *ngIf=\"displayDiskBalanceAction(isInfoTab)\">\n         <!-- New VC returns an array of 1 element and supports automatic rebalance -->\n         <clr-button-group *ngIf=\"data.actions.length === 1\"\n                           vsan-button-group\n                           class=\"btn-link\">\n            <clr-button id=\"automatic-rebalance\"\n                        name=\"automatic-rebalance\"\n                        class=\"btn btn-sm\"\n                        (click)=\"navigateToServicesPage()\"\n                        [disabled]=\"isActionDisabled(data.actions[0])\"\n                        [vsan-button-title]=\"actionTitle(data.actions[0])\">\n               {{data.actions[0].label}}\n            </clr-button>\n         </clr-button-group>\n         <!-- Old VC returns an array of 2 elements and runs proactive rebalance -->\n         <vsan-proactive-rebalance-action *ngIf=\"data.actions.length === 2\"\n                                          [testData]=\"data\"\n                                          [isDisabled]=\"!hasEditPermissions\"\n                                          (onStopDiskRebalance)=\"triggerRetestWithoutOnlineHealth()\"\n                                          (onFinishDiskRebalance)=\"triggerRetestWithoutOnlineHealth()\">\n         </vsan-proactive-rebalance-action>\n      </ng-container>\n\n      <ng-container *ngIf=\"displayDeviceModelSelectAction(isInfoTab)\">\n         <!-- Select the models for all of the devices having a duplicated PCI ID -->\n         <vsan-duplicate-pci-id-update-action *ngIf=\"data.actions && data.actions.length === 1\"\n                                              [clusterName]=\"clusterName\"\n                                              [clusterRef]=\"clusterRef\"\n                                              [isDisabled]=\"isActionDisabled(data.actions[0])\"\n                                              [hasEditPermission]=\"hasEditPermissions\"\n                                              (onModelSelected)=\"triggerRetestWithoutOnlineHealth()\">\n         </vsan-duplicate-pci-id-update-action>\n      </ng-container>\n\n      <clr-button-group *ngIf=\"isInfoTab || displayDataDrivenActions(isInfoTab)\"\n                        vsan-button-group\n                        class=\"btn-link\">\n         <!-- Data driven actions -->\n         <ng-container *ngIf=\"displayDataDrivenActions(isInfoTab)\"\n                       vsan-button-group\n                       class=\"btn-link\">\n            <ng-container *ngFor=\"let action of data.actions\">\n               <clr-button class=\"btn btn-sm\"\n                           *ngIf=\"isActionSupported(action.actionId)\"\n                           (click)=\"remediateBtnClick(action.actionId)\"\n                           [vsan-button-title]=\"actionTitle(action)\"\n                           [disabled]=\"isDataDrivenActionDisabled(action)\">\n                  {{action.label}}\n               </clr-button>\n            </ng-container>\n         </ng-container>\n\n         <clr-button *ngIf=\"displayInfoTab(isInfoTab)\"\n                     class=\"btn btn-sm\"\n                     [external-link]\n                     [helpId]=\"data.helpId\"\n                     [vsan-button-title]=\"'vsan.common.askVMware' | localized\">\n         </clr-button>\n      </clr-button-group>\n   </div>\n</ng-template>\n","/* Copyright 2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nexport class HealthRetestEventData {\n   constructor(public retestOnlineHealth: boolean = false) {}\n}","/* Copyright 2020-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, EventEmitter, Input, Output} from \"@angular/core\";\nimport {VsanTestInstanceDetails} from \"@generated/vsan-test-instance-details\";\nimport {BasePeriod} from \"./periods/base-period\";\nimport {VsanHealthStatus} from \"@generated/vsan-health-status\";\nimport {VsanDateTimeUtils} from \"@util/vsan-dateteime-util\";\nimport {WeekPeriod} from \"./periods/week-period\";\nimport {DayPeriod} from \"./periods/day-period\";\nimport {LargestPeriod} from \"./periods/largest-period\";\nimport {VsanHealthUtil} from \"@util/vsan-health-util\";\nimport {ShowHideState} from \"@directive/show-hide/show-hide.directive\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {VsanHealthOverviewData} from \"@generated/vsan-health-overview-data\";\n\n@Component({\n   templateUrl: \"historical-test-details.html\",\n   styleUrls: [\"historical-test-details.scss\"],\n   selector: \"vsan-historical-test-details\",\n})\nexport class HistoricalTestDetailsComponent {\n\n   private readonly GROUPING_ELEMENTS_COUNT: number = 4;\n   // display the periods if are at least this count. Otherwise try to drill up / down. The reason is we don't want\n   // to have grouping of 1 period.\n   private readonly MINIMUM_PERIODS_TO_DISPLAY: number = 2;\n   private readonly FEW_INSTANCES_COUNT_THRESHOLD: number = 3;\n\n   // these statuses may be in each group - green, yellow, red\n   private readonly NEUTRAL_HEALTH_STATUSES: VsanHealthStatus[] = [VsanHealthStatus.unknown, VsanHealthStatus.info];\n\n   rootPeriod: BasePeriod;\n   private _instances: VsanTestInstanceDetails[];\n   selectedInstance: VsanTestInstanceDetails;\n\n   private _selectedPeriod: BasePeriod;\n\n   set selectedPeriod(value: BasePeriod) {\n      this._selectedPeriod = value;\n      if (!this._selectedPeriod || !this._selectedPeriod.testInstances) {\n         this.instancesByStatus = [];\n         return;\n      }\n      this.instancesByStatus = this.getInstancesByStatus(this._selectedPeriod.testInstances);\n   }\n\n   get selectedPeriod(): BasePeriod {\n      return this._selectedPeriod;\n   }\n\n   instancesByStatus: VsanTestInstancesGroup[] = [];\n\n   @Input()\n   overviewData: VsanHealthOverviewData;\n\n   @Input()\n   selectedInstanceTimestamp: number;\n\n   @Input()\n   isOverviewCorrelationsDisplayed: boolean = false;\n\n   @Input()\n   set instances(values: VsanTestInstanceDetails[]) {\n      this._instances = values;\n      this.rootPeriod = null;\n      if (!VsanUiUtils.isEmpty(values)) {\n         this.rootPeriod = this.calculateRootPeriod(values[0].timestamp, values[values.length - 1].timestamp);\n         values.forEach(instance => this.rootPeriod.propagateTestInstance(instance));\n      }\n\n      if (this.selectedInstanceTimestamp) {\n         this.preselectInstance(this.selectedInstanceTimestamp);\n      } else {\n         this.selectedPeriod = this.getPeriodToDrillDown(this.rootPeriod);\n         this.selectPeriodLatestInstance(this.selectedPeriod);\n      }\n   }\n\n   private preselectInstance(timestamp: number): void {\n      if (!this.rootPeriod) {\n         return;\n      }\n\n      if (VsanUiUtils.isEmpty(this.rootPeriod.childPeriods)) {\n         this.selectedPeriod = this.getPeriodToDrillDown(this.rootPeriod);\n         this.selectInstance(this.selectedInstanceTimestamp);\n         this.expandPreselectedInstanceGroup(timestamp);\n         return;\n      }\n\n      const periods: BasePeriod[] = [].concat(...this.rootPeriod.childPeriods);\n      while (periods.length > 0) {\n         const current: BasePeriod = periods.pop();\n         if (!(current instanceof DayPeriod)) {\n            periods.concat(...current.childPeriods);\n            continue;\n         }\n         if (current.hasTestInstance(timestamp)) {\n            this.selectedPeriod = current;\n            this.expandPreselectedInstanceGroup(timestamp);\n            this.selectInstance(timestamp);\n            break;\n         }\n      }\n   }\n\n   private expandPreselectedInstanceGroup(timestamp: number): void {\n      const instancesGroup: VsanTestInstancesGroup = this.instancesByStatus.find(instance =>\n            instance?.instances?.find(details => details?.timestamp === timestamp));\n      if (instancesGroup) {\n         instancesGroup.defaultExpandableGroupState = ShowHideState.SHOWN;\n      }\n   }\n\n   @Output()\n   onInstanceSelect: EventEmitter<number> = new EventEmitter<number>();\n\n   getOverviewLabel(selectedInstance: VsanTestInstanceDetails): string {\n      const instanceDate: string = VsanHealthUtil.formatInstanceTimestamp(selectedInstance?.timestamp);\n      if (this.isOverviewCorrelationsDisplayed) {\n         return VsanUiUtils.getString(\"vsan.health.historical.details.correlations.overview\", instanceDate);\n      }\n\n      return VsanUiUtils.getString(\"vsan.health.historical.details.instance.overview\", instanceDate,\n            VsanHealthUtil.getVsanHealthStatusText(selectedInstance?.status));\n   }\n\n   private calculateRootPeriod(firstTimestamp: number, lastTimestamp: number): BasePeriod {\n      // root depends on timestamp of included instances\n      // 1. if instances are for more than 7 days, the grouping should be by weeks. Root of week is LargestPeriod.\n      if ((lastTimestamp - firstTimestamp) / VsanDateTimeUtils.DAY_IN_MILLISECONDS >= VsanDateTimeUtils.DAYS_IN_WEEK) {\n         return new LargestPeriod();\n      }\n      // 2. if instances are for more 24 hours, the grouping should be by days. Root is WeekPeriod.\n      if ((lastTimestamp - firstTimestamp) / VsanDateTimeUtils.HOUR_IN_MILLISECONDS > VsanDateTimeUtils.HOURS_IN_DAY) {\n         return new WeekPeriod();\n      }\n      // 3. if instances are for less than 24 hours, there should be no grouping. Root is DayPeriod.\n      return new DayPeriod();\n   }\n\n   getPeriodToDrillDown(period: BasePeriod): BasePeriod {\n      if (!period) {\n         return null;\n      }\n      if (!VsanUiUtils.isEmpty(period.testInstances)) {\n         return period;\n      }\n      if (VsanUiUtils.isEmpty(period.childPeriods)) {\n         return null;\n      }\n      if (period.childPeriods.length >= this.MINIMUM_PERIODS_TO_DISPLAY) {\n         return period;\n      }\n      return this.getPeriodToDrillDown(period.childPeriods[0]);\n   }\n\n   getPeriodToDrillUp(period: BasePeriod): BasePeriod {\n      const parentPeriod: BasePeriod = period.parentPeriod;\n      if (!parentPeriod) {\n         return null;\n      }\n\n      if (parentPeriod.childPeriods.length >= this.MINIMUM_PERIODS_TO_DISPLAY) {\n         return parentPeriod;\n      }\n      return this.getPeriodToDrillUp(parentPeriod);\n   }\n\n   drillDown(period: BasePeriod): void {\n      this.selectedPeriod = this.getPeriodToDrillDown(period);\n      this.instancesByStatus = this.getInstancesByStatus(this.selectedPeriod.testInstances);\n      this.selectPeriodLatestInstance(this.selectedPeriod);\n   }\n\n   drillUp(): void {\n      const parentPeriod: BasePeriod = this.getPeriodToDrillUp(this.selectedPeriod);\n      if (parentPeriod) {\n         this.selectedPeriod = parentPeriod;\n         this.selectPeriodLatestInstance(this.selectedPeriod);\n      }\n   }\n\n   private getInstancesByStatus(instances: VsanTestInstanceDetails[]): VsanTestInstancesGroup[] {\n      const result: VsanTestInstancesGroup[] = [];\n      if (VsanUiUtils.isEmpty(instances)) {\n         return result;\n      }\n\n      // add first empty group\n      result.push(new VsanTestInstancesGroup());\n\n      const instancesLeft: VsanTestInstanceDetails[] = instances.slice(0, instances.length);\n      while (instancesLeft.length > 0) {\n         const previousGroup: VsanTestInstancesGroup = result[result.length - 1];\n         const count: number = this.findCountOfFirstWithSameStatus(instancesLeft);\n         if (count < this.GROUPING_ELEMENTS_COUNT) {\n            // just add instances to the previous group\n            previousGroup.instances = previousGroup.instances.concat(instancesLeft.splice(0, count));\n            continue;\n         }\n         // should have expandable group:\n         // 1. add first of instances to the previous group (start wrapper of the expandable group)\n         previousGroup.instances.push(instancesLeft.splice(0, 1)[0]);\n         // 2. create new group with all but first and last instance (expandable group)\n         result.push(new VsanTestInstancesGroup(instancesLeft.splice(0, count - 2), true));\n         // 3. create new group with the last element (end wrapper of the expandable group)\n         result.push(new VsanTestInstancesGroup(instancesLeft.splice(0, 1)));\n      }\n\n      return result;\n   }\n\n   private findCountOfFirstWithSameStatus(instances: VsanTestInstanceDetails[]): number {\n      if (VsanUiUtils.isEmpty(instances)) {\n         return 0;\n      }\n\n      const status: VsanHealthStatus = instances[0].status;\n      for (let i: number = 1; i < instances.length; i++) {\n         if (status !== instances[i].status) {\n            return i;\n         }\n      }\n      // all instances are with same status\n      return instances.length;\n   }\n\n   selectInstance(timestamp: number): void {\n      this.selectedInstance = this.findInstanceByTimestamp(timestamp);\n      this.onInstanceSelect.emit(this.selectedInstance ? this.selectedInstance.timestamp : null);\n   }\n\n   private selectPeriodLatestInstance(period: BasePeriod): void {\n      if (!period || VsanUiUtils.isEmpty(this.selectedPeriod.testInstances)) {\n         this.selectInstance(null);\n         return;\n      }\n      const latestPeriodInstance: VsanTestInstanceDetails = period.testInstances[period.testInstances.length - 1];\n      this.selectInstance(latestPeriodInstance.timestamp);\n   }\n\n   private findInstanceByTimestamp(timestamp: number): VsanTestInstanceDetails {\n      if (!timestamp || !this.selectedPeriod || !this.selectedPeriod.testInstances) {\n         return null;\n      }\n      return this.selectedPeriod.testInstances.find(instance => instance.timestamp === timestamp);\n   }\n\n   isInstanceTitleVisible(timespamp: number): boolean {\n      if (VsanUiUtils.isEmpty(this.selectedPeriod.testInstances)) {\n         return false;\n      }\n      // show for fist and last instance\n      if (timespamp === this.selectedPeriod.testInstances[0].timestamp) {\n         return true;\n      }\n      if (timespamp === this.selectedPeriod.testInstances[this.selectedPeriod.testInstances.length - 1].timestamp) {\n         return true;\n      }\n      return false;\n   }\n\n   getGroupState(group: VsanTestInstancesGroup): ShowHideState {\n      if (!this.hasStatusSwitches()) {\n         return ShowHideState.DISABLED;\n      }\n      return group.isExpandable ? group.defaultExpandableGroupState : ShowHideState.DISABLED;\n   }\n\n   private hasStatusSwitches(): boolean {\n      if (!this.selectedPeriod || VsanUiUtils.isEmpty(this.selectedPeriod.testInstances)) {\n         return false;\n      }\n      const firstInstanceStatus: VsanHealthStatus = this.selectedPeriod.testInstances[0].status;\n      return this.selectedPeriod.testInstances.some(instance => instance.status !== firstInstanceStatus);\n   }\n\n   getGroupStatus(group: VsanTestInstancesGroup): VsanHealthStatus {\n      if (!group || VsanUiUtils.isEmpty(group.instances)) {\n         return null;\n      }\n      return group.instances[0].status;\n   }\n\n   getGroupPeriod(group: VsanTestInstancesGroup): string {\n      if (!group || VsanUiUtils.isEmpty(group.instances)) {\n         return null;\n      }\n      return `${group.instances[0].timestamp}-${group.instances[group.instances.length - 1].timestamp}`;\n   }\n\n   hasFewInstances(): boolean {\n      return this.selectedPeriod.propagatedInstancesCount <= this.FEW_INSTANCES_COUNT_THRESHOLD;\n   }\n}\n\nexport class VsanTestInstancesGroup {\n   constructor(public instances: VsanTestInstanceDetails[] = [], public isExpandable: boolean = false,\n         public defaultExpandableGroupState: ShowHideState = ShowHideState.HIDDEN) {\n   }\n}","/** Copyright 2020-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Directive, ElementRef, EmbeddedViewRef, Input, OnInit, TemplateRef, ViewContainerRef} from \"@angular/core\";\nimport {Logger} from \"@util/logger\";\nimport {ReferenceWatcher} from \"@util/reference-watcher\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\n\n/**\n * Applied on container it gives option to hide / show its content.\n *    - The trigger DOM elements for the actions are provided as parameters (i.e., TemplateRef).\n *    - The initial state of container is defined by the value of {@code state}.\n */\n@Directive({\n   selector: \"[vsan-show-hide]\",\n   providers: [ReferenceWatcher],\n})\nexport class ShowHideDirective implements OnInit {\n\n   private readonly DISPLAY_HIDE: string = \"none\";\n   private readonly DISPLAY_SHOW: string = \"flex\";\n\n   _state: ShowHideState = ShowHideState.HIDDEN;\n\n   @Input(\"vsan-show-hide\")\n   set state(value: ShowHideState) {\n      if (value == null || value === this._state) {\n         return;\n      }\n      this._state = value;\n      this.refWatcher.setTimeout(() => this.onStateChanged(), 0);\n   }\n\n   get state(): ShowHideState {\n      return this._state;\n   }\n\n   @Input()\n   showTriggerElement: TemplateRef<HTMLElement>;\n\n   @Input()\n   hideTriggerElement: TemplateRef<HTMLElement>;\n\n   constructor(private viewContainerRef: ViewContainerRef,  private el: ElementRef<HTMLElement>,\n         private refWatcher: ReferenceWatcher) {}\n\n   ngOnInit(): void {\n      this.onStateChanged();\n   }\n\n   private onStateChanged() {\n      // schedule setup of the element\n      switch (this.state) {\n         case ShowHideState.DISABLED:\n            this.disableFunctionality();\n            break;\n         case ShowHideState.SHOWN:\n            this.showElement();\n            break;\n         case ShowHideState.HIDDEN:\n            this.hideElement();\n            break;\n      }\n   }\n\n   private disableFunctionality() {\n      this.viewContainerRef.clear();\n      this.el.nativeElement.style.display = this.DISPLAY_SHOW;\n   }\n\n   showElement: ClickFunction = ($event) => {\n      // if click function is called because mouse click parameter will be set, otherwise will be null\n      // set focus only if user clicks the trigger element, do not at inilialization\n      this.prepareTrigger(this.hideTriggerElement, this.hideElement, !!$event);\n      this.el.nativeElement.style.display = this.DISPLAY_SHOW;\n   };\n\n   hideElement: ClickFunction = ($event) => {\n      // if click function is called because mouse click parameter will be set, otherwise will be null\n      // set focus only if user clicks the trigger element, do not at inilialization\n      this.prepareTrigger(this.showTriggerElement, this.showElement, !!$event);\n      this.el.nativeElement.style.display = this.DISPLAY_HIDE;\n   };\n\n   private prepareTrigger(triggerElement: TemplateRef<HTMLElement>, clickFunction: ClickFunction,\n         setFocus: boolean): void {\n      this.viewContainerRef.clear();\n      const triggerElementViewRef: EmbeddedViewRef<HTMLElement> = this.viewContainerRef.createEmbeddedView(triggerElement);\n      const triggerNode: HTMLElement = this.findTriggerDomNode(triggerElementViewRef);\n      if (!triggerNode) {\n         Logger.error(\"Not able to find trigger DOM element in showTriggerElement or hideTriggerElement inputs.\");\n         return;\n      }\n      triggerNode.style.cursor = \"pointer\";\n      triggerNode.onclick = clickFunction;\n\n      if (setFocus) {\n         const focusableElement: HTMLElement = this.getFirstFocusableElement(triggerNode);\n         if (focusableElement) {\n            focusableElement.focus();\n         }\n      }\n   }\n\n   /**\n    * Finds the first node element from the provided template\n    */\n   private findTriggerDomNode(triggerElementViewRef: EmbeddedViewRef<HTMLElement>): HTMLElement {\n      if (!triggerElementViewRef || VsanUiUtils.isEmpty(triggerElementViewRef.rootNodes)) {\n         return null;\n      }\n      return triggerElementViewRef.rootNodes.find(this.isElementNode);\n   }\n\n   private isElementNode(node: Node): boolean {\n      return node && node.nodeType === Node.ELEMENT_NODE;\n   }\n\n   private getFirstFocusableElement(element: HTMLElement): HTMLElement {\n      if (this.isElementFocusable(element)) {\n         return element;\n      }\n      if (element.children) {\n         // tslint:disable-next-line:prefer-for-of\n         for (let i: number = 0; i < element.children.length; i++) {\n            const child: HTMLElement = this.getFirstFocusableElement(element.children.item(i) as HTMLElement);\n            if (this.isElementFocusable(child)) {\n               return child;\n            }\n         }\n      }\n      return null;\n   }\n\n   private isElementFocusable(element: HTMLElement): boolean {\n      return element.tabIndex > -1;\n   }\n}\n\n// Specific type which satisfies HTMLElement#onclick expectation\ntype ClickFunction = ($event?) => any;\n\nexport enum ShowHideState {\n   SHOWN, HIDDEN, DISABLED,\n}","/* Copyright 2017-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, EventEmitter, Input, OnInit, Output, QueryList, ViewChildren,} from \"@angular/core\";\nimport {ClrTabLink} from \"@clr/angular\";\nimport {IllustratedMessageType} from \"@component/illustrated-message/illustrated-message.component\";\nimport {HealthAction} from \"@generated/health-action\";\nimport {PermissionService} from \"@generated/permission-service\";\nimport {Privileges} from \"@generated/privileges\";\nimport {VsanCapabilityProvider} from \"@generated/vsan-capability-provider\";\nimport {VsanHealthMutationProvider} from \"@generated/vsan-health-mutation-provider\";\nimport {VsanHealthPropertyProvider} from \"@generated/vsan-health-property-provider\";\nimport {VsanTestData} from \"@generated/vsan-test-data\";\nimport {VsanTestInstanceDetails} from \"@generated/vsan-test-instance-details\";\nimport {VsanTestTable} from \"@generated/vsan-test-table\";\nimport {CapacityManagementContext} from \"@navigation/context/capacity-management-context\";\nimport {ClusterComputeResource} from \"@service/client/dataservice/data-service-property\";\nimport {DataServiceClient} from \"@service/client/dataservice/data-service.service\";\nimport {ManagedObject, ManagedObjectUtils} from \"@service/managed-object\";\nimport {ServicesContext} from \"@service/navigation/context/services-context\";\nimport {NavigationService, PlatformExtension} from \"@service/navigation/navigation.service\";\nimport {TaskMonitorService} from \"@service/task-monitor-service\";\nimport {EventCategory, TelemetryService} from \"@service/telemetry.service\";\nimport {Logger} from \"@util/logger\";\nimport {ModalBuilder} from \"@util/modal-builder\";\nimport {ReferenceWatcher} from \"@util/reference-watcher\";\nimport {VsanDialogUtil} from \"@util/vsan-dialog-util\";\nimport {VsanHealthUtil} from \"@util/vsan-health-util\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {VsanRoutes} from \"../../../../vsan-routes\";\nimport {SilentHealthActionContext} from \"../../action/mark-silent-health-action.component\";\nimport {RestoreHealthActionContext} from \"../../action/model/restore-health-action-context.data\";\nimport {RestoreHealthSettings} from \"../../action/model/restore-health-settings.data\";\nimport {RemediateActions} from \"../../action/remediate-action-constants\";\nimport {RemediateClusterConfigContextData} from \"../../action/remediate-cluster-config-context.data\";\nimport {HealthRetestEventData} from \"../../model/health-retest-event.data\";\nimport {HealthSilentChangeData} from \"../../model/health-silent-change.data\";\nimport {HealthTestNavParams} from \"../../model/health-test-nav-params\";\nimport {HealthLazyDataLoadingUtil} from \"../health-lazy-data-loading-util\";\n\n@Component({\n   templateUrl: \"details-card.html\",\n   styleUrls: [\"details-card.scss\"],\n   selector: \"vsan-health-details-card\",\n   providers: [ReferenceWatcher],\n})\nexport class DetailsCardComponent implements OnInit {\n   VsanUiUtils: typeof VsanUiUtils = VsanUiUtils;\n   VsanHealthUtil: typeof VsanHealthUtil = VsanHealthUtil;\n   IllustratedMessageType: typeof IllustratedMessageType = IllustratedMessageType;\n\n   readonly GOTO_HELP_EVENT: string = \"goto_help\";\n   readonly EVENT_PARAM_NAME: string = \"helpId\";\n\n   readonly TEST_ID_SKYLINE: string = \"com.vmware.vsan.health.test.advisor\";\n   private readonly HELP_ID_HCL_UPTODATE: string = \"com.vmware.vsan.health.test.hcldbuptodate\";\n   private readonly HELP_ID_RELEASE_CATALOG_UPTODATE: string = \"com.vmware.vsan.health.test.releasecataloguptodate\";\n   private readonly HELP_ID_DISK_BALANCE: string = \"com.vmware.vsan.health.test.diskbalance\";\n   private readonly HELP_ID_DISK_SPACE: string = \"com.vmware.vsan.health.test.diskspace\";\n   private readonly HELP_ID_SELECT_VCG_DEVICE_MODELS: string = \"com.vmware.vsan.health.test.nvmeidentifiable\";\n\n   @ViewChildren(ClrTabLink)\n   private tabs: QueryList<ClrTabLink>;\n\n   @Output()\n   onRetest: EventEmitter<HealthRetestEventData> = new EventEmitter<HealthRetestEventData>();\n\n   @Output()\n   onSilentChange: EventEmitter<HealthSilentChangeData> = new EventEmitter<HealthSilentChangeData>();\n\n   @Output()\n   onHealthTestNavigation: EventEmitter<HealthTestNavParams> = new EventEmitter<HealthTestNavParams>();\n\n   @Output()\n   onError: EventEmitter<string> = new EventEmitter<string>();\n\n   alertMessage: string;\n\n   clusterRef: ManagedObject = ManagedObject.contextObject;\n\n   @Input()\n   isVirtualObjectsLinkShown: boolean;\n\n   @Input()\n   isDiskSpaceActionShown: boolean = true;\n\n   @Input()\n   hasEditPermissions: boolean = false;\n\n   @Input()\n   showTestName: boolean = true;\n\n   @Input()\n   isSilentCheck: boolean = false;\n\n   @Input()\n   isOnlineTest: boolean = false;\n\n   @Input()\n   silentCheckSupported: boolean = false;\n\n   @Input()\n   isVsphereHealth: boolean;\n\n   @Input()\n   isHistoricalTestData: boolean;\n\n   @Input()\n   preselectTimestamp: number;\n   loadingTestInstances: boolean;\n   loadingDetails: boolean;\n\n   @Input()\n   showHealthCorrelationMessages: boolean;\n\n   clusterName: string;\n\n   hasLoadTestError: boolean;\n   hasLoadInstanceDetailsError: boolean;\n\n   private hasStoragePermissions: boolean = false;\n\n   private isPurgeInaccessibleVmSwapObjectsSupported: boolean;\n   private isCapacityCustomizableThresholdsSupported: boolean;\n\n   constructor(private healthMutationProvider: VsanHealthMutationProvider,\n         private healthProvider: VsanHealthPropertyProvider,\n         private taskSvc: TaskMonitorService,\n         private capabilityProvider: VsanCapabilityProvider,\n         private permissionService: PermissionService,\n         private navigationService: NavigationService,\n         private telemetryService: TelemetryService,\n         private dataService: DataServiceClient,\n         private refWatcher: ReferenceWatcher) {\n   }\n\n   async ngOnInit(): Promise<void> {\n      this.loadDataHealthCapabilityAndPermissions();\n      this.clusterName = await this.dataService.getProperty(ClusterComputeResource.name, ManagedObject.contextObject);\n   }\n\n   private loadDataHealthCapabilityAndPermissions(): void {\n      // We only check IsPurgeInaccessibleVmSwapObjectsSupported at cluster level health check\n      // because this action only exists at cluster level.\n      if (ManagedObjectUtils.isCluster(ManagedObject.uid(this.clusterRef))) {\n         Promise.all([\n            this.capabilityProvider.getIsPurgeInaccessibleVmSwapObjectsSupported(this.clusterRef),\n            this.capabilityProvider.getIsCapacityCustomizableThresholdsSupported(this.clusterRef),\n         ]).then((results: [boolean, boolean]) => {\n            this.isPurgeInaccessibleVmSwapObjectsSupported = results[0];\n            this.isCapacityCustomizableThresholdsSupported = results[1];\n         }).catch((err) => {\n            this.alertMessage = err;\n            this.isPurgeInaccessibleVmSwapObjectsSupported = false;\n            this.isCapacityCustomizableThresholdsSupported = false;\n         });\n      }\n      this.permissionService.hasPermissions(this.clusterRef, [Privileges.CONFIG_STORAGE()])\n            .then(result => this.hasStoragePermissions = result)\n            .catch((err) => {\n               this.alertMessage = err;\n               this.hasStoragePermissions = false;\n            });\n   }\n\n   isActionSupported = (actionId: string): boolean => {\n      return RemediateActions[actionId] !== undefined;\n   };\n\n   private _data: VsanTestData;\n\n   @Input()\n   set data(value: VsanTestData) {\n      this.loadingTestInstances = true;\n      this.selectedInstance = null;\n      this.hasLoadTestError = false;\n      this._data = value;\n      if (value) {\n         HealthLazyDataLoadingUtil.load(this._data)\n               .then(() => {\n                  this.resetTabFocus();\n                  if (!this.isHistoricalTestData) {\n                     this.initializeSelectedInstanceDetails();\n                  }\n                  this.loadingTestInstances = false;\n               })\n               .catch(error => {\n                  Logger.error(error);\n                  this._data.instances = [];\n                  this.hasLoadTestError = true;\n               })\n               .finally(() => this.loadingTestInstances = false);\n      }\n   }\n\n   get data(): VsanTestData {\n      return this._data;\n   }\n\n   selectedInstance: VsanTestInstanceDetails;\n\n   resetTabFocus(): void {\n      if (this.tabs != null && this.tabs.length > 0) {\n         // Reset initial state of first focused element due to correct re-initialization of clr-tabs functionality\n         this.tabs.first.el.nativeElement.click();\n         // Move focus to the first tab\n         this.tabs.first.el.nativeElement.focus();\n      }\n   }\n\n   getTabTitle = (table: VsanTestTable): string => {\n      return !!table.title ? table.title : VsanUiUtils.getString(\"vsan.monitor.health.result\");\n   };\n\n   gotoAskMore(): void {\n      this.telemetryService.logAction(EventCategory.VSAN_HEALTH,\n            this.GOTO_HELP_EVENT,\n            this.EVENT_PARAM_NAME,\n            this.data.helpId);\n      this.navigationService.askVMware(this.data && this.data.helpId);\n   }\n\n   navigateToServicesPage = () => {\n      const context: ServicesContext = {advancedOptionsExpanded: true};\n      this.navigationService.navigateTo(PlatformExtension.CLUSTER_SERVICES, null, context);\n   };\n\n   get testMessages(): any[] {\n      return this.isHistoricalTestData ? this.selectedInstance?.messages : this.data?.messages;\n   }\n\n   openCapacityManagementDialog(): void {\n      const context: CapacityManagementContext = {\n         clusterName: this.clusterName,\n         // Having the old disk version/old format objects means that\n         // the vSAN cluster is currently not in a very usable state which is not relevant in this case\n         showOldFormatInfo: false,\n      };\n      new ModalBuilder(VsanRoutes.CAPACITY_MANAGEMENT)\n            .setSize(VsanDialogUtil.CAPACITY_MANAGEMENT_DIALOG.width, VsanDialogUtil.CAPACITY_MANAGEMENT_DIALOG.height)\n            .open(context)\n            .then((taskRef: ManagedObject) => this.refreshWhenTaskDone(taskRef));\n   }\n\n   navigateToVumClusterSettings = () => {\n      this.navigationService.navigateTo(PlatformExtension.CLUSTER_UPDATES, this.clusterRef);\n   };\n\n   navigateToHealthTest(testId: string): void {\n      const params: HealthTestNavParams = new HealthTestNavParams(testId);\n      if (this.isHistoricalTestData && this.selectedInstance) {\n         params.timestamp = this.selectedInstance.timestamp;\n      }\n      this.onHealthTestNavigation.emit(params);\n   }\n\n   isActionDisabled = (action?: HealthAction): boolean => {\n      if (!this.hasEditPermissions) {\n         return true;\n      }\n      return action ? !action.enabled : false;\n   };\n\n   actionTitle = (action?: HealthAction): string => {\n      if (!this.hasEditPermissions) {\n         return VsanUiUtils.getString(\"vsan.common.nopermissions\");\n      }\n      return action ? action.description : \"\";\n   };\n\n   displayDataDrivenActions(isInfoTab: boolean): boolean {\n      const hasSupportedActions: boolean = this.data && this.data.actions && this.data.actions.length > 0 &&\n            this.data.actions.some(action => {\n               return this.isActionSupported(action.actionId);\n            });\n      return hasSupportedActions && this.areTestActionsVisibleInTab(isInfoTab);\n   }\n\n   displayInfoTab(isInfoTab: boolean): boolean {\n      return isInfoTab && this.data.testId !== this.TEST_ID_SKYLINE;\n   }\n\n   displayHclDbUpToDateAction(isInfoTab: boolean): boolean {\n      const isHclDbUpToDateAction: boolean = this.data.helpId === this.HELP_ID_HCL_UPTODATE;\n      return isHclDbUpToDateAction && this.areTestActionsVisibleInTab(isInfoTab);\n   }\n\n   displayReleaseCatalogUpToDateAction(isInfoTab: boolean): boolean {\n      const isReleaseCatalogUpToDateAction: boolean = this.data.helpId === this.HELP_ID_RELEASE_CATALOG_UPTODATE;\n      return isReleaseCatalogUpToDateAction && this.areTestActionsVisibleInTab(isInfoTab);\n   }\n\n   displayDiskBalanceAction(isInfoTab: boolean): boolean {\n      const isDiskBalanceAction: boolean = this.data.helpId === this.HELP_ID_DISK_BALANCE;\n      return isDiskBalanceAction && this.areTestActionsVisibleInTab(isInfoTab);\n   }\n\n   displayDiskSpaceAction(isInfoTab: boolean): boolean {\n      const isDiskSpaceAction: boolean = this.data.helpId === this.HELP_ID_DISK_SPACE;\n      return isDiskSpaceAction &&\n            this.isDiskSpaceActionShown &&\n            this.areTestActionsVisibleInTab(isInfoTab) &&\n            this.isCapacityCustomizableThresholdsSupported;\n   }\n\n   displayDeviceModelSelectAction(isInfoTab: boolean): boolean {\n      const isDeviceModelSelectAction: boolean = this.data.helpId === this.HELP_ID_SELECT_VCG_DEVICE_MODELS;\n      return isDeviceModelSelectAction && this.areTestActionsVisibleInTab(isInfoTab);\n   }\n\n   private areTestActionsVisibleInTab(isInfoTab: boolean): boolean {\n      // is not info tab OR is info tab without details\n      return !this.isHistoricalTestData &&\n            (!isInfoTab || (isInfoTab && !this.selectedInstance.details));\n   }\n\n   isDataDrivenActionDisabled = (action: HealthAction): boolean => {\n      if (this.isPurgeInaccessibleVmSwapObjectsAction(action.actionId)) {\n         return !action.enabled || !this.hasEditPermissions || !this.hasStoragePermissions;\n      }\n      return !action.enabled || !this.hasEditPermissions;\n   };\n\n   private isPurgeInaccessibleVmSwapObjectsAction = (actionId: string): boolean => {\n      return RemediateActions[actionId] === RemediateActions.PurgeInaccessSwapObjs;\n   };\n\n   /**\n    * The action may 1: open a dialog 2: send request directly 3: navigate to another page\n    * For #1&2 we will use eventemitter in the callback so parent component can take further\n    * actions(refresh the page, reload some data, etc)\n    */\n   remediateBtnClick = (actionId: string): void => {\n      switch (RemediateActions[actionId]) {\n         case RemediateActions.RemediateDedup:\n            const params: RemediateClusterConfigContextData = {\n               isDedupAction: true,\n               title: VsanUiUtils.getString(\"vsan.monitor.health.disk.format.remediate.title\"),\n            };\n            new ModalBuilder(\"healthActions/remediateCluster\")\n                  .setSize(700, 300)\n                  .open(params)\n                  .then(this.refreshWhenTaskDone);\n            break;\n         case RemediateActions.RemediateFileService:\n            new ModalBuilder(\"healthActions/remediateCluster\")\n                  .setSize(700, 350)\n                  .open({\n                     title: VsanUiUtils.getString(\"vsan.monitor.health.remediate.fileservice.config.dlg.title\"),\n                  } as RemediateClusterConfigContextData)\n                  .then(this.refreshWhenTaskDone);\n            break;\n         case RemediateActions.RemediateClusterConfig:\n            new ModalBuilder(\"healthActions/remediateCluster\")\n                  .setSize(700, 350)\n                  .open({\n                     title: VsanUiUtils.getString(\"vsan.monitor.health.remediate.cluster.config.dlg.title\"),\n                  } as RemediateClusterConfigContextData)\n                  .then(this.refreshWhenTaskDone);\n            break;\n         case RemediateActions.RepairClusterObjectsAction:\n            this.healthMutationProvider.repairClusterObjectsImmediate(this.clusterRef)\n                  .then(this.refreshWhenTaskDone)\n                  .catch(() => {\n                     this.alertMessage = VsanUiUtils.getString(\"vsan.monitor.cluster.repair.error\");\n                  });\n            break;\n         case RemediateActions.PurgeInaccessSwapObjs:\n            if (this.isPurgeInaccessibleVmSwapObjectsSupported) {\n               new ModalBuilder(\"healthActions/purgeInaccessibleSwapObjs\")\n                     .setSize(550, 220)\n                     .open()\n                     .then(this.refreshWhenTaskDone);\n            } else {\n               new ModalBuilder(\"healthActions/notSupportedAction\")\n                     .setSize(550, 180)\n                     .open();\n            }\n            break;\n         case RemediateActions.RelayoutVsanObjects:\n            new ModalBuilder(\"healthActions/relayoutVsanObjects\")\n                  .setSize(600, 250)\n                  .open()\n                  .then(this.refreshWhenTaskDone);\n            break;\n         case RemediateActions.UpgradeVsanDiskFormat:\n            new ModalBuilder(\"upgrade/upgrade\")\n                  .setSize(700, 350)\n                  .open()\n                  .then(this.refreshWhenTaskDone);\n            break;\n         case RemediateActions.LoginVumIsoDepot:\n            new ModalBuilder(\"healthActions/loginVumDepot\")\n                  .setSize(550, 290)\n                  .open();\n            break;\n         case RemediateActions.EnablePerformanceServiceAction:\n            new ModalBuilder(VsanRoutes.PERFORMANCE_CONFIG)\n                  .setSize(VsanDialogUtil.PERF_SVC_EDIT_ACTION_DIALOG.width,\n                        VsanDialogUtil.PERF_SVC_EDIT_ACTION_DIALOG.height)\n                  .open({\n                     clusterRef: this.clusterRef,\n                  })\n                  .then(this.refreshWhenTaskDone);\n            break;\n         case RemediateActions.EnableCeip:\n            this.navigationService.navigateWithoutContextObject(PlatformExtension.CEIP_VIEW);\n            break;\n         case RemediateActions.ClusterUpgrade:\n            this.navigateToVumClusterSettings();\n            break;\n         case RemediateActions.RemediateFileServiceImbalance:\n            new ModalBuilder(\"healthActions/remediateFileServiceImbalance\")\n                  .setSize(700, 400)\n                  .open({\n                     clusterRef: this.clusterRef,\n                  })\n                  .then(this.refreshWhenTaskDone);\n            break;\n         default:\n            Logger.warn(\"Unknown actionId: \" + actionId);\n      }\n   };\n\n   instanceSelected(instanceTimestamp: number): void {\n      this.initializeSelectedInstanceDetails(instanceTimestamp);\n   }\n\n   private initializeSelectedInstanceDetails(instanceTimestamp?: number): void {\n      this.hasLoadInstanceDetailsError = false;\n      if (!this.data || !this.data.instances || !this.data.instances.length) {\n         this.selectedInstance = null;\n         return;\n      }\n\n      this.loadingDetails = true;\n\n      const result: VsanTestInstanceDetails = instanceTimestamp ?\n            this.data.instances.find(instance => instance.timestamp === instanceTimestamp) :\n            null;\n      if (result || this.data.instances.length) {\n         // do not force to select latest instance in historical mode. The historical-test-details component\n         // will do this if needed\n         this.selectedInstance = result || this.isHistoricalTestData ?\n               result : this.data.instances[this.data.instances.length - 1];\n      }\n      HealthLazyDataLoadingUtil.load(this.selectedInstance)\n            .then(() => this.refWatcher.setTimeout(() => {\n               this.resetTabFocus();\n            }, 0))\n            .catch(e => {\n               Logger.error(e);\n               this.selectedInstance.details = [];\n               this.hasLoadInstanceDetailsError = true;\n            })\n            .finally(() => this.loadingDetails = false);\n   }\n\n   private refreshWhenTaskDone = (task: ManagedObject): void => {\n      if (!task) {\n         return;\n      }\n      this.taskSvc.getAwaitResult(task).then(() => this.triggerRetestWithoutOnlineHealth());\n   };\n\n   isSilnceCheckAvailable(): boolean {\n      return !this.isHistoricalTestData && this.silentCheckSupported && this.data &&\n            this.data.testId !== this.TEST_ID_SKYLINE;\n   }\n\n   switchSilentCheck(): void {\n      if (this.isSilentCheck) {\n         this.restoreAlert();\n      } else {\n         this.silenceAlert();\n      }\n   }\n\n   silenceAlert(): void {\n      const context: SilentHealthActionContext = {\n         testId: this.data.silenceTestId,\n         isVsphereHealth: this.isVsphereHealth,\n      };\n      new ModalBuilder(\"healthActions/markSilent\")\n            .setSize(550, 300)\n            .open(context)\n            .then((silent: boolean): void => {\n               if (silent) {\n                  this.isSilentCheck = silent;\n                  this.onSilentChange.emit(new HealthSilentChangeData(true));\n               }\n            });\n   }\n\n   restoreAlert(): void {\n      const context: RestoreHealthActionContext = {\n         testId: this.data.testId,\n         isOnlineTest: this.isOnlineTest,\n      };\n      new ModalBuilder(\"healthActions/restoreAlert\")\n            .setSize(VsanDialogUtil.HEALTH_RESTORE_ACTION_DIALOG.width,\n                  VsanDialogUtil.HEALTH_RESTORE_ACTION_DIALOG.height)\n            .open(context)\n            .then((settings: RestoreHealthSettings): void => {\n               this.healthProvider.setSilentChecks(this.clusterRef, this.isVsphereHealth, [],\n                     [this.data.silenceTestId])\n                     .then(() => {\n                        this.isSilentCheck = false;\n                        this.onSilentChange.emit(new HealthSilentChangeData(false, settings));\n                     })\n                     .catch(() => {\n                        this.onError.emit(VsanUiUtils.getString(\"vsan.monitor.health.silent.error\"));\n                     });\n            });\n   }\n\n   getSilenceRestoreAlertTitle(): string {\n      return this.isSilentCheck ?\n            VsanUiUtils.getString(\"vsan.monitor.health.silent.restore.action.label\") :\n            VsanUiUtils.getString(\"vsan.monitor.health.silent.action.label\");\n   }\n\n   setErrorMessage(error: string): void {\n      this.alertMessage = error;\n   }\n\n   isTestNameShown(): boolean {\n      return this.showTestName && this.data && (!!this.data.testName || !!this.data.testDescription);\n   }\n\n   displayVirtualObjectNavigationLink(): boolean {\n      return this.isVirtualObjectsLinkShown && !this.isHistoricalTestData;\n   }\n\n   triggerRetestWithoutOnlineHealth(): void {\n      this.onRetest.emit(new HealthRetestEventData(false));\n   }\n}\n","/* Copyright 2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, EventEmitter, Input, Output} from \"@angular/core\";\nimport {AlertActionLink} from \"@component/validation/alert-action-link\";\nimport {VsanBasicTestData} from \"@generated/vsan-basic-test-data\";\nimport {HealthTestMessage} from \"@generated/health-test-message\";\nimport {CausedIssueHealthTestMessage} from \"@generated/caused-issue-health-test-message\";\nimport {CoreIssueHealthTestMessage} from \"@generated/core-issue-health-test-message\";\nimport {HealthMessageType} from \"@generated/health-message-type\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\n\n@Component({\n   templateUrl: \"health-messages.html\",\n   styleUrls: [\"health-messages.scss\"],\n   selector: \"vsan-health-messages\",\n})\nexport class HealthMessagesComponent {\n   @Input()\n   messages: HealthTestMessage[];\n\n   @Input()\n   showHealthCorrelationMessages: boolean;\n\n   @Output()\n   onTestNavigation: EventEmitter<string> = new EventEmitter<string>();\n\n   get basicMessages(): HealthTestMessage[] {\n      return this.messages\n            .filter(m => !this.isCausedIssueBannerMessage(m) && !this.isCoreIssueBannerMessage(m));\n   }\n\n   get causedIssueMessages(): CausedIssueHealthTestMessage[] {\n      return this.messages.filter(m =>\n               this.verifyMessage(m) &&\n               this.isCausedIssueBannerMessage(m) &&\n               this.hasTestData(m.coreIssueTest))\n            .map(m => m as CausedIssueHealthTestMessage);\n   }\n\n   get coreIssueMessages(): CoreIssueHealthTestMessage[] {\n      return this.messages.filter(m =>\n               this.verifyMessage(m) &&\n               this.isCoreIssueBannerMessage(m) &&\n               !VsanUiUtils.isEmpty(m?.causedIssuesTests) &&\n               !m.causedIssuesTests.some(t => !this.hasTestData(t)))\n            .map(m => m as CoreIssueHealthTestMessage);\n   }\n\n   private verifyMessage(message: HealthTestMessage): boolean {\n      return !!message?.alertType && !!message?.message;\n   }\n\n   private hasTestData(basicTestData: VsanBasicTestData): boolean {\n      return !!basicTestData?.testId && !!basicTestData?.testName;\n   }\n\n   getAlertType(messageType: HealthMessageType): string {\n      switch (messageType) {\n         case HealthMessageType.INFO:\n            return \"info\";\n         case HealthMessageType.WARNING:\n            return \"warning\";\n         default:\n            return \"\";\n      }\n   }\n\n   getActionLinks(healthMessage: CoreIssueHealthTestMessage | CausedIssueHealthTestMessage): AlertActionLink[] {\n      const links: AlertActionLink[] = [];\n      if (this.isCausedIssueBannerMessage(healthMessage)) {\n         const banner: CausedIssueHealthTestMessage = healthMessage as unknown as CausedIssueHealthTestMessage;\n         const link: AlertActionLink = {\n            label: banner.coreIssueTest.testName,\n            action: () => this.onTestNavigation.emit(banner.coreIssueTest.testId),\n         };\n         links.push(link);\n      } else if (this.isCoreIssueBannerMessage(healthMessage)) {\n         const banner: CoreIssueHealthTestMessage = healthMessage as unknown as CoreIssueHealthTestMessage;\n         banner.causedIssuesTests.forEach((causedIssuesTest: VsanBasicTestData) => {\n            const link: AlertActionLink = {\n               label: causedIssuesTest.testName,\n               action: () => this.onTestNavigation.emit(causedIssuesTest.testId),\n            };\n            links.push(link);\n         });\n      }\n      return links;\n   }\n\n   isCausedIssueBannerMessage(healthMessage: any): healthMessage is CausedIssueHealthTestMessage {\n      return (healthMessage as CausedIssueHealthTestMessage).coreIssueTest != null;\n   }\n\n   isCoreIssueBannerMessage(healthMessage: any): healthMessage is CoreIssueHealthTestMessage {\n      return (healthMessage as CoreIssueHealthTestMessage).causedIssuesTests != null;\n   }\n}\n"]}