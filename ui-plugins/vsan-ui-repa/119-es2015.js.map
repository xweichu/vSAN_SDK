{"version":3,"sources":["./src/app/vsan/common/directive/clr-button-group/clr-button-base.directive.ts","./src/app/vsan/cluster/summary/health/cluster-summary-health.component.ts","./src/app/vsan/common/service/flow/error-handler.decorator.ts","./src/app/vsan/common/service/flow/loader.decorator.ts","./src/app/vsan/common/service/navigation/model/knowledge-base-id.ts","./src/app/vsan/cluster/summary/cluster-summary.module.ts","./src/app/vsan/common/util/vsan-dialog-util.ts","./src/app/vsan/cluster/summary/health/cluster-summary-health.html","./src/app/vsan/common/service/flow/loading-flow-wrapper.data.ts","./src/app/vsan/cluster/summary/performance/cluster-summary-performance.component.ts","./src/app/vsan/cluster/summary/summary-portlet.component.ts","./src/app/vsan/cluster/summary/summary-portlet.html","./src/app/vsan/common/directive/external-link/external-link.directive.ts","./src/app/vsan/cluster/summary/performance/cluster-summary-performance.html"],"names":[],"mappings":";;;;;;;;;;AAGA;AAAA;AAAA;;;GAGG;AACI,MAAe,sBAAsB;IAEzC,YAAoB,SAAoB;QAApB,cAAS,GAAT,SAAS,CAAW;QACrC,IAAI,CAAC,SAAS,EAAE;YACb,OAAO;SACT;QACD,8GAA8G;QAC9G,2GAA2G;QAC3G,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE;YAClB,SAAS,CAAC,IAAI,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE,CAAC;SAC5C;QAED,MAAM,eAAe,GAAqB,SAA6B,CAAC;QACxE,eAAe,CAAC,UAAU,GAAG,eAAe,CAAC,UAAU,IAAI,EAAE,CAAC;QAC9D,eAAe,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACzC,CAAC;CAMH;;;;;;;;;;;;;;;;;;;;;;;;;;AC5BD,kFAAkF;AAC5B;AAC4C;AACnC;AAC3B;AACQ;AACU;AAGS;AAEqB;AAS7E;UAAM,6BAA6B;QAWvC,YAAoB,cAA0C,EAChD,iBAAoC,EACpC,UAA4B,EAC5B,cAAiC;YAH3B,mBAAc,GAAd,cAAc,CAA4B;YAChD,sBAAiB,GAAjB,iBAAiB,CAAmB;YACpC,eAAU,GAAV,UAAU,CAAkB;YAC5B,mBAAc,GAAd,cAAc,CAAmB;YAZ/C,YAAO,GAAY,KAAK,CAAC;YAEzB,iBAAY,GAAqB,IAAI,CAAC;YAEtC,gBAAW,GAAW,EAAE,CAAC;YAGzB,wBAAmB,GAAyB,IAAI,0DAAY,EAAU,CAAC;YAwB/D,qBAAgB,GAAG,CAAC,MAAsB,EAAQ,EAAE;gBACzD,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;gBACrB,IAAI,CAAC,MAAM,IAAI,CAAC,MAAM,CAAC,SAAS,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,MAAM,EAAE;oBAC3D,IAAI,CAAC,aAAa,EAAE,CAAC;oBACrB,mDAAM,CAAC,IAAI,CAAC,8CAA8C,CAAC,CAAC;oBAC5D,OAAO;iBACT;gBACD,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;YACtC,CAAC,CAAC;YAEF;;;;eAIG;YACK,gBAAW,GAAG,CAAC,SAAyB,EAAE,EAAE;gBACjD,IAAI,QAAQ,GAAW,CAAC,CAAC;gBACzB,IAAI,WAAW,GAAW,CAAC,CAAC;gBAC5B,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE;oBAClB,MAAM,QAAQ,GAAmB,IAAI,CAAC,QAAQ,CAAC;oBAC/C,QAAQ,CAAC,GAAG,CAAC,OAAO,CAAC,EAAE;wBACpB,IAAI,OAAO,CAAC,MAAM,KAAK,8EAAgB,CAAC,GAAG,EAAE;4BAC1C,QAAQ,IAAI,CAAC,CAAC;yBAChB;wBACD,IAAI,OAAO,CAAC,MAAM,KAAK,8EAAgB,CAAC,MAAM,EAAE;4BAC7C,WAAW,IAAI,CAAC,CAAC;yBACnB;oBACJ,CAAC,CAAC,CAAC;gBACN,CAAC,CAAC,CAAC;gBAEH,IAAI,QAAQ,GAAG,CAAC,EAAE;oBACf,IAAI,CAAC,YAAY,GAAG,8EAAgB,CAAC,GAAG,CAAC;oBACzC,IAAI,CAAC,WAAW,GAAG,QAAQ,KAAK,CAAC;wBAC3B,CAAC,CAAC,2DAAW,CAAC,SAAS,CAAC,mDAAmD,EAAE,QAAQ,CAAC;wBACtF,CAAC,CAAC,2DAAW,CAAC,SAAS,CAAC,iDAAiD,EAAE,QAAQ,CAAC,CAAC;oBAC3F,IAAI,CAAC,aAAa,EAAE,CAAC;oBACrB,OAAO;iBACT;gBACD,IAAI,WAAW,GAAG,CAAC,EAAE;oBAClB,IAAI,CAAC,YAAY,GAAG,8EAAgB,CAAC,MAAM,CAAC;oBAC5C,IAAI,CAAC,WAAW,GAAG,WAAW,KAAK,CAAC;wBAC9B,CAAC,CAAC,2DAAW,CAAC,SAAS,CAAC,qDAAqD,EAAE,WAAW,CAAC;wBAC3F,CAAC,CAAC,2DAAW,CAAC,SAAS,CAAC,mDAAmD,EAAE,WAAW,CAAC,CAAC;oBAChG,IAAI,CAAC,aAAa,EAAE,CAAC;oBACrB,OAAO;iBACT;gBACD,IAAI,CAAC,YAAY,GAAG,8EAAgB,CAAC,KAAK,CAAC;gBAC3C,IAAI,CAAC,WAAW,GAAG,2DAAW,CAAC,SAAS,CAAC,sCAAsC,CAAC,CAAC;gBACjF,IAAI,CAAC,aAAa,EAAE,CAAC;YACxB,CAAC,CAAC;YAEM,YAAO,GAAG,CAAC,KAAU,EAAQ,EAAE;gBACpC,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,2DAAW,CAAC,SAAS,CAAC,4CAA4C,CAAC,CAAC,CAAC;gBACnG,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;gBACrB,mDAAM,CAAC,GAAG,CAAC,kDAAkD,GAAG,KAAK,CAAC,CAAC;gBACvE,IAAI,CAAC,aAAa,EAAE,CAAC;YACxB,CAAC,CAAC;YAEF,mBAAc,GAAG,GAAS,EAAE;gBACzB,IAAI,CAAC,iBAAiB,CAAC,UAAU,CAAC,gFAAiB,CAAC,cAAc,EAAE,qEAAa,CAAC,aAAa,CAAC,CAAC;YACpG,CAAC,CAAC;YA9EC,IAAI,CAAC,UAAU,CAAC,8BAA8B,CAAC,6BAA6B,CAAC,SAAS,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;QAC5G,CAAC;QAED,QAAQ;YACL,IAAI,CAAC,KAAK,EAAE,CAAC;QAChB,CAAC;QAGD,KAAK;YACF,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;YACpB,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;YACzB,IAAI,CAAC,WAAW,GAAG,EAAE,CAAC;YACtB,IAAI,CAAC,cAAc,CAAC,6BAA6B,CAAC,qEAAa,CAAC,aAAa,CAAC;iBACvE,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC;iBAC3B,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;YAC3B,IAAI,CAAC,aAAa,EAAE,CAAC;QACxB,CAAC;QAgED,IAAI,WAAW;YACZ,OAAO,qEAAc,CAAC,4BAA4B,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;QACzE,CAAC;QAED,IAAI,WAAW;YACZ,OAAO,qEAAc,CAAC,4BAA4B,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;QACzE,CAAC;QAED;;WAEG;QACK,aAAa;YAClB,IAAI,CAAE,IAAI,CAAC,cAA0B,CAAC,SAAS,EAAE;gBAC9C,IAAI,CAAC,cAAc,CAAC,aAAa,EAAE,CAAC;aACtC;QACJ,CAAC;;IAvFD;QADC,8EAAc;;;;8DASd;;;;;;;;;;;;;;;;ACnDJ;AAAA;AAAA;AAAA,6EAA6E;AAEF;AAE3E;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAmCG;AACI,SAAS,YAAY,CAAC,KAA8B;IACxD,KAAK,GAAG,KAAK,IAAI,EAAE,CAAC;IACpB,OAAO,CAAC,WAAgB,EAAE,YAAoB,EAAE,UAA8B,EAAQ,EAAE;QACrF,CAAC,IAAI,0FAAkB,CAAC,WAAW,EAAE,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,YAAY,GAAG,UAAU,CAAC,KAAK,CAAC;IACrF,CAAC,CAAC;AACL,CAAC;;;;;;;;;;;;;;AC7CD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kFAAkF;AACL;AACF;AACmC;AAClE;AACa;AAEzD;;;;;;;;;GASG;AACI,SAAS,MAAM,CAAC,MAAqB;IACzC,0FAA0F;IAC1F,MAAM,GAAG,MAAM,IAAI,EAAE,CAAC;IACtB,OAAO,CAAC,WAAgB,EAAE,YAAoB,EAAE,UAA8B,EAAQ,EAAE;QACrF,iFAAiF;QACjF,MAAM,GAAG,GAAW,2DAAU,CAAC,YAAY,CAAC,WAAW,CAAC,CAAC;QACzD,MAAM,UAAU,GAAW,MAAM,CAAC,IAAI,CAAC;QACvC,MAAM,UAAU,GAAQ,UAAU,CAAC,KAAK,CAAC;QAEzC,UAAU,CAAC,KAAK,GAAG;YAChB,MAAM,kBAAkB,GAAuB,IAAI,0FAAkB,CAAC,IAAI,EAAE,UAAU,CAAC,CAAC;YACxF,OAAO,CAAC,IAAI,8EAAe,CAAC,UAAU,CAAC,CAAC;iBACjC,UAAU,CAAC,GAAG,EAAE;gBACd,kBAAkB,CAAC,KAAK,GAAG,SAAS,CAAC;gBACrC,kBAAkB,CAAC,cAAc,EAAE,CAAC;gBACpC,qGAA4B,CAAC,MAAM,CAC7B,MAAM,CAAC,gBAAgB,IAAI,MAAM,CAAC,SAAS,EAC3C,MAAM,CAAC,aAAa,EAAE,gFAAO,CAAC,OAAO,CAAC,CAAC;YAChD,CAAC,CAAC;iBACD,WAAW,CAAC,GAAG,EAAE;gBACf,qGAA4B,CAAC,MAAM,CAAC,MAAM,CAAC,SAAS,EAAE,MAAM,CAAC,aAAa,EAAE,gFAAO,CAAC,MAAM,CAAC,CAAC;YAC/F,CAAC,CAAC;iBACD,OAAO,CAAC,CAAC,EAAO,EAAE,EAAE;gBAClB,YAAY,CAAC,kBAAkB,EAAE,GAAG,EAAE,EAAE,CAAC,CAAC;gBAC1C,MAAM,OAAO,GAAY,aAAa,CAAC,kBAAkB,EAAE,MAAM,CAAC,CAAC;gBACnE,IAAI,CAAC,OAAO,EAAE;oBACX,EAAE,GAAG,kBAAkB,CAAC,kBAAkB,EAAE,EAAE,CAAC,CAAC;iBAClD;gBACD,OAAO,IAAI,2EAAY,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;YACxC,CAAC,CAAC;iBACD,OAAO,CAAC,GAAG,EAAE;gBACX,kBAAkB,CAAC,cAAc,EAAE,CAAC;YACvC,CAAC,CAAC;iBACD,MAAM,CAAC,kBAAkB,CAAC,aAAa,EAAE,SAAS,CAAC,CAAC;QAC9D,CAAC,CAAC;IACL,CAAC,CAAC;AACL,CAAC;AAsCD;;;;;GAKG;AACH,SAAS,YAAY,CAAC,OAA2B,EAAE,GAAW,EAAE,EAAO;IACpE,+BAA+B;IAC/B,6DAAY,CAAC,KAAK,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;IAE5B,2EAA2E;IAC3E,OAAO,CAAC,KAAK,GAAG,EAAE,CAAC;AACtB,CAAC;AAED;;GAEG;AACH,SAAS,kBAAkB,CAAC,OAA2B,EAAE,EAAO;IAC7D,MAAM,OAAO,GAAQ,OAAO,CAAC,YAAY,CAAC;IAC1C,OAAO,CAAC,CAAC,OAAO;QACV,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,aAAa,EAAE,EAAE,CAAC;QACzC,CAAC,CAAC,IAAI,CAAC;AAChB,CAAC;AAED;;;;GAIG;AACH,SAAS,aAAa,CAAC,OAA2B,EAAE,MAAoB;IACrE,OAAO,CAAC,OAAO,CAAC,YAAY,IAAI,CAAC,OAAO,CAAC,kBAAkB;WAClD,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC;AAC7B,CAAC;;;;;;;;;;;;;;AC3HD;AAAA;AAAA,6EAA6E;AAC7E;;GAEG;AACH,IAAY,eAMX,iBAND,WAAY,eAAe;IACxB,yCAAsB;IACtB,8CAA2B;IAC3B,sCAAmB;IACnB,sDAAmC;IACnC,4CAAyB;WALhB,eAAe;CAM1B,KAN0B,CAM1B;;;;;;;;;;;;;;ACHD;AAAA;AAAA;AAA2E;AAO3E,MAAM,MAAM,GAAW;IACpB;QACG,IAAI,EAAE,EAAE;QACR,SAAS,EAAE,yFAA8B;KAC3C;CACH,CAAC;AAmBK,MAAM,oBAAoB;CAChC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACvCD;AAAA;AAAA;AAAA,kFAAkF;AAC3E;UAAM,cAAc;;IACR,yCAA0B,GAAyB;QAChE,KAAK,EAAE,GAAG;QACV,MAAM,EAAE,GAAG;KACb,CAAC;IAEc,mCAAoB,GAAyB;QAC1D,KAAK,EAAE,GAAG;QACV,MAAM,EAAE,GAAG;KACb,CAAC;IAEc,oCAAqB,GAAyB;QAC3D,KAAK,EAAE,IAAI;QACX,MAAM,EAAE,GAAG;KACb,CAAC;IAEc,2CAA4B,GAAyB;QAClE,KAAK,EAAE,GAAG;QACV,MAAM,EAAE,GAAG;KACb,CAAC;IAEc,sDAAuC,GAAyB;QAC7E,KAAK,EAAE,GAAG;QACV,MAAM,EAAE,GAAG;KACb,CAAC;IAEc,2CAA4B,GAAyB;QAClE,KAAK,EAAE,GAAG;QACV,MAAM,EAAE,GAAG;KACb,CAAC;IAEF,+CAA+C;IAC/B,sCAAuB,GAAyB;QAC7D,KAAK,EAAE,GAAG;QACV,MAAM,EAAE,GAAG;KACb,CAAC;IAEc,+CAAgC,GAAyB;QACtE,KAAK,EAAE,GAAG;QACV,MAAM,EAAE,GAAG;KACb,CAAC;IAEc,+CAAgC,GAAyB;QACtE,KAAK,EAAE,IAAI;QACX,MAAM,EAAE,GAAG;KACb,CAAC;IAEc,yDAA0C,GAAyB;QAChF,KAAK,EAAE,IAAI;QACX,MAAM,EAAE,GAAG;KACb,CAAC;IAEc,0CAA2B,GAAyB;QACjE,KAAK,EAAE,GAAG;QACV,MAAM,EAAE,GAAG;KACb,CAAC;IAEc,4CAA6B,GAAyB;QACnE,KAAK,EAAE,GAAG;QACV,MAAM,EAAE,GAAG;KACb,CAAC;IAEc,wCAAyB,GAAyB;QAC/D,KAAK,EAAE,IAAI;QACX,MAAM,EAAE,GAAG;KACb,CAAC;IAEc,4CAA6B,GAAyB;QACnE,KAAK,EAAE,GAAG;QACV,MAAM,EAAE,GAAG;KACb,CAAC;;;AAGE,MAAM,oBAAoB;CAGhC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;mHCxEK,wHAAmE,wFAChE,qlBAGwE,IAAW,mFACnF,8HAAM,gFAAe,MAAO,gFAC/B,yDAHa,mBAA0B,cAC1B,uDAA6D,eAHvE,YAGwE,EAD9D,SAA0B,EAC1B,SAA6D,GACjE,wDAAe;mHAExB,wHAA8B,wFAC3B,iKAAqC,KAAO,mFAC5C,8HAAM,4IAA8B,IAAO,gFAC9C,iCADS,sMAA8B;;8MAd7C,4IAAqB,kFAClB,unBAAqE,wJAErE,IAAQ,6EACR,mJAAuB,qFACpB,6ZAAmE,IAMpD,gFACf,6ZAA8B,IAGf,6EAClB,MAAM,6EACN;YAAA;YAAA,YAG8B;YAA3B;;gCAA0B;;YAH7B;QAAA,aAG8B,2JAE9B,IAAI,0EACP,MAAM,0EACN,mDAvBG,YAAqE,GAIpD,8DAAoD,eAAlE,aAAmE,EAArD,SAAoD,GAOpD,mBAAe,UAA7B,aAA8B,EAAhB,SAAe,2BAXhC,0GAAqE,6NAErE,GAiB8B,gOAE9B;AAAA;;;;;;;;;;;;;;;;;ACtBH;AAAA;AAAA,6EAA6E;AAE7E;;;;;;;;;;;;;;;;;;GAkBG;AACI;UAAM,kBAAkB;QAS5B,YAAoB,cAAmB,EACzB,UAAkB;YADZ,mBAAc,GAAd,cAAc,CAAK;YACzB,eAAU,GAAV,UAAU,CAAQ;YAC7B,IAAI,CAAC,UAAU,GAAG,UAAU,IAAI,kBAAkB,CAAC,YAAY,CAAC;YAEhE,uBAAuB;YACvB,IAAI,CAAC,cAAc,CAAC,kBAAkB,CAAC,YAAY,CAAC,CAAC;YACrD,IAAI,CAAC,cAAc,CAAC,kBAAkB,CAAC,yBAAyB,CAAC,CAAC;YAClE,IAAI,CAAC,cAAc,CAAC,kBAAkB,CAAC,gCAAgC,CAAC,CAAC;YACzE,IAAI,CAAC,cAAc,CAAC,kBAAkB,CAAC,kBAAkB,CAAC,CAAC;QAC9D,CAAC;QAEO,cAAc,CAAC,cAAsB;YAC1C,4EAA4E;YAC5E,uEAAuE;YACvE,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,EAAE;gBACtC,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,GAAG,EAAE,CAAC;aAC1C;QACJ,CAAC;QAED;;WAEG;QACH,IAAI,aAAa;YACd,OAAO,IAAI,CAAC,cAAc,CAAC;QAC9B,CAAC;QAED;;WAEG;QACH,IAAI,KAAK;YACN,OAAO,IAAI,CAAC,aAAa,CAAC,kBAAkB,CAAC,YAAY,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QAC/E,CAAC;QAED;;WAEG;QACH,IAAI,KAAK,CAAC,GAAQ;YACf,IAAI,CAAC,aAAa,CAAC,kBAAkB,CAAC,YAAY,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,GAAG,GAAG,CAAC;QAC9E,CAAC;QAED;;WAEG;QACH,IAAY,UAAU;YACnB,OAAO,IAAI,CAAC,aAAa,CAAC,kBAAkB,CAAC,kBAAkB,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QACrF,CAAC;QAED;;WAEG;QACH,IAAI,SAAS;YACV,OAAO,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC;QAC5B,CAAC;QAED;;WAEG;QACH,cAAc;YACX,2DAA2D;YAC3D,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE;gBACnB,IAAI,CAAC,aAAa,CAAC,kBAAkB,CAAC,kBAAkB,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;aACjF;YACD,IAAI,CAAC,aAAa,CAAC,kBAAkB,CAAC,kBAAkB,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;QACnF,CAAC;QAED;;WAEG;QACH,cAAc;YACX,IAAI,CAAC,aAAa,CAAC,kBAAkB,CAAC,kBAAkB,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;QACnF,CAAC;QAED,IAAI,YAAY;YACb,OAAO,IAAI,CAAC,aAAa,CAAC,kBAAkB,CAAC,yBAAyB,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QAC5F,CAAC;QAED;;WAEG;QACH,IAAI,YAAY,CAAC,YAAiB;YAC/B,IAAI,CAAC,CAAC,IAAI,CAAC,YAAY,EAAE;gBACtB,MAAM,IAAI,KAAK,CAAC,4BAA4B,IAAI,CAAC,UAAU,uBAAuB,CAAC,CAAC;aACtF;YACD,IAAI,CAAC,aAAa,CAAC,kBAAkB,CAAC,yBAAyB,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,GAAG,YAAY,CAAC;QACpG,CAAC;QAED,IAAI,kBAAkB;YACnB,OAAO,IAAI,CAAC,aAAa,CAAC,kBAAkB,CAAC,gCAAgC,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QACnG,CAAC;QAED,IAAI,kBAAkB,CAAC,MAAW;YAC/B,IAAI,CAAC,CAAC,IAAI,CAAC,kBAAkB,EAAE;gBAC5B,MAAM,IAAI,KAAK,CAAC,4BAA4B,IAAI,CAAC,UAAU,uBAAuB,CAAC,CAAC;aACtF;YACD,IAAI,CAAC,aAAa,CAAC,kBAAkB,CAAC,gCAAgC,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,GAAG,MAAM,CAAC;QACrG,CAAC;;IAtGuB,+BAAY,GAAW,QAAQ,CAAC;IAChC,4CAAyB,GAAW,mBAAmB,CAAC;IACxD,mDAAgC,GAAW,yBAAyB,CAAC;IACrE,qCAAkB,GAAW,gBAAgB,CAAC;IAE9C,+BAAY,GAAW,gBAAgB,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC5BnE,kFAAkF;AACZ;AACP;AACT;AACsB;AACG;AAEJ;AACS;AAET;AACX;AAEpB;AAEgB;AACM;AAS3D;UAAM,kCAAkC;QAa5C,YAAoB,iBAAoC,EAC1C,cAAyC,EACzC,UAA4B;YAFtB,sBAAiB,GAAjB,iBAAiB,CAAmB;YAC1C,mBAAc,GAAd,cAAc,CAA2B;YACzC,eAAU,GAAV,UAAU,CAAkB;YAP1C,aAAQ,GAAsB,EAAE,CAAC;YAGjC,6BAAwB,GAAyB,IAAI,0DAAY,EAAU,CAAC;YA+DpE,gBAAW,GAAG,CAAC,KAAa,EAAE,EAAE;gBACrC,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;gBACrB,IAAI,CAAC,wBAAwB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YAC7C,CAAC,CAAC;YAEF,mBAAc,GAAG,GAAG,EAAE;gBACnB,IAAI,CAAC,IAAI,CAAC,kBAAkB,IAAI,CAAC,IAAI,CAAC,kBAAkB,EAAE;oBACvD,IAAI,CAAC,iBAAiB,CAAC,UAAU,CAAC,gFAAiB,CAAC,gBAAgB,CAAC,CAAC;iBACxE;qBAAM;oBACJ,IAAI,CAAC,iBAAiB,CAAC,UAAU,CAAC,gFAAiB,CAAC,mBAAmB,CAAC,CAAC;iBAC3E;YACJ,CAAC,CAAC;YAEF,6BAAwB,GAAG,CAAC,IAAgC,EAAE,EAAE;gBAC7D,MAAM,GAAG,GAAW,4EAAiB,CAAC,kBAAkB,CAAC,IAAI,IAAI,EAAE,CAAC,OAAO,EAAE,CAAC,CAAC;gBAC/E,qGAAqG;gBACrG,MAAM,SAAS,GAAW,GAAG,GAAG,4EAAiB,CAAC,oBAAoB,GAAG,0FAAsB,CAAC,cAAc,EAAE,CAAC;gBACjH,MAAM,eAAe,GAAsB,kFAAiB,CAAC,OAAO,CAAC,MAAM,CACrE,EAAE,EAAE,SAAS,EAAE,GAAG,EAAE,IAAI,CAAC,CAAC;gBAChC,MAAM,KAAK,GAA2B;oBACnC,iBAAiB,EAAE,IAAI,CAAC,SAAS;oBACjC,eAAe,EAAE,IAAI,CAAC,OAAO;oBAC7B,eAAe,EAAE,eAAe;iBAClC,CAAC;gBAEF,IAAI,CAAC,iBAAiB,CAAC,UAAU,CAAC,gFAAiB,CAAC,mBAAmB,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC;YACzF,CAAC,CAAC;YApFC,IAAI,CAAC,UAAU,CAAC,8BAA8B,CAAC,kCAAkC,CAAC,SAAS,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;QACjH,CAAC;QAED,QAAQ;YACL,IAAI,CAAC,KAAK,EAAE,CAAC;QAChB,CAAC;QAGD,KAAK;YACF,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;YACpB,IAAI,CAAC,cAAc,CAAC,yBAAyB,CAAC,qEAAa,CAAC,aAAa,CAAC;iBACnE,IAAI,CAAC,CAAC,MAA8B,EAAE,EAAE;gBACtC,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;gBACrB,IAAI,CAAC,kBAAkB,GAAG,MAAM,CAAC,aAAa,CAAC;gBAC/C,IAAI,CAAC,kBAAkB,GAAG,MAAM,CAAC,oBAAoB,CAAC;gBACtD,IAAI,CAAC,0BAA0B,GAAG,MAAM,CAAC,0BAA0B,CAAC;gBAEpE,IAAI,CAAC,8BAA8B,EAAE,CAAC;gBACtC,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC,0BAA0B,CAAC,CAAC;oBACpD,4DAAW,CAAC,SAAS,CAAC,sEAAsE,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;gBAE3G,IAAI,IAAI,CAAC,kBAAkB,EAAE;oBAC1B,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC;iBAChC;YACJ,CAAC,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QACpC,CAAC;QAED,8BAA8B;YAC3B,IAAI,CAAC,IAAI,CAAC,kBAAkB,EAAE;gBAC3B,IAAI,CAAC,2BAA2B,GAAG,4DAAW,CAAC,SAAS,CAAC,iDAAiD,CAAC,CAAC;aAC9G;iBAAM,IAAI,CAAC,IAAI,CAAC,kBAAkB,EAAE;gBAClC,IAAI,CAAC,2BAA2B,GAAG,4DAAW,CAAC,SAAS,CAAC,wDAAwD,CAAC,CAAC;aACrH;QACJ,CAAC;QAEO,gBAAgB,CAAC,QAAgC;YACtD,IAAI,CAAC,YAAY,GAAG,CAAC,CAAC,QAAQ,CAAC,UAAU,CAAC;YAC1C,yEAAyE;YACzE,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE;gBACrB,OAAO;aACT;YAED,IAAI,MAAM,GAAgB,EAAE,CAAC;YAC7B,IAAI,QAAQ,IAAI,QAAQ,CAAC,sBAAsB,IAAI,QAAQ,CAAC,sBAAsB,CAAC,MAAM,EAAE;gBACxF,MAAM,GAAG,QAAQ,CAAC,sBAAsB,CAAC,MAAM;qBACxC,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC,MAAM,CAAC,MAAM,CAAC,+EAAU,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;qBAC7D,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC,0FAAa,CAAC,kBAAkB,CAAC,KAAK,CAAC,CAAC,CAAC;aAC/D;YAED,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;YACnB,MAAM,UAAU,GAAkB,CAAC,IAAI,2FAAW,CAAC,QAAQ,CAAC,UAAU,EAAE,MAAM,CAAC,CAAC,CAAC;YACjF,UAAU,CAAC,OAAO,CAAC,CAAC,KAAkB,EAAE,EAAE;gBACvC,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;oBAC1B,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,8FAAe,CAAC,KAAK,CAAC,WAAW,EAAE,KAAK,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC,CAAC;gBACpF,CAAC,CAAC,CAAC;YACN,CAAC,CAAC,CAAC;QACN,CAAC;;IAhDD;QADC,8EAAc;;;;mEAkBd;;;;;;;;;;;;;;;;;;;;;;;;;;;AChE2D;AAET;AACiB;AAEe;AAErC;AACK;AACa;AAO5D;UAAM,8BAA8B;QAexC,YAAoB,mBAAwC,EAAU,iBAAoC;YAAtF,wBAAmB,GAAnB,mBAAmB,CAAqB;YAAU,sBAAiB,GAAjB,iBAAiB,CAAmB;YAZ1G,6BAAwB,GAAY,KAAK,CAAC;YAE1C,kBAAa,GAAa,EAAE,CAAC;YAE7B;;eAEG;YACH,sBAAiB,GAAY,KAAK,CAAC;YAGnC,wBAAmB,GAAwB,qGAAmB,CAAC,+BAA+B,CAAC;QAEc,CAAC;QAExG,QAAQ;;gBACX,IAAI,CAAC,UAAU,GAAG,qEAAa,CAAC,aAAa,CAAC;gBAC9C,MAAM,OAAO,CAAC,GAAG,CAAC;oBACZ,IAAI,CAAC,6BAA6B,EAAE;oBACpC,IAAI,CAAC,KAAK,EAAE;iBACjB,CAAC,CAAC;gBACH,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC;YACjC,CAAC;SAAA;QAGK,KAAK;;gBACR,IAAI,CAAC,aAAa,GAAG,EAAE,CAAC;gBACxB,IAAI,CAAC,mBAAmB,GAAG,sFAAsB,CAAC,mBAAmB,CAAC,MAAM,IAAI,CAAC,sBAAsB,EAAE,CAAC,CAAC;YAC9G,CAAC;SAAA;QAEK,6BAA6B;;gBAChC,IAAI,CAAC,wBAAwB,GAAG,MAAM,IAAI,CAAC,iBAAiB,CAAC,cAAc,CACrE,IAAI,CAAC,UAAU,EAAE,CAAC,gEAAU,CAAC,YAAY,EAAE,CAAC,CAAC,CAAC;YACvD,CAAC;SAAA;QAED;;;WAGG;QAEG,sBAAsB;;gBACzB,OAAO,IAAI,CAAC,mBAAmB,CAAC,aAAa,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;YAClE,CAAC;SAAA;QAED;;WAEG;QAEH,gBAAgB,CAAC,KAAa;YAC3B,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAClC,CAAC;;IAzBD;QADC,8EAAc;;;;+DAId;IAYD;QADC,6EAAM,EAAE;;;;gFAGR;IAMD;QADC,0FAAY,EAAE;;;;0EAGd;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oHCrEJ,kJAAuD,kFACpD,6KAAiD,KAAO,0EAC3D;;mEAEG;YAAA;YAAA,YAA0E;YAA3B;;gCAA0B;;YAAzE;QAAA,qeAA0E,mDAA3B,mBAA0B,gBAAzE,YAA0E,EAA3B,SAA0B;AAAA;;mEAD5E,yHAAiE,kFAC9D,6ZAA0E,IAAkB,6EAC5F,+IAAkB,qFACf,oJAAwB,wFACrB;YAAA;YAAA,YAA0E;YAAnD;;gCAAkD;;YAAzE;QAAA,i/BAA0E,MAAwB,gFACrG,MAAM,gFACN,qJAAwB,wFACrB;YAAA;YAAA,YAA8E;YAAjD;;gCAAgD;;YAA7E;QAAA,oiCAA8E,MAA8B,gFAC/G,MAAM,gFACN,qJAAwB,wFACrB;YAAA;YAAA,YAAwF;YAAtD;;gCAAqD;;YAAvF;QAAA,whCAAwF,MAAmC,gFAC9H,MAAM,6EACT,MAAM,0EACT,mDAZoB,yDAA6B,wBAA9C,YAA0E,EAAzD,SAA6B,GAGxC,aAA0E,GAG1E,aAA8E,GAG9E,aAAwF;AAAA;oHAIjG,kmCAGqE,8EACrE,mDAFuB,mBAA2C,sBAC3C,mBAA6C,2BAF7C,mBAAyB,aADhD,YAGqE,EAD9C,SAA2C,EAC3C,SAA6C,EAF7C,SAAyB;oHAnBkC,0EAClF,6ZAAuD,IAEhD,0EACP,6ZAAiE,IAalD,0EACf,6ZAGqE,IAC7C,4EAExB,mDAvB4B,oBAA0B,oBAAtD,YAAuD,EAA3B,SAA0B,GAGxC,8CAAiD,uBAA/D,YAAiE,EAAnD,SAAiD,GAcxC,6CAAgD,uBAAvE,YAGqE,EAH9C,SAAgD;;;;;;;;;;;;;;;;;ACNvE;AAAA;AAAA;AAAA;AAA4C;AAEiD;AAG7F;;;;;;;;GAQG;AAII,MAAM,qBAAsB,SAAQ,4GAAsB;IAiC9D,YAAoB,EAA2B,EACjC,QAAkC,EAClC,QAAmB,EACnB,iBAAoC;IAC5C,mEAAmE;IACvC,SAAoB;QACnD,KAAK,CAAC,SAAS,CAAC,CAAC;QANA,OAAE,GAAF,EAAE,CAAyB;QACjC,aAAQ,GAAR,QAAQ,CAA0B;QAClC,aAAQ,GAAR,QAAQ,CAAW;QACnB,sBAAiB,GAAjB,iBAAiB,CAAmB;QAnCjC,gCAA2B,GAAW,uBAAuB,CAAC;QAC9D,gCAA2B,GAAW,uBAAuB,CAAC;QAE9D,oBAAe,GAAW,qBAAqB,CAAC;QAChD,0BAAqB,GAAW,OAAO,CAAC;QACxC,wBAAmB,GAAW,eAAe,CAAC;QAC9C,2BAAsB,GAAW,MAAM,CAAC;QACxC,2BAAsB,GAAW,UAAU,CAAC;QAC5C,gCAA2B,GAAW,MAAM,CAAC;QAC7C,iCAA4B,GAAW,MAAM,CAAC;QAC9C,yBAAoB,GAAW,OAAO,CAAC;QACvC,0BAAqB,GAAW,SAAS,CAAC;QAC1C,wBAAmB,GAAW,MAAM,CAAC;QACrC,yBAAoB,GAAW,IAAI,CAAC;QACpC,yBAAoB,GAAW,OAAO,CAAC;QACvC,0BAAqB,GAAW,MAAM,CAAC;QACvC,yBAAoB,GAAW,OAAO,CAAC;QAEvC,WAAM,GAAW,0BAA0B,CAAC;IAqB7D,CAAC;IAED,eAAe;QACZ,MAAM,OAAO,GAAgB,IAAI,CAAC,EAAE,CAAC,aAAa,CAAC;QACnD,kDAAkD;QAClD,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,EAAE;YACnD,8FAA8F;YAC9F,OAAO;SACT;QACD,IAAI,CAAC,mBAAmB,CAAC,OAAO,CAAC,CAAC;IACrC,CAAC;IAED,aAAa,CAAC,SAAoB,EAAE,MAAyB,EAAE,KAAa;QACzE,iGAAiG;QACjG,IAAI,CAAC,mBAAmB,CAAC,MAAM,CAAC,CAAC;IACpC,CAAC;IAEO,mBAAmB,CAAC,OAAoB;QAC7C,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,OAAO,EAAE,IAAI,CAAC,eAAe,CAAC,CAAC;QAEtD,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;QACtB,IAAI,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,EAAE;YACvB,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC;SAC7B;aAAM;YACJ,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;SAC5B;QAED,IAAI,CAAC,2BAA2B,CAAC,OAAO,CAAC,CAAC;IAC7C,CAAC;IAEO,QAAQ,CAAC,OAAoB;QAClC,OAAO,OAAO,YAAY,iBAAiB,CAAC;IAC/C,CAAC;IAEO,MAAM,CAAC,OAAoB;QAChC,OAAO,OAAO,YAAY,iBAAiB,CAAC;IAC/C,CAAC;IAEO,OAAO,CAAC,OAAoB;QACjC,MAAM,IAAI,GAAoB,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,IAAI,CAAC,sBAAsB,CAAC,CAAC;QACvF,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;QACvC,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;QAEzC,MAAM,IAAI,GAAoB,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,IAAI,CAAC,sBAAsB,CAAC,CAAC;QACvF,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,oBAAoB,EAAE,IAAI,CAAC,qBAAqB,CAAC,CAAC;QACzE,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,mBAAmB,EAAE,IAAI,CAAC,oBAAoB,CAAC,CAAC;QACvE,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,oBAAoB,EAAE,IAAI,CAAC,qBAAqB,CAAC,CAAC;QACzE,mDAAmD;QACnD,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,oBAAoB,EAAE,2DAAW,CAAC,SAAS,CAAC,2CAA2C,CAAC,CAAC,CAAC;QACjH,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;IAC5C,CAAC;IAEO,OAAO,CAAC,OAAoB;QACjC,IAAI,IAAI,CAAC,UAAU,EAAE;YAClB,OAAO,IAAI,CAAC,UAAU,CAAC;SACzB;QACD,MAAM,GAAG,GAAW,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,2BAA2B,CAAC,CAAC,CAAC,IAAI,CAAC,2BAA2B,CAAC;QACjH,OAAO,2DAAW,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;IACrC,CAAC;IAEO,YAAY,CAAC,OAAoB;QACtC,MAAM,WAAW,GAAoB,OAA0B,CAAC;QAChE,kFAAkF;QAClF,WAAW,CAAC,IAAI,GAAG,IAAI,CAAC,mBAAmB,CAAC;QAC5C,4BAA4B;QAC5B,WAAW,CAAC,KAAK,CAAC,OAAO,GAAG,aAAa,CAAC;IAC7C,CAAC;IAEO,2BAA2B,CAAC,OAAoB;QACrD,OAAO,CAAC,gBAAgB,CAAC,IAAI,CAAC,qBAAqB,EAAE,GAAG,EAAE;YACvD,IAAI,IAAI,CAAC,MAAM,EAAE;gBACd,IAAI,CAAC,iBAAiB,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;gBAC9C,OAAO;aACT;YACD,IAAI,IAAI,CAAC,SAAS,EAAE;gBACjB,IAAI,CAAC,iBAAiB,CAAC,iBAAiB,CAAC,GAAG,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,SAAS,EAAE,CAAC,CAAC;gBAC5E,OAAO;aACT;YACD,IAAI,IAAI,CAAC,GAAG,EAAE;gBACX,IAAI,CAAC,iBAAiB,CAAC,iBAAiB,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;aACrD;QACJ,CAAC,CAAC,CAAC;IACN,CAAC;IAED,wDAAwD;IAChD,WAAW,CAAC,OAAoB;QACrC,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,OAAO,EAAE,IAAI,CAAC,2BAA2B,EAAE,IAAI,CAAC,4BAA4B,CAAC,CAAC;IAC5G,CAAC;CACH;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;wHCxJK,wHAA8B,wFAC3B,iKAAqC,KAAO,mFAC5C,8HAAM,4IAA8B,IAAO,gFAC9C,iCADS,sMAA8B;wHAEvC,wHAA+E,oOAE/E;wHAWH,wHAAmC,uaAEnC;wHACA,wHAAoC,2aAEpC;;mEAEA,uHAAmD,qFAChD;YAAA;YAAA;YAAA;;gCAQkD;;YADjC;;gCAA2D;;YAP5E;QAAA,y3CAQkD,sFAClD,MAAkB,6EACrB,mDAVoB,kBAAqB,0BAErB,kBAAiC,gCAGjC,kBAAW,gBACX,+BAAwC,EAFxC,qBAA0B,EAH1B,kBAAyB,4BAEzB,qBAAuB,EAKvB,mBAAgC,oBARjD,YAQkD,EARjC,SAAqB,EAErB,SAAiC,EAGjC,SAAW,EACX,SAAwC,EAFxC,SAA0B,EAH1B,SAAyB,EAEzB,SAAuB,EAKvB,SAAgC;AAAA;wHAjBvD,yHAAqD,kFAClD,iaAAmC,IAEpB,6EACf,iaAAoC,IAErB,6EACf,MAA6C,6EAC7C,2eAAmD,IAW7C,0EACT,mDAnBiB,mBAAoB,eAAlC,YAAmC,EAArB,SAAoB,GAGpB,oBAAqB,eAAnC,YAAoC,EAAtB,SAAqB,GAI9B,mBAA6C,WAAlD,aAAmD,EAA9C,SAA6C;;8MA7BrD,4IAAqB,kFAClB,goBAA0E,wJAE1E,IAAQ,6EACR,mJAAuB,qFACpB,kaAA8B,IAGf,gFACf,kaAA+E,IAEhE,6EAClB,MAAM,6EACN;YAAA;YAAA,YAG8B;YAA3B;;gCAA0B;;YAH7B;QAAA,aAG8B,2JAE9B,IAAI,0EACP,MAAM,4EAEN,kaAAqD,IAoBtC,0EACf,mDAzCG,YAA0E,GAIzD,mBAAe,UAA7B,aAA8B,EAAhB,SAAe,GAIf,iEAAgE,uBAA9E,aAA+E,EAAjE,SAAgE,GAYtE,oCAAsC,sBAApD,aAAqD,EAAvC,SAAsC,2BApBjD,0GAA0E,kOAE1E,GAa8B,gOAE9B;AAAA","file":"119-es2015.js","sourcesContent":["/* Copyright 2020 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {ClrButton} from \"@clr/angular\";\n\n/**\n * Use this class as base class for directive, which handles clr-button. It will help to link the rendered button with\n * the clr-button on which the directive is applied.\n */\nexport abstract class ClrButtonBaseDirective {\n\n   constructor(private clrButton: ClrButton) {\n      if (!clrButton) {\n         return;\n      }\n      // name should be set, if not provided in template - generate one. ClrButtom#name is used to generate the name\n      // attribute of the markup button. Later the name is used to match the generated markup with the directive.\n      if (!clrButton.name) {\n         clrButton.name = Math.random().toString();\n      }\n\n      const directiveHolder: DirectiveHolder = (clrButton as DirectiveHolder);\n      directiveHolder.directives = directiveHolder.directives || [];\n      directiveHolder.directives.push(this);\n   }\n\n   /**\n    * This method will be called when the actual html button is rendered.\n    */\n   abstract resolveButton(clrButton: ClrButton, button: HTMLButtonElement, index: number);\n}\n\nexport interface DirectiveHolder extends ClrButton {\n   directives: ClrButtonBaseDirective[];\n}","/* Copyright 2017-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {VsanHealthUtil} from \"@util/vsan-health-util\";\nimport {ChangeDetectorRef, Component, EventEmitter, OnInit, Output, ViewRef} from \"@angular/core\";\nimport {RefreshHandler} from \"@service/global-refresh.service\";\nimport {Logger} from \"@util/logger\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {ManagedObject} from \"@service/managed-object\";\nimport {VsanTestData} from \"@generated/vsan-test-data\";\nimport {VsanHealthData} from \"@generated/vsan-health-data\";\nimport {VsanHealthStatus} from \"@generated/vsan-health-status\";\nimport {VsanHealthPropertyProvider} from \"@generated/vsan-health-property-provider\";\nimport {NavigationService, PlatformExtension} from \"@navigation/navigation.service\";\nimport {ReferenceWatcher} from \"@util/reference-watcher\";\n\n@Component({\n   selector: \"vsan-cluster-summary-health\",\n   templateUrl: \"cluster-summary-health.html\",\n   styleUrls: [\"cluster-summary-health.scss\"],\n   providers: [ReferenceWatcher],\n})\nexport class ClusterSummaryHealthComponent implements OnInit {\n\n   loading: boolean = false;\n\n   healthStatus: VsanHealthStatus = null;\n\n   statusLabel: string = \"\";\n\n   @Output()\n   getHealthDataFailed: EventEmitter<string> = new EventEmitter<string>();\n\n   constructor(private healthProvider: VsanHealthPropertyProvider,\n         private navigationService: NavigationService,\n         private refWatcher: ReferenceWatcher,\n         private changeDetector: ChangeDetectorRef) {\n      this.refWatcher.watchGlobalRefreshSubscription(ClusterSummaryHealthComponent.prototype.constructor.name);\n   }\n\n   ngOnInit(): void {\n      this.fetch();\n   }\n\n   @RefreshHandler\n   fetch(): void {\n      this.loading = true;\n      this.healthStatus = null;\n      this.statusLabel = \"\";\n      this.healthProvider.getVsanHealthSummaryFromCache(ManagedObject.contextObject)\n            .then(this.handleHealthData)\n            .catch(this.onCatch);\n      this.detectChanges();\n   }\n\n   private handleHealthData = (result: VsanHealthData): void => {\n      this.loading = false;\n      if (!result || !result.testsData || !result.testsData.length) {\n         this.detectChanges();\n         Logger.warn(\"The health summary data from cache is empty.\");\n         return;\n      }\n      this.buildStatus(result.testsData);\n   };\n\n   /**\n    * In the case of red status tests, an error status icon and \"x issues\" label are displayed,\n    * In the absence of red but yellow, a warning status icon and \"x warnings\" label are displayed,\n    * When there are no red or yellow status tests show a green status icon and \"OK\" label.\n    */\n   private buildStatus = (testsData: VsanTestData[]) => {\n      let redTests: number = 0;\n      let yellowTests: number = 0;\n      testsData.map(test => {\n         const subtests: VsanTestData[] = test.subtests;\n         subtests.map(subtest => {\n            if (subtest.status === VsanHealthStatus.red) {\n               redTests += 1;\n            }\n            if (subtest.status === VsanHealthStatus.yellow) {\n               yellowTests += 1;\n            }\n         });\n      });\n\n      if (redTests > 0) {\n         this.healthStatus = VsanHealthStatus.red;\n         this.statusLabel = redTests === 1\n               ? VsanUiUtils.getString(\"vsan.cluster.health.summary.errors.label.singular\", redTests)\n               : VsanUiUtils.getString(\"vsan.cluster.health.summary.errors.label.plural\", redTests);\n         this.detectChanges();\n         return;\n      }\n      if (yellowTests > 0) {\n         this.healthStatus = VsanHealthStatus.yellow;\n         this.statusLabel = yellowTests === 1\n               ? VsanUiUtils.getString(\"vsan.cluster.health.summary.warnings.label.singular\", yellowTests)\n               : VsanUiUtils.getString(\"vsan.cluster.health.summary.warnings.label.plural\", yellowTests);\n         this.detectChanges();\n         return;\n      }\n      this.healthStatus = VsanHealthStatus.green;\n      this.statusLabel = VsanUiUtils.getString(\"vsan.cluster.health.summary.ok.label\");\n      this.detectChanges();\n   };\n\n   private onCatch = (error: any): void => {\n      this.getHealthDataFailed.emit(VsanUiUtils.getString(\"vsan.cluster.health.summary.errors.message\"));\n      this.loading = false;\n      Logger.log(\"Unable to query health summary data from cache: \" + error);\n      this.detectChanges();\n   };\n\n   onDetailsClick = (): void => {\n      this.navigationService.navigateTo(PlatformExtension.CLUSTER_HEALTH, ManagedObject.contextObject);\n   };\n\n   get statusClass(): string {\n      return VsanHealthUtil.getVsanHealthStatusIconClass(this.healthStatus);\n   }\n\n   get statusShape(): string {\n      return VsanHealthUtil.getVsanHealthStatusIconShape(this.healthStatus);\n   }\n\n   /**\n    * If the component is being marked as destroyed but we try to detect changes angular will throw exception\n    */\n   private detectChanges(): void {\n      if (!(this.changeDetector as ViewRef).destroyed) {\n         this.changeDetector.detectChanges();\n      }\n   }\n}\n","/* Copyright 2021 VMware, Inc. All rights reserved. -- VMware Confidential */\n\nimport {LoadingFlowWrapper} from \"@service/flow/loading-flow-wrapper.data\";\n\n/**\n * This property decorator is supposed to be used along with the @Loader decorator.\n * If an exception is thrown during the execution of the method decorated with @Loader\n * the ErrorHandler method will be invoked. You can define as many ErrorHandlers as you want,\n * but they must be with different names. The name can be provided as input to the decorator.\n * If a name is set to the ErrorHandler it will handle only the errors thrown by Loader functions\n * with the same name. If no name is passed to the ErrorHandler, it will handle only the errors\n * from Loader functions with no name.\n *\n * <pre>\n * // Example 1:\n * @Loader()\n * loadSyncData(): any {\n *    throw new Error(\"Failed to load sync data\");\n * }\n *\n * @ErrorHandler()\n * handleError(err: any) {\n *    // handle the error.\n * }\n *...\n *\n * // Example 2\n *\n * @Loader({name: \"data-loading-flow})\n * async loadAsyncData(): Promise<any> {\n *    return Promise.reject(\"Failed to load async data\");\n * }\n *\n * @ErrorHandler({name: \"data-loading-flow})\n * handleError(err: any) {\n *    // handle the error.\n * }\n * ...\n * </pre>\n */\nexport function ErrorHandler(props?: ErrorHandlerProperties): MethodDecorator {\n   props = props || {};\n   return (targetClass: any, functionName: string, descriptor: PropertyDescriptor): void => {\n      (new LoadingFlowWrapper(targetClass, props.name)).errorHandler = descriptor.value;\n   };\n}\n\n/**\n * Properties of the ErrorHandler decorator.\n */\nexport interface ErrorHandlerProperties {\n\n   /**\n    * Indicates which @Loder should be handled by this @ErrorHandler\n    */\n   name?: string;\n}\n","/* Copyright 2021-2022 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {ErrorContext, FunctionWrapper} from \"@service/flow/function-wrapper\";\nimport {LoadingFlowWrapper} from \"@service/flow/loading-flow-wrapper.data\";\nimport {ScreenReaderAnnouncerService, SrEvent, SrMessageType} from \"@service/screen-reader-announcer.service\";\nimport {Reflection} from \"@util/reflection\";\nimport {GlobalLogger} from \"../../../../vsan-app.module\";\n\n/**\n * Method decorator that does the following:\n *  - watches for errors and if such appear:\n *       - the error is logged in the browser's console\n *       - the error is logged in the H5C server log\n *       - the related @ErrorMessage fields are populated\n *       - the related @ErrorHandler methods are invoked\n *  - Updates the @LoadingIndicator decorated fields\n *  - Invokes the screen reader service once the loading operation completes successfully\n */\nexport function Loader(params?: LoaderParams): MethodDecorator {\n   // If no params are passed, initialize the variable in order to avoid multiple null-checks\n   params = params || {};\n   return (targetClass: any, functionName: string, descriptor: PropertyDescriptor): void => {\n      // Use the component name as tag in order easily find where the error was thrown.\n      const tag: string = Reflection.getClassName(targetClass);\n      const loaderName: string = params.name;\n      const originalFn: any = descriptor.value;\n\n      descriptor.value = function (): any {\n         const loadingFlowWrapper: LoadingFlowWrapper = new LoadingFlowWrapper(this, loaderName);\n         return (new FunctionWrapper(originalFn))\n               .preExecute(() => {\n                  loadingFlowWrapper.error = undefined;\n                  loadingFlowWrapper.incrementLoads();\n                  ScreenReaderAnnouncerService.invoke(\n                        params.preLoadSrMessage || params.srMessage,\n                        params.srMessageType, SrEvent.LOADING);\n               })\n               .postExecute(() => {\n                  ScreenReaderAnnouncerService.invoke(params.srMessage, params.srMessageType, SrEvent.LOADED);\n               })\n               .onError((ex: any) => {\n                  processError(loadingFlowWrapper, tag, ex);\n                  const rethrow: boolean = shouldRethrow(loadingFlowWrapper, params);\n                  if (!rethrow) {\n                     ex = invokeErrorHandler(loadingFlowWrapper, ex);\n                  }\n                  return new ErrorContext(rethrow, ex);\n               })\n               .finally(() => {\n                  loadingFlowWrapper.decrementLoads();\n               })\n               .invoke(loadingFlowWrapper.backingObject, arguments);\n      };\n   };\n}\n\n/**\n * Parameters for the @Loader decorator\n */\nexport interface LoaderParams {\n\n   /**\n    * The name of the loader by which will be resolved te @LoadingIndicator, @ErrorHandler and @ErrorMessage\n    */\n   name?: string;\n\n   /**\n    * Indicates if the error should be rethrown after being processed by the @ErrorHandlers\n    */\n   rethrow?: boolean;\n\n   /**\n    * Used along with srMessageType to create the screen reader message to be announced after the loading\n    * operation completes successfully.\n    * If preLoadSrMessage is not set, srMessage will also be announced when the loading operation starts.\n    */\n   srMessage?: string;\n\n   /**\n    * Used when the message in preExecute() should be different than the one in postExecute().\n    * If not set, srMessage will be used in both places.\n    * Should be given a value when the srMessageType is set to CUSTOM,\n    * because otherwise the exact same message will be announced in preExecute() and postExecute().\n    */\n   preLoadSrMessage?: string;\n\n   /**\n    * The screen reader message type. Used for creating an appropriate message.\n    */\n   srMessageType?: SrMessageType;\n}\n\n/**\n * Handles the given error by:\n *  - logging the error in the browsers console\n *  - logging the error in the H5C backend log\n *  - updates all @ErrorMessage fields\n */\nfunction processError(wrapper: LoadingFlowWrapper, tag: string, ex: any): void {\n   // Log the error to the backend\n   GlobalLogger.error(tag, ex);\n\n   // Cache the error so it can be retrieved by @ErrorMessage decorated fields\n   wrapper.error = ex;\n}\n\n/**\n * Invokes the error handler (if defined)\n */\nfunction invokeErrorHandler(wrapper: LoadingFlowWrapper, ex: any): any {\n   const handler: any = wrapper.errorHandler;\n   return !!handler\n         ? handler.call(wrapper.backingObject, ex)\n         : null;\n}\n\n/**\n * Reject the promise only if:\n * 1. there are no handlers declared\n * 2. the components has explicitly requested the error to be rethrown\n */\nfunction shouldRethrow(wrapper: LoadingFlowWrapper, params: LoaderParams): boolean {\n   return !wrapper.errorHandler && !wrapper.errorMessageGetter\n         || !!params.rethrow;\n}\n","/* Copyright 2021 VMware, Inc. All rights reserved. -- VMware Confidential */\n/**\n * IDs used in external KB link navigation\n */\nexport enum KnowledgeBaseId {\n   PRECHECK_PCP = \"83954\",\n   VIRTUAL_OBJECTS = \"2108319\",\n   UPGRADE = \"2148493\",\n   PERFORMANCE_DIAGNOSTICS = \"2148770\",\n   SUPPORT_INSIGHT = \"60206\",\n}\n","/* Copyright 2019 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {NgModule} from \"@angular/core\";\nimport {CommonModule} from \"@angular/common\";\nimport {FormsModule} from \"@angular/forms\";\nimport {RouterModule, Routes} from \"@angular/router\";\nimport {ClarityModule} from \"@clr/angular\";\nimport {VsanCommonModule} from \"app/vsan/common/vsan-common.module\";\nimport {ClusterSummaryPortletComponent} from \"./summary-portlet.component\";\nimport {ClusterSummaryPerformanceComponent} from \"./performance/cluster-summary-performance.component\";\nimport {ClusterSummaryHealthComponent} from \"./health/cluster-summary-health.component\";\nimport {CapacityCommonModule} from \"@component/capacity/capacity-common.module\";\nimport {VsanChartModule} from \"@component/chart/chart.module\";\nimport {UnavailableViewModule} from \"@component/unavailable-view/unavailable-view.module\";\n\nconst routes: Routes = [\n   {\n      path: \"\",\n      component: ClusterSummaryPortletComponent,\n   },\n];\n\n@NgModule({\n   imports: [\n      CommonModule,\n      FormsModule,\n      ClarityModule,\n      VsanCommonModule,\n      CapacityCommonModule,\n      VsanChartModule,\n      UnavailableViewModule,\n      RouterModule.forChild(routes),\n   ],\n   declarations: [\n      ClusterSummaryPortletComponent,\n      ClusterSummaryPerformanceComponent,\n      ClusterSummaryHealthComponent,\n   ],\n})\nexport class ClusterSummaryModule {\n}","/* Copyright 2020-2022 VMware, Inc. All rights reserved. -- VMware Confidential */\nexport class VsanDialogUtil {\n   static readonly CAPACITY_MANAGEMENT_DIALOG: VsanDialogProperties = {\n      width: 800,\n      height: 700,\n   };\n\n   static readonly DELETE_VOLUME_DIALOG: VsanDialogProperties = {\n      width: 500,\n      height: 250,\n   };\n\n   static readonly MIGRATE_VOLUME_DIALOG: VsanDialogProperties = {\n      width: 1030,\n      height: 710,\n   };\n\n   static readonly REAPPLY_VOLUME_POLICY_DIALOG: VsanDialogProperties = {\n      width: 700,\n      height: 250,\n   };\n\n   static readonly DUPLICATE_PCI_ID_MODEL_SELECTION_DIALOG: VsanDialogProperties = {\n      width: 800,\n      height: 500,\n   };\n\n   static readonly HEALTH_RESTORE_ACTION_DIALOG: VsanDialogProperties = {\n      width: 550,\n      height: 250,\n   };\n\n   // Keep in sync with plugin.xml extension point\n   static readonly CLUSTER_POWER_ON_DIALOG: VsanDialogProperties = {\n      width: 600,\n      height: 230,\n   };\n\n   static readonly VM_IO_DIAGNOSTICS_METRICS_DIALOG: VsanDialogProperties = {\n      width: 900,\n      height: 700,\n   };\n\n   static readonly VM_IO_DIAGNOSTICS_LATENCY_DIALOG: VsanDialogProperties = {\n      width: 1000,\n      height: 500,\n   };\n\n   static readonly VM_IO_DIAGNOSTICS_DOM_OWNER_LATENCY_DIALOG: VsanDialogProperties = {\n      width: 1000,\n      height: 400,\n   };\n\n   static readonly PERF_SVC_EDIT_ACTION_DIALOG: VsanDialogProperties = {\n      width: 800,\n      height: 450,\n   };\n\n   static readonly PERF_SVC_ENABLE_ACTION_DIALOG: VsanDialogProperties = {\n      width: 800,\n      height: 250,\n   };\n\n   static readonly CLAIM_DISKS_ACTION_DIALOG: VsanDialogProperties = {\n      width: 1200,\n      height: 650,\n   };\n\n   static readonly VSAN_DISK_CLAIM_ACTION_DIALOG: VsanDialogProperties = {\n      width: 670,\n      height: 300,\n   };\n}\n\nexport class VsanDialogProperties {\n   width: number;\n   height: number;\n}\n","<div class=\"clr-row\">\n   <label id=\"health-summary-title\" class=\"clr-col-3 clr-control-label\">\n      {{\"vsan.cluster.health.summary.title.label\" | localized}}\n   </label>\n   <div class=\"clr-col-7\">\n      <ng-container *ngIf=\"!loading  && !!healthStatus && !!statusLabel\">\n         <clr-icon size=\"18\"\n                   aria-hidden=\"true\"\n                   [attr.shape]=\"statusShape\"\n                   [attr.class]=\"'health-summary-error is-solid ' + statusClass\"></clr-icon>\n         <span>{{statusLabel}}</span>\n      </ng-container>\n      <ng-container *ngIf=\"loading\">\n         <span class=\"spinner spinner-inline\"></span>\n         <span>{{\"vsan.loading\" | localized}}</span>\n      </ng-container>\n   </div>\n   <a id=\"health-summary-details\"\n      class=\"clr-col-2 details\"\n      href=\"javascript://\"\n      (click)=\"onDetailsClick()\">\n      {{\"vsan.cluster.summary.portlet.details.label\" | localized}}\n   </a>\n</div>\n","/* Copyright 2021 VMware, Inc. All rights reserved. -- VMware Confidential */\n\n/**\n * This class is used internally by the @Loader decorator and the decorators related to it.\n * It encapsulates the logic for accessing internal properties needed for the decorators to work.\n * The state of this class is kept in the \"backingObject\" passed to the constructor. This allows\n * the wrapper class to be easily recreated wherever it is needed without worrying about keeping its reference.\n *\n * <pre>\n * const obj: any = {};\n *\n * // Create a new LoadingFlowWrapper over obj\n * const wrapper1: LoadingFlowWrapper = new LoadingFlowWrapper(obj);\n * // Set the error field to \"alabala\" string\n * wrapper1.error = \"alabala\";\n *\n * // Create a new LoadingFlowWrapper over obj\n * const wrapper2: LoadingFlowWrapper = new LoadingFlowWrapper(obj);\n * console.log(wrapper2.error); // Prints \"alabala\" because the backing object is the same\n * </pre>\n */\nexport class LoadingFlowWrapper {\n\n   private static readonly ERROR_HOLDER: string = \"__ex__\";\n   private static readonly ERROR_HANDLERS_REF_HOLDER: string = \"__errorHandlers__\";\n   private static readonly ERROR_MESSAGE_GETTERS_REF_HOLDER: string = \"__errorMessageGetters__\";\n   private static readonly LOADS_COUNT_HOLDER: string = \"__loadsCount__\";\n\n   private static readonly DEFAULT_NAME: string = \"default-loader\";\n\n   constructor(private _backingObject: any,\n         private loaderName: string) {\n      this.loaderName = loaderName || LoadingFlowWrapper.DEFAULT_NAME;\n\n      // Init all collections\n      this.initCollection(LoadingFlowWrapper.ERROR_HOLDER);\n      this.initCollection(LoadingFlowWrapper.ERROR_HANDLERS_REF_HOLDER);\n      this.initCollection(LoadingFlowWrapper.ERROR_MESSAGE_GETTERS_REF_HOLDER);\n      this.initCollection(LoadingFlowWrapper.LOADS_COUNT_HOLDER);\n   }\n\n   private initCollection(collectionName: string): void {\n      // Check first if the collection hasn't been initialized by another wrapper.\n      // If so, do nothing as we don't want to override the data already set.\n      if (!this.backingObject[collectionName]) {\n         this.backingObject[collectionName] = [];\n      }\n   }\n\n   /**\n    * The original object which methods/properties were decorated\n    */\n   get backingObject(): any {\n      return this._backingObject;\n   }\n\n   /**\n    * Returns the thrown error\n    */\n   get error(): any {\n      return this.backingObject[LoadingFlowWrapper.ERROR_HOLDER][this.loaderName];\n   }\n\n   /**\n    * Sets the thrown error\n    */\n   set error(val: any) {\n      this.backingObject[LoadingFlowWrapper.ERROR_HOLDER][this.loaderName] = val;\n   }\n\n   /**\n    * Returns the number of active loading operations\n    */\n   private get loadsCount(): number {\n      return this.backingObject[LoadingFlowWrapper.LOADS_COUNT_HOLDER][this.loaderName];\n   }\n\n   /**\n    * Returns true if there are running loader methods or promises.\n    */\n   get isLoading(): boolean {\n      return !!this.loadsCount;\n   }\n\n   /**\n    * Increase the number of active loading operations by one\n    */\n   incrementLoads(): void {\n      // Initialize the counter if it hasn't been initialized yet\n      if (!this.loadsCount) {\n         this.backingObject[LoadingFlowWrapper.LOADS_COUNT_HOLDER][this.loaderName] = 0;\n      }\n      this.backingObject[LoadingFlowWrapper.LOADS_COUNT_HOLDER][this.loaderName] += 1;\n   }\n\n   /**\n    * Decreases the number of active loading operations by one\n    */\n   decrementLoads(): void {\n      this.backingObject[LoadingFlowWrapper.LOADS_COUNT_HOLDER][this.loaderName] -= 1;\n   }\n\n   get errorHandler(): any {\n      return this.backingObject[LoadingFlowWrapper.ERROR_HANDLERS_REF_HOLDER][this.loaderName];\n   }\n\n   /**\n    * Registers a new error handler.\n    */\n   set errorHandler(errorHandler: any) {\n      if (!!this.errorHandler) {\n         throw new Error(`ErrorHandler for loader \"${this.loaderName}\" already registered!`);\n      }\n      this.backingObject[LoadingFlowWrapper.ERROR_HANDLERS_REF_HOLDER][this.loaderName] = errorHandler;\n   }\n\n   get errorMessageGetter(): any {\n      return this.backingObject[LoadingFlowWrapper.ERROR_MESSAGE_GETTERS_REF_HOLDER][this.loaderName];\n   }\n\n   set errorMessageGetter(getter: any) {\n      if (!!this.errorMessageGetter) {\n         throw new Error(`ErrorMessage for loader \"${this.loaderName}\" already registered!`);\n      }\n      this.backingObject[LoadingFlowWrapper.ERROR_MESSAGE_GETTERS_REF_HOLDER][this.loaderName] = getter;\n   }\n}\n","/* Copyright 2017-2020 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, EventEmitter, OnInit, Output} from \"@angular/core\";\nimport {RefreshHandler} from \"@service/global-refresh.service\";\nimport {ManagedObject} from \"@service/managed-object\";\nimport {GraphMetric} from \"@component/chart/performance/graph-metrics.data\";\nimport {FlatGraphMetric} from \"@component/chart/performance/flat-graph-metric\";\nimport {PerfGraph} from \"@component/chart/performance/perf-graph\";\nimport {PerfChartUtil} from \"@component/chart/performance/perf-chart-util\";\nimport {NavigationService, PlatformExtension} from \"@navigation/navigation.service\";\nimport {VsanClusterSummaryService} from \"@generated/vsan-cluster-summary-service\";\nimport {SummaryPerformanceData} from \"@generated/summary-performance-data\";\nimport {PefGraphId} from \"@component/chart/model/perf-graph-id\";\nimport {ChartPlotLineSelectionData} from \"@component/chart/model/chart-plot-line-selection.data\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {TopContributorsContext} from \"@navigation/context/top-contributors-context\";\nimport {VsanDateTimeUtils} from \"@util/vsan-dateteime-util\";\nimport {PerfTimeRangeData} from \"@generated/perf-time-range-data\";\nimport {ReferenceWatcher} from \"@util/reference-watcher\";\n\n@Component({\n   selector: \"vsan-cluster-summary-performance\",\n   templateUrl: \"cluster-summary-performance.html\",\n   styleUrls: [\"cluster-summary-performance.scss\"],\n   providers: [ReferenceWatcher],\n})\nexport class ClusterSummaryPerformanceComponent implements OnInit {\n   loading: boolean;\n   perfServiceEnabled: boolean;\n   perfServiceHealthy: boolean;\n   isTopContributorsSupported: boolean;\n   hasChartData: boolean;\n   performanceUnavailableLabel: string;\n   tooltipActionLink: string;\n   flatData: FlatGraphMetric[] = [];\n\n   @Output()\n   getPerformanceDataFailed: EventEmitter<string> = new EventEmitter<string>();\n\n   constructor(private navigationService: NavigationService,\n         private summaryService: VsanClusterSummaryService,\n         private refWatcher: ReferenceWatcher) {\n      this.refWatcher.watchGlobalRefreshSubscription(ClusterSummaryPerformanceComponent.prototype.constructor.name);\n   }\n\n   ngOnInit(): void {\n      this.fetch();\n   }\n\n   @RefreshHandler\n   fetch(): void {\n      this.loading = true;\n      this.summaryService.getSummaryPerformanceData(ManagedObject.contextObject)\n            .then((result: SummaryPerformanceData) => {\n               this.loading = false;\n               this.perfServiceEnabled = result.isPerfEnabled;\n               this.perfServiceHealthy = result.isPerfServiceHealthy;\n               this.isTopContributorsSupported = result.isTopContributorsSupported;\n\n               this.setPerformanceUnavailableLabel();\n               this.tooltipActionLink = this.isTopContributorsSupported ?\n                     VsanUiUtils.getString(\"vsan.monitor.cluster.performance.topContributors.tooltip.action.link\") : null;\n\n               if (this.perfServiceEnabled) {\n                  this.handleChartsData(result);\n               }\n            }).catch(this.handleError);\n   }\n\n   setPerformanceUnavailableLabel(): void {\n      if (!this.perfServiceEnabled) {\n         this.performanceUnavailableLabel = VsanUiUtils.getString(\"vsan.cluster.performance.summary.disabled.label\");\n      } else if (!this.perfServiceHealthy) {\n         this.performanceUnavailableLabel = VsanUiUtils.getString(\"vsan.monitor.cluster.performance.unhealthy.description\");\n      }\n   }\n\n   private handleChartsData(perfData: SummaryPerformanceData): void {\n      this.hasChartData = !!perfData.chartsData;\n      // There was no chart data when the performance service was just enabled.\n      if (!this.hasChartData) {\n         return;\n      }\n\n      let graphs: PerfGraph[] = [];\n      if (perfData && perfData.clusterDomClientEntity && perfData.clusterDomClientEntity.graphs) {\n         graphs = perfData.clusterDomClientEntity.graphs\n               .filter(graph => Object.values(PefGraphId).includes(graph.id))\n               .map(graph => PerfChartUtil.getGraphDefinition(graph));\n      }\n\n      this.flatData = [];\n      const graphsData: GraphMetric[] = [new GraphMetric(perfData.chartsData, graphs)];\n      graphsData.forEach((entry: GraphMetric) => {\n         entry.graphs.forEach(graph => {\n            this.flatData.push(new FlatGraphMetric(entry.entityRefId, entry.metrics, graph));\n         });\n      });\n   }\n\n   private handleError = (error: string) => {\n      this.loading = false;\n      this.getPerformanceDataFailed.emit(error);\n   };\n\n   onDetailsClick = () => {\n      if (!this.perfServiceEnabled || !this.perfServiceHealthy) {\n         this.navigationService.navigateTo(PlatformExtension.CLUSTER_SERVICES);\n      } else {\n         this.navigationService.navigateTo(PlatformExtension.CLUSTER_PERFORMANCE);\n      }\n   };\n\n   tooltipActionLinkClicked = (data: ChartPlotLineSelectionData) => {\n      const now: number = VsanDateTimeUtils.roundToMinuteStart(new Date().getTime());\n      // sets the start time 2 hours ago, because the perf. data is the chart is for the last two hours too\n      const startTime: number = now - VsanDateTimeUtils.HOUR_IN_MILLISECONDS * SummaryPerformanceData.LAST_TWO_HOURS();\n      const timePickerRange: PerfTimeRangeData = PerfTimeRangeData.Factory.create(\n            \"\", startTime, now, null);\n      const props: TopContributorsContext = {\n         selectedTimePoint: data.timePoint,\n         selectedGraphId: data.graphId,\n         timePickerRange: timePickerRange,\n      };\n\n      this.navigationService.navigateTo(PlatformExtension.CLUSTER_PERFORMANCE, null, props);\n   };\n}","/* Copyright 2017-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, OnInit} from \"@angular/core\";\nimport {RefreshHandler} from \"@service/global-refresh.service\";\nimport {ClusterPowerService} from \"@generated/cluster-power-service\";\nimport {ManagedObject} from \"@service/managed-object\";\nimport {ClusterPowerStateUtils} from \"@util/cluster-power-state-utils\";\nimport {ClusterPowerState} from \"@generated/cluster-power-state\";\nimport {UnavailableViewSpec} from \"@component/unavailable-view/unavailable-view-spec\";\nimport {PermissionService} from \"@generated/permission-service\";\nimport {Privileges} from \"@generated/privileges\";\nimport {Loader} from \"@service/flow/loader.decorator\";\nimport {ErrorHandler} from \"@service/flow/error-handler.decorator\";\n\n@Component({\n   templateUrl: \"summary-portlet.html\",\n   selector: \"vsan-cluster-summary\",\n   styleUrls: [\"summary-portlet.scss\"],\n})\nexport class ClusterSummaryPortletComponent implements OnInit {\n\n   clusterRef: ManagedObject;\n   hasEditClusterPermission: boolean = false;\n\n   alertMessages: string[] = [];\n\n   /**\n    * It's only used for the initial loading because the children components do the global refresh handling internally.\n    */\n   isInitiallyLoaded: boolean = false;\n\n   isClusterPoweredOff: boolean;\n   unavailableViewSpec: UnavailableViewSpec = UnavailableViewSpec.SERVICES_VIEW_CLUSTER_SHUT_DOWN;\n\n   constructor(private clusterPowerService: ClusterPowerService, private permissionService: PermissionService) {}\n\n   async ngOnInit(): Promise<void> {\n      this.clusterRef = ManagedObject.contextObject;\n      await Promise.all([\n            this.checkForEditClusterPermission(),\n            this.fetch(),\n      ]);\n      this.isInitiallyLoaded = true;\n   }\n\n   @RefreshHandler\n   async fetch(): Promise<void> {\n      this.alertMessages = [];\n      this.isClusterPoweredOff = ClusterPowerStateUtils.isClusterPoweredOff(await this.queryClusterPowerState());\n   }\n\n   async checkForEditClusterPermission(): Promise<void> {\n      this.hasEditClusterPermission = await this.permissionService.hasPermissions(\n            this.clusterRef, [Privileges.EDIT_CLUSTER()]);\n   }\n\n   /**\n    * Decorate only the API call, to have both the error handling and to be sure that we will update the\n    * cluster power state no matter what the result is gonna be.\n    */\n   @Loader()\n   async queryClusterPowerState(): Promise<ClusterPowerState> {\n      return this.clusterPowerService.getPowerState(this.clusterRef);\n   }\n\n   /**\n    * Collect errors from this and the children components\n    */\n   @ErrorHandler()\n   handleDataFailed(error: string): void {\n      this.alertMessages.push(error);\n   }\n}\n","<!-- Copyright 2021-2022 VMware, Inc. All rights reserved. VMware Confidential -->\n<span class=\"busy-backdrop\" *ngIf=\"!isInitiallyLoaded\">\n   <span class=\"spinner spinner-lg central-spinner\"></span>\n</span>\n<ng-container *ngIf=\"isInitiallyLoaded && !isClusterPoweredOff\" >\n   <vsan-validation *ngIf=\"alertMessages?.length\" [(alerts)]=\"alertMessages\"></vsan-validation>\n   <div class=\"card\">\n      <div class=\"card-block\">\n         <vsan-capacity-summary (getCapacityDataFailed)=\"handleDataFailed($event)\"></vsan-capacity-summary>\n      </div>\n      <div class=\"card-block\">\n         <vsan-cluster-summary-health (getHealthDataFailed)=\"handleDataFailed($event)\"></vsan-cluster-summary-health>\n      </div>\n      <div class=\"card-block\">\n         <vsan-cluster-summary-performance (getPerformanceDataFailed)=\"handleDataFailed($event)\"></vsan-cluster-summary-performance>\n      </div>\n   </div>\n</ng-container>\n<vsan-unavailable-view *ngIf=\"isInitiallyLoaded && isClusterPoweredOff\"\n                       [clusterRef]=\"clusterRef\"\n                       [unavailableViewSpec]=\"unavailableViewSpec\"\n                       [hasEditPrivilege]=\"hasEditClusterPermission\">\n</vsan-unavailable-view>\n\n","/* Copyright 2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {\n   AfterViewInit,\n   ComponentFactoryResolver,\n   Directive,\n   ElementRef,\n   Host,\n   Input,\n   Optional,\n   Renderer2,\n   Self,\n} from \"@angular/core\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {NavigationService} from \"@navigation/navigation.service\";\nimport {ClrButtonBaseDirective} from \"@directive/clr-button-group/clr-button-base.directive\";\nimport {ClrButton} from \"@clr/angular\";\n\n/**\n * Decorates a button or an anchor as external link. Requires one of the optional parameters articleId, helpId or url.\n *\n * @param external-link: Optional. Localization key of the text label of the external link. If omitted default label\n * will be used - \"Learn more\" for anchors or \"Ask VMWare\" for buttons.\n * @param articleId - Optional. Id of article in knowledge base.\n * @param helpId - Optional. Help id which will redirect to Knowledge Base.\n * @param url - Optional. External URL.\n */\n@Directive({\n   selector: \"a[external-link], button[external-link], clr-button[external-link]\",\n})\nexport class ExternalLinkDirective extends ClrButtonBaseDirective implements AfterViewInit {\n   private readonly ASK_VMWARE_DEFAULT_TEXT_KEY: string = \"vsan.common.askVMware\";\n   private readonly LEARN_MORE_DEFAULT_TEXT_KEY: string = \"vsan.common.learnMore\";\n\n   private readonly CONTAINER_CLASS: string = \"icon-name-container\";\n   private readonly NAVIGATION_EVENT_TYPE: string = \"click\";\n   private readonly LEAD_TO_NOWHERE_URL: string = \"javascript://\";\n   private readonly HTML_ELEMENT_SPAN_NAME: string = \"span\";\n   private readonly HTML_ELEMENT_ICON_NAME: string = \"clr-icon\";\n   private readonly HTML_ELEMENT_ROLE_ATTR_NAME: string = \"role\";\n   private readonly HTML_ELEMENT_ROLE_ATTR_VALUE: string = \"link\";\n   private readonly ICON_SHAPE_ATTR_NAME: string = \"shape\";\n   private readonly ICON_SHAPE_ATTR_VALUE: string = \"pop-out\";\n   private readonly ICON_SIZE_ATTR_NAME: string = \"size\";\n   private readonly ICON_SIZE_ATTR_VALUE: string = \"16\";\n   private readonly ICON_CLASS_ATTR_NAME: string = \"class\";\n   private readonly ICON_CLASS_ATTR_VALUE: string = \"link\";\n   private readonly ICON_TITLE_ATTR_NAME: string = \"title\";\n\n   private readonly KB_URL: string = \"http://kb.vmware.com/kb/\";\n\n   @Input(\"external-link\")\n   anchorText: string;\n\n   @Input()\n   articleId: string;\n\n   @Input()\n   helpId: string;\n\n   @Input()\n   url: string;\n\n   constructor(private el: ElementRef<HTMLElement>,\n         private resolver: ComponentFactoryResolver,\n         private renderer: Renderer2,\n         private navigationService: NavigationService,\n         // this variable will be initialized only if the host is clr-button\n         @Host() @Self() @Optional() clrButton: ClrButton) {\n      super(clrButton);\n   }\n\n   ngAfterViewInit(): void {\n      const element: HTMLElement = this.el.nativeElement;\n      // continue only if element is HTML link or button\n      if (!this.isLink(element) && !this.isButton(element)) {\n         // element is clr-button, wait until html button for it is resolved - handled by resloveButton\n         return;\n      }\n      this.prepareExternalLink(element);\n   }\n\n   resolveButton(clrButton: ClrButton, button: HTMLButtonElement, index: number): void {\n      // only if element is clr-button. At this point the html button is already resolved. Apply on it.\n      this.prepareExternalLink(button);\n   }\n\n   private prepareExternalLink(element: HTMLElement): void {\n      this.renderer.addClass(element, this.CONTAINER_CLASS);\n\n      this.setText(element);\n      if (this.isLink(element)) {\n         this.decorateLink(element);\n      } else {\n         this.addLinkRole(element);\n      }\n\n      this.initializeNavigationHandler(element);\n   }\n\n   private isButton(element: HTMLElement): boolean {\n      return element instanceof HTMLButtonElement;\n   }\n\n   private isLink(element: HTMLElement): boolean {\n      return element instanceof HTMLAnchorElement;\n   }\n\n   private setText(element: HTMLElement): void {\n      const span: HTMLSpanElement = this.renderer.createElement(this.HTML_ELEMENT_SPAN_NAME);\n      span.innerText = this.getText(element);\n      this.renderer.appendChild(element, span);\n\n      const icon: HTMLSpanElement = this.renderer.createElement(this.HTML_ELEMENT_ICON_NAME);\n      icon.setAttribute(this.ICON_SHAPE_ATTR_NAME, this.ICON_SHAPE_ATTR_VALUE);\n      icon.setAttribute(this.ICON_SIZE_ATTR_NAME, this.ICON_SIZE_ATTR_VALUE);\n      icon.setAttribute(this.ICON_CLASS_ATTR_NAME, this.ICON_CLASS_ATTR_VALUE);\n      // Set title of the icon for screen readers clarity\n      icon.setAttribute(this.ICON_TITLE_ATTR_NAME, VsanUiUtils.getString(\"vsan.screenReader.label.externalLink.icon\"));\n      this.renderer.appendChild(element, icon);\n   }\n\n   private getText(element: HTMLElement): string {\n      if (this.anchorText) {\n         return this.anchorText;\n      }\n      const key: string = this.isButton(element) ? this.ASK_VMWARE_DEFAULT_TEXT_KEY : this.LEARN_MORE_DEFAULT_TEXT_KEY;\n      return VsanUiUtils.getString(key);\n   }\n\n   private decorateLink(element: HTMLElement): void {\n      const linkElement: HTMLLinkElement = element as HTMLLinkElement;\n      // don't use href attribute. If omitted, the link will be not visualized properly.\n      linkElement.href = this.LEAD_TO_NOWHERE_URL;\n      // display link on same line\n      linkElement.style.display = \"inline-flex\";\n   }\n\n   private initializeNavigationHandler(element: HTMLElement): void {\n      element.addEventListener(this.NAVIGATION_EVENT_TYPE, () => {\n         if (this.helpId) {\n            this.navigationService.askVMware(this.helpId);\n            return;\n         }\n         if (this.articleId) {\n            this.navigationService.navigateToAddress(`${this.KB_URL}${this.articleId}`);\n            return;\n         }\n         if (this.url) {\n            this.navigationService.navigateToAddress(this.url);\n         }\n      });\n   }\n\n   // Indicate external navigation by assigning \"link\" role\n   private addLinkRole(element: HTMLElement): void {\n      this.renderer.setAttribute(element, this.HTML_ELEMENT_ROLE_ATTR_NAME, this.HTML_ELEMENT_ROLE_ATTR_VALUE);\n   }\n}","<div class=\"clr-row\">\n   <label id=\"performance-summary-title\" class=\"clr-col-3 clr-control-label\">\n      {{\"vsan.cluster.performance.summary.title.label\" | localized}}\n   </label>\n   <div class=\"clr-col-7\">\n      <ng-container *ngIf=\"loading\">\n         <span class=\"spinner spinner-inline\"></span>\n         <span>{{\"vsan.loading\" | localized}}</span>\n      </ng-container>\n      <ng-container *ngIf=\"!loading && (!perfServiceEnabled || !perfServiceHealthy)\">\n         {{performanceUnavailableLabel}}\n      </ng-container>\n   </div>\n   <a id=\"performance-summary-details\"\n      class=\"clr-col-2 details\"\n      href=\"javascript://\"\n      (click)=\"onDetailsClick()\">\n      {{\"vsan.cluster.summary.portlet.details.label\" | localized}}\n   </a>\n</div>\n\n<ng-container *ngIf=\"!loading && perfServiceHealthy\">\n   <ng-container *ngIf=\"hasChartData\">\n      {{\"vsan.cluster.performance.summary.enabled.label\" | localized}}\n   </ng-container>\n   <ng-container *ngIf=\"!hasChartData\">\n      {{\"vsan.cluster.performance.summary.noChartData.label\" | localized}}\n   </ng-container>\n   <!-- Perf charts(IOPS/Throughout/Latency) -->\n   <div *ngFor=\"let entry of flatData; let i = index\">\n      <vsan-perf-chart [graph]=\"entry.graph\"\n                       [metrics]=\"entry.metrics\"\n                       [entityRefId]=\"entry.entityRefId\"\n                       [isZoomAllowed]=\"false\"\n                       [showExpandButton]=\"false\"\n                       [index]=\"i\"\n                       [tooltipPopUpPosition]=\"'bottom-middle'\"\n                       (onTooltipActionClicked)=\"tooltipActionLinkClicked($event)\"\n                       [actionLink]=\"tooltipActionLink\">\n      </vsan-perf-chart>\n   </div>\n</ng-container>\n"],"sourceRoot":"webpack:///"}