{"version":3,"sources":["webpack:///node_modules/ipaddr.js/lib/ipaddr.js","webpack:///src/app/vsan/common/service/ip-parser.service.ts"],"names":["expandIPv6","ipaddr","ipv4Part","ipv4Regexes","ipv6Part","ipv6Regexes","matchCIDR","root","zoneIndex","module","exports","first","second","partSize","cidrBits","part","shift","length","Error","subnetMatch","address","rangeList","defaultName","k","len","rangeName","rangeSubnets","subnet","Array","kind","match","apply","IPv4","octets","octet","prototype","toString","join","toNormalizedString","toByteArray","slice","other","cidrRange","ref","SpecialRanges","unspecified","broadcast","multicast","linkLocal","loopback","carrierGradeNat","reserved","range","toIPv4MappedAddress","IPv6","parse","prefixLengthFromSubnetMask","cidr","i","stop","zeros","zerotable","fourOctet","RegExp","longValue","parser","string","parseIntAuto","value","parseInt","results","push","reverse","parts","zoneId","l","replace","bytes","addr","suffix","call","uniqueLocal","ipv4Mapped","rfc6145","rfc6052","teredo","isIPv4MappedAddress","toIPv4Address","high","low","transitional","colonCount","lastColon","replacement","replacementCount","indexOf","lastIndexOf","substring","substr","split","test","isIPv4","isIPv6","isValid","e","error1","isValidFourPartDecimal","parseCIDR","maskLength","subnetMaskFromPrefixLength","prefix","filledOctetCount","j","Math","floor","pow","broadcastAddressFromCIDR","error","ipInterfaceOctets","subnetMaskOctets","networkAddressFromCIDR","fromByteArray","process","IpParserService","isIpv4AddressValid","ipAddress","trimmedIp","trim","validIpV4Address","isIpv6AddressValid","acceptZoneIndex","delimiterIndex","ZONE_INDEX_REGEXP","equalIpv6Addresses","IPV6_DEFAULT_UNICAST_ROUTE_ADDRESS","IPV6_LOOPBACK_ADDRESS","isSameIpv4Subnet","ipAddressFirst","ipAddressSecond","subnetMask","isSubnetMaskValid","splitIpFirst","IPV4_SEPARATOR","splitIpSecond","splitSubnet","isCidr","parseCidrToIpv4","isSameIpv6Subnet","isAddressValid","expandIpv6Address","parsedAddress","splitIpAddress","every","item","isSubnetForIpValid","ipString","ipSections","ipAddressDigitsCount","isNaN","isSubnetValid","isSubnetPrefixValid","highDigits","validationStartPosition","ipNumbers","parseIpToNum","find","num","index","subnetValidation","ipStr","ip","maskBytes","forEach","Number","firstNonMaxQuadIndex","maskByte","SUBNET_MASK_MAX_QUAD_VALUE","SUBNET_MASK_VALID_QUAD_VALUES","addr1","addr2","getNormalizedIpv6Address","addressString","addressAndPort","detectParts","portResult","parsePort","port","addressResult","parseAddress","valid","buildIpAddress","detectIPv6Parts","IPV6_BRACKETED_NOTATION_REGEX","exec","undefined","DIGITS_REGEX","parsedPort","MAX_PORT","mask","String","IP_ADDRESS_DIGITS_COUNT","prefixLength","IPV6_LINK_LOCAL_PREFIX_LENGTH","addressBegining"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AACE,cAAIA,UAAJ,EAAgBC,MAAhB,EAAwBC,QAAxB,EAAkCC,WAAlC,EAA+CC,QAA/C,EAAyDC,WAAzD,EAAsEC,SAAtE,EAAiFC,IAAjF,EAAuFC,SAAvF;AAEAP,gBAAM,GAAG,EAAT;AAEAM,cAAI,GAAG,IAAP;;AAEA,cAAK,QAAiCE,MAAM,KAAK,IAA7C,IAAsDA,MAAM,CAACC,OAAjE,EAA0E;AACxED,kBAAM,CAACC,OAAP,GAAiBT,MAAjB;AACD,WAFD,MAEO;AACLM,gBAAI,CAAC,QAAD,CAAJ,GAAiBN,MAAjB;AACD;;AAEDK,mBAAS,GAAG,mBAASK,KAAT,EAAgBC,MAAhB,EAAwBC,QAAxB,EAAkCC,QAAlC,EAA4C;AACtD,gBAAIC,IAAJ,EAAUC,KAAV;;AACA,gBAAIL,KAAK,CAACM,MAAN,KAAiBL,MAAM,CAACK,MAA5B,EAAoC;AAClC,oBAAM,IAAIC,KAAJ,CAAU,8DAAV,CAAN;AACD;;AACDH,gBAAI,GAAG,CAAP;;AACA,mBAAOD,QAAQ,GAAG,CAAlB,EAAqB;AACnBE,mBAAK,GAAGH,QAAQ,GAAGC,QAAnB;;AACA,kBAAIE,KAAK,GAAG,CAAZ,EAAe;AACbA,qBAAK,GAAG,CAAR;AACD;;AACD,kBAAIL,KAAK,CAACI,IAAD,CAAL,IAAeC,KAAf,KAAyBJ,MAAM,CAACG,IAAD,CAAN,IAAgBC,KAA7C,EAAoD;AAClD,uBAAO,KAAP;AACD;;AACDF,sBAAQ,IAAID,QAAZ;AACAE,kBAAI,IAAI,CAAR;AACD;;AACD,mBAAO,IAAP;AACD,WAlBD;;AAoBAd,gBAAM,CAACkB,WAAP,GAAqB,UAASC,OAAT,EAAkBC,SAAlB,EAA6BC,WAA7B,EAA0C;AAC7D,gBAAIC,CAAJ,EAAOC,GAAP,EAAYC,SAAZ,EAAuBC,YAAvB,EAAqCC,MAArC;;AACA,gBAAIL,WAAW,IAAI,IAAnB,EAAyB;AACvBA,yBAAW,GAAG,SAAd;AACD;;AACD,iBAAKG,SAAL,IAAkBJ,SAAlB,EAA6B;AAC3BK,0BAAY,GAAGL,SAAS,CAACI,SAAD,CAAxB;;AACA,kBAAIC,YAAY,CAAC,CAAD,CAAZ,IAAmB,EAAEA,YAAY,CAAC,CAAD,CAAZ,YAA2BE,KAA7B,CAAvB,EAA4D;AAC1DF,4BAAY,GAAG,CAACA,YAAD,CAAf;AACD;;AACD,mBAAKH,CAAC,GAAG,CAAJ,EAAOC,GAAG,GAAGE,YAAY,CAACT,MAA/B,EAAuCM,CAAC,GAAGC,GAA3C,EAAgDD,CAAC,EAAjD,EAAqD;AACnDI,sBAAM,GAAGD,YAAY,CAACH,CAAD,CAArB;;AACA,oBAAIH,OAAO,CAACS,IAAR,OAAmBF,MAAM,CAAC,CAAD,CAAN,CAAUE,IAAV,EAAvB,EAAyC;AACvC,sBAAIT,OAAO,CAACU,KAAR,CAAcC,KAAd,CAAoBX,OAApB,EAA6BO,MAA7B,CAAJ,EAA0C;AACxC,2BAAOF,SAAP;AACD;AACF;AACF;AACF;;AACD,mBAAOH,WAAP;AACD,WApBD;;AAsBArB,gBAAM,CAAC+B,IAAP,GAAe,YAAW;AACxB,qBAASA,IAAT,CAAcC,MAAd,EAAsB;AACpB,kBAAIV,CAAJ,EAAOC,GAAP,EAAYU,KAAZ;;AACA,kBAAID,MAAM,CAAChB,MAAP,KAAkB,CAAtB,EAAyB;AACvB,sBAAM,IAAIC,KAAJ,CAAU,sCAAV,CAAN;AACD;;AACD,mBAAKK,CAAC,GAAG,CAAJ,EAAOC,GAAG,GAAGS,MAAM,CAAChB,MAAzB,EAAiCM,CAAC,GAAGC,GAArC,EAA0CD,CAAC,EAA3C,EAA+C;AAC7CW,qBAAK,GAAGD,MAAM,CAACV,CAAD,CAAd;;AACA,oBAAI,EAAG,KAAKW,KAAL,IAAcA,KAAK,IAAI,GAA1B,CAAJ,EAAqC;AACnC,wBAAM,IAAIhB,KAAJ,CAAU,yCAAV,CAAN;AACD;AACF;;AACD,mBAAKe,MAAL,GAAcA,MAAd;AACD;;AAEDD,gBAAI,CAACG,SAAL,CAAeN,IAAf,GAAsB,YAAW;AAC/B,qBAAO,MAAP;AACD,aAFD;;AAIAG,gBAAI,CAACG,SAAL,CAAeC,QAAf,GAA0B,YAAW;AACnC,qBAAO,KAAKH,MAAL,CAAYI,IAAZ,CAAiB,GAAjB,CAAP;AACD,aAFD;;AAIAL,gBAAI,CAACG,SAAL,CAAeG,kBAAf,GAAoC,YAAW;AAC7C,qBAAO,KAAKF,QAAL,EAAP;AACD,aAFD;;AAIAJ,gBAAI,CAACG,SAAL,CAAeI,WAAf,GAA6B,YAAW;AACtC,qBAAO,KAAKN,MAAL,CAAYO,KAAZ,CAAkB,CAAlB,CAAP;AACD,aAFD;;AAIAR,gBAAI,CAACG,SAAL,CAAeL,KAAf,GAAuB,UAASW,KAAT,EAAgBC,SAAhB,EAA2B;AAChD,kBAAIC,GAAJ;;AACA,kBAAID,SAAS,KAAK,KAAK,CAAvB,EAA0B;AACxBC,mBAAG,GAAGF,KAAN,EAAaA,KAAK,GAAGE,GAAG,CAAC,CAAD,CAAxB,EAA6BD,SAAS,GAAGC,GAAG,CAAC,CAAD,CAA5C;AACD;;AACD,kBAAIF,KAAK,CAACZ,IAAN,OAAiB,MAArB,EAA6B;AAC3B,sBAAM,IAAIX,KAAJ,CAAU,qDAAV,CAAN;AACD;;AACD,qBAAOZ,SAAS,CAAC,KAAK2B,MAAN,EAAcQ,KAAK,CAACR,MAApB,EAA4B,CAA5B,EAA+BS,SAA/B,CAAhB;AACD,aATD;;AAWAV,gBAAI,CAACG,SAAL,CAAeS,aAAf,GAA+B;AAC7BC,yBAAW,EAAE,CAAC,CAAC,IAAIb,IAAJ,CAAS,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,CAAT,CAAD,EAAyB,CAAzB,CAAD,CADgB;AAE7Bc,uBAAS,EAAE,CAAC,CAAC,IAAId,IAAJ,CAAS,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,CAAT,CAAD,EAAiC,EAAjC,CAAD,CAFkB;AAG7Be,uBAAS,EAAE,CAAC,CAAC,IAAIf,IAAJ,CAAS,CAAC,GAAD,EAAM,CAAN,EAAS,CAAT,EAAY,CAAZ,CAAT,CAAD,EAA2B,CAA3B,CAAD,CAHkB;AAI7BgB,uBAAS,EAAE,CAAC,CAAC,IAAIhB,IAAJ,CAAS,CAAC,GAAD,EAAM,GAAN,EAAW,CAAX,EAAc,CAAd,CAAT,CAAD,EAA6B,EAA7B,CAAD,CAJkB;AAK7BiB,sBAAQ,EAAE,CAAC,CAAC,IAAIjB,IAAJ,CAAS,CAAC,GAAD,EAAM,CAAN,EAAS,CAAT,EAAY,CAAZ,CAAT,CAAD,EAA2B,CAA3B,CAAD,CALmB;AAM7BkB,6BAAe,EAAE,CAAC,CAAC,IAAIlB,IAAJ,CAAS,CAAC,GAAD,EAAM,EAAN,EAAU,CAAV,EAAa,CAAb,CAAT,CAAD,EAA4B,EAA5B,CAAD,CANY;AAO7B,yBAAW,CAAC,CAAC,IAAIA,IAAJ,CAAS,CAAC,EAAD,EAAK,CAAL,EAAQ,CAAR,EAAW,CAAX,CAAT,CAAD,EAA0B,CAA1B,CAAD,EAA+B,CAAC,IAAIA,IAAJ,CAAS,CAAC,GAAD,EAAM,EAAN,EAAU,CAAV,EAAa,CAAb,CAAT,CAAD,EAA4B,EAA5B,CAA/B,EAAgE,CAAC,IAAIA,IAAJ,CAAS,CAAC,GAAD,EAAM,GAAN,EAAW,CAAX,EAAc,CAAd,CAAT,CAAD,EAA6B,EAA7B,CAAhE,CAPkB;AAQ7BmB,sBAAQ,EAAE,CAAC,CAAC,IAAInB,IAAJ,CAAS,CAAC,GAAD,EAAM,CAAN,EAAS,CAAT,EAAY,CAAZ,CAAT,CAAD,EAA2B,EAA3B,CAAD,EAAiC,CAAC,IAAIA,IAAJ,CAAS,CAAC,GAAD,EAAM,CAAN,EAAS,CAAT,EAAY,CAAZ,CAAT,CAAD,EAA2B,EAA3B,CAAjC,EAAiE,CAAC,IAAIA,IAAJ,CAAS,CAAC,GAAD,EAAM,EAAN,EAAU,EAAV,EAAc,CAAd,CAAT,CAAD,EAA6B,EAA7B,CAAjE,EAAmG,CAAC,IAAIA,IAAJ,CAAS,CAAC,GAAD,EAAM,EAAN,EAAU,GAAV,EAAe,CAAf,CAAT,CAAD,EAA8B,EAA9B,CAAnG,EAAsI,CAAC,IAAIA,IAAJ,CAAS,CAAC,GAAD,EAAM,CAAN,EAAS,GAAT,EAAc,CAAd,CAAT,CAAD,EAA6B,EAA7B,CAAtI,EAAwK,CAAC,IAAIA,IAAJ,CAAS,CAAC,GAAD,EAAM,CAAN,EAAS,CAAT,EAAY,CAAZ,CAAT,CAAD,EAA2B,CAA3B,CAAxK;AARmB,aAA/B;;AAWAA,gBAAI,CAACG,SAAL,CAAeiB,KAAf,GAAuB,YAAW;AAChC,qBAAOnD,MAAM,CAACkB,WAAP,CAAmB,IAAnB,EAAyB,KAAKyB,aAA9B,CAAP;AACD,aAFD;;AAIAZ,gBAAI,CAACG,SAAL,CAAekB,mBAAf,GAAqC,YAAW;AAC9C,qBAAOpD,MAAM,CAACqD,IAAP,CAAYC,KAAZ,CAAkB,YAAa,KAAKnB,QAAL,EAA/B,CAAP;AACD,aAFD;;AAIAJ,gBAAI,CAACG,SAAL,CAAeqB,0BAAf,GAA4C,YAAW;AACrD,kBAAIC,IAAJ,EAAUC,CAAV,EAAanC,CAAb,EAAgBW,KAAhB,EAAuByB,IAAvB,EAA6BC,KAA7B,EAAoCC,SAApC;AACAA,uBAAS,GAAG;AACV,mBAAG,CADO;AAEV,qBAAK,CAFK;AAGV,qBAAK,CAHK;AAIV,qBAAK,CAJK;AAKV,qBAAK,CALK;AAMV,qBAAK,CANK;AAOV,qBAAK,CAPK;AAQV,qBAAK,CARK;AASV,qBAAK;AATK,eAAZ;AAWAJ,kBAAI,GAAG,CAAP;AACAE,kBAAI,GAAG,KAAP;;AACA,mBAAKD,CAAC,GAAGnC,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAI,CAArB,EAAwBmC,CAAC,GAAGnC,CAAC,IAAI,CAAC,CAAlC,EAAqC;AACnCW,qBAAK,GAAG,KAAKD,MAAL,CAAYyB,CAAZ,CAAR;;AACA,oBAAIxB,KAAK,IAAI2B,SAAb,EAAwB;AACtBD,uBAAK,GAAGC,SAAS,CAAC3B,KAAD,CAAjB;;AACA,sBAAIyB,IAAI,IAAIC,KAAK,KAAK,CAAtB,EAAyB;AACvB,2BAAO,IAAP;AACD;;AACD,sBAAIA,KAAK,KAAK,CAAd,EAAiB;AACfD,wBAAI,GAAG,IAAP;AACD;;AACDF,sBAAI,IAAIG,KAAR;AACD,iBATD,MASO;AACL,yBAAO,IAAP;AACD;AACF;;AACD,qBAAO,KAAKH,IAAZ;AACD,aA/BD;;AAiCA,mBAAOzB,IAAP;AAED,WAhGa,EAAd;;AAkGA9B,kBAAQ,GAAG,sBAAX;AAEAC,qBAAW,GAAG;AACZ2D,qBAAS,EAAE,IAAIC,MAAJ,CAAW,MAAM7D,QAAN,GAAiB,KAAjB,GAAyBA,QAAzB,GAAoC,KAApC,GAA4CA,QAA5C,GAAuD,KAAvD,GAA+DA,QAA/D,GAA0E,GAArF,EAA0F,GAA1F,CADC;AAEZ8D,qBAAS,EAAE,IAAID,MAAJ,CAAW,MAAM7D,QAAN,GAAiB,GAA5B,EAAiC,GAAjC;AAFC,WAAd;;AAKAD,gBAAM,CAAC+B,IAAP,CAAYiC,MAAZ,GAAqB,UAASC,MAAT,EAAiB;AACpC,gBAAIpC,KAAJ,EAAWqC,YAAX,EAAyBpD,IAAzB,EAA+BC,KAA/B,EAAsCoD,KAAtC;;AACAD,wBAAY,GAAG,sBAASD,MAAT,EAAiB;AAC9B,kBAAIA,MAAM,CAAC,CAAD,CAAN,KAAc,GAAd,IAAqBA,MAAM,CAAC,CAAD,CAAN,KAAc,GAAvC,EAA4C;AAC1C,uBAAOG,QAAQ,CAACH,MAAD,EAAS,CAAT,CAAf;AACD,eAFD,MAEO;AACL,uBAAOG,QAAQ,CAACH,MAAD,CAAf;AACD;AACF,aAND;;AAOA,gBAAIpC,KAAK,GAAGoC,MAAM,CAACpC,KAAP,CAAa3B,WAAW,CAAC2D,SAAzB,CAAZ,EAAiD;AAC/C,qBAAQ,YAAW;AACjB,oBAAIvC,CAAJ,EAAOC,GAAP,EAAYmB,GAAZ,EAAiB2B,OAAjB;AACA3B,mBAAG,GAAGb,KAAK,CAACU,KAAN,CAAY,CAAZ,EAAe,CAAf,CAAN;AACA8B,uBAAO,GAAG,EAAV;;AACA,qBAAK/C,CAAC,GAAG,CAAJ,EAAOC,GAAG,GAAGmB,GAAG,CAAC1B,MAAtB,EAA8BM,CAAC,GAAGC,GAAlC,EAAuCD,CAAC,EAAxC,EAA4C;AAC1CR,sBAAI,GAAG4B,GAAG,CAACpB,CAAD,CAAV;AACA+C,yBAAO,CAACC,IAAR,CAAaJ,YAAY,CAACpD,IAAD,CAAzB;AACD;;AACD,uBAAOuD,OAAP;AACD,eATM,EAAP;AAUD,aAXD,MAWO,IAAIxC,KAAK,GAAGoC,MAAM,CAACpC,KAAP,CAAa3B,WAAW,CAAC6D,SAAzB,CAAZ,EAAiD;AACtDI,mBAAK,GAAGD,YAAY,CAACrC,KAAK,CAAC,CAAD,CAAN,CAApB;;AACA,kBAAIsC,KAAK,GAAG,UAAR,IAAsBA,KAAK,GAAG,CAAlC,EAAqC;AACnC,sBAAM,IAAIlD,KAAJ,CAAU,uCAAV,CAAN;AACD;;AACD,qBAAS,YAAW;AAClB,oBAAIK,CAAJ,EAAO+C,OAAP;AACAA,uBAAO,GAAG,EAAV;;AACA,qBAAKtD,KAAK,GAAGO,CAAC,GAAG,CAAjB,EAAoBA,CAAC,IAAI,EAAzB,EAA6BP,KAAK,GAAGO,CAAC,IAAI,CAA1C,EAA6C;AAC3C+C,yBAAO,CAACC,IAAR,CAAcH,KAAK,IAAIpD,KAAV,GAAmB,IAAhC;AACD;;AACD,uBAAOsD,OAAP;AACD,eAPO,EAAD,CAODE,OAPC,EAAP;AAQD,aAbM,MAaA;AACL,qBAAO,IAAP;AACD;AACF,WApCD;;AAsCAvE,gBAAM,CAACqD,IAAP,GAAe,YAAW;AACxB,qBAASA,IAAT,CAAcmB,KAAd,EAAqBC,MAArB,EAA6B;AAC3B,kBAAIhB,CAAJ,EAAOnC,CAAP,EAAUoD,CAAV,EAAanD,GAAb,EAAkBT,IAAlB,EAAwB4B,GAAxB;;AACA,kBAAI8B,KAAK,CAACxD,MAAN,KAAiB,EAArB,EAAyB;AACvB,qBAAKwD,KAAL,GAAa,EAAb;;AACA,qBAAKf,CAAC,GAAGnC,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAI,EAArB,EAAyBmC,CAAC,GAAGnC,CAAC,IAAI,CAAlC,EAAqC;AACnC,uBAAKkD,KAAL,CAAWF,IAAX,CAAiBE,KAAK,CAACf,CAAD,CAAL,IAAY,CAAb,GAAkBe,KAAK,CAACf,CAAC,GAAG,CAAL,CAAvC;AACD;AACF,eALD,MAKO,IAAIe,KAAK,CAACxD,MAAN,KAAiB,CAArB,EAAwB;AAC7B,qBAAKwD,KAAL,GAAaA,KAAb;AACD,eAFM,MAEA;AACL,sBAAM,IAAIvD,KAAJ,CAAU,2CAAV,CAAN;AACD;;AACDyB,iBAAG,GAAG,KAAK8B,KAAX;;AACA,mBAAKE,CAAC,GAAG,CAAJ,EAAOnD,GAAG,GAAGmB,GAAG,CAAC1B,MAAtB,EAA8B0D,CAAC,GAAGnD,GAAlC,EAAuCmD,CAAC,EAAxC,EAA4C;AAC1C5D,oBAAI,GAAG4B,GAAG,CAACgC,CAAD,CAAV;;AACA,oBAAI,EAAG,KAAK5D,IAAL,IAAaA,IAAI,IAAI,MAAxB,CAAJ,EAAsC;AACpC,wBAAM,IAAIG,KAAJ,CAAU,yCAAV,CAAN;AACD;AACF;;AACD,kBAAIwD,MAAJ,EAAY;AACV,qBAAKA,MAAL,GAAcA,MAAd;AACD;AACF;;AAEDpB,gBAAI,CAACnB,SAAL,CAAeN,IAAf,GAAsB,YAAW;AAC/B,qBAAO,MAAP;AACD,aAFD;;AAIAyB,gBAAI,CAACnB,SAAL,CAAeC,QAAf,GAA0B,YAAW;AACnC,qBAAO,KAAKE,kBAAL,GAA0BsC,OAA1B,CAAkC,kBAAlC,EAAsD,IAAtD,CAAP;AACD,aAFD;;AAIAtB,gBAAI,CAACnB,SAAL,CAAeI,WAAf,GAA6B,YAAW;AACtC,kBAAIsC,KAAJ,EAAWtD,CAAX,EAAcC,GAAd,EAAmBT,IAAnB,EAAyB4B,GAAzB;AACAkC,mBAAK,GAAG,EAAR;AACAlC,iBAAG,GAAG,KAAK8B,KAAX;;AACA,mBAAKlD,CAAC,GAAG,CAAJ,EAAOC,GAAG,GAAGmB,GAAG,CAAC1B,MAAtB,EAA8BM,CAAC,GAAGC,GAAlC,EAAuCD,CAAC,EAAxC,EAA4C;AAC1CR,oBAAI,GAAG4B,GAAG,CAACpB,CAAD,CAAV;AACAsD,qBAAK,CAACN,IAAN,CAAWxD,IAAI,IAAI,CAAnB;AACA8D,qBAAK,CAACN,IAAN,CAAWxD,IAAI,GAAG,IAAlB;AACD;;AACD,qBAAO8D,KAAP;AACD,aAVD;;AAYAvB,gBAAI,CAACnB,SAAL,CAAeG,kBAAf,GAAoC,YAAW;AAC7C,kBAAIwC,IAAJ,EAAU/D,IAAV,EAAgBgE,MAAhB;;AACAD,kBAAI,GAAK,YAAW;AAClB,oBAAIvD,CAAJ,EAAOC,GAAP,EAAYmB,GAAZ,EAAiB2B,OAAjB;AACA3B,mBAAG,GAAG,KAAK8B,KAAX;AACAH,uBAAO,GAAG,EAAV;;AACA,qBAAK/C,CAAC,GAAG,CAAJ,EAAOC,GAAG,GAAGmB,GAAG,CAAC1B,MAAtB,EAA8BM,CAAC,GAAGC,GAAlC,EAAuCD,CAAC,EAAxC,EAA4C;AAC1CR,sBAAI,GAAG4B,GAAG,CAACpB,CAAD,CAAV;AACA+C,yBAAO,CAACC,IAAR,CAAaxD,IAAI,CAACqB,QAAL,CAAc,EAAd,CAAb;AACD;;AACD,uBAAOkC,OAAP;AACD,eATO,CASLU,IATK,CASA,IATA,CAAD,CASQ3C,IATR,CASa,GATb,CAAP;;AAUA0C,oBAAM,GAAG,EAAT;;AACA,kBAAI,KAAKL,MAAT,EAAiB;AACfK,sBAAM,GAAG,MAAM,KAAKL,MAApB;AACD;;AACD,qBAAOI,IAAI,GAAGC,MAAd;AACD,aAjBD;;AAmBAzB,gBAAI,CAACnB,SAAL,CAAeL,KAAf,GAAuB,UAASW,KAAT,EAAgBC,SAAhB,EAA2B;AAChD,kBAAIC,GAAJ;;AACA,kBAAID,SAAS,KAAK,KAAK,CAAvB,EAA0B;AACxBC,mBAAG,GAAGF,KAAN,EAAaA,KAAK,GAAGE,GAAG,CAAC,CAAD,CAAxB,EAA6BD,SAAS,GAAGC,GAAG,CAAC,CAAD,CAA5C;AACD;;AACD,kBAAIF,KAAK,CAACZ,IAAN,OAAiB,MAArB,EAA6B;AAC3B,sBAAM,IAAIX,KAAJ,CAAU,qDAAV,CAAN;AACD;;AACD,qBAAOZ,SAAS,CAAC,KAAKmE,KAAN,EAAahC,KAAK,CAACgC,KAAnB,EAA0B,EAA1B,EAA8B/B,SAA9B,CAAhB;AACD,aATD;;AAWAY,gBAAI,CAACnB,SAAL,CAAeS,aAAf,GAA+B;AAC7BC,yBAAW,EAAE,CAAC,IAAIS,IAAJ,CAAS,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,CAAT,CAAD,EAAqC,GAArC,CADgB;AAE7BN,uBAAS,EAAE,CAAC,IAAIM,IAAJ,CAAS,CAAC,MAAD,EAAS,CAAT,EAAY,CAAZ,EAAe,CAAf,EAAkB,CAAlB,EAAqB,CAArB,EAAwB,CAAxB,EAA2B,CAA3B,CAAT,CAAD,EAA0C,EAA1C,CAFkB;AAG7BP,uBAAS,EAAE,CAAC,IAAIO,IAAJ,CAAS,CAAC,MAAD,EAAS,CAAT,EAAY,CAAZ,EAAe,CAAf,EAAkB,CAAlB,EAAqB,CAArB,EAAwB,CAAxB,EAA2B,CAA3B,CAAT,CAAD,EAA0C,CAA1C,CAHkB;AAI7BL,sBAAQ,EAAE,CAAC,IAAIK,IAAJ,CAAS,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,CAAT,CAAD,EAAqC,GAArC,CAJmB;AAK7B2B,yBAAW,EAAE,CAAC,IAAI3B,IAAJ,CAAS,CAAC,MAAD,EAAS,CAAT,EAAY,CAAZ,EAAe,CAAf,EAAkB,CAAlB,EAAqB,CAArB,EAAwB,CAAxB,EAA2B,CAA3B,CAAT,CAAD,EAA0C,CAA1C,CALgB;AAM7B4B,wBAAU,EAAE,CAAC,IAAI5B,IAAJ,CAAS,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,MAAhB,EAAwB,CAAxB,EAA2B,CAA3B,CAAT,CAAD,EAA0C,EAA1C,CANiB;AAO7B6B,qBAAO,EAAE,CAAC,IAAI7B,IAAJ,CAAS,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,MAAb,EAAqB,CAArB,EAAwB,CAAxB,EAA2B,CAA3B,CAAT,CAAD,EAA0C,EAA1C,CAPoB;AAQ7B8B,qBAAO,EAAE,CAAC,IAAI9B,IAAJ,CAAS,CAAC,IAAD,EAAO,MAAP,EAAe,CAAf,EAAkB,CAAlB,EAAqB,CAArB,EAAwB,CAAxB,EAA2B,CAA3B,EAA8B,CAA9B,CAAT,CAAD,EAA6C,EAA7C,CARoB;AAS7B,sBAAQ,CAAC,IAAIA,IAAJ,CAAS,CAAC,MAAD,EAAS,CAAT,EAAY,CAAZ,EAAe,CAAf,EAAkB,CAAlB,EAAqB,CAArB,EAAwB,CAAxB,EAA2B,CAA3B,CAAT,CAAD,EAA0C,EAA1C,CATqB;AAU7B+B,oBAAM,EAAE,CAAC,IAAI/B,IAAJ,CAAS,CAAC,MAAD,EAAS,CAAT,EAAY,CAAZ,EAAe,CAAf,EAAkB,CAAlB,EAAqB,CAArB,EAAwB,CAAxB,EAA2B,CAA3B,CAAT,CAAD,EAA0C,EAA1C,CAVqB;AAW7BH,sBAAQ,EAAE,CAAC,CAAC,IAAIG,IAAJ,CAAS,CAAC,MAAD,EAAS,KAAT,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,EAAyB,CAAzB,EAA4B,CAA5B,EAA+B,CAA/B,CAAT,CAAD,EAA8C,EAA9C,CAAD;AAXmB,aAA/B;;AAcAA,gBAAI,CAACnB,SAAL,CAAeiB,KAAf,GAAuB,YAAW;AAChC,qBAAOnD,MAAM,CAACkB,WAAP,CAAmB,IAAnB,EAAyB,KAAKyB,aAA9B,CAAP;AACD,aAFD;;AAIAU,gBAAI,CAACnB,SAAL,CAAemD,mBAAf,GAAqC,YAAW;AAC9C,qBAAO,KAAKlC,KAAL,OAAiB,YAAxB;AACD,aAFD;;AAIAE,gBAAI,CAACnB,SAAL,CAAeoD,aAAf,GAA+B,YAAW;AACxC,kBAAIC,IAAJ,EAAUC,GAAV,EAAe9C,GAAf;;AACA,kBAAI,CAAC,KAAK2C,mBAAL,EAAL,EAAiC;AAC/B,sBAAM,IAAIpE,KAAJ,CAAU,0DAAV,CAAN;AACD;;AACDyB,iBAAG,GAAG,KAAK8B,KAAL,CAAWjC,KAAX,CAAiB,CAAC,CAAlB,CAAN,EAA4BgD,IAAI,GAAG7C,GAAG,CAAC,CAAD,CAAtC,EAA2C8C,GAAG,GAAG9C,GAAG,CAAC,CAAD,CAApD;AACA,qBAAO,IAAI1C,MAAM,CAAC+B,IAAX,CAAgB,CAACwD,IAAI,IAAI,CAAT,EAAYA,IAAI,GAAG,IAAnB,EAAyBC,GAAG,IAAI,CAAhC,EAAmCA,GAAG,GAAG,IAAzC,CAAhB,CAAP;AACD,aAPD;;AASAnC,gBAAI,CAACnB,SAAL,CAAeqB,0BAAf,GAA4C,YAAW;AACrD,kBAAIC,IAAJ,EAAUC,CAAV,EAAanC,CAAb,EAAgBR,IAAhB,EAAsB4C,IAAtB,EAA4BC,KAA5B,EAAmCC,SAAnC;AACAA,uBAAS,GAAG;AACV,mBAAG,EADO;AAEV,uBAAO,EAFG;AAGV,uBAAO,EAHG;AAIV,uBAAO,EAJG;AAKV,uBAAO,EALG;AAMV,uBAAO,EANG;AAOV,uBAAO,EAPG;AAQV,uBAAO,CARG;AASV,uBAAO,CATG;AAUV,uBAAO,CAVG;AAWV,uBAAO,CAXG;AAYV,uBAAO,CAZG;AAaV,uBAAO,CAbG;AAcV,uBAAO,CAdG;AAeV,uBAAO,CAfG;AAgBV,uBAAO,CAhBG;AAiBV,uBAAO;AAjBG,eAAZ;AAmBAJ,kBAAI,GAAG,CAAP;AACAE,kBAAI,GAAG,KAAP;;AACA,mBAAKD,CAAC,GAAGnC,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAI,CAArB,EAAwBmC,CAAC,GAAGnC,CAAC,IAAI,CAAC,CAAlC,EAAqC;AACnCR,oBAAI,GAAG,KAAK0D,KAAL,CAAWf,CAAX,CAAP;;AACA,oBAAI3C,IAAI,IAAI8C,SAAZ,EAAuB;AACrBD,uBAAK,GAAGC,SAAS,CAAC9C,IAAD,CAAjB;;AACA,sBAAI4C,IAAI,IAAIC,KAAK,KAAK,CAAtB,EAAyB;AACvB,2BAAO,IAAP;AACD;;AACD,sBAAIA,KAAK,KAAK,EAAd,EAAkB;AAChBD,wBAAI,GAAG,IAAP;AACD;;AACDF,sBAAI,IAAIG,KAAR;AACD,iBATD,MASO;AACL,yBAAO,IAAP;AACD;AACF;;AACD,qBAAO,MAAMH,IAAb;AACD,aAvCD;;AAyCA,mBAAOH,IAAP;AAED,WArJa,EAAd;;AAuJAlD,kBAAQ,GAAG,mBAAX;AAEAI,mBAAS,GAAG,eAAZ;AAEAH,qBAAW,GAAG;AACZG,qBAAS,EAAE,IAAIuD,MAAJ,CAAWvD,SAAX,EAAsB,GAAtB,CADC;AAEZ,sBAAU,IAAIuD,MAAJ,CAAW,YAAY3D,QAAZ,GAAuB,sBAAvB,GAAgDI,SAAhD,GAA4D,KAAvE,EAA8E,GAA9E,CAFE;AAGZkF,wBAAY,EAAE,IAAI3B,MAAJ,CAAY,UAAU3D,QAAV,GAAqB,aAArB,GAAqCA,QAArC,GAAgD,KAAjD,IAA2DF,QAAQ,GAAG,KAAX,GAAmBA,QAAnB,GAA8B,KAA9B,GAAsCA,QAAtC,GAAiD,KAAjD,GAAyDA,QAApH,KAAiI,MAAMM,SAAN,GAAkB,KAAnJ,CAAX,EAAsK,GAAtK;AAHF,WAAd;;AAMAR,oBAAU,GAAG,oBAASkE,MAAT,EAAiBO,KAAjB,EAAwB;AACnC,gBAAIkB,UAAJ,EAAgBC,SAAhB,EAA2B7E,IAA3B,EAAiC8E,WAAjC,EAA8CC,gBAA9C,EAAgEpB,MAAhE;;AACA,gBAAIR,MAAM,CAAC6B,OAAP,CAAe,IAAf,MAAyB7B,MAAM,CAAC8B,WAAP,CAAmB,IAAnB,CAA7B,EAAuD;AACrD,qBAAO,IAAP;AACD;;AACDtB,kBAAM,GAAG,CAACR,MAAM,CAACpC,KAAP,CAAazB,WAAW,CAAC,WAAD,CAAxB,KAA0C,EAA3C,EAA+C,CAA/C,CAAT;;AACA,gBAAIqE,MAAJ,EAAY;AACVA,oBAAM,GAAGA,MAAM,CAACuB,SAAP,CAAiB,CAAjB,CAAT;AACA/B,oBAAM,GAAGA,MAAM,CAACU,OAAP,CAAe,MAAf,EAAuB,EAAvB,CAAT;AACD;;AACDe,sBAAU,GAAG,CAAb;AACAC,qBAAS,GAAG,CAAC,CAAb;;AACA,mBAAO,CAACA,SAAS,GAAG1B,MAAM,CAAC6B,OAAP,CAAe,GAAf,EAAoBH,SAAS,GAAG,CAAhC,CAAb,KAAoD,CAA3D,EAA8D;AAC5DD,wBAAU;AACX;;AACD,gBAAIzB,MAAM,CAACgC,MAAP,CAAc,CAAd,EAAiB,CAAjB,MAAwB,IAA5B,EAAkC;AAChCP,wBAAU;AACX;;AACD,gBAAIzB,MAAM,CAACgC,MAAP,CAAc,CAAC,CAAf,EAAkB,CAAlB,MAAyB,IAA7B,EAAmC;AACjCP,wBAAU;AACX;;AACD,gBAAIA,UAAU,GAAGlB,KAAjB,EAAwB;AACtB,qBAAO,IAAP;AACD;;AACDqB,4BAAgB,GAAGrB,KAAK,GAAGkB,UAA3B;AACAE,uBAAW,GAAG,GAAd;;AACA,mBAAOC,gBAAgB,EAAvB,EAA2B;AACzBD,yBAAW,IAAI,IAAf;AACD;;AACD3B,kBAAM,GAAGA,MAAM,CAACU,OAAP,CAAe,IAAf,EAAqBiB,WAArB,CAAT;;AACA,gBAAI3B,MAAM,CAAC,CAAD,CAAN,KAAc,GAAlB,EAAuB;AACrBA,oBAAM,GAAGA,MAAM,CAAC1B,KAAP,CAAa,CAAb,CAAT;AACD;;AACD,gBAAI0B,MAAM,CAACA,MAAM,CAACjD,MAAP,GAAgB,CAAjB,CAAN,KAA8B,GAAlC,EAAuC;AACrCiD,oBAAM,GAAGA,MAAM,CAAC1B,KAAP,CAAa,CAAb,EAAgB,CAAC,CAAjB,CAAT;AACD;;AACDiC,iBAAK,GAAI,YAAW;AAClB,kBAAIlD,CAAJ,EAAOC,GAAP,EAAYmB,GAAZ,EAAiB2B,OAAjB;AACA3B,iBAAG,GAAGuB,MAAM,CAACiC,KAAP,CAAa,GAAb,CAAN;AACA7B,qBAAO,GAAG,EAAV;;AACA,mBAAK/C,CAAC,GAAG,CAAJ,EAAOC,GAAG,GAAGmB,GAAG,CAAC1B,MAAtB,EAA8BM,CAAC,GAAGC,GAAlC,EAAuCD,CAAC,EAAxC,EAA4C;AAC1CR,oBAAI,GAAG4B,GAAG,CAACpB,CAAD,CAAV;AACA+C,uBAAO,CAACC,IAAR,CAAaF,QAAQ,CAACtD,IAAD,EAAO,EAAP,CAArB;AACD;;AACD,qBAAOuD,OAAP;AACD,aATO,EAAR;;AAUA,mBAAO;AACLG,mBAAK,EAAEA,KADF;AAELC,oBAAM,EAAEA;AAFH,aAAP;AAID,WAlDD;;AAoDAzE,gBAAM,CAACqD,IAAP,CAAYW,MAAZ,GAAqB,UAASC,MAAT,EAAiB;AACpC,gBAAIY,IAAJ,EAAUvD,CAAV,EAAaC,GAAb,EAAkBM,KAAlB,EAAyBI,KAAzB,EAAgCD,MAAhC,EAAwCyC,MAAxC;;AACA,gBAAIrE,WAAW,CAAC,QAAD,CAAX,CAAsB+F,IAAtB,CAA2BlC,MAA3B,CAAJ,EAAwC;AACtC,qBAAOlE,UAAU,CAACkE,MAAD,EAAS,CAAT,CAAjB;AACD,aAFD,MAEO,IAAIpC,KAAK,GAAGoC,MAAM,CAACpC,KAAP,CAAazB,WAAW,CAAC,cAAD,CAAxB,CAAZ,EAAuD;AAC5DqE,oBAAM,GAAG5C,KAAK,CAAC,CAAD,CAAL,IAAY,EAArB;AACAgD,kBAAI,GAAG9E,UAAU,CAAC8B,KAAK,CAAC,CAAD,CAAL,CAASU,KAAT,CAAe,CAAf,EAAkB,CAAC,CAAnB,IAAwBkC,MAAzB,EAAiC,CAAjC,CAAjB;;AACA,kBAAII,IAAI,CAACL,KAAT,EAAgB;AACdxC,sBAAM,GAAG,CAACoC,QAAQ,CAACvC,KAAK,CAAC,CAAD,CAAN,CAAT,EAAqBuC,QAAQ,CAACvC,KAAK,CAAC,CAAD,CAAN,CAA7B,EAAyCuC,QAAQ,CAACvC,KAAK,CAAC,CAAD,CAAN,CAAjD,EAA6DuC,QAAQ,CAACvC,KAAK,CAAC,CAAD,CAAN,CAArE,CAAT;;AACA,qBAAKP,CAAC,GAAG,CAAJ,EAAOC,GAAG,GAAGS,MAAM,CAAChB,MAAzB,EAAiCM,CAAC,GAAGC,GAArC,EAA0CD,CAAC,EAA3C,EAA+C;AAC7CW,uBAAK,GAAGD,MAAM,CAACV,CAAD,CAAd;;AACA,sBAAI,EAAG,KAAKW,KAAL,IAAcA,KAAK,IAAI,GAA1B,CAAJ,EAAqC;AACnC,2BAAO,IAAP;AACD;AACF;;AACD4C,oBAAI,CAACL,KAAL,CAAWF,IAAX,CAAgBtC,MAAM,CAAC,CAAD,CAAN,IAAa,CAAb,GAAiBA,MAAM,CAAC,CAAD,CAAvC;AACA6C,oBAAI,CAACL,KAAL,CAAWF,IAAX,CAAgBtC,MAAM,CAAC,CAAD,CAAN,IAAa,CAAb,GAAiBA,MAAM,CAAC,CAAD,CAAvC;AACA,uBAAO;AACLwC,uBAAK,EAAEK,IAAI,CAACL,KADP;AAELC,wBAAM,EAAEI,IAAI,CAACJ;AAFR,iBAAP;AAID;AACF;;AACD,mBAAO,IAAP;AACD,WAxBD;;AA0BAzE,gBAAM,CAAC+B,IAAP,CAAYqE,MAAZ,GAAqBpG,MAAM,CAACqD,IAAP,CAAYgD,MAAZ,GAAqB,UAASpC,MAAT,EAAiB;AACzD,mBAAO,KAAKD,MAAL,CAAYC,MAAZ,MAAwB,IAA/B;AACD,WAFD;;AAIAjE,gBAAM,CAAC+B,IAAP,CAAYuE,OAAZ,GAAsB,UAASrC,MAAT,EAAiB;AACrC,gBAAIsC,CAAJ;;AACA,gBAAI;AACF,kBAAI,IAAJ,CAAS,KAAKvC,MAAL,CAAYC,MAAZ,CAAT;AACA,qBAAO,IAAP;AACD,aAHD,CAGE,OAAOuC,MAAP,EAAe;AACfD,eAAC,GAAGC,MAAJ;AACA,qBAAO,KAAP;AACD;AACF,WATD;;AAWAxG,gBAAM,CAAC+B,IAAP,CAAY0E,sBAAZ,GAAqC,UAASxC,MAAT,EAAiB;AACpD,gBAAIjE,MAAM,CAAC+B,IAAP,CAAYuE,OAAZ,CAAoBrC,MAApB,KAA+BA,MAAM,CAACpC,KAAP,CAAa,iBAAb,CAAnC,EAAoE;AAClE,qBAAO,IAAP;AACD,aAFD,MAEO;AACL,qBAAO,KAAP;AACD;AACF,WAND;;AAQA7B,gBAAM,CAACqD,IAAP,CAAYiD,OAAZ,GAAsB,UAASrC,MAAT,EAAiB;AACrC,gBAAIY,IAAJ,EAAU0B,CAAV;;AACA,gBAAI,OAAOtC,MAAP,KAAkB,QAAlB,IAA8BA,MAAM,CAAC6B,OAAP,CAAe,GAAf,MAAwB,CAAC,CAA3D,EAA8D;AAC5D,qBAAO,KAAP;AACD;;AACD,gBAAI;AACFjB,kBAAI,GAAG,KAAKb,MAAL,CAAYC,MAAZ,CAAP;AACA,kBAAI,IAAJ,CAASY,IAAI,CAACL,KAAd,EAAqBK,IAAI,CAACJ,MAA1B;AACA,qBAAO,IAAP;AACD,aAJD,CAIE,OAAO+B,MAAP,EAAe;AACfD,eAAC,GAAGC,MAAJ;AACA,qBAAO,KAAP;AACD;AACF,WAbD;;AAeAxG,gBAAM,CAAC+B,IAAP,CAAYuB,KAAZ,GAAoB,UAASW,MAAT,EAAiB;AACnC,gBAAIO,KAAJ;AACAA,iBAAK,GAAG,KAAKR,MAAL,CAAYC,MAAZ,CAAR;;AACA,gBAAIO,KAAK,KAAK,IAAd,EAAoB;AAClB,oBAAM,IAAIvD,KAAJ,CAAU,iDAAV,CAAN;AACD;;AACD,mBAAO,IAAI,IAAJ,CAASuD,KAAT,CAAP;AACD,WAPD;;AASAxE,gBAAM,CAACqD,IAAP,CAAYC,KAAZ,GAAoB,UAASW,MAAT,EAAiB;AACnC,gBAAIY,IAAJ;AACAA,gBAAI,GAAG,KAAKb,MAAL,CAAYC,MAAZ,CAAP;;AACA,gBAAIY,IAAI,CAACL,KAAL,KAAe,IAAnB,EAAyB;AACvB,oBAAM,IAAIvD,KAAJ,CAAU,iDAAV,CAAN;AACD;;AACD,mBAAO,IAAI,IAAJ,CAAS4D,IAAI,CAACL,KAAd,EAAqBK,IAAI,CAACJ,MAA1B,CAAP;AACD,WAPD;;AASAzE,gBAAM,CAAC+B,IAAP,CAAY2E,SAAZ,GAAwB,UAASzC,MAAT,EAAiB;AACvC,gBAAI0C,UAAJ,EAAgB9E,KAAhB;;AACA,gBAAIA,KAAK,GAAGoC,MAAM,CAACpC,KAAP,CAAa,eAAb,CAAZ,EAA2C;AACzC8E,wBAAU,GAAGvC,QAAQ,CAACvC,KAAK,CAAC,CAAD,CAAN,CAArB;;AACA,kBAAI8E,UAAU,IAAI,CAAd,IAAmBA,UAAU,IAAI,EAArC,EAAyC;AACvC,uBAAO,CAAC,KAAKrD,KAAL,CAAWzB,KAAK,CAAC,CAAD,CAAhB,CAAD,EAAuB8E,UAAvB,CAAP;AACD;AACF;;AACD,kBAAM,IAAI1F,KAAJ,CAAU,yDAAV,CAAN;AACD,WATD;;AAWAjB,gBAAM,CAAC+B,IAAP,CAAY6E,0BAAZ,GAAyC,UAASC,MAAT,EAAiB;AACxD,gBAAIC,gBAAJ,EAAsBC,CAAtB,EAAyB/E,MAAzB;AACA6E,kBAAM,GAAGzC,QAAQ,CAACyC,MAAD,CAAjB;;AACA,gBAAIA,MAAM,GAAG,CAAT,IAAcA,MAAM,GAAG,EAA3B,EAA+B;AAC7B,oBAAM,IAAI5F,KAAJ,CAAU,oCAAV,CAAN;AACD;;AACDe,kBAAM,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,CAAT;AACA+E,aAAC,GAAG,CAAJ;AACAD,4BAAgB,GAAGE,IAAI,CAACC,KAAL,CAAWJ,MAAM,GAAG,CAApB,CAAnB;;AACA,mBAAOE,CAAC,GAAGD,gBAAX,EAA6B;AAC3B9E,oBAAM,CAAC+E,CAAD,CAAN,GAAY,GAAZ;AACAA,eAAC;AACF;;AACD,gBAAID,gBAAgB,GAAG,CAAvB,EAA0B;AACxB9E,oBAAM,CAAC8E,gBAAD,CAAN,GAA2BE,IAAI,CAACE,GAAL,CAAS,CAAT,EAAYL,MAAM,GAAG,CAArB,IAA0B,CAA1B,IAA+B,IAAKA,MAAM,GAAG,CAAxE;AACD;;AACD,mBAAO,IAAI,IAAJ,CAAS7E,MAAT,CAAP;AACD,WAjBD;;AAmBAhC,gBAAM,CAAC+B,IAAP,CAAYoF,wBAAZ,GAAuC,UAASlD,MAAT,EAAiB;AACtD,gBAAIT,IAAJ,EAAU4D,KAAV,EAAiB3D,CAAjB,EAAoB4D,iBAApB,EAAuCrF,MAAvC,EAA+CsF,gBAA/C;;AACA,gBAAI;AACF9D,kBAAI,GAAG,KAAKkD,SAAL,CAAezC,MAAf,CAAP;AACAoD,+BAAiB,GAAG7D,IAAI,CAAC,CAAD,CAAJ,CAAQlB,WAAR,EAApB;AACAgF,8BAAgB,GAAG,KAAKV,0BAAL,CAAgCpD,IAAI,CAAC,CAAD,CAApC,EAAyClB,WAAzC,EAAnB;AACAN,oBAAM,GAAG,EAAT;AACAyB,eAAC,GAAG,CAAJ;;AACA,qBAAOA,CAAC,GAAG,CAAX,EAAc;AACZzB,sBAAM,CAACsC,IAAP,CAAYF,QAAQ,CAACiD,iBAAiB,CAAC5D,CAAD,CAAlB,EAAuB,EAAvB,CAAR,GAAqCW,QAAQ,CAACkD,gBAAgB,CAAC7D,CAAD,CAAjB,EAAsB,EAAtB,CAAR,GAAoC,GAArF;AACAA,iBAAC;AACF;;AACD,qBAAO,IAAI,IAAJ,CAASzB,MAAT,CAAP;AACD,aAXD,CAWE,OAAOwE,MAAP,EAAe;AACfY,mBAAK,GAAGZ,MAAR;AACA,oBAAM,IAAIvF,KAAJ,CAAU,oDAAV,CAAN;AACD;AACF,WAjBD;;AAmBAjB,gBAAM,CAAC+B,IAAP,CAAYwF,sBAAZ,GAAqC,UAAStD,MAAT,EAAiB;AACpD,gBAAIT,IAAJ,EAAU4D,KAAV,EAAiB3D,CAAjB,EAAoB4D,iBAApB,EAAuCrF,MAAvC,EAA+CsF,gBAA/C;;AACA,gBAAI;AACF9D,kBAAI,GAAG,KAAKkD,SAAL,CAAezC,MAAf,CAAP;AACAoD,+BAAiB,GAAG7D,IAAI,CAAC,CAAD,CAAJ,CAAQlB,WAAR,EAApB;AACAgF,8BAAgB,GAAG,KAAKV,0BAAL,CAAgCpD,IAAI,CAAC,CAAD,CAApC,EAAyClB,WAAzC,EAAnB;AACAN,oBAAM,GAAG,EAAT;AACAyB,eAAC,GAAG,CAAJ;;AACA,qBAAOA,CAAC,GAAG,CAAX,EAAc;AACZzB,sBAAM,CAACsC,IAAP,CAAYF,QAAQ,CAACiD,iBAAiB,CAAC5D,CAAD,CAAlB,EAAuB,EAAvB,CAAR,GAAqCW,QAAQ,CAACkD,gBAAgB,CAAC7D,CAAD,CAAjB,EAAsB,EAAtB,CAAzD;AACAA,iBAAC;AACF;;AACD,qBAAO,IAAI,IAAJ,CAASzB,MAAT,CAAP;AACD,aAXD,CAWE,OAAOwE,MAAP,EAAe;AACfY,mBAAK,GAAGZ,MAAR;AACA,oBAAM,IAAIvF,KAAJ,CAAU,oDAAV,CAAN;AACD;AACF,WAjBD;;AAmBAjB,gBAAM,CAACqD,IAAP,CAAYqD,SAAZ,GAAwB,UAASzC,MAAT,EAAiB;AACvC,gBAAI0C,UAAJ,EAAgB9E,KAAhB;;AACA,gBAAIA,KAAK,GAAGoC,MAAM,CAACpC,KAAP,CAAa,eAAb,CAAZ,EAA2C;AACzC8E,wBAAU,GAAGvC,QAAQ,CAACvC,KAAK,CAAC,CAAD,CAAN,CAArB;;AACA,kBAAI8E,UAAU,IAAI,CAAd,IAAmBA,UAAU,IAAI,GAArC,EAA0C;AACxC,uBAAO,CAAC,KAAKrD,KAAL,CAAWzB,KAAK,CAAC,CAAD,CAAhB,CAAD,EAAuB8E,UAAvB,CAAP;AACD;AACF;;AACD,kBAAM,IAAI1F,KAAJ,CAAU,yDAAV,CAAN;AACD,WATD;;AAWAjB,gBAAM,CAACsG,OAAP,GAAiB,UAASrC,MAAT,EAAiB;AAChC,mBAAOjE,MAAM,CAACqD,IAAP,CAAYiD,OAAZ,CAAoBrC,MAApB,KAA+BjE,MAAM,CAAC+B,IAAP,CAAYuE,OAAZ,CAAoBrC,MAApB,CAAtC;AACD,WAFD;;AAIAjE,gBAAM,CAACsD,KAAP,GAAe,UAASW,MAAT,EAAiB;AAC9B,gBAAIjE,MAAM,CAACqD,IAAP,CAAYiD,OAAZ,CAAoBrC,MAApB,CAAJ,EAAiC;AAC/B,qBAAOjE,MAAM,CAACqD,IAAP,CAAYC,KAAZ,CAAkBW,MAAlB,CAAP;AACD,aAFD,MAEO,IAAIjE,MAAM,CAAC+B,IAAP,CAAYuE,OAAZ,CAAoBrC,MAApB,CAAJ,EAAiC;AACtC,qBAAOjE,MAAM,CAAC+B,IAAP,CAAYuB,KAAZ,CAAkBW,MAAlB,CAAP;AACD,aAFM,MAEA;AACL,oBAAM,IAAIhD,KAAJ,CAAU,sDAAV,CAAN;AACD;AACF,WARD;;AAUAjB,gBAAM,CAAC0G,SAAP,GAAmB,UAASzC,MAAT,EAAiB;AAClC,gBAAIsC,CAAJ;;AACA,gBAAI;AACF,qBAAOvG,MAAM,CAACqD,IAAP,CAAYqD,SAAZ,CAAsBzC,MAAtB,CAAP;AACD,aAFD,CAEE,OAAOuC,MAAP,EAAe;AACfD,eAAC,GAAGC,MAAJ;;AACA,kBAAI;AACF,uBAAOxG,MAAM,CAAC+B,IAAP,CAAY2E,SAAZ,CAAsBzC,MAAtB,CAAP;AACD,eAFD,CAEE,OAAOuC,MAAP,EAAe;AACfD,iBAAC,GAAGC,MAAJ;AACA,sBAAM,IAAIvF,KAAJ,CAAU,2DAAV,CAAN;AACD;AACF;AACF,WAbD;;AAeAjB,gBAAM,CAACwH,aAAP,GAAuB,UAAS5C,KAAT,EAAgB;AACrC,gBAAI5D,MAAJ;AACAA,kBAAM,GAAG4D,KAAK,CAAC5D,MAAf;;AACA,gBAAIA,MAAM,KAAK,CAAf,EAAkB;AAChB,qBAAO,IAAIhB,MAAM,CAAC+B,IAAX,CAAgB6C,KAAhB,CAAP;AACD,aAFD,MAEO,IAAI5D,MAAM,KAAK,EAAf,EAAmB;AACxB,qBAAO,IAAIhB,MAAM,CAACqD,IAAX,CAAgBuB,KAAhB,CAAP;AACD,aAFM,MAEA;AACL,oBAAM,IAAI3D,KAAJ,CAAU,8DAAV,CAAN;AACD;AACF,WAVD;;AAYAjB,gBAAM,CAACyH,OAAP,GAAiB,UAASxD,MAAT,EAAiB;AAChC,gBAAIY,IAAJ;AACAA,gBAAI,GAAG,KAAKvB,KAAL,CAAWW,MAAX,CAAP;;AACA,gBAAIY,IAAI,CAACjD,IAAL,OAAgB,MAAhB,IAA0BiD,IAAI,CAACQ,mBAAL,EAA9B,EAA0D;AACxD,qBAAOR,IAAI,CAACS,aAAL,EAAP;AACD,aAFD,MAEO;AACL,qBAAOT,IAAP;AACD;AACF,WARD;AAUD,SA/mBD,EA+mBGE,IA/mBH,CA+mBQ,IA/mBR;;OAAA,E,IAAA,C,IAAA,E;;qBAAA;;;;;;;;;;;;;;;;ACEA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAEA;;;;;;;AAMO;AAAA,YAAM2C,eAAN;AADP;AAAA;;AAAA;;AAiBG,iBAAAC,kBAAA,GAAqB,UAACC,SAAD,EAAuB;AACzC,kBAAMC,SAAS,GAAWD,SAAS,CAACE,IAAV,EAA1B;AACA,qBAAO,+CAAKxB,OAAL,CAAauB,SAAb,KAA2B,KAAI,CAACE,gBAAL,CAAsBF,SAAtB,CAAlC;AACF,aAHD;;AAKA,iBAAAG,kBAAA,GAAqB,UAACJ,SAAD,EAAkE;AAAA,kBAA9CK,eAA8C,uEAAnB,KAAmB;;AACpF,kBAAI,CAACL,SAAL,EAAgB;AACb,uBAAO,KAAP;AACF;;AAED,kBAAI/C,IAAI,GAAW+C,SAAS,CAACE,IAAV,EAAnB;;AAEA,kBAAIG,eAAJ,EAAqB;AAClB,oBAAMC,cAAc,GAAWrD,IAAI,CAACiB,OAAL,CAAa,GAAb,CAA/B;;AAEA,oBAAIoC,cAAc,GAAG,CAAC,CAAtB,EAAyB;AACtB,sBAAM3H,SAAS,GAAWsE,IAAI,CAACmB,SAAL,CAAekC,cAAc,GAAG,CAAhC,CAA1B;;AAEA,sBAAI,CAACR,eAAe,CAACS,iBAAhB,CAAkChC,IAAlC,CAAuC5F,SAAvC,CAAL,EAAwD;AACrD,2BAAO,KAAP;AACF;;AAEDsE,sBAAI,GAAGA,IAAI,CAACmB,SAAL,CAAe,CAAf,EAAkBkC,cAAlB,CAAP;AACF;AACH;;AAED,kBAAI,CAAC,+CAAK5B,OAAL,CAAazB,IAAb,CAAL,EAAyB;AACtB,uBAAO,KAAP;AACF;;AAED,qBAAO,CAAC,KAAI,CAACuD,kBAAL,CAAwBvD,IAAxB,EAA8B6C,eAAe,CAACW,kCAA9C,CAAD,IACE,CAAC,KAAI,CAACD,kBAAL,CAAwBvD,IAAxB,EAA8B6C,eAAe,CAACY,qBAA9C,CADV;AAEF,aA3BD;AA6BA;;;;;;;;;AAOA,iBAAAC,gBAAA,GAAmB,UAACC,cAAD,EAAyBC,eAAzB,EAAkDC,UAAlD,EAAyE;AACzF,kBAAI,CAAC,KAAI,CAACf,kBAAL,CAAwBa,cAAxB,CAAD,IACK,CAAC,KAAI,CAACb,kBAAL,CAAwBc,eAAxB,CADN,IAEK,CAAC,KAAI,CAACE,iBAAL,CAAuBD,UAAvB,CAFV,EAE8C;AAC3C,uBAAO,KAAP;AACF;;AAED,kBAAME,YAAY,GAAaJ,cAAc,CAACtC,KAAf,CAAqBwB,eAAe,CAACmB,cAArC,CAA/B;AACA,kBAAMC,aAAa,GAAaL,eAAe,CAACvC,KAAhB,CAAsBwB,eAAe,CAACmB,cAAtC,CAAhC;AACA,kBAAME,WAAW,GAAa,KAAI,CAACC,MAAL,CAAYN,UAAZ,IACtB,KAAI,CAACO,eAAL,CAAqB,CAACP,UAAtB,EAAkCxC,KAAlC,CAAwCwB,eAAe,CAACmB,cAAxD,CADsB,GAEtBH,UAAU,CAACxC,KAAX,CAAiBwB,eAAe,CAACmB,cAAjC,CAFR,CATyF,CAazF;;AACA;;AACA,mBAAK,IAAIpF,CAAC,GAAW,CAArB,EAAwBA,CAAC,GAAG,CAA5B,EAA+BA,CAAC,EAAhC,EAAoC;AACjC,oBAAI,CAAC,CAACmF,YAAY,CAACnF,CAAD,CAAb,GAAmB,CAACsF,WAAW,CAACtF,CAAD,CAAhC,OAA0C,CAACqF,aAAa,CAACrF,CAAD,CAAd,GAAoB,CAACsF,WAAW,CAACtF,CAAD,CAA1E,CAAJ,EAAoF;AACjF,yBAAO,KAAP;AACF;AACH;;AAED,qBAAO,IAAP;AACF,aAtBD;AA4BA;;;;;;;;;AAOA,iBAAAyF,gBAAA,GAAmB,UAACV,cAAD,EAAyBC,eAAzB,EAAkD5B,MAAlD,EAAqE;AACrF;AACA;AACA;AACA,qBAAO,IAAP;AACF,aALD;AAMA;;;;;;AAIA,iBAAAsC,cAAA,GAAiB,UAACvB,SAAD,EAAuB;AACrC,qBAAO,KAAI,CAACI,kBAAL,CAAwBJ,SAAxB,KAAsC,KAAI,CAACD,kBAAL,CAAwBC,SAAxB,CAA7C;AACF,aAFD;;AAIA,iBAAAwB,iBAAA,GAAoB,UAACxB,SAAD,EAAuB;AACxC,kBAAI,CAACA,SAAD,IAAe,CAAC,KAAI,CAACD,kBAAL,CAAwBC,SAAxB,CAAD,IAAuC,CAAC,KAAI,CAACI,kBAAL,CAAwBJ,SAAxB,CAA3D,EAAgG;AAC7F,uBAAOA,SAAP;AACF;;AAED,kBAAMyB,aAAa,GAAgB,wDAAMzB,SAAN,CAAnC;AACA,qBAAQ,OAAOyB,aAAa,CAAChH,kBAArB,KAA4C,WAA7C,GACCgH,aAAa,CAAChH,kBAAd,EADD,GACsCuF,SAD7C;AAEF,aARD;;AAUA,iBAAAG,gBAAA,GAAmB,UAACH,SAAD,EAAuB;AACvC,kBAAM0B,cAAc,GAAa1B,SAAS,CAAC1B,KAAV,CAAgBwB,eAAe,CAACmB,cAAhC,CAAjC;;AACA,kBAAIS,cAAc,CAACtI,MAAf,KAA0B,CAA9B,EAAiC;AAC9B,uBAAO,KAAP;AACF;;AAED,qBAAOsI,cAAc,CAACC,KAAf,CAAqB,UAACC,IAAD;AAAA,uBAAU,CAACA,IAAD,IAAS,CAAT,IAAc,CAACA,IAAD,IAAS,GAAjC;AAAA,eAArB,CAAP;AACF,aAPD;;AASA,iBAAAC,kBAAA,GAAqB,UAACC,QAAD,EAA+B;AACjD,kBAAMC,UAAU,GAAaD,QAAQ,CAACxD,KAAT,CAAe,GAAf,CAA7B;AACA,kBAAME,MAAM,GAAY,wDAAMuD,UAAU,CAAC,CAAD,CAAhB,aAAgC,8CAAxD,CAFiD,CAGjD;AACA;;AACA,kBAAMC,oBAAoB,GAAWxD,MAAM,GAAG,CAAH,GAAO,EAAlD;AACA,kBAAM1E,MAAM,GAAW,CAACiI,UAAU,CAAC,CAAD,CAAlC;;AAEA,kBAAIE,KAAK,CAACnI,MAAD,CAAT,EAAmB;AAChB,uBAAO,KAAP;AACF,eAVgD,CAWjD;AACA;;;AAEA,kBAAK0E,MAAM,IAAI1E,MAAM,KAAK,EAAtB,IAA8B,CAAC0E,MAAD,IAAW1E,MAAM,KAAK,GAAxD,EAA8D;AAC3D,uBAAO,IAAP;AACF;;AAED,kBAAK0E,MAAM,IAAI,CAAC,KAAI,CAAC0D,aAAL,CAAmBpI,MAAnB,CAAZ,IAA4C,CAAC0E,MAAD,IAAW,CAAC,KAAI,CAAC2D,mBAAL,CAAyBrI,MAAM,CAACS,QAAP,EAAzB,CAA5D,EAA0G;AACvG,uBAAO,KAAP;AACF;;AACD,kBAAM6H,UAAU,GAAWtI,MAAM,GAAGkI,oBAApC;AACA,kBAAMK,uBAAuB,GAAWjD,IAAI,CAACC,KAAL,CAAWvF,MAAM,GAAGkI,oBAApB,CAAxC;;AAEA,kBAAMM,SAAS,GAAa,KAAI,CAACC,YAAL,CAAkBR,UAAU,CAAC,CAAD,CAA5B,CAA5B;;AACA,kBAAIO,SAAS,CAAClJ,MAAV,KAAqB,CAArB,IAA0BkJ,SAAS,CAACE,IAAV,CAAe,UAAAC,GAAG;AAAA,uBAAIR,KAAK,CAACQ,GAAD,CAAT;AAAA,eAAlB,CAA9B,EAAiE;AAC9D,uBAAO,KAAP;AACF,eA3BgD,CA4BjD;AACA;;;AACA,kBAAIH,SAAS,CAACE,IAAV,CAAe,UAACC,GAAD,EAAMC,KAAN;AAAA,uBAAgBD,GAAG,KAAK,CAAR,IAAaC,KAAK,GAAGL,uBAArC;AAAA,eAAf,CAAJ,EAAkF;AAC/E,uBAAO,KAAP;AACF,eAhCgD,CAkCjD;AACA;AACA;;;AACA,kBAAIM,gBAAgB,GAAW,CAA/B;;AACA,mBAAK,IAAI9G,CAAC,GAAW,CAArB,EAAwBA,CAAC,IAAIuG,UAA7B,EAAyCvG,CAAC,EAA1C,EAA8C;AAC3C8G,gCAAgB,IAAIvD,IAAI,CAACE,GAAL,CAAS,CAAT,EAAY0C,oBAAoB,GAAGnG,CAAnC,CAApB;AACF,eAxCgD,CAyCjD;;;AACA,kBAAI,CAAC8G,gBAAgB,GAAGL,SAAS,CAACD,uBAAD,CAA7B,IAA0DM,gBAA9D,EAAgF;AAC7E,uBAAO,KAAP;AACF;;AACD,qBAAO,IAAP;AACF,aA9CD;;AAgDQ,iBAAAJ,YAAA,GAAe,UAACK,KAAD,EAA6B;AACjD,kBAAMC,EAAE,GAAgB,wDAAMD,KAAN,CAAxB;;AACA,kBAAIC,EAAE,YAAY,8CAAlB,EAAwB;AACrB,uBAAOA,EAAE,GAAGA,EAAE,CAAC,QAAD,CAAL,GAAkB,EAA3B;AACF;;AACD,qBAAOA,EAAE,GAAGA,EAAE,CAAC,OAAD,CAAL,GAAiB,EAA1B;AACF,aANO;;AAQR,iBAAAV,mBAAA,GAAsB,UAAClD,MAAD,EAAoB;AACvC,qBAAO,CAACA,MAAD,IAAW,CAAX,IAAgB,CAACA,MAAD,IAAW,GAAlC;AACF,aAFD;;AAIA,iBAAAiD,aAAA,GAAgB,UAACpI,MAAD,EAAoB;AACjC,qBAAOA,MAAM,IAAI,CAAV,IAAeA,MAAM,IAAI,EAAhC;AACF,aAFD;;AAIA,iBAAAiH,iBAAA,GAAoB,UAACD,UAAD,EAAwB;AACzC,kBAAI,CAACA,UAAL,EAAiB;AACd,uBAAO,KAAP;AACF,eAHwC,CAKzC;;;AACA,kBAAI,CAACA,UAAD,IAAe,CAAf,IAAoB,CAACA,UAAD,IAAe,EAAvC,EAA2C;AACxC,uBAAO,IAAP;AACF,eARwC,CAUzC;AACA;AACA;;;AACA,kBAAMgC,SAAS,GAAa,EAA5B;AACAhC,wBAAU,CAACxC,KAAX,CAAiBwB,eAAe,CAACmB,cAAjC,EAAiD8B,OAAjD,CAAyD,UAAC1I,KAAD,EAAW;AACjE,oBAAI,CAAC,CAACA,KAAN,EAAa;AACVyI,2BAAS,CAACpG,IAAV,CAAesG,MAAM,CAAC3I,KAAD,CAArB;AACF;AACH,eAJD,EAdyC,CAoBzC;;AACA,kBAAIyI,SAAS,CAAC1J,MAAV,KAAqB,CAArB,IAA0B0J,SAAS,CAAC,CAAD,CAAT,KAAiB,CAA/C,EAAkD;AAC/C,uBAAO,KAAP;AACF,eAvBwC,CAyBzC;;;AACA,kBAAIG,oBAAoB,GAAW,CAAnC;;AAEA,4CAAuBH,SAAvB,gCAAkC;AAA7B,oBAAMI,QAAQ,iBAAd;;AACF,oBAAIA,QAAQ,KAAKpD,eAAe,CAACqD,0BAAjC,EAA6D;AAC1D;AACF,iBAFD,MAEO;AACJF,sCAAoB;AACtB;AACH,eAlCwC,CAoCzC;;;AACA,kBAAIA,oBAAoB,KAAKH,SAAS,CAAC1J,MAAvC,EAA+C;AAC5C,uBAAO,IAAP;AACF,eAvCwC,CAyCzC;;;AACA,kBAAI0G,eAAe,CAACsD,6BAAhB,CAA8ClF,OAA9C,CAAsD4E,SAAS,CAACG,oBAAD,CAA/D,MAA2F,CAAC,CAAhG,EAAmG;AAChG,uBAAO,KAAP;AACF,eA5CwC,CA8CzC;;;AACA,mBAAK,IAAI9D,CAAC,GAAW8D,oBAAoB,GAAG,CAA5C,EAA+C9D,CAAC,GAAG2D,SAAS,CAAC1J,MAA7D,EAAqE+F,CAAC,EAAtE,EAA0E;AACvE,oBAAI2D,SAAS,CAAC3D,CAAD,CAAT,KAAiB,CAArB,EAAwB;AACrB,yBAAO,KAAP;AACF;AACH;;AAED,qBAAO,IAAP;AACF,aAtDD;AA8EA;;;;;;;;;;AAQA,iBAAAqB,kBAAA,GAAqB,UAAC6C,KAAD,EAAgBC,KAAhB,EAAkC;AACpD,qBAAO,KAAI,CAACC,wBAAL,CAA8BF,KAA9B,MAAyC,KAAI,CAACE,wBAAL,CAA8BD,KAA9B,CAAhD;AACF,aAFD;AAIA;;;;;;;AAKA,iBAAAC,wBAAA,GAA2B,UAACvD,SAAD,EAAuB;AAC/C,kBAAI/C,IAAI,GAAgB,wDAAM+C,SAAN,CAAxB;;AAEA,kBAAI/C,IAAI,YAAY,8CAApB,EAA0B;AACvBA,oBAAI,GAAGA,IAAI,CAACzB,mBAAL,EAAP;AACF;;AAED,qBAAOyB,IAAI,CAACxC,kBAAL,EAAP;AACF,aARD;;AAUA,iBAAAiB,KAAA,GAAQ,UAAC8H,aAAD,EAA2B;AAChC,kBAAMC,cAAc,GAAQ,KAAI,CAACC,WAAL,CAAiBF,aAAjB,CAA5B;;AACA,kBAAMG,UAAU,GAAQ,KAAI,CAACC,SAAL,CAAeH,cAAc,CAACI,IAA9B,CAAxB;;AACA,kBAAMC,aAAa,GAAQ,KAAI,CAACC,YAAL,CAAkBN,cAAc,CAAClK,OAAjC,CAA3B;;AAEA,kBAAIoK,UAAU,CAACK,KAAX,IAAoBF,aAAa,CAACE,KAAtC,EAA6C;AAC1C,uBAAO,KAAI,CAACC,cAAL,CAAoBH,aAAa,CAACvK,OAAlC,EAA2CoK,UAAU,CAACE,IAAtD,CAAP;AACF,eAFD,MAEO;AACJ,uBAAO,IAAP;AACF;AACH,aAVD;;AAYA,iBAAAH,WAAA,GAAc,UAACF,aAAD,EAA2B;AACtC,kBAAM5G,KAAK,GAAa4G,aAAa,CAAClF,KAAd,CAAoB,GAApB,CAAxB;;AAEA,kBAAI1B,KAAK,CAACxD,MAAN,GAAe,CAAnB,EAAsB;AACnB,uBAAO,KAAI,CAAC8K,eAAL,CAAqBV,aAArB,CAAP;AACF,eAFD,MAEO;AACJ,uBAAO;AACJjK,yBAAO,EAAEqD,KAAK,CAAC,CAAD,CADV;AAEJiH,sBAAI,EAAEjH,KAAK,CAAC,CAAD;AAFP,iBAAP;AAIF;AACH,aAXD;;AAaA,iBAAAsH,eAAA,GAAkB,UAAC3K,OAAD,EAAqB;AACpC,kBAAMU,KAAK,GAA2B6F,eAAe,CAACqE,6BAAhB,CAA8CC,IAA9C,CAAmD7K,OAAnD,CAAtC;;AACA,kBAAIU,KAAJ,EAAW;AACR,uBAAO;AACJV,yBAAO,EAAEU,KAAK,CAAC,CAAD,CADV;AAEJ4J,sBAAI,EAAE5J,KAAK,CAAC,CAAD;AAFP,iBAAP;AAIF,eALD,MAKO;AACJ,uBAAO;AACJV,yBAAO,EAAEA;AADL,iBAAP;AAGF;AACH,aAZD;;AAcA,iBAAAwK,YAAA,GAAe,UAACxK,OAAD,EAAyD;AACrE,kBAAI,CAAC,+CAAKmF,OAAL,CAAanF,OAAb,CAAD,IAA0B,CAAC,+CAAKmF,OAAL,CAAanF,OAAb,CAA/B,EAAsD;AACnD,uBAAO;AAACyK,uBAAK,EAAE;AAAR,iBAAP;AACF;;AAED,qBAAO;AACJA,qBAAK,EAAE,IADH;AAEJzK,uBAAO,EAAE,wDAAMA,OAAN,EAAegB,QAAf;AAFL,eAAP;AAIF,aATD;;AAWA,iBAAAqJ,SAAA,GAAY,UAACC,IAAD,EAAkB;AAC3B,kBAAIA,IAAI,KAAKQ,SAAb,EAAwB;AACrB,uBAAO;AAACL,uBAAK,EAAE,IAAR;AAAcH,sBAAI,EAAEQ;AAApB,iBAAP;AACF;;AAED,kBAAI,CAACvE,eAAe,CAACwE,YAAhB,CAA6B/F,IAA7B,CAAkCsF,IAAlC,CAAL,EAA8C;AAC3C,uBAAO;AAACG,uBAAK,EAAE;AAAR,iBAAP;AACF;;AAED,kBAAMO,UAAU,GAAW/H,QAAQ,CAACqH,IAAD,EAAO,EAAP,CAAnC;;AACA,kBAAIU,UAAU,IAAI,CAAlB,EAAqB;AAClB,uBAAO;AAACP,uBAAK,EAAE;AAAR,iBAAP;AACF,eAFD,MAEO,IAAIO,UAAU,IAAIzE,eAAe,CAAC0E,QAAlC,EAA4C;AAChD,uBAAO;AAACR,uBAAK,EAAE;AAAR,iBAAP;AACF,eAFM,MAEA;AACJ,uBAAO;AAACA,uBAAK,EAAE,IAAR;AAAcH,sBAAI,EAAEU;AAApB,iBAAP;AACF;AACH,aAjBD;;AAmBA,iBAAAN,cAAA,GAAiB,UAAC1K,OAAD,EAAkBsK,IAAlB,EAAmC;AACjD,qBAAO;AACJtK,uBAAO,EAAEA,OADL;AAEJsK,oBAAI,EAAEA;AAFF,eAAP;AAIF,aALD;AA4BF;;AAvYM;AAAA;AAAA,mBAiFI,gBAAOY,IAAP,EAAmB;AACxB,qBAAO,CAACxC,KAAK,CAAC,CAACwC,IAAF,CAAb;AACF;AAkKD;;;;;AArPI;AAAA;AAAA,mBAyPJ,yBAAgB7I,IAAhB,EAA4B;AACzB,kBAAI,CAAC,KAAKmF,iBAAL,CAAuB2D,MAAM,CAAC9I,IAAD,CAA7B,CAAL,EAA2C;AACxC,uBAAO,EAAP;AACF;;AACD,kBAAM+I,uBAAuB,GAAW,CAAxC;AACA,kBAAM7K,MAAM,GAAa,EAAzB;;AACA,mBAAK,IAAI+B,CAAC,GAAW,CAArB,EAAwBA,CAAC,GAAGuD,IAAI,CAACC,KAAL,CAAWzD,IAAI,GAAG+I,uBAAlB,CAA5B,EAAwE9I,CAAC,EAAzE,EAA6E;AAC1E/B,sBAAM,CAAC4C,IAAP,CAAYoD,eAAe,CAACqD,0BAA5B;AACF;;AACD,kBAAIvH,IAAI,GAAG+I,uBAAP,KAAmC,CAAvC,EAA0C;AACvC7K,sBAAM,CAAC4C,IAAP,CAAYoD,eAAe,CAACsD,6BAAhB,CAA8CxH,IAAI,GAAG+I,uBAAP,GAAiC,CAA/E,CAAZ;AACF;;AACD,qBAAO7K,MAAM,CAACV,MAAP,GAAgB,CAAvB,EAA0B;AACvBU,sBAAM,CAAC4C,IAAP,CAAYoD,eAAe,CAACsD,6BAAhB,CAA8C,CAA9C,CAAZ;AACF;;AACD,qBAAOtJ,MAAM,CAACU,IAAP,CAAYsF,eAAe,CAACmB,cAA5B,CAAP;AACF;AAyGD;;;;;;;;;;;;AAlXI;AAAA;AAAA,mBA6XJ,gCAAuB1H,OAAvB,EAAwE;AAAA,kBAAzBqL,YAAyB,uEAAF,EAAE;;AACrE,kBAAI,CAACrL,OAAD,IACEqL,YAAY,KAAK9E,eAAe,CAAC+E,6BADnC,IAEEtL,OAAO,CAACH,MAAR,GAAiB,CAFvB,EAE0B;AACvB,uBAAO,KAAP;AACF;;AAED,kBAAM0L,eAAe,GAAWtI,QAAQ,CAACjD,OAAO,CAAC8E,MAAR,CAAe,CAAf,EAAkB,CAAlB,CAAD,EAAuB,EAAvB,CAAxC;AACA,qBAAO,CAACyG,eAAe,GAAG,MAAnB,MAA+B,MAAtC;AACF;AAtYG;;AAAA;AAAA;;AAEoB,wBAAA3B,0BAAA,GAAqC,GAArC;AAEA,wBAAAC,6BAAA,GAA0C,CAAC,CAAD,EAAI,GAAJ,EAAS,GAAT,EAAc,GAAd,EAAmB,GAAnB,EAAwB,GAAxB,EAA6B,GAA7B,EAAkC,GAAlC,CAA1C;AACA,wBAAAoB,QAAA,GAAmBpF,IAAI,CAACE,GAAL,CAAS,CAAT,EAAY,EAAZ,CAAnB,CALpB,CAOJ;;AACwB,wBAAA6E,6BAAA,GAAwC,IAAIjI,MAAJ,CAAW,wBAAX,CAAxC;AACA,wBAAAoI,YAAA,GAAuB,IAAIpI,MAAJ,CAAW,QAAX,CAAvB;AACA,wBAAAqE,iBAAA,GAA6B,IAAIrE,MAAJ,CAAW,OAAX,CAA7B;AACA,wBAAA2I,6BAAA,GAAwC,EAAxC;AACA,wBAAApE,kCAAA,GAA6C,IAA7C;AACA,wBAAAC,qBAAA,GAAgC,KAAhC;AACA,wBAAAO,cAAA,GAAyB,GAAzB;;OAdpB","file":"65-es5.js","sourcesContent":["(function() {\n  var expandIPv6, ipaddr, ipv4Part, ipv4Regexes, ipv6Part, ipv6Regexes, matchCIDR, root, zoneIndex;\n\n  ipaddr = {};\n\n  root = this;\n\n  if ((typeof module !== \"undefined\" && module !== null) && module.exports) {\n    module.exports = ipaddr;\n  } else {\n    root['ipaddr'] = ipaddr;\n  }\n\n  matchCIDR = function(first, second, partSize, cidrBits) {\n    var part, shift;\n    if (first.length !== second.length) {\n      throw new Error(\"ipaddr: cannot match CIDR for objects with different lengths\");\n    }\n    part = 0;\n    while (cidrBits > 0) {\n      shift = partSize - cidrBits;\n      if (shift < 0) {\n        shift = 0;\n      }\n      if (first[part] >> shift !== second[part] >> shift) {\n        return false;\n      }\n      cidrBits -= partSize;\n      part += 1;\n    }\n    return true;\n  };\n\n  ipaddr.subnetMatch = function(address, rangeList, defaultName) {\n    var k, len, rangeName, rangeSubnets, subnet;\n    if (defaultName == null) {\n      defaultName = 'unicast';\n    }\n    for (rangeName in rangeList) {\n      rangeSubnets = rangeList[rangeName];\n      if (rangeSubnets[0] && !(rangeSubnets[0] instanceof Array)) {\n        rangeSubnets = [rangeSubnets];\n      }\n      for (k = 0, len = rangeSubnets.length; k < len; k++) {\n        subnet = rangeSubnets[k];\n        if (address.kind() === subnet[0].kind()) {\n          if (address.match.apply(address, subnet)) {\n            return rangeName;\n          }\n        }\n      }\n    }\n    return defaultName;\n  };\n\n  ipaddr.IPv4 = (function() {\n    function IPv4(octets) {\n      var k, len, octet;\n      if (octets.length !== 4) {\n        throw new Error(\"ipaddr: ipv4 octet count should be 4\");\n      }\n      for (k = 0, len = octets.length; k < len; k++) {\n        octet = octets[k];\n        if (!((0 <= octet && octet <= 255))) {\n          throw new Error(\"ipaddr: ipv4 octet should fit in 8 bits\");\n        }\n      }\n      this.octets = octets;\n    }\n\n    IPv4.prototype.kind = function() {\n      return 'ipv4';\n    };\n\n    IPv4.prototype.toString = function() {\n      return this.octets.join(\".\");\n    };\n\n    IPv4.prototype.toNormalizedString = function() {\n      return this.toString();\n    };\n\n    IPv4.prototype.toByteArray = function() {\n      return this.octets.slice(0);\n    };\n\n    IPv4.prototype.match = function(other, cidrRange) {\n      var ref;\n      if (cidrRange === void 0) {\n        ref = other, other = ref[0], cidrRange = ref[1];\n      }\n      if (other.kind() !== 'ipv4') {\n        throw new Error(\"ipaddr: cannot match ipv4 address with non-ipv4 one\");\n      }\n      return matchCIDR(this.octets, other.octets, 8, cidrRange);\n    };\n\n    IPv4.prototype.SpecialRanges = {\n      unspecified: [[new IPv4([0, 0, 0, 0]), 8]],\n      broadcast: [[new IPv4([255, 255, 255, 255]), 32]],\n      multicast: [[new IPv4([224, 0, 0, 0]), 4]],\n      linkLocal: [[new IPv4([169, 254, 0, 0]), 16]],\n      loopback: [[new IPv4([127, 0, 0, 0]), 8]],\n      carrierGradeNat: [[new IPv4([100, 64, 0, 0]), 10]],\n      \"private\": [[new IPv4([10, 0, 0, 0]), 8], [new IPv4([172, 16, 0, 0]), 12], [new IPv4([192, 168, 0, 0]), 16]],\n      reserved: [[new IPv4([192, 0, 0, 0]), 24], [new IPv4([192, 0, 2, 0]), 24], [new IPv4([192, 88, 99, 0]), 24], [new IPv4([198, 51, 100, 0]), 24], [new IPv4([203, 0, 113, 0]), 24], [new IPv4([240, 0, 0, 0]), 4]]\n    };\n\n    IPv4.prototype.range = function() {\n      return ipaddr.subnetMatch(this, this.SpecialRanges);\n    };\n\n    IPv4.prototype.toIPv4MappedAddress = function() {\n      return ipaddr.IPv6.parse(\"::ffff:\" + (this.toString()));\n    };\n\n    IPv4.prototype.prefixLengthFromSubnetMask = function() {\n      var cidr, i, k, octet, stop, zeros, zerotable;\n      zerotable = {\n        0: 8,\n        128: 7,\n        192: 6,\n        224: 5,\n        240: 4,\n        248: 3,\n        252: 2,\n        254: 1,\n        255: 0\n      };\n      cidr = 0;\n      stop = false;\n      for (i = k = 3; k >= 0; i = k += -1) {\n        octet = this.octets[i];\n        if (octet in zerotable) {\n          zeros = zerotable[octet];\n          if (stop && zeros !== 0) {\n            return null;\n          }\n          if (zeros !== 8) {\n            stop = true;\n          }\n          cidr += zeros;\n        } else {\n          return null;\n        }\n      }\n      return 32 - cidr;\n    };\n\n    return IPv4;\n\n  })();\n\n  ipv4Part = \"(0?\\\\d+|0x[a-f0-9]+)\";\n\n  ipv4Regexes = {\n    fourOctet: new RegExp(\"^\" + ipv4Part + \"\\\\.\" + ipv4Part + \"\\\\.\" + ipv4Part + \"\\\\.\" + ipv4Part + \"$\", 'i'),\n    longValue: new RegExp(\"^\" + ipv4Part + \"$\", 'i')\n  };\n\n  ipaddr.IPv4.parser = function(string) {\n    var match, parseIntAuto, part, shift, value;\n    parseIntAuto = function(string) {\n      if (string[0] === \"0\" && string[1] !== \"x\") {\n        return parseInt(string, 8);\n      } else {\n        return parseInt(string);\n      }\n    };\n    if (match = string.match(ipv4Regexes.fourOctet)) {\n      return (function() {\n        var k, len, ref, results;\n        ref = match.slice(1, 6);\n        results = [];\n        for (k = 0, len = ref.length; k < len; k++) {\n          part = ref[k];\n          results.push(parseIntAuto(part));\n        }\n        return results;\n      })();\n    } else if (match = string.match(ipv4Regexes.longValue)) {\n      value = parseIntAuto(match[1]);\n      if (value > 0xffffffff || value < 0) {\n        throw new Error(\"ipaddr: address outside defined range\");\n      }\n      return ((function() {\n        var k, results;\n        results = [];\n        for (shift = k = 0; k <= 24; shift = k += 8) {\n          results.push((value >> shift) & 0xff);\n        }\n        return results;\n      })()).reverse();\n    } else {\n      return null;\n    }\n  };\n\n  ipaddr.IPv6 = (function() {\n    function IPv6(parts, zoneId) {\n      var i, k, l, len, part, ref;\n      if (parts.length === 16) {\n        this.parts = [];\n        for (i = k = 0; k <= 14; i = k += 2) {\n          this.parts.push((parts[i] << 8) | parts[i + 1]);\n        }\n      } else if (parts.length === 8) {\n        this.parts = parts;\n      } else {\n        throw new Error(\"ipaddr: ipv6 part count should be 8 or 16\");\n      }\n      ref = this.parts;\n      for (l = 0, len = ref.length; l < len; l++) {\n        part = ref[l];\n        if (!((0 <= part && part <= 0xffff))) {\n          throw new Error(\"ipaddr: ipv6 part should fit in 16 bits\");\n        }\n      }\n      if (zoneId) {\n        this.zoneId = zoneId;\n      }\n    }\n\n    IPv6.prototype.kind = function() {\n      return 'ipv6';\n    };\n\n    IPv6.prototype.toString = function() {\n      return this.toNormalizedString().replace(/((^|:)(0(:|$))+)/, '::');\n    };\n\n    IPv6.prototype.toByteArray = function() {\n      var bytes, k, len, part, ref;\n      bytes = [];\n      ref = this.parts;\n      for (k = 0, len = ref.length; k < len; k++) {\n        part = ref[k];\n        bytes.push(part >> 8);\n        bytes.push(part & 0xff);\n      }\n      return bytes;\n    };\n\n    IPv6.prototype.toNormalizedString = function() {\n      var addr, part, suffix;\n      addr = ((function() {\n        var k, len, ref, results;\n        ref = this.parts;\n        results = [];\n        for (k = 0, len = ref.length; k < len; k++) {\n          part = ref[k];\n          results.push(part.toString(16));\n        }\n        return results;\n      }).call(this)).join(\":\");\n      suffix = '';\n      if (this.zoneId) {\n        suffix = '%' + this.zoneId;\n      }\n      return addr + suffix;\n    };\n\n    IPv6.prototype.match = function(other, cidrRange) {\n      var ref;\n      if (cidrRange === void 0) {\n        ref = other, other = ref[0], cidrRange = ref[1];\n      }\n      if (other.kind() !== 'ipv6') {\n        throw new Error(\"ipaddr: cannot match ipv6 address with non-ipv6 one\");\n      }\n      return matchCIDR(this.parts, other.parts, 16, cidrRange);\n    };\n\n    IPv6.prototype.SpecialRanges = {\n      unspecified: [new IPv6([0, 0, 0, 0, 0, 0, 0, 0]), 128],\n      linkLocal: [new IPv6([0xfe80, 0, 0, 0, 0, 0, 0, 0]), 10],\n      multicast: [new IPv6([0xff00, 0, 0, 0, 0, 0, 0, 0]), 8],\n      loopback: [new IPv6([0, 0, 0, 0, 0, 0, 0, 1]), 128],\n      uniqueLocal: [new IPv6([0xfc00, 0, 0, 0, 0, 0, 0, 0]), 7],\n      ipv4Mapped: [new IPv6([0, 0, 0, 0, 0, 0xffff, 0, 0]), 96],\n      rfc6145: [new IPv6([0, 0, 0, 0, 0xffff, 0, 0, 0]), 96],\n      rfc6052: [new IPv6([0x64, 0xff9b, 0, 0, 0, 0, 0, 0]), 96],\n      '6to4': [new IPv6([0x2002, 0, 0, 0, 0, 0, 0, 0]), 16],\n      teredo: [new IPv6([0x2001, 0, 0, 0, 0, 0, 0, 0]), 32],\n      reserved: [[new IPv6([0x2001, 0xdb8, 0, 0, 0, 0, 0, 0]), 32]]\n    };\n\n    IPv6.prototype.range = function() {\n      return ipaddr.subnetMatch(this, this.SpecialRanges);\n    };\n\n    IPv6.prototype.isIPv4MappedAddress = function() {\n      return this.range() === 'ipv4Mapped';\n    };\n\n    IPv6.prototype.toIPv4Address = function() {\n      var high, low, ref;\n      if (!this.isIPv4MappedAddress()) {\n        throw new Error(\"ipaddr: trying to convert a generic ipv6 address to ipv4\");\n      }\n      ref = this.parts.slice(-2), high = ref[0], low = ref[1];\n      return new ipaddr.IPv4([high >> 8, high & 0xff, low >> 8, low & 0xff]);\n    };\n\n    IPv6.prototype.prefixLengthFromSubnetMask = function() {\n      var cidr, i, k, part, stop, zeros, zerotable;\n      zerotable = {\n        0: 16,\n        32768: 15,\n        49152: 14,\n        57344: 13,\n        61440: 12,\n        63488: 11,\n        64512: 10,\n        65024: 9,\n        65280: 8,\n        65408: 7,\n        65472: 6,\n        65504: 5,\n        65520: 4,\n        65528: 3,\n        65532: 2,\n        65534: 1,\n        65535: 0\n      };\n      cidr = 0;\n      stop = false;\n      for (i = k = 7; k >= 0; i = k += -1) {\n        part = this.parts[i];\n        if (part in zerotable) {\n          zeros = zerotable[part];\n          if (stop && zeros !== 0) {\n            return null;\n          }\n          if (zeros !== 16) {\n            stop = true;\n          }\n          cidr += zeros;\n        } else {\n          return null;\n        }\n      }\n      return 128 - cidr;\n    };\n\n    return IPv6;\n\n  })();\n\n  ipv6Part = \"(?:[0-9a-f]+::?)+\";\n\n  zoneIndex = \"%[0-9a-z]{1,}\";\n\n  ipv6Regexes = {\n    zoneIndex: new RegExp(zoneIndex, 'i'),\n    \"native\": new RegExp(\"^(::)?(\" + ipv6Part + \")?([0-9a-f]+)?(::)?(\" + zoneIndex + \")?$\", 'i'),\n    transitional: new RegExp((\"^((?:\" + ipv6Part + \")|(?:::)(?:\" + ipv6Part + \")?)\") + (ipv4Part + \"\\\\.\" + ipv4Part + \"\\\\.\" + ipv4Part + \"\\\\.\" + ipv4Part) + (\"(\" + zoneIndex + \")?$\"), 'i')\n  };\n\n  expandIPv6 = function(string, parts) {\n    var colonCount, lastColon, part, replacement, replacementCount, zoneId;\n    if (string.indexOf('::') !== string.lastIndexOf('::')) {\n      return null;\n    }\n    zoneId = (string.match(ipv6Regexes['zoneIndex']) || [])[0];\n    if (zoneId) {\n      zoneId = zoneId.substring(1);\n      string = string.replace(/%.+$/, '');\n    }\n    colonCount = 0;\n    lastColon = -1;\n    while ((lastColon = string.indexOf(':', lastColon + 1)) >= 0) {\n      colonCount++;\n    }\n    if (string.substr(0, 2) === '::') {\n      colonCount--;\n    }\n    if (string.substr(-2, 2) === '::') {\n      colonCount--;\n    }\n    if (colonCount > parts) {\n      return null;\n    }\n    replacementCount = parts - colonCount;\n    replacement = ':';\n    while (replacementCount--) {\n      replacement += '0:';\n    }\n    string = string.replace('::', replacement);\n    if (string[0] === ':') {\n      string = string.slice(1);\n    }\n    if (string[string.length - 1] === ':') {\n      string = string.slice(0, -1);\n    }\n    parts = (function() {\n      var k, len, ref, results;\n      ref = string.split(\":\");\n      results = [];\n      for (k = 0, len = ref.length; k < len; k++) {\n        part = ref[k];\n        results.push(parseInt(part, 16));\n      }\n      return results;\n    })();\n    return {\n      parts: parts,\n      zoneId: zoneId\n    };\n  };\n\n  ipaddr.IPv6.parser = function(string) {\n    var addr, k, len, match, octet, octets, zoneId;\n    if (ipv6Regexes['native'].test(string)) {\n      return expandIPv6(string, 8);\n    } else if (match = string.match(ipv6Regexes['transitional'])) {\n      zoneId = match[6] || '';\n      addr = expandIPv6(match[1].slice(0, -1) + zoneId, 6);\n      if (addr.parts) {\n        octets = [parseInt(match[2]), parseInt(match[3]), parseInt(match[4]), parseInt(match[5])];\n        for (k = 0, len = octets.length; k < len; k++) {\n          octet = octets[k];\n          if (!((0 <= octet && octet <= 255))) {\n            return null;\n          }\n        }\n        addr.parts.push(octets[0] << 8 | octets[1]);\n        addr.parts.push(octets[2] << 8 | octets[3]);\n        return {\n          parts: addr.parts,\n          zoneId: addr.zoneId\n        };\n      }\n    }\n    return null;\n  };\n\n  ipaddr.IPv4.isIPv4 = ipaddr.IPv6.isIPv6 = function(string) {\n    return this.parser(string) !== null;\n  };\n\n  ipaddr.IPv4.isValid = function(string) {\n    var e;\n    try {\n      new this(this.parser(string));\n      return true;\n    } catch (error1) {\n      e = error1;\n      return false;\n    }\n  };\n\n  ipaddr.IPv4.isValidFourPartDecimal = function(string) {\n    if (ipaddr.IPv4.isValid(string) && string.match(/^\\d+(\\.\\d+){3}$/)) {\n      return true;\n    } else {\n      return false;\n    }\n  };\n\n  ipaddr.IPv6.isValid = function(string) {\n    var addr, e;\n    if (typeof string === \"string\" && string.indexOf(\":\") === -1) {\n      return false;\n    }\n    try {\n      addr = this.parser(string);\n      new this(addr.parts, addr.zoneId);\n      return true;\n    } catch (error1) {\n      e = error1;\n      return false;\n    }\n  };\n\n  ipaddr.IPv4.parse = function(string) {\n    var parts;\n    parts = this.parser(string);\n    if (parts === null) {\n      throw new Error(\"ipaddr: string is not formatted like ip address\");\n    }\n    return new this(parts);\n  };\n\n  ipaddr.IPv6.parse = function(string) {\n    var addr;\n    addr = this.parser(string);\n    if (addr.parts === null) {\n      throw new Error(\"ipaddr: string is not formatted like ip address\");\n    }\n    return new this(addr.parts, addr.zoneId);\n  };\n\n  ipaddr.IPv4.parseCIDR = function(string) {\n    var maskLength, match;\n    if (match = string.match(/^(.+)\\/(\\d+)$/)) {\n      maskLength = parseInt(match[2]);\n      if (maskLength >= 0 && maskLength <= 32) {\n        return [this.parse(match[1]), maskLength];\n      }\n    }\n    throw new Error(\"ipaddr: string is not formatted like an IPv4 CIDR range\");\n  };\n\n  ipaddr.IPv4.subnetMaskFromPrefixLength = function(prefix) {\n    var filledOctetCount, j, octets;\n    prefix = parseInt(prefix);\n    if (prefix < 0 || prefix > 32) {\n      throw new Error('ipaddr: invalid IPv4 prefix length');\n    }\n    octets = [0, 0, 0, 0];\n    j = 0;\n    filledOctetCount = Math.floor(prefix / 8);\n    while (j < filledOctetCount) {\n      octets[j] = 255;\n      j++;\n    }\n    if (filledOctetCount < 4) {\n      octets[filledOctetCount] = Math.pow(2, prefix % 8) - 1 << 8 - (prefix % 8);\n    }\n    return new this(octets);\n  };\n\n  ipaddr.IPv4.broadcastAddressFromCIDR = function(string) {\n    var cidr, error, i, ipInterfaceOctets, octets, subnetMaskOctets;\n    try {\n      cidr = this.parseCIDR(string);\n      ipInterfaceOctets = cidr[0].toByteArray();\n      subnetMaskOctets = this.subnetMaskFromPrefixLength(cidr[1]).toByteArray();\n      octets = [];\n      i = 0;\n      while (i < 4) {\n        octets.push(parseInt(ipInterfaceOctets[i], 10) | parseInt(subnetMaskOctets[i], 10) ^ 255);\n        i++;\n      }\n      return new this(octets);\n    } catch (error1) {\n      error = error1;\n      throw new Error('ipaddr: the address does not have IPv4 CIDR format');\n    }\n  };\n\n  ipaddr.IPv4.networkAddressFromCIDR = function(string) {\n    var cidr, error, i, ipInterfaceOctets, octets, subnetMaskOctets;\n    try {\n      cidr = this.parseCIDR(string);\n      ipInterfaceOctets = cidr[0].toByteArray();\n      subnetMaskOctets = this.subnetMaskFromPrefixLength(cidr[1]).toByteArray();\n      octets = [];\n      i = 0;\n      while (i < 4) {\n        octets.push(parseInt(ipInterfaceOctets[i], 10) & parseInt(subnetMaskOctets[i], 10));\n        i++;\n      }\n      return new this(octets);\n    } catch (error1) {\n      error = error1;\n      throw new Error('ipaddr: the address does not have IPv4 CIDR format');\n    }\n  };\n\n  ipaddr.IPv6.parseCIDR = function(string) {\n    var maskLength, match;\n    if (match = string.match(/^(.+)\\/(\\d+)$/)) {\n      maskLength = parseInt(match[2]);\n      if (maskLength >= 0 && maskLength <= 128) {\n        return [this.parse(match[1]), maskLength];\n      }\n    }\n    throw new Error(\"ipaddr: string is not formatted like an IPv6 CIDR range\");\n  };\n\n  ipaddr.isValid = function(string) {\n    return ipaddr.IPv6.isValid(string) || ipaddr.IPv4.isValid(string);\n  };\n\n  ipaddr.parse = function(string) {\n    if (ipaddr.IPv6.isValid(string)) {\n      return ipaddr.IPv6.parse(string);\n    } else if (ipaddr.IPv4.isValid(string)) {\n      return ipaddr.IPv4.parse(string);\n    } else {\n      throw new Error(\"ipaddr: the address has neither IPv6 nor IPv4 format\");\n    }\n  };\n\n  ipaddr.parseCIDR = function(string) {\n    var e;\n    try {\n      return ipaddr.IPv6.parseCIDR(string);\n    } catch (error1) {\n      e = error1;\n      try {\n        return ipaddr.IPv4.parseCIDR(string);\n      } catch (error1) {\n        e = error1;\n        throw new Error(\"ipaddr: the address has neither IPv6 nor IPv4 CIDR format\");\n      }\n    }\n  };\n\n  ipaddr.fromByteArray = function(bytes) {\n    var length;\n    length = bytes.length;\n    if (length === 4) {\n      return new ipaddr.IPv4(bytes);\n    } else if (length === 16) {\n      return new ipaddr.IPv6(bytes);\n    } else {\n      throw new Error(\"ipaddr: the binary input is neither an IPv6 nor IPv4 address\");\n    }\n  };\n\n  ipaddr.process = function(string) {\n    var addr;\n    addr = this.parse(string);\n    if (addr.kind() === 'ipv6' && addr.isIPv4MappedAddress()) {\n      return addr.toIPv4Address();\n    } else {\n      return addr;\n    }\n  };\n\n}).call(this);\n","/* Copyright 2017-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Injectable} from \"@angular/core\";\nimport {IPv4, IPv6, parse} from \"ipaddr.js\";\n\n/**\n * Service to parse IP addresses and some utility methods related to them.\n * Same as js-ui-lib/src/main/ui/services/ipParserService.js for AngularJS and\n * ng-next-app/src/app/platform/services/parser/ip-parser.service.ts\n */\n@Injectable()\nexport class IpParserService {\n\n   private static readonly SUBNET_MASK_MAX_QUAD_VALUE: number = 255;\n\n   private static readonly SUBNET_MASK_VALID_QUAD_VALUES: number[] = [0, 128, 192, 224, 240, 248, 252, 254];\n   private static readonly MAX_PORT: number = Math.pow(2, 16);\n\n   // capture groups are: [fullText, address, portWithColon, port]\n   private static readonly IPV6_BRACKETED_NOTATION_REGEX: RegExp = new RegExp(\"^\\\\[(.*)\\\\](:(\\\\d+))?$\");\n   private static readonly DIGITS_REGEX: RegExp = new RegExp(\"^\\\\d+$\");\n   private static readonly ZONE_INDEX_REGEXP: RegExp =  new RegExp(\"^\\w+$\");\n   private static readonly IPV6_LINK_LOCAL_PREFIX_LENGTH: number = 64;\n   private static readonly IPV6_DEFAULT_UNICAST_ROUTE_ADDRESS: string = \"::\";\n   private static readonly IPV6_LOOPBACK_ADDRESS: string = \"::1\";\n   private static readonly IPV4_SEPARATOR: string = \".\";\n\n   isIpv4AddressValid = (ipAddress: string) => {\n      const trimmedIp: string = ipAddress.trim();\n      return IPv4.isValid(trimmedIp) && this.validIpV4Address(trimmedIp);\n   };\n\n   isIpv6AddressValid = (ipAddress: string, acceptZoneIndex: boolean = false): boolean => {\n      if (!ipAddress) {\n         return false;\n      }\n\n      let addr: string = ipAddress.trim();\n\n      if (acceptZoneIndex) {\n         const delimiterIndex: number = addr.indexOf(\"%\");\n\n         if (delimiterIndex > -1) {\n            const zoneIndex: string = addr.substring(delimiterIndex + 1);\n\n            if (!IpParserService.ZONE_INDEX_REGEXP.test(zoneIndex)) {\n               return false;\n            }\n\n            addr = addr.substring(0, delimiterIndex);\n         }\n      }\n\n      if (!IPv6.isValid(addr)) {\n         return false;\n      }\n\n      return !this.equalIpv6Addresses(addr, IpParserService.IPV6_DEFAULT_UNICAST_ROUTE_ADDRESS)\n            && !this.equalIpv6Addresses(addr, IpParserService.IPV6_LOOPBACK_ADDRESS);\n   };\n\n   /**\n    * @param ipAddressFirst - first ipv4Address for comparison\n    * @param ipAddressSecond - second ipv4Address for comparison\n    * @param subnetMask - subnetMask associated with the given IPs\n    * @returns {boolean} true if all parameters are valid and ipAddressFirst\n    *          subnet matches the ipAddressSecond subnet, otherwise returns false\n    */\n   isSameIpv4Subnet = (ipAddressFirst: string, ipAddressSecond: string, subnetMask: string) => {\n      if (!this.isIpv4AddressValid(ipAddressFirst)\n            || !this.isIpv4AddressValid(ipAddressSecond)\n            || !this.isSubnetMaskValid(subnetMask)) {\n         return false;\n      }\n\n      const splitIpFirst: string[] = ipAddressFirst.split(IpParserService.IPV4_SEPARATOR);\n      const splitIpSecond: string[] = ipAddressSecond.split(IpParserService.IPV4_SEPARATOR);\n      const splitSubnet: string[] = this.isCidr(subnetMask)\n            ? this.parseCidrToIpv4(+subnetMask).split(IpParserService.IPV4_SEPARATOR)\n            : subnetMask.split(IpParserService.IPV4_SEPARATOR);\n\n      // enable bitwise operations\n      /*jshint bitwise:false */\n      for (let i: number = 0; i < 4; i++) {\n         if ((+splitIpFirst[i] & +splitSubnet[i]) !== (+splitIpSecond[i] & +splitSubnet[i])) {\n            return false;\n         }\n      }\n\n      return true;\n   };\n\n   private isCidr(mask: string): boolean {\n      return !isNaN(+mask);\n   }\n\n   /**\n    * @param ipAddressFirst - first ipv6Address for comparison\n    * @param ipAddressSecond - second ipv6Address for comparison. Expect gateway\n    * @param prefix - prefix associated with the given IPs\n    * @returns {boolean} true if all parameters are valid and ipAddressFirst\n    *          subnet matches the ipAddressSecond subnet, otherwise returns false\n    */\n   isSameIpv6Subnet = (ipAddressFirst: string, ipAddressSecond: string, prefix: string) => {\n      // The network validation (UI and backend) for ipv6 addresses does not include validation for same ipv6 subnets.\n      // Return true to have consistent validations (UI and API), but keep the method to make an easy change if needed.\n      // More info in https://bugzilla.eng.vmware.com/show_bug.cgi?id=2583003\n      return true;\n   };\n   /**\n    * Returns true if provided ipAddress is valid IPv4 or IPv6 address\n    * @param ipAddress\n    */\n   isAddressValid = (ipAddress: string) => {\n      return this.isIpv6AddressValid(ipAddress) || this.isIpv4AddressValid(ipAddress);\n   };\n\n   expandIpv6Address = (ipAddress: string) => {\n      if (!ipAddress || (!this.isIpv4AddressValid(ipAddress) && !this.isIpv6AddressValid(ipAddress))) {\n         return ipAddress;\n      }\n\n      const parsedAddress: IPv4 | IPv6 = parse(ipAddress);\n      return (typeof parsedAddress.toNormalizedString !== \"undefined\")\n            ? parsedAddress.toNormalizedString() : ipAddress;\n   };\n\n   validIpV4Address = (ipAddress: string) => {\n      const splitIpAddress: string[] = ipAddress.split(IpParserService.IPV4_SEPARATOR);\n      if (splitIpAddress.length !== 4) {\n         return false;\n      }\n\n      return splitIpAddress.every((item) => +item >= 0 && +item <= 255);\n   };\n\n   isSubnetForIpValid = (ipString: string): boolean => {\n      const ipSections: string[] = ipString.split(\"/\");\n      const isIPv4: boolean = parse(ipSections[0]) instanceof IPv4;\n      // IPv4 is 32 bits, each part is a 8 bits number;\n      // IPv6 is 128 bits, each part is 16 bits\n      const ipAddressDigitsCount: number = isIPv4 ? 8 : 16;\n      const subnet: number = +ipSections[1];\n\n      if (isNaN(subnet)) {\n         return false;\n      }\n      // IPv4: subnet === 32 or IPv6: subnet === 128\n      // this means we allow all, so no need to validate\n\n      if ((isIPv4 && subnet === 32) || (!isIPv4 && subnet === 128)) {\n         return true;\n      }\n\n      if ((isIPv4 && !this.isSubnetValid(subnet)) || (!isIPv4 && !this.isSubnetPrefixValid(subnet.toString()))) {\n         return false;\n      }\n      const highDigits: number = subnet % ipAddressDigitsCount;\n      const validationStartPosition: number = Math.floor(subnet / ipAddressDigitsCount);\n\n      const ipNumbers: number[] = this.parseIpToNum(ipSections[0]);\n      if (ipNumbers.length === 0 || ipNumbers.find(num => isNaN(num))) {\n         return false;\n      }\n      // all the ip numbers after the starting position should be 0\n      // for example: 10.160.0.1/16 is invalid, the valid ip is: 10.160.0.0/16\n      if (ipNumbers.find((num, index) => num !== 0 && index > validationStartPosition)) {\n         return false;\n      }\n\n      // Now we are checking the number at the starting position\n      // for example: the highDigits is 5, it means 11111000, the first 5 bits are all 1\n      // the number at starting position cannot have 1 at the last 3 bits in its binary form\n      let subnetValidation: number = 0;\n      for (let i: number = 1; i <= highDigits; i++) {\n         subnetValidation += Math.pow(2, ipAddressDigitsCount - i);\n      }\n      // for a valid ip number, the or operation returns a number that <= the subnetValidation\n      if ((subnetValidation | ipNumbers[validationStartPosition]) > subnetValidation) {\n         return false;\n      }\n      return true;\n   };\n\n   private parseIpToNum = (ipStr: string): number[] => {\n      const ip: IPv4 | IPv6 = parse(ipStr);\n      if (ip instanceof IPv4) {\n         return ip ? ip[\"octets\"] : [];\n      }\n      return ip ? ip[\"parts\"] : [];\n   };\n\n   isSubnetPrefixValid = (prefix: string) => {\n      return +prefix >= 1 && +prefix <= 128;\n   };\n\n   isSubnetValid = (subnet: number) => {\n      return subnet >= 1 && subnet <= 32;\n   };\n\n   isSubnetMaskValid = (subnetMask: string) => {\n      if (!subnetMask) {\n         return false;\n      }\n\n      // support cidr(Classless Inter-Domain Routing) subnet mask\n      if (+subnetMask >= 0 && +subnetMask <= 32) {\n         return true;\n      }\n\n      // If the mask ends with '.', or has no number between two '.', then the .split()\n      // would return \"\" in this case, which transformed into a number results in `0`.\n      // This should be avoided by filtering the non-empty strings.\n      const maskBytes: number[] = [];\n      subnetMask.split(IpParserService.IPV4_SEPARATOR).forEach((octet) => {\n         if (!!octet) {\n            maskBytes.push(Number(octet));\n         }\n      });\n\n      // The first octet cannot be 0 for a valid IP\n      if (maskBytes.length !== 4 || maskBytes[0] === 0) {\n         return false;\n      }\n\n      // Find the first quad that is not equal to 255\n      let firstNonMaxQuadIndex: number = 0;\n\n      for (const maskByte of maskBytes) {\n         if (maskByte !== IpParserService.SUBNET_MASK_MAX_QUAD_VALUE) {\n            break;\n         } else {\n            firstNonMaxQuadIndex++;\n         }\n      }\n\n      // All quads are equal to 255 -> valid subnet mask\n      if (firstNonMaxQuadIndex === maskBytes.length) {\n         return true;\n      }\n\n      // Quad should be contiguous\n      if (IpParserService.SUBNET_MASK_VALID_QUAD_VALUES.indexOf(maskBytes[firstNonMaxQuadIndex]) === -1) {\n         return false;\n      }\n\n      // Following quads should be zero\n      for (let j: number = firstNonMaxQuadIndex + 1; j < maskBytes.length; j++) {\n         if (maskBytes[j] !== 0) {\n            return false;\n         }\n      }\n\n      return true;\n   };\n\n   /**\n    * detailed information about CIDR, please check this link:\n    * https://docs.netgate.com/pfsense/en/latest/book/network/understanding-cidr-subnet-mask-notation.html\n    */\n   parseCidrToIpv4(cidr: number): string {\n      if (!this.isSubnetMaskValid(String(cidr))) {\n         return \"\";\n      }\n      const IP_ADDRESS_DIGITS_COUNT: number = 8;\n      const subnet: number[] = [];\n      for (let i: number = 0; i < Math.floor(cidr / IP_ADDRESS_DIGITS_COUNT); i++) {\n         subnet.push(IpParserService.SUBNET_MASK_MAX_QUAD_VALUE);\n      }\n      if (cidr % IP_ADDRESS_DIGITS_COUNT !== 0) {\n         subnet.push(IpParserService.SUBNET_MASK_VALID_QUAD_VALUES[cidr % IP_ADDRESS_DIGITS_COUNT - 1]);\n      }\n      while (subnet.length < 4) {\n         subnet.push(IpParserService.SUBNET_MASK_VALID_QUAD_VALUES[0]);\n      }\n      return subnet.join(IpParserService.IPV4_SEPARATOR);\n   }\n\n   /**\n    * Compares its two ipv6 addresses. Returns true if it's the same ip address even\n    * if the format is different.\n    *\n    * @param addr1 The first valid ipv6 address to be compared\n    * @param addr2 The second valid ipv6 address to be compared\n    * @returns {boolean}\n    */\n   equalIpv6Addresses = (addr1: string, addr2: string) => {\n      return this.getNormalizedIpv6Address(addr1) === this.getNormalizedIpv6Address(addr2);\n   };\n\n   /**\n    * Returns normalized form of IPv6 and IPv4 address\n    * @param ipAddress\n    *\n    */\n   getNormalizedIpv6Address = (ipAddress: string) => {\n      let addr: IPv4 | IPv6 = parse(ipAddress);\n\n      if (addr instanceof IPv4) {\n         addr = addr.toIPv4MappedAddress();\n      }\n\n      return addr.toNormalizedString();\n   };\n\n   parse = (addressString: string) => {\n      const addressAndPort: any = this.detectParts(addressString);\n      const portResult: any = this.parsePort(addressAndPort.port);\n      const addressResult: any = this.parseAddress(addressAndPort.address);\n\n      if (portResult.valid && addressResult.valid) {\n         return this.buildIpAddress(addressResult.address, portResult.port);\n      } else {\n         return null;\n      }\n   };\n\n   detectParts = (addressString: string) => {\n      const parts: string[] = addressString.split(\":\");\n\n      if (parts.length > 2) {\n         return this.detectIPv6Parts(addressString);\n      } else {\n         return {\n            address: parts[0],\n            port: parts[1],\n         };\n      }\n   };\n\n   detectIPv6Parts = (address: string) => {\n      const match: RegExpExecArray | null = IpParserService.IPV6_BRACKETED_NOTATION_REGEX.exec(address);\n      if (match) {\n         return {\n            address: match[1],\n            port: match[3],\n         };\n      } else {\n         return {\n            address: address,\n         };\n      }\n   };\n\n   parseAddress = (address: string): {valid: boolean, address?: string} => {\n      if (!IPv4.isValid(address) && !IPv6.isValid(address)) {\n         return {valid: false};\n      }\n\n      return {\n         valid: true,\n         address: parse(address).toString(),\n      };\n   };\n\n   parsePort = (port: string) => {\n      if (port === undefined) {\n         return {valid: true, port: undefined};\n      }\n\n      if (!IpParserService.DIGITS_REGEX.test(port)) {\n         return {valid: false};\n      }\n\n      const parsedPort: number = parseInt(port, 10);\n      if (parsedPort <= 0) {\n         return {valid: false};\n      } else if (parsedPort >= IpParserService.MAX_PORT) {\n         return {valid: false};\n      } else {\n         return {valid: true, port: parsedPort};\n      }\n   };\n\n   buildIpAddress = (address: string, port: string) => {\n      return {\n         address: address,\n         port: port,\n      };\n   };\n\n   /**\n    * Checks if IPv6 address is a link local address i.e. of the type fe80::/10\n    * (fe80:: through febf::)\n    *\n    * @param address\n    *    IPv6 address\n    * @param prefixLength\n    *    IPv6 prefix length - link-local addresses have a prefix length of 64\n    * @return\n    *    Returns true if the address is a link local one\n    */\n   isLinkLocalIpv6Address(address: string | null, prefixLength: number = 64): boolean {\n      if (!address ||\n            prefixLength !== IpParserService.IPV6_LINK_LOCAL_PREFIX_LENGTH ||\n            address.length < 4) {\n         return false;\n      }\n\n      const addressBegining: number = parseInt(address.substr(0, 4), 16);\n      return (addressBegining & 0xffc0) === 0xfe80;\n   }\n}\n"]}