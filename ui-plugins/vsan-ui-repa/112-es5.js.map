{"version":3,"sources":["webpack:///src/app/vsan/common/directive/clr-button-group/clr-button-base.directive.ts","webpack:///src/app/vsan/cluster/configure/wizard/ready-to-complete-page.component.ts","webpack:///src/app/vsan/common/service/flow/error-handler.decorator.ts","webpack:///src/app/vsan/cluster/configure/wizard/claim-disks-page.html","webpack:///src/app/vsan/cluster/configure/wizard/vsan-max-page.component.ts","webpack:///src/app/vsan/cluster/configure/wizard/config-type-page.html","webpack:///src/app/vsan/common/pipe/virtual-objects/health-state-label.pipe.ts","webpack:///src/app/vsan/cluster/configure/wizard/configure-wizard.component.ts","webpack:///src/app/vsan/common/util/vsan-dialog-util.ts","webpack:///src/app/vsan/cluster/configure/wizard/services-page.component.ts","webpack:///src/app/vsan/cluster/configure/wizard/ready-to-complete-page.html","webpack:///src/app/vsan/cluster/configure/wizard/claim-disks-page.component.ts","webpack:///src/app/vsan/cluster/configure/wizard/configure-wizard.module.ts","webpack:///src/app/vsan/cluster/configure/wizard/services-page.html","webpack:///src/app/vsan/common/directive/external-link/external-link.directive.ts","webpack:///src/app/vsan/cluster/configure/wizard/enable-services.html","webpack:///src/app/vsan/cluster/configure/wizard/enable-services.component.ts","webpack:///src/app/vsan/cluster/configure/wizard/config-type-page.component.ts","webpack:///src/app/vsan/cluster/configure/wizard/vsan-max-page.html","webpack:///src/app/vsan/cluster/configure/wizard/configure-wizard.html"],"names":["ClrButtonBaseDirective","clrButton","name","Math","random","toString","directiveHolder","directives","push","ConfigureVsanSummaryPage","spaceEfficiencyService","VsanClusterType","ClaimOption","validate","isStretchedConfig","vsanConfigSpec","stretchedClusterConfig","Factory","create","witnessHost","witnessHostDiskMapping","storagePoolDisks","preferredName","getHosts","preferredDomains","secondaryName","secondaryDomains","configType","SINGLE_SITE_CLUSTER","CUSTOM_FD_CLUSTER","getString","TWO_HOST_VSAN_CLUSTER","STRETCHED_CLUSTER","COMPUTE_ONLY","Error","toLabel","spaceEfficiencyConfig","getBooleanPropertyLabel","isVsanMaxEnabled","allowReducedRedundancy","enableDataInTransitEncryption","eraseDisksBeforeUse","advancedOptions","largeClusterSupportEnabled","enableRdma","property","claimOption","disksClaimingConfigInfo","hasNewClaimedCapacity","isAutoClaim","SingleTier","MANAGED_BY_VSAN_CLAIM_OPTIONS","filter","formatFileSize","autoClaimedDisks","totalClaimedCapacity","getOldClaimedCapacity","getClaimedCapacity","disksCount","getClaimedDiskCount","ClaimForStorage","ClaimForCache","getLocalizedStorage","isEmpty","faultDomainNames","domainOrHostData","result","domainOrHost","isHost","fromUid","uid","children","host","required","ErrorHandler","props","targetClass","functionName","descriptor","errorHandler","value","VsanMaxPage","configService","VsanHealthStatus","IllustratedMessageType","AlertType","pageControls","nextButtonIsDisabled","fetchVsanMaxPrecheckData","vsanMaxPrecheckData","status","red","isVsanMaxWorkflow","green","getVsanMaxPrecheckData","clusterRef","unhealthyTests","selectedTestId","helpId","args","isExpanded","model","getVsanHealthStatusIconShape","getVsanHealthStatusIconClass","srMessage","srMessageType","PAGE_TITLE","VirtualObjectHealthStateLabelPipe","state","getVsanObjectHealthStatusText","ConfigureWizardComponent","dataService","vsanConfigService","vsanStatusService","services","setWizardContext","properties","clusterName","get","hostCount","length","context","moRef","DEFAULT_CONFIG_TYPE","hasDiskGroupsOnWitness","hostsInCluster","vsanGeneralConfig","generalConfigData","includeClaimDisksPage","isWitnessDeployedFromOvf","isClaimDisksPageVisible","pages","clusterCapabilityData","isVsanMaxSingleTierSupported","isEncryptionSupported","isCompressionOnlySupported","isDeduplicationAndCompressionSupported","isAdvancedClusterOptionsSupported","isRdmaSupported","contextObject","vsanConfigPromise","getVsanGeneralConfigData","dataServicePromise","getProperties","Promise","all","dsProperties","error","errorMessage","taskRef","storeChange","VSAN_SERVICE_ENABLED","closeModalDialog","VsanDialogUtil","CAPACITY_MANAGEMENT_DIALOG","width","height","DELETE_VOLUME_DIALOG","MIGRATE_VOLUME_DIALOG","REAPPLY_VOLUME_POLICY_DIALOG","DUPLICATE_PCI_ID_MODEL_SELECTION_DIALOG","HEALTH_RESTORE_ACTION_DIALOG","CLUSTER_POWER_ON_DIALOG","VM_IO_DIAGNOSTICS_METRICS_DIALOG","VM_IO_DIAGNOSTICS_LATENCY_DIALOG","VM_IO_DIAGNOSTICS_DOM_OWNER_LATENCY_DIALOG","PERF_SVC_EDIT_ACTION_DIALOG","PERF_SVC_ENABLE_ACTION_DIALOG","CLAIM_DISKS_ACTION_DIALOG","VSAN_DISK_CLAIM_ACTION_DIALOG","VsanDialogProperties","ServicesPage","config","deepClone","validationErrors","validateConfig","spaceEfficiency","isOnlyAllFlashSupportedForClaimingDisks","hasHybridDiskGroups","ClaimDisksPage","isAutoClaimAllowed","isManualClaimDiskDataLoaded","_hostsClaimingData","Map","Object","entries","dataEfficiency","hasVsanMaxCompatibleDisks","hostsClaimingData","values","disableNextButton","isConfigAcceptable","diskMappings","rebuildToc","isDiskClaimVsanManaged","disksClaimingConfig","configureWizardRoutes","path","component","ConfigureWizardModule","ExternalLinkDirective","el","resolver","renderer","navigationService","ASK_VMWARE_DEFAULT_TEXT_KEY","LEARN_MORE_DEFAULT_TEXT_KEY","CONTAINER_CLASS","NAVIGATION_EVENT_TYPE","LEAD_TO_NOWHERE_URL","HTML_ELEMENT_SPAN_NAME","HTML_ELEMENT_ICON_NAME","HTML_ELEMENT_ROLE_ATTR_NAME","HTML_ELEMENT_ROLE_ATTR_VALUE","ICON_SHAPE_ATTR_NAME","ICON_SHAPE_ATTR_VALUE","ICON_SIZE_ATTR_NAME","ICON_SIZE_ATTR_VALUE","ICON_CLASS_ATTR_NAME","ICON_CLASS_ATTR_VALUE","ICON_TITLE_ATTR_NAME","KB_URL","element","nativeElement","isLink","isButton","prepareExternalLink","button","index","addClass","setText","decorateLink","addLinkRole","initializeNavigationHandler","HTMLButtonElement","HTMLAnchorElement","span","createElement","innerText","getText","appendChild","icon","setAttribute","anchorText","key","linkElement","href","style","display","addEventListener","askVMware","articleId","navigateToAddress","url","EnableServicesComponent","errors","cloneVsanConfigSpec","generalSettingsComponent","configureCluster","task","ON_INIT","ON_CONFIRM","ConfigTypePage","faultDomainValidationService","clusterMode","getValidationErrors","Array","prototype","apply","getFaultDomainValidationErrors","clusterHostFaultDomainData","stretchClusterSupported","clearValidationErrors","errorMessages","addValidationErrors","applyDefaultDomains","COMPUTE","validateSelection","useDefaults","convertDataModel","source","hostUid","primaryIconId"],"mappings":"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","file":"112-es5.js","sourcesContent":["/* Copyright 2020 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {ClrButton} from \"@clr/angular\";\n\n/**\n * Use this class as base class for directive, which handles clr-button. It will help to link the rendered button with\n * the clr-button on which the directive is applied.\n */\nexport abstract class ClrButtonBaseDirective {\n\n   constructor(private clrButton: ClrButton) {\n      if (!clrButton) {\n         return;\n      }\n      // name should be set, if not provided in template - generate one. ClrButtom#name is used to generate the name\n      // attribute of the markup button. Later the name is used to match the generated markup with the directive.\n      if (!clrButton.name) {\n         clrButton.name = Math.random().toString();\n      }\n\n      const directiveHolder: DirectiveHolder = (clrButton as DirectiveHolder);\n      directiveHolder.directives = directiveHolder.directives || [];\n      directiveHolder.directives.push(this);\n   }\n\n   /**\n    * This method will be called when the actual html button is rendered.\n    */\n   abstract resolveButton(clrButton: ClrButton, button: HTMLButtonElement, index: number);\n}\n\nexport interface DirectiveHolder extends ClrButton {\n   directives: ClrButtonBaseDirective[];\n}","/* Copyright 2017-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component} from \"@angular/core\";\nimport {ManagedObject} from \"@service/managed-object\";\nimport {InputProperty, OutputProperty, WizardPage} from \"@component/wizard/flow-metadata\";\nimport {OnValidate} from \"@component/wizard/flow-wizard.component\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {VsanConfigSpec} from \"@generated/vsan-config-spec\";\nimport {VsanCapabilityData} from \"@generated/vsan-capability-data\";\nimport {VsanCapabilityProvider} from \"@generated/vsan-capability-provider\";\nimport {EncryptionPropertyProvider} from \"@generated/encryption-property-provider\";\nimport {VsanStretchedClusterConfig} from \"@generated/vsan-stretched-cluster-config\";\nimport {VsanDiskMapping} from \"@generated/vsan-disk-mapping\";\nimport {DomainOrHostData} from \"@generated/domain-or-host-data\";\nimport {DisksClaimingConfigInfo} from \"@component/diskmgmt/model/disks-claiming-config-info.data\";\nimport {SpaceEfficiencyService} from \"@service/space-efficiency-service\";\nimport {ClaimOption} from \"@generated/claim-option\";\nimport {VsanClusterType} from \"@generated/vsan-cluster-type\";\nimport {DiskMgmtDiskUtil} from \"@util/disk-mgmt-disk.util\";\nimport {AutoClaimSummaryData} from \"@component/diskmgmt/model/auto-claim-summary.data\";\n\n@WizardPage(\n      VsanUiUtils.getString(\"vsan.cluster.configure.wizard.readyToComplete.title\"),\n      null,\n      [VsanCapabilityProvider, EncryptionPropertyProvider],\n)\n@Component({\n   templateUrl: \"ready-to-complete-page.html\",\n   styleUrls: [\"ready-to-complete-page.scss\"],\n})\nexport class ConfigureVsanSummaryPage implements OnValidate {\n\n   VsanClusterType: typeof VsanClusterType = VsanClusterType;\n   ClaimOption: typeof ClaimOption = ClaimOption;\n\n   @InputProperty()\n   @OutputProperty()\n   vsanConfigSpec: VsanConfigSpec;\n\n   @InputProperty()\n   configType: VsanClusterType;\n\n   @InputProperty()\n   vcCapabilityData: VsanCapabilityData;\n\n   @InputProperty()\n   clusterCapabilityData: VsanCapabilityData;\n\n   @InputProperty()\n   encryptionPermissions: boolean;\n\n   @InputProperty(InputProperty.required(false))\n   disksClaimingConfigInfo: DisksClaimingConfigInfo;\n\n   @InputProperty(InputProperty.required(false))\n   autoClaimedDisks: AutoClaimSummaryData;\n\n   @InputProperty(InputProperty.required(false))\n   isAutoClaim: boolean;\n\n   @InputProperty(InputProperty.required(false))\n   faultDomainNames: string[];\n\n   @InputProperty(InputProperty.required(false))\n   preferredName: string;\n\n   @InputProperty(InputProperty.required(false))\n   preferredDomains: DomainOrHostData[];\n\n   @InputProperty(InputProperty.required(false))\n   secondaryName: string;\n\n   @InputProperty(InputProperty.required(false))\n   secondaryDomains: DomainOrHostData[];\n\n   @InputProperty(InputProperty.required(false))\n   witnessHostName: string;\n\n   @InputProperty(InputProperty.required(false))\n   witnessHost: ManagedObject;\n\n   @InputProperty(InputProperty.required(false))\n   witnessHostDiskMapping: VsanDiskMapping;\n\n   @InputProperty(InputProperty.required(false))\n   storagePoolDisks: string[];\n\n   constructor(private spaceEfficiencyService: SpaceEfficiencyService) {}\n\n   get configTypeLabel(): string {\n      switch (this.configType) {\n         case VsanClusterType.SINGLE_SITE_CLUSTER:\n         case VsanClusterType.CUSTOM_FD_CLUSTER:\n            return VsanUiUtils.getString(\"vsan.cluster.configure.summary.singleSiteCluster\");\n         case VsanClusterType.TWO_HOST_VSAN_CLUSTER:\n            return VsanUiUtils.getString(\"vsan.cluster.configure.summary.roboClusterLabel\");\n         case VsanClusterType.STRETCHED_CLUSTER:\n            return VsanUiUtils.getString(\"vsan.cluster.configure.summary.stretchedClusterLabel\");\n         case VsanClusterType.COMPUTE_ONLY:\n            return VsanUiUtils.getString(\"vsan.cluster.configure.summary.computeOnly\");\n         default:\n            throw new Error(\"Unsupported config type detected: \" + this.configType);\n      }\n   }\n\n   get spaceEfficiencyStatus(): string {\n      return this.spaceEfficiencyService.toLabel(this.vsanConfigSpec.spaceEfficiencyConfig);\n   }\n\n   get vsanMaxStatus(): string {\n      return this.getBooleanPropertyLabel(this.vsanConfigSpec.isVsanMaxEnabled);\n   }\n\n   get allowReducedRedundancyLabel(): string {\n      return this.getBooleanPropertyLabel(this.vsanConfigSpec.allowReducedRedundancy);\n   }\n\n   get dataInTransitEncryptionEnabled(): string {\n      return this.getBooleanPropertyLabel(this.vsanConfigSpec.enableDataInTransitEncryption);\n   }\n\n   get eraseDisksBeforeUseLabel(): string {\n      return this.getBooleanPropertyLabel(this.vsanConfigSpec.eraseDisksBeforeUse);\n   }\n\n   get largeScaleClusterSupportLabel(): string {\n       return this.getBooleanPropertyLabel(this.vsanConfigSpec.advancedOptions &&\n             this.vsanConfigSpec.advancedOptions.largeClusterSupportEnabled);\n   }\n\n   get rdmaLabel(): string {\n      return this.getBooleanPropertyLabel(this.vsanConfigSpec.enableRdma);\n   }\n\n   getBooleanPropertyLabel(property: boolean): string {\n      return VsanUiUtils.getBooleanPropertyLabel(property);\n   }\n\n   hasNewClaimedCapacity(claimOption: ClaimOption): boolean {\n      if (!this.disksClaimingConfigInfo) {\n         return false;\n      }\n\n      return this.disksClaimingConfigInfo.hasNewClaimedCapacity(claimOption);\n   }\n\n   /**\n    * Get managed by vSAN claim options with new claimed capacity\n    */\n   get managedClaimOptions(): ClaimOption[] {\n      // Include vSAN Max auto claim option, where disksClaimingConfigInfo is not populated\n      if (this.vsanConfigSpec.isVsanMaxEnabled && this.isAutoClaim) {\n         return [ClaimOption.SingleTier];\n      } else if (!this.disksClaimingConfigInfo) {\n         return [];\n      }\n\n      return DiskMgmtDiskUtil.MANAGED_BY_VSAN_CLAIM_OPTIONS.filter(\n            claimOption => this.disksClaimingConfigInfo.hasNewClaimedCapacity(claimOption));\n   }\n\n   totalClaimedCapacity(claimOption: ClaimOption): string {\n      if (claimOption === ClaimOption.SingleTier && this.isAutoClaim) {\n         return VsanUiUtils.formatFileSize(this.autoClaimedDisks?.totalClaimedCapacity);\n      } else if (!this.disksClaimingConfigInfo) {\n         return VsanUiUtils.formatFileSize(0);\n      } else if (this.disksClaimingConfigInfo.getOldClaimedCapacity(claimOption) === 0) {\n         return VsanUiUtils.formatFileSize(this.disksClaimingConfigInfo.getClaimedCapacity(claimOption));\n      } else {\n         return VsanUiUtils.getString(\n               \"vsan.cluster.configure.summary.totalAndOldCapacityFormat\",\n               VsanUiUtils.formatFileSize(this.disksClaimingConfigInfo.getClaimedCapacity(claimOption)),\n               VsanUiUtils.formatFileSize(this.disksClaimingConfigInfo.getOldClaimedCapacity(claimOption)));\n      }\n   }\n\n   vsanMaxTotalClaimedDisks(): string {\n      if (this.isAutoClaim) {\n         return VsanUiUtils.getString(\"vsan.cluster.configure.summary.vsanMaxDatastore.claimedDisks.value\",\n               this.autoClaimedDisks?.disksCount,\n               VsanUiUtils.getString(\"vsan.cluster.configure.summary.vsanMaxDatastore.claimedDisks.auto.label\"));\n      }\n\n      return VsanUiUtils.getString(\"vsan.cluster.configure.summary.vsanMaxDatastore.claimedDisks.value\",\n            this.disksClaimingConfigInfo.getClaimedDiskCount(ClaimOption.SingleTier),\n            VsanUiUtils.getString(\"vsan.cluster.configure.summary.vsanMaxDatastore.claimedDisks.manual.label\"));\n   }\n\n   getClaimOptionLabel(claimOption: ClaimOption): string {\n      switch (claimOption) {\n         case ClaimOption.ClaimForStorage:\n            return VsanUiUtils.getString(\"vsan.cluster.configure.summary.totalCapacity\");\n         case ClaimOption.ClaimForCache:\n            return VsanUiUtils.getString(\"vsan.cluster.configure.summary.totalCache\");\n         case ClaimOption.SingleTier:\n            return VsanUiUtils.getString(\"vsan.cluster.configure.summary.vsanMaxDatastore.capacitySize.label\");\n         default:\n            return VsanUiUtils.getString(\"vsan.cluster.configure.summary.capacity\",\n                  DiskMgmtDiskUtil.getLocalizedStorage(claimOption));\n      }\n   }\n\n   get faultDomainsConfigString(): string {\n      if (this.configType === VsanClusterType.TWO_HOST_VSAN_CLUSTER) {\n         return VsanUiUtils.getString(\"vsan.cluster.configure.summary.configureRoboClusterLabel\");\n      } else if (this.configType === VsanClusterType.STRETCHED_CLUSTER) {\n         return VsanUiUtils.getString(\"vsan.cluster.configure.summary.configureStretchedClusterLabel\");\n      } else if (this.configType === VsanClusterType.SINGLE_SITE_CLUSTER\n            || VsanUiUtils.isEmpty(this.faultDomainNames)) {\n         return VsanUiUtils.getString(\"vsan.cluster.configure.summary.fdAndWitnessNoConfigLabel\");\n      } else {\n         return VsanUiUtils.getString(\"vsan.cluster.configure.summary.configureFdsLabel\");\n      }\n   }\n\n   validate = (): string[] => {\n      // If stretched or ROBO cluster then prepare the stretch cluster spec\n      if (this.isStretchedConfig) {\n         this.vsanConfigSpec.stretchedClusterConfig =\n               VsanStretchedClusterConfig.Factory.create(\n                     this.witnessHost,\n                     this.witnessHostDiskMapping,\n                     this.storagePoolDisks,\n                     this.preferredName,\n                     this.getHosts(this.preferredDomains),\n                     this.secondaryName,\n                     this.getHosts(this.secondaryDomains),\n                     true);\n      }\n      // nothing to validate\n      return null;\n   };\n\n   get isStretchedConfig(): boolean {\n      return this.configType === VsanClusterType.TWO_HOST_VSAN_CLUSTER\n            || this.configType === VsanClusterType.STRETCHED_CLUSTER;\n   }\n\n   private getHosts(domainOrHostData: DomainOrHostData[]): ManagedObject[] {\n      const result: ManagedObject[] = [];\n\n      for (const domainOrHost of domainOrHostData) {\n         if (domainOrHost.isHost) {\n            result.push(ManagedObject.fromUid(domainOrHost.uid));\n         } else {\n            for (const host of domainOrHost.children) {\n               result.push(ManagedObject.fromUid(host.uid));\n            }\n         }\n      }\n      return result;\n   }\n}\n","/* Copyright 2021 VMware, Inc. All rights reserved. -- VMware Confidential */\n\nimport {LoadingFlowWrapper} from \"@service/flow/loading-flow-wrapper.data\";\n\n/**\n * This property decorator is supposed to be used along with the @Loader decorator.\n * If an exception is thrown during the execution of the method decorated with @Loader\n * the ErrorHandler method will be invoked. You can define as many ErrorHandlers as you want,\n * but they must be with different names. The name can be provided as input to the decorator.\n * If a name is set to the ErrorHandler it will handle only the errors thrown by Loader functions\n * with the same name. If no name is passed to the ErrorHandler, it will handle only the errors\n * from Loader functions with no name.\n *\n * <pre>\n * // Example 1:\n * @Loader()\n * loadSyncData(): any {\n *    throw new Error(\"Failed to load sync data\");\n * }\n *\n * @ErrorHandler()\n * handleError(err: any) {\n *    // handle the error.\n * }\n *...\n *\n * // Example 2\n *\n * @Loader({name: \"data-loading-flow})\n * async loadAsyncData(): Promise<any> {\n *    return Promise.reject(\"Failed to load async data\");\n * }\n *\n * @ErrorHandler({name: \"data-loading-flow})\n * handleError(err: any) {\n *    // handle the error.\n * }\n * ...\n * </pre>\n */\nexport function ErrorHandler(props?: ErrorHandlerProperties): MethodDecorator {\n   props = props || {};\n   return (targetClass: any, functionName: string, descriptor: PropertyDescriptor): void => {\n      (new LoadingFlowWrapper(targetClass, props.name)).errorHandler = descriptor.value;\n   };\n}\n\n/**\n * Properties of the ErrorHandler decorator.\n */\nexport interface ErrorHandlerProperties {\n\n   /**\n    * Indicates which @Loder should be handled by this @ErrorHandler\n    */\n   name?: string;\n}\n","<!--Copyright 2021-2022 VMware, Inc. All rights reserved. -- VMware Confidential-->\n<ng-container *ngIf=\"vsanConfigSpec.isVsanMaxEnabled\">\n   <vsan-claim-mode-toggle [(isAutoClaim)]=\"isAutoClaim\"\n                           [isAutoClaimAllowed]=\"isAutoClaimAllowed\"\n                           (isAutoClaimChange)=\"onIsAutoClaimChange()\">\n   </vsan-claim-mode-toggle>\n   <vsan-auto-claim-disks *ngIf=\"isAutoClaim\"\n                          [hostsClaimingData]=\"hostsClaimingData\"\n                          (claimedDisksChange)=\"onAutoClaimedDisksChange($event)\">\n   </vsan-auto-claim-disks>\n</ng-container>\n<!-- Do not destroy the components when the toggle is pressed to avoid data re-fetch and rerender -->\n<vsan-claim-disks [ngClass]=\"{'hidden' : isAutoClaim}\"\n                  [isStandalone]=\"false\"\n                  [vsanConfigSpec]=\"vsanConfigSpec\"\n                  [hostsClaimingData]=\"hostsClaimingData\"\n                  (configUpdated)=\"onConfigChange($event)\"\n                  (configValid)=\"isConfigAcceptable=$event\"\n                  (disksClaimingConfigUpdated)=\"onDisksClaimingConfigChange($event)\">\n</vsan-claim-disks>","/* Copyright 2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, OnInit} from \"@angular/core\";\nimport {InputProperty, OutputProperty, WizardPage} from \"@component/wizard/flow-metadata\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {VsanHealthStatus} from \"@generated/vsan-health-status\";\nimport {Loader} from \"@service/flow/loader.decorator\";\nimport {SrMessageType} from \"@service/screen-reader-announcer.service\";\nimport {LoadingIndicator} from \"@service/flow/loading-indicator.decorator\";\nimport {ErrorMessage} from \"@service/flow/error-message.decorator\";\nimport {ConfigureClusterService} from \"@generated/configure-cluster-service\";\nimport {ManagedObject} from \"@service/managed-object\";\nimport {PageControls} from \"@component/wizard/flow-wizard.component\";\nimport {PageItem} from \"@component/wizard/page-item\";\nimport {AlertType} from \"@component/validation/alert-type\";\nimport {IllustratedMessageType} from \"@component/illustrated-message/illustrated-message.component\";\nimport {VsanHealthUtil} from \"@util/vsan-health-util\";\nimport {VsanPrecheckHealthData} from \"@generated/vsan-precheck-health-data\";\nimport {AccordionPanelToggleExpandEventArg} from \"@directive/clr-accordion/clr-accordion-panel.directive\";\n\n@WizardPage(\n      VsanUiUtils.getString(\"vsan.cluster.configure.wizard.vsanMax.title\"),\n      \"\",\n)\n@Component({\n   templateUrl: \"vsan-max-page.html\",\n   styleUrls: [\"vsan-max-page.scss\"],\n})\nexport class VsanMaxPage implements OnInit {\n\n   @InputProperty()\n   clusterRef: ManagedObject;\n\n   @InputProperty()\n   pageControls: PageControls;\n\n   // Use separate outputProperty and assign the value to vsanConfigSpec on Services page,\n   // because it is created from scratch there and any values assigned here would be otherwise lost.\n   @OutputProperty()\n   isVsanMaxWorkflow: boolean;\n\n   @LoadingIndicator()\n   loading: boolean;\n\n   @ErrorMessage()\n   alertMessage: string;\n\n   vsanMaxPrecheckData: VsanPrecheckHealthData;\n\n   selectedTestId: string;\n\n   VsanHealthStatus: typeof VsanHealthStatus = VsanHealthStatus;\n   IllustratedMessageType: typeof IllustratedMessageType = IllustratedMessageType;\n   AlertType: typeof AlertType = AlertType;\n\n   constructor(private configService: ConfigureClusterService) {\n   }\n\n   async ngOnInit(): Promise<void> {\n      (this.pageControls as PageItem).nextButtonIsDisabled = true;\n      await this.fetchVsanMaxPrecheckData();\n      (this.pageControls as PageItem).nextButtonIsDisabled = false;\n   }\n\n   get vsanMaxAlert(): string {\n      if (this.vsanMaxPrecheckData.status === VsanHealthStatus.red) {\n         return VsanUiUtils.getString(\"vsan.cluster.configure.wizard.vsanMax.disabled.warning.ineligible\");\n      }\n\n      return !this.isVsanMaxWorkflow && this.vsanMaxPrecheckData?.status === VsanHealthStatus.green\n            ? VsanUiUtils.getString(\"vsan.cluster.configure.wizard.vsanMax.disabled.warning.eligible\")\n            : null;\n   }\n\n   @Loader({\n      srMessage: \"vsan.cluster.configure.wizard.vsanMax.title\",\n      srMessageType: SrMessageType.PAGE_TITLE,\n   })\n   private async fetchVsanMaxPrecheckData(): Promise<void> {\n      this.vsanMaxPrecheckData = await this.configService.getVsanMaxPrecheckData(this.clusterRef);\n      // Initially enable vSAN Max workflow if there are no issues reported\n      this.isVsanMaxWorkflow = this.vsanMaxPrecheckData?.status === VsanHealthStatus.green;\n      // Preselect the first test\n      if (!VsanUiUtils.isEmpty(this.vsanMaxPrecheckData?.unhealthyTests)) {\n         this.selectedTestId = this.vsanMaxPrecheckData.unhealthyTests[0].helpId;\n      }\n   }\n\n   toggleExpand(args: AccordionPanelToggleExpandEventArg<string>): void {\n      this.selectedTestId = args.isExpanded ? args.model : null;\n   }\n\n   getIconShape(status: VsanHealthStatus): string {\n      return VsanHealthUtil.getVsanHealthStatusIconShape(status);\n   }\n\n   getIconClass(status: VsanHealthStatus): string {\n      return VsanHealthUtil.getVsanHealthStatusIconClass(status);\n   }\n}\n","<!--Copyright 2017-2022 VMware, Inc. All rights reserved. -- VMware Confidential-->\n<clr-radio-container>\n   <clr-radio-wrapper>\n      <input id=\"singleSiteCluster\"\n             type=\"radio\"\n             name=\"configType\"\n             clrRadio\n             [(ngModel)]=\"configType\"\n             [value]=\"VsanClusterType.SINGLE_SITE_CLUSTER\"\n             (change)=\"updateClusterType()\"\n             checked>\n      <label id=\"singleSiteClusterLabel\"\n             for=\"singleSiteCluster\">\n         {{\"vsan.cluster.configure.wizard.configurationType.singleSite.label\" | localized}}\n      </label>\n   </clr-radio-wrapper>\n   <clr-control-helper class=\"description\">\n      {{\"vsan.cluster.configure.wizard.configurationType.singleSite.description\" | localized}}\n   </clr-control-helper>\n</clr-radio-container>\n\n<clr-radio-container>\n   <clr-radio-wrapper>\n      <input id=\"custom-fd-single-site-cluster\"\n             type=\"radio\"\n             name=\"configType\"\n             clrRadio\n             [(ngModel)]=\"configType\"\n             [value]=\"VsanClusterType.CUSTOM_FD_CLUSTER\"\n             (change)=\"updateClusterType()\">\n      <label id=\"custom-fd-single-site-cluster-label\"\n             for=\"custom-fd-single-site-cluster\">\n         {{\"vsan.cluster.configure.wizard.configurationType.customFd.label\" | localized}}\n      </label>\n   </clr-radio-wrapper>\n   <clr-control-helper class=\"description\">\n      {{\"vsan.cluster.configure.wizard.configurationType.customFd.description\" | localized}}\n   </clr-control-helper>\n</clr-radio-container>\n\n<clr-radio-container>\n   <clr-radio-wrapper>\n      <input id=\"twoHostCluster\"\n             type=\"radio\"\n             name=\"configType\"\n             aria-describedby=\"two-host-cluster-description\"\n             clrRadio\n             [(ngModel)]=\"configType\"\n             [value]=\"VsanClusterType.TWO_HOST_VSAN_CLUSTER\"\n             (change)=\"updateClusterType()\">\n      <label for=\"twoHostCluster\">\n         {{\"vsan.cluster.configure.wizard.configurationType.twoHosts.label\" | localized}}\n      </label>\n   </clr-radio-wrapper>\n   <clr-control-helper class=\"description\">\n      {{\"vsan.cluster.configure.wizard.configurationType.twoHosts.description\" | localized}}\n   </clr-control-helper>\n</clr-radio-container>\n\n<clr-radio-container>\n   <clr-radio-wrapper>\n      <input id=\"stretchCluster\"\n             type=\"radio\"\n             name=\"configType\"\n             clrRadio\n             [(ngModel)]=\"configType\"\n             [value]=\"VsanClusterType.STRETCHED_CLUSTER\"\n             (change)=\"updateClusterType()\">\n      <label for=\"stretchCluster\">\n         {{\"vsan.cluster.configure.wizard.configurationType.stretchCluster.label\" | localized}}\n      </label>\n   </clr-radio-wrapper>\n   <clr-control-helper class=\"description\">\n      {{\"vsan.cluster.configure.wizard.configurationType.stretchCluster.description\" | localized}}\n   </clr-control-helper>\n</clr-radio-container>\n\n<clr-radio-container *ngIf=\"vsanGeneralConfig.vcCapabilityData.isComputeOnlySupported\">\n   <clr-radio-wrapper>\n      <input id=\"compute-only\"\n             type=\"radio\"\n             name=\"configType\"\n             clrRadio\n             [disabled]=\"!vsanGeneralConfig.clusterCapabilityData.isComputeOnlySupported\"\n             [(ngModel)]=\"configType\"\n             [value]=\"VsanClusterType.COMPUTE_ONLY\"\n             (change)=\"updateClusterType()\">\n      <label for=\"compute-only\">\n         {{\"vsan.cluster.configure.wizard.configurationType.computeOnly.label\" | localized}}\n      </label>\n   </clr-radio-wrapper>\n   <clr-control-helper class=\"description\">\n      <div>{{\"vsan.cluster.configure.wizard.configurationType.computeOnly.description\" | localized}}</div>\n      <div *ngIf=\"!vsanGeneralConfig.clusterCapabilityData.isComputeOnlySupported\">\n         {{\"vsan.cluster.configure.wizard.configurationType.computeOnly.unsupportedMessage\" | localized}}\n      </div>\n   </clr-control-helper>\n</clr-radio-container>\n","/* Copyright 2017-2020 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Pipe, PipeTransform} from \"@angular/core\";\nimport {BaseHealthState, VsanHealthUtil} from \"@util/vsan-health-util\";\n\n@Pipe({\n   name: \"healthStateLabel\",\n})\nexport class VirtualObjectHealthStateLabelPipe implements PipeTransform {\n   transform(state: BaseHealthState | string): string {\n      return VsanHealthUtil.getVsanObjectHealthStatusText(state);\n   }\n}","/* Copyright 2017-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, OnInit} from \"@angular/core\";\nimport {GeneralConfigData} from \"@component/general-settings/general-config.data\";\nimport {VsanGeneralConfigService} from \"@component/general-settings/vsan-general-config.service\";\nimport {PageSet} from \"@component/wizard/flow-wizard.component\";\nimport {ClaimDisksWitnessHostPage} from \"@component/wizard/shared-pages/claim-disks-witness-host-page.component\";\nimport {FaultDomainsPageComponent} from \"@component/wizard/shared-pages/fault-domains-page.component\";\nimport {SingleSiteFaultDomainsPage} from \"@component/wizard/shared-pages/single-site-fault-domains-page.component\";\nimport {WitnessHostPageComponent} from \"@component/wizard/shared-pages/witness-host-page.component\";\nimport {ConfigureClusterService} from \"@generated/configure-cluster-service\";\nimport {ConfigureStretchedClusterService} from \"@generated/configure-stretched-cluster-service\";\nimport {VsanClusterType} from \"@generated/vsan-cluster-type\";\nimport {VsanStretchedClusterService} from \"@generated/vsan-stretched-cluster-service\";\nimport {ClusterComputeResource} from \"@service/client/dataservice/data-service-property\";\nimport {DataServiceClient} from \"@service/client/dataservice/data-service.service\";\nimport {ManagedObject} from \"@service/managed-object\";\nimport {StatusChangeType, VsanStatusChangeData} from \"@service/status-updates/vsan-status-change.data\";\nimport {VsanStatusService} from \"@service/status-updates/vsan-status.service\";\nimport {Logger} from \"@util/logger\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {WitnessHostUtil} from \"@util/witness-host.util\";\nimport {ClaimDisksPage} from \"./claim-disks-page.component\";\nimport {ConfigTypePage} from \"./config-type-page.component\";\nimport {ConfigureVsanSummaryPage} from \"./ready-to-complete-page.component\";\nimport {ServicesPage} from \"./services-page.component\";\nimport {VsanMaxPage} from \"./vsan-max-page.component\";\n\n@Component({\n   templateUrl: \"configure-wizard.html\",\n   selector: \"vsan-configure-wizard\",\n})\nexport class ConfigureWizardComponent implements OnInit {\n\n   static readonly DEFAULT_CONFIG_TYPE: VsanClusterType = VsanClusterType.SINGLE_SITE_CLUSTER;\n\n   /**\n    * Holds wizard context data, shared between all the pages.\n    */\n   context: any;\n   readonly services: any[] = [ConfigureClusterService, ConfigureStretchedClusterService, VsanStretchedClusterService];\n   private clusterRef: ManagedObject;\n   private generalConfigData: GeneralConfigData;\n\n   errorMessage: string;\n\n   constructor(private dataService: DataServiceClient,\n         private vsanConfigService: VsanGeneralConfigService,\n         private vsanStatusService: VsanStatusService) {\n   }\n\n   async ngOnInit(): Promise<void> {\n      this.clusterRef = ManagedObject.contextObject;\n\n      const vsanConfigPromise: Promise<GeneralConfigData> = this.vsanConfigService\n            .getVsanGeneralConfigData(this.clusterRef);\n\n      const dataServicePromise: Promise<Map<string, any>> = this.dataService.getProperties([\n         ClusterComputeResource.name,\n         ClusterComputeResource.host.length,\n      ], this.clusterRef);\n\n      let dsProperties: Map<string, any>;\n      try {\n         [this.generalConfigData, dsProperties] = await Promise.all([vsanConfigPromise, dataServicePromise]);\n         this.setWizardContext(dsProperties);\n      } catch (e) {\n         Logger.error(\"Unable to get vSAN cluster's configuration and related data service properties: \" + e);\n         this.errorMessage = VsanUiUtils.getString(\"vsan.common.error.dataExtraction\");\n      }\n   }\n\n   private setWizardContext = (properties: Map<string, any>) => {\n      const clusterName: string = properties.get(ClusterComputeResource.name);\n      let hostCount: number = properties.get(ClusterComputeResource.host.length);\n      if (!hostCount) {\n         hostCount = 0;\n      }\n      this.context = {\n         moRef: this.clusterRef,\n         clusterRef: this.clusterRef,\n         clusterName: clusterName,\n         configType: ConfigureWizardComponent.DEFAULT_CONFIG_TYPE,\n         hasDiskGroupsOnWitness: null,\n         hostsInCluster: hostCount,\n         vsanGeneralConfig: this.generalConfigData,\n         isVsanMaxWorkflow: false, // Init here, since the vSAN max page is not always added.\n      };\n   };\n\n   private includeClaimDisksPage = (configType: VsanClusterType,\n         hasDiskGroupsOnWitness: boolean,\n         isWitnessDeployedFromOvf: boolean,\n         isVsanMaxWorkflow: boolean): boolean => {\n      return WitnessHostUtil.isClaimDisksPageVisible(\n            configType, hasDiskGroupsOnWitness, isWitnessDeployedFromOvf, isVsanMaxWorkflow);\n   };\n\n   readonly pages: PageSet[] = [\n      new PageSet([ConfigTypePage]),\n      new PageSet([VsanMaxPage],\n            (vsanGeneralConfig: GeneralConfigData, configType: VsanClusterType) => {\n               return configType !== VsanClusterType.COMPUTE_ONLY\n                     && vsanGeneralConfig?.clusterCapabilityData.isVsanMaxSingleTierSupported;\n            }),\n      new PageSet([ServicesPage],\n            /*\n             * The services page only loads content when capabilities are enabled.\n             * If all of them are disabled we better hide it or it will be empty in the wizard.\n             */\n            (vsanGeneralConfig: GeneralConfigData, configType: VsanClusterType) => {\n               return vsanGeneralConfig\n                     && !(configType === VsanClusterType.COMPUTE_ONLY)\n                     && (vsanGeneralConfig.clusterCapabilityData.isEncryptionSupported\n                           || vsanGeneralConfig.clusterCapabilityData.isCompressionOnlySupported\n                           || vsanGeneralConfig.clusterCapabilityData.isDeduplicationAndCompressionSupported\n                           || vsanGeneralConfig.clusterCapabilityData.isAdvancedClusterOptionsSupported\n                           || vsanGeneralConfig.clusterCapabilityData.isRdmaSupported);\n            }),\n      new PageSet([ClaimDisksPage],\n            (configType: VsanClusterType) => !(configType === VsanClusterType.COMPUTE_ONLY)),\n      new PageSet([SingleSiteFaultDomainsPage],\n            (configType: VsanClusterType) => {\n               return configType === VsanClusterType.CUSTOM_FD_CLUSTER;\n            }),\n      new PageSet([WitnessHostPageComponent],\n            (configType: VsanClusterType) => configType === VsanClusterType.TWO_HOST_VSAN_CLUSTER),\n      new PageSet([FaultDomainsPageComponent, WitnessHostPageComponent],\n            (configType: VsanClusterType) => configType === VsanClusterType.STRETCHED_CLUSTER),\n      new PageSet([ClaimDisksWitnessHostPage], this.includeClaimDisksPage),\n      new PageSet([ConfigureVsanSummaryPage]),\n   ];\n\n   onConfigureFinish(taskRef: ManagedObject): void {\n      this.vsanStatusService.storeChange(new VsanStatusChangeData(taskRef, StatusChangeType.VSAN_SERVICE_ENABLED));\n      VsanUiUtils.closeModalDialog();\n   }\n}\n","/* Copyright 2020-2022 VMware, Inc. All rights reserved. -- VMware Confidential */\nexport class VsanDialogUtil {\n   static readonly CAPACITY_MANAGEMENT_DIALOG: VsanDialogProperties = {\n      width: 800,\n      height: 700,\n   };\n\n   static readonly DELETE_VOLUME_DIALOG: VsanDialogProperties = {\n      width: 500,\n      height: 250,\n   };\n\n   static readonly MIGRATE_VOLUME_DIALOG: VsanDialogProperties = {\n      width: 1030,\n      height: 710,\n   };\n\n   static readonly REAPPLY_VOLUME_POLICY_DIALOG: VsanDialogProperties = {\n      width: 700,\n      height: 250,\n   };\n\n   static readonly DUPLICATE_PCI_ID_MODEL_SELECTION_DIALOG: VsanDialogProperties = {\n      width: 800,\n      height: 500,\n   };\n\n   static readonly HEALTH_RESTORE_ACTION_DIALOG: VsanDialogProperties = {\n      width: 550,\n      height: 250,\n   };\n\n   // Keep in sync with plugin.xml extension point\n   static readonly CLUSTER_POWER_ON_DIALOG: VsanDialogProperties = {\n      width: 600,\n      height: 230,\n   };\n\n   static readonly VM_IO_DIAGNOSTICS_METRICS_DIALOG: VsanDialogProperties = {\n      width: 900,\n      height: 700,\n   };\n\n   static readonly VM_IO_DIAGNOSTICS_LATENCY_DIALOG: VsanDialogProperties = {\n      width: 1000,\n      height: 500,\n   };\n\n   static readonly VM_IO_DIAGNOSTICS_DOM_OWNER_LATENCY_DIALOG: VsanDialogProperties = {\n      width: 1000,\n      height: 400,\n   };\n\n   static readonly PERF_SVC_EDIT_ACTION_DIALOG: VsanDialogProperties = {\n      width: 800,\n      height: 450,\n   };\n\n   static readonly PERF_SVC_ENABLE_ACTION_DIALOG: VsanDialogProperties = {\n      width: 800,\n      height: 250,\n   };\n\n   static readonly CLAIM_DISKS_ACTION_DIALOG: VsanDialogProperties = {\n      width: 1200,\n      height: 650,\n   };\n\n   static readonly VSAN_DISK_CLAIM_ACTION_DIALOG: VsanDialogProperties = {\n      width: 670,\n      height: 300,\n   };\n}\n\nexport class VsanDialogProperties {\n   width: number;\n   height: number;\n}\n","/* Copyright 2017-2020 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, OnInit} from \"@angular/core\";\nimport {ManagedObject} from \"@service/managed-object\";\nimport {InputProperty, OutputProperty, WizardPage} from \"@component/wizard/flow-metadata\";\nimport {OnValidate, PageControls} from \"@component/wizard/flow-wizard.component\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {VsanCapabilityProvider} from \"@generated/vsan-capability-provider\";\nimport {EncryptionPropertyProvider} from \"@generated/encryption-property-provider\";\nimport {VsanConfigSpec} from \"@generated/vsan-config-spec\";\nimport {GeneralConfigData} from \"@component/general-settings/general-config.data\";\nimport {SpaceEfficiencyConfig} from \"@generated/space-efficiency-config\";\nimport {SpaceEfficiencyService} from \"@service/space-efficiency-service\";\nimport {VsanClusterType} from \"@generated/vsan-cluster-type\";\n\n@WizardPage(\n      VsanUiUtils.getString(\"vsan.cluster.configure.wizard.services.title\"),\n      VsanUiUtils.getString(\"vsan.cluster.configure.wizard.services.description\"),\n      [VsanCapabilityProvider, EncryptionPropertyProvider],\n)\n@Component({\n   templateUrl: \"services-page.html\",\n})\nexport class ServicesPage implements OnInit, OnValidate {\n\n   VsanClusterType: typeof VsanClusterType = VsanClusterType;\n\n   @InputProperty()\n   vsanGeneralConfig: GeneralConfigData;\n\n   @InputProperty()\n   configType: VsanClusterType;\n\n   @InputProperty()\n   hasHybridDiskGroups: boolean;\n\n   @InputProperty()\n   pageControls: PageControls;\n\n   @InputProperty()\n   clusterRef: ManagedObject;\n\n   @InputProperty()\n   isVsanMaxWorkflow: boolean;\n\n   @InputProperty()\n   @OutputProperty()\n   vsanConfigSpec: VsanConfigSpec;\n\n   constructor(private spaceEfficiencyService: SpaceEfficiencyService) {\n   }\n\n   ngOnInit(): void {\n      // ensure RDMA is always disabled for Configure vSAN wizard\n      if (this.vsanGeneralConfig.clusterCapabilityData.isRdmaSupported) {\n         this.vsanConfigSpec.enableRdma = false;\n      }\n   }\n\n   updateVsanConfig(config: VsanConfigSpec) {\n      this.vsanConfigSpec = VsanUiUtils.deepClone(config);\n   }\n\n   validate(): string[] {\n      const validationErrors: string[] = this.vsanGeneralConfig.validateConfig(this.vsanConfigSpec);\n\n      const spaceEfficiency: SpaceEfficiencyConfig = this.vsanConfigSpec.spaceEfficiencyConfig;\n      if (this.spaceEfficiencyService.isOnlyAllFlashSupportedForClaimingDisks(spaceEfficiency)\n            && this.hasHybridDiskGroups) {\n         validationErrors.push(\n               VsanUiUtils.getString(\"vsan.generalConfig.hybridGroupsExist.warning\",\n                     this.spaceEfficiencyService.toLabel(spaceEfficiency)));\n      }\n\n      // If there are validation errors dismiss the disk wiping warning as errors are more important.\n      return validationErrors.length > 0 ? validationErrors : null;\n   }\n}\n","<!--Copyright 2017-2020 VMware, Inc. All rights reserved. -- VMware Confidential-->\n<!-- Config type -->\n<vsan-summary-entry [label]=\"'vsan.cluster.configure.summary.configurationType' | localized\">\n   <span id=\"config-type-entry\">\n      {{configTypeLabel}}\n   </span>\n</vsan-summary-entry>\n\n<!-- Compute-only clusters do not support the standard vSAN services -->\n<ng-container *ngIf=\"configType !== VsanClusterType.COMPUTE_ONLY\">\n   <!-- vSAN Max -->\n   <vsan-summary-entry *ngIf=\"clusterCapabilityData.isVsanMaxSingleTierSupported\"\n                       [label]=\"'vsan.cluster.configure.summary.vsanMax' | localized\">\n      <span id=\"vsan-max-entry\">{{vsanMaxStatus}}</span>\n   </vsan-summary-entry>\n\n   <!-- Space Efficiency -->\n   <vsan-summary-entry [label]=\"'vsan.cluster.configure.summary.spaceEfficiencyLabel' | localized\">\n      <span id=\"dedup-enabled-entry\">\n         {{spaceEfficiencyStatus}}\n      </span>\n   </vsan-summary-entry>\n\n   <!-- Data-At-Rest Encryption -->\n   <ng-container *ngIf=\"vcCapabilityData.isEncryptionSupported && encryptionPermissions\">\n      <vsan-summary-entry *ngIf=\"!vsanConfigSpec.enableDataAtRestEncryption\"\n                          [label]=\"'vsan.cluster.configure.summary.dataAtRestEncryptionLabel' | localized\">\n         <span id=\"dedup-disabled-entry\">\n            {{'vsan.common.no' | localized}}\n         </span>\n      </vsan-summary-entry>\n      <vsan-summary-entry *ngIf=\"vsanConfigSpec.enableDataAtRestEncryption\"\n                          [label]=\"'vsan.cluster.configure.summary.dataAtRestEncryptionLabel' | localized\">\n         <span id=\"dedup-kmip-entry\">\n            {{\"vsan.cluster.configure.summary.encryption.withKmipCluster\" | localized: vsanConfigSpec.kmipClusterId}}\n         </span>\n      </vsan-summary-entry>\n      <vsan-summary-entry *ngIf=\"vsanConfigSpec.enableDataAtRestEncryption\"\n                          [label]=\"'vsan.cluster.configure.summary.eraseDisksBeforeUse' | localized\">\n         <span id=\"erase-disks-entry\">\n            {{eraseDisksBeforeUseLabel}}\n         </span>\n      </vsan-summary-entry>\n   </ng-container>\n\n   <!-- Allow Reduced Redundancy -->\n   <vsan-summary-entry [label]=\"'vsan.cluster.configure.summary.allowReducedRedundancy' | localized\">\n      <span id=\"allow-redundancy-entry\">\n         {{allowReducedRedundancyLabel}}\n      </span>\n   </vsan-summary-entry>\n\n   <!-- Data-In-Transit Encryption -->\n   <ng-container *ngIf=\"clusterCapabilityData.isDataInTransitEncryptionSupported\">\n      <vsan-summary-entry [label]=\"'vsan.cluster.configure.summary.dataInTransitEncryptionLabel' | localized\">\n         <span id=\"data-in-transit-entry\">\n            {{dataInTransitEncryptionEnabled}}\n         </span>\n      </vsan-summary-entry>\n   </ng-container>\n\n   <!-- Large Scale Cluster Support -->\n   <!-- Show setting for large cluster support (more than 32 hosts) if it is NOT supported natively -->\n   <vsan-summary-entry *ngIf=\"!clusterCapabilityData.isNativeLargeClusterSupported\"\n                       [label]=\"'configureVsan.settings.largeScaleClusterSupport.label' | localized\">\n      <span id=\"large-scale-cluster-support\">\n         {{largeScaleClusterSupportLabel}}\n      </span>\n   </vsan-summary-entry>\n\n   <!-- Disk Claiming Config -->\n   <ng-container *ngIf=\"hasNewClaimedCapacity(ClaimOption.ClaimForStorage)\">\n      <vsan-summary-entry [label]=\"'vsan.cluster.configure.summary.diskClaiming' | localized\">\n         <span id=\"group-type-entry\">\n            {{(disksClaimingConfigInfo.claimAllFlash\n               ? 'vsan.cluster.configure.summary.diskClaiming.allFlash'\n               : 'vsan.cluster.configure.summary.diskClaiming.hybrid') | localized}}\n         </span>\n      </vsan-summary-entry>\n      <!-- TODO dtsvetkova: confirm with Abbey if we want to include warning in Ready to complete page. -->\n      <vsan-validation *ngIf=\"disksClaimingConfigInfo.disksNotEquallySpread\"\n                       alertType=\"warning\"\n                       [alert]=\"'vsan.cluster.configure.summary.semiAutoClaimDialog.warning.notOptimumSelection' | localized\"\n                       [isSmall]=\"true\"\n                       [allowClose]=\"false\">\n      </vsan-validation>\n      <vsan-validation *ngIf=\"disksClaimingConfigInfo.mixedDiskClaiming\"\n                       alertType=\"warning\"\n                       [alert]=\"'vsan.cluster.configure.summary.semiAutoClaimDialog.warning.mixedCreateEditMode' | localized\"\n                       [isSmall]=\"true\"\n                       [allowClose]=\"false\">\n      </vsan-validation>\n      <vsan-summary-entry [label]=\"getClaimOptionLabel(ClaimOption.ClaimForStorage)\">\n         <span id=\"total-capacity-entry\">\n            {{totalClaimedCapacity(ClaimOption.ClaimForStorage)}}\n         </span>\n      </vsan-summary-entry>\n      <vsan-summary-entry [label]=\"getClaimOptionLabel(ClaimOption.ClaimForCache)\">\n         <span id=\"total-cache-entry\">\n            {{totalClaimedCapacity(ClaimOption.ClaimForCache)}}\n         </span>\n      </vsan-summary-entry>\n   </ng-container>\n\n   <!-- Claimed disks for vSAN Max -->\n   <ng-container *ngIf=\"vsanConfigSpec.isVsanMaxEnabled\">\n      <vsan-summary-entry [label]=\"'vsan.cluster.configure.summary.vsanMaxDatastore.claimedDisks.label' | localized\">\n         <span id=\"total-disks-vsan-max-entry\">{{vsanMaxTotalClaimedDisks()}}</span>\n      </vsan-summary-entry>\n   </ng-container>\n\n   <!-- Total claimed capacity for all types of claimed disks -->\n   <ng-container *ngIf=\"managedClaimOptions.length\">\n      <vsan-summary-entry *ngFor=\"let claimOption of managedClaimOptions\"\n                          [label]=\"getClaimOptionLabel(claimOption)\">\n         <span id=\"{{'total-' + claimOption + '-entry'}}\">\n            {{totalClaimedCapacity(claimOption)}}\n         </span>\n      </vsan-summary-entry>\n   </ng-container>\n\n   <!-- Fault domains -->\n   <vsan-summary-entry [label]=\"'vsan.cluster.configure.summary.faultDomainsAndWitness' | localized\">\n      <span id=\"fault-domains-entry\">\n         {{faultDomainsConfigString}}\n      </span>\n   </vsan-summary-entry>\n\n   <ng-container *ngIf=\"isStretchedConfig\">\n      <vsan-summary-entry [label]=\"'vsan.cluster.configure.summary.preferredFd' | localized\">\n         <span id=\"preferred-domain-entry\">\n            {{preferredName}}\n         </span>\n      </vsan-summary-entry>\n      <vsan-summary-entry [label]=\"'vsan.cluster.configure.summary.secondaryFd' | localized\">\n         <span id=\"secnodary-domain-entry\">\n            {{secondaryName}}\n         </span>\n      </vsan-summary-entry>\n      <vsan-summary-entry [label]=\"'vsan.cluster.configure.summary.witnessHostLabel' | localized\">\n         <span id=\"witness-host-entry\">\n            {{witnessHostName}}\n         </span>\n      </vsan-summary-entry>\n   </ng-container>\n\n   <!-- Fault domain names -->\n   <ng-container *ngIf=\"faultDomainNames?.length\">\n      <vsan-summary-entry [label]=\"'vsan.cluster.configure.summary.faultDomains' | localized\">\n         <div> <!-- Needed to keep the domain names on separate lines, as vsan-summary-entry has flex display -->\n            <div *ngFor=\"let domainName of faultDomainNames\" id=\"domain_{{domainName}}_\">\n               {{domainName}}\n            </div>\n         </div>\n      </vsan-summary-entry>\n   </ng-container>\n\n   <!-- RDMA config -->\n   <ng-container *ngIf=\"clusterCapabilityData.isRdmaSupported\">\n      <vsan-summary-entry [label]=\"'vsan.services.network.rdmaSupport.label' | localized\">\n         <span id=\"rdma-configuration-entry\">\n            {{rdmaLabel}}\n         </span>\n      </vsan-summary-entry>\n   </ng-container>\n</ng-container>\n\n<ng-container *ngIf=\"configType === VsanClusterType.COMPUTE_ONLY\">\n   <vsan-validation [alertType]=\"'info'\"\n                    [alert]=\"'vsan.cluster.configure.summary.computeOnlyClusterInfoMessage' | localized\"\n                    [isSmall]=\"true\"\n                    [allowClose]=\"false\">\n   </vsan-validation>\n</ng-container>\n","/* Copyright 2017-2022 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, OnInit} from \"@angular/core\";\nimport {AutoClaimSummaryData} from \"@component/diskmgmt/model/auto-claim-summary.data\";\nimport {DisksClaimingConfigInfo} from \"@component/diskmgmt/model/disks-claiming-config-info.data\";\nimport {InputProperty, OutputProperty, WizardPage} from \"@component/wizard/flow-metadata\";\nimport {OnValidate, PageControls} from \"@component/wizard/flow-wizard.component\";\nimport {PageItem} from \"@component/wizard/page-item\";\nimport {DiskManagementService} from \"@generated/disk-management-service\";\nimport {SpaceEfficiencyConfig} from \"@generated/space-efficiency-config\";\nimport {VsanClaimDisksData} from \"@generated/vsan-claim-disks-data\";\nimport {VsanClaimHostDiskMappingsSpec} from \"@generated/vsan-claim-host-disk-mappings-spec\";\nimport {VsanConfigSpec} from \"@generated/vsan-config-spec\";\nimport {DiskMgmtUtil} from \"@util/disk-mgmt.util\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\n\n@WizardPage(\n      VsanUiUtils.getString(\"vsan.configure.claimDisksPage.title\"),\n      VsanUiUtils.getString(\"vsan.configure.claimDisksPage.description\"),\n      [DiskManagementService],\n)\n@Component({\n   templateUrl: \"claim-disks-page.html\",\n   styleUrls: [\"claim-disks-page.scss\"],\n})\nexport class ClaimDisksPage implements OnInit, OnValidate {\n\n   @InputProperty()\n   pageControls: PageControls;\n\n   @InputProperty()\n   @OutputProperty()\n   vsanConfigSpec: VsanConfigSpec;\n\n   private _hostsClaimingData: Map<string, VsanClaimDisksData>;\n\n   get hostsClaimingData(): Map<string, VsanClaimDisksData> {\n      return this._hostsClaimingData;\n   }\n\n   @InputProperty()\n   set hostsClaimingData(value: Map<string, VsanClaimDisksData>) {\n      this._hostsClaimingData = new Map<string, VsanClaimDisksData>(Object.entries(value));\n   }\n\n   @OutputProperty()\n   disksClaimingConfigInfo: DisksClaimingConfigInfo;\n\n   @OutputProperty()\n   autoClaimedDisks: AutoClaimSummaryData;\n\n   @OutputProperty()\n   isAutoClaim: boolean = false;\n\n   dataEfficiency: SpaceEfficiencyConfig;\n   isConfigAcceptable: boolean;\n   isAutoClaimAllowed: boolean = false;\n\n   // Set to \"true\" when disk data for manual claiming is collected\n   private isManualClaimDiskDataLoaded: boolean = false;\n\n   ngOnInit(): void {\n      this.dataEfficiency = this.vsanConfigSpec.spaceEfficiencyConfig;\n      // Set auto claim ON for vsan MAX, when there are compatible disks\n      this.isAutoClaimAllowed = DiskMgmtUtil.hasVsanMaxCompatibleDisks([...this.hostsClaimingData?.values()]);\n      this.isAutoClaim = this.vsanConfigSpec.isVsanMaxEnabled && this.isAutoClaimAllowed;\n      // Disable the next button, when manual claim mode page is loaded initially\n      // as it loads some more data upon initialization.\n      if (!this.isAutoClaim) {\n         this.disableNextButton();\n      }\n   }\n\n   validate(): string[] {\n      if (!this.isConfigAcceptable) {\n         return [VsanUiUtils.getString(\"vsan.dialog.semiAutoClaimDialog.confError.notAcceptableErrors\")];\n      }\n\n      return null;\n   }\n\n   onConfigChange(diskMappings: VsanClaimHostDiskMappingsSpec[]): void {\n      this.vsanConfigSpec.diskMappings = diskMappings;\n      this.pageControls.rebuildToc();\n      (this.pageControls as PageItem).nextButtonIsDisabled = false;\n      this.isManualClaimDiskDataLoaded = true;\n   }\n\n   onIsAutoClaimChange(): void {\n      this.vsanConfigSpec.isDiskClaimVsanManaged = this.isAutoClaim;\n      // Disable Next button on initial switch between auto/manual claim if the manual claim disk data is not yet\n      // collected.\n      if (!this.isManualClaimDiskDataLoaded && !this.isAutoClaim) {\n         this.disableNextButton();\n      }\n   }\n\n   onDisksClaimingConfigChange(disksClaimingConfig: DisksClaimingConfigInfo): void {\n      this.disksClaimingConfigInfo = disksClaimingConfig;\n   }\n\n   onAutoClaimedDisksChange(autoClaimedDisks: AutoClaimSummaryData): void {\n      this.autoClaimedDisks = autoClaimedDisks;\n   }\n\n   private disableNextButton(): void {\n      (this.pageControls as PageItem).nextButtonIsDisabled = true;\n   }\n}\n","/* Copyright 2019-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {NgModule} from \"@angular/core\";\nimport {CommonModule} from \"@angular/common\";\nimport {FormsModule, ReactiveFormsModule} from \"@angular/forms\";\nimport {RouterModule, Routes} from \"@angular/router\";\nimport {ClarityModule} from \"@clr/angular\";\nimport {GeneralSettingsModule} from \"@component/general-settings/general-settings.module\";\nimport {ConfigureWizardComponent} from \"./configure-wizard.component\";\nimport {ClaimDisksPage} from \"./claim-disks-page.component\";\nimport {ConfigTypePage} from \"./config-type-page.component\";\nimport {EnableServicesComponent} from \"./enable-services.component\";\nimport {ConfigureVsanSummaryPage} from './ready-to-complete-page.component';\nimport {ServicesPage} from \"./services-page.component\";\nimport {NgDragDropModule} from \"ng-drag-drop\";\nimport {VsanCommonModule} from \"app/vsan/common/vsan-common.module\";\nimport {FlowWizardModule} from \"@component/wizard/flow-wizard.module\";\nimport {WizardSharedPagesModule} from \"@component/wizard/shared-pages/wizard-shared-pages.module\";\nimport {DiskmgmtCommonModule} from \"@component/diskmgmt/diskmgmt-common.module\";\nimport {FaultDomainValidationService} from \"@service/fault-domain-validation.service\";\nimport {VsanMaxPage} from \"./vsan-max-page.component\";\nimport {IllustratedMessageModule} from \"@component/illustrated-message/illustrated-message.module\";\nimport {HealthDetailsCardModule} from \"../../../health/health-details-card.module\";\n\nconst configureWizardRoutes: Routes = [\n   {\n      path: \"\",\n      component: ConfigureWizardComponent\n   },\n   {\n      path: \"emptyCluster\",\n      component: EnableServicesComponent\n   },\n];\n\n@NgModule({\n   imports: [\n      CommonModule,\n      FormsModule,\n      ReactiveFormsModule,\n      ClarityModule,\n      NgDragDropModule,\n      VsanCommonModule,\n      FlowWizardModule,\n      GeneralSettingsModule,\n      DiskmgmtCommonModule,\n      WizardSharedPagesModule,\n      RouterModule.forChild(configureWizardRoutes),\n      IllustratedMessageModule,\n      HealthDetailsCardModule,\n   ],\n   declarations: [\n      ConfigureWizardComponent,\n      ServicesPage,\n      ClaimDisksPage,\n      ConfigTypePage,\n      EnableServicesComponent,\n      ConfigureVsanSummaryPage,\n      VsanMaxPage,\n   ],\n   entryComponents: [\n      ConfigTypePage,\n      ServicesPage,\n      ClaimDisksPage,\n      ConfigureVsanSummaryPage,\n      VsanMaxPage,\n   ],\n   providers: [FaultDomainValidationService],\n})\nexport class ConfigureWizardModule {\n}","<!--Copyright 2020 VMware, Inc. All rights reserved. -- VMware Confidential-->\n<vsan-general-settings\n      *ngIf=\"vsanGeneralConfig\"\n      [clusterRef]=\"clusterRef\"\n      [config]=\"vsanGeneralConfig\"\n      [showTitles]=\"false\"\n      [showLargeScaleClusterSupportOption]=\"!vsanGeneralConfig.clusterCapabilityData.isNativeLargeClusterSupported\"\n      [showRdmaSupportOption]=\"vsanGeneralConfig.clusterCapabilityData.isRdmaSupported\"\n      [resetRdmaStatus]=\"true\"\n      [configType]=\"configType\"\n      [isVsanMaxWorkflow]=\"isVsanMaxWorkflow\"\n      (vsanConfigSpecChange)=\"updateVsanConfig($event)\">\n</vsan-general-settings>\n","/* Copyright 2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {\n   AfterViewInit,\n   ComponentFactoryResolver,\n   Directive,\n   ElementRef,\n   Host,\n   Input,\n   Optional,\n   Renderer2,\n   Self,\n} from \"@angular/core\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {NavigationService} from \"@navigation/navigation.service\";\nimport {ClrButtonBaseDirective} from \"@directive/clr-button-group/clr-button-base.directive\";\nimport {ClrButton} from \"@clr/angular\";\n\n/**\n * Decorates a button or an anchor as external link. Requires one of the optional parameters articleId, helpId or url.\n *\n * @param external-link: Optional. Localization key of the text label of the external link. If omitted default label\n * will be used - \"Learn more\" for anchors or \"Ask VMWare\" for buttons.\n * @param articleId - Optional. Id of article in knowledge base.\n * @param helpId - Optional. Help id which will redirect to Knowledge Base.\n * @param url - Optional. External URL.\n */\n@Directive({\n   selector: \"a[external-link], button[external-link], clr-button[external-link]\",\n})\nexport class ExternalLinkDirective extends ClrButtonBaseDirective implements AfterViewInit {\n   private readonly ASK_VMWARE_DEFAULT_TEXT_KEY: string = \"vsan.common.askVMware\";\n   private readonly LEARN_MORE_DEFAULT_TEXT_KEY: string = \"vsan.common.learnMore\";\n\n   private readonly CONTAINER_CLASS: string = \"icon-name-container\";\n   private readonly NAVIGATION_EVENT_TYPE: string = \"click\";\n   private readonly LEAD_TO_NOWHERE_URL: string = \"javascript://\";\n   private readonly HTML_ELEMENT_SPAN_NAME: string = \"span\";\n   private readonly HTML_ELEMENT_ICON_NAME: string = \"clr-icon\";\n   private readonly HTML_ELEMENT_ROLE_ATTR_NAME: string = \"role\";\n   private readonly HTML_ELEMENT_ROLE_ATTR_VALUE: string = \"link\";\n   private readonly ICON_SHAPE_ATTR_NAME: string = \"shape\";\n   private readonly ICON_SHAPE_ATTR_VALUE: string = \"pop-out\";\n   private readonly ICON_SIZE_ATTR_NAME: string = \"size\";\n   private readonly ICON_SIZE_ATTR_VALUE: string = \"16\";\n   private readonly ICON_CLASS_ATTR_NAME: string = \"class\";\n   private readonly ICON_CLASS_ATTR_VALUE: string = \"link\";\n   private readonly ICON_TITLE_ATTR_NAME: string = \"title\";\n\n   private readonly KB_URL: string = \"http://kb.vmware.com/kb/\";\n\n   @Input(\"external-link\")\n   anchorText: string;\n\n   @Input()\n   articleId: string;\n\n   @Input()\n   helpId: string;\n\n   @Input()\n   url: string;\n\n   constructor(private el: ElementRef<HTMLElement>,\n         private resolver: ComponentFactoryResolver,\n         private renderer: Renderer2,\n         private navigationService: NavigationService,\n         // this variable will be initialized only if the host is clr-button\n         @Host() @Self() @Optional() clrButton: ClrButton) {\n      super(clrButton);\n   }\n\n   ngAfterViewInit(): void {\n      const element: HTMLElement = this.el.nativeElement;\n      // continue only if element is HTML link or button\n      if (!this.isLink(element) && !this.isButton(element)) {\n         // element is clr-button, wait until html button for it is resolved - handled by resloveButton\n         return;\n      }\n      this.prepareExternalLink(element);\n   }\n\n   resolveButton(clrButton: ClrButton, button: HTMLButtonElement, index: number): void {\n      // only if element is clr-button. At this point the html button is already resolved. Apply on it.\n      this.prepareExternalLink(button);\n   }\n\n   private prepareExternalLink(element: HTMLElement): void {\n      this.renderer.addClass(element, this.CONTAINER_CLASS);\n\n      this.setText(element);\n      if (this.isLink(element)) {\n         this.decorateLink(element);\n      } else {\n         this.addLinkRole(element);\n      }\n\n      this.initializeNavigationHandler(element);\n   }\n\n   private isButton(element: HTMLElement): boolean {\n      return element instanceof HTMLButtonElement;\n   }\n\n   private isLink(element: HTMLElement): boolean {\n      return element instanceof HTMLAnchorElement;\n   }\n\n   private setText(element: HTMLElement): void {\n      const span: HTMLSpanElement = this.renderer.createElement(this.HTML_ELEMENT_SPAN_NAME);\n      span.innerText = this.getText(element);\n      this.renderer.appendChild(element, span);\n\n      const icon: HTMLSpanElement = this.renderer.createElement(this.HTML_ELEMENT_ICON_NAME);\n      icon.setAttribute(this.ICON_SHAPE_ATTR_NAME, this.ICON_SHAPE_ATTR_VALUE);\n      icon.setAttribute(this.ICON_SIZE_ATTR_NAME, this.ICON_SIZE_ATTR_VALUE);\n      icon.setAttribute(this.ICON_CLASS_ATTR_NAME, this.ICON_CLASS_ATTR_VALUE);\n      // Set title of the icon for screen readers clarity\n      icon.setAttribute(this.ICON_TITLE_ATTR_NAME, VsanUiUtils.getString(\"vsan.screenReader.label.externalLink.icon\"));\n      this.renderer.appendChild(element, icon);\n   }\n\n   private getText(element: HTMLElement): string {\n      if (this.anchorText) {\n         return this.anchorText;\n      }\n      const key: string = this.isButton(element) ? this.ASK_VMWARE_DEFAULT_TEXT_KEY : this.LEARN_MORE_DEFAULT_TEXT_KEY;\n      return VsanUiUtils.getString(key);\n   }\n\n   private decorateLink(element: HTMLElement): void {\n      const linkElement: HTMLLinkElement = element as HTMLLinkElement;\n      // don't use href attribute. If omitted, the link will be not visualized properly.\n      linkElement.href = this.LEAD_TO_NOWHERE_URL;\n      // display link on same line\n      linkElement.style.display = \"inline-flex\";\n   }\n\n   private initializeNavigationHandler(element: HTMLElement): void {\n      element.addEventListener(this.NAVIGATION_EVENT_TYPE, () => {\n         if (this.helpId) {\n            this.navigationService.askVMware(this.helpId);\n            return;\n         }\n         if (this.articleId) {\n            this.navigationService.navigateToAddress(`${this.KB_URL}${this.articleId}`);\n            return;\n         }\n         if (this.url) {\n            this.navigationService.navigateToAddress(this.url);\n         }\n      });\n   }\n\n   // Indicate external navigation by assigning \"link\" role\n   private addLinkRole(element: HTMLElement): void {\n      this.renderer.setAttribute(element, this.HTML_ELEMENT_ROLE_ATTR_NAME, this.HTML_ELEMENT_ROLE_ATTR_VALUE);\n   }\n}","<vsan-create-prompt\n      [title]=\"'vsan.cluster.configure.wizard.title' | localized\"\n      [confirmText]=\"'vsan.common.apply' | localized\"\n      [blockContent]=\"loading || saving\"\n      [blockButton]=\"loading || saving\"\n      [(alertMessages)]=\"errors\"\n      (onConfirm)=\"confirm()\">\n   <vsan-validation\n         id=\"emptyClusterWarning\"\n         [alert]=\"'vsan.generalConfig.emptyClusterWarningText' | localized\"\n         [allowClose]=\"false\"\n         [alertType]=\"'warning'\">\n   </vsan-validation>\n   <vsan-general-settings\n         *ngIf=\"!loading\"\n         [clusterRef]=\"clusterRef\"\n         [config]=\"config\"\n         [showTitles]=\"false\"\n         [showComputeOnlyOption]=\"true\"\n         [showVsanMaxOption]=\"true\"\n         [showAllowReducedRedundancyOption]=\"false\"\n         [showLargeScaleClusterSupportOption]=\"true\"\n         (vsanConfigSpecChange)=\"vsanConfigSpec=$event\">\n   </vsan-general-settings>\n</vsan-create-prompt>\n","/* Copyright 2017-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, OnInit, ViewChild} from \"@angular/core\";\nimport {GeneralConfigData} from \"@component/general-settings/general-config.data\";\nimport {GeneralSettingsComponent} from \"@component/general-settings/general-settings.component\";\nimport {VsanGeneralConfigService} from \"@component/general-settings/vsan-general-config.service\";\nimport {ConfigureClusterService} from \"@generated/configure-cluster-service\";\nimport {VsanConfigSpec} from \"@generated/vsan-config-spec\";\nimport {ErrorHandler} from \"@service/flow/error-handler.decorator\";\nimport {LoaderName} from \"@service/flow/loader-name\";\nimport {Loader} from \"@service/flow/loader.decorator\";\nimport {LoadingIndicator} from \"@service/flow/loading-indicator.decorator\";\nimport {ManagedObject} from \"@service/managed-object\";\nimport {SrMessageType} from \"@service/screen-reader-announcer.service\";\nimport {StatusChangeType, VsanStatusChangeData} from \"@service/status-updates/vsan-status-change.data\";\nimport {VsanStatusService} from \"@service/status-updates/vsan-status.service\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\n\n/**\n * Shown instead of the Configure vSAN wizard in case the cluster has no hosts.\n */\n@Component({\n   templateUrl: \"enable-services.html\",\n   styleUrls: [\"enable-services.scss\"],\n   selector: \"vsan-configure-empty-cluster\",\n})\nexport class EnableServicesComponent implements OnInit {\n\n   @ViewChild(GeneralSettingsComponent)\n   generalSettingsComponent: GeneralSettingsComponent;\n\n   config: GeneralConfigData;\n   vsanConfigSpec: VsanConfigSpec;\n\n   clusterRef: ManagedObject;\n\n   @LoadingIndicator({name: LoaderName.ON_INIT})\n   loading: boolean;\n\n   @LoadingIndicator({name: LoaderName.ON_CONFIRM})\n   saving: boolean;\n\n   errors: string[] = [];\n\n   constructor(private configService: ConfigureClusterService,\n         private vsanConfigService: VsanGeneralConfigService,\n         private vsanStatusService: VsanStatusService) {\n   }\n\n   @Loader({\n      name: LoaderName.ON_INIT,\n      srMessage: \"vsan.cluster.configure.wizard.title\",\n      srMessageType: SrMessageType.PAGE_TITLE,\n   })\n   async ngOnInit(): Promise<void> {\n      this.clusterRef = ManagedObject.contextObject;\n      this.config = await this.vsanConfigService.getVsanGeneralConfigData(this.clusterRef);\n      this.vsanConfigSpec = this.config.cloneVsanConfigSpec();\n   }\n\n   @ErrorHandler({name: LoaderName.ON_INIT})\n   private handleInitError(error: string): void {\n      this.errors.push(error);\n   }\n\n   @Loader({name: LoaderName.ON_CONFIRM})\n   async confirm(): Promise<void> {\n      const errors: string[] = this.generalSettingsComponent.config.validateConfig(this.vsanConfigSpec);\n      if (errors.length > 0) {\n         this.errors = errors;\n      } else {\n         const task: any = await this.configService.configureCluster(this.clusterRef, this.vsanConfigSpec);\n\n         this.vsanStatusService.storeChange(\n               new VsanStatusChangeData(task, StatusChangeType.VSAN_SERVICE_ENABLED));\n         VsanUiUtils.closeModalDialog(task);\n      }\n   }\n\n   @ErrorHandler({name: LoaderName.ON_CONFIRM})\n   private handleConfirmError(error: string): void {\n      this.errors = [error];\n   }\n}\n","/* Copyright 2017-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, OnInit} from \"@angular/core\";\nimport {InputProperty, OutputProperty, WizardPage} from \"@component/wizard/flow-metadata\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {OnValidate, PageControls} from \"@component/wizard/flow-wizard.component\";\nimport {HostFaultDomainData} from \"@generated/host-fault-domain-data\";\nimport {DomainOrHostData} from \"@generated/domain-or-host-data\";\nimport {VsanClusterType} from \"@generated/vsan-cluster-type\";\nimport {GeneralConfigData} from \"@component/general-settings/general-config.data\";\nimport {VsanConfigSpec} from \"@generated/vsan-config-spec\";\nimport {ClusterMode} from \"@generated/cluster-mode\";\nimport {FaultDomainValidationService} from \"@service/fault-domain-validation.service\";\n\n@WizardPage(\n      VsanUiUtils.getString(\"vsan.cluster.configure.wizard.configurationType.title\"),\n      VsanUiUtils.getString(\"vsan.cluster.configure.wizard.configurationType.description\"),\n)\n@Component({\n   templateUrl: \"config-type-page.html\",\n   styleUrls: [\"config-type-page.scss\"],\n})\nexport class ConfigTypePage implements OnValidate, OnInit {\n\n   VsanClusterType: typeof VsanClusterType = VsanClusterType;\n   proceedWarning: string;\n   proceedToNextPage: () => void;\n\n   // Input\n\n   @InputProperty()\n   hostsInCluster: number;\n\n   @InputProperty()\n   pageControls: PageControls;\n\n   @InputProperty()\n   stretchClusterSupported: boolean;\n\n   @InputProperty()\n   clusterHostFaultDomainData: HostFaultDomainData[];\n\n   @InputProperty()\n   vsanGeneralConfig: GeneralConfigData;\n\n   // Output\n\n   @OutputProperty()\n   vsanConfigSpec: VsanConfigSpec;\n\n   @InputProperty()\n   @OutputProperty()\n   configType: VsanClusterType;\n\n   @OutputProperty()\n   preferredName: string;\n\n   @OutputProperty()\n   preferredDomains: DomainOrHostData[];\n\n   @OutputProperty()\n   secondaryName: string;\n\n   @OutputProperty()\n   secondaryDomains: DomainOrHostData[];\n\n   constructor(private faultDomainValidationService: FaultDomainValidationService) {}\n\n   ngOnInit(): void {\n      this.vsanConfigSpec = this.vsanGeneralConfig.cloneVsanConfigSpec();\n      this.vsanConfigSpec.clusterMode = null;\n   }\n\n   validate(): string[] | Promise<string[]> {\n      const validationErrors: string[] = this.getValidationErrors();\n      if (validationErrors.length > 0) {\n         return validationErrors;\n      }\n\n      return null; // proceed directly\n   }\n\n   private getValidationErrors(): string[] {\n      const validationErrors: string[] = [];\n\n      switch (this.configType) {\n         case VsanClusterType.TWO_HOST_VSAN_CLUSTER:\n            if (this.hostsInCluster !== 2) {\n               validationErrors.push(\n                     VsanUiUtils.getString(\"vsan.generalConfig.wrongHostNumberForRobo\", this.hostsInCluster));\n            }\n\n            Array.prototype.push.apply(validationErrors,\n                  this.faultDomainValidationService.getFaultDomainValidationErrors(this.clusterHostFaultDomainData));\n            break;\n         case VsanClusterType.STRETCHED_CLUSTER:\n            if (!this.stretchClusterSupported) {\n               validationErrors.push(VsanUiUtils.getString(\"vsan.generalConfig.stretchedClusterNotSupported\"));\n            } else if (this.hostsInCluster < 2) {\n               validationErrors.push(VsanUiUtils.getString(\"vsan.generalConfig.notEnoughHostsForStretchedCluster\"));\n            }\n\n            Array.prototype.push.apply(validationErrors,\n                  this.faultDomainValidationService.getFaultDomainValidationErrors(this.clusterHostFaultDomainData));\n            break;\n      }\n      return validationErrors;\n   }\n\n   validateSelection(): void {\n      this.pageControls.rebuildToc();\n      this.pageControls.clearValidationErrors();\n\n      const errorMessages: string[] = this.getValidationErrors();\n      if (errorMessages) {\n         this.pageControls.addValidationErrors(errorMessages);\n      }\n\n      this.applyDefaultDomains(this.configType === VsanClusterType.TWO_HOST_VSAN_CLUSTER);\n   }\n\n   updateClusterType(): void {\n      if (this.configType === VsanClusterType.COMPUTE_ONLY) {\n         this.vsanConfigSpec.clusterMode = ClusterMode.COMPUTE;\n      } else {\n         this.vsanConfigSpec.clusterMode = null;\n      }\n\n      this.validateSelection();\n   }\n\n   private applyDefaultDomains(useDefaults: boolean): void {\n      if (useDefaults && this.clusterHostFaultDomainData.length === 2) {\n         this.preferredName = VsanUiUtils.getString(\n               \"vsan.faultDomains.stretchedCluster.wizard.configure.page.faultDomains.defaultPreferredName\");\n         this.preferredDomains = [this.convertDataModel(this.clusterHostFaultDomainData[0])];\n         this.secondaryName = VsanUiUtils.getString(\n               \"vsan.faultDomains.stretchedCluster.wizard.configure.page.faultDomains.defaultSecondaryName\");\n         this.secondaryDomains = [this.convertDataModel(this.clusterHostFaultDomainData[1])];\n      } else {\n         this.preferredName = null;\n         this.preferredDomains = null;\n         this.secondaryName = null;\n         this.secondaryDomains = null;\n      }\n   }\n\n   private convertDataModel(source: HostFaultDomainData): DomainOrHostData {\n      return DomainOrHostData.Factory.create(\n            source.hostUid,\n            source.name,\n            true,\n            source.primaryIconId,\n            false,\n            false,\n            null,\n            null);\n   }\n}\n","<!--Copyright 2021 VMware, Inc. All rights reserved. -- VMware Confidential-->\n<vsan-validation id=\"vsan-max-validation\"\n                 *ngIf=\"alertMessage\"\n                 [allowClose]=\"false\"\n                 [alert]=\"alertMessage\">\n</vsan-validation>\n<div class=\"centered-content\" *ngIf=\"loading\">\n   <span class=\"spinner spinner-inline\"></span>\n   <span id=\"loading-pre-checks\">{{\"vsan.cluster.configure.wizard.vsanMax.loading\" | localized}}</span>\n</div>\n<ng-container *ngIf=\"!loading && vsanMaxPrecheckData\">\n   <clr-toggle-container>\n      <clr-toggle-wrapper>\n         <input type=\"checkbox\"\n                clrToggle\n                id=\"vsan-max-toggle\"\n                [disabled]=\"vsanMaxPrecheckData.status === VsanHealthStatus.red\"\n                [(ngModel)]=\"isVsanMaxWorkflow\"\n                name=\"vsan-max-toggle\"/>\n         <label for=\"vsan-max-toggle\">\n            {{\"vsan.cluster.configure.wizard.vsanMax.toggle\" | localized}}\n         </label>\n      </clr-toggle-wrapper>\n   </clr-toggle-container>\n   <vsan-validation *ngIf=\"vsanMaxAlert\"\n                    id=\"vsan-max-alert\"\n                    [alert]=\"vsanMaxAlert\"\n                    [alertType]=\"AlertType.WARNING\"\n                    [allowClose]=\"false\"\n                    [isSmall]=\"true\">\n   </vsan-validation>\n   <ul *ngIf=\"vsanMaxPrecheckData.status === VsanHealthStatus.green else compatibilityChecks\"\n       class=\"list-unstyled\"\n       id=\"vsan-max-description-container\">\n      <ng-container [ngTemplateOutlet]=\"descriptionListItem\"\n                    [ngTemplateOutletContext]=\"{label: 'vsan.cluster.configure.wizard.vsanMax.description.performance',\n                          description: 'vsan.cluster.configure.wizard.vsanMax.description.performance.description',\n                          image: IllustratedMessageType.FILTER_NO_RESULT}\">\n      </ng-container>\n      <ng-container [ngTemplateOutlet]=\"descriptionListItem\"\n                    [ngTemplateOutletContext]=\"{label: 'vsan.cluster.configure.wizard.vsanMax.description.storageEfficiency',\n                          description: 'vsan.cluster.configure.wizard.vsanMax.description.storageEfficiency.description',\n                          image: IllustratedMessageType.FILTER_NO_RESULT}\">\n      </ng-container>\n      <ng-container [ngTemplateOutlet]=\"descriptionListItem\"\n                    [ngTemplateOutletContext]=\"{label: 'vsan.cluster.configure.wizard.vsanMax.description.storageCost',\n                          description: 'vsan.cluster.configure.wizard.vsanMax.description.storageCost.description',\n                          image: IllustratedMessageType.FILTER_NO_RESULT}\">\n      </ng-container>\n   </ul>\n</ng-container>\n\n<ng-template #descriptionListItem let-label=\"label\" let-description=\"description\" let-image=\"image\">\n   <li>\n      <vsan-illustrated-message [type]=\"image\"></vsan-illustrated-message>\n      <div class=\"column-flex-container\">\n         <label class=\"clr-control-label\">{{label | localized}}</label>\n         <span>{{description | localized}}</span>\n      </div>\n   </li>\n</ng-template>\n\n<ng-template #compatibilityChecks>\n   <div class=\"compatibility-checks\">\n      <h6>{{\"vsan.cluster.configure.wizard.vsanMax.compatibilityChecks\" | localized}}</h6>\n      <clr-accordion clrAccordionMultiPanel=\"true\">\n         <clr-accordion-panel *ngFor=\"let test of vsanMaxPrecheckData.unhealthyTests\"\n                              [clrAccordionPanelOpen]=\"test.helpId === selectedTestId\"\n                              [vsan-panel-id]=\"test.helpId\"\n                              [vsan-panel-model]=\"test.helpId\"\n                              (accordionPanelToggleExpand)=\"toggleExpand($event)\">\n            <clr-accordion-title class=\"icon-name-container\">\n               <clr-icon [attr.shape]=\"getIconShape(test.status)\"\n                         class=\"is-solid\"\n                         [ngClass]=\"getIconClass(test.status)\"\n                         [attr.size]=\"18\">\n               </clr-icon>\n               <span title=\"{{test.testDescription}}\">{{test.testName}}</span>\n            </clr-accordion-title>\n            <clr-accordion-content *clrIfExpanded>\n               <!-- Edit permissions are checked before the wizard is opened -->\n               <vsan-health-details-card id=\"test-details\"\n                                         class=\"details-card\"\n                                         [data]=\"test\"\n                                         [hasEditPermissions]=\"true\"\n                                         [showTestName]=\"false\">\n               </vsan-health-details-card>\n            </clr-accordion-content>\n         </clr-accordion-panel>\n      </clr-accordion>\n   </div>\n</ng-template>","<vsan-validation *ngIf=\"errorMessage\" [alert]=\"errorMessage\" [allowClose]=\"false\"></vsan-validation>\n<vsan-flow-wizard\n      [title]=\"'vsan.cluster.configure.wizard.title' | localized\"\n      [pageSets]=\"pages\"\n      [contextProperties]=\"context\"\n      [startingTaskProperty]=\"'configureClusterTask'\"\n      [services]=\"services\"\n      (onFinish)=\"onConfigureFinish($event)\">\n</vsan-flow-wizard>\n"]}