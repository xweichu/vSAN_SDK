{"version":3,"sources":["./src/app/vsan/common/component/cell/health-mor-cell.html","./src/app/vsan/common/component/cell/health-mor-cell.component.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4GACA,8hBAEoB,8EACpB,yDAFU,mBAAoB,QAD9B,YAEoB,EADV,SAAoB;4GAI3B,i7BAA6C,4FAE7C,2GAFA,4LAA6C,kGAE7C;4GAEG,wHAAgC,kOAAiB;4GAO9C,yIAA6D,wDAA9B,mBAA6B,kBAA5D,YAA6D,EAA9B,SAA6B;;mEAN/D;YAAA;YAAA,YAI4B;YAHzB;;gCAAyB;;YAD5B;QAAA,swBAI4B,qGAEzB,qZAA6D,IAAO,gFACvE,mIAHG,oBAAwB,EAJ3B,YAI4B,EAAzB,SAAwB,GAElB,gCAAwB,+BAA9B,YAA6D,EAAvD,SAAwB,mDANjC,6HAI4B,4FAEzB;AAAA;4GARN,wHAAoC,qFACjC,qZAAgC,IAAwB,gFACxD,qZAI4B,IAGxB,6EACP,mDATS,oBAAyB,mBAA/B,YAAgC,EAA1B,SAAyB,GAC5B,mBAAwB,mBAA3B,YAI4B,EAJzB,SAAwB;4GANjC,wHAA0D,kFACvD,qZAA6C,IAEtC,6EACP,qZAAoC,IAUrB,0EAClB,mDAdS,gCAAsB,qBAA5B,YAA6C,EAAvC,SAAsB,GAGd,+BAAqB,qBAAnC,YAAoC,EAAtB,SAAqB;4GAT6C,0EACnF,qZAEoB,IACT,0EACX,8dAA0D,iDAJhD,mBAAa,QAAvB,YAEoB,EAFV,SAAa,GAIT,mBAA2C,OAAzD,YAA0D,EAA5C,SAA2C;;;;;;;;;;;;;;;;;ACHzD;AAAA;AAAA;AAAA;AAAA;AAA0E;AACU;AAExC;AAOrC,MAAM,sBAAsB;IA8BhC,YAAoB,iBAAoC;QAApC,sBAAiB,GAAjB,iBAAiB,CAAmB;QA7B/C,oBAAe,GAAW,SAAS,CAAC;QAqB7C,qBAAgB,GAAY,IAAI,CAAC;QAqBjC,eAAU,GAAG,CAAC,QAAgB,EAAQ,EAAE;YACrC,uFAAuF;YACvF,6FAA6F;YAC7F,IAAI,CAAC,iBAAiB,CAAC,uBAAuB,CAAC,gFAAiB,CAAC,iBAAiB,EAAE,QAAQ,CAAC,CAAC;QACjG,CAAC,CAAC;IAhBF,CAAC;IApBD,IACI,IAAI,CAAC,GAAwB;QAC9B,IAAI,CAAC,KAAK,GAAG,GAAG,CAAC;QACjB,IAAI,CAAC,IAAI,GAAG,GAAG,CAAC,IAAI,EAAE,CAAC;IAC1B,CAAC;IAED,IAAI,IAAI;QACL,OAAO,IAAI,CAAC,KAAK,CAAC;IACrB,CAAC;IAKD,IAAI,KAAK;;QACN,OAAO,WAAI,CAAC,IAAI,0CAAE,IAAI,MAAK,CAAC,CAAC,CAAC;YACxB,0EAAkB,CAAC,iBAAiB,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC;YACrE,EAAE,CAAC;IACZ,CAAC;IAKD,qBAAqB,CAAC,GAAW;QAC9B,IAAI,CAAC,CAAC,IAAI,CAAC,gBAAgB,EAAE;YAC1B,OAAO,IAAI,CAAC,gBAAgB,CAAC;SAC/B;QAED,MAAM,KAAK,GAAkB,qEAAa,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;QACxD,MAAM,QAAQ,GAAW,0EAAkB,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC;QACrE,OAAO,2DAAW,CAAC,SAAS,CAAC,mDAAmD,EAAE,QAAQ,EAAE,KAAK,CAAC,KAAK,CAAC,CAAC;IAC5G,CAAC;IAQD,SAAS,CAAC,KAAa;QACpB,OAAO,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,GAAG,CAAC,CAAC;IACrC,CAAC;CACH","file":"32-es2015.js","sourcesContent":["<!--Copyright 2017-2021 VMware, Inc. All rights reserved. -- VMware Confidential-->\n<clr-icon *ngIf=\"shape\"\n          [attr.shape]=\"shape\"\n          size=\"18\">\n</clr-icon>\n<ng-container *ngFor=\"let key of keys; let index = index\">\n   <span *ngIf=\"!data.get(key)\" vsan-show-title>\n      {{getMissingEntityLabel(key)}}\n   </span>\n   <ng-container *ngIf=\"data.get(key)\">\n      <span *ngIf=\"!enableActionLink\">{{data.get(key)}}</span>\n      <a *ngIf=\"enableActionLink\"\n         (click)=\"navigateTo(key)\"\n         href=\"javascript://\"\n         vsan-show-title\n         [copyToClipboard]=\"true\">\n         {{data.get(key)}}\n         <span *ngIf=\"showComma(index)\" [outerHTML]=\"COMMA_SEPARATOR\"></span>\n      </a>\n   </ng-container>\n</ng-container>","/* Copyright 2017-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, Input} from \"@angular/core\";\nimport {ManagedObject, ManagedObjectUtils} from \"@service/managed-object\";\nimport {NavigationService, PlatformExtension} from \"@navigation/navigation.service\";\nimport {Icon} from \"@util/icon\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\n\n@Component({\n   templateUrl: \"health-mor-cell.html\",\n   styleUrls: [\"health-mor-cell.scss\"],\n   selector: \"vsan-health-mor-cell\",\n})\nexport class HealthMorCellComponent {\n   readonly COMMA_SEPARATOR: string = \",&nbsp;\";\n\n   // _data is a map containing (uid -> name) entries\n   private _data: Map<string, string>;\n\n   keys: IterableIterator<string>;\n\n   @Input()\n   missingNameLabel: string;\n\n   @Input()\n   set data(val: Map<string, string>) {\n      this._data = val;\n      this.keys = val.keys();\n   }\n\n   get data(): Map<string, string> {\n      return this._data;\n   }\n\n   @Input()\n   enableActionLink: boolean = true;\n\n   get shape(): string {\n      return this.data?.size === 1 ?\n            ManagedObjectUtils.getObjectTypeIcon(this.data.keys().next().value) :\n            \"\";\n   }\n\n   constructor(private navigationService: NavigationService) {\n   }\n\n   getMissingEntityLabel(uid: string): string {\n      if (!!this.missingNameLabel) {\n         return this.missingNameLabel;\n      }\n\n      const moRef: ManagedObject = ManagedObject.fromUid(uid);\n      const typeName: string = ManagedObjectUtils.getObjectTypeName(moRef);\n      return VsanUiUtils.getString(\"vsan.common.component.morcell.entity.missing.name\", typeName, moRef.value);\n   }\n\n   navigateTo = (objectId: string): void => {\n      // TODO akolov: when the client SDK introduce API for checking if the context is modal,\n      // use it to prevent the error log: API should be called within the context of a modal dialog\n      this.navigationService.navigateToAndCloseModal(PlatformExtension.LAST_VISITED_PAGE, objectId);\n   };\n\n   showComma(index: number): boolean {\n      return index < this.data.size - 1;\n   }\n}"],"sourceRoot":"webpack:///"}