{"version":3,"sources":["./src/app/vsan/common/component/diskmgmt/model/auto-claim-summary.data.ts","./src/app/vsan/common/component/diskmgmt/model/auto-claim-disks.data.ts","./src/app/vsan/common/component/diskmgmt/claim-mode-toggle.html","./src/app/vsan/common/component/diskmgmt/auto-claim-disks.html","./src/app/vsan/common/component/diskmgmt/auto-claim-disks.component.ts","./src/app/vsan/common/service/fault-domain-validation.service.ts","./src/app/vsan/common/util/witness-host.util.ts","./src/app/vsan/common/component/diskmgmt/claim-mode-toggle.component.ts"],"names":[],"mappings":"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","file":"83-es2015.js","sourcesContent":["/* Copyright 2021 VMware, Inc. All rights reserved. -- VMware Confidential */\n\n/**\n * Holds data for the total claimed capacity and disk count\n * when using vSAN managed claiming, e.g. vSAN MAX auto claim.\n */\nexport class AutoClaimSummaryData {\n  constructor(public disksCount: number, public totalClaimedCapacity: number) {\n  }\n}","/* Copyright 2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {DiskType} from \"@generated/disk-type\";\n\n/**\n * Holds data for disks with the same vendor, model and size.\n * It is used to represent the auto Claim disks information for vSAN MAX.\n * .\n */\nexport class AutoClaimDisksData {\n\n   /**\n    * Combination of the disk's vendor + model.\n    */\n   modelName: string;\n\n   /**\n    * The size of each disk in this category.\n    */\n   diskCapacity: number;\n\n   /**\n    * The disk type. For now only SSD/HDD.\n    */\n   diskType: DiskType;\n\n   /**\n    * The total number of disks with the same model + size.\n    */\n   disksCount: number;\n\n   /**\n    * The total capacity of disks. Can be derived by diskCapacity * disksCount, holding it to optimise the template.\n    */\n   totalCapacity: number;\n\n   constructor(modelName: string, diskCapacity: number, diskType: DiskType) {\n      this.modelName = modelName;\n      this.diskCapacity = diskCapacity;\n      this.diskType = diskType;\n      this.disksCount = 0;\n      this.totalCapacity = 0;\n   }\n\n   incrementDisks(): void {\n      this.disksCount++;\n      this.totalCapacity += this.diskCapacity;\n   }\n}","<!--Copyright 2021-2022 VMware, Inc. All rights reserved. -- VMware Confidential-->\n<clr-toggle-wrapper>\n   <input type=\"checkbox\"\n          clrToggle\n          id=\"auto-claim\"\n          name=\"auto-claim\"\n          [disabled]=\"!isAutoClaimAllowed\"\n          [(ngModel)]=\"isAutoClaim\"/>\n   <label for=\"auto-claim\">\n      {{\"vsan.cluster.hci.configureHciCluster.wizard.claimDisksPage.autoClaimToggle.title\" | localized}}\n   </label>\n</clr-toggle-wrapper>\n<clr-signpost id=\"auto-claim-signpost\">\n   <clr-signpost-content *clrIfOpen clrPosition=\"bottom-middle\">\n      <ng-container *ngIf=\"isAutoClaimAllowed\">\n         <div>\n            {{\"vsan.cluster.hci.configureHciCluster.wizard.claimDisksPage.autoClaimToggle.signpost.part1\" | localized}}\n         </div>\n         <div>\n            {{\"vsan.cluster.hci.configureHciCluster.wizard.claimDisksPage.autoClaimToggle.signpost.part2\" | localized}}\n         </div>\n      </ng-container>\n      <ng-container *ngIf=\"!isAutoClaimAllowed\">\n         {{\"vsan.cluster.hci.configureHciCluster.wizard.claimDisksPage.autoClaimToggle.signpost.notAllowed\" | localized}}\n      </ng-container>\n   </clr-signpost-content>\n</clr-signpost>","<!-- Copyright (c) 2021 VMware, Inc. All Rights Reserved. -->\n<div class=\"disks-container\">\n   <ng-container *ngTemplateOutlet=\"disks;context: {disksData: compatibleDisks, compatible: true}\"></ng-container>\n   <ng-container *ngTemplateOutlet=\"disks;context: {disksData: incompatibleDisks, compatible: false}\"></ng-container>\n</div>\n<!-- If both compatible and incompatible disks are detected, show a warning. -->\n<vsan-validation *ngIf=\"compatibleDisks?.size > 0 && incompatibleDisks?.size > 0\"\n      [alert]=\"'vsan.disk.auto.claim.vsanMax.alert.label' | localized\"\n      [alertType]=\"AlertType.WARNING\"\n      [allowClose]=\"false\">\n</vsan-validation>\n<ng-template #disks let-disksData=\"disksData\" let-compatible=\"compatible\">\n   <div *ngFor=\"let diskName of disksData.keys()\" class=\"card\">\n      <div class=\"card-header\">\n         <h4 vsan-show-title>{{diskName}}</h4>\n         <div class=\"horizontally-centered-content\">\n            <span class=\"label\" [ngClass]=\"compatible ? 'label-success' : 'label-danger'\">\n               {{compatible ?\n                     (\"vsan.disk.auto.claim.vsanMax.compatible.label\" | localized)\n                     : (\"vsan.disk.auto.claim.vsanMax.incompatible.label\" | localized)}}\n            </span>\n            <h4 [ngClass]=\"compatible ? 'compatible-capacity' : 'incompatible-capacity'\">\n               {{getTotalCapacityForDiskModel(disksData.get(diskName)) | fileSize}}\n            </h4>\n         </div>\n      </div>\n\n      <div *ngFor=\"let diskCapacity of disksData.get(diskName).keys()\" class=\"card-block\">\n         <div class=\"icon-name-container\">\n            <clr-icon size=\"24\" shape=\"hard-drive-disks\"></clr-icon>\n            <span>{{getClaimLabel(compatible, disksData.get(diskName).get(diskCapacity).disksCount)}}</span>\n         </div>\n         <div>\n            <h6>{{\"vsan.disk.auto.claim.vsanMax.disk.details.label\" | localized}}</h6>\n            <div class=\"disk-details\">\n               <div>\n                  <span class=\"p4\">{{\"vsan.disk.auto.claim.vsanMax.disk.capacity.label\" | localized}}</span>\n                  <span>{{diskCapacity | fileSize}}</span>\n               </div>\n               <div>\n                  <span class=\"p4\">{{\"vsan.disk.auto.claim.vsanMax.disk.type.label\" | localized}}</span>\n                  <span>{{disksData.get(diskName).get(diskCapacity).diskType | diskTypeLabel}}</span>\n               </div>\n            </div>\n         </div>\n      </div>\n   </div>\n</ng-template>\n","/* Copyright 2021-2022 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {ChangeDetectionStrategy, Component, EventEmitter, Input, OnInit, Output} from \"@angular/core\";\nimport {VsanClaimDisksData} from \"@generated/vsan-claim-disks-data\";\nimport {AutoClaimDisksData} from \"@component/diskmgmt/model/auto-claim-disks.data\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {VsanDiskListItem} from \"@component/diskmgmt/model/vsan-disk-list-item\";\nimport {DiskMgmtDiskUtil} from \"@util/disk-mgmt-disk.util\";\nimport {AlertType} from '@component/validation/alert-type';\nimport {AutoClaimSummaryData} from \"@component/diskmgmt/model/auto-claim-summary.data\";\nimport {ClaimOption} from \"@generated/claim-option\";\n\n@Component({\n   selector: \"vsan-auto-claim-disks\",\n   templateUrl: \"auto-claim-disks.html\",\n   styleUrls: [\"auto-claim-disks.scss\"],\n   changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AutoClaimDisksComponent implements OnInit {\n\n   AlertType: typeof AlertType = AlertType;\n\n   @Input()\n   hostsClaimingData: Map<string, VsanClaimDisksData>;\n\n   @Output()\n   claimedDisksChange: EventEmitter<AutoClaimSummaryData> = new EventEmitter<AutoClaimSummaryData>();\n\n   // Group the disks per model+vendor name, compatibility and size\n   compatibleDisks: Map<string, Map<number, AutoClaimDisksData>> = new Map();\n   incompatibleDisks: Map<string, Map<number, AutoClaimDisksData>> = new Map();\n\n   ngOnInit(): void {\n      // Map the incoming hostsClaimingData into collections of disks grouped by disk model and size\n      if (!this.hostsClaimingData?.size) {\n         // TODO dtsvetkova: Implement no disks view - I asked the UX for this, will update when available.\n         return;\n      }\n      this.populateViewData();\n   }\n\n   private populateViewData(): void {\n      let totalClaimedCapacity: number = 0;\n      let totalClaimedDisks: number = 0;\n      // We do not care for the hosts in the auto claim view, so only processing the values.\n      for (const claimData of this.hostsClaimingData.values()) {\n         if (VsanUiUtils.isEmpty(claimData.notInUseDisks)) {\n            return;\n         }\n         claimData.notInUseDisks\n               .filter(diskData => !!diskData.disk)\n               .map(diskData => new VsanDiskListItem(diskData, false, false))\n               .forEach(disk => {\n                  if (disk.isVsanMaxCompatible) {\n                     this.updateDisksData(disk, this.compatibleDisks);\n                     ++totalClaimedDisks;\n                     totalClaimedCapacity += disk.capacityNum;\n                     disk.claimOption = ClaimOption.SingleTier;\n                  } else {\n                     this.updateDisksData(disk, this.incompatibleDisks);\n                     disk.claimOption = ClaimOption.DoNotClaim;\n                  }\n               });\n      }\n\n      this.claimedDisksChange.emit(new AutoClaimSummaryData(totalClaimedDisks, totalClaimedCapacity));\n   }\n\n   private updateDisksData(disk: VsanDiskListItem, disksToUpdate: Map<string, Map<number, AutoClaimDisksData>>): void {\n      const diskModel: string = disk.vendor.concat(\" \", disk.diskModel);\n      if (!disksToUpdate.has(diskModel)) {\n         disksToUpdate.set(diskModel, new Map());\n      }\n      const sameModelDisks: Map<number, AutoClaimDisksData> = disksToUpdate.get(diskModel);\n      const diskCapacity: number = disk.capacityNum;\n      if (!sameModelDisks.has(diskCapacity)) {\n         sameModelDisks.set(diskCapacity,\n               new AutoClaimDisksData(diskModel, disk.capacityNum, DiskMgmtDiskUtil.getScsiDiskType(disk.isFlash)));\n      }\n      sameModelDisks.get(diskCapacity).incrementDisks();\n   }\n\n   getTotalCapacityForDiskModel(diskModelData: Map<number, AutoClaimDisksData>): number {\n      return Array.from(diskModelData.values()).reduce((acc, diskData) => {\n         return acc += diskData.totalCapacity;\n      }, 0);\n   }\n\n   getClaimLabel(compatible: boolean, disksCount: number): string {\n      if (compatible) {\n         return disksCount === 1\n               ? VsanUiUtils.getString(\"vsan.disk.auto.claim.vsanMax.compatible.claim.label.singular\")\n               : VsanUiUtils.getString(\"vsan.disk.auto.claim.vsanMax.compatible.claim.label.plural\", disksCount);\n      }\n      return disksCount === 1\n            ? VsanUiUtils.getString(\"vsan.disk.auto.claim.vsanMax.incompatible.claim.label.singular\")\n            : VsanUiUtils.getString(\"vsan.disk.auto.claim.vsanMax.incompatible.claim.label.plural\", disksCount);\n   }\n}","/* Copyright 2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Injectable} from \"@angular/core\";\nimport {ConnectionState} from \"@generated/connection-state\";\nimport {HostFaultDomainData} from \"@generated/host-fault-domain-data\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\n\n/**\n * Service to validate if the user is able to create/edit fault domain\n */\n@Injectable()\nexport class FaultDomainValidationService {\n\n   getFaultDomainValidationErrors(clusterHostFaultDomainData: HostFaultDomainData[]): string[] {\n      const errors: string[] = [];\n      clusterHostFaultDomainData\n            .filter(faultDomainData => faultDomainData.faultDomainName && !faultDomainData.canChangeFaultDomain)\n            .forEach(faultDomainData => {\n               if (faultDomainData.connectionState !== ConnectionState.connected) {\n                  errors.push(VsanUiUtils.getString(\"vsan.generalConfig.fdError.disconnected\", faultDomainData.name));\n               }\n            });\n      return errors;\n   }\n}\n","/* Copyright 2021-2022 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {VsanClusterType} from \"@generated/vsan-cluster-type\";\n\nexport class WitnessHostUtil {\n   /**\n    * Used to check if the claim disks page for a witness host must be shown to the user in various wizards.\n    */\n   static isClaimDisksPageVisible(configType: VsanClusterType,\n         hasClaimedDisks: boolean,\n      isWitnessDeployedFromOvf: boolean,\n      isVsanMaxWorkflow: boolean): boolean {\n      if (configType !== VsanClusterType.STRETCHED_CLUSTER && configType !== VsanClusterType.TWO_HOST_VSAN_CLUSTER) {\n         return false;\n      }\n\n      // Show the claim disks page if it doesn't already have claimed disks or if it is deployed from OVF\n      return isVsanMaxWorkflow && !hasClaimedDisks && !isWitnessDeployedFromOvf\n            || !isVsanMaxWorkflow && !hasClaimedDisks;\n   }\n}","/* Copyright 2021-2022 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, EventEmitter, Input, OnChanges, Output} from \"@angular/core\";\n\n@Component({\n   selector: \"vsan-claim-mode-toggle\",\n   templateUrl: \"claim-mode-toggle.html\",\n   styleUrls: [\"claim-mode-toggle.scss\"],\n})\nexport class ClaimModeToggleComponent {\n\n   private _isAutoClaim: boolean;\n\n   @Input()\n   get isAutoClaim(): boolean {\n      return this._isAutoClaim;\n   }\n\n   set isAutoClaim(value: boolean) {\n      this._isAutoClaim = value;\n      this.isAutoClaimChange.emit(this.isAutoClaim);\n   }\n\n   @Input()\n   isAutoClaimAllowed: boolean;\n\n   @Output()\n   isAutoClaimChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n}"],"sourceRoot":"webpack:///"}