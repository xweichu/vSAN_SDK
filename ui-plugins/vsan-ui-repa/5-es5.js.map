{"version":3,"sources":["webpack:///src/app/vsan/common/service/flow/loading-indicator.decorator.ts","webpack:///src/app/vsan/common/service/flow/loader.decorator.ts","webpack:///src/app/vsan/common/service/flow/loading-flow-wrapper.data.ts","webpack:///src/app/vsan/common/service/flow/error-message.decorator.ts"],"names":["LoadingIndicator","props","targetClass","propertyKey","Object","defineProperty","get","Array","isArray","name","some","loaderName","isLoading","Loader","params","functionName","descriptor","tag","getClassName","originalFn","value","loadingFlowWrapper","preExecute","error","undefined","incrementLoads","invoke","preLoadSrMessage","srMessage","srMessageType","LOADING","postExecute","LOADED","onError","ex","processError","rethrow","shouldRethrow","invokeErrorHandler","decrementLoads","backingObject","arguments","wrapper","handler","errorHandler","call","errorMessageGetter","LoadingFlowWrapper","_backingObject","DEFAULT_NAME","initCollection","ERROR_HOLDER","ERROR_HANDLERS_REF_HOLDER","ERROR_MESSAGE_GETTERS_REF_HOLDER","LOADS_COUNT_HOLDER","collectionName","val","loadsCount","Error","getter","ErrorMessage","setErrorMessageGetter","exception","getException","msg","getString","message","String","set","setException","forEach","singleLoaderName"],"mappings":"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","file":"5-es5.js","sourcesContent":["/* Copyright 2021 VMware, Inc. All rights reserved. -- VMware Confidential */\n\n\n\nimport {LoadingFlowWrapper} from \"@service/flow/loading-flow-wrapper.data\";\n\n/**\n * This property decorator is supposed to be used along with the @Loader decorator.\n * As the @Loader decorator keeps track of all the active loading operations,\n * we can easily know if all the loading is completed. If there are any ongoing loading\n * operations, the property decorated with @LoadingIndicator will be set to \"true\", otherwise - it will be \"false\".\n * You can have as many properties decorated with @LoadingIndicator as you want, but they need to have different names.\n * The LoadingIndicator will show the loading state of the Loader methods with the same name.\n *\n * <pre>\n * @Loader()\n * loadDataSync(): any {\n *    // Load some data\n * }\n *\n * @Loader()\n * loadDataAsync(): Promise<any> {\n *    // Load some data\n * }\n *\n * @LoadingIndicator\n * isLoading: boolean; // The field will be set to \"false\" when the both the methods are complete and the Promise is resolved.\n * </pre>\n */\nexport function LoadingIndicator(props?: LoadingIndicatorProperties): PropertyDecorator {\n   props = props || {};\n   return (targetClass: any, propertyKey: string): void => {\n      Object.defineProperty(targetClass, propertyKey, {\n         get: function (): boolean {\n            if (Array.isArray(props.name)) {\n               return props.name.some((loaderName: string) => (new LoadingFlowWrapper(this, loaderName)).isLoading);\n            }\n\n            return (new LoadingFlowWrapper(this, props.name)).isLoading;\n         },\n      });\n   };\n}\n\nexport interface LoadingIndicatorProperties {\n   name?: string | string[];\n}\n","/* Copyright 2021-2022 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {ErrorContext, FunctionWrapper} from \"@service/flow/function-wrapper\";\nimport {LoadingFlowWrapper} from \"@service/flow/loading-flow-wrapper.data\";\nimport {ScreenReaderAnnouncerService, SrEvent, SrMessageType} from \"@service/screen-reader-announcer.service\";\nimport {Reflection} from \"@util/reflection\";\nimport {GlobalLogger} from \"../../../../vsan-app.module\";\n\n/**\n * Method decorator that does the following:\n *  - watches for errors and if such appear:\n *       - the error is logged in the browser's console\n *       - the error is logged in the H5C server log\n *       - the related @ErrorMessage fields are populated\n *       - the related @ErrorHandler methods are invoked\n *  - Updates the @LoadingIndicator decorated fields\n *  - Invokes the screen reader service once the loading operation completes successfully\n */\nexport function Loader(params?: LoaderParams): MethodDecorator {\n   // If no params are passed, initialize the variable in order to avoid multiple null-checks\n   params = params || {};\n   return (targetClass: any, functionName: string, descriptor: PropertyDescriptor): void => {\n      // Use the component name as tag in order easily find where the error was thrown.\n      const tag: string = Reflection.getClassName(targetClass);\n      const loaderName: string = params.name;\n      const originalFn: any = descriptor.value;\n\n      descriptor.value = function (): any {\n         const loadingFlowWrapper: LoadingFlowWrapper = new LoadingFlowWrapper(this, loaderName);\n         return (new FunctionWrapper(originalFn))\n               .preExecute(() => {\n                  loadingFlowWrapper.error = undefined;\n                  loadingFlowWrapper.incrementLoads();\n                  ScreenReaderAnnouncerService.invoke(\n                        params.preLoadSrMessage || params.srMessage,\n                        params.srMessageType, SrEvent.LOADING);\n               })\n               .postExecute(() => {\n                  ScreenReaderAnnouncerService.invoke(params.srMessage, params.srMessageType, SrEvent.LOADED);\n               })\n               .onError((ex: any) => {\n                  processError(loadingFlowWrapper, tag, ex);\n                  const rethrow: boolean = shouldRethrow(loadingFlowWrapper, params);\n                  if (!rethrow) {\n                     ex = invokeErrorHandler(loadingFlowWrapper, ex);\n                  }\n                  return new ErrorContext(rethrow, ex);\n               })\n               .finally(() => {\n                  loadingFlowWrapper.decrementLoads();\n               })\n               .invoke(loadingFlowWrapper.backingObject, arguments);\n      };\n   };\n}\n\n/**\n * Parameters for the @Loader decorator\n */\nexport interface LoaderParams {\n\n   /**\n    * The name of the loader by which will be resolved te @LoadingIndicator, @ErrorHandler and @ErrorMessage\n    */\n   name?: string;\n\n   /**\n    * Indicates if the error should be rethrown after being processed by the @ErrorHandlers\n    */\n   rethrow?: boolean;\n\n   /**\n    * Used along with srMessageType to create the screen reader message to be announced after the loading\n    * operation completes successfully.\n    * If preLoadSrMessage is not set, srMessage will also be announced when the loading operation starts.\n    */\n   srMessage?: string;\n\n   /**\n    * Used when the message in preExecute() should be different than the one in postExecute().\n    * If not set, srMessage will be used in both places.\n    * Should be given a value when the srMessageType is set to CUSTOM,\n    * because otherwise the exact same message will be announced in preExecute() and postExecute().\n    */\n   preLoadSrMessage?: string;\n\n   /**\n    * The screen reader message type. Used for creating an appropriate message.\n    */\n   srMessageType?: SrMessageType;\n}\n\n/**\n * Handles the given error by:\n *  - logging the error in the browsers console\n *  - logging the error in the H5C backend log\n *  - updates all @ErrorMessage fields\n */\nfunction processError(wrapper: LoadingFlowWrapper, tag: string, ex: any): void {\n   // Log the error to the backend\n   GlobalLogger.error(tag, ex);\n\n   // Cache the error so it can be retrieved by @ErrorMessage decorated fields\n   wrapper.error = ex;\n}\n\n/**\n * Invokes the error handler (if defined)\n */\nfunction invokeErrorHandler(wrapper: LoadingFlowWrapper, ex: any): any {\n   const handler: any = wrapper.errorHandler;\n   return !!handler\n         ? handler.call(wrapper.backingObject, ex)\n         : null;\n}\n\n/**\n * Reject the promise only if:\n * 1. there are no handlers declared\n * 2. the components has explicitly requested the error to be rethrown\n */\nfunction shouldRethrow(wrapper: LoadingFlowWrapper, params: LoaderParams): boolean {\n   return !wrapper.errorHandler && !wrapper.errorMessageGetter\n         || !!params.rethrow;\n}\n","/* Copyright 2021 VMware, Inc. All rights reserved. -- VMware Confidential */\n\n/**\n * This class is used internally by the @Loader decorator and the decorators related to it.\n * It encapsulates the logic for accessing internal properties needed for the decorators to work.\n * The state of this class is kept in the \"backingObject\" passed to the constructor. This allows\n * the wrapper class to be easily recreated wherever it is needed without worrying about keeping its reference.\n *\n * <pre>\n * const obj: any = {};\n *\n * // Create a new LoadingFlowWrapper over obj\n * const wrapper1: LoadingFlowWrapper = new LoadingFlowWrapper(obj);\n * // Set the error field to \"alabala\" string\n * wrapper1.error = \"alabala\";\n *\n * // Create a new LoadingFlowWrapper over obj\n * const wrapper2: LoadingFlowWrapper = new LoadingFlowWrapper(obj);\n * console.log(wrapper2.error); // Prints \"alabala\" because the backing object is the same\n * </pre>\n */\nexport class LoadingFlowWrapper {\n\n   private static readonly ERROR_HOLDER: string = \"__ex__\";\n   private static readonly ERROR_HANDLERS_REF_HOLDER: string = \"__errorHandlers__\";\n   private static readonly ERROR_MESSAGE_GETTERS_REF_HOLDER: string = \"__errorMessageGetters__\";\n   private static readonly LOADS_COUNT_HOLDER: string = \"__loadsCount__\";\n\n   private static readonly DEFAULT_NAME: string = \"default-loader\";\n\n   constructor(private _backingObject: any,\n         private loaderName: string) {\n      this.loaderName = loaderName || LoadingFlowWrapper.DEFAULT_NAME;\n\n      // Init all collections\n      this.initCollection(LoadingFlowWrapper.ERROR_HOLDER);\n      this.initCollection(LoadingFlowWrapper.ERROR_HANDLERS_REF_HOLDER);\n      this.initCollection(LoadingFlowWrapper.ERROR_MESSAGE_GETTERS_REF_HOLDER);\n      this.initCollection(LoadingFlowWrapper.LOADS_COUNT_HOLDER);\n   }\n\n   private initCollection(collectionName: string): void {\n      // Check first if the collection hasn't been initialized by another wrapper.\n      // If so, do nothing as we don't want to override the data already set.\n      if (!this.backingObject[collectionName]) {\n         this.backingObject[collectionName] = [];\n      }\n   }\n\n   /**\n    * The original object which methods/properties were decorated\n    */\n   get backingObject(): any {\n      return this._backingObject;\n   }\n\n   /**\n    * Returns the thrown error\n    */\n   get error(): any {\n      return this.backingObject[LoadingFlowWrapper.ERROR_HOLDER][this.loaderName];\n   }\n\n   /**\n    * Sets the thrown error\n    */\n   set error(val: any) {\n      this.backingObject[LoadingFlowWrapper.ERROR_HOLDER][this.loaderName] = val;\n   }\n\n   /**\n    * Returns the number of active loading operations\n    */\n   private get loadsCount(): number {\n      return this.backingObject[LoadingFlowWrapper.LOADS_COUNT_HOLDER][this.loaderName];\n   }\n\n   /**\n    * Returns true if there are running loader methods or promises.\n    */\n   get isLoading(): boolean {\n      return !!this.loadsCount;\n   }\n\n   /**\n    * Increase the number of active loading operations by one\n    */\n   incrementLoads(): void {\n      // Initialize the counter if it hasn't been initialized yet\n      if (!this.loadsCount) {\n         this.backingObject[LoadingFlowWrapper.LOADS_COUNT_HOLDER][this.loaderName] = 0;\n      }\n      this.backingObject[LoadingFlowWrapper.LOADS_COUNT_HOLDER][this.loaderName] += 1;\n   }\n\n   /**\n    * Decreases the number of active loading operations by one\n    */\n   decrementLoads(): void {\n      this.backingObject[LoadingFlowWrapper.LOADS_COUNT_HOLDER][this.loaderName] -= 1;\n   }\n\n   get errorHandler(): any {\n      return this.backingObject[LoadingFlowWrapper.ERROR_HANDLERS_REF_HOLDER][this.loaderName];\n   }\n\n   /**\n    * Registers a new error handler.\n    */\n   set errorHandler(errorHandler: any) {\n      if (!!this.errorHandler) {\n         throw new Error(`ErrorHandler for loader \"${this.loaderName}\" already registered!`);\n      }\n      this.backingObject[LoadingFlowWrapper.ERROR_HANDLERS_REF_HOLDER][this.loaderName] = errorHandler;\n   }\n\n   get errorMessageGetter(): any {\n      return this.backingObject[LoadingFlowWrapper.ERROR_MESSAGE_GETTERS_REF_HOLDER][this.loaderName];\n   }\n\n   set errorMessageGetter(getter: any) {\n      if (!!this.errorMessageGetter) {\n         throw new Error(`ErrorMessage for loader \"${this.loaderName}\" already registered!`);\n      }\n      this.backingObject[LoadingFlowWrapper.ERROR_MESSAGE_GETTERS_REF_HOLDER][this.loaderName] = getter;\n   }\n}\n","/* Copyright 2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {LoadingFlowWrapper} from \"@service/flow/loading-flow-wrapper.data\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\n\n/**\n * This property decorator is supposed to be used along with the @Loader decorator.\n * If an exception is thrown during the execution of the method decorated with @Loader\n * the ErrorMessage field will be populated with the thrown error. You can define as many ErrorMessage as you want,\n * but they must be with different names. The name can be provided as input to the decorator.\n * If a name is set to the ErrorMessage it will handle only the errors thrown by Loader functions\n * with the same name. If no name is passed to the ErrorMessage, it will handle only the errors\n * from Loader functions with no name.\n *\n * You can set a custom message to be used if an error is thrown. This is useful when\n * you don't care about the error but just want to show a user friendly message in the UI.\n * Just pass the message or its localization key as a paramter of the decorator.\n *\n * <pre>\n * // Example 1:\n * @Loader()\n * loadSyncData(): any {\n *    throw new Error(\"Failed to load sync data\");\n * }\n *\n * @ErrorMessage()\n * error: string; // Will be set to \"Failed to load sync data\";\n *...\n *\n * // Example 2\n *\n * @Loader()\n * async loadAsyncData(): Promise<any> {\n *    return Promise.reject(\"Failed to load async data\");\n * }\n *\n * @ErrorMessage()\n * error: string; // Will be set to \"Failed to load async data\"\n * ...\n *\n * // Example 3\n *\n * @Loader()\n * async loadData(): Promise<any> {\n *    return Promise.reject(\"Failed to load data\");\n * }\n *\n * @ErrorMessage({msg: \"Cannot load the data\"})\n * error: string; // Will be set to \"Cannot load the data\" when the \"loadData\" method's promise is rejected\n * ...\n *\n * // Example 4\n *\n * @Loader({name: \"loading-data-flow\"})\n * async loadData(): Promise<any> {\n *    return Promise.reject(\"Failed to load data\");\n * }\n *\n * @ErrorMessage({\n *    name: \"loading-data-flow\",\n *    msg: \"com.vmware.vsan.generic.error\",\n * })\n * error: string; // Will be set to the localized version of \"com.vmware.vsan.generic.error\" when the \"loadData\" method's promise is rejected\n * ...\n * </pre>\n */\nexport function ErrorMessage(props?: ErrorMessageProperties): PropertyDecorator {\n   props = props || {};\n   return (targetClass: any, propertyKey: string): void => {\n      const loaderName: string | string[] = props.name;\n      setErrorMessageGetter(loaderName, targetClass, propertyKey);\n      Object.defineProperty(targetClass, propertyKey, {\n         get: function (): string {\n            const exception: any = getException.call(this, loaderName);\n\n            // If there is no exception, just return an empty string\n            if (!exception) {\n               return \"\";\n            }\n\n            // If there is a hardcoded message, use it instead of the error message\n            if (!!props.msg) {\n               return VsanUiUtils.getString(props.msg);\n            }\n\n            // Try to extract the error message from the error\n            if (!!exception.message) {\n               return exception.message;\n            }\n\n            // Fallback to the string representation of the error\n            return String(exception);\n         },\n         set: function (val: any): void {\n            setException.call(this, loaderName, val);\n         },\n      });\n   };\n}\n\nfunction setErrorMessageGetter(loaderName: string | string[], targetClass: any, propertyKey: string): void {\n   if (Array.isArray(loaderName)) {\n      loaderName.forEach(name => {\n         (new LoadingFlowWrapper(targetClass, name)).errorMessageGetter = propertyKey;\n      });\n   } else {\n      (new LoadingFlowWrapper(targetClass, loaderName)).errorMessageGetter = propertyKey;\n   }\n}\n\nfunction getException(loaderName: string | string[]): any {\n   const singleLoaderName: string = Array.isArray(loaderName)\n         ? loaderName[0] // Get the error from the first wrapper, because all wrappers have the same error\n         : loaderName;\n   return (new LoadingFlowWrapper(this, singleLoaderName)).error;\n}\n\nfunction setException(loaderName: string | string[], val: any): void {\n   if (Array.isArray(loaderName)) {\n      // The error is the same for all wrappers, because the loaders use the same error message property\n      loaderName.forEach(name => (new LoadingFlowWrapper(this, name)).error = val);\n   } else {\n      (new LoadingFlowWrapper(this, loaderName)).error = val;\n   }\n}\n\n/**\n * Properties for configuring the ErrorMessage decorator.\n */\nexport interface ErrorMessageProperties {\n\n   /**\n    * The name of the Loader function(s) which error to handle\n    */\n   name?: string | string[];\n\n   /**\n    * If this field is set, the original error message is ignored and the one set to this field is populated.\n    * If the value of this fields is a valid key to a localizable message then its localized version is returned.\n    */\n   msg?: string;\n}\n"]}