{"version":3,"sources":["./src/app/vsan/common/component/dialog/prompt/prompt.component.ts","./src/app/vsan/common/component/dialog/prompt/prompt.module.ts","./src/app/vsan/common/directive/icon-title/icon-title.directive.ts"],"names":[],"mappings":"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","file":"0-es2015.js","sourcesContent":["/* Copyright 2017-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {FocusTrapFactory} from \"@angular/cdk/a11y\";\nimport {Component, ElementRef, EventEmitter, Input, OnInit, Output} from \"@angular/core\";\nimport {WebPlatform} from \"@util/platform\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {AlertType} from \"../../validation/alert-type\";\n\n/**\n * Base dialog component providing common functionality\n * like unified dialog layout (header, footer, content area),\n * validation alerts, busy indication.\n * As the component implements its own title bar, it must\n * be opened in a headless modal - ModalBuilder.setTitle(null)\n * The content is contained in a vertical flex box.\n */\n@Component({\n   selector: \"vsan-prompt\",\n   templateUrl: \"prompt.html\",\n   styleUrls: [\"prompt.scss\"],\n})\nexport class PromptComponent implements OnInit {\n\n   /**\n    * The title of the dialog\n    */\n   @Input() title: string = \"\";\n\n   /**\n    * (Optional) The smaller font subtitle\n    */\n   @Input() subtitle: string;\n\n   /**\n    * The text on the primary button\n    */\n   @Input() confirmText: string = \"vsan.common.close\";\n\n   /**\n    * (Optional) The additional style for the primary button (e.g. \"btn-success\")\n    */\n   @Input() confirmStyle: string = \"\";\n\n   /**\n    * (Optional) The text on the close button.\n    * The button will not be visible if not assigned.\n    */\n   @Input() cancelText: string = null;\n\n   /**\n    * (Optional) The text on the additional button.\n    * The button will not be visible if not assigned.\n    */\n   @Input() additionalButtonText: string = null;\n\n   /**\n    * (Optional) When set to true, the additional button will be disabled.\n    */\n   @Input() blockAdditionalButton: boolean = false;\n\n   private _alertMessages: string[] = [];\n\n   /**\n    * External validation messages to be displayed.\n    * Always use double binding, because pushing a new element does not trigger the setter.\n    */\n   get alertMessages(): string[] {\n      return this._alertMessages;\n   }\n\n   @Input()\n   set alertMessages(alertMessages: string[]) {\n      this._alertMessages = (alertMessages || []).filter(message => !!message);\n      this.alertMessagesChange.emit(this._alertMessages);\n      this.alertMessageChange.emit(this._alertMessages?.[0]);\n   }\n\n   /**\n    * External validation message to be displayed.\n    * Use double binding to listen for user clearing alerts.\n    */\n   @Input()\n   set alertMessage(alertMessage: string) {\n      this.alertMessages = [alertMessage];\n   }\n\n   /**\n    * (Optional) External message type.\n    */\n   @Input() alertType: string = AlertType.DANGER;\n\n   /**\n    * Whether to allow the user to close the validation error message.\n    * @type {boolean}\n    */\n   @Input() allowAlertClose: boolean = true;\n\n   /**\n    * Triggered when alertMessages are cleared by the user\n    * @type {EventEmitter<string[]>}\n    */\n   @Output() alertMessagesChange: EventEmitter<string[]> = new EventEmitter<string[]>();\n\n   /**\n    * Triggered when alertMessages are cleared by the user\n    * @type {EventEmitter<string>}\n    */\n   @Output() alertMessageChange: EventEmitter<string> = new EventEmitter<string>();\n\n   /**\n    * When set to true, the primary button will be disabled.\n    */\n   @Input() blockButton: boolean = false;\n\n   /**\n    * When set to true, there will be overlay with spinner over the content\n    * of the dialog, blocking user interaction.\n    */\n   @Input() blockContent: boolean = false;\n\n   /**\n    * What loading text to show when loading is true\n    */\n   @Input()\n   busyText: string = null;\n\n   /**\n    * Triggered when the user clicks on the primary button.\n    * If no subscribers are present, the dialog will be automatically closed.\n    * Otherwise the subscriber is responsible to close the modal.\n    * @type {EventEmitter<any>}\n    */\n   @Output() onConfirm: EventEmitter<any> = new EventEmitter<any>();\n\n   @Output() onCancel: EventEmitter<void> = new EventEmitter<void>();\n\n   @Output() onAdditionalAction: EventEmitter<void> = new EventEmitter<void>();\n\n   constructor(private el: ElementRef, private focusTrap: FocusTrapFactory) {\n      // Create a focus trap region and move the focus into it.\n      focusTrap.create(el.nativeElement).focusInitialElement();\n   }\n\n   ngOnInit(): void {\n      WebPlatform.setAccessibilityTitle(this.title);\n   }\n\n   clearAlerts(): void {\n      this.alertMessages = null;\n      this.alertMessagesChange.emit(this.alertMessages);\n   }\n\n   confirm(): void {\n      const result: any = {}; // defined to trigger the modal callback\n      if (this.onConfirm.observers.length) {\n         this.onConfirm.emit(result);\n      } else {\n         VsanUiUtils.closeModalDialog(result);\n      }\n   }\n\n   cancel(): void {\n      if (this.onCancel.observers.length) {\n         this.onCancel.emit();\n      } else {\n         VsanUiUtils.closeModalDialog();\n      }\n   }\n\n   additionalAction(): void {\n      this.onAdditionalAction.emit();\n   }\n}\n","/* Copyright 2019-2020 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {NgModule} from \"@angular/core\";\nimport {CommonModule} from \"@angular/common\";\nimport {ClarityModule} from \"@clr/angular\";\nimport {A11yModule} from \"@angular/cdk/a11y\";\nimport {ValidationModule} from \"@component/validation/validation.module\";\nimport {PromptComponent} from \"@component/dialog/prompt/prompt.component\";\nimport {CreatePrompt} from \"@component/dialog/prompt/prompt-create.component\";\nimport {DeletePrompt} from \"@component/dialog/prompt/prompt-delete.component\";\nimport {EditPrompt} from \"@component/dialog/prompt/prompt-edit.component\";\nimport {InfoPrompt} from \"@component/dialog/prompt/prompt-info.component\";\nimport {QuestionPrompt} from \"@component/dialog/prompt/prompt-question.component\";\nimport {DefaultPrompt} from \"@component/dialog/prompt/prompt-default.component\";\nimport {CommonPipeModule} from \"@pipe/common-pipe.module\";\nimport {CommonDirectiveModule} from \"@directive/common-directive.module\";\nimport {LightInfoPrompt} from \"@component/dialog/prompt/prompt-light-info.component\";\n\n@NgModule({\n   imports: [\n      A11yModule,\n      CommonModule,\n      ClarityModule,\n      ValidationModule,\n      CommonPipeModule,\n      CommonDirectiveModule,\n   ],\n   declarations: [\n      PromptComponent,\n      CreatePrompt,\n      DeletePrompt,\n      EditPrompt,\n      InfoPrompt,\n      QuestionPrompt,\n      DefaultPrompt,\n      LightInfoPrompt,\n   ],\n   exports: [\n      PromptComponent,\n      CreatePrompt,\n      DeletePrompt,\n      EditPrompt,\n      InfoPrompt,\n      QuestionPrompt,\n      DefaultPrompt,\n      LightInfoPrompt\n   ],\n})\nexport class PromptModule {\n}","/* Copyright 2020 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Directive, ElementRef, AfterViewInit, Input} from '@angular/core';\nimport {Icon} from \"@util/icon\";\n\n/**\n * Attribute directive for setting the title of clr-icon according to its shape.\n */\n@Directive({\n   selector: \"clr-icon\"\n})\nexport class IconTitleDirective implements AfterViewInit {\n\n   private readonly SHAPE_ATTRIBUTE: string = \"shape\";\n   private readonly TITLE_ATTRIBUTE: string = \"title\";\n\n   @Input(\"vsan-icon-title\")\n   iconTitle: string;\n\n   constructor(private el: ElementRef) { }\n\n   ngAfterViewInit() {\n      // Return if clr-icon already has title attribute.\n      if (this.el.nativeElement.getAttribute(this.TITLE_ATTRIBUTE)) {\n         return;\n      }\n\n      let title: string = this.iconTitle;\n      if (!title) {\n         const shape: string = this.el.nativeElement.getAttribute(this.SHAPE_ATTRIBUTE);\n         title = Icon.getDefaultVsanIconTitle(shape);\n      }\n      if (title) {\n         this.el.nativeElement.setAttribute(this.TITLE_ATTRIBUTE, title);\n      }\n   }\n}"],"sourceRoot":"webpack:///"}