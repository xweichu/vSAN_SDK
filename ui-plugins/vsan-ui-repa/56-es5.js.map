{"version":3,"sources":["webpack:///src/app/vsan/common/service/flow/loading-indicator.decorator.ts","webpack:///src/app/vsan/common/service/flow/loader.decorator.ts","webpack:///src/app/vsan/file-services/shared/file-services-common.module.ts","webpack:///src/app/vsan/file-services/shared/file-services-ovf-settings.data.ts","webpack:///src/app/vsan/file-services/shared/file-services-ovf-settings.html","webpack:///src/app/vsan/common/service/flow/loading-flow-wrapper.data.ts","webpack:///src/app/vsan/file-services/shared/file-services-ovf-settings.component.ts","webpack:///src/app/vsan/common/util/version.ts"],"names":["LoadingIndicator","props","targetClass","propertyKey","Object","defineProperty","get","Array","isArray","name","some","loaderName","isLoading","Loader","params","functionName","descriptor","tag","getClassName","originalFn","value","loadingFlowWrapper","preExecute","error","undefined","incrementLoads","invoke","preLoadSrMessage","srMessage","srMessageType","LOADING","postExecute","LOADED","onError","ex","processError","rethrow","shouldRethrow","invokeErrorHandler","decrementLoads","backingObject","arguments","wrapper","handler","errorHandler","call","errorMessageGetter","FileServicesCommonModule","OvfSettings","ovfOption","localFiles","ovfUrlSecured","url","startsWith","OvfOption","MANUAL","EXISTING","isUrlTrusted","LoadingFlowWrapper","_backingObject","DEFAULT_NAME","initCollection","ERROR_HOLDER","ERROR_HANDLERS_REF_HOLDER","ERROR_MESSAGE_GETTERS_REF_HOLDER","LOADS_COUNT_HOLDER","collectionName","val","loadsCount","Error","getter","FileServicesOvfSettings","thumbprintService","fileService","taskService","pendingHTTPRequests","displayUseExistingOption","ovfSettingsChange","onCancel","uploadComplete","selectedFiles","downloadAlertType","INFO","downloadAlertMessage","getString","uploadSubscription","uploadProgress","remoteValidatingCompleted","_startUpload","uploadObservable","validate","validateOvfSelection","validateRequiredFiles","updateDownloadTaskStatus","downloadTask","getInfo","then","taskInfoData","taskInfo","status","RUNNING","setTimeout","PENDING","SUCCESS","ERROR","DANGER","warn","WARNING","err","handleUploadError","errorMessage","ErrorEvent","message","emit","handleUploadProgress","event","type","UploadProgress","Math","round","loaded","total","Response","body","_downloadTask","uploadOvf","ovfSettings","setModalDialogHeight","DIALOG_WITH_THUMBPRINTS_HEIGHT","getThumbprint","publicOvfProps","result","thumbprint","ovfUrl","includes","existingOvfVersion","toString","hasLatestOvf","isAutoDownloadEnabled","DOWNLOAD","isManualDownload","downloadUrl","isInternetAccessEnabled","isEmpty","target","files","i","length","push","item","getRequiredFilesFromOvf","requiredFiles","missedFiles","filter","fileName","matchedFile","find","file","concat","ovfFile","getOvfFile","unrelevantFiles","map","Promise","resolve","fileReader","FileReader","fileNameWithoutExtension","substr","lastIndexOf","extension","onloadend","parser","DOMParser","ovfXml","parseFromString","referenceNodes","getElementsByTagName","j","getAttribute","readAsText","selectedOvfVersion","fromFilePathOrName","isSame","fsvmVersion","isLarger","isNewMajorRelease","hostVersion","endsWith","uploadLocalOvf","contextObject","pipe","subscribe","unsubscribe","next","Version","version","parts","split","build","parseInt","major","minor","revision","patchLevel","that","orderedFields","fieldName","versionStr","v1","v2","compare","ovfFilePathOrName","OVF_VERSION_PATTERN","exec"],"mappings":"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","file":"56-es5.js","sourcesContent":["/* Copyright 2021 VMware, Inc. All rights reserved. -- VMware Confidential */\n\n\n\nimport {LoadingFlowWrapper} from \"@service/flow/loading-flow-wrapper.data\";\n\n/**\n * This property decorator is supposed to be used along with the @Loader decorator.\n * As the @Loader decorator keeps track of all the active loading operations,\n * we can easily know if all the loading is completed. If there are any ongoing loading\n * operations, the property decorated with @LoadingIndicator will be set to \"true\", otherwise - it will be \"false\".\n * You can have as many properties decorated with @LoadingIndicator as you want, but they need to have different names.\n * The LoadingIndicator will show the loading state of the Loader methods with the same name.\n *\n * <pre>\n * @Loader()\n * loadDataSync(): any {\n *    // Load some data\n * }\n *\n * @Loader()\n * loadDataAsync(): Promise<any> {\n *    // Load some data\n * }\n *\n * @LoadingIndicator\n * isLoading: boolean; // The field will be set to \"false\" when the both the methods are complete and the Promise is resolved.\n * </pre>\n */\nexport function LoadingIndicator(props?: LoadingIndicatorProperties): PropertyDecorator {\n   props = props || {};\n   return (targetClass: any, propertyKey: string): void => {\n      Object.defineProperty(targetClass, propertyKey, {\n         get: function (): boolean {\n            if (Array.isArray(props.name)) {\n               return props.name.some((loaderName: string) => (new LoadingFlowWrapper(this, loaderName)).isLoading);\n            }\n\n            return (new LoadingFlowWrapper(this, props.name)).isLoading;\n         },\n      });\n   };\n}\n\nexport interface LoadingIndicatorProperties {\n   name?: string | string[];\n}\n","/* Copyright 2021-2022 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {ErrorContext, FunctionWrapper} from \"@service/flow/function-wrapper\";\nimport {LoadingFlowWrapper} from \"@service/flow/loading-flow-wrapper.data\";\nimport {ScreenReaderAnnouncerService, SrEvent, SrMessageType} from \"@service/screen-reader-announcer.service\";\nimport {Reflection} from \"@util/reflection\";\nimport {GlobalLogger} from \"../../../../vsan-app.module\";\n\n/**\n * Method decorator that does the following:\n *  - watches for errors and if such appear:\n *       - the error is logged in the browser's console\n *       - the error is logged in the H5C server log\n *       - the related @ErrorMessage fields are populated\n *       - the related @ErrorHandler methods are invoked\n *  - Updates the @LoadingIndicator decorated fields\n *  - Invokes the screen reader service once the loading operation completes successfully\n */\nexport function Loader(params?: LoaderParams): MethodDecorator {\n   // If no params are passed, initialize the variable in order to avoid multiple null-checks\n   params = params || {};\n   return (targetClass: any, functionName: string, descriptor: PropertyDescriptor): void => {\n      // Use the component name as tag in order easily find where the error was thrown.\n      const tag: string = Reflection.getClassName(targetClass);\n      const loaderName: string = params.name;\n      const originalFn: any = descriptor.value;\n\n      descriptor.value = function (): any {\n         const loadingFlowWrapper: LoadingFlowWrapper = new LoadingFlowWrapper(this, loaderName);\n         return (new FunctionWrapper(originalFn))\n               .preExecute(() => {\n                  loadingFlowWrapper.error = undefined;\n                  loadingFlowWrapper.incrementLoads();\n                  ScreenReaderAnnouncerService.invoke(\n                        params.preLoadSrMessage || params.srMessage,\n                        params.srMessageType, SrEvent.LOADING);\n               })\n               .postExecute(() => {\n                  ScreenReaderAnnouncerService.invoke(params.srMessage, params.srMessageType, SrEvent.LOADED);\n               })\n               .onError((ex: any) => {\n                  processError(loadingFlowWrapper, tag, ex);\n                  const rethrow: boolean = shouldRethrow(loadingFlowWrapper, params);\n                  if (!rethrow) {\n                     ex = invokeErrorHandler(loadingFlowWrapper, ex);\n                  }\n                  return new ErrorContext(rethrow, ex);\n               })\n               .finally(() => {\n                  loadingFlowWrapper.decrementLoads();\n               })\n               .invoke(loadingFlowWrapper.backingObject, arguments);\n      };\n   };\n}\n\n/**\n * Parameters for the @Loader decorator\n */\nexport interface LoaderParams {\n\n   /**\n    * The name of the loader by which will be resolved te @LoadingIndicator, @ErrorHandler and @ErrorMessage\n    */\n   name?: string;\n\n   /**\n    * Indicates if the error should be rethrown after being processed by the @ErrorHandlers\n    */\n   rethrow?: boolean;\n\n   /**\n    * Used along with srMessageType to create the screen reader message to be announced after the loading\n    * operation completes successfully.\n    * If preLoadSrMessage is not set, srMessage will also be announced when the loading operation starts.\n    */\n   srMessage?: string;\n\n   /**\n    * Used when the message in preExecute() should be different than the one in postExecute().\n    * If not set, srMessage will be used in both places.\n    * Should be given a value when the srMessageType is set to CUSTOM,\n    * because otherwise the exact same message will be announced in preExecute() and postExecute().\n    */\n   preLoadSrMessage?: string;\n\n   /**\n    * The screen reader message type. Used for creating an appropriate message.\n    */\n   srMessageType?: SrMessageType;\n}\n\n/**\n * Handles the given error by:\n *  - logging the error in the browsers console\n *  - logging the error in the H5C backend log\n *  - updates all @ErrorMessage fields\n */\nfunction processError(wrapper: LoadingFlowWrapper, tag: string, ex: any): void {\n   // Log the error to the backend\n   GlobalLogger.error(tag, ex);\n\n   // Cache the error so it can be retrieved by @ErrorMessage decorated fields\n   wrapper.error = ex;\n}\n\n/**\n * Invokes the error handler (if defined)\n */\nfunction invokeErrorHandler(wrapper: LoadingFlowWrapper, ex: any): any {\n   const handler: any = wrapper.errorHandler;\n   return !!handler\n         ? handler.call(wrapper.backingObject, ex)\n         : null;\n}\n\n/**\n * Reject the promise only if:\n * 1. there are no handlers declared\n * 2. the components has explicitly requested the error to be rethrown\n */\nfunction shouldRethrow(wrapper: LoadingFlowWrapper, params: LoaderParams): boolean {\n   return !wrapper.errorHandler && !wrapper.errorMessageGetter\n         || !!params.rethrow;\n}\n","/* Copyright 2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {NgModule} from \"@angular/core\";\nimport {CommonModule} from \"@angular/common\";\nimport {ClarityModule} from \"@clr/angular\";\nimport {FileServicesOvfSettings} from \"./file-services-ovf-settings.component\";\nimport {ShareNetPermissionComponent} from \"./share-net-permission.component\";\nimport {CommonPipeModule} from \"@pipe/common-pipe.module\";\nimport {EditFileAnalyticsComponent} from \"./edit-file-analytics.component\";\nimport {FormsModule} from \"@angular/forms\";\nimport {ValidationModule} from \"@component/validation/validation.module\";\nimport {EditShareFileAnalyticsComponent} from \"./edit-share-file-analytics.component\";\n\n@NgModule({\n   imports: [\n      CommonModule,\n      ClarityModule,\n      CommonPipeModule,\n      FormsModule,\n      ValidationModule,\n   ],\n   declarations: [\n      FileServicesOvfSettings,\n      ShareNetPermissionComponent,\n      EditFileAnalyticsComponent,\n      EditShareFileAnalyticsComponent,\n   ],\n   exports: [\n      FileServicesOvfSettings,\n      ShareNetPermissionComponent,\n      EditFileAnalyticsComponent,\n      EditShareFileAnalyticsComponent\n   ],\n})\nexport class FileServicesCommonModule {\n}","/* Copyright 2019-2020 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {VsanFileServiceOvfProps} from \"@generated/vsan-file-service-ovf-props\";\n\nexport class OvfSettings {\n   ovfUrlSecured: boolean; // use this to indicate if the OVF download url is https\n   isUrlTrusted: boolean;\n\n   constructor(public ovfOption: OvfOption,\n         public props: VsanFileServiceOvfProps,\n         public localFiles: any[] = []) {\n      this.ovfUrlSecured = props && props.url && props.url.startsWith(\"https://\");\n   }\n\n   get isManualDownload(): boolean {\n      return this.ovfOption === OvfOption.MANUAL;\n   }\n\n   get isUseExisting(): boolean {\n      return this.ovfOption === OvfOption.EXISTING;\n   }\n\n   get isSecureUrlNotTrusted(): boolean {\n      return this.ovfUrlSecured && !this.isUrlTrusted;\n   }\n}\n\nexport enum OvfOption {\n   DOWNLOAD,\n   MANUAL,\n   EXISTING,\n}\n","<!--Copyright 2018-2021 VMware, Inc. All rights reserved. -- VMware Confidential-->\n<vsan-validation id=\"existing-is-latest-message\"\n                 *ngIf=\"hasLatestOvf\"\n                 alertType=\"info\"\n                 allowClose=\"false\"\n                 [alert]=\"'vsan.services.fileservices.wizard.ovf.hasLatest.info' | localized : existingOvfVersion\">\n</vsan-validation>\n<ng-container *ngIf=\"!hasLatestOvf\">\n   <clr-radio-wrapper *ngIf=\"displayUseExistingOption\">\n      <input id=\"option-existing\"\n             type=\"radio\"\n             clrRadio\n             [value]=\"OvfOption.EXISTING\"\n             [(ngModel)]=\"ovfSettings.ovfOption\"\n             (change)=\"changeDownloadApproach($event)\"\n             name=\"ovf-option\">\n      <label for=\"option-existing\">\n         {{\"vsan.services.fileservices.wizard.ovf.option.existing\" | localized : existingOvfVersion}}\n      </label>\n   </clr-radio-wrapper>\n   <clr-radio-wrapper>\n      <input id=\"option-automatic\"\n             type=\"radio\"\n             clrRadio\n             [disabled]=\"!isAutoDownloadEnabled\"\n             [value]=\"OvfOption.DOWNLOAD\"\n             [(ngModel)]=\"ovfSettings.ovfOption\"\n             (change)=\"changeDownloadApproach($event)\"\n             name=\"ovf-option\">\n      <label for=\"option-automatic\"\n             [class.disable-action]=\"!isAutoDownloadEnabled\">\n         {{\"vsan.services.fileservices.wizard.ovf.option.automatic.title\" | localized}}\n      </label>\n   </clr-radio-wrapper>\n   <div class=\"radio-option-content\"\n        [class.disable-action]=\"ovfSettings.isManualDownload || ovfSettings.isUseExisting\">\n      <ng-container *ngIf=\"isAutoDownloadEnabled\">\n         <div>\n            <span>{{\"vsan.services.fileservices.wizard.ovf.option.automatic.url\" | localized}}</span>\n            <a id=\"auto-url\" [href]=\"publicOvfProps?.url\" target=\"_blank\">\n               {{publicOvfProps?.url}}\n            </a>\n         </div>\n         <ng-container *ngIf=\"ovfSettings?.ovfUrlSecured\">\n            {{\"vsan.services.fileservices.wizard.ovf.ssl.thumbprint\" | localized}}\n            <div>{{thumbprint}}</div>\n            <div class=\"clr-checkbox-wrapper\">\n               <input id=\"trust-url-thumbprint\"\n                      name=\"trust-url-thumbprint\"\n                      class=\"clr-checkbox\"\n                      [(ngModel)]=\"ovfSettings.isUrlTrusted\"\n                      type=\"checkbox\">\n               <label for=\"trust-url-thumbprint\" class=\"clr-control-label\">\n                  {{\"vsan.services.fileservices.wizard.ovf.ssl.thumbprint.trust.label\" | localized}}\n               </label>\n            </div>\n         </ng-container>\n         <vsan-validation id=\"automatic-download-status\"\n                          [alertType]=\"downloadAlertType\"\n                          [alert]=\"downloadAlertMessage\"\n                          [allowClose]=\"false\"\n                          [isSmall]=\"true\">\n         </vsan-validation>\n         <div class=\"progress labeled\" *ngIf=\"downloadTask\">\n            <progress max=\"100\" value=\"{{taskInfo?.progress}}\"></progress>\n            <span>{{taskInfo?.progress}}%</span>\n         </div>\n      </ng-container>\n      <ng-container *ngIf=\"!isAutoDownloadEnabled\">\n         <vsan-validation id=\"no-internet-access-warning\"\n                          alertType=\"warning\"\n                          [allowClose]=\"false\"\n                          [alert]=\"'vsan.services.fileservices.wizard.ovf.noInternet' | localized\"\n                          [isSmall]=\"true\">\n         </vsan-validation>\n      </ng-container>\n   </div>\n\n   <clr-radio-wrapper>\n      <input id=\"option-manual\"\n             type=\"radio\"\n             clrRadio\n             [value]=\"OvfOption.MANUAL\"\n             [(ngModel)]=\"ovfSettings.ovfOption\"\n             (change)=\"changeDownloadApproach($event)\"\n             name=\"ovf-option\">\n      <label for=\"option-manual\">\n         {{\"vsan.services.fileservices.wizard.ovf.option.manual.title\" | localized}}\n      </label>\n   </clr-radio-wrapper>\n   <div class=\"radio-option-content manual-upload-container\"\n        [class.disable-action]=\"!ovfSettings?.isManualDownload\">\n      <label for=\"upload\">\n         {{\"vsan.services.fileservices.wizard.ovf.option.manual.url\" | localized}}\n      </label>\n      <button id=\"upload\"\n              class=\"btn btn-sm btn-link\"\n              (click)=\"ovfFilesInput?.nativeElement.click()\"\n              [disabled]=\"!ovfSettings?.isManualDownload\">\n         {{\"vsan.services.fileservices.wizard.ovf.option.manual.browse\" | localized}}\n      </button>\n      <input id=\"ovf-files\"\n             #ovfFiles\n             type=\"file\"\n             class=\"hidden\"\n             multiple=\"multiple\"\n             (change)=\"onOvfFileChange($event)\">\n      <span id=\"selected-files-number\"\n            *ngIf=\"selectedFiles?.length\">\n         {{\"vsan.services.fileservices.wizard.ovf.option.manual.selectedFiles\" | localized: selectedFiles?.length}}\n      </span>\n   </div>\n</ng-container>\n<div class=\"clr-row progress-container\">\n   <div id=\"upload-progress\"\n        *ngIf=\"uploadProgress > 0\"\n        [class.clr-col-11]=\"uploadProgress < 100\"\n        [class.clr-col-10]=\"uploadProgress === 100 && !remoteValidatingCompleted\"\n        [class.clr-col-12]=\"uploadProgress === 100 && remoteValidatingCompleted\">\n      <div class=\"progress labeled\">\n         <progress max=\"100\" value=\"0\" data-value=\"{{uploadProgress}}\"></progress>\n         <span>{{\"vsan.common.percentage\" | localized : uploadProgress}}</span>\n      </div>\n   </div>\n   <button id=\"cancel-upload\"\n           class=\"btn btn-sm btn-link btn-icon\"\n           *ngIf=\"uploadSubscription && uploadProgress < 100\"\n           [attr.title]=\"'vsan.services.fileservices.wizard.ovf.option.manual.upload.cancel' | localized\"\n           (click)=\"stopUpload()\">\n      <clr-icon shape=\"times-circle\"\n                [attr.alt]=\"'vsan.services.fileservices.wizard.ovf.option.manual.upload.cancel' | localized\">\n      </clr-icon>\n   </button>\n   <div id=\"remote-validate-spinner\"\n        *ngIf=\"uploadProgress === 100 && !remoteValidatingCompleted\">\n      <span class=\"spinner spinner-inline\"></span>\n      <span>{{\"vsan.common.validating\" | localized}}</span>\n   </div>\n</div>\n","/* Copyright 2021 VMware, Inc. All rights reserved. -- VMware Confidential */\n\n/**\n * This class is used internally by the @Loader decorator and the decorators related to it.\n * It encapsulates the logic for accessing internal properties needed for the decorators to work.\n * The state of this class is kept in the \"backingObject\" passed to the constructor. This allows\n * the wrapper class to be easily recreated wherever it is needed without worrying about keeping its reference.\n *\n * <pre>\n * const obj: any = {};\n *\n * // Create a new LoadingFlowWrapper over obj\n * const wrapper1: LoadingFlowWrapper = new LoadingFlowWrapper(obj);\n * // Set the error field to \"alabala\" string\n * wrapper1.error = \"alabala\";\n *\n * // Create a new LoadingFlowWrapper over obj\n * const wrapper2: LoadingFlowWrapper = new LoadingFlowWrapper(obj);\n * console.log(wrapper2.error); // Prints \"alabala\" because the backing object is the same\n * </pre>\n */\nexport class LoadingFlowWrapper {\n\n   private static readonly ERROR_HOLDER: string = \"__ex__\";\n   private static readonly ERROR_HANDLERS_REF_HOLDER: string = \"__errorHandlers__\";\n   private static readonly ERROR_MESSAGE_GETTERS_REF_HOLDER: string = \"__errorMessageGetters__\";\n   private static readonly LOADS_COUNT_HOLDER: string = \"__loadsCount__\";\n\n   private static readonly DEFAULT_NAME: string = \"default-loader\";\n\n   constructor(private _backingObject: any,\n         private loaderName: string) {\n      this.loaderName = loaderName || LoadingFlowWrapper.DEFAULT_NAME;\n\n      // Init all collections\n      this.initCollection(LoadingFlowWrapper.ERROR_HOLDER);\n      this.initCollection(LoadingFlowWrapper.ERROR_HANDLERS_REF_HOLDER);\n      this.initCollection(LoadingFlowWrapper.ERROR_MESSAGE_GETTERS_REF_HOLDER);\n      this.initCollection(LoadingFlowWrapper.LOADS_COUNT_HOLDER);\n   }\n\n   private initCollection(collectionName: string): void {\n      // Check first if the collection hasn't been initialized by another wrapper.\n      // If so, do nothing as we don't want to override the data already set.\n      if (!this.backingObject[collectionName]) {\n         this.backingObject[collectionName] = [];\n      }\n   }\n\n   /**\n    * The original object which methods/properties were decorated\n    */\n   get backingObject(): any {\n      return this._backingObject;\n   }\n\n   /**\n    * Returns the thrown error\n    */\n   get error(): any {\n      return this.backingObject[LoadingFlowWrapper.ERROR_HOLDER][this.loaderName];\n   }\n\n   /**\n    * Sets the thrown error\n    */\n   set error(val: any) {\n      this.backingObject[LoadingFlowWrapper.ERROR_HOLDER][this.loaderName] = val;\n   }\n\n   /**\n    * Returns the number of active loading operations\n    */\n   private get loadsCount(): number {\n      return this.backingObject[LoadingFlowWrapper.LOADS_COUNT_HOLDER][this.loaderName];\n   }\n\n   /**\n    * Returns true if there are running loader methods or promises.\n    */\n   get isLoading(): boolean {\n      return !!this.loadsCount;\n   }\n\n   /**\n    * Increase the number of active loading operations by one\n    */\n   incrementLoads(): void {\n      // Initialize the counter if it hasn't been initialized yet\n      if (!this.loadsCount) {\n         this.backingObject[LoadingFlowWrapper.LOADS_COUNT_HOLDER][this.loaderName] = 0;\n      }\n      this.backingObject[LoadingFlowWrapper.LOADS_COUNT_HOLDER][this.loaderName] += 1;\n   }\n\n   /**\n    * Decreases the number of active loading operations by one\n    */\n   decrementLoads(): void {\n      this.backingObject[LoadingFlowWrapper.LOADS_COUNT_HOLDER][this.loaderName] -= 1;\n   }\n\n   get errorHandler(): any {\n      return this.backingObject[LoadingFlowWrapper.ERROR_HANDLERS_REF_HOLDER][this.loaderName];\n   }\n\n   /**\n    * Registers a new error handler.\n    */\n   set errorHandler(errorHandler: any) {\n      if (!!this.errorHandler) {\n         throw new Error(`ErrorHandler for loader \"${this.loaderName}\" already registered!`);\n      }\n      this.backingObject[LoadingFlowWrapper.ERROR_HANDLERS_REF_HOLDER][this.loaderName] = errorHandler;\n   }\n\n   get errorMessageGetter(): any {\n      return this.backingObject[LoadingFlowWrapper.ERROR_MESSAGE_GETTERS_REF_HOLDER][this.loaderName];\n   }\n\n   set errorMessageGetter(getter: any) {\n      if (!!this.errorMessageGetter) {\n         throw new Error(`ErrorMessage for loader \"${this.loaderName}\" already registered!`);\n      }\n      this.backingObject[LoadingFlowWrapper.ERROR_MESSAGE_GETTERS_REF_HOLDER][this.loaderName] = getter;\n   }\n}\n","/* Copyright 2018-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, EventEmitter, Input, OnInit, Output, ViewChild} from \"@angular/core\";\nimport {VsanFileServiceOvfProps} from \"@generated/vsan-file-service-ovf-props\";\nimport {ManagedObject} from \"@service/managed-object\";\nimport {OvfOption, OvfSettings} from \"./file-services-ovf-settings.data\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {TaskService} from \"@generated/task-service\";\nimport {TaskStatus} from \"@service/task-monitor-service\";\nimport {TaskInfoData} from \"@generated/task-info-data\";\nimport {Logger} from \"@util/logger\";\nimport {AlertType} from \"@component/validation/alert-type\";\nimport {SslThumbprintService} from \"@generated/ssl-thumbprint-service\";\nimport {HttpErrorResponse, HttpEvent, HttpEventType} from \"@angular/common/http\";\nimport {catchError} from \"rxjs/operators\";\nimport {Observable, Subject, Subscription, throwError} from \"rxjs\";\nimport {VsanFileServiceConfigService} from \"@generated/vsan-file-service-config-service\";\nimport {Version} from \"@util/version\";\n\n@Component({\n   templateUrl: \"file-services-ovf-settings.html\",\n   styleUrls: [\"file-services-ovf-settings.scss\"],\n   selector: \"vsan-file-services-ovf-settings\",\n})\nexport class FileServicesOvfSettings implements OnInit {\n   private static readonly DIALOG_WITH_THUMBPRINTS_HEIGHT: number = 650;\n\n   // Use this to cancel the upload http call\n   private pendingHTTPRequests: Subject<void> = new Subject<void>();\n\n   @Input()\n   clusterRef: ManagedObject;\n\n   @Input()\n   publicOvfProps: VsanFileServiceOvfProps;\n\n   @Input()\n   isInternetAccessEnabled: boolean;\n\n   @Input()\n   ovfSettings: OvfSettings;\n\n   @Input()\n   set downloadTask(val: ManagedObject) {\n      this._downloadTask = val;\n      this.updateDownloadTaskStatus();\n   }\n\n   get downloadTask(): ManagedObject {\n      return this._downloadTask;\n   }\n\n   @Input()\n   set startUpload(val: boolean) {\n      this._startUpload = val;\n      if (val) {\n         this.uploadOvf();\n      }\n   }\n\n   get startUpload(): boolean {\n      return this._startUpload;\n   }\n\n   @Input()\n   displayUseExistingOption: boolean = false;\n\n   @Input()\n   existingOvfVersion: Version;\n\n   @Input()\n   hostVersion: Version;\n\n   @Input()\n   fsvmVersion: Version;\n\n   @Output()\n   ovfSettingsChange: EventEmitter<OvfSettings> = new EventEmitter<OvfSettings>();\n\n   @Output()\n   onError: EventEmitter<string[]> = new EventEmitter<string[]>();\n\n   @Output()\n   onCancel: EventEmitter<void> = new EventEmitter<void>();\n\n   @Output()\n   uploadComplete: EventEmitter<void> = new EventEmitter<void>();\n\n   @ViewChild(\"ovfFiles\")\n   ovfFilesInput: any;\n\n   selectedFiles: File[] = [];\n\n   taskInfo: TaskInfoData;\n   downloadAlertType: string = AlertType.INFO;\n   downloadAlertMessage: string = VsanUiUtils.getString(\"vsan.services.fileservices.wizard.ovf.option.automatic.info\");\n\n   thumbprint: string;\n   uploadSubscription: Subscription = null;\n   uploadProgress: number = 0;\n   remoteValidatingCompleted: boolean = false;\n   hasLatestOvf: boolean;\n   OvfOption: typeof OvfOption = OvfOption;\n\n   private _downloadTask: ManagedObject;\n   private _startUpload: boolean = false;\n   private uploadObservable: Observable<any> = null;\n\n   constructor(private thumbprintService: SslThumbprintService,\n         private fileService: VsanFileServiceConfigService,\n         private taskService: TaskService) {\n   }\n\n   ngOnInit(): void {\n      if (this.ovfSettings && this.ovfSettings.ovfUrlSecured) {\n         VsanUiUtils.setModalDialogHeight(FileServicesOvfSettings.DIALOG_WITH_THUMBPRINTS_HEIGHT);\n         this.thumbprintService.getThumbprint(this.publicOvfProps.url)\n               .then(result => this.thumbprint = result)\n               .catch(err => this.onError.emit([err]));\n      }\n\n      if (this.displayUseExistingOption) {\n         this.ovfSettings.ovfOption = OvfOption.EXISTING;\n         // If the latest ovf is the same as existing, disabled the auto download option\n         if (this.ovfUrl.includes(this.existingOvfVersion.toString())) {\n            this.hasLatestOvf = true;\n         }\n      } else {\n         this.ovfSettings.ovfOption = this.isAutoDownloadEnabled ? OvfOption.DOWNLOAD : OvfOption.MANUAL;\n      }\n   }\n\n   private get ovfUrl(): string {\n      if (this.publicOvfProps && this.publicOvfProps.url) {\n         return this.publicOvfProps.url;\n      }\n      return \"\";\n   }\n\n   changeDownloadApproach(event: any): void {\n      if (!this.ovfSettings.isManualDownload) {\n         this.ovfSettings.props = this.publicOvfProps;\n      }\n\n      this.ovfSettingsChange.emit(this.ovfSettings);\n   }\n\n   get isAutoDownloadEnabled(): boolean {\n      const downloadUrl: string = this.publicOvfProps && this.publicOvfProps.url;\n      return this.isInternetAccessEnabled && !VsanUiUtils.isEmpty(downloadUrl);\n   }\n\n   onOvfFileChange(event: any): void {\n      if (event.target.files) {\n         this.ovfSettings.localFiles = event.target.files;\n         this.selectedFiles = [];\n         const files: FileList = event.target.files;\n         for (let i: number = 0; i < files.length; i++) {\n            this.selectedFiles.push(files.item(i));\n         }\n      }\n   }\n\n   validate = (): string[] | Promise<string[]> => {\n      return this.validateOvfSelection(this.selectedFiles) || this.validateRequiredFiles();\n   };\n\n   private async validateRequiredFiles(): Promise<string[]> {\n      const requiredFiles: string[] = await this.getRequiredFilesFromOvf();\n      // find missed files\n      const missedFiles: string[] = requiredFiles.filter(fileName => {\n         // Match the file name from the files user selected\n         // If no match found, we know this required file is missing\n         const matchedFile: File = this.selectedFiles.find(file => {\n            return file.name === fileName;\n         });\n         return !matchedFile;\n      });\n      if (missedFiles.length > 0) {\n         return [VsanUiUtils\n               .getString(\"vsan.services.fileservices.wizard.ovf.uploading.ovf.other.missing\")]\n               .concat(missedFiles);\n      }\n\n      const ovfFile: File = this.getOvfFile(this.selectedFiles);\n      // find the files which are not required\n      const unrelevantFiles: string[] = this.selectedFiles.filter(file => {\n         return file !== ovfFile && !requiredFiles.some(fileName => fileName === file.name);\n      }).map(file => file.name);\n      if (unrelevantFiles.length > 0) {\n         return [VsanUiUtils\n               .getString(\"vsan.services.fileservices.wizard.ovf.uploading.ovf.other.unrelevant\")]\n               .concat(unrelevantFiles);\n      }\n      return null;\n   }\n\n   private getRequiredFilesFromOvf(): Promise<string[]> {\n      return new Promise<string[]>((resolve) => {\n         const ovfFile: File = this.getOvfFile(this.selectedFiles);\n         const fileReader: FileReader = new FileReader();\n         const requiredFiles: string[] = [];\n\n         // Bug 2404445: Add manifest file and signature file in UI OVF uploading manually workflow\n         // To fix it, UI needs to verify 2 additional files(signature and manifest),\n         // they share the same file name w/ the ovf file\n         const fileNameWithoutExtension: string = ovfFile.name.substr(0, ovfFile.name.lastIndexOf(\".ovf\"));\n         requiredFiles.push(...[\".mf\", \".cert\"].map(extension => fileNameWithoutExtension + extension));\n\n         fileReader.onloadend = () => {\n            const parser: DOMParser = new DOMParser();\n            const ovfXml: Document = parser.parseFromString(fileReader.result as string, \"text/xml\");\n            const referenceNodes: any = ovfXml.getElementsByTagName(\"References\");\n            for (let i: number = 0; i < referenceNodes.length; i++) {\n               const files: any = referenceNodes.item(i).getElementsByTagName(\"File\");\n               for (let j: number = 0; j < files.length; j++) {\n                  requiredFiles.push(files.item(j).getAttribute(\"ovf:href\"));\n               }\n            }\n            resolve(requiredFiles);\n         };\n         fileReader.readAsText(ovfFile);\n      });\n   }\n\n   /**\n    * Validates if an OVF file is selected\n    */\n   private validateOvfSelection(files: any[]): string[] {\n      const ovfFile: File = this.getOvfFile(this.selectedFiles);\n      if (!ovfFile) {\n         return [VsanUiUtils.getString(\"vsan.services.fileservices.wizard.ovf.uploading.ovf.missing\")];\n      }\n      const selectedOvfVersion: Version = Version.fromFilePathOrName(ovfFile.name);\n      if (Version.isSame(selectedOvfVersion, this.fsvmVersion)) {\n         return [VsanUiUtils.getString(\"vsan.services.fileservices.upgrade.ovf.version.same\")];\n      }\n      if (Version.isLarger(this.fsvmVersion, selectedOvfVersion)) {\n         return [VsanUiUtils.getString(\"vsan.services.fileservices.upgrade.ovf.version.old\")];\n      }\n      if (Version.isSame(selectedOvfVersion, this.existingOvfVersion)) {\n         return [VsanUiUtils.getString(\"vsan.services.fileservices.upgrade.ovf.version.existing.same\")];\n      }\n      if (Version.isLarger(this.existingOvfVersion, selectedOvfVersion)) {\n         return [VsanUiUtils.getString(\"vsan.services.fileservices.upgrade.ovf.version.existing.old\")];\n      }\n      if (Version.isNewMajorRelease(selectedOvfVersion, this.hostVersion)) {\n         return [VsanUiUtils.getString(\"vsan.services.fileservices.upgrade.ovf.version.notMatch\")];\n      }\n      return null;\n   }\n\n   private getOvfFile(files: any[]): File {\n      // the file name must end with \".ovf\"\n      return files.find(file => file.name.endsWith(\".ovf\"));\n   }\n\n   private updateDownloadTaskStatus = () => {\n      if (!this.downloadTask) {\n         return;\n      }\n      this.taskService.getInfo(this.downloadTask).then((taskInfoData: TaskInfoData) => {\n         this.taskInfo = taskInfoData;\n\n         switch (taskInfoData.status) {\n            case TaskStatus.RUNNING:\n               setTimeout(this.updateDownloadTaskStatus, 1000);\n               break;\n            case TaskStatus.PENDING:\n               this.downloadAlertType = AlertType.INFO;\n               this.downloadAlertMessage = VsanUiUtils.getString(\"vsan.services.fileservices.rtc.download.pending\");\n               break;\n            case TaskStatus.RUNNING:\n               this.downloadAlertType = AlertType.INFO;\n               this.downloadAlertMessage = VsanUiUtils.getString(\"vsan.services.fileservices.rtc.download.running\");\n               break;\n            case TaskStatus.SUCCESS:\n               this.downloadAlertType = AlertType.SUCCESS;\n               this.downloadAlertMessage = VsanUiUtils.getString(\"vsan.services.fileservices.rtc.download.succeeded\");\n               break;\n            case TaskStatus.ERROR:\n               this.downloadAlertType = AlertType.DANGER;\n               this.downloadAlertMessage = VsanUiUtils.getString(\"vsan.services.fileservices.rtc.download.failed\");\n               break;\n            default: {\n               Logger.warn(\"Unknown status: \" + taskInfoData.status);\n               this.downloadAlertType = AlertType.WARNING;\n               this.downloadAlertMessage = VsanUiUtils.getString(\"vsan.services.fileservices.rtc.download.unknown\");\n            }\n         }\n      }).catch(err => {\n         Logger.error(\"Cannot get task status: \" + err);\n         this.downloadAlertType = AlertType.WARNING;\n         this.downloadAlertMessage = VsanUiUtils.getString(\"vsan.services.fileservices.rtc.download.unknown\");\n      });\n   };\n\n   uploadOvf(): Observable<any> {\n      this.uploadProgress = 0;\n      this.remoteValidatingCompleted = false;\n      this.uploadObservable = this.fileService.uploadLocalOvf(ManagedObject.contextObject, this.ovfSettings.localFiles)\n            .pipe(catchError(this.handleUploadError));\n      this.uploadSubscription = this.uploadObservable.subscribe(this.handleUploadProgress);\n      return this.uploadObservable;\n   }\n\n   stopUpload(): void {\n      this.uploadSubscription.unsubscribe();\n      this.uploadSubscription = null;\n      this.uploadProgress = 0;\n\n      this.pendingHTTPRequests.next();\n      this.onCancel.emit();\n   }\n\n   private handleUploadError = (error: HttpErrorResponse) => {\n      let errorMessage: string = \"\";\n      if (error.error instanceof ErrorEvent) {\n         errorMessage = error.error.message;\n      } else {\n         errorMessage = error.error.error;\n      }\n      this.onError.emit([errorMessage]);\n      this.remoteValidatingCompleted = true;\n      return throwError(errorMessage);\n   };\n\n   private handleUploadProgress = (event: HttpEvent<any>) => {\n      switch (event.type) {\n         case HttpEventType.UploadProgress:\n            this.uploadProgress = Math.round(event.loaded / event.total * 100);\n            break;\n         case HttpEventType.Response:\n            this.remoteValidatingCompleted = true;\n            if (event.body && event.body.error) {\n               this.onError.emit([event.body.error]);\n            } else {\n               this.uploadComplete.emit();\n            }\n            break;\n      }\n   };\n}\n","/* Copyright 2020-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {VsanUiUtils} from \"@util/vsan-util\";\n\n/**\n * Parse version string to a comparable object\n * '7.0.1.1000-39027875' => 'major.minor.revision.patchLevel-build'\n */\nexport class Version {\n   static readonly OVF_VERSION_PATTERN: RegExp = /.+(\\d+\\.\\d+\\.\\d+\\.\\d+-\\d+)_.+\\.ovf/;\n\n   major: number;\n   minor: number;\n   revision: number;\n   patchLevel: number;\n   build: number;\n\n   constructor(version: string) {\n      if (VsanUiUtils.isEmpty(version)) {\n         return;\n      }\n      let parts: string[] = version.split(\"-\");\n      if (parts.length > 1) {\n         this.build = parseInt(parts[1], 0);\n      }\n      parts = parts[0].split(\".\");\n      this.major = parseInt(parts[0], 0);\n      if (parts.length > 1) {\n         this.minor = parseInt(parts[1], 0);\n         if (parts.length > 2) {\n            this.revision = parseInt(parts[2], 0);\n         }\n         if (parts.length > 3) {\n            this.patchLevel = parseInt(parts[3], 0);\n         }\n      }\n   }\n\n   static isLarger(v1: Version, v2: Version): boolean {\n      return !!v1 && v1.compare(v2) > 0;\n   }\n\n   static isSame(v1: Version, v2: Version): boolean {\n      return (!v1 && !v2) || (!!v1 && v1.compare(v2) === 0);\n   }\n\n   /**\n    * Check if the v1 version is newer major version than the v2 version.\n    * We don't compare the build number here because for major version it doesn't have build info.\n    */\n   static isNewMajorRelease(v1: Version, v2: Version): boolean {\n      return v1.major > v2.major || v1.minor > v2.minor || v1.revision > v2.revision;\n   }\n\n   /**\n    * Method to get the ovf file version from the file name or path\n    */\n   static fromFilePathOrName(ovfFilePathOrName: string): Version {\n      return new Version(this.OVF_VERSION_PATTERN.exec(ovfFilePathOrName)[1]);\n   }\n\n   compare(that: Version): number {\n      const orderedFields: string[] = [\"major\", \"minor\", \"revision\", \"patchLevel\", \"build\"];\n      for (let i: number = 0; i <= orderedFields.length; i++) {\n         const fieldName: string = orderedFields[i];\n         if (this[fieldName] !== that[fieldName]) {\n            return this[fieldName] > that[fieldName] ? 1 : -1;\n         }\n      }\n      return 0;\n   }\n\n   toString(): string {\n      let versionStr: string = `${this.major}.${this.minor}.${this.revision}`;\n      if (this.patchLevel) {\n         versionStr += `.${this.patchLevel}`;\n      }\n      if (this.build) {\n         versionStr += `-${this.build}`;\n      }\n      return versionStr;\n   }\n}\n"]}