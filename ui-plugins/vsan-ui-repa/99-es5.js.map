{"version":3,"sources":["webpack:///src/app/vsan/disk-management/views/filter/disk-mgmt-filter.html","webpack:///src/app/vsan/disk-management/views/actions/cluster-actions.html","webpack:///src/app/vsan/disk-management/views/filter/host-list-filter-health.component.ts","webpack:///src/app/vsan/disk-management/views/actions/adddisk/add-disk.html","webpack:///src/app/vsan/disk-management/disk-management.module.ts","webpack:///src/app/vsan/disk-management/views/filter/storage-group-details-filter-disk-tier.component.ts","webpack:///src/app/generated/unmount-disk-group-spec.ts","webpack:///src/app/vsan/common/directive/accessibility/dropdown-navigation.directive.ts","webpack:///src/app/vsan/disk-management/views/actions/stopmanagingpmem/stop-managing-pmem.component.ts","webpack:///src/app/vsan/disk-management/views/filter/storage-group-details-filter-transport-type.component.ts","webpack:///src/app/vsan/disk-management/views/model/view-objects-context.ts","webpack:///src/app/vsan/common/util/promise/promise-baton.ts","webpack:///src/app/vsan/disk-management/views/filter/storage-group-details-filter-claimable-state.component.ts","webpack:///src/app/vsan/disk-management/views/actions/mountdiskgroup/mount-disk-group.component.ts","webpack:///src/app/vsan/disk-management/views/filter/storage-group-details-filter-physical-location.component.ts","webpack:///src/app/vsan/common/component/navigation/vsan-breadcrumb-nav.html","webpack:///src/app/vsan/disk-management/views/host-health-icon-shape.pipe.ts","webpack:///src/app/vsan/disk-management/views/actions/deletediskgroup/delete-disk-group.component.ts","webpack:///src/app/vsan/common/component/navigation/breadcrumb-route.model.ts","webpack:///src/app/vsan/disk-management/disk-management-screen-reader.service.ts","webpack:///src/app/vsan/disk-management/views/filter/storage-group-details-filter-device-state.component.ts","webpack:///src/app/vsan/disk-management/views/actions/creategroup/create-group.html","webpack:///src/app/vsan/disk-management/views/actions/creategroup/create-group.component.ts","webpack:///src/app/vsan/disk-management/views/host-list.html","webpack:///src/app/vsan/disk-management/views/filter/storage-group-details-filter-device-operational-state.component.ts","webpack:///src/app/vsan/disk-management/views/filter/host-list-filter-health.html","webpack:///src/app/vsan/disk-management/views/actions/precheck/pre-check-issues.html","webpack:///src/app/vsan/disk-management/views/disk-mgmt-summary.component.ts","webpack:///src/app/vsan/common/component/navigation/vsan-breadcrumb-nav.component.ts","webpack:///src/app/vsan/disk-management/views/actions/marklocal/mark-local-prompt.component.ts","webpack:///src/app/vsan/disk-management/views/actions/unmountdiskgroup/unmount-disk-group.html","webpack:///src/app/vsan/disk-management/views/actions/deletediskgroup/dedup-enabled-warning.html","webpack:///src/app/vsan/disk-management/views/storage-group-details.component.ts","webpack:///src/app/vsan/disk-management/views/storage-capacity.component.ts","webpack:///src/app/vsan/disk-management/views/actions/adddisk/add-disk.component.ts","webpack:///src/app/vsan/common/component/navigation/vsan-breadcrumb.service.ts","webpack:///src/app/vsan/disk-management/disk-management.html","webpack:///src/app/vsan/disk-management/views/actions/deletedisks/delete-disks.component.ts","webpack:///src/app/vsan/disk-management/views/actions/host-actions.html","webpack:///src/app/vsan/disk-management/views/actions/unmountdiskgroup/unmount-disk-group.component.ts","webpack:///src/app/generated/remove-disk-group-spec.ts","webpack:///src/app/vsan/disk-management/views/actions/markssd/mark-ssd-prompt.component.ts","webpack:///src/app/vsan/disk-management/views/actions/stopmanagingpmem/stop-managing-pmem.html","webpack:///src/app/vsan/disk-management/views/actions/deletediskgroup/delete-disk-group.html","webpack:///src/app/vsan/disk-management/views/filter/storage-group-details-filter-health.component.ts","webpack:///src/app/vsan/common/component/diskmgmt/diskmgmt-common.module.ts","webpack:///src/app/vsan/common/model/loading-aware-property.ts","webpack:///src/app/vsan/disk-management/views/filter/host-list-filter-groups.component.ts","webpack:///src/app/vsan/disk-management/disk-management.component.ts","webpack:///src/app/vsan/disk-management/views/actions/mountdiskgroup/mount-disk-group.html","webpack:///src/app/vsan/disk-management/views/actions/deletedisks/delete-disks.html","webpack:///src/app/vsan/disk-management/views/actions/precheck/pre-check-issues.component.ts","webpack:///src/app/vsan/disk-management/views/actions/mountdisk/mount-storage-pool-disk.html","webpack:///src/app/generated/recreate-disk-group-spec.ts","webpack:///src/app/vsan/disk-management/views/actions/claim-disks/claim-disks-dialog.html","webpack:///src/app/vsan/disk-management/views/storage-groups.html","webpack:///src/app/vsan/disk-management/views/actions/host-actions.component.ts","webpack:///src/app/vsan/common/util/promise/race-condition-safe.decorator.ts","webpack:///src/app/vsan/disk-management/views/actions/recreatediskgroup/recreate-disk-group.html","webpack:///src/app/vsan/common/util/vsan-dialog-util.ts","webpack:///src/app/vsan/disk-management/disk-management-routing.service.ts","webpack:///src/app/vsan/disk-management/views/disk-mgmt-entities-summary-service.ts","webpack:///src/app/vsan/disk-management/views/storage-groups.component.ts","webpack:///src/app/vsan/disk-management/views/actions/storage-group-actions.component.ts","webpack:///src/app/vsan/disk-management/views/actions/cluster-actions.component.ts","webpack:///src/app/vsan/disk-management/views/actions/deletedisks/delete-vsan-direct-disks.component.ts","webpack:///src/app/vsan/disk-management/views/filter/storage-group-details-filter-drive-locality.component.ts","webpack:///src/app/vsan/disk-management/views/actions/claim-disks/claim-disks-dialog.component.ts","webpack:///src/app/vsan/common/component/diskmgmt/disks-property-retriever.ts","webpack:///src/app/vsan/disk-management/views/actions/marklocal/mark-local-prompt.html","webpack:///src/app/vsan/disk-management/views/host-list.component.ts","webpack:///src/app/vsan/disk-management/views/actions/recreatediskgroup/recreate-disk-group.component.ts","webpack:///src/app/vsan/disk-management/views/actions/deletedisks/delete-vsan-direct-disks.html","webpack:///src/app/vsan/disk-management/views/filter/disk-mgmt-filter.component.ts","webpack:///src/app/generated/vsan-query-data-evacuation-info-spec.ts","webpack:///src/app/vsan/disk-management/views/filter/host-list-filter-state.component.ts","webpack:///src/app/vsan/disk-management/views/actions/markssd/mark-ssd-prompt.html","webpack:///src/app/vsan/disk-management/views/disk-mgmt-summary.html","webpack:///src/app/vsan/disk-management/views/actions/storage-group-actions.html","webpack:///src/app/generated/remove-disk-spec.ts","webpack:///src/app/vsan/disk-management/views/model/storage-group-data.ts","webpack:///src/app/generated/disk-mapping-spec.ts","webpack:///src/app/vsan/common/component/diskmgmt/model/storage-data.ts","webpack:///src/app/vsan/disk-management/views/actions/storage-actions.html","webpack:///src/app/vsan/disk-management/views/actions/storage-actions.component.ts","webpack:///src/app/vsan/disk-management/views/actions/deletediskgroup/dedup-enabled-warning.component.ts","webpack:///src/app/vsan/disk-management/views/storage-group-details.html","webpack:///src/app/vsan/disk-management/views/filter/storage-group-details-filter-drive-type.component.ts","webpack:///src/app/vsan/common/service/flow/loader-name.ts","webpack:///src/app/vsan/disk-management/views/export/disk-mgmt-export-config.ts","webpack:///src/app/vsan/disk-management/views/storage-capacity.html","webpack:///src/app/vsan/disk-management/views/actions/mountdisk/mount-storage-pool-disk.component.ts","webpack:///src/app/vsan/disk-management/views/actions/unmountdisk/unmount-storage-pool-disk.component.ts","webpack:///src/app/vsan/common/directive/reactive-forms/disable-control.directive.ts","webpack:///src/app/vsan/disk-management/views/actions/unmountdisk/unmount-storage-pool-disk.html"],"names":["HostListFilterHealthComponent","comparator","item","selectedHealthLabels","some","health","getHealthKey","routes","path","component","DiskManagementModule","StorageGroupDetailsFilterDiskTierComponent","selectedStateKeys","state","getLocalizedStorage","claimOption","UnmountDiskGroupSpec","Factory","create","diskMapping","decommissionMode","DropdownNavigationDirective","el","refWatcher","nestingLevel","setTimeout","focusElements","nativeElement","e","ARROW_DOWN_KEY","ARROW_UP_KEY","TAB_KEY","document","activeElement","includes","key","click","isBackwards","shiftKey","getNextActive","focus","preventDefault","stopImmediatePropagation","stopPropagation","target","children","disabled","getNext","current","nextElementSibling","previousElementSibling","next","StopManagingPmemComponent","configureClusterMutationProvider","onOkClicked","stopManagingPmem","contextObject","then","handleTask","onError","task","closeModalDialog","message","alerts","warningMessage","getString","footerText","StorageGroupDetailsFilterTransportTypeComponent","selectedTransportTypeKeys","transportType","getTransportTypeText","ViewObjectsContext","host","group","storage","PromiseBaton","ongoingPromise","promise","rejectOnCancel","cancelLastOne","cancel","StorageGroupDetailsFilterClaimableStateComponent","localizeClaimableState","claimableState","MountDiskGroupComponent","diskGroupMutationService","closeDialog","context","getModalContext","diskGroup","mountDiskGroup","hostRef","error","StorageGroupDetailsFilterPhysicalLocationComponent","selectedPhysicalLocationKeys","locality","getPhysicalLocation","physicalLocation","HostHealthIconShapePipe","healthKey","HEALTHY_MSG_KEY","CLR_SUCCESS_STANDARD_ICON_SHAPE","LOCKED_MSG_KEY","CLR_WARN_STANDARD_ICON_SHAPE","UNHEALTHY_MSG_KEY","CLR_ERROR_STANDARD_ICON_SHAPE","UNKNOWN_MSG_KEY","CLR_HELP","UNMOUNTED_MSG_KEY","EMPTY_ICON","warn","DeleteDiskGroupComponent","vsanPropertyProvider","navigationService","dataService","warningMessages","dataOnDiskGroupLabel","selectedDecommissionMode","ensureObjectAccessibility","isValidDecommisionMode","isDiskResourcePrecheckSupported","initUI","evacuationEntityUuid","vsanUuid","shouldAllowDataMigration","shouldAllowDiskGroupDataMigration","noAction","setModalDialogHeight","DELETE_DISK_GROUP_HEIGHT_SMALL","headerMessage","getHeaderMessage","push","dataMigrationWarning","getDataMigrationWarningForDiskGroup","isInMaintenanceMode","isMounted","requestDataEvacuationProperty","ssd","groupUuid","isWitnessHost","onDataEvacuationPropertyRetrieved","result","formattedSize","formatFileSize","onDecommissionModeSummaryChanged","summary","value","isValidDecommissionMode","isPrecheckWithObjects","DELETE_DISK_GROUP_HEIGHT_LARGE","DELETE_DISK_GROUP_HEIGHT_PRECHECK","DELETE_DISK_GROUP_HEIGHT_MEDIUM","onDiskResourcePrecheckSupportedChanged","isSupported","goToPrecheckButtonText","preselectedDecommissionMode","onGoToPrecheckClicked","evacuationContext","getEvacuationContext","navigateToAndCloseModal","CLUSTER_DATA_MIGRATION_PRE_CHECK","contextObjectUid","handleTaskList","localizedPreselectedDecommissionMode","getLocalizedDecommissionMode","getProperty","runtime","inMaintenanceMode","disk","isScsiDiskHealthy","querySpec","getVsanDataEvacuationInfo","getSelectedDecommissionMode","diskGroupSpec","removeDiskGroups","busy","name","ON_INIT","DATA_EVACUATION","ON_CONFIRM","srMessage","srMessageType","PAGE_TITLE","BreadcrumbRouteModel","callback","isDisabled","values","_links","onTrigger","_key","_selectedLink","length","indexOf","route","DiskManagementScreenReaderService","preselectedHost","preselectedGroup","preselectedStorage","isHostDetailsLevel","isVirtualObjectsView","srOnlyMessage","hostName","groupName","getLabel","TYPE_AND_UUID","StorageGroupDetailsFilterDeviceStateComponent","localizeMountedState","diskStatus","CreateGroupComponent","alertMessages","isValidated","dataLoad","dataLoaded","configValidate","errors","configChange","clusterRef","fromUid","clusterId","hostId","spec","createDiskGroup","StorageGroupDetailsFilterDeviceOperationalStateComponent","localizeOperationalState","deviceState","DiskMgmtSummaryComponent","diskManagementActionAvailabilityService","diskMgmtEntitiesSummaryService","hasEditPermission","DiskManagementActionAvailabilityService","_hostIndex","isUnset","isEmpty","hostList","setItemsCount","_hostList","hostsData","getHost","summaryEntities","createEntities","hostIndex","VsanBreadcrumbNavComponent","ariaLabel","isLinkDisabled","link","isSelected","selectedLink","isLastRoute","index","subscribe","routeTo","toRoute","selectedValue","select","newlyAddedRoute","routesOrder","getRouteOrders","newlyAddedRouteIndex","lastAddedRoute","lastAddedRouteIndex","innerEvent","findIndex","isNextRoute","slice","onRouteClick","MarkLocalComponent","isLocal","title","StorageGroupDetailsComponent","spaceEfficiencyConfig","NONE","hasHostMaintenancePermission","storageSelected","healthKeys","Set","diskTierKeys","driveTypeKeys","claimableStateKeys","deviceMountStateKeys","deviceOperationalStateKeys","driveLocalityKeys","transportTypeKeys","physicalLocationKeys","healthComparator","HealthComparator","deviceMountStateComparator","DeviceMountStateComparator","deviceOperationalStateComparator","DeviceOperationalStateComparator","driveTypeComparator","DriveTypeComparator","claimableStateComparator","ClaimableStateComparator","diskTierComparator","DiskTierComparator","driveLocalityComparator","DriveLocalityComparator","transportTypeComparator","TransportTypeComparator","physicalLocationComparator","PhysicalLocationComparator","ClaimableState","Icon","DiskMgmtExportConfig","storageItems","showGrid","ascSort","ASC","DEFAULT_ITEMS_PER_PAGE","getFsVersion","getFormatVersion","getDiskHealth","getHealth","_storageGroup","undefined","storageData","forEach","add","getDiskTier","getDriveType","type","getClaimableStateLabel","getDiskMountedState","getDiskOperationalState","getDiskLocality","driveLocality","getTransportTypeLabel","updatePreselection","exportDataSource","createExportDataSource","datagrid","selectedStorageData","sortDisksByHealth","find","areEqual","selectionChanged","emitSelection","emit","uuid","getDiskType","diskLocality","localizeLocality","isVsanDiskGroup","storageGroup","isVsanMaxSingleTier","isPmemDiskGroup","isUnusedDiskGroup","pagination","getDatagridFooterLabel","sort","compareDiskHealth","o1","o2","localeCompare","StorageCapacityComponent","highchartsThemeService","barChartService","sectionsData","tooltipOptions","style","width","watchSubscriptionRef","whenThemeChanged","theme","updateSections","capacity","used","total","showOnlyTotalLabel","capacityColor","getCapacityColor","capacityTooltip","getCapacityTooltip","get","USED","Map","getColorPalette","FREE","getCapacityFreeColor","AddDiskComponent","disksLoading","selectedDisks","isVsanMaxEnabled","isAllFlashDiskGroup","addDisksForVsanMax","addDisksToDiskGroup","taskRef","diskNames","map","selectedDisk","canonicalName","addDisksToStoragePool","ownerHostRef","disks","d","isMappedAsCache","addDiskToDiskGroup","VsanBreadcrumbService","keys","routeOrders","enable","BreadcrumbNavigation","propertyKey","_routes","Object","defineProperty","set","componentContext","addRouteOrders","DeleteDisksComponent","dataOnDiskLabel","isAbsentDisk","shouldAllowDisksDataMigration","isHostEligible","isWhatIfSupported","isDataMigrationAllowedForVsanMax","isDataMigrationAllowedForVsan","groupUuids","diskGroups","join","dataMigrationMessage","getDataMigrationMessage","removeAllCapacityDisksMessage","isRemovingAllCapacityDisks","groups","allCapacityDisks","nonSsd","getDataMigrationWarning","DeviceState","OFF","showForDisks","subtitle","data","DELETE_DISKS_HEIGHT_LARGE","DELETE_DISKS_HEIGHT_PRECHECK","DELETE_DISKS_HEIGHT_MEDIUM","tasks","DELETE_DISKS_HEIGHT_SMALL","every","isVsanDiskMounted","isLocked","deleteVsanMaxDisks","deleteVsanDisks","disksToDelete","diskGroupsToDelete","diskSpec","removeDisksAndMappings","vSanMaxDisksToDelete","removeVsanMaxDisks","UnmountDiskGroupComponent","capabilityProvider","preCheckRecommendationMessage","setDialogContent","isApiSupported","UNMOUNT_DISK_GROUP_DIALOG_HEIGHT_SMALL","dataEvacuationWarningMessage","onDecommisionModeSummaryChanged","UNMOUNT_DISK_GROUP_DIALOG_HEIGHT_LARGE","UNMOUNT_DISK_GROUP_DIALOG_HEIGHT_PRECHECK","UNMOUNT_DISK_GROUP_DIALOG_HEIGHT_MEDIUM","getIsUnmountWithMaintenanceModeSupported","unmountDiskGroup","RemoveDiskGroupSpec","mappings","MarkSsdComponent","isSsd","StorageGroupDetailsFilterHealthComponent","DiskmgmtCommonModule","LoadingAwareProperty","loadingState","DEFAULT","LOADING","HostListFilterGroupsComponent","getGroupTypeKeys","DiskManagementComponent","diskMgmtService","diskManagementRoutingService","diskManagementScreenReaderService","permissionService","taskService","vsanConfigService","virtualObjectsService","cdRef","upgradeService","virtualObjectsTableState","updatePciIdService","isInitLoad","isBreadcrumbNavigationEnabled","isVsanUpgradeVisible","hasDuplicatePciIdDevices","refreshRequested","taskRefs","Promise","all","getAwaitResult","r","fetch","errorMessage","localizedMessage","handleError","onTaskStarted","onObjectsViewSelected","viewObjects","onHostDetailsViewSelected","setSelectHostIndex","onClusterNavigatedObs","selectClusterView","resetRootCallBack","onHostNavigatedObs","onHostNavigated","onVirtualObjectsRequested","viewObjectsContext","requestVirtualObjects","onErrorCleared","clearErrors","preselectContext","getNavigationData","initializeBreadcrumbNavigation","getVcCapabilityData","vcCapabilities","isDuplicatePciIdFixSupported","checkDuplicatePciIdDevices","hasPermissions","HOST_MAINTENANCE","EDIT_CLUSTER","CONFIG_STORAGE","setToLoadingState","setToDefaultState","setInitialViewRoots","isEnabled","detectChanges","selectHost","prepareReloadContext","reset","getVsanConfigSpec","listHosts","getClusterCapabilityData","vsanConfig","clusterCapabilities","clusterName","processHostsData","showBreadcrumbNavigation","updateHostLinks","preselect","preselectVirtualObjects","informPageLoad","preselectedGroupIdentifier","preselectedStorageIdentifier","setHostList","upgradeData","virtualObjects","preselectDiskMgmtEntities","noHostsView","DISK_MGMT_VIEW_NO_HOSTS","orderHostsByHealth","getUpgradeOnlyData","sortDiskGroups","getUpgradeStatus","upgradeStatus","getNewInstance","preselectHost","preselectDiskGroup","preselectStorage","selectedHost","findSelectedGroupByIdentifier","findGroupByStorage","fromDiskGroup","groupIdentifier","isStorageIdentifierValid","selectStorage","isSingleTierEnabled","diskGroupIdentifier","storageIdentifier","findStorageByIdentifier","h","navigateToHostRoute","setHostDetailsLevelRootCb","setIsVirtualObjectsView","objectUuids","queryVirtualObjects","loadedObjects","handleQueryVirtualObjectsResult","reason","handleQueryVirtualObjectsError","setVirtualObjects","listVirtualObjects","loadedVirtualObjects","informVirtualObjectsLoad","resetHostsRoutes","hostToSelect","navigateToRootRoute","selectGroup","trackBy","INPUT_VALUES","PreCheckIssuesComponent","issues","RecreateDiskGroupSpec","mapping","HostActionsComponent","actionDisabled","actionId","getActionStatus","available","getActionButtonTitle","checkAvailability","getActionValidationContext","invokePrecheckEvacuation","clusterRefUid","isHostResourcePrecheckSupported","navigateTo","hostMor","objectName","objectUid","setSize","WIDTH","HEIGHT_WITH_OBJECTS","open","invokeCreateDiskGroup","uid","taskStarted","viewHostDetails","hostDetailsViewSelected","viewHostObjects","objectsViewSelected","getPreselectedGroup","getBreadcrumbPreselectedDiskGroup","hasCreateDiskGroupAction","autoClaimMode","isHostListView","isEmptyCluster","getDataMigrationPrecheckLabel","RaceConditionSafe","targetClass","functionName","descriptor","id","getUniqueId","func","promiseBaton","addEventListeners","args","resolveOnly","call","apply","Instance","registerRefreshHandler","VsanDialogUtil","CAPACITY_MANAGEMENT_DIALOG","height","DELETE_VOLUME_DIALOG","MIGRATE_VOLUME_DIALOG","REAPPLY_VOLUME_POLICY_DIALOG","DUPLICATE_PCI_ID_MODEL_SELECTION_DIALOG","HEALTH_RESTORE_ACTION_DIALOG","CLUSTER_POWER_ON_DIALOG","VM_IO_DIAGNOSTICS_METRICS_DIALOG","VM_IO_DIAGNOSTICS_LATENCY_DIALOG","VM_IO_DIAGNOSTICS_DOM_OWNER_LATENCY_DIALOG","PERF_SVC_EDIT_ACTION_DIALOG","PERF_SVC_ENABLE_ACTION_DIALOG","CLAIM_DISKS_ACTION_DIALOG","VSAN_DISK_CLAIM_ACTION_DIALOG","VsanDialogProperties","DiskManagementRoutingService","clusterNavigated","asObservable","hostNavigated","virtualObjectsRequested","errorCleared","isHostDisabled","hasNoPlacedObjects","findHostByName","isGroupDisabled","findDiskGroupByLabel","isStorageDisabled","findStorageByName","queryClusterObjects","queryObjects","queryHostObjects","getHostBySelectedLink","getPreselectedDiskGroup","queryGroupObjects","getGroupBySelectedLink","queryStorageObjects","getStorageBySelectedLink","getAllStorageLabel","DiskManagementRoutingLabels","getAllStorage","isSelectedGroupPMEM","viewRoutes","root","CLUSTER","hosts","links","onVoGroupNavigated","onVoStorageNavigated","onClusterNavigated","show","hostLink","navigate","routeToVirtualObjectsHost","routeToVirtualObjectsGroups","getDiskGroupLabel","routeToVirtualObjectsStorage","ALL_HOSTS","onVoClusterNavigated","onVoHostNavigated","isHidden","groupLabel","ALL_GROUPS","groupLinks","getGroupLinks","storageName","storageLinks","getStorageLinks","usedGroups","filter","getUsedGroupStorage","entity","diskData","fromPmemDiskData","fromDiskData","pmemStorage","hostLinks","isPMEM","DiskMgmtEntitiesSummaryService","typeToModel","DiskMgmtEntityType","HOST","DiskMgmtEntitySummary","CAPACITY_DISK","CLAIM_AS_CAPACITY","DISK_GROUP","DISK_GROUP_IMAGE","SINGLE_TIER_DISKS","DISK","VSAN_DIRECT_DISK","PMEM_HOST","PMEM_STORAGE","clusterLevelItems","hostLevelItems","count","reduce","sum","diskSum","diskgroup","IN_USE_BY_VSAN","isClaimedForCapacity","ClaimForStorage","ONLY_MANAGED_BY_VSAN","isHostLevel","populateSummary","summaries","getSummaries","getEmptySummary","setHostCount","getHostCount","setDiskGroupCount","getDiskGroupCount","setSingleTierDiskCount","getSingleTierDiskCount","setCapacityDiskCount","getCapacityDiskCount","setVsanDirectDiskCount","getVsanDirectDiskCount","setPmemHostCount","getPmemHostCount","levelEntities","itemType","defaultType","icon","labelKeySing","labelKeyPlural","StorageGroupsComponent","VsanUiUtils","groupSelected","labelFormat","TYPE","getState","getClaimedDisksLabel","disksCount","devicesCount","getGroupType","getType","getAggregatedFsVersion","formatVersion","_host","storageGroups","unusedStorageGroup","setUnusedStorageData","ACTIONS_CLASS_NONE","ACTIONS_CLASS_HIDDEN","groupData","UUID","groupLabelFormatted","toLowerCase","replace","GROUP_ID_PREFIX","storageGroupIdentifier","isExpanded","model","triggerEl","openedGroupActionsDropdownEl","targetEl","isClickedOnGroupActionsDropdown","contains","cancelAccordionToggleEvent","toggleGroupActionsDropdown","hasClrDropdownTriggerAttr","cancelBubble","hasAttribute","CLR_DROPDOWN_TRIGGER_ATTR","parentElement","isDropdownTriggerClick","clickedDropdownEl","isGroupActionsDropdownOpen","StorageGroupActionsComponent","hostClass","viewGroupObjects","selectedDiskGroup","showViewGroupObjectsAction","isObjectIdentitiesSupported","goToPrecheckEvacuation","objUuid","addDisks","precheckUnavailable","DELETE_DISK_GROUP_WIDTH","getActionContext","recreate","RECREATE_DIALOG_HEIGHT_SMALL","RECREATE_DIALOG_HEIGHT_MEDIUM","RECREATE_DIALOG_WIDTH","mount","MOUNT_DISK_GROUP_DIALOG_WIDTH","MOUNT_DISK_GROUP_DIALOG_HEIGHT","unmount","UNMOUNT_DISK_GROUP_DIALOG_WIDTH","fromHostData","fromDiskGroupData","PRE_CHECK_ID","isRecreateDiskGroupSupported","STOP_MANAGING_PMEM_WIDTH","STOP_MANAGING_PMEM_HEIGHT","ClusterActionsComponent","clusterEligibleDiskCount","viewClusterObjects","_allHosts","getEligibleDiskCount","VIEW_DUPLICATE_PCI_ID_DEVICES","isLoading","allHosts","DISK_MANAGEMENT_VIEW","UPDATE_VIEW","SERVICES_VIEW","DeleteVsanDirectDisksComponent","capabilitiesService","SIGNPOST_CONTENT_WIDTH","SIGNPOST_CONTENT_HEIGHT","dataMigrationModeSignpostId","unsupportedDecommissionModes","onSelectedDecommissionModeChanged","getIsDecomModeForVsanDirectDisksSupported","isDecomModeForVsanDirectDisksSupported","DELETE_VSAN_DIRECT_DISKS_HEIGHT_PRECHECK","scsiDisks","removeVsanDirectDisks","getPosition","StorageGroupDetailsFilterDriveLocalityComponent","selectedLocalityKeys","ClaimDisksDialogComponent","diskManagementService","diskgroupService","changeDetector","vsanConfigSpec","queryHostClaimingData","hostsClaimingData","getHostsClaimingData","entries","isConfigValid","claimVsanMaxDisks","claimDiskGroups","claimDisksTasks","claimDisksSpecs","claimDisksSpec","claimDiskGroup","tasksPerHost","flatten","claimStoragePoolDisks","debug","isValid","DisksPropertyRetriever","vpxdModelFactory","hostRefs","storageSystemRefs","hostRefToStorateSystemRef","getHostProperties","getStorageDeviceProperties","hostPropertiesResult","storageDevicesPropertiesResult","storageDeviceInfo","hostBusAdapter","scsiLun","plugStoreTopology","adapter","device","fromMoRef","execute","storageDevices","resultItems","ri","adapters","luns","topologyDevices","topologyAdapters","topologyPaths","topologyTargets","storageDeviceData","lun","topologyDevice","td","topologyPath","p","topologyAdapter","ta","a","topologyTarget","t","underlyingLun","transport","getTransport","storageSystemRef","resourceObject","storageSystemRefToHostRef","createDataServiceResult","PROP_VSAN_STORAGE_ADAPTER_DEVICES","config","product","version","hostProps","ICON_ID","getObjectTypeIcon","propertyValues","MO_PREFIX_STORAGE_SYSTEM","MO_PREFIX_HOST","serverGuid","mo","obj","propertyName","clazz","getObjectType","TransportType","HostFibreChannelOverEthernetTargetTransport","HostFibreChannelTargetTransport","HostInternetScsiTargetTransport","HostParallelScsiTargetTransport","HostBlockAdapterTargetTransport","HostSerialAttachedTargetTransport","HostPcieTargetTransport","HostRdmaTargetTransport","HostTcpTargetTransport","HostListComponent","hostGridPageSize","hostSelected","stateKeys","groupTypeKeys","stateComparator","StateComparator","hideGroupTypeColumn","size","has","VSAN","hideFaultDomainColumn","faultDomain","getKey","isMetadataWitnessHost","RecreateDiskGroupComponent","showMessage","RECREATE_DIALOG_HEIGHT_LARGE","RECREATE_DIALOG_HEIGHT_PRECHECK","rebuildSpec","recreateDiskGroup","DiskMgmtFilterComponent","Array","from","b","VsanQueryDataEvacuationInfoSpec","HostListFilterStateComponent","RemoveDiskSpec","StorageGroupData","diskGroupData","iconId","diskGroupType","getStorageItemsFromDiskData","IN_USE","concat","getStorageItemsFromPmemData","eligibleDisks","getDisks","USABLE","ineligibleDisks","NOT_USABLE","eligiblePmemStorage","getPmemStorage","ineligiblePmemStorage","DiskMappingSpec","StorageData","iconShape","diskAdapter","getIcon","PMEM","getPMemMountDiskState","StorageActionsComponent","diskGroupSvc","spaceEfficiencyService","turnLed","on","setDiskLedState","info","invokePreCheckEvacuation","invokeDeleteDisk","isOnlyAllFlashSupportedForRemovingDisk","ALL_FLASH","DIALOG_DELETE_DISK_HEIGHT_SMALL","getDiskGroupActionData","isVsanMaxClaimedDisk","DISK_PRE_CHECK_ID","DELETE_DISKS_WIDTH","markSsd","setDiskType","markLocal","local","setDiskLocality","showViewStorageObjectsAction","selectedStorage","showDataMigrationPrecheckAction","isVsanClaimedDisk","showDeleteVsanDiskAction","showDeleteVsanDirectDiskAction","isSelectedStoragePmem","viewStorageObjects","erasePartitions","selectedDevices","invokePlatformAction","ERASE_PARTITIONS","isClaimedForVsan","DELETE_VSAN_DIRECT_DISKS_WIDTH","DELETE_VSAN_DIRECT_DISKS_HEIGHT","diskName","diskCanonicalName","UNMOUNT_DISK_DIALOG_WIDTH","UNMOUNT_DISK_DIALOG_HEIGHT","isFlash","Local","Remote","DedupEnabledWarningComponent","StorageGroupDetailsFilterDriveTypeComponent","LoaderName","storageHealth","storageCapacity","storageUuid","storageDriveType","storageTier","storageMountState","storageOperationalState","storageLocality","storageDiskAdapter","storageTransportType","storagePhysicalLocation","storageFsVersion","storageClaimableState","dataExtractor","hostListFileName","hostDataExtractors","label","stringifyCapacity","networkPartitionGroup","storageGroupDetailsFileName","MountStoragePoolDiskComponent","UnmountStoragePoolDiskComponent","UNMOUNT_DISK_DIALOG_HEIGHT_SMALL","unmountVsanMaxDisk","DisableControlDirective","ngControl","isInit","_disableControl","control","setDisabled","disableControl","disable"],"mappings":"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","file":"99-es5.js","sourcesContent":["<!--Copyright 2020-2021 VMware, Inc. All rights reserved. -- VMware Confidential-->\n<vsan-enumerated-filter [selectionResolver]=\"comparator\"\n                        [filtersCount]=\"keys.length\">\n   <vsan-enumerated-filter-item *ngFor=\"let key of keys\"\n                                [label]=\"key | localized\"\n                                [value]=\"key\"\n                                [iconVisible]=\"false\">\n   </vsan-enumerated-filter-item>\n</vsan-enumerated-filter>\n","<!--Copyright 2020-2022 VMware, Inc. All rights reserved. -- VMware Confidential-->\n<clr-tooltip *ngIf=\"clusterCapabilities?.isObjectIdentitiesSupported\">\n   <span clrTooltipTrigger\n         [vsan-ignore-focus]=\"!actionDisabled(DiskManagementActionAvailabilityService.VIEW_CLUSTER_OBJECTS_ID)\">\n      <button id=\"{{DiskManagementActionAvailabilityService.VIEW_CLUSTER_OBJECTS_ID}}\"\n              class=\"btn btn-sm btn-link no-spacing\"\n              [disabled]=\"actionDisabled(DiskManagementActionAvailabilityService.VIEW_CLUSTER_OBJECTS_ID)\"\n              (click)=\"viewClusterObjects()\">\n         {{\"vsan.actions.viewClusterObjects.label\" | localized}}\n      </button>\n   </span>\n   <clr-tooltip-content\n         *ngIf=\"actionDisabled(DiskManagementActionAvailabilityService.VIEW_CLUSTER_OBJECTS_ID)\"\n         id=\"view-cluster-objects-description\"\n         clrPosition=\"top-right\"\n         clrSize=\"md\">\n      {{getActionButtonDisabledReason(DiskManagementActionAvailabilityService.VIEW_CLUSTER_OBJECTS_ID)}}\n   </clr-tooltip-content>\n</clr-tooltip>\n<clr-tooltip *ngIf=\"!autoClaimMode\">\n   <span clrTooltipTrigger\n         [vsan-ignore-focus]=\"!actionDisabled(DiskManagementActionAvailabilityService.SEMI_AUTO_CLAIM_DISKS_ID)\">\n      <button id=\"{{DiskManagementActionAvailabilityService.SEMI_AUTO_CLAIM_DISKS_ID}}\"\n              class=\"btn btn-sm btn-link no-spacing\"\n              [disabled]=\"actionDisabled(DiskManagementActionAvailabilityService.SEMI_AUTO_CLAIM_DISKS_ID)\"\n              (click)=\"invokeSemiAutoClaim()\">\n         {{\"vsan.actions.semiAutoClaimDisks.count.label\" | localized : clusterEligibleDiskCount}}\n      </button>\n   </span>\n   <clr-tooltip-content\n         *ngIf=\"actionDisabled(DiskManagementActionAvailabilityService.SEMI_AUTO_CLAIM_DISKS_ID)\"\n         id=\"claim-disks-description\"\n         clrPosition=\"top-right\"\n         clrSize=\"md\">\n      {{getActionButtonDisabledReason(DiskManagementActionAvailabilityService.SEMI_AUTO_CLAIM_DISKS_ID)}}\n   </clr-tooltip-content>\n</clr-tooltip>\n<clr-tooltip *ngIf=\"hasDuplicatePciIdDevices?.isLoading || hasDuplicatePciIdDevices?.data\">\n   <span clrTooltipTrigger\n         [vsan-ignore-focus]=\"!actionDisabled(DiskManagementActionAvailabilityService.VIEW_DUPLICATE_PCI_ID_DEVICES)\">\n      <button id=\"{{DiskManagementActionAvailabilityService.VIEW_DUPLICATE_PCI_ID_DEVICES}}\"\n              class=\"btn btn-sm btn-link no-spacing\"\n              [clrLoading]=\"hasDuplicatePciIdDevices.isLoading\"\n              [disabled]=\"actionDisabled(DiskManagementActionAvailabilityService.VIEW_DUPLICATE_PCI_ID_DEVICES)\"\n              (click)=\"viewDuplicatePciIdDevices()\">\n         {{\"vsan.cluster.duplicatePciIdDevices.diskMgmt.dialog.label\" | localized}}\n      </button>\n   </span>\n   <clr-tooltip-content\n         *ngIf=\"actionDisabled(DiskManagementActionAvailabilityService.VIEW_DUPLICATE_PCI_ID_DEVICES)\"\n         id=\"duplicate-pci-id-description\"\n         clrPosition=\"top-right\"\n         clrSize=\"md\">\n      {{getActionButtonDisabledReason(DiskManagementActionAvailabilityService.VIEW_DUPLICATE_PCI_ID_DEVICES)}}\n   </clr-tooltip-content>\n</clr-tooltip>\n<clr-tooltip *ngIf=\"clusterCapabilities.isVsanMaxSingleTierSupported && vsanConfig.isVsanMaxEnabled\">\n   <span clrTooltipTrigger\n         [vsan-ignore-focus]=\"!actionDisabled(DiskManagementActionAvailabilityService.EDIT_VSAN_MANAGED_DISK_CLAIM_ID)\">\n      <button id=\"{{DiskManagementActionAvailabilityService.EDIT_VSAN_MANAGED_DISK_CLAIM_ID}}\"\n              class=\"btn btn-sm btn-link no-spacing\"\n              [disabled]=\"actionDisabled(DiskManagementActionAvailabilityService.EDIT_VSAN_MANAGED_DISK_CLAIM_ID)\"\n              (click)=\"editVsanDiskManagement()\">\n         {{\"vsan.actions.max.diskClaim.title\" | localized}}\n      </button>\n   </span>\n   <clr-tooltip-content\n         *ngIf=\"actionDisabled(DiskManagementActionAvailabilityService.EDIT_VSAN_MANAGED_DISK_CLAIM_ID)\"\n         id=\"edit-vsan-setting-description\"\n         clrPosition=\"top-right\"\n         clrSize=\"md\">\n      {{getActionButtonDisabledReason(DiskManagementActionAvailabilityService.EDIT_VSAN_MANAGED_DISK_CLAIM_ID)}}\n   </clr-tooltip-content>\n</clr-tooltip>","/* Copyright 2020 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component} from \"@angular/core\";\nimport {DiskMgmtHostUtil} from \"@util/disk-mgmt-host.util\";\nimport {EnumeratedFilterSelectionResolver} from \"@component/datagrid/filter/enumerated-filter.component\";\nimport {HostData} from \"@generated/host-data\";\nimport {DiskMgmtFilterComponent} from \"./disk-mgmt-filter.component\";\n\n@Component({\n   templateUrl: \"host-list-filter-health.html\",\n   selector: \"vsan-host-list-filter-health\",\n   styleUrls: [\"disk-mgmt-filter.scss\"],\n})\nexport class HostListFilterHealthComponent extends DiskMgmtFilterComponent<HostData> {\n   readonly comparator: EnumeratedFilterSelectionResolver<HostData, string> =\n         new class extends EnumeratedFilterSelectionResolver<HostData, string> {\n            isSelected(item: HostData, selectedHealthLabels: string[]): boolean {\n               return selectedHealthLabels.some(health => (health === DiskMgmtHostUtil.getHealthKey(item)));\n            }\n         }();\n}","<!--Copyright 2017-2021 VMware, Inc. All rights reserved. -- VMware Confidential-->\n<vsan-create-prompt\n      [title]=\"getDialogTitle()\"\n      [subtitle]=\"diskGroup ? diskGroup.name : ''\"\n      [blockButton]=\"busy || disksLoading\"\n      [(alertMessages)]=\"alerts\"\n      [confirmText]=\"'vsan.common.add' | localized\"\n      (onConfirm)=\"onOkClicked()\">\n   <div class=\"dialog-body\">\n      <span id=\"select-disks-label\">\n         {{(isVsanMaxEnabled\n            ? \"vsan.dialog.addDisksToStoragePool.selectDisks\"\n            : \"vsan.dialog.addDisksToDiskGroup.selectDisks\")\n            | localized}}\n      </span>\n      <vsan-select-disks [clusterRef]=\"clusterRef\"\n                         [hostRef]=\"diskGroup.ownerHostRef\"\n                         [isAllFlashDiskGroup]=\"isAllFlashDiskGroup\"\n                         [isVsanMaxEnabled]=\"isVsanMaxEnabled\"\n                         (disksLoaded)=\"onLoadingComplete()\"\n                         (selectedDisksChange)=\"selectedDisks = $event\">\n      </vsan-select-disks>\n   </div>\n\n</vsan-create-prompt>\n","/* Copyright 2020-2022 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {CommonModule} from \"@angular/common\";\nimport {NgModule} from \"@angular/core\";\nimport {FormsModule} from \"@angular/forms\";\nimport {RouterModule, Routes} from \"@angular/router\";\nimport {ClarityModule} from \"@clr/angular\";\nimport {VsanChartModule} from \"@component/chart/chart.module\";\nimport {DiskmgmtCommonModule} from \"@component/diskmgmt/diskmgmt-common.module\";\nimport {ExportModule} from \"@component/export/export.module\";\nimport {PrecheckModule} from \"@component/precheck/pre-check.module\";\nimport {UnavailableViewModule} from \"@component/unavailable-view/unavailable-view.module\";\nimport {UpgradeModule} from \"@component/upgrade/upgrade.module\";\nimport {VirtualObjectsTableStateService} from \"@component/virtual-objects-table/virtual-objects-table-state.service\";\nimport {VirtualObjectsTableModule} from \"@component/virtual-objects-table/virtual-objects-table.module\";\nimport {SpaceEfficiencyService} from \"@service/space-efficiency-service\";\nimport {ReferenceWatcher} from \"@util/reference-watcher\";\nimport {VsanCommonModule} from \"app/vsan/common/vsan-common.module\";\nimport {ClipboardModule} from \"ngx-clipboard\";\nimport {DiskManagementRoutingService} from \"./disk-management-routing.service\";\nimport {DiskManagementScreenReaderService} from \"./disk-management-screen-reader.service\";\nimport {DiskManagementComponent} from \"./disk-management.component\";\nimport {AddDiskComponent} from \"./views/actions/adddisk/add-disk.component\";\nimport {ClaimDisksDialogComponent} from \"./views/actions/claim-disks/claim-disks-dialog.component\";\nimport {ClusterActionsComponent} from \"./views/actions/cluster-actions.component\";\nimport {CreateGroupComponent} from \"./views/actions/creategroup/create-group.component\";\nimport {DedupEnabledWarningComponent} from \"./views/actions/deletediskgroup/dedup-enabled-warning.component\";\nimport {DeleteDiskGroupComponent} from \"./views/actions/deletediskgroup/delete-disk-group.component\";\nimport {DeleteDisksComponent} from \"./views/actions/deletedisks/delete-disks.component\";\nimport {DeleteVsanDirectDisksComponent} from \"./views/actions/deletedisks/delete-vsan-direct-disks.component\";\nimport {HostActionsComponent} from \"./views/actions/host-actions.component\";\nimport {MarkLocalComponent} from \"./views/actions/marklocal/mark-local-prompt.component\";\nimport {MarkSsdComponent} from \"./views/actions/markssd/mark-ssd-prompt.component\";\nimport {MountStoragePoolDiskComponent} from \"./views/actions/mountdisk/mount-storage-pool-disk.component\";\nimport {MountDiskGroupComponent} from \"./views/actions/mountdiskgroup/mount-disk-group.component\";\nimport {PreCheckIssuesComponent} from \"./views/actions/precheck/pre-check-issues.component\";\nimport {RecreateDiskGroupComponent} from \"./views/actions/recreatediskgroup/recreate-disk-group.component\";\nimport {StopManagingPmemComponent} from \"./views/actions/stopmanagingpmem/stop-managing-pmem.component\";\nimport {StorageActionsComponent} from \"./views/actions/storage-actions.component\";\nimport {StorageGroupActionsComponent} from \"./views/actions/storage-group-actions.component\";\nimport {UnmountStoragePoolDiskComponent} from \"./views/actions/unmountdisk/unmount-storage-pool-disk.component\";\nimport {UnmountDiskGroupComponent} from \"./views/actions/unmountdiskgroup/unmount-disk-group.component\";\nimport {DiskMgmtEntitiesSummaryService} from \"./views/disk-mgmt-entities-summary-service\";\nimport {DiskMgmtSummaryComponent} from \"./views/disk-mgmt-summary.component\";\nimport {DiskMgmtFilterComponent} from \"./views/filter/disk-mgmt-filter.component\";\nimport {HostListFilterGroupsComponent} from \"./views/filter/host-list-filter-groups.component\";\nimport {HostListFilterHealthComponent} from \"./views/filter/host-list-filter-health.component\";\nimport {HostListFilterStateComponent} from \"./views/filter/host-list-filter-state.component\";\nimport {StorageGroupDetailsFilterClaimableStateComponent} from \"./views/filter/storage-group-details-filter-claimable-state.component\";\nimport {StorageGroupDetailsFilterDeviceOperationalStateComponent} from \"./views/filter/storage-group-details-filter-device-operational-state.component\";\nimport {StorageGroupDetailsFilterDeviceStateComponent} from \"./views/filter/storage-group-details-filter-device-state.component\";\nimport {StorageGroupDetailsFilterDiskTierComponent} from \"./views/filter/storage-group-details-filter-disk-tier.component\";\nimport {StorageGroupDetailsFilterDriveLocalityComponent} from \"./views/filter/storage-group-details-filter-drive-locality.component\";\nimport {StorageGroupDetailsFilterDriveTypeComponent} from \"./views/filter/storage-group-details-filter-drive-type.component\";\nimport {StorageGroupDetailsFilterHealthComponent} from \"./views/filter/storage-group-details-filter-health.component\";\nimport {StorageGroupDetailsFilterPhysicalLocationComponent} from \"./views/filter/storage-group-details-filter-physical-location.component\";\nimport {StorageGroupDetailsFilterTransportTypeComponent} from \"./views/filter/storage-group-details-filter-transport-type.component\";\nimport {HostHealthIconShapePipe} from \"./views/host-health-icon-shape.pipe\";\nimport {HostListComponent} from \"./views/host-list.component\";\nimport {StorageCapacityComponent} from \"./views/storage-capacity.component\";\nimport {StorageGroupDetailsComponent} from \"./views/storage-group-details.component\";\nimport {StorageGroupsComponent} from \"./views/storage-groups.component\";\nimport {DiskManagementActionAvailabilityService} from \"./views/validation/disk-management-action-availability.service\";\n\nconst routes: Routes = [\n   {\n      path: \"\",\n      component: DiskManagementComponent,\n   },\n   {\n      path: \"addDisk\",\n      component: AddDiskComponent,\n   },\n   {\n      path: \"createDiskGroup\",\n      component: CreateGroupComponent,\n   },\n   {\n      path: \"deleteDiskGroup\",\n      component: DeleteDiskGroupComponent,\n   },\n   {\n      path: \"deleteDisks\",\n      component: DeleteDisksComponent,\n   },\n   {\n      path: \"deleteVsanDirectDisks\",\n      component: DeleteVsanDirectDisksComponent,\n   },\n   {\n      path: \"deleteDiskUnsupportedDialog\",\n      component: DedupEnabledWarningComponent,\n   },\n   {\n      path: \"recreateDiskGroup\",\n      component: RecreateDiskGroupComponent,\n   },\n   {\n      path: \"mountDiskGroup\",\n      component: MountDiskGroupComponent,\n   },\n   {\n      path: \"unmountDiskGroup\",\n      component: UnmountDiskGroupComponent,\n   },\n   {\n      path: \"unmountStoragePoolDisk\",\n      component: UnmountStoragePoolDiskComponent,\n   },\n   {\n      path: \"mountStoragePoolDisk\",\n      component: MountStoragePoolDiskComponent,\n   },\n   {\n      path: \"markLocal\",\n      component: MarkLocalComponent,\n   },\n   {\n      path: \"markSsd\",\n      component: MarkSsdComponent,\n   },\n   {\n      path: \"semiAutoClaim\",\n      component: ClaimDisksDialogComponent,\n   },\n   {\n      path: \"preCheckIssues\",\n      component: PreCheckIssuesComponent,\n   },\n   {\n      path: \"stopManagingPmem\",\n      component: StopManagingPmemComponent,\n   },\n];\n\n@NgModule({\n   imports: [\n      CommonModule,\n      FormsModule,\n      ClarityModule,\n      VsanCommonModule,\n      UnavailableViewModule,\n      DiskmgmtCommonModule,\n      PrecheckModule,\n      UpgradeModule,\n      VsanChartModule,\n      VirtualObjectsTableModule,\n      ExportModule,\n      ClipboardModule,\n      RouterModule.forChild(routes),\n   ],\n   declarations: [\n      DiskManagementComponent,\n      DiskMgmtSummaryComponent,\n      HostListComponent,\n      HostHealthIconShapePipe,\n      DiskMgmtFilterComponent,\n      HostListFilterHealthComponent,\n      HostListFilterStateComponent,\n      HostListFilterGroupsComponent,\n      StorageGroupDetailsFilterHealthComponent,\n      StorageGroupDetailsFilterDriveTypeComponent,\n      StorageGroupDetailsFilterDiskTierComponent,\n      StorageGroupDetailsFilterDeviceStateComponent,\n      StorageGroupDetailsFilterClaimableStateComponent,\n      StorageGroupDetailsFilterDeviceOperationalStateComponent,\n      StorageGroupDetailsFilterDriveLocalityComponent,\n      StorageGroupDetailsFilterTransportTypeComponent,\n      StorageGroupDetailsFilterPhysicalLocationComponent,\n      StorageGroupsComponent,\n      StorageGroupDetailsComponent,\n      StorageCapacityComponent,\n      // Aggregated Actions\n      ClusterActionsComponent,\n      HostActionsComponent,\n      StorageGroupActionsComponent,\n      StorageActionsComponent,\n      // Actions\n      DedupEnabledWarningComponent,\n      RecreateDiskGroupComponent,\n      MountDiskGroupComponent,\n      UnmountDiskGroupComponent,\n      UnmountStoragePoolDiskComponent,\n      MountStoragePoolDiskComponent,\n      AddDiskComponent,\n      CreateGroupComponent,\n      DeleteDiskGroupComponent,\n      DeleteDisksComponent,\n      DeleteVsanDirectDisksComponent,\n      MarkLocalComponent,\n      MarkSsdComponent,\n      ClaimDisksDialogComponent,\n      PreCheckIssuesComponent,\n      StopManagingPmemComponent,\n   ],\n   providers: [\n      DiskManagementActionAvailabilityService,\n      DiskManagementRoutingService,\n      DiskManagementScreenReaderService,\n      DiskMgmtEntitiesSummaryService,\n      ReferenceWatcher,\n      SpaceEfficiencyService,\n      VirtualObjectsTableStateService,\n   ],\n})\nexport class DiskManagementModule {\n}\n","/* Copyright 2020 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component} from \"@angular/core\";\nimport {EnumeratedFilterSelectionResolver} from \"@component/datagrid/filter/enumerated-filter.component\";\nimport {DiskMgmtFilterComponent} from \"./disk-mgmt-filter.component\";\nimport {DiskMgmtDiskUtil} from \"@util/disk-mgmt-disk.util\";\nimport {StorageData} from \"@component/diskmgmt/model/storage-data\";\n\n@Component({\n   templateUrl: \"disk-mgmt-filter.html\",\n   selector: \"vsan-storage-group-details-filter-disk-tier\",\n   styleUrls: [\"disk-mgmt-filter.scss\"],\n})\nexport class StorageGroupDetailsFilterDiskTierComponent extends DiskMgmtFilterComponent<StorageData> {\n\n   readonly comparator: EnumeratedFilterSelectionResolver<StorageData, string> =\n         new class extends EnumeratedFilterSelectionResolver<StorageData, string> {\n            isSelected(item: StorageData, selectedStateKeys: string[]): boolean {\n               return selectedStateKeys.some(state =>\n                     state === DiskMgmtDiskUtil.getLocalizedStorage(item.claimOption));\n            }\n         }();\n}","import {VsanDiskMapping} from '@generated/vsan-disk-mapping';\nimport {DecommissionMode} from '@generated/decommission-mode';\n\nexport interface UnmountDiskGroupSpec {\n\n   diskMapping: VsanDiskMapping;\n   decommissionMode: DecommissionMode;\n} //class UnmountDiskGroupSpec\n\nexport module UnmountDiskGroupSpec{\nexport class Factory {\n\n   static create = (diskMapping: VsanDiskMapping, decommissionMode: DecommissionMode): UnmountDiskGroupSpec => {\n      return { diskMapping: diskMapping, decommissionMode: decommissionMode, };\n   }\n\n\n} //class Factory\n\n} //module UnmountDiskGroupSpec\n","/* Copyright (c) 2021 VMware, Inc. All rights reserved. VMware Confidential */\nimport {\n   AfterViewInit,\n   Directive, ElementRef, HostListener, Input,\n} from \"@angular/core\";\nimport {ReferenceWatcher} from \"@util/reference-watcher\";\n\n/**\n * A directive that provides keyboard navigation for clr-dropdown menus using Arrow keys and Tab / Shift + Tab.\n */\n@Directive({\n   selector: \"[vsan-dropdown-navigation]\",\n})\nexport class DropdownNavigationDirective implements AfterViewInit {\n   constructor(private el: ElementRef, private refWatcher: ReferenceWatcher) { }\n\n   /**\n    * Nesting level of the dropdown controls.\n    */\n   @Input(\"vsan-dropdown-navigation\")\n   nestingLevel: number = 1;\n\n   ngAfterViewInit(): void {\n      setTimeout(() => this.focusElements(this.el.nativeElement, this.nestingLevel), 0);\n   }\n\n   @HostListener(\"keydown\", [\"$event\"])\n   onKeydown(e: KeyboardEvent): void {\n      const ARROW_DOWN_KEY: string = \"ArrowDown\";\n      const ARROW_UP_KEY: string = \"ArrowUp\";\n      const TAB_KEY: string = \"Tab\";\n\n      let el: HTMLElement = document.activeElement as HTMLElement;\n      if (![TAB_KEY, ARROW_DOWN_KEY, ARROW_UP_KEY].includes(e.key)) {\n         if (e.key === \"Enter\") {\n            el.click();\n         }\n         return;\n      }\n\n      const isBackwards: boolean = e.key === ARROW_UP_KEY || (e.key === TAB_KEY && e.shiftKey);\n      el = this.getNextActive(el, isBackwards);\n\n      if (el?.focus) {\n         el.focus();\n      }\n\n      e.preventDefault();\n      e.stopImmediatePropagation();\n      e.stopPropagation();\n   }\n\n   private focusElements(target: HTMLElement, nestingLevel: number): void {\n      if (nestingLevel === 0) {\n         // Focus the first not disabled button.\n         let el: HTMLElement = target.children[0] as HTMLElement;\n         if ((el as HTMLSelectElement)?.disabled) {\n            el = this.getNextActive(el);\n         }\n         el.focus();\n         return;\n      }\n\n      this.focusElements(target.children[0] as HTMLElement, nestingLevel - 1);\n   }\n\n   private getNextActive(el: HTMLElement, isBackwards: boolean = false): HTMLElement {\n      let getNext: (current: HTMLElement) => HTMLElement;\n      if (!isBackwards) {\n         getNext = (current: HTMLElement) => current ? current.nextElementSibling as HTMLElement : null;\n      } else {\n         getNext = (current: HTMLElement) => current ? current.previousElementSibling as HTMLElement : null;\n      }\n\n      el = getNext(el);\n      while ((el as HTMLSelectElement)?.disabled) {\n         const next: HTMLElement = getNext(el);\n         if (!next) {\n            break;\n         }\n         el = next;\n      }\n\n      return el;\n   }\n}","/* Copyright 2020 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component} from \"@angular/core\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {ManagedObject} from \"@service/managed-object\";\nimport {ConfigureVsanClusterMutationProvider} from \"@generated/configure-vsan-cluster-mutation-provider\";\n\n@Component({\n   templateUrl: \"stop-managing-pmem.html\",\n   styleUrls: [\"../actions-common.scss\"],\n   selector: \"vsan-stop-managing-pmem\",\n})\nexport class StopManagingPmemComponent {\n   alerts: string[];\n   warningMessage: string;\n   footerText: string;\n\n   constructor(private configureClusterMutationProvider: ConfigureVsanClusterMutationProvider) { }\n\n   ngOnInit(): void {\n      this.warningMessage = VsanUiUtils.getString(\"vsan.dialog.stopManagingPmem.description\");\n      this.footerText = VsanUiUtils.getString(\"vsan.dialog.stopManagingPmem.confirm\");\n   }\n\n   onOkClicked = () => {\n      this.configureClusterMutationProvider.stopManagingPmem(ManagedObject.contextObject)\n            .then(this.handleTask)\n            .catch(this.onError);\n   };\n\n   private handleTask = (task: ManagedObject) => {\n      VsanUiUtils.closeModalDialog(task);\n   };\n\n   private onError = (message: any) => {\n      this.alerts = [message];\n   };\n}","/* Copyright 2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component} from \"@angular/core\";\nimport {EnumeratedFilterSelectionResolver} from \"@component/datagrid/filter/enumerated-filter.component\";\nimport {DiskMgmtFilterComponent} from \"./disk-mgmt-filter.component\";\nimport {StorageData} from \"@component/diskmgmt/model/storage-data\";\nimport {DiskMgmtDiskUtil} from \"@util/disk-mgmt-disk.util\";\n\n@Component({\n   templateUrl: \"disk-mgmt-filter.html\",\n   selector: \"vsan-storage-group-details-filter-transport-type\",\n   styleUrls: [\"disk-mgmt-filter.scss\"],\n})\nexport class StorageGroupDetailsFilterTransportTypeComponent extends DiskMgmtFilterComponent<StorageData> {\n\n   readonly comparator: EnumeratedFilterSelectionResolver<StorageData, string> =\n         new class extends EnumeratedFilterSelectionResolver<StorageData, string> {\n            isSelected(item: StorageData, selectedTransportTypeKeys: string[]): boolean {\n               return selectedTransportTypeKeys.some(\n                     transportType => transportType === DiskMgmtDiskUtil.getTransportTypeText(item.transportType));\n            }\n         }();\n}","/* Copyright 2020 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {DiskGroupData} from \"@generated/disk-group-data\";\nimport {StorageData} from \"@component/diskmgmt/model/storage-data\";\nimport {HostData} from \"@generated/host-data\";\n\n/**\n * A model for passing context from view cluster/host/diskgroup/storage objects action.\n */\nexport class ViewObjectsContext {\n   constructor(public host: HostData, public group: DiskGroupData, public storage: StorageData) {\n   }\n}","/* Copyright 2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {CancelablePromise} from \"@util/promise/cancelable-promise\";\n\nexport class PromiseBaton<TResult> {\n   private ongoingPromise: CancelablePromise<TResult>;\n\n   constructor() {\n      this.ongoingPromise = null;\n   }\n\n   /**\n    * Only the last passed promise will be resolved. Others will be canceled.\n    * @param promise - The only pending promise that we want to resolve.\n    * @param rejectOnCancel - Whether we want to rethrow the cancellation of the returned promise.\n    * @example\n    * ```ts\n    * // If later we cancel the returned promise it will be rejected with the following error: { canceled: true }.\n    * resolveOnly(promise, true);\n    * ```\n    * ```ts\n    * // If later we cancel the returned promise it won't be rejected and the 'catch' callback won't be invoked.\n    * resolveOnly(promise, false);\n    * ```\n    */\n   resolveOnly(promise: Promise<TResult>, rejectOnCancel: boolean = false): Promise<TResult> {\n      this.cancelLastOne();\n      // We wrap it into CancelablePromise to be able to cancel this one without affecting the original promise.\n      // Original promise subscribers still will be able to get the result.\n      this.ongoingPromise = new CancelablePromise(promise, rejectOnCancel);\n      return this.ongoingPromise.promise;\n   }\n\n   /**\n    * Reject the currently running promise.\n    */\n   cancelLastOne(): void {\n      if (this.ongoingPromise) {\n         this.ongoingPromise.cancel();\n      }\n   }\n}","/* Copyright 2020 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component} from \"@angular/core\";\nimport {EnumeratedFilterSelectionResolver} from \"@component/datagrid/filter/enumerated-filter.component\";\nimport {DiskMgmtFilterComponent} from \"./disk-mgmt-filter.component\";\nimport {DiskMgmtDiskUtil} from \"@util/disk-mgmt-disk.util\";\nimport {StorageData} from \"@component/diskmgmt/model/storage-data\";\n\n@Component({\n   templateUrl: \"disk-mgmt-filter.html\",\n   selector: \"vsan-storage-group-details-filter-claimable-state\",\n   styleUrls: [\"disk-mgmt-filter.scss\"],\n})\nexport class StorageGroupDetailsFilterClaimableStateComponent extends DiskMgmtFilterComponent<StorageData> {\n\n   readonly comparator: EnumeratedFilterSelectionResolver<StorageData, string> =\n         new class extends EnumeratedFilterSelectionResolver<StorageData, string> {\n            isSelected(item: StorageData, selectedStateKeys: string[]): boolean {\n               return selectedStateKeys.some(state =>\n                     state === DiskMgmtDiskUtil.localizeClaimableState(item.claimableState));\n            }\n         }();\n}","/* Copyright 2019-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, OnInit} from \"@angular/core\";\nimport {ManagedObject} from \"@service/managed-object\";\nimport {DiskGroupActionContext} from \"@navigation/context/disk-group-action-context\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {DiskGroupMutationService} from \"@generated/disk-group-mutation-service\";\nimport {HostActionData} from \"@model/host-action.data\";\nimport {DiskGroupActionData} from \"@model/disk-group-action.data\";\nimport {LoadingIndicator} from \"@service/flow/loading-indicator.decorator\";\nimport {Loader} from \"@service/flow/loader.decorator\";\nimport {ErrorHandler} from \"@service/flow/error-handler.decorator\";\n\n/**\n * This component is used to mount disk group.\n */\n@Component({\n   templateUrl: \"mount-disk-group.html\",\n   selector: \"vsan-mount-disk-group\",\n   styleUrls: [\"../actions-common.scss\"],\n})\nexport class MountDiskGroupComponent implements OnInit {\n\n   @LoadingIndicator()\n   loading: boolean;\n\n   alerts: string[] = [];\n   host: HostActionData;\n   diskGroup: DiskGroupActionData;\n\n   constructor(private diskGroupMutationService: DiskGroupMutationService) {\n   }\n\n   async ngOnInit(): Promise<void> {\n      const context: DiskGroupActionContext = VsanUiUtils.getModalContext();\n      this.host = context.host;\n      this.diskGroup = context.diskGroup;\n   }\n\n   @Loader()\n   async ok(): Promise<void> {\n      this.alerts = [];\n\n      const task: ManagedObject = await this.diskGroupMutationService.mountDiskGroup(this.host.hostRef, this.diskGroup.diskMapping);\n      this.closeDialog(task);\n   }\n\n   private closeDialog = (task: ManagedObject) => {\n      VsanUiUtils.closeModalDialog(task);\n   };\n\n   @ErrorHandler()\n   private handleError(error: any): void {\n      this.alerts = [error];\n   }\n}\n","/* Copyright 2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component} from \"@angular/core\";\nimport {EnumeratedFilterSelectionResolver} from \"@component/datagrid/filter/enumerated-filter.component\";\nimport {DiskMgmtFilterComponent} from \"./disk-mgmt-filter.component\";\nimport {DiskMgmtDiskUtil} from \"@util/disk-mgmt-disk.util\";\nimport {StorageData} from \"@component/diskmgmt/model/storage-data\";\n\n@Component({\n   templateUrl: \"disk-mgmt-filter.html\",\n   selector: \"vsan-storage-group-details-filter-physical-location\",\n   styleUrls: [\"disk-mgmt-filter.scss\"],\n})\nexport class StorageGroupDetailsFilterPhysicalLocationComponent extends DiskMgmtFilterComponent<StorageData> {\n\n   readonly comparator: EnumeratedFilterSelectionResolver<StorageData, string> =\n         new class extends EnumeratedFilterSelectionResolver<StorageData, string> {\n            isSelected(item: StorageData, selectedPhysicalLocationKeys: string[]): boolean {\n               return selectedPhysicalLocationKeys\n                     .some(locality => locality === DiskMgmtDiskUtil.getPhysicalLocation(item.physicalLocation));\n            }\n         }();\n}","<!-- Copyright 2020-2021 VMware, Inc. All rights reserved. -- VMware Confidential -->\n<ul>\n   <li *ngFor=\"let route of routes; let index = index\">\n      <ng-container *ngIf=\"!route.isHidden\">\n         <ng-container *ngIf=\"index\">\n            <ng-container *ngTemplateOutlet=\"rightCaret; context: {disabled: false}\"></ng-container>\n         </ng-container>\n         <ng-container *ngIf=\"!route.isList\">\n            <button class=\"btn btn-link no-spacing route-link\"\n                    vsan-show-title\n                    role=\"link\"\n                    *ngIf=\"route.onTrigger\"\n                    (click)=\"routeTo(route, true)\"\n                    [attr.aria-current]=\"getRouteAriaCurrent(index)\">\n               {{route.link}}\n            </button>\n            <ng-container *ngIf=\"!route.onTrigger\">\n               <button class=\"btn btn-link no-spacing disabled route-link\"\n                       tabindex=\"-1\"\n                       vsan-show-title\n                       role=\"link\">\n                  {{route.link}}\n                  <!-- Add right caret to the last non-anchor route-->\n                  <ng-container *ngIf=\"isLastRoute(index)\">\n                     <ng-container *ngTemplateOutlet=\"rightCaret; context: {disabled: true}\"></ng-container>\n                  </ng-container>\n               </button>\n            </ng-container>\n         </ng-container>\n         <clr-dropdown *ngIf=\"route.isList\"\n                       [clrCloseMenuOnItemClick]=\"false\"\n                       class=\"wide-item\">\n            <!-- Disable keyboard navigation for the route because:\n                    1) This action is already available from the \"All items\" dropdown menu\n                    2) Reduce navigation steps\n            -->\n            <button class=\"btn btn-link no-spacing route-link\"\n                    vsan-show-title\n                    tabindex=\"-1\"\n                    role=\"link\"\n                    [attr.aria-current]=\"getRouteAriaCurrent(index)\"\n                    (click)=\"routeTo(route, true)\"\n                    [ngClass]=\"{'selected': isLastRoute(index)}\">\n               {{route.selectedLink}}\n            </button>\n            <button class=\"dropdown-trigger\" clrDropdownTrigger [attr.aria-label]=\"route.links[0]\">\n               <clr-icon shape=\"caret down\"\n                         [vsan-icon-title]=\"'vsan.common.breadcrumb.toggleOptions.title' | localized\">\n               </clr-icon>\n            </button>\n            <clr-dropdown-menu *clrIfOpen\n                               [attr.aria-label]=\"'vsan.common.srMessage.dropdownMenu.optionsExpanded.label' | localized\">\n               <div *ngFor=\"let link of route.links\"\n                    clrDropdownItem\n                    [clrDisabled]=\"isLinkDisabled(route, link)\"\n                    (click)=\"onSelect(route, link)\"\n                    [ngClass]=\"{'selected': isSelected(route, link)}\">\n                  {{link}}\n               </div>\n            </clr-dropdown-menu>\n         </clr-dropdown>\n      </ng-container>\n   </li>\n</ul>\n<!-- Add aria-hidden to the last right caret only (i.e., it is disabled) as otherwise\nroutes are not navigated in browser mode -->\n<ng-template #rightCaret let-disabled=\"disabled\">\n   <clr-icon shape=\"caret right\"\n             class=\"right-caret\"\n             [attr.aria-hidden]=\"disabled ? true : null\">\n   </clr-icon>\n</ng-template>\n","/* Copyright 2020 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Pipe, PipeTransform} from \"@angular/core\";\nimport {Icon} from \"@util/icon\";\nimport {Logger} from \"@util/logger\";\nimport {DiskMgmtHostUtil} from \"@util/disk-mgmt-host.util\";\nimport {DiskMgmtDiskGroupUtil} from \"@util/disk-mgmt-disk-group.util\";\n\n@Pipe({\n   name: \"hostHealthIconShape\",\n})\nexport class HostHealthIconShapePipe implements PipeTransform {\n\n   transform(healthKey: string): string {\n      switch (healthKey) {\n         case DiskMgmtHostUtil.HEALTHY_MSG_KEY:\n            return Icon.CLR_SUCCESS_STANDARD_ICON_SHAPE;\n         case DiskMgmtDiskGroupUtil.LOCKED_MSG_KEY:\n            return Icon.CLR_WARN_STANDARD_ICON_SHAPE;\n         case DiskMgmtHostUtil.UNHEALTHY_MSG_KEY:\n            return Icon.CLR_ERROR_STANDARD_ICON_SHAPE;\n         case DiskMgmtHostUtil.UNKNOWN_MSG_KEY:\n            return Icon.CLR_HELP;\n         case DiskMgmtDiskGroupUtil.UNMOUNTED_MSG_KEY:\n            return Icon.EMPTY_ICON;\n         default:\n            Logger.warn(\"Unknown health key: \" + healthKey);\n            return Icon.EMPTY_ICON;\n      }\n   }\n}","/* Copyright 2017-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component} from \"@angular/core\";\nimport {ScsiDisk} from \"@component/diskmgmt/model/scsi-disk.data\";\nimport {DecommissionModeSummary} from \"@component/precheck/pre-check-evacuation-summary.component\";\nimport {DecommissionMode} from \"@generated/decommission-mode\";\nimport {DiskGroupMutationService} from \"@generated/disk-group-mutation-service\";\nimport {RemoveDiskGroupSpec} from \"@generated/remove-disk-group-spec\";\nimport {VsanPropertyProvider} from \"@generated/vsan-property-provider\";\nimport {VsanQueryDataEvacuationInfoSpec} from \"@generated/vsan-query-data-evacuation-info-spec\";\nimport {DiskGroupActionData} from \"@model/disk-group-action.data\";\nimport {HostActionData} from \"@model/host-action.data\";\nimport {DiskGroupActionContext} from \"@navigation/context/disk-group-action-context\";\nimport {EvacuationContext} from \"@navigation/context/evacuation.context\";\nimport {NavigationService, PlatformExtension} from \"@navigation/navigation.service\";\nimport {HostSystem} from \"@service/client/dataservice/data-service-property\";\nimport {DataServiceClient} from \"@service/client/dataservice/data-service.service\";\nimport {ErrorHandler} from \"@service/flow/error-handler.decorator\";\nimport {LoaderName} from \"@service/flow/loader-name\";\nimport {Loader} from \"@service/flow/loader.decorator\";\nimport {LoadingIndicator} from \"@service/flow/loading-indicator.decorator\";\nimport {ManagedObject} from \"@service/managed-object\";\nimport {SrMessageType} from \"@service/screen-reader-announcer.service\";\nimport {DiskMgmtDiskUtil} from \"@util/disk-mgmt-disk.util\";\nimport {Logger} from \"@util/logger\";\nimport {VsanDataMigrationUtil} from \"@util/vsan-data-migration-util\";\nimport {VsanDiskMgmtActionsUtil} from \"@util/vsan-disk-mgmt-actions-util\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\n\n@Component({\n   templateUrl: \"delete-disk-group.html\",\n   styleUrls: [\"../actions-common.scss\"],\n   selector: \"vsan-diskmgmt-delete-disk-group\",\n})\nexport class DeleteDiskGroupComponent {\n   host: HostActionData;\n   diskGroup: DiskGroupActionData;\n   evacuationEntityUuid: string;\n   goToPrecheckButtonText: string;\n   warningMessages: string[] = [];\n   dataOnDiskGroupLabel: string = VsanUiUtils.getString(\"vsan.dialog.deleteDiskGroup.evacuateDataLabel\");\n   shouldAllowDataMigration: boolean;\n   selectedDecommissionMode: DecommissionMode = DecommissionMode.ensureObjectAccessibility;\n\n   @LoadingIndicator({name: [LoaderName.ON_INIT, LoaderName.DATA_EVACUATION, LoaderName.ON_CONFIRM]})\n   busy: boolean;\n\n   alerts: string[];\n\n   isValidDecommisionMode: boolean = true;\n   isDiskResourcePrecheckSupported: boolean = true;\n   preselectedDecommissionMode: DecommissionMode;\n   localizedPreselectedDecommissionMode: string;\n\n   constructor(private vsanPropertyProvider: VsanPropertyProvider,\n         private diskGroupMutationService: DiskGroupMutationService,\n         private navigationService: NavigationService,\n         private dataService: DataServiceClient) {\n   }\n\n   @Loader({\n      name: LoaderName.ON_INIT,\n      srMessage: \"vsan.dialog.deleteDiskGroup.title\",\n      srMessageType: SrMessageType.PAGE_TITLE,\n   })\n   async ngOnInit(): Promise<void> {\n      const context: DiskGroupActionContext = VsanUiUtils.getModalContext();\n      this.host = context.host;\n      this.diskGroup = context.diskGroup;\n      this.preselectedDecommissionMode = context.decommissionMode;\n      this.localizedPreselectedDecommissionMode =\n            VsanDataMigrationUtil.getLocalizedDecommissionMode(this.preselectedDecommissionMode);\n\n      this.host.isInMaintenanceMode = await this.dataService\n            .getProperty(HostSystem.runtime.inMaintenanceMode, this.host.hostRef);\n      this.initUI();\n   }\n\n   @ErrorHandler({name: LoaderName.ON_INIT})\n   private handleInitError(): void {\n      this.alerts = [VsanUiUtils.getString(\"vsan.common.error.dataExtraction\")];\n   }\n\n   private initUI = () => {\n      this.evacuationEntityUuid = this.diskGroup.vsanUuid;\n\n      this.shouldAllowDataMigration = VsanDiskMgmtActionsUtil.shouldAllowDiskGroupDataMigration(\n            this.host, this.diskGroup);\n      if (!this.shouldAllowDataMigration) {\n         this.selectedDecommissionMode = DecommissionMode.noAction;\n         VsanUiUtils.setModalDialogHeight(VsanDiskMgmtActionsUtil.DELETE_DISK_GROUP_HEIGHT_SMALL);\n      }\n\n      const headerMessage: string = this.getHeaderMessage();\n      if (!!headerMessage) {\n         this.warningMessages.push(headerMessage);\n      }\n      const dataMigrationWarning: string = VsanDiskMgmtActionsUtil.getDataMigrationWarningForDiskGroup(\n            this.host.isInMaintenanceMode, this.diskGroup.isMounted);\n      if (!!dataMigrationWarning) {\n         this.warningMessages.push(dataMigrationWarning);\n      }\n      this.requestDataEvacuationProperty(this.diskGroup.diskMapping.ssd);\n   };\n\n   private getHeaderMessage = (): string => {\n      const groupUuid: string = this.diskGroup.vsanUuid;\n      if (this.host.isInMaintenanceMode) {\n         return VsanUiUtils.getString(\"vsan.confirmMultipleDisksRemove.dataEvacuation.text\", groupUuid);\n      } else if (this.host.isWitnessHost) {\n         return VsanUiUtils.getString(\"vsan.dialog.deleteDiskGroup.externalWitnessHostWarning\", groupUuid);\n      } else if (this.diskGroup.isMounted) {\n         return VsanUiUtils.getString(\"vsan.dialog.deleteDiskGroup.headerDataEvacuation\", groupUuid);\n      }\n   };\n\n   @Loader({name: LoaderName.DATA_EVACUATION})\n   private async requestDataEvacuationProperty(disk: ScsiDisk): Promise<void> {\n      if (!DiskMgmtDiskUtil.isScsiDiskHealthy(disk)) {\n         this.dataOnDiskGroupLabel = VsanUiUtils.getString(\"vsan.dialog.deleteDiskGroup.evacuateDataLabel.error\");\n         return;\n      }\n\n      const querySpec: VsanQueryDataEvacuationInfoSpec = VsanQueryDataEvacuationInfoSpec.Factory.create([disk]);\n      const result: number = await this.vsanPropertyProvider.getVsanDataEvacuationInfo(this.host.hostRef, querySpec);\n      this.onDataEvacuationPropertyRetrieved(result);\n   }\n\n   private onDataEvacuationPropertyRetrieved = (result: number) => {\n      if (result >= 0) {\n         const formattedSize: string = VsanUiUtils.formatFileSize(result);\n         this.dataOnDiskGroupLabel = VsanUiUtils.getString(\n               \"vsan.dialog.deleteDiskGroup.evacuateDataLabelWithSize\",\n               formattedSize);\n      }\n   };\n\n   @ErrorHandler({name: LoaderName.DATA_EVACUATION})\n   private onDataRetrievalError(message: any): void {\n      this.alerts = [VsanUiUtils.getString(\"vsan.common.error.dataExtraction\")];\n      this.dataOnDiskGroupLabel = VsanUiUtils.getString(\"vsan.dialog.deleteDiskGroup.evacuateDataLabel.error\");\n      Logger.error(\"Failed to retrieve vsanDataEvacuationInfo: \" + message);\n   }\n\n   onDecommissionModeSummaryChanged = (summary: DecommissionModeSummary) => {\n      this.selectedDecommissionMode = summary.value;\n      this.isValidDecommisionMode = summary.isValidDecommissionMode;\n      // change the dialog height based on the content\n      if (VsanDiskMgmtActionsUtil.isPrecheckWithObjects(summary) && !this.isDiskResourcePrecheckSupported) {\n         VsanUiUtils.setModalDialogHeight(VsanDiskMgmtActionsUtil.DELETE_DISK_GROUP_HEIGHT_LARGE);\n      } else if (this.isDiskResourcePrecheckSupported) {\n         VsanUiUtils.setModalDialogHeight(VsanDiskMgmtActionsUtil.DELETE_DISK_GROUP_HEIGHT_PRECHECK);\n      } else {\n         VsanUiUtils.setModalDialogHeight(VsanDiskMgmtActionsUtil.DELETE_DISK_GROUP_HEIGHT_MEDIUM);\n      }\n   };\n\n   onDiskResourcePrecheckSupportedChanged = (isSupported: boolean) => {\n      this.isDiskResourcePrecheckSupported = isSupported;\n      // Preselecting decommmission mode means that this dialog is opened from Data migration pre-check page,\n      // in which case GO TO PRE-CHECK button doesn't need to be display.\n      this.goToPrecheckButtonText = !this.preselectedDecommissionMode && this.isDiskResourcePrecheckSupported ?\n            VsanUiUtils.getString(\"vsan.actions.goToPrecheckDataMigration.label\") : \"\";\n   };\n\n   @Loader({name: LoaderName.ON_CONFIRM})\n   async onOkClicked(): Promise<void> {\n      const decommissionMode: DecommissionMode = this.preselectedDecommissionMode ?\n            this.preselectedDecommissionMode :\n            VsanDiskMgmtActionsUtil.getSelectedDecommissionMode(\n                  this.shouldAllowDataMigration, this.selectedDecommissionMode);\n      const diskGroupSpec: RemoveDiskGroupSpec = RemoveDiskGroupSpec.Factory.create(\n            decommissionMode,\n            [this.diskGroup.diskMapping]);\n\n      const task: ManagedObject = await this.diskGroupMutationService\n            .removeDiskGroups(ManagedObject.contextObject, this.host.hostRef, diskGroupSpec);\n      this.handleTaskList(task);\n   }\n\n   onGoToPrecheckClicked = () => {\n      const evacuationContext: EvacuationContext = VsanDiskMgmtActionsUtil.getEvacuationContext(\n            this.host.hostRef, this.evacuationEntityUuid, this.selectedDecommissionMode);\n      this.navigationService.navigateToAndCloseModal(PlatformExtension.CLUSTER_DATA_MIGRATION_PRE_CHECK,\n            ManagedObject.contextObjectUid, evacuationContext);\n   };\n\n   private handleTaskList = (task: ManagedObject) => {\n      VsanUiUtils.closeModalDialog(task);\n   };\n\n   @ErrorHandler({name: LoaderName.ON_CONFIRM})\n   private onDeleteOperationError(message: any): void {\n      this.alerts = [message];\n   }\n\n   get isDeleteButtonBlocked(): boolean {\n      return this.busy || !this.isValidDecommisionMode;\n   }\n}\n","/* Copyright 2020-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {VsanBreadcrumbService} from \"./vsan-breadcrumb.service\";\n\nexport class BreadcrumbRouteModel {\n   /**\n    * Keeps the route key. It is needed for routes ordering ex.\n    */\n   private _key: string;\n\n   /**\n    * Keeps route links values. It could be only 1 or multiple links displayed as dropdown.\n    */\n   private _links: string[] = [];\n\n   /**\n    * Currently selected link. Very useful when there is multiple links for 1 route.\n    */\n   private _selectedLink: string;\n\n   /**\n    * Component callback method name. When the route gets triggered, then this callback is called as well.\n    */\n   onTrigger: string;\n\n   /**\n    * A predicate that defines disabled state of links from dropdown.\n    */\n   isDisabled: IsDisabledLink;\n\n   /**\n    * Indicates whether a given route model should be hidden\n    */\n   isHidden: boolean;\n\n   static link(callback: string = \"\", isDisabled: IsDisabledLink = () => false, value: string = \"\"):\n         BreadcrumbRouteModel {\n      return new BreadcrumbRouteModel(callback, isDisabled, [value]);\n   }\n\n   static links(callback: string, isDisabled: IsDisabledLink = () => false, values: string[] = []):\n         BreadcrumbRouteModel {\n      return new BreadcrumbRouteModel(callback, isDisabled, values);\n   }\n\n   constructor(callback: string, isDisabled: IsDisabledLink, values: string[] = []) {\n      this.onTrigger = callback;\n      this.isDisabled = isDisabled;\n      this._links = values;\n   }\n\n   get key(): string {\n      return this._key;\n   }\n\n   set key(key: string) {\n      this._key = key;\n   }\n\n   get link(): string {\n      return this._links[0];\n   }\n\n   set link(value: string) {\n      this._links[0] = value;\n      this._selectedLink = value;\n   }\n\n   get links(): string[] {\n      return this._links;\n   }\n\n   set links(values: string[]) {\n      this._links = values;\n   }\n\n   get selectedLink(): string {\n      return this._selectedLink;\n   }\n\n   get isList(): boolean {\n      return this._links.length > 1;\n   }\n\n   select(value: string) {\n      if (this._links.indexOf(value) === -1) {\n         return;\n      }\n      this._selectedLink = value;\n   }\n\n   navigate() {\n      VsanBreadcrumbService.route.next(this);\n   }\n}\n\nexport type IsDisabledLink = (link: string) => boolean;\n","/* Copyright 2020-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {Injectable} from \"@angular/core\";\nimport {HostData} from \"@generated/host-data\";\nimport {DiskMgmtDiskGroupUtil, VsanDiskGroupLabelFormat} from \"@util/disk-mgmt-disk-group.util\";\nimport {ScreenReaderAnnouncer} from \"@service/screen-reader-announcer.service\";\nimport {StorageIdentifier} from \"@component/diskmgmt/model/storage-identifier\";\nimport {StorageGroupIdentifier} from \"@component/diskmgmt/model/storage-group-identifier\";\n\n/**\n * This service handles screen reader messages for disk management view.\n */\n@Injectable()\nexport class DiskManagementScreenReaderService {\n\n   @ScreenReaderAnnouncer()\n   srOnlyMessage: string;\n\n   informPageLoad(preselectedHost: HostData, preselectedGroup: StorageGroupIdentifier,\n         preselectedStorage: StorageIdentifier, isHostDetailsLevel: boolean, isVirtualObjectsView: boolean): void {\n      if (!preselectedHost) {\n         if (isVirtualObjectsView) {\n            // Disk Management page was loaded, virtual objects for cluster are loading.\n            this.srOnlyMessage = VsanUiUtils.getString(\"vsan.manage.diskManagement.srMessage.virtualObjects.cluster\");\n         } else {\n            // Disk management page was loaded\n            this.srOnlyMessage = VsanUiUtils.getString(\"vsan.screenReader.message.page.loaded\",\n                  VsanUiUtils.getString(\"manage.vsan.diskManagement\"));\n         }\n         return;\n      }\n      const hostName: string = preselectedHost.name;\n      if (!isHostDetailsLevel && !isVirtualObjectsView) {\n         // Disk management page was loaded and {hostName} was selected.\n         this.srOnlyMessage = VsanUiUtils.getString(\"vsan.screenReader.message.page.loaded.andItemSelected\",\n               VsanUiUtils.getString(\"manage.vsan.diskManagement\"), hostName);\n         return;\n      }\n      if (!preselectedGroup) {\n         if (isVirtualObjectsView) {\n            // Disk Management page was loaded, virtual objects for host {hostName} are loading.\n            this.srOnlyMessage =\n                  VsanUiUtils.getString(\"vsan.manage.diskManagement.srMessage.virtualObjects.host\", hostName);\n         } else {\n            // Disk Management page was loaded, disk groups for host {hostName} are listed.\n            this.srOnlyMessage =\n                  VsanUiUtils.getString(\"vsan.manage.diskManagement.srMessage.hostLevel.groups\", hostName);\n         }\n         return;\n      }\n      const groupName: string = DiskMgmtDiskGroupUtil.getLabel(preselectedGroup, VsanDiskGroupLabelFormat.TYPE_AND_UUID);\n      if (!preselectedStorage) {\n         if (isVirtualObjectsView) {\n            // Disk Management page was loaded, virtual objects for {groupName} from host {hostName} are loading.\n            this.srOnlyMessage = VsanUiUtils.getString(\"vsan.manage.diskManagement.srMessage.virtualObjects.group\",\n                  groupName, hostName);\n         } else {\n            // Disk Management page was loaded and {groupName} was expanded.\n            this.srOnlyMessage = VsanUiUtils.getString(\"vsan.screenReader.message.page.loaded.andItemExpanded\",\n                  VsanUiUtils.getString(\"manage.vsan.diskManagement\"), groupName);\n         }\n      } else {\n         if (isVirtualObjectsView) {\n            // Disk Management page was loaded, virtual objects for {storageName} in {groupName} from\n            // host {hostName} are loading.\n            this.srOnlyMessage = VsanUiUtils.getString(\"vsan.manage.diskManagement.srMessage.virtualObjects.storage\",\n                  preselectedStorage.name, groupName, hostName);\n         } else {\n            // Disk Management page was loaded, {groupName} was expanded and {storageName} was selected.\n            this.srOnlyMessage = VsanUiUtils.getString(\n                  \"vsan.manage.diskManagement.srMessage.hostLevel.groups.disk.singular\",\n                  groupName, preselectedStorage.name);\n         }\n      }\n   }\n\n   informVirtualObjectsLoad(): void {\n      // Virtual objects loaded.\n      this.srOnlyMessage = VsanUiUtils.getString(\"vsan.manage.diskManagement.srMessage.virtualObjects.loaded\");\n   }\n}\n","/* Copyright 2020-2022 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component} from \"@angular/core\";\nimport {EnumeratedFilterSelectionResolver} from \"@component/datagrid/filter/enumerated-filter.component\";\nimport {DiskMgmtFilterComponent} from \"./disk-mgmt-filter.component\";\nimport {DiskMgmtDiskUtil} from \"@util/disk-mgmt-disk.util\";\nimport {StorageData} from \"@component/diskmgmt/model/storage-data\";\n\n@Component({\n   templateUrl: \"disk-mgmt-filter.html\",\n   selector: \"vsan-storage-group-details-filter-device-state\",\n   styleUrls: [\"disk-mgmt-filter.scss\"],\n})\nexport class StorageGroupDetailsFilterDeviceStateComponent extends DiskMgmtFilterComponent<StorageData> {\n\n   readonly comparator: EnumeratedFilterSelectionResolver<StorageData, string> =\n         new class extends EnumeratedFilterSelectionResolver<StorageData, string> {\n            isSelected(item: StorageData, selectedStateKeys: string[]): boolean {\n               return selectedStateKeys.some(state =>\n                     state === DiskMgmtDiskUtil.localizeMountedState(item.diskStatus));\n            }\n         }();\n}","<!--Copyright 2017-2021 VMware, Inc. All rights reserved. -- VMware Confidential-->\n<vsan-create-prompt\n      [title]=\"'vsan.dialog.createDiskGroup.title' | localized\"\n      [subtitle]=\"hostName\"\n      [blockButton]=\"busy || !dataLoaded\"\n      [(alertMessages)]=\"isValidated && alertMessages\"\n      (onConfirm)=\"onOkClicked()\">\n   <vsan-create-disk-group-page\n         [clusterRef]=\"clusterRef\"\n         [hostRef]=\"hostRef\"\n         [isWitnessHost]=\"isWitnessHost\"\n         (dataLoaded)=\"dataLoad()\"\n         (configChanged)=\"configChange($event)\"\n         (validateConfig)=\"configValidate($event)\">\n   </vsan-create-disk-group-page>\n</vsan-create-prompt>\n","/* Copyright 2017-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component} from \"@angular/core\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {ManagedObject} from \"@service/managed-object\";\nimport {DiskGroupMutationService} from \"@generated/disk-group-mutation-service\";\nimport {VsanDiskMapping} from \"@generated/vsan-disk-mapping\";\nimport {DiskMappingSpec} from \"@generated/disk-mapping-spec\";\nimport {LoadingIndicator} from \"@service/flow/loading-indicator.decorator\";\nimport {Loader} from \"@service/flow/loader.decorator\";\nimport {SrMessageType} from \"@service/screen-reader-announcer.service\";\nimport {ErrorHandler} from \"@service/flow/error-handler.decorator\";\nimport {LoaderName} from \"@service/flow/loader-name\";\n\n@Component({\n   templateUrl: \"create-group.html\",\n   selector: \"vsan-diskmgmt-create-group\",\n})\nexport class CreateGroupComponent {\n\n   clusterRef: ManagedObject;\n   hostRef: ManagedObject;\n   hostName: string;\n   isWitnessHost: boolean;\n   diskMapping: VsanDiskMapping;\n\n   @LoadingIndicator({name: [LoaderName.ON_INIT, LoaderName.ON_CONFIRM]})\n   busy: boolean;\n\n   // This flag is needed, because `busy`'s value can't be changed, because of the LoadingIndicator\n   dataLoaded: boolean;\n\n   alertMessages: string[] = [];\n\n   // Flag to keep whether the user tried to submit the dialog.\n   isValidated: boolean = false;\n\n   constructor(private diskGroupMutationService: DiskGroupMutationService) {\n   }\n\n   @Loader({\n      name: LoaderName.ON_INIT,\n      srMessage: \"vsan.dialog.createDiskGroup.title\",\n      srMessageType: SrMessageType.PAGE_TITLE,\n   })\n   ngOnInit(): void {\n      this.alertMessages = [];\n\n      const context: any = VsanUiUtils.getModalContext();\n      this.clusterRef = ManagedObject.fromUid(context.clusterId);\n      this.hostRef = ManagedObject.fromUid(context.hostId);\n      this.hostName = context.hostName;\n      this.isWitnessHost = context.isWitnessHost;\n   }\n\n   dataLoad = (): void => {\n      this.dataLoaded = true;\n   };\n\n   configValidate = (errors: string[]) => {\n      this.alertMessages = errors;\n   };\n\n   configChange = (diskMapping: VsanDiskMapping) => {\n      this.diskMapping = diskMapping;\n   };\n\n   @Loader({name: LoaderName.ON_CONFIRM})\n   async onOkClicked(): Promise<void> {\n      this.isValidated = true;\n      if (this.alertMessages.length > 0) {\n         return;\n      }\n\n      const spec: DiskMappingSpec = DiskMappingSpec.Factory.create(\n            this.clusterRef,\n            [this.diskMapping]);\n\n      const result: ManagedObject = await this.diskGroupMutationService.createDiskGroup(this.hostRef, spec);\n      VsanUiUtils.closeModalDialog(result);\n   }\n\n   @ErrorHandler({name: LoaderName.ON_CONFIRM})\n   private handleError(error: string): void {\n      this.alertMessages = [error];\n   }\n}\n","<!-- Copyright 2020-2021 VMware, Inc. All rights reserved. -- VMware Confidential -->\n<vsan-host-actions *ngIf=\"selectedHost\"\n                   [autoClaimMode]=\"autoClaimMode\"\n                   [hasEditPermission]=\"hasEditPermission\"\n                   [clusterCapabilities]=\"clusterCapabilities\"\n                   [hasHostMaintenancePermission]=\"hasHostMaintenancePermission\"\n                   [selectedHost]=\"selectedHost\"\n                   [isHostListView]=\"true\">\n</vsan-host-actions>\n<clr-datagrid #dataGrid\n              [(clrDgSingleSelected)]=\"selectedHost\"\n              (clrDgSingleSelectedChange)=\"selectionChanged($event)\">\n   <!-- Datagrid Header -->\n   <clr-dg-column [clrDgField]=\"'name'\">\n      <ng-container *clrDgHideableColumn=\"{hidden: false}\">\n         {{\"vsan.manage.diskManagement.hostList.name\" | localized}}\n      </ng-container>\n   </clr-dg-column>\n   <clr-dg-column [clrDgSortBy]=\"healthComparator\">\n      <ng-container *clrDgHideableColumn=\"{hidden: false}\">\n         {{\"vsan.manage.diskManagement.hostList.health\" | localized}}\n      </ng-container>\n      <clr-dg-filter *ngIf=\"healthKeys?.size > 1\">\n         <vsan-host-list-filter-health [items]=\"healthKeys\">\n         </vsan-host-list-filter-health>\n      </clr-dg-filter>\n   </clr-dg-column>\n   <clr-dg-column>\n      <ng-container *clrDgHideableColumn=\"{hidden: false}\">\n         {{\"vsan.manage.diskManagement.hostList.disksInUse\" | localized}}\n      </ng-container>\n   </clr-dg-column>\n   <clr-dg-column [clrDgSortBy]=\"stateComparator\">\n      <ng-container *clrDgHideableColumn=\"{hidden: false}\">\n         {{\"vsan.manage.diskManagement.hostList.state\" | localized}}\n      </ng-container>\n      <clr-dg-filter *ngIf=\"stateKeys?.size > 1\">\n         <vsan-host-list-filter-state [items]=\"stateKeys\">\n         </vsan-host-list-filter-state>\n      </clr-dg-filter>\n   </clr-dg-column>\n   <clr-dg-column class=\"capacity-column\">\n      <ng-container *clrDgHideableColumn=\"{hidden: false}\">\n         {{\"vsan.manage.diskManagement.hostList.capacity\" | localized}}\n      </ng-container>\n   </clr-dg-column>\n   <clr-dg-column>\n      <ng-container *clrDgHideableColumn=\"{hidden: hideGroupTypeColumn()}\">\n         {{\"vsan.manage.diskManagement.hostList.contributesTo\" | localized}}\n      </ng-container>\n      <clr-dg-filter *ngIf=\"groupTypeKeys?.size > 1\">\n         <vsan-host-list-filter-groups [items]=\"groupTypeKeys\">\n         </vsan-host-list-filter-groups>\n      </clr-dg-filter>\n   </clr-dg-column>\n   <clr-dg-column [clrDgField]=\"'faultDomain'\">\n      <ng-container *clrDgHideableColumn=\"{hidden: hideFaultDomainColumn()}\">\n         {{\"vsan.manage.diskManagement.hostList.faultDomain\" | localized}}\n      </ng-container>\n   </clr-dg-column>\n   <clr-dg-column [clrDgField]=\"'networkPartitionGroup'\">\n      <ng-container *clrDgHideableColumn=\"{hidden: false}\">\n         {{\"vsan.manage.diskManagement.hostList.networkPartitionGroup\" | localized}}\n      </ng-container>\n   </clr-dg-column>\n\n   <!-- Row height set is required for to accommodate copy-to-clipboard icon height -->\n   <clr-dg-row *clrDgItems=\"let row of hostList\"\n               [clrDgItem]=\"row\"\n               class=\"signpost-row-height-fix\">\n      <clr-dg-cell>\n         <vsan-mor-cell [shape]=\"row.iconId\"\n                        [name]=\"row.name\"\n                        [suffix]=\"getHostSuffix(row)\"\n                        [objectId]=\"row.hostRef\">\n         </vsan-mor-cell>\n      </clr-dg-cell>\n      <clr-dg-cell>\n         <vsan-icon-item [label]=\"getHealthKey(row) | localized\"\n                         [shape]=\"getHealthKey(row) | hostHealthIconShape\"\n                         [iconClass]=\"Icon.CLR_SOLID_ICON_CLASS + ' ' +\n                                      Icon.clrIconShapeClassMap[getHealthKey(row) | hostHealthIconShape]\">\n         </vsan-icon-item>\n      </clr-dg-cell>\n      <clr-dg-cell vsan-show-title>{{getClaimedDisksLabel(row)}}</clr-dg-cell>\n      <clr-dg-cell vsan-show-title>{{getState(row)}}</clr-dg-cell>\n      <clr-dg-cell class=\"no-vertical-padding right-align-cell\">\n         <vsan-storage-capacity [capacity]=\"row.capacity\">\n         </vsan-storage-capacity>\n      </clr-dg-cell>\n      <clr-dg-cell class=\"no-vertical-padding\" vsan-show-title>\n         <ng-container *ngIf=\"getGroupTypeKeys(row); let groupKeys\">\n            <span *ngFor=\"let key of groupKeys\" class=\"label label-info\">\n               {{key | localized}}\n            </span>\n         </ng-container>\n      </clr-dg-cell>\n      <clr-dg-cell vsan-show-title>{{row.faultDomain}}</clr-dg-cell>\n      <clr-dg-cell vsan-show-title>\n         <ng-container *ngIf=\"row.networkPartitionGroup\">\n            {{\"vsan.host.list.partitionGroupFormat\" | localized: row.networkPartitionGroup}}\n         </ng-container>\n      </clr-dg-cell>\n   </clr-dg-row>\n   <!--Pagination-->\n   <clr-dg-footer>\n<!--      <vsan-export [source]=\"exportDataSource\"-->\n<!--                   [filename]=\"DiskMgmtExportConfig.hostListFileName\"-->\n<!--                   [dataExtractors]=\"DiskMgmtExportConfig.hostDataExtractors\">-->\n<!--      </vsan-export>-->\n      <clr-dg-pagination #pagination [clrDgPageSize]=\"hostGridPageSize\">\n         <clr-dg-page-size [hidden]=\"hideDgPageSize()\"\n                           [clrPageSizeOptions]=\"[hostGridPageSize, hostGridPageSize*2, 64]\">\n            {{\"vsan.common.datagrid.pageSize\" | localized}}\n         </clr-dg-page-size>\n         {{VsanUiUtils.getDatagridFooterLabel(hostList, pagination, hostGridPageSize)}}\n      </clr-dg-pagination>\n   </clr-dg-footer>\n</clr-datagrid>","/* Copyright 2022 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component} from \"@angular/core\";\nimport {EnumeratedFilterSelectionResolver} from \"@component/datagrid/filter/enumerated-filter.component\";\nimport {DiskMgmtFilterComponent} from \"./disk-mgmt-filter.component\";\nimport {DiskMgmtDiskUtil} from \"@util/disk-mgmt-disk.util\";\nimport {StorageData} from \"@component/diskmgmt/model/storage-data\";\n\n@Component({\n   templateUrl: \"disk-mgmt-filter.html\",\n   selector: \"vsan-storage-group-details-filter-device-operational-state\",\n   styleUrls: [\"disk-mgmt-filter.scss\"],\n})\nexport class StorageGroupDetailsFilterDeviceOperationalStateComponent extends DiskMgmtFilterComponent<StorageData> {\n\n   readonly comparator: EnumeratedFilterSelectionResolver<StorageData, string> =\n         new class extends EnumeratedFilterSelectionResolver<StorageData, string> {\n            isSelected(item: StorageData, selectedStateKeys: string[]): boolean {\n               return selectedStateKeys.some(state =>\n                     state === DiskMgmtDiskUtil.localizeOperationalState(item.deviceState));\n            }\n         }();\n}","<!--Copyright 2020-2021 VMware, Inc. All rights reserved. -- VMware Confidential-->\n<vsan-enumerated-filter [selectionResolver]=\"comparator\"\n                        [filtersCount]=\"keys.length\">\n   <vsan-enumerated-filter-item *ngFor=\"let key of keys\"\n                                [iconShape]=\"key | hostHealthIconShape\"\n                                [iconClass]=\"Icon.CLR_SOLID_ICON_CLASS + ' ' +\n                                      Icon.clrIconShapeClassMap[key | hostHealthIconShape]\"\n                                [label]=\"key | localized\"\n                                [value]=\"key\">\n   </vsan-enumerated-filter-item>\n</vsan-enumerated-filter>\n","<!--Copyright 2019-2022 VMware, Inc. All rights reserved. -- VMware Confidential-->\n<vsan-info-prompt [title]=\"'vsan.upgrade.manage.upgrade.confirm.title' | localized\"\n                  [subtitle]=\"subtitle\">\n   <vsan-validation id=\"alerts\"\n                    [(alerts)]=\"issues\"\n                    [allowClose]=\"false\"\n                    [alertType]=\"'warning'\"\n                    [alertsExpanded]=\"true\"\n                    [allowExpandCollapse]=\"false\">\n   </vsan-validation>\n</vsan-info-prompt>\n","/* Copyright 2020-2022 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {ChangeDetectionStrategy, Component, Input} from \"@angular/core\";\nimport {HostData} from \"@generated/host-data\";\nimport {VsanCapabilityData} from \"@generated/vsan-capability-data\";\nimport {VsanConfigSpec} from \"@generated/vsan-config-spec\";\nimport {LoadingAwareProperty} from \"@model/loading-aware-property\";\nimport {NavigationService} from \"@navigation/navigation.service\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {DiskMgmtEntitiesSummaryService, DiskMgmtEntitySummary} from \"./disk-mgmt-entities-summary-service\";\nimport {DiskManagementActionAvailabilityService} from \"./validation/disk-management-action-availability.service\";\n\n/**\n * The component is used as overview of disk management view. It shows the number of hosts, disk groups and\n * different types of disks per cluster or host level. Cluster / host level specific actions are provided in the footer.\n */\n@Component({\n   templateUrl: \"disk-mgmt-summary.html\",\n   selector: \"vsan-disk-mgmt-summary\",\n   styleUrls: [\"disk-mgmt-summary.scss\"],\n   changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class DiskMgmtSummaryComponent {\n\n   @Input()\n   clusterName: string;\n\n   /**\n    * Represents the index of the host from the hostList. When the index:\n    *    - equals to -1 the component will aggregate data on cluster level\n    *    - is equal or greater than 0 the component will aggregate data on a host level.\n    */\n   _hostIndex: number;\n   @Input()\n   get hostIndex(): number {\n      return this._hostIndex;\n   }\n\n   set hostIndex(value: number) {\n      if (VsanUiUtils.isUnset(value) || value === this._hostIndex) {\n         return;\n      }\n      this._hostIndex = value;\n      if (!VsanUiUtils.isEmpty(this.hostList)) {\n         this.setItemsCount();\n      }\n   }\n\n   _hostList: HostData[];\n   @Input()\n   get hostList(): HostData[] {\n      return this._hostList;\n   }\n\n   set hostList(value: HostData[]) {\n      if (VsanUiUtils.isUnset(value)) {\n         return;\n      }\n      this._hostList = value;\n      this.setItemsCount();\n   }\n\n   @Input()\n   autoClaimMode: boolean;\n\n   @Input()\n   hasEditPermission: boolean = false;\n\n   @Input()\n   clusterCapabilities: VsanCapabilityData;\n\n   @Input()\n   vsanConfig: VsanConfigSpec;\n\n   @Input()\n   hasHostMaintenancePermission: boolean;\n\n   @Input()\n   hasDuplicatePciIdDevices: LoadingAwareProperty<boolean>;\n\n   DiskManagementActionAvailabilityService: typeof DiskManagementActionAvailabilityService =\n         DiskManagementActionAvailabilityService;\n\n   summaryEntities: DiskMgmtEntitySummary[];\n\n   constructor(private navigationService: NavigationService,\n         private diskManagementActionAvailabilityService: DiskManagementActionAvailabilityService,\n         private diskMgmtEntitiesSummaryService: DiskMgmtEntitiesSummaryService) {\n   }\n\n   private setItemsCount(): void {\n      const hostsData: HostData[] = this.isHostDetailsLevel() ? [this.getHost()] : this.hostList;\n      this.summaryEntities = this.diskMgmtEntitiesSummaryService.createEntities(this.isHostDetailsLevel(), hostsData);\n   }\n\n   isHostDetailsLevel(): boolean {\n      return this.hostIndex > -1;\n   }\n\n   getHost(): HostData {\n      return this.isHostDetailsLevel() ? this.hostList[this.hostIndex] : null;\n   }\n}","/* Copyright 2020-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, HostBinding, OnInit} from \"@angular/core\";\nimport {VsanBreadcrumbService} from \"./vsan-breadcrumb.service\";\nimport {BreadcrumbRouteModel} from \"./breadcrumb-route.model\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\n\n@Component({\n   selector: \"vsan-breadcrumb-nav\",\n   templateUrl: \"vsan-breadcrumb-nav.html\",\n   styleUrls: [\"vsan-breadcrumb-nav.scss\"],\n})\nexport class VsanBreadcrumbNavComponent implements OnInit {\n   routes: BreadcrumbRouteModel[] = [];\n\n   @HostBinding(\"attr.aria-label\") ariaLabel: string = VsanUiUtils.getString(\"vsan.common.breadcrumb.ariaLabel\");\n\n   ngOnInit(): void {\n      VsanBreadcrumbService.route.subscribe(route => this.routeTo(route, false));\n   }\n\n   onSelect(toRoute: BreadcrumbRouteModel, selectedValue: string): void {\n      if (this.isLinkDisabled(toRoute, selectedValue)) {\n         return;\n      }\n      toRoute.select(selectedValue);\n      this.routeTo(toRoute, true);\n   }\n\n   isLinkDisabled = (route: BreadcrumbRouteModel, link: string): boolean =>\n         route && route.isDisabled && route.isDisabled(link);\n\n   private isNextRoute(newlyAddedRoute: BreadcrumbRouteModel): boolean {\n      const routesOrder: string[] = VsanBreadcrumbService.getRouteOrders();\n      const newlyAddedRouteIndex: number = routesOrder.indexOf(newlyAddedRoute.key);\n      if (this.routes.length === 0) {\n         return newlyAddedRouteIndex === 0;\n      }\n\n      const lastAddedRoute: BreadcrumbRouteModel = this.routes[this.routes.length - 1];\n      const lastAddedRouteIndex: number = routesOrder.indexOf(lastAddedRoute.key);\n      return newlyAddedRouteIndex - lastAddedRouteIndex === 1;\n   }\n\n   routeTo(toRoute: BreadcrumbRouteModel, innerEvent: boolean): void {\n      const index: number = this.routes.findIndex(route => route.key === toRoute.key);\n      if (index === -1) {\n         if (this.isNextRoute(toRoute)) {\n            this.routes.push(toRoute);\n         }\n         return;\n      }\n\n      this.routes = this.routes.slice(0, index + 1);\n      if (innerEvent) {\n         // When navigation event is triggered by breadcrumb component, then propagate to all hooked components as well.\n         VsanBreadcrumbService.onRouteClick.next(this.routes[this.routes.length - 1]);\n      }\n   }\n\n   isSelected = (route: BreadcrumbRouteModel, link: string): boolean => route.selectedLink === link;\n\n   isLastRoute = (index: number): boolean => index === this.routes.length - 1;\n\n   getRouteAriaCurrent(index: number): boolean {\n      return this.isLastRoute(index) ? true : null;\n   }\n}\n","/* Copyright 2017-2019 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, OnInit} from \"@angular/core\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\n\n@Component({\n   templateUrl: \"mark-local-prompt.html\",\n   selector: \"vsan-diskmgmt-mark-local\",\n})\nexport class MarkLocalComponent implements OnInit{\n\n   isLocal: boolean;\n   title: string;\n\n   ngOnInit(): void {\n      this.isLocal = VsanUiUtils.getModalContext();\n\n      this.title = VsanUiUtils.getString(this.isLocal\n            ? \"storage.adapters.devices.action.markAsLocal\"\n            : \"storage.adapters.devices.action.markAsRemote\");\n   }\n\n}","<!--Copyright 2019-2022 VMware, Inc. All rights reserved. -- VMware Confidential-->\n<vsan-default-prompt\n      [title]=\"'vsan.actions.unmountDiskGroup.dialogTitle' | localized\"\n      [subtitle]=\"diskGroup?.vsanUuid\"\n      [confirmText]=\"'vsan.actions.unmountDiskGroup.confirmText' | localized\"\n      [confirmStyle]=\"'btn-danger'\"\n      [(alertMessages)]=\"alerts\"\n      [blockContent]=\"loading\"\n      [blockButton]=\"loading || !isValidDecommisionMode\"\n      [additionalButtonText]=\"goToPrecheckButtonText\"\n      (onConfirm)=\"ok()\"\n      (onAdditionalAction)=\"onGoToPrecheckClicked()\">\n   <div class=\"dialog-body\">\n      <vsan-validation *ngIf=\"warningMessages?.length\"\n                       alertType=\"warning\"\n                       [allowClose]=\"false\"\n                       [alertsExpanded]=\"true\"\n                       [allowExpandCollapse]=\"false\"\n                       [(alerts)]=\"warningMessages\">\n      </vsan-validation>\n\n      <!--Preselected decommission mode-->\n      <form class=\"clr-form clr-form-horizontal\" *ngIf=\"preselectedDecommissionMode\">\n         <div class=\"clr-form-control\">\n            <label for=\"unmount-disk-group-decommission-mode\" class=\"clr-control-label\">\n               {{\"vsan.dialog.precheckEvacuation.label\" | localized}}\n            </label>\n            <span id=\"unmount-disk-group-decommission-mode\">\n               {{localizedPreselectedDecommissionMode}}\n            </span>\n         </div>\n      </form>\n\n      <!-- Select decommission mode -->\n      <ng-container *ngIf=\"!loading && shouldAllowDataMigration && !preselectedDecommissionMode\">\n         <div id=\"data-on-disk-label\" *ngIf=\"!isDiskResourcePrecheckSupported\">\n            {{dataOnDiskGroupLabel}}\n         </div>\n         <div class=\"migration-mode-label\">\n            <span id=\"select-migration-mode-label\">{{'vsan.dialog.deleteDiskGroup.migrationMode' | localized}}</span>\n            <clr-signpost [vsan-signpost-title]=\"'vsan.dialog.deleteDiskGroup.migrationMode.signpost.label' | localized\">\n               <clr-signpost-content *clrIfOpen clrPosition=\"center-right\">\n                  <span>{{'vsan.dialog.deleteDiskGroup.evacuateDataHelp' | localized}}</span>\n               </clr-signpost-content>\n            </clr-signpost>\n         </div>\n         <vsan-pre-check-evacuation-summary\n               id=\"precheck-evacuation-summary\"\n               [hostMor]=\"host.hostRef\"\n               [evacuationEntityUuid]=\"evacuationEntityUuid\"\n               [selectedDecommissionMode]=\"selectedDecommissionMode\"\n               [preCheckRecommendationMessage]=\"preCheckRecommendationMessage\"\n               (selectedDecommissionModeSummaryChanged)=\"onDecommisionModeSummaryChanged($event)\"\n               (isDiskResourcePrecheckSupportedRetrieved)=\"onDiskResourcePrecheckSupportedChanged($event)\">\n         </vsan-pre-check-evacuation-summary>\n      </ng-container>\n\n      <!-- Confirmation text -->\n      <div id=\"footer-unmount-disk-group\" class=\"strong-label\">\n         {{\"vsan.actions.unmountDiskGroup.dialogContent.confirmationLabel\" | localized}}\n      </div>\n   </div>\n</vsan-default-prompt>\n","<!--Copyright 2017-2021 VMware, Inc. All rights reserved. -- VMware Confidential-->\n<vsan-info-prompt [title]=\"'vsan.dialog.deleteDiskFromDiskGroup.title' | localized\"\n                  confirmText=\"vsan.common.ok\">\n   {{\"vsan.dialog.deleteDiskFromDiskGroup.validation.dedupEnabled\" | localized}}\n</vsan-info-prompt>","/* Copyright 2020-2022 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {AfterViewInit, Component, EventEmitter, Input, OnInit, Output, ViewChild} from \"@angular/core\";\nimport {ClrDatagrid, ClrDatagridComparatorInterface, ClrDatagridPagination, ClrDatagridSortOrder} from \"@clr/angular\";\nimport {Icon} from \"@util/icon\";\nimport {DiskData} from \"@generated/disk-data\";\nimport {HostData} from \"@generated/host-data\";\nimport {VsanCapabilityData} from \"@generated/vsan-capability-data\";\nimport {SpaceEfficiencyConfig} from \"@generated/space-efficiency-config\";\nimport {ClaimableState} from \"@util/disk-mgmt.util\";\nimport {DiskMgmtDiskUtil} from \"@util/disk-mgmt-disk.util\";\nimport {DiskMgmtDiskGroupUtil} from \"@util/disk-mgmt-disk-group.util\";\nimport {DiskType} from \"@generated/disk-type\";\nimport {DiskStatus} from \"@generated/disk-status\";\nimport {ClaimOption} from \"@generated/claim-option\";\nimport {StorageIdentifier} from \"@component/diskmgmt/model/storage-identifier\";\nimport {StorageData} from \"@component/diskmgmt/model/storage-data\";\nimport {StorageGroupData} from \"./model/storage-group-data\";\nimport {DiskLocalityType} from \"@generated/disk-locality-type\";\nimport {DiskMgmtExportConfig} from \"./export/disk-mgmt-export-config\";\nimport {ExportDataSource} from \"@component/export/export-data-source\";\nimport {ReferenceWatcher} from \"@util/reference-watcher\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\n\n@Component({\n   templateUrl: \"storage-group-details.html\",\n   selector: \"vsan-storage-details\",\n   styleUrls: [\"storage-group-details.scss\"],\n   providers: [ReferenceWatcher],\n})\nexport class StorageGroupDetailsComponent implements OnInit, AfterViewInit {\n\n   @ViewChild(\"dataGrid\")\n   datagrid: ClrDatagrid;\n\n   @Input()\n   autoClaimMode: boolean;\n\n   @Input()\n   spaceEfficiencyConfig: SpaceEfficiencyConfig = SpaceEfficiencyConfig.NONE;\n\n   @Input()\n   hasEditPermission: boolean = false;\n\n   @Input()\n   hasHostMaintenancePermission: boolean = false;\n\n   @Input()\n   clusterCapabilities: VsanCapabilityData;\n\n   private _storageGroup: StorageGroupData;\n\n   @Input()\n   set storageGroup(value: StorageGroupData) {\n      this._storageGroup = value;\n      if (!value) {\n         this.storageItems = undefined;\n         return;\n      }\n      this.storageItems = value.storageData;\n      value.storageData.forEach(storage => {\n         this.healthKeys.add(this.getDiskHealth(storage.diskStatus));\n         this.diskTierKeys.add(this.getDiskTier(storage.claimOption));\n         this.driveTypeKeys.add(this.getDriveType(storage.type));\n         this.claimableStateKeys.add(this.getClaimableStateLabel(storage.claimableState));\n         this.deviceMountStateKeys.add(this.getDiskMountedState(storage.diskStatus));\n         this.deviceOperationalStateKeys.add(this.getDiskOperationalState(storage.deviceState));\n         this.driveLocalityKeys.add(this.getDiskLocality(storage.driveLocality));\n         this.transportTypeKeys.add(this.getTransportTypeLabel(storage.transportType));\n         this.physicalLocationKeys.add(this.getPhysicalLocation(storage.physicalLocation));\n      });\n      this.updatePreselection();\n   }\n   get storageGroup(): StorageGroupData {\n      return this._storageGroup;\n   }\n\n   @Input()\n   host: HostData;\n\n   @Input()\n   preselectedStorage: StorageIdentifier;\n\n   @Output()\n   storageSelected: EventEmitter<StorageIdentifier> = new EventEmitter<StorageIdentifier>();\n\n   healthKeys: Set<string> = new Set<string>();\n   diskTierKeys: Set<string> = new Set<string>();\n   driveTypeKeys: Set<string> = new Set<string>();\n   claimableStateKeys: Set<string> = new Set<string>();\n   deviceMountStateKeys: Set<string> = new Set<string>();\n   deviceOperationalStateKeys: Set<string> = new Set<string>();\n   driveLocalityKeys: Set<string> = new Set<string>();\n   transportTypeKeys: Set<string> = new Set<string>();\n   physicalLocationKeys: Set<string> = new Set<string>();\n\n   healthComparator: ClrDatagridComparatorInterface<StorageData> = new HealthComparator();\n   deviceMountStateComparator: ClrDatagridComparatorInterface<StorageData> = new DeviceMountStateComparator();\n   deviceOperationalStateComparator: ClrDatagridComparatorInterface<StorageData> = new DeviceOperationalStateComparator();\n   driveTypeComparator: ClrDatagridComparatorInterface<StorageData> = new DriveTypeComparator();\n   claimableStateComparator: ClrDatagridComparatorInterface<StorageData> = new ClaimableStateComparator();\n   diskTierComparator: ClrDatagridComparatorInterface<StorageData> = new DiskTierComparator();\n   driveLocalityComparator: ClrDatagridComparatorInterface<StorageData> = new DriveLocalityComparator();\n   transportTypeComparator: ClrDatagridComparatorInterface<StorageData> = new TransportTypeComparator();\n   physicalLocationComparator: ClrDatagridComparatorInterface<StorageData> = new PhysicalLocationComparator();\n\n   ClaimableState: typeof ClaimableState = ClaimableState;\n   Icon: typeof Icon = Icon;\n   DiskMgmtExportConfig: typeof DiskMgmtExportConfig = DiskMgmtExportConfig;\n   storageItems: StorageData[] = [];\n   selectedStorageData: StorageData;\n   showGrid: boolean = false;\n\n   ascSort: ClrDatagridSortOrder = ClrDatagridSortOrder.ASC;\n\n   exportDataSource: ExportDataSource;\n   readonly DEFAULT_ITEMS_PER_PAGE: number = 10;\n\n   constructor(private refWatcher: ReferenceWatcher) { }\n\n   ngOnInit(): void {\n      this.updatePreselection();\n   }\n\n   /* The width of datagrid columns is not set when datagrid is inside an accordion.\n      See https://github.com/vmware/clarity/issues/3696 This causes:\n         1) Wrong column width when it is predefined.\n         2) When copyToClipboard icon is shown the row flickers because of cells misalignment.\n      The workaround is to display the grid on AfterViewInit.\n    */\n   ngAfterViewInit(): void {\n      this.showGrid = true;\n      this.refWatcher.setTimeout(() => this.exportDataSource = DiskMgmtExportConfig.createExportDataSource(this.datagrid), 0);\n   }\n\n   private updatePreselection(): void {\n      this.selectedStorageData = !this.preselectedStorage ?\n            this.sortDisksByHealth()[0] :\n            this.storageItems.find(storage => StorageIdentifier.areEqual(this.preselectedStorage, storage));\n      /* TODO: (vasilevd):\n       * 1) Check why component is initialized twice.\n       * 2) Default zero item selection is not passed to DiskManagementComponent, so that screen reader message\n       * doesn't include the selected storage. Check StorageGroupsComponent.toggleExpand().\n       */\n      this.selectionChanged(this.selectedStorageData, false);\n   }\n\n   selectionChanged(storageData: StorageData, emitSelection: boolean = true): void {\n      if (storageData && emitSelection) {\n         this.storageSelected.emit(new StorageIdentifier(storageData.uuid, storageData.name));\n      }\n   }\n\n   get claimableState(): ClaimableState {\n      return this.selectedStorageData && this.selectedStorageData.claimableState;\n   }\n\n   getPhysicalLocation = (physicalLocation: string[]): string => {\n      return DiskMgmtDiskUtil.getPhysicalLocation(physicalLocation);\n   };\n\n   getFsVersion = (diskStatus: DiskStatus): string => {\n      return DiskMgmtDiskUtil.getFormatVersion(diskStatus);\n   };\n\n   getDiskHealth = (diskStatus: DiskStatus): string => {\n      return DiskMgmtDiskUtil.getHealth(diskStatus);\n   };\n\n   getDriveType(type: DiskType): string {\n      return DiskMgmtDiskUtil.getDiskType(type);\n   }\n\n   getDiskTier(claimOption: ClaimOption): string {\n      return DiskMgmtDiskUtil.getLocalizedStorage(claimOption);\n   }\n\n   getDiskMountedState(diskStatus: DiskStatus): string {\n      return DiskMgmtDiskUtil.localizeMountedState(diskStatus);\n   }\n\n   getDiskOperationalState(deviceState: DiskData.DeviceState): string {\n      return DiskMgmtDiskUtil.localizeOperationalState(deviceState);\n   }\n\n   getDiskLocality(diskLocality: DiskLocalityType): string {\n      return DiskMgmtDiskUtil.localizeLocality(diskLocality);\n   }\n\n   getClaimableStateLabel(claimableState: ClaimableState): string {\n      return DiskMgmtDiskUtil.localizeClaimableState(claimableState);\n   }\n\n   getTransportTypeLabel(value: DiskData.StorageDeviceTransport): string {\n      return DiskMgmtDiskUtil.getTransportTypeText(value);\n   }\n\n   get isVsanDiskGroup(): boolean {\n      return DiskMgmtDiskGroupUtil.isVsanDiskGroup(this.storageGroup);\n   }\n\n   get isVsanMaxSingleTier(): boolean {\n      return DiskMgmtDiskGroupUtil.isVsanMaxSingleTier(this.storageGroup);\n   }\n\n   get isNotPmemGroup(): boolean {\n      return !DiskMgmtDiskGroupUtil.isPmemDiskGroup(this.storageGroup);\n   }\n\n   get isUnusedDiskGroup(): boolean {\n      return DiskMgmtDiskGroupUtil.isUnusedDiskGroup(this.storageGroup);\n   }\n\n   getPaginationLabel(pagination: ClrDatagridPagination): string {\n      return VsanUiUtils.getDatagridFooterLabel(this.storageItems, pagination, this.DEFAULT_ITEMS_PER_PAGE);\n   }\n\n   // Sort disks by health status in order to display unhealthy disks first\n   sortDisksByHealth(): StorageData[] {\n      return this.storageItems?.sort(DiskMgmtDiskUtil.compareDiskHealth);\n   }\n}\n\nexport class HealthComparator implements ClrDatagridComparatorInterface<StorageData> {\n   compare(o1: StorageData, o2: StorageData): number {\n      return DiskMgmtDiskUtil.compareDiskHealth(o1, o2);\n   }\n}\n\nexport class DeviceMountStateComparator implements ClrDatagridComparatorInterface<StorageData> {\n   compare(o1: StorageData, o2: StorageData): number {\n      return DiskMgmtDiskUtil.localizeMountedState(o1.diskStatus)\n            .localeCompare(DiskMgmtDiskUtil.localizeMountedState(o1.diskStatus));\n   }\n}\n\nexport class DeviceOperationalStateComparator implements ClrDatagridComparatorInterface<StorageData> {\n   compare(o1: StorageData, o2: StorageData): number {\n      return DiskMgmtDiskUtil.localizeOperationalState(o1.deviceState)\n            .localeCompare(DiskMgmtDiskUtil.localizeOperationalState(o2.deviceState));\n   }\n}\n\nexport class DriveTypeComparator implements ClrDatagridComparatorInterface<StorageData> {\n   compare(o1: StorageData, o2: StorageData): number {\n      return DiskMgmtDiskUtil.getDiskType(o1.type)\n            .localeCompare(DiskMgmtDiskUtil.getDiskType(o2.type));\n   }\n}\n\nexport class ClaimableStateComparator implements ClrDatagridComparatorInterface<StorageData> {\n   compare(o1: StorageData, o2: StorageData): number {\n      return DiskMgmtDiskUtil.localizeClaimableState(o1.claimableState)\n            .localeCompare(DiskMgmtDiskUtil.localizeClaimableState(o2.claimableState));\n   }\n}\n\nexport class DiskTierComparator implements ClrDatagridComparatorInterface<StorageData> {\n   compare(o1: StorageData, o2: StorageData): number {\n      return DiskMgmtDiskUtil.getLocalizedStorage(o1.claimOption)\n            .localeCompare(DiskMgmtDiskUtil.getLocalizedStorage(o2.claimOption));\n   }\n}\n\nexport class DriveLocalityComparator implements ClrDatagridComparatorInterface<StorageData> {\n   compare(o1: StorageData, o2: StorageData): number {\n      return DiskMgmtDiskUtil.localizeLocality(o1.driveLocality)\n            .localeCompare(DiskMgmtDiskUtil.localizeLocality(o2.driveLocality));\n   }\n}\n\nexport class TransportTypeComparator implements ClrDatagridComparatorInterface<StorageData> {\n   compare(o1: StorageData, o2: StorageData): number {\n      return DiskMgmtDiskUtil.getTransportTypeText(o1.transportType)\n            .localeCompare(DiskMgmtDiskUtil.getTransportTypeText(o2.transportType));\n   }\n}\n\nexport class PhysicalLocationComparator implements ClrDatagridComparatorInterface<StorageData> {\n   compare(o1: StorageData, o2: StorageData): number {\n      return DiskMgmtDiskUtil.getPhysicalLocation(o1.physicalLocation)\n            .localeCompare(DiskMgmtDiskUtil.getPhysicalLocation(o2.physicalLocation));\n   }\n}\n","/* Copyright 2018-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {AfterViewInit, Component, Input} from \"@angular/core\";\nimport {ChartSectionData} from \"@component/chart/model/chart-section.data\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {HighchartsThemeService} from \"@component/chart/highcharts-theme.service\";\nimport {TooltipOptions} from \"highcharts/highcharts.src\";\nimport {StorageCapacity} from \"@generated/storage-capacity\";\nimport {DiskMgmtUtil} from \"@util/disk-mgmt.util\";\nimport {TooltipValue} from \"@util/tooltip-value\";\nimport {BarChartService} from \"@component/chart/capacity-bar-chart/bar-chart.service\";\nimport {ReferenceWatcher} from \"@util/reference-watcher\";\nimport {CapacityType} from \"@util/capacity-type\";\n\n/**\n * A component that represents capacity as:\n *    - Total label when total is present only (e.g., cache disk, unmounted/unhealthy disk/disk group).\n *    - Chart when used / reserved capacity is present.\n *  The component is used in disk mgmt view on disk, disk group and host level.\n */\n@Component({\n   selector: \"vsan-storage-capacity\",\n   templateUrl: \"storage-capacity.html\",\n   styleUrls: [\"storage-capacity.scss\"],\n   providers: [ReferenceWatcher],\n})\nexport class StorageCapacityComponent implements AfterViewInit {\n\n   @Input()\n   capacity: StorageCapacity;\n\n   sectionsData: ChartSectionData[] = [];\n   // Set width, as otherwise tooltips content can be wrapped (e.g., in host lists).\n   // This behaves like a max-width + auto-resize.\n   tooltipOptions: TooltipOptions = {style: {width: 200}};\n\n   constructor(private highchartsThemeService: HighchartsThemeService,\n         private barChartService: BarChartService,\n         private refWatcher: ReferenceWatcher) {\n      this.refWatcher.watchSubscriptionRef(\n            this.highchartsThemeService.whenThemeChanged.subscribe(theme => this.updateSections()));\n   }\n\n   ngAfterViewInit(): void {\n      // Timeout is required to properly resize the chart\n      this.refWatcher.setTimeout(() => this.updateSections(), 0);\n   }\n\n   showOnlyTotalLabel(): boolean {\n      return this.capacity && !this.capacity.used;\n   }\n\n   getTotalLabel(): string {\n      return VsanUiUtils.formatFileSize(this.capacity.total);\n   }\n\n   private updateSections(): void {\n      if (this.showOnlyTotalLabel()) {\n         return;\n      }\n\n      const capacityColor: Map<CapacityType, string> = this.getCapacityColor();\n      const capacityTooltip: Map<string, TooltipValue> = DiskMgmtUtil.getCapacityTooltip(this.capacity, capacityColor);\n\n      this.sectionsData = [];\n      if (!VsanUiUtils.isUnset(this.capacity.used)) {\n         this.sectionsData.push(new ChartSectionData(\n               VsanUiUtils.getString(\"vsan.manage.diskManagement.capacity.used.label\"),\n               this.capacity.used,\n               \"diskManagementUsed\",\n               true,\n               capacityColor.get(CapacityType.USED),\n               capacityTooltip));\n      }\n   }\n\n   private getCapacityColor(): Map<CapacityType, string> {\n      return new Map<CapacityType, string>([\n               [CapacityType.USED, this.barChartService.getColorPalette()[0]],\n               [CapacityType.FREE, this.highchartsThemeService.getCapacityFreeColor()]]);\n   }\n}\n","/* Copyright 2017-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, OnInit} from \"@angular/core\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {ManagedObject} from \"@service/managed-object\";\nimport {DiskGroupMutationService} from \"@generated/disk-group-mutation-service\";\nimport {VsanDiskMapping} from \"@generated/vsan-disk-mapping\";\nimport {DiskData} from \"@generated/disk-data\";\nimport {DiskGroupData} from \"@generated/disk-group-data\";\nimport {ScsiDisk} from \"@component/diskmgmt/model/scsi-disk.data\";\nimport {LoadingIndicator} from \"@service/flow/loading-indicator.decorator\";\nimport {Loader} from \"@service/flow/loader.decorator\";\nimport {ErrorHandler} from \"@service/flow/error-handler.decorator\";\nimport {SrMessageType} from \"@service/screen-reader-announcer.service\";\nimport {DiskMgmtDiskGroupUtil} from \"@util/disk-mgmt-disk-group.util\";\n\n@Component({\n   templateUrl: \"add-disk.html\",\n   styleUrls: [\"../actions-common.scss\"],\n   selector: \"vsan-diskmgmt-add-disk\",\n})\nexport class AddDiskComponent implements OnInit {\n\n   @LoadingIndicator()\n   busy: boolean;\n\n   disksLoading: boolean = true;\n\n   clusterRef: ManagedObject;\n   diskGroup: DiskGroupData;\n   selectedDisks: DiskData[] = [];\n   alerts: string[];\n   isVsanMaxEnabled: boolean;\n   isAllFlashDiskGroup: boolean;\n\n   constructor(private diskGroupMutationService: DiskGroupMutationService) {\n   }\n\n   @Loader({srMessage: \"vsan.dialog.addDisksToDiskGroup.title\", srMessageType: SrMessageType.PAGE_TITLE})\n   ngOnInit(): void {\n      this.clusterRef = ManagedObject.contextObject;\n      this.diskGroup = VsanUiUtils.getModalContext();\n      this.isVsanMaxEnabled = DiskMgmtDiskGroupUtil.isVsanMaxSingleTier(this.diskGroup);\n      this.isAllFlashDiskGroup = DiskMgmtDiskGroupUtil.isAllFlashDiskGroup(this.diskGroup);\n   }\n\n   @ErrorHandler()\n   private handleError(error: string): void {\n      this.alerts = [error];\n   }\n\n   onLoadingComplete(): void {\n      this.disksLoading = false;\n   }\n\n   // invoked when the primary button is clicked\n   @Loader()\n   async onOkClicked(): Promise<void> {\n      if (this.selectedDisks.length === 0) {\n         this.alerts = [this.isVsanMaxEnabled\n               ? VsanUiUtils.getString(\"vsan.dialog.addDisksToStoragePool.error.selectDisks\")\n               : VsanUiUtils.getString(\"vsan.dialog.addDisksToDiskGroup.error.selectDisks\")];\n         return;\n      }\n\n      const taskRef: ManagedObject = this.isVsanMaxEnabled\n            ? await this.addDisksForVsanMax()\n            : await this.addDisksToDiskGroup();\n      VsanUiUtils.closeModalDialog(taskRef);\n   }\n\n   private addDisksForVsanMax(): Promise<ManagedObject> {\n      const diskNames: string[] = this.selectedDisks.map(selectedDisk => selectedDisk.disk.canonicalName);\n      return this.diskGroupMutationService.addDisksToStoragePool(this.diskGroup.ownerHostRef, diskNames);\n   }\n\n   private addDisksToDiskGroup(): Promise<ManagedObject> {\n      const disks: ScsiDisk[] = this.selectedDisks.map(selectedDisk => selectedDisk.disk);\n\n      // find the SSD disk of the group we are adding to\n      const ssd: DiskData = this.diskGroup.disks.find(d => d.isMappedAsCache);\n      const diskMapping: VsanDiskMapping = VsanDiskMapping.Factory.create(ssd.disk, disks);\n\n      return this.diskGroupMutationService.addDiskToDiskGroup(\n            this.clusterRef,\n            this.diskGroup.ownerHostRef,\n            diskMapping);\n   }\n\n   getDialogTitle(): string {\n      return this.isVsanMaxEnabled\n            ? VsanUiUtils.getString(\"vsan.dialog.addDisksToStoragePool.title\")\n            : VsanUiUtils.getString(\"vsan.dialog.addDisksToDiskGroup.title\");\n   }\n}\n","/* Copyright 2020 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Subject} from \"rxjs\";\nimport {BreadcrumbRouteModel} from \"./breadcrumb-route.model\";\n\nexport class VsanBreadcrumbService {\n   /**\n    * Keeps the routes keys of all components having @BreadcrumbNavigation annotated field in the correct order.\n    * Example:\n    * Parent component view routes:\n    *     parentViewRoutes = {\n    *        parentRoot: ...,\n    *        parentLevelA: ...,\n    *        parentLevelB: ...,\n    *     }\n    * Child component view routes:\n    *     childViewRoutes = {\n    *        childRoot: ...,\n    *        childLevelA: ...,\n    *        childLevelB: ...,\n    *     }\n    * Then the routeOrders will be [parentRoot, parentLevelA, parentLevelB, childRoot, childLevelA, childLevelB]\n    * This information is needed in order to be known navigated routes order even in multiple components navigation.\n    */\n   private static routeOrders: string[] = [];\n\n   static addRouteOrders(keys: string[]) {\n      VsanBreadcrumbService.routeOrders.push(...keys);\n   }\n\n   static getRouteOrders(): string[] {\n      return VsanBreadcrumbService.routeOrders;\n   }\n\n   /**\n    * Triggers event when breadcrumb navigation is enabled.\n    */\n   static enable: Subject<boolean> = new Subject();\n\n   /**\n    * Triggered when navigation from a component occurs.\n    */\n   static route: Subject<BreadcrumbRouteModel> = new Subject();\n\n   /**\n    * Triggered when route link is clicked in the breadcrumb nav.\n    */\n   static onRouteClick: Subject<BreadcrumbRouteModel> = new Subject();\n\n   static show(value: boolean) {\n      VsanBreadcrumbService.enable.next(value);\n   }\n}\n\n/** Example usage\n *  1. Define routing object and annotate it with @BreadcrumbNavigation.\n *     @BreadcrumbNavigation\n *     routes: any;\n *  2. Initialize the routing object in the ngOnInit hook.\n *     ngOnInit {\n *        this.routes = {\n *          root: BreadcrumbRouteModel.link(onRouteTriggeredCallbackName, \"some link value\"),\n *          levelA: BreadcrumbRouteModel.link(onRouteTriggeredCallbackName1, \"some link value\"),\n *          levelB: BreadcrumbRouteModel.link(onRouteTriggeredCallbackName2, \"some link value\"),\n *        };\n *     }\n *  3. Define the callback methods (onRouteTriggeredCallbackName).\n *     They will be called when the corresponding route link is clicked.\n *  4. Navigate to route from the component\n *     this.routes.levelA.navigate()\n *  NOTE: fields annotated with @BreadcrumbNavigation must be initialized in angular hooked callback like the ngOnInit.\n */\nexport function BreadcrumbNavigation(): any {\n   return (target: any, propertyKey: string) => {\n      let _routes: any = null;\n      Object.defineProperty(target, propertyKey, {\n         get: () => {\n            return _routes;\n         },\n         set: function (routes: any) {\n            // Gets reference to the angular component\n            const componentContext = this;\n            _routes = routes;\n            const keys = Object.keys(routes);\n            keys.forEach((key => {\n               (routes[key] as BreadcrumbRouteModel).key = key;\n            }));\n            // Pass the newly initialized component routes keys\n            VsanBreadcrumbService.addRouteOrders(keys);\n            VsanBreadcrumbService.onRouteClick.subscribe(route => {\n               if (!_routes[route.key]) {\n                  return;\n               }\n               _routes[route.key] = route;\n               // Call the angular component callback by given route\n               if (componentContext[_routes[route.key].onTrigger]) {\n                  componentContext[_routes[route.key].onTrigger]();\n               }\n            });\n         },\n      });\n   };\n}\n","<!--Copyright 2020-2022 VMware, Inc. All rights reserved. -- VMware Confidential-->\n<h5 vsan-auto-focus>\n   {{\"manage.vsan.diskManagement\" | localized}}\n</h5>\n<vsan-validation id=\"validation-message\"\n                 *ngIf=\"alertMessages.length\"\n                 [(alerts)]=\"alertMessages\"\n                 [allowReload]=\"true\"\n                 (onReload)=\"fetch()\"\n                 (onClosed)=\"clearErrors()\">\n</vsan-validation>\n\n<!-- busy indicator -->\n<span class=\"busy-backdrop\" *ngIf=\"loading\">\n   <span class=\"spinner central-spinner\"></span>\n</span>\n\n<vsan-unavailable-view *ngIf=\"!loading && noHostsView\"\n                       [unavailableViewSpec]=\"noHostsView\"\n                       [hasEditPrivilege]=\"hasEditPermission\"\n                       [clusterRef]=\"clusterRef\">\n</vsan-unavailable-view>\n\n<vsan-upgrade *ngIf=\"!loading && !noHostsView && upgradeData\"\n              [upgradeData]=\"upgradeData\"\n              [hasUpgradePermission]=\"hasEditPermission\"\n              [visibleWhenUpToDate]=\"isVsanUpgradeVisible\"\n              (upgradeComplete)=\"vsanUpgradeComplete()\"\n              (precheckComplete)=\"fetchPrecheckUpgradeData()\">\n</vsan-upgrade>\n\n<!--Breadcrumb must not be hidden once it's shown-->\n<vsan-breadcrumb-nav *ngIf=\"!noHostsView && isBreadcrumbNavigationEnabled\"></vsan-breadcrumb-nav>\n<ng-container *ngIf=\"!loading && !noHostsView\">\n   <ng-container *ngIf=\"!isVirtualObjectsView\">\n      <vsan-disk-mgmt-summary [hostList]=\"hostList\"\n                              [hostIndex]=\"hostIndex\"\n                              [vsanConfig]=\"vsanConfig\"\n                              [clusterName]=\"clusterName\"\n                              [autoClaimMode]=\"vsanConfig.autoClaimDisks\"\n                              [hasEditPermission]=\"hasEditPermission\"\n                              [hasDuplicatePciIdDevices]=\"hasDuplicatePciIdDevices\"\n                              [clusterCapabilities]=\"clusterCapabilities\"\n                              [hasHostMaintenancePermission]=\"hasHostMaintenancePermission\">\n      </vsan-disk-mgmt-summary>\n      <vsan-host-list *ngIf=\"!isHostDetailsLevel()\"\n                      [hostList]=\"hostList\"\n                      [autoClaimMode]=\"vsanConfig.autoClaimDisks\"\n                      [hasEditPermission]=\"hasEditPermission\"\n                      [clusterCapabilities]=\"clusterCapabilities\"\n                      [hasHostMaintenancePermission]=\"hasHostMaintenancePermission\"\n                      [selectedHost]=\"preselectedHost\"\n                      (hostSelected)=\"selectHost($event)\">\n      </vsan-host-list>\n      <vsan-storage-groups *ngIf=\"isHostDetailsLevel()\"\n                           [host]=\"preselectedHost\"\n                           [autoClaimMode]=\"vsanConfig.autoClaimDisks\"\n                           [spaceEfficiencyConfig]=\"vsanConfig.spaceEfficiencyConfig\"\n                           [hasEditPermission]=\"hasEditPermission\"\n                           [clusterCapabilities]=\"clusterCapabilities\"\n                           [hasHostMaintenancePermission]=\"hasHostMaintenancePermission\"\n                           [preselectedGroupIdentifier]=\"preselectedGroupIdentifier\"\n                           (groupSelected)=\"selectGroup($event)\"\n                           [preselectedStorage]=\"preselectedStorageIdentifier\"\n                           (storageSelected)=\"selectStorage($event)\">\n      </vsan-storage-groups>\n   </ng-container>\n   <ng-container *ngIf=\"isVirtualObjectsView\">\n      <div class=\"virtual-objects-actions\">\n         <button id=\"exit-virtual-objects-btn\"\n                 name=\"exit-virtual-objects-btn\"\n                 class=\"btn btn-sm btn-primary no-margin\"\n                 (click)=\"exitVirtualObjects()\">\n            <clr-icon shape=\"arrow\"></clr-icon>\n            {{getExitVirtualObjectsLabel()}}\n         </button>\n      </div>\n      <vsan-virtual-objects-filterable-table\n            id=\"virtual-objects-table\"\n            *ngIf=\"clusterCapabilities?.isObjectIdentitiesSupported\"\n            [loading]=\"!virtualObjects\"\n            [virtualObjects]=\"virtualObjects\">\n      </vsan-virtual-objects-filterable-table>\n   </ng-container>\n</ng-container>\n","/* Copyright 2019-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component} from \"@angular/core\";\nimport {ScsiDisk} from \"@component/diskmgmt/model/scsi-disk.data\";\nimport {DecommissionModeSummary} from \"@component/precheck/pre-check-evacuation-summary.component\";\nimport {DecommissionMode} from \"@generated/decommission-mode\";\nimport {DiskData} from \"@generated/disk-data\";\nimport {DiskGroupMutationService} from \"@generated/disk-group-mutation-service\";\nimport {RemoveDiskGroupSpec} from \"@generated/remove-disk-group-spec\";\nimport {RemoveDiskSpec} from \"@generated/remove-disk-spec\";\nimport {VsanDiskMapping} from \"@generated/vsan-disk-mapping\";\nimport {VsanPropertyProvider} from \"@generated/vsan-property-provider\";\nimport {VsanQueryDataEvacuationInfoSpec} from \"@generated/vsan-query-data-evacuation-info-spec\";\nimport {DiskGroupActionData} from \"@model/disk-group-action.data\";\nimport {HostActionData} from \"@model/host-action.data\";\nimport {DeleteDisksContext} from \"@navigation/context/delete-disks-context\";\nimport {EvacuationContext} from \"@navigation/context/evacuation.context\";\nimport {NavigationService, PlatformExtension} from \"@navigation/navigation.service\";\nimport {HostSystem} from \"@service/client/dataservice/data-service-property\";\nimport {DataServiceClient} from \"@service/client/dataservice/data-service.service\";\nimport {ErrorHandler} from \"@service/flow/error-handler.decorator\";\nimport {LoaderName} from \"@service/flow/loader-name\";\nimport {Loader} from \"@service/flow/loader.decorator\";\nimport {LoadingIndicator} from \"@service/flow/loading-indicator.decorator\";\nimport {ManagedObject} from \"@service/managed-object\";\nimport {SrMessageType} from \"@service/screen-reader-announcer.service\";\nimport {DiskMgmtDiskUtil} from \"@util/disk-mgmt-disk.util\";\nimport {Logger} from \"@util/logger\";\nimport {VsanDataMigrationUtil} from \"@util/vsan-data-migration-util\";\nimport {VsanDiskMgmtActionsUtil} from \"@util/vsan-disk-mgmt-actions-util\";\nimport {VsanDiskUtil} from \"@util/vsan-disk-util\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\n\n@Component({\n   templateUrl: \"delete-disks.html\",\n   styleUrls: [\"../actions-common.scss\"],\n   selector: \"vsan-diskmgmt-delete-disks\",\n})\nexport class DeleteDisksComponent {\n   subtitle: string;\n   warningMessages: string[] = [];\n   footerText: string;\n   dataOnDiskLabel: string = VsanUiUtils.getString(\"vsan.dialog.deleteDiskGroup.evacuateDataLabel\");\n   shouldAllowDataMigration: boolean;\n   selectedDecommissionMode: DecommissionMode = DecommissionMode.ensureObjectAccessibility;\n\n   @LoadingIndicator({\n      name: [LoaderName.ON_INIT, LoaderName.DATA_EVACUATION, LoaderName.ON_CONFIRM],\n   })\n   busy: boolean;\n\n   alerts: string[];\n   isValidDecommisionMode: boolean = true;\n   goToPrecheckButtonText: string;\n   host: HostActionData;\n   disks: DiskData[];\n   preselectedDecommissionMode: DecommissionMode;\n   localizedPreselectedDecommissionMode: string;\n   isVsanMaxEnabled: boolean;\n\n   private diskGroups: DiskGroupActionData[];\n   isDiskResourcePrecheckSupported: boolean = true;\n   private isAbsentDisk: boolean = false;\n\n   constructor(private vsanPropertyProvider: VsanPropertyProvider,\n         private diskGroupMutationService: DiskGroupMutationService,\n         private navigationService: NavigationService,\n         private dataService: DataServiceClient) {\n   }\n\n   @Loader({\n      name: LoaderName.ON_INIT,\n      srMessage: \"vsan.dialog.deleteDiskFromDiskGroup.title\",\n      srMessageType: SrMessageType.PAGE_TITLE,\n   })\n   async ngOnInit(): Promise<void> {\n      const context: DeleteDisksContext = VsanUiUtils.getModalContext();\n      this.host = context.host;\n      this.disks = context.disks;\n      this.diskGroups = context.diskGroups;\n      this.isVsanMaxEnabled = context.isVsanMaxEnabled;\n      this.isAbsentDisk = VsanDiskUtil.isAbsentDisk(this.disks[0].diskStatus);\n      if (this.isAbsentDisk) {\n         // We can only remove the absent disk with noAction mode.\n         this.preselectedDecommissionMode = DecommissionMode.noAction;\n      } else {\n         this.preselectedDecommissionMode = context.decommissionMode;\n      }\n      this.localizedPreselectedDecommissionMode =\n            VsanDataMigrationUtil.getLocalizedDecommissionMode(this.preselectedDecommissionMode);\n\n      this.host.isInMaintenanceMode = await this.dataService\n            .getProperty(HostSystem.runtime.inMaintenanceMode, this.host.hostRef);\n      this.initUI();\n   }\n\n   @ErrorHandler({name: LoaderName.ON_INIT})\n   private handleInitError(): void {\n      this.alerts = [VsanUiUtils.getString(\"vsan.common.error.dataExtraction\")];\n   }\n\n   private initUI(): void {\n      this.shouldAllowDataMigration = this.shouldAllowDisksDataMigration();\n      if (!this.shouldAllowDataMigration) {\n         this.selectedDecommissionMode = DecommissionMode.noAction;\n         VsanUiUtils.setModalDialogHeight(VsanDiskMgmtActionsUtil.DELETE_DISKS_HEIGHT_SMALL);\n      }\n\n      this.warningMessages.push(this.getHeaderMessage());\n      const dataMigrationWarning: string = this.getDataMigrationWarning(this.disks, this.host.isInMaintenanceMode);\n      if (dataMigrationWarning) {\n         this.warningMessages.push(dataMigrationWarning);\n      }\n\n      this.showForDisks();\n   }\n\n   private shouldAllowDisksDataMigration = (): boolean => {\n      const isHostEligible: boolean = this.host.isWhatIfSupported // feature is supported\n            && !this.host.isWitnessHost // not on a withness host\n            && !this.host.isInMaintenanceMode; // Not on a host in MM\n\n      return this.isVsanMaxEnabled\n            ? this.isDataMigrationAllowedForVsanMax(isHostEligible)\n            : this.isDataMigrationAllowedForVsan(isHostEligible);\n   };\n\n   private isDataMigrationAllowedForVsanMax(isHostEligible: boolean): boolean {\n      return isHostEligible && this.disks.every(disk => VsanDiskUtil.isVsanDiskMounted(disk));\n   }\n\n   private isDataMigrationAllowedForVsan(isHostEligible: boolean): boolean {\n      return isHostEligible\n            && this.diskGroups.some(group => group.isMounted) // the selected disks/group are mounted\n            && this.diskGroups.length === 1 && this.disks.length <= 1 // only for single/no disk\n            && this.diskGroups.some(group => !group.isLocked); // Not all groups are locked\n   }\n\n   private getHeaderMessage = (): string => {\n      const groupUuids: string = this.diskGroups.map(group => group.vsanUuid).join(\", \");\n      const dataMigrationMessage: string = this.getDataMigrationMessage(this.disks, groupUuids);\n      const removeAllCapacityDisksMessage: string = this.isRemovingAllCapacityDisks(this.diskGroups, this.disks) ?\n            VsanUiUtils.getString(\"vsan.confirmAllDataDisksRemove.text\") : \"\";\n\n      if (this.host.isInMaintenanceMode) {\n         return dataMigrationMessage;\n      } else if (this.host.isWitnessHost) {\n         return VsanUiUtils.getString(\"vsan.confirmDiskRemoveOperation.externalWitnessHostWarning\",\n               dataMigrationMessage, removeAllCapacityDisksMessage);\n      } else if (this.isAbsentDisk) {\n         return VsanUiUtils.getString(\"vsan.confirmDiskRemoveOperation.absentDisk\",\n               dataMigrationMessage, removeAllCapacityDisksMessage);\n      } else {\n         return VsanUiUtils.getString(\"vsan.confirmDiskRemoveOperation.headerDataEvacuation\",\n               dataMigrationMessage, removeAllCapacityDisksMessage);\n      }\n   };\n\n   private getDataMigrationMessage = (disks: DiskData[], groupUuids: string): string => {\n      if (!VsanUiUtils.isEmpty(groupUuids)) {\n         return disks.length === 1 ?\n               VsanUiUtils.getString(\"vsan.confirmSingleDiskRemove.dataEvacuation.text\", disks[0].name, groupUuids) :\n               VsanUiUtils.getString(\"vsan.confirmMultipleDisksRemove.dataEvacuation.text\", groupUuids);\n      } else {\n         return disks.length === 1 ?\n               VsanUiUtils.getString(\"vsan.confirmSingleDiskRemove.dataEvacuation.noGroups.text\", disks[0].name) :\n               VsanUiUtils.getString(\"vsan.confirmMultipleDisksRemove.dataEvacuation.noGroups.text\");\n      }\n   };\n\n   private isRemovingAllCapacityDisks = (groups: DiskGroupActionData[], disks: DiskData[]): boolean => {\n      const allCapacityDisks: ScsiDisk[] = [];\n      groups.forEach(group => allCapacityDisks.push(...group.diskMapping.nonSsd));\n      return disks.length === allCapacityDisks.length;\n   };\n\n   private getDataMigrationWarning = (disks: DiskData[], isInMaintenanceMode: boolean): string => {\n      if (isInMaintenanceMode) {\n         return this.isVsanMaxEnabled\n               ? VsanUiUtils.getString(\"vsan.dialog.deleteDisk.hostInMaintenance.warning\")\n               : VsanUiUtils.getString(\"vsan.dialog.deleteDiskFromDiskGroup.hostInMaintenance.warning\");\n      } else {\n         if (disks[0].deviceState === DiskData.DeviceState.OFF) {\n            return VsanUiUtils.getString(\"vsan.dialog.deleteDiskFromDiskGroup.unmountedDisk.warning\");\n         }\n      }\n   };\n\n   private showForDisks = () => {\n      this.footerText = this.disks.length === 1 ?\n            VsanUiUtils.getString(\"vsan.confirmDiskRemoveOperation.footerRemoveDisk\") :\n            VsanUiUtils.getString(\"vsan.confirmDiskRemoveOperation.footerRemoveDisks\");\n\n      switch (this.diskGroups.length) {\n         case 0:\n            this.subtitle = \"\";\n            break;\n         case 1:\n            this.subtitle = this.diskGroups[0].vsanUuid;\n            break;\n         default:\n            this.subtitle = VsanUiUtils.getString(\"vsan.dialog.deleteDiskFromDiskGroups.count\",\n                  this.diskGroups.length);\n      }\n      this.requestDataEvacuationProperty(this.disks.map(data => data.disk));\n   };\n\n   @Loader({name: LoaderName.DATA_EVACUATION})\n   private async requestDataEvacuationProperty(disks: ScsiDisk[]): Promise<void> {\n      if (!disks.every(DiskMgmtDiskUtil.isScsiDiskHealthy)) {\n         this.dataOnDiskLabel = VsanUiUtils.getString(\"vsan.dialog.deleteDiskGroup.evacuateDataLabel.error\");\n         return;\n      }\n\n      const spec: VsanQueryDataEvacuationInfoSpec = VsanQueryDataEvacuationInfoSpec.Factory.create(disks);\n      const result: number = await this.vsanPropertyProvider.getVsanDataEvacuationInfo(this.host.hostRef, spec);\n      this.onDataEvacuationPropertyRetrieved(result);\n   }\n\n   private onDataEvacuationPropertyRetrieved = (result: number) => {\n      if (result >= 0) {\n         const formattedSize: string = VsanUiUtils.formatFileSize(result);\n         this.dataOnDiskLabel = VsanUiUtils.getString(\"vsan.dialog.deleteDiskGroup.evacuateDataLabelWithSize\",\n               formattedSize);\n      }\n   };\n\n   @ErrorHandler({name: LoaderName.DATA_EVACUATION})\n   private onDataRetrievalError(message: any): void {\n      this.alerts = [VsanUiUtils.getString(\"vsan.common.error.dataExtraction\")];\n      this.dataOnDiskLabel = VsanUiUtils.getString(\"vsan.dialog.deleteDiskGroup.evacuateDataLabel.error\");\n      Logger.error(\"Failed to retrieve vsanDataEvacuationInfo: \" + message);\n   }\n\n   onDecommissionModeSummaryChanged = (summary: DecommissionModeSummary) => {\n      this.selectedDecommissionMode = summary.value;\n      this.isValidDecommisionMode = summary.isValidDecommissionMode;\n      // change the dialog height based on the content\n      if (VsanDiskMgmtActionsUtil.isPrecheckWithObjects(summary) && !this.isDiskResourcePrecheckSupported) {\n         VsanUiUtils.setModalDialogHeight(VsanDiskMgmtActionsUtil.DELETE_DISKS_HEIGHT_LARGE);\n      } else if (this.isDiskResourcePrecheckSupported) {\n         VsanUiUtils.setModalDialogHeight(VsanDiskMgmtActionsUtil.DELETE_DISKS_HEIGHT_PRECHECK);\n      } else {\n         VsanUiUtils.setModalDialogHeight(VsanDiskMgmtActionsUtil.DELETE_DISKS_HEIGHT_MEDIUM);\n      }\n   };\n\n   onDiskResourcePrecheckSupportedChanged = (isSupported: boolean) => {\n      this.isDiskResourcePrecheckSupported = isSupported;\n      // Preselecting decommmission mode means that this dialog is opened from Data migration pre-check page,\n      // in which case GO TO PRE-CHECK button doesn't need to be display.\n      this.goToPrecheckButtonText = !this.preselectedDecommissionMode && this.isDiskResourcePrecheckSupported ?\n            VsanUiUtils.getString(\"vsan.actions.goToPrecheckDataMigration.label\") : \"\";\n   };\n\n   @Loader({name: LoaderName.ON_CONFIRM})\n   async onOkClicked(): Promise<void> {\n      const decommissionMode: DecommissionMode = this.preselectedDecommissionMode ?\n            this.preselectedDecommissionMode :\n            VsanDiskMgmtActionsUtil.getSelectedDecommissionMode(\n                  this.shouldAllowDataMigration, this.selectedDecommissionMode);\n      let tasks: ManagedObject[] = [];\n      if (this.isVsanMaxEnabled) {\n         tasks.push(await this.deleteVsanMaxDisks(decommissionMode));\n      } else {\n         tasks.push(...await this.deleteVsanDisks(decommissionMode));\n      }\n\n      this.handleTaskList(tasks);\n   }\n\n   private deleteVsanDisks(decommissionMode: DecommissionMode): Promise<ManagedObject[]> {\n      const disksToDelete: ScsiDisk[] = [];\n      // Get disk group vsanUuid and its disks to be deleted.\n      const diskGroupsToDelete: { [diskGroupVsanUuid: string]: VsanDiskMapping; } = {};\n\n      this.disks.forEach((disk: DiskData) => {\n         const group: DiskGroupActionData = this.diskGroups.find(diskGroup => diskGroup.vsanUuid === disk.diskGroup);\n         const diskMapping: VsanDiskMapping = group.diskMapping;\n\n         if (diskMapping.nonSsd.length === 1) {\n            // We need to remove the whole disk group if the current disk is the last one capacity disk.\n            diskGroupsToDelete[disk.diskGroup] = diskMapping;\n         } else {\n            // The disk is not the last capacity disk in the group, remove it separately.\n            disksToDelete.push(disk.disk);\n         }\n      });\n\n      const diskGroupSpec: RemoveDiskGroupSpec = RemoveDiskGroupSpec.Factory.create(\n            decommissionMode,\n            Object.keys(diskGroupsToDelete).map(key => diskGroupsToDelete[key]));\n      const diskSpec: RemoveDiskSpec = RemoveDiskSpec.Factory.create(decommissionMode, disksToDelete);\n\n      return this.diskGroupMutationService.removeDisksAndMappings(\n            ManagedObject.contextObject, this.host.hostRef, diskGroupSpec, diskSpec);\n   }\n\n   private deleteVsanMaxDisks(decommissionMode: DecommissionMode): Promise<ManagedObject> {\n      const vSanMaxDisksToDelete: string[] = this.disks.map(disk => disk.vsanUuid);\n\n      return this.diskGroupMutationService.removeVsanMaxDisks(\n            ManagedObject.contextObject, decommissionMode, vSanMaxDisksToDelete);\n   }\n\n   onGoToPrecheckClicked = () => {\n      const evacuationContext: EvacuationContext = VsanDiskMgmtActionsUtil.getEvacuationContext(\n            this.host.hostRef, this.disks[0].vsanUuid, this.selectedDecommissionMode);\n      this.navigationService.navigateToAndCloseModal(PlatformExtension.CLUSTER_DATA_MIGRATION_PRE_CHECK,\n            ManagedObject.contextObjectUid, evacuationContext);\n   };\n\n   private handleTaskList = (tasks: ManagedObject[]) => {\n      VsanUiUtils.closeModalDialog(tasks);\n   };\n\n   @ErrorHandler({name: LoaderName.ON_CONFIRM})\n   private onDeleteOperationError(message: any): void {\n      this.alerts = [message];\n   }\n\n   get isDeleteButtonBlocked(): boolean {\n      return this.busy || !this.isValidDecommisionMode;\n   }\n}\n","<!--Copyright 2020-2021 VMware, Inc. All rights reserved. -- VMware Confidential-->\n<ng-container *ngIf=\"selectedHost\">\n   <button id=\"{{DiskManagementActionAvailabilityService.VIEW_HOST_STORAGE_AND_GROUPS_ID}}\"\n           class=\"btn btn-sm btn-link no-spacing\"\n           *ngIf=\"isHostListView\"\n           [disabled]=\"actionDisabled(DiskManagementActionAvailabilityService.VIEW_HOST_STORAGE_AND_GROUPS_ID)\"\n           (click)=\"viewHostDetails()\"\n           [attr.title]=\"getActionButtonTitle(DiskManagementActionAvailabilityService.VIEW_HOST_STORAGE_AND_GROUPS_ID)\">\n      {{\"vsan.actions.viewDisksAndGroups.label\" | localized}}\n   </button>\n   <button id=\"{{DiskManagementActionAvailabilityService.VIEW_HOST_OBJECTS_ID}}\"\n           class=\"btn btn-sm btn-link no-spacing\"\n           *ngIf=\"clusterCapabilities?.isObjectIdentitiesSupported\"\n           [disabled]=\"actionDisabled(DiskManagementActionAvailabilityService.VIEW_HOST_OBJECTS_ID)\"\n           (click)=\"viewHostObjects()\"\n           [attr.title]=\"getActionButtonTitle(DiskManagementActionAvailabilityService.VIEW_HOST_OBJECTS_ID)\">\n      {{\"vsan.actions.viewHostObjects.label\" | localized}}\n   </button>\n   <button id=\"{{DiskManagementActionAvailabilityService.CREATE_DISK_GROUP_ID}}\"\n           class=\"btn btn-sm btn-link no-spacing\"\n           *ngIf=\"hasCreateDiskGroupAction\"\n           [disabled]=\"actionDisabled(DiskManagementActionAvailabilityService.CREATE_DISK_GROUP_ID)\"\n           (click)=\"invokeCreateDiskGroup()\"\n           [attr.title]=\"getActionButtonTitle(DiskManagementActionAvailabilityService.CREATE_DISK_GROUP_ID)\">\n      {{\"vsan.actions.createDiskGroup.label\" | localized}}\n   </button>\n   <button id=\"{{DiskManagementActionAvailabilityService.PRE_CHECK_ID}}\"\n           class=\"btn btn-sm btn-link no-spacing\"\n           [disabled]=\"actionDisabled(DiskManagementActionAvailabilityService.PRE_CHECK_ID)\"\n           (click)=\"invokePrecheckEvacuation()\"\n           [attr.title]=\"getActionButtonTitle(DiskManagementActionAvailabilityService.PRE_CHECK_ID)\">\n      {{getPrecheckLabel()}}\n   </button>\n</ng-container>","/* Copyright 2019-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, OnInit} from \"@angular/core\";\nimport {ScsiDisk} from \"@component/diskmgmt/model/scsi-disk.data\";\nimport {DecommissionModeSummary} from \"@component/precheck/pre-check-evacuation-summary.component\";\nimport {DecommissionMode} from \"@generated/decommission-mode\";\nimport {DiskGroupMutationService} from \"@generated/disk-group-mutation-service\";\nimport {UnmountDiskGroupSpec} from \"@generated/unmount-disk-group-spec\";\nimport {VsanCapabilityProvider} from \"@generated/vsan-capability-provider\";\nimport {VsanPropertyProvider} from \"@generated/vsan-property-provider\";\nimport {VsanQueryDataEvacuationInfoSpec} from \"@generated/vsan-query-data-evacuation-info-spec\";\nimport {DiskGroupActionData} from \"@model/disk-group-action.data\";\nimport {HostActionData} from \"@model/host-action.data\";\nimport {DiskGroupActionContext} from \"@navigation/context/disk-group-action-context\";\nimport {EvacuationContext} from \"@navigation/context/evacuation.context\";\nimport {NavigationService, PlatformExtension} from \"@navigation/navigation.service\";\nimport {HostSystem} from \"@service/client/dataservice/data-service-property\";\nimport {DataServiceClient} from \"@service/client/dataservice/data-service.service\";\nimport {ErrorHandler} from \"@service/flow/error-handler.decorator\";\nimport {LoaderName} from \"@service/flow/loader-name\";\nimport {Loader} from \"@service/flow/loader.decorator\";\nimport {LoadingIndicator} from \"@service/flow/loading-indicator.decorator\";\nimport {ManagedObject} from \"@service/managed-object\";\nimport {SrMessageType} from \"@service/screen-reader-announcer.service\";\nimport {DiskMgmtDiskUtil} from \"@util/disk-mgmt-disk.util\";\nimport {Logger} from \"@util/logger\";\nimport {VsanDataMigrationUtil} from \"@util/vsan-data-migration-util\";\nimport {VsanDiskMgmtActionsUtil} from \"@util/vsan-disk-mgmt-actions-util\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\n\n/**\n * This component is used to unmount disk group.\n */\n@Component({\n   templateUrl: \"unmount-disk-group.html\",\n   selector: \"vsan-unmount-disk-group\",\n   styleUrls: [\"../actions-common.scss\"],\n})\nexport class UnmountDiskGroupComponent implements OnInit {\n   @LoadingIndicator({\n      name: [\n         LoaderName.ON_INIT, LoaderName.DATA_EVACUATION, LoaderName.ON_CONFIRM],\n   })\n   loading: boolean;\n\n   alerts: string[] = [];\n   warningMessages: string[] = [];\n   host: HostActionData;\n   diskGroup: DiskGroupActionData;\n\n   dataOnDiskGroupLabel: string = VsanUiUtils.getString(\"vsan.dialog.deleteDiskGroup.evacuateDataLabel\");\n   evacuationEntityUuid: string;\n   shouldAllowDataMigration: boolean;\n   isValidDecommisionMode: boolean = true;\n   selectedDecommissionMode: DecommissionMode = DecommissionMode.ensureObjectAccessibility;\n   goToPrecheckButtonText: string;\n   isDiskResourcePrecheckSupported: boolean = true;\n   preselectedDecommissionMode: DecommissionMode;\n   localizedPreselectedDecommissionMode: string;\n   preCheckRecommendationMessage: string = VsanUiUtils.getString(\n         \"vsan.dialog.precheckEvacuation.recommendationMesaage.diskGroup.unmount\");\n\n   constructor(private diskGroupMutationService: DiskGroupMutationService,\n         private vsanPropertyProvider: VsanPropertyProvider,\n         private capabilityProvider: VsanCapabilityProvider,\n         private navigationService: NavigationService,\n         private dataService: DataServiceClient) {\n   }\n\n   @Loader({\n      name: LoaderName.ON_INIT,\n      srMessage: \"vsan.actions.unmountDiskGroup.dialogTitle\",\n      srMessageType: SrMessageType.PAGE_TITLE,\n   })\n   async ngOnInit(): Promise<void> {\n      const context: DiskGroupActionContext = VsanUiUtils.getModalContext();\n      this.host = context.host;\n      this.diskGroup = context.diskGroup;\n      this.preselectedDecommissionMode = context.decommissionMode;\n      this.localizedPreselectedDecommissionMode =\n            VsanDataMigrationUtil.getLocalizedDecommissionMode(this.preselectedDecommissionMode);\n\n      this.host.isInMaintenanceMode = await this.dataService\n            .getProperty(HostSystem.runtime.inMaintenanceMode, this.host.hostRef);\n      this.initUI();\n   }\n\n   @ErrorHandler({name: LoaderName.ON_INIT})\n   private handleInitError(): void {\n      this.alerts = [VsanUiUtils.getString(\"vsan.common.error.dataExtraction\")];\n   }\n\n   private async initUI(): Promise<void> {\n      if (this.preselectedDecommissionMode) {\n         // TODO: Display DecommissionMode as a label instead of a select dropdown.\n      }\n\n      this.evacuationEntityUuid = this.diskGroup.vsanUuid;\n      this.requestDataEvacuationProperty(this.diskGroup.diskMapping.ssd);\n\n      try {\n         const isApiSupported: boolean =\n               await this.capabilityProvider.getIsUnmountWithMaintenanceModeSupported(this.host.hostRef);\n         this.setDialogContent(isApiSupported);\n      } catch (error) {\n         Logger.error(error);\n         this.alerts = [VsanUiUtils.getString(\"vsan.common.error.dataExtraction\")];\n      }\n   }\n\n   private setDialogContent = (isApiSupported: boolean) => {\n      this.shouldAllowDataMigration = isApiSupported && VsanDiskMgmtActionsUtil.shouldAllowDiskGroupDataMigration(\n            this.host, this.diskGroup);\n      if (!this.shouldAllowDataMigration) {\n         this.selectedDecommissionMode = DecommissionMode.noAction;\n         VsanUiUtils.setModalDialogHeight(VsanDiskMgmtActionsUtil.UNMOUNT_DISK_GROUP_DIALOG_HEIGHT_SMALL);\n      }\n\n      if (isApiSupported) {\n         const headerMessage: string = this.getHeaderMessage();\n         if (headerMessage) {\n            this.warningMessages.push(headerMessage);\n         }\n         const dataEvacuationWarningMessage: string = VsanDiskMgmtActionsUtil.getDataMigrationWarningForDiskGroup(\n               this.host.isInMaintenanceMode, this.diskGroup.isMounted);\n         if (dataEvacuationWarningMessage) {\n            this.warningMessages.push(dataEvacuationWarningMessage);\n         }\n      } else {\n         this.warningMessages = [VsanUiUtils.getString(\"vsan.actions.unmountDiskGroup.maintenanceMode.notSupported\")];\n      }\n   };\n\n   private getHeaderMessage = (): string => {\n      if (this.host.isInMaintenanceMode) {\n         return VsanUiUtils.getString(\"vsan.actions.unmountDiskGroup.dialogContent.headerDataEvacuation\");\n      } else if (this.host.isWitnessHost) {\n         return VsanUiUtils.getString(\n               \"vsan.actions.unmountDiskGroup.dialogContent.headerDataEvacuation.externalWitnessHostWarning\");\n      } else if (this.diskGroup.isMounted) {\n         return VsanUiUtils.getString(\n               \"vsan.actions.unmountDiskGroup.dialogContent.headerDataEvacuation.withMaintenanceMode\");\n      }\n   };\n\n   @Loader({name: LoaderName.DATA_EVACUATION})\n   private async requestDataEvacuationProperty(disk: ScsiDisk): Promise<void> {\n      if (!DiskMgmtDiskUtil.isScsiDiskHealthy(disk)) {\n         this.dataOnDiskGroupLabel = VsanUiUtils.getString(\"vsan.dialog.deleteDiskGroup.evacuateDataLabel.error\");\n         return;\n      }\n\n      const result: number = await this.vsanPropertyProvider.getVsanDataEvacuationInfo(\n            this.host.hostRef,\n            VsanQueryDataEvacuationInfoSpec.Factory.create([disk]));\n      this.onDataEvacuationPropertyRetrieved(result);\n   }\n\n   private onDataEvacuationPropertyRetrieved = (result: number) => {\n      if (result >= 0) {\n         const formattedSize: string = VsanUiUtils.formatFileSize(result);\n         this.dataOnDiskGroupLabel = VsanUiUtils.getString(\n               \"vsan.dialog.deleteDiskGroup.evacuateDataLabelWithSize\",\n               formattedSize);\n      }\n   };\n\n   @ErrorHandler({name: LoaderName.DATA_EVACUATION})\n   private onDataRetrievalError(error: any): void {\n      Logger.error(\"Unable to fetch disk group evacuation data: \", error);\n      this.alerts = [VsanUiUtils.getString(\"vsan.common.error.dataExtraction\")];\n      this.dataOnDiskGroupLabel = VsanUiUtils.getString(\"vsan.dialog.deleteDiskGroup.evacuateDataLabel.error\");\n   }\n\n   onDecommisionModeSummaryChanged = (summary: DecommissionModeSummary) => {\n      this.selectedDecommissionMode = summary.value;\n      this.isValidDecommisionMode = summary.isValidDecommissionMode;\n      if (VsanDiskMgmtActionsUtil.isPrecheckWithObjects(summary) && !this.isDiskResourcePrecheckSupported) {\n         VsanUiUtils.setModalDialogHeight(VsanDiskMgmtActionsUtil.UNMOUNT_DISK_GROUP_DIALOG_HEIGHT_LARGE);\n      } else if (this.isDiskResourcePrecheckSupported) {\n         VsanUiUtils.setModalDialogHeight(VsanDiskMgmtActionsUtil.UNMOUNT_DISK_GROUP_DIALOG_HEIGHT_PRECHECK);\n      } else {\n         VsanUiUtils.setModalDialogHeight(VsanDiskMgmtActionsUtil.UNMOUNT_DISK_GROUP_DIALOG_HEIGHT_MEDIUM);\n      }\n   };\n\n   onDiskResourcePrecheckSupportedChanged = (isSupported: boolean) => {\n      this.isDiskResourcePrecheckSupported = isSupported;\n      // Preselecting decommmission mode means that this dialog is opened from Data migration pre-check page,\n      // in which case GO TO PRE-CHECK button doesn't need to be display.\n      this.goToPrecheckButtonText = !this.preselectedDecommissionMode && this.isDiskResourcePrecheckSupported ?\n            VsanUiUtils.getString(\"vsan.actions.goToPrecheckDataMigration.label\") : \"\";\n   };\n\n   @Loader({name: LoaderName.ON_CONFIRM})\n   async ok(): Promise<void> {\n      this.alerts = [];\n\n      const decommissionMode: DecommissionMode = this.preselectedDecommissionMode ?\n            this.preselectedDecommissionMode :\n            VsanDiskMgmtActionsUtil.getSelectedDecommissionMode(\n                  this.shouldAllowDataMigration, this.selectedDecommissionMode);\n      const spec: UnmountDiskGroupSpec = UnmountDiskGroupSpec.Factory.create(\n            this.diskGroup.diskMapping, decommissionMode);\n\n      const task: ManagedObject = await this.diskGroupMutationService\n            .unmountDiskGroup(ManagedObject.contextObject, this.host.hostRef, spec);\n      this.closeDialog(task);\n   }\n\n   onGoToPrecheckClicked = () => {\n      const evacuationContext: EvacuationContext = VsanDiskMgmtActionsUtil.getEvacuationContext(\n            this.host.hostRef, this.evacuationEntityUuid, this.selectedDecommissionMode);\n      this.navigationService.navigateToAndCloseModal(PlatformExtension.CLUSTER_DATA_MIGRATION_PRE_CHECK,\n            ManagedObject.contextObjectUid, evacuationContext);\n   };\n\n   private closeDialog = (task: ManagedObject) => {\n      VsanUiUtils.closeModalDialog(task);\n   };\n\n   @ErrorHandler({name: LoaderName.ON_CONFIRM})\n   private handleError(error: any): void {\n      this.alerts = [error];\n   }\n}\n","import {VsanDiskMapping} from '@generated/vsan-disk-mapping';\nimport {DecommissionMode} from '@generated/decommission-mode';\n\nexport interface RemoveDiskGroupSpec {\n\n   decommissionMode: DecommissionMode;\n   mappings: VsanDiskMapping[];\n} //class RemoveDiskGroupSpec\n\nexport module RemoveDiskGroupSpec{\nexport class Factory {\n\n   static create = (decommissionMode: DecommissionMode, mappings: VsanDiskMapping[]): RemoveDiskGroupSpec => {\n      return { decommissionMode: decommissionMode, mappings: mappings, };\n   }\n\n\n} //class Factory\n\n} //module RemoveDiskGroupSpec\n","/* Copyright 2017-2019 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, OnInit} from \"@angular/core\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\n\n@Component({\n   templateUrl: \"mark-ssd-prompt.html\",\n   styleUrls: [\"mark-ssd-prompt.scss\"],\n   selector: \"vsan-diskmgmt-mark-ssd\",\n})\nexport class MarkSsdComponent implements OnInit{\n\n   isSsd: boolean;\n   title: string;\n\n   ngOnInit(): void {\n      this.isSsd = VsanUiUtils.getModalContext();\n      this.title = VsanUiUtils.getString(this.isSsd\n            ? \"storage.adapters.devices.action.tagAsSsd\"\n            : \"storage.adapters.devices.action.untagAsSsd\");\n   }\n\n}","<!--Copyright 2020 VMware, Inc. All rights reserved. -- VMware Confidential-->\n<vsan-delete-prompt\n      [title]=\"'vsan.dialog.stopManagingPmem.title' | localized\"\n      confirmText=\"vsan.common.unclaim\"\n      (onConfirm)=\"onOkClicked()\">\n   <div class=\"dialog-body\">\n\n      <span>{{warningMessage}}</span>\n\n      <!-- Confirmation text -->\n      <div id=\"delete-disks-footer\" class=\"strong-label\">\n         {{footerText}}\n      </div>\n   </div>\n</vsan-delete-prompt>","<!--Copyright 2017-2022 VMware, Inc. All rights reserved. -- VMware Confidential-->\n<vsan-delete-prompt\n      [title]=\"'vsan.dialog.deleteDiskGroup.title' | localized\"\n      [subtitle]=\"diskGroup.vsanUuid\"\n      [blockContent]=\"busy\"\n      [blockButton]=\"busy || !isValidDecommisionMode\"\n      [(alertMessages)]=\"alerts\"\n      confirmText=\"vsan.common.remove\"\n      (onConfirm)=\"onOkClicked()\"\n      [additionalButtonText]=\"goToPrecheckButtonText\"\n      (onAdditionalAction)=\"onGoToPrecheckClicked()\">\n   <div class=\"dialog-body\">\n      <vsan-validation *ngIf=\"warningMessages?.length\"\n                       alertType=\"warning\"\n                       [allowClose]=\"false\"\n                       [alertsExpanded]=\"true\"\n                       [allowExpandCollapse]=\"false\"\n                       [(alerts)]=\"warningMessages\">\n      </vsan-validation>\n\n      <!--Preselected decommission mode-->\n      <form class=\"clr-form clr-form-horizontal\" *ngIf=\"preselectedDecommissionMode\">\n         <div class=\"clr-form-control\">\n            <label for=\"delete-disk-group-decommission-mode\" class=\"clr-control-label\">\n               {{\"vsan.dialog.precheckEvacuation.label\" | localized}}\n            </label>\n            <span id=\"delete-disk-group-decommission-mode\">\n               {{localizedPreselectedDecommissionMode}}\n            </span>\n         </div>\n      </form>\n\n      <!-- Select decommission mode -->\n      <ng-container *ngIf=\"!busy && shouldAllowDataMigration && !preselectedDecommissionMode\">\n         <div id=\"data-on-disk-group-label\" *ngIf=\"!isDiskResourcePrecheckSupported\">\n            {{dataOnDiskGroupLabel}}\n         </div>\n         <div class=\"migration-mode-label\">\n            <span id=\"select-migration-mode-label\">{{'vsan.dialog.deleteDiskGroup.migrationMode' | localized}}</span>\n            <clr-signpost [vsan-signpost-title]=\"'vsan.dialog.deleteDiskGroup.migrationMode.signpost.label' | localized\">\n               <clr-signpost-content *clrIfOpen clrPosition=\"center-right\">\n                  <span>{{'vsan.dialog.deleteDiskGroup.evacuateDataHelp' | localized}}</span>\n               </clr-signpost-content>\n            </clr-signpost>\n         </div>\n         <vsan-pre-check-evacuation-summary\n               id=\"delete-disk-group-precheck-summary\"\n               [hostMor]=\"host.hostRef\"\n               [evacuationEntityUuid]=\"evacuationEntityUuid\"\n               [selectedDecommissionMode]=\"selectedDecommissionMode\"\n               [preCheckRecommendationMessage]=\n                     \"'vsan.dialog.precheckEvacuation.recommendationMesaage.diskGroup.delete' | localized\"\n               (selectedDecommissionModeSummaryChanged)=\"onDecommissionModeSummaryChanged($event)\"\n               (isDiskResourcePrecheckSupportedRetrieved)=\"onDiskResourcePrecheckSupportedChanged($event)\">\n         </vsan-pre-check-evacuation-summary>\n      </ng-container>\n\n      <!-- Confirmation text -->\n      <div id=\"footer-delete-disk-group\" class=\"strong-label\">\n         {{'vsan.dialog.deleteDiskGroup.footerDataEvacuation' | localized}}\n      </div>\n   </div>\n</vsan-delete-prompt>\n","/* Copyright 2020 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component} from \"@angular/core\";\nimport {EnumeratedFilterSelectionResolver} from \"@component/datagrid/filter/enumerated-filter.component\";\nimport {DiskMgmtFilterComponent} from \"./disk-mgmt-filter.component\";\nimport {DiskMgmtDiskUtil} from \"@util/disk-mgmt-disk.util\";\nimport {StorageData} from \"@component/diskmgmt/model/storage-data\";\n\n@Component({\n   templateUrl: \"disk-mgmt-filter.html\",\n   selector: \"vsan-storage-group-details-filter-health\",\n   styleUrls: [\"disk-mgmt-filter.scss\"],\n})\nexport class StorageGroupDetailsFilterHealthComponent extends DiskMgmtFilterComponent<StorageData> {\n\n   readonly comparator: EnumeratedFilterSelectionResolver<StorageData, string> =\n         new class extends EnumeratedFilterSelectionResolver<StorageData, string> {\n            isSelected(item: StorageData, selectedStateKeys: string[]): boolean {\n               return selectedStateKeys.some(state => (state === DiskMgmtDiskUtil.getHealth(item.diskStatus)));\n            }\n         }();\n}","/* Copyright 2019-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {NgModule} from \"@angular/core\";\nimport {CommonModule} from \"@angular/common\";\nimport {FormsModule} from \"@angular/forms\";\nimport {ClarityModule} from \"@clr/angular\";\nimport {DisksPropertyRetriever} from \"@component/diskmgmt/disks-property-retriever\";\nimport {ValidationModule} from \"@component/validation/validation.module\";\nimport {CommonPipeModule} from \"@pipe/common-pipe.module\";\nimport {CreateDiskGroupComponent} from \"@component/diskmgmt/create-disk-group.component\";\nimport {ClaimDisksComponent} from \"@component/diskmgmt/claim-disks.component\";\nimport {ValidationPanelComponent} from \"@component/diskmgmt/validation-panel.component\";\nimport {VsanCommonModule} from \"../../vsan-common.module\";\nimport {SpaceEfficiencyService} from \"@service/space-efficiency-service\";\nimport {VsanChartModule} from \"@component/chart/chart.module\";\nimport {VsanCapacityService} from \"@component/capacity/capacity.service\";\nimport {DisksCapacityChartComponent} from \"@component/diskmgmt/disks-capacity-chart.component\";\nimport {ClaimForPmemComponent} from \"@component/diskmgmt/claim-for-pmem.component\";\nimport {ClaimForVsanComponent} from \"@component/diskmgmt/claim-for-vsan.component\";\nimport {ClaimForVsanDirectComponent} from \"@component/diskmgmt/claim-for-vsan-direct.component\";\nimport {DisksGroupByPerspectiveComponent} from \"@component/diskmgmt/perspective/disks-group-by-perspective.component\";\nimport {TransportTypePipe} from \"../../../disk-management/views/pipes/transport-type.pipe\";\nimport {ClaimForVsanMaxComponent} from \"@component/diskmgmt/claim-for-vsan-max.component\";\nimport {ClaimModeToggleComponent} from \"@component/diskmgmt/claim-mode-toggle.component\";\nimport {AutoClaimDisksComponent} from \"@component/diskmgmt/auto-claim-disks.component\";\nimport {SelectDisksComponent} from \"@component/diskmgmt/select-disks.component\";\n\n@NgModule({\n   imports: [\n      CommonModule,\n      FormsModule,\n      ClarityModule,\n      ValidationModule,\n      CommonPipeModule,\n      VsanCommonModule,\n      VsanChartModule,\n   ],\n   declarations: [\n      CreateDiskGroupComponent,\n      ClaimDisksComponent,\n      ClaimModeToggleComponent,\n      AutoClaimDisksComponent,\n      DisksCapacityChartComponent,\n      ValidationPanelComponent,\n      ClaimForVsanComponent,\n      ClaimForPmemComponent,\n      ClaimForVsanMaxComponent,\n      ClaimForVsanDirectComponent,\n      DisksGroupByPerspectiveComponent,\n      TransportTypePipe,\n      SelectDisksComponent,\n   ],\n   exports: [\n      CreateDiskGroupComponent,\n      ClaimDisksComponent,\n      AutoClaimDisksComponent,\n      ClaimModeToggleComponent,\n      ClaimForPmemComponent,\n      ClaimForVsanComponent,\n      ClaimForVsanDirectComponent,\n      DisksGroupByPerspectiveComponent,\n      TransportTypePipe,\n      SelectDisksComponent,\n   ],\n   providers: [\n      SpaceEfficiencyService,\n      VsanCapacityService,\n      DisksPropertyRetriever,\n   ],\n})\nexport class DiskmgmtCommonModule {\n}\n","/* Copyright 2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {ClrLoadingState} from \"@clr/angular\";\n\n/**\n * Used to pass @Input() property between components which knows about its own loading state.\n */\nexport class LoadingAwareProperty<PropertyType> {\n   constructor(public data: PropertyType, private loadingState: ClrLoadingState = ClrLoadingState.DEFAULT) {}\n\n   get isLoading(): boolean {\n      return this.loadingState === ClrLoadingState.LOADING;\n   }\n\n   setToLoadingState(): void {\n      this.loadingState = ClrLoadingState.LOADING;\n   }\n\n   setToDefaultState(): void {\n      this.loadingState = ClrLoadingState.DEFAULT;\n   }\n}","/* Copyright 2020 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component} from \"@angular/core\";\nimport {DiskMgmtHostUtil} from \"@util/disk-mgmt-host.util\";\nimport {EnumeratedFilterSelectionResolver} from \"@component/datagrid/filter/enumerated-filter.component\";\nimport {HostData} from \"@generated/host-data\";\nimport {DiskMgmtFilterComponent} from \"./disk-mgmt-filter.component\";\n\n@Component({\n   templateUrl: \"disk-mgmt-filter.html\",\n   selector: \"vsan-host-list-filter-groups\",\n   styleUrls: [\"disk-mgmt-filter.scss\"],\n})\nexport class HostListFilterGroupsComponent extends DiskMgmtFilterComponent<HostData> {\n\n   readonly comparator: EnumeratedFilterSelectionResolver<HostData, string> =\n         new class extends EnumeratedFilterSelectionResolver<HostData, string> {\n            isSelected(item: HostData, selectedStateKeys: string[]): boolean {\n               return selectedStateKeys.some(state =>\n                     DiskMgmtHostUtil.getGroupTypeKeys(item).some(key => key === state));\n            }\n         }();\n}","/* Copyright 2020-2022 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {ChangeDetectorRef, Component, OnInit} from \"@angular/core\";\nimport {StorageData} from \"@component/diskmgmt/model/storage-data\";\nimport {StorageGroupIdentifier} from \"@component/diskmgmt/model/storage-group-identifier\";\nimport {StorageIdentifier} from \"@component/diskmgmt/model/storage-identifier\";\nimport {VsanBreadcrumbService} from \"@component/navigation/vsan-breadcrumb.service\";\nimport {UnavailableViewSpec} from \"@component/unavailable-view/unavailable-view-spec\";\nimport {UpgradeData} from \"@component/upgrade/upgrade.data\";\nimport {UpgradeService} from \"@component/upgrade/upgrade.service\";\nimport {VirtualObjectsTableStateService} from \"@component/virtual-objects-table/virtual-objects-table-state.service\";\nimport {DiskGroupData} from \"@generated/disk-group-data\";\nimport {DiskManagementService} from \"@generated/disk-management-service\";\nimport {HostData} from \"@generated/host-data\";\nimport {PermissionService} from \"@generated/permission-service\";\nimport {Privileges} from \"@generated/privileges\";\nimport {UpdateDuplicatePciIdDevicesService} from \"@generated/update-duplicate-pci-id-devices-service\";\nimport {VirtualObjectModel} from \"@generated/virtual-object-model\";\nimport {VirtualObjectsService} from \"@generated/virtual-objects-service\";\nimport {VsanCapabilityData} from \"@generated/vsan-capability-data\";\nimport {VsanCapabilityProvider} from \"@generated/vsan-capability-provider\";\nimport {VsanConfigService} from \"@generated/vsan-config-service\";\nimport {VsanConfigSpec} from \"@generated/vsan-config-spec\";\nimport {LoadingAwareProperty} from \"@model/loading-aware-property\";\nimport {DiskManagementNavigationContext} from \"@navigation/context/disk-management-navigation-context\";\nimport {ClusterComputeResource} from \"@service/client/dataservice/data-service-property\";\nimport {DataServiceClient} from \"@service/client/dataservice/data-service.service\";\nimport {ErrorHandler} from \"@service/flow/error-handler.decorator\";\nimport {Loader} from \"@service/flow/loader.decorator\";\nimport {LoadingIndicator} from \"@service/flow/loading-indicator.decorator\";\nimport {RefreshHandler} from \"@service/global-refresh.service\";\nimport {ManagedObject} from \"@service/managed-object\";\nimport {TaskMonitorService} from \"@service/task-monitor-service\";\nimport {Cached, TrackBy} from \"@util/cache/cached.decorator\";\nimport {DiskMgmtDiskGroupUtil} from \"@util/disk-mgmt-disk-group.util\";\nimport {DiskMgmtHostUtil} from \"@util/disk-mgmt-host.util\";\nimport {DiskMgmtUtil} from \"@util/disk-mgmt.util\";\nimport {Logger} from \"@util/logger\";\nimport {RaceConditionSafe} from \"@util/promise/race-condition-safe.decorator\";\nimport {ReferenceWatcher} from \"@util/reference-watcher\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {DiskManagementRoutingService} from \"./disk-management-routing.service\";\nimport {DiskManagementScreenReaderService} from \"./disk-management-screen-reader.service\";\nimport {ViewObjectsContext} from \"./views/model/view-objects-context\";\nimport {DiskManagementActionAvailabilityService} from \"./views/validation/disk-management-action-availability.service\";\n\n@Component({\n   templateUrl: \"disk-management.html\",\n   styleUrls: [\"disk-management.scss\"],\n   selector: \"vsan-disk-management\",\n   providers: [ReferenceWatcher],\n})\nexport class DiskManagementComponent implements OnInit {\n   @LoadingIndicator()\n   loading: boolean;\n\n   clusterRef: ManagedObject = ManagedObject.contextObject;\n   clusterName: string;\n   hostList: HostData[];\n   upgradeData: UpgradeData;\n   vsanConfig: VsanConfigSpec;\n   alertMessages: string[] = [];\n   hasEditPermission: boolean = false;\n   clusterCapabilities: VsanCapabilityData;\n   hasHostMaintenancePermission: boolean;\n   noHostsView: UnavailableViewSpec;\n   preselectedHost: HostData;\n   preselectedGroupIdentifier: StorageGroupIdentifier;\n   preselectedStorageIdentifier: StorageIdentifier;\n   preselectedGroup: DiskGroupData;\n   preselectedStorage: StorageData;\n   isVirtualObjectsView: boolean;\n   virtualObjects: VirtualObjectModel[];\n   hostIndex: number = -1;\n   private isInitLoad: boolean = true;\n   isBreadcrumbNavigationEnabled: boolean = false;\n   private preselectContext: DiskManagementNavigationContext;\n   isVsanUpgradeVisible: boolean = false;\n   hasDuplicatePciIdDevices: LoadingAwareProperty<boolean> = new LoadingAwareProperty(false);\n\n   constructor(private diskMgmtService: DiskManagementService,\n         private diskManagementRoutingService: DiskManagementRoutingService,\n         private diskManagementActionAvailabilityService: DiskManagementActionAvailabilityService,\n         private diskManagementScreenReaderService: DiskManagementScreenReaderService,\n         private dataService: DataServiceClient,\n         private permissionService: PermissionService,\n         private capabilityProvider: VsanCapabilityProvider,\n         private taskService: TaskMonitorService,\n         private vsanConfigService: VsanConfigService,\n         private virtualObjectsService: VirtualObjectsService,\n         private cdRef: ChangeDetectorRef,\n         private refWatcher: ReferenceWatcher,\n         private upgradeService: UpgradeService,\n         private virtualObjectsTableState: VirtualObjectsTableStateService,\n         private updatePciIdService: UpdateDuplicatePciIdDevicesService) {\n   }\n\n   async ngOnInit(): Promise<void> {\n      this.refWatcher.watchSubscriptionRef(this.diskManagementActionAvailabilityService.onTaskStarted\n            .subscribe(result => this.refreshRequested(result)));\n      this.refWatcher.watchSubscriptionRef(this.diskManagementActionAvailabilityService.onObjectsViewSelected\n            .subscribe(result => this.viewObjects(result)));\n      this.refWatcher.watchSubscriptionRef(this.diskManagementActionAvailabilityService.onHostDetailsViewSelected\n            .subscribe(() => this.setSelectHostIndex()));\n      this.refWatcher.watchSubscriptionRef(this.diskManagementRoutingService.onClusterNavigatedObs\n            .subscribe(() => {\n               this.selectClusterView();\n               this.diskManagementRoutingService.resetRootCallBack();\n            }));\n      this.refWatcher.watchSubscriptionRef(this.diskManagementRoutingService.onHostNavigatedObs\n            .subscribe(host => this.onHostNavigated(host)));\n      this.refWatcher.watchSubscriptionRef(this.diskManagementRoutingService.onVirtualObjectsRequested\n            .subscribe(viewObjectsContext => this.requestVirtualObjects(viewObjectsContext)));\n      this.refWatcher.watchSubscriptionRef(this.diskManagementRoutingService.onErrorCleared\n            .subscribe(() => this.clearErrors()));\n\n      this.preselectContext = VsanUiUtils.getNavigationData();\n      this.initializeBreadcrumbNavigation();\n      this.capabilityProvider.getVcCapabilityData(this.clusterRef)\n            .then((vcCapabilities: VsanCapabilityData) => {\n               if (vcCapabilities.isDuplicatePciIdFixSupported) {\n                  this.checkDuplicatePciIdDevices();\n               }\n            })\n            .catch(error => Logger.warn(\"Unable to get vc capabilities: \", error));\n\n      this.permissionService.hasPermissions(this.clusterRef, [Privileges.HOST_MAINTENANCE()])\n            .then(result => this.hasHostMaintenancePermission = result)\n            .catch(error => Logger.warn(\"Unable to check host maintenance privilege: \", error));\n\n      this.permissionService.hasPermissions(this.clusterRef,\n            [Privileges.EDIT_CLUSTER(), Privileges.CONFIG_STORAGE()])\n            .then(result => this.hasEditPermission = result)\n            .catch(error => Logger.warn(\"Unable to check cluster permissions: \", error));\n\n      try {\n         await this.fetch();\n      } catch (err) {\n         this.handleError(err);\n      }\n   }\n\n   private checkDuplicatePciIdDevices(): void {\n      this.hasDuplicatePciIdDevices.setToLoadingState();\n      this.updatePciIdService.hasDuplicatePciIdDevices(this.clusterRef)\n            .then(result => this.hasDuplicatePciIdDevices.data = result)\n            .catch(error => Logger.warn(\"Unable to get duplicate PCI ID devices status: \", error))\n            .finally(() => this.hasDuplicatePciIdDevices.setToDefaultState());\n   }\n\n   private initializeBreadcrumbNavigation(): void {\n      // Initialize component routes\n      this.diskManagementRoutingService.setInitialViewRoots();\n      VsanBreadcrumbService.enable\n            .subscribe(isEnabled => {\n               this.isBreadcrumbNavigationEnabled = isEnabled;\n               this.cdRef.detectChanges();\n            });\n   }\n\n   onHostNavigated(host: HostData): void {\n      this.selectHost(host);\n      // Update the selected host index if the view is on host details level\n      if (this.isHostDetailsLevel()) {\n         this.setSelectHostIndex();\n      }\n   }\n\n   @RefreshHandler\n   @Loader()\n   async fetch(): Promise<void> {\n\n      // remember what is currently selected to preselect it after the reload\n      this.prepareReloadContext();\n      this.reset();\n\n      let hostsData: HostData[];\n      [this.vsanConfig, hostsData, this.clusterCapabilities, this.clusterName] = await Promise.all([\n         this.vsanConfigService.getVsanConfigSpec(this.clusterRef),\n         this.diskMgmtService.listHosts(this.clusterRef),\n         // Get cluster level capabilities on each global refresh because we may add/remove old host in the meantime.\n         this.capabilityProvider.getClusterCapabilityData(this.clusterRef),\n         this.dataService.getProperty(ClusterComputeResource.name, this.clusterRef),\n      ]);\n\n      this.processHostsData(hostsData);\n      if (this.isInitLoad) {\n         this.diskManagementRoutingService.showBreadcrumbNavigation();\n         this.isInitLoad = false;\n      }\n      // Load all of the fetched host names and pass them to the hosts level navigation\n      this.diskManagementRoutingService.updateHostLinks();\n      this.preselect();\n      this.preselectVirtualObjects();\n      this.diskManagementScreenReaderService.informPageLoad(\n            this.preselectedHost,\n            this.preselectedGroupIdentifier,\n            this.preselectedStorageIdentifier,\n            this.isHostDetailsLevel(),\n            this.isVirtualObjectsView);\n   }\n\n   private reset(): void {\n      this.setHostList(null);\n      this.upgradeData = null;\n      this.virtualObjects = null;\n      this.preselectDiskMgmtEntities(null, null, null);\n      this.selectClusterView();\n      this.isVirtualObjectsView = false;\n      this.clearErrors();\n      this.noHostsView = null;\n   }\n\n   vsanUpgradeComplete(): void {\n      this.isVsanUpgradeVisible = true;\n      this.fetch();\n   }\n\n   private prepareReloadContext(): void {\n      if (!this.preselectedHost && !this.isVirtualObjectsView) {\n         // this is the first load of the current page, nothing to change\n         return;\n      }\n      this.preselectContext = {\n         hostRef: this.preselectedHost?.hostRef,\n         diskGroup: this.preselectedGroupIdentifier,\n         storage: this.preselectedStorageIdentifier,\n         isVirtualObjectsView: this.isVirtualObjectsView,\n         isHostDetailsLevel: this.isHostDetailsLevel() && !this.isVirtualObjectsView,\n      };\n   }\n\n   private processHostsData(data: HostData[]): void {\n      if (VsanUiUtils.isEmpty(data)) {\n         this.noHostsView = UnavailableViewSpec.DISK_MGMT_VIEW_NO_HOSTS;\n         return;\n      }\n      DiskMgmtHostUtil.orderHostsByHealth(data);\n      this.setHostList(data);\n      this.upgradeService.getUpgradeOnlyData(this.clusterRef, this.hostList)\n            .then((result: UpgradeData) => {\n               this.upgradeData = result;\n            })\n            .catch(this.handleError);\n      this.hostList.forEach(host =>\n            DiskMgmtUtil.sortDiskGroups(host.diskGroups,\n                  (diskGroup) => DiskMgmtDiskGroupUtil.isVsanDiskGroup(diskGroup)));\n   }\n\n   private setHostList(data: HostData[]): void {\n      this.hostList = data;\n      this.diskManagementRoutingService.setHostList(this.hostList);\n   }\n\n   async fetchPrecheckUpgradeData(): Promise<void> {\n      this.upgradeService.getUpgradeStatus(this.clusterRef)\n            .then(upgradeStatus => {\n               // Create a new instance to trigger the upgrade component's refresh\n               this.upgradeData = this.upgradeData.getNewInstance(upgradeStatus);\n            }).catch(this.handleError);\n   }\n\n   private preselect(): void {\n      if (!this.preselectContext || !this.preselectContext.hostRef) {\n         if (VsanUiUtils.isEmpty(this.hostList) ||\n               (this.preselectContext && this.preselectContext.isVirtualObjectsView)) {\n            return;\n         }\n\n         if (this.preselectContext && this.preselectContext.hostName) {\n            // If only host name is passed they find the host by name\n            this.preselectContext.hostRef =\n                  this.hostList.find(host => host.name === this.preselectContext.hostName).hostRef;\n         } else {\n            // Select the first host if non virtual objects view and no host selection.\n            this.preselectContext = {\n               hostRef: this.hostList[0].hostRef,\n            };\n         }\n      }\n      this.preselectHost();\n      if (this.preselectedHost && this.preselectContext.isHostDetailsLevel) {\n         this.setSelectHostIndex();\n      }\n      this.preselectDiskGroup();\n      this.preselectStorage();\n\n   }\n\n   private preselectVirtualObjects(): void {\n      if (!this.preselectContext || !this.preselectContext.isVirtualObjectsView) {\n         return;\n      }\n      this.viewObjects(new ViewObjectsContext(this.preselectedHost, this.preselectedGroup, this.preselectedStorage));\n   }\n\n   private preselectHost(): void {\n      const selectedHost: HostData =\n            this.hostList.find(host => host.hostRef.value === this.preselectContext.hostRef.value);\n      if (selectedHost) {\n         this.selectHost(selectedHost);\n      }\n   }\n\n   private preselectDiskGroup(): void {\n      if (!this.preselectedHost || (!this.preselectContext.diskGroup && !this.preselectContext.storage)) {\n         return;\n      }\n      // Find group from the passed context\n      if (this.preselectContext.diskGroup) {\n         this.preselectedGroup = this.findSelectedGroupByIdentifier(this.preselectContext.diskGroup);\n      }\n      // If group from the context is not found, try to find the group of the passed storage.\n      if (!this.preselectedGroup && this.preselectContext.storage) {\n         this.preselectedGroup = DiskMgmtDiskGroupUtil.findGroupByStorage(this.preselectedHost.diskGroups,\n               this.preselectContext.storage);\n      }\n      if (this.preselectedGroup) {\n         this.preselectedGroupIdentifier = StorageGroupIdentifier.fromDiskGroup(this.preselectedGroup);\n      }\n   }\n\n   private findSelectedGroupByIdentifier(groupIdentifier: StorageGroupIdentifier): DiskGroupData {\n      if (!this.preselectedHost || VsanUiUtils.isUnset(groupIdentifier)) {\n         return null;\n      }\n      return this.preselectedHost.diskGroups.find(diskGroup =>\n            StorageGroupIdentifier.areEqual(diskGroup, groupIdentifier));\n   }\n\n   private preselectStorage(): void {\n      if (!this.preselectedGroup || !this.preselectContext.storage) {\n         return;\n      }\n      const isStorageIdentifierValid: boolean =\n            !!DiskMgmtDiskGroupUtil.findGroupByStorage([this.preselectedGroup], this.preselectContext.storage);\n      if (isStorageIdentifierValid) {\n         this.selectStorage(this.preselectContext.storage);\n      }\n   }\n\n   refreshRequested = (taskRefs?: ManagedObject[]): void => {\n      if (!VsanUiUtils.isEmpty(taskRefs)) {\n         Promise.all(taskRefs.map(task => this.taskService.getAwaitResult(task)))\n               .then(r => this.fetch())\n               .catch(error => {\n                  const errorMessage: string = error.localizedMessage || error;\n                  this.handleError(errorMessage);\n               });\n      } else {\n         this.fetch();\n      }\n   };\n\n   selectHost(host: HostData): void {\n      if (!host) {\n         return;\n      }\n      let group: StorageGroupIdentifier = null;\n      // Preselect vSAN Max section if available\n      if (host.isSingleTierEnabled && !VsanUiUtils.isEmpty(host.diskGroups)) {\n         group = StorageGroupIdentifier.fromDiskGroup(host.diskGroups[0]);\n      }\n\n      this.preselectDiskMgmtEntities(host, group, null);\n   }\n\n   selectGroup(diskGroupIdentifier: StorageGroupIdentifier): void {\n      this.preselectedGroupIdentifier = diskGroupIdentifier;\n      this.preselectedGroup = this.findSelectedGroupByIdentifier(diskGroupIdentifier);\n   }\n\n   selectStorage(storageIdentifier: StorageIdentifier): void {\n      this.preselectedStorageIdentifier = storageIdentifier;\n      this.preselectedStorage = StorageData.findStorageByIdentifier(this.preselectedGroup, storageIdentifier);\n   }\n\n   isHostDetailsLevel(): boolean {\n      return this.hostIndex > -1;\n   }\n\n   getExitVirtualObjectsLabel(): string {\n      if (!this.isHostDetailsLevel()) {\n         return VsanUiUtils.getString(\"vsan.manage.diskManagement.virtualObjects.back.hostList\");\n      }\n\n      return this.vsanConfig.isVsanMaxEnabled\n            ? VsanUiUtils.getString(\"vsan.manage.diskManagement.virtualObjects.back.disks\")\n            : VsanUiUtils.getString(\"vsan.manage.diskManagement.virtualObjects.back.disksAndGroups\");\n   }\n\n   setSelectHostIndex(): void {\n      this.hostIndex = this.hostList.findIndex(h => ManagedObject.areEqual(h.hostRef, this.preselectedHost.hostRef));\n      if (this.isHostDetailsLevel()) {\n         this.diskManagementRoutingService.navigateToHostRoute(this.preselectedHost.name);\n         this.diskManagementRoutingService.setHostDetailsLevelRootCb();\n      }\n   }\n\n   private selectClusterView(): void {\n      this.hostIndex = -1;\n   }\n\n   @ErrorHandler()\n   private handleError(error: string): void {\n      this.alertMessages.push(error);\n   }\n\n   clearErrors(): void {\n      this.alertMessages = [];\n   }\n\n   viewObjects(context: ViewObjectsContext): void {\n      this.setIsVirtualObjectsView(true);\n      this.diskManagementRoutingService.viewObjects(context);\n   }\n\n   private requestVirtualObjects(viewObjectsContext: ViewObjectsContext): void {\n      // If we don't reset the VO table state we will keep all previous selections\n      this.virtualObjectsTableState.reset();\n      let objectUuids: string[] = null;\n      // Preselect host, group and storage when selected from virtual objects,\n      // in order to preserve them on refresh.\n      if (!viewObjectsContext) {\n         this.selectClusterView();\n         this.preselectDiskMgmtEntities(null, null, null);\n      } else if (viewObjectsContext.storage) {\n         objectUuids = viewObjectsContext.storage.objectUuids;\n         this.preselectDiskMgmtEntities(viewObjectsContext.host,\n               StorageGroupIdentifier.fromDiskGroup(viewObjectsContext.group),\n               new StorageIdentifier(viewObjectsContext.storage.uuid, viewObjectsContext.storage.name));\n      } else if (viewObjectsContext.group) {\n         objectUuids = viewObjectsContext.group.objectUuids;\n         this.preselectDiskMgmtEntities(viewObjectsContext.host,\n               StorageGroupIdentifier.fromDiskGroup(viewObjectsContext.group), null);\n      } else if (viewObjectsContext.host) {\n         objectUuids = viewObjectsContext.host.objectUuids;\n         this.preselectDiskMgmtEntities(viewObjectsContext.host, null, null);\n      }\n\n      if (objectUuids === null || !VsanUiUtils.isEmpty(objectUuids)) {\n         this.virtualObjects = null;\n         this.queryVirtualObjects(objectUuids)\n               .then((loadedObjects: VirtualObjectModel[]) => this.handleQueryVirtualObjectsResult(loadedObjects))\n               .catch((reason: any) => this.handleQueryVirtualObjectsError(reason));\n      } else {\n         this.setVirtualObjects([]);\n      }\n   }\n\n   /**\n    * Query virtual objects for the passed objectUuids. If objectUuids is:\n    * 1) Empty array - don't query virtual objects.\n    * 2) Non-empty array - query virtual objects for the passed objectUuids.\n    * 3) Null - query all virtual objects for the cluster.\n    */\n   @RaceConditionSafe()\n   @Cached({trackBy: TrackBy.INPUT_VALUES})\n   private async queryVirtualObjects(objectUuids: string[]): Promise<VirtualObjectModel[]> {\n      return this.virtualObjectsService.listVirtualObjects(ManagedObject.contextObject, objectUuids);\n   }\n\n   private handleQueryVirtualObjectsResult(loadedObjects: VirtualObjectModel[]): void {\n      // If virtualObjects is null that mean the we still wait for the objects and we display the loading spinner.\n      // A case when it's not null is when we select an item without virtual objects on it.\n      if (this.isVirtualObjectsView && this.virtualObjects === null) {\n         this.setVirtualObjects(loadedObjects);\n      }\n   }\n\n   private handleQueryVirtualObjectsError(reason: any): void {\n      if (this.isVirtualObjectsView) {\n         this.handleError(reason);\n         this.setVirtualObjects([]);\n      }\n   }\n\n   private setVirtualObjects(loadedVirtualObjects: VirtualObjectModel[]): void {\n      this.virtualObjects = loadedVirtualObjects;\n      this.diskManagementScreenReaderService.informVirtualObjectsLoad();\n   }\n\n   exitVirtualObjects(): void {\n      this.setIsVirtualObjectsView(false);\n      this.virtualObjects = null;\n      this.diskManagementRoutingService.resetHostsRoutes();\n      const hostToSelect: HostData = this.preselectedHost || this.hostList[0];\n      this.onHostNavigated(hostToSelect);\n      if (!this.isHostDetailsLevel()) {\n         this.diskManagementRoutingService.resetRootCallBack();\n         this.diskManagementRoutingService.navigateToRootRoute();\n      }\n   }\n\n   private setIsVirtualObjectsView(value: boolean): void {\n      this.isVirtualObjectsView = value;\n      this.diskManagementRoutingService.setIsVirtualObjectsView(value);\n   }\n\n   private preselectDiskMgmtEntities(host: HostData, group: StorageGroupIdentifier, storage: StorageIdentifier): void {\n      this.preselectedHost = host;\n      this.selectGroup(group);\n      this.selectStorage(storage);\n   }\n}\n","<!--Copyright 2019 VMware, Inc. All rights reserved. -- VMware Confidential-->\n<vsan-default-prompt\n      [title]=\"'vsan.actions.mountDiskGroup.dialogTitle' | localized\"\n      [subtitle]=\"diskGroup?.diskGroupName\"\n      [confirmText]=\"'vsan.actions.mountDiskGroup.confirmText' | localized\"\n      [(alertMessages)]=\"alerts\"\n      [blockContent]=\"loading\"\n      [blockButton]=\"loading\"\n      (onConfirm)=\"ok()\">\n   <div class=\"dialog-body\">\n      <span id=\"mount-description\">{{\"vsan.actions.mountDiskGroup.text\" | localized}}</span>\n      <span id=\"mount-confirmation-label\" class=\"strong-label\">\n         {{\"vsan.actions.mountDiskGroup.confirmationLabel\" | localized}}\n      </span>\n   </div>\n</vsan-default-prompt>","<!--Copyright 2019-2022 VMware, Inc. All rights reserved. -- VMware Confidential-->\n<vsan-delete-prompt\n      [title]=\"'vsan.dialog.deleteDiskFromDiskGroup.title' | localized\"\n      [subtitle]=\"subtitle\"\n      [blockContent]=\"busy\"\n      [blockButton]=\"busy || !isValidDecommisionMode\"\n      [(alertMessages)]=\"alerts\"\n      confirmText=\"vsan.common.remove\"\n      (onConfirm)=\"onOkClicked()\"\n      [additionalButtonText]=\"goToPrecheckButtonText\"\n      (onAdditionalAction)=\"onGoToPrecheckClicked()\">\n   <div class=\"dialog-body\">\n      <vsan-validation *ngIf=\"warningMessages?.length\"\n                       alertType=\"warning\"\n                       [allowClose]=\"false\"\n                       [alertsExpanded]=\"true\"\n                       [allowExpandCollapse]=\"false\"\n                       [(alerts)]=\"warningMessages\">\n      </vsan-validation>\n\n      <!--Preselected decommission mode-->\n      <form class=\"clr-form clr-form-horizontal\" *ngIf=\"preselectedDecommissionMode\">\n         <div class=\"clr-form-control\">\n            <label for=\"delete-disks-decommission-mode\" class=\"clr-control-label\">\n               {{\"vsan.dialog.precheckEvacuation.label\" | localized}}\n            </label>\n            <span id=\"delete-disks-decommission-mode\">\n               {{localizedPreselectedDecommissionMode}}\n            </span>\n         </div>\n      </form>\n\n      <!-- Select decommission mode -->\n      <ng-container *ngIf=\"!busy && shouldAllowDataMigration && !preselectedDecommissionMode\">\n         <div id=\"data-on-disk-label\" *ngIf=\"disks?.length === 1 && !isDiskResourcePrecheckSupported\">\n            {{dataOnDiskLabel}}\n         </div>\n         <div class=\"migration-mode-label\">\n            <span id=\"select-migration-mode-label\">{{'vsan.dialog.deleteDiskGroup.migrationMode' | localized}}</span>\n            <clr-signpost [vsan-signpost-title]=\"'vsan.dialog.deleteDiskGroup.migrationMode.signpost.label' | localized\">\n               <clr-signpost-content *clrIfOpen clrPosition=\"center-right\">\n                  <span>{{'vsan.dialog.deleteDiskGroup.evacuateDataHelp' | localized}}</span>\n               </clr-signpost-content>\n            </clr-signpost>\n         </div>\n         <vsan-pre-check-evacuation-summary\n               id=\"delete-disks-precheck-summary\"\n               [hostMor]=\"host.hostRef\"\n               [evacuationEntityUuid]=\"disks[0].vsanUuid\"\n               [selectedDecommissionMode]=\"selectedDecommissionMode\"\n               [preCheckRecommendationMessage]=\n                     \"'vsan.dialog.precheckEvacuation.recommendationMesaage.disk.delete' | localized\"\n               (selectedDecommissionModeSummaryChanged)=\"onDecommissionModeSummaryChanged($event)\"\n               (isDiskResourcePrecheckSupportedRetrieved)=\"onDiskResourcePrecheckSupportedChanged($event)\">\n         </vsan-pre-check-evacuation-summary>\n      </ng-container>\n\n      <!-- Confirmation text -->\n      <div id=\"delete-disks-footer\" class=\"strong-label\">\n         {{footerText}}\n      </div>\n   </div>\n</vsan-delete-prompt>\n","/* Copyright 2019 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, OnInit} from \"@angular/core\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {Logger} from \"@util/logger\";\n\n@Component({\n   templateUrl: \"pre-check-issues.html\",\n   styleUrls: [\"pre-check-issues.scss\"],\n   selector: \"vsan-diskmgmt-pre-check-issues\",\n})\nexport class PreCheckIssuesComponent implements OnInit {\n\n   subtitle: string;\n   issues: string[];\n\n   ngOnInit(): void {\n      const context: any = VsanUiUtils.getModalContext();\n      if (context) {\n         this.subtitle = context.clusterName;\n         this.issues = context.issues;\n      } else {\n         Logger.error(\"Unable to get modal context\");\n      }\n   }\n}","<!--Copyright 2022 VMware, Inc. All rights reserved. -- VMware Confidential-->\n<vsan-default-prompt\n      [title]=\"'vsan.dialog.mountDisk.dialogTitle' | localized\"\n      [subtitle]=\"diskName\"\n      [confirmText]=\"'vsan.dialog.mountDisk.confirmText' | localized\"\n      [(alertMessages)]=\"alerts\"\n      [blockButton]=\"loading\"\n      (onConfirm)=\"ok()\">\n   <div class=\"dialog-body\">\n      <span id=\"mount-description\">{{\"vsan.dialog.mountDisk.text\" | localized}}</span>\n      <span id=\"mount-confirmation-label\" class=\"strong-label\">\n         {{\"vsan.dialog.mountDisk.confirmationLabel\" | localized}}\n      </span>\n   </div>\n</vsan-default-prompt>","import {VsanDiskMapping} from '@generated/vsan-disk-mapping';\nimport {DecommissionMode} from '@generated/decommission-mode';\n\nexport interface RecreateDiskGroupSpec {\n\n   mapping: VsanDiskMapping;\n   decommissionMode: DecommissionMode;\n} //class RecreateDiskGroupSpec\n\nexport module RecreateDiskGroupSpec{\nexport class Factory {\n\n   static create = (mapping: VsanDiskMapping, decommissionMode: DecommissionMode): RecreateDiskGroupSpec => {\n      return { mapping: mapping, decommissionMode: decommissionMode, };\n   }\n\n\n} //class Factory\n\n} //module RecreateDiskGroupSpec\n","<!--Copyright 2019-2021 VMware, Inc. All rights reserved. -- VMware Confidential-->\n<vsan-create-prompt\n      [title]=\"'vsan.dialog.semiAutoClaimDialog.title' | localized\"\n      [blockContent]=\"loading || inProgress\"\n      [blockButton]=\"loading || !isConfigValid\"\n      [(alertMessages)]=\"alertMessages\"\n      (onConfirm)=\"onOkClicked()\">\n   <vsan-claim-disks\n         *ngIf=\"!loading\"\n         [isStandalone]=\"true\"\n         [clusterRef]=\"clusterRef\"\n         [vsanConfigSpec]=\"vsanConfigSpec\"\n         [hostsClaimingData]=\"hostsClaimingData\"\n         (configUpdated)=\"claimDisksSpecs=$event\"\n         (configValid)=\"configAcceptabilityChanged($event)\">\n   </vsan-claim-disks>\n</vsan-create-prompt>\n","<!-- Copyright 2020-2021 VMware, Inc. All rights reserved. -- VMware Confidential -->\n<clr-accordion clrAccordionMultiPanel=\"true\">\n   <clr-accordion-panel *ngFor=\"let row of storageGroups\"\n                        [clrAccordionPanelOpen]=\"isGroupExpanded(row)\"\n                        [vsan-panel-id]=\"createGroupId(row)\"\n                        [vsan-panel-model]=\"row\"\n                        (accordionPanelToggleExpand)=\"toggleExpand($event)\">\n      <clr-accordion-title (click)=\"handleAccordionTitleClick($event, triggerEl)\">\n         <div class=\"action-column\"\n              [ngClass]=\"getActionColumnClass(row)\"\n              #triggerEl>\n            <clr-dropdown>\n               <button clrDropdownTrigger>\n                  <clr-icon shape=\"ellipsis-vertical\"></clr-icon>\n               </button>\n               <clr-dropdown-menu *clrIfOpen=\"isGroupActionsDropdownOpen(triggerEl)\" clrPosition=\"right-top\"\n                                  [vsan-dropdown-navigation]=\"2\"\n                                  [attr.aria-label]=\"'vsan.common.srMessage.dropdownMenu.moreActions.label' | localized\">\n                  <vsan-storage-group-actions\n                        [autoClaimMode]=\"autoClaimMode\"\n                        [hasEditPermission]=\"hasEditPermission\"\n                        [clusterCapabilities]=\"clusterCapabilities\"\n                        [hasHostMaintenancePermission]=\"hasHostMaintenancePermission\"\n                        [selectedDiskGroup]=\"row\"\n                        [selectedHost]=\"host\">\n                  </vsan-storage-group-actions>\n               </clr-dropdown-menu>\n            </clr-dropdown>\n         </div>\n         <div class=\"wide-column\" vsan-show-title>\n            {{getDiskGroupLabel(row)}}\n         </div>\n         <div *ngIf=\"!host?.isSingleTierEnabled\"\n              class=\"mid-column\"\n              vsan-show-title>\n            <vsan-icon-item [label]=\"getHealthKey(row) | localized\"\n                            missingLabel=\"\"\n                            [shape]=\"getHealthKey(row) | hostHealthIconShape\"\n                            [iconClass]=\"Icon.CLR_SOLID_ICON_CLASS + ' ' +\n                                   Icon.clrIconShapeClassMap[getHealthKey(row) | hostHealthIconShape]\">\n            </vsan-icon-item>\n         </div>\n         <div class=\"mid-column right-align-cell\">\n            <vsan-storage-capacity *ngIf=\"!isUnusedDiskGroup(row)\"\n                                   [capacity]=\"row.capacity\">\n            </vsan-storage-capacity>\n         </div>\n         <div *ngIf=\"!host?.isSingleTierEnabled\"\n              class=\"mid-column\"\n              vsan-show-title>\n            {{getState(row)}}\n         </div>\n         <div class=\"mid-column\" vsan-show-title>\n            {{getClaimedDisksLabel(row)}}\n         </div>\n         <div *ngIf=\"!host?.isSingleTierEnabled\"\n              class=\"mid-column\"\n              vsan-show-title>\n            {{getGroupType(row)}}\n         </div>\n         <div *ngIf=\"!host?.isSingleTierEnabled\"\n              class=\"wide-column\"\n              vsan-show-title>\n            {{getAggregatedFsVersion(row)}}\n         </div>\n      </clr-accordion-title>\n      <clr-accordion-content *clrIfExpanded>\n         <vsan-storage-details [autoClaimMode]=\"autoClaimMode\"\n                               [spaceEfficiencyConfig]=\"spaceEfficiencyConfig\"\n                               [hasEditPermission]=\"hasEditPermission\"\n                               [clusterCapabilities]=\"clusterCapabilities\"\n                               [hasHostMaintenancePermission]=\"hasHostMaintenancePermission\"\n                               [storageGroup]=\"row\"\n                               [host]=\"host\"\n                               [preselectedStorage]=\"preselectedStorage\"\n                               (storageSelected)=\"selectStorage($event)\">\n         </vsan-storage-details>\n      </clr-accordion-content>\n   </clr-accordion-panel>\n</clr-accordion>\n","/* Copyright 2020-2022 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, Input, OnInit} from \"@angular/core\";\nimport {DiskManagementActionAvailabilityService} from \"../validation/disk-management-action-availability.service\";\nimport {NavigationService, PlatformExtension} from \"@navigation/navigation.service\";\nimport {ActionAvailableStatus} from \"@util/validation/action-available-status\";\nimport {DiskManagementActionContext} from \"../validation/disk-management-action-context\";\nimport {HostData} from \"@generated/host-data\";\nimport {DiskMgmtHostUtil} from \"@util/disk-mgmt-host.util\";\nimport {VsanDiskMgmtActionsUtil} from \"@util/vsan-disk-mgmt-actions-util\";\nimport {ManagedObject} from \"@service/managed-object\";\nimport {VsanCapabilityData} from \"@generated/vsan-capability-data\";\nimport {EvacuationContext} from \"@navigation/context/evacuation.context\";\nimport {ModalBuilder} from \"@util/modal-builder\";\nimport {PreCheckEvacuationDialogSize} from \"@component/precheck/pre-check-evacuation-dialog-size\";\nimport {ViewObjectsContext} from \"../model/view-objects-context\";\nimport {DiskGroupData} from \"@generated/disk-group-data\";\nimport {DiskMgmtDiskGroupUtil} from \"@util/disk-mgmt-disk-group.util\";\n\n@Component({\n   selector: \"vsan-host-actions\",\n   templateUrl: \"host-actions.html\",\n   styleUrls: [\"host-actions.scss\"],\n   host: {class: \"vsan-actions\"},\n})\nexport class HostActionsComponent implements OnInit {\n\n   @Input()\n   autoClaimMode: boolean;\n\n   @Input()\n   hasEditPermission: boolean = false;\n\n   @Input()\n   clusterCapabilities: VsanCapabilityData;\n\n   @Input()\n   hasHostMaintenancePermission: boolean;\n\n   @Input()\n   selectedHost: HostData;\n\n   @Input()\n   isHostListView: boolean;\n\n   hasCreateDiskGroupAction: boolean;\n\n   DiskManagementActionAvailabilityService: typeof DiskManagementActionAvailabilityService =\n         DiskManagementActionAvailabilityService;\n\n   constructor(private navigationService: NavigationService,\n         private diskManagementActionAvailabilityService: DiskManagementActionAvailabilityService) {}\n\n   ngOnInit(): void {\n      this.hasCreateDiskGroupAction =\n            !this.autoClaimMode && !this.isHostListView && !this.selectedHost?.isSingleTierEnabled;\n   }\n\n   actionDisabled = (actionId: string): boolean => {\n      return !this.getActionStatus(actionId).available;\n   };\n\n   getActionButtonTitle = (actionId: string): string => {\n      return this.getActionStatus(actionId).message;\n   };\n\n   private getActionStatus = (actionId: string): ActionAvailableStatus => {\n      return this.diskManagementActionAvailabilityService.checkAvailability(this.getActionValidationContext(actionId));\n   };\n\n   private getActionValidationContext(actionId: string): DiskManagementActionContext {\n      return {\n         actionId: actionId,\n         hasEditPermission: this.hasEditPermission,\n         vsanConfig: null,\n         isEmptyCluster: null,\n         autoClaimMode: this.autoClaimMode,\n         diskGroup: null,\n         host: this.selectedHost,\n         storageData: null,\n         clusterCapabilities: this.clusterCapabilities,\n         hasHostMaintenancePermission: this.hasHostMaintenancePermission,\n         spaceEfficiencyConfig: null,\n      };\n   }\n\n   getPrecheckLabel(): string {\n      return DiskMgmtHostUtil.getDataMigrationPrecheckLabel(this.clusterCapabilities);\n   }\n\n   invokePrecheckEvacuation = (): void => {\n      const clusterRefUid: string = ManagedObject.contextObjectUid;\n\n      if (this.clusterCapabilities.isHostResourcePrecheckSupported) {\n         const evacuationContext: EvacuationContext =\n               VsanDiskMgmtActionsUtil.getEvacuationContext(this.selectedHost.hostRef);\n         this.navigationService.navigateTo(PlatformExtension.CLUSTER_DATA_MIGRATION_PRE_CHECK,\n               clusterRefUid, evacuationContext);\n         return;\n      }\n      const context: any = {\n         hostMor: this.selectedHost.hostRef,\n         objectName: this.selectedHost.name,\n         objectUid: \"\",\n      };\n      new ModalBuilder(\"preCheckEvacuation\")\n            .setSize(PreCheckEvacuationDialogSize.WIDTH,\n                  PreCheckEvacuationDialogSize.HEIGHT_WITH_OBJECTS)\n            .open(context);\n   };\n\n   invokeCreateDiskGroup = (): void => {\n      const context = {\n         clusterId: ManagedObject.contextObjectUid,\n         hostId: ManagedObject.uid(this.selectedHost.hostRef),\n         hostName: this.selectedHost.name,\n         isWitnessHost: this.selectedHost.isWitnessHost,\n      };\n      new ModalBuilder(\"diskManagement/createDiskGroup\")\n            .setSize(1000, 730)\n            .open(context)\n            .then((task: ManagedObject) => this.diskManagementActionAvailabilityService.taskStarted.next([task]));\n   };\n\n   viewHostDetails = (): void  => this.diskManagementActionAvailabilityService.hostDetailsViewSelected.next();\n\n   viewHostObjects = (): void => this.diskManagementActionAvailabilityService.objectsViewSelected\n         .next(new ViewObjectsContext(this.selectedHost, this.getPreselectedGroup(), null));\n\n   // For vSAN Max single tier the first group holds all disks claimed for vSAN Max and should be preselected\n   private getPreselectedGroup = (): DiskGroupData | null => {\n      return DiskMgmtDiskGroupUtil.getBreadcrumbPreselectedDiskGroup(this.selectedHost);\n   };\n}","/* Copyright 2021-2022 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {GlobalRefreshService} from \"@service/global-refresh.service\";\nimport {IdGenerator} from \"@util/id-generator\";\nimport {PromiseBaton} from \"@util/promise/promise-baton\";\n\n/**\n * This decorator solve the race condition problem.\n * - Problem - Call single async method multiple times and we can't be sure which result will come last.\n * - Solution - It will resolve/reject only the last promise. On global refresh we cancel the ongoing promise.\n */\nexport function RaceConditionSafe(): MethodDecorator {\n   return function (targetClass: any, functionName: string, descriptor: PropertyDescriptor): void {\n      // Prototype level\n      const id: string = IdGenerator.getUniqueId();\n      const func: (...args: any[]) => Promise<any> = descriptor.value;\n      const promiseBaton: PromiseBaton<any> = new PromiseBaton();\n\n      // Instance level\n      descriptor.value = function (...args: any[]): Promise<any> {\n         addEventListeners(id, promiseBaton);\n         return promiseBaton.resolveOnly.call(promiseBaton, func.apply(this, args));\n      };\n   };\n\n   function addEventListeners(id: string, promiseBaton: PromiseBaton<any>): void {\n      GlobalRefreshService.Instance.registerRefreshHandler(id, () => promiseBaton.cancelLastOne(), null, false);\n   }\n}\n","<!--Copyright 2019-2022 VMware, Inc. All rights reserved. -- VMware Confidential-->\n<vsan-delete-prompt\n      title=\"{{'vsan.dialog.recreateDiskGroup.title' | localized}}\"\n      [subtitle]=\"diskGroup?.vsanUuid\"\n      confirmText=\"{{'vsan.dialog.recreateDiskGroup.confirmationButtonText' | localized}}\"\n      [blockContent]=\"busy\"\n      [blockButton]=\"busy || !isValidDecommisionMode\"\n      [(alertMessages)]=\"alerts\"\n      [additionalButtonText]=\"goToPrecheckButtonText\"\n      (onConfirm)=\"onOkClicked()\"\n      (onAdditionalAction)=\"onGoToPrecheckClicked()\">\n   <div class=\"dialog-body\">\n      <vsan-validation *ngIf=\"warningMessages?.length && !alerts?.length\"\n                       alertType=\"warning\"\n                       [allowClose]=\"false\"\n                       [alertsExpanded] = \"true\"\n                       [allowExpandCollapse] = \"false\"\n                       [(alerts)]=\"warningMessages\">\n      </vsan-validation>\n\n      <!--Preselected decommission mode-->\n      <form class=\"clr-form clr-form-horizontal\" *ngIf=\"preselectedDecommissionMode\">\n         <div class=\"clr-form-control\">\n            <label for=\"recreate-disk-group-decommission-mode\" class=\"clr-control-label\">\n               {{\"vsan.dialog.precheckEvacuation.label\" | localized}}\n            </label>\n            <span id=\"recreate-disk-group-decommission-mode\">\n               {{localizedPreselectedDecommissionMode}}\n            </span>\n         </div>\n      </form>\n\n      <!-- Select decommission mode -->\n      <ng-container *ngIf=\"!busy && shouldAllowDataMigration && !preselectedDecommissionMode\">\n         <div id=\"dataOnDiskLabel\" *ngIf=\"!isDiskResourcePrecheckSupported\">\n            {{dataOnDiskGroupLabel}}\n         </div>\n         <div class=\"migration-mode-label\">\n            <span id=\"selectMigrationModeLabel\">{{\"vsan.dialog.deleteDiskGroup.migrationMode\" | localized}}</span>\n            <clr-signpost [vsan-signpost-title]=\"'vsan.dialog.deleteDiskGroup.migrationMode.signpost.label' | localized\">\n               <clr-signpost-content *clrIfOpen clrPosition=\"center-right\">\n                  <span>{{\"vsan.dialog.deleteDiskGroup.evacuateDataHelp\" | localized}}</span>\n               </clr-signpost-content>\n            </clr-signpost>\n         </div>\n         <vsan-pre-check-evacuation-summary\n               id=\"preCheckSummary\"\n               [hostMor]=\"host.hostRef\"\n               [evacuationEntityUuid]=\"evacuationEntityUuid\"\n               [selectedDecommissionMode]=\"selectedDecommissionMode\"\n               [preCheckRecommendationMessage]=\"preCheckRecommendationMessage\"\n               (selectedDecommissionModeSummaryChanged)=\"onDecommisionModeSummaryChanged($event)\"\n               (isDiskResourcePrecheckSupportedRetrieved)=\"onDiskResourcePrecheckSupportedChanged($event)\">\n         </vsan-pre-check-evacuation-summary>\n      </ng-container>\n\n      <!-- Confirmation text -->\n      <div id=\"footer-recreate\" class=\"strong-label\">\n         {{\"vsan.dialog.recreateDiskGroup.confirmationLabel\" | localized}}\n      </div>\n   </div>\n</vsan-delete-prompt>\n","/* Copyright 2020-2022 VMware, Inc. All rights reserved. -- VMware Confidential */\nexport class VsanDialogUtil {\n   static readonly CAPACITY_MANAGEMENT_DIALOG: VsanDialogProperties = {\n      width: 800,\n      height: 700,\n   };\n\n   static readonly DELETE_VOLUME_DIALOG: VsanDialogProperties = {\n      width: 500,\n      height: 250,\n   };\n\n   static readonly MIGRATE_VOLUME_DIALOG: VsanDialogProperties = {\n      width: 1030,\n      height: 710,\n   };\n\n   static readonly REAPPLY_VOLUME_POLICY_DIALOG: VsanDialogProperties = {\n      width: 700,\n      height: 250,\n   };\n\n   static readonly DUPLICATE_PCI_ID_MODEL_SELECTION_DIALOG: VsanDialogProperties = {\n      width: 800,\n      height: 500,\n   };\n\n   static readonly HEALTH_RESTORE_ACTION_DIALOG: VsanDialogProperties = {\n      width: 550,\n      height: 250,\n   };\n\n   // Keep in sync with plugin.xml extension point\n   static readonly CLUSTER_POWER_ON_DIALOG: VsanDialogProperties = {\n      width: 600,\n      height: 230,\n   };\n\n   static readonly VM_IO_DIAGNOSTICS_METRICS_DIALOG: VsanDialogProperties = {\n      width: 900,\n      height: 700,\n   };\n\n   static readonly VM_IO_DIAGNOSTICS_LATENCY_DIALOG: VsanDialogProperties = {\n      width: 1000,\n      height: 500,\n   };\n\n   static readonly VM_IO_DIAGNOSTICS_DOM_OWNER_LATENCY_DIALOG: VsanDialogProperties = {\n      width: 1000,\n      height: 400,\n   };\n\n   static readonly PERF_SVC_EDIT_ACTION_DIALOG: VsanDialogProperties = {\n      width: 800,\n      height: 450,\n   };\n\n   static readonly PERF_SVC_ENABLE_ACTION_DIALOG: VsanDialogProperties = {\n      width: 800,\n      height: 250,\n   };\n\n   static readonly CLAIM_DISKS_ACTION_DIALOG: VsanDialogProperties = {\n      width: 1200,\n      height: 650,\n   };\n\n   static readonly VSAN_DISK_CLAIM_ACTION_DIALOG: VsanDialogProperties = {\n      width: 670,\n      height: 300,\n   };\n}\n\nexport class VsanDialogProperties {\n   width: number;\n   height: number;\n}\n","/* Copyright 2020-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {Injectable} from \"@angular/core\";\nimport {Observable, Subject} from \"rxjs\";\nimport {BreadcrumbNavigation, VsanBreadcrumbService} from \"@component/navigation/vsan-breadcrumb.service\";\nimport {BreadcrumbRouteModel} from \"@component/navigation/breadcrumb-route.model\";\nimport {HostData} from \"@generated/host-data\";\nimport {DiskGroupData} from \"@generated/disk-group-data\";\nimport {DiskMgmtDiskGroupUtil, VsanDiskGroupLabelFormat} from \"@util/disk-mgmt-disk-group.util\";\nimport {DiskData} from \"@generated/disk-data\";\nimport {PmemDiskData} from \"@generated/pmem-disk-data\";\nimport {ViewObjectsContext} from \"./views/model/view-objects-context\";\nimport {StorageData} from \"@component/diskmgmt/model/storage-data\";\n\n/**\n * This service orchestrates breadcrumb routing in disk manages view. For example initializing links and callbacks\n * for cluster and hosts; updating links and callbacks for cluster, hosts, groups and storage when switching to\n * virtual objects mode and vice versa.\n */\n@Injectable()\nexport class DiskManagementRoutingService {\n\n   private clusterNavigated: Subject<void> = new Subject<void>();\n   onClusterNavigatedObs: Observable<void> = this.clusterNavigated.asObservable();\n\n   private hostNavigated: Subject<HostData> = new Subject<HostData>();\n   onHostNavigatedObs: Observable<HostData> = this.hostNavigated.asObservable();\n\n   private virtualObjectsRequested: Subject<ViewObjectsContext> = new Subject<ViewObjectsContext>();\n   onVirtualObjectsRequested: Observable<ViewObjectsContext> = this.virtualObjectsRequested.asObservable();\n\n   // Clear errors only when clicking on breadcrumb links.\n   private errorCleared: Subject<void> = new Subject<void>();\n   onErrorCleared: Observable<void> = this.errorCleared.asObservable();\n\n   hostList: HostData[];\n   isVirtualObjectsView: boolean;\n\n   @BreadcrumbNavigation()\n   viewRoutes: {\n      root: BreadcrumbRouteModel,\n      hosts: BreadcrumbRouteModel,\n      groups: BreadcrumbRouteModel,\n      storage: BreadcrumbRouteModel,\n   };\n\n   setHostList(hostList: HostData[]): void {\n      this.hostList = hostList;\n   }\n\n   setIsVirtualObjectsView(isVirtualObjectsView: boolean): void {\n      this.isVirtualObjectsView = isVirtualObjectsView;\n   }\n\n   setInitialViewRoots(): void {\n      this.viewRoutes = {\n         root: BreadcrumbRouteModel.link(null, null, DiskManagementRoutingLabels.CLUSTER),\n         hosts: BreadcrumbRouteModel.links(this.onHostNavigated.name),\n         groups: BreadcrumbRouteModel.links(this.onVoGroupNavigated.name, this.isGroupDisabled),\n         storage: BreadcrumbRouteModel.links(this.onVoStorageNavigated.name, this.isStorageDisabled),\n      };\n   }\n\n   setHostDetailsLevelRootCb(): void {\n      this.viewRoutes.root.onTrigger = this.onClusterNavigated.name;\n   }\n\n   private onClusterNavigated(): void {\n      this.clusterNavigated.next();\n   }\n\n   private onHostNavigated(): void {\n      this.hostNavigated.next(this.getHostBySelectedLink());\n   }\n\n   showBreadcrumbNavigation(): void {\n      // Display the breadcrumb navigation\n      VsanBreadcrumbService.show(true);\n      // Navigate to the root route initially\n      this.navigateToRootRoute();\n   }\n\n   navigateToHostRoute(hostLink: string): void {\n      this.viewRoutes.hosts.select(hostLink);\n      this.viewRoutes.hosts.navigate();\n   }\n\n   /**\n    * The method handles view objects action for the corresponding disk mgmt entity as follows:\n    * 1) Context properties are null. Navigate to cluster and \"All hosts\". Query cluster objects.\n    * 2) Host - Only host is provided by the context. Navigate to host and \"All groups\".\n    * Query host objects.\n    * 3) Group - Host and group is provided by the context. Navigate to host, group and \"All disks\".\n    * Query group objects.\n    * 4) Storage - Host, group and storage is provided by the context. Navigate to host, group and storage.\n    * Query storage objects.\n    */\n   viewObjects(context: ViewObjectsContext): void {\n      if (context.host) {\n         this.routeToVirtualObjectsHost(context.host);\n      } else {\n         this.routeToVirtualObjectsHost(null);\n         this.queryClusterObjects();\n         return;\n      }\n      if (context.group) {\n         this.routeToVirtualObjectsGroups(this.getDiskGroupLabel(context.group));\n      }\n      if (context.storage) {\n         this.routeToVirtualObjectsStorage(context.storage.name);\n         this.queryStorageObjects();\n      } else if (context.group) {\n         this.routeToVirtualObjectsStorage();\n         this.queryGroupObjects();\n      } else {\n         this.routeToVirtualObjectsGroups();\n         this.queryHostObjects();\n      }\n   }\n\n   // region Virtual objects view specific methods for breadcrumb routing to host, group and storage\n   private routeToVirtualObjectsHost(host: HostData): void {\n      const hostName: string = host?.name || DiskManagementRoutingLabels.ALL_HOSTS;\n      this.viewRoutes.root.onTrigger = this.onVoClusterNavigated.name;\n      this.updateHostLinks();\n      this.viewRoutes.hosts.onTrigger = this.onVoHostNavigated.name;\n      this.viewRoutes.hosts.isDisabled = this.isHostDisabled;\n      this.viewRoutes.groups.isHidden = host?.isSingleTierEnabled;\n      this.navigateToHostRoute(hostName);\n   }\n\n   private routeToVirtualObjectsGroups(groupLabel: string = DiskManagementRoutingLabels.ALL_GROUPS): void {\n      const groupLinks: string[] = [DiskManagementRoutingLabels.ALL_GROUPS, ...this.getGroupLinks()];\n      this.viewRoutes.groups.links = groupLinks;\n      this.viewRoutes.groups.select(groupLabel);\n      this.viewRoutes.groups.navigate();\n   }\n\n   private routeToVirtualObjectsStorage(storageName?: string): void {\n      const storageLinks: string[] = [this.getAllStorageLabel(), ...this.getStorageLinks()];\n      this.viewRoutes.storage.links = storageLinks;\n      this.viewRoutes.storage.select(storageName ? storageName : this.getAllStorageLabel());\n      this.viewRoutes.storage.navigate();\n   }\n\n   private getGroupLinks(): string[] {\n      const host: HostData = this.getHostBySelectedLink();\n      const usedGroups: DiskGroupData[] =\n            host.diskGroups.filter(diskGroup => !DiskMgmtDiskGroupUtil.isUnusedDiskGroup(diskGroup));\n      return usedGroups.map(diskGroup => this.getDiskGroupLabel(diskGroup));\n   }\n\n   private getStorageLinks(): string[] {\n      const diskGroup: DiskGroupData = this.getGroupBySelectedLink();\n      return this.getUsedGroupStorage(diskGroup).map(storage => storage.name);\n   }\n   // endregion\n\n   // region Virtual objects view specific breadcrumb route callbacks on cluster, host, group and storage levels\n   onVoClusterNavigated(): void {\n      this.errorCleared.next();\n      this.navigateToHostRoute(DiskManagementRoutingLabels.ALL_HOSTS);\n      this.queryClusterObjects();\n   }\n\n   onVoHostNavigated(): void {\n      this.errorCleared.next();\n      if (this.viewRoutes.hosts.selectedLink === DiskManagementRoutingLabels.ALL_HOSTS) {\n         this.queryClusterObjects();\n         return;\n      }\n\n      // If vSAN max is enabled and host is selected,\n      // preselect first group (hide it visualy) and all disks from it\n      if (this.getHostBySelectedLink().isSingleTierEnabled) {\n         this.routeToVirtualObjectsGroups(this.getGroupLinks()[0]);\n         this.routeToVirtualObjectsStorage();\n         this.viewRoutes.groups.isHidden = true;\n      } else {\n         this.routeToVirtualObjectsGroups();\n      }\n\n      this.queryHostObjects();\n   }\n\n   onVoGroupNavigated(): void {\n      this.errorCleared.next();\n      if (this.viewRoutes.groups.selectedLink === DiskManagementRoutingLabels.ALL_GROUPS) {\n         this.queryHostObjects();\n         return;\n      }\n      this.routeToVirtualObjectsStorage();\n      this.queryGroupObjects();\n   }\n\n   onVoStorageNavigated(): void {\n      this.errorCleared.next();\n      if (this.viewRoutes.storage.selectedLink === this.getAllStorageLabel()) {\n         this.queryGroupObjects();\n         return;\n      }\n      this.queryStorageObjects();\n   }\n\n   // Disable only dropdown items with no objectUuids that represent certain disk mgmt entities.\n   // For example \"host1\" with no objectUuids will be disabled while \"All hosts\" item cannot be\n   // disabled because it is selected when the cluster is navigated.\n   isHostDisabled = (link: string): boolean => this.hasNoPlacedObjects(this.findHostByName(link));\n\n   isGroupDisabled = (link: string): boolean => this.hasNoPlacedObjects(this.findDiskGroupByLabel(link));\n\n   isStorageDisabled = (link: string): boolean => this.hasNoPlacedObjects(this.findStorageByName(link));\n\n   private hasNoPlacedObjects(entity: {objectUuids: string[]}): boolean {\n      return entity && VsanUiUtils.isEmpty(entity.objectUuids);\n   }\n   // endregion\n\n   // region Methods for querying virtual objects on cluster, host, group and storage levels\n   private queryClusterObjects = (): void => this.queryObjects(null);\n\n   private queryHostObjects = (): void =>\n         this.queryObjects(new ViewObjectsContext(this.getHostBySelectedLink(), this.getPreselectedDiskGroup(), null));\n\n   private queryGroupObjects = (): void =>\n         this.queryObjects(new ViewObjectsContext(this.getHostBySelectedLink(), this.getGroupBySelectedLink(), null));\n\n   private queryStorageObjects = (): void => this.queryObjects(new ViewObjectsContext(\n         this.getHostBySelectedLink(),\n         this.getGroupBySelectedLink(),\n         this.getStorageBySelectedLink(),\n   ));\n\n   private getPreselectedDiskGroup = (): DiskGroupData | null => {\n      return DiskMgmtDiskGroupUtil.getBreadcrumbPreselectedDiskGroup(this.getHostBySelectedLink());\n   };\n\n   private queryObjects = (viewObjectsContext: ViewObjectsContext): void =>\n         this.virtualObjectsRequested.next(viewObjectsContext);\n   // endregion\n\n   // region Methods for getting host, disk group and storage by the corresponding link\n   private getHostBySelectedLink(): HostData {\n      return this.findHostByName(this.viewRoutes.hosts.selectedLink);\n   }\n\n   private findHostByName(hostName: string): HostData {\n      return this.hostList && this.hostList.find(host => host.name === hostName);\n   }\n\n   private getGroupBySelectedLink(): DiskGroupData {\n      return this.findDiskGroupByLabel(this.viewRoutes.groups.selectedLink);\n   }\n\n   private findDiskGroupByLabel(groupLabel: string): DiskGroupData {\n      const host: HostData = this.getHostBySelectedLink();\n      return host && host.diskGroups.find(diskGroup =>\n            this.getDiskGroupLabel(diskGroup) === groupLabel);\n   }\n\n   private getDiskGroupLabel(diskGroup: DiskGroupData): string {\n      return DiskMgmtDiskGroupUtil.getLabel(diskGroup, VsanDiskGroupLabelFormat.TYPE_AND_UUID);\n   }\n\n   private getStorageBySelectedLink(): StorageData {\n      const diskData: DiskData | PmemDiskData = this.findStorageByName(this.viewRoutes.storage.selectedLink);\n      return this.isSelectedGroupPMEM() ?\n            StorageData.fromPmemDiskData(diskData as PmemDiskData) :\n            StorageData.fromDiskData(diskData as DiskData);\n   }\n\n   private findStorageByName(storageName: string): DiskData | PmemDiskData {\n      const diskGroup: DiskGroupData = this.getGroupBySelectedLink();\n      return this.getUsedGroupStorage(diskGroup).find(storage => storage.name === storageName);\n   }\n   // endregion\n\n   private getAllStorageLabel = (): string =>\n         DiskManagementRoutingLabels.getAllStorage(this.isSelectedGroupPMEM());\n\n   private isSelectedGroupPMEM = (): boolean => DiskMgmtDiskGroupUtil.isPmemDiskGroup(this.getGroupBySelectedLink());\n\n   private getUsedGroupStorage(diskGroup: DiskGroupData): Array<DiskData | PmemDiskData> {\n      if (!diskGroup) {\n         return [];\n      }\n      if (DiskMgmtDiskGroupUtil.isPmemDiskGroup(diskGroup)) {\n         return diskGroup.pmemStorage;\n      } else if (!DiskMgmtDiskGroupUtil.isUnusedDiskGroup(diskGroup)) {\n         return diskGroup.disks;\n      }\n      return [];\n   }\n\n   navigateToRootRoute(): void {\n      this.viewRoutes.root.navigate();\n   }\n\n   resetHostsRoutes(): void {\n      this.viewRoutes.hosts.onTrigger = this.onHostNavigated.name;\n      this.viewRoutes.hosts.isDisabled = (): boolean => false;\n      this.updateHostLinks();\n   }\n\n   resetRootCallBack(): void {\n      this.viewRoutes.root.onTrigger = null;\n   }\n\n   updateHostLinks(): void {\n      const hostLinks: string[] = this.hostList.map(host => host.name);\n      this.viewRoutes.hosts.links = this.isVirtualObjectsView ?\n            [DiskManagementRoutingLabels.ALL_HOSTS, ...hostLinks] :\n            hostLinks;\n   }\n}\n\nexport class DiskManagementRoutingLabels {\n   static readonly CLUSTER: string =\n         VsanUiUtils.getString(\"vsan.manage.diskManagement.breadcrumb.cluster\");\n   static readonly ALL_HOSTS: string =\n         VsanUiUtils.getString(\"vsan.manage.diskManagement.breadcrumb.host.allHosts\");\n   static readonly ALL_GROUPS: string =\n         VsanUiUtils.getString(\"vsan.manage.diskManagement.breadcrumb.group.allGroups\");\n   static getAllStorage = (isPMEM: boolean): string => VsanUiUtils.getString(isPMEM ?\n         \"vsan.manage.diskManagement.breadcrumb.storage.allDevices\" :\n         \"vsan.manage.diskManagement.breadcrumb.storage.allDisks\");\n}\n","/* Copyright 2020-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {Injectable} from \"@angular/core\";\nimport {Icon} from \"@util/icon\";\nimport {HostData} from \"@generated/host-data\";\nimport {DiskMgmtDiskGroupUtil} from \"@util/disk-mgmt-disk-group.util\";\nimport {AvailabilityState} from \"@generated/availability-state\";\nimport {DiskData} from \"@generated/disk-data\";\nimport {ClaimOption} from \"@generated/claim-option\";\n\n/**\n * This service calculates counts for disk mgmt entities (i.e., hosts, disk groups, capacity disks,\n * vSAN direct disks, pmem storage) and provides a factory method for these entities on host and cluster level.\n */\n@Injectable()\nexport class DiskMgmtEntitiesSummaryService  {\n\n   private typeToModel: Map<DiskMgmtEntityType, DiskMgmtEntitySummary> = new Map([\n      [DiskMgmtEntityType.HOST, new DiskMgmtEntitySummary(\n            DiskMgmtEntityType.HOST,\n            Icon.HOST,\n            \"vsan.manage.diskManagement.overview.host\",\n            \"vsan.manage.diskManagement.overview.hosts\")],\n      [DiskMgmtEntityType.CAPACITY_DISK, new DiskMgmtEntitySummary(\n            DiskMgmtEntityType.CAPACITY_DISK,\n            Icon.CLAIM_AS_CAPACITY,\n            \"vsan.manage.diskManagement.overview.capacityDisk\",\n            \"vsan.manage.diskManagement.overview.capacityDisks\")],\n      [DiskMgmtEntityType.DISK_GROUP, new DiskMgmtEntitySummary(\n            DiskMgmtEntityType.DISK_GROUP,\n            Icon.DISK_GROUP_IMAGE,\n            \"vsan.manage.diskManagement.overview.diskGroup\",\n            \"vsan.manage.diskManagement.overview.diskGroups\")],\n      [DiskMgmtEntityType.SINGLE_TIER_DISKS, new DiskMgmtEntitySummary(\n            DiskMgmtEntityType.SINGLE_TIER_DISKS,\n            Icon.DISK,\n            \"vsan.manage.diskManagement.overview.singleTierDisk\",\n            \"vsan.manage.diskManagement.overview.singleTierDisks\")],\n      [DiskMgmtEntityType.VSAN_DIRECT_DISK, new DiskMgmtEntitySummary(\n            DiskMgmtEntityType.VSAN_DIRECT_DISK,\n            null,\n            \"vsan.manage.diskManagement.overview.vSanDirectDisk\",\n            \"vsan.manage.diskManagement.overview.vSanDirectDisks\")],\n      [DiskMgmtEntityType.PMEM_HOST, new DiskMgmtEntitySummary(\n            DiskMgmtEntityType.PMEM_HOST,\n            null,\n            \"vsan.manage.diskManagement.overview.pmemHost\",\n            \"vsan.manage.diskManagement.overview.pmemHosts\")],\n      [DiskMgmtEntityType.PMEM_STORAGE, new DiskMgmtEntitySummary(\n            DiskMgmtEntityType.PMEM_STORAGE,\n            null,\n            \"vsan.manage.diskManagement.overview.pmemStorage\",\n            \"vsan.manage.diskManagement.overview.pmemStorage\")],\n   ])  as Map<DiskMgmtEntityType, DiskMgmtEntitySummary>;\n\n   private clusterLevelItems: DiskMgmtEntityType[] = [\n      DiskMgmtEntityType.HOST,\n      DiskMgmtEntityType.DISK_GROUP,\n      DiskMgmtEntityType.CAPACITY_DISK,\n      DiskMgmtEntityType.SINGLE_TIER_DISKS,\n      DiskMgmtEntityType.VSAN_DIRECT_DISK,\n      DiskMgmtEntityType.PMEM_HOST];\n\n   private hostLevelItems: DiskMgmtEntityType[] = [\n      DiskMgmtEntityType.DISK_GROUP,\n      DiskMgmtEntityType.CAPACITY_DISK,\n      DiskMgmtEntityType.SINGLE_TIER_DISKS,\n      DiskMgmtEntityType.VSAN_DIRECT_DISK,\n      DiskMgmtEntityType.PMEM_STORAGE];\n\n   // Setters:\n   private setHostCount(count: number): void {\n      this.typeToModel.get(DiskMgmtEntityType.HOST).count = count;\n   }\n\n   private setDiskGroupCount(count: number): void {\n      this.typeToModel.get(DiskMgmtEntityType.DISK_GROUP).count = count;\n   }\n\n   private setSingleTierDiskCount(count: number): void {\n      this.typeToModel.get(DiskMgmtEntityType.SINGLE_TIER_DISKS).count = count;\n   }\n\n   private setCapacityDiskCount(count: number): void {\n      this.typeToModel.get(DiskMgmtEntityType.CAPACITY_DISK).count = count;\n   }\n\n   private setVsanDirectDiskCount(count: number): void {\n      this.typeToModel.get(DiskMgmtEntityType.VSAN_DIRECT_DISK).count = count;\n   }\n\n   private setPmemHostCount(count: number): void {\n      this.typeToModel.get(DiskMgmtEntityType.PMEM_HOST).count = count;\n      this.typeToModel.get(DiskMgmtEntityType.PMEM_STORAGE).count = count;\n   }\n\n   // Getters:\n   private getHostCount(hostList: HostData[]): number {\n      return hostList.length;\n   }\n\n   private getDiskGroupCount(hostList: HostData[]): number {\n      return hostList.reduce((sum, host) =>\n            sum += host.diskGroups.filter(DiskMgmtDiskGroupUtil.isVsanDiskGroup).length, 0);\n   }\n\n   private getSingleTierDiskCount(hostList: HostData[]): number {\n      return hostList.reduce((sum, host) =>\n            sum += host.diskGroups\n                  .filter(DiskMgmtDiskGroupUtil.isVsanMaxSingleTier)\n                  .reduce((diskSum, diskgroup) => diskSum += diskgroup.disks.length, 0),\n            0);\n   }\n\n   private getCapacityDiskCount(hostList: HostData[]): number {\n      return hostList.reduce((sum, host) => sum += (host.disks[AvailabilityState.IN_USE_BY_VSAN] as DiskData[])\n            .filter(this.isClaimedForCapacity).length, 0);\n   }\n   private isClaimedForCapacity(disk: DiskData): boolean {\n      return disk.claimOption === ClaimOption.ClaimForStorage;\n   }\n\n   private getVsanDirectDiskCount(hostList: HostData[]): number {\n      return hostList.reduce((sum, host) => sum += host.disks[AvailabilityState.ONLY_MANAGED_BY_VSAN].length, 0);\n   }\n\n   private getPmemHostCount(hostList: HostData[]): number {\n      return hostList.filter(host => host.pmemStorage[AvailabilityState.ONLY_MANAGED_BY_VSAN].length).length;\n   }\n\n   createEntities(isHostLevel: boolean, hostsData: HostData[]): DiskMgmtEntitySummary[] {\n      this.populateSummary(hostsData);\n      let summaries: DiskMgmtEntitySummary[] = this.getSummaries(isHostLevel);\n\n      if (VsanUiUtils.isEmpty(summaries)) {\n         summaries = [this.getEmptySummary(hostsData)];\n      }\n\n      return summaries;\n   }\n\n   private populateSummary(hostsData: HostData[]): void {\n      this.setHostCount(this.getHostCount(hostsData));\n      this.setDiskGroupCount(this.getDiskGroupCount(hostsData));\n      this.setSingleTierDiskCount(this.getSingleTierDiskCount(hostsData));\n      this.setCapacityDiskCount(this.getCapacityDiskCount(hostsData));\n      this.setVsanDirectDiskCount(this.getVsanDirectDiskCount(hostsData));\n      this.setPmemHostCount(this.getPmemHostCount(hostsData));\n   }\n\n   private getSummaries(isHostLevel: boolean): DiskMgmtEntitySummary[] {\n      const result: DiskMgmtEntitySummary[] = [];\n      const levelEntities: DiskMgmtEntityType[] = isHostLevel ? this.hostLevelItems : this.clusterLevelItems;\n      levelEntities.forEach((itemType) => {\n         const item: DiskMgmtEntitySummary = this.typeToModel.get(itemType);\n         if (item.count) {\n            result.push(this.typeToModel.get(itemType));\n         }\n      });\n\n      return result;\n   }\n\n   // Handle empty summary:\n   // * Host level - if host has no disks and groups show \"0 vSAN disk groups\" item.\n   // * Cluster level - when there are no hosts, summary is not shown at all but unavailable-view component.\n   private getEmptySummary(hostsData: HostData[]): DiskMgmtEntitySummary {\n      const defaultType: DiskMgmtEntityType = hostsData.some(host => host.isSingleTierEnabled)\n            ? DiskMgmtEntityType.SINGLE_TIER_DISKS : DiskMgmtEntityType.DISK_GROUP;\n      return this.typeToModel.get(defaultType);\n   }\n}\n\nexport class DiskMgmtEntitySummary {\n   constructor(public type: DiskMgmtEntityType,\n         public icon: Icon,\n         public labelKeySing: string,\n         public labelKeyPlural: string,\n         public count?: number) {}\n\n   get label(): string {\n      return VsanUiUtils.getString(this.count === 1 ? this.labelKeySing : this.labelKeyPlural, this.count);\n   }\n}\n\nexport enum DiskMgmtEntityType {\n   HOST,\n   CAPACITY_DISK,\n   DISK_GROUP,\n   SINGLE_TIER_DISKS,\n   VSAN_DIRECT_DISK,\n   PMEM_HOST,\n   PMEM_STORAGE,\n}\n","/* Copyright 2020-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, EventEmitter, Input, Output} from \"@angular/core\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {Icon} from \"@util/icon\";\nimport {HostData} from \"@generated/host-data\";\nimport {DiskGroupData} from \"@generated/disk-group-data\";\nimport {VsanCapabilityData} from \"@generated/vsan-capability-data\";\nimport {DiskMgmtDiskGroupUtil, VsanDiskGroupLabelFormat} from \"@util/disk-mgmt-disk-group.util\";\nimport {StorageGroupData} from \"./model/storage-group-data\";\nimport {AccordionPanelToggleExpandEventArg} from \"@directive/clr-accordion/clr-accordion-panel.directive\";\nimport {StorageIdentifier} from \"@component/diskmgmt/model/storage-identifier\";\nimport {SpaceEfficiencyConfig} from \"@generated/space-efficiency-config\";\nimport {StorageGroupIdentifier} from \"@component/diskmgmt/model/storage-group-identifier\";\n\n@Component({\n   templateUrl: \"storage-groups.html\",\n   selector: \"vsan-storage-groups\",\n   styleUrls: [\"storage-groups.scss\"],\n})\nexport class StorageGroupsComponent {\n\n   static GROUP_ID_PREFIX: string = \"group-\";\n   static CLR_DROPDOWN_TRIGGER_ATTR: string = \"clrdropdowntrigger\";\n   static ACTIONS_CLASS_HIDDEN: string = \"is-hidden\";\n   static ACTIONS_CLASS_NONE: string = \"is-none-display\";\n   VsanUiUtils: typeof VsanUiUtils = VsanUiUtils;\n   Icon: typeof Icon = Icon;\n\n   @Input()\n   autoClaimMode: boolean;\n\n   @Input()\n   spaceEfficiencyConfig: SpaceEfficiencyConfig = SpaceEfficiencyConfig.NONE;\n\n   _host: HostData;\n   @Input()\n   get host(): HostData {\n      return this._host;\n   }\n\n   set host(value: HostData) {\n      this._host = value;\n      if (VsanUiUtils.isUnset(value)) {\n         this.storageGroups = [];\n         return;\n      }\n      const storageGroups: StorageGroupData[] = [];\n      if (!VsanUiUtils.isEmpty(value.diskGroups)) {\n         storageGroups.push(...value.diskGroups.map(StorageGroupData.fromDiskGroup));\n         const unusedStorageGroup: StorageGroupData = storageGroups.find(DiskMgmtDiskGroupUtil.isUnusedDiskGroup);\n         StorageGroupData.setUnusedStorageData(value, unusedStorageGroup);\n      }\n      this.storageGroups = storageGroups;\n   }\n\n   @Input()\n   hasEditPermission: boolean = false;\n\n   @Input()\n   clusterCapabilities: VsanCapabilityData;\n\n   @Input()\n   hasHostMaintenancePermission: boolean;\n\n   @Input()\n   preselectedGroupIdentifier: StorageGroupIdentifier;\n\n   @Input()\n   preselectedStorage: StorageIdentifier;\n\n   @Output()\n   groupSelected: EventEmitter<StorageGroupIdentifier> = new EventEmitter<StorageGroupIdentifier>();\n\n   @Output()\n   storageSelected: EventEmitter<StorageIdentifier> = new EventEmitter<StorageIdentifier>();\n\n   openedGroupActionsDropdownEl: HTMLElement;\n   storageGroups: StorageGroupData[];\n\n   isUnusedDiskGroup(diskGroup: DiskGroupData): boolean {\n      return DiskMgmtDiskGroupUtil.isUnusedDiskGroup(diskGroup);\n   }\n\n   getActionColumnClass(diskGroup: DiskGroupData): string {\n      if (this.host?.isSingleTierEnabled) {\n         return StorageGroupsComponent.ACTIONS_CLASS_NONE;\n      }\n\n      return this.isUnusedDiskGroup(diskGroup) ? StorageGroupsComponent.ACTIONS_CLASS_HIDDEN : \"\";\n   }\n\n   isGroupExpanded(groupData: StorageGroupData): boolean {\n      return !!(this.preselectedGroupIdentifier &&\n            (this.getDiskGroupLabel(this.preselectedGroupIdentifier, VsanDiskGroupLabelFormat.UUID) ===\n             this.getDiskGroupLabel(groupData, VsanDiskGroupLabelFormat.UUID)));\n   }\n\n   createGroupId(groupData: StorageGroupData): string {\n      const groupLabelFormatted: string = this.getDiskGroupLabel(groupData, VsanDiskGroupLabelFormat.TYPE_AND_UUID).toLowerCase()\n            .replace(/\\s/g, \"-\");\n      return `${StorageGroupsComponent.GROUP_ID_PREFIX}${groupLabelFormatted}`;\n   }\n\n   /**\n    *  Select lastly expanded/collapsed group. If a group is collapsed group selection is removed.\n    */\n   toggleExpand(args: AccordionPanelToggleExpandEventArg<StorageGroupData>): void {\n      this.selectStorage(null);\n      const storageGroupIdentifier: StorageGroupIdentifier =\n            !args.isExpanded ? null : StorageGroupIdentifier.fromDiskGroup(args.model);\n      this.groupSelected.emit(storageGroupIdentifier);\n   }\n\n   selectStorage(storageIdentifier: StorageIdentifier): void {\n      this.storageSelected.emit(storageIdentifier);\n   }\n\n   getDiskGroupLabel = (group: DiskGroupData | StorageGroupIdentifier,\n         labelFormat: VsanDiskGroupLabelFormat = VsanDiskGroupLabelFormat.TYPE): string => {\n      return DiskMgmtDiskGroupUtil.getLabel(group, labelFormat);\n   };\n\n   getHealthKey = (group: DiskGroupData): string => {\n      return DiskMgmtDiskGroupUtil.getHealthKey(group);\n   };\n\n   getState = (group: DiskGroupData): string => {\n      return DiskMgmtDiskGroupUtil.getState(group);\n   };\n\n   getClaimedDisksLabel = (group: DiskGroupData): string => {\n      if (this.isUnusedDiskGroup(group)) {\n         const disksCount: number = group.disks.length + group.pmemStorage.length;\n         return VsanUiUtils.getString(disksCount === 1 ?\n               \"vsan.manage.diskManagement.host.diskGroups.disk.label\" :\n               \"vsan.manage.diskManagement.host.diskGroups.disks.label\",\n               disksCount);\n      }\n      if (!DiskMgmtDiskGroupUtil.isPmemDiskGroup(group)) {\n         const disksCount: number = group.disks.length;\n         return VsanUiUtils.getString(disksCount === 1 ?\n               \"vsan.manage.diskManagement.host.diskGroups.disk.label\" :\n               \"vsan.manage.diskManagement.host.diskGroups.disks.label\",\n               disksCount);\n      }\n      const devicesCount: number = group.pmemStorage.length;\n      return VsanUiUtils.getString( devicesCount === 1 ?\n            \"vsan.manage.diskManagement.host.diskGroups.device.label\" :\n            \"vsan.manage.diskManagement.host.diskGroups.devices.label\",\n            devicesCount);\n   };\n\n   getGroupType = (group: DiskGroupData): string => {\n      return DiskMgmtDiskGroupUtil.getType(group);\n   };\n\n   getAggregatedFsVersion = (group: DiskGroupData): string => {\n      const formatVersion: string = DiskMgmtDiskGroupUtil.getAggregatedFsVersion(group);\n      return VsanUiUtils.isEmpty(formatVersion) ? formatVersion :\n            VsanUiUtils.getString(\"vsan.manage.diskManagement.host.diskGroups.version\", formatVersion);\n   };\n\n   isGroupActionsDropdownOpen(triggerEl: HTMLElement): boolean {\n      return this.openedGroupActionsDropdownEl === triggerEl;\n   }\n\n   handleAccordionTitleClick(e: Event, triggerEl: HTMLElement): void {\n      const targetEl: HTMLElement = e.target as HTMLElement;\n      const isClickedOnGroupActionsDropdown: boolean = triggerEl.contains(targetEl);\n\n      if (isClickedOnGroupActionsDropdown) {\n         // We need to manually cancel the event because it will toggle the accordion\n         this.cancelAccordionToggleEvent(e);\n         this.toggleGroupActionsDropdown(this.hasClrDropdownTriggerAttr(targetEl), triggerEl);\n      } else {\n         // If we click somewhere else then close the opened dropdown and don't cancel the toggle event\n         this.openedGroupActionsDropdownEl = null;\n      }\n   }\n\n   /**\n    * Cancel accordion expand/collapse event when clicked on the group actions dropdown trigger btn/icon.\n    */\n   private cancelAccordionToggleEvent(e: Event): void {\n      e.cancelBubble = true;\n      e.stopImmediatePropagation();\n      e.stopPropagation();\n   }\n\n   private hasClrDropdownTriggerAttr(el: HTMLElement): boolean {\n      return el.hasAttribute(StorageGroupsComponent.CLR_DROPDOWN_TRIGGER_ATTR) ||\n            el.parentElement.hasAttribute(StorageGroupsComponent.CLR_DROPDOWN_TRIGGER_ATTR);\n   }\n\n   /**\n    * - If we click on a new group actions dropdown then open it.\n    * - If we click on the currently opened group actions dropdown then close it.\n    * - If we click on a dropdown item (e.g. Remove) then close the currently opened group actions dropdown.\n    */\n   private toggleGroupActionsDropdown(isDropdownTriggerClick: boolean, clickedDropdownEl: HTMLElement): void {\n      this.openedGroupActionsDropdownEl =\n            (isDropdownTriggerClick && !this.isGroupActionsDropdownOpen(clickedDropdownEl))\n                  ? clickedDropdownEl\n                  : null;\n   }\n}","/* Copyright 2020-2022 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, HostBinding, Input} from \"@angular/core\";\nimport {DiskManagementActionAvailabilityService} from \"../validation/disk-management-action-availability.service\";\nimport {NavigationService, PlatformExtension} from \"@navigation/navigation.service\";\nimport {ActionAvailableStatus} from \"@util/validation/action-available-status\";\nimport {DiskManagementActionContext} from \"../validation/disk-management-action-context\";\nimport {DiskGroupData} from \"@generated/disk-group-data\";\nimport {HostData} from \"@generated/host-data\";\nimport {DiskMgmtDiskGroupUtil} from \"@util/disk-mgmt-disk-group.util\";\nimport {VsanDiskMgmtActionsUtil} from \"@util/vsan-disk-mgmt-actions-util\";\nimport {ManagedObject} from \"@service/managed-object\";\nimport {ModalBuilder} from \"@util/modal-builder\";\nimport {DiskGroupActionContext} from \"@navigation/context/disk-group-action-context\";\nimport {HostActionData} from \"@model/host-action.data\";\nimport {DiskGroupActionData} from \"@model/disk-group-action.data\";\nimport {VsanCapabilityData} from \"@generated/vsan-capability-data\";\nimport {EvacuationContext} from \"@navigation/context/evacuation.context\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {PreCheckEvacuationDialogSize} from \"@component/precheck/pre-check-evacuation-dialog-size\";\nimport {ViewObjectsContext} from \"../model/view-objects-context\";\n\n@Component({\n   selector: \"vsan-storage-group-actions\",\n   templateUrl: \"storage-group-actions.html\",\n   styleUrls: [\"storage-group-actions.scss\"],\n})\nexport class StorageGroupActionsComponent {\n\n   @HostBinding(\"class\")\n   hostClass: string = \"vsan-dropdown-actions\";\n\n   @Input()\n   autoClaimMode: boolean;\n\n   @Input()\n   hasEditPermission: boolean = false;\n\n   @Input()\n   clusterCapabilities: VsanCapabilityData;\n\n   @Input()\n   hasHostMaintenancePermission: boolean;\n\n   @Input()\n   selectedDiskGroup: DiskGroupData;\n\n   @Input()\n   selectedHost: HostData;\n\n   DiskManagementActionAvailabilityService: typeof DiskManagementActionAvailabilityService =\n         DiskManagementActionAvailabilityService;\n\n   constructor(private navigationService: NavigationService,\n         private diskManagementActionAvailabilityService: DiskManagementActionAvailabilityService) {}\n\n   actionDisabled = (actionId: string): boolean => {\n      return !this.getActionStatus(actionId).available;\n   };\n\n   getActionButtonTitle = (actionId: string): string => {\n      return this.getActionStatus(actionId).message;\n   };\n\n   private getActionStatus = (actionId: string): ActionAvailableStatus => {\n      return this.diskManagementActionAvailabilityService.checkAvailability(this.getActionValidationContext(actionId));\n   };\n\n   private getActionValidationContext(actionId: string): DiskManagementActionContext {\n      return {\n         actionId: actionId,\n         hasEditPermission: this.hasEditPermission,\n         vsanConfig: null,\n         isEmptyCluster: null,\n         autoClaimMode: this.autoClaimMode,\n         diskGroup: this.selectedDiskGroup,\n         host: this.selectedHost,\n         storageData: null,\n         clusterCapabilities: this.clusterCapabilities,\n         hasHostMaintenancePermission: this.hasHostMaintenancePermission,\n         spaceEfficiencyConfig: null,\n      };\n   }\n\n   get isVsanDiskGroup(): boolean {\n      return DiskMgmtDiskGroupUtil.isVsanDiskGroup(this.selectedDiskGroup);\n   }\n\n   get isPmemDiskGroup(): boolean {\n      return DiskMgmtDiskGroupUtil.isPmemDiskGroup(this.selectedDiskGroup);\n   }\n\n   get precheckUnavailable(): boolean {\n      return this.actionDisabled(DiskManagementActionAvailabilityService.PRE_CHECK_ID);\n   }\n\n   get canBeRecreated(): boolean {\n      return this.clusterCapabilities\n            && this.clusterCapabilities.isRecreateDiskGroupSupported\n            && !this.autoClaimMode;\n   }\n\n   getPrecheckLabel(): string {\n      return DiskMgmtDiskGroupUtil.getDataMigrationPrecheckLabel(this.clusterCapabilities);\n   }\n\n   viewGroupObjects = (): void => this.diskManagementActionAvailabilityService.objectsViewSelected\n         .next(new ViewObjectsContext(this.selectedHost, this.selectedDiskGroup, null));\n\n   showViewGroupObjectsAction = (): boolean => !DiskMgmtDiskGroupUtil.isUnusedDiskGroup(this.selectedDiskGroup) &&\n         this.clusterCapabilities.isObjectIdentitiesSupported;\n\n   goToPrecheckEvacuation = (): void => {\n      const clusterRefUid: string = ManagedObject.contextObjectUid;\n\n      // Use the cache disk's uuid as group's uuid.\n      const objUuid: string = this.selectedDiskGroup.disks.find(d => d.isMappedAsCache).vsanUuid;\n\n      if (this.clusterCapabilities.isDiskResourcePrecheckSupported) {\n         const evacuationContext: EvacuationContext =\n               VsanDiskMgmtActionsUtil.getEvacuationContext(this.selectedDiskGroup.ownerHostRef, objUuid);\n         this.navigationService.navigateTo(PlatformExtension.CLUSTER_DATA_MIGRATION_PRE_CHECK,\n               clusterRefUid, evacuationContext);\n         return;\n      }\n      const context: any = {\n         hostMor: this.selectedDiskGroup.ownerHostRef,\n         objectName: VsanUiUtils.getString(\"vsan.dialog.precheckEvacuation.subtitle\", this.selectedDiskGroup.name),\n         objectUid: objUuid,\n      };\n\n      new ModalBuilder(\"preCheckEvacuation\")\n            .setSize(PreCheckEvacuationDialogSize.WIDTH,\n                  PreCheckEvacuationDialogSize.HEIGHT_WITH_OBJECTS)\n            .open(context);\n   };\n\n   addDisks = (): void => {\n      new ModalBuilder(\"diskManagement/addDisk\")\n            .open(this.selectedDiskGroup)\n            .then((task: ManagedObject) => this.diskManagementActionAvailabilityService.taskStarted.next([task]));\n   };\n\n   delete = (): void => {\n      const height: number = this.precheckUnavailable ?\n            VsanDiskMgmtActionsUtil.DELETE_DISK_GROUP_HEIGHT_SMALL :\n            VsanDiskMgmtActionsUtil.DELETE_DISK_GROUP_HEIGHT_MEDIUM;\n\n      new ModalBuilder(\"diskManagement/deleteDiskGroup\")\n            .setSize(VsanDiskMgmtActionsUtil.DELETE_DISK_GROUP_WIDTH, height)\n            .open(this.getActionContext())\n            .then((task: ManagedObject) => {\n               this.diskManagementActionAvailabilityService.taskStarted.next([task]);\n            });\n   };\n\n   recreate = (): void => {\n      const height: number = this.precheckUnavailable\n            ? VsanDiskMgmtActionsUtil.RECREATE_DIALOG_HEIGHT_SMALL\n            : VsanDiskMgmtActionsUtil.RECREATE_DIALOG_HEIGHT_MEDIUM;\n      new ModalBuilder(\"diskManagement/recreateDiskGroup\")\n            .setSize(VsanDiskMgmtActionsUtil.RECREATE_DIALOG_WIDTH, height)\n            .open(this.getActionContext())\n            .then((task: ManagedObject) => {\n               this.diskManagementActionAvailabilityService.taskStarted.next([task]);\n            });\n   };\n\n   mount = (): void => {\n      new ModalBuilder(\"diskManagement/mountDiskGroup\")\n            .setSize(VsanDiskMgmtActionsUtil.MOUNT_DISK_GROUP_DIALOG_WIDTH,\n                  VsanDiskMgmtActionsUtil.MOUNT_DISK_GROUP_DIALOG_HEIGHT)\n            .open(this.getActionContext())\n            .then((task: ManagedObject) => {\n               this.diskManagementActionAvailabilityService.taskStarted.next([task]);\n            });\n   };\n\n   unmount = (): void => {\n      const height: number = this.precheckUnavailable\n            ? VsanDiskMgmtActionsUtil.UNMOUNT_DISK_GROUP_DIALOG_HEIGHT_SMALL\n            : VsanDiskMgmtActionsUtil.UNMOUNT_DISK_GROUP_DIALOG_HEIGHT_MEDIUM;\n      new ModalBuilder(\"diskManagement/unmountDiskGroup\")\n            .setSize(VsanDiskMgmtActionsUtil.UNMOUNT_DISK_GROUP_DIALOG_WIDTH, height)\n            .open(this.getActionContext())\n            .then((task: ManagedObject) => {\n               this.diskManagementActionAvailabilityService.taskStarted.next([task]);\n            });\n   };\n\n   stopManagingPmem(): void {\n      new ModalBuilder(\"diskManagement/stopManagingPmem\")\n            .setSize(VsanDiskMgmtActionsUtil.STOP_MANAGING_PMEM_WIDTH,\n                  VsanDiskMgmtActionsUtil.STOP_MANAGING_PMEM_HEIGHT)\n            .open()\n            .then((task: ManagedObject) => this.diskManagementActionAvailabilityService.taskStarted.next([task]));\n   }\n\n   private getActionContext = (): DiskGroupActionContext => {\n      return {\n         host: HostActionData.fromHostData(this.selectedHost),\n         diskGroup: DiskGroupActionData.fromDiskGroupData(this.selectedDiskGroup),\n      };\n   };\n}","/* Copyright 2020-2022 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {ChangeDetectionStrategy, Component, Input} from \"@angular/core\";\nimport {HostData} from \"@generated/host-data\";\nimport {VsanCapabilityData} from \"@generated/vsan-capability-data\";\nimport {VsanConfigSpec} from \"@generated/vsan-config-spec\";\nimport {LoadingAwareProperty} from \"@model/loading-aware-property\";\nimport {EditVsanManagedDiskClaimContext} from \"@navigation/context/edit-vsan-managed-disk-claim-context\";\nimport {ManagedObject} from \"@service/managed-object\";\nimport {DiskMgmtHostUtil} from \"@util/disk-mgmt-host.util\";\nimport {ModalBuilder} from \"@util/modal-builder\";\nimport {ActionAvailableStatus} from \"@util/validation/action-available-status\";\nimport {VsanDialogProperties, VsanDialogUtil} from \"@util/vsan-dialog-util\";\nimport {VsanRoutes} from \"../../../../vsan-routes\";\nimport {ViewObjectsContext} from \"../model/view-objects-context\";\nimport {DiskManagementActionAvailabilityService} from \"../validation/disk-management-action-availability.service\";\nimport {DiskManagementActionContext} from \"../validation/disk-management-action-context\";\n\n@Component({\n   selector: \"vsan-cluster-actions\",\n   templateUrl: \"cluster-actions.html\",\n   styleUrls: [\"cluster-actions.scss\"],\n   host: {class: \"vsan-actions\"},\n   changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ClusterActionsComponent {\n\n   @Input()\n   autoClaimMode: boolean;\n\n   @Input()\n   vsanConfig: VsanConfigSpec;\n\n   @Input()\n   clusterName: string;\n\n   @Input()\n   hasEditPermission: boolean = false;\n\n   @Input()\n   clusterCapabilities: VsanCapabilityData;\n\n   @Input()\n   hasDuplicatePciIdDevices: LoadingAwareProperty<boolean>;\n\n   private _allHosts: HostData[];\n   @Input()\n   set allHosts(value: HostData[]) {\n      this._allHosts = value;\n      this.clusterEligibleDiskCount = DiskMgmtHostUtil.getEligibleDiskCount(value);\n   }\n\n   get allHosts(): HostData[] {\n      return this._allHosts;\n   }\n\n   clusterEligibleDiskCount: number = 0;\n\n   DiskManagementActionAvailabilityService: typeof DiskManagementActionAvailabilityService =\n         DiskManagementActionAvailabilityService;\n\n   constructor(private diskManagementActionAvailabilityService: DiskManagementActionAvailabilityService) {}\n\n   actionDisabled(actionId: string): boolean {\n      return !this.getActionStatus(actionId).available;\n   }\n\n   getActionButtonDisabledReason(actionId: string): string {\n      if (actionId === DiskManagementActionAvailabilityService.VIEW_DUPLICATE_PCI_ID_DEVICES &&\n            this.hasDuplicatePciIdDevices.isLoading) {\n         return null;\n      }\n      return this.getActionStatus(actionId).message;\n   }\n\n   private getActionStatus(actionId: string): ActionAvailableStatus {\n      return this.diskManagementActionAvailabilityService.checkAvailability(this.getActionValidationContext(actionId));\n   }\n\n   private getActionValidationContext(actionId: string): DiskManagementActionContext {\n      return {\n         actionId: actionId,\n         hasEditPermission: this.hasEditPermission,\n         vsanConfig: this.vsanConfig,\n         isEmptyCluster: !this.allHosts?.length,\n         autoClaimMode: this.autoClaimMode,\n         allHosts: this.allHosts,\n         clusterCapabilities: this.clusterCapabilities,\n         hasHostMaintenancePermission: null,\n         spaceEfficiencyConfig: null,\n      };\n   }\n\n   invokeSemiAutoClaim(): void {\n      new ModalBuilder(`${VsanRoutes.DISK_MANAGEMENT_VIEW}/semiAutoClaim`)\n            .setSize(VsanDialogUtil.CLAIM_DISKS_ACTION_DIALOG.width,\n                  VsanDialogUtil.CLAIM_DISKS_ACTION_DIALOG.width)\n            .open()\n            .then((tasks: ManagedObject[]) =>\n                  this.diskManagementActionAvailabilityService.taskStarted.next(tasks));\n   }\n\n   viewDuplicatePciIdDevices(): void {\n      if (this.hasDuplicatePciIdDevices.isLoading) {\n         return;\n      }\n      new ModalBuilder(`${VsanRoutes.UPDATE_VIEW}/updateDuplicatePciIdDevices`)\n            .setSize(VsanDialogUtil.DUPLICATE_PCI_ID_MODEL_SELECTION_DIALOG.width,\n                  VsanDialogUtil.DUPLICATE_PCI_ID_MODEL_SELECTION_DIALOG.height)\n            .open();\n   }\n\n   editVsanDiskManagement(): void {\n      new ModalBuilder(`${VsanRoutes.SERVICES_VIEW}/editVsanManagedDiskClaim`)\n            .setSize(VsanDialogUtil.VSAN_DISK_CLAIM_ACTION_DIALOG.width,\n                  VsanDialogUtil.VSAN_DISK_CLAIM_ACTION_DIALOG.height)\n            .open({clusterName: this.clusterName} as EditVsanManagedDiskClaimContext)\n            .then((taskRef: ManagedObject) => {\n               this.diskManagementActionAvailabilityService.taskStarted.next([taskRef]);\n            });\n   }\n\n   viewClusterObjects = (): void => this.diskManagementActionAvailabilityService.objectsViewSelected\n         .next(new ViewObjectsContext(null, null, null));\n}","/* Copyright 2020-2022 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component} from \"@angular/core\";\nimport {ScsiDisk} from \"@component/diskmgmt/model/scsi-disk.data\";\nimport {DecommissionMode} from \"@generated/decommission-mode\";\nimport {DiskData} from \"@generated/disk-data\";\nimport {DiskGroupMutationService} from \"@generated/disk-group-mutation-service\";\nimport {RemoveDiskSpec} from \"@generated/remove-disk-spec\";\nimport {VsanCapabilityProvider} from \"@generated/vsan-capability-provider\";\nimport {DeleteVsanDirectDisksContext} from \"@navigation/context/delete-vsan-direct-disks-context\";\nimport {ErrorHandler} from \"@service/flow/error-handler.decorator\";\nimport {LoaderName} from \"@service/flow/loader-name\";\nimport {Loader} from \"@service/flow/loader.decorator\";\nimport {LoadingIndicator} from \"@service/flow/loading-indicator.decorator\";\nimport {ManagedObject} from \"@service/managed-object\";\nimport {SrMessageType} from \"@service/screen-reader-announcer.service\";\nimport {VsanDiskMgmtActionsUtil} from \"@util/vsan-disk-mgmt-actions-util\";\nimport {VsanSignpostUtil} from \"@util/vsan-signpost-util\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\n\n@Component({\n   templateUrl: \"delete-vsan-direct-disks.html\",\n   styleUrls: [\"../actions-common.scss\"],\n   selector: \"vsan-delete-vsan-direct-disks\",\n})\nexport class DeleteVsanDirectDisksComponent {\n   private readonly SIGNPOST_CONTENT_WIDTH: number = 360;\n   private readonly SIGNPOST_CONTENT_HEIGHT: number = 146;\n   readonly dataMigrationModeSignpostId: string = \"data-migration-mode-signpost\";\n\n   alerts: string[];\n   disks: DiskData[];\n   warningMessage: string;\n   footerText: string;\n   isDecomModeForVsanDirectDisksSupported: boolean;\n   selectedDecommissionMode: DecommissionMode = DecommissionMode.noAction;\n   unsupportedDecommissionModes: DecommissionMode[] = [DecommissionMode.ensureObjectAccessibility];\n\n   @LoadingIndicator({\n      name: [LoaderName.ON_INIT, LoaderName.ON_CONFIRM],\n   })\n   busy: boolean;\n\n   constructor(private diskGroupMutationService: DiskGroupMutationService,\n         private capabilitiesService: VsanCapabilityProvider) {\n   }\n\n   @Loader({\n      name: LoaderName.ON_INIT,\n      srMessage: \"vsan.dialog.deleteVsanDirectDisk.title\",\n      srMessageType: SrMessageType.PAGE_TITLE,\n   })\n   async ngOnInit(): Promise<void> {\n      const context: DeleteVsanDirectDisksContext = VsanUiUtils.getModalContext();\n      this.disks = context.disks;\n      this.warningMessage = VsanUiUtils.getString(\"vsan.dialog.deleteVsanDirectDisk.description\");\n      this.footerText = this.disks.length === 1\n            ? VsanUiUtils.getString(\"vsan.confirmDiskRemoveOperation.footerRemoveDisk\")\n            : VsanUiUtils.getString(\"vsan.confirmDiskRemoveOperation.footerRemoveDisks\");\n\n      this.isDecomModeForVsanDirectDisksSupported =\n            await this.capabilitiesService.getIsDecomModeForVsanDirectDisksSupported(ManagedObject.contextObject);\n      if (this.isDecomModeForVsanDirectDisksSupported) {\n         VsanUiUtils.setModalDialogHeight(VsanDiskMgmtActionsUtil.DELETE_VSAN_DIRECT_DISKS_HEIGHT_PRECHECK);\n      }\n   }\n\n   onSelectedDecommissionModeChanged = (decommissionMode: DecommissionMode) => {\n      this.selectedDecommissionMode = decommissionMode;\n   };\n\n   @Loader({name: LoaderName.ON_CONFIRM})\n   async onOkClicked(): Promise<void> {\n      const scsiDisks: ScsiDisk[] = this.disks.map(d => d.disk);\n      const spec: RemoveDiskSpec = RemoveDiskSpec.Factory.create(this.selectedDecommissionMode, scsiDisks);\n\n      const task: ManagedObject = await this.diskGroupMutationService.removeVsanDirectDisks(ManagedObject.contextObject,\n            spec);\n      this.handleTask(task);\n   }\n\n   private handleTask = (task: ManagedObject) => {\n      VsanUiUtils.closeModalDialog(task);\n   };\n\n   @ErrorHandler({name: LoaderName.ON_CONFIRM})\n   private onDeleteOperationError(message: any): void {\n      this.alerts = [message];\n   }\n\n   getDataMigrationModeSignpostPosition(): string {\n      return VsanSignpostUtil.getPosition(this.dataMigrationModeSignpostId, this.SIGNPOST_CONTENT_WIDTH,\n            this.SIGNPOST_CONTENT_HEIGHT, true);\n   }\n}\n","/* Copyright 2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component} from \"@angular/core\";\nimport {EnumeratedFilterSelectionResolver} from \"@component/datagrid/filter/enumerated-filter.component\";\nimport {DiskMgmtFilterComponent} from \"./disk-mgmt-filter.component\";\nimport {DiskMgmtDiskUtil} from \"@util/disk-mgmt-disk.util\";\nimport {StorageData} from \"@component/diskmgmt/model/storage-data\";\n\n@Component({\n   templateUrl: \"disk-mgmt-filter.html\",\n   selector: \"vsan-storage-group-details-filter-drive-locality\",\n   styleUrls: [\"disk-mgmt-filter.scss\"],\n})\nexport class StorageGroupDetailsFilterDriveLocalityComponent extends DiskMgmtFilterComponent<StorageData> {\n\n   readonly comparator: EnumeratedFilterSelectionResolver<StorageData, string> =\n         new class extends EnumeratedFilterSelectionResolver<StorageData, string> {\n            isSelected(item: StorageData, selectedLocalityKeys: string[]): boolean {\n               return selectedLocalityKeys\n                     .some(locality => locality === DiskMgmtDiskUtil.localizeLocality(item.driveLocality));\n            }\n         }();\n}","/* Copyright 2019-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {ChangeDetectorRef, Component, OnInit} from \"@angular/core\";\nimport {DiskGroupMutationService} from \"@generated/disk-group-mutation-service\";\nimport {DiskManagementService} from \"@generated/disk-management-service\";\nimport {VsanClaimDisksData} from \"@generated/vsan-claim-disks-data\";\nimport {VsanClaimHostDiskMappingsSpec} from \"@generated/vsan-claim-host-disk-mappings-spec\";\nimport {VsanConfigService} from \"@generated/vsan-config-service\";\nimport {VsanConfigSpec} from \"@generated/vsan-config-spec\";\nimport {ErrorHandler} from \"@service/flow/error-handler.decorator\";\nimport {LoaderName} from \"@service/flow/loader-name\";\nimport {Loader} from \"@service/flow/loader.decorator\";\nimport {LoadingIndicator} from \"@service/flow/loading-indicator.decorator\";\nimport {ManagedObject} from \"@service/managed-object\";\nimport {ArrayUtils} from \"@util/array-util\";\nimport {Logger} from \"@util/logger\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\n\n@Component({\n   templateUrl: \"claim-disks-dialog.html\",\n   selector: \"vsan-claim-disks-dialog\",\n})\nexport class ClaimDisksDialogComponent implements OnInit {\n\n   @LoadingIndicator()\n   loading: boolean;\n\n   @LoadingIndicator({name: LoaderName.ON_CONFIRM})\n   inProgress: boolean;\n\n   vsanConfigSpec: VsanConfigSpec;\n   hostsClaimingData: Map<string, VsanClaimDisksData>;\n\n   isConfigValid: boolean;\n   claimDisksSpecs: VsanClaimHostDiskMappingsSpec[];\n   alertMessages: string[] = [];\n   clusterRef: ManagedObject;\n\n   constructor(private vsanConfigService: VsanConfigService,\n         private diskManagementService: DiskManagementService,\n         private diskgroupService: DiskGroupMutationService,\n         private changeDetector: ChangeDetectorRef) {\n   }\n\n   @Loader()\n   async ngOnInit(): Promise<void> {\n      const context: any = VsanUiUtils.getModalContext();\n      // clusterRef is set via context when this dialog is opened from Datastore -> Capacity page.\n      this.clusterRef = context?.clusterRef || ManagedObject.contextObject;\n      this.vsanConfigSpec = await this.vsanConfigService.getVsanConfigSpec(this.clusterRef);\n      // We need to await the vsan config spec before we can query the disks data\n      this.hostsClaimingData = await this.queryHostClaimingData(this.vsanConfigSpec.isVsanMaxEnabled);\n   }\n\n   private async queryHostClaimingData(isVsanMaxEnabled: boolean): Promise<Map<string, VsanClaimDisksData>> {\n      const hostsClaimingData: any = await this.diskManagementService.getHostsClaimingData(this.clusterRef,\n            isVsanMaxEnabled);\n      return new Map<string, VsanClaimDisksData>(Object.entries(hostsClaimingData));\n   }\n\n   @Loader({name: LoaderName.ON_CONFIRM})\n   async onOkClicked(): Promise<void> {\n      if (!this.isConfigValid) {\n         return;\n      }\n      this.alertMessages = [];\n      const tasks: ManagedObject[] = this.vsanConfigSpec.isVsanMaxEnabled ?\n            [await this.claimVsanMaxDisks()] // Only one task from this API, so wrap as array here\n            : await this.claimDiskGroups();\n\n      VsanUiUtils.closeModalDialog(tasks);\n   }\n\n   private async claimDiskGroups(): Promise<ManagedObject[]> {\n      const claimDisksTasks: Promise<ManagedObject[]>[] = this.claimDisksSpecs\n            .filter(claimDisksSpec => !VsanUiUtils.isEmpty(claimDisksSpec.disks))\n            .map(claimDisksSpec => this.diskgroupService.claimDiskGroup(claimDisksSpec.hostRef, claimDisksSpec));\n\n      const tasksPerHost: ManagedObject[][] = await Promise.all(claimDisksTasks);\n      return ArrayUtils.flatten(tasksPerHost);\n   }\n\n   private async claimVsanMaxDisks(): Promise<ManagedObject> {\n      return this.diskgroupService.claimStoragePoolDisks(this.clusterRef, this.claimDisksSpecs);\n   }\n\n   @ErrorHandler()\n   private handleError(error: string): void {\n      Logger.debug(\"Failed to start one or more tasks!\", error);\n      this.alertMessages.push(error);\n   }\n\n   configAcceptabilityChanged(isValid: boolean): void {\n      this.isConfigValid = isValid;\n      this.changeDetector.detectChanges();\n   }\n}\n","/* Copyright 2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Injectable} from \"@angular/core\";\nimport {ResultItem} from \"@service/client/core/query.data\";\nimport {ClusterComputeResource, HostStorageSystem, HostSystem} from \"@service/client/dataservice/data-service-property\";\nimport {DataServiceQueryResult} from \"@service/client/dataservice/data-service.data\";\nimport {DataServiceClient} from \"@service/client/dataservice/data-service.service\";\nimport {VpxdModelFactory} from \"@service/client/vpxd/vpxd-model-factory.service\";\nimport {DataServiceResult} from \"@service/data-access.service\";\nimport {ManagedObject, ManagedObjectUtils} from \"@service/managed-object\";\n\n// TODO (REPA) After switch to remote plugin:\n//  * move to a proper service\n//  * create proper UI models for all the data being retrieved. Currently we cannot do so because the data in the local\n//  plugin is retrieved from H5C provider which returns its own model.\n@Injectable()\nexport class DisksPropertyRetriever {\n   private static readonly ICON_ID: string = \"primaryIconId\";\n\n   private static readonly MO_PREFIX_HOST: string = \"host\";\n   private static readonly MO_PREFIX_STORAGE_SYSTEM: string = \"storageSystem\";\n\n   constructor(private dataService: DataServiceClient,\n         private vpxdModelFactory: VpxdModelFactory) {\n   }\n\n   async getPropertiesForHosts(clusterRef: ManagedObject): Promise<DataServiceResult[]> {\n      const hostRefs: ManagedObject[] = await this.dataService\n            .getProperty(ClusterComputeResource.host.id, clusterRef);\n      const storageSystemRefs: ManagedObject[] = hostRefs.map(this.hostRefToStorateSystemRef);\n\n      let hostPropertiesResult: DataServiceResult[];\n      let storageDevicesPropertiesResult: DataServiceResult[];\n      [hostPropertiesResult, storageDevicesPropertiesResult] = await Promise.all([\n         this.getHostProperties(hostRefs),\n         this.getStorageDeviceProperties(storageSystemRefs),\n      ]);\n      return [...hostPropertiesResult, ...storageDevicesPropertiesResult];\n   }\n\n   async getStorageDevicePropertiesByHost(hostRef: ManagedObject): Promise<DataServiceResult[]> {\n      return this.getStorageDeviceProperties([this.hostRefToStorateSystemRef(hostRef)]);\n   }\n\n   static readonly PROP_VSAN_STORAGE_ADAPTER_DEVICES: string = \"vsanStorageAdapterDevices\";\n\n   private async getStorageDeviceProperties(storageSystemRefs: ManagedObject[]): Promise<DataServiceResult[]> {\n      const storageDevices: DataServiceQueryResult = await this.dataService\n            .select(HostStorageSystem.storageDeviceInfo.hostBusAdapter,\n                  HostStorageSystem.storageDeviceInfo.scsiLun,\n                  HostStorageSystem.storageDeviceInfo.plugStoreTopology.path,\n                  HostStorageSystem.storageDeviceInfo.plugStoreTopology.adapter,\n                  HostStorageSystem.storageDeviceInfo.plugStoreTopology.target,\n                  HostStorageSystem.storageDeviceInfo.plugStoreTopology.device)\n            .fromMoRef(...storageSystemRefs)\n            .execute();\n      return storageDevices.resultItems.map((ri: ResultItem) => {\n         const adapters: any[] = ri.get(HostStorageSystem.storageDeviceInfo.hostBusAdapter);\n         const luns: any[] = ri.get(HostStorageSystem.storageDeviceInfo.scsiLun);\n\n         // The PlugStoreTopology property contains the mapping between LUNs and other objects\n         // https://opengrok.eng.vmware.com/source/xref/main.perforce.1666/bora/vim/vmodl/vim/host/PlugStoreTopology.java#15\n         const topologyDevices: any[] = ri.get(HostStorageSystem.storageDeviceInfo.plugStoreTopology.device);\n         const topologyAdapters: any[] = ri.get(HostStorageSystem.storageDeviceInfo.plugStoreTopology.adapter);\n         const topologyPaths: any[] = ri.get(HostStorageSystem.storageDeviceInfo.plugStoreTopology.path);\n         const topologyTargets: any[] = ri.get(HostStorageSystem.storageDeviceInfo.plugStoreTopology.target);\n\n         // LUN-to-TRANSPORT mapping\n         // topologyDevice.path[] -> topologyPath.key\n         // topologyPath.target -> topologyTargets.key\n         // topologyTarget.transport\n\n         // LUN-to-ADAPTER mapping\n         // lun.key -> topologyDevices.lun\n         // topologyDevices.key -> topologyPath.device\n         // topologyPath.adapter -> topologyAdapters.key\n         // topologyAdapters.adapter -> adapter.key\n\n         const storageDeviceData: any[] = luns.map(lun => {\n            const topologyDevice: any = topologyDevices.find(td => td.lun === lun.key);\n            const topologyPath: any = topologyPaths.find(p => p.device === topologyDevice.key);\n            const topologyAdapter: any = topologyAdapters.find(ta => ta.key === topologyPath.adapter);\n            const adapter: any = adapters.find(a => a.key === topologyAdapter.adapter);\n            const topologyTarget: any = topologyTargets.find(t => t.key === topologyPath.target);\n\n            // This model is defined in the H5C code base. We need to stick to it as long as we have the local\n            // plugin part supported.\n            return {\n               underlyingLun: lun,\n               transport: this.getTransport(topologyTarget?.transport),\n               adapter: adapter.device,\n            };\n         });\n\n         const storageSystemRef: ManagedObject = ri.resourceObject;\n         const hostRef: ManagedObject = this.storageSystemRefToHostRef(storageSystemRef);\n         return this.createDataServiceResult(hostRef, DisksPropertyRetriever.PROP_VSAN_STORAGE_ADAPTER_DEVICES, storageDeviceData);\n      });\n   }\n\n   private async getHostProperties(hostRefs: ManagedObject[]): Promise<DataServiceResult[]> {\n      const hostProps: DataServiceQueryResult = await this.dataService\n            .select(HostSystem.name, HostSystem.config.product.version)\n            .fromMoRef(...hostRefs)\n            .execute();\n      const result: DataServiceResult[] = [];\n      hostProps.resultItems.forEach((ri: ResultItem) => {\n         const hostRef: ManagedObject = ri.resourceObject;\n         result.push(this.createDataServiceResult(hostRef, DisksPropertyRetriever.ICON_ID, ManagedObjectUtils.getObjectTypeIcon(hostRef)));\n         ri.propertyValues.forEach(((value: any, key: string) => {\n            result.push(this.createDataServiceResult(hostRef, key, value));\n         }));\n      });\n      return result;\n   }\n\n   private storageSystemRefToHostRef(storageSystemRef: ManagedObject): ManagedObject {\n      return ManagedObject.create(HostSystem.type,\n            storageSystemRef.value.replace(DisksPropertyRetriever.MO_PREFIX_STORAGE_SYSTEM, DisksPropertyRetriever.MO_PREFIX_HOST),\n            storageSystemRef.serverGuid);\n   }\n\n   private hostRefToStorateSystemRef(mo: ManagedObject): ManagedObject {\n      return ManagedObject.create(HostStorageSystem.type,\n            mo.value.replace(DisksPropertyRetriever.MO_PREFIX_HOST, DisksPropertyRetriever.MO_PREFIX_STORAGE_SYSTEM),\n            mo.serverGuid);\n   }\n\n   private createDataServiceResult(obj: ManagedObject, propertyName: string, value: any): DataServiceResult {\n      return {\n         resourceObject: obj,\n         value: value,\n         propertyName: propertyName,\n      } as DataServiceResult;\n   }\n\n   private getTransport(transport: any): string[] {\n      if (!transport) {\n         return [];\n      }\n\n      // https://opengrok.eng.vmware.com/source/xref/vim-clients.h5c-main.perforce.1666/h5c-main/applications/vsphere-client/server/modules-api/src/main/java/com/vmware/vsphere/client/storage/adapters/StorageDeviceTransport.java#37\n      const clazz: string = this.vpxdModelFactory.getObjectType(transport);\n      switch (clazz) {\n         case TransportType.HostFibreChannelOverEthernetTargetTransport:\n            return [\"FCOETRANSPORT\"];\n         case TransportType.HostFibreChannelTargetTransport:\n            return [\"FCTRANSPORT\"];\n         case TransportType.HostInternetScsiTargetTransport:\n            return [\"ISCSITRANSPORT\"];\n         case TransportType.HostParallelScsiTargetTransport:\n            return [\"PARALLELTRANSPORT\"];\n         case TransportType.HostBlockAdapterTargetTransport:\n            return [\"BLOCKTRANSPORT\"];\n         case TransportType.HostSerialAttachedTargetTransport:\n            return [\"SASTRANSPORT\"];\n         case TransportType.HostPcieTargetTransport:\n            return [\"PCIETRANSPORT\"];\n         case TransportType.HostRdmaTargetTransport:\n            return [\"RDMATRANSPORT\"];\n         case TransportType.HostTcpTargetTransport:\n            return [\"TCPTRANSPORT\"];\n         default:\n            return [];\n      }\n   }\n}\n\nenum TransportType {\n   HostFibreChannelOverEthernetTargetTransport = \"HostFibreChannelOverEthernetTargetTransport\",\n   HostFibreChannelTargetTransport = \"HostFibreChannelTargetTransport\",\n   HostInternetScsiTargetTransport = \"HostInternetScsiTargetTransport\",\n   HostParallelScsiTargetTransport = \"HostParallelScsiTargetTransport\",\n   HostBlockAdapterTargetTransport = \"HostBlockAdapterTargetTransport\",\n   HostSerialAttachedTargetTransport = \"HostSerialAttachedTargetTransport\",\n   HostPcieTargetTransport = \"HostPcieTargetTransport\",\n   HostRdmaTargetTransport = \"HostRdmaTargetTransport\",\n   HostTcpTargetTransport = \"HostTcpTargetTransport\",\n}\n\n\n","<!--Copyright 2017-2021 VMware, Inc. All rights reserved. -- VMware Confidential-->\n<vsan-question-prompt [title]=\"title\">\n   <span *ngIf=\"!isLocal\">\n      {{\"storage.adapters.devices.action.markAsRemote.prompt\" | localized}}\n   </span>\n   <span *ngIf=\"isLocal\">\n      {{\"storage.adapters.devices.action.markAsLocal.prompt\" | localized}}\n   </span>\n</vsan-question-prompt>","/* Copyright 2020-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {AfterViewInit, Component, EventEmitter, Input, Output, ViewChild} from \"@angular/core\";\nimport {HostData} from \"@generated/host-data\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {DiskMgmtHostUtil} from \"@util/disk-mgmt-host.util\";\nimport {DiskManagementActionAvailabilityService} from \"./validation/disk-management-action-availability.service\";\nimport {VsanCapabilityData} from \"@generated/vsan-capability-data\";\nimport {Icon} from \"@util/icon\";\nimport {DiskGroupKey, DiskMgmtDiskGroupUtil} from \"@util/disk-mgmt-disk-group.util\";\nimport {ClrDatagrid, ClrDatagridComparatorInterface} from \"@clr/angular\";\nimport {DiskMgmtExportConfig} from \"./export/disk-mgmt-export-config\";\nimport {ExportDataSource} from \"@component/export/export-data-source\";\n\n@Component({\n   templateUrl: \"host-list.html\",\n   selector: \"vsan-host-list\",\n   styleUrls: [\"host-list.scss\"],\n})\nexport class HostListComponent implements AfterViewInit {\n\n   @ViewChild(\"dataGrid\")\n   datagrid: ClrDatagrid;\n\n   _hostList: HostData[];\n   @Input()\n   get hostList(): HostData[] {\n      return this._hostList;\n   }\n\n   set hostList(value: HostData[]) {\n      if (VsanUiUtils.isUnset(value)) {\n         return;\n      }\n      this._hostList = value;\n      value.forEach(host => {\n         this.healthKeys.add(this.getHealthKey(host));\n         this.stateKeys.add(this.getState(host));\n         host.diskGroups.map(DiskMgmtDiskGroupUtil.getKey)\n               .filter(group => !!group)\n               .forEach(group => this.groupTypeKeys.add(group));\n      });\n   }\n\n   Icon: typeof Icon = Icon;\n   DiskMgmtExportConfig: typeof DiskMgmtExportConfig = DiskMgmtExportConfig;\n   VsanUiUtils: typeof VsanUiUtils = VsanUiUtils;\n   DiskManagementActionAvailabilityService: typeof DiskManagementActionAvailabilityService = DiskManagementActionAvailabilityService;\n   hostGridPageSize: number = 15;\n\n   @Input()\n   autoClaimMode: boolean;\n\n   @Input()\n   hasEditPermission: boolean = false;\n\n   @Input()\n   clusterCapabilities: VsanCapabilityData;\n\n   @Input()\n   hasHostMaintenancePermission: boolean;\n\n   @Input()\n   selectedHost: HostData;\n\n   @Output()\n   hostSelected: EventEmitter<HostData> = new EventEmitter<HostData>();\n\n   healthKeys: Set<string> = new Set<string>();\n   stateKeys: Set<string> = new Set<string>();\n   groupTypeKeys: Set<string> = new Set<string>();\n\n   healthComparator: ClrDatagridComparatorInterface<HostData> = new HealthComparator();\n   stateComparator: ClrDatagridComparatorInterface<HostData> = new StateComparator();\n\n   exportDataSource: ExportDataSource;\n\n   ngAfterViewInit(): void {\n      this.exportDataSource = DiskMgmtExportConfig.createExportDataSource(this.datagrid);\n   }\n\n   hideDgPageSize(): boolean {\n      return !this.hostList || this.hostList.length < this.hostGridPageSize;\n   }\n\n   getGroupTypeKeys = (host: HostData): string[] => {\n      return DiskMgmtHostUtil.getGroupTypeKeys(host);\n   };\n\n   hideGroupTypeColumn = (): boolean => {\n      return this.groupTypeKeys.size === 1 && this.groupTypeKeys.has(DiskGroupKey.VSAN);\n   };\n\n   hideFaultDomainColumn = (): boolean => {\n      return this.hostList?.every(host => VsanUiUtils.isEmpty(host.faultDomain));\n   };\n\n   getState = (host: HostData): string => {\n      return DiskMgmtHostUtil.getState(host);\n   };\n\n   getHealthKey = (host: HostData): string => {\n      return DiskMgmtHostUtil.getHealthKey(host);\n   };\n\n   getClaimedDisksLabel = (host: HostData): string => {\n      return DiskMgmtHostUtil.getClaimedDisksLabel(host);\n   };\n\n   selectionChanged(host: HostData): void {\n      this.hostSelected.emit(host);\n   }\n\n   getHostSuffix(host: HostData): string {\n      if (host.isWitnessHost && !host.isMetadataWitnessHost) {\n         return VsanUiUtils.getString(\"vsan.host.list.witnessHost\");\n      } else if (host.isMetadataWitnessHost) {\n         return VsanUiUtils.getString(\"vsan.host.list.metadataWitnessHost\");\n      }\n      return \"\";\n   }\n}\n\nexport class HealthComparator implements ClrDatagridComparatorInterface<HostData> {\n   compare(o1: HostData, o2: HostData): number {\n      return DiskMgmtHostUtil.getHealthKey(o1)\n            .localeCompare(DiskMgmtHostUtil.getHealthKey(o2));\n   }\n}\n\nexport class StateComparator implements ClrDatagridComparatorInterface<HostData> {\n   compare(o1: HostData, o2: HostData): number {\n      return DiskMgmtHostUtil.getState(o1)\n            .localeCompare(DiskMgmtHostUtil.getState(o2));\n   }\n}\n","/* Copyright 2019-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component} from \"@angular/core\";\nimport {ScsiDisk} from \"@component/diskmgmt/model/scsi-disk.data\";\nimport {DecommissionModeSummary} from \"@component/precheck/pre-check-evacuation-summary.component\";\nimport {DecommissionMode} from \"@generated/decommission-mode\";\nimport {DiskGroupMutationService} from \"@generated/disk-group-mutation-service\";\nimport {RecreateDiskGroupSpec} from \"@generated/recreate-disk-group-spec\";\nimport {VsanPropertyProvider} from \"@generated/vsan-property-provider\";\nimport {VsanQueryDataEvacuationInfoSpec} from \"@generated/vsan-query-data-evacuation-info-spec\";\nimport {DiskGroupActionData} from \"@model/disk-group-action.data\";\nimport {HostActionData} from \"@model/host-action.data\";\nimport {DiskGroupActionContext} from \"@navigation/context/disk-group-action-context\";\nimport {EvacuationContext} from \"@navigation/context/evacuation.context\";\nimport {NavigationService, PlatformExtension} from \"@navigation/navigation.service\";\nimport {HostSystem} from \"@service/client/dataservice/data-service-property\";\nimport {DataServiceClient} from \"@service/client/dataservice/data-service.service\";\nimport {ErrorHandler} from \"@service/flow/error-handler.decorator\";\nimport {LoaderName} from \"@service/flow/loader-name\";\nimport {Loader} from \"@service/flow/loader.decorator\";\nimport {LoadingIndicator} from \"@service/flow/loading-indicator.decorator\";\nimport {ManagedObject} from \"@service/managed-object\";\nimport {SrMessageType} from \"@service/screen-reader-announcer.service\";\nimport {DiskMgmtDiskUtil} from \"@util/disk-mgmt-disk.util\";\nimport {Logger} from \"@util/logger\";\nimport {VsanDataMigrationUtil} from \"@util/vsan-data-migration-util\";\nimport {VsanDiskMgmtActionsUtil} from \"@util/vsan-disk-mgmt-actions-util\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\n\n@Component({\n   templateUrl: \"recreate-disk-group.html\",\n   styleUrls: [\"../actions-common.scss\"],\n   selector: \"vsan-diskmgmt-recreate-disk-group\",\n})\nexport class RecreateDiskGroupComponent {\n   host: HostActionData;\n   diskGroup: DiskGroupActionData;\n   evacuationEntityUuid: string;\n   warningMessages: string[] = [];\n   dataOnDiskGroupLabel: string = VsanUiUtils.getString(\"vsan.dialog.deleteDiskGroup.evacuateDataLabel\");\n   shouldAllowDataMigration: boolean;\n   // These are being set via events from vsan-pre-check-evacuation-summary component\n   selectedDecommissionMode: DecommissionMode = DecommissionMode.ensureObjectAccessibility;\n\n   isValidDecommisionMode: boolean = true;\n\n   @LoadingIndicator({\n      name: [\n         LoaderName.ON_INIT, LoaderName.DATA_EVACUATION, LoaderName.ON_CONFIRM],\n   })\n   busy: boolean;\n\n   alerts: string[];\n   goToPrecheckButtonText: string;\n   isDiskResourcePrecheckSupported: boolean = true;\n   preselectedDecommissionMode: DecommissionMode;\n   localizedPreselectedDecommissionMode: string;\n   preCheckRecommendationMessage: string = VsanUiUtils.getString(\n         \"vsan.dialog.precheckEvacuation.recommendationMesaage.diskGroup.recreate\");\n\n\n   constructor(private vsanPropertyProvider: VsanPropertyProvider,\n         private diskGroupMutationService: DiskGroupMutationService,\n         private navigationService: NavigationService,\n         private dataService: DataServiceClient) {\n   }\n\n   @Loader({\n      name: LoaderName.ON_INIT,\n      srMessage: \"vsan.dialog.recreateDiskGroup.title\",\n      srMessageType: SrMessageType.PAGE_TITLE,\n   })\n   async ngOnInit(): Promise<void> {\n      const context: DiskGroupActionContext = VsanUiUtils.getModalContext();\n      this.host = context.host;\n      this.diskGroup = context.diskGroup;\n      this.evacuationEntityUuid = this.diskGroup.vsanUuid;\n      this.preselectedDecommissionMode = context.decommissionMode;\n      this.localizedPreselectedDecommissionMode =\n            VsanDataMigrationUtil.getLocalizedDecommissionMode(this.preselectedDecommissionMode);\n      this.host.isInMaintenanceMode = await this.dataService\n            .getProperty(HostSystem.runtime.inMaintenanceMode, this.host.hostRef);\n      this.initUI();\n   }\n\n   @ErrorHandler({name: LoaderName.ON_INIT})\n   private handleInitError(error: string): void {\n      this.alerts = [VsanUiUtils.getString(\"vsan.common.error.dataExtraction\")];\n   }\n\n   private initUI = () => {\n      this.shouldAllowDataMigration = VsanDiskMgmtActionsUtil.shouldAllowDiskGroupDataMigration(\n            this.host, this.diskGroup);\n      if (!this.shouldAllowDataMigration) {\n         this.selectedDecommissionMode = DecommissionMode.noAction;\n         VsanUiUtils.setModalDialogHeight(VsanDiskMgmtActionsUtil.RECREATE_DIALOG_HEIGHT_SMALL);\n      }\n\n      this.showMessage();\n      this.requestDataEvacuationProperty(this.diskGroup.diskMapping.ssd);\n   };\n\n   private showMessage = () => {\n      const headerMessage: string = this.getHeaderMessage();\n      if (headerMessage) {\n         this.warningMessages.push(headerMessage);\n      }\n\n      const dataEvacuationWarningMessage: string = VsanDiskMgmtActionsUtil.getDataMigrationWarningForDiskGroup(\n            this.host.isInMaintenanceMode, this.diskGroup.isMounted);\n      if (dataEvacuationWarningMessage) {\n         this.warningMessages.push(dataEvacuationWarningMessage);\n      }\n\n      // Check for disk errors and display a warning.\n      if (!DiskMgmtDiskUtil.isScsiDiskHealthy(this.diskGroup.diskMapping.ssd) ||\n            this.diskGroup.diskMapping.nonSsd.some(disk => !DiskMgmtDiskUtil.isScsiDiskHealthy(disk))) {\n         if (this.diskGroup.isLocked) {\n            this.warningMessages.push(VsanUiUtils.getString(\"vsan.dialog.recreateDiskGroup.warningLabel.locked\"));\n         } else {\n            this.warningMessages.push(VsanUiUtils.getString(\"vsan.dialog.recreateDiskGroup.warningLabel\"));\n         }\n      }\n   };\n\n   private getHeaderMessage = (): string => {\n      const groupUuid: string = this.diskGroup.vsanUuid;\n      if (this.host.isInMaintenanceMode || this.diskGroup.isMounted) {\n         return VsanUiUtils.getString(\"vsan.dialog.recreateDiskGroup.headerDataEvacuation\", groupUuid);\n      } else if (this.host.isWitnessHost) {\n         return VsanUiUtils.getString(\"vsan.dialog.recreateDiskGroup.externalWitnessHostWarning\", groupUuid);\n      }\n   };\n\n   onDiskResourcePrecheckSupportedChanged = (isSupported: boolean) => {\n      this.isDiskResourcePrecheckSupported = isSupported;\n      // Preselecting decommmission mode means that this dialog is opened from Data migration pre-check page,\n      // in which case GO TO PRE-CHECK button doesn't need to be display.\n      this.goToPrecheckButtonText = !this.preselectedDecommissionMode && this.isDiskResourcePrecheckSupported ?\n            VsanUiUtils.getString(\"vsan.actions.goToPrecheckDataMigration.label\") : \"\";\n   };\n\n   @Loader({name: LoaderName.DATA_EVACUATION})\n   private async requestDataEvacuationProperty(disk: ScsiDisk): Promise<void> {\n      if (!DiskMgmtDiskUtil.isScsiDiskHealthy(disk)) {\n         this.dataOnDiskGroupLabel = VsanUiUtils.getString(\"vsan.dialog.deleteDiskGroup.evacuateDataLabel.error\");\n         return;\n      }\n\n      const result: number = await this.vsanPropertyProvider.getVsanDataEvacuationInfo(\n            this.host.hostRef,\n            VsanQueryDataEvacuationInfoSpec.Factory.create([disk]));\n      this.onDataEvacuationPropertyRetrieved(result);\n   }\n\n   private onDataEvacuationPropertyRetrieved = (result: number) => {\n      if (result >= 0) {\n         const formattedSize: string = VsanUiUtils.formatFileSize(result);\n         this.dataOnDiskGroupLabel = VsanUiUtils.getString(\n               \"vsan.dialog.deleteDiskGroup.evacuateDataLabelWithSize\",\n               formattedSize);\n      }\n   };\n\n   @ErrorHandler({name: LoaderName.DATA_EVACUATION})\n   private onDataRetrievalError(error: any): void {\n      Logger.error(\"Unable to fetch disk group evacuation data: \", error);\n      this.alerts = [VsanUiUtils.getString(\"vsan.common.error.dataExtraction\")];\n      this.dataOnDiskGroupLabel = VsanUiUtils.getString(\"vsan.dialog.deleteDiskGroup.evacuateDataLabel.error\");\n   }\n\n   onDecommisionModeSummaryChanged = (summary: DecommissionModeSummary) => {\n      this.selectedDecommissionMode = summary.value;\n      this.isValidDecommisionMode = summary.isValidDecommissionMode;\n      if (VsanDiskMgmtActionsUtil.isPrecheckWithObjects(summary) && !this.isDiskResourcePrecheckSupported) {\n         VsanUiUtils.setModalDialogHeight(VsanDiskMgmtActionsUtil.RECREATE_DIALOG_HEIGHT_LARGE);\n      } else if (this.isDiskResourcePrecheckSupported) {\n         VsanUiUtils.setModalDialogHeight(VsanDiskMgmtActionsUtil.RECREATE_DIALOG_HEIGHT_PRECHECK);\n      } else {\n         VsanUiUtils.setModalDialogHeight(VsanDiskMgmtActionsUtil.RECREATE_DIALOG_HEIGHT_MEDIUM);\n      }\n   };\n\n   @Loader({name: LoaderName.ON_CONFIRM})\n   async onOkClicked(): Promise<void> {\n      const decommissionMode: DecommissionMode = this.preselectedDecommissionMode ?\n            this.preselectedDecommissionMode :\n            VsanDiskMgmtActionsUtil.getSelectedDecommissionMode(\n                  this.shouldAllowDataMigration, this.selectedDecommissionMode);\n      const rebuildSpec: RecreateDiskGroupSpec = RecreateDiskGroupSpec.Factory\n            .create(this.diskGroup.diskMapping, decommissionMode);\n\n      const task: any = await this.diskGroupMutationService.recreateDiskGroup(this.host.hostRef, rebuildSpec);\n      this.handleTaskList(task);\n   }\n\n   onGoToPrecheckClicked = () => {\n      const evacuationContext: EvacuationContext = VsanDiskMgmtActionsUtil.getEvacuationContext(\n            this.host.hostRef, this.evacuationEntityUuid, this.selectedDecommissionMode);\n      this.navigationService.navigateToAndCloseModal(PlatformExtension.CLUSTER_DATA_MIGRATION_PRE_CHECK,\n            ManagedObject.contextObjectUid, evacuationContext);\n   };\n\n   private handleTaskList = (task: ManagedObject) => {\n      VsanUiUtils.closeModalDialog(task);\n   };\n\n   @ErrorHandler({name: LoaderName.ON_CONFIRM})\n   private onRecreateOperationError(message: any): void {\n      this.alerts = [message];\n   }\n}\n","<!--Copyright 2020-2022 VMware, Inc. All rights reserved. -- VMware Confidential-->\n<vsan-delete-prompt\n      [title]=\"'vsan.dialog.deleteVsanDirectDisk.title' | localized\"\n      confirmText=\"vsan.common.remove\"\n      [blockButton]=\"busy\"\n      (onConfirm)=\"onOkClicked()\">\n   <div class=\"dialog-body\">\n\n      <span>{{warningMessage}}</span>\n\n      <!-- Select decommission mode -->\n      <ng-container *ngIf=\"isDecomModeForVsanDirectDisksSupported\">\n         <div class=\"migration-mode-label\">\n            <span id=\"select-migration-mode-label\">{{'vsan.dialog.deleteDiskGroup.migrationMode' | localized}}</span>\n            <clr-signpost id=\"{{dataMigrationModeSignpostId}}\"\n                          [vsan-signpost-title]=\"'vsan.dialog.deleteDiskGroup.migrationMode.signpost.label' | localized\">\n               <clr-signpost-content *clrIfOpen [clrPosition]=\"getDataMigrationModeSignpostPosition()\">\n                  <span>{{\"vsan.dialog.deleteDiskGroup.evacuateDataHelp\" | localized}}</span>\n               </clr-signpost-content>\n            </clr-signpost>\n         </div>\n         <vsan-pre-check-evacuation-select [selectLabel]=\"'vsan.decommisionMode.migrate.label' | localized\"\n                                           [selectedDecommissionMode]=\"selectedDecommissionMode\"\n                                           [unsupportedDecommissionModes]=\"unsupportedDecommissionModes\"\n                                           (selectedDecommisionModeChange)=\"onSelectedDecommissionModeChanged($event)\">\n         </vsan-pre-check-evacuation-select>\n      </ng-container>\n\n      <!-- Confirmation text -->\n      <div id=\"delete-disks-footer\" class=\"strong-label\">\n         {{footerText}}\n      </div>\n   </div>\n</vsan-delete-prompt>\n","/* Copyright 2020-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, Input} from \"@angular/core\";\nimport {Icon} from \"@util/icon\";\nimport {EnumeratedFilterSelectionResolver} from \"@component/datagrid/filter/enumerated-filter.component\";\n\n@Component({\n   templateUrl: \"disk-mgmt-filter.html\",\n   selector: \"vsan-disk-mgmt-filter\",\n   styleUrls: [\"disk-mgmt-filter.scss\"],\n})\nexport class DiskMgmtFilterComponent<T> {\n\n   Icon: typeof Icon = Icon;\n   keys: string[];\n\n   @Input()\n   set items(value: Set<string>) {\n      if (!value || !value.size) {\n         return;\n      }\n      this.keys = Array.from([...value.keys()].sort((a, b) => a.localeCompare(b)));\n   }\n\n   readonly comparator: EnumeratedFilterSelectionResolver<T, string>;\n}\n","\nexport interface VsanQueryDataEvacuationInfoSpec {\n\n   disks: any[];\n} //class VsanQueryDataEvacuationInfoSpec\n\nexport module VsanQueryDataEvacuationInfoSpec{\nexport class Factory {\n\n   static create = (disks: any[]): VsanQueryDataEvacuationInfoSpec => {\n      return { disks: disks, };\n   }\n\n\n} //class Factory\n\n} //module VsanQueryDataEvacuationInfoSpec\n","/* Copyright 2020 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component} from \"@angular/core\";\nimport {DiskMgmtHostUtil} from \"@util/disk-mgmt-host.util\";\nimport {EnumeratedFilterSelectionResolver} from \"@component/datagrid/filter/enumerated-filter.component\";\nimport {HostData} from \"@generated/host-data\";\nimport {DiskMgmtFilterComponent} from \"./disk-mgmt-filter.component\";\n\n@Component({\n   templateUrl: \"disk-mgmt-filter.html\",\n   selector: \"vsan-host-list-filter-state\",\n   styleUrls: [\"disk-mgmt-filter.scss\"],\n})\nexport class HostListFilterStateComponent extends DiskMgmtFilterComponent<HostData> {\n\n   readonly comparator: EnumeratedFilterSelectionResolver<HostData, string> =\n         new class extends EnumeratedFilterSelectionResolver<HostData, string> {\n            isSelected(item: HostData, selectedStateKeys: string[]): boolean {\n               return selectedStateKeys.some(state => (state === DiskMgmtHostUtil.getState(item)));\n            }\n         }();\n}","<!--Copyright 2017-2021 VMware, Inc. All rights reserved. -- VMware Confidential-->\n<vsan-question-prompt [title]=\"title\">\n   <span *ngIf=\"!isSsd\" id=\"untagLabel\">\n      {{\"storage.adapters.devices.action.untagAsSsd.prompt\" | localized}}\n   </span>\n   <span *ngIf=\"isSsd\" id=\"tagInfo\">\n      {{\"storage.adapters.devices.action.tagAsSsd.info\" | localized}}\n   </span>\n   <div *ngIf=\"isSsd\" id=\"tagLabel\">\n      {{\"storage.adapters.devices.action.tagAsSsd.prompt\" | localized}}\n   </div>\n</vsan-question-prompt>","<!-- Copyright 2020-2022 VMware, Inc. All rights reserved. -- VMware Confidential -->\n<div class=\"card\">\n   <div class=\"card-block\">\n      <div class=\"card-text\">\n         <ng-container *ngFor=\"let entity of summaryEntities\">\n            <vsan-icon-item [label]=\"entity.label\"\n                            [shape]=\"entity.icon\">\n            </vsan-icon-item>\n         </ng-container>\n      </div>\n   </div>\n   <div class=\"card-footer\">\n      <vsan-cluster-actions *ngIf=\"!isHostDetailsLevel()\"\n                            [autoClaimMode]=\"autoClaimMode\"\n                            [vsanConfig]=\"vsanConfig\"\n                            [clusterName]=\"clusterName\"\n                            [hasEditPermission]=\"hasEditPermission\"\n                            [hasDuplicatePciIdDevices]=\"hasDuplicatePciIdDevices\"\n                            [clusterCapabilities]=\"clusterCapabilities\"\n                            [allHosts]=\"hostList\">\n      </vsan-cluster-actions>\n      <vsan-host-actions *ngIf=\"isHostDetailsLevel()\"\n                         [autoClaimMode]=\"autoClaimMode\"\n                         [hasEditPermission]=\"hasEditPermission\"\n                         [clusterCapabilities]=\"clusterCapabilities\"\n                         [hasHostMaintenancePermission]=\"hasHostMaintenancePermission\"\n                         [selectedHost]=\"getHost()\"\n                         [isHostListView]=\"false\">\n      </vsan-host-actions>\n   </div>\n</div>\n","<!--Copyright 2020-2021 VMware, Inc. All rights reserved. -- VMware Confidential-->\n<clr-button-group [vsan-button-group]=\"10\">\n   <ng-container *ngIf=\"selectedDiskGroup\">\n      <clr-button id=\"{{DiskManagementActionAvailabilityService.VIEW_GROUP_OBJECTS_ID}}\"\n                  class=\"btn btn-sm\"\n                  *ngIf=\"showViewGroupObjectsAction()\"\n                  [disabled]=\"actionDisabled(DiskManagementActionAvailabilityService.VIEW_GROUP_OBJECTS_ID)\"\n                  (click)=\"viewGroupObjects()\"\n                  [vsan-button-title]=\"getActionButtonTitle(DiskManagementActionAvailabilityService.VIEW_GROUP_OBJECTS_ID)\">\n         {{\"vsan.actions.viewGroupObjects.label\" | localized}}\n      </clr-button>\n      <clr-button id=\"{{DiskManagementActionAvailabilityService.COPY_GROUP_UUID_ID}}\"\n                  class=\"btn btn-sm\"\n                  ngxClipboard\n                  [cbContent]=\"selectedDiskGroup?.name\"\n                  *ngIf=\"isVsanDiskGroup\"\n                  [vsan-button-title]=\"'vsan.actions.copyGroupUuid.description' | localized\">\n         {{\"vsan.actions.copyGroupUuid.label\" | localized}}\n      </clr-button>\n      <ng-container *ngIf=\"isVsanDiskGroup\">\n         <clr-button id=\"{{DiskManagementActionAvailabilityService.ADD_DISKS_TO_DISK_GROUP_ID}}\"\n                     class=\"btn btn-sm\"\n                     [disabled]=\"actionDisabled(DiskManagementActionAvailabilityService.ADD_DISKS_TO_DISK_GROUP_ID)\"\n                     (click)=\"addDisks()\"\n                     [vsan-button-title]=\"getActionButtonTitle(DiskManagementActionAvailabilityService.ADD_DISKS_TO_DISK_GROUP_ID)\">\n            {{\"vsan.actions.addDiskToDiskGroup.label\" | localized}}\n         </clr-button>\n         <clr-button id=\"{{DiskManagementActionAvailabilityService.PRE_CHECK_ID}}\"\n                     class=\"btn btn-sm\"\n                     [disabled]=\"actionDisabled(DiskManagementActionAvailabilityService.PRE_CHECK_ID)\"\n                     (click)=\"goToPrecheckEvacuation()\"\n                     [vsan-button-title]=\"getActionButtonTitle(DiskManagementActionAvailabilityService.PRE_CHECK_ID)\">\n            {{getPrecheckLabel()}}\n         </clr-button>\n         <clr-button id=\"{{DiskManagementActionAvailabilityService.DELETE_DISK_GROUP_ID}}\"\n                     class=\"btn btn-sm\"\n                     *ngIf=\"!autoClaimMode\"\n                     [disabled]=\"actionDisabled(DiskManagementActionAvailabilityService.DELETE_DISK_GROUP_ID)\"\n                     (click)=\"delete()\"\n                     [vsan-button-title]=\"getActionButtonTitle(DiskManagementActionAvailabilityService.DELETE_DISK_GROUP_ID)\">\n            {{\"vsan.actions.deleteDiskGroup.label\" | localized}}\n         </clr-button>\n         <clr-button id=\"{{DiskManagementActionAvailabilityService.RECREATE_DISK_GROUP_ID}}\"\n                     class=\"btn btn-sm\"\n                     *ngIf=\"canBeRecreated\"\n                     [disabled]=\"actionDisabled(DiskManagementActionAvailabilityService.RECREATE_DISK_GROUP_ID)\"\n                     (click)=\"recreate()\"\n                     [vsan-button-title]=\"getActionButtonTitle(DiskManagementActionAvailabilityService.RECREATE_DISK_GROUP_ID)\">\n            {{\"vsan.actions.recreateDiskGroup.label\" | localized}}\n         </clr-button>\n         <clr-button id=\"{{DiskManagementActionAvailabilityService.MOUNT_DISK_GROUP_ID}}\"\n                     class=\"btn btn-sm\"\n                     [disabled]=\"actionDisabled(DiskManagementActionAvailabilityService.MOUNT_DISK_GROUP_ID)\"\n                     (click)=\"mount()\"\n                     [vsan-button-title]=\"getActionButtonTitle(DiskManagementActionAvailabilityService.MOUNT_DISK_GROUP_ID)\">\n            {{\"vsan.actions.mountDiskGroup.label\" | localized}}\n         </clr-button>\n         <clr-button id=\"{{DiskManagementActionAvailabilityService.UNMOUNT_DISK_GROUP_ID}}\"\n                     class=\"btn btn-sm\"\n                     [disabled]=\"actionDisabled(DiskManagementActionAvailabilityService.UNMOUNT_DISK_GROUP_ID)\"\n                     (click)=\"unmount()\"\n                     [vsan-button-title]=\"getActionButtonTitle(DiskManagementActionAvailabilityService.UNMOUNT_DISK_GROUP_ID)\">\n            {{'vsan.actions.unmountDiskGroup.label' | localized}}\n         </clr-button>\n      </ng-container>\n      <clr-button id=\"{{DiskManagementActionAvailabilityService.STOP_MANAGING_PMEM_ID}}\"\n                  *ngIf=\"isPmemDiskGroup\"\n                  class=\"btn btn-sm\"\n                  [disabled]=\"actionDisabled(DiskManagementActionAvailabilityService.STOP_MANAGING_PMEM_ID)\"\n                  (click)=\"stopManagingPmem()\"\n                  [vsan-button-title]=\"getActionButtonTitle(DiskManagementActionAvailabilityService.STOP_MANAGING_PMEM_ID)\">\n         {{\"vsan.actions.stopManagingPmem.label\" | localized}}\n      </clr-button>\n   </ng-container>\n</clr-button-group>","import {DecommissionMode} from '@generated/decommission-mode';\n\nexport interface RemoveDiskSpec {\n\n   decommissionMode: DecommissionMode;\n   disks: any[];\n} //class RemoveDiskSpec\n\nexport module RemoveDiskSpec{\nexport class Factory {\n\n   static create = (decommissionMode: DecommissionMode, disks: any[]): RemoveDiskSpec => {\n      return { decommissionMode: decommissionMode, disks: disks, };\n   }\n\n\n} //class Factory\n\n} //module RemoveDiskSpec\n","/* Copyright 2020-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {DiskGroupData} from \"@generated/disk-group-data\";\nimport {DiskData} from \"@generated/disk-data\";\nimport {PmemDiskData} from \"@generated/pmem-disk-data\";\nimport {DiskGroupType} from \"@generated/disk-group-type\";\nimport {StorageData} from \"@component/diskmgmt/model/storage-data\";\nimport {ClaimableState} from \"@util/disk-mgmt.util\";\nimport {HostData} from \"@generated/host-data\";\nimport {DiskMgmtHostUtil} from \"@util/disk-mgmt-host.util\";\nimport {StorageCapacity} from \"@generated/storage-capacity\";\nimport {DiskMgmtDiskGroupUtil} from \"@util/disk-mgmt-disk-group.util\";\nimport {StorageIdentifier} from \"@component/diskmgmt/model/storage-identifier\";\n\nexport class StorageGroupData implements DiskGroupData {\n   name: string;\n   iconId: string;\n   isMounted: boolean;\n   disks: DiskData[];\n   pmemStorage: PmemDiskData[];\n   ownerHostRef: any;\n   diskGroupType: DiskGroupType;\n   isLocked: boolean;\n   capacity: StorageCapacity;\n   objectUuids: string[];\n   storageData: StorageData[];\n\n   static fromDiskGroup(diskGroupData: DiskGroupData): StorageGroupData {\n      const storageGroup: StorageGroupData = new StorageGroupData();\n      storageGroup.name = diskGroupData.name;\n      storageGroup.iconId = diskGroupData.iconId;\n      storageGroup.isMounted = diskGroupData.isMounted;\n      storageGroup.disks = diskGroupData.disks;\n      storageGroup.pmemStorage = diskGroupData.pmemStorage;\n      storageGroup.ownerHostRef = diskGroupData.ownerHostRef;\n      storageGroup.diskGroupType = diskGroupData.diskGroupType;\n      storageGroup.isLocked = diskGroupData.isLocked;\n      storageGroup.capacity = diskGroupData.capacity;\n      storageGroup.objectUuids = diskGroupData.objectUuids;\n      if (!DiskMgmtDiskGroupUtil.isUnusedDiskGroup(diskGroupData)) {\n         storageGroup.storageData =\n               StorageGroupData.getStorageItemsFromDiskData(diskGroupData.disks, ClaimableState.IN_USE).concat(\n               StorageGroupData.getStorageItemsFromPmemData(diskGroupData.pmemStorage, ClaimableState.IN_USE));\n      }\n      return storageGroup;\n   }\n\n   static setUnusedStorageData(host: HostData, storageGroup: StorageGroupData) {\n      if (!host || !storageGroup) {\n         return;\n      }\n      const eligibleDisks: DiskData[] = DiskMgmtHostUtil.getDisks(host, ClaimableState.USABLE);\n      const ineligibleDisks: DiskData[] = DiskMgmtHostUtil.getDisks(host, ClaimableState.NOT_USABLE);\n      const eligiblePmemStorage: PmemDiskData[] = DiskMgmtHostUtil.getPmemStorage(host, ClaimableState.USABLE);\n      const ineligiblePmemStorage: PmemDiskData[] = DiskMgmtHostUtil.getPmemStorage(host, ClaimableState.NOT_USABLE);\n      storageGroup.storageData =\n             StorageGroupData.getStorageItemsFromDiskData(eligibleDisks, ClaimableState.USABLE).concat(\n             StorageGroupData.getStorageItemsFromDiskData(ineligibleDisks, ClaimableState.NOT_USABLE)).concat(\n             StorageGroupData.getStorageItemsFromPmemData(eligiblePmemStorage, ClaimableState.USABLE)).concat(\n             StorageGroupData.getStorageItemsFromPmemData(ineligiblePmemStorage, ClaimableState.NOT_USABLE));\n   }\n\n   private static getStorageItemsFromDiskData(disks: DiskData[], claimableState: ClaimableState): StorageData[] {\n      if (!disks) {\n         return [];\n      }\n      return disks.map(disk => StorageData.fromDiskData(disk, claimableState));\n   }\n\n   private static getStorageItemsFromPmemData(\n         pmemStorage: PmemDiskData[], claimableState: ClaimableState): StorageData[] {\n      if (!pmemStorage) {\n         return [];\n      }\n      return pmemStorage.map(storage => StorageData.fromPmemDiskData(storage, claimableState));\n   }\n}","import {VsanDiskMapping} from '@generated/vsan-disk-mapping';\n\nexport interface DiskMappingSpec {\n\n   clusterRef: any;\n   mappings: VsanDiskMapping[];\n} //class DiskMappingSpec\n\nexport module DiskMappingSpec{\nexport class Factory {\n\n   static create = (clusterRef: any, mappings: VsanDiskMapping[]): DiskMappingSpec => {\n      return { clusterRef: clusterRef, mappings: mappings, };\n   }\n\n\n} //class Factory\n\n} //module DiskMappingSpec\n","/* Copyright 2020-2022 VMware, Inc. All rights reserved. -- VMware Confidential */\n\nimport {DiskType} from \"@generated/disk-type\";\nimport {DiskData} from \"@generated/disk-data\";\nimport {DiskLocalityType} from \"@generated/disk-locality-type\";\nimport {ClaimOption} from \"@generated/claim-option\";\nimport {DiskStatus} from \"@generated/disk-status\";\nimport {PmemDiskData} from \"@generated/pmem-disk-data\";\nimport {DiskMgmtDiskUtil} from \"@util/disk-mgmt-disk.util\";\nimport {ClaimableState} from \"@util/disk-mgmt.util\";\nimport {StorageCapacity} from \"@generated/storage-capacity\";\nimport {DiskGroupData} from \"@generated/disk-group-data\";\nimport {StorageIdentifier} from \"@component/diskmgmt/model/storage-identifier\";\n\n/**\n * ScsiDisk or PMemStorage presenter.\n */\nexport class StorageData {\n\n   private constructor(\n         public uuid: string,\n         public name: string,\n         public iconShape: string,\n         public type: DiskType,\n         public capacity: StorageCapacity,\n         public deviceState: DiskData.DeviceState,\n         public vsanUuid: string,\n         public diskGroup: string,\n         public driveLocality: DiskLocalityType,\n         public physicalLocation: string[],\n         public diskAdapter: string,\n         public transportType: DiskData.StorageDeviceTransport,\n         public claimOption: ClaimOption,\n         public diskStatus: DiskStatus,\n         public storage: DiskData | PmemDiskData,\n         public claimableState: ClaimableState,\n         public objectUuids: string[]) { }\n\n   static fromDiskData(disk: DiskData, claimableState?: ClaimableState): StorageData {\n      return new StorageData(\n            disk.uuid,\n            disk.name,\n            DiskMgmtDiskUtil.getIcon(disk),\n            DiskMgmtDiskUtil.getType(disk),\n            disk.capacity,\n            disk.deviceState,\n            disk.vsanUuid,\n            disk.diskGroup,\n            disk.driveLocality,\n            disk.physicalLocation,\n            disk.diskAdapter,\n            disk.transportType,\n            disk.claimOption,\n            disk.diskStatus,\n            disk,\n            claimableState,\n            disk.objectUuids);\n   }\n\n   static fromPmemDiskData(storage: PmemDiskData, claimableState?: ClaimableState): StorageData {\n      return new StorageData(\n            storage.uuid,\n            storage.name,\n            \"\",\n            DiskType.PMEM,\n            storage.capacity,\n            DiskMgmtDiskUtil.getPMemMountDiskState(storage.diskStatus),\n            \"\",\n            \"\",\n            null,\n            [],\n            \"\",\n            null,\n            storage.claimOption,\n            storage.diskStatus,\n            storage,\n            claimableState,\n            storage.objectUuids);\n   }\n\n   static findStorageByIdentifier(group: DiskGroupData, storage: StorageIdentifier): StorageData {\n      if (!group || !storage) {\n         return null;\n      }\n      const diskData: DiskData = group.disks?.find(disk => StorageIdentifier.areEqual(disk, storage));\n      if (diskData) {\n         return StorageData.fromDiskData(diskData);\n      }\n      const device: PmemDiskData = group.pmemStorage?.find(disk => StorageIdentifier.areEqual(disk, storage));\n      if (device) {\n         return StorageData.fromPmemDiskData(device);\n      }\n      return null;\n   }\n}","<!--Copyright 2020-2022 VMware, Inc. All rights reserved. -- VMware Confidential-->\n<clr-button-group [vsan-button-group]=\"4\" class=\"btn-link\">\n   <clr-button *ngIf=\"isVsanMaxClaimedDisk()\"\n               id=\"{{DiskManagementActionAvailabilityService.ADD_DISKS_TO_STORAGE_POOL_ID}}\"\n               class=\"btn btn-sm\"\n               [disabled]=\"actionDisabled(DiskManagementActionAvailabilityService.ADD_DISKS_TO_STORAGE_POOL_ID)\"\n               (click)=\"addDisks()\"\n               [vsan-button-title]=\"getActionButtonTitle(DiskManagementActionAvailabilityService.ADD_DISKS_TO_STORAGE_POOL_ID)\">\n      {{\"vsan.actions.addDiskToDiskGroup.label\" | localized}}\n   </clr-button>\n   <clr-button id=\"{{DiskManagementActionAvailabilityService.VIEW_STORAGE_OBJECTS_ID}}\"\n               class=\"btn btn-sm\"\n               *ngIf=\"showViewStorageObjectsAction()\"\n               [disabled]=\"actionDisabled(DiskManagementActionAvailabilityService.VIEW_STORAGE_OBJECTS_ID)\"\n               (click)=\"viewStorageObjects()\"\n               [vsan-button-title]=\"getActionButtonTitle(DiskManagementActionAvailabilityService.VIEW_STORAGE_OBJECTS_ID)\">\n      {{viewStorageObjectsLabel}}\n   </clr-button>\n   <ng-container *ngIf=\"selectedDisk\">\n      <ng-container *ngIf=\"isInUse\">\n         <clr-button id=\"{{DiskManagementActionAvailabilityService.DISK_PRE_CHECK_ID}}\"\n                     class=\"btn btn-sm\"\n                     *ngIf=\"showDataMigrationPrecheckAction()\"\n                     [disabled]=\"actionDisabled(DiskManagementActionAvailabilityService.DISK_PRE_CHECK_ID)\"\n                     (click)=\"invokePreCheckEvacuation()\"\n                     [vsan-button-title]=\"getActionButtonTitle(DiskManagementActionAvailabilityService.DISK_PRE_CHECK_ID)\">\n            {{precheckDataMigrationLabel}}\n         </clr-button>\n         <clr-button id=\"{{DiskManagementActionAvailabilityService.DELETE_VSAN_DISK_ID}}\"\n                     *ngIf=\"showDeleteVsanDiskAction()\"\n                     class=\"btn btn-sm\"\n                     [disabled]=\"actionDisabled(DiskManagementActionAvailabilityService.DELETE_VSAN_DISK_ID)\"\n                     (click)=\"invokeDeleteDisk()\"\n                     [vsan-button-title]=\"getActionButtonTitle(DiskManagementActionAvailabilityService.DELETE_VSAN_DISK_ID)\">\n            {{\"vsan.dialog.deleteDiskFromDiskGroup.label\" | localized}}\n         </clr-button>\n         <clr-button id=\"{{DiskManagementActionAvailabilityService.DELETE_VSAN_DIRECT_DISK_ID}}\"\n                     *ngIf=\"showDeleteVsanDirectDiskAction()\"\n                     class=\"btn btn-sm\"\n                     [disabled]=\"actionDisabled(DiskManagementActionAvailabilityService.DELETE_VSAN_DIRECT_DISK_ID)\"\n                     (click)=\"invokeDeleteVsanDirectDisk()\"\n                     [vsan-button-title]=\"getActionButtonTitle(DiskManagementActionAvailabilityService.DELETE_VSAN_DIRECT_DISK_ID)\">\n            {{\"vsan.dialog.deleteVsanDirectDisk.label\" | localized}}\n         </clr-button>\n         <ng-container *ngIf=\"isVsanMaxClaimedDisk()\">\n            <clr-button id=\"{{DiskManagementActionAvailabilityService.MOUNT_DISK_ID}}\"\n                        class=\"btn btn-sm\"\n                        [disabled]=\"actionDisabled(DiskManagementActionAvailabilityService.MOUNT_DISK_ID)\"\n                        (click)=\"mountDisk()\"\n                        [vsan-button-title]=\"getActionButtonTitle(DiskManagementActionAvailabilityService.MOUNT_DISK_ID)\">\n               {{\"vsan.actions.mountDisk.label\" | localized}}\n            </clr-button>\n            <clr-button id=\"{{DiskManagementActionAvailabilityService.UNMOUNT_DISK_ID}}\"\n                        class=\"btn btn-sm\"\n                        [disabled]=\"actionDisabled(DiskManagementActionAvailabilityService.UNMOUNT_DISK_ID)\"\n                        (click)=\"unmountDisk()\"\n                        [vsan-button-title]=\"getActionButtonTitle(DiskManagementActionAvailabilityService.UNMOUNT_DISK_ID)\">\n               {{\"vsan.actions.unmountDisk.label\" | localized}}\n            </clr-button>\n         </ng-container>\n      </ng-container>\n      <clr-button id=\"{{DiskManagementActionAvailabilityService.TURN_LED_ON_ID}}\"\n                  [disabled]=\"actionDisabled(DiskManagementActionAvailabilityService.TURN_LED_ON_ID)\"\n                  (click)=\"turnLed(true)\"\n                  class=\"btn btn-sm\"\n                  [vsan-button-title]=\"getActionButtonTitle(DiskManagementActionAvailabilityService.TURN_LED_ON_ID)\">\n         {{\"vsan.actions.turnLedOn.label\" | localized}}\n      </clr-button>\n      <clr-button id=\"{{DiskManagementActionAvailabilityService.TURN_LED_OFF_ID}}\"\n                  [disabled]=\"actionDisabled(DiskManagementActionAvailabilityService.TURN_LED_OFF_ID)\"\n                  (click)=\"turnLed(false)\"\n                  class=\"btn btn-sm\"\n                  [vsan-button-title]=\"getActionButtonTitle(DiskManagementActionAvailabilityService.TURN_LED_OFF_ID)\">\n         {{\"vsan.actions.turnLedOff.label\" | localized}}\n      </clr-button>\n   </ng-container>\n   <clr-button id=\"{{DiskManagementActionAvailabilityService.MARK_DISK_AS_SSD_ID}}\"\n               *ngIf=\"markSsdAvailable\"\n               [disabled]=\"actionDisabled(DiskManagementActionAvailabilityService.MARK_DISK_AS_SSD_ID)\"\n               (click)=\"markSsd(true)\"\n               class=\"btn btn-sm\"\n               [vsan-button-title]=\"getActionButtonTitle(DiskManagementActionAvailabilityService.MARK_DISK_AS_SSD_ID)\">\n      {{\"storage.adapters.devices.action.tagAsSsd\" | localized}}\n   </clr-button>\n   <clr-button id=\"{{DiskManagementActionAvailabilityService.MARK_DISK_AS_HDD_ID}}\"\n               *ngIf=\"markHddAvailable\"\n               [disabled]=\"actionDisabled(DiskManagementActionAvailabilityService.MARK_DISK_AS_HDD_ID)\"\n               (click)=\"markSsd(false)\"\n               class=\"btn btn-sm\"\n               [vsan-button-title]=\"getActionButtonTitle(DiskManagementActionAvailabilityService.MARK_DISK_AS_HDD_ID)\">\n      {{\"storage.adapters.devices.action.untagAsSsd\" | localized}}\n   </clr-button>\n   <clr-button id=\"{{DiskManagementActionAvailabilityService.MARK_DISK_AS_LOCAL_ID}}\"\n               *ngIf=\"markLocalAvailable\"\n               [disabled]=\"actionDisabled(DiskManagementActionAvailabilityService.MARK_DISK_AS_LOCAL_ID)\"\n               (click)=\"markLocal(true)\"\n               class=\"btn btn-sm\"\n               [vsan-button-title]=\"getActionButtonTitle(DiskManagementActionAvailabilityService.MARK_DISK_AS_LOCAL_ID)\">\n      {{\"storage.adapters.devices.action.markAsLocal\" | localized}}\n   </clr-button>\n   <clr-button id=\"{{DiskManagementActionAvailabilityService.MARK_DISK_AS_REMOTE_ID}}\"\n               *ngIf=\"markRemoteAvailable\"\n               [disabled]=\"actionDisabled(DiskManagementActionAvailabilityService.MARK_DISK_AS_REMOTE_ID)\"\n               (click)=\"markLocal(false)\"\n               class=\"btn btn-sm\"\n               [vsan-button-title]=\"getActionButtonTitle(DiskManagementActionAvailabilityService.MARK_DISK_AS_REMOTE_ID)\">\n      {{\"storage.adapters.devices.action.markAsRemote\" | localized}}\n   </clr-button>\n   <clr-button id=\"{{DiskManagementActionAvailabilityService.ERASE_DISK_PARTITIONS_ID}}\"\n               *ngIf=\"erasePartitionsAvailable\"\n               [disabled]=\"actionDisabled(DiskManagementActionAvailabilityService.ERASE_DISK_PARTITIONS_ID)\"\n               (click)=\"erasePartitions()\"\n               class=\"btn btn-sm\"\n               [vsan-button-title]=\"getActionButtonTitle(DiskManagementActionAvailabilityService.ERASE_DISK_PARTITIONS_ID)\">\n      {{\"storage.adapters.devices.action.erasePartitions\" | localized}}\n   </clr-button>\n</clr-button-group>","/* Copyright 2020-2022 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, Input} from \"@angular/core\";\nimport {StorageData} from \"@component/diskmgmt/model/storage-data\";\nimport {PreCheckEvacuationDialogSize} from \"@component/precheck/pre-check-evacuation-dialog-size\";\nimport {DiskData} from \"@generated/disk-data\";\nimport {DiskGroupData} from \"@generated/disk-group-data\";\nimport {DiskGroupMutationService} from \"@generated/disk-group-mutation-service\";\nimport {DiskGroupType} from \"@generated/disk-group-type\";\nimport {DiskLocalityType} from \"@generated/disk-locality-type\";\nimport {DiskType} from \"@generated/disk-type\";\nimport {HostData} from \"@generated/host-data\";\nimport {SpaceEfficiencyConfig} from \"@generated/space-efficiency-config\";\nimport {VsanCapabilityData} from \"@generated/vsan-capability-data\";\nimport {DiskGroupActionData} from \"@model/disk-group-action.data\";\nimport {HostActionData} from \"@model/host-action.data\";\nimport {DeleteDisksContext} from \"@navigation/context/delete-disks-context\";\nimport {DeleteVsanDirectDisksContext} from \"@navigation/context/delete-vsan-direct-disks-context\";\nimport {EvacuationContext} from \"@navigation/context/evacuation.context\";\nimport {MountDiskContext} from \"@navigation/context/mount-disk-context\";\nimport {UnmountDiskContext} from \"@navigation/context/unmount-disk-context\";\nimport {NavigationService, PlatformExtension} from \"@navigation/navigation.service\";\nimport {ManagedObject} from \"@service/managed-object\";\nimport {SpaceEfficiencyService} from \"@service/space-efficiency-service\";\nimport {DiskMgmtDiskGroupUtil} from \"@util/disk-mgmt-disk-group.util\";\nimport {DiskMgmtDiskUtil} from \"@util/disk-mgmt-disk.util\";\nimport {ClaimableState} from \"@util/disk-mgmt.util\";\nimport {Logger} from \"@util/logger\";\nimport {ModalBuilder} from \"@util/modal-builder\";\nimport {ActionAvailableStatus} from \"@util/validation/action-available-status\";\nimport {VsanDiskMgmtActionsUtil} from \"@util/vsan-disk-mgmt-actions-util\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {VsanRoutes} from \"../../../../vsan-routes\";\nimport {ViewObjectsContext} from \"../model/view-objects-context\";\nimport {DiskManagementActionAvailabilityService} from \"../validation/disk-management-action-availability.service\";\nimport {DiskManagementActionContext} from \"../validation/disk-management-action-context\";\nimport {DedupEnabledWarningComponent} from \"./deletediskgroup/dedup-enabled-warning.component\";\n\n@Component({\n   selector: \"vsan-storage-actions\",\n   templateUrl: \"storage-actions.html\",\n   styleUrls: [\"storage-actions.scss\"],\n   host: {class: \"vsan-actions\"},\n})\nexport class StorageActionsComponent {\n   DiskManagementActionAvailabilityService: typeof DiskManagementActionAvailabilityService =\n         DiskManagementActionAvailabilityService;\n\n   @Input()\n   autoClaimMode: boolean;\n\n   @Input()\n   spaceEfficiencyConfig: SpaceEfficiencyConfig = SpaceEfficiencyConfig.NONE;\n\n   @Input()\n   hasEditPermission: boolean = false;\n\n   @Input()\n   hasHostMaintenancePermission: boolean = false;\n\n   @Input()\n   clusterCapabilities: VsanCapabilityData;\n\n   @Input()\n   claimableState: ClaimableState = ClaimableState.IN_USE;\n\n   @Input()\n   selectedStorage: StorageData;\n\n   @Input()\n   host: HostData;\n\n   @Input()\n   diskGroup: DiskGroupData;\n\n   constructor(private diskGroupSvc: DiskGroupMutationService,\n         private navigationService: NavigationService,\n         private spaceEfficiencyService: SpaceEfficiencyService,\n         private diskManagementActionAvailabilityService: DiskManagementActionAvailabilityService) {\n   }\n\n   get selectedDisk(): DiskData {\n      return this.selectedStorage && !this.isSelectedStoragePmem() && this.selectedStorage.storage as DiskData;\n   }\n\n   get isInUse(): boolean {\n      return this.claimableState === ClaimableState.IN_USE;\n   }\n\n   actionDisabled = (actionId: string): boolean => {\n      return !this.getActionStatus(actionId).available;\n   };\n\n   getActionButtonTitle = (actionId: string): string => {\n      return this.getActionStatus(actionId).message;\n   };\n\n   private isVsanClaimedDisk(): boolean {\n      return DiskMgmtDiskUtil.isClaimedForVsan(this.selectedDisk.claimOption);\n   }\n\n   isVsanMaxClaimedDisk(): boolean {\n      return DiskMgmtDiskGroupUtil.isVsanMaxSingleTier(this.diskGroup);\n   }\n\n   private getActionStatus = (actionId: string): ActionAvailableStatus => {\n      return this.diskManagementActionAvailabilityService.checkAvailability(this.getActionValidationContext(actionId));\n   };\n\n   private getActionValidationContext(actionId: string): DiskManagementActionContext {\n      return {\n         actionId: actionId,\n         hasEditPermission: this.hasEditPermission,\n         vsanConfig: null,\n         isEmptyCluster: null,\n         autoClaimMode: this.autoClaimMode,\n         diskGroup: this.diskGroup,\n         host: this.host,\n         storageData: this.selectedStorage,\n         clusterCapabilities: this.clusterCapabilities,\n         hasHostMaintenancePermission: this.hasHostMaintenancePermission,\n         spaceEfficiencyConfig: this.spaceEfficiencyConfig,\n      };\n   }\n\n   turnLed = (on: boolean): void => {\n      this.diskGroupSvc.setDiskLedState(this.host.hostRef, [this.selectedDisk.uuid], on)\n            .then(taskRef => {\n               Logger.info(\"Turning LED indicator \" + (on ? \"on\" : \"off\") + \" for disk:\", this.selectedDisk.uuid);\n            });\n   };\n\n   invokePreCheckEvacuation = (): void => {\n      if (this.clusterCapabilities.isDiskResourcePrecheckSupported) {\n         const evacuationContext: EvacuationContext = VsanDiskMgmtActionsUtil.getEvacuationContext(\n               this.host.hostRef, this.selectedDisk.vsanUuid);\n         this.navigationService.navigateTo(PlatformExtension.CLUSTER_DATA_MIGRATION_PRE_CHECK,\n               ManagedObject.contextObject, evacuationContext);\n         return;\n      }\n\n      const context: any = {\n         objectName: this.selectedDisk.name,\n         objectUid: this.selectedDisk.vsanUuid,\n         hostMor: this.host.hostRef,\n      };\n\n      new ModalBuilder(\"preCheckEvacuation\")\n            .setSize(PreCheckEvacuationDialogSize.WIDTH, PreCheckEvacuationDialogSize.HEIGHT_WITH_OBJECTS)\n            .open(context);\n   };\n\n   /**\n    * This method is used to delete the disk the user selected.\n    */\n   invokeDeleteDisk = (): void => {\n      if (this.spaceEfficiencyService.isOnlyAllFlashSupportedForRemovingDisk(this.spaceEfficiencyConfig) &&\n            this.diskGroup.diskGroupType === DiskGroupType.ALL_FLASH) {\n         new ModalBuilder(\"diskManagement/deleteDiskUnsupportedDialog\")\n               .setSize(580, DedupEnabledWarningComponent.DIALOG_DELETE_DISK_HEIGHT_SMALL)\n               .open();\n         return;\n      }\n\n      const context: DeleteDisksContext = {\n         disks: [this.selectedDisk],\n         host: HostActionData.fromHostData(this.host),\n         diskGroups: this.getDiskGroupActionData(),\n         isVsanMaxEnabled: this.isVsanMaxClaimedDisk(),\n      };\n\n      const height: number = this.actionDisabled(DiskManagementActionAvailabilityService.DISK_PRE_CHECK_ID)\n            ? VsanDiskMgmtActionsUtil.DELETE_DISKS_HEIGHT_SMALL\n            : VsanDiskMgmtActionsUtil.DELETE_DISK_GROUP_HEIGHT_MEDIUM;\n\n      new ModalBuilder(\"diskManagement/deleteDisks\")\n            .setSize(VsanDiskMgmtActionsUtil.DELETE_DISKS_WIDTH, height)\n            .open(context)\n            .then((tasks: ManagedObject[]) => {\n               this.diskManagementActionAvailabilityService.taskStarted.next(tasks);\n            });\n   };\n\n   invokeDeleteVsanDirectDisk(): void {\n      const context: DeleteVsanDirectDisksContext = {\n         disks: [this.selectedDisk],\n      };\n\n      new ModalBuilder(\"diskManagement/deleteVsanDirectDisks\")\n            .setSize(\n                  VsanDiskMgmtActionsUtil.DELETE_VSAN_DIRECT_DISKS_WIDTH,\n                  VsanDiskMgmtActionsUtil.DELETE_VSAN_DIRECT_DISKS_HEIGHT)\n            .open(context)\n            .then((task: ManagedObject) => {\n               this.diskManagementActionAvailabilityService.taskStarted.next([task]);\n            });\n   }\n\n   mountDisk(): void {\n      const context: MountDiskContext = {\n         diskName: this.selectedDisk.name,\n         diskCanonicalName: this.selectedDisk.disk?.canonicalName,\n         hostRef: this.host.hostRef,\n      };\n\n      new ModalBuilder(`${VsanRoutes.DISK_MANAGEMENT_VIEW}/mountStoragePoolDisk`)\n            .setSize(VsanDiskMgmtActionsUtil.MOUNT_DISK_GROUP_DIALOG_WIDTH,\n                  VsanDiskMgmtActionsUtil.MOUNT_DISK_GROUP_DIALOG_HEIGHT)\n            .open(context)\n            .then((task: ManagedObject) => {\n               this.diskManagementActionAvailabilityService.taskStarted.next([task]);\n            });\n   }\n\n   unmountDisk(): void {\n      const context: UnmountDiskContext = {\n         disk: this.selectedDisk,\n         host: HostActionData.fromHostData(this.host),\n      };\n\n      new ModalBuilder(`${VsanRoutes.DISK_MANAGEMENT_VIEW}/unmountStoragePoolDisk`)\n            .setSize(VsanDiskMgmtActionsUtil.UNMOUNT_DISK_DIALOG_WIDTH,\n                  VsanDiskMgmtActionsUtil.UNMOUNT_DISK_DIALOG_HEIGHT)\n            .open(context)\n            .then((task: ManagedObject) => {\n               this.diskManagementActionAvailabilityService.taskStarted.next([task]);\n            });\n   }\n\n   get markSsdAvailable(): boolean {\n      if (!this.selectedDisk || this.claimableState === ClaimableState.IN_USE || this.host.isSingleTierEnabled) {\n         return false;\n      }\n      return !this.selectedDisk.isFlash;\n   }\n\n   get markHddAvailable(): boolean {\n      if (!this.selectedDisk || this.claimableState === ClaimableState.IN_USE || this.host.isSingleTierEnabled) {\n         return false;\n      }\n      return this.selectedDisk.isFlash;\n   }\n\n   markSsd = (ssd: boolean): void => {\n      new ModalBuilder(\"diskManagement/markSsd\")\n            .setSize(576, ssd ? 240 : 180)\n            .open(ssd)\n            .then(result => {\n               this.diskGroupSvc.setDiskType(this.host.hostRef, [this.selectedDisk.uuid], ssd)\n                     .then((tasks: ManagedObject[]) => {\n                        this.diskManagementActionAvailabilityService.taskStarted.next(tasks);\n                     });\n            });\n   };\n\n   get markLocalAvailable(): boolean {\n      if (!this.selectedDisk || this.claimableState !== ClaimableState.NOT_USABLE) {\n         return false;\n      }\n      return this.selectedDisk.driveLocality !== DiskLocalityType.Local;\n   }\n\n   get markRemoteAvailable(): boolean {\n      if (!this.selectedDisk || this.claimableState !== ClaimableState.NOT_USABLE) {\n         return false;\n      }\n      return this.selectedDisk.driveLocality !== DiskLocalityType.Remote;\n   }\n\n   markLocal = (local: boolean): void => {\n      new ModalBuilder(\"diskManagement/markLocal\")\n            .setSize(576, 160)\n            .open(local)\n            .then(result => {\n               this.diskGroupSvc.setDiskLocality(this.host.hostRef, [this.selectedDisk.uuid], local)\n                     .then((tasks: ManagedObject[]) => {\n                        this.diskManagementActionAvailabilityService.taskStarted.next(tasks);\n                     });\n            });\n   };\n\n   get erasePartitionsAvailable(): boolean {\n      return this.selectedDisk && this.claimableState === ClaimableState.NOT_USABLE;\n   }\n\n   get precheckDataMigrationLabel(): string {\n      return DiskMgmtDiskUtil.getDataMigrationPrecheckLabel(this.clusterCapabilities);\n   }\n\n   get viewStorageObjectsLabel(): string {\n      return VsanUiUtils.getString(this.isSelectedStoragePmem()\n            ? \"vsan.actions.viewDeviceObjects.label\"\n            : \"vsan.actions.viewDiskObjects.label\");\n   }\n\n   addDisks(): void {\n      new ModalBuilder(\"diskManagement/addDisk\")\n            .open(this.diskGroup)\n            .then((task: ManagedObject) => this.diskManagementActionAvailabilityService.taskStarted.next([task]));\n   }\n\n   showViewStorageObjectsAction = (): boolean => this.selectedStorage &&\n         !DiskMgmtDiskGroupUtil.isUnusedDiskGroup(this.diskGroup) &&\n         this.clusterCapabilities.isObjectIdentitiesSupported;\n\n   showDataMigrationPrecheckAction = (): boolean => this.isVsanClaimedDisk() || this.isVsanMaxClaimedDisk();\n\n   showDeleteVsanDiskAction = (): boolean => !this.autoClaimMode\n         && (this.isVsanClaimedDisk() || this.isVsanMaxClaimedDisk());\n\n   showDeleteVsanDirectDiskAction = (): boolean => !this.autoClaimMode\n         && !this.isVsanClaimedDisk() && !this.isVsanMaxClaimedDisk();\n\n   isSelectedStoragePmem = (): boolean => this.selectedStorage.type === DiskType.PMEM;\n\n   viewStorageObjects = (): void => this.diskManagementActionAvailabilityService.objectsViewSelected\n         .next(new ViewObjectsContext(this.host, this.diskGroup, this.selectedStorage));\n\n   erasePartitions = (): void => {\n      const context: any = {\n         selectedDevices: this.selectedDisk.disk,\n      };\n      this.navigationService.invokePlatformAction(PlatformExtension.ERASE_PARTITIONS,\n            [ManagedObject.uid(this.host.hostRef)],\n            context);\n   };\n\n   private getDiskGroupActionData(): DiskGroupActionData[] {\n      return this.isVsanMaxClaimedDisk()\n            ? []\n            : [DiskGroupActionData.fromDiskGroupData(this.diskGroup)];\n   }\n}","/* Copyright 2017-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component} from \"@angular/core\";\n\n@Component({\n   templateUrl: \"dedup-enabled-warning.html\",\n   selector: \"vsan-diskmgmt-delete-unavailable\",\n})\nexport class DedupEnabledWarningComponent {\n   static readonly DIALOG_DELETE_DISK_HEIGHT_SMALL: number = 210;\n}","<!-- Copyright 2020-2022 VMware, Inc. All rights reserved. -- VMware Confidential -->\n<vsan-storage-actions\n      [autoClaimMode]=\"autoClaimMode\"\n      [spaceEfficiencyConfig]=\"spaceEfficiencyConfig\"\n      [hasEditPermission]=\"hasEditPermission\"\n      [clusterCapabilities]=\"clusterCapabilities\"\n      [hasHostMaintenancePermission]=\"hasHostMaintenancePermission\"\n      [claimableState]=\"claimableState\"\n      [selectedStorage]=\"selectedStorageData\"\n      [host]=\"host\"\n      [diskGroup]=\"storageGroup\">\n</vsan-storage-actions>\n<clr-datagrid *ngIf=\"showGrid\"\n              #dataGrid\n              [(clrDgSingleSelected)]=\"selectedStorageData\"\n              (clrDgSingleSelectedChange)=\"selectionChanged($event)\">\n   <!-- Datagrid Header -->\n   <clr-dg-column [clrDgField]=\"'name'\" class=\"name-column\" vsan-show-title >\n      {{\"vsan.disk.list.name\" | localized}}\n   </clr-dg-column>\n   <clr-dg-column *ngIf=\"!isUnusedDiskGroup\"\n                  [clrDgSortBy]=\"healthComparator\"\n                  [clrDgSortOrder]=\"ascSort\"\n                  vsan-show-title>\n      {{\"vsan.disk.list.vsanHealthStatus\" | localized}}\n      <clr-dg-filter *ngIf=\"healthKeys?.size > 1\">\n         <vsan-storage-group-details-filter-health [items]=\"healthKeys\">\n         </vsan-storage-group-details-filter-health>\n      </clr-dg-filter>\n   </clr-dg-column>\n   <clr-dg-column class=\"capacity-column\">\n      {{\"vsan.disk.list.capacity\" | localized}}\n   </clr-dg-column>\n   <clr-dg-column *ngIf=\"isVsanDiskGroup || isVsanMaxSingleTier\"\n                  [clrDgField]=\"'vsanUuid'\" vsan-show-title>\n      <ng-container *clrDgHideableColumn=\"{hidden: true}\">\n         {{\"vsan.disk.list.uuid\" | localized}}\n      </ng-container>\n   </clr-dg-column>\n   <clr-dg-column [clrDgSortBy]=\"driveTypeComparator\" vsan-show-title>\n      {{\"vsan.disk.list.driveType\" | localized}}\n      <clr-dg-filter *ngIf=\"driveTypeKeys?.size > 1\">\n         <vsan-storage-group-details-filter-drive-type [items]=\"driveTypeKeys\">\n         </vsan-storage-group-details-filter-drive-type>\n      </clr-dg-filter>\n   </clr-dg-column>\n   <clr-dg-column *ngIf=\"isVsanDiskGroup\"\n                  [clrDgSortBy]=\"diskTierComparator\" vsan-show-title>\n      {{\"vsan.disk.list.diskRole\" | localized}}\n      <clr-dg-filter *ngIf=\"diskTierKeys?.size > 1\">\n         <vsan-storage-group-details-filter-disk-tier [items]=\"diskTierKeys\">\n         </vsan-storage-group-details-filter-disk-tier>\n      </clr-dg-filter>\n   </clr-dg-column>\n   <clr-dg-column *ngIf=\"isUnusedDiskGroup\"\n                  [clrDgSortBy]=\"deviceOperationalStateComparator\" vsan-show-title>\n      {{\"vsan.disk.list.operationalState\" | localized}}\n      <clr-dg-filter *ngIf=\"deviceOperationalStateKeys?.size > 1\">\n         <vsan-storage-group-details-filter-device-operational-state [items]=\"deviceOperationalStateKeys\">\n         </vsan-storage-group-details-filter-device-operational-state>\n      </clr-dg-filter>\n   </clr-dg-column>\n   <clr-dg-column *ngIf=\"!isUnusedDiskGroup\"\n                  [clrDgSortBy]=\"deviceMountStateComparator\" vsan-show-title>\n      {{\"vsan.disk.list.state\" | localized}}\n      <clr-dg-filter *ngIf=\"deviceMountStateKeys?.size > 1\">\n         <vsan-storage-group-details-filter-device-state [items]=\"deviceMountStateKeys\">\n         </vsan-storage-group-details-filter-device-state>\n      </clr-dg-filter>\n   </clr-dg-column>\n   <clr-dg-column *ngIf=\"isNotPmemGroup\"\n                  [clrDgSortBy]=\"driveLocalityComparator\"\n                  vsan-show-title>\n      <ng-container *clrDgHideableColumn=\"{hidden: true}\">\n         {{\"vsan.disk.list.driveLocality\" | localized}}\n      </ng-container>\n      <clr-dg-filter *ngIf=\"driveLocalityKeys?.size > 1\">\n         <vsan-storage-group-details-filter-drive-locality [items]=\"driveLocalityKeys\">\n         </vsan-storage-group-details-filter-drive-locality>\n      </clr-dg-filter>\n   </clr-dg-column>\n   <clr-dg-column *ngIf=\"isNotPmemGroup\"\n                  [clrDgField]=\"'diskAdapter'\" vsan-show-title>\n      <ng-container *clrDgHideableColumn=\"{hidden: true}\">\n         {{\"vsan.disk.list.diskAdapter\" | localized}}\n      </ng-container>\n   </clr-dg-column>\n   <clr-dg-column *ngIf=\"isNotPmemGroup\"\n                  [clrDgSortBy]=\"transportTypeComparator\"\n                  vsan-show-title>\n      <ng-container *clrDgHideableColumn=\"{hidden: true}\">\n         {{\"vsan.disk.list.transportType\" | localized}}\n      </ng-container>\n      <clr-dg-filter *ngIf=\"transportTypeKeys?.size > 1\">\n         <vsan-storage-group-details-filter-transport-type [items]=\"transportTypeKeys\">\n         </vsan-storage-group-details-filter-transport-type>\n      </clr-dg-filter>\n   </clr-dg-column>\n   <clr-dg-column [clrDgSortBy]=\"physicalLocationComparator\"\n                  vsan-show-title>\n      <ng-container *clrDgHideableColumn=\"{hidden: true}\">\n         {{\"vsan.disk.list.physicalLocation\" | localized}}\n      </ng-container>\n      <clr-dg-filter *ngIf=\"physicalLocationKeys?.size > 1\">\n         <vsan-storage-group-details-filter-physical-location [items]=\"physicalLocationKeys\">\n         </vsan-storage-group-details-filter-physical-location>\n      </clr-dg-filter>\n   </clr-dg-column>\n   <clr-dg-column *ngIf=\"isVsanDiskGroup || isVsanMaxSingleTier\">\n      <ng-container *clrDgHideableColumn=\"{hidden: true}\" vsan-show-title>\n         {{\"vsan.disk.list.fileSystemVersion\" | localized}}\n      </ng-container>\n   </clr-dg-column>\n   <clr-dg-column *ngIf=\"isUnusedDiskGroup\"\n                  [clrDgSortBy]=\"claimableStateComparator\" vsan-show-title>\n      {{\"vsan.disk.list.claimableState\" | localized}}\n      <clr-dg-filter *ngIf=\"claimableStateKeys?.size > 1\">\n         <vsan-storage-group-details-filter-claimable-state [items]=\"claimableStateKeys\">\n         </vsan-storage-group-details-filter-claimable-state>\n      </clr-dg-filter>\n   </clr-dg-column>\n\n   <clr-dg-row *clrDgItems=\"let row of storageItems\" [clrDgItem]=\"row\">\n      <clr-dg-cell vsan-show-title>\n         <clr-icon *ngIf=\"row.iconShape\" [attr.shape]=\"row.iconShape\"></clr-icon>\n         {{row.name}}\n      </clr-dg-cell>\n      <clr-dg-cell *ngIf=\"!isUnusedDiskGroup\" vsan-show-title>\n         {{getDiskHealth(row.diskStatus)}}\n      </clr-dg-cell>\n      <clr-dg-cell class=\"capacity-column right-align-cell no-vertical-padding\">\n         <vsan-storage-capacity [capacity]=\"row.capacity\">\n         </vsan-storage-capacity>\n      </clr-dg-cell>\n      <clr-dg-cell *ngIf=\"isVsanDiskGroup || isVsanMaxSingleTier\" vsan-show-title>\n         {{row.vsanUuid}}\n      </clr-dg-cell>\n      <clr-dg-cell vsan-show-title>\n         {{row.type | diskTypeLabel}}\n      </clr-dg-cell>\n      <clr-dg-cell *ngIf=\"isVsanDiskGroup\" vsan-show-title>\n         {{getDiskTier(row.claimOption)}}\n      </clr-dg-cell>\n      <clr-dg-cell *ngIf=\"isUnusedDiskGroup\" vsan-show-title>\n         {{getDiskOperationalState(row.deviceState)}}\n      </clr-dg-cell>\n      <clr-dg-cell *ngIf=\"!isUnusedDiskGroup\" vsan-show-title>\n         {{getDiskMountedState(row.diskStatus)}}\n      </clr-dg-cell>\n      <clr-dg-cell *ngIf=\"isNotPmemGroup\" vsan-show-title>\n         {{getDiskLocality(row.driveLocality)}}\n      </clr-dg-cell>\n      <clr-dg-cell *ngIf=\"isNotPmemGroup\" vsan-show-title>\n         {{row.diskAdapter}}\n      </clr-dg-cell>\n      <clr-dg-cell *ngIf=\"isNotPmemGroup\" vsan-show-title>\n         {{row.transportType | transportType}}\n      </clr-dg-cell>\n      <clr-dg-cell vsan-show-title>\n         {{getPhysicalLocation(row.physicalLocation)}}\n      </clr-dg-cell>\n      <clr-dg-cell *ngIf=\"isVsanDiskGroup || isVsanMaxSingleTier\" vsan-show-title>\n         {{getFsVersion(row.diskStatus)}}\n      </clr-dg-cell>\n      <clr-dg-cell *ngIf=\"isUnusedDiskGroup\" vsan-show-title>\n         {{getClaimableStateLabel(row.claimableState)}}\n      </clr-dg-cell>\n   </clr-dg-row>\n\n   <clr-dg-footer>\n<!--      <vsan-export [source]=\"exportDataSource\"-->\n<!--                   [filename]=\"DiskMgmtExportConfig.storageGroupDetailsFileName\"-->\n<!--                   [dataExtractors]=\"DiskMgmtExportConfig.getStorageDataExtractors(storageGroup)\">-->\n<!--      </vsan-export>-->\n      <clr-dg-pagination #pagination\n                         [clrDgPageSize]=\"DEFAULT_ITEMS_PER_PAGE\"\n                         [hidden]=\"!storageItems?.length\"\n                         [clrDgTotalItems]=\"storageItems?.length\">\n         {{getPaginationLabel(pagination)}}\n      </clr-dg-pagination>\n   </clr-dg-footer>\n</clr-datagrid>\n","/* Copyright 2020 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component} from \"@angular/core\";\nimport {EnumeratedFilterSelectionResolver} from \"@component/datagrid/filter/enumerated-filter.component\";\nimport {DiskMgmtFilterComponent} from \"./disk-mgmt-filter.component\";\nimport {DiskMgmtDiskUtil} from \"@util/disk-mgmt-disk.util\";\nimport {StorageData} from \"@component/diskmgmt/model/storage-data\";\n\n@Component({\n   templateUrl: \"disk-mgmt-filter.html\",\n   selector: \"vsan-storage-group-details-filter-drive-type\",\n   styleUrls: [\"disk-mgmt-filter.scss\"],\n})\nexport class StorageGroupDetailsFilterDriveTypeComponent extends DiskMgmtFilterComponent<StorageData> {\n\n   readonly comparator: EnumeratedFilterSelectionResolver<StorageData, string> =\n         new class extends EnumeratedFilterSelectionResolver<StorageData, string> {\n            isSelected(item: StorageData, selectedStateKeys: string[]): boolean {\n               return selectedStateKeys.some(state => state === DiskMgmtDiskUtil.getDiskType(item.type));\n            }\n         }();\n}","/* Copyright 2021 VMware, Inc. All rights reserved. -- VMware Confidential */\n\n/*\n   Names to use in the Loader decorator\n */\nexport enum LoaderName {\n   ON_INIT = \"on-init\",\n   ON_CONFIRM = \"on-confirm\",\n   PERFORM_CHANGE = \"perform-change\",\n   REGISTER = \"register\",\n   UPGRADE = \"upgrade\",\n   MONITOR = \"monitor\",\n   DATA_EVACUATION = \"data-evacuation\",\n}\n","/* Copyright 2021-2022 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {HostData} from \"@generated/host-data\";\nimport {DiskMgmtHostUtil} from \"@util/disk-mgmt-host.util\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {ExportDataExtractor} from \"@component/export/export-data-extractor\";\nimport {StorageGroupData} from \"../model/storage-group-data\";\nimport {DiskMgmtDiskGroupUtil} from \"@util/disk-mgmt-disk-group.util\";\nimport {StorageData} from \"@component/diskmgmt/model/storage-data\";\nimport {DiskMgmtDiskUtil} from \"@util/disk-mgmt-disk.util\";\nimport {ExportDataSource} from \"@component/export/export-data-source\";\nimport {ClrDatagrid} from \"@clr/angular\";\nimport {DatagridExportDataSourceAdapter} from \"@component/export/adapters/datagrid-export-data-source-adapter\";\nimport {DiskMgmtUtil} from \"@util/disk-mgmt.util\";\n\nexport class DiskMgmtExportConfig {\n\n   static createExportDataSource(datagrid: ClrDatagrid): ExportDataSource {\n      return new DatagridExportDataSourceAdapter(datagrid);\n   }\n\n   static readonly hostListFileName: string = \"disk_mgmt_hosts\";\n\n   static hostDataExtractors: ExportDataExtractor[] = [\n      {\n         label: \"vsan.manage.diskManagement.hostList.name\",\n         value: (host: HostData) => host.name,\n      },\n      {\n         label: \"vsan.manage.diskManagement.hostList.health\",\n         value: (host: HostData) => VsanUiUtils.getString(DiskMgmtHostUtil.getHealthKey(host)),\n      },\n      {\n         label: \"vsan.manage.diskManagement.hostList.disksInUse\",\n         value: (host: HostData) => DiskMgmtHostUtil.getClaimedDisksLabel(host),\n      },\n      {\n         label: \"vsan.manage.diskManagement.hostList.state\",\n         value: (host: HostData) => DiskMgmtHostUtil.getState(host),\n      },\n      {\n         label: \"vsan.manage.diskManagement.hostList.capacity\",\n         value: (host: HostData) => DiskMgmtUtil.stringifyCapacity(host.capacity),\n      },\n      {\n         label: \"vsan.manage.diskManagement.hostList.contributesTo\",\n         value: (host: HostData) =>  DiskMgmtHostUtil.getGroupTypeKeys(host)\n               .map(key => VsanUiUtils.getString(key))\n               .join(\";\"),\n      },\n      {\n         label: \"vsan.manage.diskManagement.hostList.faultDomain\",\n         value: (host: HostData) => host.faultDomain,\n      },\n      {\n         label: \"vsan.manage.diskManagement.hostList.networkPartitionGroup\",\n         value: (host: HostData) => host.networkPartitionGroup\n            ? VsanUiUtils.getString(\"vsan.host.list.partitionGroupFormat\", host.networkPartitionGroup)\n            : \"\",\n      },\n   ];\n\n   static readonly storageGroupDetailsFileName: string = \"disk_mgmt_storage\";\n\n   static getStorageDataExtractors(storageGroup: StorageGroupData): ExportDataExtractor[] {\n      return [\n         DiskMgmtExportConfig.storageName,\n         !DiskMgmtDiskGroupUtil.isUnusedDiskGroup(storageGroup) ? DiskMgmtExportConfig.storageHealth : null,\n         DiskMgmtExportConfig.storageCapacity,\n         DiskMgmtDiskGroupUtil.isVsanDiskGroup(storageGroup) || DiskMgmtDiskGroupUtil.isVsanMaxSingleTier(storageGroup)\n               ? DiskMgmtExportConfig.storageUuid : null,\n         DiskMgmtExportConfig.storageDriveType,\n         DiskMgmtDiskGroupUtil.isVsanDiskGroup(storageGroup) ? DiskMgmtExportConfig.storageTier : null,\n         !DiskMgmtDiskGroupUtil.isUnusedDiskGroup(storageGroup) ? DiskMgmtExportConfig.storageMountState : null,\n         DiskMgmtDiskGroupUtil.isUnusedDiskGroup(storageGroup) ? DiskMgmtExportConfig.storageOperationalState : null,\n         !DiskMgmtDiskGroupUtil.isPmemDiskGroup(storageGroup) ? DiskMgmtExportConfig.storageLocality : null,\n         !DiskMgmtDiskGroupUtil.isPmemDiskGroup(storageGroup) ? DiskMgmtExportConfig.storageDiskAdapter : null,\n         !DiskMgmtDiskGroupUtil.isPmemDiskGroup(storageGroup) ? DiskMgmtExportConfig.storageTransportType : null,\n         DiskMgmtExportConfig.storagePhysicalLocation,\n         DiskMgmtDiskGroupUtil.isVsanDiskGroup(storageGroup) || DiskMgmtDiskGroupUtil.isVsanMaxSingleTier(storageGroup)\n               ? DiskMgmtExportConfig.storageFsVersion : null,\n         DiskMgmtDiskGroupUtil.isUnusedDiskGroup(storageGroup) ? DiskMgmtExportConfig.storageClaimableState : null,\n      ].filter(dataExtractor => !!dataExtractor);\n   }\n\n   private static storageName: ExportDataExtractor = {\n      label: \"vsan.disk.list.name\",\n      value: (storage: StorageData) => storage.name,\n   };\n\n   private static storageHealth: ExportDataExtractor = {\n      label: \"vsan.disk.list.vsanHealthStatus\",\n      value: (storage: StorageData) => DiskMgmtDiskUtil.getHealth(storage.diskStatus),\n   };\n\n   private static storageCapacity: ExportDataExtractor = {\n      label: \"vsan.disk.list.capacity\",\n      value: (storage: StorageData) => DiskMgmtUtil.stringifyCapacity(storage.capacity),\n   };\n\n   private static storageUuid: ExportDataExtractor = {\n      label: \"vsan.disk.list.uuid\",\n      value: (storage: StorageData) => storage.vsanUuid,\n   };\n\n   private static storageDriveType: ExportDataExtractor = {\n      label: \"vsan.disk.list.driveType\",\n      value: (storage: StorageData) => DiskMgmtDiskUtil.getDiskType(storage.type),\n   };\n\n   private static storageTier: ExportDataExtractor = {\n      label: \"vsan.disk.list.diskRole\",\n      value: (storage: StorageData) => DiskMgmtDiskUtil.getLocalizedStorage(storage.claimOption),\n   };\n\n   private static storageMountState: ExportDataExtractor = {\n      label: \"vsan.disk.list.state\",\n      value: (storage: StorageData) => DiskMgmtDiskUtil.localizeMountedState(storage.diskStatus),\n   };\n\n   private static storageOperationalState: ExportDataExtractor = {\n      label: \"vsan.disk.list.operationalState\",\n      value: (storage: StorageData) => DiskMgmtDiskUtil.localizeOperationalState(storage.deviceState),\n   };\n\n   private static storageLocality: ExportDataExtractor = {\n      label: \"vsan.disk.list.driveLocality\",\n      value: (storage: StorageData) => DiskMgmtDiskUtil.localizeLocality(storage.driveLocality),\n   };\n\n   private static storageDiskAdapter: ExportDataExtractor = {\n      label: \"vsan.disk.list.diskAdapter\",\n      value: (storage: StorageData) => storage.diskAdapter,\n   };\n\n   private static storageTransportType: ExportDataExtractor = {\n      label: \"vsan.disk.list.transportType\",\n      value: (storage: StorageData) =>  DiskMgmtDiskUtil.getTransportTypeText(storage.transportType),\n   };\n\n   private static storagePhysicalLocation: ExportDataExtractor = {\n      label: \"vsan.disk.list.physicalLocation\",\n      value: (storage: StorageData) =>  DiskMgmtDiskUtil.getPhysicalLocation(storage.physicalLocation),\n   };\n\n   private static storageFsVersion: ExportDataExtractor = {\n      label: \"vsan.disk.list.fileSystemVersion\",\n      value: (storage: StorageData) =>  DiskMgmtDiskUtil.getFormatVersion(storage.diskStatus),\n   };\n\n   private static storageClaimableState: ExportDataExtractor = {\n      label: \"vsan.disk.list.claimableState\",\n      value: (storage: StorageData) =>  DiskMgmtDiskUtil.localizeClaimableState(storage.claimableState),\n   };\n}","<!--Copyright 2020-2021 VMware, Inc. All rights reserved. -- VMware Confidential-->\n<vsan-capacity-bar-chart *ngIf=\"!showOnlyTotalLabel()\"\n                         [barWidth]=\"14\"\n                         [chartHeight]=\"24\"\n                         [sections]=\"sectionsData\"\n                         [tooltipOptions]=\"tooltipOptions\"\n                         [isSharedTooltip]=\"true\"\n                         [enableKeyboardNavigation]=\"true\"\n                         [total]=\"capacity.total\">\n</vsan-capacity-bar-chart>\n<span *ngIf=\"showOnlyTotalLabel()\">\n   {{getTotalLabel()}}\n</span>","/* Copyright 2022 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, OnInit} from \"@angular/core\";\nimport {MountDiskContext} from \"@navigation/context/mount-disk-context\";\nimport {ManagedObject} from \"@service/managed-object\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {DiskGroupMutationService} from \"@generated/disk-group-mutation-service\";\nimport {LoadingIndicator} from \"@service/flow/loading-indicator.decorator\";\nimport {Loader} from \"@service/flow/loader.decorator\";\nimport {ErrorHandler} from \"@service/flow/error-handler.decorator\";\n\n/**\n * This component is used to mount a Vsan Max disk.\n */\n@Component({\n   templateUrl: \"mount-storage-pool-disk.html\",\n   selector: \"vsan-mount-storage-pool-disk\",\n   styleUrls: [\"mount-storage-pool-disk.scss\", \"../actions-common.scss\"],\n})\nexport class MountStoragePoolDiskComponent implements OnInit {\n\n   @LoadingIndicator()\n   loading: boolean;\n\n   alerts: string[] = [];\n   hostRef: ManagedObject;\n   diskName: string;\n   diskCanonicalName: string;\n\n   constructor(private diskGroupMutationService: DiskGroupMutationService) {\n   }\n\n   ngOnInit(): void {\n      const context: MountDiskContext = VsanUiUtils.getModalContext();\n      this.hostRef = context.hostRef;\n      this.diskName = context.diskName;\n      this.diskCanonicalName = context.diskCanonicalName;\n   }\n\n   @Loader()\n   async ok(): Promise<void> {\n      this.alerts = [];\n\n      // For mounting a disk to a storage pool, vsanAddStoragePoolDisk API is used\n      const task: ManagedObject = await this.diskGroupMutationService.addDisksToStoragePool(\n            this.hostRef, [this.diskCanonicalName]);\n      VsanUiUtils.closeModalDialog(task);\n   }\n\n   @ErrorHandler()\n   private handleError(error: any): void {\n      this.alerts = [error];\n   }\n}\n","/* Copyright 2022 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, OnInit} from \"@angular/core\";\nimport {DecommissionModeSummary} from \"@component/precheck/pre-check-evacuation-summary.component\";\nimport {DecommissionMode} from \"@generated/decommission-mode\";\nimport {DiskData} from \"@generated/disk-data\";\nimport {DiskGroupMutationService} from \"@generated/disk-group-mutation-service\";\nimport {HostActionData} from \"@model/host-action.data\";\nimport {EvacuationContext} from \"@navigation/context/evacuation.context\";\nimport {UnmountDiskContext} from \"@navigation/context/unmount-disk-context\";\nimport {NavigationService, PlatformExtension} from \"@navigation/navigation.service\";\nimport {ErrorHandler} from \"@service/flow/error-handler.decorator\";\nimport {LoaderName} from \"@service/flow/loader-name\";\nimport {Loader} from \"@service/flow/loader.decorator\";\nimport {LoadingIndicator} from \"@service/flow/loading-indicator.decorator\";\nimport {ManagedObject} from \"@service/managed-object\";\nimport {SrMessageType} from \"@service/screen-reader-announcer.service\";\nimport {VsanDataMigrationUtil} from \"@util/vsan-data-migration-util\";\nimport {VsanDiskMgmtActionsUtil} from \"@util/vsan-disk-mgmt-actions-util\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\n\n/**\n * This component is used to unmount vSAN Max disk.\n */\n@Component({\n   templateUrl: \"unmount-storage-pool-disk.html\",\n   selector: \"vsan-unmount-storage-pool-disk\",\n   styleUrls: [\"../actions-common.scss\"],\n})\nexport class UnmountStoragePoolDiskComponent implements OnInit {\n   @LoadingIndicator({name: [LoaderName.ON_INIT, LoaderName.ON_CONFIRM]})\n   loading: boolean;\n\n   alerts: string[] = [];\n   warningMessages: string[] = [VsanUiUtils.getString(\"vsan.dialog.unmountDisk.headerDataEvacuation\")];\n   host: HostActionData;\n   disk: DiskData;\n\n   shouldAllowDataMigration: boolean;\n   isValidDecommisionMode: boolean = true;\n   selectedDecommissionMode: DecommissionMode = DecommissionMode.ensureObjectAccessibility;\n   goToPrecheckButtonText: string;\n   preselectedDecommissionMode: DecommissionMode;\n   localizedPreselectedDecommissionMode: string;\n\n   constructor(private diskGroupMutationService: DiskGroupMutationService,\n         private navigationService: NavigationService) {\n   }\n\n   @Loader({\n      name: LoaderName.ON_INIT,\n      srMessage: \"vsan.dialog.unmountDisk.dialogTitle\",\n      srMessageType: SrMessageType.PAGE_TITLE,\n   })\n   async ngOnInit(): Promise<void> {\n      const context: UnmountDiskContext = VsanUiUtils.getModalContext();\n      this.disk = context.disk;\n      this.host = context.host;\n      this.preselectedDecommissionMode = context.decommissionMode;\n      this.localizedPreselectedDecommissionMode = VsanDataMigrationUtil.getLocalizedDecommissionMode(\n            this.preselectedDecommissionMode);\n\n      this.shouldAllowDataMigration = !this.host.isWitnessHost && !this.host.isInMaintenanceMode;\n      if (!this.shouldAllowDataMigration) {\n         this.selectedDecommissionMode = DecommissionMode.noAction;\n         VsanUiUtils.setModalDialogHeight(VsanDiskMgmtActionsUtil.UNMOUNT_DISK_DIALOG_HEIGHT_SMALL);\n      }\n\n      // Preselecting decommission mode means that this dialog is opened from Data migration pre-check page,\n      // in which case GO TO PRE-CHECK button doesn't need to be display.\n      if (!this.preselectedDecommissionMode && this.shouldAllowDataMigration) {\n         this.goToPrecheckButtonText = VsanUiUtils.getString(\"vsan.actions.goToPrecheckDataMigration.label\");\n      }\n\n      if (this.host.isInMaintenanceMode) {\n         this.warningMessages.push(\n               VsanUiUtils.getString(\"vsan.dialog.unmountDisk.headerDataEvacuation.withMaintenanceMode\"));\n      }\n      if (this.host.isWitnessHost) {\n         this.warningMessages.push(\n               VsanUiUtils.getString(\"vsan.dialog.unmountDisk.headerDataEvacuation.witnessHostWarning\"));\n      }\n   }\n\n   @ErrorHandler({name: LoaderName.ON_INIT})\n   private handleInitError(): void {\n      this.alerts = [VsanUiUtils.getString(\"vsan.common.error.dataExtraction\")];\n   }\n\n   onDecommisionModeSummaryChanged(summary: DecommissionModeSummary): void {\n      this.selectedDecommissionMode = summary.value;\n      this.isValidDecommisionMode = summary.isValidDecommissionMode;\n   }\n\n   onGoToPrecheckClicked(): void {\n      const evacuationContext: EvacuationContext = VsanDiskMgmtActionsUtil.getEvacuationContext(\n            this.host.hostRef, this.disk.vsanUuid, this.selectedDecommissionMode);\n      this.navigationService.navigateToAndCloseModal(PlatformExtension.CLUSTER_DATA_MIGRATION_PRE_CHECK,\n            ManagedObject.contextObjectUid, evacuationContext);\n   }\n\n   @Loader({name: LoaderName.ON_CONFIRM})\n   async unmount(): Promise<void> {\n      this.alerts = [];\n\n      const decommissionMode: DecommissionMode = this.preselectedDecommissionMode\n            ? this.preselectedDecommissionMode\n            : VsanDiskMgmtActionsUtil.getSelectedDecommissionMode(\n                  this.shouldAllowDataMigration, this.selectedDecommissionMode);\n\n      const task: ManagedObject = await this.diskGroupMutationService.unmountVsanMaxDisk(\n            ManagedObject.contextObject, decommissionMode, this.disk.vsanUuid);\n      VsanUiUtils.closeModalDialog(task);\n   }\n\n   @ErrorHandler({name: LoaderName.ON_CONFIRM})\n   private handleError(error: any): void {\n      this.alerts = [error];\n   }\n}\n","/* Copyright 2019-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport { NgControl } from '@angular/forms';\nimport {Directive, Input, OnInit} from \"@angular/core\";\n\n/**\n * This directive is used to provide declarative style disabling for angular reactive forms's input elements.\n * This is required since the reactive forms only provide a way to disable them initially,\n * but there is no binding as it seems and subsequent changes to the argument doesn't affect the\n * input's disabled element.\n * Here is a stackoverflow thread with the given issue and some more details on the current approach:\n * https://stackoverflow.com/questions/40494968/reactive-forms-disabled-attribute\n */\n@Directive({\n   selector: \"[vsan-disable-form-control]\"\n})\nexport class DisableControlDirective implements OnInit {\n\n   private isInit: boolean = false;\n\n   constructor( private ngControl : NgControl ) {\n   }\n\n   private _disableControl: boolean;\n\n   @Input(\"vsan-disable-form-control\")\n   set disableControl(value: boolean ) {\n      this._disableControl = value;\n      if (!this.ngControl.control || !this.isInit) {\n         return;\n      }\n      this.setDisabled();\n   }\n\n   get disableControl(): boolean {\n      return this._disableControl;\n   }\n\n   ngOnInit(): void {\n      this.setDisabled();\n      this.isInit = true;\n   }\n\n   private setDisabled(): void {\n      this.disableControl ? this.ngControl.control.disable() : this.ngControl.control.enable();\n   }\n}","<!--Copyright 2022 VMware, Inc. All rights reserved. -- VMware Confidential-->\n<vsan-delete-prompt\n      [title]=\"'vsan.dialog.unmountDisk.dialogTitle' | localized\"\n      [subtitle]=\"disk.name\"\n      [confirmText]=\"'vsan.actions.unmountDiskGroup.confirmText' | localized\"\n      [(alertMessages)]=\"alerts\"\n      [blockContent]=\"loading\"\n      [blockButton]=\"loading || !isValidDecommisionMode\"\n      [additionalButtonText]=\"goToPrecheckButtonText\"\n      (onConfirm)=\"unmount()\"\n      (onAdditionalAction)=\"onGoToPrecheckClicked()\">\n   <div class=\"dialog-body\">\n      <vsan-validation alertType=\"warning\"\n                       [allowClose]=\"false\"\n                       [alertsExpanded]=\"true\"\n                       [allowExpandCollapse]=\"false\"\n                       [alerts]=\"warningMessages\">\n      </vsan-validation>\n\n      <!--Preselected decommission mode-->\n      <form class=\"clr-form clr-form-horizontal\" *ngIf=\"preselectedDecommissionMode\">\n         <div class=\"clr-form-control\">\n            <label for=\"unmount-disk-group-decommission-mode\" class=\"clr-control-label\">\n               {{\"vsan.dialog.precheckEvacuation.label\" | localized}}\n            </label>\n            <span id=\"unmount-disk-group-decommission-mode\">\n               {{localizedPreselectedDecommissionMode}}\n            </span>\n         </div>\n      </form>\n\n      <!-- Select decommission mode -->\n      <ng-container *ngIf=\"!loading && shouldAllowDataMigration && !preselectedDecommissionMode\">\n         <div class=\"migration-mode-label\">\n            <span id=\"select-migration-mode-label\">{{\"vsan.dialog.deleteDiskGroup.migrationMode\" | localized}}</span>\n            <clr-signpost [vsan-signpost-title]=\"'vsan.dialog.deleteDiskGroup.migrationMode.signpost.label' | localized\">\n               <clr-signpost-content *clrIfOpen clrPosition=\"center-right\">\n                  <span>{{\"vsan.dialog.unmountDisk.evacuateDataHelp\" | localized}}</span>\n               </clr-signpost-content>\n            </clr-signpost>\n         </div>\n         <vsan-pre-check-evacuation-summary\n               id=\"precheck-evacuation-summary\"\n               [hostMor]=\"host.hostRef\"\n               [evacuationEntityUuid]=\"disk.vsanUuid\"\n               [selectedDecommissionMode]=\"selectedDecommissionMode\"\n               [preCheckRecommendationMessage]=\"'vsan.dialog.precheckEvacuation.recommendationMesaage.disk.unmount' | localized\"\n               (selectedDecommissionModeSummaryChanged)=\"onDecommisionModeSummaryChanged($event)\">\n         </vsan-pre-check-evacuation-summary>\n      </ng-container>\n\n      <!-- Confirmation text -->\n      <div id=\"footer-unmount-disk-group\" class=\"strong-label\">\n         {{\"vsan.dialog.unmountDisk.confirmationLabel\" | localized}}\n      </div>\n   </div>\n</vsan-delete-prompt>\n"]}