{"version":3,"sources":["webpack:///src/app/vsan/health/config/historical-health-settings-dialog.component.ts","webpack:///src/app/vsan/health/config/health-config.module.ts","webpack:///src/app/vsan/health/config/historical-health-settings-dialog.html"],"names":["HistoricalHealthSettingsDialogComponent","configService","VsanUiUtils","historicalHealthConfig","Factory","create","context","getModalContext","clusterRef","clusterName","getConfig","originalIsServiceEnabled","isEnabled","enableService","alertMessages","setConfig","taskRef","closeModalDialog","error","setSize","open","HistoricalHealthSettingsDialogContext","srMessage","srMessageType","PAGE_TITLE","configRoutes","path","component","HealthConfigModule"],"mappings":"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","file":"38-es5.js","sourcesContent":["/* Copyright 2020-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, OnInit} from \"@angular/core\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {ManagedObject} from \"@service/managed-object\";\nimport {HistoricalHealthConfig} from \"@generated/historical-health-config\";\nimport {HistoricalHealthConfigService} from \"@generated/historical-health-config-service\";\nimport {ModalBuilder} from \"@util/modal-builder\";\nimport {LoadingIndicator} from \"@service/flow/loading-indicator.decorator\";\nimport {Loader} from \"@service/flow/loader.decorator\";\nimport {ErrorHandler} from \"@service/flow/error-handler.decorator\";\nimport {SrMessageType} from \"@service/screen-reader-announcer.service\";\n\n@Component({\n   templateUrl: \"historical-health-settings-dialog.html\",\n   styleUrls: [\"historical-health-settings-dialog.scss\"],\n   selector: \"vsan-historical-health-settings-dialog\",\n})\nexport class HistoricalHealthSettingsDialogComponent implements OnInit {\n\n   VsanUiUtils: typeof VsanUiUtils = VsanUiUtils;\n\n   @LoadingIndicator()\n   loading: boolean;\n\n   clusterRef: ManagedObject;\n   clusterName: string;\n   alertMessages: string[];\n\n   historicalHealthConfig: HistoricalHealthConfig = HistoricalHealthConfig.Factory.create(false);\n   originalIsServiceEnabled: boolean;\n\n   enableService: boolean;\n\n   static openDialog(clusterRef: ManagedObject,\n         clusterName: string,\n         historicalHealthConfig: HistoricalHealthConfig): Promise<ManagedObject> {\n      return new ModalBuilder(\"healthConfig/historicalHealthSettingsDialog\")\n            .setSize(670, 280)\n            .open(new HistoricalHealthSettingsDialogContext(clusterRef, clusterName));\n   }\n\n   constructor(private configService: HistoricalHealthConfigService) {\n   }\n\n   @Loader({srMessage: \"vsan.services.historicalhealth.settings.title\", srMessageType: SrMessageType.PAGE_TITLE})\n   async ngOnInit(): Promise<void> {\n      const context: HistoricalHealthSettingsDialogContext = VsanUiUtils.getModalContext();\n      this.clusterRef = context.clusterRef;\n      this.clusterName = context.clusterName;\n\n      this.historicalHealthConfig = await this.configService.getConfig(this.clusterRef);\n      this.originalIsServiceEnabled = this.historicalHealthConfig.isEnabled;\n      this.enableService = true;\n   }\n\n   @Loader()\n   async edit(): Promise<void> {\n      this.alertMessages = [];\n      this.historicalHealthConfig.isEnabled = this.enableService;\n      const taskRef: any = await this.configService.setConfig(this.clusterRef, this.historicalHealthConfig);\n      VsanUiUtils.closeModalDialog(taskRef);\n   }\n\n   @ErrorHandler()\n   private handleError(error: string): void {\n      this.alertMessages = [error];\n   }\n}\n\nexport class HistoricalHealthSettingsDialogContext {\n   constructor(public clusterRef: ManagedObject,\n         public clusterName: string) {\n   }\n}\n","/* Copyright 2020 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {NgModule} from \"@angular/core\";\nimport {CommonModule} from \"@angular/common\";\nimport {ClarityModule} from \"@clr/angular\";\nimport {CommonPipeModule} from \"@pipe/common-pipe.module\";\nimport {HistoricalHealthSettingsDialogComponent} from \"./historical-health-settings-dialog.component\";\nimport {RouterModule, Routes} from \"@angular/router\";\nimport {PromptModule} from \"@component/dialog/prompt/prompt.module\";\nimport {FormsModule, ReactiveFormsModule} from \"@angular/forms\";\nimport {CommonDirectiveModule} from \"@directive/common-directive.module\";\n\nconst configRoutes: Routes = [\n   {\n      path: \"historicalHealthSettingsDialog\",\n      component: HistoricalHealthSettingsDialogComponent,\n   },\n];\n\n@NgModule({\n   imports: [\n      FormsModule,\n      CommonModule,\n      ClarityModule,\n      CommonPipeModule,\n      PromptModule,\n      RouterModule.forChild(configRoutes),\n   ],\n   declarations: [\n      HistoricalHealthSettingsDialogComponent,\n   ],\n   exports: [\n      HistoricalHealthSettingsDialogComponent,\n   ],\n})\nexport class HealthConfigModule {\n\n}","<!--Copyright 2020-2021 VMware, Inc. All rights reserved. -- VMware Confidential-->\n<vsan-edit-prompt\n      [title]=\"'vsan.services.historicalhealth.settings.title' | localized\"\n      [subtitle]=\"clusterName\"\n      [blockContent]=\"loading\"\n      [blockButton]=\"loading\"\n      [(alertMessages)]=\"alertMessages\"\n      [confirmText]=\"VsanUiUtils.getEditServiceButtonText(originalIsServiceEnabled)\"\n      (onConfirm)=\"edit()\">\n   <div class=\"dialog-container\">\n      <clr-toggle-container *ngIf=\"originalIsServiceEnabled\">\n         <clr-toggle-wrapper>\n            <input type=\"checkbox\"\n                   id=\"service-enable-switch\"\n                   clrToggle\n                   [(ngModel)]=\"enableService\"/>\n            <label>{{\"vsan.services.historicalhealth.settings.switch\" | localized}}</label>\n         </clr-toggle-wrapper>\n      </clr-toggle-container>\n      <div id=\"historical-health-settings-info\">{{\"vsan.services.historicalhealth.settings.info\" | localized}}</div>\n   </div>\n</vsan-edit-prompt>"]}