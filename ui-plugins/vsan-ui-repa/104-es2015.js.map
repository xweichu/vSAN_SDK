{"version":3,"sources":["./src/app/vsan/performance/view/io-insight-instance.html","./src/app/vsan/performance/view/perf-vm-mode-selector/perf-vm-mode-selector.component.ts","./src/app/vsan/performance/view/consolidated-dialog.component.ts","./src/app/vsan/performance/view/multi-entities-data-perf.html","./src/app/vsan/performance/view/consolidated-vm-selector.component.ts","./src/app/vsan/performance/view/perf-graphics.component.ts","./src/app/vsan/performance/view/perf-vm-mode-selector/perf-vm-mode-selector.html","./src/app/vsan/performance/view/perf-multi-entities-metrics.component.ts","./src/app/vsan/performance/view/perf-graphics.html","./src/app/vsan/performance/view/consolidated-vm-selector.html","./src/app/vsan/performance/view/perf-vm-mode-selector/perf-vm-mode-selection.data.ts","./src/app/vsan/performance/performance.module.ts","./src/app/vsan/common/service/navigation/model/documentation-id.ts","./src/app/vsan/performance/view/io-insight-data-perf.html","./src/app/vsan/performance/view/ioinsight-running-status.pipe.ts","./src/app/vsan/performance/view/file-share-selector.html","./src/app/vsan/common/component/dialog/prompt/prompt-light-info.component.ts","./src/app/vsan/performance/view/file-share-selector.component.ts","./src/app/vsan/performance/view/perf-vm-data.service.ts","./src/app/vsan/performance/view/io-insight-data-perf.component.ts","./src/app/vsan/performance/model/top-contributor-entity.ts","./src/app/vsan/performance/view/consolidated-entities-data.data.ts","./src/app/vsan/performance/view/io-insight-metrics.html","./src/app/vsan/performance/view/multi-entities-data-perf.component.ts","./src/app/vsan/performance/view/perf-multi-entities-metrics.html","./src/app/vsan/performance/view/file-share-data-perf.html","./src/app/vsan/performance/view/top-contributors-data-perf.html","./src/app/vsan/performance/view/file-share-data-perf.component.ts","./src/app/vsan/common/component/action-button/button-group-wrap.directive.ts","./src/app/vsan/performance/view/io-insight-instance.component.ts","./src/app/vsan/performance/view/io-insight-metrics.component.ts","./src/app/vsan/performance/util/perf-support-util.ts","./src/app/vsan/performance/view/consolidated-dialog.html","./src/app/vsan/performance/model/perf-entities.ts","./src/app/vsan/performance/model/metric-col-obj.ts","./src/app/vsan/common/component/dialog/prompt/prompt.html","./src/app/generated/perf-top-contributors-query-spec.ts","./src/app/vsan/common/util/vsan-signpost-util.ts","./src/app/vsan/performance/view/top-contributors-data-perf.component.ts"],"names":[],"mappings":"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","file":"104-es2015.js","sourcesContent":["<!-- Copyright 2019-2020 VMware, Inc. All rights reserved. -- VMware Confidential -->\n<div class=\"card\" id=\"io-insight-instance-card\">\n   <div class=\"card-header instance-header\">\n      <h4 class=\"instance-title\">\n         {{ioInsightInstance?.name}}\n      </h4>\n      <span class=\"alert\"\n            [ngClass]=getAlertStyle()>\n         {{getStatusLabel()}}\n      </span>\n      <clr-dropdown>\n         <button class=\"dropdown-toggle btn btn-sm btn-link\" clrDropdownToggle>\n            <clr-icon shape=\"ellipsis-vertical\"></clr-icon>\n         </button>\n         <clr-dropdown-menu\n               clrPosition=\"bottom-right\"\n               [attr.aria-label]=\"'vsan.io.insight.actions.srMessage.dropdownMenu.label' | localized\">\n            <button clrDropdownItem (click)=\"this.viewMetrics.emit(ioInsightInstance)\">\n               {{'vsan.io.insight.actions.view.metrics' | localized}}\n            </button>\n<!--            TODO: bbambalo uncomment this when the implementation is ready-->\n<!--            <button clrDropdownItem *ngIf=\"ioInsightInstance.state == IoInsightRunningState.COMPLETED\">-->\n<!--               {{'vsan.io.insight.actions.export' | localized}}</button>-->\n            <button clrDropdownItem *ngIf=\"ioInsightInstance?.state == IoInsightRunningState.COMPLETED\"\n                                    (click)=\"this.renameInstance.emit(ioInsightInstance)\">\n               {{'vsan.io.insight.actions.rename' | localized}}\n            </button>\n            <button clrDropdownItem *ngIf=\"ioInsightInstance?.state == IoInsightRunningState.RUNNING\"\n                                    (click)=\"this.stopInstance.emit(ioInsightInstance)\">\n               {{'vsan.io.insight.actions.stop' | localized}}\n            </button>\n            <button clrDropdownItem *ngIf=\"ioInsightInstance?.state == IoInsightRunningState.COMPLETED\"\n                                    (click)=\"this.rerunInstance.emit(ioInsightInstance)\">\n               {{'vsan.io.insight.actions.rerun' | localized}}\n            </button>\n            <button clrDropdownItem *ngIf=\"ioInsightInstance?.state == IoInsightRunningState.COMPLETED\"\n                                    (click)=\"this.deleteInstance.emit(ioInsightInstance)\">\n               {{'vsan.io.insight.actions.delete' | localized}}\n            </button>\n         </clr-dropdown-menu>\n      </clr-dropdown>\n   </div>\n   <div class=\"card-block\">\n      <span id=\"duration-label\">\n         {{getDurationLabel}}\n      </span>\n\n   </div>\n</div>\n","/* Copyright 2020-2022 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, EventEmitter, Input, OnInit, Output} from \"@angular/core\";\nimport {PerfChartUtil} from \"@component/chart/performance/perf-chart-util\";\nimport {InventoryNode, InventorySelectionEvent} from \"@component/inventory/inventory-node\";\nimport {VmPerformanceInventoryService} from \"@generated/vm-performance-inventory-service\";\nimport {ManagedObject} from \"@service/managed-object\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {VsanPerfVmMode} from \"./perf-vm-mode\";\nimport {VsanPerfVmModeSelection} from \"./perf-vm-mode-selection.data\";\n\n@Component({\n   templateUrl: \"perf-vm-mode-selector.html\",\n   styleUrls: [\"perf-vm-mode-selector.scss\"],\n   selector: \"vsan-perf-vm-mode-selector\",\n})\nexport class PerfVmModeSelectorComponent implements OnInit {\n\n   readonly SPECIFIED_ENTITIES_SELECTION_LIMIT: number = 10;\n   readonly perfModeTypes: typeof VsanPerfVmMode = VsanPerfVmMode;\n\n   private _perfVmModeSelection: VsanPerfVmModeSelection;\n\n   /**\n    * The root objects for the InventoryBrowser\n    */\n   root: ManagedObject[];\n\n   /**\n    * The selected VM nodes\n    */\n   get vmNodes(): InventoryNode[] {\n      return this._perfVmModeSelection.vmInventoryNodes;\n   }\n\n   /**\n    * Indicates if Top Contributors will be shown\n    */\n   @Input()\n   showTopContributors: boolean;\n\n   /**\n    * Emits the new selection state on every change. The event is emitted with the default initialization value\n    * when the component is initialized.\n    */\n   @Output()\n   vmModeSelectionChange: EventEmitter<VsanPerfVmModeSelection> = new EventEmitter<VsanPerfVmModeSelection>();\n\n   /**\n    * Indicates if the \"show separate charts\" toggle is checked.\n    */\n   get isSeparateCharts(): boolean {\n      return this._perfVmModeSelection.isSeparateCharts;\n   }\n\n   set isSeparateCharts(val: boolean) {\n      this._perfVmModeSelection.isSeparateCharts = val;\n      this.raiseChangeEvent();\n   }\n\n   /**\n    * The current radio button selection\n    */\n   get mode(): VsanPerfVmMode {\n      return this._perfVmModeSelection.mode;\n   }\n\n   @Input()\n   set mode(val: VsanPerfVmMode) {\n      this._perfVmModeSelection.mode = val;\n      this.raiseChangeEvent();\n   }\n\n   @Input()\n   set vmModeSelection(val: VsanPerfVmModeSelection) {\n      this._perfVmModeSelection = val;\n   }\n\n   get vmModeSelection(): VsanPerfVmModeSelection {\n      return this._perfVmModeSelection;\n   }\n\n   constructor(public vmInventoryService: VmPerformanceInventoryService) {\n   }\n\n   ngOnInit(): void {\n      this.root = [ManagedObject.contextObject];\n      if (!this._perfVmModeSelection) {\n         this._perfVmModeSelection = VsanPerfVmModeSelection.initDefault(ManagedObject.contextObject);\n         this.raiseChangeEvent();\n      }\n   }\n\n   get dropdownLabel(): string {\n      switch (this._perfVmModeSelection.mode) {\n         case VsanPerfVmMode.CLUSTER_AGGREGATION:\n         case VsanPerfVmMode.HOST_AGGREGATION:\n            return this.aggregatedLevelMetricsLabel;\n         case VsanPerfVmMode.PER_VM:\n            const selectedCount: number = this.vmNodes.length;\n            return VsanUiUtils.getString(\"vsan.monitor.cluster.performance.showSpecificVMs.template\",\n                  selectedCount > 0\n                        ? \"(\" + selectedCount + \")\"\n                        : \"\");\n         case VsanPerfVmMode.TOP_CONTRIBUTORS:\n            return VsanUiUtils.getString(\"vsan.monitor.cluster.performance.topContributors.title\");\n         default:\n            throw new Error(\"Unknown VsanPerfVmMode!\");\n      }\n   }\n\n   get aggregatedLevelMetricsLabel(): string {\n      switch (this.aggregatedVsanPerfVmMode) {\n         case VsanPerfVmMode.HOST_AGGREGATION:\n            return VsanUiUtils.getString(\"vsan.monitor.host.performance.hostLevelMetrics.title\");\n         case VsanPerfVmMode.CLUSTER_AGGREGATION:\n         default:\n            return VsanUiUtils.getString(\"vsan.monitor.cluster.performance.clusterLevelMetrics.title\");\n      }\n   }\n\n   get aggregatedVsanPerfVmMode(): VsanPerfVmMode {\n      return PerfChartUtil.getAggregatedVsanPerfVmMode(ManagedObject.contextObject);\n   }\n\n   get isPerVmMode(): boolean {\n      return this._perfVmModeSelection.mode === VsanPerfVmMode.PER_VM;\n   }\n\n   selectNode(event: InventorySelectionEvent): void {\n      if (!event.node.data.isLeafNode || event.node.selected === undefined) {\n         // Don't select anything if non-leaf node is clicked.\n         return;\n      }\n\n      if (event.node.selected) {\n         // Add the node to the list of selected nodes\n         this._perfVmModeSelection.vmInventoryNodes.push(event.node);\n      } else {\n         // Find the index of the deselected node\n         const index: number = this._perfVmModeSelection.vmInventoryNodes\n               .findIndex((vmNode: InventoryNode) => vmNode.data.nodeRef.value === event.node.data.nodeRef.value);\n         // If found, remove if from the collection\n         if (index !== -1) {\n            this._perfVmModeSelection.vmInventoryNodes.splice(index, 1);\n         }\n      }\n\n      this.raiseChangeEvent();\n   }\n\n   get isVmSelectionAllowed(): boolean {\n      return this.vmNodes.length < this.SPECIFIED_ENTITIES_SELECTION_LIMIT;\n   }\n\n   get isVmSelectorStateEnabled(): boolean {\n      return this._perfVmModeSelection.mode === VsanPerfVmMode.PER_VM;\n   }\n\n   setIsConsolidatedView(val: boolean): void {\n      this.isSeparateCharts = val;\n      this.raiseChangeEvent();\n   }\n\n   stopPropagation($event: any): void {\n      $event.stopImmediatePropagation();\n      $event.stopPropagation();\n   }\n\n   private raiseChangeEvent(): void {\n      this.vmModeSelectionChange.emit(this._perfVmModeSelection);\n   }\n}\n","/* Copyright 2020 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, OnInit} from \"@angular/core\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {ConsolidatedEntitiesData} from \"./consolidated-entities-data.data\";\nimport {BasePerfEntity} from \"../model/base-perf-entity\";\nimport {PerfModeState, PerfModeType, PerfOrchestratorService} from \"@util/performance/perf-orchestrator-service\";\nimport {PerfChartDataConstants} from \"@component/chart/performance/perf-chart-util\";\nimport {PerfMonitorCommonPropsData} from \"@generated/perf-monitor-common-props-data\";\nimport {PerfTimeRangeData} from \"@generated/perf-time-range-data\";\nimport {EntitiesReadyEvent, EntitySelectEvent} from \"./consolidated-vm-selector.component\";\nimport {ConsolidatedContextData} from \"./consolidated-context.data\";\nimport {InventoryNode} from \"@component/inventory/inventory-node\";\nimport {PerfChangeContext} from \"@util/performance/perf-data\";\nimport {PerfVmDataService} from \"./perf-vm-data.service\";\nimport {PerfTopContributorsEntityType} from \"@generated/perf-top-contributors-entity-type\";\n\n@Component({\n   templateUrl: \"consolidated-dialog.html\",\n   selector: \"consolidated-dialog\",\n   styleUrls: [\"consolidated-dialog.scss\"]\n})\nexport class ConsolidatedDialogComponent implements OnInit {\n   consolidatedEntitiesData: ConsolidatedEntitiesData = new ConsolidatedEntitiesData();\n   commonPerfData: PerfMonitorCommonPropsData;\n   timePickerRange: PerfTimeRangeData;\n   singleEntityType: string;\n   visibleGraphId: string;\n   title: string;\n\n   constructor(public perfOrchestrator: PerfOrchestratorService,\n         private vmDataService: PerfVmDataService,) {}\n\n   async ngOnInit() {\n      const context: ConsolidatedContextData = VsanUiUtils.getModalContext() as ConsolidatedContextData;\n      this.commonPerfData = context.commonPerfData;\n      this.visibleGraphId = context.visibleGraphId;\n      this.timePickerRange = context.timePickerRange;\n      this.title = context.entityType === PerfTopContributorsEntityType.VIRTUAL_MACHINE ?\n            VsanUiUtils.getString(\"consolidated.vm.dialog.title\") :\n            VsanUiUtils.getString(\"consolidated.disk.group.dialog.title\");\n\n      this.singleEntityType = context.entityType === PerfTopContributorsEntityType.VIRTUAL_MACHINE ?\n            PerfChartDataConstants.CLUSTER_VM_CONSUMPTION_ENTITY:\n            PerfChartDataConstants.HOST_DISK_GROUP_ENTITY;\n      this.perfOrchestrator.data.parentEntityType = this.singleEntityType;\n      this.perfOrchestrator.data.entityTypes = this.commonPerfData.entityTypes;\n      this.perfOrchestrator.data.entityType = context.entityType === PerfTopContributorsEntityType.VIRTUAL_MACHINE ?\n            PerfChartDataConstants.VM_CONSUMPTION_ENTITY:\n            PerfChartDataConstants.HOST_DISK_GROUP_ENTITY;\n      this.perfOrchestrator.mode = PerfModeType.SHOW_SPECIFICS;\n      this.perfOrchestrator.state = PerfModeState.SPECIFIC_MODE_SHOW_CONSOLIDATED;\n\n      this.perfOrchestrator.changeTimeRange(this.timePickerRange);\n      // TODO [kaleksandrov] Leftover workaround. Remove it once the perf orchestrator is gone\n      this.perfOrchestrator.data.timeRangeData = this.timePickerRange;\n\n      const entitiesWithoutData: InventoryNode[] = this.getEntitiesWithoutData(context.virtualMachines);\n      // TODO [kaleksandrov] This \"remainingEntitiesToLoad\" prop is used to handle the loading spinner in other\n      // views. Pass the loading flag as input instead.\n      this.perfOrchestrator.remainingEntitiesToLoad = entitiesWithoutData.length;\n      const specifiedEntityTypeId: string = context.entityType === PerfTopContributorsEntityType.VIRTUAL_MACHINE ?\n            PerfChartDataConstants.VM_CONSUMPTION_ENTITY:\n            PerfChartDataConstants.HOST_DISK_GROUP_ENTITY;\n      const configSpec: any = this.commonPerfData.entityTypes[specifiedEntityTypeId];\n      let perfEntities: BasePerfEntity[];\n      if (context.entityType === PerfTopContributorsEntityType.VIRTUAL_MACHINE) {\n         perfEntities = await this.vmDataService.loadBasePerfEntities(entitiesWithoutData, configSpec);\n      } else {\n         perfEntities = await this.createDiskGroupsPerfEntities(entitiesWithoutData, configSpec);\n      }\n      this.setSelectedSpecifiedEntities(perfEntities);\n\n      this.consolidatedEntitiesData.entities = this.perfOrchestrator.data.entities\n            .filter((entity: BasePerfEntity) => this.perfOrchestrator.data.entitySelectionStateMap\n                  .get(entity.entityIdentifier));\n   }\n\n   createDiskGroupsPerfEntities(diskGroups: InventoryNode[], configSpec: any): BasePerfEntity[] {\n      if (!diskGroups || diskGroups.length === 0) {\n         return [];\n      }\n\n      const dgMap: Map<string, InventoryNode> = new Map<string, InventoryNode>();\n      diskGroups.forEach((diskGroup: InventoryNode) => dgMap.set(diskGroup.data.name, diskGroup));\n\n      const perfEntities: BasePerfEntity[] = [];\n      dgMap.forEach((value, key, map) => {\n         const selectedPerfEntity: BasePerfEntity = this.createBasePerfEntity(key, map, configSpec);\n         perfEntities.push(selectedPerfEntity);\n      });\n\n      return perfEntities;\n   }\n\n   private createBasePerfEntity(diskGroupUuid: string, entityMap: Map<string,\n         InventoryNode>, configSpec: any): BasePerfEntity {\n      const selectedPerfEntity = new BasePerfEntity();\n      selectedPerfEntity.entityId = PerfChartDataConstants.HOST_DISK_GROUP_ENTITY;\n      selectedPerfEntity.entityUuid = diskGroupUuid;\n\n      const node: InventoryNode = entityMap.get(diskGroupUuid);\n      selectedPerfEntity.entityName = node.data.name;\n      selectedPerfEntity.icon = node.data.iconShape;\n      selectedPerfEntity.configSpec = configSpec;\n      return selectedPerfEntity;\n   }\n\n   private setSelectedSpecifiedEntities(perfEntities: BasePerfEntity[]): void {\n      // TODO [kaleksandrov] Once the perfOrchestrator is gone this data will be kept in the current compoennt\n      // and this whole method won't be needed.\n      this.perfOrchestrator.data.entities.push(...perfEntities);\n      if (this.perfOrchestrator.data.entities == null || this.perfOrchestrator.data.entitySelectionStateMap == null) {\n         return;\n      }\n      this.perfOrchestrator.data.selectedEntities = this.perfOrchestrator.data.entities\n            .filter((e: BasePerfEntity) => this.perfOrchestrator.data.entitySelectionStateMap.get(e.entityIdentifier));\n      this.perfOrchestrator.change.next(PerfChangeContext.FILTERED_ENTITIES);\n\n      this.consolidatedEntitiesData.entities = this.perfOrchestrator.data.entities\n            .filter((entity: BasePerfEntity) => this.perfOrchestrator.data.entitySelectionStateMap\n                  .get(entity.entityIdentifier));\n   }\n\n   /**\n    * Filters out only the VMs/Disk Groups for which we don't have data.\n    */\n   private getEntitiesWithoutData(entities: InventoryNode[]): InventoryNode[] {\n      // Convert the VM/Disk Group list to a set of MoRef IDs for easier and faster lookup\n      const entitiesMap: Map<string, InventoryNode> = new Map<string, InventoryNode>();\n      entities.forEach((entity: InventoryNode) => {\n         if (entity.data.nodeRef) {\n            entitiesMap.set(entity.data.nodeRef.value, entity);\n         } else {\n            // disk group doesn't have node ref, use its uuid as key\n            entitiesMap.set(entity.data.name, entity);\n         }\n      });\n\n      const entitiesWithoutData: InventoryNode[] = [];\n\n      entitiesMap.forEach((value: InventoryNode, key: string) => {\n         this.perfOrchestrator.data.entitySelectionStateMap.set(key, true);\n         const node: InventoryNode = entitiesMap.get(key);\n         const index: number = this.perfOrchestrator.data.entities\n               .findIndex(entity => entity.entityIdentifier === node.data.nodeRef.value);\n         if (index === -1) {\n            entitiesWithoutData.push(node);\n         }\n      });\n\n      // Update the selection state of the VMs/Disk Groups in the cache\n      this.perfOrchestrator.data.entitySelectionStateMap.forEach((value: boolean, key: string) => {\n         const isEntitySelected: boolean = entitiesMap.has(key);\n         this.perfOrchestrator.data.entitySelectionStateMap.set(key, isEntitySelected);\n      });\n\n      return entitiesWithoutData;\n   }\n\n   onEntitySelect(event: EntitySelectEvent): void {\n      // TODO [kaleksandrov] Delete once the selection state is read from the\n      // this.perfOrchestrator.consolidatedViewHelper.toggle(event.entity.entityIdentifier, event.isSelected);\n      //\n      // !!!!!!!!!!!!!!!!!\n      // this.consolidatedEntitiesData.entityVisibilityStateMap =\n      //       this.perfOrchestrator.consolidatedViewHelper.entityVisibilityStateMap;\n      this.consolidatedEntitiesData.entityIdentifierToVisibility[event.entity.entityIdentifier] = event.isSelected;\n   }\n\n   onEntitiesReady(event: EntitiesReadyEvent): void {\n      this.consolidatedEntitiesData.entityIdentifierToColor = event.entityIdentifierToColor;\n   }\n\n   close(): void {\n      VsanUiUtils.closeModalDialog();\n   }\n}\n","<!-- Copyright 2017-2021 VMware, Inc. All rights reserved. -- VMware Confidential -->\n<div class=\"spinner spinner-lg central-spinner\"\n     *ngIf=\"fetchingEntities\">\n</div>\n<div class=\"entities-selection\" *ngIf=\"hasEntities\">\n   <vsan-perf-multi-entities-metrics [entities]=\"entities\"\n                                     [initialEntityId]=\"initialEntityId\"\n                                     [selectedEntityName]=\"selectedEntityName\"\n                                     (entitySelected)=\"currentEntity = $event\"\n                                     (parentEntityChanging)=\"initSelectedSubEntities()\">\n   </vsan-perf-multi-entities-metrics>\n   <vsan-perf-chart-export *ngIf=\"showMultipleEntitiesCharts || showSingleEntityCharts\"\n                           [extraDesc]=\"extraDesc\"\n                           [commonPerfData]=\"commonPerfData\"\n                           [entityToMetricsMap]=\"entityToMetricsMap\"\n                           [entity]=\"currentEntity\"\n                           [data]=\"exportData\"\n                           [showSubEntities]=\"showMultipleSubEntities\">\n   </vsan-perf-chart-export>\n</div>\n<vsan-illustrated-message *ngIf=\"!fetchingEntities && !hasEntities && !hasCurrentEntity\"\n                          [type]=\"IllustratedMessageType.MISSING_DATA\"\n                          [message]=\"noEntitiesMessage\">\n</vsan-illustrated-message>\n<vsan-perf-detail-charts *ngIf=\"showSingleEntityCharts\"\n                         id=\"singleSubEntityChartsContainer\"\n                         [commonPerfData]=\"commonPerfData\"\n                         [parentLoading]=\"!hasCurrentEntity\"\n                         [isRealtime]=\"isRealtime\"\n                         [extraDesc]=\"extraDesc\"\n                         (allChartsLoaded)=\"onAllChartsLoaded($event)\"\n                         [customizableThresholds]=\"customizableThresholds\">\n</vsan-perf-detail-charts>\n\n<clr-accordion *ngIf=\"showMultipleEntitiesCharts\"\n               [clrAccordionMultiPanel]=\"true\">\n   <clr-accordion-panel *ngFor=\"let perfEntity of chartsEntities; let i = index;\"\n                        [clrAccordionPanelOpen]=\"selectedSubEntityIndexes.has(i)\"\n                        (clrAccordionPanelOpenChange)=\"onSubEntitySelectionChanged($event, i)\">\n      <clr-accordion-title>{{perfEntity.entityLabelName}}</clr-accordion-title>\n      <clr-accordion-content>\n         <vsan-perf-detail-charts\n               [parentLoading]=\"!hasCurrentEntity\"\n               [commonPerfData]=\"commonPerfData\"\n               [extraDesc]=\"extraDesc\"\n               [chartMetrics]=\"entityToMetricsMap.get(perfEntity)\"\n               [entity]=\"perfEntity\"\n               [isRealtime]=\"isIoInsightRealtime\"\n               [collapsible]=\"true\"\n               (allChartsLoaded)=\"allChartsLoaded.emit($event)\">\n         </vsan-perf-detail-charts>\n      </clr-accordion-content>\n   </clr-accordion-panel>\n</clr-accordion>","/* Copyright 2020 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, EventEmitter, Input, Output} from \"@angular/core\";\nimport {PerfOrchestratorService} from \"@util/performance/perf-orchestrator-service\";\nimport {BasePerfEntity} from \"../model/base-perf-entity\";\n\n@Component({\n   templateUrl: \"consolidated-vm-selector.html\",\n   styleUrls: [\"consolidated-vm-selector.scss\"],\n   selector: \"vsan-consolidated-vm-selector\",\n})\nexport class ConsolidatedVmSelectorComponent {\n\n   private readonly COLORS: string[] = [\n      \"#71229F\", // Purple\n      \"#298678\", // Dark Green\n      \"#EE3A00\", // Dark Red\n      \"#1F519D\", // Dark Blue\n      \"#7A73C5\", // Violet\n      \"#9ED0E2\", // Light Blue\n      \"#F6C02C\", // Orange\n      \"#F4A27A\", // Light Red\n      \"#02ff06\", // Light Green\n      \"#fcb0d6\", // Pink\n   ];\n\n   private _entities: BasePerfEntity[];\n\n   get entities(): BasePerfEntity[] {\n      return this._entities;\n   }\n\n   @Input()\n   set entities(val: BasePerfEntity[]) {\n      this._entities = val;\n      this.entityIdentifierToColor = {};\n      this.entityVisibilityStateMap = {};\n\n      val.forEach((entity: BasePerfEntity, index: number) => {\n         this.entityIdentifierToColor[entity.entityIdentifier] = this.COLORS[index];\n         this.entityVisibilityStateMap[entity.entityIdentifier] = true;\n      });\n      this.notifyEntitiesLoaded();\n   }\n\n   entityIdentifierToColor: { [key: string]: string } = {};\n\n   @Output()\n   entitiesReady: EventEmitter<EntitiesReadyEvent> = new EventEmitter<EntitiesReadyEvent>();\n\n   @Output()\n   entitySelect: EventEmitter<EntitySelectEvent> = new EventEmitter<EntitySelectEvent>();\n\n   @Input()\n   entityVisibilityStateMap: { [key: string]: boolean } = {};\n\n   constructor(private perfOrchestratorService: PerfOrchestratorService) {\n   }\n\n   onEntitySelect(entity: BasePerfEntity, isSelected: boolean): void {\n      // TODO [kaleksandrov] Delete once the PerfView component is refactored to not read charts data\n      // directly from the PerfOrchestrator\n      // FROM HERE\n      this.perfOrchestratorService.consolidatedViewHelper.toggle(entity.entityIdentifier, isSelected);\n      // TO HERE\n\n      this.entityVisibilityStateMap[entity.entityIdentifier] = isSelected;\n      this.notifyEntitySelectionChange(entity, isSelected);\n   }\n\n   private notifyEntitySelectionChange(entity: BasePerfEntity, isSelected: boolean): void {\n      const event: EntitySelectEvent = new EntitySelectEvent();\n      event.entity = entity;\n      event.isSelected = isSelected;\n      this.entitySelect.emit(event);\n   }\n\n   private notifyEntitiesLoaded(): void {\n      const event: EntitiesReadyEvent = new EntitiesReadyEvent();\n      event.entityIdentifierToColor = this.entityIdentifierToColor;\n      this.entitiesReady.emit(event);\n   }\n}\n\nexport class EntitySelectEvent {\n   entity: BasePerfEntity;\n   isSelected: boolean;\n}\n\nexport class EntitiesReadyEvent {\n   entityIdentifierToColor: { [key: string]: string };\n}\n","/* Copyright 2017-2022 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, OnInit, ViewChild} from \"@angular/core\";\nimport {ChartPlotLineSelectionData} from \"@component/chart/model/chart-plot-line-selection.data\";\nimport {PerfChartUtil} from \"@component/chart/performance/perf-chart-util\";\nimport {RangePickerState} from \"@component/datetime-picker/time-range-picker/range-picker-state\";\nimport {VsanTimeRangePickerComponent} from \"@component/datetime-picker/time-range-picker/time-range-picker.component\";\nimport {InventoryNode as InvNode} from \"@component/inventory/inventory-node\";\nimport {TreeNode} from \"@component/inventory/tree-view/tree-node\";\nimport {UnavailableViewSpec} from \"@component/unavailable-view/unavailable-view-spec\";\nimport {AlertActionLink} from \"@component/validation/alert-action-link\";\nimport {AlertType} from \"@component/validation/alert-type\";\nimport {CsdService} from \"@generated/csd-service\";\nimport {CsdVmService} from \"@generated/csd-vm-service\";\nimport {InventoryNode} from \"@generated/inventory-node\";\nimport {NetworkDiagnostic} from \"@generated/network-diagnostic\";\nimport {PerfMonitorCommonPropsData} from \"@generated/perf-monitor-common-props-data\";\nimport {PerfTimeRangeData} from \"@generated/perf-time-range-data\";\nimport {PermissionService} from \"@generated/permission-service\";\nimport {Privileges} from \"@generated/privileges\";\nimport {VmCsdConfig} from \"@generated/vm-csd-config\";\nimport {VsanCapabilityData} from \"@generated/vsan-capability-data\";\nimport {VsanCapabilityProvider} from \"@generated/vsan-capability-provider\";\nimport {VsanInventoryHelper} from \"@generated/vsan-inventory-helper\";\nimport {VsanPerfPropertyProvider} from \"@generated/vsan-perf-property-provider\";\nimport {FullTimeRangeSelectionData} from \"@model/full-time-range-selection.data\";\nimport {TopContributorsContext} from \"@navigation/context/top-contributors-context\";\nimport {ClusterComputeResource, HostSystem} from \"@service/client/dataservice/data-service-property\";\nimport {DataServiceUtil} from \"@service/client/dataservice/data-service-util\";\nimport {DataServiceClient} from \"@service/client/dataservice/data-service.service\";\nimport {ErrorMessage} from \"@service/flow/error-message.decorator\";\nimport {Loader} from \"@service/flow/loader.decorator\";\nimport {LoadingIndicator} from \"@service/flow/loading-indicator.decorator\";\nimport {RefreshHandler} from \"@service/global-refresh.service\";\nimport {ManagedObject, ManagedObjectUtils} from \"@service/managed-object\";\nimport {PerformancePersistenceService} from \"@service/performance-persistence.service\";\nimport {Logger} from \"@util/logger\";\nimport {ModalBuilder} from \"@util/modal-builder\";\nimport {PerfChangeContext} from \"@util/performance/perf-data\";\nimport {PerfModeState, PerfModeType, PerfOrchestratorService} from \"@util/performance/perf-orchestrator-service\";\nimport {ReferenceWatcher} from \"@util/reference-watcher\";\nimport {VsanDateTimeUtils} from \"@util/vsan-dateteime-util\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {BasePerfEntity} from \"../model/base-perf-entity\";\nimport {PerfMonitorViewType} from \"../model/perf-monitor-view-type.model\";\nimport {PerformanceSupportUtil} from \"../util/perf-support-util\";\nimport {PerformanceUtils} from \"../util/perf-utils\";\nimport {ConsolidatedEntitiesData} from \"./consolidated-entities-data.data\";\nimport {EntitiesReadyEvent, EntitySelectEvent} from \"./consolidated-vm-selector.component\";\nimport {PerfVmDataService} from \"./perf-vm-data.service\";\nimport {VsanPerfVmMode} from \"./perf-vm-mode-selector/perf-vm-mode\";\nimport {VsanPerfVmModeSelection} from \"./perf-vm-mode-selector/perf-vm-mode-selection.data\";\n\n@Component({\n   templateUrl: \"perf-graphics.html\",\n   styleUrls: [\"perf-graphics.scss\"],\n   selector: \"vsan-performance\",\n   providers: [ReferenceWatcher],\n})\nexport class PerfGraphicsComponent implements OnInit {\n   private static readonly NETWORK_DIAGNOSTICS_EVENT_RDT: string = \"rdt\";\n\n   @LoadingIndicator()\n   loading: boolean;\n\n   @ErrorMessage()\n   errorMsg: string;\n\n   errorType: string = AlertType.DANGER;\n   availPerfViews: PerfMonitorViewType[];\n\n   isRemoteVmView = () => this.currentSelectedView === PerfMonitorViewType.CLUSTER_VM_REMOTE_CONSUMPTION ||\n         this.currentSelectedView === PerfMonitorViewType.CLUSTER_COMPUTE_ONLY_VM_REMOTE_CONSUMPTION;\n\n   isComputeOnlyCluster: boolean;\n\n   private isIscsiServiceEnabled: boolean = false;\n   isTopContributorsSupported: boolean = false;\n\n   clusterCapabilities: VsanCapabilityData;\n\n   root: ManagedObject[];\n\n   // Properties used for monitoring the performance to a remote server cluster in the case of CSD\n   remoteClustersTreeNodes: TreeNode[];\n\n   // whether the ioinsight is supported and user has Global.Diagnostics permission\n   showIoInsightData: boolean = false;\n\n   networkDiagnostics: NetworkDiagnostic[];\n\n   selectedEntityName: string;\n\n   private _selectedRemoteClustersInfos: InventoryNode[];\n\n   PerfMonitorViewType: typeof PerfMonitorViewType = PerfMonitorViewType;\n\n   get selectedRemoteClustersInfos(): InventoryNode[] {\n      return this._selectedRemoteClustersInfos;\n   }\n\n   set selectedRemoteClustersInfos(objectInfos: InventoryNode[]) {\n      this._selectedRemoteClustersInfos = objectInfos;\n      this.updatePerfView();\n   }\n\n   get selectedRemoteClusterRef(): ManagedObject {\n      return !VsanUiUtils.isEmpty(this.selectedRemoteClustersInfos) ? this.selectedRemoteClustersInfos[0].moRef : null;\n   }\n\n   commonPerfData: PerfMonitorCommonPropsData;\n   getPerfViewSelectOptionLabel: (view: PerfMonitorViewType) => string = PerformanceUtils.getPerfViewSelectOptionLabel;\n   clusterRef: ManagedObject;\n\n   performanceAvailable: boolean = false;\n   unavailableView: UnavailableViewSpec;\n   hasEditPrivilege: boolean = false;\n\n   multiEntitiesViewEntityUuid: string;\n   singleEntityTypeId: string;\n   timePickerRange: PerfTimeRangeData;\n   timePickerState: RangePickerState;\n   timePickerHourInterval: number;\n   timePickerFromDate: Date;\n\n   vmModeSelection: VsanPerfVmModeSelection = VsanPerfVmModeSelection.initDefault(ManagedObject.contextObject);\n\n   consolidatedEntitiesData: ConsolidatedEntitiesData = new ConsolidatedEntitiesData();\n\n   // chart's tooltip data\n   selectedGraphId: string;\n   selectedTimePoint: string;\n\n   /*\n   * For now only when CLUSTER_VM_CONSUMPTION / HOST_VM_CONSUMPTION view is multi entity perf\n   */\n   isMultipleEntityPerfEnabled: boolean;\n\n   // TODO [kaleksandrov] Rename once the other perfModeTypes is remvoed\n   readonly perfModeTypesNew: typeof VsanPerfVmMode = VsanPerfVmMode;\n\n   private _currentSelectedView: PerfMonitorViewType;\n\n   get currentSelectedView(): PerfMonitorViewType {\n      return this._currentSelectedView;\n   }\n\n   set currentSelectedView(view: PerfMonitorViewType) {\n      if (view === this._currentSelectedView) {\n         return;\n      }\n      this._currentSelectedView = view;\n      this.updatePerfView();\n   }\n\n   @ViewChild(VsanTimeRangePickerComponent)\n   timeRangePickerComponent: VsanTimeRangePickerComponent;\n\n   constructor(private perfProvider: VsanPerfPropertyProvider,\n         public perfOrchestrator: PerfOrchestratorService,\n         private capabilityProvider: VsanCapabilityProvider,\n         private permissionService: PermissionService,\n         private perfPersistenceService: PerformancePersistenceService,\n         private dataService: DataServiceClient,\n         private vmDataService: PerfVmDataService,\n         private refWatcher: ReferenceWatcher,\n         private csdService: CsdService,\n         private inventoryHelper: VsanInventoryHelper,\n         private csdVmService: CsdVmService) {\n   }\n\n   @Loader()\n   async ngOnInit(): Promise<void> {\n      try {\n         this.clusterRef = await this.inventoryHelper.getCluster(ManagedObject.contextObject);\n         this.clusterCapabilities = await this.capabilityProvider.getClusterCapabilityData(this.clusterRef);\n      } catch (error) {\n         Logger.warn(\"Unable to get cluster capabilities: \", error);\n      }\n\n      this.root = [ManagedObject.contextObject];\n      await this.checkViewAvailability();\n      if (this.unavailableView) {\n         return;\n      }\n      await this.fetch();\n      this.initializePersistedSelections();\n   }\n\n   changeViewSelection(view: PerfMonitorViewType): void {\n      // reset the vm perf. composite view components to defaults\n      this.vmModeSelection = VsanPerfVmModeSelection.initDefault(ManagedObject.contextObject);\n      this.perfOrchestrator.mode = PerfModeType.SHOW_AVERAGE;\n\n      this.currentSelectedView = view;\n\n      if (this.clusterCapabilities?.isMultiVmPerfSupported) {\n         this.isMultipleEntityPerfEnabled =\n               PerformanceUtils.isMultipleEntityPerfSupportedByView(this.currentSelectedView);\n\n         if (!this.isMultipleEntityPerfEnabled) {\n            this.perfOrchestrator.reset();\n         }\n      }\n\n      this.initializePersistedSelections();\n   }\n\n   get isConsolidatedVmSelectorVisible(): boolean {\n      return this.isMultipleEntityPerfEnabled\n            && this.perfOrchestrator.isShowSpecificModeEnabled\n            && this.perfOrchestrator.isConsolidatedViewStateEnabled\n            && !!this.consolidatedEntitiesData.entities?.length;\n   }\n\n   get isPersistedSelectionInitialized(): boolean {\n      const persistedSelection: FullTimeRangeSelectionData =\n            this.perfPersistenceService.getPersistedSelection();\n\n      // If there is no persisted selection. it's replaced by view's default one\n      if (persistedSelection == null) {\n         return true;\n      }\n\n      return this.timePickerRange === persistedSelection.timeRange;\n   }\n\n   private initializePersistedSelections(): void {\n      if (this.timeRangePickerComponent == null) {\n         this.refWatcher.setTimeout(() => {\n            this.initializePersistedSelections();\n         }, 1000);\n         return;\n      }\n\n      const persistedSelection: FullTimeRangeSelectionData =\n            this.perfPersistenceService.getPersistedSelection();\n\n      if (persistedSelection != null) {\n         const state: RangePickerState = persistedSelection.state;\n         this.timePickerState = state;\n\n         const timeRange: PerfTimeRangeData = persistedSelection.timeRange;\n         if (!timeRange) {\n            return;\n         }\n         if (this.timeRangePickerComponent.currentTimeRange.from !== timeRange.from ||\n               this.timeRangePickerComponent.currentTimeRange.to !== timeRange.to ||\n               this.timeRangePickerComponent.currentPickerState !== state) {\n            this.timePickerRange = timeRange;\n            this.timeRangePickerComponent.setTimerange(timeRange, state);\n         }\n      }\n   }\n\n   @Loader()\n   @RefreshHandler\n   async fetch(): Promise<void> {\n      if (this.performanceAvailable) {\n         /**\n          * If performanceAvailable is true, it means that page was already loaded - performance service\n          * is enabled or the cluster is compute-only. So, the trigger comes from Global Refresh.\n          * On Global Refresh trigger, the page\n          * must be reloaded only if performance service was not enabled previously.\n          */\n         return;\n      }\n\n      this.errorMsg = null;\n      try {\n         const data: PerfMonitorCommonPropsData =\n               await this.perfProvider.getPerfMonitorCommonPropsData(ManagedObject.contextObject);\n         await this.handleCommonPropsResponse(data);\n      } catch (err) {\n         Logger.error(\"error when fetching PerfChartAggregationData, \", err);\n         this.handleError(VsanUiUtils.getString(\"vsan.perf.service.chart.common.error\"));\n      }\n   }\n\n   @Loader()\n   private async checkViewAvailability(): Promise<void> {\n      if (ManagedObjectUtils.isCluster(ManagedObject.contextObjectUid) && !(await this.getNumberOfHosts())) {\n         // Load only permissions in order to enable/disable \"go to quickstart\" button\n         this.hasEditPrivilege = await this.permissionService.hasPermissions(\n               ManagedObject.contextObject, [Privileges.EDIT_CLUSTER()]);\n         if (await this.csdService.isComputeOnlyCluster(ManagedObject.contextObject)) {\n            this.unavailableView = UnavailableViewSpec.PERF_VIEW_COMPUTE_ONLY_NO_HOSTS;\n         } else {\n            this.unavailableView = UnavailableViewSpec.PERF_VIEW_NO_HOSTS;\n         }\n      }\n\n      if (ManagedObjectUtils.isHost(ManagedObject.contextObjectUid) &&\n            await this.isHostFromComputeOnlyCluster()) {\n         this.unavailableView = UnavailableViewSpec.HOST_PERF_COMPUTE_ONLY_NOT_SUPPORTED;\n      }\n\n      if (ManagedObjectUtils.isVm(ManagedObject.contextObjectUid) &&\n            await this.isVmRunningOnComputeOnlyCluster()) {\n         this.unavailableView = UnavailableViewSpec.VM_PERF_COMPUTE_ONLY_NOT_SUPPORTED;\n      }\n   }\n\n   private async getNumberOfHosts(): Promise<number> {\n      try {\n         return await this.dataService.getProperty(ClusterComputeResource.host.length, ManagedObject.contextObject);\n      } catch (err) {\n         this.handleError(err);\n      }\n   }\n\n   private async isHostFromComputeOnlyCluster(): Promise<boolean> {\n      try {\n         const clusterMoId: string = await this.dataService.getProperty(HostSystem.cluster, ManagedObject.contextObject);\n         const clusterRef: ManagedObject = DataServiceUtil.moIdToManagedObject(ClusterComputeResource.type, clusterMoId);\n         return await this.csdService.isComputeOnlyCluster(clusterRef);\n      } catch (err) {\n         this.handleError(err);\n      }\n   }\n\n   private async isVmRunningOnComputeOnlyCluster(): Promise<boolean> {\n      try {\n         const vmCsdConfig: VmCsdConfig = await this.csdVmService.getVmCsdConfig(ManagedObject.contextObject);\n         return await this.csdService.isComputeOnlyCluster(vmCsdConfig.computeCluster.moRef);\n      } catch (err) {\n         this.handleError(err);\n      }\n   }\n\n   private async handleCommonPropsResponse(result: PerfMonitorCommonPropsData): Promise<void> {\n      this.commonPerfData = result;\n\n      this.isComputeOnlyCluster = result.isComputeOnlyCluster;\n      this.remoteClustersTreeNodes =\n            PerformanceUtils.getRemoteClustersTreeNodes(result.mountedRemoteDatastores);\n\n      if (this.isComputeOnlyCluster && VsanUiUtils.isEmpty(this.remoteClustersTreeNodes)) {\n         this.unavailableView = UnavailableViewSpec.PERF_COMPUTE_ONLY_NO_MOUNTED_DATASTORES;\n         this.performanceAvailable = false;\n      } else if (!result.isComputeOnlyCluster && !result.isPerformanceServiceEnabled) {\n         this.unavailableView = UnavailableViewSpec.PERF_DISABLED;\n         this.performanceAvailable = false;\n      } else if (!result.isComputeOnlyCluster &&\n            !(await this.perfProvider.isPerformanceServiceHealthy(ManagedObject.contextObject))) {\n         this.unavailableView = UnavailableViewSpec.PERF_UNHEALTHY;\n      } else {\n         this.unavailableView = null;\n         this.performanceAvailable = true;\n      }\n\n      this.hasEditPrivilege = result.hasEditPrivilege;\n      this.isIscsiServiceEnabled = result.isIscsiServiceEnabled;\n      this.showIoInsightData = result.isIoInsightSupported && result.hasIoInsightViewPrivilege;\n      this.isTopContributorsSupported = result.isTopContributorsSupported;\n\n      this.networkDiagnostics = result.networkDiagnostics;\n\n      if (this.performanceAvailable) {\n         this.loadContext();\n      }\n\n      this.perfOrchestrator.data.entityTypes = this.commonPerfData.entityTypes;\n\n      if (result.clusterRef == null) {\n         this.handleError(VsanUiUtils.getString(\"vsan.perf.service.chart.nocluster.error\"));\n         return;\n      }\n      /**\n       * display a warning message on the UI when the difference between\n       * client browser time and Master Node host time is more than 1 hour\n       */\n      const masterNodeTimeDiffMessage: string = PerformanceUtils.validateMasterNodeTime(result.currentTimeOnMasterNode);\n      if (masterNodeTimeDiffMessage) {\n         this.handleError(masterNodeTimeDiffMessage, AlertType.WARNING);\n      }\n\n      this.updatePerfView();\n   }\n\n   private loadContext = () => {\n      // Check the PluginContext object if we have just been navigated here\n      // from the Performance Diagnostics view. If so, extract the context data\n      // and preselect the correct context object and time range\n\n      const context: any = VsanUiUtils.getNavigationData();\n      if (context != null) {\n         this.initTimeRangePicker(context);\n\n         if (context.hasOwnProperty(\"entityUuid\")) {\n            this.multiEntitiesViewEntityUuid = context.entityUuid;\n         }\n\n         if (context.hasOwnProperty(\"viewType\")) {\n            // Get the current view type\n            this._currentSelectedView = PerfMonitorViewType[String(context.viewType)];\n         }\n\n         if (context.hasOwnProperty(\"selectedEntityName\")) {\n            this.selectedEntityName = context.selectedEntityName;\n         }\n      }\n\n      if (VsanUiUtils.isEmpty(this.selectedRemoteClustersInfos)) {\n         this.selectedRemoteClustersInfos = !VsanUiUtils.isEmpty(this.remoteClustersTreeNodes)\n               ? [this.remoteClustersTreeNodes[0].objectInfo as InventoryNode]\n               : [];\n      }\n\n      this.availPerfViews =\n            PerformanceSupportUtil.getSupportedPerfViews(ManagedObject.contextObject.type, this.commonPerfData);\n      if (this.currentSelectedView === undefined) {\n         this.currentSelectedView = this.availPerfViews[0];\n      }\n\n      // we have just been navigated from cluster summary performance portlet, so initialize the top contributors view\n      if (PerfGraphicsComponent.isTopContributorsNavigationContext(context)) {\n         const topContributorsNavigationContext: TopContributorsContext = context as TopContributorsContext;\n         this.selectedTimePoint = topContributorsNavigationContext.selectedTimePoint;\n         this.selectedGraphId = topContributorsNavigationContext.selectedGraphId;\n         this.timePickerRange = topContributorsNavigationContext.timePickerRange;\n         this.vmModeSelection.mode = VsanPerfVmMode.TOP_CONTRIBUTORS;\n         this.perfOrchestrator.mode = PerfModeType.TOP_CONTRIBUTORS;\n      }\n   };\n\n   private static isTopContributorsNavigationContext(context: any): boolean {\n      return context && context.hasOwnProperty(\"selectedTimePoint\") && context.hasOwnProperty(\"selectedGraphId\")\n            && context.hasOwnProperty(\"timePickerRange\");\n   }\n\n   private initTimeRangePicker(context: any): void {\n      if (context.hasOwnProperty(\"timeRangeFrom\")\n            && context.hasOwnProperty(\"timeRangeTo\")\n            && context.hasOwnProperty(\"timeRangeName\")\n            && context.hasOwnProperty(\"pickerState\")\n            && context.hasOwnProperty(\"pickerInterval\")\n            && context.hasOwnProperty(\"pickerFromDate\")) {\n         this.timePickerRange = PerfTimeRangeData.Factory.create(context.timeRangeName,\n               Number(context.timeRangeFrom),\n               Number(context.timeRangeTo), null);\n         this.timePickerState = RangePickerState[String(context.pickerState)];\n         this.timePickerHourInterval = Number(context.pickerInterval);\n         this.timePickerFromDate = context.pickerFromDate ? new Date(context.pickerFromDate) : null;\n      }\n   }\n\n   handleError = (errMsg: string, errType: string = AlertType.DANGER) => {\n      this.errorMsg = errMsg;\n      this.errorType = errType;\n   };\n\n   private updatePerfView = () => {\n      if (!this.performanceAvailable || (this.isIscsiRelatedViews && !this.isIscsiServiceEnabled)) {\n         return;\n      }\n      if (this.isSingleEntityViewSelected) {\n         this.singleEntityTypeId = PerformanceUtils.getEntityTypeIdByPerfView(this.currentSelectedView);\n         this.perfOrchestrator.data.parentEntityType = this.singleEntityTypeId;\n      }\n      const specifiedEntityTypeId: string = PerformanceUtils.getSpecifiedEntityIdByPerfView(this.currentSelectedView);\n      if (VsanUiUtils.isSet(specifiedEntityTypeId)) {\n         this.perfOrchestrator.data.entityType = specifiedEntityTypeId;\n         this.isMultipleEntityPerfEnabled = true;\n      }\n   };\n\n   onPerfTimeRangeChange(timeRange?: PerfTimeRangeData, isOnInit?: boolean): void {\n      if (this.isMultipleEntityPerfEnabled) {\n         this.perfOrchestrator.changeTimeRange(timeRange);\n      }\n\n      if (isOnInit && !this.isPersistedSelectionInitialized) {\n         return;\n      }\n\n      this.timePickerRange = timeRange;\n      this.timePickerState = this.timeRangePickerComponent.currentPickerState;\n\n      if (!isOnInit) {\n         this.perfPersistenceService.saveSelection(timeRange, this.timeRangePickerComponent.currentPickerState);\n      }\n   }\n\n   get isRealtime(): boolean {\n      return this.realtimeChartSupported && this.timePickerState === RangePickerState.REAL_TIME;\n   }\n\n   get realtimeChartSupported(): boolean {\n      return this.clusterCapabilities?.isPerfHighResolutionSupported\n            && this.vmModeSelection?.mode !== VsanPerfVmMode.PER_VM\n            && this.vmModeSelection?.mode !== VsanPerfVmMode.TOP_CONTRIBUTORS\n            && PerfChartUtil.isRealtimeSupportedView(this.currentSelectedView);\n   }\n\n   get showSingleEntityData(): boolean {\n      return this.showEntitiesData\n            && this.isSingleEntityViewSelected\n            && this.perfOrchestrator.mode !== PerfModeType.TOP_CONTRIBUTORS;\n   }\n\n   get showTimeRangePicker(): boolean {\n      return VsanUiUtils.isSet(this.currentSelectedView)\n            && !this.isIoInsightRelatedView\n            && !this.isFileShareView\n            && this.perfOrchestrator.mode !== PerfModeType.TOP_CONTRIBUTORS;\n   }\n\n   get showMultiEntitiesData(): boolean {\n      return this.showEntitiesData && !this.isSingleEntityViewSelected;\n   }\n\n   get showTopContributors(): boolean {\n      return this.currentSelectedView === PerfMonitorViewType.CLUSTER_VM_CONSUMPTION\n            && this.commonPerfData.isTopContributorsSupported\n            && this.vmModeSelection?.mode === this.perfModeTypesNew.TOP_CONTRIBUTORS;\n   }\n\n   private get showEntitiesData(): boolean {\n      return !this.isIscsiRelatedViews || (this.isIscsiRelatedViews && this.isIscsiServiceEnabled);\n   }\n\n   private get isIscsiRelatedViews(): boolean {\n      return this.currentSelectedView === PerfMonitorViewType.CLUSTER_ISCSI\n            || this.currentSelectedView === PerfMonitorViewType.HOST_ISCSI;\n   }\n\n   private get isSingleEntityViewSelected(): boolean {\n      return PerformanceUtils.isSingleEntityViewSelected(this.currentSelectedView);\n   }\n\n   get isIoInsightRelatedView(): boolean {\n      return this.currentSelectedView === PerfMonitorViewType.HOST_IO_INSIGHT\n            || this.currentSelectedView === PerfMonitorViewType.CLUSTER_IO_INSIGHT;\n   }\n\n   get isFileShareView(): boolean {\n      return this.currentSelectedView === PerfMonitorViewType.CLUSTER_FILE_SERVICE;\n   }\n\n   get isVmVirtualDisksView(): boolean {\n      return this.currentSelectedView === PerfMonitorViewType.VM_VIRTUAL_DISK;\n   }\n\n   startNewIOinsightInstance(): void {\n      new ModalBuilder(\"ioInsightWizard/newIoInsightWizard\")\n            .setSize(900, 530)\n            .open();\n   }\n\n   getNetworkDiagnosticErrorMessage(): string[] {\n      return this.networkDiagnostics.map(networkDiagnostic => {\n         const errorTime: string = VsanDateTimeUtils.formatDate(networkDiagnostic.createdTime);\n         return networkDiagnostic.errorMessage.replace(\"{0}\", errorTime);\n      });\n   }\n\n   removeNetworkDiagnostic(networkDiagnostic: NetworkDiagnostic): void {\n      const index: number = this.networkDiagnostics.indexOf(networkDiagnostic);\n      this.networkDiagnostics = this.networkDiagnostics.slice(index, 1);\n   }\n\n   getNetworkDiagnosticActionLink(): AlertActionLink[] {\n      return this.networkDiagnostics.map(networkDiagnostic => {\n         return {\n            label: VsanUiUtils.getString(\"vsan.monitor.host.performance.network.diagnostics.showerrors\"),\n            action: () => this.networkDiagnosticActionClicked(networkDiagnostic),\n         };\n      });\n   }\n\n   /**\n    * Open the Physical Adapters tab, preselect the nic and the time range. The time range should be 30 minutes before\n    * the network diagnostic error's time and 30 minutes after it, so the user can observe what might has caused the\n    * error and what is the negative effect of it.\n    * @param networkDiagnostic\n    */\n   networkDiagnosticActionClicked(networkDiagnostic: NetworkDiagnostic): void {\n      const startTime: number = networkDiagnostic.createdTime - VsanDateTimeUtils.MINUTE_IN_MILLISECONDS * 30;\n      let endTime: number = networkDiagnostic.createdTime + VsanDateTimeUtils.MINUTE_IN_MILLISECONDS * 30;\n      const now: number = VsanDateTimeUtils.roundToMinuteStart(new Date().getTime());\n      if (endTime > now) {\n         endTime = now;\n      }\n      this.timePickerRange = PerfTimeRangeData.Factory.create(\n            \"\", startTime, endTime, null);\n      this.timeRangePickerComponent.setTimerange(this.timePickerRange, RangePickerState.CUSTOM_RANGE);\n      if (networkDiagnostic.eventTypeId.includes(PerfGraphicsComponent.NETWORK_DIAGNOSTICS_EVENT_RDT)) {\n         this.changeViewSelection(PerfMonitorViewType.HOST_VIRTUAL_ADAPTER);\n      } else {\n         this.selectedEntityName = networkDiagnostic.nicname;\n         this.changeViewSelection(PerfMonitorViewType.HOST_PHYSICAL_ADAPTER);\n      }\n   }\n\n   async onVsanPerfVmModeSelectionChange(modeSelection: VsanPerfVmModeSelection): Promise<void> {\n      this.vmModeSelection = modeSelection;\n\n      // TODO [kaleksandrov] Leftover workaround. Remove it once the perf orchestrator is gone\n      this.perfOrchestrator.data.timeRangeData = this.timePickerRange;\n\n      // TODO [kaleksandrov] This logic is just ot map the new enums and component models to the\n      // old orchestrator's properties. Remove this mapping once the other views are uncoupled\n      // from the orchestrator service\n      switch (modeSelection.mode) {\n         case VsanPerfVmMode.CLUSTER_AGGREGATION:\n         case VsanPerfVmMode.HOST_AGGREGATION:\n            this.perfOrchestrator.mode = PerfModeType.SHOW_AVERAGE;\n            break;\n         case VsanPerfVmMode.PER_VM:\n            this.perfOrchestrator.mode = PerfModeType.SHOW_SPECIFICS;\n            break;\n         case VsanPerfVmMode.TOP_CONTRIBUTORS:\n            this.perfOrchestrator.mode = PerfModeType.TOP_CONTRIBUTORS;\n            break;\n         default:\n            throw new Error(\"Unknown perf mode!\");\n      }\n\n      this.perfOrchestrator.state = modeSelection.isSeparateCharts\n            ? PerfModeState.SPECIFIC_MODE_SHOW_SEPARATELY\n            : PerfModeState.SPECIFIC_MODE_SHOW_CONSOLIDATED;\n\n      if (modeSelection.mode === VsanPerfVmMode.PER_VM) {\n         const vmsWithoutData: InvNode[] = this.getVmsWithoutData(modeSelection.vmInventoryNodes);\n         // TODO [kaleksandrov] This \"remainingEntitiesToLoad\" prop is used to handle the loading spinner in other\n         // views. Pass the loading flag as input instead.\n         this.perfOrchestrator.remainingEntitiesToLoad += vmsWithoutData.length;\n         const specifiedEntityTypeId: string = PerformanceUtils\n               .getSpecifiedEntityIdByPerfView(this.currentSelectedView);\n         const configSpec: any = this.commonPerfData.entityTypes[specifiedEntityTypeId];\n         const perfEntities: BasePerfEntity[] = await this.vmDataService\n               .loadBasePerfEntities(vmsWithoutData, configSpec);\n         this.setSelectedSpecifiedEntities(perfEntities);\n      }\n   }\n\n   getTooltipActionLink(): string {\n      return this.currentSelectedView === PerfMonitorViewType.CLUSTER_VM_CONSUMPTION &&\n      this.commonPerfData.isTopContributorsSupported ?\n            VsanUiUtils.getString(\"vsan.monitor.cluster.performance.topContributors.tooltip.action.link\") : null;\n   }\n\n   /**\n    * Filters out only the VMs for which we don't have data.\n    */\n   private getVmsWithoutData(vms: InvNode[]): InvNode[] {\n      // Convert the VM list to a set of MoRef IDs for easier and faster lookup\n      const vmMap: Map<string, InvNode> = new Map<string, InvNode>();\n      vms.forEach((vm: InvNode) => {\n         vmMap.set(vm.data.nodeRef.value, vm);\n      });\n\n      const vmsWithoutData: InvNode[] = [];\n\n      vmMap.forEach((value: InvNode, key: string) => {\n         this.perfOrchestrator.data.entitySelectionStateMap.set(key, true);\n         const vmNode: InvNode = vmMap.get(key);\n         const index: number = this.perfOrchestrator.data.entities\n               .findIndex(entity => entity.entityIdentifier === vmNode.data.nodeRef.value);\n         if (index === -1) {\n            vmsWithoutData.push(vmNode);\n         }\n      });\n\n      // Update the selection state of the VMs in the cache\n      this.perfOrchestrator.data.entitySelectionStateMap.forEach((value: boolean, key: string) => {\n         const isVmSelected: boolean = vmMap.has(key);\n         this.perfOrchestrator.data.entitySelectionStateMap.set(key, isVmSelected);\n      });\n\n      return vmsWithoutData;\n   }\n\n   tooltipActionLinkClicked = (data: ChartPlotLineSelectionData) => {\n      this.selectedTimePoint = data.timePoint;\n      this.selectedGraphId = data.graphId;\n      this.vmModeSelection.mode = VsanPerfVmMode.TOP_CONTRIBUTORS;\n      this.perfOrchestrator.mode = PerfModeType.TOP_CONTRIBUTORS;\n   };\n\n   private setSelectedSpecifiedEntities(perfEntities: BasePerfEntity[]): void {\n      // TODO [kaleksandrov] Once the perfOrchestrator is gone this data will be kept in the current compoennt\n      // and this whole method won't be needed.\n      this.perfOrchestrator.data.entities.push(...perfEntities);\n      if (!this.perfOrchestrator.data.entities || !this.perfOrchestrator.data.entitySelectionStateMap) {\n         return;\n      }\n      this.perfOrchestrator.data.selectedEntities = this.perfOrchestrator.data.entities\n            .filter((e: BasePerfEntity) => this.perfOrchestrator.data.entitySelectionStateMap.get(e.entityIdentifier));\n      this.perfOrchestrator.change.next(PerfChangeContext.FILTERED_ENTITIES);\n\n      this.consolidatedEntitiesData.entities = this.perfOrchestrator.data.entities\n            .filter((entity: BasePerfEntity) => this.perfOrchestrator.data.entitySelectionStateMap\n                  .get(entity.entityIdentifier));\n   }\n\n   onEntitySelect(event: EntitySelectEvent): void {\n      // TODO [kaleksandrov] Delete once the selection state is read from the\n      // this.perfOrchestrator.consolidatedViewHelper.toggle(event.entity.entityIdentifier, event.isSelected);\n      //\n      // !!!!!!!!!!!!!!!!!\n      // this.consolidatedEntitiesData.entityVisibilityStateMap =\n      //       this.perfOrchestrator.consolidatedViewHelper.entityVisibilityStateMap;\n      this.consolidatedEntitiesData.entityIdentifierToVisibility[event.entity.entityIdentifier] = event.isSelected;\n   }\n\n   onEntitiesReady(event: EntitiesReadyEvent): void {\n      this.consolidatedEntitiesData.entityIdentifierToColor = event.entityIdentifierToColor;\n   }\n}\n","<!--Copyright 2020-2022 VMware, Inc. All rights reserved. -- VMware Confidential-->\n<clr-dropdown class=\"mode-dropdown\">\n   <button class=\"btn btn-sm\" clrDropdownTrigger>\n      {{dropdownLabel}}\n      <clr-icon shape=\"caret down\"></clr-icon>\n   </button>\n\n   <clr-dropdown-menu (keyup)=\"stopPropagation($event)\"\n                      (keydown)=\"stopPropagation($event)\"\n                      (keypress)=\"stopPropagation($event)\"\n                      clrPosition=\"bottom-left\"\n                      [tabIndex]=\"-1\"\n                      [attr.aria-label]=\"'vsan.common.srMessage.dropdownMenu.optionsExpanded.label' | localized\">\n      <div class=\"indent\">\n         <clr-radio-wrapper>\n            <input id=\"average-metrics\"\n                   clrRadio\n                   type=\"radio\"\n                   value=\"{{aggregatedVsanPerfVmMode}}\"\n                   [(ngModel)]=\"mode\"\n                   name=\"view-mode\"/>\n            <label id=\"average-metrics-label\" for=\"average-metrics\">\n               {{aggregatedLevelMetricsLabel}}\n            </label>\n         </clr-radio-wrapper>\n         <clr-radio-wrapper *ngIf=\"showTopContributors\">\n            <input id=\"top-contributors\"\n                   clrRadio\n                   type=\"radio\"\n                   value=\"{{perfModeTypes.TOP_CONTRIBUTORS}}\"\n                   [(ngModel)]=\"mode\"\n                   name=\"view-mode\"/>\n            <label id=\"top-contributors-label\" for=\"top-contributors\">\n               {{\"vsan.monitor.cluster.performance.topContributors.title\" | localized}}\n            </label>\n         </clr-radio-wrapper>\n         <div>\n            <clr-radio-container>\n               <clr-radio-wrapper>\n                  <input id=\"specific-metrics\"\n                         clrRadio\n                         type=\"radio\"\n                         value=\"{{perfModeTypes.PER_VM}}\"\n                         [(ngModel)]=\"mode\"\n                         name=\"view-mode\"/>\n                  <label id=\"specific-metrics-label\"\n                         for=\"specific-metrics\">\n                     {{\"vsan.monitor.cluster.performance.showSpecificVMs.title\" | localized}}\n                  </label>\n               </clr-radio-wrapper>\n               <clr-control-helper>\n                  {{\"vsan.monitor.cluster.performance.limit\" | localized:SPECIFIED_ENTITIES_SELECTION_LIMIT}}\n               </clr-control-helper>\n            </clr-radio-container>\n            <vsan-inventory-browser *ngIf=\"isPerVmMode || vmNodes.length > 0\"\n                                    [inventoryService]=\"vmInventoryService\"\n                                    [showCheckBoxes]=\"true\"\n                                    [showCheckBoxesOnlyOnLeafNodes]=\"true\"\n                                    [useDatacenterServiceForDcFolders]=\"false\"\n                                    [disableSelection]=\"!isVmSelectionAllowed\"\n                                    [disabled]=\"!isVmSelectorStateEnabled\"\n                                    [objRefs]=\"root\"\n                                    (nodeSelected)=\"selectNode($event)\"\n                                    [searchInputAriaLabelKey]=\"'vsan.monitor.cluster.performance.showSpecificVMs.searchInputAriaLabel'\">\n            </vsan-inventory-browser>\n         </div>\n      </div>\n   </clr-dropdown-menu>\n</clr-dropdown>\n\n<clr-toggle-wrapper *ngIf=\"isPerVmMode\">\n   <input id=\"toggle-mode\"\n          name=\"toggle-mode\"\n          [checked]=\"isSeparateCharts\"\n          (change)=\"setIsConsolidatedView($event.target.checked)\"\n          type=\"checkbox\"\n          clrToggle/>\n   <label for=\"toggle-mode\">\n      {{\"vsan.monitor.cluster.performance.showSpecificVMs.separated.title\" | localized}}\n   </label>\n</clr-toggle-wrapper>\n","/* Copyright 2017-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {\n   AfterViewInit,\n   Component,\n   ElementRef,\n   EventEmitter,\n   HostListener,\n   Input,\n   OnChanges,\n   Output,\n   SimpleChanges,\n   ViewChild,\n} from \"@angular/core\";\nimport {PerfEntities} from \"../model/perf-entities\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {BasePerfEntity} from \"../model/base-perf-entity\";\nimport {ExpandablePerfEntity} from \"../model/expandable-perf-entity\";\nimport {PerfChartDataConstants} from \"@component/chart/performance/perf-chart-util\";\n\n@Component({\n   selector: \"vsan-perf-multi-entities-metrics\",\n   templateUrl: \"perf-multi-entities-metrics.html\",\n   styleUrls: [\"perf-multi-entities-metrics.scss\"],\n})\n\nexport class PerfMultiEntitiesMetricsComponent implements AfterViewInit, OnChanges {\n\n   @Input()\n   entities: PerfEntities;\n\n   @Input()\n   initialEntityId: string;\n\n   @Input()\n   selectedEntityName: string;\n\n   @Output()\n   entitySelected: EventEmitter<BasePerfEntity> = new EventEmitter<BasePerfEntity>();\n\n   @Output()\n   parentEntityChanging: EventEmitter<void> = new EventEmitter<void>();\n\n   @ViewChild(\"parentDropdownElement\")\n   private parentDropdownElement: ElementRef;\n\n   @ViewChild(\"childDropdownElement\")\n   private childDropdownElement: ElementRef;\n\n   private _selectedChildEntityIndex: number = 0;\n\n   isParentDropdownOpened: boolean = false;\n   isChildDropdownOpened: boolean = false;\n   private init: boolean;\n\n   get selectedChildEntityIndex(): number {\n      return this._selectedChildEntityIndex;\n   }\n\n   set selectedChildEntityIndex(index: number) {\n      if (+index === this._selectedChildEntityIndex) {\n         return;\n      }\n      this._selectedChildEntityIndex = +index;\n\n      // The first item of the second select box is the 'whole' items aggregation\n      if (this._selectedChildEntityIndex === 0) {\n         // Load the data for all the group\n         this.childEntityClicked(this.selectedParentEntity);\n      } else {\n         // Load the data only for particular subitem\n         // We use \"index-1\" because the \"children\" collection contains only the subitems of the category,\n         // but \"index\" is the selected item from the dropdown which contains the additional \"whole\" item\n         this.childEntityClicked(\n               (this.selectedParentEntity as ExpandablePerfEntity).children[this._selectedChildEntityIndex - 1]);\n      }\n   }\n\n   private _selectedParentEntityIndex: number;\n\n   get selectedParentEntityIndex(): number {\n      return this._selectedParentEntityIndex;\n   }\n\n   set selectedParentEntityIndex(index: number) {\n      if (+index === this._selectedParentEntityIndex) {\n         return;\n      }\n      this._selectedParentEntityIndex = +index;\n      this._selectedChildEntityIndex = 0;\n      this.parentEntityClicked(this.entities.objs[this._selectedParentEntityIndex]);\n   }\n\n   selectedChildEntity: BasePerfEntity;\n   selectedParentEntity: BasePerfEntity;\n\n   ngAfterViewInit(): void {\n      this.init = true;\n      if (this.entities === null ||\n            this.entities.objs === null) {\n         return;\n      }\n\n      if (this.initialEntityId) {\n         this.preselectEntityById();\n      } else if (this.selectedEntityName) {\n         this.preselectParentEntityByName();\n      } else {\n         this.selectedParentEntityIndex = 0;\n         this.selectedChildEntityIndex = 0;\n      }\n      this.init = false;\n   }\n\n   private preselectEntityById(): void {\n      let childIndex: number = -1;\n      let parentIndex: number = -1;\n\n      this.entities.objs.find((entity: BasePerfEntity, index) => {\n         // Search through the children\n         if (entity instanceof ExpandablePerfEntity) {\n            const expandableEntity: ExpandablePerfEntity = entity as ExpandablePerfEntity;\n            if (expandableEntity.children && expandableEntity.children.length > 0) {\n               childIndex = expandableEntity.children.findIndex((child: BasePerfEntity) => {\n                  return child.entityUuid === this.initialEntityId;\n               });\n            }\n         }\n\n         // If the initial selected entity was found in the children or\n         // it is the parent item, preselect it\n         if (childIndex >= 0 || entity.entityUuid === this.initialEntityId) {\n            parentIndex = index;\n            return true;\n         }\n\n         return false;\n      });\n\n      this.selectedParentEntityIndex = (parentIndex >= 0) ? parentIndex : 0;\n      this.selectedChildEntityIndex = (childIndex >= 0) ? childIndex + 1 : 0;\n   }\n\n   ngOnChanges(changes: SimpleChanges): void {\n      if (changes.selectedEntityName) {\n         this.preselectParentEntityByName();\n      }\n   }\n\n   private preselectParentEntityByName(): void {\n      // The entity name is provided in two cases\n      // 1. in case when there is a network diagnostic alarm is shown and the user has clicked at the \"Show error\" link\n      // we need to preselect the nic with this from the alarm\n      // 2. an attached container block volume is selected in virtual objects view. We need to preselect the disk\n      // associated with it.\n      let parentIndex: number = -1;\n      this.entities.objs.find((entity: BasePerfEntity, index) => {\n         if (entity.entityName.includes(this.selectedEntityName)) {\n            parentIndex = index;\n            return true;\n         }\n         return false;\n      });\n\n      this.selectedParentEntityIndex = (parentIndex >= 0) ? parentIndex : 0;\n   }\n\n\n   private parentEntityClicked(entity: BasePerfEntity): void {\n      if (entity !== this.selectedParentEntity) {\n         this.selectedParentEntity = entity;\n         // Load the data for all the group\n         this.childEntityClicked(this.selectedParentEntity);\n         this.entitySelected.emit(entity);\n         // raise the event only when not in initialize phase\n         if (!this.init) {\n            this.parentEntityChanging.emit();\n         }\n      }\n   }\n\n   private childEntityClicked(entity: BasePerfEntity): void {\n      if (entity !== this.selectedChildEntity) {\n         this.selectedChildEntity = entity;\n         this.entitySelected.emit(entity);\n      }\n   }\n\n   getSubEntityLabel(): string {\n      switch (this.selectedParentEntity.entityId) {\n         case PerfChartDataConstants.HOST_DISK_GROUP_ENTITY:\n            return VsanUiUtils.getString(\"vsan.monitor.host.performance.disk.col.title\");\n         case PerfChartDataConstants.CLUSTER_ISCSI_TARGET_ENTITY:\n            return VsanUiUtils.getString(\"vsan.monitor.host.performance.iscsi.lun.col.title\");\n         default:\n            throw new Error(\"No sub entity for entityId: \" + this.selectedParentEntity.entityId);\n      }\n   }\n\n   get hasChildren(): boolean {\n      return !!this.selectedParentEntity\n            && this.selectedParentEntity.hasOwnProperty(\"children\")\n            && !!this.selectedParentEntity[\"children\"];\n   }\n\n   getSelectedParentEntityChildren(): BasePerfEntity[] {\n      return this.selectedParentEntity[\"children\"];\n   }\n\n   get selectedChildEntityName(): string {\n      return this.selectedChildEntityIndex < 1 || !this.selectedChildEntity\n            ? this.getSubEntityLabel()\n            : this.selectedChildEntity.entityName;\n   }\n\n   // use this method to change the icon, and show the dropdown when the search input is focused\n   openDropdownMenu(searchBoxFocused: boolean, isParentDropdown: boolean): void {\n      if (searchBoxFocused) {\n         this.isParentDropdownOpened = isParentDropdown;\n         this.isChildDropdownOpened = !isParentDropdown;\n      }\n   }\n\n   closeParentDropDownMenu(selectedIndex: number): void {\n      this.selectedParentEntityIndex = selectedIndex;\n      this.isParentDropdownOpened = false;\n   }\n\n   closeChildDropDownMenu(selectedIndex: number): void {\n      this.selectedChildEntityIndex = selectedIndex;\n      this.isChildDropdownOpened = false;\n   }\n\n   /**\n    * Close the dropdown list when user clicks out of the menu\n    */\n   @HostListener(\"document:click\", [\"$event\"])\n   closeDropdownMenu(event: MouseEvent): void {\n      if (this.isParentDropdownOpened &&\n            !this.parentDropdownElement.nativeElement.contains(event.target)) {\n         this.isParentDropdownOpened = false;\n      } else if (this.isChildDropdownOpened &&\n            !this.childDropdownElement.nativeElement.contains(event.target)) {\n         this.isChildDropdownOpened = false;\n      }\n   }\n}\n","<!--Copyright 2017-2022 VMware, Inc. All rights reserved. -- VMware Confidential-->\n<h5 vsan-auto-focus>\n   {{\"vsan.perf.monitor.label\" | localized}}\n</h5>\n<div *ngIf=\"loading\" class=\"spinner central-spinner\"></div>\n<ng-container *ngIf=\"!loading\">\n   <vsan-validation id=\"validation-message\"\n                    *ngIf=\"errorMsg\"\n                    [alertType]=\"errorType\"\n                    [alert]=\"errorMsg\"\n                    [allowReload]=\"true\"\n                    (onReload)=\"fetch()\"\n                    (onClosed)=\"errorMsg = null\">\n   </vsan-validation>\n\n   <vsan-validation id=\"network-diagnostics-message\"\n                    *ngIf=\"networkDiagnostics?.length\"\n                    [alertType]=\"errorType\"\n                    [alerts]=\"getNetworkDiagnosticErrorMessage()\"\n                    [actionLinks]=\"getNetworkDiagnosticActionLink()\"\n                    [alertsExpanded]=\"true\"\n                    [allowExpandCollapse]=\"false\">\n   </vsan-validation>\n\n   <vsan-unavailable-view *ngIf=\"unavailableView\"\n                          [unavailableViewSpec]=\"unavailableView\"\n                          [hasEditPrivilege]=\"hasEditPrivilege\"\n                          [clusterRef]=\"clusterRef\"\n                          [refreshAfterCompletion]=\"performanceAvailable\"\n                          [masterNodeElectedCallBack]=\"performanceAvailable ? null : fetch.bind(this)\">\n   </vsan-unavailable-view>\n\n   <ng-container *ngIf=\"!unavailableView\">\n      <div role=\"tablist\"\n           class=\"btn-group btn-outline-primary btn-sm\"\n           vsan-button-group-wrap\n           [attr.aria-label]=\"'vsan.perf.monitor.tablist.label'|localized\">\n         <button id=\"perf-view-selection-buttons-{{i}}\"\n                 role=\"tab\"\n                 class=\"btn\"\n                 aria-controls=\"single-entity-data-panel multi-entities-data-panel file-share-data-panel io-insight-data-panel\"\n                 (click)=\"changeViewSelection(availView)\"\n                 *ngFor=\"let availView of availPerfViews; let i = index\"\n                 [attr.aria-selected]=\"availView == currentSelectedView\"\n                 [ngClass]=\"{'btn-primary': availView == currentSelectedView}\">\n            {{getPerfViewSelectOptionLabel(availView)}}\n         </button>\n      </div>\n\n      <ng-container\n            *ngIf=\"clusterCapabilities?.isMultiVmPerfSupported && isMultipleEntityPerfEnabled\">\n         <vsan-perf-vm-mode-selector [vmModeSelection]=\"vmModeSelection\"\n                                     (vmModeSelectionChange)=\"onVsanPerfVmModeSelectionChange($event)\"\n                                     [showTopContributors]=\"isTopContributorsSupported\">\n         </vsan-perf-vm-mode-selector>\n      </ng-container>\n\n      <div *ngIf=\"showTimeRangePicker\"\n           class=\"actions-container\">\n         <vsan-time-range-picker id=\"vsan-time-range-picker1\"\n                                 role=\"group\"\n                                 aria-labelledby=\"time-range-label\"\n                                 [clusterRef]=\"commonPerfData?.clusterRef\"\n                                 [currentTimeRange]=\"timePickerRange\"\n                                 [currentPickerState]=\"timePickerState\"\n                                 [hourInterval]=\"timePickerHourInterval\"\n                                 [fromDate]=\"timePickerFromDate\"\n                                 [realtimeSupported]=\"realtimeChartSupported\"\n                                 (initRange)=\"onPerfTimeRangeChange($event,true)\"\n                                 (changeRange)=\"onPerfTimeRangeChange($event, false)\">\n         </vsan-time-range-picker>\n         <button *ngIf=\"showIoInsightData && isVmVirtualDisksView\"\n                 id=\"create-new-instance\"\n                 class=\"btn btn-link btn-sm small-btn new-instance-btn\"\n                 (click)=\"startNewIOinsightInstance()\">\n            {{\"vsan.monitor.vm.performance.virtualDisk.ioInsight.newInstnace\" | localized}}\n         </button>\n      </div>\n\n      <!-- Remote cluster selector -->\n      <vsan-dropdown-object-selector *ngIf=\"isRemoteVmView()\"\n                                     [label]=\"'vsan.monitor.cluster.performance.toClusterLabel' | localized\"\n                                     [showSearch]=\"false\"\n                                     [nodes]=\"remoteClustersTreeNodes\"\n                                     [(selectedObjectInfos)]=\"selectedRemoteClustersInfos\">\n      </vsan-dropdown-object-selector>\n\n      <vsan-consolidated-vm-selector *ngIf=\"isConsolidatedVmSelectorVisible\"\n                                     [entities]=\"consolidatedEntitiesData.entities\"\n                                     [entityVisibilityStateMap]=\"consolidatedEntitiesData.entityIdentifierToVisibility\"\n                                     (entitySelect)=\"onEntitySelect($event)\"\n                                     (entitiesReady)=\"onEntitiesReady($event)\">\n      </vsan-consolidated-vm-selector>\n\n      <vsan-single-entity-data-perf\n            id=\"single-entity-data-panel\"\n            role=\"tabpanel\"\n            *ngIf=\"showSingleEntityData\"\n            [commonPerfData]=\"commonPerfData\"\n            [consolidatedEntitiesData]=\"consolidatedEntitiesData\"\n            [currentTimeRange]=\"timePickerRange\"\n            [entityTypeId]=\"singleEntityTypeId\"\n            [isComputeOnlyCluster]=\"isComputeOnlyCluster\"\n            [isRealtime]=\"isRealtime\"\n            [monitoredServerCluster]=\"isRemoteVmView() ? selectedRemoteClusterRef : null\"\n            [attr.aria-labelledby]=\"'perf-view-selection-buttons-' + currentSelectedView\"\n            (onTooltipActionClicked)=\"tooltipActionLinkClicked($event)\"\n            [actionLink]=\"getTooltipActionLink()\">\n      </vsan-single-entity-data-perf>\n\n      <vsan-multi-entities-data-perf\n            id=\"multi-entities-data-panel\"\n            role=\"tabpanel\"\n            *ngIf=\"showMultiEntitiesData && !isIoInsightRelatedView && !isFileShareView\"\n            [commonPerfData]=\"commonPerfData\"\n            [currentTimeRange]=\"timePickerRange\"\n            [currentView]=\"currentSelectedView\"\n            [initialEntityId]=\"multiEntitiesViewEntityUuid\"\n            [selectedEntityName]=\"selectedEntityName\"\n            [isRealtime]=\"isRealtime\"\n            [attr.aria-labelledby]=\"'perf-view-selection-buttons-' + currentSelectedView\">\n      </vsan-multi-entities-data-perf>\n\n      <vsan-file-share-data-perf id=\"file-share-data-panel\"\n                                 role=\"tabpanel\"\n                                 *ngIf=\"isFileShareView\"\n                                 [commonPerfData]=\"commonPerfData\"\n                                 [currentView]=\"currentSelectedView\"\n                                 [initialEntityId]=\"multiEntitiesViewEntityUuid\"\n                                 [capabilitiesData]=\"clusterCapabilities\"\n                                 [attr.aria-labelledby]=\"'perf-view-selection-buttons-' + currentSelectedView\">\n      </vsan-file-share-data-perf>\n\n      <vsan-io-insight-data-perf id=\"io-insight-data-panel\"\n                                 role=\"tabpanel\"\n                                 *ngIf=\"showMultiEntitiesData && isIoInsightRelatedView\"\n                                 [commonPerfData]=\"commonPerfData\"\n                                 [initialEntityId]=\"multiEntitiesViewEntityUuid\"\n                                 [currentView]=\"currentSelectedView\"\n                                 [attr.aria-labelledby]=\"'perf-view-selection-buttons-' + currentSelectedView\">\n      </vsan-io-insight-data-perf>\n\n      <vsan-top-contributors-data-perf id=\"top-contributors-data-panel\"\n                                       role=\"tabpanel\"\n                                       *ngIf=\"showTopContributors\"\n                                       [commonPerfData]=\"commonPerfData\"\n                                       [(currentTimeRange)]=\"timePickerRange\"\n                                       [(currentPickerState)]=\"timePickerState\"\n                                       [(currentHourInterval)]=\"timePickerHourInterval\"\n                                       [selectedTimePoint]=\"selectedTimePoint\"\n                                       [selectedClusterGraph]=\"selectedGraphId\"\n                                       [attr.aria-labelledby]=\"'perf-view-selection-buttons-' + currentSelectedView\">\n      </vsan-top-contributors-data-perf>\n   </ng-container>\n</ng-container>","<!--Copyright 2020 VMware, Inc. All rights reserved. -- VMware Confidential-->\n<div class=\"entity-toggle-action\"\n     *ngFor=\"let entity of entities, let i = index\">\n   <clr-checkbox-wrapper>\n      <input #showEntity\n             id=\"chart-toggle-{{i}}\"\n             type=\"checkbox\"\n             clrCheckbox\n             [ngModel]=\"entityVisibilityStateMap[entity.entityIdentifier]\"\n             (change)=\"onEntitySelect(entity, showEntity.checked)\"/>\n      <label class=\"icon-name-container\">\n         <clr-icon *ngIf=\"entity.icon\"\n                   [attr.shape]=\"entity.icon\"></clr-icon>\n         <span vsan-show-title>\n            {{entity.entityLabelName || entity.entityName}}\n         </span>\n      </label>\n   </clr-checkbox-wrapper>\n   <svg class=\"color-flag\" [style.fill]=\"entityIdentifierToColor[entity.entityIdentifier]\">\n      <rect x=\"0\" y=\"9\" width=\"25\" height=\"6\"/>\n   </svg>\n</div>\n","/* Copyright 2020-2022 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {PerfChartUtil} from \"@component/chart/performance/perf-chart-util\";\nimport {InventoryNode} from \"@component/inventory/inventory-node\";\nimport {ManagedObject} from \"@service/managed-object\";\nimport {VsanPerfVmMode} from \"./perf-vm-mode\";\n\n/**\n * Model representing the selection of the PerfVmModeSelector used in the Performance VM tab\n */\nexport class VsanPerfVmModeSelection {\n   mode: VsanPerfVmMode;\n   vmInventoryNodes: InventoryNode[];\n   isSeparateCharts: boolean;\n\n   static initDefault(moRef: ManagedObject): VsanPerfVmModeSelection {\n      const selection: VsanPerfVmModeSelection = new VsanPerfVmModeSelection();\n      selection.mode = PerfChartUtil.getAggregatedVsanPerfVmMode(moRef);\n      selection.vmInventoryNodes = [];\n      return selection;\n   }\n}\n","/* Copyright 2019-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {CommonModule} from \"@angular/common\";\nimport {NgModule} from \"@angular/core\";\nimport {FormsModule} from \"@angular/forms\";\nimport {RouterModule, Routes} from \"@angular/router\";\nimport {ClarityModule} from \"@clr/angular\";\nimport {CommonCellsModule} from \"@component/cell/common-cells.module\";\nimport {CrossColumnFilterModule} from \"@component/cross-column-filter/cross-column-filter.module\";\nimport {DatetimePickerModule} from \"@component/datetime-picker/datetime-picker.module\";\nimport {PromptModule} from \"@component/dialog/prompt/prompt.module\";\nimport {IllustratedMessageModule} from \"@component/illustrated-message/illustrated-message.module\";\nimport {InventoryBrowserModule} from \"@component/inventory/inventory-browser.module\";\nimport {SearchModule} from \"@component/search/search.module\";\nimport {UnavailableViewModule} from \"@component/unavailable-view/unavailable-view.module\";\nimport {ValidationModule} from \"@component/validation/validation.module\";\nimport {CommonDirectiveModule} from \"@directive/common-directive.module\";\nimport {CommonPipeModule} from \"@pipe/common-pipe.module\";\nimport {PersistentStorageService} from \"@service/browser-storage.service\";\nimport {PerformancePersistenceService} from \"@service/performance-persistence.service\";\nimport {PerfOrchestratorService} from \"@util/performance/perf-orchestrator-service\";\nimport {PerformanceCommonModule} from \"./performance-common.module\";\nimport {ConsolidatedVmSelectorComponent} from \"./view/consolidated-vm-selector.component\";\nimport {VsanFileShareDataPerfComponent} from \"./view/file-share-data-perf.component\";\nimport {FileShareSelectorComponent} from \"./view/file-share-selector.component\";\nimport {VsanIoInsightPerfComponent} from \"./view/io-insight-data-perf.component\";\nimport {IoInsightInstanceComponent} from \"./view/io-insight-instance.component\";\nimport {IoInsightMetricsComponent} from \"./view/io-insight-metrics.component\";\nimport {IoinsightRunningStatusPipe} from \"./view/ioinsight-running-status.pipe\";\nimport {PerfGraphicsComponent} from \"./view/perf-graphics.component\";\nimport {PerfVmDataService} from \"./view/perf-vm-data.service\";\nimport {PerfVmModeSelectorComponent} from \"./view/perf-vm-mode-selector/perf-vm-mode-selector.component\";\nimport {VsanTopContributorsDataPerfComponent} from \"./view/top-contributors-data-perf.component\";\nimport {ConsolidatedDialogComponent} from \"./view/consolidated-dialog.component\";\nimport {ActionButtonModule} from \"@component/action-button/action-button.module\";\n\nconst performanceRoutes: Routes = [\n   {\n      path: \"\",\n      component: PerfGraphicsComponent,\n   },\n   {\n      path: \"consolidatedVmDialog\",\n      component: ConsolidatedDialogComponent,\n   },\n];\n\n@NgModule({\n   imports: [\n      ActionButtonModule,\n      FormsModule,\n      CommonModule,\n      ClarityModule,\n      CrossColumnFilterModule,\n      PromptModule,\n      ValidationModule,\n      CommonPipeModule,\n      UnavailableViewModule,\n      DatetimePickerModule,\n      InventoryBrowserModule,\n      IllustratedMessageModule,\n      SearchModule,\n      CommonDirectiveModule,\n      CommonCellsModule,\n      PerformanceCommonModule,\n      RouterModule.forChild(performanceRoutes),\n   ],\n   declarations: [\n      PerfGraphicsComponent,\n      VsanIoInsightPerfComponent,\n      IoInsightInstanceComponent,\n      IoInsightMetricsComponent,\n      IoinsightRunningStatusPipe,\n      VsanFileShareDataPerfComponent,\n      FileShareSelectorComponent,\n      VsanTopContributorsDataPerfComponent,\n      PerfVmModeSelectorComponent,\n      ConsolidatedVmSelectorComponent,\n      ConsolidatedDialogComponent,\n   ],\n   exports: [\n      ConsolidatedDialogComponent,\n   ],\n   providers: [\n      PerfOrchestratorService,\n      PerformancePersistenceService,\n      PersistentStorageService,\n      PerfVmDataService,\n   ],\n})\nexport class PerformanceModule {\n}\n","/* Copyright 2021 VMware, Inc. All rights reserved. -- VMware Confidential */\n/**\n * IDs used in external navigation to official documentation\n */\nexport enum DocumentationId {\n   RDMA_DOCUMENTATION = \"GUID-48154235-C557-4074-8BEB-AB9A7BD84A92\",\n   IO_INSIGHT_DOCUMENTATION = \"GUID-3ABCB8EA-1FC7-40A4-B834-C9FEDF02A902\",\n   ENFORCE_RESERVATION_DOCUMENTATION = \"GUID-CD510EAE-1A9F-45D2-BB66-E893C8AAF20A\",\n}","<!-- Copyright 2019-2021 VMware, Inc. All rights reserved. -- VMware Confidential -->\n<span *ngIf=\"loading\" class=\"spinner spinner-lg central-spinner\"></span>\n<vsan-validation id=\"validation-message\"\n                 *ngIf=\"!loading && errorMsg\"\n                 [alert]=\"errorMsg\"\n                 [allowReload]=\"true\"\n                 (onReload)=\"fetch()\"\n                 (onClosed)=\"errorMsg = null\">\n</vsan-validation>\n\n<ng-container *ngIf=\"!loading && !errorMsg && originalIoInsightInstances.length == 0\">\n   <div>\n      <span>{{\"vsan.monitor.performance.io.insight.initial.info\" | localized}}</span>\n      <a id=\"learn-more\"\n         [external-link]=\"'vsan.monitor.performance.io.insight.initial.link' | localized\"\n         [url]=\"documentationUrl\"></a>\n   </div>\n   <div class=\"info-image\"></div>\n   <button class=\"btn btn-primary start-button-initial-view\"\n           (click)=newIoInsightClicked()>\n      {{\"vsan.monitor.performance.io.insight.newInstnace\" | localized}}\n   </button>\n</ng-container>\n\n<ng-container *ngIf=\"!loading && originalIoInsightInstances.length\">\n   <div class=\"cards-view\" *ngIf=\"!showMetricsView\">\n      <button id=\"create-new-instance\"\n              class=\"btn btn-link small-btn start-button-cards-view\"\n              (click)=\"newIoInsightClicked()\">\n         {{\"vsan.monitor.performance.io.insight.newInstnace\" | localized}}\n      </button>\n      <vsan-cross-column-filter (changes)=\"filterChange($event)\"\n                                [filters]=\"filters\"\n                                [filterIconShape]=\"'search'\"\n                                [filterText]=\"'vsan.monitor.performance.io.insight.filter.search.text' | localized\">\n         <vsan-cross-column-filter-group>\n            <vsan-cross-column-filter-item [field]=\"InstanceField.INSTANCE_NAME\"\n                                           [label]=\"'vsan.monitor.performance.io.insight.filter.instance.name' | localized\">\n            </vsan-cross-column-filter-item>\n            <vsan-cross-column-filter-item [field]=\"InstanceField.HOST_NAME\"\n                                           [label]=\"'vsan.monitor.performance.io.insight.filter.host.name' | localized\">\n            </vsan-cross-column-filter-item>\n            <vsan-cross-column-filter-item [field]=\"InstanceField.INSTANCE_STATE\"\n                                           [label]=\"'vsan.monitor.performance.io.insight.filter.instance.status' | localized\">\n               <vsan-list-filter #vsanCustomFilter>\n                  <vsan-list-filter-item *ngFor=\"let status of enumToArray(IoInsightRunningState)\"\n                                         [key]=\"status\"\n                                         [label]=\"status | ioInsightRunningStatus\">\n                  </vsan-list-filter-item>\n               </vsan-list-filter>\n            </vsan-cross-column-filter-item>\n         </vsan-cross-column-filter-group>\n      </vsan-cross-column-filter>\n      <div class=\"search-controls\">\n         <vsan-last-field-date-picker id=\"vsan-ioinsight-time-range-picker\"\n                                      [maxDays]=\"90\"\n                                      [(currentPickerState)]=\"timePickerState\"\n                                      (dateRangeChange)=\"onPerfTimeRangeChange($event)\">\n         </vsan-last-field-date-picker>\n         <clr-dropdown *ngIf=\"showSwitchPerspective\">\n            <button class=\"dropdown-toggle btn btn-sm btn-link\" clrDropdownToggle>\n               {{getSwitchPerspectiveButtonLabel()}}\n               <clr-icon shape=\"caret down\"></clr-icon>\n            </button>\n            <clr-dropdown-menu clrPosition=\"bottom-right\"\n                               [attr.aria-label]=\"'vsan.common.srMessage.dropdownMenu.optionsExpanded.label' | localized\">\n               <button clrDropdownItem (click)=\"togglePerspective(true)\">\n                  {{\"vsan.monitor.performance.io.insight.organizeByTime\" | localized}}</button>\n               <button clrDropdownItem (click)=\"togglePerspective(false)\">\n                  {{\"vsan.monitor.performance.io.insight.organizeByHost\" | localized}}</button>\n            </clr-dropdown-menu>\n         </clr-dropdown>\n      </div>\n      <vsan-illustrated-message *ngIf=\"!filteredIoInsightInstance.length && originalIoInsightInstances.length\"\n                                [type]=\"IllustratedMessageType.MISSING_DATA\"\n                                [message]=\"'vsan.monitor.performance.io.insight.instances.notFound' | localized\">\n      </vsan-illustrated-message>\n      <div class=\"clr-row ioinsight-row\" *ngIf=\"isInTimePerspective\">\n         <vsan-io-insight-instance *ngFor=\"let instance of filteredIoInsightInstance\"\n                                   class=\"clr-col-sm-6 clr-col-12\"\n                                   [ioInsightInstance]=\"instance\"\n                                   (viewMetrics)=\"onViewMetricsAction(instance)\"\n                                   (stopInstance)=\"onStopInstance(instance)\"\n                                   (deleteInstance)=\"onDeleteInstance(instance)\"\n                                   (renameInstance)=\"onRenameInstance(instance)\"\n                                   (rerunInstance)=\"onRerunInstance(instance)\">\n         </vsan-io-insight-instance>\n      </div>\n      <div class=\"cards-view-by-host\" *ngIf=\"!isInTimePerspective\">\n         <div class=\"host-cards\" *ngFor=\"let hostItem of getUniqueHosts()\">\n            <div class=\"host-label\">\n               <clr-icon [attr.shape]=\"hostItem.primaryIconId\"></clr-icon>\n               <h5>{{hostItem.name}}</h5>\n            </div>\n            <div class=\"clr-row ioinsight-row\">\n               <vsan-io-insight-instance *ngFor=\"let instance of getInstancesForHost(hostItem)\"\n                                         class=\"clr-col-sm-6 clr-col-12\"\n                                         [ioInsightInstance]=\"instance\"\n                                         (viewMetrics)=\"onViewMetricsAction(instance)\"\n                                         (stopInstance)=\"onStopInstance(instance)\"\n                                         (deleteInstance)=\"onDeleteInstance(instance)\"\n                                         (renameInstance)=\"onRenameInstance(instance)\"\n                                         (rerunInstance)=\"onRerunInstance(instance)\">\n               </vsan-io-insight-instance>\n            </div>\n         </div>\n      </div>\n   </div>\n   <vsan-io-insight-metrics *ngIf=\"showMetricsView\"\n                            [(ioInsightInstance)]=\"targetInstance\"\n                            [commonPerfData]=\"commonPerfData\"\n                            [currentView]=\"currentView\"\n                            [initialEntityId]=\"initialEntityId\"\n                            (back)=\"metricsViewOnBack($event)\">\n   </vsan-io-insight-metrics>\n</ng-container>\n","/* Copyright 2020 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {PipeTransform, Pipe} from \"@angular/core\";\nimport {Logger} from \"@util/logger\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {IoInsightRunningState} from \"@generated/io-insight-running-state\";\n\n@Pipe({\n   name: \"ioInsightRunningStatus\"\n})\nexport class IoinsightRunningStatusPipe implements PipeTransform {\n\n   transform(status: IoInsightRunningState): string {\n      switch (status) {\n         case IoInsightRunningState.RUNNING:\n            return VsanUiUtils.getString(\"vsan.io.insight.running.state.running\");\n         case IoInsightRunningState.COMPLETED:\n            return VsanUiUtils.getString(\"vsan.io.insight.running.state.completed\");\n          default:\n            Logger.warn(\"Unrecognized IOInsight running status:\", status);\n            return VsanUiUtils.getString(\"vsan.na.label\");\n      }\n   }\n}\n","<!-- Copyright 2020-2021 VMware, Inc. All rights reserved. -- VMware Confidential -->\n<div class=\"dropdown-container clr-row\">\n   <label id=\"share-search-box-label\"\n          for=\"file-share-search-box\"\n          class=\"clr-col-auto\">\n      {{'vsan.monitor.host.performance.fileShare.label' | localized}}\n   </label>\n   <div #fileShareDropdownElement\n        class=\"dropdown open clr-col-7\">\n      <div *ngIf=\"!loading else loading_spinner\">\n         <clr-icon *ngIf=\"!searchIconVisible\"\n                   class=\"file-share-icon\"\n                   [attr.shape]=\"getShareIcon(selectedShare)\"></clr-icon>\n         <vsan-search-input id=\"file-share-search-box\"\n                            [(filter)]=\"searchKeyword\"\n                            [itemIconVisible]=\"searchIconVisible\"\n                            dropdownIconVisible=\"true\"\n                            (filterFocus)=\"openDropdownMenu($event)\"\n                            [placeholderText]=\"'vsan.common.search' | localized\"\n                            [inputAriaLabelKey]=\"'vsan.monitor.host.performance.fileShare.searchInputLabel'\">\n         </vsan-search-input>\n      </div>\n      <ng-template #loading_spinner>\n         <span *ngIf=\"loading\"\n               class=\"spinner spinner-inline\"></span>\n      </ng-template>\n\n      <div class=\"dropdown-menu\"\n           *ngIf=\"isDropdownOpened\">\n         <h4 *ngIf=\"!matchedShares?.length\" class=\"dropdown-header\">\n            {{'vsan.common.crossColumnFilter.search.notFound' | localized}}\n         </h4>\n         <ng-container *ngFor=\"let share of matchedShares; let i = index\">\n            <button type=\"button\"\n                    class=\"dropdown-item\"\n                    (click)=\"selectShare(share)\">\n               <clr-icon [attr.shape]=\"getShareIcon(share)\"></clr-icon>\n               {{share.config.name}}\n            </button>\n         </ng-container>\n      </div>\n   </div>\n</div>\n","/* Copyright 2020-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {PromptComponent} from \"./prompt.component\";\nimport {Component, ElementRef} from \"@angular/core\";\nimport {FocusTrapFactory} from \"@angular/cdk/a11y\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\n\n@Component({\n   selector: \"vsan-light-info-prompt\",\n   templateUrl: \"prompt.html\",\n   styleUrls: [\"prompt.scss\"],\n})\nexport class LightInfoPrompt extends PromptComponent {\n\n   constructor(el: ElementRef, focusTrap: FocusTrapFactory) {\n      super(el, focusTrap);\n      this.confirmText = null;\n   }\n\n   confirm(): void {\n      VsanUiUtils.closeModalDialog();\n   }\n}","/* Copyright 2019-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component,\n   ElementRef,\n   EventEmitter,\n   HostListener,\n   Input,\n   OnInit,\n   Output,\n   ViewChild} from \"@angular/core\";\nimport {VsanFileServiceShare} from \"@generated/vsan-file-service-share\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {VsanFileShareUtils} from \"../../file-services/shares/file-share-util\";\nimport {PerformanceContext} from \"@navigation/context/performance-context\";\n\n@Component({\n   selector: \"vsan-file-share-selector\",\n   templateUrl: \"./file-share-selector.html\",\n   styleUrls: [\"file-share-selector.scss\"],\n})\nexport class FileShareSelectorComponent implements OnInit {\n   @Input()\n   shares: VsanFileServiceShare[];\n\n   @Output()\n   shareSelected: EventEmitter<VsanFileServiceShare> = new EventEmitter<VsanFileServiceShare>();\n\n   @ViewChild(\"fileShareDropdownElement\")\n   private fileShareDropdownElement: ElementRef;\n\n   matchedShares: VsanFileServiceShare[];\n   selectedShare: VsanFileServiceShare;\n   isDropdownOpened: boolean;\n   searchIconVisible: boolean = true;\n   loading: boolean;\n   private _searchKeyword: string;\n\n   set searchKeyword(val: string) {\n      if (!val) {\n         this.setFullDropdownItemsList();\n         this.selectedShare = null;\n         // emit null to clear the charts\n         this.shareSelected.emit(null);\n         return;\n      }\n      if (val === this._searchKeyword) {\n         return;\n      }\n      this._searchKeyword = val;\n      if (VsanUiUtils.isEmpty(this.shares)) {\n         return;\n      }\n      this.matchedShares = this.shares.filter(share => share.config.name.toLowerCase().includes(val.toLowerCase()));\n      this.isDropdownOpened = true;\n   }\n\n   get searchKeyword(): string {\n      return this._searchKeyword;\n   }\n\n   ngOnInit(): void {\n      // only set default share when the first time this view is loaded\n      if (VsanUiUtils.isEmpty(this.shares)) {\n         return;\n      }\n\n      // Preselect file share from context (e.g., coming from volume/file service details link)\n      this.preselectShare();\n   }\n\n   private preselectShare() {\n      const context: PerformanceContext = VsanUiUtils.getNavigationData();\n      let shareToSelect: VsanFileServiceShare;\n\n      if (context && context.entityUuid) {\n         shareToSelect = this.shares.find(\n               share => VsanFileShareUtils.getFileShareEntityUuid(share) === context.entityUuid);\n      } else if (context && context.selectedEntityName) {\n         shareToSelect = this.shares.find(\n               share => share.config.name === context.selectedEntityName);\n      }\n\n      if (shareToSelect) {\n         this.selectShare(shareToSelect);\n      }\n   }\n\n   selectShare = (share: VsanFileServiceShare) => {\n      this._searchKeyword = share.config.name;\n      this.isDropdownOpened = false;\n      this.searchIconVisible = false;\n      this.selectedShare = share;\n      this.shareSelected.emit(this.selectedShare);\n   };\n\n   getShareIcon = (share: VsanFileServiceShare) => {\n      return VsanFileShareUtils.getShareIcon(share);\n   };\n\n   // use this method to change the icon, and show the dropdown when the search input is focused\n   openDropdownMenu = (searchBoxFocused: boolean) => {\n      if (searchBoxFocused) {\n         this.searchIconVisible = true;\n         this.isDropdownOpened = true;\n         this.setFullDropdownItemsList();\n      }\n   };\n\n   /**\n    * Close the dropdown list when user clicks out of the menu\n    */\n   @HostListener(\"document:click\", [\"$event\"])\n   closeDropdownMenu(event: MouseEvent): void {\n      if (this.isDropdownOpened &&\n            !this.fileShareDropdownElement.nativeElement.contains(event.target)) {\n         this.isDropdownOpened = false;\n      }\n   }\n\n   private setFullDropdownItemsList(): void {\n      if (!VsanUiUtils.isEmpty(this.shares)) {\n         this.matchedShares = this.shares.map(share => share);\n      }\n   }\n}\n","/* Copyright 2020-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Injectable} from \"@angular/core\";\nimport {PerfChartDataConstants} from \"@component/chart/performance/perf-chart-util\";\nimport {InventoryNode} from \"@component/inventory/inventory-node\";\nimport {IQueryResult, ResultItem} from \"@service/client/core/query.data\";\nimport {DataServiceClient} from \"@service/client/dataservice/data-service.service\";\nimport {ManagedObject} from \"@service/managed-object\";\nimport {BasePerfEntity} from \"../model/base-perf-entity\";\n\n/**\n * Provides methods for loading performance related data.\n */\n@Injectable()\nexport class PerfVmDataService {\n\n   constructor(private dataService: DataServiceClient) {\n   }\n\n   async loadBasePerfEntities(vms: InventoryNode[], configSpec: any): Promise<BasePerfEntity[]> {\n      if (!vms || vms.length === 0) {\n         return [];\n      }\n\n      const vmMap: Map<string, InventoryNode> = new Map<string, InventoryNode>();\n      vms.forEach((vm: InventoryNode) => vmMap.set(ManagedObject.uid(vm.data.nodeRef), vm));\n\n      const queryResult: IQueryResult = await this.dataService\n            .getPropertyForObjects(PerfChartDataConstants.VM_CONFIG_INSTANCE_UUID_PROPERTY, vms.map(vm => vm.data.nodeRef));\n      return queryResult.resultItems.map((ri: ResultItem) => {\n         return this.createBasePerfEntity(ri.resourceObject,\n               ri.get(PerfChartDataConstants.VM_CONFIG_INSTANCE_UUID_PROPERTY),\n               vmMap,\n               configSpec);\n      });\n   }\n\n   private createBasePerfEntity(vmRef: ManagedObject, vmUuid: string,\n         vmMap: Map<string, InventoryNode>, configSpec: any): BasePerfEntity {\n      const vmId: string = ManagedObject.uid(vmRef);\n      const selectedPerfEntity: BasePerfEntity = new BasePerfEntity();\n      selectedPerfEntity.entityId = PerfChartDataConstants.VM_CONSUMPTION_ENTITY;\n      selectedPerfEntity.entityUuid = vmUuid;\n\n      const vmNode: InventoryNode = vmMap.get(vmId);\n      selectedPerfEntity.specifiedObjectRef = vmNode.data.nodeRef;\n      selectedPerfEntity.entityName = vmNode.data.name;\n      selectedPerfEntity.icon = vmNode.data.iconShape;\n      selectedPerfEntity.configSpec = configSpec;\n      return selectedPerfEntity;\n   }\n}\n","/* Copyright 2019-2022 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, Input, OnChanges} from \"@angular/core\";\nimport {RefreshHandler} from \"@service/global-refresh.service\";\nimport {ModalBuilder} from \"@util/modal-builder\";\nimport {IoInsightService} from \"@generated/io-insight-service\";\nimport {ManagedObject, ManagedObjectUtils} from \"@service/managed-object\";\nimport {IoInsightInstance} from \"@generated/io-insight-instance\";\nimport {TaskMonitorService} from \"@service/task-monitor-service\";\nimport {InstanceActionContextData} from \"../io-insight/action/instance-action-context.data\";\nimport {PerfMonitorCommonPropsData} from \"@generated/perf-monitor-common-props-data\";\nimport {PerfMonitorViewType} from \"../model/perf-monitor-view-type.model\";\nimport {IoInsightRunningState} from \"@generated/io-insight-running-state\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {InventoryNode} from \"@generated/inventory-node\";\nimport {FilterItem} from \"@component/cross-column-filter/filter-item\";\nimport {DateRangeData} from \"@component/datetime-picker/date-range-picker.component\";\nimport {DurationPickerState} from \"@component/datetime-picker/time-last-field-picker/last-field-date-picker.component\";\nimport {IllustratedMessageType} from \"@component/illustrated-message/illustrated-message.component\";\nimport {NavigationService} from \"@navigation/navigation.service\";\nimport {LastFieldDatePickerUtil} from \"@component/datetime-picker/time-last-field-picker/last-field-date-picker-util\";\nimport {ReferenceWatcher} from \"@util/reference-watcher\";\nimport {DocumentationId} from \"@navigation/model/documentation-id\";\n\n@Component({\n   selector: \"vsan-io-insight-data-perf\",\n   templateUrl: \"io-insight-data-perf.html\",\n   styleUrls: [ \"io-insight-data-perf.scss\"],\n   providers: [ReferenceWatcher],\n})\nexport class VsanIoInsightPerfComponent implements OnChanges {\n   documentationUrl: string;\n   private static readonly REFRESH_INTERVAL_MS: number = 10000;\n\n   readonly InstanceField: typeof InstanceField = InstanceField;\n   IoInsightRunningState: typeof IoInsightRunningState = IoInsightRunningState;\n   enumToArray: (data: any) => any[] = VsanUiUtils.enumToArray;\n\n   // Filters\n   filters: FilterItem[];\n\n   errorMsg: string;\n   loading: boolean = false;\n   showMetricsView: boolean = false;\n   targetInstance: IoInsightInstance = null;\n\n   originalIoInsightInstances: IoInsightInstance[] = [];\n   filteredIoInsightInstance: IoInsightInstance[] = [];\n\n   isInTimePerspective: boolean = true;\n\n   timePickerRange: DateRangeData;\n   timePickerState: DurationPickerState = DurationPickerState.ALL;\n\n   IllustratedMessageType: typeof IllustratedMessageType = IllustratedMessageType;\n\n   @Input()\n   commonPerfData: PerfMonitorCommonPropsData;\n\n   @Input()\n   currentView: PerfMonitorViewType;\n\n   @Input()\n   initialEntityId: string;\n\n   constructor(private ioInsightService: IoInsightService,\n               private taskSvc: TaskMonitorService,\n               private navigationService: NavigationService,\n               private refWatcher: ReferenceWatcher) {\n      this.refWatcher.watchGlobalRefreshSubscription(VsanIoInsightPerfComponent.prototype.constructor.name);\n      this.documentationUrl = this.navigationService.getVmwareHelpUrl(NavigationService.MONITORING_URL,\n            DocumentationId.IO_INSIGHT_DOCUMENTATION);\n   }\n\n   get showSwitchPerspective(): boolean {\n      return ManagedObject.contextObject.type === ManagedObjectUtils.CLUSTER;\n   }\n\n   ngOnChanges(): void {\n      this.fetch();\n   }\n\n   @RefreshHandler\n   fetch(): void {\n      this.errorMsg = null;\n      this.getAllIOInsightInstances(true);\n   }\n\n   private getAllIOInsightInstances = async (showLoading: boolean = false) => {\n      // don't refresh the view if the metrics view is shown. It has own refresh logic.\n      if (this.showMetricsView) {\n         return ;\n      }\n\n      this.loading = showLoading;\n      try {\n         this.originalIoInsightInstances =\n               await this.ioInsightService.getIoInsightInstances(ManagedObject.contextObject);\n         this.originalIoInsightInstances.sort((a: IoInsightInstance, b: IoInsightInstance): number =>\n               a.timeRange?.startTime < b.timeRange.startTime ? 1 : -1);\n         this.filterInstances();\n         this.refreshOnRunningInstances();\n       } catch (error) {\n         this.handleError(error);\n      } finally {\n         this.loading = false;\n      }\n   };\n\n   handleError = (errMsg: string) => {\n      this.errorMsg = errMsg;\n   };\n\n   filterChange(filters: FilterItem[]): void {\n      this.filters = filters;\n      this.filterInstances();\n   }\n\n   private filterInstances(): void {\n      let filteredInstancesByProperties: IoInsightInstance[];\n      // filter by instance's name, host and status\n      if (!this.filters) {\n         filteredInstancesByProperties = this.originalIoInsightInstances;\n      } else {\n         filteredInstancesByProperties = this.originalIoInsightInstances.filter(instance =>\n               !this.filters.some(filter => !this.passFilter(filter, instance)));\n      }\n      // filter by time\n      this.filteredIoInsightInstance = LastFieldDatePickerUtil.filterItemsByTimeRange(this.timePickerRange,\n            this.timePickerState,\n            filteredInstancesByProperties);\n   }\n\n   passFilter(filter: FilterItem, instance: IoInsightInstance): boolean {\n      switch (filter.field) {\n         case InstanceField.INSTANCE_NAME:\n            return instance.name.includes(filter.value);\n         case InstanceField.HOST_NAME:\n            return instance.hostIoInsightInfos.some(host => host.host.name.includes(filter.value));\n         case InstanceField.INSTANCE_STATE:\n            return instance.state === filter.value;\n      }\n   }\n\n   newIoInsightClicked = () => {\n      new ModalBuilder(\"ioInsightWizard/newIoInsightWizard\")\n            .setSize(900, 530)\n            .open()\n            .then(this.refreshWhenTaskDone);\n   };\n\n   togglePerspective = (showInTimePerspetive: boolean) => {\n      this.isInTimePerspective = showInTimePerspetive;\n   };\n\n   getUniqueHosts(): InventoryNode[] {\n      const hostItems: Map<string, InventoryNode> = new Map();\n      this.filteredIoInsightInstance.forEach(instance => instance.hostIoInsightInfos.forEach(hostInfo => {\n         if (!hostItems.has(hostInfo.host.moRef.value)) {\n            hostItems.set(hostInfo.host.moRef.value, hostInfo.host);\n         }\n      }));\n      return Array.from(hostItems.values());\n   }\n\n   getInstancesForHost(hostItem: InventoryNode): IoInsightInstance[] {\n      return this.filteredIoInsightInstance.filter(\n            instance => instance.hostIoInsightInfos.find(host => host.host.moRef.value === hostItem.moRef.value));\n   }\n\n   getSwitchPerspectiveButtonLabel(): string {\n      return this.isInTimePerspective ?\n            VsanUiUtils.getString(\"vsan.monitor.performance.io.insight.organizeByTime\") :\n            VsanUiUtils.getString(\"vsan.monitor.performance.io.insight.organizeByHost\");\n   }\n\n   onViewMetricsAction(instance: IoInsightInstance): void {\n      this.showMetricsView = true;\n      this.targetInstance = instance;\n   }\n\n   metricsViewOnBack(updatedInstance: IoInsightInstance): void {\n      this.showMetricsView = false;\n      const updateIndex: number =\n            this.originalIoInsightInstances.findIndex(instance => instance.name === updatedInstance.name);\n      this.originalIoInsightInstances[updateIndex] = updatedInstance;\n      this.filteredIoInsightInstance[updateIndex] = updatedInstance;\n      this.targetInstance = null;\n      this.refreshOnRunningInstances();\n   }\n\n   refreshOnRunningInstances(): void {\n      this.refWatcher.clearTimeouts();\n      if (this.originalIoInsightInstances.some(instance => instance.state === IoInsightRunningState.RUNNING) &&\n            !this.showMetricsView) {\n         this.refWatcher.setTimeout(() => this.getAllIOInsightInstances(), VsanIoInsightPerfComponent.REFRESH_INTERVAL_MS);\n      }\n   }\n\n   onStopInstance(instance: IoInsightInstance): void {\n      const context: InstanceActionContextData = {\n         instance: instance,\n         clusterRef: this.commonPerfData.clusterRef,\n         deleteOperation: false,\n      };\n      new ModalBuilder(\"ioInsight/deleteInstance\")\n            .setSize(600, 250)\n            .open(context)\n            .then(this.refreshWhenTaskDone);\n   }\n\n   onDeleteInstance(instance: IoInsightInstance): void {\n      const context: InstanceActionContextData = {\n         instance: instance,\n         clusterRef: this.commonPerfData.clusterRef,\n         deleteOperation: true,\n      };\n      new ModalBuilder(\"ioInsight/deleteInstance\")\n            .setSize(600, 250)\n            .open(context)\n            .then(this.refreshView);\n   }\n\n   onRenameInstance(instance: IoInsightInstance): void {\n      const context: InstanceActionContextData = {\n         instance: instance,\n         clusterRef: this.commonPerfData.clusterRef,\n         deleteOperation: false,\n      };\n      new ModalBuilder(\"ioInsight/renameInstance\")\n            .setSize(600, 250)\n            .open(context)\n            .then(this.refreshView);\n   }\n\n   onRerunInstance(instance: IoInsightInstance): void {\n      const hasOtherRunningInstance: boolean = this.isAnotherInstanceRunningOnSameHosts(instance);\n      if (hasOtherRunningInstance) {\n         new ModalBuilder(\"ioInsight/rerunError\")\n               .setSize(500, 200)\n               .open();\n         return;\n      }\n\n      const context: InstanceActionContextData = {\n         instance: instance,\n         clusterRef: this.commonPerfData.clusterRef,\n         deleteOperation: false,\n      };\n      new ModalBuilder(\"ioInsight/rerunInstance\")\n            .setSize(600, 300)\n            .open(context)\n            .then(this.refreshWhenTaskDone);\n   }\n\n   private isAnotherInstanceRunningOnSameHosts(instance: IoInsightInstance): boolean {\n      const hostRefs: ManagedObject[] = this.getHostRefsFromInstance(instance);\n      return this.originalIoInsightInstances\n             .filter(runningInstance => runningInstance.state === IoInsightRunningState.RUNNING)\n             .some(runningInstance =>\n                   ManagedObjectUtils.checkForDuplicateMoRefs(\n                         this.getHostRefsFromInstance(runningInstance), hostRefs));\n   }\n\n   private getHostRefsFromInstance(instance: IoInsightInstance): ManagedObject[] {\n      return instance.hostIoInsightInfos.map(hostIoInsightInfo => hostIoInsightInfo.host.moRef);\n   }\n\n   private refreshWhenTaskDone = async (task: ManagedObject) => {\n      if (!task) {\n         return;\n      }\n\n      await this.taskSvc.getAwaitResult(task);\n      this.fetch();\n   };\n\n   private refreshView = async () => {\n      this.getAllIOInsightInstances(true);\n   };\n\n   onPerfTimeRangeChange(timeRange: DateRangeData): void {\n      this.timePickerRange = timeRange;\n      this.filterInstances();\n   }\n}\n\nexport enum InstanceField {\n   INSTANCE_NAME = \"name\",\n   HOST_NAME = \"hostName\",\n   INSTANCE_STATE = \"state\",\n}","/* Copyright 2020-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {InventoryNode} from \"@generated/inventory-node\";\nimport {PerfTopContributorsEntity} from \"@generated/perf-top-contributors-entity\";\nimport {PerfGraphMetricsData} from \"@generated/perf-graph-metrics-data\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {DiskGroupType} from \"@generated/disk-group-type\";\n\nexport class TopContributorEntity {\n\n   private constructor(\n         public entity: InventoryNode,\n         public parent: InventoryNode,\n         public readMetricValue: number,\n         public readMetricKey: string,\n         public readMetricLabel: string,\n         public writeMetricValue: number,\n         public writeMetricKey: string,\n         public writeMetricLabel: string,\n         public entityRefId: string,\n         public isVmOnVsanDatastore: boolean,\n         public diskGroupType: DiskGroupType) {\n   }\n\n\n   static fromVmodl(vsanTopContributor: PerfTopContributorsEntity, readMetricLabel: string, writeMetricLabel: string):\n         TopContributorEntity {\n      if (!vsanTopContributor.entity || VsanUiUtils.isEmpty(vsanTopContributor.metricsSeries)) {\n         return null;\n      }\n      const readMetric: PerfGraphMetricsData =\n            vsanTopContributor.metricsSeries.find(series => series.key.toLowerCase().includes(\"read\"));\n      const writeMetric: PerfGraphMetricsData =\n            vsanTopContributor.metricsSeries.find(series => series.key.toLowerCase().includes(\"write\"));\n      const entity: TopContributorEntity = new TopContributorEntity(\n            vsanTopContributor.entity,\n            vsanTopContributor.parent,\n            readMetric.values[0],\n            readMetric.key,\n            readMetricLabel,\n            writeMetric.values[0],\n            writeMetric.key,\n            writeMetricLabel,\n            vsanTopContributor.entityRefId,\n            vsanTopContributor.isVmOnVsanDatastore,\n            vsanTopContributor.diskGroupType,\n      );\n      return entity;\n   }\n}","/* Copyright 2020 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {BasePerfEntity} from \"../model/base-perf-entity\";\n\nexport class ConsolidatedEntitiesData {\n   entities: BasePerfEntity[] = [];\n\n   // TODO [kaleksandrov] Switch to Map once the PerfOrchestratorService is removed\n   entityIdentifierToColor: { [key: string]: string } = {};\n   entityIdentifierToVisibility: { [key: string]: boolean } = {};\n}\n","<!-- Copyright 2019-2020 VMware, Inc. All rights reserved. -- VMware Confidential -->\n<vsan-validation id=\"validation-message\"\n                 *ngIf=\"!loading && errorMsg\"\n                 [alert]=\"errorMsg\"\n                 [allowReload]=\"true\"\n                 (onClosed)=\"errorMsg = null\">\n</vsan-validation>\n<clr-button-group class=\"btn-link\">\n   <clr-button class=\"btn btn-sm\"\n               (click)=\"onBackButtonClicked()\">\n      {{\"vsan.io.insight.metrics.view.back\" | localized}}\n   </clr-button>\n</clr-button-group>\n<div>\n   <div class=\"instance-name\">{{ioInsightInstance.name}}</div>\n   <div class=\"instance-info-container\">\n   <span>\n      {{\"vsan.io.insight.metrics.view.duration\" | localized: ioInsightInstance.timeRange.duration:\n         formatDate(this.ioInsightInstance.timeRange.startTime):\n         formatDate(this.ioInsightInstance.timeRange.endTime)}}\n   </span>\n      <div *ngIf=\"ioInsightInstance.state == IoInsightRunningState.RUNNING\"\n           class=\"progress-block\">\n         <div class=\"progress\">\n            <progress [value]=\"getProgressValue()\"\n                      [max]=\"ioInsightInstance.timeRange.durationInMinutes\">\n            </progress>\n         </div>\n         <span>\n            {{\"vsan.io.insight.metrics.view.remaining\" | localized:\n               ioInsightInstance.timeRange.remainingTimeLocalizedTimeUnit}}\n         </span>\n      </div>\n      <button *ngIf=\"ioInsightInstance.state == IoInsightRunningState.RUNNING\"\n              class=\"btn btn-sm btn-danger-outline\"\n              (click)=\"onStopInstance()\">\n         {{\"vsan.io.insight.metrics.view.stop\" | localized}}\n      </button>\n   </div>\n</div>\n<vsan-validation *ngIf=\"ioInsightInstance.state == IoInsightRunningState.RUNNING\"\n                 [allowClose]=\"false\"\n                 [alert]=\"infoLabel\"\n                 alertType=\"info\">\n</vsan-validation>\n<vsan-multi-entities-data-perf\n      id=\"io-insight-metrics\"\n      [commonPerfData]=\"commonPerfData\"\n      [currentTimeRange]=\"currentTimeRange\"\n      [currentView]=\"currentView\"\n      [initialEntityId]=\"initialEntityId\"\n      [instance]=\"ioInsightInstance\"\n      [(showLoading)]=\"showLoading\"\n      (allChartsLoaded)=\"onAllChartsLoaded()\">\n</vsan-multi-entities-data-perf>\n\n","/* Copyright 2017-2022 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {\n   ChangeDetectorRef,\n   Component,\n   EventEmitter,\n   Input,\n   OnChanges,\n   Output,\n   SimpleChanges,\n} from \"@angular/core\";\nimport {RefreshHandler} from \"@service/global-refresh.service\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {Logger} from \"@util/logger\";\nimport {PerfEntities} from \"../model/perf-entities\";\nimport {BasePerfEntity} from \"../model/base-perf-entity\";\nimport {MetricColObj, MetricKeyType} from \"../model/metric-col-obj\";\nimport {PerfMultiEntitesDataQueryService} from \"../util/perf-multi-entities-data-query.service\";\nimport {PerfMonitorViewType} from \"../model/perf-monitor-view-type.model\";\nimport {BaseEntityDataPerfComponent} from \"./base-entity-data-perf.component\";\nimport {VmDisksPerfEntity} from \"../model/vm-disks-perf-entity\";\nimport {IoInsightInstance} from \"@generated/io-insight-instance\";\nimport {PerfQuerySpec} from \"@generated/perf-query-spec\";\nimport {PerfEntityStateData} from \"@generated/perf-entity-state-data\";\nimport {VsanPerfPropertyProvider} from \"@generated/vsan-perf-property-provider\";\nimport {ReferenceWatcher} from \"@util/reference-watcher\";\nimport {PerfExportData} from \"@component/chart/performance/perf-export-data\";\nimport {PerfGraphThreshold} from \"@generated/perf-graph-threshold\";\nimport {NetworkDiagnosticsService} from \"@generated/network-diagnostics-service\";\nimport {ManagedObject} from \"@service/managed-object\";\nimport {PerformanceUtils} from \"../util/perf-utils\";\nimport {IoInsightRunningState} from \"@generated/io-insight-running-state\";\nimport {DomUtil} from \"@util/dom-util\";\nimport {NestedPerfEntity} from \"../model/nested-perf-entity\";\nimport {PerfChartDataConstants} from \"@component/chart/performance/perf-chart-util\";\n\n@Component({\n   selector: \"vsan-multi-entities-data-perf\",\n   templateUrl: \"multi-entities-data-perf.html\",\n   styleUrls: [\"multi-entities-data-perf.scss\"],\n   providers: [ReferenceWatcher],\n})\n\nexport class MultiEntitiesDataPerfComponent extends BaseEntityDataPerfComponent\n      implements OnChanges {\n   /**\n    * Whether to show loading spinner. For auto refresh we don't want to show the spinner.\n    */\n   @Input()\n   showLoading: boolean = true;\n\n   @Output()\n   showLoadingChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n   @Input()\n   initialEntityId: string;\n\n   @Input()\n   selectedEntityName: string;\n\n   @Input()\n   currentView: PerfMonitorViewType;\n\n   selectedSubEntityIndexes: Set<number> = new Set<number>();\n\n   @Input()\n   instance: IoInsightInstance;\n\n   @Output()\n   allChartsLoaded: EventEmitter<PerfExportData[]> = new EventEmitter<PerfExportData[]>();\n\n   entities: PerfEntities;\n   fetchingEntities: boolean = true;\n   chartsEntities: BasePerfEntity[];\n   showMultipleSubEntities: boolean;\n\n   entityToMetricsMap: Map<BasePerfEntity, PerfEntityStateData[]> = new Map<BasePerfEntity, PerfEntityStateData[]>();\n   exportData: PerfExportData[] = [];\n   customizableThresholds: PerfGraphThreshold[];\n\n   get noEntitiesMessage(): string {\n      switch (this.currentView) {\n         case PerfMonitorViewType.HOST_DISK:\n            return VsanUiUtils.getString(\"vsan.monitor.host.performance.no.disks\");\n         case PerfMonitorViewType.CLUSTER_IO_INSIGHT:\n         case PerfMonitorViewType.HOST_IO_INSIGHT:\n            return VsanUiUtils.getString(\"vsan.io.insight.metrics.view.deletedVMs.warning\");\n         case PerfMonitorViewType.CLUSTER_ISCSI:\n            return VsanUiUtils.getString(\"vsan.monitor.cluster.performance.iscsi.noLUNsCreated\");\n            // add appropriate message for the other view when needed\n      }\n   }\n\n   get isIoInsightRealtime(): boolean {\n      return this.instance && this.instance.state === IoInsightRunningState.RUNNING;\n   }\n\n   constructor(private queryService: PerfMultiEntitesDataQueryService,\n         private perfPropProvider: VsanPerfPropertyProvider,\n         private refWatcher: ReferenceWatcher,\n         private changeDetector: ChangeDetectorRef,\n         private networkDiagnostics: NetworkDiagnosticsService) {\n      super();\n      this.refWatcher.watchGlobalRefreshSubscription(MultiEntitiesDataPerfComponent.prototype.constructor.name);\n      // expand the first sub entity by default\n      this.initSelectedSubEntities();\n   }\n\n   ngOnChanges(changes: SimpleChanges): void {\n      // clear the chart when the first time user changes the time rage state\n      if (changes.isRealtime && this.chartsView) {\n         this.chartsView.chartMetrics = null;\n      }\n      // do nothing if current entity changes, the data gets refreshed by onEntitySelect method\n      if (this.currentView === PerfMonitorViewType.CLUSTER_FILE_SERVICE && changes.currentEntity ||\n            (changes.showLoading && !changes.instance)) {\n         return;\n      }\n      // In case the entityType changed, we need to update the query\n      if (changes.currentView && changes.currentView.currentValue) {\n         this.fetch();\n      } else {\n         this.fetchChartsData();\n      }\n   }\n\n   @RefreshHandler\n   fetch(): void {\n      this.currentEntity = null;\n      this.showLoading = true;\n      this.showLoadingChange.emit(true);\n      this.entities = null;\n      this.showMultipleSubEntities = this.currentView === PerfMonitorViewType.HOST_IO_INSIGHT ||\n            this.currentView === PerfMonitorViewType.CLUSTER_IO_INSIGHT;\n      if (this.currentView === PerfMonitorViewType.CLUSTER_FILE_SERVICE) {\n         // in file share view, the shares are loaded from other component\n         return;\n      }\n      this.fetchingEntities = true;\n      this.queryService.queryEntitiesData(\n            this.currentView, this.instance,\n            this.commonPerfData.isIoInsightSupported && this.commonPerfData.hasIoInsightViewPrivilege,\n            this.commonPerfData.isRdtChecksumSupported,\n            this.commonPerfData.isVsanMaxEnabled)\n            .then(this.handleResponse, this.handleError);\n   }\n\n   private handleResponse = (entities: BasePerfEntity[]): void => {\n      this.fetchingEntities = false;\n      this.entities = new PerfEntities();\n      // cluster iscsi view is a treegrid, and we don't use the original datagrid\n      // no need to define cols for treegrid\n      this.entities.col = this.getMetricsColumnByView();\n      this.entities.objs = entities;\n      this.extraDesc = this.getExtraDesc();\n   };\n\n   private getExtraDesc = (): string => {\n      switch (this.currentView) {\n         case PerfMonitorViewType.HOST_PHYSICAL_ADAPTER:\n         case PerfMonitorViewType.HOST_VIRTUAL_ADAPTER:\n            return VsanUiUtils.getString(\"vsan.perf.chart.host.network.description.extra\");\n         default:\n            return null;\n      }\n   };\n\n   private getMetricsColumnByView = (): MetricColObj => {\n      switch (this.currentView) {\n         case PerfMonitorViewType.HOST_DISK:\n            return new MetricColObj(\n                  VsanUiUtils.getString(this.commonPerfData.isVsanMaxEnabled\n                        ? \"vsan.monitor.host.performance.singleTier.disk.col.title\"\n                        : \"vsan.monitor.host.performance.diskgroup.col.title\"),\n                  MetricKeyType.ENTITY_NAME);\n         case PerfMonitorViewType.HOST_PHYSICAL_ADAPTER:\n            return new MetricColObj(\n                  VsanUiUtils.getString(\"vsan.monitor.host.performance.network.physicalAdapter.col.title\"),\n                  MetricKeyType.ENTITY_NAME);\n         case PerfMonitorViewType.HOST_VIRTUAL_ADAPTER:\n            return new MetricColObj(\n                  VsanUiUtils.getString(\"vsan.monitor.host.performance.network.adapter.col.title\"),\n                  MetricKeyType.ENTITY_NAME);\n         case PerfMonitorViewType.VM_VIRTUAL_DISK:\n            return new MetricColObj(\n                  VsanUiUtils.getString(\"vsan.monitor.vm.performance.virtualdisk.label\"),\n                  MetricKeyType.ENTITY_NAME);\n         case PerfMonitorViewType.CLUSTER_ISCSI:\n            return new MetricColObj(\n                  VsanUiUtils.getString(\"vsan.monitor.host.performance.iscsi.target.col.title\"),\n                  MetricKeyType.ENTITY_NAME);\n         case PerfMonitorViewType.CLUSTER_IO_INSIGHT:\n         case PerfMonitorViewType.HOST_IO_INSIGHT:\n            return new MetricColObj(\n                  VsanUiUtils.getString(\"vsan.monitor.cluster.performance.io.insight.label\"),\n                  MetricKeyType.ENTITY_NAME);\n         default:\n            throw new Error(\"Unsupported multi-entities view detect: \" + this.currentView);\n      }\n   };\n\n   handleError = (err: any): void => {\n      Logger.error(\"failed to query data: \", err);\n      this.fetchingEntities = false;\n   };\n\n   async onEntitySelect(entity: BasePerfEntity): Promise<void> {\n      if (!entity || !this.commonPerfData?.entityTypes) {\n         return;\n      }\n      PerformanceUtils.updatePerfEntityType(this.currentEntity, this.commonPerfData);\n      if (this.currentView === PerfMonitorViewType.HOST_PHYSICAL_ADAPTER || this.requestThresholdsForRdtChecksum()) {\n         const entityTypeId: string = this.currentEntity.entityId === PerfChartDataConstants.HOST_NETWORK_ENTITY\n               ? (this.currentEntity as NestedPerfEntity).combinedEntity.configSpec.name\n               : this.currentEntity.configSpec.name;\n         this.customizableThresholds = await this.networkDiagnostics.getPerfGraphThresholds(ManagedObject.contextObject,\n               entityTypeId);\n      }\n      this.refWatcher.setTimeout(() => {\n         this.initialEntityId = entity.entityUuid;\n         this.showLoading = true;\n         this.showLoadingChange.emit(true);\n         this.fetchChartsData();\n      }, 0);\n   }\n\n   private requestThresholdsForRdtChecksum(): boolean {\n      return this.currentView === PerfMonitorViewType.HOST_VIRTUAL_ADAPTER\n            && this.currentEntity.entityId === PerfChartDataConstants.HOST_NETWORK_ENTITY\n            && this.commonPerfData.isRdtChecksumSupported;\n   }\n\n   initSelectedSubEntities(): void {\n      this.selectedSubEntityIndexes.clear();\n      // expand the first sub entity by default\n      this.selectedSubEntityIndexes.add(0);\n   }\n\n   onAllChartsLoaded($event: any): void {\n      this.exportData = $event;\n      this.changeDetector.detectChanges();\n   }\n\n   onSubEntitySelectionChanged(selected: boolean, index: number): void {\n      if (selected) {\n         this.selectedSubEntityIndexes.add(index);\n      } else {\n         this.selectedSubEntityIndexes.delete(index);\n      }\n   }\n\n   fetchChartsData(): Promise<void> {\n      if (this.currentEntity && this.commonPerfData.entityTypes && this.commonPerfData.clusterRef\n            && this.currentTimeRange) {\n         if (this.currentEntity instanceof VmDisksPerfEntity) {\n            return this.fetchMultipleSubEntitiesChartsData();\n         } else {\n            return this.fetchSingleEntityChartsData();\n         }\n      }\n   }\n\n   async fetchSingleEntityChartsData(): Promise<void> {\n      await this.waitForChartsContainer();\n\n      this.chartsView.entity = null;\n      if (!this.isRealtime) {\n         this.chartsView.chartMetrics = null;\n      }\n      this.chartsView.entity = this.toggleHighResolutionSpecName(this.currentEntity);\n      this.chartsView.queryChartsDataByTimeRange(this.currentTimeRange,\n            this.commonPerfData.clusterRef,\n            !this.isRealtime);\n   }\n\n   waitForChartsContainer(): Promise<void> {\n      if (DomUtil.domElementExists(\"singleSubEntityChartsContainer\")) {\n         return Promise.resolve();\n      }\n      return new Promise((resolve) => {\n         this.refWatcher.setTimeout(() => {\n            resolve(this.waitForChartsContainer());\n         }, 1000);\n      });\n   }\n\n   fetchMultipleSubEntitiesChartsData(): Promise<void> {\n      this.fetchingEntities = this.showLoading;\n      this.chartsEntities = [];\n      this.updateChartsEntities();\n\n      return this.getEntityPerfState();\n   }\n\n   private updateChartsEntities(): void {\n      const vmDisksPerfEntity: VmDisksPerfEntity = this.currentEntity as VmDisksPerfEntity;\n      vmDisksPerfEntity.nestedPerfEntity.forEach(diskPerfEntity => {\n         diskPerfEntity.configSpec = this.commonPerfData.entityTypes[diskPerfEntity.entityId];\n         this.chartsEntities.push(diskPerfEntity);\n      });\n   }\n\n   private getEntityPerfState(): Promise<void> {\n      if (this.chartsEntities.length === 0) {\n         this.fetchingEntities = false;\n         return;\n      }\n\n      const querySpecs: PerfQuerySpec[] = this.chartsEntities.map(entity => this.createQuerySpec(entity));\n      return this.perfPropProvider.getEntityPerfState(this.commonPerfData.clusterRef, querySpecs)\n            .then((data: PerfEntityStateData[]): void => {\n               this.updateMetrics(data);\n               this.fetchingEntities = false;\n            }).catch(this.handleError);\n   }\n\n   private createQuerySpec(entity: BasePerfEntity): PerfQuerySpec {\n      return PerfQuerySpec.Factory.create(\n            entity.entityType,\n            entity.entityUuid,\n            null, /* group:string, not used*/\n            this.currentTimeRange.from,\n            this.currentTimeRange.to,\n            null, /* interval:number , not used*/\n            null /* labels:string[], not used*/);\n   }\n\n   private updateMetrics(data: PerfEntityStateData[]): void {\n      if (VsanUiUtils.isEmpty(data)) {\n         this.allChartsLoaded.emit(null);\n         return;\n      }\n      this.entityToMetricsMap.clear();\n      data.forEach(value => {\n         const perfEntity: BasePerfEntity = this.chartsEntities\n               .find(entity => (entity.entityType + \":\" + entity.entityUuid) === value.entityRefId);\n         this.entityToMetricsMap.set(perfEntity, Array(value));\n      });\n   }\n\n   get showSingleEntityCharts(): boolean {\n      if (this.currentView === PerfMonitorViewType.CLUSTER_FILE_SERVICE) {\n         // in file share view, the shares are loaded from other component\n         return !this.showMultipleSubEntities;\n      }\n\n      return !this.showMultipleSubEntities && this.hasEntities && !this.isLoading;\n   }\n\n   get showMultipleEntitiesCharts(): boolean {\n      return this.showMultipleSubEntities && this.entityToMetricsMap.size > 0 && this.hasEntities && !this.isLoading;\n   }\n\n   get hasEntities(): boolean {\n      return this.entities && !VsanUiUtils.isEmpty(this.entities.objs);\n   }\n\n   get hasCurrentEntity(): boolean {\n      return !!this.currentEntity && !this.isLoading;\n   }\n\n   get isLoading(): boolean {\n      if (this.entities && this.entities.objs && this.entities.objs.length === 0) {\n         // Entities are loaded but empty.\n         return false;\n      }\n      return this.fetchingEntities && this.showLoading;\n   }\n}","<!--Copyright 2017-2021 VMware, Inc. All rights reserved. -- VMware Confidential-->\n<div class=\"dropdown-container\">\n   <label class=\"entities-label\"\n          for=\"parent-entity-selection\">\n      {{entities.col.label}}\n   </label>\n   <div #parentDropdownElement\n        class=\"dropdown open\">\n      <vsan-search-input id=\"parent-entity-selection\"\n                         [(filter)]=\"selectedParentEntity.entityName\"\n                         [itemIconVisible]=\"true\"\n                         [itemIcon]=\"selectedParentEntity.icon\"\n                         dropdownIconVisible=\"true\"\n                         (filterFocus)=\"openDropdownMenu($event, true)\"\n                         [placeholderText]=\"'vsan.common.search' | localized\">\n      </vsan-search-input>\n\n      <div class=\"dropdown-menu\"\n           *ngIf=\"isParentDropdownOpened\">\n         <ng-container *ngFor=\"let perfEntity of entities.objs; let i = index\">\n            <button type=\"button\"\n                    class=\"dropdown-item\"\n                    (click)=\"closeParentDropDownMenu(i)\">\n               <clr-icon *ngIf=\"perfEntity.icon\"\n                         [attr.shape]=\"perfEntity.icon\"></clr-icon>\n               {{perfEntity.entityName}}\n            </button>\n         </ng-container>\n      </div>\n   </div>\n</div>\n\n<div *ngIf=\"hasChildren\"\n     class=\"dropdown-container\">\n   <div #childDropdownElement\n        class=\"dropdown open\">\n      <vsan-search-input id=\"sub-entity-selection\"\n                         [filter]=\"selectedChildEntityName\"\n                         [itemIconVisible]=\"false\"\n                         dropdownIconVisible=\"true\"\n                         (filterFocus)=\"openDropdownMenu($event, false)\"\n                         [placeholderText]=\"'vsan.common.search' | localized\">\n      </vsan-search-input>\n\n      <div class=\"dropdown-menu\"\n           *ngIf=\"isChildDropdownOpened\">\n         <button type=\"button\"\n                 class=\"dropdown-item\"\n                 (click)=\"closeChildDropDownMenu(0)\">\n            {{getSubEntityLabel()}}\n         </button>\n         <ng-container *ngFor=\"let perfEntity of getSelectedParentEntityChildren(); let i = index\">\n            <button type=\"button\"\n                    class=\"dropdown-item\"\n                    (click)=\"closeChildDropDownMenu(i + 1)\">\n               {{perfEntity.entityName}}\n            </button>\n         </ng-container>\n      </div>\n   </div>\n</div>\n","<!-- Copyright 2020 VMware, Inc. All rights reserved. -- VMware Confidential -->\n<span *ngIf=\"loading\" class=\"spinner spinner-lg central-spinner\"></span>\n<ng-container *ngIf=\"!loading\">\n   <vsan-validation id=\"validation-message\"\n                    *ngIf=\"errorMsg\"\n                    [alert]=\"errorMsg\"\n                    [allowReload]=\"true\"\n                    (onReload)=\"fetch()\"\n                    (onClosed)=\"errorMsg = null\">\n   </vsan-validation>\n   <vsan-file-share-selector id=\"vsan-file-share-selector\"\n                             [shares]=\"shares\"\n                             (shareSelected)=\"selectFileShare($event)\">\n   </vsan-file-share-selector>\n\n   <vsan-time-range-picker id=\"vsan-time-range-picker1\"\n                           [clusterRef]=\"commonPerfData?.clusterRef\"\n                           [currentTimeRange]=\"timePickerRange\"\n                           [currentPickerState]=\"timePickerState\"\n                           [hourInterval]=\"timePickerHourInterval\"\n                           [fromDate]=\"timePickerFromDate\"\n                           (initRange)=\"onPerfTimeRangeChange($event,true)\"\n                           (changeRange)=\"onPerfTimeRangeChange($event, false)\">\n   </vsan-time-range-picker>\n\n   <vsan-validation id=\"smb-protocal-layer-not-supported-message\"\n                    *ngIf=\"smbTooltipVisible\"\n                    [alertType]=\"'info'\"\n                    [alert]=\"'vsan.monitor.cluster.performance.fileServices.smb.notSupported.desc' | localized\"\n                    (onClosed)=\"smbTooltipVisible = false\">\n   </vsan-validation>\n   <vsan-illustrated-message\n         *ngIf=\"!selectedShare\"\n         [type]=\"IllustratedMessageType.MISSING_SELECTION\"\n         [message]=\"'vsan.monitor.cluster.performance.fileServices.reminder' | localized\">\n   </vsan-illustrated-message>\n   <div class=\"entity-container\" *ngIf=\"selectedShare\">\n      <vsan-consolidated-vm-selector\n            [entities]=\"perfOrchestrator.data?.entities\"\n            [entityVisibilityStateMap]=\"perfOrchestrator.consolidatedViewHelper.entityVisibilityStateMap\"\n            (entitySelect)=\"perfOrchestrator.consolidatedViewHelper.toggle($event.entity.entityIdentifier, $event.isSelected)\"\n            (entitiesReady)=\"onEntitiesReady($event)\">>\n      </vsan-consolidated-vm-selector>\n\n      <clr-signpost *ngIf=\"vdfsSignpostVisible\" id=\"{{layerSignpostId}}\">\n         <clr-signpost-content *clrIfOpen [clrPosition]=\"getSignpostPosition()\">\n            {{\"vsan.monitor.cluster.performance.fileServices.layer.tooltip\" | localized}}\n         </clr-signpost-content>\n      </clr-signpost>\n   </div>\n\n   <vsan-single-entity-data-perf\n         id=\"single-entity-data-panel\"\n         role=\"tabpanel\"\n         *ngIf=\"selectedShare\"\n         [currentEntity]=\"fileShareEntity\"\n         [commonPerfData]=\"commonPerfData\"\n         [consolidatedEntitiesData]=\"consolidatedEntitiesData\"\n         [currentTimeRange]=\"timePickerRange\"\n         [entityTypeId]=\"fileShareEntity.entityId\"\n         [attr.aria-labelledby]=\"'perf-view-selection-buttons-' + PerfMonitorViewType.CLUSTER_FILE_SERVICE\">\n   </vsan-single-entity-data-perf>\n</ng-container>\n","<!-- Copyright 2020-2021 VMware, Inc. All rights reserved. -- VMware Confidential -->\n<span *ngIf=\"propertiesLoading\" class=\"spinner spinner-lg central-spinner\"></span>\n<vsan-validation id=\"validation-message\"\n                 *ngIf=\"allLoadersCompleted() && errorMsg\"\n                 [alert]=\"errorMsg\"\n                 [allowReload]=\"true\"\n                 (onReload)=\"fetch()\"\n                 (onClosed)=\"errorMsg = null\">\n</vsan-validation>\n\n<div class=\"selection-group\">\n   <div class=\"horizontal\">\n      <label for=\"metric-selection\">{{\"vsan.monitor.cluster.performance.topContributors.cluster.metric\" | localized}}\n      </label>\n      <div class=\"select\">\n         <select (change)=\"selectedClusterMetricChanged()\"\n                 [(ngModel)]=\"selectedClusterMetric\"\n                 clrSelect\n                 id=\"metric-selection\">\n            <option *ngFor=\"let metric of Array.from(clusterGraphs.keys())\"\n                    value=\"{{metric}}\">{{clusterGraphs.get(metric) | localized}}</option>\n         </select>\n      </div>\n   </div>\n\n   <div>\n      <vsan-time-range-picker id=\"vsan-top-contributors-time-range-picker\"\n                              role=\"group\"\n                              aria-labelledby=\"time-range-label\"\n                              [clusterRef]=\"commonPerfData?.clusterRef\"\n                              [currentTimeRange]=\"currentTimeRange\"\n                              [currentPickerState]=\"currentPickerState\"\n                              [hourInterval]=\"currentHourInterval\"\n                              (initRange)=\"onPerfTimeRangeChange($event,true)\"\n                              (changeRange)=\"onPerfTimeRangeChange($event, false)\">\n      </vsan-time-range-picker>\n   </div>\n\n   <div>\n      <button [external-link]=\"'vsan.monitor.cluster.performance.topContributors.link' | localized\"\n              [helpId]=\"AskVmwareId.TOP_CONTRIBUTORS\"\n              class=\"btn btn-sm btn-link\"\n              id=\"ask-vmware\">\n      </button>\n   </div>\n</div>\n<vsan-perf-detail-charts class=\"clusterChart\"\n                         [commonPerfData]=\"commonPerfData\"\n                         [visibleGraphId]=\"selectedClusterGraph\"\n                         [isAskVmwareLinkVisible]=\"false\"\n                         [showHeaderSection]=\"false\"\n                         [selectedPlotLineValue]=\"selectedTimePoint\"\n                         [keepPlotLineOnClick]=\"true\"\n                         [parentLoading]=\"propertiesLoading && !currentEntity\"\n                         (onPlotLineChanged)=\"onPlotLineChanged($event)\"\n                         (allChartsLoaded)=\"allChartsLoaded($event)\">\n</vsan-perf-detail-charts>\n<div class=\"card\" *ngIf=\"!propertiesLoading && !clusterChartLoading && !errorMsg\">\n   <div class=\"card-block\">\n      <div class=\"card-text cluster-metrics\">\n         <vsan-icon-item [label]=\"clusterName\" [shape]=\"clusterIcon\"></vsan-icon-item>\n         <div class=\"horizontal\">\n            <label id=\"read-metric-key\"\n                   class=\"clr-control-label\"\n                   for=\"read-metrtic-value\">{{selectedReadMetric?.metricLabel}}</label>\n            <clr-tooltip>\n               <span clrTooltipTrigger id=\"read-metrtic-value\">{{getSelectedMetricValue(selectedReadMetric)}}</span>\n               <clr-tooltip-content id=\"read-metric-description\"\n                                    *ngIf=\"!selectedReadMetric?.value\"\n                                    clrPosition=\"top-right\"\n                                    clrSize=\"lg\">\n                  {{\"vsan.monitor.cluster.performance.topContributors.cluster.metric.value.description\" | localized}}\n               </clr-tooltip-content>\n            </clr-tooltip>\n         </div>\n         <div class=\"horizontal\">\n            <label id=\"write-metric-key\"\n                   class=\"clr-control-label\"\n                   for=\"write-metrtic-value\">{{selectedWriteMetric?.metricLabel}}</label>\n            <clr-tooltip>\n               <span clrTooltipTrigger id=\"write-metrtic-value\">{{getSelectedMetricValue(selectedWriteMetric)}}</span>\n               <clr-tooltip-content id=\"write-metric-description\"\n                                    *ngIf=\"!selectedWriteMetric?.value\"\n                                    clrPosition=\"top-left\"\n                                    clrSize=\"lg\">\n                  {{\"vsan.monitor.cluster.performance.topContributors.cluster.metric.value.description\" | localized}}\n               </clr-tooltip-content>\n            </clr-tooltip>\n         </div>\n      </div>\n   </div>\n</div>\n<div class=\"top-contributors-filtering\"\n     *ngIf=\"!propertiesLoading && !clusterChartLoading && !errorMsg\">\n   <div class=\"selection-group\">\n      <label class=\"clr-control-label\"\n             for=\"entity-type-selection\">{{\"vsan.monitor.cluster.performance.topContributors.entity.type\" | localized}}\n      </label>\n      <div class=\"select\">\n         <select id=\"entity-type-selection\"\n                 name=\"entity-type-selection\"\n                 clrSelect\n                 [(ngModel)]=\"selectedEntityType\">\n            <option *ngFor=\"let type of perfTopContributorsEntityTypeKeys\"\n                    value=\"{{type}}\">\n               {{getEntityTypeLabel(type)}}</option>\n         </select>\n      </div>\n      <vsan-datetime-picker\n            (datetimeChange)=\"onDateTimeChanged($event)\"\n            [datetime]=\"selectedTimePointDate\"\n            [label]=\"'vsan.monitor.cluster.performance.topContributors.time.picker.label' | localized\"\n            [max]=\"maxDate\"\n            [min]=\"minDate\"\n            [pickerType]=\"PickerType.TIMER\"\n            [stepMinute]=\"5\"\n            [errorMessage]=\"dateError\">\n      </vsan-datetime-picker>\n   </div>\n   <div class=\"selection-group\">\n      <label class=\"clr-control-label\" for=\"sort-by-selection\">\n         {{\"vsan.monitor.cluster.performance.topContributors.sort.by\" | localized}}\n      </label>\n      <div class=\"select\">\n         <select (change)=\"retrieveTopContributors()\"\n                 [(ngModel)]=\"sortByMetric\"\n                 clrSelect\n                 id=\"sort-by-selection\"\n                 name=\"sort-by-selection\">\n            <option [ngValue]=\"selectedReadMetric\">\n               {{selectedReadMetric?.metricLabel}}\n            </option>\n            <option [ngValue]=\"selectedWriteMetric\">\n               {{selectedWriteMetric?.metricLabel}}\n            </option>\n         </select>\n      </div>\n   </div>\n</div>\n<vsan-illustrated-message\n      *ngIf=\"isTimePointUnavailableViewVisible()\"\n      [message]=\"'vsan.disabledService.topContributors.noSelectedTimePoint' | localized\"\n      [type]=\"IllustratedMessageType.MISSING_SELECTION\">\n</vsan-illustrated-message>\n<ng-container *ngIf=\"isTopContributorsVisible()\">\n   <div class=\"btn-group vsan-actions\">\n      <clr-tooltip>\n         <span clrTooltipTrigger\n               [vsan-ignore-focus]=\"isCombinedChartButtonEnabled()\">\n            <button id=\"combined-chart\"\n                    class=\"btn btn-link btn-sm no-left-padding\"\n                    aria-describedby=\"view-combined-chart-description\"\n                    (click)=\"showCombinedChartsDialog()\"\n                    [disabled]=\"!isCombinedChartButtonEnabled()\">\n               {{\"vsan.monitor.cluster.performance.topContributors.view.combined.charts.link\" | localized}}\n            </button>\n         </span>\n         <clr-tooltip-content id=\"view-combined-chart-description\"\n                              *ngIf=\"!isCombinedChartButtonEnabled()\"\n                              clrPosition=\"top-right\"\n                              clrSize=\"lg\">\n            {{\"vsan.monitor.cluster.performance.topContributors.view.combined.charts.tooltip\" | localized}}\n         </clr-tooltip-content>\n      </clr-tooltip>\n      <clr-tooltip>\n         <span clrTooltipTrigger\n               [vsan-ignore-focus]=\"isPhysicalPlacementButtonEnabled()\">\n            <button *ngIf=\"selectedEntityType === PerfTopContributorsEntityType.VIRTUAL_MACHINE\"\n                    id=\"physical-placement\"\n                    class=\"btn btn-link btn-sm\"\n                    aria-describedby=\"view-physical-placement-description\"\n                    (click)=\"showPhysicalPlacementDialog()\"\n                    [disabled]=\"!isPhysicalPlacementButtonEnabled()\">\n               {{\"vsan.monitor.cluster.performance.topContributors.view.physical.placement.link\" | localized}}\n            </button>\n         </span>\n         <clr-tooltip-content id=\"view-physical-placement-description\"\n                              *ngIf=\"!isPhysicalPlacementButtonEnabled()\"\n                              clrPosition=\"top-right\"\n                              clrSize=\"lg\">\n            {{getPhysicalPlacementButtonTooltip()}}\n         </clr-tooltip-content>\n      </clr-tooltip>\n   </div>\n   <clr-datagrid [(clrDgSelected)]=\"selectedTopContributorItems\"\n                 [clrDgLoading]=\"topContributorsLoading\"\n                 class=\"top-contributors-grid\">\n      <clr-dg-column>\n         {{\"vsan.monitor.cluster.performance.topContributors.column.entity.name\" | localized}}\n      </clr-dg-column>\n      <clr-dg-column>\n         {{\"vsan.monitor.cluster.performance.topContributors.column.host\" | localized}}\n      </clr-dg-column>\n      <clr-dg-column class=\"narrow-column\">\n         {{selectedReadMetric?.metricLabel}}\n      </clr-dg-column>\n      <clr-dg-column class=\"narrow-column\">\n         {{selectedWriteMetric?.metricLabel}}\n      </clr-dg-column>\n\n      <clr-dg-placeholder>{{\"vsan.monitor.cluster.performance.topContributors.no.results\" | localized}}</clr-dg-placeholder>\n\n      <clr-dg-row *clrDgItems=\"let topContributor of topContributorsData\" [clrDgItem]=\"topContributor\">\n         <clr-dg-cell>\n            <vsan-icon-item [label]=\"topContributor.entity.name\"\n                            [shape]=\"topContributor.entity.primaryIconId\">\n            </vsan-icon-item>\n         </clr-dg-cell>\n         <clr-dg-cell>\n            <vsan-icon-item [label]=\"topContributor.parent.name\"\n                            [shape]=\"topContributor.parent.primaryIconId\">\n            </vsan-icon-item>\n         </clr-dg-cell>\n         <clr-dg-cell>{{PerfChartUtil.formatYAxisLabel(topContributor.readMetricValue, getGraphDefinition(), false)}}</clr-dg-cell>\n         <clr-dg-cell>{{PerfChartUtil.formatYAxisLabel(topContributor.writeMetricValue, getGraphDefinition(), false)}}</clr-dg-cell>\n\n         <clr-dg-row-detail *clrIfExpanded>\n            <div class=\"column-flex-container\">\n               <vsan-perf-detail-charts\n                     [commonPerfData]=\"commonPerfData\"\n                     [extraDesc]=\"extraDesc\"\n                     [visibleGraphId]=\"getTopContributorGraph()\"\n                     [selectedPlotLineValue]=\"selectedTimePoint\"\n                     [isAskVmwareLinkVisible]=\"false\"\n                     [showHeaderSection]=\"false\"\n                     [entity]=\"createTopContributorPerfEntity(topContributor)\"\n                     [currentTimeRange]=\"currentTimeRange\">\n               </vsan-perf-detail-charts>\n               <div class=\"btn-group vsan-actions\">\n                  <clr-tooltip>\n                     <span clrTooltipTrigger\n                           [vsan-ignore-focus]=\"isFullPerformanceDisabled(topContributor)\">\n                        <button id=\"full-performance\"\n                                class=\"btn btn-link btn-sm no-left-padding\"\n                                [disabled]=\"isFullPerformanceDisabled(topContributor)\"\n                                (click)=\"selectedEntityType === PerfTopContributorsEntityType.VIRTUAL_MACHINE ?\n                                viewFullVMPerformance(topContributor.entity.moRef) :\n                                viewFullHostPerformance(topContributor)\">\n                           {{\"vsan.monitor.cluster.performance.topContributors.view.full.performance.link\" | localized}}\n                        </button>\n                     </span>\n                     <clr-tooltip-content id=\"view-full-performance\"\n                                          *ngIf=\"isFullPerformanceDisabled(topContributor)\"\n                                          clrPosition=\"top-right\"\n                                          clrSize=\"lg\">\n                        {{\"vsan.monitor.cluster.performance.topContributors.view.viewfullperformance.tooltip\" | localized}}\n                     </clr-tooltip-content>\n                  </clr-tooltip>\n                  <button id=\"disk-group-physical-disks\"\n                          class=\"btn btn-link btn-sm\"\n                          *ngIf=\"selectedEntityType === PerfTopContributorsEntityType.DISK_GROUP\"\n                          (click)=\"viewPhysicalPlacement(topContributor)\">\n                     {{\"vsan.monitor.cluster.performance.topContributors.view.virtual.objects.link\" | localized}}\n                  </button>\n               </div>\n            </div>\n         </clr-dg-row-detail>\n      </clr-dg-row>\n      <clr-dg-footer>\n         <clr-dg-pagination #pagination\n                            [clrDgTotalItems]=\"topContributorsData.length\"\n                            [hidden]=\"!topContributorsData.length\"\n                            [clrDgPageSize]=\"DEFAULT_ITEMS_PER_PAGE\">\n            {{\"vsan.monitor.cluster.performance.topContributors.grid.pagination\" | localized: (pagination.firstItem + 1):\n               (pagination.lastItem + 1):topContributorsData.length}}\n         </clr-dg-pagination>\n      </clr-dg-footer>\n   </clr-datagrid>\n</ng-container>\n","/* Copyright 2020-2022 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {AfterViewInit, Component, Input, OnDestroy, OnInit, ViewChild} from \"@angular/core\";\nimport {PerfChartDataConstants} from \"@component/chart/performance/perf-chart-util\";\nimport {RangePickerState} from \"@component/datetime-picker/time-range-picker/range-picker-state\";\nimport {PerfMonitorCommonPropsData} from \"@generated/perf-monitor-common-props-data\";\nimport {PerfTimeRangeData} from \"@generated/perf-time-range-data\";\nimport {VsanCapabilityData} from \"@generated/vsan-capability-data\";\nimport {RefreshHandler} from \"@service/global-refresh.service\";\nimport {PerfChangeContext} from \"@util/performance/perf-data\";\nimport {PerfModeType, PerfOrchestratorService} from \"@util/performance/perf-orchestrator-service\";\nimport {VsanSignpostUtil} from \"@util/vsan-signpost-util\";\nimport {BasePerfEntity} from \"../model/base-perf-entity\";\nimport {FileShareEntity} from \"../model/file-share-entity\";\nimport {PerfMonitorViewType} from \"../model/perf-monitor-view-type.model\";\nimport {ConsolidatedEntitiesData} from \"./consolidated-entities-data.data\";\nimport {EntitiesReadyEvent} from \"./consolidated-vm-selector.component\";\nimport {ManagedObject} from \"@service/managed-object\";\nimport {FileServiceFeature} from \"@generated/file-service-feature\";\nimport {VsanFileServiceShare} from \"@generated/vsan-file-service-share\";\nimport {FileSharesPaginationSpec} from \"@generated/file-shares-pagination-spec\";\nimport {VsanFileShareUtils} from \"../../file-services/shares/file-share-util\";\nimport {VsanFileShareProtocol} from \"@generated/vsan-file-share-protocol\";\nimport {IllustratedMessageType} from \"@component/illustrated-message/illustrated-message.component\";\nimport {VsanTimeRangePickerComponent} from \"@component/datetime-picker/time-range-picker/time-range-picker.component\";\nimport {FullTimeRangeSelectionData} from \"@model/full-time-range-selection.data\";\nimport {PerformancePersistenceService} from \"@service/performance-persistence.service\";\nimport {ReferenceWatcher} from \"@util/reference-watcher\";\nimport {VsanFileSharesService} from \"@generated/vsan-file-shares-service\";\nimport {VsanFileServiceConfigService} from \"@generated/vsan-file-service-config-service\";\nimport {LoadingIndicator} from \"@service/flow/loading-indicator.decorator\";\nimport {Loader} from \"@service/flow/loader.decorator\";\nimport {ErrorMessage} from \"@service/flow/error-message.decorator\";\nimport {SrMessageType} from \"@service/screen-reader-announcer.service\";\n\n@Component({\n   selector: \"vsan-file-share-data-perf\",\n   templateUrl: \"./file-share-data-perf.html\",\n   styleUrls: [\"file-share-data-perf.scss\"],\n   providers: [ReferenceWatcher],\n})\nexport class VsanFileShareDataPerfComponent implements OnInit, AfterViewInit, OnDestroy {\n   readonly layerSignpostId: string = \"layer-tooltip\";\n   PerfMonitorViewType: typeof PerfMonitorViewType = PerfMonitorViewType;\n   IllustratedMessageType: typeof IllustratedMessageType = IllustratedMessageType;\n   private readonly LAYER_SIGNPOST_WIDTH: number = 360;\n   private readonly LAYER_SIGNPOST_HEIGHT: number = 150;\n\n   @Input()\n   commonPerfData: PerfMonitorCommonPropsData;\n\n   @Input()\n   currentView: PerfMonitorViewType;\n\n   @Input()\n   initialEntityId: string;\n\n   @Input()\n   capabilitiesData: VsanCapabilityData;\n\n   @ViewChild(VsanTimeRangePickerComponent, {static: false})\n   timeRangePickerComponent: VsanTimeRangePickerComponent;\n\n   timePickerRange: PerfTimeRangeData;\n   timePickerState: RangePickerState;\n   timePickerHourInterval: number;\n   timePickerFromDate: Date;\n\n   @LoadingIndicator()\n   loading: boolean;\n\n   @ErrorMessage()\n   errorMsg: string;\n\n   selectedShare: VsanFileServiceShare;\n   fileShareEntity: FileShareEntity;\n\n   smbTooltipVisible: boolean = false;\n   vdfsSignpostVisible: boolean = false;\n\n   /**\n    * From 70U1 backend supports vdfs layer metrics, for early releases & mixed mode (vc >= 70u1 && hosts == 70GA),\n    * UI has to hide the filesystem checkbox\n    */\n   fileSystemGraphsSupported: boolean;\n   smbShareSupported: boolean;\n   smbProtocolLayerPerformanceSupported: boolean;\n   sharePaginationSupported: boolean;\n   shares: VsanFileServiceShare[];\n   consolidatedEntitiesData: ConsolidatedEntitiesData;\n\n   private entityIdentifierToColor: any;\n\n   constructor(public perfOrchestrator: PerfOrchestratorService,\n         private fileServiceConfigService: VsanFileServiceConfigService,\n         private fileServiceShareService: VsanFileSharesService,\n         private perfPersistenceService: PerformancePersistenceService,\n         private refWatcher: ReferenceWatcher) {\n      this.refWatcher.watchGlobalRefreshSubscription(VsanFileShareDataPerfComponent.prototype.constructor.name);\n   }\n\n   async ngOnInit(): Promise<void> {\n      this.initChartProperties();\n      await this.fetch();\n   }\n\n   ngAfterViewInit(): void {\n      this.initializePersistedSelections();\n   }\n\n   ngOnDestroy(): void {\n      this.perfOrchestrator.reset();\n   }\n\n   @RefreshHandler\n   @Loader({\n      srMessage: \"vsan.monitor.cluster.performance.fileServices.title\",\n      srMessageType: SrMessageType.DATA,\n   })\n   async fetch(): Promise<void> {\n      await this.queryFeatureSwitches();\n\n      if (this.sharePaginationSupported) {\n         this.shares = await this.fileServiceShareService.listAllShares(ManagedObject.contextObject);\n      } else {\n         const spec: FileSharesPaginationSpec =\n               FileSharesPaginationSpec.Factory.create(FileSharesPaginationSpec.MAX_SHARE_QUERY_SIZE(),\n                     null, null, null, null, null);\n         this.shares = (await this.fileServiceShareService.filterShares(ManagedObject.contextObject,\n               spec, false)).shares;\n      }\n   }\n\n   private async queryFeatureSwitches(): Promise<void> {\n      const featureSupportedMap: any = await this.fileServiceConfigService.isFeatureSupportedOnRuntime(\n            ManagedObject.contextObject,\n            [FileServiceFeature.PAGINATION, FileServiceFeature.SMB, FileServiceFeature.SMB_PERFORMANCE]);\n      this.smbShareSupported = featureSupportedMap[FileServiceFeature.SMB];\n      // No standalone killswitch for file system graphs support, it comes with SMB, so we reuse `smbShareSupported`\n      this.fileSystemGraphsSupported = this.smbShareSupported;\n      // Start to support smb protocol layer performance from 70u2\n      this.smbProtocolLayerPerformanceSupported = featureSupportedMap[FileServiceFeature.SMB_PERFORMANCE];\n      this.sharePaginationSupported = featureSupportedMap[FileServiceFeature.PAGINATION];\n   }\n\n   private get isPersistedSelectionInitialized(): boolean {\n      const persistedSelection: FullTimeRangeSelectionData =\n            this.perfPersistenceService.getPersistedSelection();\n\n      // If there is no persisted selection. it's replaced by view's default one\n      if (persistedSelection == null) {\n         return true;\n      }\n\n      return this.timePickerRange === persistedSelection.timeRange;\n   }\n\n   private initializePersistedSelections(): void {\n      if (!this.timeRangePickerComponent) {\n         this.refWatcher.setTimeout(() => {\n            this.initializePersistedSelections();\n         }, 1000);\n         return;\n      }\n\n      const persistedSelection: FullTimeRangeSelectionData =\n            this.perfPersistenceService.getPersistedSelection();\n\n      if (persistedSelection) {\n         const timeRange: PerfTimeRangeData = persistedSelection.timeRange;\n         const state: RangePickerState = persistedSelection.state;\n\n         if (this.timeRangePickerComponent.currentTimeRange.from !== timeRange.from ||\n               this.timeRangePickerComponent.currentTimeRange.to !== timeRange.to ||\n               this.timeRangePickerComponent.currentPickerState !== state) {\n            this.timePickerRange = timeRange;\n            this.timePickerState = state;\n            this.timeRangePickerComponent.setTimerange(timeRange, state);\n         }\n      }\n   }\n\n   selectFileShare(share: VsanFileServiceShare): void {\n      if (this.selectedShare === share) {\n         return;\n      }\n      this.selectedShare = share;\n      if (!this.selectedShare) {\n         return;\n      }\n\n      this.fileShareEntity = VsanFileShareUtils.getFileShareEntity(share, this.smbShareSupported,\n            this.smbProtocolLayerPerformanceSupported);\n      this.fileShareEntity.configSpec = this.commonPerfData.entityTypes[this.fileShareEntity.entityId];\n      if (this.fileShareEntity.protocolEntity) {\n         this.fileShareEntity.protocolEntity.configSpec = this.fileShareEntity.configSpec;\n      }\n      this.initialEntityId = this.fileShareEntity.entityUuid;\n      this.prepareOrchestrator(this.fileShareEntity);\n      if (this.fileShareEntity.protocolEntity) {\n         this.perfOrchestrator.consolidatedViewHelper.entityVisibilityStateMap[this.fileShareEntity.entityUuid] = false;\n         this.perfOrchestrator.consolidatedViewHelper.toggle(this.fileShareEntity.entityUuid, false);\n      }\n      this.smbTooltipVisible = share.config.protocol === VsanFileShareProtocol.SMB\n            && !this.smbProtocolLayerPerformanceSupported;\n\n      // The show/hide rule of the signpost:\n      // 1. 70 release, hide;\n      // 2. 70u1 release: only show it when nfs share is selected;\n      // 3. 70u2 release: always show it\n      this.vdfsSignpostVisible = this.fileSystemGraphsSupported &&\n            (share.config.protocol !== VsanFileShareProtocol.SMB || this.smbProtocolLayerPerformanceSupported);\n   }\n\n   onPerfTimeRangeChange(timeRange?: PerfTimeRangeData, isOnInit?: boolean): void {\n      this.perfOrchestrator.changeTimeRange(timeRange);\n\n      if (isOnInit && !this.isPersistedSelectionInitialized) {\n         return;\n      }\n\n      this.timePickerRange = timeRange;\n      this.timePickerState = this.timeRangePickerComponent.currentPickerState;\n\n      if (!isOnInit) {\n         this.perfPersistenceService.saveSelection(timeRange, this.timeRangePickerComponent.currentPickerState);\n      }\n   }\n\n   getSignpostPosition(): string {\n      return VsanSignpostUtil.getPosition(this.layerSignpostId, this.LAYER_SIGNPOST_WIDTH, this.LAYER_SIGNPOST_HEIGHT);\n   }\n\n   onEntitiesReady(event: EntitiesReadyEvent): void {\n      this.entityIdentifierToColor = event.entityIdentifierToColor;\n      this.setConsolidatedEntitiesData();\n   }\n\n   setConsolidatedEntitiesData(): void {\n      const data: ConsolidatedEntitiesData = new ConsolidatedEntitiesData();\n      data.entityIdentifierToVisibility = this.perfOrchestrator.consolidatedViewHelper.entityVisibilityStateMap;\n      data.entities = this.perfOrchestrator.data.entities;\n      data.entityIdentifierToColor = this.entityIdentifierToColor;\n      this.consolidatedEntitiesData = data;\n   }\n\n   private initChartProperties(): void {\n      this.perfOrchestrator.reset();\n      this.perfOrchestrator.data.entityTypes = this.commonPerfData.entityTypes;\n      this.perfOrchestrator.data.entityType = PerfChartDataConstants.CLUSTER_FILE_SERVICE_ENTITY;\n      this.perfOrchestrator.consolidatedViewHelper.entityVisibilityStateMap = {};\n      this.perfOrchestrator.data.timeRangeData = this.timePickerRange;\n      this.perfOrchestrator.mode = PerfModeType.SHOW_SPECIFICS;\n   }\n\n   private prepareOrchestrator(entity: FileShareEntity): void {\n      this.perfOrchestrator.data.entities = [];\n      // all the entities should be initially set as selected in order consolidatedViewHelper's selectedEntities to be\n      // correctly initialized\n      if (entity.protocolEntity) {\n         this.setOrchestratorEntityData(entity.protocolEntity, true);\n         this.setOrchestratorEntityData(entity, true);\n      } else {\n         this.setOrchestratorEntityData(entity, true);\n      }\n      this.perfOrchestrator.setSelectedSpecifiedEntities();\n      this.perfOrchestrator.change.next(PerfChangeContext.FILTERED_ENTITIES);\n   }\n\n   private setOrchestratorEntityData(entity: BasePerfEntity, selected: boolean): void {\n      this.perfOrchestrator.data.entities.push(entity);\n      this.perfOrchestrator.data.entitySelectionStateMap.set(entity.entityUuid, selected);\n      this.perfOrchestrator.consolidatedViewHelper.entityVisibilityStateMap[entity.entityUuid] = selected;\n   }\n}\n","/* Copyright 2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {\n   Directive,\n   ElementRef,\n   AfterViewInit,\n   HostListener\n} from \"@angular/core\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\n\n/**\n * Attribute directive used to fix the buttons' border that are part of btn-group. Clarity button group doesn't fully\n * support flex-wrap: wrap mode. The buttons are wrapped, but their border is not correctly rendered. This directive\n * fixes the left/right borders and the border radius depending on the button's position.\n */\n@Directive({\n   selector: \"[vsan-button-group-wrap]\"\n})\nexport class ButtonGroupWrapDirective implements AfterViewInit {\n\n   private static readonly ALL_BUTTON_ELEMENTS_SELECTOR: string = \"button\";\n   private readonly ARIA_SELECTED_ATTRIBUTE: string = \"aria-selected\";\n   private readonly STYLE_ATTRIBUTE: string = \"style\";\n   private readonly FIRST_BUTTON_ATTRIBUTE_VALUE: string =\n         \"border-left: solid; border-width: 1px; border-top-left-radius:0.125rem; border-bottom-left-radius: 0.125rem\";\n   private readonly FIRST_BUTTON_SELECTED_ATTRIBUTE_VALUE: string =\n         \"border-top-left-radius:0.125rem; border-bottom-left-radius: 0.125rem\";\n   private readonly ONE_BUTTON_AT_ROW_ATTRIBUTE_VALUE: string =\n         \"border-left: solid; border-width: 1px; border-top-left-radius:0.125rem; border-bottom-left-radius: 0.125rem; border-top-right-radius:0.125rem; border-bottom-right-radius: 0.125rem\";\n   private readonly ONE_BUTTON_AT_ROW_SELECTED_ATTRIBUTE_VALUE: string =\n         \"border-top-left-radius:0.125rem; border-bottom-left-radius: 0.125rem; border-top-right-radius:0.125rem; border-bottom-right-radius: 0.125rem\";\n   private readonly MIDDLE_BUTTON_ATTRIBUTE_VALUE: string =\n         \"border-left: none; border-top-left-radius:0; border-bottom-left-radius: 0; border-top-right-radius:0; border-bottom-right-radius:0\";\n   private readonly LAST_BUTTON_ATTRIBUTE_VALUE: string =\n         \"border-top-left-radius:0; border-bottom-left-radius: 0;border-top-right-radius:0.125rem; border-bottom-right-radius: 0.125rem\";\n\n   @HostListener(\"window:resize\", [\"$event\"])\n   onResize(event): void {\n      this.updateButtonsBorder();\n   }\n\n   constructor(private elRef: ElementRef) {}\n\n   ngAfterViewInit(): void {\n      this.updateButtonsBorder();\n   }\n\n   private updateButtonsBorder(): void {\n      const allButtons: NodeListOf<HTMLButtonElement> = this.elRef.nativeElement.querySelectorAll(\n            ButtonGroupWrapDirective.ALL_BUTTON_ELEMENTS_SELECTOR);\n\n      if (VsanUiUtils.isUnset(allButtons) || allButtons.length === 0) {\n         return;\n      }\n\n      const buttons: HTMLButtonElement[] = [];\n      allButtons.forEach(button => buttons.push(button));\n      this.updateButtonsAtRowStyle(buttons);\n   }\n\n   /**\n    * The method goes through the buttons and is recursively called, for the buttons that are wrapped\n    * @param buttons\n    */\n   private updateButtonsAtRowStyle(buttons: HTMLButtonElement[]): void {\n      const firstBtn: HTMLButtonElement = buttons[0];\n      if (buttons.length === 1) {\n         this.updateButtonAtRowStyle(firstBtn);\n         return;\n      }\n\n      this.updateFirstButtonAtRowStyle(firstBtn);\n\n      let lastBtnAtRow: HTMLButtonElement = firstBtn;\n      for (let index = 1; index < buttons.length; index++) {\n         const btn: HTMLButtonElement = buttons[index];\n\n         if (this.areOnSameRow(btn, firstBtn)) {\n            this.updateMiddleButtonStyle(btn);\n            lastBtnAtRow = btn;\n         } else {\n            // update the last button at this line and call recursively the method for the new line\n            this.updateLastButtonAtRowStyle(lastBtnAtRow, index === 1);\n            this.updateButtonsAtRowStyle(buttons.slice(index));\n            return;\n         }\n      }\n\n      // if we are here, all of the buttons are at one row. Update the last button.\n      this.updateLastButtonAtRowStyle(lastBtnAtRow, buttons.length === 1);\n   }\n\n   private areOnSameRow(btn1, btn2): boolean {\n      return btn1.getBoundingClientRect().top === btn2.getBoundingClientRect().top;\n   }\n\n   private updateFirstButtonAtRowStyle(firstBtn: HTMLButtonElement): void {\n      if (this.isSelected(firstBtn)) {\n         this.setStyle(firstBtn, this.FIRST_BUTTON_SELECTED_ATTRIBUTE_VALUE);\n      } else {\n         this.setStyle(firstBtn, this.FIRST_BUTTON_ATTRIBUTE_VALUE);\n      }\n   }\n\n   private updateMiddleButtonStyle(btn: HTMLButtonElement): void {\n      this.setStyle(btn, this.MIDDLE_BUTTON_ATTRIBUTE_VALUE);\n   }\n\n   private updateLastButtonAtRowStyle(lastBtn: HTMLButtonElement, onlyOneButton: boolean): void {\n      if (onlyOneButton) {\n         this.updateButtonAtRowStyle(lastBtn);\n      } else {\n         this.setStyle(lastBtn, this.LAST_BUTTON_ATTRIBUTE_VALUE);\n      }\n   }\n\n   private updateButtonAtRowStyle(btn: HTMLButtonElement): void {\n      if (this.isSelected(btn)) {\n         this.setStyle(btn, this.ONE_BUTTON_AT_ROW_SELECTED_ATTRIBUTE_VALUE);\n      } else {\n         this.setStyle(btn, this.ONE_BUTTON_AT_ROW_ATTRIBUTE_VALUE);\n      }\n   }\n\n   private isSelected(btn): boolean {\n      return btn.getAttributeNode(this.ARIA_SELECTED_ATTRIBUTE).value === \"true\";\n   }\n\n   private setStyle(btn: HTMLButtonElement, style: string): void {\n      btn.setAttribute(this.STYLE_ATTRIBUTE, style);\n   }\n}","/* Copyright 2019-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, EventEmitter, Input, Output} from \"@angular/core\";\nimport {IoInsightInstance} from \"@generated/io-insight-instance\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {IoInsightRunningState} from \"@generated/io-insight-running-state\";\nimport {Logger} from \"@util/logger\";\nimport {DateFormat} from \"@pipe/VsanDateFormatterPipe\";\nimport {VsanDateTimeUtils} from \"@util/vsan-dateteime-util\";\n\n@Component({\n   templateUrl: \"io-insight-instance.html\",\n   styleUrls: [\"io-insight-instance.scss\"],\n   selector: \"vsan-io-insight-instance\",\n})\nexport class IoInsightInstanceComponent {\n   IoInsightRunningState: typeof IoInsightRunningState = IoInsightRunningState;\n\n   @Input()\n   ioInsightInstance: IoInsightInstance;\n\n   @Output()\n   viewMetrics: EventEmitter<IoInsightInstance> = new EventEmitter<IoInsightInstance>();\n\n   @Output()\n   stopInstance: EventEmitter<IoInsightInstance> = new EventEmitter<IoInsightInstance>();\n\n   @Output()\n   rerunInstance: EventEmitter<IoInsightInstance> = new EventEmitter<IoInsightInstance>();\n\n   @Output()\n   deleteInstance: EventEmitter<IoInsightInstance> = new EventEmitter<IoInsightInstance>();\n\n   @Output()\n   renameInstance: EventEmitter<IoInsightInstance> = new EventEmitter<IoInsightInstance>();\n\n   get getDurationLabel(): string {\n      if (this.ioInsightInstance) {\n         return VsanUiUtils.getString(\"vsan.io.insight.instance.duration\",\n               VsanDateTimeUtils.applyFormatting(this.ioInsightInstance.timeRange.startTime, DateFormat.NO_SECONDS),\n               VsanDateTimeUtils.applyFormatting(this.ioInsightInstance.timeRange.endTime, DateFormat.NO_SECONDS),\n               this.ioInsightInstance.timeRange.duration);\n      }\n   }\n\n   getAlertStyle(): string {\n      if (this.ioInsightInstance) {\n         switch (this.ioInsightInstance.state) {\n            case IoInsightRunningState.COMPLETED:\n               return \"alert-success instance-alert-success\";\n            case IoInsightRunningState.RUNNING:\n               return \"alert-info instance-alert-info\";\n         }\n      }\n   }\n\n   getStatusLabel(): string {\n      if (this.ioInsightInstance) {\n         switch (this.ioInsightInstance.state) {\n            case IoInsightRunningState.COMPLETED:\n               return VsanUiUtils.getString(\"vsan.io.insight.running.state.completed\");\n            case IoInsightRunningState.RUNNING:\n               return VsanUiUtils.getString(\"vsan.io.insight.running.state.running.remaining\",\n                     this.ioInsightInstance.timeRange.remainingTimeLocalizedTimeUnit);\n            default:\n               Logger.warn(\"Unrecognized status:\", this.ioInsightInstance.state);\n               return VsanUiUtils.getString(\"vsan.na.label\");\n         }\n      }\n   }\n}","/* Copyright 2019-2022 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, EventEmitter, Input, OnChanges, Output} from \"@angular/core\";\nimport {IoInsightInstance} from \"@generated/io-insight-instance\";\nimport {IoInsightRunningState} from \"@generated/io-insight-running-state\";\nimport {InstanceActionContextData} from \"../io-insight/action/instance-action-context.data\";\nimport {ModalBuilder} from \"@util/modal-builder\";\nimport {ManagedObject} from \"@service/managed-object\";\nimport {IoInsightService} from \"@generated/io-insight-service\";\nimport {TaskMonitorService} from \"@service/task-monitor-service\";\nimport {PerfMonitorCommonPropsData} from \"@generated/perf-monitor-common-props-data\";\nimport {PerfMonitorViewType} from \"../model/perf-monitor-view-type.model\";\nimport {PerfTimeRangeData} from \"@generated/perf-time-range-data\";\nimport {RefreshHandler} from \"@service/global-refresh.service\";\nimport {VsanDateTimeUtils} from \"@util/vsan-dateteime-util\";\nimport {ReferenceWatcher} from \"@util/reference-watcher\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\n\n@Component({\n   templateUrl: \"io-insight-metrics.html\",\n   styleUrls: [\"io-insight-metrics.scss\"],\n   selector: \"vsan-io-insight-metrics\",\n   providers: [ReferenceWatcher],\n})\nexport class IoInsightMetricsComponent implements OnChanges {\n   private static readonly REFRESH_INTERVAL_10S_IN_MS: number = 10000;\n\n   private refreshInterval: number = IoInsightMetricsComponent.REFRESH_INTERVAL_10S_IN_MS;\n   infoLabel: string;\n\n   visible: boolean = true;\n   IoInsightRunningState: typeof IoInsightRunningState = IoInsightRunningState;\n   formatDate: (value: Date | number, options?: any) => any = VsanDateTimeUtils.formatDate;\n   loading: boolean = true;\n   showLoading: boolean = true;\n   errorMsg: string;\n   allChartsLoaded: boolean;\n   refreshWhenChartsLoaded: boolean = false;\n\n   @Input()\n   commonPerfData: PerfMonitorCommonPropsData;\n\n   @Input()\n   currentView: PerfMonitorViewType;\n\n   @Input()\n   initialEntityId: string;\n\n   currentTimeRange: PerfTimeRangeData;\n\n   @Output()\n   back: EventEmitter<IoInsightInstance> = new EventEmitter<IoInsightInstance>();\n\n   _instance: IoInsightInstance;\n\n   @Input()\n   set ioInsightInstance(value: IoInsightInstance) {\n      this._instance = value;\n      this.currentTimeRange = PerfTimeRangeData.Factory.create(\n            \"\", this.ioInsightInstance.timeRange.startTime, this.ioInsightInstance.timeRange.endTime, null);\n      this.setAutoRefreshInterval();\n      this.visible = true;\n   }\n\n   get ioInsightInstance(): IoInsightInstance {\n      return this._instance;\n   }\n\n   @Output()\n   ioInsightInstanceChange: EventEmitter<IoInsightInstance> = new EventEmitter<IoInsightInstance>();\n\n   constructor(private taskSvc: TaskMonitorService,\n         private ioInsightService: IoInsightService,\n         private refWatcher: ReferenceWatcher) {\n      this.refWatcher.watchGlobalRefreshSubscription(IoInsightMetricsComponent.prototype.constructor.name);\n   }\n\n   ngOnChanges(): void {\n      this.fetch();\n   }\n\n   @RefreshHandler\n   fetch(): void {\n      this.updateInstance(true);\n   }\n\n   onBackButtonClicked(): void {\n      this.visible = false;\n      this.back.emit(this.ioInsightInstance);\n   }\n\n   onStopInstance(): void {\n      const context: InstanceActionContextData = {\n         instance: this.ioInsightInstance,\n         clusterRef: this.commonPerfData.clusterRef,\n         deleteOperation: false,\n      };\n      new ModalBuilder(\"ioInsight/deleteInstance\")\n            .setSize(600, 260)\n            .open(context)\n            .then(this.refreshWhenTaskDone);\n   }\n\n   onAllChartsLoaded(): void {\n      this.allChartsLoaded = true;\n      if (this.refreshWhenChartsLoaded) {\n         this.updateInstance(false);\n      }\n   }\n\n   refreshOnRunningInstance(): void {\n      // refresh the view when the instance is running and the view is visible\n      if (this.ioInsightInstance.state === IoInsightRunningState.RUNNING && this.visible) {\n         this.refWatcher.clearTimeouts();\n         this.refWatcher.setTimeout(() => {\n            this.updateInstance(false);\n         }, this.refreshInterval);\n      }\n   }\n\n   private refreshWhenTaskDone = async (task: ManagedObject) => {\n      if (!task) {\n         return;\n      }\n      await this.taskSvc.getAwaitResult(task);\n      this.updateInstance(true);\n   };\n\n   private updateInstance = async (showLoading: boolean) => {\n      // if showLoading=false means we are in auto refresh, in this case wait until the charts are loaded, if their not\n      if (!this.visible || !this.allChartsLoaded && showLoading === false && this.isCompletedState) {\n         this.refreshWhenChartsLoaded = true;\n         return;\n      }\n\n      this.refreshWhenChartsLoaded = false;\n      this.loading = showLoading;\n      this.showLoading = showLoading;\n      this.allChartsLoaded = false;\n      try {\n         this._instance =\n               await this.ioInsightService.getIoInsightInstanceInfo(this.ioInsightInstance, ManagedObject.contextObject);\n\n      } catch (error) {\n         this.errorMsg = error;\n      } finally {\n         this.loading = false;\n         this.showLoading = false;\n         this.refreshOnRunningInstance();\n      }\n   };\n\n   private get isCompletedState(): boolean {\n      return IoInsightRunningState.COMPLETED === (this.ioInsightInstance && this.ioInsightInstance.state);\n   }\n\n   private setAutoRefreshInterval(): void {\n      // long running instances(duration > 60 mins) has lots of timestamps, which slow down charts rendering, also\n      // the API is slower. These technical limitations requires the auto refresh interval to be increased to 1 minute\n      if (this.ioInsightInstance.timeRange.durationInMinutes > 60) {\n         this.refreshInterval = VsanDateTimeUtils.MINUTE_IN_MILLISECONDS;\n         this.infoLabel = VsanUiUtils.getString(\"vsan.io.insight.metrics.view.running.infoLabel.long.duration\");\n      } else {\n         this.refreshInterval = IoInsightMetricsComponent.REFRESH_INTERVAL_10S_IN_MS;\n         this.infoLabel = VsanUiUtils.getString(\"vsan.io.insight.metrics.view.running.infoLabel.short.duration\");\n      }\n   }\n\n   getProgressValue(): number {\n      return this.ioInsightInstance.timeRange.durationInMinutes -\n            this.ioInsightInstance.timeRange.remainingTimeInMinutes;\n   }\n}\n","/* Copyright 2020-2022 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {PerfChartDataConstants} from \"@component/chart/performance/perf-chart-util\";\nimport {TreeNode} from \"@component/inventory/tree-view/tree-node\";\nimport {PerfMonitorCommonPropsData} from \"@generated/perf-monitor-common-props-data\";\nimport {ManagedObjectUtils} from \"@service/managed-object\";\nimport {PerfMonitorViewType} from \"../model/perf-monitor-view-type.model\";\nimport {PerformanceUtils} from \"./perf-utils\";\n\nexport class PerformanceSupportUtil {\n   /**\n    * Check if the vSAN Direct entity types are presented in the commonPerfData,\n    * if so then vSAN direct monitoring is supported\n    */\n   static isVsanDirectSupported(commonPerfData: PerfMonitorCommonPropsData): boolean {\n      return commonPerfData.entityTypes[PerfChartDataConstants.CLUSTER_VSAN_DIRECT_ENTITY] &&\n            commonPerfData.entityTypes[PerfChartDataConstants.HOST_VSAN_DIRECT_ENTITY];\n   }\n\n   /**\n    * Get PerfMonitorViewType for only supported performance monitoring items.\n    * @private\n    */\n   static getSupportedPerfViews(objectType: string, commonPerfData: PerfMonitorCommonPropsData)\n         : PerfMonitorViewType[] {\n      const remoteClusterTreeNodes: TreeNode[] =\n            PerformanceUtils.getRemoteClustersTreeNodes(commonPerfData.mountedRemoteDatastores);\n      let availViews: PerfMonitorViewType[] = null;\n\n      const isIscsiSupported: boolean = commonPerfData.isIscsiServiceEnabled && !commonPerfData.isEmptyClusterForIscsi;\n\n      // whether the ioinsight is supported and user has Global.Diagnostics permission\n      const isIoInsightSupported: boolean =\n            commonPerfData.isIoInsightSupported && commonPerfData.hasIoInsightViewPrivilege;\n\n      switch (objectType) {\n         case ManagedObjectUtils.CLUSTER:\n            if (commonPerfData.isComputeOnlyCluster) {\n               availViews = [PerfMonitorViewType.CLUSTER_COMPUTE_ONLY_VM_REMOTE_CONSUMPTION];\n               break;\n            }\n            availViews = [PerfMonitorViewType.CLUSTER_VM_CONSUMPTION];\n            if (remoteClusterTreeNodes && remoteClusterTreeNodes.length) {\n               availViews.push(PerfMonitorViewType.CLUSTER_VM_REMOTE_CONSUMPTION);\n            }\n            availViews.push(PerfMonitorViewType.CLUSTER_BACKEND);\n            if (isIscsiSupported) {\n               availViews.push(PerfMonitorViewType.CLUSTER_ISCSI);\n            }\n            if (commonPerfData.isFileServiceEnabled) {\n               availViews.push(PerfMonitorViewType.CLUSTER_FILE_SERVICE);\n            }\n            if (isIoInsightSupported) {\n               availViews.push(PerfMonitorViewType.CLUSTER_IO_INSIGHT);\n            }\n            if (commonPerfData.isPmemManagedByVsan) {\n               availViews.push(PerfMonitorViewType.CLUSTER_PMEM);\n            }\n            if (PerformanceSupportUtil.isVsanDirectSupported(commonPerfData)) {\n               availViews.push(PerfMonitorViewType.CLUSTER_VSAN_DIRECT);\n            }\n            break;\n         case ManagedObjectUtils.HOST:\n            availViews = [\n               PerfMonitorViewType.HOST_VM_CONSUMPTION,\n               PerfMonitorViewType.HOST_BACKEND,\n               PerfMonitorViewType.HOST_DISK,\n               PerfMonitorViewType.HOST_PHYSICAL_ADAPTER,\n               PerfMonitorViewType.HOST_VIRTUAL_ADAPTER,\n            ];\n            if (isIscsiSupported) {\n               availViews.push(PerfMonitorViewType.HOST_ISCSI);\n            }\n            if (isIoInsightSupported) {\n               availViews.push(PerfMonitorViewType.HOST_IO_INSIGHT);\n            }\n            if (PerformanceSupportUtil.isVsanDirectSupported(commonPerfData)) {\n               availViews.push(PerfMonitorViewType.HOST_VSAN_DIRECT);\n            }\n            if (commonPerfData.isPmemManagedByVsan) {\n               availViews.push(PerfMonitorViewType.HOST_PMEM);\n            }\n            break;\n         case ManagedObjectUtils.VM:\n            availViews = [PerfMonitorViewType.VM_CONSUMPTION, PerfMonitorViewType.VM_VIRTUAL_DISK];\n            break;\n         default:\n            throw new Error(\"Unsupported object type: \" + objectType);\n      }\n      return availViews;\n   }\n}\n","<vsan-light-info-prompt\n      [title]=\"title\">\n   <div class=\"dialog-container\">\n      <vsan-consolidated-vm-selector [entities]=\"consolidatedEntitiesData.entities\"\n                                     [entityVisibilityStateMap]=\"consolidatedEntitiesData.entityIdentifierToVisibility\"\n                                     (entitySelect)=\"onEntitySelect($event)\"\n                                     (entitiesReady)=\"onEntitiesReady($event)\">\n      </vsan-consolidated-vm-selector>\n\n      <vsan-perf-detail-charts id=\"single-entity-data-panel\"\n                               [commonPerfData]=\"commonPerfData\"\n                               [consolidatedEntitiesData]=\"consolidatedEntitiesData\"\n                               [visibleGraphId]=\"visibleGraphId\"\n                               [isAskVmwareLinkVisible]=\"false\"\n                               [showHeaderSection]=\"false\">\n      </vsan-perf-detail-charts>\n   </div>\n</vsan-light-info-prompt>","/* Copyright 2017 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {MetricColObj} from \"./metric-col-obj\";\nimport {BasePerfEntity} from \"./base-perf-entity\";\n\n/**\n * This is the object to represent the multi entities data collection\n */\nexport class PerfEntities {\n   /**\n    * describe how the object metrics like\n    */\n   public col: MetricColObj;\n\n   public objs: BasePerfEntity[];\n}\n\n","/* Copyright 2017 VMware, Inc. All rights reserved. -- VMware Confidential */\n/**\n * the object to describe the metrics column object of the multi entities perf chart page\n */\nexport class MetricColObj {\n   constructor(public label: string, // the column header text\n         // the attribute name of the column\n         public key: MetricKeyType) {}\n}\n\nexport enum MetricKeyType {\n   DISK_TYPE = <any>\"diskType\",\n   DISK_GROUP = <any>\"diskGroup\",\n   ENTITY_NAME = <any>\"entityName\",\n   VMDK_PATH = <any>\"vmdk\"\n}","<div class=\"prompt-header\" *ngIf=\"title\">\n   <header class=\"title-container\">\n      <h3 id=\"vsan-dialog-title\" class=\"title\" vsan-show-title>{{title}}</h3>\n      <span class=\"separator\" *ngIf=\"subtitle\"></span>\n      <span class=\"subtitle\" vsan-show-title *ngIf=\"subtitle\">{{subtitle}}</span>\n   </header>\n   <button id=\"closeBtn\" class=\"close\" (click)=\"cancel()\"\n           [attr.aria-label]=\"'vsan.common.closeDialog'|localized: title\">\n      <clr-icon shape=\"close\" size=\"24\" title=\"{{'vsan.common.srMessage.close' | localized}}\"></clr-icon>\n   </button>\n</div>\n\n<div id=\"prompt-body\" class=\"prompt-body\" role=\"group\" aria-labelledby=\"vsan-dialog-title\">\n\n   <vsan-validation *ngIf=\"alertMessages && alertMessages.length > 0\"\n                    [(alerts)]=\"alertMessages\"\n                    [alertType]=\"alertType\"\n                    [allowClose]=\"allowAlertClose\"\n                    (onClosed)=\"clearAlerts()\">\n   </vsan-validation>\n\n   <span *ngIf=\"blockContent\" class=\"busy-backdrop\">\n      <!-- When busy, but no text to display, only show spinner-->\n      <span *ngIf=\"!busyText\" class=\"spinner spinner-lg central-spinner\"></span>\n\n      <!-- Otherwise display progress bar with text -->\n      <div *ngIf=\"busyText\" class=\"busy-indicator-container\">\n          <div class=\"progress loop\" id=\"busy-indicator\">\n              <progress></progress>\n          </div>\n      </div>\n      <div>{{busyText}}</div>\n   </span>\n\n   <!-- The View -->\n   <ng-content id=\"content\"></ng-content>\n</div>\n\n<div id=\"footer\" class=\"footer button-container\">\n   <div class=\"button-container\">\n      <button id=\"primary-btn\"\n              *ngIf=\"confirmText\"\n              class=\"btn btn-primary action-btn {{confirmStyle}}\"\n              (click)=\"confirm()\"\n              [disabled]=\"blockButton\">\n         {{ confirmText | localized }}\n      </button>\n      <button id=\"secondary-btn\"\n              *ngIf=\"cancelText\"\n              class=\"btn action-btn\"\n              (click)=\"cancel()\"\n              [attr.aria-label]=\"'vsan.common.closeDialog' | localized: title\">\n         {{ cancelText | localized }}\n      </button>\n   </div>\n   <div class=\"button-container\">\n      <button id=\"additional-btn\"\n              *ngIf=\"additionalButtonText\"\n              class=\"btn action-btn\"\n              [disabled]=\"blockAdditionalButton\"\n              (click)=\"additionalAction()\">\n        {{ additionalButtonText | localized }}\n      </button>\n   </div>\n</div>\n","import {PerfTopContributorsEntityType} from '@generated/perf-top-contributors-entity-type';\n\nexport interface PerfTopContributorsQuerySpec {\n\n   entity: PerfTopContributorsEntityType;\n   metricId: string;\n   timeStamp: number;\n} //class PerfTopContributorsQuerySpec\n\nexport module PerfTopContributorsQuerySpec{\nexport class Factory {\n\n   static create = (entity: PerfTopContributorsEntityType, metricId: string, timeStamp: number): PerfTopContributorsQuerySpec => {\n      return { entity: entity, metricId: metricId, timeStamp: timeStamp, };\n   }\n\n\n} //class Factory\n\n} //module PerfTopContributorsQuerySpec\n","/* Copyright 2019-2022 VMware, Inc. All rights reserved. -- VMware Confidential */\n\nexport class VsanSignpostUtil {\n   // The signpost's arrow is 12px in Clarity 2.2.0\n   private static readonly ARROW_SIZE: number = 12;\n   // The modal left or right padding is 24px.\n   private static readonly MODAL_HORIZONTAL_PADDING: number = 24;\n   // The modal top padding and title height or the bottom padding and footer height is 72px.\n   private static readonly MODAL_VERTICAL_PADDING: number = 72;\n\n   private static readonly TOP: string = \"top\";\n   private static readonly LEFT: string = \"left\";\n   private static readonly RIGHT: string = \"right\";\n   private static readonly BOTTOM: string = \"bottom\";\n   private static readonly MIDDLE: string = \"middle\";\n\n   static getPosition(elementId: string, signpostWidth: number, signpostHeight: number,\n         isInModal: boolean = false): string {\n      const elementBox: DOMRect = document.getElementById(elementId).getBoundingClientRect();\n      const modalVerticalPadding: number = isInModal\n            ? VsanSignpostUtil.MODAL_VERTICAL_PADDING\n            : 0;\n      const verticalPosition: string = VsanSignpostUtil.getVerticalPosition(\n            elementBox, signpostHeight + VsanSignpostUtil.ARROW_SIZE + modalVerticalPadding);\n      const modalHorizontalPadding: number = isInModal\n            ? VsanSignpostUtil.MODAL_HORIZONTAL_PADDING\n            : 0;\n      const horizontalPosition: string = VsanSignpostUtil.getHorizontalPosition(\n            elementBox, signpostWidth + VsanSignpostUtil.ARROW_SIZE + modalHorizontalPadding);\n      return `${verticalPosition}-${horizontalPosition}`;\n   }\n\n   private static getVerticalPosition(elementBox: ClientRect, elementHeight: number): string {\n      const bodyBox: DOMRect = document.body.getBoundingClientRect();\n      if (elementBox.bottom + elementHeight < bodyBox.height) {\n         // There is enough space to fit the signpost below the trigger\n         return VsanSignpostUtil.BOTTOM;\n      } else if (elementBox.top - elementHeight > 0) {\n         return VsanSignpostUtil.TOP;\n      } else {\n         return VsanSignpostUtil.MIDDLE;\n      }\n   }\n\n   private static getHorizontalPosition(elementBox: ClientRect, elementWidth: number): string {\n      const bodyBox: DOMRect = document.body.getBoundingClientRect();\n      if (elementBox.right + elementWidth < bodyBox.width) {\n         // There is enough space to fit the signpost on the right side of the view\n         return VsanSignpostUtil.RIGHT;\n      } else if (elementBox.left - elementWidth > 0) {\n         return VsanSignpostUtil.LEFT;\n      } else {\n         return VsanSignpostUtil.MIDDLE;\n      }\n   }\n}","/* Copyright 2020-2022 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {AfterViewInit, Component, Input, OnChanges, OnDestroy, OnInit, ViewChild} from \"@angular/core\";\nimport {\n   ChartMetricSelectionData,\n   ChartPlotLineSelectionData,\n} from \"@component/chart/model/chart-plot-line-selection.data\";\nimport {PerfChartDataConstants, PerfChartUtil} from \"@component/chart/performance/perf-chart-util\";\nimport {PerfExportData} from \"@component/chart/performance/perf-export-data\";\nimport {PickerType} from \"@component/datetime-picker/picker-type\";\nimport {RangePickerState} from \"@component/datetime-picker/time-range-picker/range-picker-state\";\nimport {VsanTimeRangePickerComponent} from \"@component/datetime-picker/time-range-picker/time-range-picker.component\";\nimport {StorageGroupIdentifier} from \"@component/diskmgmt/model/storage-group-identifier\";\nimport {InventoryNode} from \"@component/inventory/inventory-node\";\nimport {UnavailableViewSpec} from \"@component/unavailable-view/unavailable-view-spec\";\nimport {InventoryEntryData} from \"@generated/inventory-entry-data\";\nimport {PerfMonitorCommonPropsData} from \"@generated/perf-monitor-common-props-data\";\nimport {PerfTimeRangeData} from \"@generated/perf-time-range-data\";\nimport {PerfTopContributorsEntity} from \"@generated/perf-top-contributors-entity\";\nimport {PerfTopContributorsEntityType} from \"@generated/perf-top-contributors-entity-type\";\nimport {PerfTopContributorsQuerySpec} from \"@generated/perf-top-contributors-query-spec\";\nimport {VsanPerfPropertyProvider} from \"@generated/vsan-perf-property-provider\";\nimport {FullTimeRangeSelectionData} from \"@model/full-time-range-selection.data\";\nimport {DiskManagementNavigationContext} from \"@navigation/context/disk-management-navigation-context\";\nimport {PerformanceContext} from \"@navigation/context/performance-context\";\nimport {NavigationService, PlatformExtension} from \"@navigation/navigation.service\";\nimport {ClusterComputeResource} from \"@service/client/dataservice/data-service-property\";\nimport {DataServiceClient} from \"@service/client/dataservice/data-service.service\";\nimport {RefreshHandler} from \"@service/global-refresh.service\";\nimport {ManagedObject, ManagedObjectUtils} from \"@service/managed-object\";\nimport {AskVmwareId} from '@service/navigation/model/ask-vmware-id';\nimport {PerformancePersistenceService} from \"@service/performance-persistence.service\";\nimport {Icon} from \"@util/icon\";\nimport {ModalBuilder} from \"@util/modal-builder\";\nimport {ReferenceWatcher} from \"@util/reference-watcher\";\nimport {TimeRangeUtil} from \"@util/time-range-util\";\nimport {VsanDateTimeUtils} from \"@util/vsan-dateteime-util\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {from, Subscription} from \"rxjs\";\nimport {PlacementDetailsDialogContext} from \"../../virtualobjects/view/placement-details-dialog-context\";\nimport {BasePerfEntity} from \"../model/base-perf-entity\";\nimport {PerfMonitorViewType} from \"../model/perf-monitor-view-type.model\";\nimport {TopContributorEntity} from \"../model/top-contributor-entity\";\nimport {BaseEntityDataPerfComponent} from \"./base-entity-data-perf.component\";\nimport {ConsolidatedContextData} from \"./consolidated-context.data\";\nimport {VsanConfigService} from \"@generated/vsan-config-service\";\n\n@Component({\n   selector: \"vsan-top-contributors-data-perf\",\n   templateUrl: \"top-contributors-data-perf.html\",\n   styleUrls: [\"top-contributors-data-perf.scss\"],\n   providers: [ReferenceWatcher],\n})\nexport class VsanTopContributorsDataPerfComponent extends BaseEntityDataPerfComponent\n      implements OnChanges, OnDestroy, OnInit, AfterViewInit {\n\n   readonly DEFAULT_ITEMS_PER_PAGE: number = 10;\n   readonly MAX_SELECTED_TOP_CONTRIBUTORS: number = 10;\n   readonly AskVmwareId: typeof AskVmwareId = AskVmwareId;\n\n   private topContributorsSubscription: Subscription;\n\n   private static readonly TIMESTAMP_OPTIONS: Intl.DateTimeFormatOptions = {\n      year: VsanDateTimeUtils.DEFAULT_YEAR_FORMAT,\n      month: VsanDateTimeUtils.DEFAULT_MONTH_FORMAT,\n      day: VsanDateTimeUtils.DEFAULT_DAY_FORMAT,\n      hour: VsanDateTimeUtils.DEFAULT_HOUR_FORMAT,\n      minute: VsanDateTimeUtils.DEFAULT_MINUTE_FORMAT,\n   };\n\n   errorMsg: string;\n   propertiesLoading: boolean = false;\n   clusterChartLoading: boolean = false;\n   topContributorsLoading: boolean = false;\n\n   clusterGraphs: Map<string, string> = new Map<string, string>([\n      [\"latency\", \"com.vmware.vsan.perf.graph.cluster-domclient.latency\"],\n      [\"iops\", \"com.vmware.vsan.perf.graph.cluster-domclient.iops\"],\n      [\"throughput\", \"com.vmware.vsan.perf.graph.cluster-domclient.throughput\"],\n   ]);\n\n   diskGroupGraphs: Map<string, string> = new Map<string, string>([\n      [\"latency\", \"com.vmware.vsan.perf.graph.disk-group.latencyFrontend\"],\n      [\"iops\", \"com.vmware.vsan.perf.graph.disk-group.iopsFrontend\"],\n      [\"throughput\", \"com.vmware.vsan.perf.graph.disk-group.throughputFrontend\"],\n   ]);\n\n   vmGraphs: Map<string, string> = new Map<string, string>([\n      [\"latency\", \"com.vmware.vsan.perf.graph.vm.latency\"],\n      [\"iops\", \"com.vmware.vsan.perf.graph.vm.iops\"],\n      [\"throughput\", \"com.vmware.vsan.perf.graph.vm.throughput\"],\n   ]);\n\n   @Input()\n   commonPerfData: PerfMonitorCommonPropsData;\n\n   @Input()\n   currentView: PerfMonitorViewType;\n\n   @Input()\n   initialEntityId: string;\n\n   selectedClusterMetric: string;\n\n   @Input()\n   set selectedClusterGraph(value: string) {\n      if (!value) {\n         return;\n      }\n      this.selectedClusterMetric = this.getKey(value, this.clusterGraphs);\n      this.updateSelectedTopContributorsGraphs();\n   }\n\n   get selectedClusterGraph(): string {\n      return this.clusterGraphs.get(this.selectedClusterMetric);\n   }\n\n   dateError: string;\n   _selectedTimePoint: string;\n   selectedTimePointDate: Date;\n\n   @Input()\n   set selectedTimePoint(value: string) {\n      this._selectedTimePoint = value;\n      this.selectedTimePointDate = VsanDateTimeUtils.convertDateToIso8601(value);\n   }\n\n   get selectedTimePoint(): string {\n      return this._selectedTimePoint;\n   }\n\n   private _selectedEntityType: PerfTopContributorsEntityType = PerfTopContributorsEntityType.VIRTUAL_MACHINE;\n   get selectedEntityType(): PerfTopContributorsEntityType {\n      return this._selectedEntityType;\n   }\n\n   set selectedEntityType(value: PerfTopContributorsEntityType) {\n      this._selectedEntityType = value;\n      this.selectedTopContributorItems = [];\n      this.retrieveTopContributors();\n   }\n\n   // the two flags are needed, because the time picker and the chart's plot line should be synchronized. We should\n   // request the top contributors data only on user input and not when the value of some of them is updated\n   // because the value change of the other.\n   private updateTopContributorsOnPlotLineClick: boolean = false;\n   private updateTopContributorsOnTimePickerClick: boolean = false;\n\n   topContributorsData: TopContributorEntity[] = [];\n   currentEntityId: string;\n   clusterName: string;\n   clusterIcon: string;\n   private selectedVmGraph: string;\n   private selectedDiskGroupGraph: string;\n   sortByMetric: ChartMetricSelectionData;\n   selectedReadMetric: ChartMetricSelectionData;\n   selectedWriteMetric: ChartMetricSelectionData;\n   selectedTopContributorItems: TopContributorEntity[] = [];\n\n   perfTopContributorsEntityTypeKeys: string[] = [];\n   PerfTopContributorsEntityType: typeof PerfTopContributorsEntityType = PerfTopContributorsEntityType;\n   PerfChartUtil: typeof PerfChartUtil = PerfChartUtil;\n   UnavailableViewSpec: typeof UnavailableViewSpec = UnavailableViewSpec;\n   Array: typeof Array = Array;\n   PickerType: typeof PickerType = PickerType;\n   Icon: typeof Icon = Icon;\n\n   @ViewChild(VsanTimeRangePickerComponent)\n   timeRangePickerComponent: VsanTimeRangePickerComponent;\n   minDate: Date;\n   maxDate: Date;\n\n   constructor(private dataService: DataServiceClient,\n         private perfPersistenceService: PerformancePersistenceService,\n         private refWatcher: ReferenceWatcher,\n         private perfPropProvider: VsanPerfPropertyProvider,\n         private navigationService: NavigationService,\n         private vsanConfigService: VsanConfigService) {\n      super();\n      this.refWatcher.watchGlobalRefreshSubscription(VsanTopContributorsDataPerfComponent.prototype.constructor.name);\n      // by default the latency metric is selected\n      this.selectedClusterMetric = this.clusterGraphs.keys().next().value;\n\n      this.updateSelectedTopContributorsGraphs();\n   }\n\n   async ngOnInit(): Promise<void> {\n      const isVsanMaxEnabled: boolean = await this.vsanConfigService.isVsanMaxEnabled(ManagedObject.contextObject);\n      if (isVsanMaxEnabled) {\n         this.perfTopContributorsEntityTypeKeys = Object.values(PerfTopContributorsEntityType)\n               .filter(type => type !== PerfTopContributorsEntityType.DISK_GROUP.toString());\n      } else {\n         this.perfTopContributorsEntityTypeKeys = Object.values(PerfTopContributorsEntityType);\n      }\n   }\n\n   ngAfterViewInit(): void {\n      this.initializePersistedSelections();\n   }\n\n   ngOnChanges(): void {\n      this.fetch();\n   }\n\n   @RefreshHandler\n   fetch(): void {\n      this.errorMsg = null;\n      this.propertiesLoading = true;\n\n      this.dataService\n            .getProperties([\n                     ClusterComputeResource.configurationEx.vsanConfigInfo.defaultConfig.uuid,\n                     ClusterComputeResource.name,\n                  ],\n                  ManagedObject.contextObject)\n            .then(this.handleProperty)\n            .catch(this.handleError);\n   }\n\n   handleError = (errMsg: string): void => {\n      this.errorMsg = errMsg;\n      this.propertiesLoading = false;\n   };\n\n   ngOnDestroy(): void {\n      this.unsubscribeTopContributorsSubscription();\n   }\n\n   private handleProperty = (properties: Map<string, any>): void => {\n      this.propertiesLoading = false;\n      this.extraDesc = null;\n      this.currentEntityId = properties.get(ClusterComputeResource.configurationEx.vsanConfigInfo.defaultConfig.uuid);\n      this.clusterName = properties.get(ClusterComputeResource.name);\n      this.clusterIcon = ManagedObjectUtils.getObjectTypeIcon(ManagedObject.contextObject);\n      this.fetchChartsData();\n   };\n\n   fetchChartsData(): void {\n      if (this.chartsView && this.commonPerfData.entityTypes &&\n            this.commonPerfData.clusterRef && this.currentEntityId && this.currentTimeRange) {\n         this.chartsView.chartMetrics = null;\n         this.topContributorsData = [];\n         this.currentEntity = this.createBasePerfEntity(PerfChartDataConstants.CLUSTER_VM_CONSUMPTION_ENTITY);\n         this.onEntitySelect(this.currentEntity);\n      }\n   }\n\n   onEntitySelect(entity: BasePerfEntity): void {\n      this.createDefaultMetrics();\n      this.chartsView.entity = this.toggleHighResolutionSpecName(this.currentEntity);\n      this.clusterChartLoading = true;\n      this.chartsView.queryChartsDataByTimeRange(this.currentTimeRange);\n   }\n\n   private createBasePerfEntity = (entityTypeId: string): BasePerfEntity => {\n      const entity: BasePerfEntity = new BasePerfEntity();\n      entity.entityId = entityTypeId;\n      entity.entityUuid = this.currentEntityId;\n      entity.configSpec = this.commonPerfData.entityTypes[entityTypeId];\n      return entity;\n   };\n\n   private createDefaultMetrics(): void {\n      const clusterGraph: any /* VsanPerfGrap */ =\n            this.currentEntity.configSpec.graphs.find((graph: any) => graph.id === this.selectedClusterGraph);\n      const readMetric: any /* VsanPerfMetricId */ =\n            clusterGraph.metrics.find((metric: any) => metric.label.toLowerCase().includes(\"read\"));\n      const writeMetric: any /* VsanPerfMetricId */ =\n            clusterGraph.metrics.find((metric: any) => metric.label.toLowerCase().includes(\"write\"));\n\n      this.selectedReadMetric = new ChartMetricSelectionData();\n      this.selectedReadMetric.metricKey = readMetric.label;\n      this.selectedReadMetric.metricLabel = readMetric.name;\n\n      this.selectedWriteMetric = new ChartMetricSelectionData();\n      this.selectedWriteMetric.metricKey = writeMetric.label;\n      this.selectedWriteMetric.metricLabel = writeMetric.name;\n\n      this.sortByMetric = this.useReadMetricToSortBy()\n            ? this.selectedReadMetric\n            : this.selectedWriteMetric;\n   }\n\n   private useReadMetricToSortBy(): boolean {\n      return !this.sortByMetric || this.sortByMetric.metricKey === this.selectedReadMetric.metricKey;\n   }\n\n   private initializePersistedSelections(): void {\n      if (this.timeRangePickerComponent == null) {\n         this.refWatcher.setTimeout(() => {\n            this.initializePersistedSelections();\n         }, 1000);\n         return;\n      }\n\n      const persistedSelection: FullTimeRangeSelectionData =\n            this.perfPersistenceService.getPersistedSelection();\n\n      if (this.currentTimeRange) {\n         const currentPickerState: RangePickerState = this.currentPickerState\n               ? this.currentPickerState : RangePickerState.LAST_X_HOURS;\n         this.timeRangePickerComponent.setTimerange(this.currentTimeRange, currentPickerState);\n         this.perfPersistenceService.saveSelection(this.currentTimeRange, currentPickerState);\n      } else if (persistedSelection != null) {\n         const timeRange: PerfTimeRangeData = persistedSelection.timeRange;\n         const state: RangePickerState = persistedSelection.state;\n\n         if (this.timeRangePickerComponent.currentTimeRange.from !== timeRange.from ||\n               this.timeRangePickerComponent.currentTimeRange.to !== timeRange.to ||\n               this.timeRangePickerComponent.currentPickerState !== state) {\n            this.updateCurrentTimeRange(timeRange, state);\n            this.timeRangePickerComponent.setTimerange(timeRange, state);\n         }\n      }\n   }\n\n   onPerfTimeRangeChange(timeRange?: PerfTimeRangeData, isOnInit?: boolean): void {\n      if (TimeRangeUtil.areEqual(timeRange, this.currentTimeRange)) {\n         return;\n      }\n      this.updateCurrentTimeRange(timeRange, this.timeRangePickerComponent.currentPickerState);\n\n      if (isOnInit && !this.isPersistedSelectionInitialized()) {\n         return;\n      }\n\n      this.currentTimeRange = timeRange;\n\n      if (!isOnInit) {\n         this.perfPersistenceService.saveSelection(timeRange, this.timeRangePickerComponent.currentPickerState);\n         this.selectedTimePoint = \"\";\n         this.dateError = \"\";\n         this.fetchChartsData();\n      }\n   }\n\n   updateCurrentTimeRange(timeRange: PerfTimeRangeData, state: RangePickerState): void {\n      if (timeRange) {\n         this.currentTimeRange = timeRange;\n      }\n      if (state != null) {\n         this.currentPickerState = state;\n      }\n   }\n\n   onPlotLineChanged(selectionData: ChartPlotLineSelectionData): void {\n      this.dateError = \"\";\n      this.selectedReadMetric =\n            selectionData.seriesValues.find((series: ChartMetricSelectionData) =>\n                  series.metricKey.toLowerCase().includes(\"read\"));\n      this.selectedWriteMetric =\n            selectionData.seriesValues.find((series: ChartMetricSelectionData) =>\n                  series.metricKey.toLowerCase().includes(\"write\"));\n      if (this.sortByMetric) {\n         this.sortByMetric = this.sortByMetric.metricKey === this.selectedReadMetric.metricKey ?\n               this.selectedReadMetric : this.selectedWriteMetric;\n      } else {\n         this.sortByMetric = this.selectedReadMetric;\n      }\n\n      if (this.updateTopContributorsOnTimePickerClick) {\n         return;\n      }\n      this.updateTopContributorsOnPlotLineClick = true;\n\n      this.selectedTimePoint = selectionData.timePoint;\n      this.retrieveTopContributors();\n   }\n\n   private getSelectedMetricId(): string {\n      const startIndex: number = this.sortByMetric.metricKey.indexOf(\"Avg\");\n\n      if (startIndex > -1) {\n         return this.sortByMetric.metricKey.substring(0, startIndex) +\n               this.sortByMetric.metricKey.substring(startIndex + 3);\n      } else {\n         return this.sortByMetric.metricKey;\n      }\n   }\n\n   async retrieveTopContributors(): Promise<void> {\n      if (!this.selectedTimePoint) {\n         return;\n      }\n\n      this.unsubscribeTopContributorsSubscription();\n      this.errorMsg = null;\n      this.topContributorsData = [];\n\n      const spec: PerfTopContributorsQuerySpec =\n            PerfTopContributorsQuerySpec.Factory.create(this.selectedEntityType, this.getSelectedMetricId(),\n                  new Date(VsanDateTimeUtils.convertDateToIso8601(this.selectedTimePoint)).getTime());\n\n      this.topContributorsLoading = true;\n      this.topContributorsSubscription =\n            from(this.perfPropProvider.getTopContributors(ManagedObject.contextObject, spec))\n                  .subscribe(this.handleTopContributors,\n                        this.handleTopContributorsError,\n                        () => {\n                           this.topContributorsLoading = false;\n                           this.updateTopContributorsOnPlotLineClick = false;\n                           this.updateTopContributorsOnTimePickerClick = false;\n                        },\n                  );\n   }\n\n   private handleTopContributorsError = (errMsg: string): void => {\n      this.errorMsg = errMsg;\n      this.topContributorsLoading = false;\n   };\n\n   private handleTopContributors = (data: PerfTopContributorsEntity[]): void => {\n      this.topContributorsData = data\n            .filter((topContributor: PerfTopContributorsEntity) =>\n                  topContributor.entity && !VsanUiUtils.isEmpty(topContributor.metricsSeries))\n            .map((topContributor: PerfTopContributorsEntity) => TopContributorEntity.fromVmodl(\n                  topContributor, this.selectedReadMetric.metricLabel, this.selectedWriteMetric.metricLabel))\n            .sort(this.sortBySelectedMetric);\n   };\n\n   private sortBySelectedMetric = (a: TopContributorEntity, b: TopContributorEntity): number => {\n      if (this.sortByMetric === this.selectedWriteMetric) {\n         return a.writeMetricValue <= b.writeMetricValue ? 1 : -1;\n      } else {\n         return a.readMetricValue <= b.readMetricValue ? 1 : -1;\n      }\n   };\n\n   private unsubscribeTopContributorsSubscription(): void {\n      if (this.topContributorsSubscription) {\n         this.topContributorsSubscription.unsubscribe();\n         this.topContributorsSubscription = null;\n      }\n   }\n\n   selectedClusterMetricChanged(): void {\n      this.updateSelectedTopContributorsGraphs();\n      this.sortByMetric = null;\n      this.createDefaultMetrics();\n      this.topContributorsData = [];\n      this.selectedTopContributorItems = [];\n   }\n\n   private updateSelectedTopContributorsGraphs(): void {\n      this.selectedVmGraph = this.vmGraphs.get(this.selectedClusterMetric);\n      this.selectedDiskGroupGraph = this.diskGroupGraphs.get(this.selectedClusterMetric);\n   }\n\n   createTopContributorPerfEntity(topContributor: TopContributorEntity): BasePerfEntity {\n      const entity: BasePerfEntity = new BasePerfEntity();\n      entity.entityId = this.selectedEntityType === PerfTopContributorsEntityType.VIRTUAL_MACHINE ?\n            PerfChartDataConstants.VM_CONSUMPTION_ENTITY :\n            PerfChartDataConstants.HOST_DISK_GROUP_ENTITY;\n      entity.entityUuid = topContributor.entityRefId.substring(topContributor.entityRefId.indexOf(\":\") + 1);\n      entity.configSpec = this.commonPerfData.entityTypes[entity.entityId];\n      return entity;\n   }\n\n   getTopContributorGraph(): string {\n      return this.selectedEntityType === PerfTopContributorsEntityType.VIRTUAL_MACHINE ?\n            this.selectedVmGraph : this.selectedDiskGroupGraph;\n   }\n\n   getGraphDefinition(): any {\n      const entityId: string = this.selectedEntityType === PerfTopContributorsEntityType.VIRTUAL_MACHINE ?\n            PerfChartDataConstants.VM_CONSUMPTION_ENTITY :\n            PerfChartDataConstants.HOST_DISK_GROUP_ENTITY;\n      return this.commonPerfData.entityTypes[entityId].graphs\n            .find((graph: any) => graph.id === this.getTopContributorGraph());\n   }\n\n   allLoadersCompleted(): boolean {\n      return !this.propertiesLoading && !this.clusterChartLoading && !this.topContributorsLoading;\n   }\n\n   getEntityTypeLabel(type: PerfTopContributorsEntityType): string {\n      switch (type) {\n         case PerfTopContributorsEntityType.DISK_GROUP:\n            return VsanUiUtils.getString(\n                  \"vsan.monitor.cluster.performance.topContributors.entity.type.disk_group\");\n         case PerfTopContributorsEntityType.VIRTUAL_MACHINE:\n            return VsanUiUtils.getString(\n                  \"vsan.monitor.cluster.performance.topContributors.entity.type.virtual_machine\");\n      }\n   }\n\n   private isPersistedSelectionInitialized(): boolean {\n      const persistedSelection: FullTimeRangeSelectionData =\n            this.perfPersistenceService.getPersistedSelection();\n\n      // If there is no persisted selection. it's replaced by view's default one\n      if (persistedSelection == null) {\n         return true;\n      }\n\n      return this.currentTimeRange === persistedSelection.timeRange;\n   }\n\n   onDateTimeChanged(date: Date): void {\n      if (this.updateTopContributorsOnPlotLineClick || !this.isDateValid(date)) {\n         return;\n      }\n\n      this.updateTopContributorsOnTimePickerClick = true;\n      this.selectedTimePointDate = date;\n      // The value returned by getUTCMonth is an integer between 0 and 11 corresponding to the month.\n      const month: number = date.getUTCMonth() + 1;\n      // The format of the chart's selected time point, i.e. the timestamps returned from the backend is:\n      // yyyy-mm-dd hh:mm:ss. The numbers must be in two digits.\n      // And the seconds in perf. timestamps are always 0.\n      this._selectedTimePoint =\n            date.getUTCFullYear() + \"-\" +\n            this.convertToTwoDigits(month) + \"-\" +\n            this.convertToTwoDigits(date.getUTCDate()) + \" \" +\n            this.convertToTwoDigits(date.getUTCHours()) + \":\" + this.convertToTwoDigits(date.getUTCMinutes()) + \":00\";\n      this.retrieveTopContributors();\n   }\n\n   private isDateValid(date: Date): boolean {\n      this.dateError = \"\";\n\n      if (!date) {\n         this.dateError = VsanUiUtils.getString(\n               \"vsan.monitor.cluster.performance.topContributors.timePoint.empty.error\");\n         return false;\n      }\n\n      if (date < this.minDate || date > this.maxDate) {\n         this.dateError = VsanUiUtils.getString(\n               \"vsan.monitor.cluster.performance.topContributors.timePoint.incorrect.error\",\n               VsanDateTimeUtils.formatDate(this.minDate, VsanTopContributorsDataPerfComponent.TIMESTAMP_OPTIONS),\n               VsanDateTimeUtils.formatDate(this.maxDate, VsanTopContributorsDataPerfComponent.TIMESTAMP_OPTIONS));\n         return false;\n      }\n      return true;\n   }\n\n   private convertToTwoDigits(value: number): string {\n      if (value < 10) {\n         return \"0\" + value.toString();\n      }\n\n      return value.toString();\n   }\n\n   viewFullVMPerformance(moRef: ManagedObject): void {\n      this.navigationService.navigateTo(PlatformExtension.VM_PERFORMANCE, moRef);\n   }\n\n   viewFullHostPerformance(topContributorEntity: TopContributorEntity): void {\n      const props: PerformanceContext = {\n         viewType: PerfMonitorViewType[PerfMonitorViewType.HOST_DISK],\n         entityUuid: topContributorEntity.entity.name,\n      };\n\n      this.navigationService.navigateTo(PlatformExtension.HOST_PERFORMANCE, topContributorEntity.parent.moRef, props);\n   }\n\n   viewPhysicalPlacement(topContributorEntity: TopContributorEntity): void {\n      const diskGroup: StorageGroupIdentifier =\n            new StorageGroupIdentifier(topContributorEntity.diskGroupType, topContributorEntity.entity.name);\n      const context: DiskManagementNavigationContext = {\n         hostRef: topContributorEntity.parent.moRef,\n         diskGroup: diskGroup,\n         isVirtualObjectsView: true,\n      };\n      this.navigationService.navigateTo(PlatformExtension.DISK_MANAGEMENT, ManagedObject.contextObject, context);\n   }\n\n   showCombinedChartsDialog(): void {\n      const context: ConsolidatedContextData = {\n         commonPerfData: this.commonPerfData,\n         visibleGraphId: this.getTopContributorGraph(),\n         timePickerRange: this.currentTimeRange,\n         virtualMachines: this.getSelectedVmInvNodes(),\n         entityType: this.selectedEntityType,\n      };\n\n      new ModalBuilder(\"performance/consolidatedVmDialog\")\n            .setSize(1200, 600)\n            .open(context);\n   }\n\n   showPhysicalPlacementDialog(): void {\n      const context: PlacementDetailsDialogContext = {\n         clusterRef: ManagedObject.contextObject,\n         isGrouped: true,\n         selectedVirtualMachines: this.getSelectedVms(),\n      };\n\n      new ModalBuilder(\"virtualObjects/physicalPlacementDialog\")\n            .setDimensions(ModalBuilder.WIZARD_XL)\n            .open(context);\n   }\n\n   /**\n    * The top contributors table should be visible when cluster data loading is completed without errors, and we have\n    * selected time point for which to retrieve the top contributors\n    */\n   isTopContributorsVisible(): boolean {\n      return !this.propertiesLoading && !this.clusterChartLoading && !this.errorMsg && !!this.selectedTimePoint;\n   }\n\n   /**\n    * The time point unavailable view should be shown when all the cluster's data(property and chart data) is loaded\n    * without errors and there is no time point selected\n    */\n   isTimePointUnavailableViewVisible(): boolean {\n      return !this.selectedTimePoint && this.allLoadersCompleted() && !this.errorMsg;\n   }\n\n   /**\n    * The combined chart button is enabled when there up to 5 selected top contributors\n    */\n   isCombinedChartButtonEnabled(): boolean {\n      return this.selectedTopContributorItems.length > 1 &&\n            this.selectedTopContributorItems.length <= this.MAX_SELECTED_TOP_CONTRIBUTORS;\n   }\n\n   isPhysicalPlacementButtonEnabled(): boolean {\n      return !VsanUiUtils.isEmpty(this.selectedTopContributorItems) &&\n            this.selectedTopContributorItems.every(item => item.isVmOnVsanDatastore);\n   }\n\n   isFullPerformanceDisabled(topContributorItem: TopContributorEntity): boolean {\n      return !topContributorItem.isVmOnVsanDatastore &&\n            this.selectedEntityType === PerfTopContributorsEntityType.VIRTUAL_MACHINE;\n   }\n\n   getPhysicalPlacementButtonTooltip(): string {\n      if (!this.selectedTopContributorItems.length) {\n         return VsanUiUtils.getString(\n               \"vsan.monitor.cluster.performance.topContributors.view.physical.placement.tooltip\");\n      } else if (this.selectedTopContributorItems.some(item => !item.isVmOnVsanDatastore)) {\n         return VsanUiUtils.getString(\n               \"vsan.monitor.cluster.performance.topContributors.view.physical.placement.disabled\");\n      }\n   }\n\n   getSelectedMetricValue(metric: ChartMetricSelectionData): string {\n      return metric.value != null\n            ? PerfChartUtil.formatYAxisLabel(metric.value, this.getGraphDefinition(), false)\n            : VsanUiUtils.getString(\"vsan.na.label\");\n   }\n\n   allChartsLoaded(data: PerfExportData[]): void {\n      this.clusterChartLoading = false;\n      if (!VsanUiUtils.isEmpty(this.chartsView.graphsData)) {\n         const timeStamps: string[] = this.chartsView.graphsData[0].metrics.timeStamps;\n         // update the top contributors time picker's min and max date,\n         // to be bounded to the cluster's chart min/max timeStamps\n         const minTimeStamp: string = timeStamps[0];\n         const maxTimeStamp: string = timeStamps[timeStamps.length - 1];\n         this.minDate = VsanDateTimeUtils.convertDateToIso8601(minTimeStamp);\n         this.maxDate = VsanDateTimeUtils.convertDateToIso8601(maxTimeStamp);\n      } else {\n         // in case there is no graph's data, i.e. timestamps(which shouldn't happen) sets the min and max date to the\n         // current's time range min and max date\n         this.minDate = new Date(this.currentTimeRange.from - VsanDateTimeUtils.MINUTE_IN_MILLISECONDS);\n         this.maxDate = new Date(this.currentTimeRange.to);\n      }\n   }\n\n   private getSelectedVms(): ManagedObject[] {\n      return this.selectedTopContributorItems.map((item: TopContributorEntity) => item.entity.moRef);\n   }\n\n   private getSelectedVmInvNodes(): InventoryNode[] {\n      return this.selectedTopContributorItems.map(this.createVmInventoryNode);\n   }\n\n   private createVmInventoryNode(vmTopContributorItem: TopContributorEntity): InventoryNode {\n      const invData: InventoryEntryData = InventoryEntryData.Factory.create(\n            vmTopContributorItem.entity.moRef,\n            vmTopContributorItem.entity.name,\n            true, // isLeafNode\n            vmTopContributorItem.entity.primaryIconId,\n            true, // connected\n            false, // isDrsEnabled\n            false,  // isDisabled\n            []); // children\n      return new InventoryNode(invData);\n   }\n\n   private getKey(val: string, map: Map<string, string>): string {\n      return [...map].find(([key, value]) => val === value)[0];\n   }\n}\n"],"sourceRoot":"webpack:///"}