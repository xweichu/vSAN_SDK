{"version":3,"sources":["webpack:///node_modules/ngx-window-token/fesm2015/ngx-window-token.js","webpack:///node_modules/ngx-clipboard/fesm2015/ngx-clipboard.js"],"names":["WINDOW","window","document","providedIn","factory","undefined","ClipboardService","config","copySubject","copyResponse$","asObservable","queryCommandSupported","element","HTMLInputElement","HTMLTextAreaElement","hasAttribute","Error","targetElm","selectTarget","re","copyText","clearSelection","isCopySuccessInIE11","error","clipboardData","getData","content","container","body","tempTextArea","contains","destroy","parentElement","createTempTextArea","appendChild","value","toReturn","copyFromInputElement","cleanUpAfterCopy","removeChild","inputElement","select","setSelectionRange","length","execCommand","focus","getSelection","removeAllRanges","doc","isRTL","documentElement","getAttribute","ta","createElement","style","fontSize","border","padding","margin","position","yPosition","pageYOffset","scrollTop","top","setAttribute","response","next","ngInjectableDef","ClipboardService_Factory","token","ClipboardDirective","clipboardSrv","cbOnSuccess","cbOnError","event","isSupported","handleResult","isTargetValid","cbContent","copyFromContent","succeeded","copiedContent","isSuccess","Object","assign","successMessage","cbSuccessMsg","emit","pushCopyReponse","ClipboardIfSupportedDirective","_clipboardService","_viewContainerRef","_templateRef","createEmbeddedView","ClipboardModule"],"mappings":"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","file":"97-es5.js","sourcesContent":["import { InjectionToken } from '@angular/core';\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/** @type {?} */\r\nconst WINDOW = new InjectionToken('WindowToken', typeof window !== 'undefined' && window.document ? { providedIn: 'root', factory: (/**\r\n     * @return {?}\r\n     */\r\n    () => window) } : undefined);\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\nexport { WINDOW };\n\n//# sourceMappingURL=ngx-window-token.js.map","import { WINDOW } from 'ngx-window-token';\nimport { Subject } from 'rxjs';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { Inject, Injectable, Optional, Directive, TemplateRef, ViewContainerRef, EventEmitter, HostListener, Input, Output, NgModule, defineInjectable, inject } from '@angular/core';\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n// The following code is heavily copy from https://github.com/zenorocha/clipboard.js\r\nclass ClipboardService {\r\n    /**\r\n     * @param {?} document\r\n     * @param {?} window\r\n     */\r\n    constructor(document, window) {\r\n        this.document = document;\r\n        this.window = window;\r\n        this.config = {};\r\n        this.copySubject = new Subject();\r\n        this.copyResponse$ = this.copySubject.asObservable();\r\n    }\r\n    /**\r\n     * @param {?} config\r\n     * @return {?}\r\n     */\r\n    configure(config) {\r\n        this.config = config;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get isSupported() {\r\n        return !!this.document.queryCommandSupported && !!this.document.queryCommandSupported('copy') && !!this.window;\r\n    }\r\n    /**\r\n     * @param {?} element\r\n     * @return {?}\r\n     */\r\n    isTargetValid(element) {\r\n        if (element instanceof HTMLInputElement || element instanceof HTMLTextAreaElement) {\r\n            if (element.hasAttribute('disabled')) {\r\n                throw new Error('Invalid \"target\" attribute. Please use \"readonly\" instead of \"disabled\" attribute');\r\n            }\r\n            return true;\r\n        }\r\n        throw new Error('Target should be input or textarea');\r\n    }\r\n    /**\r\n     * copyFromInputElement\r\n     * @param {?} targetElm\r\n     * @return {?}\r\n     */\r\n    copyFromInputElement(targetElm) {\r\n        try {\r\n            this.selectTarget(targetElm);\r\n            /** @type {?} */\r\n            const re = this.copyText();\r\n            this.clearSelection(targetElm, this.window);\r\n            return re && this.isCopySuccessInIE11();\r\n        }\r\n        catch (error) {\r\n            return false;\r\n        }\r\n    }\r\n    // this is for IE11 return true even if copy fail\r\n    /**\r\n     * @return {?}\r\n     */\r\n    isCopySuccessInIE11() {\r\n        /** @type {?} */\r\n        const clipboardData = this.window['clipboardData'];\r\n        if (clipboardData && clipboardData.getData) {\r\n            if (!clipboardData.getData('Text')) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    /**\r\n     * Creates a fake textarea element, sets its value from `text` property,\r\n     * and makes a selection on it.\r\n     * @param {?} content\r\n     * @param {?=} container\r\n     * @return {?}\r\n     */\r\n    copyFromContent(content, container = this.window.document.body) {\r\n        // check if the temp textarea still belongs to the current container.\r\n        // In case we have multiple places using ngx-clipboard, one is in a modal using container but the other one is not.\r\n        if (this.tempTextArea && !container.contains(this.tempTextArea)) {\r\n            this.destroy(this.tempTextArea.parentElement);\r\n        }\r\n        if (!this.tempTextArea) {\r\n            this.tempTextArea = this.createTempTextArea(this.document, this.window);\r\n            try {\r\n                container.appendChild(this.tempTextArea);\r\n            }\r\n            catch (error) {\r\n                throw new Error('Container should be a Dom element');\r\n            }\r\n        }\r\n        this.tempTextArea.value = content;\r\n        /** @type {?} */\r\n        const toReturn = this.copyFromInputElement(this.tempTextArea);\r\n        if (this.config.cleanUpAfterCopy) {\r\n            this.destroy(this.tempTextArea.parentElement);\r\n        }\r\n        return toReturn;\r\n    }\r\n    // remove temporary textarea if any\r\n    /**\r\n     * @param {?=} container\r\n     * @return {?}\r\n     */\r\n    destroy(container = this.window.document.body) {\r\n        if (this.tempTextArea) {\r\n            container.removeChild(this.tempTextArea);\r\n            // removeChild doesn't remove the reference from memory\r\n            this.tempTextArea = undefined;\r\n        }\r\n    }\r\n    // select the target html input element\r\n    /**\r\n     * @private\r\n     * @param {?} inputElement\r\n     * @return {?}\r\n     */\r\n    selectTarget(inputElement) {\r\n        inputElement.select();\r\n        inputElement.setSelectionRange(0, inputElement.value.length);\r\n        return inputElement.value.length;\r\n    }\r\n    /**\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    copyText() {\r\n        return this.document.execCommand('copy');\r\n    }\r\n    // Moves focus away from `target` and back to the trigger, removes current selection.\r\n    /**\r\n     * @private\r\n     * @param {?} inputElement\r\n     * @param {?} window\r\n     * @return {?}\r\n     */\r\n    clearSelection(inputElement, window) {\r\n        // tslint:disable-next-line:no-unused-expression\r\n        inputElement && inputElement.focus();\r\n        window.getSelection().removeAllRanges();\r\n    }\r\n    // create a fake textarea for copy command\r\n    /**\r\n     * @private\r\n     * @param {?} doc\r\n     * @param {?} window\r\n     * @return {?}\r\n     */\r\n    createTempTextArea(doc, window) {\r\n        /** @type {?} */\r\n        const isRTL = doc.documentElement.getAttribute('dir') === 'rtl';\r\n        /** @type {?} */\r\n        let ta;\r\n        ta = doc.createElement('textarea');\r\n        // Prevent zooming on iOS\r\n        ta.style.fontSize = '12pt';\r\n        // Reset box model\r\n        ta.style.border = '0';\r\n        ta.style.padding = '0';\r\n        ta.style.margin = '0';\r\n        // Move element out of screen horizontally\r\n        ta.style.position = 'absolute';\r\n        ta.style[isRTL ? 'right' : 'left'] = '-9999px';\r\n        // Move element to the same position vertically\r\n        /** @type {?} */\r\n        const yPosition = window.pageYOffset || doc.documentElement.scrollTop;\r\n        ta.style.top = yPosition + 'px';\r\n        ta.setAttribute('readonly', '');\r\n        return ta;\r\n    }\r\n    /**\r\n     * Pushes copy operation response to copySubject, to provide global access\r\n     * to the response.\r\n     * @param {?} response\r\n     * @return {?}\r\n     */\r\n    pushCopyReponse(response) {\r\n        this.copySubject.next(response);\r\n    }\r\n}\r\nClipboardService.decorators = [\r\n    { type: Injectable, args: [{ providedIn: 'root' },] }\r\n];\r\n/** @nocollapse */\r\nClipboardService.ctorParameters = () => [\r\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\r\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [WINDOW,] }] }\r\n];\r\n/** @nocollapse */ ClipboardService.ngInjectableDef = defineInjectable({ factory: function ClipboardService_Factory() { return new ClipboardService(inject(DOCUMENT), inject(WINDOW, 8)); }, token: ClipboardService, providedIn: \"root\" });\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nclass ClipboardDirective {\r\n    /**\r\n     * @param {?} clipboardSrv\r\n     */\r\n    constructor(clipboardSrv) {\r\n        this.clipboardSrv = clipboardSrv;\r\n        this.cbOnSuccess = new EventEmitter();\r\n        this.cbOnError = new EventEmitter();\r\n    }\r\n    // tslint:disable-next-line:no-empty\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ngOnInit() { }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ngOnDestroy() {\r\n        this.clipboardSrv.destroy(this.container);\r\n    }\r\n    /**\r\n     * @param {?} event\r\n     * @return {?}\r\n     */\r\n    onClick(event) {\r\n        if (!this.clipboardSrv.isSupported) {\r\n            this.handleResult(false, undefined, event);\r\n        }\r\n        else if (this.targetElm && this.clipboardSrv.isTargetValid(this.targetElm)) {\r\n            this.handleResult(this.clipboardSrv.copyFromInputElement(this.targetElm), this.targetElm.value, event);\r\n        }\r\n        else if (this.cbContent) {\r\n            this.handleResult(this.clipboardSrv.copyFromContent(this.cbContent, this.container), this.cbContent, event);\r\n        }\r\n    }\r\n    /**\r\n     * Fires an event based on the copy operation result.\r\n     * @private\r\n     * @param {?} succeeded\r\n     * @param {?} copiedContent\r\n     * @param {?} event\r\n     * @return {?}\r\n     */\r\n    handleResult(succeeded, copiedContent, event) {\r\n        /** @type {?} */\r\n        let response = {\r\n            isSuccess: succeeded,\r\n            event\r\n        };\r\n        if (succeeded) {\r\n            response = Object.assign(response, {\r\n                content: copiedContent,\r\n                successMessage: this.cbSuccessMsg\r\n            });\r\n            this.cbOnSuccess.emit(response);\r\n        }\r\n        else {\r\n            this.cbOnError.emit(response);\r\n        }\r\n        this.clipboardSrv.pushCopyReponse(response);\r\n    }\r\n}\r\nClipboardDirective.decorators = [\r\n    { type: Directive, args: [{\r\n                selector: '[ngxClipboard]'\r\n            },] }\r\n];\r\n/** @nocollapse */\r\nClipboardDirective.ctorParameters = () => [\r\n    { type: ClipboardService }\r\n];\r\nClipboardDirective.propDecorators = {\r\n    targetElm: [{ type: Input, args: ['ngxClipboard',] }],\r\n    container: [{ type: Input }],\r\n    cbContent: [{ type: Input }],\r\n    cbSuccessMsg: [{ type: Input }],\r\n    cbOnSuccess: [{ type: Output }],\r\n    cbOnError: [{ type: Output }],\r\n    onClick: [{ type: HostListener, args: ['click', ['$event.target'],] }]\r\n};\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nclass ClipboardIfSupportedDirective {\r\n    /**\r\n     * @param {?} _clipboardService\r\n     * @param {?} _viewContainerRef\r\n     * @param {?} _templateRef\r\n     */\r\n    constructor(_clipboardService, _viewContainerRef, _templateRef) {\r\n        this._clipboardService = _clipboardService;\r\n        this._viewContainerRef = _viewContainerRef;\r\n        this._templateRef = _templateRef;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ngOnInit() {\r\n        if (this._clipboardService.isSupported) {\r\n            this._viewContainerRef.createEmbeddedView(this._templateRef);\r\n        }\r\n    }\r\n}\r\nClipboardIfSupportedDirective.decorators = [\r\n    { type: Directive, args: [{\r\n                selector: '[ngxClipboardIfSupported]'\r\n            },] }\r\n];\r\n/** @nocollapse */\r\nClipboardIfSupportedDirective.ctorParameters = () => [\r\n    { type: ClipboardService },\r\n    { type: ViewContainerRef },\r\n    { type: TemplateRef }\r\n];\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nclass ClipboardModule {\r\n}\r\nClipboardModule.decorators = [\r\n    { type: NgModule, args: [{\r\n                imports: [CommonModule],\r\n                declarations: [ClipboardDirective, ClipboardIfSupportedDirective],\r\n                exports: [ClipboardDirective, ClipboardIfSupportedDirective]\r\n            },] }\r\n];\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\nexport { ClipboardService, ClipboardDirective, ClipboardModule, ClipboardIfSupportedDirective };\n\n//# sourceMappingURL=ngx-clipboard.js.map"]}