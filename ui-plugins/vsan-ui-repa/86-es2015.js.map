{"version":3,"sources":["./src/app/vsan/health/view/health.html","./src/app/vsan/health/view/health-retest-confirm.html","./src/app/vsan/health/view/health-retest-confirm.component.ts","./src/app/vsan/health/view/health.component.ts","./src/app/vsan/health/health.module.ts"],"names":[],"mappings":"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","file":"86-es2015.js","sourcesContent":["<!-- Copyright 2017-2021 VMware, Inc. All rights reserved. -- VMware Confidential -->\n<div *ngIf=\"loading\" class=\"spinner central-spinner\"></div>\n<div *ngIf=\"loading && isVsphereHealth && retestRunning\" class=\"central-spinner-details\">\n   {{'vsan.monitor.health.vshpere.retest.loading.warning' | localized}}\n</div>\n\n<vsan-validation id=\"alert\"\n                 *ngIf=\"loadDataError\"\n                 (onClosed)=\"loadDataError = null\"\n                 [alert]=\"loadDataError\">\n</vsan-validation>\n<vsan-validation id=\"propagated-alert\"\n                 *ngIf=\"propagatedError\"\n                 (onClosed)=\"propagatedError = null\"\n                 [alert]=\"propagatedError\">\n</vsan-validation>\n\n<ng-template #title>\n   <h3>\n      {{'vsan.monitor.health.title' | localized}}\n   </h3>\n   <div class=\"subtitle\">\n      <span vsan-show-title *ngIf=\"!healthPerspective?.isHistoricalHealthPerspective\">{{'vsan.monitor.health.under.dev.lastChecked' | localized : (timestamp | l10nDate)}}</span>\n      <button *ngIf=\"!healthPerspective.isHistoricalHealthPerspective && vsanHealthData\"\n              id=\"retest\"\n              class=\"btn btn-link\"\n              (click)=\"retestClicked()\"\n              [clrLoading]=\"retestRunning\"\n              [disabled]=\"retestRunning\"\n              type=\"button\">\n         {{\"vsan.monitor.health.retest\" | localized}}\n      </button>\n   </div>\n</ng-template>\n\n<vsan-health-checks *ngIf=\"!loading\"\n                    [titleHealder]=\"title\"\n                    [isFlat]=\"false\"\n                    [includeHistoricalHealth]=\"isHistoricalHealthEnabled && !isComputeOnlyCluster\"\n                    [isVirtualObjectsLinkShown]=\"!isComputeOnlyCluster\"\n                    [vsanHealthData]=\"vsanHealthData\"\n                    [(selectedSubTestId)]=\"selectedSubTestId\"\n                    [(showOverviewPage)]=\"showOverviewPage\"\n                    [hasEditPermissions]=\"hasEditPermissions\"\n                    [silentCheckSupported]=\"silentCheckSupported\"\n                    [isVsphereHealth]=\"isVsphereHealth\"\n                    [selectedSilenceChecks]=\"selectedSilenceChecks\"\n                    [lastCheckedTimestamp]=\"timestamp\"\n                    [hasErrors]=\"!!loadDataError\"\n                    (retest)=\"onRetest($event)\"\n                    [(healthPerspective)]=\"healthPerspective\"\n                    (error)=\"propagatedError = $event;\">\n</vsan-health-checks>\n","<!--Copyright 2020 VMware, Inc. All rights reserved. -- VMware Confidential-->\n<vsan-default-prompt\n      [title]=\"'vsan.monitor.health.retest.confirm.title' | localized\"\n      (onConfirm)=\"ok()\">\n   <div class=\"container\">\n      <clr-toggle-wrapper>\n          <input id=\"include-online-health-check\"\n                 type=\"checkbox\"\n                 clrToggle\n                 name=\"include-online-health-check\"\n                 [(ngModel)]=\"includeOnlineHealth\">\n          <label for=\"include-online-health-check\">{{\"vsan.monitor.health.retestOnlineHealth\" | localized}}</label>\n      </clr-toggle-wrapper>\n      <div>\n         {{\"vsan.monitor.health.retest.confirm.online.desc\" | localized}}\n      </div>\n   </div>\n</vsan-default-prompt>","/* Copyright 2020 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component} from \"@angular/core\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\n\n@Component({\n   selector: \"vsan-health-retest-confirm\",\n   templateUrl: \"health-retest-confirm.html\",\n   styleUrls: [\"health-retest-confirm.scss\"],\n})\nexport class HealthRetestConfirmComponent {\n   includeOnlineHealth: boolean;\n\n   ok = (): void => {\n      VsanUiUtils.closeModalDialog({includeOnlineHealth: this.includeOnlineHealth});\n   };\n}","/* Copyright 2017-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {ChangeDetectorRef, Component, OnInit} from \"@angular/core\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {VsanHealthData} from \"@generated/vsan-health-data\";\nimport {VsanTestData} from \"@generated/vsan-test-data\";\nimport {VsanHealthPropertyProvider} from \"@generated/vsan-health-property-provider\";\nimport {ManagedObject, ManagedObjectUtils} from \"@service/managed-object\";\nimport {RefreshHandler} from \"@service/global-refresh.service\";\nimport {PermissionService} from \"@generated/permission-service\";\nimport {Privileges} from \"@generated/privileges\";\nimport {ModalBuilder} from \"@util/modal-builder\";\nimport {TaskMonitorService} from \"@service/task-monitor-service\";\nimport {Logger} from \"@util/logger\";\nimport {DateRangeData} from \"@component/datetime-picker/date-range-picker.component\";\nimport {ActivatedRoute, Params} from \"@angular/router\";\nimport {VsanHistoricalHealthService} from \"@generated/vsan-historical-health-service\";\nimport {HealthLazyDataLoadingUtil} from \"./health-lazy-data-loading-util\";\nimport {HealthCapabilityData} from \"@generated/health-capability-data\";\nimport {VsanTestInstanceDetails} from \"@generated/vsan-test-instance-details\";\nimport {ScreenReaderAnnouncer} from \"@service/screen-reader-announcer.service\";\nimport {HealthContext} from \"@navigation/context/health-context\";\nimport {VsanHealthStatus} from \"@generated/vsan-health-status\";\nimport {CsdService} from \"@generated/csd-service\";\nimport {HistoricalHealthConfigService} from \"@generated/historical-health-config-service\";\nimport {HealthRetestEventData} from \"../model/health-retest-event.data\";\nimport {VsanHealthUtil} from \"@util/vsan-health-util\";\nimport {PersistentStorageService} from \"@service/browser-storage.service\";\nimport {HealthTestMessage} from \"@generated/health-test-message\";\nimport {CausedIssueHealthTestMessage} from \"@generated/caused-issue-health-test-message\";\nimport {HealthPerspectiveData} from \"./model/health-perspective-data\";\nimport {InlineViewContextKey} from \"@model/inline-view-context-key.data\";\n\n@Component({\n   templateUrl: \"health.html\",\n   styleUrls: [\"health.scss\"],\n   selector: \"vsan-health\",\n})\nexport class HealthComponent implements OnInit {\n   private readonly VSPHERE_HEALTH_PARAM_NAME: string = \"vsphereHealth\";\n\n   /**\n    * At this percentage, backend will have determined all health groups as well as their loading statuses\n    */\n   private static readonly TASK_FETCH_PERCENTAGE_THRESHOLD: number = 50;\n\n   /**\n    * How often should the async health data be refreshed\n    */\n   private static readonly TASK_FETCH_INTERVAL_MS: number = 2000;\n\n   selectedSubTestId: string = \"\";\n\n   clusterRef: ManagedObject;\n\n   @ScreenReaderAnnouncer()\n   srOnlyMessage: string;\n\n   isVsphereHealth: boolean;\n   loading: boolean;\n   retestRunning: boolean = false;\n   loadDataError: string;\n   propagatedError: string;\n   isHistoricalHealthEnabled: boolean = false;\n   onlineHealthCheckSupported: boolean = false;\n   isHealthTaskSupported: boolean = false;\n   vsanHealthData: VsanHealthData;\n\n   private objectRef: ManagedObject;\n   timestamp: number = undefined;\n   private ceipEnabled: boolean;\n\n   hasEditPermissions: boolean = false;\n   isComputeOnlyCluster: boolean = false;\n\n   silentCheckSupported: boolean = false;\n\n   /**\n    * User selected silence checks\n    */\n   selectedSilenceChecks: string[] = [];\n\n   /**\n    * Display the \"Overview\" page instead of specific test details.\n    */\n   showOverviewPage: boolean;\n\n   private _healthPerspective: HealthPerspectiveData = new HealthPerspectiveData(false, this.timestamp);\n\n   set healthPerspective(value: HealthPerspectiveData) {\n      // the object is two-way bound between parent and child. If the same object is passed back and forth it is\n      // impossible to detect a change (difference from the cached one). To address this issue always work with a clone\n      // of the object (new object)\n      const newValue: HealthPerspectiveData = value.clone();\n      if (!newValue || newValue.equals(this._healthPerspective)) {\n         // not changed. Do nothing;\n         return;\n      }\n      this._healthPerspective = newValue;\n      this.reloadFromCache();\n   }\n\n   get healthPerspective(): HealthPerspectiveData {\n      return this._healthPerspective;\n   }\n\n   constructor(private route: ActivatedRoute,\n         private healthProvider: VsanHealthPropertyProvider,\n         private historicalService: VsanHistoricalHealthService,\n         private historicalConfigService: HistoricalHealthConfigService,\n         private taskSvc: TaskMonitorService,\n         private changeDetector: ChangeDetectorRef,\n         private permissionService: PermissionService,\n         private storageService: PersistentStorageService,\n         private csdService: CsdService) {\n   }\n\n   async ngOnInit(): Promise<void> {\n      try {\n         this.loading = true;\n         const params: Params = this.route.snapshot.params;\n         if (params.hasOwnProperty(this.VSPHERE_HEALTH_PARAM_NAME)) {\n            this.isVsphereHealth = params[this.VSPHERE_HEALTH_PARAM_NAME];\n         }\n         this.parseContext();\n         const hasPreselectedSubTestId: boolean = !!this.selectedSubTestId;\n         this.objectRef = this.clusterRef || ManagedObject.contextObject;\n\n         this.hasEditPermissions = await this.permissionService\n               .hasPermissions(this.objectRef, [Privileges.EDIT_CLUSTER()]);\n         await this.checkCapabilities();\n\n         // following properties are only for cluster\n         if (ManagedObjectUtils.isCluster(ManagedObject.uid(this.objectRef))) {\n            this.isComputeOnlyCluster = await this.csdService.isComputeOnlyCluster(this.objectRef);\n         }\n\n         await this.fetch();\n\n         if (!hasPreselectedSubTestId) {\n            // Open \"Overview\" page by default if supported.\n            this.showOverviewPage = !VsanUiUtils.isUnset(this.vsanHealthData?.overviewData);\n         }\n      } catch {\n         this.handleError();\n      }\n   }\n\n   private parseContext(): void {\n      const context: HealthContext = this.getContext();\n      this.selectedSubTestId = context?.selectedSubTestId;\n      this.clusterRef = context?.clusterRef;\n   }\n\n   private getContext(): HealthContext {\n      let context: HealthContext = VsanUiUtils.getNavigationData() as HealthContext;\n      if (!context) {\n         // In order to know if the view is inside vSAN overview tab,\n         // UI needs to check if the persistence service holds any context\n         context = this.storageService.pop(InlineViewContextKey.HEALTH_CHECK_CONTEXT_KEY) as HealthContext;\n      }\n      return context;\n   }\n\n   @RefreshHandler\n   private async fetch(): Promise<void> {\n      await this.reloadFromCache();\n   }\n\n   private async checkCapabilities(): Promise<void> {\n      try {\n         const capabilityData: HealthCapabilityData = await this.healthProvider.getHealthCapabilityData(\n               this.objectRef, this.isVsphereHealth);\n         this.silentCheckSupported = capabilityData.isSilentCheckSupported;\n         if (!this.isVsphereHealth) {\n            this.onlineHealthCheckSupported = capabilityData.isCloudHealthSupported;\n            this.ceipEnabled = capabilityData.isCeipServiceEnabled;\n            if (capabilityData.isHistoricalHealthSupported) {\n               this.getHistoricalHealthEnabled();\n            }\n            this.isHealthTaskSupported = capabilityData.isHealthTaskSupported;\n         }\n      } catch {\n         this.handleError();\n      }\n   }\n\n   private getHistoricalHealthEnabled(): void {\n      this.historicalConfigService.getConfig(this.objectRef).then(result =>\n            this.isHistoricalHealthEnabled = result.isEnabled);\n   }\n\n   private async getSilenceChecks(): Promise<string[]> {\n      try {\n         if (!this.silentCheckSupported) {\n            return;\n         }\n         return await this.healthProvider.getSilentChecks(this.objectRef, this.isVsphereHealth);\n      } catch {\n         this.handleError();\n      }\n   }\n\n   async reloadFromCache(): Promise<void> {\n      try {\n         this.resetErrors();\n         this.loading = true;\n\n         this.selectedSilenceChecks = await this.getSilenceChecks();\n\n         const healthData: VsanHealthData = this.healthPerspective.isHistoricalHealthPerspective\n            ? await this.historicalService\n                     .getHistoricalHealthSummary(this.objectRef, this.healthPerspective.from, this.healthPerspective.to)\n            : await this.healthProvider\n                     .getVsanHealthFromCache(this.objectRef, true, this.isVsphereHealth);\n\n         this.populateData(healthData);\n\n         this.informScreenReader();\n      } catch {\n         this.handleError();\n      } finally {\n         this.loading = false;\n      }\n   }\n\n   async onRetest(event: HealthRetestEventData): Promise<void> {\n      await this.retest(event.retestOnlineHealth);\n   }\n\n   async retest(retestOnlineHealth: boolean = false): Promise<void> {\n      this.resetErrors();\n      this.loading = true;\n      this.retestRunning = true;\n\n      this.selectedSilenceChecks = null;\n      this.selectedSilenceChecks = await this.getSilenceChecks();\n\n      if (!this.isHealthTaskSupported) {\n         if (retestOnlineHealth) {\n            // If online health should be retested, wait for it, then do the normal test\n            try {\n               const onlineHealthTask: ManagedObject = await this.healthProvider\n                     .getCloudHealthCheckResult(this.objectRef);\n               await this.taskSvc.getAwaitResult(onlineHealthTask);\n            } catch (err) {\n               this.handleOnlineHealthError(err);\n            }\n         }\n         try {\n            const vsanHealthData: VsanHealthData =\n                  await this.healthProvider.getVsanHealth(this.objectRef, true, this.isVsphereHealth);\n            this.populateData(vsanHealthData);\n         } catch {\n            this.handleError();\n         }\n\n         this.retestRunning = false;\n         this.informScreenReader();\n      } else {\n         this.startAsyncHealthLoading(retestOnlineHealth);\n      }\n   }\n\n   private resetErrors(): void {\n      this.loadDataError = null;\n      this.propagatedError = null;\n   }\n\n   private async startAsyncHealthLoading(retestOnlineHealth: boolean = false): Promise<void> {\n      const taskRef: ManagedObject =\n            await this.healthProvider.startClusterHealthCheckTask(this.objectRef, retestOnlineHealth);\n\n      // all groups will be ready when the task has reached the required percentage\n      await this.taskSvc.getAwaitResult(\n            taskRef,\n            HealthComponent.TASK_FETCH_PERCENTAGE_THRESHOLD,\n            TaskMonitorService.TIME_BETWEEN_CALLS_FREQUENT_MS,\n      );\n\n      // TODO akolov: inform the screenreader for loading test groups and when a group loads, also inform it\n\n      const fetchResult: () => Promise<void> = () =>\n            this.healthProvider.getClusterHealthCheckTaskResult(this.objectRef, taskRef)\n                  .then(this.populateData)\n                  .catch(this.handleError);\n\n      // start polling the health checks\n      const pollInterval: number = window.setInterval(fetchResult, HealthComponent.TASK_FETCH_INTERVAL_MS);\n\n      // when the task is done, stop the polling\n      this.taskSvc.getAwaitResult(taskRef).finally(() => {\n         fetchResult(); // do a final fetch in order to be sure that all tests are available\n         this.retestRunning = false;\n         clearInterval(pollInterval);\n      });\n   }\n\n   handleError = (): void => {\n      this.loadDataError = this.getMonitorHealthErrorMessage();\n      this.loading = false;\n   };\n\n   private populateData = (result: VsanHealthData) => {\n      this.loading = false;\n\n      if (!result || !result.testsData) {\n         // for historical health is expected to have empty or null result when there is no historical data for\n         // selected period. Do not set error message\n         if (!this.healthPerspective || !this.healthPerspective.isHistoricalHealthPerspective) {\n            this.loadDataError = this.getMonitorHealthErrorMessage();\n         }\n         this.vsanHealthData = result;\n         return;\n      }\n\n      // historical health has no data about last execution timestamp. Do not reset it.\n      if (!this.healthPerspective.isHistoricalHealthPerspective) {\n         this.timestamp = result.timestamp;\n         this._healthPerspective = new HealthPerspectiveData(false, this.timestamp);\n      }\n\n      // tests that was skipped after last retest, after global refresh will be retrieved from cache with old status.\n      // fix the status according to the selectedSilenceChecks, where the data is always up-to-date\n      result.testsData.forEach(category => category.subtests.forEach(subtest => {\n         if (!VsanUiUtils.isEmpty(this.selectedSilenceChecks) &&\n               this.selectedSilenceChecks.some(silencedCheckId => silencedCheckId === subtest.silenceTestId)) {\n            subtest.status = VsanHealthStatus.skipped;\n         }\n      }));\n\n      this.vsanHealthData = result;\n\n      if (this.healthPerspective.isHistoricalHealthPerspective) {\n         this.setTestLazyDetails(this.vsanHealthData);\n      }\n\n      // Detect changes to get latest value of this.cards\n      this.changeDetector.detectChanges();\n   };\n\n   private informScreenReader(): void {\n      if (!this.selectedSubTestId) {\n         this.srOnlyMessage = VsanUiUtils.getString(\"vsan.screenReader.message.page.loaded\",\n               VsanUiUtils.getString(\"vsan.monitor.health.title\"));\n         return;\n      }\n      const selectedTest: VsanTestData = this.getTestById(this.selectedSubTestId, this.vsanHealthData);\n      if (selectedTest) {\n         this.srOnlyMessage = VsanUiUtils.getString(\"vsan.screenReader.message.page.loaded.andItemSelected\",\n               VsanUiUtils.getString(\"vsan.monitor.health.title\"), selectedTest.testName);\n      }\n   }\n\n   private handleOnlineHealthError = (error: string): void => {\n      this.loadDataError = VsanUiUtils.getString(\"vsan.monitor.health.onlinehealth.error\");\n      Logger.error(error);\n   };\n\n   retestClicked = () => {\n      if (!this.onlineHealthCheckSupported || !this.hasOnlineHealthData(this.vsanHealthData)) {\n         this.retest();\n         return;\n      }\n\n      new ModalBuilder(\"health/retestConfirm\")\n            .setSize(650, 300)\n            .open({ceipEnabled: this.ceipEnabled})\n            .then((confirm) => {\n               const retestWithOnlineHealth: boolean = confirm.includeOnlineHealth;\n               this.retest(retestWithOnlineHealth);\n            });\n   };\n\n   private hasOnlineHealthData = (vsanHealthData: VsanHealthData): boolean => {\n      const onlineHealthData: VsanTestData =\n            vsanHealthData.testsData.find(testData => this.isOnlineHealthCheck(testData));\n      let hasOnlineTests: boolean = onlineHealthData && onlineHealthData.subtests.length !== 0 && this.ceipEnabled;\n      if (hasOnlineTests) {\n         // find the silent items that belong to the online health category\n         const skippedOnlineHealthItems: VsanTestData[] = onlineHealthData.subtests\n               .filter(subtest => this.selectedSilenceChecks\n                     .some(check => check === subtest.silenceTestId),\n               );\n         // if the length two array is the same, all the online health are silent\n         hasOnlineTests = skippedOnlineHealthItems.length !== onlineHealthData.subtests.length;\n      }\n\n      return hasOnlineTests;\n   };\n\n   private isOnlineHealthCheck = (testCategory: VsanTestData): boolean => {\n      /**\n       * We don't have an ID for each health check categories,\n       * Here we can only check if 'ceip check' or 'support insight check' is in the subtests,\n       * if in then we know this is online health category\n       */\n      return testCategory.subtests &&\n            testCategory.subtests.some(subtest => subtest.testId === VsanHealthUtil.CEIP_TEST_ID\n                  || subtest.testId === VsanHealthUtil.SUPPORT_INSIGHT_TEST_ID);\n   };\n\n   private getMonitorHealthErrorMessage = (): string => {\n      if (this.isVsphereHealth) {\n         return VsanUiUtils.getString(\"vsphereHealth.error\");\n      }\n\n      return VsanUiUtils.getString(\"vsan.monitor.health.health.data.error\");\n   };\n\n   private setTestLazyDetails(vsanHealthData: VsanHealthData): void {\n      vsanHealthData.testsData.forEach(testData =>\n            testData.subtests.forEach(subtest =>\n                  HealthLazyDataLoadingUtil.initLazyLoading(subtest, this.loadTestInstances,\n                        [subtest, this.objectRef, testData.testId, subtest.testId, this.healthPerspective.dateRange]),\n            ),\n      );\n   }\n\n   loadTestInstances = async (testData: VsanTestData, objectId: ManagedObject, groupId: string, testId: string,\n         dateRange: DateRangeData): Promise<boolean> => {\n      try {\n         const testInstaces: VsanTestInstanceDetails[] = await this.historicalService.getHistoricalHealthForTest(\n               objectId, groupId, testId, dateRange.from, dateRange.to);\n         // set lazy loading callback for each instance\n         testInstaces.forEach(instance => HealthLazyDataLoadingUtil.initLazyLoading(instance, this.loadTestTables,\n               [instance, objectId, groupId, testId, instance.timestamp]));\n         testData.instances = testInstaces;\n      } catch (e) {\n         return Promise.reject(e);\n      }\n      return Promise.resolve(true);\n   };\n\n   loadTestTables = async (testInstance: VsanTestInstanceDetails, objectId: ManagedObject, groupId: string,\n         testId: string, instanceTimestamp: number): Promise<boolean> => {\n      try {\n         const instanceDetails: VsanTestInstanceDetails =\n               await this.historicalService.getHistoricalHealthForTestInstance(objectId, groupId, testId,\n                     instanceTimestamp);\n         testInstance.details = instanceDetails?.details;\n         testInstance.messages = this.assignCoreIssuesNames(instanceDetails?.messages);\n      } catch (e) {\n         return Promise.reject(e);\n      }\n      return Promise.resolve(true);\n   };\n\n   private assignCoreIssuesNames(healthMessages: HealthTestMessage[]): HealthTestMessage[] {\n      if (!healthMessages) {\n         return null;\n      }\n      healthMessages\n         .filter(healthMessage => (healthMessage as CausedIssueHealthTestMessage).coreIssueTest)\n         .forEach(healthMessage => {\n            const causedIssueMessage: CausedIssueHealthTestMessage = healthMessage as CausedIssueHealthTestMessage;\n            // Need to find the test name in already fetched tests.\n            causedIssueMessage.coreIssueTest.testName =\n                  this.getTestById(causedIssueMessage.coreIssueTest.testId, this.vsanHealthData).testName;\n         });\n      return healthMessages;\n   }\n\n   private getTestById(id: string, healthData: VsanHealthData): VsanTestData {\n      if (!healthData || !healthData.testsData) {\n         return null;\n      }\n      for (const test of healthData.testsData) {\n         if (test.testId === id) {\n            return test;\n         }\n\n         if (test.subtests) {\n            for (const subTest of test.subtests) {\n               if (subTest.testId === id) {\n                  return subTest;\n               }\n            }\n         }\n      }\n   }\n}\n","/* Copyright 2019-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {NgModule} from \"@angular/core\";\nimport {RouterModule, Routes} from \"@angular/router\";\nimport {HealthComponent} from \"./view/health.component\";\nimport {CommonModule} from \"@angular/common\";\nimport {ClarityModule} from \"@clr/angular\";\nimport {CommonPipeModule} from \"@pipe/common-pipe.module\";\nimport {ValidationModule} from \"@component/validation/validation.module\";\nimport {HealthChecksModule} from \"./health-checks.module\";\nimport {HealthRetestConfirmComponent} from \"./view/health-retest-confirm.component\";\nimport {FormsModule} from \"@angular/forms\";\nimport {PromptModule} from \"@component/dialog/prompt/prompt.module\";\nimport {PersistentStorageService} from \"@service/browser-storage.service\";\n\nconst healthRoutes: Routes = [\n   {\n      path: \"\",\n      component: HealthComponent,\n   },\n   {\n      path: \"retestConfirm\",\n      component: HealthRetestConfirmComponent,\n   },\n];\n\n@NgModule({\n   imports: [\n      FormsModule,\n      CommonModule,\n      PromptModule,\n      ClarityModule,\n      ValidationModule,\n      CommonPipeModule,\n      HealthChecksModule,\n      RouterModule.forChild(healthRoutes),\n   ],\n   declarations: [\n      HealthComponent,\n      HealthRetestConfirmComponent,\n   ],\n   providers: [\n      PersistentStorageService,\n   ],\n})\nexport class HealthModule {\n}\n"],"sourceRoot":"webpack:///"}