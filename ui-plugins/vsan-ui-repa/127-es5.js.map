{"version":3,"sources":["webpack:///src/app/vsan/common/directive/clr-button-group/clr-button-base.directive.ts","webpack:///src/app/vsan/common/directive/signpost-title/signpost-title.directive.ts","webpack:///src/app/vsan/common/service/flow/loading-indicator.decorator.ts","webpack:///src/app/vsan/common/service/flow/error-handler.decorator.ts","webpack:///src/app/vsan/common/service/flow/loader.decorator.ts","webpack:///src/app/vsan/common/util/modal-builder.ts","webpack:///src/app/vsan/common/pipe/virtual-objects/health-state-label.pipe.ts","webpack:///src/app/vsan/common/util/vsan-dialog-util.ts","webpack:///src/app/vsan/common/service/flow/loading-flow-wrapper.data.ts","webpack:///src/app/vsan/common/component/cell/common-cells.module.ts","webpack:///src/app/vsan/common/model/inline-view-context-key.data.ts","webpack:///src/app/vsan/common/directive/external-link/external-link.directive.ts","webpack:///src/app/vsan/common/component/action-button/action-button.module.ts"],"names":["ClrButtonBaseDirective","clrButton","name","Math","random","toString","directiveHolder","directives","push","SignpostTitleDirective","el","renderer","BUTTON_TAG_NAME","CLR_ICON_TAG_NAME","TITLE_ATTRIBUTE","ARIA_EXPANDED_ATTRIBUTE","ARIA_LABEL_ATTRIBUTE","signpostTitle","signpostIcon","nativeElement","getElementsByTagName","item","setAttribute","getString","button","LoadingIndicator","props","targetClass","propertyKey","Object","defineProperty","get","Array","isArray","some","loaderName","isLoading","ErrorHandler","functionName","descriptor","errorHandler","value","Loader","params","tag","getClassName","originalFn","loadingFlowWrapper","preExecute","error","undefined","incrementLoads","invoke","preLoadSrMessage","srMessage","srMessageType","LOADING","postExecute","LOADED","onError","ex","processError","rethrow","shouldRethrow","invokeErrorHandler","decrementLoads","backingObject","arguments","wrapper","handler","call","errorMessageGetter","ModalBuilder","appId","size","DEFAULT_SIZE","title","accessibilityTitle","urlParams","dimensions","length","warn","setSize","WIDTH","HEIGHT","width","height","eventTarget","context","Promise","accept","pluginContext","targetElement","event","target","modalResultHandler","data","JSON","parse","stringify","focus","setTimeout","actionUrl","APP_URL","separator","param","openModalDialog","contextObjectUid","WIZARD_XL","repa","repaExtension","VirtualObjectHealthStateLabelPipe","state","getVsanObjectHealthStatusText","VsanDialogUtil","CAPACITY_MANAGEMENT_DIALOG","DELETE_VOLUME_DIALOG","MIGRATE_VOLUME_DIALOG","REAPPLY_VOLUME_POLICY_DIALOG","DUPLICATE_PCI_ID_MODEL_SELECTION_DIALOG","HEALTH_RESTORE_ACTION_DIALOG","CLUSTER_POWER_ON_DIALOG","VM_IO_DIAGNOSTICS_METRICS_DIALOG","VM_IO_DIAGNOSTICS_LATENCY_DIALOG","VM_IO_DIAGNOSTICS_DOM_OWNER_LATENCY_DIALOG","PERF_SVC_EDIT_ACTION_DIALOG","PERF_SVC_ENABLE_ACTION_DIALOG","CLAIM_DISKS_ACTION_DIALOG","VSAN_DISK_CLAIM_ACTION_DIALOG","VsanDialogProperties","LoadingFlowWrapper","_backingObject","DEFAULT_NAME","initCollection","ERROR_HOLDER","ERROR_HANDLERS_REF_HOLDER","ERROR_MESSAGE_GETTERS_REF_HOLDER","LOADS_COUNT_HOLDER","collectionName","val","loadsCount","Error","getter","CommonCellsModule","InlineViewContextKey","HEALTH_CHECK_CONTEXT_KEY","SERVICES_CONTEXT_KEY","FAULT_DOMAINS_CONTEXT_KEY","RESYNCING_OBJECTS_CONTEXT_KEY","ExternalLinkDirective","resolver","navigationService","ASK_VMWARE_DEFAULT_TEXT_KEY","LEARN_MORE_DEFAULT_TEXT_KEY","CONTAINER_CLASS","NAVIGATION_EVENT_TYPE","LEAD_TO_NOWHERE_URL","HTML_ELEMENT_SPAN_NAME","HTML_ELEMENT_ICON_NAME","HTML_ELEMENT_ROLE_ATTR_NAME","HTML_ELEMENT_ROLE_ATTR_VALUE","ICON_SHAPE_ATTR_NAME","ICON_SHAPE_ATTR_VALUE","ICON_SIZE_ATTR_NAME","ICON_SIZE_ATTR_VALUE","ICON_CLASS_ATTR_NAME","ICON_CLASS_ATTR_VALUE","ICON_TITLE_ATTR_NAME","KB_URL","element","isLink","isButton","prepareExternalLink","index","addClass","setText","decorateLink","addLinkRole","initializeNavigationHandler","HTMLButtonElement","HTMLAnchorElement","span","createElement","innerText","getText","appendChild","icon","anchorText","key","linkElement","href","style","display","addEventListener","helpId","askVMware","articleId","navigateToAddress","url","ActionButtonModule"],"mappings":"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","file":"127-es5.js","sourcesContent":["/* Copyright 2020 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {ClrButton} from \"@clr/angular\";\n\n/**\n * Use this class as base class for directive, which handles clr-button. It will help to link the rendered button with\n * the clr-button on which the directive is applied.\n */\nexport abstract class ClrButtonBaseDirective {\n\n   constructor(private clrButton: ClrButton) {\n      if (!clrButton) {\n         return;\n      }\n      // name should be set, if not provided in template - generate one. ClrButtom#name is used to generate the name\n      // attribute of the markup button. Later the name is used to match the generated markup with the directive.\n      if (!clrButton.name) {\n         clrButton.name = Math.random().toString();\n      }\n\n      const directiveHolder: DirectiveHolder = (clrButton as DirectiveHolder);\n      directiveHolder.directives = directiveHolder.directives || [];\n      directiveHolder.directives.push(this);\n   }\n\n   /**\n    * This method will be called when the actual html button is rendered.\n    */\n   abstract resolveButton(clrButton: ClrButton, button: HTMLButtonElement, index: number);\n}\n\nexport interface DirectiveHolder extends ClrButton {\n   directives: ClrButtonBaseDirective[];\n}","/* Copyright 2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {AfterViewInit, Directive, ElementRef, Input, Renderer2} from \"@angular/core\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\n\n/**\n * Attribute directive for setting a custom title to the clr-icon inside a clr-signpost.\n * It also adds aria-label with the same value and aria-expanded=\"false\" to the button, holding the icon.\n * Used for changing the title when a clr-icon is not explicitly added inside a clr-signpost.\n */\n@Directive({\n   selector: \"clr-signpost\",\n})\nexport class SignpostTitleDirective implements AfterViewInit {\n   private readonly BUTTON_TAG_NAME: string = \"button\";\n   private readonly CLR_ICON_TAG_NAME: string = \"clr-icon\";\n\n   private readonly TITLE_ATTRIBUTE: string = \"title\";\n   private readonly ARIA_EXPANDED_ATTRIBUTE: string = \"aria-expanded\";\n   private readonly ARIA_LABEL_ATTRIBUTE: string = \"aria-label\";\n\n   @Input(\"vsan-signpost-title\")\n   signpostTitle: string;\n\n   constructor(private el: ElementRef<HTMLElement>,\n         private renderer: Renderer2) {\n   }\n\n   ngAfterViewInit(): void {\n      if (!this.signpostTitle) {\n         return;\n      }\n\n      const signpostIcon: Element = this.el.nativeElement.getElementsByTagName(this.CLR_ICON_TAG_NAME).item(0);\n      if (signpostIcon) {\n         this.renderer.setAttribute(signpostIcon, this.TITLE_ATTRIBUTE, VsanUiUtils.getString(this.signpostTitle));\n      }\n      const button: Element = this.el.nativeElement.getElementsByTagName(this.BUTTON_TAG_NAME).item(0);\n      if (button) {\n         this.renderer.setAttribute(button, this.ARIA_EXPANDED_ATTRIBUTE, \"false\");\n         this.renderer.setAttribute(button, this.ARIA_LABEL_ATTRIBUTE, VsanUiUtils.getString(this.signpostTitle));\n      }\n   }\n}\n","/* Copyright 2021 VMware, Inc. All rights reserved. -- VMware Confidential */\n\n\n\nimport {LoadingFlowWrapper} from \"@service/flow/loading-flow-wrapper.data\";\n\n/**\n * This property decorator is supposed to be used along with the @Loader decorator.\n * As the @Loader decorator keeps track of all the active loading operations,\n * we can easily know if all the loading is completed. If there are any ongoing loading\n * operations, the property decorated with @LoadingIndicator will be set to \"true\", otherwise - it will be \"false\".\n * You can have as many properties decorated with @LoadingIndicator as you want, but they need to have different names.\n * The LoadingIndicator will show the loading state of the Loader methods with the same name.\n *\n * <pre>\n * @Loader()\n * loadDataSync(): any {\n *    // Load some data\n * }\n *\n * @Loader()\n * loadDataAsync(): Promise<any> {\n *    // Load some data\n * }\n *\n * @LoadingIndicator\n * isLoading: boolean; // The field will be set to \"false\" when the both the methods are complete and the Promise is resolved.\n * </pre>\n */\nexport function LoadingIndicator(props?: LoadingIndicatorProperties): PropertyDecorator {\n   props = props || {};\n   return (targetClass: any, propertyKey: string): void => {\n      Object.defineProperty(targetClass, propertyKey, {\n         get: function (): boolean {\n            if (Array.isArray(props.name)) {\n               return props.name.some((loaderName: string) => (new LoadingFlowWrapper(this, loaderName)).isLoading);\n            }\n\n            return (new LoadingFlowWrapper(this, props.name)).isLoading;\n         },\n      });\n   };\n}\n\nexport interface LoadingIndicatorProperties {\n   name?: string | string[];\n}\n","/* Copyright 2021 VMware, Inc. All rights reserved. -- VMware Confidential */\n\nimport {LoadingFlowWrapper} from \"@service/flow/loading-flow-wrapper.data\";\n\n/**\n * This property decorator is supposed to be used along with the @Loader decorator.\n * If an exception is thrown during the execution of the method decorated with @Loader\n * the ErrorHandler method will be invoked. You can define as many ErrorHandlers as you want,\n * but they must be with different names. The name can be provided as input to the decorator.\n * If a name is set to the ErrorHandler it will handle only the errors thrown by Loader functions\n * with the same name. If no name is passed to the ErrorHandler, it will handle only the errors\n * from Loader functions with no name.\n *\n * <pre>\n * // Example 1:\n * @Loader()\n * loadSyncData(): any {\n *    throw new Error(\"Failed to load sync data\");\n * }\n *\n * @ErrorHandler()\n * handleError(err: any) {\n *    // handle the error.\n * }\n *...\n *\n * // Example 2\n *\n * @Loader({name: \"data-loading-flow})\n * async loadAsyncData(): Promise<any> {\n *    return Promise.reject(\"Failed to load async data\");\n * }\n *\n * @ErrorHandler({name: \"data-loading-flow})\n * handleError(err: any) {\n *    // handle the error.\n * }\n * ...\n * </pre>\n */\nexport function ErrorHandler(props?: ErrorHandlerProperties): MethodDecorator {\n   props = props || {};\n   return (targetClass: any, functionName: string, descriptor: PropertyDescriptor): void => {\n      (new LoadingFlowWrapper(targetClass, props.name)).errorHandler = descriptor.value;\n   };\n}\n\n/**\n * Properties of the ErrorHandler decorator.\n */\nexport interface ErrorHandlerProperties {\n\n   /**\n    * Indicates which @Loder should be handled by this @ErrorHandler\n    */\n   name?: string;\n}\n","/* Copyright 2021-2022 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {ErrorContext, FunctionWrapper} from \"@service/flow/function-wrapper\";\nimport {LoadingFlowWrapper} from \"@service/flow/loading-flow-wrapper.data\";\nimport {ScreenReaderAnnouncerService, SrEvent, SrMessageType} from \"@service/screen-reader-announcer.service\";\nimport {Reflection} from \"@util/reflection\";\nimport {GlobalLogger} from \"../../../../vsan-app.module\";\n\n/**\n * Method decorator that does the following:\n *  - watches for errors and if such appear:\n *       - the error is logged in the browser's console\n *       - the error is logged in the H5C server log\n *       - the related @ErrorMessage fields are populated\n *       - the related @ErrorHandler methods are invoked\n *  - Updates the @LoadingIndicator decorated fields\n *  - Invokes the screen reader service once the loading operation completes successfully\n */\nexport function Loader(params?: LoaderParams): MethodDecorator {\n   // If no params are passed, initialize the variable in order to avoid multiple null-checks\n   params = params || {};\n   return (targetClass: any, functionName: string, descriptor: PropertyDescriptor): void => {\n      // Use the component name as tag in order easily find where the error was thrown.\n      const tag: string = Reflection.getClassName(targetClass);\n      const loaderName: string = params.name;\n      const originalFn: any = descriptor.value;\n\n      descriptor.value = function (): any {\n         const loadingFlowWrapper: LoadingFlowWrapper = new LoadingFlowWrapper(this, loaderName);\n         return (new FunctionWrapper(originalFn))\n               .preExecute(() => {\n                  loadingFlowWrapper.error = undefined;\n                  loadingFlowWrapper.incrementLoads();\n                  ScreenReaderAnnouncerService.invoke(\n                        params.preLoadSrMessage || params.srMessage,\n                        params.srMessageType, SrEvent.LOADING);\n               })\n               .postExecute(() => {\n                  ScreenReaderAnnouncerService.invoke(params.srMessage, params.srMessageType, SrEvent.LOADED);\n               })\n               .onError((ex: any) => {\n                  processError(loadingFlowWrapper, tag, ex);\n                  const rethrow: boolean = shouldRethrow(loadingFlowWrapper, params);\n                  if (!rethrow) {\n                     ex = invokeErrorHandler(loadingFlowWrapper, ex);\n                  }\n                  return new ErrorContext(rethrow, ex);\n               })\n               .finally(() => {\n                  loadingFlowWrapper.decrementLoads();\n               })\n               .invoke(loadingFlowWrapper.backingObject, arguments);\n      };\n   };\n}\n\n/**\n * Parameters for the @Loader decorator\n */\nexport interface LoaderParams {\n\n   /**\n    * The name of the loader by which will be resolved te @LoadingIndicator, @ErrorHandler and @ErrorMessage\n    */\n   name?: string;\n\n   /**\n    * Indicates if the error should be rethrown after being processed by the @ErrorHandlers\n    */\n   rethrow?: boolean;\n\n   /**\n    * Used along with srMessageType to create the screen reader message to be announced after the loading\n    * operation completes successfully.\n    * If preLoadSrMessage is not set, srMessage will also be announced when the loading operation starts.\n    */\n   srMessage?: string;\n\n   /**\n    * Used when the message in preExecute() should be different than the one in postExecute().\n    * If not set, srMessage will be used in both places.\n    * Should be given a value when the srMessageType is set to CUSTOM,\n    * because otherwise the exact same message will be announced in preExecute() and postExecute().\n    */\n   preLoadSrMessage?: string;\n\n   /**\n    * The screen reader message type. Used for creating an appropriate message.\n    */\n   srMessageType?: SrMessageType;\n}\n\n/**\n * Handles the given error by:\n *  - logging the error in the browsers console\n *  - logging the error in the H5C backend log\n *  - updates all @ErrorMessage fields\n */\nfunction processError(wrapper: LoadingFlowWrapper, tag: string, ex: any): void {\n   // Log the error to the backend\n   GlobalLogger.error(tag, ex);\n\n   // Cache the error so it can be retrieved by @ErrorMessage decorated fields\n   wrapper.error = ex;\n}\n\n/**\n * Invokes the error handler (if defined)\n */\nfunction invokeErrorHandler(wrapper: LoadingFlowWrapper, ex: any): any {\n   const handler: any = wrapper.errorHandler;\n   return !!handler\n         ? handler.call(wrapper.backingObject, ex)\n         : null;\n}\n\n/**\n * Reject the promise only if:\n * 1. there are no handlers declared\n * 2. the components has explicitly requested the error to be rethrown\n */\nfunction shouldRethrow(wrapper: LoadingFlowWrapper, params: LoaderParams): boolean {\n   return !wrapper.errorHandler && !wrapper.errorMessageGetter\n         || !!params.rethrow;\n}\n","/* Copyright 2017-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {environment} from \"@env/environment\";\nimport {ManagedObject} from \"@service/managed-object\";\nimport {Logger} from \"./logger\";\nimport {WebPlatform} from \"./platform\";\nimport {VsanUiUtils} from \"./vsan-util\";\n\nexport class ModalBuilder {\n\n   static readonly WIDTH: number = 0;\n   static readonly HEIGHT: number = 1;\n\n   static readonly DEFAULT_SIZE: number[] = [1000, 530];\n   static readonly WIZARD_XL: number[] = [1200, 700];\n\n   static readonly APP_URL: string = (environment.repa && environment.repaExtension)\n         ? \"index.html\"\n         : \"/ui/h5-vsan-ui/\";\n\n   private size: number[] = ModalBuilder.DEFAULT_SIZE;\n\n   // When null, the modal dialog will be headless and the docked\n   // view is expected to provide a title bar.\n   private title: string = null;\n\n   private accessibilityTitle: string = null;\n\n   private urlParams: any = {};\n\n   private eventTarget: EventTarget;\n\n   constructor(private appId: string) {\n   }\n\n   setDimensions(dimensions: number[]): ModalBuilder {\n      if (!dimensions || dimensions.length !== 2) {\n         Logger.warn(\"invalid modal dimensions\", dimensions);\n         dimensions = ModalBuilder.DEFAULT_SIZE;\n      }\n      return this.setSize(dimensions[ModalBuilder.WIDTH], dimensions[ModalBuilder.HEIGHT]);\n   }\n\n   setSize(width: number, height: number): ModalBuilder {\n      this.size = [width, height];\n      return this;\n   }\n\n   setUrlParameters(params: any): ModalBuilder {\n      this.urlParams = params;\n      return this;\n   }\n\n   /**\n    * Set to null if the view provides its own title bar\n    */\n   setTitle(title: string): ModalBuilder {\n      this.title = title;\n      return this;\n   }\n\n   setAccessibilityTitle(accessibilityTitle: string): ModalBuilder {\n      this.accessibilityTitle = accessibilityTitle;\n      return this;\n   }\n\n   /**\n    * Set explicit event target if it is changed before opening the modal.\n    * For example when making a preceding request the event target is the XMLHttpRequest object.\n    */\n   setEventTarget(eventTarget: EventTarget): ModalBuilder {\n      this.eventTarget = eventTarget;\n      return this;\n   }\n\n   /**\n    * Opens a modal dialog and returns a promise to collect the result; On close the target element is focused.\n    * @param context - any JS data object, can be retrieved by WebPlatform.getModalContext()\n    * @returns {Promise<any>} - Invoked if the dialog invokes WebPlatform.closeModalDialog(arg)\n    *       with non-null arg. The promise is never rejected.\n    */\n   open(context?: any): Promise<any> {\n      return new Promise<any>((accept) => {\n         VsanUiUtils.pluginContext.targetElement = this.eventTarget ? this.eventTarget :\n               (event && event.target ? event.target : null);\n         VsanUiUtils.pluginContext.modalResultHandler = (data?: any) => {\n            if (typeof data !== \"undefined\") {\n               // Deep copy of the object was required to resolve an issue with object's prototype overriding when\n               // passing complex objects in IE11/Edge; Keep it for safety.\n               accept(JSON.parse(JSON.stringify(data)));\n            } else if (VsanUiUtils.pluginContext.targetElement && VsanUiUtils.pluginContext.targetElement.focus) {\n               // On cancel just focus the target element. Timeout is required as otherwise the focus may be\n               // consumed by the mouse click.\n               setTimeout(() => VsanUiUtils.pluginContext.targetElement.focus(), 100);\n            }\n         };\n\n         let actionUrl: string = `${ModalBuilder.APP_URL}?viewId=${this.appId}`;\n\n         let separator: string = \"?\";\n         for (const param in this.urlParams) {\n            actionUrl += separator + param + \"=\" + this.urlParams[param];\n            separator = \"&\";\n         }\n\n         WebPlatform.openModalDialog(this.title,\n               actionUrl,\n               ManagedObject.contextObjectUid,\n               this.size[0], this.size[1],\n               this.title != null,\n               VsanUiUtils.pluginContext.modalResultHandler /* onClose */,\n               context /* retrieve with Platform.getModalContext() */,\n               this.accessibilityTitle);\n      });\n   }\n\n}\n","/* Copyright 2017-2020 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Pipe, PipeTransform} from \"@angular/core\";\nimport {BaseHealthState, VsanHealthUtil} from \"@util/vsan-health-util\";\n\n@Pipe({\n   name: \"healthStateLabel\",\n})\nexport class VirtualObjectHealthStateLabelPipe implements PipeTransform {\n   transform(state: BaseHealthState | string): string {\n      return VsanHealthUtil.getVsanObjectHealthStatusText(state);\n   }\n}","/* Copyright 2020-2022 VMware, Inc. All rights reserved. -- VMware Confidential */\nexport class VsanDialogUtil {\n   static readonly CAPACITY_MANAGEMENT_DIALOG: VsanDialogProperties = {\n      width: 800,\n      height: 700,\n   };\n\n   static readonly DELETE_VOLUME_DIALOG: VsanDialogProperties = {\n      width: 500,\n      height: 250,\n   };\n\n   static readonly MIGRATE_VOLUME_DIALOG: VsanDialogProperties = {\n      width: 1030,\n      height: 710,\n   };\n\n   static readonly REAPPLY_VOLUME_POLICY_DIALOG: VsanDialogProperties = {\n      width: 700,\n      height: 250,\n   };\n\n   static readonly DUPLICATE_PCI_ID_MODEL_SELECTION_DIALOG: VsanDialogProperties = {\n      width: 800,\n      height: 500,\n   };\n\n   static readonly HEALTH_RESTORE_ACTION_DIALOG: VsanDialogProperties = {\n      width: 550,\n      height: 250,\n   };\n\n   // Keep in sync with plugin.xml extension point\n   static readonly CLUSTER_POWER_ON_DIALOG: VsanDialogProperties = {\n      width: 600,\n      height: 230,\n   };\n\n   static readonly VM_IO_DIAGNOSTICS_METRICS_DIALOG: VsanDialogProperties = {\n      width: 900,\n      height: 700,\n   };\n\n   static readonly VM_IO_DIAGNOSTICS_LATENCY_DIALOG: VsanDialogProperties = {\n      width: 1000,\n      height: 500,\n   };\n\n   static readonly VM_IO_DIAGNOSTICS_DOM_OWNER_LATENCY_DIALOG: VsanDialogProperties = {\n      width: 1000,\n      height: 400,\n   };\n\n   static readonly PERF_SVC_EDIT_ACTION_DIALOG: VsanDialogProperties = {\n      width: 800,\n      height: 450,\n   };\n\n   static readonly PERF_SVC_ENABLE_ACTION_DIALOG: VsanDialogProperties = {\n      width: 800,\n      height: 250,\n   };\n\n   static readonly CLAIM_DISKS_ACTION_DIALOG: VsanDialogProperties = {\n      width: 1200,\n      height: 650,\n   };\n\n   static readonly VSAN_DISK_CLAIM_ACTION_DIALOG: VsanDialogProperties = {\n      width: 670,\n      height: 300,\n   };\n}\n\nexport class VsanDialogProperties {\n   width: number;\n   height: number;\n}\n","/* Copyright 2021 VMware, Inc. All rights reserved. -- VMware Confidential */\n\n/**\n * This class is used internally by the @Loader decorator and the decorators related to it.\n * It encapsulates the logic for accessing internal properties needed for the decorators to work.\n * The state of this class is kept in the \"backingObject\" passed to the constructor. This allows\n * the wrapper class to be easily recreated wherever it is needed without worrying about keeping its reference.\n *\n * <pre>\n * const obj: any = {};\n *\n * // Create a new LoadingFlowWrapper over obj\n * const wrapper1: LoadingFlowWrapper = new LoadingFlowWrapper(obj);\n * // Set the error field to \"alabala\" string\n * wrapper1.error = \"alabala\";\n *\n * // Create a new LoadingFlowWrapper over obj\n * const wrapper2: LoadingFlowWrapper = new LoadingFlowWrapper(obj);\n * console.log(wrapper2.error); // Prints \"alabala\" because the backing object is the same\n * </pre>\n */\nexport class LoadingFlowWrapper {\n\n   private static readonly ERROR_HOLDER: string = \"__ex__\";\n   private static readonly ERROR_HANDLERS_REF_HOLDER: string = \"__errorHandlers__\";\n   private static readonly ERROR_MESSAGE_GETTERS_REF_HOLDER: string = \"__errorMessageGetters__\";\n   private static readonly LOADS_COUNT_HOLDER: string = \"__loadsCount__\";\n\n   private static readonly DEFAULT_NAME: string = \"default-loader\";\n\n   constructor(private _backingObject: any,\n         private loaderName: string) {\n      this.loaderName = loaderName || LoadingFlowWrapper.DEFAULT_NAME;\n\n      // Init all collections\n      this.initCollection(LoadingFlowWrapper.ERROR_HOLDER);\n      this.initCollection(LoadingFlowWrapper.ERROR_HANDLERS_REF_HOLDER);\n      this.initCollection(LoadingFlowWrapper.ERROR_MESSAGE_GETTERS_REF_HOLDER);\n      this.initCollection(LoadingFlowWrapper.LOADS_COUNT_HOLDER);\n   }\n\n   private initCollection(collectionName: string): void {\n      // Check first if the collection hasn't been initialized by another wrapper.\n      // If so, do nothing as we don't want to override the data already set.\n      if (!this.backingObject[collectionName]) {\n         this.backingObject[collectionName] = [];\n      }\n   }\n\n   /**\n    * The original object which methods/properties were decorated\n    */\n   get backingObject(): any {\n      return this._backingObject;\n   }\n\n   /**\n    * Returns the thrown error\n    */\n   get error(): any {\n      return this.backingObject[LoadingFlowWrapper.ERROR_HOLDER][this.loaderName];\n   }\n\n   /**\n    * Sets the thrown error\n    */\n   set error(val: any) {\n      this.backingObject[LoadingFlowWrapper.ERROR_HOLDER][this.loaderName] = val;\n   }\n\n   /**\n    * Returns the number of active loading operations\n    */\n   private get loadsCount(): number {\n      return this.backingObject[LoadingFlowWrapper.LOADS_COUNT_HOLDER][this.loaderName];\n   }\n\n   /**\n    * Returns true if there are running loader methods or promises.\n    */\n   get isLoading(): boolean {\n      return !!this.loadsCount;\n   }\n\n   /**\n    * Increase the number of active loading operations by one\n    */\n   incrementLoads(): void {\n      // Initialize the counter if it hasn't been initialized yet\n      if (!this.loadsCount) {\n         this.backingObject[LoadingFlowWrapper.LOADS_COUNT_HOLDER][this.loaderName] = 0;\n      }\n      this.backingObject[LoadingFlowWrapper.LOADS_COUNT_HOLDER][this.loaderName] += 1;\n   }\n\n   /**\n    * Decreases the number of active loading operations by one\n    */\n   decrementLoads(): void {\n      this.backingObject[LoadingFlowWrapper.LOADS_COUNT_HOLDER][this.loaderName] -= 1;\n   }\n\n   get errorHandler(): any {\n      return this.backingObject[LoadingFlowWrapper.ERROR_HANDLERS_REF_HOLDER][this.loaderName];\n   }\n\n   /**\n    * Registers a new error handler.\n    */\n   set errorHandler(errorHandler: any) {\n      if (!!this.errorHandler) {\n         throw new Error(`ErrorHandler for loader \"${this.loaderName}\" already registered!`);\n      }\n      this.backingObject[LoadingFlowWrapper.ERROR_HANDLERS_REF_HOLDER][this.loaderName] = errorHandler;\n   }\n\n   get errorMessageGetter(): any {\n      return this.backingObject[LoadingFlowWrapper.ERROR_MESSAGE_GETTERS_REF_HOLDER][this.loaderName];\n   }\n\n   set errorMessageGetter(getter: any) {\n      if (!!this.errorMessageGetter) {\n         throw new Error(`ErrorMessage for loader \"${this.loaderName}\" already registered!`);\n      }\n      this.backingObject[LoadingFlowWrapper.ERROR_MESSAGE_GETTERS_REF_HOLDER][this.loaderName] = getter;\n   }\n}\n","/* Copyright 2019-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {NgModule} from \"@angular/core\";\nimport {CommonModule} from \"@angular/common\";\nimport {FormsModule} from \"@angular/forms\";\nimport {ClarityModule} from \"@clr/angular\";\nimport {ValidationModule} from \"@component/validation/validation.module\";\nimport {CommonPipeModule} from \"@pipe/common-pipe.module\";\nimport {CommonDirectiveModule} from \"@directive/common-directive.module\";\nimport {HealthStatusCell} from \"@component/cell/health-status-cell.component\";\nimport {LabelCell} from \"@component/cell/label-cell.component\";\nimport {StoragePolicyCell} from \"@component/cell/storage-policy-cell.component\";\nimport {MorCell} from \"@component/cell/mor-cell.component\";\nimport {IconItemComponent} from \"@component/cell/icon-item.component\";\nimport {HealthStateItemComponent} from \"@component/cell/health-state-item.component\";\nimport {ListCell} from \"@component/cell/list-cell.component\";\nimport {PspHealthStateItemComponent} from \"@component/cell/psp-health-state-item.component\";\nimport {HealthTestValueComponent} from \"@component/cell/health-test-value.component\";\nimport {HealthLinkCellComponent} from \"@component/cell/health-link-cell.component\";\nimport {HealthMorCellComponent} from \"@component/cell/health-mor-cell.component\";\n\n@NgModule({\n   imports: [\n      CommonModule,\n      FormsModule,\n      ClarityModule,\n      ValidationModule,\n      CommonPipeModule,\n      CommonDirectiveModule,\n   ],\n   // TODO: (vasilevd) Move health specific components to a separate common health module\n   declarations: [\n      HealthStatusCell,\n      HealthTestValueComponent,\n      LabelCell,\n      StoragePolicyCell,\n      MorCell,\n      HealthMorCellComponent,\n      ListCell,\n      IconItemComponent,\n      HealthStateItemComponent,\n      PspHealthStateItemComponent,\n      HealthLinkCellComponent,\n   ],\n   exports: [\n      HealthStatusCell,\n      HealthTestValueComponent,\n      LabelCell,\n      StoragePolicyCell,\n      MorCell,\n      HealthMorCellComponent,\n      ListCell,\n      IconItemComponent,\n      HealthStateItemComponent,\n      PspHealthStateItemComponent,\n      HealthLinkCellComponent,\n   ],\n})\nexport class CommonCellsModule {\n}\n","/* Copyright 2021 VMware, Inc. All rights reserved. -- VMware Confidential */\n\n/**\n * Hold the context keys used in the vsan overview tab by PersistentStorageService.\n * The context is required because in the overview page, the details view is opened inline w/o navigation.\n */\nexport class InlineViewContextKey {\n   static readonly HEALTH_CHECK_CONTEXT_KEY: string = \"__health_check_context__\";\n   static readonly SERVICES_CONTEXT_KEY: string = \"__services_context__\";\n   static readonly FAULT_DOMAINS_CONTEXT_KEY: string = \"__fault_domains_context__\";\n   static readonly RESYNCING_OBJECTS_CONTEXT_KEY: string = \"__resyncing_objects_context__\";\n}\n","/* Copyright 2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {\n   AfterViewInit,\n   ComponentFactoryResolver,\n   Directive,\n   ElementRef,\n   Host,\n   Input,\n   Optional,\n   Renderer2,\n   Self,\n} from \"@angular/core\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {NavigationService} from \"@navigation/navigation.service\";\nimport {ClrButtonBaseDirective} from \"@directive/clr-button-group/clr-button-base.directive\";\nimport {ClrButton} from \"@clr/angular\";\n\n/**\n * Decorates a button or an anchor as external link. Requires one of the optional parameters articleId, helpId or url.\n *\n * @param external-link: Optional. Localization key of the text label of the external link. If omitted default label\n * will be used - \"Learn more\" for anchors or \"Ask VMWare\" for buttons.\n * @param articleId - Optional. Id of article in knowledge base.\n * @param helpId - Optional. Help id which will redirect to Knowledge Base.\n * @param url - Optional. External URL.\n */\n@Directive({\n   selector: \"a[external-link], button[external-link], clr-button[external-link]\",\n})\nexport class ExternalLinkDirective extends ClrButtonBaseDirective implements AfterViewInit {\n   private readonly ASK_VMWARE_DEFAULT_TEXT_KEY: string = \"vsan.common.askVMware\";\n   private readonly LEARN_MORE_DEFAULT_TEXT_KEY: string = \"vsan.common.learnMore\";\n\n   private readonly CONTAINER_CLASS: string = \"icon-name-container\";\n   private readonly NAVIGATION_EVENT_TYPE: string = \"click\";\n   private readonly LEAD_TO_NOWHERE_URL: string = \"javascript://\";\n   private readonly HTML_ELEMENT_SPAN_NAME: string = \"span\";\n   private readonly HTML_ELEMENT_ICON_NAME: string = \"clr-icon\";\n   private readonly HTML_ELEMENT_ROLE_ATTR_NAME: string = \"role\";\n   private readonly HTML_ELEMENT_ROLE_ATTR_VALUE: string = \"link\";\n   private readonly ICON_SHAPE_ATTR_NAME: string = \"shape\";\n   private readonly ICON_SHAPE_ATTR_VALUE: string = \"pop-out\";\n   private readonly ICON_SIZE_ATTR_NAME: string = \"size\";\n   private readonly ICON_SIZE_ATTR_VALUE: string = \"16\";\n   private readonly ICON_CLASS_ATTR_NAME: string = \"class\";\n   private readonly ICON_CLASS_ATTR_VALUE: string = \"link\";\n   private readonly ICON_TITLE_ATTR_NAME: string = \"title\";\n\n   private readonly KB_URL: string = \"http://kb.vmware.com/kb/\";\n\n   @Input(\"external-link\")\n   anchorText: string;\n\n   @Input()\n   articleId: string;\n\n   @Input()\n   helpId: string;\n\n   @Input()\n   url: string;\n\n   constructor(private el: ElementRef<HTMLElement>,\n         private resolver: ComponentFactoryResolver,\n         private renderer: Renderer2,\n         private navigationService: NavigationService,\n         // this variable will be initialized only if the host is clr-button\n         @Host() @Self() @Optional() clrButton: ClrButton) {\n      super(clrButton);\n   }\n\n   ngAfterViewInit(): void {\n      const element: HTMLElement = this.el.nativeElement;\n      // continue only if element is HTML link or button\n      if (!this.isLink(element) && !this.isButton(element)) {\n         // element is clr-button, wait until html button for it is resolved - handled by resloveButton\n         return;\n      }\n      this.prepareExternalLink(element);\n   }\n\n   resolveButton(clrButton: ClrButton, button: HTMLButtonElement, index: number): void {\n      // only if element is clr-button. At this point the html button is already resolved. Apply on it.\n      this.prepareExternalLink(button);\n   }\n\n   private prepareExternalLink(element: HTMLElement): void {\n      this.renderer.addClass(element, this.CONTAINER_CLASS);\n\n      this.setText(element);\n      if (this.isLink(element)) {\n         this.decorateLink(element);\n      } else {\n         this.addLinkRole(element);\n      }\n\n      this.initializeNavigationHandler(element);\n   }\n\n   private isButton(element: HTMLElement): boolean {\n      return element instanceof HTMLButtonElement;\n   }\n\n   private isLink(element: HTMLElement): boolean {\n      return element instanceof HTMLAnchorElement;\n   }\n\n   private setText(element: HTMLElement): void {\n      const span: HTMLSpanElement = this.renderer.createElement(this.HTML_ELEMENT_SPAN_NAME);\n      span.innerText = this.getText(element);\n      this.renderer.appendChild(element, span);\n\n      const icon: HTMLSpanElement = this.renderer.createElement(this.HTML_ELEMENT_ICON_NAME);\n      icon.setAttribute(this.ICON_SHAPE_ATTR_NAME, this.ICON_SHAPE_ATTR_VALUE);\n      icon.setAttribute(this.ICON_SIZE_ATTR_NAME, this.ICON_SIZE_ATTR_VALUE);\n      icon.setAttribute(this.ICON_CLASS_ATTR_NAME, this.ICON_CLASS_ATTR_VALUE);\n      // Set title of the icon for screen readers clarity\n      icon.setAttribute(this.ICON_TITLE_ATTR_NAME, VsanUiUtils.getString(\"vsan.screenReader.label.externalLink.icon\"));\n      this.renderer.appendChild(element, icon);\n   }\n\n   private getText(element: HTMLElement): string {\n      if (this.anchorText) {\n         return this.anchorText;\n      }\n      const key: string = this.isButton(element) ? this.ASK_VMWARE_DEFAULT_TEXT_KEY : this.LEARN_MORE_DEFAULT_TEXT_KEY;\n      return VsanUiUtils.getString(key);\n   }\n\n   private decorateLink(element: HTMLElement): void {\n      const linkElement: HTMLLinkElement = element as HTMLLinkElement;\n      // don't use href attribute. If omitted, the link will be not visualized properly.\n      linkElement.href = this.LEAD_TO_NOWHERE_URL;\n      // display link on same line\n      linkElement.style.display = \"inline-flex\";\n   }\n\n   private initializeNavigationHandler(element: HTMLElement): void {\n      element.addEventListener(this.NAVIGATION_EVENT_TYPE, () => {\n         if (this.helpId) {\n            this.navigationService.askVMware(this.helpId);\n            return;\n         }\n         if (this.articleId) {\n            this.navigationService.navigateToAddress(`${this.KB_URL}${this.articleId}`);\n            return;\n         }\n         if (this.url) {\n            this.navigationService.navigateToAddress(this.url);\n         }\n      });\n   }\n\n   // Indicate external navigation by assigning \"link\" role\n   private addLinkRole(element: HTMLElement): void {\n      this.renderer.setAttribute(element, this.HTML_ELEMENT_ROLE_ATTR_NAME, this.HTML_ELEMENT_ROLE_ATTR_VALUE);\n   }\n}","/* Copyright 2019-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {NgModule} from \"@angular/core\";\nimport {CommonModule} from \"@angular/common\";\nimport {ClarityModule} from \"@clr/angular\";\nimport {ActionButtonSeparatorComponent} from \"@component/action-button/action-button-separator.component\";\nimport {ButtonTitleDirective} from \"@component/action-button/button-title.directive\";\nimport {ButtonGroupDirective} from \"@component/action-button/button-group.directive\";\nimport {ButtonGroupWrapDirective} from \"@component/action-button/button-group-wrap.directive\";\n\n@NgModule({\n   imports: [\n      CommonModule,\n      ClarityModule,\n   ],\n   declarations: [\n      ActionButtonSeparatorComponent,\n      ButtonGroupDirective,\n      ButtonGroupWrapDirective,\n      ButtonTitleDirective,\n   ],\n   exports: [\n      ActionButtonSeparatorComponent,\n      ButtonGroupDirective,\n      ButtonGroupWrapDirective,\n      ButtonTitleDirective,\n   ]\n})\nexport class ActionButtonModule {\n}\n"]}