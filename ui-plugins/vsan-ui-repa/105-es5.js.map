{"version":3,"sources":["webpack:///src/app/vsan/hci/configure/component/networking-settings.component.ts","webpack:///src/app/vsan/hci/configure/view/vmotion-traffic-page.html","webpack:///src/app/vsan/hci/configure/view/distributed-switches-page.validator.ts","webpack:///src/app/vsan/hci/configure/view/advanced-options-page.html","webpack:///src/app/vsan/hci/configure/view/claim-disks-page.html","webpack:///src/app/vsan/hci/configure/view/proxy-settings-page.html","webpack:///src/app/vsan/hci/configure/view/support-insight-page.html","webpack:///src/app/vsan/hci/configure/component/ipv6-settings.component.ts","webpack:///src/app/vsan/hci/configure/component/existing-dvs-selector-dialog.component.ts","webpack:///src/app/vsan/hci/configure/configure-hci-cluster-wizard.module.ts","webpack:///src/app/vsan/hci/configure/view/proxy-settings-page.component.ts","webpack:///src/app/vsan/hci/configure/view/storage-traffic-page.html","webpack:///src/app/vsan/common/component/general-settings/general-settings.module.ts","webpack:///src/app/vsan/common/util/vsan-rdma-util.ts","webpack:///src/app/vsan/hci/configure/view/vmotion-traffic-page.component.ts","webpack:///src/app/vsan/hci/configure/component/ipv4-settings.components.ts","webpack:///src/app/vsan/hci/configure/configure-hci-cluster-wizard.component.ts","webpack:///src/app/generated/dvs-spec.ts","webpack:///src/app/vsan/hci/configure/view/advanced-options-page.component.ts","webpack:///src/app/vsan/common/util/vsan-dit-util.ts","webpack:///src/app/vsan/hci/configure/view/storage-traffic-page.component.ts","webpack:///src/app/vsan/hci/configure/view/distributed-switches-page.component.ts","webpack:///src/app/vsan/hci/configure/service/support-insight-configuration.service.ts","webpack:///src/app/vsan/hci/configure/view/distributed-switches-page.html","webpack:///src/app/vsan/hci/configure/component/existing-dvpg-selector-dialog.component.ts","webpack:///src/app/vsan/hci/configure/view/hci-cluster-ready-to-complete-page.component.ts","webpack:///src/app/vsan/hci/configure/component/existing-dvpg-selector-dialog.html","webpack:///src/app/generated/dvpg-data.ts","webpack:///src/app/vsan/hci/configure/service/configure-hci.service.ts","webpack:///src/app/vsan/hci/configure/component/ipv4-settings.html","webpack:///src/app/vsan/hci/configure/component/ipv6-settings.html","webpack:///src/app/vsan/hci/configure/view/claim-disks-page.component.ts","webpack:///src/app/vsan/hci/configure/view/hci-cluster-ready-to-complete-page.html","webpack:///src/app/vsan/hci/configure/configure-hci-cluster-wizard.html","webpack:///src/app/vsan/hci/configure/component/existing-dvs-selector-dialog.html","webpack:///src/app/vsan/hci/configure/view/support-insight-page.component.ts","webpack:///src/app/vsan/hci/configure/component/networking-settings.html"],"names":["HostIpv4Config","HostIpv6Config","Protocol","IpType","NetworkingSettingsComponent","fb","hosts","buildForm","form","group","useVlan","DEFAULT_USE_VLAN","required","vlan","value","DEFAULT_VLAN","disabled","validateVlan","protocol","DEFAULT_PROTOCOL","registerFormControlChangeHandlers","isExtend","valueChanges","forEach","disableSubsequentPages","toggleProtocol","updateValueAndValidity","pageControls","rebuildToc","toggleIpSettingsAvailability","ipv4Settings","isIPv4Compatible","ipv6Settings","isIPv6Compatible","ipSettings","enable","ipType","get","IP_TYPE_CONTROL_NAME","DHCP","disable","disableVlanInput","invalid","formControl","dirty","getNetConfig","service","formValue","ipv4IpType","hostIpv4Configs","ipv6IpType","hostIpv6Configs","STATIC","hostSettings","map","element","Factory","create","name","ipv4","subnetMask","gateway","ipv6","prefix","dvpg","existingDvpg","dvpgName","existingDvpgMor","c","Number","MIN_VLAN","MAX_VLAN","valid","isIpSettingsFormValid","ipSettingsForm","isIpv4","touched","controls","ipRows","HOST_SETTINGS_CONTROL_NAME","some","hostControl","isIpv4ControlFilled","isIpv6ControlFilled","ipv4Control","IPV4_CONTROL_NAME","subnetMaskControl","SUBNET_MASK_CONTROL_NAME","gatewayControl","GATEWAY_CONTROL_NAME","ipv6Control","IPV6_CONTROL_NAME","prefixControl","PREFIX_CONTROL_NAME","ipSettingsInfoMessage","getString","VSAN","isDefaultGatewaySupported","showDefaultGateway","concat","USE_VLAN_CONTROL_NAME","VLAN_CONTROL_NAME","vlanType","VLAN_ID","VLAN_TRUNK","PVLAN","PROTOCOL_CONTROL_NAME","IPV4_SETTINGS_CONTROL_NAME","IPV6_SETTINGS_CONTROL_NAME","IPV4","MIXED","IPV6","validateControls","enabled","validateAllFormFields","DistributedSwitchesPageValidator","invalidDvsNameControl","control","hasError","hasDvsLocalDuplicateNameError","hasDvsExistingDuplicateNameError","invalidDvpgNameControl","DVPG_LOCALLY_DUPLICATE_NAMES_VALIDATION","DVPG_EXISTING_DUPLICATE_NAMES_VALIDATION","getDvsNameControlErrors","getDvpgNameControlErrors","getDvsAssignmentErrors","dvsFormControls","errors","hasDvsToAdapterAssignmentError","push","DVS_TO_ADAPTER_ASSIGNMENT_VALIDATION","hasDuplicateNameError","DVS_LOCALLY_DUPLICATE_NAMES_VALIDATION","DVS_EXISTING_DUPLICATE_NAMES_VALIDATION","expectedError","formArray","parent","error","getError","duplicateNames","indexOf","DVS_TO_PG_ASSIGNMENT_VALIDATION","Ipv6Settings","ipService","Icon","onFormChange","hostFormGroups","host","NAME_CONTROL_NAME","validateIpv6","validateLinkLocalAddress","validatePrefix","validateIpv6DefaultGateway","validator","validateDifferentSubnetError","hostFormArray","array","validateDuplicateIps","DEFAULT_IPV6_IP_TYPE","addControl","toggleHostSettingsAvailability","formGroup","controlName","statusChanges","ROUTER_ADVERTISEMENT","emit","getIpv6Control","idx","controlPath","getFormControlPath","HOST_SETTINGS_GROUP_PATH","getPrefixControl","getGatewayControl","hasDifferentSubnet","hostControls","isSameIpv6Subnet","trim","hasSubnetMismatch","DIFFERENT_SUBNET_VALIDATION","invalidIpv6Control","hasDuplicateIp","invalidPrefixControl","invalidGatewayControl","DUPLICATE_IPS_VALIDATION","duplicateIps","getNormalizedIpv6Address","getDuplicateIps","formGroups","ips","result","ip","hasOwnProperty","getIpv6ControlErrors","evaluateIpv6Validity","evaluateDuplicateIpv6Validity","evaluateDifferentSubnetValidity","evaluateLinkLocalValidity","getPrefixControlErrors","evaluatePrefixValidity","getGatewayControlErrors","evaluateGatewayValidity","IPV6_VALIDATION","LINK_LOCAL_VALIDATION","PREFIX_VALIDATION","String","isIpv6AddressValid","isLinkLocalIpv6Address","isSubnetPrefixValid","ipv6FormArray","length","IP_TYPE_CONTROL_PATH","ExistingDvsSelectorDialogComponent","hciClusterService","VsanUiUtils","onOkClicked","newDvsSelection","closeModalDialog","selectedDvs","requestData","isLoading","getExistingDvs","clusterRef","selectedExistingDvsName","then","onDataRetrieved","onRequestError","existingDvsList","isSelected","context","getModalContext","selectedDvsNames","DVS_GRID_PAGE_SIZE","dvsName","alertMessage","configureHciWizardRoutes","path","component","ConfigureHciClusterWizardModule","ProxySettingsPageComponent","refWatcher","resolveProxyUrl","hostName","startsWith","HTTP_PREFIX","HTTPS_PREFIX","watchSubscriptionRef","proxyInputs","proxyForm","subscribe","clearValidationErrors","populateSpec","configureWizardData","proxySettingsConfig","proxySettings","enableProxy","hostname","port","userName","username","password","GeneralSettingsModule","VsanRdmaUtil","hostHardwareSupportRdma","isLargeScaleSupportEnabled","configType","isRdmaStretchedClusterSupported","isClusterTypeSupported","errorMessage","isStretchedOrTwoNodeCluster","STRETCHED_CLUSTER","TWO_HOST_VSAN_CLUSTER","VmotionTrafficPageComponent","hciService","currentService","VMOTION","vmotionDvsName","clusterConfigData","basicConfig","dvsDataByService","vmotionDvpg","getDvpgVlan","vlanData","networkingSettings","validate","netServiceConfigs","filter","config","Ipv4Settings","networkService","validateIpv4","validateSubnetMask","validateDefaultGateway","DEFAULT_IPV4_IP_TYPE","getIpv4Control","getSubnetMaskControl","isRowFilled","isSameIpv4Subnet","invalidIpv4Control","invalidSubnetMaskControl","validAutofillControl","subnet","getIpv4ControlErrors","evaluateIpv4Validity","evaluateDuplicateIpv4Validity","getSubnetMaskControlErrors","evaluateSubnetMaskValidity","autoFillAddresses","requestingData","ipAddress","FIRST_ROW_INDEX","ipv4RequestSpec","getConsequentHostAddresses","fillSubsequentAddresses","IPV4_VALIDATION","SUBNET_MASK_VALIDATION","isIpv4AddressValid","isSubnetMaskValid","ipv4FormArray","defaultGateway","index","setValue","ConfigureHciClusterWizard","capabilityProvider","networkProxyService","encryptionPropertyProvider","dataLoaded","services","pages","includeClaimDisksPage","hasDiskGroupsOnWitness","isWitnessDeployedFromOvf","isVsanMaxWorkflow","isClaimDisksPageVisible","selectedVsanClusterType","modalContext","isVsanMaxSupportedOnHosts","setAccessibilityTitle","Promise","all","getEncryptionPermissions","contextObject","getReKeyPermissions","getClusterConfigData","getClusterCapabilityData","getVcCapabilityData","hasEncryptionPermissions","hasRekeyPermission","clusterCapabilityData","vcCapabilityData","vsanEnabled","isHciWorkflowInProgress","hciWorkflowState","isSupportInsightSupported","getSettings","httpsProxySetting","moRef","contextClusterRef","clusterHosts","notConfiguredClusterHosts","notConfiguredHosts","vsanConfigSpec","isVsanMaxEnabled","hciWorkflow","encryptionPermissions","rekeyPermission","getPages","showDvsPage","showVmotionTrafficPage","optOutOfNetworking","showVsanTrafficPage","showAdvancedOptionsPage","showClaimDisksPage","isSupportInsightStepHidden","ceipEnabled","disableSupportInsight","showSingleSiteFaultDomainsPage","DvsSpec","adapters","existingDvsMor","AdvancedOptionsPageComponent","vsanRdmaService","faultDomainValidationService","SpaceEfficiencyConfig","AlertType","allowCreateFaultDomains","showVsanMaxEnableOption","stackBlocksExpandedState","Array","fill","HA_SETTINGS_INDEX","DRS_SETTINGS_INDEX","VSAN_SETTINGS_INDEX","HOST_SETTINGS_INDEX","EVM_SETTINGS_INDEX","AUTOMATION_OPTS","id","MANUAL","label","PARTIALLY_AUTOMATED","FULLY_AUTOMATED","AVAILABLE_MIGRATION_THRESHOLD","VUM_BASELINE_PREFERENCE_TYPES","latestRelease","latestPatch","noRecommendation","AVAILABLE_LOCKDOWN_MODES","DISABLED","NORMAL","STRICT","availableHostFtt","parseMigrationThreshold","migrationThreshold","clearPageState","validateEvcMode","enableEVC","getEvcModeValidationResult","selectedEvcMode","results","aggregateEvcModeValidationResults","errorMap","Map","prototype","apply","hostRefs","set","errorMessages","val","key","hostNames","clusterHostFaultDomainData","domain","fromUid","hostUid","join","_clusterTypes","SINGLE_SITE_CLUSTER","totalHosts","stretchClusterSupported","evcModeConfigData","supportedIntelEvcMode","supportedAmdEvcMode","DEFAULT_MIGRATION_THRESHOLD","i","isEncryptionSupported","kmipClusterData","availableKmipClusters","kmipClusterId","selectedHostFtt","hostFTT","advancedOptions","largeClusterSupportEnabled","largeScaleClusterSupport","getRdmaState","initStackBlocksExpandedState","validateSelection","haEnabled","drsEnabled","stackBlockIndex","newIndexState","isDataInTransitEncryptionSupported","isDeduplicationAndCompressionSupported","isCompressionOnlySupported","enableDataInTransitEncryption","rekeyInterval","DEFAULT_DIT_REKEY_INTERVAL","validationErrors","enableDataAtRestEncryption","getFaultDomainValidationErrors","advancedOptionsValidation","validateAdvancedSettings","enableFaultDomainForSingleSiteCluster","updateRdmaState","isRdmaSupported","canEnableRdma","enableRdma","spaceEfficiencyConfig","NONE","disableNextButton","addValidationErrors","nextButtonIsDisabled","getIsRdmaHardwareSupported","setBusyState","vSanHostAdapters","dvsSpecs","find","dvs","includes","adapter","deviceName","isRdmaHardwareSupported","clearBusyState","getRdmaDisabledMessage","getDitUnavailableMessage","isClusterClientOrServer","hasSharedWitnessHost","isDitSharedWitnessInteroperabilitySupported","VsanDitUtil","autoClaimDisks","StorageTrafficPageComponent","storageDvsName","storageDvpg","DistributedSwitchesPageComponent","formBuilder","navigationService","VMOTION_PG_CONTROL_NAME","VSAN_PG_CONTROL_NAME","HCI_WIZARD_ROUTE_PATH","EXISTING_DVS_SELECTOR_COMPONENT","EXISTING_DVPG_SELECTOR_COMPONENT","selectedExistingDvs","showExistingVmotionButton","showExistingVsanButton","dvsNames","dvsFormArray","createDvsFormArray","DVS_COUNT_DEFAULT_VALUE","controlsConfig","PG_DEFAULT_SWITCH","VMOTION_PG_NAME_CONTROL_NAME","getDvpgUniqueName","uniqueNewDvsNames","maxLength","validateDuplicateDvpg","VSAN_PG_NAME_CONTROL_NAME","pgFormGroup","adaptersFormGroups","physicalAdapters","physicalAdapter","ADAPTER_NOT_IN_USE","adaptersFormArray","netConfigFormGroup","DVS_COUNT_CONTROL_NAME","DVS_FORM_ARRAY","PG_FORM_GROUP","ADAPTERS_FORM_ARRAY","distributedSwitchesForm","OPT_OUT_OF_NET_CONFIG_CONTROL_NAME","NET_CONFIG_FORM_GROUP","disableNetworking","optOutOfNetworkingDisabled","optOutOfNetConfigControl","setDvsNames","dvsCountControl","changeDvsCount","pgFormControls","validateDvsNameControls","adapterFormControls","dvsNameControls","vmotionPgNameFormControl","vsanPgNameFormControl","validateDvpgNameControls","getDvsNameControl","DVS_FORM_ARRAY_PATH","toString","DVS_CONTROL_NAME","getDvsPortGroupsCount","dvsIndex","getDvsUplinksCount","getExistingDvsSelected","validateDuplicateDvsNames","dvsCount","localDuplicateDvsNames","dvsFormValues","existingDvsNames","elem","dvpgNameControl","existingPgNames","existingVmotionDvpg","existingStorageDvpg","getVmotionDvpgName","getStorageDvpgName","validateAssignment","dvsNameFormControl","groupIndex","getDvsNameGroupIndex","assignedAdapters","at","optOutOfNetConfig","netSettingsFormGroup","setControl","maxDvsCount","highestDvsIndex","setPortGroupsDvs","setAdaptorsDvs","slice","newDvsName","marginDvsName","Object","keys","adapterFormGroups","dvsFormGroups","existingDvsSelected","isExistingDvs","validators","getVmotionDvsName","vmotionPgFormControl","getStorageDvsName","vsanPgFormControl","dvpgRef","dvsMor","dvsRef","getDvsServices","getDvsHostAdapters","validateNetworkSpecification","validationMessages","dvsIdx","groups","controlsObject","hostAdapter","getHostAdapter","populateDvpgName","showExistingButton","DVS_COUNT_CONTROL_PATH","dvsNameFormGroups","PG_FORM_GROUP_PATH","ADAPTERS_FORM_ARRAY_PATH","adapterFormArray","Math","min","NET_MAX_COUNT","from","sort","warning","dvsAssignmentErrors","hasInvalidDvsName","validatePermissions","permissionPromises","checkDvsCreatePermission","checkDvpgCreatePermission","hasNetworkingCreatePermissions","dvsMors","dvpgMors","hasNetworkingModifyPermissions","navigateToVmwareCom","VVD_ROUTE","setSize","open","existingDvsSelection","el","existingDvs","networkName","dialogPromise","openExistingDvpgDialog","existingDvpgSelection","createUniqueIndexedString","getDefaultDvpgName","DVS_SERVICE_WORD_SEPARATOR","selectedExistingDvpgName","DVS_SERVICE_SEPARATOR","VSAN_PG_NAME","VMOTION_PG_NAME","SupportInsightConfigurationService","http","ceipService","cookieService","doRequest","dataUrl","httpMethod","body","opts","getDsRequestOptions","accept","reject","date","Date","time","getTime","requestId","getUniqueRequestId","debug","toLocaleString","encodedDataUrl","encodeURI","promise","HTTP_METHOD","GET","toPromise","PUT","requestJson","JSON","stringify","put","POST","post","warn","r","duration","message","promises","joinCeip","saveProxySettings","hideSupportInsightStep","CEIP_URL","prepareCeipHeader","options","xsrfToken","VSPHERE_UI_XSRF_TOKEN_COOKIE","headers","append","VSPHERE_UI_XSRF_TOKEN_HEADER","updateSettings","err","webContextPath","ExistingDvpgSelectorDialogComponent","getExistingDvpg","existingDvpgList","selectedDvpg","DVPG_GRID_PAGE_SIZE","newDvpgSelection","HciClusterReadyToCompletePageComponent","spaceEfficiencyService","ClaimOption","preferredHosts","secondaryHosts","populateDatastoreClaimedDisksInfo","populateStretchedClusterConfig","hasSupportInsightConfiguration","vsanMaxClaimOptions","VSAN_SINGLE_TIER_CLAIM_OPTIONS","claimOption","disksClaimingConfigInfo","hasNewClaimedCapacity","vsanDirectClaimOptions","VSAN_DIRECT_CLAIM_OPTIONS","pmemClaimOptions","PMEM_CLAIM_OPTIONS","populateDomains","isStretchedCluster","stretchedClusterConfig","getStretchedClusterConfig","displaySingleSiteFaultDomainNames","isEmpty","faultDomainNames","preferredDomains","item","isHost","children","h1","h2","localeCompare","secondaryDomains","preferredFdName","secondaryFdName","preferredFdDomains","secondaryFdDomains","preferredName","secondaryName","uid","witnessHost","witnessHostDiskMapping","storagePoolDisks","toLabel","lockdownMode","ntpServer","type","vumBaselineRecommendationType","ClaimForStorage","claimAllFlash","isAutoClaim","formatFileSize","autoClaimedDisks","totalClaimedCapacity","getOldClaimedCapacity","getClaimedCapacity","disksCount","getClaimedDiskCount","getNetServiceConfig","getServiceDescriptionText","hostNum","getServiceDescriptionForOneHost","getServiceDescriptionForMultipleHosts","getServiceDescriptionForOneHostIpv4","getServiceDescriptionForOneHostIpv6","getServiceDescriptionForOneHostMixedProtocol","getServiceDescriptionMixedProtocol","getServiceDescriptionForMultipleHostsIpv4","getServiceDescriptionForMultipleHostsIpv6","getServiceDescriptionForMultipleHostsMixedProtocol","multipleHosts","getStaticIpv4Ipv6Label","getStaticIpv4DhcpIpv6Label","getStaticIpv4RouterIpv6Label","getDhcpIpv4Ipv6Label","getDhcpIpv4StaticIpv6Label","getDhcpIpv4RouterIpv6Label","DvpgData","ConfigureHciService","supportInsightService","configureSupportInsight","configureCluster","HciClaimDisksPage","isAutoClaimAllowed","isManualClaimDiskDataLoaded","_hostsClaimingData","entries","dataEfficiency","hasVsanMaxCompatibleDisks","hostsClaimingData","values","isConfigAcceptable","diskMappings","isDiskClaimVsanManaged","disksClaimingConfig","SupportInsightPageComponent","_disableSupportInsight","_hideSupportInsight","hideSupportInsight"],"mappings":"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","file":"105-es5.js","sourcesContent":["/* Copyright 2017-2020 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, Input, OnInit} from \"@angular/core\";\nimport {AbstractControl, FormArray, FormBuilder, FormControl, FormGroup, Validators} from \"@angular/forms\";\nimport {ManagedObject} from \"@service/managed-object\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {ReactiveFormUtil} from \"@util/reactive-form-util\";\nimport {PageControls} from \"@component/wizard/flow-wizard.component\";\nimport {NetServiceConfig} from \"@generated/net-service-config\";\nimport {Service} from \"@generated/service\";\nimport {DvpgData} from \"@generated/dvpg-data\";\nimport {VlanType} from \"@generated/vlan-type\";\nimport HostIpv4Config = NetServiceConfig.HostIpv4Config;\nimport HostIpv6Config = NetServiceConfig.HostIpv6Config;\nimport Protocol = NetServiceConfig.Protocol;\nimport IpType = NetServiceConfig.IpType;\nimport {InventoryNode} from \"@generated/inventory-node\";\n\n@Component({\n   templateUrl: \"networking-settings.html\",\n   selector: \"vsan-networking-settings\",\n   styleUrls: [\"networking-settings.scss\"],\n})\nexport class NetworkingSettingsComponent implements OnInit {\n\n   readonly Protocol: typeof Protocol = Protocol;\n\n   static readonly IPV4_SETTINGS_CONTROL_NAME: string = \"ipv4Settings\";\n   static readonly IPV6_SETTINGS_CONTROL_NAME: string = \"ipv6Settings\";\n   static readonly IP_TYPE_CONTROL_NAME: string = \"ipType\";\n   static readonly HOST_SETTINGS_CONTROL_NAME: string = \"hostSettings\";\n   private static readonly DEFAULT_USE_VLAN: boolean = true;\n   private static readonly DEFAULT_VLAN: number = 0;\n   private static readonly MIN_VLAN: number = 0;\n   private static readonly MAX_VLAN: number = 4095;\n   private static readonly DEFAULT_PROTOCOL: Protocol = Protocol.IPV4;\n   private static readonly USE_VLAN_CONTROL_NAME: string = \"useVlan\";\n   private static readonly VLAN_CONTROL_NAME: string = \"vlan\";\n   private static readonly PROTOCOL_CONTROL_NAME: string = \"protocol\";\n   private static readonly IPV4_CONTROL_NAME: string = \"ipv4\";\n   private static readonly SUBNET_MASK_CONTROL_NAME: string = \"subnetMask\";\n   private static readonly GATEWAY_CONTROL_NAME: string = \"gateway\";\n   private static readonly IPV6_CONTROL_NAME: string = \"ipv6\";\n   private static readonly PREFIX_CONTROL_NAME: string = \"prefix\";\n\n   @Input()\n   pageControls: PageControls;\n\n   @Input()\n   hosts: InventoryNode[] = [];\n\n   @Input()\n   dsName: string;\n\n   @Input()\n   dvpg: DvpgData;\n\n   @Input()\n   isExtend: boolean;\n\n   @Input()\n   vlanId: string;\n\n   @Input()\n   vlanType: VlanType;\n\n   @Input()\n   service: Service;\n\n   @Input()\n   isDefaultGatewaySupported: boolean;\n\n   form: FormGroup;\n   showDefaultGateway: boolean;\n   ipSettingsInfoMessage: string;\n\n   constructor(private fb: FormBuilder) {}\n\n   ngOnInit(): void {\n      this.buildForm();\n      this.registerFormControlChangeHandlers();\n\n      this.ipSettingsInfoMessage =\n          VsanUiUtils.getString(\"vsan.cluster.hci.configureHciCluster.wizard.networking.hostListDescription\");\n      if (this.service !== Service.VSAN || this.isDefaultGatewaySupported) {\n          this.showDefaultGateway = true;\n          this.ipSettingsInfoMessage = this.ipSettingsInfoMessage.concat(\" \", VsanUiUtils.getString(\n                \"vsan.cluster.hci.configureHciCluster.wizard.networking.DefaultGatewayDescription\"));\n      }\n   }\n\n   private buildForm = (): void => {\n      this.form = this.fb.group({\n         useVlan: [NetworkingSettingsComponent.DEFAULT_USE_VLAN, [Validators.required]],\n         vlan: [{value: NetworkingSettingsComponent.DEFAULT_VLAN, disabled: false},\n                [Validators.required, this.validateVlan]],\n         protocol: [NetworkingSettingsComponent.DEFAULT_PROTOCOL, [Validators.required]],\n      });\n   };\n\n   private registerFormControlChangeHandlers = (): void => {\n      if (!this.isExtend) {\n         this.useVlan.valueChanges.forEach(this.disableSubsequentPages);\n         this.vlan.valueChanges.forEach(this.disableSubsequentPages);\n      }\n\n      this.protocol.valueChanges.forEach((protocol: string) => this.toggleProtocol(Protocol[protocol]));\n   };\n\n   disableSubsequentPages = (): void => {\n      this.form.updateValueAndValidity();\n      this.pageControls.rebuildToc();\n   };\n\n   private toggleProtocol = (protocol: Protocol) => {\n      this.toggleIpSettingsAvailability(this.ipv4Settings, this.isIPv4Compatible(protocol));\n      this.toggleIpSettingsAvailability(this.ipv6Settings, this.isIPv6Compatible(protocol));\n      this.disableSubsequentPages();\n   };\n\n   private toggleIpSettingsAvailability = (ipSettings: FormGroup, enable: boolean): void => {\n      if (!ipSettings) {\n         return;\n      }\n\n      if (enable) {\n         const ipType: FormControl = ipSettings.get(NetworkingSettingsComponent.IP_TYPE_CONTROL_NAME) as FormControl;\n         if (ipType.value === IpType.DHCP) {\n            ipType.enable();\n         } else {\n            ipSettings.enable();\n         }\n      } else {\n         ipSettings.disable();\n      }\n   };\n\n   /** Form controls getters */\n\n   get useVlan(): FormControl {\n      return this.form.get(NetworkingSettingsComponent.USE_VLAN_CONTROL_NAME) as FormControl;\n   }\n\n   get vlan(): FormControl {\n      return this.form.get(NetworkingSettingsComponent.VLAN_CONTROL_NAME) as FormControl;\n   }\n\n   get vlanLabel(): string {\n      switch (this.vlanType) {\n         case VlanType.VLAN_ID:\n            return VsanUiUtils.getString(\"vsan.cluster.hci.configureHciCluster.wizard.networking.vlanIdLabel\");\n         case VlanType.VLAN_TRUNK:\n            return VsanUiUtils.getString(\"vsan.cluster.hci.configureHciCluster.wizard.networking.vlanTrunkLabel\");\n         case VlanType.PVLAN:\n            return VsanUiUtils.getString(\"vsan.cluster.hci.configureHciCluster.wizard.networking.pVlanIdLabel\");\n         default: return VsanUiUtils.getString(\"vsan.cluster.hci.configureHciCluster.wizard.networking.vlanIdLabel\");\n      }\n   }\n\n   get protocol(): FormControl {\n      return this.form.get(NetworkingSettingsComponent.PROTOCOL_CONTROL_NAME) as FormControl;\n   }\n\n   get ipv4Settings(): FormGroup {\n      return this.form.get(NetworkingSettingsComponent.IPV4_SETTINGS_CONTROL_NAME) as FormGroup;\n   }\n\n   get ipv6Settings(): FormGroup {\n      return this.form.get(NetworkingSettingsComponent.IPV6_SETTINGS_CONTROL_NAME) as FormGroup;\n   }\n\n   get showIpv4Tab(): boolean {\n      return this.isIPv4Compatible(this.protocol.value);\n   }\n\n   get showIpv6Tab(): boolean {\n      return this.isIPv6Compatible(this.protocol.value);\n   }\n\n   private isIPv4Compatible(protocol: Protocol): boolean {\n      return protocol === Protocol.IPV4 || protocol === Protocol.MIXED;\n   }\n\n   private isIPv6Compatible(protocol: Protocol): boolean {\n      return protocol === Protocol.IPV6 || protocol === Protocol.MIXED;\n   }\n\n   get ipv4TabError(): boolean {\n      const ipv4Settings: FormGroup =\n            this.form.get(NetworkingSettingsComponent.IPV4_SETTINGS_CONTROL_NAME) as FormGroup;\n\n      return this.isIpSettingsFormValid(ipv4Settings, true);\n   }\n\n   get ipv6TabError(): boolean {\n      const ipv6Settings: FormGroup =\n            this.form.get(NetworkingSettingsComponent.IPV6_SETTINGS_CONTROL_NAME) as FormGroup;\n\n      return this.isIpSettingsFormValid(ipv6Settings, false);\n   }\n\n   disableVlanInput = (): void => {\n      if (this.useVlan.value === false) {\n         this.vlan.disable();\n      } else {\n         this.vlan.enable();\n      }\n   };\n\n   invalid = (formControl: AbstractControl): boolean => {\n      return formControl.invalid && formControl.dirty;\n   };\n\n   validate(): string[] {\n      // validate only the enabled form fields\n      if (this.useVlan && this.useVlan.value === true) {\n         ReactiveFormUtil.validateControls([this.vlan]);\n      }\n      if (this.ipv4Settings && this.ipv4Settings.enabled) {\n         ReactiveFormUtil.validateAllFormFields(this.ipv4Settings);\n      }\n      if (this.ipv6Settings && this.ipv6Settings.enabled) {\n         ReactiveFormUtil.validateAllFormFields(this.ipv6Settings);\n      }\n\n      if (this.form.invalid) {\n         return [\n            VsanUiUtils.getString(\n                  \"vsan.cluster.hci.configureHciCluster.wizard.networking.notAcceptableErrors\"),\n         ];\n      }\n\n      return null;\n   }\n\n   getNetConfig = (service: Service): NetServiceConfig => {\n      const formValue: any = this.form.value;\n      let ipv4IpType: IpType = null;\n      let hostIpv4Configs: HostIpv4Config[] = [];\n      let ipv6IpType: IpType = null;\n      let hostIpv6Configs: HostIpv6Config[] = [];\n      if (this.isIPv4Compatible(formValue.protocol)) {\n         ipv4IpType = formValue.ipv4Settings.ipType;\n         if (ipv4IpType === IpType.STATIC) {\n            hostIpv4Configs =\n                  formValue.ipv4Settings.hostSettings.map((element) =>\n                        HostIpv4Config.Factory.create(element.name, element.ipv4, element.subnetMask, element.gateway),\n                  );\n         }\n      }\n\n      if (this.isIPv6Compatible(formValue.protocol)) {\n         ipv6IpType = formValue.ipv6Settings.ipType;\n         if (ipv6IpType === IpType.STATIC) {\n            hostIpv6Configs =\n                  formValue.ipv6Settings.hostSettings.map((element) =>\n                        HostIpv6Config.Factory.create(element.name, element.ipv6, +element.prefix, element.gateway),\n                  );\n         }\n      }\n\n      if (this.isExtend || this.dvpg.existingDvpg) {\n         formValue.useVlan = false;\n      }\n\n      const dvpgName: string = this.dvpg ? this.dvpg.name : \"\";\n      const existingDvpgMor: ManagedObject = this.dvpg ? this.dvpg.existingDvpg : null;\n\n      return NetServiceConfig.Factory.create(\n            service,\n            formValue.useVlan,\n            +formValue.vlan,\n            dvpgName,\n            existingDvpgMor,\n            formValue.protocol,\n            ipv4IpType,\n            hostIpv4Configs,\n            ipv6IpType ,\n            hostIpv6Configs);\n   };\n\n   /** Form control validators */\n\n   private validateVlan = (c: AbstractControl): {[key: string]: any} | null => {\n      const vlan: number = Number(c.value);\n      return vlan >= NetworkingSettingsComponent.MIN_VLAN && vlan <= NetworkingSettingsComponent.MAX_VLAN ? null : {\n         validateVlan: {\n            valid: false,\n         },\n      };\n   };\n\n   private isIpSettingsFormValid = (ipSettingsForm: FormGroup, isIpv4: boolean): boolean => {\n      if (!ipSettingsForm || !ipSettingsForm.touched || ipSettingsForm.valid || !ipSettingsForm.controls) {\n         return false;\n      }\n\n      const ipRows: FormArray = ipSettingsForm.controls[\n            NetworkingSettingsComponent.HOST_SETTINGS_CONTROL_NAME] as FormArray;\n\n      // display error if any of the rows is invalid and filled/touched\n      return ipRows.controls.some((hostControl: FormGroup) => {\n         return !hostControl.valid && (isIpv4 ? this.isIpv4ControlFilled(hostControl)\n                     : this.isIpv6ControlFilled(hostControl));\n      });\n   };\n\n   private isIpv4ControlFilled = (hostControl: FormGroup): boolean => {\n      const ipv4Control: AbstractControl = hostControl.get(\n            NetworkingSettingsComponent.IPV4_CONTROL_NAME);\n      const subnetMaskControl: AbstractControl = hostControl.get(\n            NetworkingSettingsComponent.SUBNET_MASK_CONTROL_NAME);\n      const gatewayControl: AbstractControl = hostControl.get(\n            NetworkingSettingsComponent.GATEWAY_CONTROL_NAME);\n\n      return (ipv4Control.touched || ipv4Control.value)\n            && (gatewayControl.touched || gatewayControl.value)\n            && (subnetMaskControl.touched || subnetMaskControl.value);\n   };\n\n   private isIpv6ControlFilled = (hostControl: FormGroup): boolean => {\n      const ipv6Control: AbstractControl = hostControl.get(\n            NetworkingSettingsComponent.IPV6_CONTROL_NAME);\n      const prefixControl: AbstractControl = hostControl.get(\n            NetworkingSettingsComponent.PREFIX_CONTROL_NAME);\n      const gatewayControl: AbstractControl = hostControl.get(\n            NetworkingSettingsComponent.GATEWAY_CONTROL_NAME);\n\n      return ipv6Control.touched && gatewayControl.touched && prefixControl.touched;\n   };\n}","<vsan-networking-settings [pageControls]=\"pageControls\"\n                          [hosts]=\"hosts\"\n                          [dsName]=\"vmotionDvsName\"\n                          [service]=\"currentService\"\n                          [dvpg]=\"vmotionDvpg\"\n                          [vlanId]=\"vlan\"\n                          [vlanType]=\"vlanType\"\n                          [isExtend]=\"configureWizardData.isExtend\"\n                          [isDefaultGatewaySupported]=\"clusterCapabilityData.isDefaultGatewaySupported\">\n</vsan-networking-settings>","/* Copyright 2017 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Injectable} from \"@angular/core\";\nimport {FormArray, FormControl} from \"@angular/forms\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\n\n@Injectable()\nexport class DistributedSwitchesPageValidator {\n\n   public static readonly DVS_TO_PG_ASSIGNMENT_VALIDATION: string = \"dvsToPgAssignmentValidation\";\n   public static readonly DVS_TO_ADAPTER_ASSIGNMENT_VALIDATION: string = \"dvsToAdapterAssignmentValidation\";\n   public static readonly DVS_LOCALLY_DUPLICATE_NAMES_VALIDATION: string = \"dvsLocalDuplicateNamesValidation\";\n   public static readonly DVS_EXISTING_DUPLICATE_NAMES_VALIDATION: string = \"dvsExistingDuplicateNamesValidation\";\n   public static readonly DVPG_LOCALLY_DUPLICATE_NAMES_VALIDATION: string = \"dvpgLocalDuplicateNamesValidation\";\n   public static readonly DVPG_EXISTING_DUPLICATE_NAMES_VALIDATION: string = \"dvpgExistingDuplicateNamesValidation\";\n\n   public invalidDvsNameControl = (control: FormControl): boolean => {\n      return control.touched && (control.hasError(\"required\")\n            || control.hasError(\"maxlength\")\n            || this.hasDvsLocalDuplicateNameError(control)\n            || this.hasDvsExistingDuplicateNameError(control));\n   };\n\n   public invalidDvpgNameControl = (control: FormControl): boolean => {\n      return control.touched && (control.hasError(\"required\")\n            || control.hasError(\"maxlength\")\n            || control.hasError(DistributedSwitchesPageValidator.DVPG_LOCALLY_DUPLICATE_NAMES_VALIDATION)\n            || control.hasError(DistributedSwitchesPageValidator.DVPG_EXISTING_DUPLICATE_NAMES_VALIDATION));\n   };\n\n   public getDvsNameControlErrors = (control: FormControl): string => {\n      if (control.hasError(\"required\")) {\n         return VsanUiUtils.getString(\n               \"vsan.cluster.hci.configureHciCluster.wizard.dvsConfig.distributedSwitchesSection.dvsNameRequiredError\");\n      }\n\n      if (control.hasError(\"maxlength\")) {\n         return VsanUiUtils.getString(\n               \"vsan.cluster.hci.configureHciCluster.wizard.dvsConfig.distributedSwitchesSection.dvsNameLengthError\");\n      }\n\n      if (this.hasDvsLocalDuplicateNameError(control)) {\n         return VsanUiUtils.getString(\n               \"vsan.cluster.hci.configureHciCluster.wizard.dvsConfig.distributedSwitchesSection.locallyDuplicateNameError\");\n      }\n\n      if (this.hasDvsExistingDuplicateNameError(control)) {\n         return VsanUiUtils.getString(\n               \"vsan.cluster.hci.configureHciCluster.wizard.dvsConfig.distributedSwitchesSection.existingDvsDuplicateNameError\");\n      }\n\n      return null;\n   };\n\n   public getDvpgNameControlErrors = (control: FormControl): string => {\n      if (control.hasError(\"required\")) {\n         return VsanUiUtils.getString(\n               \"vsan.cluster.hci.configureHciCluster.wizard.dvsConfig.distributedSwitchesSection.dvpgNameRequiredError\");\n      }\n\n      if (control.hasError(\"maxlength\")) {\n         return VsanUiUtils.getString(\n               \"vsan.cluster.hci.configureHciCluster.wizard.dvsConfig.distributedSwitchesSection.dvpgNameLengthError\");\n      }\n\n      if (control.hasError(DistributedSwitchesPageValidator.DVPG_LOCALLY_DUPLICATE_NAMES_VALIDATION)) {\n         return VsanUiUtils.getString(\n               \"vsan.cluster.hci.configureHciCluster.wizard.dvsConfig.distributedSwitchesSection.dvpgLocallyDuplicateNameError\");\n      }\n\n      if (control.hasError(DistributedSwitchesPageValidator.DVPG_EXISTING_DUPLICATE_NAMES_VALIDATION)) {\n         return VsanUiUtils.getString(\n               \"vsan.cluster.hci.configureHciCluster.wizard.dvsConfig.distributedSwitchesSection.dvpgExistingDuplicateNameError\");\n      }\n\n      return null;\n   };\n\n   public getDvsAssignmentErrors = (dvsFormControls: FormControl[]): string[] => {\n      let errors: string[] = [];\n      dvsFormControls.forEach((control) => {\n         if (this.hasDvsToAdapterAssignmentError(control)) {\n            errors.push(VsanUiUtils.getString(\n                  \"vsan.cluster.hci.configureHciCluster.wizard.dvsConfig.distributedSwitchesSection.assignmentError\",\n                  control.value));\n         }\n      });\n\n     return errors;\n   };\n\n   private hasDvsToAdapterAssignmentError = (control: FormControl): boolean => {\n      return control.hasError(DistributedSwitchesPageValidator.DVS_TO_ADAPTER_ASSIGNMENT_VALIDATION);\n   };\n\n   private hasDvsLocalDuplicateNameError = (control: FormControl): boolean => {\n      return this.hasDuplicateNameError(control, DistributedSwitchesPageValidator.DVS_LOCALLY_DUPLICATE_NAMES_VALIDATION);\n   };\n\n   private hasDvsExistingDuplicateNameError = (control: FormControl): boolean => {\n      return this.hasDuplicateNameError(control, DistributedSwitchesPageValidator.DVS_EXISTING_DUPLICATE_NAMES_VALIDATION);\n   };\n\n   private hasDuplicateNameError = (control: FormControl, expectedError: string): boolean => {\n      let formArray: FormArray = control.parent.parent as FormArray;\n\n      if (formArray.hasError(expectedError)) {\n         let error: any = formArray.getError(expectedError);\n         if (error.duplicateNames.indexOf(control.value) != -1) {\n            return true;\n         }\n      }\n\n      return false;\n   };\n}\n","<!-- Copyright 2017-2021 VMware, Inc. All rights reserved. -- VMware Confidential -->\n<clr-stack-view (change)=\"rebuildToc()\">\n   <!--HA section-->\n   <clr-stack-block id=\"ha-service-block\"\n                    clrSbExpandable=\"true\"\n                    [clrSbExpanded]=\"stackBlocksExpandedState[HA_SETTINGS_INDEX]\"\n                    (clrSbExpandedChange)=\"toggleStackBlockExpandedState(HA_SETTINGS_INDEX)\"\n                    *ngIf=\"clusterConfigData.basicConfig.haEnabled\">\n      <clr-stack-label id=\"ha-label\">\n         {{\"vsan.cluster.configure.wizard.advancedOptions.ha.label\" | localized}}\n      </clr-stack-label>\n      <clr-stack-block id=\"host-failure-monitoring-block\">\n         <clr-stack-label id=\"host-failure-monitoring-label\">\n            {{\"vsan.cluster.configure.wizard.advancedOptions.host.failure.monitor\" | localized}}\n         </clr-stack-label>\n         <clr-stack-content>\n            <clr-toggle-wrapper>\n               <input id=\"toggle-host-monitoring\"\n                      name=\"toggle-host-monitoring\"\n                      type=\"checkbox\"\n                      clrToggle\n                      [(ngModel)]=\"clusterConfigData.enableHostMonitoring\"\n                      aria-labelledby=\"ha-label host-failure-monitoring-label\">\n               <label for=\"toggle-host-monitoring\"></label>\n            </clr-toggle-wrapper>\n         </clr-stack-content>\n      </clr-stack-block>\n\n      <clr-stack-block id=\"virtual-machine-monitoring-block\">\n         <clr-stack-label id=\"virtual-machine-monitoring-label\">\n            {{\"vsan.cluster.configure.wizard.advancedOptions.vm.monitor.label\" | localized}}\n         </clr-stack-label>\n         <clr-stack-content>\n            <clr-toggle-wrapper>\n               <input id=\"toggle-vm-monitoring\"\n                      name=\"toggle-vm-monitoring\"\n                      type=\"checkbox\"\n                      clrToggle\n                      [(ngModel)]=\"clusterConfigData.enableVmMonitoring\"\n                      aria-labelledby=\"ha-label virtual-machine-monitoring-label\">\n               <label for=\"toggle-vm-monitoring\"></label>\n            </clr-toggle-wrapper>\n         </clr-stack-content>\n      </clr-stack-block>\n\n      <clr-stack-block id=\"admission-control-block\">\n         <clr-stack-label id=\"admission-control-label\">\n            {{\"vsan.cluster.configure.wizard.advancedOptions.admissionControl.label\" | localized}}\n         </clr-stack-label>\n         <clr-stack-content>\n            <clr-toggle-wrapper>\n               <input id=\"toggle-admission-control\"\n                      name=\"toggle-admission-control\"\n                      type=\"checkbox\"\n                      clrToggle\n                      [(ngModel)]=\"clusterConfigData.enableAdmissionControl\"\n                      aria-labelledby=\"ha-label admission-control-label\">\n               <label for=\"toggle-admission-control\"></label>\n            </clr-toggle-wrapper>\n         </clr-stack-content>\n      </clr-stack-block>\n\n      <clr-stack-block id=\"host-failure-to-tolerate-block\"\n                       [class.disable-action]=\"!clusterConfigData?.enableAdmissionControl\">\n         <clr-stack-label id=\"host-failure-to-tolerate-label\" class=\"nested\">\n            {{\"vsan.cluster.configure.wizard.advancedOptions.host.ftt.label\" | localized}}\n         </clr-stack-label>\n         <clr-stack-content>\n            <clr-select-container>\n               <select id=\"host-failure-ftt\"\n                       clrSelect\n                       [disabled]=\"!clusterConfigData?.enableAdmissionControl\"\n                       [(ngModel)]=\"selectedHostFtt\"\n                       (ngModelChange)=\"onHostFttChange()\"\n                       aria-labelledby=\"ha-label host-failure-to-tolerate-label\">\n                  <option *ngFor=\"let ftt of availableHostFtt\"\n                          [value]=\"+ftt\"\n                          [selected]=\"ftt == selectedHostFtt\">{{ftt}}</option>\n               </select>\n               <clr-control-helper>\n                  {{\"vsan.cluster.configure.wizard.advancedOptions.host.ftt.desc\" | localized}}\n               </clr-control-helper>\n            </clr-select-container>\n         </clr-stack-content>\n      </clr-stack-block>\n   </clr-stack-block>\n\n   <!--DRS section-->\n   <clr-stack-block id=\"drs-service-block\"\n                    clrSbExpandable=\"true\"\n                    [clrSbExpanded]=\"stackBlocksExpandedState[DRS_SETTINGS_INDEX]\"\n                    (clrSbExpandedChange)=\"toggleStackBlockExpandedState(DRS_SETTINGS_INDEX)\"\n                    *ngIf=\"clusterConfigData.basicConfig.drsEnabled\">\n      <clr-stack-label id=\"drs-label\">\n         {{\"vsan.cluster.configure.wizard.advancedOptions.drs.label\" | localized}}\n      </clr-stack-label>\n      <clr-stack-block id=\"automation-level-block\">\n         <clr-stack-label id=\"automation-level-label\">\n            {{\"vsan.cluster.configure.wizard.advancedOptions.auto.level\" | localized}}\n         </clr-stack-label>\n         <clr-stack-content>\n            <clr-select-container>\n               <select id=\"drs-automation-level\"\n                       clrSelect\n                       [(ngModel)]=\"clusterConfigData.automationLevel\"\n                       aria-labelledby=\"drs-label automation-level-label\">\n                  <option *ngFor=\"let opt of AUTOMATION_OPTS\"\n                          [selected]=\"opt.id == clusterConfigData?.automationLevel\"\n                          value=\"{{opt.id}}\">{{opt.label}}</option>\n               </select>\n            </clr-select-container>\n         </clr-stack-content>\n      </clr-stack-block>\n\n      <clr-stack-block id=\"migration-threshold-block\">\n         <clr-stack-label id=\"migration-threshold-label\">\n            {{\"vsan.cluster.configure.wizard.advancedOptions.migration.threshold\" | localized}}\n         </clr-stack-label>\n         <clr-stack-content>\n            <clr-select-container>\n               <select id=\"migration-threshold\"\n                       clrSelect\n                       name=\"migration-threshold\"\n                       [(ngModel)]=\"clusterConfigData.migrationThreshold\"\n                       (ngModelChange)=\"parseMigrationThreshold()\"\n                       aria-labelledby=\"drs-label migration-threshold-label\">\n                  <option *ngFor=\"let threshold of AVAILABLE_MIGRATION_THRESHOLD\"\n                          [selected]=\"threshold == clusterConfigData?.migrationThreshold\"\n                          value=\"{{threshold}}\">\n                     {{threshold}}\n                  </option>\n               </select>\n            </clr-select-container>\n            <clr-signpost [vsan-signpost-title]=\"'vsan.cluster.configure.wizard.advancedOptions.migration.threshold.signpost' | localized\">\n               <clr-signpost-content *clrIfOpen clrPosition=\"bottom-middle\">\n                  <span>{{\"vsan.cluster.hci.configureHciCluster.wizard.advancedOptionsPage.migrationTreshold.infoText\" | localized}}</span>\n               </clr-signpost-content>\n            </clr-signpost>\n         </clr-stack-content>\n      </clr-stack-block>\n   </clr-stack-block>\n\n   <!--vSAN options section-->\n   <clr-stack-block id=\"vsan-service-block\"\n                    clrSbExpandable=\"true\"\n                    [clrSbExpanded]=\"stackBlocksExpandedState[VSAN_SETTINGS_INDEX]\"\n                    (clrSbExpandedChange)=\"toggleStackBlockExpandedState(VSAN_SETTINGS_INDEX)\"\n                    *ngIf=\"clusterConfigData?.basicConfig.vsanEnabled\">\n      <clr-stack-label id=\"vsan-options-label\">\n         {{\"vsan.cluster.configure.wizard.advancedOptions.vsan.label\" | localized}}\n      </clr-stack-label>\n      <clr-stack-block *ngIf=\"showVsanMaxEnableOption\"\n                       id=\"vsan-max-block-prompt\"\n                       class=\"full-width hide-border-bottom\">\n         <clr-stack-label>\n            <vsan-validation [alertType]=\"AlertType.INFO\"\n                             [isSmall]=\"true\"\n                             [allowClose]=\"false\"\n                             [alert]=\"'vsan.cluster.configure.wizard.advancedOptions.vsan.max.prompt' | localized\">\n            </vsan-validation>\n         </clr-stack-label>\n      </clr-stack-block>\n      <clr-stack-block *ngIf=\"showVsanMaxEnableOption\">\n         <clr-stack-label id=\"vsan-max-label\">\n            {{\"vsan.cluster.configure.wizard.advancedOptions.vsan.max.label\" | localized}}\n         </clr-stack-label>\n         <clr-stack-content>\n            <clr-toggle-wrapper>\n               <input id=\"enable-vsan-max\"\n                      name=\"enable-vsan-max\"\n                      clrToggle\n                      [(ngModel)]=\"isVsanMaxWorkflow\"\n                      (change)=\"updateVsanMaxState()\"\n                      type=\"checkbox\"\n                      aria-labelledby=\"vsan-options-label vsan-max-label\">\n               <label for=\"enable-vsan-max\"></label>\n            </clr-toggle-wrapper>\n            <!-- Marketing content is not available yet. Once it is provided(expected 3 months before release, we can\n                 add the signpost again. -->\n            <!--<clr-signpost id=\"vsan-max-info\"\n                             [vsan-signpost-title]=\"'vsan.cluster.configure.wizard.advancedOptions.vsan.max.signpost' | localized\">\n               <clr-signpost-content *clrIfOpen clrPosition=\"bottom-middle\">\n                  TODO dtsvetkova: Update content when provided by marketing.\n               </clr-signpost-content>\n            </clr-signpost>-->\n         </clr-stack-content>\n      </clr-stack-block>\n      <clr-stack-block id=\"deployment-type-block\">\n         <clr-stack-label id=\"deployment-type-label\">\n            {{\"vsan.cluster.configure.wizard.advancedOptions.vsan.deployment.label\" | localized}}\n         </clr-stack-label>\n         <clr-stack-content>\n            <clr-select-container>\n               <select id=\"vsan-deployment-type\"\n                       clrSelect\n                       [(ngModel)]=\"configureWizardData.selectedVsanClusterType\"\n                       (change)=\"vsanClusterTypeChanged()\"\n                       aria-labelledby=\"vsan-options-label deployment-type-label\">\n                  <option *ngFor=\"let clusterType of availableVsanClusterTypes\"\n                          [selected]=\"configureWizardData.selectedVsanClusterType == clusterType.id\"\n                          value=\"{{clusterType.id}}\">{{clusterType.label}}</option>\n               </select>\n            </clr-select-container>\n         </clr-stack-content>\n      </clr-stack-block>\n\n      <clr-stack-block id=\"data-at-rest-encryption-block\"\n                       *ngIf=\"isEncryptionSupported\">\n         <clr-stack-label id=\"data-at-rest-encryption-label\">\n            {{\"configureVsan.settings.dataAtRestEncryptionLabel\" | localized}}\n         </clr-stack-label>\n         <clr-stack-content>\n            <clr-toggle-wrapper>\n               <input id=\"data-at-rest-toggle-encryption\"\n                      name=\"data-at-rest-encryption\"\n                      clrToggle\n                      [(ngModel)]=\"vsanConfigSpec.enableDataAtRestEncryption\"\n                      (change)=\"validateSelection()\"\n                      type=\"checkbox\"\n                      aria-labelledby=\"vsan-options-label data-at-rest-encryption-label\">\n               <label for=\"data-at-rest-toggle-encryption\"></label>\n            </clr-toggle-wrapper>\n         </clr-stack-content>\n      </clr-stack-block>\n\n      <clr-stack-block id=\"kms-cluster-block\"\n                       [class.disable-action]=\"!vsanConfigSpec.enableDataAtRestEncryption\"\n                       *ngIf=\"isEncryptionSupported\">\n         <clr-stack-label id=\"kms-cluster-label\" class=\"nested\">\n            {{\"vsan.generalConfig.kmsCluster\" | localized}}\n         </clr-stack-label>\n         <clr-stack-content>\n            <clr-select-container>\n               <select id=\"kms-server\"\n                       clrSelect\n                       [disabled]=\"!vsanConfigSpec.enableDataAtRestEncryption\"\n                       [(ngModel)]=\"vsanConfigSpec.kmipClusterId\"\n                       aria-labelledby=\"vsan-options-label kms-cluster-label\">\n                  <option *ngFor=\"let kmip of kmipClusterData.availableKmipClusters\"\n                          value=\"{{kmip}}\"\n                          [selected]=\"kmip == vsanConfigSpec.kmipClusterId\">\n                     {{kmip}}\n                  </option>\n               </select>\n            </clr-select-container>\n         </clr-stack-content>\n      </clr-stack-block>\n\n      <clr-stack-block id=\"data-in-transit-encryption-block\"\n                       *ngIf=\"isDataInTransitEncryptionSupported\">\n         <clr-stack-label id=\"data-in-transit-encryption-label\">\n            {{\"configureVsan.settings.dataInTransitEncryptionLabel\" | localized}}\n         </clr-stack-label>\n         <clr-stack-content class=\"validation-stack-content\">\n            <clr-toggle-container>\n               <clr-toggle-wrapper>\n                  <input id=\"data-in-transit-toggle-encryption\"\n                         name=\"data-in-transit-encryption\"\n                         clrToggle\n                         [(ngModel)]=\"vsanConfigSpec.enableDataInTransitEncryption\"\n                         (ngModelChange)=\"onDataInTransitEncryptionChange()\"\n                         (change)=\"validateSelection()\"\n                         [disabled]=\"!!ditUnavailableMessage\"\n                         type=\"checkbox\"\n                         aria-labelledby=\"vsan-options-label data-in-transit-encryption-label\">\n                  <label for=\"data-in-transit-toggle-encryption\"></label>\n               </clr-toggle-wrapper>\n               <clr-control-helper *ngIf=\"!!ditUnavailableMessage\">\n                  {{ditUnavailableMessage}}\n               </clr-control-helper>\n            </clr-toggle-container>\n         </clr-stack-content>\n      </clr-stack-block>\n\n      <clr-stack-block id=\"space-efficiency-block\" *ngIf=\"isSpaceEfficiencySupported\">\n         <clr-stack-label [ngClass]=\"{'disable-action' : isVsanMaxWorkflow}\">\n            {{\"configureVsan.settings.spaceEfficiency.label\" | localized}}\n         </clr-stack-label>\n         <clr-stack-content>\n            <clr-select-container>\n               <select id=\"space-efficiency-strategy\"\n                       clrSelect\n                       [disabled]=\"isVsanMaxWorkflow\"\n                       [(ngModel)]=\"vsanConfigSpec.spaceEfficiencyConfig\"\n                       (change)=\"validateSelection()\"\n                       ngDefaultControl>\n                  <option [ngValue]=\"SpaceEfficiencyConfig.NONE\" selected>\n                     {{\"configureVsan.settings.spaceEfficiency.noneLabel\" | localized}}\n                  </option>\n                  <option *ngIf=\"clusterCapabilityData?.isCompressionOnlySupported\"\n                          [ngValue]=\"SpaceEfficiencyConfig.COMPRESSION\">\n                     {{\"configureVsan.settings.spaceEfficiency.compressionLabel\" | localized}}\n                  </option>\n                  <option *ngIf=\"clusterCapabilityData?.isDeduplicationAndCompressionSupported\"\n                          [ngValue]=\"SpaceEfficiencyConfig.DEDUPLICATION_AND_COMPRESSION\">\n                     {{\"configureVsan.settings.spaceEfficiency.dedupAndCompressionLabel\" | localized}}\n                  </option>\n               </select>\n            </clr-select-container>\n            <clr-signpost id=\"space-efficiency-strategy-help\"\n                          [vsan-signpost-title]=\"'configureVsan.settings.spaceEfficiency.signpost.label' | localized\">\n               <clr-signpost-content *clrIfOpen clrPosition=\"top-middle\">\n                  <div *ngIf=\"isVsanMaxWorkflow\">\n                     {{\"vsan.generalConfig.spaceConfig.disabled.vsanMaxInfo\" | localized}}\n                  </div>\n                  <ul *ngIf=\"clusterCapabilityData?.isCompressionOnlySupported && !isVsanMaxWorkflow\">\n                     <li>\n                        {{\"configureVsan.settings.spaceEfficiency.compressionLabel\" | localized}}:\n                        {{\"configureVsan.settings.spaceEfficiency.compressionDescription\" | localized}}\n                     </li>\n                     <li>\n                        {{\"configureVsan.settings.spaceEfficiency.dedupAndCompressionLabel\" | localized}}:\n                        {{\"configureVsan.settings.spaceEfficiency.dedupAndCompressionDescription\" | localized}}\n                     </li>\n                  </ul>\n                  <ng-container *ngIf=\"!clusterCapabilityData?.isCompressionOnlySupported\">\n                     {{\"configureVsan.settings.spaceEfficiency.dedupAndCompressionDescription\" | localized}}\n                  </ng-container>\n               </clr-signpost-content>\n            </clr-signpost>\n         </clr-stack-content>\n      </clr-stack-block>\n\n      <clr-stack-block id=\"fault-domains-block\"\n                       [class.disable-action]=\"!allowCreateFaultDomains\"\n                       *ngIf=\"stretchClusterSupported\">\n         <clr-stack-label id=\"fault-domains-label\">\n            {{\"vsan.cluster.configure.wizard.advancedOptions.vsan.faultDomain.label\" | localized}}\n         </clr-stack-label>\n         <clr-stack-content>\n            <clr-toggle-wrapper>\n               <input id=\"toggle-fd\"\n                      name=\"toggle-fd\"\n                      clrToggle\n                      [disabled]=\"!allowCreateFaultDomains\"\n                      [(ngModel)]=\"configureWizardData.enableFaultDomainForSingleSiteCluster\"\n                      (change)=\"enableFaultDomainForSingleSiteClusterChanged()\"\n                      type=\"checkbox\"\n                      aria-labelledby=\"vsan-options-label fault-domains-label\">\n               <label for=\"toggle-fd\"></label>\n            </clr-toggle-wrapper>\n         </clr-stack-content>\n      </clr-stack-block>\n\n      <!-- Show toggle setting for large cluster support (more than 32 hosts) if it is NOT supported natively -->\n      <clr-stack-block id=\"large-scale-cluster-support-block\"\n                       *ngIf=\"!clusterCapabilityData.isNativeLargeClusterSupported\">\n         <clr-stack-label id=\"large-scale-cluster-support-label\">\n            {{\"vsan.cluster.configure.wizard.advancedOptions.vsan.largeClusters.label\" | localized}}\n         </clr-stack-label>\n         <clr-stack-content>\n            <clr-toggle-wrapper>\n               <input id=\"toggle-large-clusters\"\n                      name=\"toggle-large-clusters\"\n                      clrToggle\n                      [(ngModel)]=\"vsanConfigSpec.advancedOptions.largeClusterSupportEnabled\"\n                      (change)=\"updateRdmaState()\"\n                      type=\"checkbox\"\n                      aria-labelledby=\"vsan-options-label large-scale-cluster-support-label\">\n               <label for=\"toggle-large-clusters\"></label>\n            </clr-toggle-wrapper>\n            <clr-signpost [vsan-signpost-title]=\"'vsan.cluster.configure.wizard.advancedOptions.vsan.largeClusters.signpost' | localized\">\n               <clr-signpost-content *clrIfOpen clrPosition=\"top-middle\">\n                  <span>{{\"vsan.services.advancedOptions.largeClusterSupport.signpost\" | localized}}</span>\n               </clr-signpost-content>\n            </clr-signpost>\n         </clr-stack-content>\n      </clr-stack-block>\n\n      <clr-stack-block id=\"rdma-block\" *ngIf=\"clusterCapabilityData?.isRdmaSupported\">\n         <clr-stack-label id=\"rdma-label\" [ngClass]=\"!canEnableRdma ? 'disable-action' : ''\">\n            {{\"vsan.services.network.rdmaSupport.label\" | localized}}\n         </clr-stack-label>\n         <clr-stack-content>\n            <clr-toggle-wrapper>\n               <input id=\"toggle-rdma\"\n                      name=\"toggle-rdma\"\n                      clrToggle\n                      [(ngModel)]=\"vsanConfigSpec.enableRdma\"\n                      type=\"checkbox\"\n                      [disabled]=\"!canEnableRdma\"\n                      aria-labelledby=\"vsan-options-label rdma-label\">\n            </clr-toggle-wrapper>\n            <clr-signpost [vsan-signpost-title]=\"'vsan.services.network.rdmaSupport.signpost.label' | localized\">\n               <clr-signpost-content *clrIfOpen clrPosition=\"top-middle\">\n                  <div id=\"rdma-alert-message\" *ngIf=\"!canEnableRdma\">\n                     {{rdmaDisabledMessage}}\n                  </div>\n                  <div>{{\"vsan.services.network.rdmaSupport.signpost\" | localized}}</div>\n               </clr-signpost-content>\n            </clr-signpost>\n         </clr-stack-content>\n      </clr-stack-block>\n   </clr-stack-block>\n\n   <!--Host Options section-->\n   <clr-stack-block id=\"host-options-service-block\"\n                    clrSbExpandable=\"true\"\n                    [clrSbExpanded]=\"stackBlocksExpandedState[HOST_SETTINGS_INDEX]\"\n                    (clrSbExpandedChange)=\"toggleStackBlockExpandedState(HOST_SETTINGS_INDEX)\">\n      <clr-stack-label id=\"host-options-label\">\n         {{\"vsan.cluster.configure.wizard.advancedOptions.host.options.label\" | localized}}\n      </clr-stack-label>\n      <clr-stack-block id=\"lockdown-mode-block\">\n         <clr-stack-label id=\"lockdown-mode-label\">\n            {{\"vsan.cluster.configure.wizard.advancedOptions.host.options.lockdown.mode\" | localized}}\n         </clr-stack-label>\n         <clr-stack-content>\n            <clr-select-container>\n               <select id=\"lockdown-mode\"\n                       clrSelect\n                       [(ngModel)]=\"clusterConfigData.lockdownMode\"\n                       aria-labelledby=\"host-options-label lockdown-mode-label\">\n                  <option *ngFor=\"let opt of AVAILABLE_LOCKDOWN_MODES\"\n                          value=\"{{opt.id}}\">{{opt.label}}</option>\n               </select>\n            </clr-select-container>\n         </clr-stack-content>\n      </clr-stack-block>\n\n      <clr-stack-block id=\"ntp-server-block\">\n         <clr-stack-label id=\"ntp-server-label\">\n            {{\"vsan.cluster.configure.wizard.advancedOptions.host.options.ntp.server\" | localized}}\n         </clr-stack-label>\n         <clr-stack-content>\n            <clr-input-container>\n               <input id=\"ntp-server\"\n                      class=\"ntp-server-input\"\n                      type=\"text\"\n                      clrInput\n                      [(ngModel)]=\"clusterConfigData.ntpServer\"\n                      placeholder=\"{{'vsan.cluster.configure.wizard.advancedOptions.host.options.ntp.server.placeholder' | localized}}\"\n                      aria-labelledby=\"host-options-label ntp-server-label\"/>\n               <clr-control-helper>\n                  {{\"vsan.cluster.configure.wizard.advancedOptions.host.options.ntp.desc\" | localized}}\n               </clr-control-helper>\n            </clr-input-container>\n         </clr-stack-content>\n      </clr-stack-block>\n\n      <!-- VUM baseline preference -->\n      <clr-stack-block id=\"vum-baseline-preference-block\"\n                       *ngIf=\"vcCapabilityData?.isVumBaselineRecommendationSupported &&\n                              !clusterConfigData?.basicConfig.pmanEnabled\">\n         <clr-stack-label id=\"vum-baseline-preference-label\">\n            {{\"vsan.cluster.configure.wizard.advancedOptions.vsan.vumBaselinePreference.label\" | localized}}\n         </clr-stack-label>\n         <clr-stack-content>\n            <clr-select-container>\n               <select id=\"vum-baseline-preference\"\n                       clrSelect\n                       [(ngModel)]=\"clusterConfigData.vumBaselineRecommendationType\"\n                       aria-labelledby=\"host-options-label vum-baseline-preference-label\">\n                  <option *ngFor=\"let type of VUM_BASELINE_PREFERENCE_TYPES\"\n                          value=\"{{type.id}}\"\n                          [selected]=\"type.id == clusterConfigData?.vumBaselineRecommendationType\">\n                     {{type.label}}\n                  </option>\n               </select>\n            </clr-select-container>\n            <clr-signpost\n                  [vsan-signpost-title]=\"'vsan.cluster.configure.wizard.advancedOptions.vsan.vumBaselinePreference.signpost.label' | localized\">\n               <clr-signpost-content *clrIfOpen clrPosition=\"top-left\">\n                  <span id=\"vum-baseline-preference-signpost\">\n                     {{\"vsan.cluster.configure.wizard.advancedOptions.vsan.vumBaselinePreference.signpost\" | localized}}\n                  </span>\n               </clr-signpost-content>\n            </clr-signpost>\n         </clr-stack-content>\n      </clr-stack-block>\n   </clr-stack-block>\n\n   <!--Enhanced vMotion Capability section-->\n   <clr-stack-block id=\"vmotion-capability-service-block\"\n                    clrSbExpandable=\"true\"\n                    [clrSbExpanded]=\"stackBlocksExpandedState[EVM_SETTINGS_INDEX]\"\n                    (clrSbExpandedChange)=\"toggleStackBlockExpandedState(EVM_SETTINGS_INDEX)\">\n      <clr-stack-label id=\"vmotion-capability-service-label\">\n         {{\"vsan.cluster.configure.wizard.advancedOptions.enhanced.vmotion.capability.label\" | localized}}\n      </clr-stack-label>\n      <clr-stack-block id=\"enable-evc-block\"\n                       [class.disable-action]=\"evcModeConfigData.unsupportedEvcStatus\">\n         <clr-stack-label id=\"enable-evc-label\">\n            {{\"vsan.cluster.configure.wizard.advancedOptions.enable.evc.label\" | localized}}\n         </clr-stack-label>\n         <clr-stack-content>\n            <clr-toggle-wrapper>\n               <input id=\"toggle-evc\"\n                      name=\"toggle-evc\"\n                      clrToggle\n                      type=\"checkbox\"\n                      [disabled]=\"evcModeConfigData.unsupportedEvcStatus\"\n                      [(ngModel)]=\"clusterConfigData.enableEVC\"\n                      (change)=\"clearPageState()\"\n                      aria-labelledby=\"vmotion-capability-service-label enable-evc-label\">\n               <label for=\"toggle-evc\"></label>\n            </clr-toggle-wrapper>\n            <clr-signpost *ngIf=\"evcModeConfigData.unsupportedEvcStatus\"\n                          [vsan-signpost-title]=\"'vsan.cluster.configure.wizard.advancedOptions.enable.evc.label' | localized\">\n               <clr-signpost-content *clrIfOpen clrPosition=\"right-top\">\n                  <span id=\"unsupported-evc-status-label\">\n                     {{\"vsan.cluster.configure.wizard.advancedOptions.evc.unsupportedEvcStatus.message\" | localized}}\n                  </span>\n               </clr-signpost-content>\n            </clr-signpost>\n         </clr-stack-content>\n      </clr-stack-block>\n\n      <clr-stack-block id=\"evc-mode-block\"\n                       [class.disable-action]=\"!clusterConfigData?.enableEVC\">\n         <clr-stack-label id=\"evc-mode-label\" class=\"nested\">\n            {{\"vsan.cluster.configure.wizard.advancedOptions.evc.mode\" | localized}}\n         </clr-stack-label>\n         <clr-stack-content>\n            <clr-select-container>\n               <select id=\"evc-mode\"\n                       clrSelect\n                       [disabled]=\"!clusterConfigData?.enableEVC\"\n                       [(ngModel)]=\"clusterConfigData.selectedEvcMode\"\n                       (change)=\"clearPageState()\"\n                       aria-labelledby=\"vmotion-capability-service-label evc-mode-label\">\n                  <option *ngFor=\"let evc of evcModeConfigData.supportedIntelEvcMode\" value=\"{{evc.id}}\">\n                     {{evc.label}}\n                  </option>\n                  <option *ngFor=\"let evc of evcModeConfigData.supportedAmdEvcMode\" value=\"{{evc.id}}\">\n                     {{evc.label}}\n                  </option>\n               </select>\n            </clr-select-container>\n         </clr-stack-content>\n      </clr-stack-block>\n   </clr-stack-block>\n</clr-stack-view>\n","<!--Copyright 2017-2022 VMware, Inc. All rights reserved. -- VMware Confidential-->\n<ng-container *ngIf=\"vsanConfigSpec.isVsanMaxEnabled\">\n   <vsan-claim-mode-toggle [(isAutoClaim)]=\"isAutoClaim\"\n                           [isAutoClaimAllowed]=\"isAutoClaimAllowed\"\n                           (isAutoClaimChange)=\"onIsAutoClaimChange()\">\n   </vsan-claim-mode-toggle>\n   <vsan-auto-claim-disks *ngIf=\"isAutoClaim\"\n                          [hostsClaimingData]=\"hostsClaimingData\"\n                          (claimedDisksChange)=\"onAutoClaimedDisksChange($event)\">\n   </vsan-auto-claim-disks>\n</ng-container>\n<!-- Do not destroy the components when the toggle is pressed to avoid data re-fetch and rerender -->\n<vsan-claim-disks [ngClass]=\"{'hidden' : isAutoClaim}\"\n                  [isStandalone]=\"false\"\n                  [vsanConfigSpec]=\"vsanConfigSpec\"\n                  [hostsClaimingData]=\"hostsClaimingData\"\n                  (configUpdated)=\"onConfigChange($event)\"\n                  (configValid)=\"isConfigAcceptable=$event\"\n                  (disksClaimingConfigUpdated)=\"onDisksClaimingConfigChange($event)\">\n</vsan-claim-disks>","<!-- Copyright 2018-2020 VMware, Inc. All rights reserved. -- VMware Confidential -->\n<div id=\"hci-proxy-desc\" [innerHTML]=\"'vsan.cluster.hci.configureHciCluster.dialog.vcproxy.desc' | localized\"></div>\n<form clrForm clrLayout=\"horizontal\">\n   <vsan-proxy-inputs [enableInternet]=\"true\"></vsan-proxy-inputs>\n</form>","<!--Copyright 2021-2022 VMware, Inc. All rights reserved. -- VMware Confidential-->\n<vsan-validation id=\"disable-support-insight-warning\"\n                 *ngIf=\"disableSupportInsight\"\n                 [alertType]=\"'warning'\"\n                 [alert]=\"'vsan.cluster.hci.configureHciCluster.dialog.supportInsight.disabled.warning'| localized\">\n</vsan-validation>\n<div id=\"support-insight-desc\">\n   {{\"vsan.cluster.hci.configureHciCluster.dialog.supportInsight.desc\" | localized}}\n</div>\n<ul id=\"support-insight-benefits\">\n   <li id=\"support-insight-benefit1\">\n      {{\"vsan.cluster.hci.configureHciCluster.dialog.supportInsight.benefit1\" | localized}}\n   </li>\n   <li id=\"support-insight-benefit2\">\n      {{\"vsan.cluster.hci.configureHciCluster.dialog.supportInsight.benefit2\" | localized}}\n   </li>\n   <li id=\"support-insight-benefit3\">\n      {{\"vsan.cluster.hci.configureHciCluster.dialog.supportInsight.benefit3\" | localized}}\n   </li>\n</ul>\n<div class=\"note-section\" id=\"support-insight-note\">\n   {{\"vsan.cluster.hci.configureHciCluster.dialog.supportInsight.note\" | localized}}\n</div>\n<div id=\"support-insight-more-info\"\n     [innerHTML]=\"'vsan.cluster.hci.configureHciCluster.dialog.supportInsight.more' | localized\">\n</div>\n\n<div class=\"images-container\"></div>\n<clr-checkbox-container>\n   <clr-checkbox-wrapper>\n      <input type=\"checkbox\"\n             clrCheckbox\n             id=\"disable-support-insight-toggle\"\n             name=\"disable-support-insight-toggle\"\n             [(ngModel)]=\"disableSupportInsight\"/>\n      <label>{{\"vsan.cluster.hci.configureHciCluster.dialog.supportInsight.disable.label\" | localized}}</label>\n   </clr-checkbox-wrapper>\n</clr-checkbox-container>\n<clr-checkbox-container>\n   <clr-checkbox-wrapper>\n      <input type=\"checkbox\"\n             clrCheckbox\n             id=\"hide-this-step-toggle\"\n             name=\"hide-this-step-toggle\"\n             [(ngModel)]=\"hideSupportInsight\"\n             [disabled]=\"!disableSupportInsight\"/>\n      <label>{{\"vsan.cluster.hci.configureHciCluster.dialog.supportInsight.hide.label\" | localized}}</label>\n   </clr-checkbox-wrapper>\n   <clr-control-helper>\n      {{\"vsan.cluster.hci.configureHciCluster.dialog.supportInsight.hide.desc\" | localized}}\n   </clr-control-helper>\n</clr-checkbox-container>","/* Copyright 2017-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, EventEmitter, Input, OnInit, Output} from \"@angular/core\";\nimport {\n   AbstractControl,\n   FormArray,\n   FormBuilder,\n   FormControl,\n   FormGroup,\n   Validators,\n} from \"@angular/forms\";\nimport {IpParserService} from \"@service/ip-parser.service\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {PageControls} from \"@component/wizard/flow-wizard.component\";\nimport {NetworkingSettingsComponent} from \"./networking-settings.component\";\nimport {NetServiceConfig} from \"@generated/net-service-config\";\nimport IpType = NetServiceConfig.IpType;\nimport {ReactiveFormUtil} from \"@util/reactive-form-util\";\nimport {InventoryNode} from \"@generated/inventory-node\";\nimport {Icon} from \"@util/icon\";\n\n@Component({\n   templateUrl: \"ipv6-settings.html\",\n   selector: \"vsan-ipv6-settings\",\n   styleUrls: [\"ipv6-settings.scss\"],\n})\nexport class Ipv6Settings implements OnInit {\n\n   readonly IpType: typeof IpType = IpType;\n   readonly Icon: typeof Icon = Icon;\n\n   private static readonly NAME_CONTROL_NAME: string = \"name\";\n   private static readonly IPV6_CONTROL_NAME: string = \"ipv6\";\n   private static readonly PREFIX_CONTROL_NAME: string = \"prefix\";\n   private static readonly GATEWAY_CONTROL_NAME: string = \"gateway\";\n   private static readonly DEFAULT_IPV6_IP_TYPE: IpType = IpType.DHCP;\n   private static readonly IP_TYPE_CONTROL_PATH: string = ReactiveFormUtil.getFormControlPath(\n         NetworkingSettingsComponent.IPV6_SETTINGS_CONTROL_NAME,\n         NetworkingSettingsComponent.IP_TYPE_CONTROL_NAME);\n   private static readonly HOST_SETTINGS_GROUP_PATH: string = ReactiveFormUtil.getFormControlPath(\n         NetworkingSettingsComponent.IPV6_SETTINGS_CONTROL_NAME,\n         NetworkingSettingsComponent.HOST_SETTINGS_CONTROL_NAME);\n   private static readonly IPV6_VALIDATION: string = \"validateIp\";\n   private static readonly LINK_LOCAL_VALIDATION: string = \"validateLikLocalAddress\";\n   private static readonly PREFIX_VALIDATION: string = \"validatePrefix\";\n   private static readonly DUPLICATE_IPS_VALIDATION: string = \"validateDuplicateIps\";\n   private static readonly DIFFERENT_SUBNET_VALIDATION: string = \"validateDifferentSubnet\";\n\n   @Input()\n   private pageControls: PageControls;\n\n   @Input()\n   private hosts: InventoryNode[];\n\n   @Input()\n   private form: FormGroup;\n\n   @Input()\n   showDefaultGateway: boolean;\n\n   @Input()\n   ipSettingsInfoMessage: string;\n\n   @Output()\n   private onFormChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n   constructor(private fb: FormBuilder, private ipService: IpParserService) {}\n\n   ngOnInit(): void {\n      this.buildForm();\n      this.registerFormControlChangeHandlers();\n   }\n\n   private buildForm = (): void => {\n      const hostFormGroups: any = this.hosts.map((host) => {\n         return this.fb.group({\n            [Ipv6Settings.NAME_CONTROL_NAME]: [host.name, null],\n            [Ipv6Settings.IPV6_CONTROL_NAME]:\n                  [null, [Validators.required, this.validateIpv6, this.validateLinkLocalAddress]],\n            [Ipv6Settings.PREFIX_CONTROL_NAME]: [null, [Validators.required, this.validatePrefix]],\n            [Ipv6Settings.GATEWAY_CONTROL_NAME]: [null, [this.validateIpv6DefaultGateway]],\n         }, {validator: this.validateDifferentSubnetError});\n      });\n\n      const hostFormArray: any = this.fb.array(hostFormGroups, this.validateDuplicateIps);\n      const ipv6Settings: any = this.fb.group({\n         [NetworkingSettingsComponent.IP_TYPE_CONTROL_NAME]: [Ipv6Settings.DEFAULT_IPV6_IP_TYPE, [Validators.required]],\n         [NetworkingSettingsComponent.HOST_SETTINGS_CONTROL_NAME]: hostFormArray\n      });\n\n      this.form.addControl(NetworkingSettingsComponent.IPV6_SETTINGS_CONTROL_NAME, ipv6Settings);\n      this.toggleHostSettingsAvailability(this.ipType.value);\n   };\n\n   private registerFormControlChangeHandlers = (): void => {\n      this.ipType.valueChanges.forEach(this.toggleHostSettingsAvailability);\n      this.hostSettings.controls.forEach((formGroup: FormGroup) => {\n         for (const controlName in formGroup.controls) {\n            const control: FormControl = formGroup.controls[controlName] as FormControl;\n            control.statusChanges.forEach(() => {\n               this.pageControls.rebuildToc();\n            });\n         }\n      });\n   };\n\n   private toggleHostSettingsAvailability = (ipType: IpType): void => {\n      switch (ipType) {\n         case IpType.DHCP:\n         case IpType.ROUTER_ADVERTISEMENT:\n            this.hostSettings.disable();\n            break;\n         case IpType.STATIC:\n            this.hostSettings.enable();\n            break;\n      }\n\n      this.onFormChange.emit(true);\n   };\n\n   /** Form controls getters */\n\n   get ipv6Settings(): FormControl {\n      return this.form.get(NetworkingSettingsComponent.IPV6_SETTINGS_CONTROL_NAME) as FormControl;\n   }\n\n   get ipType(): FormControl {\n      return this.form.get(Ipv6Settings.IP_TYPE_CONTROL_PATH) as FormControl;\n   }\n\n   get hostSettings(): FormArray {\n      return this.form.get(Ipv6Settings.HOST_SETTINGS_GROUP_PATH) as FormArray;\n   }\n\n   get disabledStaticIpv6(): boolean {\n      return this.ipType.value !== IpType.STATIC;\n   }\n\n   getIpv6Control = (idx: string): FormControl => {\n      const controlPath: string = ReactiveFormUtil.getFormControlPath(\n            Ipv6Settings.HOST_SETTINGS_GROUP_PATH,\n            idx,\n            Ipv6Settings.IPV6_CONTROL_NAME);\n      return this.form.get(controlPath) as FormControl;\n   };\n\n   getPrefixControl = (idx: string): FormControl => {\n      const controlPath: string = ReactiveFormUtil.getFormControlPath(\n            Ipv6Settings.HOST_SETTINGS_GROUP_PATH,\n            idx,\n            Ipv6Settings.PREFIX_CONTROL_NAME);\n      return this.form.get(controlPath) as FormControl;\n   };\n\n   getGatewayControl = (idx: string): FormControl => {\n      const controlPath: string = ReactiveFormUtil.getFormControlPath(\n            Ipv6Settings.HOST_SETTINGS_GROUP_PATH,\n            idx,\n            Ipv6Settings.GATEWAY_CONTROL_NAME);\n      return this.form.get(controlPath) as FormControl;\n   };\n\n   private hasDifferentSubnet = (hostControls: FormGroup): boolean => {\n      const ipv6Control: AbstractControl = hostControls.get(Ipv6Settings.IPV6_CONTROL_NAME);\n      const prefixControl: AbstractControl = hostControls.get(Ipv6Settings.PREFIX_CONTROL_NAME);\n      const gatewayControl: AbstractControl = hostControls.get(Ipv6Settings.GATEWAY_CONTROL_NAME);\n\n      if (ipv6Control.touched && gatewayControl.touched && prefixControl.touched &&\n            ipv6Control.value && gatewayControl.value && prefixControl.value &&\n            ipv6Control.valid && gatewayControl.valid && prefixControl.valid) {\n         return !this.ipService.isSameIpv6Subnet(ipv6Control.value.trim(),\n               gatewayControl.value.trim(), prefixControl.value.trim());\n      }\n\n      return false;\n   };\n\n   invalid = (formControl: AbstractControl): boolean => {\n      return this.hostSettings.enabled && formControl.invalid && formControl.touched;\n   };\n\n   private hasSubnetMismatch = (formControl: AbstractControl): boolean => {\n      return formControl.parent.hasError(Ipv6Settings.DIFFERENT_SUBNET_VALIDATION);\n   };\n\n   invalidIpv6Control = (idx: string): boolean => {\n      const control: FormControl = this.getIpv6Control(idx);\n      return this.invalid(control) || this.hasSubnetMismatch(control) || this.hasDuplicateIp(control);\n   };\n\n   invalidPrefixControl = (idx: string): boolean => {\n      const control: FormControl = this.getPrefixControl(idx);\n      return this.invalid(control) || this.hasSubnetMismatch(control);\n   };\n\n   invalidGatewayControl = (idx: string): boolean => {\n      const control: FormControl = this.getGatewayControl(idx);\n      return this.invalid(control) || this.hasSubnetMismatch(control);\n   };\n\n   private hasDuplicateIp = (formControl: AbstractControl): boolean => {\n      const hostSettings: FormArray = formControl.parent.parent as FormArray;\n      hostSettings.updateValueAndValidity();\n      if (hostSettings.hasError(Ipv6Settings.DUPLICATE_IPS_VALIDATION)) {\n         const duplicateIps: string[] =\n               hostSettings.getError(Ipv6Settings.DUPLICATE_IPS_VALIDATION).duplicateIps;\n         if (duplicateIps.indexOf(this.ipService.getNormalizedIpv6Address(formControl.value.trim())) !== -1) {\n            return true;\n         }\n      }\n\n      return false;\n   };\n\n   private getDuplicateIps = (hostSettings: FormArray): string[] => {\n      const formGroups: FormGroup[] = hostSettings.controls as FormGroup[];\n\n      const ips: any = {};\n      const result: string[] = [];\n      formGroups.forEach((formGroup: FormGroup) => {\n         const ipv6: FormControl = formGroup.get(Ipv6Settings.IPV6_CONTROL_NAME) as FormControl;\n         if (!ipv6.invalid && ipv6.touched && ipv6.dirty) {\n            const ip: string = this.ipService.getNormalizedIpv6Address(ipv6.value.trim());\n            if (ips.hasOwnProperty(ip)) {\n               result.push(ip);\n            } else {\n               ips[ip] = true;\n            }\n         }\n      });\n\n      return result;\n   };\n\n   getIpv6ControlErrors = (idx: string): string[] => {\n      const formControl: FormControl = this.getIpv6Control(idx);\n\n      const result: string[] = [];\n      this.evaluateIpv6Validity(formControl, result);\n      this.evaluateDuplicateIpv6Validity(formControl, result);\n      const gatewayControl: FormControl = this.getGatewayControl(idx);\n      if (gatewayControl.value) {\n         this.evaluateDifferentSubnetValidity(formControl, result);\n      }\n      this.evaluateLinkLocalValidity(formControl, result);\n\n      return result;\n   };\n\n   getPrefixControlErrors = (idx: string): string[] => {\n      const formControl: FormControl = this.getPrefixControl(idx);\n\n      const result: string[] = [];\n      this.evaluatePrefixValidity(formControl, result);\n      const gatewayControl: FormControl = this.getGatewayControl(idx);\n      if (gatewayControl.value) {\n         this.evaluateDifferentSubnetValidity(formControl, result);\n      }\n\n      return result;\n   };\n\n   getGatewayControlErrors = (idx: string): string[] => {\n      const formControl: FormControl = this.getGatewayControl(idx);\n\n      const result: string[] = [];\n      if (formControl.value) {\n         this.evaluateGatewayValidity(formControl, result);\n         this.evaluateDifferentSubnetValidity(formControl, result);\n      }\n\n      return result;\n   };\n\n   private evaluateIpv6Validity = (formControl: FormControl, errors: string[]): void => {\n      if (formControl.hasError(Ipv6Settings.IPV6_VALIDATION)) {\n         errors.push(VsanUiUtils.getString(\n               \"vsan.cluster.hci.configureHciCluster.wizard.networking.ipv6Tab.ipv6.invalIpv6Address\"));\n      }\n   };\n\n   private evaluateLinkLocalValidity = (formControl: FormControl, errors: string[]): void => {\n      if (formControl.hasError(Ipv6Settings.LINK_LOCAL_VALIDATION)) {\n         errors.push(VsanUiUtils.getString(\n               \"vsan.cluster.hci.configureHciCluster.wizard.networking.ipv6Tab.ipv6.linkLocalAddress\"));\n      }\n   };\n\n   private evaluatePrefixValidity = (formControl: FormControl, errors: string[]): void => {\n      if (formControl.hasError(Ipv6Settings.PREFIX_VALIDATION)) {\n         errors.push(VsanUiUtils.getString(\n               \"vsan.cluster.hci.configureHciCluster.wizard.networking.ipv6Tab.prefix.wrongInput\"));\n      }\n   };\n\n   private evaluateDifferentSubnetValidity = (formControl: FormControl, errors: string[]): void => {\n      if (formControl.parent.hasError(Ipv6Settings.DIFFERENT_SUBNET_VALIDATION)) {\n         errors.push(VsanUiUtils.getString(\n               \"vsan.cluster.hci.configureHciCluster.wizard.networking.ipv4Tab.differentSubnetError\"));\n      }\n   };\n\n   private evaluateDuplicateIpv6Validity = (formControl: FormControl, errors: string[]): void => {\n      if (this.hasDuplicateIp(formControl)) {\n         errors.push(VsanUiUtils.getString(\n               \"vsan.cluster.hci.configureHciCluster.wizard.networking.ipv4Tab.duplicateIpsError\"));\n      }\n   };\n\n   private evaluateGatewayValidity = (formControl: FormControl, errors: string[]): void => {\n      if (formControl.hasError(Ipv6Settings.IPV6_VALIDATION)) {\n         errors.push(VsanUiUtils.getString(\n               \"vsan.cluster.hci.configureHciCluster.wizard.networking.ipv4Tab.gateway.wrongInput\"));\n      }\n   };\n\n   /** Form control validators */\n\n   private validateIpv6 = (ipv6Control: AbstractControl): {[key: string]: any} | null => {\n      const ip: string = String(ipv6Control.value ? ipv6Control.value : \"\").trim();\n      return this.ipService.isIpv6AddressValid(ip) ? null : {\n         [Ipv6Settings.IPV6_VALIDATION]: { valid: false},\n      };\n   };\n\n   private validateLinkLocalAddress = (ipv6Control: AbstractControl): {[key: string]: any} | null => {\n      const ip: string = String(ipv6Control.value).trim();\n      if (ipv6Control.parent) {\n         const prefix: number = +(ipv6Control.parent.get(Ipv6Settings.PREFIX_CONTROL_NAME).value);\n         return this.ipService.isLinkLocalIpv6Address(ip, prefix) ?\n               {[Ipv6Settings.LINK_LOCAL_VALIDATION]: {valid: false}} : null;\n      }\n   };\n\n   private validatePrefix = (prefixControl: AbstractControl): {[key: string]: any} | null => {\n      const prefix: string = String(prefixControl.value).trim();\n      return this.ipService.isSubnetPrefixValid(prefix) ? null :\n            {[Ipv6Settings.PREFIX_VALIDATION]: { valid: false }};\n   };\n\n   private validateIpv6DefaultGateway = (gatewayControl: AbstractControl):\n         {[key: string]: any} | null => {\n      return (gatewayControl && gatewayControl.value) ?\n            this.validateIpv6(gatewayControl) : null;\n   };\n\n   private validateDuplicateIps = (ipv6FormArray: FormArray): {[key: string]: any} | null => {\n      const duplicateIps: string[] = this.getDuplicateIps(ipv6FormArray);\n      return duplicateIps.length === 0 ? null : {\n         [Ipv6Settings.DUPLICATE_IPS_VALIDATION]: {\n            valid: false,\n            duplicateIps: duplicateIps,\n         },\n      };\n   };\n\n   private validateDifferentSubnetError = (formGroup: any): {[key: string]: any} | null => {\n      return !this.hasDifferentSubnet(formGroup) ? null : {\n         [Ipv6Settings.DIFFERENT_SUBNET_VALIDATION]: {valid: false},\n      };\n   };\n}","/* Copyright 2018-2020 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, OnInit} from \"@angular/core\";\nimport {HciClusterService} from \"@generated/hci-cluster-service\";\nimport {ManagedObject} from \"@service/managed-object\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {ExistingDvsData} from \"@generated/existing-dvs-data\";\n\n@Component({\n   templateUrl: \"existing-dvs-selector-dialog.html\",\n   selector: \"existing-dvs-selector-dialog\",\n   styleUrls: [\"existing-dvs-selector-dialog.scss\"],\n})\nexport class ExistingDvsSelectorDialogComponent implements OnInit {\n\n   static readonly DVS_GRID_PAGE_SIZE: number = 10;\n   VsanUiUtils = VsanUiUtils;\n\n   private clusterRef: ManagedObject;\n\n   isLoading: boolean;\n\n   existingDvsList: ExistingDvsData[];\n\n   selectedDvs: ExistingDvsData;\n\n   newDvsSelection: boolean;\n\n   private selectedDvsNames: string[];\n\n   private selectedExistingDvsName: string;\n\n   constructor(private hciClusterService: HciClusterService) {\n   }\n\n   ngOnInit() {\n      const context: any = VsanUiUtils.getModalContext();\n      this.clusterRef = context.clusterRef;\n      this.selectedExistingDvsName = context.selectedExistingDvsName;\n      this.selectedDvsNames = context.selectedDvsNames;\n\n      this.requestData();\n   }\n\n   get dvsGridPageSize() {\n      return ExistingDvsSelectorDialogComponent.DVS_GRID_PAGE_SIZE;\n   }\n\n   get alertMessage(): string {\n      // If the DVS is already selected in the dialog, an error should be shown\n      if (!this.newDvsSelection && !!this.selectedDvs && (this.selectedDvs.name !== this.selectedExistingDvsName) &&\n            this.selectedDvsNames && this.selectedDvsNames.some(dvsName => dvsName === this.selectedDvs.name)) {\n         return VsanUiUtils.getString(\n               \"vsan.cluster.hci.configureHciCluster.wizard.dvsConfig.existingNetworkSelectorDialog.errorMessage\");\n      }\n      return null;\n   }\n\n   onOkClicked = () => {\n      if (this.newDvsSelection) {\n         VsanUiUtils.closeModalDialog(null);\n      } else {\n         VsanUiUtils.closeModalDialog(this.selectedDvs);\n      }\n   };\n\n   private requestData = () => {\n      this.isLoading = true;\n      this.hciClusterService.getExistingDvs(this.clusterRef, this.selectedExistingDvsName)\n            .then(this.onDataRetrieved)\n            .catch(this.onRequestError);\n   };\n\n   private onDataRetrieved = (result: any) => {\n      if (result) {\n         this.existingDvsList = result;\n         if (this.existingDvsList && this.existingDvsList.length > 0 && this.existingDvsList[0].isSelected) {\n            this.selectedDvs = this.existingDvsList[0];\n         }\n      }\n\n      this.isLoading = false;\n   };\n\n   private onRequestError = (result: any) => {\n      this.isLoading = false;\n   };\n\n   get noDvsSelected(): boolean {\n      return !!this.alertMessage || (!this.newDvsSelection && !this.selectedDvs);\n   }\n}","/* Copyright 2019-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {NgModule} from \"@angular/core\";\nimport {CommonModule} from \"@angular/common\";\nimport {FormsModule, ReactiveFormsModule} from \"@angular/forms\";\nimport {RouterModule, Routes} from \"@angular/router\";\nimport {ClarityModule} from \"@clr/angular\";\nimport {GeneralSettingsModule} from \"@component/general-settings/general-settings.module\";\nimport {DiskmgmtCommonModule} from \"@component/diskmgmt/diskmgmt-common.module\";\nimport {NgDragDropModule} from \"ng-drag-drop\";\nimport {VsanCommonModule} from \"app/vsan/common/vsan-common.module\";\nimport {FlowWizardModule} from \"@component/wizard/flow-wizard.module\";\nimport {WizardSharedPagesModule} from \"@component/wizard/shared-pages/wizard-shared-pages.module\";\nimport {ConfigureHciClusterWizard} from \"./configure-hci-cluster-wizard.component\";\nimport {HciClusterService} from \"@generated/hci-cluster-service\";\nimport {ExistingDvpgSelectorDialogComponent} from \"./component/existing-dvpg-selector-dialog.component\";\nimport {ExistingDvsSelectorDialogComponent} from \"./component/existing-dvs-selector-dialog.component\";\nimport {AdvancedOptionsPageComponent} from \"./view/advanced-options-page.component\";\nimport {Ipv4Settings} from \"./component/ipv4-settings.components\";\nimport {Ipv6Settings} from \"./component/ipv6-settings.component\";\nimport {NetworkingSettingsComponent} from \"./component/networking-settings.component\";\nimport {HciClaimDisksPage} from \"./view/claim-disks-page.component\";\nimport {DistributedSwitchesPageComponent} from \"./view/distributed-switches-page.component\";\nimport {VmotionTrafficPageComponent} from \"./view/vmotion-traffic-page.component\";\nimport {DistributedSwitchesPageValidator} from \"./view/distributed-switches-page.validator\";\nimport {ProxySettingsPageComponent} from \"./view/proxy-settings-page.component\";\nimport {HciClusterReadyToCompletePageComponent} from \"./view/hci-cluster-ready-to-complete-page.component\";\nimport {StorageTrafficPageComponent} from \"./view/storage-traffic-page.component\";\nimport {SupportInsightPageComponent} from \"./view/support-insight-page.component\";\nimport {SupportInsightConfigurationService} from \"./service/support-insight-configuration.service\";\nimport {ProxySettingsModule} from \"@component/proxy-settings/proxy-settings.module\";\nimport {IpParserService} from \"@service/ip-parser.service\";\nimport {SpaceEfficiencyService} from \"@service/space-efficiency-service\";\nimport {FaultDomainValidationService} from \"@service/fault-domain-validation.service\";\nimport {ConfigureHciService} from \"./service/configure-hci.service\";\n\nconst configureHciWizardRoutes: Routes = [\n   {\n      path: \"\",\n      component: ConfigureHciClusterWizard,\n   },\n   {\n      path: \"existingDvpgSelector\",\n      component: ExistingDvpgSelectorDialogComponent,\n   },\n   {\n      path: \"existingDvsSelector\",\n      component: ExistingDvsSelectorDialogComponent,\n   },\n];\n\n@NgModule({\n   imports: [\n      CommonModule,\n      FormsModule,\n      ReactiveFormsModule,\n      ClarityModule,\n      NgDragDropModule,\n      VsanCommonModule,\n      FlowWizardModule,\n      GeneralSettingsModule,\n      DiskmgmtCommonModule,\n      WizardSharedPagesModule,\n      ProxySettingsModule,\n      RouterModule.forChild(configureHciWizardRoutes),\n   ],\n   declarations: [\n      ConfigureHciClusterWizard,\n      ExistingDvpgSelectorDialogComponent,\n      ExistingDvsSelectorDialogComponent,\n      AdvancedOptionsPageComponent,\n      Ipv4Settings,\n      Ipv6Settings,\n      NetworkingSettingsComponent,\n      HciClaimDisksPage,\n      DistributedSwitchesPageComponent,\n      VmotionTrafficPageComponent,\n      ProxySettingsPageComponent,\n      HciClusterReadyToCompletePageComponent,\n      StorageTrafficPageComponent,\n      SupportInsightPageComponent,\n   ],\n   entryComponents: [\n      AdvancedOptionsPageComponent,\n      HciClaimDisksPage,\n      DistributedSwitchesPageComponent,\n      VmotionTrafficPageComponent,\n      ProxySettingsPageComponent,\n      HciClusterReadyToCompletePageComponent,\n      StorageTrafficPageComponent,\n      SupportInsightPageComponent,\n   ],\n   providers: [\n      IpParserService,\n      HciClusterService,\n      DistributedSwitchesPageValidator,\n      ConfigureHciService,\n      SupportInsightConfigurationService,\n      SpaceEfficiencyService,\n      FaultDomainValidationService,\n   ],\n})\nexport class ConfigureHciClusterWizardModule {\n}\n","/* Copyright 2018-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {AfterViewInit, Component, OnInit, ViewChild} from \"@angular/core\";\nimport {InputProperty, OutputProperty, WizardPage} from \"@component/wizard/flow-metadata\";\nimport {OnValidate, PageControls} from \"@component/wizard/flow-wizard.component\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {ConfigureWizardData} from \"@generated/configure-wizard-data\";\nimport {ExternalProxySettingsConfig} from \"@generated/external-proxy-settings-config\";\nimport {ProxyInputsComponent, ProxySetting} from \"@component/proxy-settings/proxy-inputs.component\";\nimport {ReferenceWatcher} from \"@util/reference-watcher\";\n\n@WizardPage(\n      VsanUiUtils.getString(\"vsan.cluster.hci.configureHciCluster.dialog.vcproxy.tab.title\"),\n)\n@Component({\n   templateUrl: \"proxy-settings-page.html\",\n   styleUrls: [\"proxy-settings-page.scss\"],\n   providers: [ReferenceWatcher],\n})\nexport class ProxySettingsPageComponent implements AfterViewInit, OnValidate {\n   private static readonly HTTP_PREFIX: string = \"http://\";\n   private static readonly HTTPS_PREFIX: string = \"https://\";\n\n   @ViewChild(ProxyInputsComponent)\n   proxyInputs: ProxyInputsComponent;\n\n   @InputProperty()\n   @OutputProperty()\n   configureWizardData: ConfigureWizardData;\n\n   @InputProperty()\n   pageControls: PageControls;\n\n   enableProxy: boolean;\n\n   constructor(private refWatcher: ReferenceWatcher) {\n   }\n\n   ngAfterViewInit(): void {\n      // Invalidate the page whenever there is a change in the inner form.\n      this.refWatcher.watchSubscriptionRef(\n            this.proxyInputs.proxyForm.valueChanges.subscribe(this.pageControls.rebuildToc));\n   }\n\n   validate(): string[] {\n      this.pageControls.clearValidationErrors();\n      if (this.proxyInputs && this.proxyInputs.proxyForm && this.proxyInputs.proxyForm.invalid) {\n         return [VsanUiUtils.getString(\"vsan.cluster.hci.configureHciCluster.wizard.networking.notAcceptableErrors\")];\n      }\n      // Populate the spec only when inner form validation is passed\n      this.populateSpec();\n   }\n\n   /**\n    * the vAPI need a valid URL for the hostname, so we must check the protocol here\n    */\n   private resolveProxyUrl = (hostName: string): string => {\n      if (!hostName.startsWith(ProxySettingsPageComponent.HTTP_PREFIX)\n            && !hostName.startsWith(ProxySettingsPageComponent.HTTPS_PREFIX)) {\n         return ProxySettingsPageComponent.HTTPS_PREFIX + hostName;\n      }\n      return hostName;\n   };\n\n   private populateSpec(): void {\n      this.configureWizardData.proxySettingsConfig = ExternalProxySettingsConfig.Factory.create(\n            false, null, null, null, null, true);\n      const proxySettings: ProxySetting = this.proxyInputs.value();\n      if (proxySettings && proxySettings.enableProxy) {\n         this.configureWizardData.proxySettingsConfig.hostName = this.resolveProxyUrl(proxySettings.hostname);\n         this.configureWizardData.proxySettingsConfig.port = proxySettings.port;\n         this.configureWizardData.proxySettingsConfig.userName = proxySettings.username;\n         this.configureWizardData.proxySettingsConfig.password = proxySettings.password;\n      }\n   }\n}","<vsan-networking-settings [pageControls]=\"pageControls\"\n                          [hosts]=\"hosts\"\n                          [dsName]=\"storageDvsName\"\n                          [dvpg]=\"storageDvpg\"\n                          [service]=\"currentService\"\n                          [vlanId]=\"vlan\"\n                          [vlanType]=\"vlanType\"\n                          [isExtend]=\"configureWizardData.isExtend\"\n                          [isDefaultGatewaySupported]=\"clusterCapabilityData.isDefaultGatewaySupported\">\n</vsan-networking-settings>","/* Copyright 2019-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {NgModule} from \"@angular/core\";\nimport {CommonModule} from \"@angular/common\";\nimport {FormsModule} from \"@angular/forms\";\nimport {ClarityModule} from \"@clr/angular\";\nimport {ValidationModule} from \"@component/validation/validation.module\";\nimport {CommonPipeModule} from \"@pipe/common-pipe.module\";\nimport {GeneralSettingsComponent} from \"@component/general-settings/general-settings.component\";\nimport {VsanGeneralConfigService} from \"@component/general-settings/vsan-general-config.service\";\nimport {RekeyIntervalComponent} from \"@component/general-settings/utils/rekey-interval.component\";\nimport {CommonDirectiveModule} from \"@directive/common-directive.module\";\n\n@NgModule({\n   imports: [\n      CommonModule,\n      FormsModule,\n      ClarityModule,\n      ValidationModule,\n      CommonPipeModule,\n      CommonDirectiveModule,\n   ],\n   declarations: [\n      GeneralSettingsComponent,\n      RekeyIntervalComponent,\n   ],\n   exports: [\n      GeneralSettingsComponent,\n   ],\n   providers: [\n      VsanGeneralConfigService,\n   ],\n})\nexport class GeneralSettingsModule {\n}\n","/* Copyright 2020-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {VsanClusterType} from \"@generated/vsan-cluster-type\";\n\nexport class VsanRdmaUtil {\n\n   static canEnableRdma(hostHardwareSupportRdma: boolean, isLargeScaleSupportEnabled: boolean,\n         configType: VsanClusterType, isRdmaStretchedClusterSupported: boolean): boolean {\n      return hostHardwareSupportRdma && this.isClusterTypeSupported(configType, isRdmaStretchedClusterSupported)\n            && !isLargeScaleSupportEnabled;\n   }\n\n   static getRdmaDisabledMessage(hostHardwareSupportRdma: boolean, isLargeScaleSupportEnabled: boolean,\n         configType: VsanClusterType, isRdmaStretchedClusterSupported: boolean): string {\n      let errorMessage: string = !hostHardwareSupportRdma\n            ? VsanUiUtils.getString(\"vsan.services.network.rdmaSupport.notSupportedByAnyHostsHardware\")\n            : \"\";\n\n      if (!this.isClusterTypeSupported(configType, isRdmaStretchedClusterSupported)) {\n         errorMessage = errorMessage.concat(\" \",\n               VsanUiUtils.getString(\"vsan.services.network.rdmaSupport.notSupportedStretchedCluster\")).trim();\n      }\n\n      if (isLargeScaleSupportEnabled) {\n         errorMessage = errorMessage.concat(\" \",\n               VsanUiUtils.getString(\"vsan.services.network.rdmaSupport.notSupportedLargeScaleCluster\")).trim();\n      }\n\n      return errorMessage;\n   }\n\n   private static isClusterTypeSupported(configType: VsanClusterType,\n         isRdmaStretchedClusterSupported: boolean): boolean {\n      return !this.isStretchedOrTwoNodeCluster(configType) || isRdmaStretchedClusterSupported;\n   }\n\n   private static isStretchedOrTwoNodeCluster(configType: VsanClusterType): boolean {\n      return configType === VsanClusterType.STRETCHED_CLUSTER\n            || configType === VsanClusterType.TWO_HOST_VSAN_CLUSTER;\n   }\n}\n","/* Copyright 2017-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, OnInit, ViewChild} from \"@angular/core\";\nimport {InputProperty, OutputProperty, WizardPage} from \"@component/wizard/flow-metadata\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {OnValidate, PageControls} from \"@component/wizard/flow-wizard.component\";\nimport {NetworkingSettingsComponent} from \"../component/networking-settings.component\";\nimport {ClusterConfigData} from \"@generated/cluster-config-data\";\nimport {Service} from \"@generated/service\";\nimport {ConfigureWizardData} from \"@generated/configure-wizard-data\";\nimport {DvpgData} from \"@generated/dvpg-data\";\nimport {VlanType} from \"@generated/vlan-type\";\nimport {HciClusterService} from \"@generated/hci-cluster-service\";\nimport {VlanData} from \"@generated/vlan-data\";\nimport {VsanCapabilityData} from \"@generated/vsan-capability-data\";\nimport {InventoryNode} from \"@generated/inventory-node\";\n\n@WizardPage(\n      VsanUiUtils.getString(\"vsan.cluster.hci.configureHciCluster.wizard.vmotionTrafficPage.title\"),\n      VsanUiUtils.getString(\"vsan.cluster.hci.configureHciCluster.wizard.vmotionTrafficPage.description\"),\n)\n@Component({\n   templateUrl: \"vmotion-traffic-page.html\",\n})\nexport class VmotionTrafficPageComponent implements OnInit, OnValidate {\n\n   @ViewChild(NetworkingSettingsComponent)\n   networkingSettings: NetworkingSettingsComponent;\n\n   @InputProperty()\n   pageControls: PageControls;\n\n   @InputProperty(\"notConfiguredClusterHosts\")\n   hosts: InventoryNode[] = [];\n\n   @InputProperty()\n   clusterConfigData: ClusterConfigData;\n\n   @InputProperty(InputProperty.required(false))\n   vmotionDvsName: string;\n\n   @InputProperty()\n   configureWizardData: ConfigureWizardData;\n\n   @InputProperty(InputProperty.required(false))\n   vmotionDvpg: DvpgData;\n\n   @InputProperty()\n   clusterCapabilityData: VsanCapabilityData;\n\n   currentService: Service = Service.VMOTION;\n\n   vlan: string;\n\n   vlanType: VlanType;\n\n   constructor(private hciService: HciClusterService) {\n   }\n\n   @OutputProperty()\n   vmotionTrafficForm: any;\n\n   ngOnInit(): void {\n      if (this.configureWizardData.isExtend) {\n         this.vmotionDvsName =\n               this.clusterConfigData.basicConfig.dvsDataByService[Service.VMOTION].dvsName;\n         this.vlan =\n               this.clusterConfigData.basicConfig.dvsDataByService[Service.VMOTION].vlan;\n         this.vlanType =\n               this.clusterConfigData.basicConfig.dvsDataByService[Service.VMOTION].vlanType;\n      }\n\n      if (this.vmotionDvpg && this.vmotionDvpg.existingDvpg) {\n         this.hciService.getDvpgVlan(this.vmotionDvpg.existingDvpg).then((vlanData: VlanData) => {\n            if (vlanData) {\n               this.vlanType = vlanData.vlanType;\n               this.vlan = vlanData.vlan;\n            }\n         });\n      }\n   }\n\n   validate(): string[] {\n      const result: string[] = this.networkingSettings.validate();\n      if (!result) {\n         // remove previous config\n         if (this.clusterConfigData.netServiceConfigs) {\n            this.clusterConfigData.netServiceConfigs =\n                  this.clusterConfigData.netServiceConfigs.filter((config) => config.service !== Service.VMOTION);\n         } else {\n            this.clusterConfigData.netServiceConfigs = [];\n         }\n\n         // fill cluster config with vMotion configuration\n         this.clusterConfigData.netServiceConfigs.push(this.networkingSettings.getNetConfig(Service.VMOTION));\n      }\n\n      return result;\n   }\n}\n","/* Copyright 2017-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, EventEmitter, Input, OnInit, Output} from \"@angular/core\";\nimport {AbstractControl, FormArray, FormBuilder, FormControl, FormGroup, Validators} from \"@angular/forms\";\nimport {IpParserService} from \"@service/ip-parser.service\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {PageControls} from \"@component/wizard/flow-wizard.component\";\nimport {NetworkingSettingsComponent} from \"./networking-settings.component\";\nimport {NetServiceConfig} from \"@generated/net-service-config\";\nimport {IpAddressesRequestSpec} from \"@generated/ip-addresses-request-spec\";\nimport {NetworkService} from \"@generated/network-service\";\nimport IpType = NetServiceConfig.IpType;\nimport {Icon} from \"@util/icon\";\nimport {ReactiveFormUtil} from \"@util/reactive-form-util\";\nimport {InventoryNode} from \"@generated/inventory-node\";\n\n@Component({\n   templateUrl: \"ipv4-settings.html\",\n   selector: \"vsan-ipv4-settings\",\n   styleUrls: [\"ipv4-settings.scss\"],\n})\nexport class Ipv4Settings implements OnInit {\n\n   readonly IpType: typeof IpType = IpType;\n   readonly Icon: typeof Icon = Icon;\n\n   private static readonly IPV4_CONTROL_NAME: string = \"ipv4\";\n   private static readonly SUBNET_MASK_CONTROL_NAME: string = \"subnetMask\";\n   private static readonly GATEWAY_CONTROL_NAME: string = \"gateway\";\n   private static readonly NAME_CONTROL_NAME: string = \"name\";\n   private static readonly DEFAULT_IPV4_IP_TYPE: IpType = IpType.DHCP;\n   private static readonly IP_TYPE_CONTROL_PATH: string = ReactiveFormUtil.getFormControlPath(\n         NetworkingSettingsComponent.IPV4_SETTINGS_CONTROL_NAME,\n         NetworkingSettingsComponent.IP_TYPE_CONTROL_NAME);\n   private static readonly HOST_SETTINGS_GROUP_PATH: string = ReactiveFormUtil.getFormControlPath(\n         NetworkingSettingsComponent.IPV4_SETTINGS_CONTROL_NAME,\n         NetworkingSettingsComponent.HOST_SETTINGS_CONTROL_NAME);\n   private static readonly IPV4_VALIDATION: string = \"validateIp\";\n   private static readonly DUPLICATE_IPS_VALIDATION: string = \"validateDuplicateIps\";\n   private static readonly DIFFERENT_SUBNET_VALIDATION: string = \"validateDifferentSubnet\";\n   private static readonly SUBNET_MASK_VALIDATION: string = \"validateSubnetMask\";\n   private static readonly FIRST_ROW_INDEX: string = \"0\";\n\n   @Input()\n   private pageControls: PageControls;\n\n   @Input()\n   hosts: InventoryNode[];\n\n   @Input()\n   private form: FormGroup;\n\n   @Input()\n   showDefaultGateway: boolean;\n\n   @Input()\n   ipSettingsInfoMessage: string;\n\n   @Output()\n   private onFormChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n   @Output()\n   private ipAddressesRequestSpec: IpAddressesRequestSpec;\n\n   requestingData: boolean;\n\n   constructor(private fb: FormBuilder,\n         private ipService: IpParserService,\n         private networkService: NetworkService) {\n   }\n\n   ngOnInit(): void {\n      this.buildForm();\n      this.registerFormControlChangeHandlers();\n   }\n\n   private buildForm = (): void => {\n      const hostFormGroups: FormGroup[] = this.hosts.map((host) =>\n         this.fb.group({\n            [Ipv4Settings.NAME_CONTROL_NAME]:\n                  [host.name, null],\n            [Ipv4Settings.IPV4_CONTROL_NAME]:\n                  [null, [Validators.required, this.validateIpv4]],\n            [Ipv4Settings.SUBNET_MASK_CONTROL_NAME]:\n                  [null, [Validators.required, this.validateSubnetMask]],\n            [Ipv4Settings.GATEWAY_CONTROL_NAME]:\n                  [null, [this.validateDefaultGateway]],\n         }, {validator: this.validateDifferentSubnetError}));\n      const hostFormArray: FormArray = this.fb.array(hostFormGroups, this.validateDuplicateIps);\n\n      const ipv4Settings: FormGroup = this.fb.group({\n         [NetworkingSettingsComponent.IP_TYPE_CONTROL_NAME]: [Ipv4Settings.DEFAULT_IPV4_IP_TYPE, [Validators.required]],\n         [NetworkingSettingsComponent.HOST_SETTINGS_CONTROL_NAME]: hostFormArray,\n      });\n\n      this.form.addControl(NetworkingSettingsComponent.IPV4_SETTINGS_CONTROL_NAME, ipv4Settings);\n      this.toggleHostSettingsAvailability(this.ipType.value);\n   };\n\n   registerFormControlChangeHandlers = (): void => {\n      this.ipType.valueChanges.forEach(this.toggleHostSettingsAvailability);\n\n      this.hostSettings.controls.forEach((formGroup: FormGroup) => {\n         for (const controlName in formGroup.controls) {\n            const control: FormControl = formGroup.controls[controlName] as FormControl;\n            control.statusChanges.forEach(() => {\n               this.pageControls.rebuildToc();\n            });\n         }\n      });\n   };\n\n   private toggleHostSettingsAvailability = (ipType: IpType): void => {\n      switch (ipType) {\n         case IpType.DHCP:\n            this.hostSettings.disable();\n            break;\n         case IpType.STATIC:\n            this.hostSettings.enable();\n            break;\n      }\n\n      this.onFormChange.emit(true);\n   };\n\n   /** Form controls getters */\n\n   get ipv4Settings(): FormGroup {\n      return this.form.get(NetworkingSettingsComponent.IPV4_SETTINGS_CONTROL_NAME) as FormGroup;\n   }\n\n   get ipType(): FormControl {\n      return this.form.get(Ipv4Settings.IP_TYPE_CONTROL_PATH) as FormControl;\n   }\n\n   get hostSettings(): FormArray {\n      return this.form.get(Ipv4Settings.HOST_SETTINGS_GROUP_PATH) as FormArray;\n   }\n\n   get dhcpOnIpv4(): boolean {\n      return this.ipType.value === IpType.DHCP;\n   }\n\n   getIpv4Control = (idx: string): FormControl => {\n      const controlPath: string = ReactiveFormUtil.getFormControlPath(\n            Ipv4Settings.HOST_SETTINGS_GROUP_PATH,\n            idx,\n            Ipv4Settings.IPV4_CONTROL_NAME);\n      return this.form.get(controlPath) as FormControl;\n   };\n\n   getSubnetMaskControl = (idx: string): FormControl => {\n      const controlPath: string = ReactiveFormUtil.getFormControlPath(\n            Ipv4Settings.HOST_SETTINGS_GROUP_PATH,\n            idx,\n            Ipv4Settings.SUBNET_MASK_CONTROL_NAME);\n      return this.form.get(controlPath) as FormControl;\n   };\n\n   getGatewayControl = (idx: string): FormControl => {\n      const controlPath: string = ReactiveFormUtil.getFormControlPath(\n            Ipv4Settings.HOST_SETTINGS_GROUP_PATH,\n            idx,\n            Ipv4Settings.GATEWAY_CONTROL_NAME);\n      return this.form.get(controlPath) as FormControl;\n   };\n\n   private hasDifferentSubnet = (hostControls: FormGroup): boolean => {\n      const ipv4Control: AbstractControl = hostControls.get(Ipv4Settings.IPV4_CONTROL_NAME);\n      const subnetMaskControl: AbstractControl = hostControls.get(Ipv4Settings.SUBNET_MASK_CONTROL_NAME);\n      const gatewayControl: AbstractControl = hostControls.get(Ipv4Settings.GATEWAY_CONTROL_NAME);\n\n      if (this.isRowFilled(ipv4Control, gatewayControl, subnetMaskControl)) {\n         return !this.ipService.isSameIpv4Subnet(ipv4Control.value.trim(),\n               gatewayControl.value.trim(), subnetMaskControl.value.trim());\n      }\n\n      return false;\n   };\n\n   invalid = (formControl: AbstractControl): boolean => {\n      return this.hostSettings.enabled && formControl.invalid && formControl.touched;\n   };\n\n   private hasSubnetMismatch = (formControl: AbstractControl): boolean => {\n      return formControl.parent.hasError(Ipv4Settings.DIFFERENT_SUBNET_VALIDATION);\n   };\n\n   invalidIpv4Control = (idx: string): boolean => {\n      const control: FormControl = this.getIpv4Control(idx);\n      return this.invalid(control) || this.hasSubnetMismatch(control) || this.hasDuplicateIp(control);\n   };\n\n   invalidSubnetMaskControl = (idx: string): boolean => {\n      const control: FormControl = this.getSubnetMaskControl(idx);\n      return this.invalid(control) || this.hasSubnetMismatch(control);\n   };\n\n   invalidGatewayControl = (idx: string): boolean => {\n      const control: FormControl = this.getGatewayControl(idx);\n      return this.invalid(control) || this.hasSubnetMismatch(control);\n   };\n\n   validAutofillControl = (idx: string): boolean => {\n      const ipv4: FormControl = this.getIpv4Control(idx);\n      const subnet: FormControl = this.getSubnetMaskControl(idx);\n      const gateway: FormControl = this.getGatewayControl(idx);\n      if (this.isRowFilled(ipv4, gateway, subnet)) {\n         return this.ipService.isSameIpv4Subnet(ipv4.value.trim(), gateway.value.trim(), subnet.value.trim());\n      } else if (!gateway.value) {\n         return ipv4.dirty && subnet.dirty && ipv4.value && subnet.value && ipv4.valid && subnet.valid;\n      }\n\n      return false;\n   };\n\n   private hasDuplicateIp = (formControl: AbstractControl): boolean => {\n      const hostSettings: FormArray = formControl.parent.parent as FormArray;\n      hostSettings.updateValueAndValidity();\n      if (hostSettings.hasError(Ipv4Settings.DUPLICATE_IPS_VALIDATION)) {\n         const duplicateIps: string[] =\n               hostSettings.getError(Ipv4Settings.DUPLICATE_IPS_VALIDATION).duplicateIps;\n         if (duplicateIps.indexOf(formControl.value) !== -1) {\n            return true;\n         }\n      }\n\n      return false;\n   };\n\n   private getDuplicateIps = (hostSettings: FormArray): string[] => {\n      const formGroups: FormGroup[] = hostSettings.controls as FormGroup[];\n\n      const ips: any = {};\n      const result: string[] = [];\n      formGroups.forEach((formGroup: FormGroup) => {\n         const ipv4: FormControl = formGroup.get(Ipv4Settings.IPV4_CONTROL_NAME) as FormControl;\n         const ip: string = ipv4.value;\n         if (!ipv4.invalid && ipv4.touched && ipv4.dirty) {\n            if (ips.hasOwnProperty(ip)) {\n               result.push(ip);\n            } else {\n               ips[ip] = true;\n            }\n         }\n      });\n\n      return result;\n   };\n\n   getIpv4ControlErrors = (idx: string): string[] => {\n      const formControl: FormControl = this.getIpv4Control(idx);\n\n      const result: string[] = [];\n      this.evaluateIpv4Validity(formControl, result);\n      this.evaluateDuplicateIpv4Validity(formControl, result);\n      const gatewayControl: FormControl = this.getGatewayControl(idx);\n      if (gatewayControl.value) {\n         this.evaluateDifferentSubnetValidity(formControl, result);\n      }\n\n      return result;\n   };\n\n   getSubnetMaskControlErrors = (idx: string): string[] => {\n      const formControl: FormControl = this.getSubnetMaskControl(idx);\n\n      const result: string[] = [];\n      this.evaluateSubnetMaskValidity(formControl, result);\n      const gatewayControl: FormControl = this.getGatewayControl(idx);\n      if (gatewayControl.value) {\n         this.evaluateDifferentSubnetValidity(formControl, result);\n      }\n\n      return result;\n   };\n\n   getGatewayControlErrors = (idx: string): string[] => {\n      const formControl: FormControl = this.getGatewayControl(idx);\n\n      const result: string[] = [];\n      if (formControl.value) {\n         this.evaluateGatewayValidity(formControl, result);\n         this.evaluateDifferentSubnetValidity(formControl, result);\n      }\n\n      return result;\n   };\n\n   autoFillAddresses = (): void => {\n      this.requestingData = true;\n      const ipAddress: FormControl = this.getIpv4Control(Ipv4Settings.FIRST_ROW_INDEX);\n      const subnetMask: FormControl = this.getSubnetMaskControl(Ipv4Settings.FIRST_ROW_INDEX);\n\n      const ipv4RequestSpec: IpAddressesRequestSpec = IpAddressesRequestSpec.Factory.create(\n            ipAddress.value.trim(), subnetMask.value.trim(), this.hostSettings.controls.length);\n\n      this.networkService.getConsequentHostAddresses(ipv4RequestSpec)\n            .then(this.fillSubsequentAddresses)\n            .catch(() => this.requestingData = false);\n   };\n\n   private evaluateIpv4Validity = (formControl: FormControl, errors: string[]): void => {\n      if (formControl.hasError(Ipv4Settings.IPV4_VALIDATION)) {\n         errors.push(\n               VsanUiUtils.getString(\n                     \"vsan.cluster.hci.configureHciCluster.wizard.networking.ipv4Tab.ipv4.wrongInput\"));\n      }\n   };\n\n   private evaluateSubnetMaskValidity = (formControl: FormControl, errors: string[]): void => {\n      if (formControl.hasError(Ipv4Settings.SUBNET_MASK_VALIDATION)) {\n         errors.push(\n               VsanUiUtils.getString(\n                     \"vsan.cluster.hci.configureHciCluster.wizard.networking.ipv4Tab.subnetMask.wrongInput\"));\n      }\n   };\n\n   private evaluateDifferentSubnetValidity = (formControl: FormControl, errors: string[]): void => {\n      if (formControl.parent.hasError(Ipv4Settings.DIFFERENT_SUBNET_VALIDATION)) {\n         errors.push(\n               VsanUiUtils.getString(\n                     \"vsan.cluster.hci.configureHciCluster.wizard.networking.ipv4Tab.differentSubnetError\"));\n      }\n   };\n\n   private evaluateDuplicateIpv4Validity = (formControl: FormControl, errors: string[]): void => {\n      if (this.hasDuplicateIp(formControl)) {\n         errors.push(\n               VsanUiUtils.getString(\n                     \"vsan.cluster.hci.configureHciCluster.wizard.networking.ipv4Tab.duplicateIpsError\"));\n      }\n   };\n\n   private evaluateGatewayValidity = (formControl: FormControl, errors: string[]): void => {\n      if (formControl.hasError(Ipv4Settings.IPV4_VALIDATION)) {\n         errors.push(\n               VsanUiUtils.getString(\n                     \"vsan.cluster.hci.configureHciCluster.wizard.networking.ipv4Tab.gateway.wrongInput\"));\n      }\n   };\n\n   /** Form control validators */\n\n   private validateIpv4 = (c: AbstractControl): { [key: string]: any } | null => {\n      const ip: string = String(c.value).trim();\n      return this.ipService.isIpv4AddressValid(ip) ? null : {\n         [Ipv4Settings.IPV4_VALIDATION]: {\n            valid: false\n         }\n      };\n   };\n\n   private validateDefaultGateway = (c: AbstractControl): { [key: string]: any } | null => {\n      return (c && c.value) ? this.validateIpv4(c) : null;\n   };\n\n   private validateSubnetMask = (c: AbstractControl): { [key: string]: any } | null => {\n      const subnetMask: string = String(c.value).trim();\n      return this.ipService.isSubnetMaskValid(subnetMask) ? null : {\n         [Ipv4Settings.SUBNET_MASK_VALIDATION]: {valid: false},\n      };\n   };\n\n   private validateDuplicateIps = (ipv4FormArray: FormArray): { [key: string]: any } | null => {\n      const duplicateIps: string[] = this.getDuplicateIps(ipv4FormArray);\n      return duplicateIps.length === 0 ? null : {\n         [Ipv4Settings.DUPLICATE_IPS_VALIDATION]: {\n            valid: false,\n            duplicateIps: duplicateIps\n         }\n      };\n   };\n\n   private validateDifferentSubnetError = (formGroup: any): { [key: string]: any } | null => {\n      return !this.hasDifferentSubnet(formGroup) ? null : {\n         [Ipv4Settings.DIFFERENT_SUBNET_VALIDATION]: {valid: false},\n      };\n   };\n\n   private isRowFilled(ipv4Control: AbstractControl, gatewayControl: AbstractControl,\n         subnetMaskControl: AbstractControl): boolean {\n      return ipv4Control.dirty && gatewayControl.dirty && subnetMaskControl.dirty &&\n            ipv4Control.value && gatewayControl.value && subnetMaskControl.value &&\n            ipv4Control.valid && gatewayControl.valid && subnetMaskControl.valid;\n   }\n\n   private fillSubsequentAddresses = (result: string[]): void => {\n      const defaultGateway: FormControl = this.getGatewayControl(Ipv4Settings.FIRST_ROW_INDEX);\n      const subnetMask: FormControl = this.getSubnetMaskControl(Ipv4Settings.FIRST_ROW_INDEX);\n\n      for (let index: number = 1; index < this.hostSettings.controls.length; index++) {\n         const formGroup: FormGroup = this.hostSettings.controls[index] as FormGroup;\n         for (const controlName in formGroup.controls) {\n            const control: FormControl = formGroup.controls[controlName] as FormControl;\n            switch (controlName) {\n               case Ipv4Settings.IPV4_CONTROL_NAME:\n                  control.setValue(result[index - 1]);\n                  break;\n               case Ipv4Settings.SUBNET_MASK_CONTROL_NAME:\n                  control.setValue(subnetMask.value);\n                  break;\n               case Ipv4Settings.GATEWAY_CONTROL_NAME:\n                  control.setValue(defaultGateway.value);\n                  break;\n            }\n         }\n      }\n\n      this.requestingData = false;\n      this.pageControls.rebuildToc();\n   };\n}","/* Copyright 2017-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, OnInit} from \"@angular/core\";\nimport {PageSet} from \"@component/wizard/flow-wizard.component\";\nimport {ClaimDisksWitnessHostPage} from \"@component/wizard/shared-pages/claim-disks-witness-host-page.component\";\nimport {FaultDomainsPageComponent} from \"@component/wizard/shared-pages/fault-domains-page.component\";\nimport {SingleSiteFaultDomainsPage} from \"@component/wizard/shared-pages/single-site-fault-domains-page.component\";\nimport {WitnessHostPageComponent} from \"@component/wizard/shared-pages/witness-host-page.component\";\nimport {ClusterConfigData} from \"@generated/cluster-config-data\";\nimport {ConfigureClusterService} from \"@generated/configure-cluster-service\";\nimport {ConfigureStretchedClusterService} from \"@generated/configure-stretched-cluster-service\";\nimport {ConfigureWizardData} from \"@generated/configure-wizard-data\";\nimport {EncryptionPropertyProvider} from \"@generated/encryption-property-provider\";\nimport {HciClusterService} from \"@generated/hci-cluster-service\";\nimport {VsanCapabilityData} from \"@generated/vsan-capability-data\";\nimport {VsanCapabilityProvider} from \"@generated/vsan-capability-provider\";\nimport {VsanClusterType} from \"@generated/vsan-cluster-type\";\nimport {VsanStretchedClusterService} from \"@generated/vsan-stretched-cluster-service\";\nimport {HciConfigureWizardContext} from \"@navigation/context/hci-configure-wizard-context\";\nimport {ManagedObject} from \"@service/managed-object\";\nimport {NetworkProxyConfig, NetworkProxyService} from \"@service/vapi/network-proxy.service\";\nimport {Logger} from \"@util/logger\";\nimport {WebPlatform} from \"@util/platform\";\nimport {VsanQuickstartUtil} from \"@util/vsan-quickstart-util\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {WitnessHostUtil} from \"@util/witness-host.util\";\nimport {ConfigureHciService} from \"./service/configure-hci.service\";\nimport {AdvancedOptionsPageComponent} from \"./view/advanced-options-page.component\";\nimport {HciClaimDisksPage} from \"./view/claim-disks-page.component\";\nimport {DistributedSwitchesPageComponent} from \"./view/distributed-switches-page.component\";\nimport {HciClusterReadyToCompletePageComponent} from \"./view/hci-cluster-ready-to-complete-page.component\";\nimport {ProxySettingsPageComponent} from \"./view/proxy-settings-page.component\";\nimport {StorageTrafficPageComponent} from \"./view/storage-traffic-page.component\";\nimport {SupportInsightPageComponent} from \"./view/support-insight-page.component\";\nimport {VmotionTrafficPageComponent} from \"./view/vmotion-traffic-page.component\";\n\n@Component({\n   selector: \"vsan-configure-hci-cluster\",\n   templateUrl: \"configure-hci-cluster-wizard.html\",\n   styleUrls: [\"configure-hci-cluster-wizard.scss\"],\n})\nexport class ConfigureHciClusterWizard implements OnInit {\n   private configureWizardData: ConfigureWizardData;\n   private clusterCapabilityData: VsanCapabilityData;\n   private vcCapabilityData: VsanCapabilityData;\n   private clusterConfigData: ClusterConfigData;\n   private httpsProxySetting: NetworkProxyConfig;\n\n   dataLoaded: boolean = false;\n\n   context: any = {};\n   services: any[] = [\n      HciClusterService,\n      ConfigureClusterService,\n      ConfigureStretchedClusterService,\n      VsanStretchedClusterService,\n      ConfigureHciService];\n   pages: PageSet[] = [];\n\n   constructor(private hciService: HciClusterService,\n         private capabilityProvider: VsanCapabilityProvider,\n         private networkProxyService: NetworkProxyService,\n         private encryptionPropertyProvider: EncryptionPropertyProvider) {\n   }\n\n   async ngOnInit(): Promise<void> {\n      const modalContext: HciConfigureWizardContext = VsanUiUtils.getModalContext();\n      this.configureWizardData = modalContext.configureWizardData;\n      const isVsanMaxSupportedOnHosts: boolean = modalContext.isVsanMaxSupportedOnHosts;\n\n      // assign a11y title here due to additional loading logic\n      WebPlatform.setAccessibilityTitle(VsanUiUtils.getString(\"vsan.cluster.hci.configureHciCluster.wizard.title\"));\n      let hasEncryptionPermissions: boolean;\n      let hasRekeyPermission: boolean;\n      [\n         hasEncryptionPermissions,\n         hasRekeyPermission,\n         this.clusterConfigData,\n         this.clusterCapabilityData,\n         this.vcCapabilityData,\n      ] = await Promise.all([\n         this.encryptionPropertyProvider.getEncryptionPermissions(ManagedObject.contextObject),\n         this.encryptionPropertyProvider.getReKeyPermissions(ManagedObject.contextObject),\n         this.hciService.getClusterConfigData(ManagedObject.contextObject),\n         this.capabilityProvider.getClusterCapabilityData(ManagedObject.contextObject),\n         this.capabilityProvider.getVcCapabilityData(ManagedObject.contextObject),\n      ]);\n      if (this.clusterConfigData !== null) {\n         // query Support Insight Proxy settings only when the following prerequisites are met:\n         //    1. encryption permissions are granted\n         //    2. vSAN is enabled\n         //    3. is in the creation cluster wizard\n         //    4. this feature is supported\n         if (hasEncryptionPermissions && this.clusterConfigData.basicConfig.vsanEnabled\n               && VsanQuickstartUtil.isHciWorkflowInProgress(this.clusterConfigData.basicConfig.hciWorkflowState)\n               && this.clusterCapabilityData.isSupportInsightSupported) {\n            await this.networkProxyService.getSettings(ManagedObject.contextObject)\n                  .then(httpsProxySetting => this.httpsProxySetting = httpsProxySetting)\n                  .catch(error => Logger.error(\"Failed to query VC proxy settings\", error));\n         }\n\n         this.context = {\n            moRef: ManagedObject.contextObject,\n            clusterRef: ManagedObject.contextObject,\n            contextClusterRef: ManagedObject.contextObject,\n            configureWizardData: this.configureWizardData,\n            clusterHosts: this.configureWizardData.hosts,\n            notConfiguredClusterHosts: this.configureWizardData.notConfiguredHosts,\n            clusterConfigData: this.clusterConfigData,\n            hasDiskGroupsOnWitness: false,\n            isVsanMaxSupportedOnHosts: isVsanMaxSupportedOnHosts,\n            // Needed for hostsClaimingData InputProperty's retrieval in claim-disks page.\n            isVsanMaxWorkflow: this.clusterConfigData.vsanConfigSpec.isVsanMaxEnabled,\n\n            // This spec is used for all vsan specific configs. All vSAN pages + Advanced options page\n            // use this spec which is copied back to the clusterConfigData in the ready to complete page.\n            // This workaround is needed in order to keep the configure vSAN and configure stretch cluster wizards\n            // separate from the configure HCI cluster wizard\n            vsanConfigSpec: this.clusterConfigData.vsanConfigSpec,\n            hciWorkflow: true,\n            vcCapabilityData: this.vcCapabilityData,\n            clusterCapabilityData: this.clusterCapabilityData,\n            encryptionPermissions: hasEncryptionPermissions,\n            rekeyPermission: hasRekeyPermission,\n         };\n\n         this.pages = this.getPages();\n      }\n      this.dataLoaded = true;\n   }\n\n   private getPages(): PageSet[] {\n      const pages: PageSet[] = [\n         new PageSet([DistributedSwitchesPageComponent],\n               () => this.configureWizardData.showDvsPage),\n         new PageSet([VmotionTrafficPageComponent],\n               () => this.configureWizardData.showVmotionTrafficPage && !this.configureWizardData.optOutOfNetworking),\n         new PageSet([StorageTrafficPageComponent],\n               () => this.configureWizardData.showVsanTrafficPage && !this.configureWizardData.optOutOfNetworking),\n         new PageSet([AdvancedOptionsPageComponent],\n               () => this.configureWizardData.showAdvancedOptionsPage),\n\n         new PageSet([HciClaimDisksPage],\n               () => this.configureWizardData.showClaimDisksPage),\n      ];\n      /* Include the Support Insight configuration page statically. E.g. we do not want it to disappear when the\n       user click the \"Hide this page\" checkbox in it.\n       1. Proxy setting information is collected\n       2. SupportInsight is supported and enabled\n       3. CEIP is not enabled.\n       */\n      if (this.httpsProxySetting\n            && !this.configureWizardData.isSupportInsightStepHidden\n            && !this.configureWizardData.ceipEnabled) {\n         pages.push(new PageSet([SupportInsightPageComponent]));\n      }\n\n      pages.push(...[\n         /* Include the proxy setting view when:\n          1. SupportInsight is supported and enabled\n          2. User hasn't checked the 'Hide support insight' checkbox\n          3. Proxy setting information is collected and proxy is not set\n         */\n         new PageSet([ProxySettingsPageComponent],\n               () => !this.configureWizardData.isSupportInsightStepHidden\n                     && !this.configureWizardData.disableSupportInsight\n                     && this.httpsProxySetting\n                     && !this.httpsProxySetting.enabled),\n         new PageSet([FaultDomainsPageComponent],\n               () => this.configureWizardData.selectedVsanClusterType === VsanClusterType.STRETCHED_CLUSTER),\n      ]);\n\n      // In extend mode the witness host is already configured, so skip related pages.\n      if (!this.configureWizardData.isExtend) {\n         pages.push(...[\n            new PageSet([WitnessHostPageComponent],\n                  () => this.configureWizardData.selectedVsanClusterType === VsanClusterType.STRETCHED_CLUSTER\n                        || this.configureWizardData.selectedVsanClusterType === VsanClusterType.TWO_HOST_VSAN_CLUSTER),\n            new PageSet([ClaimDisksWitnessHostPage], this.includeClaimDisksPage),\n         ]);\n      }\n      pages.push(...[\n         new PageSet([SingleSiteFaultDomainsPage],\n               () => this.configureWizardData.showSingleSiteFaultDomainsPage),\n         new PageSet([HciClusterReadyToCompletePageComponent]),\n      ]);\n      return pages;\n   }\n\n   private includeClaimDisksPage = (\n         hasDiskGroupsOnWitness: boolean,\n         isWitnessDeployedFromOvf: boolean,\n         isVsanMaxWorkflow: boolean): boolean => {\n      return WitnessHostUtil.isClaimDisksPageVisible(this.configureWizardData.selectedVsanClusterType,\n            hasDiskGroupsOnWitness, isWitnessDeployedFromOvf, isVsanMaxWorkflow);\n   };\n}\n","import {Service} from '@generated/service';\nimport {HostAdapter} from '@generated/host-adapter';\n\nexport interface DvsSpec {\n\n   name: string;\n   services: Service[];\n   adapters: HostAdapter[];\n   existingDvsMor: any;\n} //class DvsSpec\n\nexport module DvsSpec{\nexport class Factory {\n\n   static create = (name: string, services: Service[], adapters: HostAdapter[], existingDvsMor: any): DvsSpec => {\n      return { name: name, services: services, adapters: adapters, existingDvsMor: existingDvsMor, };\n   }\n\n\n} //class Factory\n\n} //module DvsSpec\n","/* Copyright 2017-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, OnInit} from \"@angular/core\";\nimport {AlertType} from \"@component/validation/alert-type\";\nimport {InputProperty, OutputProperty, WizardPage} from \"@component/wizard/flow-metadata\";\nimport {OnValidate, PageControls} from \"@component/wizard/flow-wizard.component\";\nimport {PageItem} from \"@component/wizard/page-item\";\nimport {ClusterConfigData} from \"@generated/cluster-config-data\";\nimport {ConfigureClusterService} from \"@generated/configure-cluster-service\";\nimport {ConfigureWizardData} from \"@generated/configure-wizard-data\";\nimport {CsdService} from \"@generated/csd-service\";\nimport {DrsAutoLevel} from \"@generated/drs-auto-level\";\nimport {EncryptionPropertyProvider} from \"@generated/encryption-property-provider\";\nimport {EvcModeConfigData} from \"@generated/evc-mode-config-data\";\nimport {EvcModeValidationResult} from \"@generated/evc-mode-validation-result\";\nimport {HciClusterService} from \"@generated/hci-cluster-service\";\nimport {HostFaultDomainData} from \"@generated/host-fault-domain-data\";\nimport {KmipClusterData} from \"@generated/kmip-cluster-data\";\nimport {LockdownMode} from \"@generated/lockdown-mode\";\nimport {Service} from \"@generated/service\";\nimport {SpaceEfficiencyConfig} from \"@generated/space-efficiency-config\";\nimport {VsanCapabilityData} from \"@generated/vsan-capability-data\";\nimport {VsanClusterType} from \"@generated/vsan-cluster-type\";\nimport {VsanConfigSpec} from \"@generated/vsan-config-spec\";\nimport {VsanRdmaService} from \"@generated/vsan-rdma-service\";\nimport {VumBaselineRecommendationType} from \"@generated/vum-baseline-recommendation-type\";\nimport {FaultDomainValidationService} from \"@service/fault-domain-validation.service\";\nimport {ManagedObject} from \"@service/managed-object\";\nimport {VsanDitUtil} from \"@util/vsan-dit-util\";\nimport {VsanRdmaUtil} from \"@util/vsan-rdma-util\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\n\n@WizardPage(\n      VsanUiUtils.getString(\"vsan.cluster.hci.configureHciCluster.wizard.advancedOptionsPage.title\"),\n      VsanUiUtils.getString(\"vsan.cluster.hci.configureHciCluster.wizard.advancedOptionsPage.description\"),\n      [ConfigureClusterService, EncryptionPropertyProvider, CsdService],\n)\n@Component({\n   templateUrl: \"advanced-options-page.html\",\n   styleUrls: [\"advanced-options-page.scss\"],\n})\nexport class AdvancedOptionsPageComponent implements OnInit, OnValidate {\n   SpaceEfficiencyConfig: typeof SpaceEfficiencyConfig = SpaceEfficiencyConfig;\n\n   AlertType: typeof AlertType = AlertType;\n\n   @InputProperty()\n   stretchClusterSupported: boolean;\n\n   @InputProperty()\n   hasSharedWitnessHost: boolean;\n\n   @InputProperty()\n   isClusterClientOrServer: boolean;\n\n   @InputProperty()\n   pageControls: PageControls;\n\n   @InputProperty()\n   kmipClusterData: KmipClusterData;\n\n   @InputProperty()\n   encryptionPermissions: boolean;\n\n   @InputProperty()\n   rekeyPermission: boolean;\n\n   @InputProperty()\n   private clusterHostFaultDomainData: HostFaultDomainData[];\n\n   @InputProperty()\n   @OutputProperty()\n   clusterConfigData: ClusterConfigData;\n\n   @InputProperty()\n   @OutputProperty()\n   configureWizardData: ConfigureWizardData;\n\n   // All vSAN specific configuration should be recorded in this parameter\n   @InputProperty()\n   @OutputProperty()\n   vsanConfigSpec: VsanConfigSpec;\n\n   @InputProperty()\n   isVsanMaxSupportedOnHosts: boolean;\n\n   @InputProperty()\n   @OutputProperty()\n   evcModeConfigData: EvcModeConfigData;\n\n   @InputProperty()\n   clusterCapabilityData: VsanCapabilityData;\n\n   @InputProperty()\n   vcCapabilityData: VsanCapabilityData;\n\n   @OutputProperty()\n   isVsanMaxWorkflow: boolean;\n\n   selectedHostFtt: string;\n   allowCreateFaultDomains: boolean = true;\n   showVsanMaxEnableOption: boolean = false;\n\n   stackBlocksExpandedState: boolean[] = Array(5).fill(false);\n   readonly HA_SETTINGS_INDEX: number = 0;\n   readonly DRS_SETTINGS_INDEX: number = 1;\n   readonly VSAN_SETTINGS_INDEX: number = 2;\n   readonly HOST_SETTINGS_INDEX: number = 3;\n   readonly EVM_SETTINGS_INDEX: number = 4;\n\n   readonly AUTOMATION_OPTS: SelectorOption[] = [\n      {\n         id: DrsAutoLevel.MANUAL,\n         label: VsanUiUtils.getString(\"vsan.cluster.configure.wizard.advancedOptions.auto.manual\"),\n      },\n      {\n         id: DrsAutoLevel.PARTIALLY_AUTOMATED,\n         label: VsanUiUtils.getString(\"vsan.cluster.configure.wizard.advancedOptions.auto.partially\"),\n      },\n      {\n         id: DrsAutoLevel.FULLY_AUTOMATED,\n         label: VsanUiUtils.getString(\"vsan.cluster.configure.wizard.advancedOptions.auto.fully\"),\n      }];\n\n   static readonly DEFAULT_MIGRATION_THRESHOLD: number = 3;\n   readonly AVAILABLE_MIGRATION_THRESHOLD: number[] = [1, 2, 3, 4, 5];\n\n   private _clusterTypes: SelectorOption[];\n\n   constructor(private hciClusterService: HciClusterService,\n         private vsanRdmaService: VsanRdmaService,\n         private faultDomainValidationService: FaultDomainValidationService) {\n   }\n\n   get availableVsanClusterTypes(): SelectorOption[] {\n      if (this._clusterTypes) {\n         return this._clusterTypes;\n      }\n\n      this._clusterTypes = [];\n      this._clusterTypes.push({\n         id: VsanClusterType.SINGLE_SITE_CLUSTER,\n         label: VsanUiUtils.getString(\"vsan.cluster.configure.wizard.configurationType.singleSite.label\"),\n      });\n\n      if (this.clusterConfigData.basicConfig.totalHosts === 2) {\n         this._clusterTypes.push({\n            id: VsanClusterType.TWO_HOST_VSAN_CLUSTER,\n            label: VsanUiUtils.getString(\"vsan.cluster.configure.wizard.configurationType.twoHosts.label\"),\n         });\n      }\n\n      if (this.stretchClusterSupported && this.clusterConfigData.basicConfig.totalHosts > 1) {\n         this._clusterTypes.push({\n            id: VsanClusterType.STRETCHED_CLUSTER,\n            label: VsanUiUtils.getString(\"vsan.cluster.configure.wizard.configurationType.stretchCluster.label\"),\n         });\n      }\n\n      return this._clusterTypes;\n   }\n\n   readonly VUM_BASELINE_PREFERENCE_TYPES: SelectorOption[] = [\n      {\n         id: VumBaselineRecommendationType.latestRelease,\n         label: VsanUiUtils.getString(\"vsan.vum.baseline.recommendation.option.latest.release.label\"),\n      },\n      {\n         id: VumBaselineRecommendationType.latestPatch,\n         label: VsanUiUtils.getString(\"vsan.vum.baseline.recommendation.option.latest.patch.label\"),\n      },\n      {\n         id: VumBaselineRecommendationType.noRecommendation,\n         label: VsanUiUtils.getString(\"vsan.vum.baseline.recommendation.option.no.recommendation.label\"),\n      },\n   ];\n\n   readonly AVAILABLE_LOCKDOWN_MODES: SelectorOption[] = [\n      {\n         id: LockdownMode.DISABLED,\n         label: VsanUiUtils.getString(\n               \"vsan.cluster.configure.wizard.advancedOptions.host.options.lockdown.mode.disabled\"),\n      },\n      {\n         id: LockdownMode.NORMAL,\n         label: VsanUiUtils.getString(\n               \"vsan.cluster.configure.wizard.advancedOptions.host.options.lockdown.mode.normal\"),\n      },\n      {\n         id: LockdownMode.STRICT,\n         label: VsanUiUtils.getString(\n               \"vsan.cluster.configure.wizard.advancedOptions.host.options.lockdown.mode.strict\"),\n      },\n   ];\n\n   availableHostFtt: number[] = [];\n   hostHardwareSupportRdma: boolean = false;\n\n   async ngOnInit(): Promise<void> {\n      if (this.evcModeConfigData.supportedIntelEvcMode\n            && this.evcModeConfigData.supportedIntelEvcMode.length > 0) {\n         this.clusterConfigData.selectedEvcMode = this.evcModeConfigData.supportedIntelEvcMode[0].id;\n      } else if (this.evcModeConfigData.supportedAmdEvcMode\n            && this.evcModeConfigData.supportedAmdEvcMode.length > 0) {\n         this.clusterConfigData.selectedEvcMode = this.evcModeConfigData.supportedAmdEvcMode[0].id;\n      }\n\n      if (!this.clusterConfigData.migrationThreshold) {\n         this.clusterConfigData.migrationThreshold = AdvancedOptionsPageComponent.DEFAULT_MIGRATION_THRESHOLD;\n      }\n\n      if (this.clusterConfigData.basicConfig.totalHosts < 2) {\n         // In case the cluster doesn't have a host, set the available ftt=1\n         this.availableHostFtt.push(1);\n      } else {\n         // Start from 1 because the minimum FTT is 1\n         for (let i: number = 1; i < this.clusterConfigData.basicConfig.totalHosts; i++) {\n            this.availableHostFtt.push(i);\n         }\n      }\n\n      if (this.isEncryptionSupported && this.kmipClusterData.availableKmipClusters &&\n            this.kmipClusterData.availableKmipClusters.length) {\n         this.vsanConfigSpec.kmipClusterId =\n               this.vsanConfigSpec.kmipClusterId || this.kmipClusterData.availableKmipClusters[0];\n      }\n\n      // There is problem with setting numbers directly in select ngModel\n      // this requires the value to be stored in a string property and\n      // on change to be moved to the real mode object\n      this.selectedHostFtt = \"\" + this.clusterConfigData.hostFTT;\n\n      // Override the largeClusterSupportEnabled value from Configure wizard data\n      // as there is a custom logic for it in HciClusterService.java\n      this.vsanConfigSpec.advancedOptions.largeClusterSupportEnabled\n            = this.configureWizardData.largeScaleClusterSupport;\n\n      // Check if vSAN Max is already enabled on the cluster\n      this.isVsanMaxWorkflow = this.vsanConfigSpec.isVsanMaxEnabled;\n\n      if (this.clusterConfigData.basicConfig.vsanEnabled) {\n         await this.getRdmaState();\n      }\n\n      if (this.isVsanMaxSupportedOnHosts\n            && this.clusterConfigData.basicConfig.vsanEnabled\n            && !this.clusterConfigData.basicConfig.isVsanMaxEnabled) {\n         this.showVsanMaxEnableOption = true;\n      }\n      this.initStackBlocksExpandedState();\n      this.validateSelection();\n   }\n\n   private initStackBlocksExpandedState(): void {\n      if (this.showVsanMaxEnableOption) {\n         // If we show the banner to enable vSAN MAX we should auto-expand the vSAN settings section,\n         // where the setting is present.\n         this.stackBlocksExpandedState[this.VSAN_SETTINGS_INDEX] = true;\n      } else if (this.clusterConfigData.basicConfig.haEnabled) {\n         this.stackBlocksExpandedState[this.HA_SETTINGS_INDEX] = true;\n      } else if (this.clusterConfigData.basicConfig.drsEnabled) {\n         this.stackBlocksExpandedState[this.DRS_SETTINGS_INDEX] = true;\n      } else if (this.clusterConfigData.basicConfig.vsanEnabled) {\n         this.stackBlocksExpandedState[this.VSAN_SETTINGS_INDEX] = true;\n      } else {\n         this.stackBlocksExpandedState[this.HOST_SETTINGS_INDEX] = true;\n      }\n   }\n\n   toggleStackBlockExpandedState(stackBlockIndex: number): boolean {\n      const newIndexState: boolean = !this.stackBlocksExpandedState[stackBlockIndex];\n      this.stackBlocksExpandedState.forEach((value, index) => {\n         this.stackBlocksExpandedState[index] = index === stackBlockIndex ? newIndexState : false;\n      });\n      return newIndexState;\n   }\n\n   get isEncryptionSupported(): boolean {\n      return this.clusterCapabilityData?.isEncryptionSupported &&\n            this.encryptionPermissions;\n   }\n\n   get isDataInTransitEncryptionSupported(): boolean {\n      return this.clusterCapabilityData?.isDataInTransitEncryptionSupported && this.rekeyPermission;\n   }\n\n   get isSpaceEfficiencySupported(): boolean {\n      return this.clusterCapabilityData?.isDeduplicationAndCompressionSupported\n            || this.clusterCapabilityData?.isCompressionOnlySupported;\n   }\n\n   onDataInTransitEncryptionChange(): void {\n      if (this.vsanConfigSpec.enableDataInTransitEncryption) {\n         this.vsanConfigSpec.rekeyInterval = VsanDitUtil.DEFAULT_DIT_REKEY_INTERVAL;\n      }\n   }\n\n   onHostFttChange(): void {\n      this.clusterConfigData.hostFTT = +this.selectedHostFtt;\n   }\n\n   validateAdvancedSettings(): string[] {\n      const validationErrors: string[] = [];\n      if (!this.clusterConfigData.basicConfig.vsanEnabled) {\n         return validationErrors;\n      }\n\n      if (this.isEncryptionSupported && this.vsanConfigSpec.enableDataAtRestEncryption\n            && !this.vsanConfigSpec.kmipClusterId) {\n         validationErrors.push(VsanUiUtils.getString(\"vsan.generalConfig.kmsNotSelected.warning\"));\n      }\n\n      switch (this.configureWizardData.selectedVsanClusterType) {\n         case VsanClusterType.SINGLE_SITE_CLUSTER:\n            if (this.allowCreateFaultDomains) {\n               validationErrors.push(...this.faultDomainValidationService.getFaultDomainValidationErrors(this.clusterHostFaultDomainData));\n            }\n            break;\n         case VsanClusterType.TWO_HOST_VSAN_CLUSTER:\n            if (this.clusterConfigData.basicConfig.totalHosts !== 2) {\n               validationErrors.push(\n                     VsanUiUtils.getString(\"vsan.generalConfig.wrongHostNumberForRobo\",\n                           this.clusterConfigData.basicConfig.totalHosts));\n            }\n            validationErrors.push(...this.faultDomainValidationService.getFaultDomainValidationErrors(this.clusterHostFaultDomainData));\n            break;\n         case VsanClusterType.STRETCHED_CLUSTER:\n            if (!this.stretchClusterSupported) {\n               validationErrors.push(VsanUiUtils.getString(\"vsan.generalConfig.stretchedClusterNotSupported\"));\n            } else if (this.clusterConfigData.basicConfig.totalHosts < 2) {\n               validationErrors.push(VsanUiUtils.getString(\"vsan.generalConfig.notEnoughHostsForStretchedCluster\"));\n               validationErrors.push(...this.faultDomainValidationService.getFaultDomainValidationErrors(this.clusterHostFaultDomainData));\n            }\n            break;\n      }\n      return validationErrors;\n   }\n\n   validate(): string[] | Promise<string[]> {\n      const advancedOptionsValidation: string[] = this.validateAdvancedSettings();\n      return advancedOptionsValidation.length > 0 ? advancedOptionsValidation : this.validateEvcMode();\n   }\n\n   vsanClusterTypeChanged(): void {\n      switch (this.configureWizardData.selectedVsanClusterType) {\n         case VsanClusterType.STRETCHED_CLUSTER:\n            this.configureWizardData.showSingleSiteFaultDomainsPage = false;\n            this.configureWizardData.enableFaultDomainForSingleSiteCluster = true;\n            this.allowCreateFaultDomains = false;\n            break;\n         case VsanClusterType.TWO_HOST_VSAN_CLUSTER:\n            this.configureWizardData.showSingleSiteFaultDomainsPage = false;\n            this.configureWizardData.enableFaultDomainForSingleSiteCluster = false;\n            this.allowCreateFaultDomains = false;\n            break;\n         case VsanClusterType.SINGLE_SITE_CLUSTER:\n            this.configureWizardData.enableFaultDomainForSingleSiteCluster = false;\n            this.configureWizardData.showSingleSiteFaultDomainsPage =\n                  this.configureWizardData.enableFaultDomainForSingleSiteCluster;\n            this.allowCreateFaultDomains = true;\n            break;\n      }\n\n      this.updateRdmaState();\n\n      this.validateSelection();\n   }\n\n   // Disable RDMA toggle when Stretched/2 node or large scale cluster is enabled\n   updateRdmaState(): void {\n      if (this.clusterCapabilityData?.isRdmaSupported && !this.canEnableRdma) {\n         this.vsanConfigSpec.enableRdma = false;\n      }\n   }\n\n   enableFaultDomainForSingleSiteClusterChanged(): void {\n      this.configureWizardData.showSingleSiteFaultDomainsPage =\n            this.configureWizardData.enableFaultDomainForSingleSiteCluster;\n      this.validateSelection();\n   }\n\n   updateVsanMaxState(): void {\n      this.clusterConfigData.basicConfig.isVsanMaxEnabled = this.isVsanMaxWorkflow;\n      this.vsanConfigSpec.isVsanMaxEnabled = this.isVsanMaxWorkflow;\n      if (this.isVsanMaxWorkflow) {\n         this.vsanConfigSpec.spaceEfficiencyConfig = SpaceEfficiencyConfig.NONE;\n      }\n   }\n\n   validateSelection(): void {\n      let disableNextButton: boolean = false;\n      this.clearPageState();\n\n      const errorMessages: string[] = this.validateAdvancedSettings();\n      if (errorMessages.length) {\n         this.pageControls.addValidationErrors(errorMessages);\n         disableNextButton = true;\n      }\n      (this.pageControls as PageItem).nextButtonIsDisabled = disableNextButton;\n   }\n\n   /**\n    * There is a bug in angular2 on <select> element with *ngFor,\n    * https://github.com/angular/angular/issues/4843\n    * To workaround this, we have to parse the string to number manually\n    */\n   parseMigrationThreshold = (): void => {\n      this.clusterConfigData.migrationThreshold = +this.clusterConfigData.migrationThreshold;\n   };\n\n   clearPageState = (): void => {\n      this.rebuildToc();\n      this.pageControls.clearValidationErrors();\n   };\n\n   // Triggered on changed value in the page\n   rebuildToc(): void {\n      this.pageControls.rebuildToc();\n   }\n\n   validateEvcMode = (): Promise<string[]> => {\n      if (!this.clusterConfigData.enableEVC) {\n         return null;\n      }\n\n      return this.hciClusterService.getEvcModeValidationResult(ManagedObject.contextObject,\n            this.clusterConfigData.selectedEvcMode)\n            .then((results: EvcModeValidationResult[]) => {\n               if (results.length) {\n                  return this.aggregateEvcModeValidationResults(results);\n               }\n            })\n            .catch((error) => {\n               return [error];\n            });\n   };\n\n   /**\n    * The evc validation results are seperated by the host.\n    * This means the error messages could be the same for all the hosts,\n    * we need to group them to avoid displaying duplicated messages.\n    *\n    * Another thing is, the host in the validation result is host id, something like 'host-15'.\n    * This is not what we wanted, we need the IP address, and it can be found in the clusterHostFaultDomainData\n    */\n   private aggregateEvcModeValidationResults = (results: EvcModeValidationResult[]): string[] => {\n      const errorMap: Map<string, string[]> = new Map();\n      results.forEach((result: EvcModeValidationResult) => {\n         const hosts: string[] = errorMap.get(result.errorMessage) || [];\n         Array.prototype.push.apply(hosts, result.hostRefs\n               .filter(host => hosts.indexOf(host.value) === -1)\n               .map((host): string => {\n                  return host.value;\n               }));\n         errorMap.set(result.errorMessage, hosts);\n      });\n\n      const errorMessages: string[] = [];\n      errorMap.forEach((val: string[], key: string): void => {\n         const hostNames: string[] = val.map((host): string => {\n            return this.clusterHostFaultDomainData\n                  .filter(domain => ManagedObject.fromUid(domain.hostUid).value === host)[0].name;\n         });\n         errorMessages.push(`${key} ${hostNames.join(\", \")}`);\n      });\n\n      return errorMessages;\n   };\n\n   private async getRdmaState(): Promise<void> {\n      // Due to some corner cases when RDMA is enabled when starting HCI configure wizard,\n      // it should be explicitly disabled.\n      this.vsanConfigSpec.enableRdma = false;\n      await this.getIsRdmaHardwareSupported();\n   }\n\n   private async getIsRdmaHardwareSupported(): Promise<void> {\n      this.pageControls.setBusyState();\n      let vSanHostAdapters: string[] = [];\n\n      // Check if there are configured dvsSpecs, because in the HCI wizard - the network settings could be skipped\n      if (this.clusterConfigData.dvsSpecs) {\n         vSanHostAdapters = this.clusterConfigData.dvsSpecs.find(\n               dvs => dvs.services.includes(Service.VSAN)).adapters.map(adapter => adapter.deviceName);\n      }\n\n      try {\n         this.hostHardwareSupportRdma = await this.vsanRdmaService.isRdmaHardwareSupported(\n               ManagedObject.contextObject, vSanHostAdapters);\n      } catch (error) {\n         this.pageControls.addValidationErrors([error]);\n      }\n\n      this.pageControls.clearBusyState();\n   }\n\n   get canEnableRdma(): boolean {\n      return VsanRdmaUtil.canEnableRdma(this.hostHardwareSupportRdma,\n            this.vsanConfigSpec.advancedOptions.largeClusterSupportEnabled,\n            this.configureWizardData.selectedVsanClusterType,\n            this.clusterCapabilityData.isRdmaStretchedClusterSupported);\n   }\n\n   get rdmaDisabledMessage(): string {\n      return VsanRdmaUtil.getRdmaDisabledMessage(this.hostHardwareSupportRdma,\n            this.vsanConfigSpec.advancedOptions.largeClusterSupportEnabled,\n            this.configureWizardData.selectedVsanClusterType,\n            this.clusterCapabilityData.isRdmaStretchedClusterSupported);\n   }\n\n   get ditUnavailableMessage(): string {\n      return VsanDitUtil.getDitUnavailableMessage(\n            this.vsanConfigSpec,\n            this.isClusterClientOrServer,\n            this.hasSharedWitnessHost,\n            this.clusterCapabilityData.isDitSharedWitnessInteroperabilitySupported);\n   }\n}\n\n/**\n * The interface to represent the object type of a HTML select option\n */\ninterface SelectorOption {\n   id: DrsAutoLevel | LockdownMode | VsanClusterType | VumBaselineRecommendationType;\n   label: string;\n}\n","/* Copyright 2020-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {VsanConfigSpec} from \"@generated/vsan-config-spec\";\n\nexport class VsanDitUtil {\n   static readonly DEFAULT_DIT_REKEY_INTERVAL: number = 24 * 60;\n\n   static getDitUnavailableMessage(vsanConfigSpec: VsanConfigSpec,\n         isClusterClientOrServer: boolean,\n         hasSharedWitnessHost: boolean,\n         isDitSharedWitnessInteroperabilitySupported: boolean): string {\n\n      if (vsanConfigSpec.autoClaimDisks) {\n         return VsanUiUtils.getString(\"vsan.dataInTransitEncryption.unavailable.autoClaimDisks\");\n      }\n\n      if (isClusterClientOrServer) {\n         return VsanUiUtils.getString(\"vsan.dataInTransitEncryption.unavailable.isServerOrClient\");\n      }\n\n      if (hasSharedWitnessHost && !isDitSharedWitnessInteroperabilitySupported) {\n         return VsanUiUtils.getString(\"vsan.dataInTransitEncryption.unavailable.hasSharedWitness\");\n      }\n\n   }\n}\n","/* Copyright 2017-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, OnInit, ViewChild} from \"@angular/core\";\nimport {InputProperty, OutputProperty, WizardPage} from \"@component/wizard/flow-metadata\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {OnValidate, PageControls} from \"@component/wizard/flow-wizard.component\";\nimport {NetworkingSettingsComponent} from \"../component/networking-settings.component\";\nimport {ClusterConfigData} from \"@generated/cluster-config-data\";\nimport {Service} from \"@generated/service\";\nimport {ConfigureWizardData} from \"@generated/configure-wizard-data\";\nimport {DvpgData} from \"@generated/dvpg-data\";\nimport {VlanType} from \"@generated/vlan-type\";\nimport {HciClusterService} from \"@generated/hci-cluster-service\";\nimport {VlanData} from \"@generated/vlan-data\";\nimport {VsanCapabilityData} from \"@generated/vsan-capability-data\";\nimport {InventoryNode} from \"@generated/inventory-node\";\n\n@WizardPage(\n      VsanUiUtils.getString(\"vsan.cluster.hci.configureHciCluster.wizard.storageTrafficPage.title\"),\n      VsanUiUtils.getString(\"vsan.cluster.hci.configureHciCluster.wizard.storageTrafficPage.description\"),\n)\n@Component({\n   templateUrl: \"storage-traffic-page.html\",\n})\nexport class StorageTrafficPageComponent implements OnInit, OnValidate {\n   @ViewChild(NetworkingSettingsComponent)\n   networkingSettings: NetworkingSettingsComponent;\n\n   @InputProperty()\n   pageControls: PageControls;\n\n   @InputProperty(\"notConfiguredClusterHosts\")\n   hosts: InventoryNode[] = [];\n\n   @InputProperty()\n   @OutputProperty()\n   clusterConfigData: ClusterConfigData;\n\n   @InputProperty(InputProperty.required(false))\n   storageDvsName: string;\n\n   @InputProperty()\n   configureWizardData: ConfigureWizardData;\n\n   @InputProperty(InputProperty.required(false))\n   storageDvpg: DvpgData;\n\n   currentService: Service = Service.VSAN;\n\n   vlan: string;\n\n   vlanType: VlanType;\n\n   constructor(private hciService: HciClusterService) {\n   }\n\n   @OutputProperty()\n   storageTrafficForm: any;\n\n   @InputProperty()\n   clusterCapabilityData: VsanCapabilityData;\n\n   ngOnInit(): void {\n      if (this.configureWizardData.isExtend) {\n         this.storageDvsName =\n               this.clusterConfigData.basicConfig.dvsDataByService[Service.VSAN].dvsName;\n         this.vlan =\n               this.clusterConfigData.basicConfig.dvsDataByService[Service.VSAN].vlan;\n         this.vlanType =\n               this.clusterConfigData.basicConfig.dvsDataByService[Service.VSAN].vlanType;\n      }\n\n      if (this.storageDvpg && this.storageDvpg.existingDvpg) {\n         this.hciService.getDvpgVlan(this.storageDvpg.existingDvpg).then((vlanData: VlanData) => {\n            if (vlanData) {\n               this.vlanType = vlanData.vlanType;\n               this.vlan = vlanData.vlan;\n            }\n         });\n      }\n   }\n\n   validate(): string[] {\n      const result: string[] = this.networkingSettings.validate();\n      if (!result) {\n         // remove previous config\n         if (this.clusterConfigData.netServiceConfigs) {\n            this.clusterConfigData.netServiceConfigs =\n                  this.clusterConfigData.netServiceConfigs.filter((config) => config.service !== Service.VSAN);\n         } else {\n            this.clusterConfigData.netServiceConfigs = [];\n         }\n\n         // fill cluster config with vsan configuration\n         this.clusterConfigData.netServiceConfigs.push(this.networkingSettings.getNetConfig(Service.VSAN));\n      }\n      return result;\n   }\n}\n","/* Copyright 2017-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component} from \"@angular/core\";\nimport {AbstractControl, FormArray, FormBuilder, FormControl, FormGroup, Validators} from \"@angular/forms\";\nimport {InputProperty, OutputProperty, WizardPage} from \"@component/wizard/flow-metadata\";\nimport {OnValidate, PageControls} from \"@component/wizard/flow-wizard.component\";\nimport {ClusterConfigData} from \"@generated/cluster-config-data\";\nimport {ConfigureWizardData} from \"@generated/configure-wizard-data\";\nimport {DvpgData} from \"@generated/dvpg-data\";\nimport {DvsSpec} from \"@generated/dvs-spec\";\nimport {ExistingDvpgData} from \"@generated/existing-dvpg-data\";\nimport {ExistingDvsData} from \"@generated/existing-dvs-data\";\nimport {HciClusterService} from \"@generated/hci-cluster-service\";\nimport {HostAdapter} from \"@generated/host-adapter\";\nimport {Service} from \"@generated/service\";\nimport {NavigationService} from \"@navigation/navigation.service\";\nimport {ManagedObject} from \"@service/managed-object\";\nimport {Logger} from \"@util/logger\";\nimport {ModalBuilder} from \"@util/modal-builder\";\nimport {ReactiveFormUtil} from \"@util/reactive-form-util\";\nimport {StringUtil} from \"@util/string-util\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {DistributedSwitchesPageValidator} from \"./distributed-switches-page.validator\";\n\n@WizardPage(\n      VsanUiUtils.getString(\"vsan.cluster.hci.configureHciCluster.wizard.distributedSwitchesPage.title\"),\n      VsanUiUtils.getString(\"vsan.cluster.hci.configureHciCluster.wizard.distributedSwitchesPage.description\"),\n)\n@Component({\n   templateUrl: \"distributed-switches-page.html\",\n   styleUrls: [\"distributed-switches-page.scss\"],\n})\nexport class DistributedSwitchesPageComponent implements OnValidate {\n\n   static readonly VVD_ROUTE: string = \"/solutions/software-defined-datacenter/validated-designs.html\";\n\n   static readonly OPT_OUT_OF_NET_CONFIG_CONTROL_NAME: string = \"optOutOfNetworking\";\n\n   static readonly NET_MAX_COUNT: number = 3;\n   static readonly NET_CONFIG_FORM_GROUP: string = \"netConfigSection\";\n   static readonly DVS_COUNT_CONTROL_NAME: string = \"physicalNetworksCount\";\n   static readonly DVS_COUNT_CONTROL_PATH: string = ReactiveFormUtil.getFormControlPath(\n         DistributedSwitchesPageComponent.NET_CONFIG_FORM_GROUP,\n         DistributedSwitchesPageComponent.DVS_COUNT_CONTROL_NAME);\n   static readonly DVS_COUNT_DEFAULT_VALUE: number = 1;\n\n   static readonly DVS_FORM_ARRAY: string = \"switchesSection\";\n   static readonly DVS_FORM_ARRAY_PATH: string = ReactiveFormUtil.getFormControlPath(\n         DistributedSwitchesPageComponent.NET_CONFIG_FORM_GROUP,\n         DistributedSwitchesPageComponent.DVS_FORM_ARRAY);\n   static readonly DVS_CONTROL_NAME: string = \"switch\";\n\n   static readonly PG_FORM_GROUP: string = \"portGroupSection\";\n   static readonly PG_FORM_GROUP_PATH: string = ReactiveFormUtil.getFormControlPath(\n         DistributedSwitchesPageComponent.NET_CONFIG_FORM_GROUP,\n         DistributedSwitchesPageComponent.PG_FORM_GROUP);\n   readonly VMOTION_PG_CONTROL_NAME: string = Service.VMOTION;\n   readonly VSAN_PG_CONTROL_NAME: string = Service.VSAN;\n\n   static readonly VMOTION_PG_NAME_CONTROL_NAME: string = \"dvpgVmotionName\";\n   static readonly VSAN_PG_NAME_CONTROL_NAME: string = \"dvpgVsanName\";\n\n   static readonly VMOTION_PG_NAME: string = \"vMotion\";\n   static readonly VSAN_PG_NAME: string = \"vSAN\";\n\n   static readonly PG_DEFAULT_SWITCH: string = \"0\";\n\n   static readonly ADAPTERS_FORM_ARRAY: string = \"adaptersSection\";\n   static readonly ADAPTERS_FORM_ARRAY_PATH: string = ReactiveFormUtil.getFormControlPath(\n         DistributedSwitchesPageComponent.NET_CONFIG_FORM_GROUP,\n         DistributedSwitchesPageComponent.ADAPTERS_FORM_ARRAY);\n   static readonly ADAPTER_NOT_IN_USE: string = \"notInUse\";\n\n   static readonly DVS_TO_ADAPTER_ASSIGNMENT_VALIDATION: string = \"dvsToAdapterAssignmentValidation\";\n   static readonly DVS_LOCALLY_DUPLICATE_NAMES_VALIDATION: string = \"dvsLocalDuplicateNamesValidation\";\n   static readonly DVS_EXISTING_DUPLICATE_NAMES_VALIDATION: string = \"dvsExistingDuplicateNamesValidation\";\n   static readonly DVPG_LOCALLY_DUPLICATE_NAMES_VALIDATION: string = \"dvpgLocalDuplicateNamesValidation\";\n   static readonly DVPG_EXISTING_DUPLICATE_NAMES_VALIDATION: string = \"dvpgExistingDuplicateNamesValidation\";\n   private static readonly DVS_SERVICE_SEPARATOR: string = \"-\";\n   private static readonly DVS_SERVICE_WORD_SEPARATOR: string = \" \";\n\n   private readonly HCI_WIZARD_ROUTE_PATH: string = \"hciCluster_configureWizard/\";\n   private readonly EXISTING_DVS_SELECTOR_COMPONENT: string = \"existingDvsSelector\";\n   private readonly EXISTING_DVPG_SELECTOR_COMPONENT: string = \"existingDvpgSelector\";\n\n   @InputProperty()\n   private clusterRef: ManagedObject;\n\n   @InputProperty()\n   private pageControls: PageControls;\n\n   @InputProperty()\n   @OutputProperty()\n   clusterConfigData: ClusterConfigData;\n\n   @InputProperty()\n   private uniqueNewDvsNames: string[];\n\n   @InputProperty()\n   private existingDvsNames: string[];\n\n   @InputProperty()\n   private existingPgNames: string[];\n\n   @InputProperty()\n   physicalAdapters: HostAdapter[];\n\n   @InputProperty()\n   configureWizardData: ConfigureWizardData;\n\n   @OutputProperty()\n   private vmotionDvsName: string;\n\n   @OutputProperty()\n   private storageDvsName: string;\n\n   @OutputProperty()\n   vmotionDvpg: DvpgData;\n\n   @OutputProperty()\n   storageDvpg: DvpgData;\n\n   distributedSwitchesForm: FormGroup;\n   selectedExistingDvs: ExistingDvsData[] = [];\n   existingVmotionDvpg: ExistingDvpgData;\n   existingStorageDvpg: ExistingDvpgData;\n   showExistingVmotionButton: boolean = false;\n   showExistingVsanButton: boolean = false;\n   dvsNames: string[] = [];\n\n   constructor(\n         private formBuilder: FormBuilder,\n         public validator: DistributedSwitchesPageValidator,\n         private hciClusterService: HciClusterService,\n         private navigationService: NavigationService) {\n   }\n\n   ngOnInit(): void {\n      this.buildForm();\n      this.registerFormControlChangeHandlers();\n   }\n\n   private buildForm = (): void => {\n      const dvsFormArray: FormArray =\n            this.createDvsFormArray(DistributedSwitchesPageComponent.DVS_COUNT_DEFAULT_VALUE);\n\n      const controlsConfig: any = {};\n\n      if (this.clusterConfigData.basicConfig.drsEnabled) {\n         controlsConfig[this.VMOTION_PG_CONTROL_NAME] =\n               [DistributedSwitchesPageComponent.PG_DEFAULT_SWITCH, null];\n         controlsConfig[DistributedSwitchesPageComponent.VMOTION_PG_NAME_CONTROL_NAME] = [\n            this.getDvpgUniqueName(this.uniqueNewDvsNames[0], Service.VMOTION),\n            [Validators.required, Validators.maxLength(80), this.validateDuplicateDvpg],\n         ];\n      }\n\n      if (this.clusterConfigData.basicConfig.vsanEnabled) {\n         controlsConfig[this.VSAN_PG_CONTROL_NAME] =\n               [DistributedSwitchesPageComponent.PG_DEFAULT_SWITCH, null];\n         controlsConfig[DistributedSwitchesPageComponent.VSAN_PG_NAME_CONTROL_NAME] = [\n            this.getDvpgUniqueName(this.uniqueNewDvsNames[0], Service.VSAN),\n            [Validators.required, Validators.maxLength(80), this.validateDuplicateDvpg],\n         ];\n      }\n\n      const pgFormGroup: FormGroup = this.formBuilder.group(controlsConfig);\n\n      const adaptersFormGroups: FormGroup[] = [];\n      for (const physicalAdapter of this.physicalAdapters) {\n         adaptersFormGroups.push(this.formBuilder.group(\n               {\n                  [physicalAdapter.deviceName]:\n                        [DistributedSwitchesPageComponent.ADAPTER_NOT_IN_USE, null],\n               }));\n      }\n\n      const adaptersFormArray: FormArray = this.formBuilder.array(adaptersFormGroups);\n\n      const netConfigFormGroup: FormGroup = this.formBuilder.group({\n         [DistributedSwitchesPageComponent.DVS_COUNT_CONTROL_NAME]:\n               [DistributedSwitchesPageComponent.DVS_COUNT_DEFAULT_VALUE, [Validators.required]],\n         [DistributedSwitchesPageComponent.DVS_FORM_ARRAY]: dvsFormArray,\n         [DistributedSwitchesPageComponent.PG_FORM_GROUP]: pgFormGroup,\n         [DistributedSwitchesPageComponent.ADAPTERS_FORM_ARRAY]: adaptersFormArray,\n      });\n\n      this.distributedSwitchesForm = this.formBuilder.group({\n         [DistributedSwitchesPageComponent.OPT_OUT_OF_NET_CONFIG_CONTROL_NAME]:\n               [this.configureWizardData.optOutOfNetworking, [Validators.required]],\n         [DistributedSwitchesPageComponent.NET_CONFIG_FORM_GROUP]: netConfigFormGroup,\n      });\n\n      if (this.configureWizardData.optOutOfNetworking) {\n         this.disableNetworking(true);\n         if (this.configureWizardData.optOutOfNetworkingDisabled) {\n            this.optOutOfNetConfigControl.disable();\n         }\n      }\n\n      this.setDvsNames();\n   };\n\n   private registerFormControlChangeHandlers = (): void => {\n      this.optOutOfNetConfigControl.valueChanges.forEach(this.disableNetworking);\n      this.dvsCountControl.valueChanges.forEach(this.changeDvsCount);\n\n      this.pgFormControls.forEach((control) => {\n         control.valueChanges.forEach(this.validateDvsNameControls);\n      });\n\n      this.adapterFormControls.forEach((control) => {\n         control.valueChanges.forEach(this.validateDvsNameControls);\n      });\n\n      this.dvsNameControls.forEach((control) => {\n         control.valueChanges.forEach(() => this.pageControls.rebuildToc());\n      });\n\n      if (this.clusterConfigData.basicConfig.drsEnabled) {\n         this.vmotionPgNameFormControl.valueChanges.forEach(() => this.pageControls.rebuildToc());\n      }\n\n      if (this.clusterConfigData.basicConfig.vsanEnabled) {\n         this.vsanPgNameFormControl.valueChanges.forEach(() => this.pageControls.rebuildToc());\n      }\n   };\n\n   private validateDvsNameControls = (): void => {\n      ReactiveFormUtil.validateControls(this.dvsNameControls);\n      this.pageControls.rebuildToc();\n   };\n\n   private validateDvpgNameControls = (): void => {\n      if (this.clusterConfigData.basicConfig.drsEnabled) {\n         ReactiveFormUtil.validateControls([this.vmotionPgNameFormControl]);\n      }\n\n      if (this.clusterConfigData.basicConfig.vsanEnabled) {\n         ReactiveFormUtil.validateControls([this.vsanPgNameFormControl]);\n      }\n\n      this.pageControls.rebuildToc();\n   };\n\n   /** Form control getters */\n\n   get optOutOfNetConfigControl(): FormControl {\n      return this.distributedSwitchesForm.get(\n            DistributedSwitchesPageComponent.OPT_OUT_OF_NET_CONFIG_CONTROL_NAME) as FormControl;\n   }\n\n   get netConfigFormGroup(): FormGroup {\n      return this.distributedSwitchesForm.get(DistributedSwitchesPageComponent.NET_CONFIG_FORM_GROUP) as FormGroup;\n   }\n\n   get dvsCountControl(): FormControl {\n      return this.distributedSwitchesForm.get(DistributedSwitchesPageComponent.DVS_COUNT_CONTROL_PATH) as FormControl;\n   }\n\n   get dvsFormArray(): FormArray {\n      return this.distributedSwitchesForm.get(DistributedSwitchesPageComponent.DVS_FORM_ARRAY_PATH) as FormArray;\n   }\n\n   get dvsNameFormGroups(): FormGroup[] {\n      return this.dvsFormArray.controls as FormGroup[];\n   }\n\n   get dvsNameControls(): FormControl[] {\n      return this.dvsNameFormGroups.map((group) =>\n            group.get(DistributedSwitchesPageComponent.DVS_CONTROL_NAME) as FormControl);\n   }\n\n   getDvsNameControl = (idx: number): FormControl => {\n      const controlPath: string = ReactiveFormUtil.getFormControlPath(\n            DistributedSwitchesPageComponent.DVS_FORM_ARRAY_PATH,\n            idx.toString(),\n            DistributedSwitchesPageComponent.DVS_CONTROL_NAME);\n      return this.distributedSwitchesForm.get(controlPath) as FormControl;\n   };\n\n   get pgFormGroup(): FormGroup {\n      return this.distributedSwitchesForm.get(DistributedSwitchesPageComponent.PG_FORM_GROUP_PATH) as FormGroup;\n   }\n\n   get pgFormControls(): FormControl[] {\n      const controls: any = this.pgFormGroup.controls;\n      return Object.keys(controls).map((key) => controls[key]);\n   }\n\n   get adapterFormArray(): FormArray {\n      return this.distributedSwitchesForm.get(DistributedSwitchesPageComponent.ADAPTERS_FORM_ARRAY_PATH) as FormArray;\n   }\n\n   get adapterFormGroups(): FormGroup[] {\n      return this.adapterFormArray.controls as FormGroup[];\n   }\n\n   get adapterFormControls(): FormControl[] {\n      return this.adapterFormGroups\n            .map((group) => group.controls[Object.keys(group.controls)[0]] as FormControl);\n   }\n\n   get vmotionPgFormControl(): FormControl {\n      const controlPath: string = ReactiveFormUtil.getFormControlPath(\n            DistributedSwitchesPageComponent.NET_CONFIG_FORM_GROUP,\n            DistributedSwitchesPageComponent.PG_FORM_GROUP,\n            this.VMOTION_PG_CONTROL_NAME);\n      return this.distributedSwitchesForm.get(controlPath) as FormControl;\n   }\n\n   get vmotionPgNameFormControl(): FormControl {\n      const controlPath: string = ReactiveFormUtil.getFormControlPath(\n            DistributedSwitchesPageComponent.NET_CONFIG_FORM_GROUP,\n            DistributedSwitchesPageComponent.PG_FORM_GROUP,\n            DistributedSwitchesPageComponent.VMOTION_PG_NAME_CONTROL_NAME);\n      return this.distributedSwitchesForm.get(controlPath) as FormControl;\n   }\n\n   get vsanPgFormControl(): FormControl {\n      const controlPath: string = ReactiveFormUtil.getFormControlPath(\n            DistributedSwitchesPageComponent.NET_CONFIG_FORM_GROUP,\n            DistributedSwitchesPageComponent.PG_FORM_GROUP,\n            this.VSAN_PG_CONTROL_NAME);\n      return this.distributedSwitchesForm.get(controlPath) as FormControl;\n   }\n\n   get vsanPgNameFormControl(): FormControl {\n      const controlPath: string = ReactiveFormUtil.getFormControlPath(\n            DistributedSwitchesPageComponent.NET_CONFIG_FORM_GROUP,\n            DistributedSwitchesPageComponent.PG_FORM_GROUP,\n            DistributedSwitchesPageComponent.VSAN_PG_NAME_CONTROL_NAME);\n      return this.distributedSwitchesForm.get(controlPath) as FormControl;\n   }\n\n   /** Form control properties getters */\n\n   get maxDvsCount(): number {\n      return Math.min(DistributedSwitchesPageComponent.NET_MAX_COUNT, this.physicalAdapters.length);\n   }\n\n   get dvsCountOptions(): number[] {\n      // creates array of type [1, ..., dvsCount]\n      return Array.from(new Array(this.maxDvsCount), (value, index) => index + 1);\n   }\n\n   get dvsCount(): number {\n      return Number(this.dvsCountControl.value);\n   }\n\n   get dvsFormValues(): string[] {\n      const dvsFormGroups: FormGroup[] = this.dvsFormArray.controls as FormGroup[];\n      return dvsFormGroups\n            .map((group) => group.get(DistributedSwitchesPageComponent.DVS_CONTROL_NAME).value)\n            .filter((name) => !!name);\n   }\n\n   // used to reduce the watchers in the component.\n   setDvsNames(): void {\n      this.dvsNames = this.dvsFormValues;\n   }\n\n   get netConfigDisabled(): boolean {\n      return this.optOutOfNetConfigControl.value;\n   }\n\n   get localDuplicateDvsNames(): string[] {\n      return this.dvsFormValues.sort().filter((element, index, array) => array.indexOf(element) !== index);\n   }\n\n   getDvsPortGroupsCount = (dvsIndex: number): number => {\n      return this.pgFormControls.filter((control) => control.value === String(dvsIndex)).length;\n   };\n\n   getDvsUplinksCount = (dvsIndex: number): number => {\n      return this.adapterFormControls.filter((control) => control.value === String(dvsIndex)).length;\n   };\n\n   getExistingDvsSelected = (): boolean => {\n      return this.selectedExistingDvs && this.selectedExistingDvs.some(dvs => dvs && !!dvs.name);\n   };\n\n   getExistingDvsWarning(): string {\n      let warning: string = VsanUiUtils.getString(\n            \"vsan.cluster.hci.configureHciCluster.wizard.dvsConfig.existingDvsWarning\");\n\n      if (this.clusterConfigData.basicConfig.vsanEnabled\n            && this.selectedExistingDvs.some(dvs => dvs && dvs.name === this.getStorageDvsName())) {\n         warning = warning.concat(VsanUiUtils.getString(\n               \"vsan.cluster.hci.configureHciCluster.wizard.dvsConfig.existingDvsVsanWarning\"));\n      }\n\n      return warning;\n   }\n\n   /** Form validation */\n\n   private validateDuplicateDvsNames = (dvsFormArray: FormArray): { [key: string]: any } | null => {\n      if (!dvsFormArray.parent) {\n         return null;\n      }\n\n      // check for local duplicates only if there are more than one DVSes\n      if (this.dvsCount > 1 && this.localDuplicateDvsNames.length) {\n         return {\n            [DistributedSwitchesPageComponent.DVS_LOCALLY_DUPLICATE_NAMES_VALIDATION]: {\n               valid: false,\n               duplicateNames: this.localDuplicateDvsNames,\n            },\n         };\n      }\n\n      let duplicateNames: string[] =\n            this.dvsFormValues.filter((element) => this.existingDvsNames.indexOf(element) !== -1);\n\n      if (this.selectedExistingDvs && this.selectedExistingDvs.length) {\n         duplicateNames = duplicateNames.filter((element) => {\n            return this.selectedExistingDvs.map((elem) => elem ? elem.name : \"\").indexOf(element) === -1;\n         });\n      }\n\n      if (duplicateNames.length) {\n         return {\n            [DistributedSwitchesPageComponent.DVS_EXISTING_DUPLICATE_NAMES_VALIDATION]: {\n               valid: false,\n               duplicateNames: duplicateNames,\n            },\n         };\n      }\n\n      return null;\n   };\n\n   private validateDuplicateDvpg = (dvpgNameControl: AbstractControl): { [key: string]: any } | null => {\n      if (!this.existingPgNames || !dvpgNameControl || !dvpgNameControl.parent) {\n         return null;\n      }\n\n      if ((this.existingVmotionDvpg && this.existingVmotionDvpg.name === dvpgNameControl.value) ||\n            (this.existingStorageDvpg && this.existingStorageDvpg.name === dvpgNameControl.value)) {\n         return null;\n      }\n\n      if (this.getVmotionDvpgName() === this.getStorageDvpgName()) {\n         return {\n            [DistributedSwitchesPageComponent.DVPG_LOCALLY_DUPLICATE_NAMES_VALIDATION]: {\n               valid: false,\n            },\n         };\n      }\n\n      return !this.existingPgNames.includes(dvpgNameControl.value.trim()) ? null : {\n         [DistributedSwitchesPageComponent.DVPG_EXISTING_DUPLICATE_NAMES_VALIDATION]: {\n            valid: false,\n         },\n      };\n   };\n\n   private validateAssignment = (dvsNameFormControl: FormControl): { [key: string]: any } | null => {\n      // validators are run before wiring the form\n      if (!dvsNameFormControl.parent) {\n         return null;\n      }\n\n      const groupIndex: number = this.getDvsNameGroupIndex(dvsNameFormControl.parent as FormGroup);\n\n      const result: any = {};\n      const assignedAdapters: FormControl[] = this.adapterFormControls.filter(\n            (control) => control.value === String(groupIndex));\n      if (!assignedAdapters.length) {\n         result[DistributedSwitchesPageComponent.DVS_TO_ADAPTER_ASSIGNMENT_VALIDATION] = {valid: false};\n      }\n\n      return result;\n   };\n\n   private getDvsNameGroupIndex = (formGroup: FormGroup): number => {\n      const array: FormArray = formGroup.parent as FormArray;\n      for (let idx: number = 0; idx < array.controls.length; idx++) {\n         if (array.at(idx) === formGroup) {\n            return idx;\n         }\n      }\n\n      Logger.error(\"Controls configuration problem, \");\n   };\n\n   private disableNetworking = (optOutOfNetConfig: boolean) => {\n      this.configureWizardData.optOutOfNetworking = optOutOfNetConfig;\n      if (optOutOfNetConfig) {\n         this.netConfigFormGroup.disable();\n      } else {\n         this.netConfigFormGroup.enable();\n      }\n\n      this.pageControls.rebuildToc();\n   };\n\n   private changeDvsCount = (dvsCount: number): void => {\n      const dvsFormArray: FormArray =\n            this.createDvsFormArray(dvsCount, this.dvsFormValues);\n      const netSettingsFormGroup: FormGroup =\n            this.distributedSwitchesForm.get(DistributedSwitchesPageComponent.NET_CONFIG_FORM_GROUP) as FormGroup;\n      netSettingsFormGroup.setControl(DistributedSwitchesPageComponent.DVS_FORM_ARRAY, dvsFormArray);\n\n      // DVSes are reduced - resetting the selections that are no valid any more\n      if (dvsCount < this.maxDvsCount) {\n         const highestDvsIndex: number = dvsCount - 1;\n         this.setPortGroupsDvs(String(0), highestDvsIndex);\n         this.setAdaptorsDvs(DistributedSwitchesPageComponent.ADAPTER_NOT_IN_USE, highestDvsIndex);\n         this.selectedExistingDvs = this.selectedExistingDvs.slice(0, dvsCount);\n      }\n\n      this.dvsNameControls.forEach((control) => {\n         control.valueChanges.forEach(() => this.pageControls.rebuildToc());\n      });\n\n      this.setDvsNames();\n\n      this.pageControls.rebuildToc();\n   };\n\n   private setPortGroupsDvs = (newDvsName: string, marginDvsName: number): void => {\n      const controls: any = this.pgFormGroup.controls;\n      Object.keys(controls)\n            .map((key) => controls[key])\n            .map((control) => {\n               if (+control.value > +marginDvsName) {\n                  control.setValue(newDvsName);\n               }\n            });\n   };\n\n   private setAdaptorsDvs = (newDvsName: string, marginDvsName: number): void => {\n      this.adapterFormGroups.map((group) => {\n         const control: FormControl = group.controls[Object.keys(group.controls)[0]] as FormControl;\n         if (+control.value > +marginDvsName) {\n            control.setValue(newDvsName);\n         }\n      });\n   };\n\n   private createDvsFormArray = (dvsCount: number, dvsNames?: string[]): FormArray => {\n      const dvsFormGroups: FormGroup[] = [];\n      let existingDvsSelected: number = 0;\n      for (let idx: number = 0; idx < dvsCount; idx++) {\n         let dvsName: string;\n         let isExistingDvs: boolean;\n         if (this.selectedExistingDvs[idx]) {\n            dvsName = this.selectedExistingDvs[idx].name;\n            existingDvsSelected++;\n            isExistingDvs = true;\n         } else if (dvsNames && dvsNames.length > idx) {\n            dvsName = this.dvsFormValues[idx];\n         } else {\n            dvsName = this.uniqueNewDvsNames[idx - existingDvsSelected];\n         }\n\n         const validators: any[] = isExistingDvs ? [] : [\n            this.validateAssignment,\n            Validators.required,\n            Validators.maxLength(80),\n         ];\n\n         dvsFormGroups.push(\n               this.formBuilder.group({\n                  [DistributedSwitchesPageComponent.DVS_CONTROL_NAME]: [dvsName, validators],\n               }),\n         );\n      }\n\n      return this.formBuilder.array(dvsFormGroups, this.validateDuplicateDvsNames);\n   };\n\n   private getVmotionDvsName = (): string => {\n      return this.vmotionPgFormControl && this.vmotionPgFormControl.value ?\n            this.getDvsNameControl(this.vmotionPgFormControl.value).value : \"\";\n   };\n\n   private getStorageDvsName = (): string => {\n      return this.vsanPgFormControl && this.vsanPgFormControl.value\n            ? this.getDvsNameControl(this.vsanPgFormControl.value).value : \"\";\n   };\n\n   private getVmotionDvpgName = (): string => {\n      return this.vmotionPgNameFormControl ? this.vmotionPgNameFormControl.value : \"\";\n   };\n\n   private getStorageDvpgName = (): string => {\n      return this.vsanPgNameFormControl ? this.vsanPgNameFormControl.value : \"\";\n   };\n\n   validate(): string[] | Promise<string[]> {\n      const dvsAssignmentErrors: string[] =\n            this.validator.getDvsAssignmentErrors(this.dvsNameControls);\n\n      if (dvsAssignmentErrors.length) {\n         return dvsAssignmentErrors;\n      }\n\n      if (!this.configureWizardData.optOutOfNetworking) {\n         const hasInvalidDvsName: boolean = this.dvsNameControls\n               .some(control => this.validator.invalidDvsNameControl(control));\n         ReactiveFormUtil.validateAllFormFields(this.distributedSwitchesForm);\n         if (this.distributedSwitchesForm.invalid || hasInvalidDvsName) {\n            return [\n               VsanUiUtils.getString(\"vsan.cluster.hci.configureHciCluster.wizard.networking.notAcceptableErrors\"),\n            ];\n         }\n         return this.validatePermissions();\n      }\n\n      return this.populateSpec();\n   }\n\n   private validatePermissions(): Promise<any> {\n      const permissionPromises: Promise<any>[] = [];\n\n      // check permissions for creating new DVS/DVPG\n      const checkDvsCreatePermission: boolean = this.dvsFormValues\n            .some((dvsName) => {\n               return !this.selectedExistingDvs.some(dvs => dvs && dvs.name === dvsName);\n            });\n\n      const checkDvpgCreatePermission: boolean =\n            (this.clusterConfigData.basicConfig.drsEnabled && !this.existingVmotionDvpg)\n            || (this.clusterConfigData.basicConfig.vsanEnabled && !this.existingStorageDvpg);\n      if (checkDvsCreatePermission || checkDvpgCreatePermission) {\n         permissionPromises.push(this.hciClusterService.hasNetworkingCreatePermissions(\n               this.clusterRef, checkDvsCreatePermission, checkDvpgCreatePermission));\n      }\n\n      // check permissions for existing DVS/DVPG\n      if ((this.selectedExistingDvs && this.selectedExistingDvs.length)\n            || this.existingStorageDvpg || this.existingVmotionDvpg) {\n         // get selected existing dvsMors\n         const dvsMors: ManagedObject[] = this.selectedExistingDvs.filter(dvs => !!dvs).map(dvs => dvs.dvsRef);\n         const dvpgMors: ManagedObject[] = this.existingStorageDvpg ? [this.existingStorageDvpg.dvpgRef] : [];\n         if (this.existingVmotionDvpg) {\n            dvpgMors.push(this.existingVmotionDvpg.dvpgRef);\n         }\n\n         permissionPromises.push(this.hciClusterService.hasNetworkingModifyPermissions(dvsMors, dvpgMors));\n      }\n\n      return Promise.all(permissionPromises).then((result) => {\n         // if any permission is not granted, show error\n         if (result && result.length && (result[0] === false || result[1] === false)) {\n            return [VsanUiUtils.getString(\n                  \"vsan.cluster.hci.configureHciCluster.wizard.dvsConfig.permissionErrorMessage\")];\n         }\n\n         return this.populateSpec();\n      });\n   }\n\n   private populateSpec = async (): Promise<string[]> => {\n      // prepare output parameters\n      if (this.clusterConfigData.basicConfig.drsEnabled) {\n         this.vmotionDvsName = this.getVmotionDvsName();\n         if (this.existingVmotionDvpg) {\n            this.vmotionDvpg = DvpgData.Factory.create(this.existingVmotionDvpg.name, this.existingVmotionDvpg.dvpgRef);\n         } else {\n            this.vmotionDvpg = DvpgData.Factory.create(this.getVmotionDvpgName(), null);\n         }\n      }\n\n      if (this.clusterConfigData.basicConfig.vsanEnabled) {\n         this.storageDvsName = this.getStorageDvsName();\n         if (this.existingStorageDvpg) {\n            this.storageDvpg = DvpgData.Factory.create(this.existingStorageDvpg.name, this.existingStorageDvpg.dvpgRef);\n         } else {\n            this.storageDvpg = DvpgData.Factory.create(this.getStorageDvpgName(), null);\n         }\n      }\n\n      // fill the cluster configure spec\n      this.clusterConfigData.optOutOfNetConfig = this.configureWizardData.optOutOfNetworking;\n      if (!this.configureWizardData.optOutOfNetworking) {\n         this.clusterConfigData.dvsSpecs = this.dvsFormArray.controls.map((group, idx) => {\n            const control: FormControl = group.get(DistributedSwitchesPageComponent.DVS_CONTROL_NAME) as FormControl;\n            const dvsMor: ManagedObject | null =\n                  this.selectedExistingDvs[idx] ? this.selectedExistingDvs[idx].dvsRef : null;\n            return DvsSpec.Factory.create(\n                  control.value,\n                  this.getDvsServices(idx),\n                  this.getDvsHostAdapters(idx),\n                  dvsMor);\n         });\n\n         const validationMessages: string[] = await this.hciClusterService\n               .validateNetworkSpecification(this.clusterRef, this.clusterConfigData);\n         // Empty array is considered as invalid validation result\n         return validationMessages?.length ? validationMessages : null;\n      }\n\n      return null;\n   };\n\n   private getDvsServices = (dvsIdx: number): Service[] => {\n      const controls: any = this.pgFormGroup.controls;\n      return Object.keys(controls)\n            .filter((key) => (controls[key].value) === String(dvsIdx))\n            .map((key) => key as Service);\n   };\n\n   private getDvsHostAdapters = (dvsIdx: number): HostAdapter[] => {\n      const groups: FormGroup[] = this.adapterFormGroups;\n      return groups\n            .map((group) => {\n               const controlsObject: { [key: string]: AbstractControl } = group.controls;\n               const deviceName: string = Object.keys(controlsObject)[0];\n               const hostAdapter: HostAdapter = this.getHostAdapter(deviceName);\n               if (controlsObject[deviceName].value === String(dvsIdx)) {\n                  hostAdapter.dvsName = this.getDvsNameControl(controlsObject[deviceName].value).value;\n                  return hostAdapter;\n               }\n\n               return null;\n            })\n            .filter((element) => element != null);\n   };\n\n   private getHostAdapter = (deviceName: string): HostAdapter => {\n      return this.physicalAdapters.find((adapter) => adapter.deviceName === deviceName);\n   };\n\n   navigateToVvd(): void {\n      this.navigationService.navigateToVmwareCom(DistributedSwitchesPageComponent.VVD_ROUTE);\n   }\n\n   onVmotionDvsChange(dvsIdx: number): void {\n      const dvsName: string = this.getDvsNameControl(dvsIdx).value;\n      this.existingVmotionDvpg = null;\n      this.showExistingVmotionButton = this.selectedExistingDvs.some(dvs => dvs && dvs.name === dvsName);\n      this.vmotionPgNameFormControl.setValue(this.getDvpgUniqueName(dvsName, Service.VMOTION));\n   }\n\n   onVsanDvsChange(dvsIdx: number): void {\n      const dvsName: string = this.getDvsNameControl(dvsIdx).value;\n      this.existingStorageDvpg = null;\n      this.showExistingVsanButton = this.selectedExistingDvs.some(dvs => dvs && dvs.name === dvsName);\n      this.vsanPgNameFormControl.setValue(this.getDvpgUniqueName(dvsName, Service.VSAN));\n   }\n\n   populateDvpgName = (dvsName: string, showExistingButton?: boolean) => {\n      if (dvsName === this.getVmotionDvsName() && this.vmotionPgNameFormControl) {\n         this.showExistingVmotionButton = showExistingButton;\n         this.vmotionPgNameFormControl.setValue(this.getDvpgUniqueName(dvsName, Service.VMOTION));\n      }\n\n      if (dvsName === this.getStorageDvsName() && this.vsanPgNameFormControl) {\n         this.showExistingVsanButton = showExistingButton;\n         this.vsanPgNameFormControl.setValue(this.getDvpgUniqueName(dvsName, Service.VSAN));\n      }\n\n      this.setDvsNames();\n   };\n\n   openExistingDvsDialog(dvsIdx: number): void {\n      const dvsName: string = this.selectedExistingDvs && this.selectedExistingDvs[dvsIdx]\n            ? this.selectedExistingDvs[dvsIdx].name : \"\";\n      new ModalBuilder(this.HCI_WIZARD_ROUTE_PATH + this.EXISTING_DVS_SELECTOR_COMPONENT)\n            .setSize(800, 450)\n            .open({\n               clusterRef: this.clusterRef,\n               selectedExistingDvsName: dvsName,\n               selectedDvsNames: this.selectedExistingDvs.map(dvs => dvs ? dvs.name : \"\"),\n            })\n            .then((existingDvsSelection: ExistingDvsData | null): void => {\n               if (this.getVmotionDvsName() === dvsName) {\n                  this.existingVmotionDvpg = null;\n               }\n\n               if (this.getStorageDvsName() === dvsName) {\n                  this.existingStorageDvpg = null;\n               }\n\n               if (existingDvsSelection && this.selectedExistingDvs.indexOf(existingDvsSelection) === -1) {\n                  this.selectedExistingDvs[dvsIdx] = existingDvsSelection;\n                  const newDvsName: string = existingDvsSelection.name;\n                  this.dvsNameControls[dvsIdx].setValue(newDvsName);\n                  this.populateDvpgName(newDvsName, true);\n               } else if (!existingDvsSelection) {\n                  this.selectedExistingDvs[dvsIdx] = null;\n                  const newDvsName: string = this.uniqueNewDvsNames.find((el) => this.dvsFormValues.indexOf(el) === -1);\n                  this.dvsNameControls[dvsIdx].setValue(newDvsName);\n                  this.populateDvpgName(newDvsName, false);\n               }\n\n               this.setDvsNames();\n            });\n   }\n\n   openExistingDvpgVmotionDialog(): void {\n      const existingDvs: ExistingDvsData = this.selectedExistingDvs.find(dvs => dvs\n            && dvs.name === this.getVmotionDvsName());\n\n      const networkName: string = this.existingVmotionDvpg && this.existingVmotionDvpg.name\n            ? this.existingVmotionDvpg.name : \"\";\n\n      const dialogPromise: Promise<ExistingDvpgData | null> =\n            this.openExistingDvpgDialog(existingDvs.dvsRef, networkName);\n\n      dialogPromise.then((existingDvpgSelection: ExistingDvpgData | null): void => {\n         this.existingVmotionDvpg = existingDvpgSelection;\n         if (existingDvpgSelection) {\n            this.vmotionPgNameFormControl.setValue(this.existingVmotionDvpg.name);\n         } else {\n            this.populateDvpgName(existingDvs.name, true);\n         }\n\n         this.validateDvpgNameControls();\n      });\n   }\n\n   openExistingDvpgVsanDialog(): void {\n      const existingDvs: ExistingDvsData = this.selectedExistingDvs.find(dvs => dvs\n            && dvs.name === this.getStorageDvsName());\n\n      const networkName: string = this.existingStorageDvpg && this.existingStorageDvpg.name\n            ? this.existingStorageDvpg.name : \"\";\n\n      const dialogPromise: Promise<ExistingDvpgData | null> =\n            this.openExistingDvpgDialog(existingDvs.dvsRef, networkName);\n\n      dialogPromise.then((existingDvpgSelection: ExistingDvpgData | null): void => {\n         this.existingStorageDvpg = existingDvpgSelection;\n         if (existingDvpgSelection) {\n            this.vsanPgNameFormControl.setValue(this.existingStorageDvpg.name);\n         } else {\n            this.populateDvpgName(existingDvs.name, true);\n         }\n\n         this.validateDvpgNameControls();\n      });\n   }\n\n   private getDvpgUniqueName(dvsName: string, service: Service): string {\n      return StringUtil.createUniqueIndexedString(\n            this.existingPgNames,\n            this.getDefaultDvpgName(service, dvsName),\n            DistributedSwitchesPageComponent.DVS_SERVICE_WORD_SEPARATOR);\n   }\n\n   private openExistingDvpgDialog(\n         dvsRef: ManagedObject, selectedExistingDvpgName: string): Promise<ExistingDvpgData | null> {\n      return new ModalBuilder(this.HCI_WIZARD_ROUTE_PATH + this.EXISTING_DVPG_SELECTOR_COMPONENT)\n            .setSize(800, 450)\n            .open({\n               dvsRef: dvsRef,\n               selectedExistingDvpgName: selectedExistingDvpgName,\n            });\n   }\n\n   private getDefaultDvpgName(service: Service, dvsName: string): string {\n      let dvpgName: string = dvsName + DistributedSwitchesPageComponent.DVS_SERVICE_SEPARATOR;\n      switch (service) {\n         case Service.VSAN:\n            dvpgName += DistributedSwitchesPageComponent.VSAN_PG_NAME;\n            break;\n         case Service.VMOTION:\n            dvpgName += DistributedSwitchesPageComponent.VMOTION_PG_NAME;\n            break;\n      }\n\n      return dvpgName;\n   }\n}\n","/* Copyright 2018-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Injectable} from \"@angular/core\";\nimport {IdGenerator} from \"@util/id-generator\";\nimport {WebPlatform} from \"@util/platform\";\nimport {CookieService} from \"ngx-cookie-service\";\nimport {HttpClient, HttpHeaders} from \"@angular/common/http\";\nimport {DataAccessService} from \"@service/data-access.service\";\nimport {ManagedObject} from \"@service/managed-object\";\nimport {Logger} from \"@util/logger\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {ConfigureWizardData} from \"@generated/configure-wizard-data\";\nimport {ClusterConfigData} from \"@generated/cluster-config-data\";\nimport {ExternalProxySettingsConfig} from \"@generated/external-proxy-settings-config\";\nimport {NetworkProxyService} from \"@service/vapi/network-proxy.service\";\nimport {CeipService} from \"@generated/ceip-service\";\n\n// TODO [kaleksandrov] Remove cookie-service and start using CookieAdapter\n@Injectable()\nexport class SupportInsightConfigurationService {\n   private static readonly CEIP_URL: string = WebPlatform.webContextPath + \"/../ceip-ui/ctrl/ceip/status/\";\n   private static readonly VSPHERE_UI_XSRF_TOKEN_HEADER: string = \"X-VSPHERE-UI-XSRF-TOKEN\";\n   private static readonly VSPHERE_UI_XSRF_TOKEN_COOKIE: string = \"VSPHERE-UI-XSRF-TOKEN\";\n\n   constructor(private http: HttpClient,\n         private networkProxyService: NetworkProxyService,\n         private ceipService: CeipService,\n         private cookieService: CookieService) {\n   }\n\n   async configureSupportInsight(configureWizardData: ConfigureWizardData,\n         clusterConfigData: ClusterConfigData): Promise<void> {\n      const promises: Promise<any>[] = [];\n      const clusterRef: ManagedObject = ManagedObject.contextObject;\n\n      if (clusterConfigData.basicConfig.vsanEnabled\n            && !configureWizardData.ceipEnabled\n            && !configureWizardData.disableSupportInsight) {\n         promises.push(this.joinCeip());\n      }\n      if (!configureWizardData.disableSupportInsight\n            && configureWizardData.proxySettingsConfig?.hostName) {\n         promises.push(this.saveProxySettings(configureWizardData.proxySettingsConfig));\n      }\n      if (configureWizardData.isSupportInsightStepHidden) {\n         promises.push(this.ceipService.hideSupportInsightStep(clusterRef));\n      }\n\n      try {\n         if (promises.length > 0) {\n            await Promise.all(promises);\n         }\n         return;\n\n      } catch (err) {\n         Logger.error(\"Faild to configure vSAN Support Insight.\", err);\n         return Promise.reject(err);\n      }\n   }\n\n   private joinCeip(): Promise<void> {\n      const dataUrl: string = SupportInsightConfigurationService.CEIP_URL + true;\n      return this.doRequest(dataUrl, HTTP_METHOD.PUT, null, this.prepareCeipHeader());\n   }\n\n   /**\n    * To enable/disable the ceip service successfully via the REST API, this xsrf token is required\n    */\n   private prepareCeipHeader(): { headers: HttpHeaders } {\n      const options: { headers: HttpHeaders } = DataAccessService.getDsRequestOptions();\n      const xsrfToken: string =\n            this.cookieService.get(SupportInsightConfigurationService.VSPHERE_UI_XSRF_TOKEN_COOKIE);\n      options.headers =\n            options.headers.append(SupportInsightConfigurationService.VSPHERE_UI_XSRF_TOKEN_HEADER, xsrfToken);\n      return options;\n   }\n\n   /**\n    * Save the VC proxy settings for https connection to be used by Support Insight service\n    */\n   private saveProxySettings(proxySettings: ExternalProxySettingsConfig): Promise<void> {\n      return this.networkProxyService.updateSettings(ManagedObject.contextObject, true, proxySettings.hostName,\n            proxySettings.port, proxySettings.userName, proxySettings.password)\n            .catch(err => Logger.error(\"Failed to save VC proxy settings\", err));\n   }\n\n   private doRequest = (dataUrl: string,\n         httpMethod: HTTP_METHOD,\n         body?: any,\n         opts?: { headers: HttpHeaders }): Promise<any> => {\n      opts = opts || DataAccessService.getDsRequestOptions();\n      return new Promise<any>((accept, reject) => {\n         const date: Date = new Date();\n         const time: number = date.getTime();\n         const requestId: string = IdGenerator.getUniqueRequestId();\n         Logger.debug(requestId + \" [\" + date.toLocaleString() + \"]\", dataUrl);\n\n         const encodedDataUrl: string = encodeURI(dataUrl);\n         let promise: Promise<any> = null;\n         switch (httpMethod) {\n            case HTTP_METHOD.GET:\n               promise = this.http.get(encodedDataUrl, opts).toPromise();\n               break;\n            case HTTP_METHOD.PUT:\n               let requestJson: string;\n               if (body) {\n                  requestJson = JSON.stringify(body);\n               }\n               promise = this.http.put(encodedDataUrl, requestJson, opts).toPromise();\n               break;\n            case HTTP_METHOD.POST:\n               promise = this.http.post(encodedDataUrl, null, opts).toPromise();\n               break;\n            default:\n               const error: string = \"Invalid request found: \" + httpMethod;\n               Logger.warn(error);\n               reject(error);\n         }\n         if (promise) {\n            promise.then((r) => {\n               const duration: number = new Date().getTime() - time;\n               Logger.debug(requestId + \" [\" + duration + \"ms]:\", r);\n               accept(r);\n            }).catch((error) => {\n               Logger.error(requestId + \":\", error);\n               reject(error.message ? error.message : VsanUiUtils.getString(\"vsan.common.error.taskError\"));\n            });\n         }\n      });\n   };\n}\n\nexport enum HTTP_METHOD {\n   GET, PUT, POST,\n}\n","<!--Copyright 2017-2021 VMware, Inc. All rights reserved. -- VMware Confidential-->\n<form class=\"clr-form clr-form-compact\" [formGroup]=\"distributedSwitchesForm\">\n   <div id=\"dvs-page-description\">\n      {{\"vsan.cluster.hci.configureHciCluster.wizard.dvsConfig.distributedSwitchesPage.info\" | localized:\n         (\"vsan.cluster.hci.configureHciCluster.wizard.dvsConfig.distributedSwitchesPage.vvdLabel\" | localized)}}\n      <a id=\"vvd-link\" href=\"javascript://\" (click)=\"navigateToVvd()\">\n         {{\"vsan.cluster.hci.configureHciCluster.wizard.dvsConfig.distributedSwitchesPage.vvdLabel\" | localized}}\n      </a>\n   </div>\n   <div id=\"disable-net-config-settings-container\" class=\"clr-form-control\">\n      <div class=\"clr-checkbox-wrapper\">\n         <input id=\"optOutOfNetworking\"\n                class=\"clr-checkbox\"\n                formControlName=\"optOutOfNetworking\"\n                [vsan-disable-form-control]=\"configureWizardData.optOutOfNetworkingDisabled\"\n                type=\"checkbox\">\n         <label id=\"opt-out-of-net-config-label\" for=\"optOutOfNetworking\">\n            {{\"vsan.cluster.hci.configureHciCluster.wizard.dvsConfig.optOutOfNetConfigLabel\" | localized}}\n         </label>\n         <clr-signpost\n               [vsan-signpost-title]=\"'vsan.cluster.hci.configureHciCluster.wizard.dvsConfig.optOutOfNetConfigLabel.signpost.label' | localized\">\n            <clr-signpost-content *clrIfOpen clrPosition=\"bottom-right\">\n               <span id=\"opt-out-of-net-config-info-label\">\n                  {{\"vsan.cluster.hci.configureHciCluster.wizard.dvsConfig.optOutOfNetConfig.info\" | localized}}\n               </span>\n            </clr-signpost-content>\n         </clr-signpost>\n      </div>\n   </div>\n   <div formGroupName=\"netConfigSection\"\n        class=\"settings-container\"\n        [ngClass]=\"{'disable-action':netConfigDisabled}\">\n      <h4 id=\"dvs-label\">\n         {{\"vsan.cluster.hci.configureHciCluster.wizard.dvsConfig.distributedSwitchesLabel\" | localized}}\n      </h4>\n      <div class=\"clr-form-control clr-row\">\n         <label id=\"physical-networks-count-label\"\n                for=\"physicalNetworksCount\"\n                class=\"clr-control-label clr-col-4\">\n            {{\"vsan.cluster.hci.configureHciCluster.wizard.dvsConfig.physicalNetworksNumberLabel\" | localized}}\n         </label>\n         <div class=\"clr-control-container clr-col-8\">\n            <div class=\"clr-select-wrapper\">\n               <select id=\"physicalNetworksCount\"\n                       formControlName=\"physicalNetworksCount\"\n                       class=\"clr-select\">\n                  <option *ngFor=\"let option of dvsCountOptions\" value=\"{{option}}\">\n                     {{option}}\n                  </option>\n               </select>\n            </div>\n            <clr-signpost for=\"physicalNetworksCount\">\n               <clr-signpost-content *clrIfOpen clrPosition=\"bottom-right\">\n                  <span id=\"physical-networks-count-info\">\n                     {{\"vsan.cluster.hci.configureHciCluster.wizard.dvsConfig.physicalNetworksNumber.info\" | localized}}\n                  </span>\n               </clr-signpost-content>\n            </clr-signpost>\n         </div>\n      </div>\n      <ng-container formArrayName=\"switchesSection\">\n         <div id=\"dvs-description\">\n            {{\"vsan.cluster.hci.configureHciCluster.wizard.dvsConfig.distributedSwitchesDescription\" | localized}}\n         </div>\n         <div class=\"clr-row\">\n            <div id=\"dvs-name-header\" class=\"clr-col-7 grid-header\">\n               {{\"vsan.cluster.hci.configureHciCluster.wizard.dvsConfig.nameLabel\" | localized}}\n            </div>\n            <div id=\"dvs-port-groups-header\" class=\"clr-col-2 grid-header center-text\">\n               {{\"vsan.cluster.hci.configureHciCluster.wizard.dvsConfig.portGroupsLabel\" | localized}}\n            </div>\n            <div id=\"dvs-uplinks-header\" class=\"clr-col-2 grid-header center-text\">\n               {{\"vsan.cluster.hci.configureHciCluster.wizard.dvsConfig.uplinksLabel\" | localized}}\n            </div>\n         </div>\n         <div class=\"clr-form-control clr-row\"\n              role=\"group\"\n              aria-labelledby=\"dvs-label\"\n              *ngFor=\"let switchBoxFormGroup of dvsNameFormGroups; let idx = index\"\n              [formGroup]=\"switchBoxFormGroup\">\n            <div class=\"clr-control-container clr-col-3 error-control\"\n                 [ngClass]=\"{'clr-error':validator.invalidDvsNameControl(getDvsNameControl(idx))}\">\n               <div *ngIf=\"selectedExistingDvs[idx]\" id=\"existing-dvsName-{{idx}}\" vsan-show-title>\n                  {{selectedExistingDvs[idx].name}}\n               </div>\n               <div class=\"clr-input-wrapper\" *ngIf=\"!selectedExistingDvs[idx]\">\n                  <input id=\"dvsName-{{idx}}\"\n                         formControlName=\"switch\"\n                         required\n                         max=\"80\"\n                         (blur)=\"populateDvpgName(getDvsNameControl(idx)?.value)\"\n                         class=\"clr-input\"\n                         [attr.aria-describedby]=\"'dvs-name-error-'+idx\"\n                         [attr.aria-label]=\"'vsan.cluster.hci.configureHciCluster.wizard.dvsConfig.nameAriaLabel'|localized: idx\"/>\n                  <clr-icon class=\"clr-validate-icon\"\n                            shape=\"exclamation-circle\"\n                            title=\"{{'vsan.common.srMessage.error' | localized}}\"\n                            [attr.aria-label]=\"'vsan.common.srMessage.error' | localized\">\n                  </clr-icon>\n               </div>\n               <span class=\"clr-subtext\" id=\"dvs-name-error-{{idx}}\">\n                  {{validator.getDvsNameControlErrors(getDvsNameControl(idx))}}\n               </span>\n            </div>\n            <button id=\"hci-distributed-switches-existing-button-{{idx}}\"\n                    class=\"btn btn-link clr-col-4\"\n                    (click)=\"openExistingDvsDialog(idx)\">\n               {{(selectedExistingDvs[idx]\n                  ? \"vsan.cluster.hci.configureHciCluster.wizard.dvsConfig.changeExistingNetworkButtonLabel\"\n                  : \"vsan.cluster.hci.configureHciCluster.wizard.dvsConfig.existingNetworkButtonLabel\") | localized}}\n            </button>\n            <div class=\"clr-col-2 center-text\">\n               <div id=\"dvs-port-groups-count-{{idx}}\">{{getDvsPortGroupsCount(idx)}}</div>\n            </div>\n            <div class=\"clr-col-2 center-text\">\n               <div id=\"dvs-uplinks-count-{{idx}}\">{{getDvsUplinksCount(idx)}}</div>\n            </div>\n         </div>\n      </ng-container>\n\n      <vsan-validation *ngIf=\"getExistingDvsSelected()\"\n                       [alertType]=\"'warning'\"\n                       [allowClose]=\"false\"\n                       [alert]=\"getExistingDvsWarning()\">\n      </vsan-validation>\n\n      <ng-container *ngIf=\"clusterConfigData.basicConfig.drsEnabled || clusterConfigData.basicConfig.vsanEnabled\">\n         <h5 id=\"port-groups-label\">\n            {{\"vsan.cluster.hci.configureHciCluster.wizard.dvsConfig.portGroupsSection.title\" | localized}}\n         </h5>\n         <div *ngIf=\"dvsCount === 1\" id=\"port-groups-single-switch-description\">\n            {{\"vsan.cluster.hci.configureHciCluster.wizard.dvsConfig.portGroupsSection.singleSwitch.description\" | localized}}\n         </div>\n         <div *ngIf=\"dvsCount > 1\" id=\"port-groups-description\">\n            {{\"vsan.cluster.hci.configureHciCluster.wizard.dvsConfig.portGroupsSection.description\" | localized}}\n         </div>\n         <div id=\"pg-settings-container\"\n              formArrayName=\"portGroupSection\"\n              class=\"settings-container\"\n              role=\"group\"\n              aria-labelledby=\"port-groups-label\">\n            <div class=\"clr-form-control clr-row\" *ngIf=\"clusterConfigData.basicConfig.drsEnabled\">\n               <label for=\"vmotionPg\" class=\"clr-control-label clr-col-4\">\n                  {{\"vsan.cluster.hci.configureHciCluster.wizard.dvsConfig.portGroupsSection.vmotionNetworkLabel\" | localized}}\n               </label>\n               <div class=\"clr-control-container clr-col-8\">\n                  <div class=\"clr-select-wrapper\">\n                     <select id=\"vmotionPg\"\n                             [formControlName]=\"VMOTION_PG_CONTROL_NAME\"\n                             class=\"clr-select\"\n                             (change)=\"onVmotionDvsChange($event?.target?.value)\">\n                        <option *ngFor=\"let dvsName of dvsNames; let idx = index\" value=\"{{idx}}\">\n                           {{dvsName}}\n                        </option>\n                     </select>\n                  </div>\n               </div>\n            </div>\n            <div *ngIf=\"clusterConfigData.basicConfig.drsEnabled\" class=\"clr-form-control clr-row\">\n               <label for=\"dvpg-name-drs\" class=\"clr-control-label clr-col-4\">\n                  <!-- dummy label to make the input appear at the correct position -->\n               </label>\n               <!--Existing vMotion portgroup name-->\n               <div *ngIf=\"existingVmotionDvpg\"\n                    class=\"clr-control-container clr-col-5\"\n                    id=\"existing-vmotion-dvpg-name\"\n                    vsan-show-title>\n                  {{existingVmotionDvpg.name}}\n               </div>\n               <!--New vMotion portgroup name-->\n               <div *ngIf=\"!existingVmotionDvpg\"\n                    class=\"clr-control-container clr-col-5 error-control\"\n                    [ngClass]=\"{'clr-error' : validator.invalidDvpgNameControl(vmotionPgNameFormControl)}\">\n                  <div class=\"clr-input-wrapper\">\n                     <input type=\"text\"\n                            id=\"dvpg-name-drs\"\n                            class=\"clr-input\"\n                            formControlName=\"dvpgVmotionName\"\n                            aria-describedby=\"dvpg-name-drs-error\">\n                     <clr-icon class=\"clr-validate-icon\"\n                               shape=\"exclamation-circle\"\n                               title=\"{{'vsan.common.srMessage.error' | localized}}\"\n                               [attr.aria-label]=\"'vsan.common.srMessage.error' | localized\">\n                     </clr-icon>\n                  </div>\n                  <span id=\"dvpg-name-drs-error\" class=\"clr-subtext\">\n                     {{validator.getDvpgNameControlErrors(vmotionPgNameFormControl)}}\n                  </span>\n               </div>\n\n               <button *ngIf=\"showExistingVmotionButton\"\n                       vsan-show-title\n                       class=\"btn btn-link clr-col-3\"\n                       (click)=\"openExistingDvpgVmotionDialog()\"\n                       id=\"hci-distributed-switches-vmotion-dvpg-existing-button\">\n                  {{(existingVmotionDvpg\n                     ? \"vsan.cluster.hci.configureHciCluster.wizard.dvsConfig.changeExistingNetworkButtonLabel\"\n                     : \"vsan.cluster.hci.configureHciCluster.wizard.dvsConfig.existingNetworkButtonLabel\") | localized}}\n               </button>\n            </div>\n            <div class=\"clr-form-control clr-row\" *ngIf=\"clusterConfigData.basicConfig.vsanEnabled\">\n               <label id=\"vsan-network-label\" for=\"vsanPg\" class=\"clr-control-label clr-col-4\">\n                  {{\"vsan.cluster.hci.configureHciCluster.wizard.dvsConfig.portGroupsSection.vsanNetworkLabel\" | localized}}\n               </label>\n               <div class=\"clr-control-container clr-col-8\">\n                  <div class=\"clr-select-wrapper\">\n                     <select id=\"vsanPg\"\n                             [formControlName]=\"VSAN_PG_CONTROL_NAME\"\n                             class=\"clr-select\"\n                             (change)=\"onVsanDvsChange($event?.target?.value)\">\n                        <option *ngFor=\"let dvsName of dvsNames; let idx = index\" value=\"{{idx}}\">\n                           {{dvsName}}\n                        </option>\n                     </select>\n                  </div>\n               </div>\n            </div>\n            <div *ngIf=\"clusterConfigData.basicConfig.vsanEnabled\" class=\"clr-form-control clr-row\">\n               <label for=\"dvpg-name-vsan\" class=\"clr-control-label clr-col-4\">\n                  <!-- dummy label to make the input appear at the correct position -->\n               </label>\n               <!--Existing vSAN portgroup name-->\n               <div *ngIf=\"existingStorageDvpg\"\n                    class=\"clr-control-container clr-col-5\"\n                    id=\"existing-vsan-dvpg-name\"\n                    vsan-show-title>\n                  {{existingStorageDvpg.name}}\n               </div>\n               <!--New vSAN portgroup name-->\n               <div *ngIf=\"!existingStorageDvpg\"\n                    class=\"clr-control-container clr-col-5 error-control\"\n                    [ngClass]=\"{'clr-error' : validator.invalidDvpgNameControl(vsanPgNameFormControl)}\">\n                  <div class=\"clr-input-wrapper\">\n                     <input type=\"text\"\n                            id=\"dvpg-name-vsan\"\n                            class=\"clr-input\"\n                            formControlName=\"dvpgVsanName\"\n                            aria-describedby=\"dvpg-name-vsan-error\"/>\n                     <clr-icon class=\"clr-validate-icon\"\n                               shape=\"exclamation-circle\"\n                               title=\"{{'vsan.common.srMessage.error' | localized}}\"\n                               [attr.aria-label]=\"'vsan.common.srMessage.error' | localized\">\n                     </clr-icon>\n                  </div>\n                  <span id=\"dvpg-name-vsan-error\" class=\"clr-subtext\">\n                     {{validator.getDvpgNameControlErrors(vsanPgNameFormControl)}}\n                  </span>\n               </div>\n               <button *ngIf=\"showExistingVsanButton\"\n                       vsan-show-title\n                       class=\"btn btn-link clr-col-3\"\n                       (click)=\"openExistingDvpgVsanDialog()\"\n                       id=\"hci-distributed-switches-vsan-dvpg-existing-button\">\n                  {{(existingStorageDvpg\n                     ? \"vsan.cluster.hci.configureHciCluster.wizard.dvsConfig.changeExistingNetworkButtonLabel\"\n                     : \"vsan.cluster.hci.configureHciCluster.wizard.dvsConfig.existingNetworkButtonLabel\") | localized}}\n               </button>\n            </div>\n         </div>\n      </ng-container>\n      <h4 id=\"physical-adapters-label\">\n         {{\"vsan.cluster.hci.configureHciCluster.wizard.dvsConfig.adaptersSection.title\" | localized}}\n      </h4>\n      <div id=\"physical-adapters-description\">\n         {{\"vsan.cluster.hci.configureHciCluster.wizard.dvsConfig.adaptersSection.description\" | localized}}\n      </div>\n      <ng-container formArrayName=\"adaptersSection\">\n         <div *ngFor=\"let adapterFormGroup of adapterFormGroups; let idx = index\"\n              [formGroupName]=\"idx\"\n              class=\"clr-form-control clr-row\"\n              role=\"group\"\n              aria-labelledby=\"physical-adapters-label\">\n            <label for=\"adapter-{{idx}}\" class=\"clr-control-label clr-col-4\">\n               {{physicalAdapters[idx].name}}\n            </label>\n            <div class=\"clr-control-container clr-col-8\">\n               <div class=\"clr-select-wrapper\">\n                  <select id=\"adapter-{{idx}}\"\n                          formControlName=\"{{physicalAdapters[idx].deviceName}}\"\n                          class=\"clr-select\">\n                     <option value=\"notInUse\">\n                        {{\"vsan.cluster.hci.configureHciCluster.wizard.dvsConfig.adaptersSection.notInUse\" | localized}}\n                     </option>\n                     <option *ngFor=\"let dvsName of dvsNames; let idx = index\" value=\"{{idx}}\">\n                        {{dvsName}}\n                     </option>\n                  </select>\n               </div>\n            </div>\n         </div>\n      </ng-container>\n   </div>\n</form>\n","/* Copyright 2018-2020 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, OnInit} from \"@angular/core\";\nimport {HciClusterService} from \"@generated/hci-cluster-service\";\nimport {ManagedObject} from \"@service/managed-object\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {ExistingDvpgData} from \"@generated/existing-dvpg-data\";\n\n@Component({\n   templateUrl: \"existing-dvpg-selector-dialog.html\",\n   selector: \"existing-dvpg-selector-dialog\",\n   styleUrls: [\"existing-dvpg-selector-dialog.scss\"],\n})\nexport class ExistingDvpgSelectorDialogComponent implements OnInit {\n\n   static readonly DVPG_GRID_PAGE_SIZE: number = 10;\n   VsanUiUtils = VsanUiUtils;\n\n   private dvsRef: ManagedObject;\n\n   isLoading: boolean;\n\n   existingDvpgList: ExistingDvpgData[];\n\n   selectedDvpg: ExistingDvpgData;\n\n   newDvpgSelection: boolean;\n\n   private selectedExistingDvpgName: string;\n\n   constructor(private hciClusterService: HciClusterService) {\n   }\n\n   ngOnInit() {\n      const context: any = VsanUiUtils.getModalContext();\n      this.dvsRef = context.dvsRef;\n      this.selectedExistingDvpgName = context.selectedExistingDvpgName;\n      this.requestData();\n   }\n\n   get dvpgGridPageSize() {\n      return ExistingDvpgSelectorDialogComponent.DVPG_GRID_PAGE_SIZE;\n   }\n\n   onOkClicked() {\n      if (this.newDvpgSelection) {\n         VsanUiUtils.closeModalDialog(null);\n      } else {\n         VsanUiUtils.closeModalDialog(this.selectedDvpg);\n      }\n   }\n\n   private requestData = (): void => {\n      this.isLoading = true;\n      this.hciClusterService.getExistingDvpg(this.dvsRef, this.selectedExistingDvpgName)\n            .then(this.onDataRetrieved)\n            .catch(this.onRequestError);\n   };\n\n   private onDataRetrieved = (result: any): void => {\n      if (result) {\n         this.existingDvpgList = result;\n         if (this.existingDvpgList && this.existingDvpgList.length > 0 && this.existingDvpgList[0].isSelected) {\n            this.selectedDvpg = this.existingDvpgList[0];\n         }\n      }\n\n      this.isLoading = false;\n   };\n\n   private onRequestError = (result: any): void => {\n      this.isLoading = false;\n   };\n}","/* Copyright 2017-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, OnInit} from \"@angular/core\";\nimport {InputProperty, OutputProperty, WizardPage} from \"@component/wizard/flow-metadata\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {ClusterConfigData} from \"@generated/cluster-config-data\";\nimport {LockdownMode} from \"@generated/lockdown-mode\";\nimport {DomainOrHostData} from \"@generated/domain-or-host-data\";\nimport {ManagedObject} from \"@service/managed-object\";\nimport {VsanDiskMapping} from \"@generated/vsan-disk-mapping\";\nimport {Service} from \"@generated/service\";\nimport {NetServiceConfig} from \"@generated/net-service-config\";\nimport {VsanClusterType} from \"@generated/vsan-cluster-type\";\nimport {ConfigureWizardData} from \"@generated/configure-wizard-data\";\nimport {VsanConfigSpec} from \"@generated/vsan-config-spec\";\nimport {VsanStretchedClusterConfig} from \"@generated/vsan-stretched-cluster-config\";\nimport {ExternalProxySettingsConfig} from \"@generated/external-proxy-settings-config\";\nimport {VsanCapabilityData} from \"@generated/vsan-capability-data\";\nimport {VsanCapabilityProvider} from \"@generated/vsan-capability-provider\";\nimport {VumBaselineRecommendationType} from \"@generated/vum-baseline-recommendation-type\";\nimport {DisksClaimingConfigInfo} from \"@component/diskmgmt/model/disks-claiming-config-info.data\";\nimport {SpaceEfficiencyConfig} from \"@generated/space-efficiency-config\";\nimport {SpaceEfficiencyService} from \"@service/space-efficiency-service\";\nimport {ClaimOption} from \"@generated/claim-option\";\nimport Protocol = NetServiceConfig.Protocol;\nimport IpType = NetServiceConfig.IpType;\nimport {DiskMgmtDiskUtil} from \"@util/disk-mgmt-disk.util\";\nimport {VsanQuickstartUtil} from \"@util/vsan-quickstart-util\";\nimport {InventoryNode} from \"@generated/inventory-node\";\nimport {AutoClaimSummaryData} from \"@component/diskmgmt/model/auto-claim-summary.data\";\n\n@WizardPage(\n      VsanUiUtils.getString(\"vsan.cluster.hci.configureHciCluster.wizard.rtc.title\"),\n      null,\n      [VsanCapabilityProvider],\n)\n@Component({\n   templateUrl: \"hci-cluster-ready-to-complete-page.html\",\n   styleUrls: [\"hci-cluster-ready-to-complete-page.scss\"],\n})\nexport class HciClusterReadyToCompletePageComponent implements OnInit {\n   SpaceEfficiencyConfig: typeof SpaceEfficiencyConfig = SpaceEfficiencyConfig;\n   ClaimOption: typeof ClaimOption = ClaimOption;\n\n   @InputProperty(InputProperty.required(false))\n   configureWizardData: ConfigureWizardData;\n\n   @InputProperty()\n   @OutputProperty()\n   clusterConfigData: ClusterConfigData;\n\n   @InputProperty()\n   vsanConfigSpec: VsanConfigSpec;\n\n   @InputProperty(InputProperty.required(false))\n   disksClaimingConfigInfo: DisksClaimingConfigInfo;\n\n   @InputProperty(InputProperty.required(false))\n   isAutoClaim: boolean;\n\n   @InputProperty(InputProperty.required(false))\n   autoClaimedDisks: AutoClaimSummaryData;\n\n   @InputProperty(InputProperty.required(false))\n   faultDomainNames: string[];\n\n   @InputProperty(InputProperty.required(false))\n   preferredName: string;\n\n   @InputProperty(InputProperty.required(false))\n   preferredDomains: DomainOrHostData[];\n\n   @InputProperty(InputProperty.required(false))\n   secondaryName: string;\n\n   @InputProperty(InputProperty.required(false))\n   secondaryDomains: DomainOrHostData[];\n\n   @InputProperty(InputProperty.required(false))\n   witnessHost: ManagedObject;\n\n   @InputProperty(InputProperty.required(false))\n   witnessHostName: string;\n\n   @InputProperty(InputProperty.required(false))\n   witnessHostDiskMapping: VsanDiskMapping;\n\n   @InputProperty(InputProperty.required(false))\n   storagePoolDisks: string[];\n\n   @InputProperty(\"clusterHosts\")\n   hosts: InventoryNode[] = [];\n\n   @InputProperty(InputProperty.required(false))\n   proxySettingsConfig: ExternalProxySettingsConfig;\n\n   @InputProperty()\n   vcCapabilityData: VsanCapabilityData;\n\n   @InputProperty()\n   clusterCapabilityData: VsanCapabilityData;\n\n   preferredHosts: DomainOrHostData[] = [];\n   secondaryHosts: DomainOrHostData[] = [];\n   isStretchedCluster: boolean;\n   displaySingleSiteFaultDomainNames: boolean;\n   hasSupportInsightConfiguration: boolean;\n\n   /**\n    * The vSAN Max claim options with new claimed capacity.\n    */\n   vsanMaxClaimOptions: ClaimOption[];\n\n   /**\n    * The vSAN Direct claim options with new claimed capacity.\n    */\n   vsanDirectClaimOptions: ClaimOption[];\n\n   /**\n    * The PMEM claim options with new claimed capacity.\n    */\n   pmemClaimOptions: ClaimOption[];\n\n   constructor(private spaceEfficiencyService: SpaceEfficiencyService) {\n   }\n\n   ngOnInit(): void {\n      if (!this.clusterConfigData.basicConfig.vsanEnabled) {\n         return;\n      }\n      // vSAN configuration is filled in the vsanConfigSpec property in the previous pages.\n      // copy it's content to the clusterConfigData as this is the spec that is passed to the task.\n      this.clusterConfigData.vsanConfigSpec = this.vsanConfigSpec;\n\n      // Populate some data for the template to display.\n      this.populateDatastoreClaimedDisksInfo();\n      this.populateStretchedClusterConfig();\n      this.hasSupportInsightConfiguration = this.clusterCapabilityData.isSupportInsightSupported\n            && VsanQuickstartUtil.isHciWorkflowInProgress(this.clusterConfigData.basicConfig.hciWorkflowState)\n            && this.clusterConfigData.basicConfig.vsanEnabled\n            && !this.configureWizardData.ceipEnabled\n            && !this.configureWizardData.disableSupportInsight;\n   }\n\n   private populateDatastoreClaimedDisksInfo(): void {\n      this.vsanMaxClaimOptions = DiskMgmtDiskUtil.VSAN_SINGLE_TIER_CLAIM_OPTIONS\n            .filter(claimOption => this.disksClaimingConfigInfo.hasNewClaimedCapacity(claimOption));\n      this.vsanDirectClaimOptions = DiskMgmtDiskUtil.VSAN_DIRECT_CLAIM_OPTIONS\n            .filter(claimOption => this.disksClaimingConfigInfo.hasNewClaimedCapacity(claimOption));\n      this.pmemClaimOptions = DiskMgmtDiskUtil.PMEM_CLAIM_OPTIONS.filter(\n            claimOption => this.disksClaimingConfigInfo.hasNewClaimedCapacity(claimOption));\n   }\n\n   /* Configure in create cluster mode for stretched and two host clusters\n      Some of the vSAN specific pages do not fill the vsanConfigSpec property.\n      These pages are related to two host and stretched cluster.\n      In order to supply the needed vSAN specs, copy all the entered data from these pages:\n      FaultDomainsPageComponent, WitnessHostPageComponent and ClaimDisksWitnessHostPage\n    */\n   private populateStretchedClusterConfig(): void {\n      // First populate the FD details. This must happen before getStretchedClusterConfig!\n      this.populateDomains();\n      this.isStretchedCluster = this.configureWizardData.selectedVsanClusterType === VsanClusterType.STRETCHED_CLUSTER;\n      if (this.isStretchedCluster\n            || this.configureWizardData.selectedVsanClusterType === VsanClusterType.TWO_HOST_VSAN_CLUSTER) {\n         this.clusterConfigData.vsanConfigSpec.stretchedClusterConfig = this.getStretchedClusterConfig();\n      }\n   }\n\n   private populateDomains(): void {\n      this.displaySingleSiteFaultDomainNames =\n            this.configureWizardData.selectedVsanClusterType === VsanClusterType.SINGLE_SITE_CLUSTER\n            && !VsanUiUtils.isEmpty(this.faultDomainNames);\n\n      if (!VsanUiUtils.isEmpty(this.preferredDomains)) {\n         this.preferredDomains.forEach(item => this.preferredHosts.push(...(item.isHost ? [item] : item.children)));\n         this.preferredHosts.sort((h1, h2) => h1.label.localeCompare(h2.label));\n      }\n\n      if (!VsanUiUtils.isEmpty(this.secondaryDomains)) {\n         this.secondaryDomains.forEach(item => this.secondaryHosts.push(...(item.isHost ? [item] : item.children)));\n         this.secondaryHosts.sort((h1, h2) => h1.label.localeCompare(h2.label));\n      }\n   }\n\n   private getStretchedClusterConfig(): VsanStretchedClusterConfig {\n      let preferredFdName: string = null;\n      let secondaryFdName: string = null;\n      let preferredFdDomains: ManagedObject[] = null;\n      let secondaryFdDomains: ManagedObject[] = null;\n\n      switch (this.configureWizardData.selectedVsanClusterType) {\n         case VsanClusterType.TWO_HOST_VSAN_CLUSTER:\n            preferredFdName = VsanUiUtils.getString(\n                  \"vsan.faultDomains.stretchedCluster.wizard.configure.page.faultDomains.defaultPreferredName\");\n            secondaryFdName = VsanUiUtils.getString(\n                  \"vsan.faultDomains.stretchedCluster.wizard.configure.page.faultDomains.defaultSecondaryName\");\n            preferredFdDomains = [this.hosts[0].moRef];\n            secondaryFdDomains = [this.hosts[1].moRef];\n            break;\n         case VsanClusterType.STRETCHED_CLUSTER:\n            preferredFdName = this.preferredName;\n            secondaryFdName = this.secondaryName;\n            preferredFdDomains = this.preferredHosts.map((item) => ManagedObject.fromUid(item.uid));\n            secondaryFdDomains = this.secondaryHosts.map((item) => ManagedObject.fromUid(item.uid));\n            break;\n      }\n\n      return this.clusterConfigData.vsanConfigSpec.stretchedClusterConfig = VsanStretchedClusterConfig.Factory.create(\n            this.witnessHost,\n            this.witnessHostDiskMapping,\n            this.storagePoolDisks,\n            preferredFdName,\n            preferredFdDomains,\n            secondaryFdName,\n            secondaryFdDomains,\n            true,\n      );\n   }\n\n   get spaceEfficiencyLabel(): string {\n      return VsanUiUtils.getString(\n         \"vsan.cluster.hci.configureHciCluster.wizard.rtc.services.spaceEfficiency.label\",\n            this.spaceEfficiencyService.toLabel(this.clusterConfigData.vsanConfigSpec.spaceEfficiencyConfig));\n   }\n\n   getLockdownModeText(): string {\n      if (this.clusterConfigData.lockdownMode === LockdownMode.DISABLED) {\n         return VsanUiUtils.getString(\"vsan.cluster.hci.configureHciCluster.wizard.rtc.lockdown.disabled.label\");\n      }\n      return VsanUiUtils.getString(\"vsan.cluster.hci.configureHciCluster.wizard.rtc.lockdown.label\");\n   }\n\n   getNtpServerText(): string {\n      if (this.clusterConfigData.ntpServer) {\n         return VsanUiUtils.getString(\"vsan.cluster.hci.configureHciCluster.wizard.rtc.ntp.set.label\",\n               this.clusterConfigData.ntpServer);\n      }\n      return VsanUiUtils.getString(\"vsan.cluster.hci.configureHciCluster.wizard.rtc.ntp.notset.label\");\n   }\n\n   getEvcModeText(): string {\n      if (this.clusterConfigData.enableEVC) {\n         return VsanUiUtils.getString(\"vsan.cluster.hci.configureHciCluster.wizard.rtc.evc.label\");\n      }\n      return VsanUiUtils.getString(\"vsan.cluster.hci.configureHciCluster.wizard.rtc.evc.disabled.label\");\n   }\n\n   getRdmaText(): string {\n      return this.vsanConfigSpec.enableRdma ?\n            VsanUiUtils.getString(\"vsan.services.network.rdmaSupport.enabled.label\")\n            : VsanUiUtils.getString(\"vsan.services.network.rdmaSupport.disabled.label\");\n   }\n\n   getHostUpdatePreference(): string {\n      let type: string = \"\";\n      switch (this.clusterConfigData.vumBaselineRecommendationType) {\n         case VumBaselineRecommendationType.latestRelease:\n            type = VsanUiUtils.getString(\"vsan.vum.baseline.recommendation.option.latest.release.label\");\n            break;\n         case VumBaselineRecommendationType.latestPatch:\n            type = VsanUiUtils.getString(\"vsan.vum.baseline.recommendation.option.latest.patch.label\");\n            break;\n         case VumBaselineRecommendationType.noRecommendation:\n            type = VsanUiUtils.getString(\"vsan.vum.baseline.recommendation.option.no.recommendation.label\");\n            break;\n      }\n      return VsanUiUtils.getString(\n            \"vsan.cluster.configure.wizard.advancedOptions.vsan.vumBaselinePreference.readyToComplete.label\", type);\n   }\n\n   getClaimedDisksType(): string {\n      if (!this.disksClaimingConfigInfo.hasNewClaimedCapacity(ClaimOption.ClaimForStorage)) {\n         return VsanUiUtils.getString(\"vsan.cluster.configure.summary.diskClaiming.noDiskClaimed\");\n      }\n\n      if (this.disksClaimingConfigInfo.claimAllFlash) {\n         return VsanUiUtils.getString(\"vsan.cluster.configure.summary.diskClaiming.allFlash\");\n      }\n\n      if (!this.disksClaimingConfigInfo.claimAllFlash) {\n         return VsanUiUtils.getString(\"vsan.cluster.configure.summary.diskClaiming.hybrid\");\n      }\n   }\n\n   getClaimedCapacity(claimOption: ClaimOption): string {\n      if (this.isAutoClaim) {\n         return VsanUiUtils.formatFileSize(this.autoClaimedDisks.totalClaimedCapacity);\n      } else {\n         if (this.disksClaimingConfigInfo.getOldClaimedCapacity(claimOption) === 0) {\n            return VsanUiUtils.formatFileSize(this.disksClaimingConfigInfo.getClaimedCapacity(claimOption));\n         } else {\n            return VsanUiUtils.getString(\n                  \"vsan.cluster.configure.summary.totalAndOldCapacityFormat\",\n                  VsanUiUtils.formatFileSize(this.disksClaimingConfigInfo.getClaimedCapacity(claimOption)),\n                  VsanUiUtils.formatFileSize(this.disksClaimingConfigInfo.getOldClaimedCapacity(claimOption)));\n         }\n      }\n   }\n\n   getClaimedDiskCount(claimOption: ClaimOption): number {\n      if (this.isAutoClaim) {\n         return this.autoClaimedDisks.disksCount;\n      } else {\n         return this.disksClaimingConfigInfo.getClaimedDiskCount(claimOption);\n      }\n   }\n\n   getClaimLabel(): string {\n      return this.isAutoClaim ?\n            VsanUiUtils.getString(\n                  \"vsan.cluster.hci.configureHciCluster.wizard.rtc.vsanMaxDatastore.claimedDisks.auto.label\")\n            : VsanUiUtils.getString(\n                  \"vsan.cluster.hci.configureHciCluster.wizard.rtc.vsanMaxDatastore.claimedDisks.manual.label\");\n   }\n\n   hasEnabledServices(): boolean {\n      return this.clusterConfigData.basicConfig.drsEnabled\n            || this.clusterConfigData.basicConfig.haEnabled\n            || this.clusterConfigData.basicConfig.vsanEnabled\n                  && (this.clusterConfigData.vsanConfigSpec.enableDataAtRestEncryption\n                     || this.clusterConfigData.vsanConfigSpec.enableDataInTransitEncryption\n                     || this.clusterConfigData.vsanConfigSpec.spaceEfficiencyConfig !== SpaceEfficiencyConfig.NONE\n                     || this.isStretchedCluster\n                     || this.displaySingleSiteFaultDomainNames\n                     || this.vsanConfigSpec.advancedOptions.largeClusterSupportEnabled)\n            || this.hasSupportInsightConfiguration;\n   }\n\n   get physicalNetworksDescription(): string {\n      switch (this.clusterConfigData.dvsSpecs.length) {\n         case 1:\n            return VsanUiUtils.getString(\"vsan.cluster.hci.configureHciCluster.wizard.rtc.networking.oneNet\");\n         case 2:\n            return VsanUiUtils.getString(\"vsan.cluster.hci.configureHciCluster.wizard.rtc.networking.twoNet\");\n         case 3:\n            return VsanUiUtils.getString(\"vsan.cluster.hci.configureHciCluster.wizard.rtc.networking.threeNet\");\n      }\n      return \"\";\n   }\n\n   get vmotionDescription(): string {\n      const config: NetServiceConfig = this.getNetServiceConfig(Service.VMOTION);\n      return config ? this.getServiceDescriptionText(config) : \"\";\n   }\n\n   get storageDescription(): string {\n      const config: NetServiceConfig = this.getNetServiceConfig(Service.VSAN);\n      return config ? this.getServiceDescriptionText(config) : \"\";\n   }\n\n   private getNetServiceConfig(service: Service): NetServiceConfig {\n      return this.clusterConfigData.netServiceConfigs.filter((config) => config.service === service)[0];\n   }\n\n   private getServiceDescriptionText(config: NetServiceConfig): string {\n      const hostNum: number = this.hosts.length;\n      return hostNum === 1 ?\n            this.getServiceDescriptionForOneHost(config) :\n            this.getServiceDescriptionForMultipleHosts(config);\n   }\n\n   private getServiceDescriptionForOneHost(config: NetServiceConfig): string {\n      switch (config.protocol) {\n         case Protocol.IPV4:\n            return this.getServiceDescriptionForOneHostIpv4(config);\n         case Protocol.IPV6:\n            return this.getServiceDescriptionForOneHostIpv6(config);\n         case Protocol.MIXED:\n            return this.getServiceDescriptionForOneHostMixedProtocol(config);\n      }\n   }\n\n   private getServiceDescriptionForOneHostIpv4(config: NetServiceConfig): string {\n      switch (config.ipv4IpType) {\n         case IpType.STATIC:\n            if (config.useVlan) {\n               return VsanUiUtils.getString(\n                     \"vsan.cluster.hci.configureHciCluster.wizard.rtc.networking.staticOneHostIpv4Vlan\", config.vlan);\n            } else {\n               return VsanUiUtils.getString(\n                     \"vsan.cluster.hci.configureHciCluster.wizard.rtc.networking.staticOneHostIpv4\");\n            }\n         case IpType.DHCP:\n            if (config.useVlan) {\n               return VsanUiUtils.getString(\n                     \"vsan.cluster.hci.configureHciCluster.wizard.rtc.networking.dhcpOneHostIpv4Vlan\", config.vlan);\n            } else {\n               return VsanUiUtils.getString(\n                     \"vsan.cluster.hci.configureHciCluster.wizard.rtc.networking.dhcpOneHostIpv4\");\n            }\n      }\n   }\n\n   private getServiceDescriptionForOneHostIpv6(config: NetServiceConfig): string {\n      switch (config.ipv6IpType) {\n         case IpType.STATIC:\n            if (config.useVlan) {\n               return VsanUiUtils.getString(\n                     \"vsan.cluster.hci.configureHciCluster.wizard.rtc.networking.staticOneHostIpv6Vlan\", config.vlan);\n            } else {\n               return VsanUiUtils.getString(\n                     \"vsan.cluster.hci.configureHciCluster.wizard.rtc.networking.staticOneHostIpv6\");\n            }\n         case IpType.DHCP:\n            if (config.useVlan) {\n               return VsanUiUtils.getString(\n                     \"vsan.cluster.hci.configureHciCluster.wizard.rtc.networking.dhcpOneHostIpv6Vlan\", config.vlan);\n            } else {\n               return VsanUiUtils.getString(\n                     \"vsan.cluster.hci.configureHciCluster.wizard.rtc.networking.dhcpOneHostIpv6\");\n            }\n         case IpType.ROUTER_ADVERTISEMENT:\n            if (config.useVlan) {\n               return VsanUiUtils.getString(\n                     \"vsan.cluster.hci.configureHciCluster.wizard.rtc.networking.routerOneHostIpv6Vlan\", config.vlan);\n            } else {\n               return VsanUiUtils.getString(\n                     \"vsan.cluster.hci.configureHciCluster.wizard.rtc.networking.routerOneHostIpv6\");\n            }\n      }\n   }\n\n   private getServiceDescriptionForOneHostMixedProtocol(config: NetServiceConfig): string {\n      return this.getServiceDescriptionMixedProtocol(config, false);\n   }\n\n   private getServiceDescriptionForMultipleHosts(config: NetServiceConfig): string {\n      switch (config.protocol) {\n         case Protocol.IPV4:\n            return this.getServiceDescriptionForMultipleHostsIpv4(config);\n         case Protocol.IPV6:\n            return this.getServiceDescriptionForMultipleHostsIpv6(config);\n         case Protocol.MIXED:\n            return this.getServiceDescriptionForMultipleHostsMixedProtocol(config);\n      }\n   }\n\n   private getServiceDescriptionForMultipleHostsIpv4(config: NetServiceConfig): string {\n      switch (config.ipv4IpType) {\n         case IpType.STATIC:\n            if (config.useVlan) {\n               return VsanUiUtils.getString(\n                     \"vsan.cluster.hci.configureHciCluster.wizard.rtc.networking.staticManyHostsIpv4Vlan\",\n                     this.hosts.length, config.vlan);\n            } else {\n               return VsanUiUtils.getString(\n                     \"vsan.cluster.hci.configureHciCluster.wizard.rtc.networking.staticManyHostsIpv4\",\n                     this.hosts.length);\n            }\n         case IpType.DHCP:\n            if (config.useVlan) {\n               return VsanUiUtils.getString(\n                     \"vsan.cluster.hci.configureHciCluster.wizard.rtc.networking.dhcpManyHostsIpv4Vlan\",\n                     this.hosts.length, config.vlan);\n            } else {\n               return VsanUiUtils.getString(\n                     \"vsan.cluster.hci.configureHciCluster.wizard.rtc.networking.dhcpManyHostsIpv4\",\n                     this.hosts.length);\n            }\n      }\n   }\n\n   private getServiceDescriptionForMultipleHostsIpv6(config: NetServiceConfig): string {\n      switch (config.ipv6IpType) {\n         case IpType.STATIC:\n            if (config.useVlan) {\n               return VsanUiUtils.getString(\n                     \"vsan.cluster.hci.configureHciCluster.wizard.rtc.networking.staticManyHostsIpv6Vlan\",\n                     this.hosts.length, config.vlan);\n            } else {\n               return VsanUiUtils.getString(\n                     \"vsan.cluster.hci.configureHciCluster.wizard.rtc.networking.staticManyHostsIpv6\",\n                     this.hosts.length);\n            }\n         case IpType.DHCP:\n            if (config.useVlan) {\n               return VsanUiUtils.getString(\n                     \"vsan.cluster.hci.configureHciCluster.wizard.rtc.networking.dhcpManyHostsIpv6Vlan\",\n                     this.hosts.length, config.vlan);\n            } else {\n               return VsanUiUtils.getString(\n                     \"vsan.cluster.hci.configureHciCluster.wizard.rtc.networking.dhcpManyHostsIpv6\",\n                     this.hosts.length);\n            }\n         case IpType.ROUTER_ADVERTISEMENT:\n            if (config.useVlan) {\n               return VsanUiUtils.getString(\n                     \"vsan.cluster.hci.configureHciCluster.wizard.rtc.networking.routerManyHostsIpv6Vlan\",\n                     this.hosts.length, config.vlan);\n            } else {\n               return VsanUiUtils.getString(\n                     \"vsan.cluster.hci.configureHciCluster.wizard.rtc.networking.routerManyHostsIpv6\",\n                     this.hosts.length);\n            }\n      }\n   }\n\n   private getServiceDescriptionForMultipleHostsMixedProtocol(config: NetServiceConfig): string {\n      return this.getServiceDescriptionMixedProtocol(config, true);\n   }\n\n   private getServiceDescriptionMixedProtocol(config: NetServiceConfig, multipleHosts: boolean): string {\n      if (config.ipv4IpType === IpType.STATIC) {\n         if (config.ipv6IpType === IpType.STATIC) {\n            return this.getStaticIpv4Ipv6Label(config, multipleHosts);\n         } else if (config.ipv6IpType === IpType.DHCP) {\n            return this.getStaticIpv4DhcpIpv6Label(config, multipleHosts);\n         } else if (config.ipv6IpType === IpType.ROUTER_ADVERTISEMENT) {\n            return this.getStaticIpv4RouterIpv6Label(config, multipleHosts);\n         }\n      } else if (config.ipv4IpType === IpType.DHCP) {\n         if (config.ipv6IpType === IpType.DHCP) {\n            return this.getDhcpIpv4Ipv6Label(config, multipleHosts);\n         } else if (config.ipv6IpType === IpType.STATIC) {\n            return this.getDhcpIpv4StaticIpv6Label(config, multipleHosts);\n         } else if (config.ipv6IpType === IpType.ROUTER_ADVERTISEMENT) {\n            return this.getDhcpIpv4RouterIpv6Label(config, multipleHosts);\n         }\n      }\n   }\n\n   private getStaticIpv4Ipv6Label(config: NetServiceConfig, multipleHosts?: boolean): string {\n      if (config.useVlan) {\n         return multipleHosts ? VsanUiUtils.getString(\n               \"vsan.cluster.hci.configureHciCluster.wizard.rtc.networking.staticManyHostsIpv46Vlan\",\n                     this.hosts.length, config.vlan)\n               : VsanUiUtils.getString(\n                     \"vsan.cluster.hci.configureHciCluster.wizard.rtc.networking.staticOneHostIpv46Vlan\",\n                     config.vlan);\n      }\n\n      return multipleHosts ?\n            VsanUiUtils.getString(\n                  \"vsan.cluster.hci.configureHciCluster.wizard.rtc.networking.staticManyHostsIpv46\",\n                  this.hosts.length)\n            : VsanUiUtils.getString(\n                  \"vsan.cluster.hci.configureHciCluster.wizard.rtc.networking.staticOneHostIpv46\");\n   }\n\n   private getDhcpIpv4Ipv6Label(config: NetServiceConfig, multipleHosts?: boolean): string {\n      if (config.useVlan) {\n         return multipleHosts ?\n               VsanUiUtils.getString(\n               \"vsan.cluster.hci.configureHciCluster.wizard.rtc.networking.dhcpManyHostsIpv46Vlan\",\n                    this.hosts.length, config.vlan)\n               : VsanUiUtils.getString(\n                     \"vsan.cluster.hci.configureHciCluster.wizard.rtc.networking.dhcpOneHostIpv46Vlan\",\n                     config.vlan);\n      }\n\n      return multipleHosts ?\n            VsanUiUtils.getString(\n                  \"vsan.cluster.hci.configureHciCluster.wizard.rtc.networking.dhcpManyHostsIpv46\",\n                  this.hosts.length)\n            : VsanUiUtils.getString(\n                  \"vsan.cluster.hci.configureHciCluster.wizard.rtc.networking.dhcpOneHostIpv46\");\n   }\n\n   private getDhcpIpv4StaticIpv6Label(config: NetServiceConfig, multipleHosts?: boolean): string {\n      if (config.useVlan) {\n         return multipleHosts ?\n               VsanUiUtils.getString(\n               \"vsan.cluster.hci.configureHciCluster.wizard.rtc.networking.manyHostsDhcpIpv4StaticIpv6Vlan\",\n                    this.hosts.length, config.vlan)\n               : VsanUiUtils.getString(\n                     \"vsan.cluster.hci.configureHciCluster.wizard.rtc.networking.oneHostDhcpIpv4StaticIpv6Vlan\",\n                     config.vlan);\n      }\n\n      return multipleHosts ?\n            VsanUiUtils.getString(\n            \"vsan.cluster.hci.configureHciCluster.wizard.rtc.networking.manyHostsDhcpIpv4StaticIpv6\",\n                 this.hosts.length)\n            : VsanUiUtils.getString(\n                  \"vsan.cluster.hci.configureHciCluster.wizard.rtc.networking.oneHostDhcpIpv4StaticIpv6\");\n   }\n\n   private getDhcpIpv4RouterIpv6Label(config: NetServiceConfig, multipleHosts?: boolean): string {\n      if (config.useVlan) {\n         return multipleHosts ?\n               VsanUiUtils.getString(\n               \"vsan.cluster.hci.configureHciCluster.wizard.rtc.networking.manyHostsDhcpIpv4RouterIpv6Vlan\",\n                     this.hosts.length, config.vlan)\n               : VsanUiUtils.getString(\n                     \"vsan.cluster.hci.configureHciCluster.wizard.rtc.networking.oneHostDhcpIpv4RouterIpv6Vlan\",\n                     config.vlan);\n      }\n\n      return multipleHosts ? VsanUiUtils.getString(\n            \"vsan.cluster.hci.configureHciCluster.wizard.rtc.networking.manyHostsDhcpIpv4RouterIpv6\",\n                 this.hosts.length)\n            : VsanUiUtils.getString(\n                  \"vsan.cluster.hci.configureHciCluster.wizard.rtc.networking.oneHostDhcpIpv4RouterIpv6\");\n   }\n\n   private getStaticIpv4DhcpIpv6Label(config: NetServiceConfig, multipleHosts?: boolean): string {\n      if (config.useVlan) {\n         return multipleHosts ?\n               VsanUiUtils.getString(\n               \"vsan.cluster.hci.configureHciCluster.wizard.rtc.networking.manyHostsStaticIpv4DhcpIpv6Vlan\",\n                    this.hosts.length, config.vlan)\n               : VsanUiUtils.getString(\n                    \"vsan.cluster.hci.configureHciCluster.wizard.rtc.networking.oneHostStaticIpv4DhcpIpv6Vlan\",\n                    config.vlan);\n      }\n\n      return multipleHosts ?\n            VsanUiUtils.getString(\n                  \"vsan.cluster.hci.configureHciCluster.wizard.rtc.networking.manyHostsStaticIpv4DhcpIpv6\",\n                  this.hosts.length)\n            : VsanUiUtils.getString(\n                  \"vsan.cluster.hci.configureHciCluster.wizard.rtc.networking.oneHostStaticIpv4DhcpIpv6\");\n   }\n\n   private getStaticIpv4RouterIpv6Label(config: NetServiceConfig, multipleHosts?: boolean): string {\n      if (config.useVlan) {\n         return multipleHosts ?\n               VsanUiUtils.getString(\n               \"vsan.cluster.hci.configureHciCluster.wizard.rtc.networking.manyHostsStaticIpv4RouterIpv6Vlan\",\n                    this.hosts.length, config.vlan)\n               : VsanUiUtils.getString(\n                    \"vsan.cluster.hci.configureHciCluster.wizard.rtc.networking.oneHostStaticIpv4RouterIpv6Vlan\",\n                    config.vlan);\n      }\n\n      return multipleHosts ?\n            VsanUiUtils.getString(\n            \"vsan.cluster.hci.configureHciCluster.wizard.rtc.networking.manyHostsStaticIpv4RouterIpv6\",\n                 this.hosts.length)\n            : VsanUiUtils.getString(\n                 \"vsan.cluster.hci.configureHciCluster.wizard.rtc.networking.oneHostStaticIpv4RouterIpv6\");\n   }\n}\n","<!-- Copyright 2018-2020 VMware, Inc. All rights reserved. -- VMware Confidential -->\n<vsan-default-prompt\n      [title]=\"'vsan.cluster.hci.configureHciCluster.wizard.dvsConfig.existingNetworkSelectorDialog.dvpgTitle' | localized\"\n      (onConfirm)=\"onOkClicked()\">\n   <div class=\"dialog-container\">\n      <span>{{\"vsan.cluster.hci.configureHciCluster.wizard.dvsConfig.existingNetworkSelectorDialog.existingDvpgText\" | localized}}</span>\n      <!--Existing DVPG datagrid-->\n      <clr-datagrid [clrDgLoading]=\"isLoading\" [(clrDgSingleSelected)]=\"selectedDvpg\"\n                    class= \"existing-dvpg\" [ngClass]=\"{'disable-action': newDvpgSelection}\">\n         <clr-dg-column [clrDgField]=\"'name'\">\n            {{\"vsan.cluster.hci.configureHciCluster.wizard.dvsConfig.existingNetworkSelectorDialog.grid.nameLabel\" | localized}}\n         </clr-dg-column>\n         <clr-dg-row *clrDgItems=\"let dvpg of existingDvpgList\"\n                     [clrDgItem]=\"dvpg\">\n            <!-- name -->\n            <clr-dg-cell>{{dvpg.name}}</clr-dg-cell>\n         </clr-dg-row>\n         <!--Pagination-->\n         <clr-dg-footer>\n            {{VsanUiUtils.getDatagridFooterLabel(existingDvpgList, pagination, dvpgGridPageSize)}}\n            <clr-dg-pagination #pagination [clrDgPageSize]=\"10\"></clr-dg-pagination>\n         </clr-dg-footer>\n      </clr-datagrid>\n      <!--Select new DVPG checkbox-->\n      <div class=\"checkbox-inline\">\n         <input id=\"configure-hci-existing-network-list-new-network\"\n                type=\"checkbox\"\n                [(ngModel)]=\"newDvpgSelection\">\n         <label for=\"configure-hci-existing-network-list-new-network\">\n            {{\"vsan.cluster.hci.configureHciCluster.wizard.dvsConfig.existingNetworkSelectorDialog.newDvpgLabel\" | localized}}\n         </label>\n      </div>\n   </div>\n</vsan-default-prompt>\n","\nexport interface DvpgData {\n\n   name: string;\n   existingDvpg: any;\n} //class DvpgData\n\nexport module DvpgData{\nexport class Factory {\n\n   static create = (name: string, existingDvpg: any): DvpgData => {\n      return { name: name, existingDvpg: existingDvpg, };\n   }\n\n\n} //class Factory\n\n} //module DvpgData\n","/* Copyright 2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Injectable} from \"@angular/core\";\nimport {ClusterConfigData} from \"@generated/cluster-config-data\";\nimport {ConfigureWizardData} from \"@generated/configure-wizard-data\";\nimport {HciClusterService} from \"@generated/hci-cluster-service\";\nimport {IManagedObject} from \"@service/client/core/imanaged-object.data\";\nimport {ManagedObject} from \"@service/managed-object\";\nimport {tsService} from \"@service/service-metadata\";\nimport {Logger} from \"@util/logger\";\nimport {VsanQuickstartUtil} from \"@util/vsan-quickstart-util\";\nimport {SupportInsightConfigurationService} from \"./support-insight-configuration.service\";\n\n@Injectable()\nexport class ConfigureHciService {\n\n   constructor(private supportInsightService: SupportInsightConfigurationService,\n         private hciClusterService: HciClusterService) {\n   }\n\n   @tsService(\"configureHciCluster\")\n   async configureSupportInsight(configureWizardData: ConfigureWizardData,\n         clusterConfigData: ClusterConfigData): Promise<IManagedObject> {\n      // Only save support insight related configurations in cluster creation step\n      if (VsanQuickstartUtil.isHciWorkflowInProgress(clusterConfigData.basicConfig.hciWorkflowState)) {\n         try {\n            await this.supportInsightService.configureSupportInsight(configureWizardData, clusterConfigData);\n         } catch (e) {\n            // Don't break the HCI Configure workflow because of the support insight failure.\n            Logger.warn(e);\n         }\n      }\n      return this.hciClusterService.configureCluster(ManagedObject.contextObject, clusterConfigData);\n   }\n}\n","<!--Copyright 2017-2020 VMware, Inc. All rights reserved. -- VMware Confidential-->\n<form [formGroup]=\"ipv4Settings\" class=\"clr-form clr-form-compact\">\n   <div class=\"clr-form-control clr-row\">\n      <label for=\"ipv4IpType\" class=\"clr-control-label clr-col-4\">\n         {{\"vsan.cluster.hci.configureHciCluster.wizard.networking.ipTypeLabel\" | localized}}\n      </label>\n      <div class=\"clr-control-container clr-col-8\">\n         <div class=\"clr-select-wrapper\">\n            <select id=\"ipv4IpType\"\n                    class=\"clr-select\"\n                    formControlName=\"ipType\">\n               <option value=\"{{IpType.DHCP}}\">\n                  {{\"vsan.cluster.hci.configureHciCluster.wizard.networking.ipType.dhcp\" | localized}}\n               </option>\n               <option value=\"{{IpType.STATIC}}\">\n                  {{\"vsan.cluster.hci.configureHciCluster.wizard.networking.ipType.static\" | localized}}\n               </option>\n            </select>\n         </div>\n      </div>\n   </div>\n   <div [class.disable-action]=\"dhcpOnIpv4\" class=\"ip-static-settings\">\n      <div>{{ipSettingsInfoMessage}}</div>\n      <div formArrayName=\"hostSettings\">\n         <div *ngFor=\"let hostSettings of hostSettings.controls; let i=index\" [formGroupName]=\"i\"\n              class=\"ip-configuration\"\n              role=\"group\"\n              [attr.aria-label]=\"'vsan.cluster.hci.configureHciCluster.wizard.networking.ipv4Label' | localized\">\n            <div vsan-show-title class=\"host-name\">\n               <vsan-icon-item [label]=\"hostSettings.value.name\" [shape]=\"Icon.HOST\"></vsan-icon-item>\n            </div>\n            <div class=\"ip-inputs-container\">\n               <div class=\"clr-control-container\"\n                    [ngClass]=\"{'clr-error' : invalidIpv4Control(i)}\">\n                  <div class=\"clr-input-wrapper\">\n                     <input type=\"text\"\n                            id=\"ipv4-{{i}}\"\n                            class=\"clr-input\"\n                            placeholder=\"{{'vsan.cluster.hci.configureHciCluster.wizard.networking.ipv4Label' | localized}}\"\n                            formControlName=\"ipv4\"\n                            [required]=\"true\"\n                            [attr.aria-describedby]=\"'ipv4-error-'+i\"/>\n                     <clr-icon class=\"clr-validate-icon\"\n                               shape=\"exclamation-circle\"\n                               title=\"{{'vsan.common.srMessage.error' | localized}}\"\n                               [attr.aria-label]=\"'vsan.common.srMessage.error' | localized\">\n                     </clr-icon>\n                     <clr-icon *ngIf=\"!invalidIpv4Control(i)\" shape=\"no-icon\"></clr-icon>\n                  </div>\n                  <span id=\"ipv4-error-{{i}}\" class=\"clr-subtext\" *ngIf=\"invalidIpv4Control(i)\">\n                    <ul [ngClass]=\"getIpv4ControlErrors(i).length > 1 ? 'list' : 'list-unstyled'\">\n                        <li *ngFor=\"let error of getIpv4ControlErrors(i)\">\n                           {{error}}\n                        </li>\n                     </ul>\n                  </span>\n               </div>\n               <div class=\"clr-control-container\"\n                    [ngClass]=\"{'clr-error' : invalidSubnetMaskControl(i)}\">\n                  <div class=\"clr-input-wrapper\">\n                     <input type=\"text\"\n                            id=\"subnetMask-ipv4-{{i}}\"\n                            class=\"clr-input\"\n                            placeholder=\"{{'vsan.cluster.hci.configureHciCluster.wizard.networking.subnetMaskLabel' | localized}}\"\n                            formControlName=\"subnetMask\"\n                            [required]=\"true\"\n                            [attr.aria-describedby]=\"'subnetMask-ipv4-error-'+i\"/>\n                     <clr-icon class=\"clr-validate-icon\"\n                               shape=\"exclamation-circle\"\n                               title=\"{{'vsan.common.srMessage.error' | localized}}\"\n                               [attr.aria-label]=\"'vsan.common.srMessage.error' | localized\">\n                     </clr-icon>\n                     <clr-icon *ngIf=\"!invalidSubnetMaskControl(i)\" shape=\"no-icon\"></clr-icon>\n                  </div>\n                  <span id=\"subnetMask-ipv4-error-{{i}}\" class=\"clr-subtext\" *ngIf=\"invalidSubnetMaskControl(i)\">\n                    <ul [ngClass]=\"getSubnetMaskControlErrors(i).length > 1 ? 'list' : 'list-unstyled'\">\n                        <li *ngFor=\"let error of getSubnetMaskControlErrors(i)\">\n                           {{error}}\n                        </li>\n                     </ul>\n                  </span>\n               </div>\n               <div class=\"clr-control-container\"\n                    *ngIf=\"showDefaultGateway\"\n                    [ngClass]=\"{'clr-error' : invalidGatewayControl(i)}\">\n                  <div class=\"clr-input-wrapper\">\n                     <input type=\"text\"\n                            id=\"gateway-ipv4-{{i}}\"\n                            placeholder=\"{{'vsan.cluster.hci.configureHciCluster.wizard.networking.gateway' | localized}}\"\n                            formControlName=\"gateway\"\n                            class=\"clr-input\"\n                            [attr.aria-describedby]=\"'gateway-ipv4-error-'+i\"/>\n                     <clr-icon class=\"clr-validate-icon\"\n                               shape=\"exclamation-circle\"\n                               title=\"{{'vsan.common.srMessage.error' | localized}}\"\n                               [attr.aria-label]=\"'vsan.common.srMessage.error' | localized\">\n                     </clr-icon>\n                     <clr-icon *ngIf=\"!invalidGatewayControl(i)\" shape=\"no-icon\"></clr-icon>\n                  </div>\n                  <span id=\"gateway-ipv4-error-{{i}}\" class=\"clr-subtext\" *ngIf=\"invalidGatewayControl(i)\">\n                    <ul [ngClass]=\"getGatewayControlErrors(i).length > 1 ? 'list' : 'list-unstyled'\">\n                        <li *ngFor=\"let error of getGatewayControlErrors(i)\">\n                           {{error}}\n                        </li>\n                     </ul>\n                  </span>\n               </div>\n               <!-- use div wrapper to reserve the space for the rows without a button-->\n               <div class=\"clr-control-container\">\n                  <button *ngIf=\"hosts.length > 1 && i === 0\"\n                          class=\"btn btn-link ipv4-page-autofill\"\n                          [disabled]=\"!validAutofillControl(i) || requestingData\"\n                          (click)=\"autoFillAddresses()\">\n                     {{\"vsan.cluster.hci.configureHciCluster.wizard.networking.ipv4Tab.autoFillButton\" | localized}}\n                  </button>\n               </div>\n            </div>\n         </div>\n      </div>\n   </div>\n</form>\n","<!--Copyright 2017-2020 VMware, Inc. All rights reserved. -- VMware Confidential-->\n<form [formGroup]=\"ipv6Settings\" class=\"clr-form clr-form-compact\">\n   <div class=\"clr-form-control clr-row\">\n      <label for=\"ipv6IpType\" class=\"clr-control-label clr-col-md-4\">\n         {{\"vsan.cluster.hci.configureHciCluster.wizard.networking.ipTypeLabel\" | localized}}\n      </label>\n      <div class=\"clr-control-container clr-col-md-8\">\n         <div class=\"clr-select-wrapper\">\n            <select id=\"ipv6IpType\"\n                    class=\"clr-select\"\n                    formControlName=\"ipType\">\n               <option value=\"{{IpType.DHCP}}\">\n                  {{\"vsan.cluster.hci.configureHciCluster.wizard.networking.ipType.dhcp\" | localized}}\n               </option>\n               <option value=\"{{IpType.ROUTER_ADVERTISEMENT}}\">\n                  {{\"vsan.cluster.hci.configureHciCluster.wizard.networking.ipType.routerAdvertisement\" | localized}}\n               </option>\n               <option value=\"{{IpType.STATIC}}\">\n                  {{\"vsan.cluster.hci.configureHciCluster.wizard.networking.ipType.static\" | localized}}\n               </option>\n            </select>\n         </div>\n      </div>\n   </div>\n   <div [class.disable-action]=\"disabledStaticIpv6\" class=\"ip-static-settings\">\n      <div>{{ipSettingsInfoMessage}}</div>\n      <div formArrayName=\"hostSettings\">\n         <div *ngFor=\"let hostSettings of hostSettings.controls; let i=index\" [formGroupName]=\"i\"\n              class=\"ip-configuration\"\n              role=\"group\"\n              [attr.aria-label]=\"'vsan.cluster.hci.configureHciCluster.wizard.networking.ipv6Label' | localized\">\n            <div vsan-show-title class=\"host-name\">\n               <vsan-icon-item [label]=\"hostSettings.value.name\" [shape]=\"Icon.HOST\"></vsan-icon-item>\n            </div>\n            <div class=\"ip-inputs-container\">\n               <div class=\"clr-control-container\"\n                    [ngClass]=\"{'clr-error' : invalidIpv6Control(i)}\">\n                  <div class=\"clr-input-wrapper\">\n                     <input type=\"text\"\n                            id=\"ipv6-{{i}}\"\n                            class=\"clr-input\"\n                            placeholder=\"{{'vsan.cluster.hci.configureHciCluster.wizard.networking.ipv6Label' | localized}}\"\n                            formControlName=\"ipv6\"\n                            [attr.aria-describedby]=\"'ipv6-error-'+i\"/>\n                     <clr-icon class=\"clr-validate-icon\"\n                               shape=\"exclamation-circle\"\n                               title=\"{{'vsan.common.srMessage.error' | localized}}\"\n                               [attr.aria-label]=\"'vsan.common.srMessage.error' | localized\">\n                     </clr-icon>\n                     <clr-icon *ngIf=\"!invalidIpv6Control(i)\" shape=\"no-icon\"></clr-icon>\n                  </div>\n                  <span id=\"ipv6-error-{{i}}\" class=\"clr-subtext\" *ngIf=\"invalidIpv6Control(i)\">\n                    <ul [ngClass]=\"getIpv6ControlErrors(i).length > 1 ? 'list' : 'list-unstyled'\">\n                        <li *ngFor=\"let error of getIpv6ControlErrors(i)\">\n                           {{error}}\n                        </li>\n                     </ul>\n                  </span>\n               </div>\n               <div class=\"clr-control-container\"\n                    [class.invalid]=\"invalidPrefixControl(i)\"\n                    [ngClass]=\"{'clr-error' : invalidPrefixControl(i)}\">\n                  <div class=\"clr-input-wrapper\">\n                     <input type=\"text\"\n                            id=\"prefix-{{i}}\"\n                            class=\"clr-input prefix-input\"\n                            size=\"5\"\n                            placeholder=\"{{'vsan.cluster.hci.configureHciCluster.wizard.networking.prefixLabel' | localized}}\"\n                            formControlName=\"prefix\"\n                            [attr.aria-describedby]=\"'prefix-error-'+i\"/>\n                     <clr-icon class=\"clr-validate-icon\"\n                               shape=\"exclamation-circle\"\n                               title=\"{{'vsan.common.srMessage.error' | localized}}\"\n                               [attr.aria-label]=\"'vsan.common.srMessage.error' | localized\">\n                     </clr-icon>\n                     <clr-icon *ngIf=\"!invalidPrefixControl(i)\" shape=\"no-icon\"></clr-icon>\n                  </div>\n                  <span id=\"prefix-error-{{i}}\" class=\"clr-subtext\" *ngIf=\"invalidPrefixControl(i)\">\n                       <ul [ngClass]=\"getPrefixControlErrors(i).length > 1 ? 'list' : 'list-unstyled'\">\n                           <li *ngFor=\"let error of getPrefixControlErrors(i)\">\n                              {{error}}\n                           </li>\n                        </ul>\n                  </span>\n               </div>\n               <div class=\"clr-control-container\"\n                    *ngIf=\"showDefaultGateway\"\n                    [ngClass]=\"{'clr-error' : invalidGatewayControl(i)}\">\n                  <div class=\"clr-input-wrapper\">\n                     <input type=\"text\"\n                            id=\"gateway-ipv6-{{i}}\"\n                            class=\"clr-input\"\n                            placeholder=\"{{'vsan.cluster.hci.configureHciCluster.wizard.networking.gateway' | localized}}\"\n                            formControlName=\"gateway\"\n                            [attr.aria-describedby]=\"'gateway-ipv6-error-'+i\"/>\n                     <clr-icon class=\"clr-validate-icon\"\n                               shape=\"exclamation-circle\"\n                               title=\"{{'vsan.common.srMessage.error' | localized}}\"\n                               [attr.aria-label]=\"'vsan.common.srMessage.error' | localized\">\n                     </clr-icon>\n                     <clr-icon *ngIf=\"!invalidGatewayControl(i)\" shape=\"no-icon\"></clr-icon>\n                  </div>\n                  <span id=\"gateway-ipv6-error-{{i}}\" class=\"clr-subtext\" *ngIf=\"invalidGatewayControl(i)\">\n                        <ul [ngClass]=\"getGatewayControlErrors(i).length > 1 ? 'list' : 'list-unstyled'\">\n                           <li *ngFor=\"let error of getGatewayControlErrors(i)\">\n                              {{error}}\n                           </li>\n                        </ul>\n                  </span>\n               </div>\n            </div>\n         </div>\n      </div>\n   </div>\n</form>\n","/* Copyright 2017-2022 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, OnInit} from \"@angular/core\";\nimport {AutoClaimSummaryData} from \"@component/diskmgmt/model/auto-claim-summary.data\";\nimport {DisksClaimingConfigInfo} from \"@component/diskmgmt/model/disks-claiming-config-info.data\";\nimport {InputProperty, OutputProperty, WizardPage} from \"@component/wizard/flow-metadata\";\nimport {OnValidate, PageControls} from \"@component/wizard/flow-wizard.component\";\nimport {PageItem} from \"@component/wizard/page-item\";\nimport {DiskManagementService} from \"@generated/disk-management-service\";\nimport {SpaceEfficiencyConfig} from \"@generated/space-efficiency-config\";\nimport {VsanClaimDisksData} from \"@generated/vsan-claim-disks-data\";\nimport {VsanClaimHostDiskMappingsSpec} from \"@generated/vsan-claim-host-disk-mappings-spec\";\nimport {VsanConfigSpec} from \"@generated/vsan-config-spec\";\nimport {DiskMgmtUtil} from \"@util/disk-mgmt.util\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\n\n@WizardPage(\n      VsanUiUtils.getString(\"vsan.configure.claimDisksPage.title\"),\n      VsanUiUtils.getString(\"vsan.configure.claimDisksPage.description\"),\n      [DiskManagementService],\n)\n@Component({\n   templateUrl: \"claim-disks-page.html\",\n   styleUrls: [\"claim-disks-page.scss\"],\n})\nexport class HciClaimDisksPage implements OnInit, OnValidate {\n\n   @InputProperty()\n   pageControls: PageControls;\n\n   @InputProperty()\n   @OutputProperty()\n   vsanConfigSpec: VsanConfigSpec;\n\n   private _hostsClaimingData: Map<string, VsanClaimDisksData>;\n\n   get hostsClaimingData(): Map<string, VsanClaimDisksData> {\n      return this._hostsClaimingData;\n   }\n\n   @InputProperty()\n   set hostsClaimingData(value: Map<string, VsanClaimDisksData>) {\n      this._hostsClaimingData = new Map<string, VsanClaimDisksData>(Object.entries(value));\n   }\n\n   @OutputProperty()\n   isAutoClaim: boolean = false;\n\n   @OutputProperty()\n   disksClaimingConfigInfo: DisksClaimingConfigInfo;\n\n   @OutputProperty()\n   autoClaimedDisks: AutoClaimSummaryData;\n\n   isAutoClaimAllowed: boolean = false;\n   dataEfficiency: SpaceEfficiencyConfig;\n   isConfigAcceptable: boolean;\n   // Set to \"true\" when disk data for manual claiming is collected\n   private isManualClaimDiskDataLoaded: boolean = false;\n\n   ngOnInit(): void {\n      this.dataEfficiency = this.vsanConfigSpec.spaceEfficiencyConfig;\n      // Set auto claim ON for vsan MAX, when there are compatible disks\n      this.isAutoClaimAllowed = DiskMgmtUtil.hasVsanMaxCompatibleDisks([...this.hostsClaimingData?.values()]);\n      this.isAutoClaim = this.vsanConfigSpec.isVsanMaxEnabled && this.isAutoClaimAllowed;\n      // Disable the next button, when manual claim mode page is loaded initially\n      // as it loads some more data upon initialization.\n      if (!this.isAutoClaim) {\n         this.disableNextButton();\n      }\n   }\n\n   validate(): string[] {\n      if (!this.isConfigAcceptable) {\n         return [VsanUiUtils.getString(\"vsan.dialog.semiAutoClaimDialog.confError.notAcceptableErrors\")];\n      }\n\n      return null;\n   }\n\n   onConfigChange(diskMappings: VsanClaimHostDiskMappingsSpec[]): void {\n      this.vsanConfigSpec.diskMappings = diskMappings;\n      this.pageControls.rebuildToc();\n      (this.pageControls as PageItem).nextButtonIsDisabled = false;\n      this.isManualClaimDiskDataLoaded = true;\n   }\n\n   onIsAutoClaimChange(): void {\n      this.vsanConfigSpec.isDiskClaimVsanManaged = this.isAutoClaim;\n      // Disable Next button on initial switch between auto/manual claim if the manual claim disk data is not yet collected.\n      if (!this.isManualClaimDiskDataLoaded && !this.isAutoClaim) {\n         this.disableNextButton();\n      }\n   }\n\n   onDisksClaimingConfigChange(disksClaimingConfig: DisksClaimingConfigInfo): void {\n      this.disksClaimingConfigInfo = disksClaimingConfig;\n   }\n\n   onAutoClaimedDisksChange(autoClaimedDisks: AutoClaimSummaryData): void {\n      this.autoClaimedDisks = autoClaimedDisks;\n   }\n\n   private disableNextButton(): void {\n      (this.pageControls as PageItem).nextButtonIsDisabled = true;\n   }\n}\n","<!-- Copyright 2017-2021 VMware, Inc. All rights reserved. -- VMware Confidential -->\n<!-- Networking config -->\n<ng-container *ngIf=\"!clusterConfigData.optOutOfNetConfig\">\n   <ng-container *ngIf=\"!configureWizardData.isExtend\">\n      <h6>\n         {{\"vsan.cluster.hci.configureHciCluster.wizard.rtc.networking.physicalNetworksLabel\" | localized}}\n      </h6>\n      <div class=\"desc-text\">{{physicalNetworksDescription}}</div>\n   </ng-container>\n   <ng-container *ngIf=\"configureWizardData.showVmotionTrafficPage && clusterConfigData.basicConfig.drsEnabled\">\n      <h6>\n         {{\"vsan.cluster.hci.configureHciCluster.wizard.rtc.networking.vmotionTrafficLabel\" | localized}}\n      </h6>\n      <div class=\"desc-text\">{{vmotionDescription}}</div>\n   </ng-container>\n\n   <ng-container *ngIf=\"configureWizardData.showVsanTrafficPage && clusterConfigData.basicConfig.vsanEnabled\">\n      <h6>\n         {{\"vsan.cluster.hci.configureHciCluster.wizard.rtc.networking.storageTrafficLabel\" | localized}}\n      </h6>\n      <div class=\"desc-text\">{{storageDescription}}</div>\n   </ng-container>\n</ng-container>\n\n<!--Advanced options section-->\n<ng-container *ngIf=\"!configureWizardData.isExtend\">\n   <h6>\n      {{\"vsan.cluster.hci.configureHciCluster.wizard.advancedOptionsPage.title\" | localized}}\n   </h6>\n   <div class=\"desc-text\">\n      {{\"vsan.cluster.hci.configureHciCluster.wizard.rtc.options.label\" | localized}}\n   </div>\n   <ul class=\"selected-service-list nested\">\n      <!--Because of the custom list styling always format the list items on a single row in order to avoid unwanted whitespaces-->\n      <li>{{getLockdownModeText()}}</li>\n      <li>{{getNtpServerText()}}</li>\n      <li>{{getEvcModeText()}}</li>\n      <li id=\"host-update-preference-label\" *ngIf=\"clusterConfigData.basicConfig.vsanEnabled\n            && vcCapabilityData.isVumBaselineRecommendationSupported\">{{getHostUpdatePreference()}}</li>\n      <li id=\"host-rdma-communication-label\" *ngIf=\"clusterCapabilityData.isRdmaSupported\">{{getRdmaText()}}</li>\n   </ul>\n</ng-container>\n\n<!--vSAN datastore section-->\n<ng-container *ngIf=\"clusterConfigData.basicConfig.vsanEnabled\">\n   <h6>\n      {{\"vsan.cluster.hci.configureHciCluster.wizard.rtc.vsanDatastore.label\" | localized}}\n   </h6>\n   <div class=\"desc-text\">\n      {{\"vsan.cluster.hci.configureHciCluster.wizard.rtc.vsanDatastore.desc\" |\n         localized : clusterConfigData.basicConfig.totalHosts }}\n   </div>\n   <ng-container *ngIf=\"!clusterConfigData.basicConfig.isVsanMaxEnabled\">\n      <vsan-validation *ngIf=\"disksClaimingConfigInfo.disksNotEquallySpread\"\n                       alertType=\"warning\"\n                       [alert]=\"'vsan.cluster.configure.summary.semiAutoClaimDialog.warning.notOptimumSelection' | localized\"\n                       [isSmall]=\"true\"\n                       [allowClose]=\"false\" >\n      </vsan-validation>\n      <vsan-validation *ngIf=\"disksClaimingConfigInfo.mixedDiskClaiming\"\n                       alertType=\"warning\"\n                       [alert]=\"'vsan.cluster.configure.summary.semiAutoClaimDialog.warning.mixedCreateEditMode' | localized\"\n                       [isSmall]=\"true\"\n                       [allowClose]=\"false\" >\n      </vsan-validation>\n      <div class=\"nested\">\n         <label class=\"summary-label\">{{\"vsan.cluster.configure.summary.diskClaiming\" | localized}}</label>\n         <span class=\"summary-value\">\n            {{getClaimedDisksType()}}\n         </span>\n         <label class=\"summary-label\">\n            {{\"vsan.cluster.hci.configureHciCluster.wizard.rtc.vsanDatastore.cacheSize.label\" | localized}}\n         </label>\n         <span class=\"summary-value\">{{getClaimedCapacity(ClaimOption.ClaimForCache)}}</span>\n         <label class=\"summary-label\">\n            {{\"vsan.cluster.hci.configureHciCluster.wizard.rtc.vsanDatastore.capacitySize.label\" | localized}}\n         </label>\n         <span class=\"summary-value\">{{getClaimedCapacity(ClaimOption.ClaimForStorage)}}</span>\n      </div>\n   </ng-container>\n   <div *ngIf=\"clusterConfigData.basicConfig.isVsanMaxEnabled\" class=\"nested\">\n      <label class=\"summary-label\">\n         {{\"vsan.cluster.hci.configureHciCluster.wizard.rtc.vsanMaxDatastore.capacitySize.label\" | localized}}\n      </label>\n      <span class=\"summary-value\">{{getClaimedCapacity(ClaimOption.SingleTier)}}</span>\n      <label class=\"summary-label\">\n         {{\"vsan.cluster.hci.configureHciCluster.wizard.rtc.vsanMaxDatastore.claimedDisks.label\" | localized}}\n      </label>\n      <span class=\"summary-value\" *ngIf=\"vsanMaxClaimOptions.length || isAutoClaim\">\n         {{\"vsan.cluster.hci.configureHciCluster.wizard.rtc.vsanMaxDatastore.claimedDisks.value\" | localized\n               : getClaimedDiskCount(ClaimOption.SingleTier)\n               : getClaimLabel()\n         }}\n      </span>\n      <span class=\"summary-value\" *ngIf=\"!vsanMaxClaimOptions.length && !isAutoClaim\">\n         {{\"vsan.cluster.configure.summary.diskClaiming.noDiskClaimed\" | localized}}\n      </span>\n   </div>\n</ng-container>\n\n<ng-container *ngIf=\"clusterConfigData.basicConfig.vsanEnabled && vsanDirectClaimOptions.length\">\n   <h6>\n      {{\"vsan.cluster.hci.configureHciCluster.wizard.rtc.vsanDirectDatastore.label\" | localized}}\n   </h6>\n   <div class=\"nested\">\n      <ng-container *ngFor=\"let claimOption of vsanDirectClaimOptions\">\n         <label class=\"summary-label\">\n            {{\"vsan.cluster.hci.configureHciCluster.wizard.rtc.vsanDirectDatastore.capacitySize.label\" | localized}}\n         </label>\n         <span class=\"summary-value\">{{getClaimedCapacity(claimOption)}}</span>\n      </ng-container>\n   </div>\n</ng-container>\n\n<ng-container *ngIf=\"clusterConfigData.basicConfig.vsanEnabled && pmemClaimOptions.length\">\n   <h6>\n      {{\"vsan.cluster.hci.configureHciCluster.wizard.rtc.pmem.label\" | localized}}\n   </h6>\n   <div class=\"nested\">\n      <ng-container *ngFor=\"let claimOption of pmemClaimOptions\">\n         <label class=\"summary-label\">\n            {{\"vsan.cluster.hci.configureHciCluster.wizard.rtc.pmem.capacitySize.label\" | localized}}\n         </label>\n         <span class=\"summary-value\"> {{getClaimedCapacity(claimOption)}}</span>\n      </ng-container>\n   </div>\n</ng-container>\n\n<!--cluster services section-->\n<ng-container *ngIf=\"hasEnabledServices()\">\n   <h6>{{\"manage.vsan.general\" | localized}}</h6>\n   <div class=\"desc-text\">{{\"vsan.cluster.hci.configureHciCluster.wizard.rtc.services.label\" | localized}}</div>\n   <div class=\"nested\">\n      <ul class=\"selected-service-list\">\n         <li id=\"drs-configuration-section\" *ngIf=\"clusterConfigData.basicConfig.drsEnabled\">\n            {{\"vsan.cluster.hci.configureHciCluster.wizard.rtc.services.drs.label\" | localized }}\n         </li>\n         <li id=\"ha-configuration-section\" *ngIf=\"clusterConfigData.basicConfig.haEnabled\">\n            {{\"vsan.cluster.hci.configureHciCluster.wizard.rtc.services.ha.label\" | localized}}\n         </li>\n         <ng-container *ngIf=\"clusterConfigData.basicConfig.vsanEnabled\">\n            <li id=\"vsan-data-at-rest-encryption-section\"\n                *ngIf=\"clusterConfigData.vsanConfigSpec.enableDataAtRestEncryption\">\n               {{\"vsan.cluster.hci.configureHciCluster.wizard.rtc.services.dataAtRestEncryption.label\" | localized}}\n            </li>\n            <li id=\"vsan-data-in-transition-encryption-section\"\n                *ngIf=\"clusterConfigData.vsanConfigSpec.enableDataInTransitEncryption\">\n               {{\"vsan.cluster.hci.configureHciCluster.wizard.rtc.services.dataInTransitEncryption.label\" | localized}}\n            </li>\n            <li id=\"vsan-space-efficiency\"\n                *ngIf=\"clusterConfigData.vsanConfigSpec.spaceEfficiencyConfig !== SpaceEfficiencyConfig.NONE\">\n               {{spaceEfficiencyLabel}}\n            </li>\n            <li id=\"vsan-fault-domain-section\" *ngIf=\"isStretchedCluster || displaySingleSiteFaultDomainNames\">\n               <ng-container *ngIf=\"isStretchedCluster\">\n                  <span class=\"desc-text\">\n                     {{\"vsan.cluster.hci.configureHciCluster.wizard.rtc.services.faultDomain.label\" | localized}}\n                  </span>\n                  <div class=\"nested\">\n                     <label class=\"summary-label\">\n                        {{\"vsan.faultDomains.stretchedCluster.wizard.configure.page.summary.preferredName\" | localized}}\n                     </label>\n                     <span id=\"preferred-domain-name\" class=\"summary-value\">{{preferredName}}</span>\n                     <label class=\"summary-label\">\n                        {{\"vsan.faultDomains.stretchedCluster.wizard.configure.page.summary.preferredHosts\" | localized}}\n                     </label>\n                     <span id=\"preferred-domain-hosts-list\" class=\"summary-value\">\n                        <div *ngFor=\"let host of preferredHosts; let i = index\">{{host.label}}</div>\n                     </span>\n                     <label class=\"summary-label\">\n                        {{\"vsan.faultDomains.stretchedCluster.wizard.configure.page.summary.secondaryName\" | localized}}\n                     </label>\n                     <span id=\"secondary-domain-name\" class=\"summary-value\">{{secondaryName}}</span>\n                        <label class=\"summary-label\">\n                           {{\"vsan.faultDomains.stretchedCluster.wizard.configure.page.summary.secondaryHosts\" | localized}}\n                        </label>\n                        <span id=\"secondary-domain-host-list\" class=\"summary-value\">\n                        <div *ngFor=\"let host of secondaryHosts; let i = index\">{{host.label}}</div>\n                   </span>\n                     <label class=\"summary-label\">\n                        {{\"vsan.faultDomains.stretchedCluster.wizard.configure.page.summary.witnessHost\" | localized}}\n                     </label>\n                     <span id=\"witness-host-name\" class=\"summary-value\">{{witnessHostName}}</span>\n                  </div>\n               </ng-container>\n               <ng-container *ngIf=\"displaySingleSiteFaultDomainNames\">\n                  <span>\n                     {{\"vsan.cluster.hci.configureHciCluster.wizard.rtc.services.faultDomain.label\" | localized}}\n                  </span>\n                  <div id=\"fault-domain-{{i}}\" class=\"nested\" *ngFor=\"let domain of faultDomainNames; let i = index\">\n                     {{domain}}\n                  </div>\n               </ng-container>\n            </li>\n            <li id=\"vsan-large-scale-cluster-support-section\"\n                *ngIf=\"vsanConfigSpec.advancedOptions?.largeClusterSupportEnabled\">\n               {{\"vsan.cluster.configure.wizard.advancedOptions.vsan.largeClusters.label\" | localized}}\n            </li>\n            <li id=\"vsan-support-insight-section\" *ngIf=\"hasSupportInsightConfiguration\">\n                <span class=\"desc-text\">\n                   {{\"vsan.cluster.hci.configureHciCluster.dialog.supportInsight.tab.title\" | localized}}\n                </span>\n               <div *ngIf=\"configureWizardData.proxySettingsConfig?.enableInternetAccess\" class=\"nested\">\n                  <div>\n                     {{\"vsan.cluster.hci.configureHciCluster.wizard.rtc.services.supportInsight.internet.label\" | localized}}\n                  </div>\n                  <ng-container *ngIf=\"configureWizardData.proxySettingsConfig.hostName\">\n                     <label class=\"summary-label\">\n                        {{\"vsan.manage.externalProxySettings.action.edit.hostName\" | localized}}\n                     </label>\n                     <span id=\"proxy-host-name\" class=\"summary-value\">\n                       {{configureWizardData.proxySettingsConfig.hostName}}\n                    </span>\n                  </ng-container>\n                  <ng-container *ngIf=\"configureWizardData.proxySettingsConfig.port\">\n                     <label class=\"summary-label\">\n                        {{\"vsan.manage.externalProxySettings.action.edit.port\" | localized}}\n                     </label>\n                     <span id=\"proxy-host-port\" class=\"summary-value\">\n                       {{configureWizardData.proxySettingsConfig.port}}\n                    </span>\n                  </ng-container>\n               </div>\n            </li>\n         </ng-container>\n      </ul>\n   </div>\n</ng-container>\n","<!--Copyright 2018-2021 VMware, Inc. All rights reserved. -- VMware Confidential-->\n<div *ngIf=\"!dataLoaded\" class=\"spinner central-spinner\"></div>\n<vsan-flow-wizard *ngIf=\"dataLoaded\"\n                  [title]=\"'vsan.cluster.hci.configureHciCluster.wizard.title' | localized\"\n                  [pageSets]=\"pages\"\n                  [contextProperties]=\"context\"\n                  [startingTaskProperty]=\"'configureHciCluster'\"\n                  [services]=\"services\">\n</vsan-flow-wizard>","<!-- Copyright 2018-2022 VMware, Inc. All rights reserved. -- VMware Confidential -->\n<vsan-default-prompt\n      [title]=\"'vsan.cluster.hci.configureHciCluster.wizard.dvsConfig.existingNetworkSelectorDialog.dvsTitle' | localized\"\n      [blockButton]=\"noDvsSelected\"\n      (onConfirm)=\"onOkClicked()\"\n      class=\"existing-dvs-selector-dialog\">\n   <div class=\"dialog-container\">\n      <!-- Alert shown if duplicate DVS is selected-->\n      <vsan-validation id=\"duplicate-dvs-error\"\n                       *ngIf=\"alertMessage\"\n                       [alert]=\"alertMessage\"\n                       [allowClose]=\"false\">\n      </vsan-validation>\n      <span>{{\"vsan.cluster.hci.configureHciCluster.wizard.dvsConfig.existingNetworkSelectorDialog.existingDvsText\" | localized}}</span>\n      <!--Existing DVS datagrid-->\n      <clr-datagrid [clrDgLoading]=\"isLoading\"\n                    [(clrDgSingleSelected)]=\"selectedDvs\"\n                    [ngClass]=\"{'disable-action': newDvsSelection}\">\n         <clr-dg-column [clrDgField]=\"'name'\" class=\"name-column\">\n            {{\"vsan.cluster.hci.configureHciCluster.wizard.dvsConfig.existingNetworkSelectorDialog.grid.nameLabel\" | localized}}\n         </clr-dg-column>\n         <clr-dg-column [clrDgField]=\"'version'\"  class=\"version-column\">\n            {{\"vsan.cluster.hci.configureHciCluster.wizard.dvsConfig.existingNetworkSelectorDialog.grid.versionLabel\" | localized}}\n         </clr-dg-column>\n         <clr-dg-column [clrDgField]=\"'niocVersion'\" class=\"nioc-column\">\n            {{\"vsan.cluster.hci.configureHciCluster.wizard.dvsConfig.existingNetworkSelectorDialog.grid.niocVersionLabel\" | localized}}\n         </clr-dg-column>\n         <clr-dg-column [clrDgField]=\"'lacpVersion'\" class=\"lacp-column\">\n            {{\"vsan.cluster.hci.configureHciCluster.wizard.dvsConfig.existingNetworkSelectorDialog.grid.lapVersionLabel\" | localized}}\n         </clr-dg-column>\n         <clr-dg-row *clrDgItems=\"let dvs of existingDvsList\" [clrDgItem]=\"dvs\">\n            <!-- name -->\n            <clr-dg-cell vsan-show-title>{{dvs.name}}</clr-dg-cell>\n            <!-- version -->\n            <clr-dg-cell>{{dvs.version}}</clr-dg-cell>\n            <!-- NIOC version -->\n            <clr-dg-cell>{{dvs.niocVersion}}</clr-dg-cell>\n            <!-- LACP version -->\n            <clr-dg-cell>{{dvs.lacpVersion}}</clr-dg-cell>\n         </clr-dg-row>\n\n         <!--Pagination-->\n         <clr-dg-footer>\n            {{VsanUiUtils.getDatagridFooterLabel(existingDvsList, pagination, dvsGridPageSize)}}\n            <clr-dg-pagination #pagination [clrDgPageSize]=\"10\"></clr-dg-pagination>\n         </clr-dg-footer>\n      </clr-datagrid>\n      <!--Select new DVS checkbox-->\n      <clr-checkbox-wrapper>\n         <input id=\"configure-hci-existing-network-list-new-network\"\n                clrCheckbox\n                type=\"checkbox\"\n                [(ngModel)]=\"newDvsSelection\"/>\n         <label for=\"configure-hci-existing-network-list-new-network\">\n            {{\"vsan.cluster.hci.configureHciCluster.wizard.dvsConfig.existingNetworkSelectorDialog.newDvsLabel\" | localized}}\n         </label>\n      </clr-checkbox-wrapper>\n   </div>\n</vsan-default-prompt>\n","/* Copyright 2018-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component} from \"@angular/core\";\nimport {InputProperty, OutputProperty, WizardPage} from \"@component/wizard/flow-metadata\";\nimport {PageControls} from \"@component/wizard/flow-wizard.component\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {ConfigureWizardData} from \"@generated/configure-wizard-data\";\n\n@WizardPage(\n      VsanUiUtils.getString(\"vsan.cluster.hci.configureHciCluster.dialog.supportInsight.tab.title\"),\n      VsanUiUtils.getString(\"vsan.cluster.hci.configureHciCluster.dialog.supportInsight.title\"),\n)\n@Component({\n   templateUrl: \"support-insight-page.html\",\n   styleUrls: [\"support-insight-page.scss\"],\n})\nexport class SupportInsightPageComponent {\n\n   @InputProperty()\n   pageControls: PageControls;\n\n   @InputProperty()\n   @OutputProperty()\n   configureWizardData: ConfigureWizardData;\n\n   private _hideSupportInsight: boolean;\n\n   get hideSupportInsight(): boolean {\n      return this._hideSupportInsight;\n   }\n\n   set hideSupportInsight(value: boolean) {\n      this._hideSupportInsight = value;\n      this.configureWizardData.isSupportInsightStepHidden = value;\n      this.pageControls.rebuildToc();\n   }\n\n   private _disableSupportInsight: boolean = false;\n\n   get disableSupportInsight(): boolean {\n      return this._disableSupportInsight;\n   }\n\n   set disableSupportInsight(val: boolean) {\n      this._disableSupportInsight = val;\n      this.configureWizardData.disableSupportInsight = val;\n      // The hide checkbox only makes sense if the service is disabled, so reset it's state if it is enabled.\n      if (!val) {\n         this.hideSupportInsight = false;\n      }\n      this.pageControls.rebuildToc();\n   }\n}","<!--Copyright 2017-2020 VMware, Inc. All rights reserved. -- VMware Confidential-->\n<form [formGroup]=\"form\" class=\"clr-form clr-form-compact\" data-test-id=\"general-settings-container\">\n   <div class=\"clr-form-control clr-row\">\n      <label for=\"dsName-{{service}}\" class=\"clr-control-label clr-col-4\">\n         {{\"vsan.cluster.hci.configureHciCluster.wizard.networking.distributedSwitchLabel\" | localized}}\n      </label>\n      <span id=\"dsName-{{service}}\" class=\"text-nowrap clr-col-8\" title=\"{{dsName}}\">\n         {{dsName}}\n      </span>\n   </div>\n   <div class=\"clr-form-control clr-row\" *ngIf=\"!isExtend\">\n      <label class=\"clr-control-label clr-col-4\">\n         {{\"vsan.cluster.hci.configureHciCluster.wizard.networking.distributedPortGroupLabel\" | localized}}\n      </label>\n      <span id=\"dvpgName-{{service}}\" class=\"text-nowrap clr-col-8\" title=\"{{dvpg.name}}\">\n         {{dvpg.name}}\n      </span>\n   </div>\n\n   <div *ngIf=\"isExtend || dvpg?.existingDvpg\" class=\"clr-row\">\n      <div id=\"extend-cluster-networking-vlan-id-label\" class=\"clr-col-4\">\n         {{vlanLabel}}\n      </div>\n      <div id=\"vlan-id-value\" class=\"clr-col-8\">{{vlanId}}</div>\n   </div>\n   <ng-container *ngIf=\"!isExtend && !dvpg?.existingDvpg\">\n      <div class=\"clr-form-control clr-row\">\n         <div class=\"clr-checkbox-wrapper clr-col-4\">\n            <input id=\"useVlan-{{service}}\"\n                   formControlName=\"useVlan\"\n                   class=\"clr-checkbox\"\n                   type=\"checkbox\"\n                   (change)=\"disableVlanInput()\">\n            <label for=\"useVlan-{{service}}\">\n               {{\"vsan.cluster.hci.configureHciCluster.wizard.networking.useVlanLabel\" | localized}}\n            </label>\n         </div>\n         <div class=\"clr-control-container clr-col-8 error-control\"\n              [ngClass]=\"{'clr-error' : invalid(vlan)}\">\n            <div class=\"clr-input-wrapper\">\n               <input type=\"text\"\n                      id=\"vlan-{{service}}\"\n                      class=\"clr-input\"\n                      formControlName=\"vlan\"\n                      [required]=\"useVlan\"\n                      size=\"4\"\n                      [attr.aria-describedby]=\"'vlan-'+service+'-error'\"/>\n               <clr-icon class=\"clr-validate-icon\"\n                         shape=\"exclamation-circle\"\n                         title=\"{{'vsan.common.srMessage.error' | localized}}\"\n                         [attr.aria-label]=\"'vsan.common.srMessage.error' | localized\">\n               </clr-icon>\n            </div>\n            <span id=\"vlan-{{service}}-error\" class=\"clr-subtext\" *ngIf=\"invalid(vlan)\">\n              {{'vsan.cluster.hci.configureHciCluster.wizard.networking.useVlan.wrongInput' | localized}}\n            </span>\n         </div>\n      </div>\n   </ng-container>\n   <div class=\"clr-form-control clr-row\">\n      <label for=\"protocol-{{service}}\" class=\"clr-control-label clr-col-4\">\n         {{\"vsan.cluster.hci.configureHciCluster.wizard.networking.protocolLabel\" | localized}}\n      </label>\n      <div class=\"clr-control-container clr-col-8\">\n         <div class=\"clr-select-wrapper\">\n            <select id=\"protocol-{{service}}\" formControlName=\"protocol\" class=\"clr-select\">\n               <option value=\"{{Protocol.IPV4}}\">\n                  {{\"vsan.cluster.hci.configureHciCluster.wizard.networking.protocolOption.ipv4\" | localized}}\n               </option>\n               <option value=\"{{Protocol.IPV6}}\">\n                  {{\"vsan.cluster.hci.configureHciCluster.wizard.networking.protocolOption.ipv6\" | localized}}\n               </option>\n               <option value=\"{{Protocol.MIXED}}\">\n                  {{\"vsan.cluster.hci.configureHciCluster.wizard.networking.protocolOption.mixed\" | localized}}\n               </option>\n            </select>\n         </div>\n      </div>\n   </div>\n</form>\n\n<clr-tabs data-test-id=\"host-settings-container\" *ngIf=\"showIpv4Tab && !showIpv6Tab\">\n   <clr-tab>\n      <button clrTabLink class=\"btn btn-link ipv4-tab-link\"><!-- keep ipv4-tab-link for automation -->\n         {{'vsan.cluster.hci.configureHciCluster.wizard.networking.ipv4Tab.title' | localized}}\n         <clr-icon *ngIf=\"ipv4TabError\" shape=\"error-standard\" class=\"is-error\"></clr-icon>\n      </button>\n      <clr-tab-content *clrIfActive>\n         <vsan-ipv4-settings [hosts]=\"hosts\"\n                             [pageControls]=\"pageControls\"\n                             [form]=\"form\"\n                             [showDefaultGateway]=\"showDefaultGateway\"\n                             [ipSettingsInfoMessage]=\"ipSettingsInfoMessage\"\n                             (onFormChange)=\"disableSubsequentPages()\">\n         </vsan-ipv4-settings>\n      </clr-tab-content>\n   </clr-tab>\n</clr-tabs>\n<clr-tabs *ngIf=\"!showIpv4Tab && showIpv6Tab\">\n   <clr-tab>\n      <button clrTabLink class=\"btn btn-link ipv6-tab-link\">\n         {{'vsan.cluster.hci.configureHciCluster.wizard.networking.ipv6Tab.title' | localized}}\n         <clr-icon *ngIf=\"ipv6TabError\" shape=\"error-standard\" class=\"is-error\"></clr-icon>\n      </button>\n      <clr-tab-content *clrIfActive>\n         <vsan-ipv6-settings [hosts]=\"hosts\"\n                             [pageControls]=\"pageControls\"\n                             [form]=\"form\"\n                             [showDefaultGateway]=\"showDefaultGateway\"\n                             [ipSettingsInfoMessage]=\"ipSettingsInfoMessage\"\n                             (onFormChange)=\"disableSubsequentPages()\">\n         </vsan-ipv6-settings>\n      </clr-tab-content>\n   </clr-tab>\n</clr-tabs>\n<clr-tabs *ngIf=\"showIpv4Tab && showIpv6Tab\">\n   <clr-tab>\n      <button clrTabLink class=\"btn btn-link ipv4-tab-link\">\n         {{'vsan.cluster.hci.configureHciCluster.wizard.networking.ipv4Tab.title' | localized}}\n         <clr-icon *ngIf=\"ipv4TabError\" shape=\"error-standard\" class=\"is-error\"></clr-icon>\n      </button>\n      <clr-tab-content *clrIfActive>\n         <vsan-ipv4-settings [hosts]=\"hosts\"\n                             [pageControls]=\"pageControls\"\n                             [form]=\"form\"\n                             [showDefaultGateway]=\"showDefaultGateway\"\n                             [ipSettingsInfoMessage]=\"ipSettingsInfoMessage\"\n                             (onFormChange)=\"disableSubsequentPages()\">\n         </vsan-ipv4-settings>\n      </clr-tab-content>\n   </clr-tab>\n   <clr-tab>\n      <button clrTabLink class=\"btn btn-link ipv6-tab-link\">\n         {{'vsan.cluster.hci.configureHciCluster.wizard.networking.ipv6Tab.title' | localized}}\n         <clr-icon *ngIf=\"ipv6TabError\" shape=\"error-standard\" class=\"is-error\"></clr-icon>\n      </button>\n      <clr-tab-content *clrIfActive>\n         <vsan-ipv6-settings [hosts]=\"hosts\"\n                             [pageControls]=\"pageControls\"\n                             [form]=\"form\"\n                             [showDefaultGateway]=\"showDefaultGateway\"\n                             [ipSettingsInfoMessage]=\"ipSettingsInfoMessage\"\n                             (onFormChange)=\"disableSubsequentPages()\">\n         </vsan-ipv6-settings>\n      </clr-tab-content>\n   </clr-tab>\n</clr-tabs>\n"]}