{"version":3,"sources":["./src/app/vsan/vm/io-diagnostics/io-diagnostics-common.module.ts","./src/app/vsan/common/util/modal-builder.ts","./src/app/vsan/vm/io-diagnostics/action/run-instance-validation.html","./src/app/vsan/common/component/validation/alert-action-link-util.ts","./src/app/vsan/common/util/vsan-dialog-util.ts","./src/app/vsan/vm/io-diagnostics/action/run-instance-validation.ts","./src/app/vsan/vm/io-diagnostics/io-diagnostics.util.ts"],"names":[],"mappings":"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","file":"85-es2015.js","sourcesContent":["/* Copyright 2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {NgModule} from \"@angular/core\";\nimport {RunInstanceValidation} from \"./action/run-instance-validation\";\nimport {ValidationModule} from \"@component/validation/validation.module\";\n\n@NgModule({\n   imports: [\n         ValidationModule,\n   ],\n   declarations: [\n         RunInstanceValidation,\n   ],\n   exports: [\n         ValidationModule,\n         RunInstanceValidation,\n   ],\n})\nexport class IoDiagnosticsCommonModule {\n}","/* Copyright 2017-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {environment} from \"@env/environment\";\nimport {ManagedObject} from \"@service/managed-object\";\nimport {Logger} from \"./logger\";\nimport {WebPlatform} from \"./platform\";\nimport {VsanUiUtils} from \"./vsan-util\";\n\nexport class ModalBuilder {\n\n   static readonly WIDTH: number = 0;\n   static readonly HEIGHT: number = 1;\n\n   static readonly DEFAULT_SIZE: number[] = [1000, 530];\n   static readonly WIZARD_XL: number[] = [1200, 700];\n\n   static readonly APP_URL: string = (environment.repa && environment.repaExtension)\n         ? \"index.html\"\n         : \"/ui/h5-vsan-ui/\";\n\n   private size: number[] = ModalBuilder.DEFAULT_SIZE;\n\n   // When null, the modal dialog will be headless and the docked\n   // view is expected to provide a title bar.\n   private title: string = null;\n\n   private accessibilityTitle: string = null;\n\n   private urlParams: any = {};\n\n   private eventTarget: EventTarget;\n\n   constructor(private appId: string) {\n   }\n\n   setDimensions(dimensions: number[]): ModalBuilder {\n      if (!dimensions || dimensions.length !== 2) {\n         Logger.warn(\"invalid modal dimensions\", dimensions);\n         dimensions = ModalBuilder.DEFAULT_SIZE;\n      }\n      return this.setSize(dimensions[ModalBuilder.WIDTH], dimensions[ModalBuilder.HEIGHT]);\n   }\n\n   setSize(width: number, height: number): ModalBuilder {\n      this.size = [width, height];\n      return this;\n   }\n\n   setUrlParameters(params: any): ModalBuilder {\n      this.urlParams = params;\n      return this;\n   }\n\n   /**\n    * Set to null if the view provides its own title bar\n    */\n   setTitle(title: string): ModalBuilder {\n      this.title = title;\n      return this;\n   }\n\n   setAccessibilityTitle(accessibilityTitle: string): ModalBuilder {\n      this.accessibilityTitle = accessibilityTitle;\n      return this;\n   }\n\n   /**\n    * Set explicit event target if it is changed before opening the modal.\n    * For example when making a preceding request the event target is the XMLHttpRequest object.\n    */\n   setEventTarget(eventTarget: EventTarget): ModalBuilder {\n      this.eventTarget = eventTarget;\n      return this;\n   }\n\n   /**\n    * Opens a modal dialog and returns a promise to collect the result; On close the target element is focused.\n    * @param context - any JS data object, can be retrieved by WebPlatform.getModalContext()\n    * @returns {Promise<any>} - Invoked if the dialog invokes WebPlatform.closeModalDialog(arg)\n    *       with non-null arg. The promise is never rejected.\n    */\n   open(context?: any): Promise<any> {\n      return new Promise<any>((accept) => {\n         VsanUiUtils.pluginContext.targetElement = this.eventTarget ? this.eventTarget :\n               (event && event.target ? event.target : null);\n         VsanUiUtils.pluginContext.modalResultHandler = (data?: any) => {\n            if (typeof data !== \"undefined\") {\n               // Deep copy of the object was required to resolve an issue with object's prototype overriding when\n               // passing complex objects in IE11/Edge; Keep it for safety.\n               accept(JSON.parse(JSON.stringify(data)));\n            } else if (VsanUiUtils.pluginContext.targetElement && VsanUiUtils.pluginContext.targetElement.focus) {\n               // On cancel just focus the target element. Timeout is required as otherwise the focus may be\n               // consumed by the mouse click.\n               setTimeout(() => VsanUiUtils.pluginContext.targetElement.focus(), 100);\n            }\n         };\n\n         let actionUrl: string = `${ModalBuilder.APP_URL}?viewId=${this.appId}`;\n\n         let separator: string = \"?\";\n         for (const param in this.urlParams) {\n            actionUrl += separator + param + \"=\" + this.urlParams[param];\n            separator = \"&\";\n         }\n\n         WebPlatform.openModalDialog(this.title,\n               actionUrl,\n               ManagedObject.contextObjectUid,\n               this.size[0], this.size[1],\n               this.title != null,\n               VsanUiUtils.pluginContext.modalResultHandler /* onClose */,\n               context /* retrieve with Platform.getModalContext() */,\n               this.accessibilityTitle);\n      });\n   }\n\n}\n","<!--Copyright 2021 VMware, Inc. All rights reserved. -- VMware Confidential-->\n<vsan-validation id=\"failed-checks-reasons\"\n                 [alertType]=\"'info'\"\n                 [alerts]=\"getFailedChecksReasons()\"\n                 [actionLinks]=\"getFailedChecksActionLinks()\"\n                 [alertsExpanded]=\"true\"\n                 [allowExpandCollapse]=\"false\"\n                 [allowClose]=\"false\">\n</vsan-validation>","/* Copyright 2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {AlertActionLink} from \"@component/validation/alert-action-link\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {ModalBuilder} from \"@util/modal-builder\";\nimport {VsanDialogUtil} from \"@util/vsan-dialog-util\";\nimport {PerfServiceModalContextData} from \"@navigation/context/perf-service-modal-context.data\";\nimport {ManagedObject} from \"@service/managed-object\";\nimport {VsanRoutes} from \"../../../../vsan-routes\";\n\nexport class AlertActionLinkUtil {\n   static getPerformanceServiceActionLink(context: PerfServiceModalContextData,\n         onDialogClose: (taskRef: ManagedObject) => void): AlertActionLink {\n      return {\n         label: VsanUiUtils.getString(\"vsan.services.performance.service.enable.action\"),\n         action: () => {\n            new ModalBuilder(VsanRoutes.PERFORMANCE_CONFIG)\n                  .setSize(VsanDialogUtil.PERF_SVC_EDIT_ACTION_DIALOG.width,\n                           VsanDialogUtil.PERF_SVC_EDIT_ACTION_DIALOG.height)\n                  .open(context)\n                  .then(onDialogClose);\n         },\n      };\n   }\n}","/* Copyright 2020-2022 VMware, Inc. All rights reserved. -- VMware Confidential */\nexport class VsanDialogUtil {\n   static readonly CAPACITY_MANAGEMENT_DIALOG: VsanDialogProperties = {\n      width: 800,\n      height: 700,\n   };\n\n   static readonly DELETE_VOLUME_DIALOG: VsanDialogProperties = {\n      width: 500,\n      height: 250,\n   };\n\n   static readonly MIGRATE_VOLUME_DIALOG: VsanDialogProperties = {\n      width: 1030,\n      height: 710,\n   };\n\n   static readonly REAPPLY_VOLUME_POLICY_DIALOG: VsanDialogProperties = {\n      width: 700,\n      height: 250,\n   };\n\n   static readonly DUPLICATE_PCI_ID_MODEL_SELECTION_DIALOG: VsanDialogProperties = {\n      width: 800,\n      height: 500,\n   };\n\n   static readonly HEALTH_RESTORE_ACTION_DIALOG: VsanDialogProperties = {\n      width: 550,\n      height: 250,\n   };\n\n   // Keep in sync with plugin.xml extension point\n   static readonly CLUSTER_POWER_ON_DIALOG: VsanDialogProperties = {\n      width: 600,\n      height: 230,\n   };\n\n   static readonly VM_IO_DIAGNOSTICS_METRICS_DIALOG: VsanDialogProperties = {\n      width: 900,\n      height: 700,\n   };\n\n   static readonly VM_IO_DIAGNOSTICS_LATENCY_DIALOG: VsanDialogProperties = {\n      width: 1000,\n      height: 500,\n   };\n\n   static readonly VM_IO_DIAGNOSTICS_DOM_OWNER_LATENCY_DIALOG: VsanDialogProperties = {\n      width: 1000,\n      height: 400,\n   };\n\n   static readonly PERF_SVC_EDIT_ACTION_DIALOG: VsanDialogProperties = {\n      width: 800,\n      height: 450,\n   };\n\n   static readonly PERF_SVC_ENABLE_ACTION_DIALOG: VsanDialogProperties = {\n      width: 800,\n      height: 250,\n   };\n\n   static readonly CLAIM_DISKS_ACTION_DIALOG: VsanDialogProperties = {\n      width: 1200,\n      height: 650,\n   };\n\n   static readonly VSAN_DISK_CLAIM_ACTION_DIALOG: VsanDialogProperties = {\n      width: 670,\n      height: 300,\n   };\n}\n\nexport class VsanDialogProperties {\n   width: number;\n   height: number;\n}\n","/* Copyright 2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, Input} from \"@angular/core\";\nimport {ManagedObject} from \"@service/managed-object\";\nimport {AlertActionLink} from \"@component/validation/alert-action-link\";\nimport {VsanIODiagnosticsFailedCheckType} from \"@generated/vsan-i-o-diagnostics-failed-check-type\";\nimport {IoDiagnosticsUtil} from \"../io-diagnostics.util\";\nimport {VsanIODiagnosticsFailedCheck} from \"@generated/vsan-i-o-diagnostics-failed-check\";\nimport {AlertActionLinkUtil} from \"@component/validation/alert-action-link-util\";\n\n@Component({\n   templateUrl: \"run-instance-validation.html\",\n   styleUrls: [\"run-instance-validation.scss\"],\n   selector: \"vsan-run-instance-validation\",\n})\nexport class RunInstanceValidation {\n\n   @Input()\n   failedChecks: VsanIODiagnosticsFailedCheck[];\n\n   @Input()\n   clsRef: ManagedObject;\n\n   @Input()\n   onPerfServiceEnabled: (taskRef: ManagedObject) => void;\n\n   getFailedChecksReasons(): string[] {\n      return IoDiagnosticsUtil.getFailedChecksReasons(this.failedChecks);\n   }\n\n   /**\n    * For each failed check return null or action (e.g., perf svc action).\n    */\n   getFailedChecksActionLinks(): AlertActionLink[] {\n      return this.failedChecks?.map(failedCheck =>\n           (failedCheck.unsupportedType !== VsanIODiagnosticsFailedCheckType.PERF_SVC_DISABLED)\n           ? null\n           : AlertActionLinkUtil.getPerformanceServiceActionLink({clusterRef: this.clsRef}, this.onPerfServiceEnabled));\n   }\n}","/* Copyright 2021-2022 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {UnavailableViewSpec} from \"@component/unavailable-view/unavailable-view-spec\";\nimport {GraphClasses} from \"@generated/graph-classes\";\nimport {GraphElements} from \"@generated/graph-elements\";\nimport {VsanIODiagnosticsFailedCheck} from \"@generated/vsan-i-o-diagnostics-failed-check\";\nimport {VsanIODiagnosticsFailedCheckType} from \"@generated/vsan-i-o-diagnostics-failed-check-type\";\nimport {VsanIODiagnosticsInstanceResult} from \"@generated/vsan-i-o-diagnostics-instance-result\";\nimport {VsanIoLatencyType} from \"@generated/vsan-io-latency-type\";\nimport {DomUtil} from \"@util/dom-util\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {NodeSingular} from \"cytoscape\";\n\nexport class IoDiagnosticsUtil {\n\n   private static readonly TAG_NAME: string = \"div\";\n   private static readonly DOM_OWNER_LATENCY_TYPES: VsanIoLatencyType[] = [\n      VsanIoLatencyType.DOM_OWNER, VsanIoLatencyType.PERF_DOM_OWNER, VsanIoLatencyType.CAPACITY_DOM_OWNER,\n   ];\n\n   static createDivElement(): HTMLElement {\n      return document.createElement(IoDiagnosticsUtil.TAG_NAME);\n   }\n\n   static attachUserEvents(element: HTMLElement, callback: () => any): void {\n      DomUtil.onClick(element, callback);\n      DomUtil.onEnterKeyUp(element, callback);\n   }\n\n   static isDomOwner(type: VsanIoLatencyType): boolean {\n      return IoDiagnosticsUtil.DOM_OWNER_LATENCY_TYPES.includes(type);\n   }\n\n   static isDomOwnerNode(node: NodeSingular): boolean {\n      return node && node.hasClass(GraphClasses.DOM_OWNER_NODE());\n   }\n\n   private static UNSUPPORTED_CLUSTER_TYPE: VsanIODiagnosticsFailedCheckType[] = [\n      VsanIODiagnosticsFailedCheckType.STRETCHED_CLUSTER,\n      VsanIODiagnosticsFailedCheckType.NESTED_FAULT_DOMAIN,\n      VsanIODiagnosticsFailedCheckType.COMPUTE_ONLY_CLUSTER,\n      VsanIODiagnosticsFailedCheckType.VSAN_OBJECT_IN_REMOTE_DATASTORE,\n   ];\n\n   private static getUnsupportedClusterFailedCheck(ioInstanceResult: VsanIODiagnosticsInstanceResult): VsanIODiagnosticsFailedCheck {\n      let unsupportedClusterFailedCheck: VsanIODiagnosticsFailedCheck;\n      if (ioInstanceResult && ioInstanceResult.precheckResult.failedChecks?.length) {\n         unsupportedClusterFailedCheck = ioInstanceResult.precheckResult.failedChecks.find(failedCheck =>\n               IoDiagnosticsUtil.UNSUPPORTED_CLUSTER_TYPE.some(clsType => clsType === failedCheck.unsupportedType));\n      }\n      return unsupportedClusterFailedCheck;\n   }\n\n   static createUnavailableViewSpec(ioInstanceResult: VsanIODiagnosticsInstanceResult): UnavailableViewSpec {\n      let unavailableViewSpec: UnavailableViewSpec = null;\n      const unsupportedClusterFailedCheck: VsanIODiagnosticsFailedCheck =\n            IoDiagnosticsUtil.getUnsupportedClusterFailedCheck(ioInstanceResult);\n      if (unsupportedClusterFailedCheck) {\n         unavailableViewSpec = UnavailableViewSpec.IO_DIAGNOSTICS_NOT_SUPPORTED_CONFIG;\n         unavailableViewSpec.statusLabel = unsupportedClusterFailedCheck.reason;\n      }\n      return unavailableViewSpec;\n   }\n\n   static getFailedChecksReasons(failedChecks: VsanIODiagnosticsFailedCheck[]): string[] {\n      return failedChecks?.map(failedCheck => failedCheck.reason);\n   }\n\n   static getHostName(graphElementDetails: { hostName: string, hostUuid: string }): string {\n      return graphElementDetails?.hostName\n            ? graphElementDetails.hostName\n            : graphElementDetails?.hostUuid;\n   }\n\n   static formatLatency(latency: number): string {\n      return VsanUiUtils.isUnset(latency)\n            ? VsanUiUtils.getString(\"vsan.na.label\")\n            : VsanUiUtils.getString(\"vsan.monitor.vm.iodiagnostics.grid.cell.latency\",\n                  VsanUiUtils.localizeNumber(latency.toFixed(2)));\n   }\n\n   static canRenderGraph(graphElements: GraphElements): boolean {\n      return IoDiagnosticsUtil.hasEdges(graphElements) && IoDiagnosticsUtil.hasNodes(graphElements);\n   }\n\n   static hasNoStats(graphElements: GraphElements): boolean {\n      return !IoDiagnosticsUtil.hasEdges(graphElements) && !IoDiagnosticsUtil.hasNodes(graphElements);\n   }\n\n   private static hasEdges(graphElements: GraphElements): boolean {\n      return !!graphElements?.edges?.length;\n   }\n\n   private static hasNodes(graphElements: GraphElements): boolean {\n      return !!graphElements?.nodes?.length;\n   }\n\n   static getVmdkName(name: string): string {\n      return name.replace(\"\\n\", \"\");\n   }\n}"],"sourceRoot":"webpack:///"}