{"version":3,"sources":["webpack:///src/app/vsan/common/service/flow/loading-indicator.decorator.ts","webpack:///src/app/vsan/common/service/flow/error-handler.decorator.ts","webpack:///src/app/vsan/common/service/flow/loader.decorator.ts","webpack:///src/app/vsan/precheck/report/psp/precheck-persistence-tab.html","webpack:///src/app/vsan/precheck/precheck-util.ts","webpack:///src/app/vsan/common/service/navigation/model/knowledge-base-id.ts","webpack:///src/app/vsan/precheck/enter-maintenance-mode-dialog.html","webpack:///src/app/vsan/precheck/report/precheck-report.service.ts","webpack:///src/app/vsan/precheck/report/capacity/precheck-capacity-breakdown.component.ts","webpack:///src/app/vsan/precheck/report/capacity/precheck-capacity-bar-chart.html","webpack:///src/app/generated/precheck-entity.ts","webpack:///src/app/vsan/precheck/precheck-report.module.ts","webpack:///src/app/vsan/precheck/report/precheck-report.html","webpack:///src/app/vsan/precheck/report/capacity/precheck-capacity-breakdown.html","webpack:///src/app/vsan/precheck/precheck.component.ts","webpack:///src/app/vsan/precheck/report/capacity/precheck-capacity-bar-chart.component.ts","webpack:///src/app/vsan/precheck/guard-rails/precheck-guard-rails.component.ts","webpack:///src/app/vsan/precheck/guard-rails/precheck-guard-rails.html","webpack:///src/app/vsan/precheck/report/precheck-report.component.ts","webpack:///src/app/vsan/common/util/vsan-dialog-util.ts","webpack:///src/app/vsan/precheck/report/virtual-objects/precheck-virtual-objects-tab.component.ts","webpack:///src/app/vsan/common/service/flow/loading-flow-wrapper.data.ts","webpack:///src/app/vsan/precheck/precheck.html","webpack:///src/app/vsan/precheck/enter-maintenance-mode-dialog.component.ts","webpack:///src/app/vsan/common/component/datagrid/filter/base-filter.ts","webpack:///src/app/generated/precheck-operation.ts","webpack:///src/app/vsan/precheck/report/capacity/precheck-capacity-tab.html","webpack:///src/app/vsan/precheck/report/virtual-objects/precheck-virtual-objects-tab.html","webpack:///src/app/vsan/precheck/report/capacity/precheck-capacity-tab.component.ts","webpack:///src/app/vsan/precheck/report/psp/precheck-persistence-tab.component.ts","webpack:///src/app/generated/precheck-task-data.ts","webpack:///src/app/vsan/common/component/datagrid/tree-datagrid.ts"],"names":["LoadingIndicator","props","targetClass","propertyKey","Object","defineProperty","get","Array","isArray","name","some","loaderName","isLoading","ErrorHandler","functionName","descriptor","errorHandler","value","Loader","params","tag","getClassName","originalFn","loadingFlowWrapper","preExecute","error","undefined","incrementLoads","invoke","preLoadSrMessage","srMessage","srMessageType","LOADING","postExecute","LOADED","onError","ex","processError","rethrow","shouldRethrow","invokeErrorHandler","decrementLoads","backingObject","arguments","wrapper","handler","call","errorMessageGetter","PrecheckUtil","extractPrecheckEntityByUuid","uuid","entities","isEmpty","index","length","selectedEntity","children","extractHostEntity","hostRef","find","entity","type","HOST","areEqual","extractParentEntityByUuid","parentIndex","element","parentOfGrandChild","KnowledgeBaseId","PrecheckReportService","getObjectsMessage","inaccessibleObjectsCount","nonCompliantObjectsCount","noDurabilityObjectsCount","hasInaccessibleObjects","hasNonCompliantObjects","getString","messages","push","join","EMPTY_SPACE","postOperationCapacity","isThinBar","selectedEntityType","getCapacityLabel","capacity","hasCapacityDifference","usedCapacity","totalCapacity","messageKey","isChildEntitySelected","DISK_GROUP","DISK","formatFileSize","getPercentage","getBarPercentage","preOperationalCapacity","beforeTotalCapacity","afterTotalCapacity","PERCENTAGE_MULTIPLIER","status","precheckEntity","dataToMove","persistenceDataToRebuild","isVsanMaxEnabled","message","hasError","RED","concat","trim","report","GREEN","CLR_SUCCESS_STANDARD_ICON_SHAPE","YELLOW","CLR_WARN_STANDARD_ICON_SHAPE","CLR_ERROR_STANDARD_ICON_SHAPE","inaccessibleObjects","nonCompliantObjects","clusterCapacity","faultDomainErrors","faultDomains","faultDomain","isAdditionalHostNeeded","hasInsufficientSpace","isComponentLimitReached","standaloneHostErrors","standaloneHosts","host","capacityNeeded","faultDomainsNeeded","initialPercentage","preOperationCapacity","finalPercentage","warningThreshold","healthData","green","info","red","persistenceData","p","state","INACCESSIBLE","REDUCED_AVAILABILITY","REBUILD","iconShape","getPersistenceStateIcon","getIconClasses","shape","clrIconShapeClassMap","runningTask","isDiskResourcePrecheckSupported","getRunningTaskMessageForAllObjects","getRunningTaskMessageForHost","taskType","HOST_PRECHECK","hostName","getLocalizedDecommissionMode","decommissionMode","HOST_ENTER_MAINTENANCE_MODE","commonMessage","DISKGROUP_REMOVAL","DISKGROUP_RECREATE","DISKGROUP_UNMOUNT","DISK_REMOVAL","DISK_UNMOUNT","DISKGROUP_PRECHECK","DISK_PRECHECK","selectedEntityUuid","selectedDecommissionMode","entityName","hasComponentLimitError","standAloneHost","PrecheckCapacityBreakdownComponent","barChartService","Icon","PrecheckEntityType","datastoreType","VSAN","getGreenColor","getGreenPallete","getYellowColor","getYellowPallete","getRedColor","getRedPallete","getCapacityColumnHeader","VSAN_DIRECT","getInsufficientSpaceLabel","insufficientSpace","showCapacityTable","hasEntities","hasFaultDomainErrors","faultDomainCapacityData","hasHostErrors","hostsCapacityData","hasFaultDomains","hasStandaloneHosts","PrecheckEntity","Factory","create","primaryIconId","isHostConnected","isInMaintenanceMode","diskGroupData","diskData","precheckRoutes","path","component","PrecheckReportModule","PrecheckComponent","precheckService","precheckReportService","taskService","permissionService","spaceEfficiencyService","clusterRef","contextObject","reportRefreshed","onPrecheckRetrieved","result","isHostResourcePrecheckSupported","unavailableView","DATA_MIGRATION_PRECHECK_VIEW_OLD_HOSTS","announceToScreenReader","precheckEntities","DATA_MIGRATION_PRECHECK_VIEW_NO_HOSTS","alertMessage","errorMessage","spaceEfficiencyConfig","precheckEntitiesTreeNodes","convertToTreeNodes","selectPrecheckEntity","ensureObjectAccessibility","showReport","precheckSupported","isRunningTaskForSelectedEntity","isPrecheckInProgress","isClusterOperationInProgress","selectedPrecheckEntities","precheckUnsupportedLabel","getPrecheckUnsupportedLabel","diskGroupOfSelectedDisk","loading","hasPermissions","EDIT_CLUSTER","then","hasEditPrivilege","warn","context","getNavigationData","selectedPrecheckEntity","fromUid","objectUuid","selectedEvacuationType","refresh","getPrecheckData","event","operation","ENTER_MAINTENANCE_MODE","DISK_DATA_EVACUATION","runDataMigrationPrecheck","toString","precheckTaskRef","precheckTask","onPrecheckTaskStarted","precheckTaskData","isTaskForSelectedEntity","taskProgress","getInfo","taskMoRef","taskInfo","SUCCESS","ERROR","getFailedTaskMessage","progress","Promise","resolve","setTimeout","TIMEOUT_IN_MS","refreshNeeded","NEED_REFRESH_ACTIONS","indexOf","objectInfos","onPrecheckEntityChange","map","isLocked","isMounted","isDiskPreCheckEvacuationSupported","deviceState","DeviceState","OFF","srOnlyMessage","PrecheckCapacityBarChartComponent","afterBarWidth","getBarChartWidth","beforeBarColor","getColorPalette","errorThreshold","afterBarColor","beforeUsedCapacityWidth","asPercentage","afterUsedCapacityWidth","getPostOperationCapacityLabel","PrecheckGuardRailsComponent","guardRailService","refWatcher","hasRunningTask","warningMessages","populateRunningTaskMessage","precheckReport","emit","runningTaskMessage","getRunningTaskMessage","populateGuardRailMessages","guardRailMessages","WARNING","NO_BOTTOM_SPACING_CLASS","fetch","setInterval","all","getPrecheckReport","getGuardRailsMessages","GUARD_RAIL_MESSAGES_PROPERTY","PrecheckReportComponent","whatIfPropertyProvider","capabilityProvider","vsanConfigService","NO_DURABILITY_STATES","EXCEEDED_COMP_LIMIT","NO_RESOURCE","NO_SPACE","STALE_DURABILITY_COMP","durableVirtualObjects","precheckTaskStarted","refreshReport","_reportRefreshed","refreshed","isInit","loadReport","updateActionsStatus","_hasReportError","capacityReports","Map","set","vsanDirectClusterCapacity","dataToRebuild","capabilities","isRecreateDiskGroupSupported","loadingInitialInfo","queryPermissions","CONFIG_STORAGE","HOST_MAINTENANCE","getClusterCapabilityData","getVsanConfigSpec","privileges","vsanConfigSpec","hasEditPermission","hasEMMPermissions","hasStoragePermission","autoClaimMode","autoClaimDisks","loadingReport","hasPrecheckReport","statusIcon","parseReportStatusToIcon","hasReportError","capacityTabStatusIcon","getCapacityTabIcon","virtualObjectsTabStatusIcon","getVirtualObjectsTabIcon","virtualObjects","healthTabStatusIcon","getHealthTabIcon","healthSummary","persistenceTabStatusIcon","getPersistenceTabIcon","isEnsureDurabilitySupported","isDurabilityPossible","isDurabilityGuaranteed","setSize","EMM_DIALOG_WIDTH","EMM_DIALOG_HEIGHT","open","taskRef","handleTask","isDiskGroupSelected","DISK_MANAGEMENT_VIEW","DELETE_DISK_GROUP_WIDTH","DELETE_DISK_GROUP_HEIGHT_SMALL","getDiskGroupActionContext","RECREATE_DIALOG_WIDTH","RECREATE_DIALOG_HEIGHT_SMALL","UNMOUNT_DISK_GROUP_DIALOG_WIDTH","UNMOUNT_DISK_GROUP_DIALOG_HEIGHT_SMALL","fromPrecheckEntity","diskGroup","precheckTaskType","persistentInstances","disks","diskGroups","getDiskGroupActionData","DELETE_DISKS_WIDTH","DELETE_DISKS_HEIGHT_SMALL","taskRefs","disk","UNMOUNT_DISK_DIALOG_WIDTH","UNMOUNT_DISK_DIALOG_HEIGHT_SMALL","task","getSummaryMessage","enterMaintenanceModeVisible","removeDiskGroupVisible","recreateDiskGroupVisible","unmountDiskGroupVisible","removeDiskVisible","unmountVsanMaxDiskVisible","enterMaintenanceModeDisabledReason","isHealthy","isDiskAndGroupActionDisabled","diskAndGroupActionDisabledReason","countObjectsWithoutDurability","objectsWithoutDurabilityState","filter","obj","durabilityState","count","forEach","VsanDialogUtil","CAPACITY_MANAGEMENT_DIALOG","width","height","DELETE_VOLUME_DIALOG","MIGRATE_VOLUME_DIALOG","REAPPLY_VOLUME_POLICY_DIALOG","DUPLICATE_PCI_ID_MODEL_SELECTION_DIALOG","HEALTH_RESTORE_ACTION_DIALOG","CLUSTER_POWER_ON_DIALOG","VM_IO_DIAGNOSTICS_METRICS_DIALOG","VM_IO_DIAGNOSTICS_LATENCY_DIALOG","VM_IO_DIAGNOSTICS_DOM_OWNER_LATENCY_DIALOG","PERF_SVC_EDIT_ACTION_DIALOG","PERF_SVC_ENABLE_ACTION_DIALOG","CLAIM_DISKS_ACTION_DIALOG","VSAN_DISK_CLAIM_ACTION_DIALOG","VsanDialogProperties","PrecheckVirtualObjectsTabComponent","reportMessage","areAllObjectsAccessibleAndCompliant","LoadingFlowWrapper","_backingObject","DEFAULT_NAME","initCollection","ERROR_HOLDER","ERROR_HANDLERS_REF_HOLDER","ERROR_MESSAGE_GETTERS_REF_HOLDER","LOADS_COUNT_HOLDER","collectionName","val","loadsCount","Error","getter","EnterMaintenanceModeDialogComponent","dataService","ENHANCED_DURABILITY_KB","onPropertiesRetrieved","results","isDrsEnabled","movePoweredOffVms","hasPoweredOnVms","HEIGHT_ADDITION_DRS","HEIGHT_ADDITION_POWERED_ON_VMS","HEIGHT_ADDITION_DURABILITY","setModalDialogHeight","alertMessages","getModalContext","secondaryTitle","decommissionModeLocalized","getProperty","configurationEx","drsConfig","enabled","getNumberOfPowerOnVmsOnHost","repa","select","fromType","where","propertyEqualsMoRef","runtime","and","propertyEquals","powerState","execute","resultItems","HOST_POWERED_ON_VMS_PROPERTY","ensureDurability","ensureEnhancedDurability","runEnterMaintenanceMode","closeModalDialog","CLUSTER_DRS_ENABLED_PROPERTY","BaseFilter","data","search","label","stringify","toLowerCase","accepts","PrecheckOperation","PrecheckCapacityTabComponent","CapacityReport","AlertType","DatastoreType","currentCapacityReport","getClusterLevelErrorMessageLabel","getClusterLevelCapacityErrorMessage","vsanCapacity","vsanDirectCapacity","errorMessages","PrecheckPersistenceTabComponent","filterChanged","DEFAULT_ITEMS_PER_PAGE","getPersistenceStateLabel","getPersistenceStateIconClasses","getPersistenceIconClass","stateFilterValue","notifyFilterChange","hasAppliedFilters","PrecheckTaskData","TreeDatagrid","childItems","rootItems","filters","clear","refreshGrid","rowData","collapseAll","rows","r","collapse","expandAll","expand","roots","content","flatten","TreeFilter","splice","comparator","ascending","sortAscending","row","isExpanded","rowIndex","flattenedChildren","depth","removeCount","i","items","parent","sortedItems","sort","item1","item2","item","filteredOut","matchFilter","predicate","TreeDatagridRow","toggle","isExpandable","childField","apply","changes","_predicate","getValue"],"mappings":"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","file":"106-es5.js","sourcesContent":["/* Copyright 2021 VMware, Inc. All rights reserved. -- VMware Confidential */\n\n\n\nimport {LoadingFlowWrapper} from \"@service/flow/loading-flow-wrapper.data\";\n\n/**\n * This property decorator is supposed to be used along with the @Loader decorator.\n * As the @Loader decorator keeps track of all the active loading operations,\n * we can easily know if all the loading is completed. If there are any ongoing loading\n * operations, the property decorated with @LoadingIndicator will be set to \"true\", otherwise - it will be \"false\".\n * You can have as many properties decorated with @LoadingIndicator as you want, but they need to have different names.\n * The LoadingIndicator will show the loading state of the Loader methods with the same name.\n *\n * <pre>\n * @Loader()\n * loadDataSync(): any {\n *    // Load some data\n * }\n *\n * @Loader()\n * loadDataAsync(): Promise<any> {\n *    // Load some data\n * }\n *\n * @LoadingIndicator\n * isLoading: boolean; // The field will be set to \"false\" when the both the methods are complete and the Promise is resolved.\n * </pre>\n */\nexport function LoadingIndicator(props?: LoadingIndicatorProperties): PropertyDecorator {\n   props = props || {};\n   return (targetClass: any, propertyKey: string): void => {\n      Object.defineProperty(targetClass, propertyKey, {\n         get: function (): boolean {\n            if (Array.isArray(props.name)) {\n               return props.name.some((loaderName: string) => (new LoadingFlowWrapper(this, loaderName)).isLoading);\n            }\n\n            return (new LoadingFlowWrapper(this, props.name)).isLoading;\n         },\n      });\n   };\n}\n\nexport interface LoadingIndicatorProperties {\n   name?: string | string[];\n}\n","/* Copyright 2021 VMware, Inc. All rights reserved. -- VMware Confidential */\n\nimport {LoadingFlowWrapper} from \"@service/flow/loading-flow-wrapper.data\";\n\n/**\n * This property decorator is supposed to be used along with the @Loader decorator.\n * If an exception is thrown during the execution of the method decorated with @Loader\n * the ErrorHandler method will be invoked. You can define as many ErrorHandlers as you want,\n * but they must be with different names. The name can be provided as input to the decorator.\n * If a name is set to the ErrorHandler it will handle only the errors thrown by Loader functions\n * with the same name. If no name is passed to the ErrorHandler, it will handle only the errors\n * from Loader functions with no name.\n *\n * <pre>\n * // Example 1:\n * @Loader()\n * loadSyncData(): any {\n *    throw new Error(\"Failed to load sync data\");\n * }\n *\n * @ErrorHandler()\n * handleError(err: any) {\n *    // handle the error.\n * }\n *...\n *\n * // Example 2\n *\n * @Loader({name: \"data-loading-flow})\n * async loadAsyncData(): Promise<any> {\n *    return Promise.reject(\"Failed to load async data\");\n * }\n *\n * @ErrorHandler({name: \"data-loading-flow})\n * handleError(err: any) {\n *    // handle the error.\n * }\n * ...\n * </pre>\n */\nexport function ErrorHandler(props?: ErrorHandlerProperties): MethodDecorator {\n   props = props || {};\n   return (targetClass: any, functionName: string, descriptor: PropertyDescriptor): void => {\n      (new LoadingFlowWrapper(targetClass, props.name)).errorHandler = descriptor.value;\n   };\n}\n\n/**\n * Properties of the ErrorHandler decorator.\n */\nexport interface ErrorHandlerProperties {\n\n   /**\n    * Indicates which @Loder should be handled by this @ErrorHandler\n    */\n   name?: string;\n}\n","/* Copyright 2021-2022 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {ErrorContext, FunctionWrapper} from \"@service/flow/function-wrapper\";\nimport {LoadingFlowWrapper} from \"@service/flow/loading-flow-wrapper.data\";\nimport {ScreenReaderAnnouncerService, SrEvent, SrMessageType} from \"@service/screen-reader-announcer.service\";\nimport {Reflection} from \"@util/reflection\";\nimport {GlobalLogger} from \"../../../../vsan-app.module\";\n\n/**\n * Method decorator that does the following:\n *  - watches for errors and if such appear:\n *       - the error is logged in the browser's console\n *       - the error is logged in the H5C server log\n *       - the related @ErrorMessage fields are populated\n *       - the related @ErrorHandler methods are invoked\n *  - Updates the @LoadingIndicator decorated fields\n *  - Invokes the screen reader service once the loading operation completes successfully\n */\nexport function Loader(params?: LoaderParams): MethodDecorator {\n   // If no params are passed, initialize the variable in order to avoid multiple null-checks\n   params = params || {};\n   return (targetClass: any, functionName: string, descriptor: PropertyDescriptor): void => {\n      // Use the component name as tag in order easily find where the error was thrown.\n      const tag: string = Reflection.getClassName(targetClass);\n      const loaderName: string = params.name;\n      const originalFn: any = descriptor.value;\n\n      descriptor.value = function (): any {\n         const loadingFlowWrapper: LoadingFlowWrapper = new LoadingFlowWrapper(this, loaderName);\n         return (new FunctionWrapper(originalFn))\n               .preExecute(() => {\n                  loadingFlowWrapper.error = undefined;\n                  loadingFlowWrapper.incrementLoads();\n                  ScreenReaderAnnouncerService.invoke(\n                        params.preLoadSrMessage || params.srMessage,\n                        params.srMessageType, SrEvent.LOADING);\n               })\n               .postExecute(() => {\n                  ScreenReaderAnnouncerService.invoke(params.srMessage, params.srMessageType, SrEvent.LOADED);\n               })\n               .onError((ex: any) => {\n                  processError(loadingFlowWrapper, tag, ex);\n                  const rethrow: boolean = shouldRethrow(loadingFlowWrapper, params);\n                  if (!rethrow) {\n                     ex = invokeErrorHandler(loadingFlowWrapper, ex);\n                  }\n                  return new ErrorContext(rethrow, ex);\n               })\n               .finally(() => {\n                  loadingFlowWrapper.decrementLoads();\n               })\n               .invoke(loadingFlowWrapper.backingObject, arguments);\n      };\n   };\n}\n\n/**\n * Parameters for the @Loader decorator\n */\nexport interface LoaderParams {\n\n   /**\n    * The name of the loader by which will be resolved te @LoadingIndicator, @ErrorHandler and @ErrorMessage\n    */\n   name?: string;\n\n   /**\n    * Indicates if the error should be rethrown after being processed by the @ErrorHandlers\n    */\n   rethrow?: boolean;\n\n   /**\n    * Used along with srMessageType to create the screen reader message to be announced after the loading\n    * operation completes successfully.\n    * If preLoadSrMessage is not set, srMessage will also be announced when the loading operation starts.\n    */\n   srMessage?: string;\n\n   /**\n    * Used when the message in preExecute() should be different than the one in postExecute().\n    * If not set, srMessage will be used in both places.\n    * Should be given a value when the srMessageType is set to CUSTOM,\n    * because otherwise the exact same message will be announced in preExecute() and postExecute().\n    */\n   preLoadSrMessage?: string;\n\n   /**\n    * The screen reader message type. Used for creating an appropriate message.\n    */\n   srMessageType?: SrMessageType;\n}\n\n/**\n * Handles the given error by:\n *  - logging the error in the browsers console\n *  - logging the error in the H5C backend log\n *  - updates all @ErrorMessage fields\n */\nfunction processError(wrapper: LoadingFlowWrapper, tag: string, ex: any): void {\n   // Log the error to the backend\n   GlobalLogger.error(tag, ex);\n\n   // Cache the error so it can be retrieved by @ErrorMessage decorated fields\n   wrapper.error = ex;\n}\n\n/**\n * Invokes the error handler (if defined)\n */\nfunction invokeErrorHandler(wrapper: LoadingFlowWrapper, ex: any): any {\n   const handler: any = wrapper.errorHandler;\n   return !!handler\n         ? handler.call(wrapper.backingObject, ex)\n         : null;\n}\n\n/**\n * Reject the promise only if:\n * 1. there are no handlers declared\n * 2. the components has explicitly requested the error to be rethrown\n */\nfunction shouldRethrow(wrapper: LoadingFlowWrapper, params: LoaderParams): boolean {\n   return !wrapper.errorHandler && !wrapper.errorMessageGetter\n         || !!params.rethrow;\n}\n","<clr-datagrid id=\"persistenceInstancesDatagrid\">\n   <!-- Datagrid Header -->\n   <clr-dg-column [clrDgField]=\"'name'\">\n      {{\"vsan.evacuationStatus.report.predictedOverview.persistenceTab.table.nameHeader\" | localized}}\n   </clr-dg-column>\n   <clr-dg-column [clrDgField]=\"'namespace'\">\n      {{\"vsan.evacuationStatus.report.predictedOverview.persistenceTab.table.namespaceHeader\" | localized}}\n   </clr-dg-column>\n   <clr-dg-column [clrDgField]=\"'service'\">\n      {{\"vsan.evacuationStatus.report.predictedOverview.persistenceTab.table.serviceHeader\" | localized}}\n   </clr-dg-column>\n   <clr-dg-column [clrDgField]=\"'state'\">\n      {{\"vsan.evacuationStatus.report.predictedOverview.persistenceTab.table.predictedStateHeader\" | localized}}\n      <clr-dg-filter>\n         <vsan-enum-filter\n               #typeFilterComponent\n               [objects]=\"persistentInstances\"\n               [field]=\"'state'\"\n               [enumToLabelConverter]=\"getPersistenceStateLabel\"\n               [selectedFilterValues]=\"stateFilterValue\"\n               (selectedFilterValuesChange)=\"onSelectedFilterTypeChanged($event)\">\n         </vsan-enum-filter>\n      </clr-dg-filter>\n   </clr-dg-column>\n\n   <!-- Datagrid Content -->\n   <clr-dg-row *clrDgItems=\"let persistentInstance of persistentInstances\"\n               [clrDgItem]=\"persistentInstance\">\n      <clr-dg-cell vsan-show-title>{{persistentInstance.name}}</clr-dg-cell>\n      <clr-dg-cell vsan-show-title>{{persistentInstance.namespace}}</clr-dg-cell>\n      <clr-dg-cell vsan-show-title>{{persistentInstance.service}}</clr-dg-cell>\n      <clr-dg-cell>\n         <vsan-icon-item [label]=\"getPersistenceStateLabel(persistentInstance.state)\"\n                         [iconClass]=\"getPersistenceStateIconClasses(persistentInstance.state)\"\n                         [shape]=\"getPersistenceStateIcon(persistentInstance.state)\">\n         </vsan-icon-item>\n      </clr-dg-cell>\n   </clr-dg-row>\n\n   <!-- Datagrid Footer -->\n   <clr-dg-footer>\n      <clr-dg-pagination #pagination\n                         [clrDgPageSize]=\"DEFAULT_ITEMS_PER_PAGE\"\n                         [hidden]=\"!persistentInstances.length\"\n                         [clrDgTotalItems]=\"persistentInstances.length\">\n         {{\"vsan.evacuationStatus.report.predictedOverview.persistenceTab.table.pagination.label\" |\n            localized: pagination.firstItem + 1 : pagination.lastItem + 1 : persistentInstances.length}}\n      </clr-dg-pagination>\n   </clr-dg-footer>\n</clr-datagrid>","/* Copyright 2019-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {ManagedObject} from \"@service/managed-object\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {PrecheckEntity} from \"@generated/precheck-entity\";\nimport {PrecheckEntityType} from \"@generated/precheck-entity-type\";\n\nexport class PrecheckUtil {\n   /**\n    * Extracts the specified precheck entity from entities based on uuid.\n    */\n   static extractPrecheckEntityByUuid = (uuid: string, entities: PrecheckEntity[]): PrecheckEntity => {\n      if (!uuid || VsanUiUtils.isEmpty(entities)) {\n         return null;\n      }\n\n      for (let index: number = 0; index < entities.length; index++) {\n         if (entities[index].uuid === uuid) {\n            return entities[index];\n         } else {\n            const selectedEntity: PrecheckEntity = PrecheckUtil.extractPrecheckEntityByUuid(\n                  uuid, entities[index].children);\n            if (selectedEntity) {\n               return selectedEntity;\n            }\n         }\n      }\n\n      return null;\n   };\n\n   /**\n    * Extracts the specified precheck host entity from entities based on host reference.\n    */\n   static extractHostEntity = (hostRef: ManagedObject, entities: PrecheckEntity[]): PrecheckEntity => {\n      if (!hostRef || VsanUiUtils.isEmpty(entities)) {\n         return null;\n      }\n      return entities.find(entity => entity.type === PrecheckEntityType.HOST &&\n            ManagedObject.areEqual(hostRef, entity.hostRef));\n   };\n\n   /**\n    * Extracts the parent entity of the specified uuid.\n    */\n   static extractParentEntityByUuid = (uuid: string, entities: PrecheckEntity[]): PrecheckEntity => {\n      if (!uuid || VsanUiUtils.isEmpty(entities)) {\n         return null;\n      }\n\n      for (let parentIndex: number = 0; parentIndex < entities.length; parentIndex++) {\n         const children: PrecheckEntity[] = entities[parentIndex].children;\n         if (!children || children.length === 0) {\n            continue;\n         }\n\n         if (children.find(element => uuid === element.uuid)) {\n            return entities[parentIndex];\n         }\n\n         const parentOfGrandChild: PrecheckEntity = PrecheckUtil.extractParentEntityByUuid(uuid, children);\n         if (parentOfGrandChild) {\n            return parentOfGrandChild;\n         }\n      }\n\n      return null;\n   };\n}","/* Copyright 2021 VMware, Inc. All rights reserved. -- VMware Confidential */\n/**\n * IDs used in external KB link navigation\n */\nexport enum KnowledgeBaseId {\n   PRECHECK_PCP = \"83954\",\n   VIRTUAL_OBJECTS = \"2108319\",\n   UPGRADE = \"2148493\",\n   PERFORMANCE_DIAGNOSTICS = \"2148770\",\n   SUPPORT_INSIGHT = \"60206\",\n}\n","<!--Copyright 2017-2022 VMware, Inc. All rights reserved. -- VMware Confidential-->\n<vsan-prompt id=\"enter-maintenance-mode-dialog\"\n             [title]=\"'vsan.evacuationStatus.report.enterMaintenanceModeDialog.title' | localized\"\n             [subtitle]=\"secondaryTitle\"\n             [(alertMessages)]=\"alertMessages\"\n             [cancelText]=\"'vsan.common.cancel' | localized\"\n             [confirmText]=\"'vsan.common.ok' | localized\"\n             [blockContent]=\"loading\"\n             (onConfirm)=\"onConfirm()\">\n   <vsan-validation id=\"enter-maintenance-mode-dialog-powered-on-vms-warning\"\n                    *ngIf=\"hasPoweredOnVms\"\n                    [allowClose]=\"false\"\n                    [alertType]=\"'warning'\"\n                    [alert]=\"'vsan.evacuationStatus.report.enterMaintenanceModeDialog.poweredOnVmsWarning' | localized\">\n   </vsan-validation>\n   <form class=\"container\">\n      <!--General text-->\n      <span id=\"enter-maintenance-mode-message\">\n         {{'vsan.evacuationStatus.report.enterMaintenanceModeDialog.text' | localized}}\n      </span>\n      <!--Option to move powered-off VMs-->\n      <div class=\"form-group no-left-padding\">\n         <clr-checkbox-wrapper *ngIf=\"isDrsEnabled\">\n            <input type=\"checkbox\"\n                   clrCheckbox\n                   name=\"move-powered-off-vms\"\n                   id=\"move-powered-off-vms\"\n                   [(ngModel)]=\"movePoweredOffVms\"/>\n            <label>{{'vsan.evacuationStatus.report.enterMaintenanceModeDialog.movePoweredOffVMs' | localized}}</label>\n         </clr-checkbox-wrapper>\n      </div>\n      <!--Selected decommission mode-->\n      <div class=\"form-group clr-form-horizontal\">\n         <div class=\"clr-form-control\">\n            <label for=\"enter-maintenance-mode-vsan-data-migration\" class=\"clr-control-label no-margin\">\n               {{'vsan.dialog.precheckEvacuation.label' | localized}}\n            </label>\n            <span id=\"enter-maintenance-mode-vsan-data-migration\" class=\"clr-control-container\">\n               {{decommissionModeLocalized}}\n            </span>\n         </div>\n      </div>\n      <div class=\"form-group no-left-padding\" *ngIf=\"isDurabilityPossible && isDurabilityGuaranteed\">\n         <clr-checkbox-wrapper>\n            <input type=\"checkbox\"\n                   clrCheckbox\n                   name=\"ensure-durability\"\n                   id=\"ensure-durability\"\n                   [disabled]=\"!isDurabilityGuaranteed\"\n                   [(ngModel)]=\"ensureDurability\"/>\n            <label>{{'vsan.evacuationStatus.report.enterMaintenanceModeDialog.ensureDurabilityConfirmation'|localized}}</label>\n         </clr-checkbox-wrapper>\n      </div>\n      <clr-alert id=\"ensure-durability-banner\"\n                 *ngIf=\"isDurabilityPossible\"\n                 [clrAlertClosable]=\"false\"\n                 [clrAlertType]=\"getDurabilityAlertType()\">\n         <clr-alert-item>\n            <div class=\"durability-alert-message-wrapper\">\n               <span>{{getDurabilityAlertMessage()}}</span>\n               <a [external-link] [articleId]=\"ENHANCED_DURABILITY_KB\"></a>\n            </div>\n         </clr-alert-item>\n      </clr-alert>\n      <!--Confirmation message-->\n      <span id=\"enter-maintenance-mode-confirmation\">\n         {{'vsan.evacuationStatus.report.enterMaintenanceModeDialog.confirmationText' | localized}}\n      </span>\n   </form>\n</vsan-prompt>\n","/* Copyright 2018-2022 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Injectable} from \"@angular/core\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {Icon} from \"@util/icon\";\nimport {VsanDataMigrationUtil} from \"@util/vsan-data-migration-util\";\nimport {DecommissionMode} from \"@generated/decommission-mode\";\nimport {VsanHealthData} from \"@generated/vsan-health-data\";\nimport {VsanHealthStatus} from \"@generated/vsan-health-status\";\nimport {PrecheckTaskType} from \"@generated/precheck-task-type\";\nimport {PrecheckPersistentInstanceData} from \"@generated/precheck-persistent-instance-data\";\nimport {PrecheckPersistentInstanceState} from \"@generated/precheck-persistent-instance-state\";\nimport {PrecheckResultStatusType} from \"@generated/precheck-result-status-type\";\nimport {PrecheckClusterCapacityData} from \"@generated/precheck-cluster-capacity-data\";\nimport {PrecheckCapacityData} from \"@generated/precheck-capacity-data\";\nimport {PrecheckEntityType} from \"@generated/precheck-entity-type\";\nimport {PrecheckReport} from \"@generated/precheck-report\";\nimport {PrecheckTaskData} from \"@generated/precheck-task-data\";\n\n@Injectable()\nexport class PrecheckReportService {\n\n   private static readonly PERCENTAGE_MULTIPLIER: number = 100;\n\n   private static readonly EMPTY_SPACE: string = \" \";\n\n   getPostOperationCapacityLabel(postOperationCapacity: PrecheckCapacityData, isThinBar: boolean,\n         selectedEntityType: PrecheckEntityType): string {\n      if (selectedEntityType === PrecheckEntityType.HOST) {\n         return VsanUiUtils.getString(\n               \"vsan.evacuationStatus.report.predictedOverview.capacityTab.table.maintenanceMode\");\n      }\n\n      return this.getCapacityLabel(postOperationCapacity, isThinBar, true, selectedEntityType);\n   }\n\n   getCapacityLabel(capacity: PrecheckCapacityData, isThinBar: boolean, hasCapacityDifference: boolean,\n         selectedEntityType?: PrecheckEntityType): string {\n      if (!capacity.usedCapacity && !capacity.totalCapacity) {\n         return VsanUiUtils.getString(\"vsan.evacuationStatus.report.predictedOverview.capacityTab.noCapacity\");\n      }\n\n      let messageKey: string;\n      if (isThinBar) {\n         if (hasCapacityDifference) {\n            const isChildEntitySelected: boolean = selectedEntityType === PrecheckEntityType.DISK_GROUP\n                  || selectedEntityType === PrecheckEntityType.DISK;\n            messageKey = isChildEntitySelected\n                  ? \"vsan.evacuationStatus.report.predictedOverview.capacityTab.tableCapacityInfoReducedCapacity\"\n                  : \"vsan.evacuationStatus.report.predictedOverview.capacityTab.tableCapacityInfo\";\n         } else {\n            messageKey = \"vsan.evacuationStatus.report.predictedOverview.capacityTab.tableCapacityInfoNoChange\";\n         }\n      } else {\n         messageKey = \"vsan.evacuationStatus.report.predictedOverview.capacityTab.generalCapacityInfo\";\n      }\n\n      return VsanUiUtils.getString(messageKey,\n            VsanUiUtils.formatFileSize(capacity.usedCapacity),\n            VsanUiUtils.formatFileSize(capacity.totalCapacity),\n            VsanUiUtils.getPercentage(this.getBarPercentage(capacity.usedCapacity, capacity.totalCapacity)));\n   }\n\n   hasCapacityDifference(preOperationalCapacity: PrecheckCapacityData,\n         postOperationCapacity: PrecheckCapacityData): boolean {\n      return VsanUiUtils.formatFileSize(preOperationalCapacity.usedCapacity) !==\n            VsanUiUtils.formatFileSize(postOperationCapacity.usedCapacity)\n            || VsanUiUtils.formatFileSize(preOperationalCapacity.totalCapacity) !==\n            VsanUiUtils.formatFileSize(postOperationCapacity.totalCapacity);\n   }\n\n   getBarChartWidth(beforeTotalCapacity: number, afterTotalCapacity: number): number {\n      return (afterTotalCapacity / beforeTotalCapacity) * PrecheckReportService.PERCENTAGE_MULTIPLIER;\n   }\n\n   getBarPercentage(usedCapacity: number, totalCapacity: number): number {\n      return (usedCapacity / totalCapacity) * PrecheckReportService.PERCENTAGE_MULTIPLIER;\n   }\n\n   // decommission mode helper functions\n   getSummaryMessage(status: PrecheckResultStatusType, precheckEntity: PrecheckEntityType, dataToMove: number,\n         persistenceDataToRebuild?: number, isVsanMaxEnabled?: boolean): string {\n      let message: string;\n      const hasError: boolean = PrecheckResultStatusType.RED === status;\n      switch (precheckEntity) {\n         case PrecheckEntityType.HOST:\n            if (hasError) {\n               return VsanUiUtils.getString(\"vsan.evacuationStatus.report.preCheckFailed.host\");\n            }\n\n            message = VsanUiUtils.getString(\"vsan.evacuationStatus.report.preCheckSucceeded.host\");\n            break;\n         case PrecheckEntityType.DISK_GROUP:\n            if (hasError) {\n               return VsanUiUtils.getString(\"vsan.evacuationStatus.report.preCheckFailed.diskGroup\");\n            }\n\n            message = VsanUiUtils.getString(\"vsan.evacuationStatus.report.preCheckSucceeded.diskGroup\");\n            break;\n         case PrecheckEntityType.DISK:\n            if (hasError) {\n               return isVsanMaxEnabled\n                     ? VsanUiUtils.getString(\"vsan.evacuationStatus.report.preCheckFailed.disk.vsanMax\")\n                     : VsanUiUtils.getString(\"vsan.evacuationStatus.report.preCheckFailed.disk\");\n            }\n\n            message = isVsanMaxEnabled\n                  ? VsanUiUtils.getString(\"vsan.evacuationStatus.report.preCheckSucceeded.disk.vsanMax\")\n                  : VsanUiUtils.getString(\"vsan.evacuationStatus.report.preCheckSucceeded.disk\");\n            break;\n      }\n\n      if (dataToMove) {\n         message = message.concat(PrecheckReportService.EMPTY_SPACE,\n               VsanUiUtils.getString(\"vsan.evacuationStatus.report.dataToMoveMessage\",\n                     VsanUiUtils.formatFileSize(dataToMove)));\n      }\n\n      if (persistenceDataToRebuild) {\n         message = message.concat(PrecheckReportService.EMPTY_SPACE,\n               VsanUiUtils.getString(\"vsan.evacuationStatus.report.persistenceDataToRebuildMessage\",\n                     VsanUiUtils.formatFileSize(persistenceDataToRebuild)));\n      }\n\n      return message.trim();\n   }\n\n   getObjectsMessage = (inaccessibleObjectsCount: number,\n         nonCompliantObjectsCount: number,\n         noDurabilityObjectsCount: number): string => {\n      const hasInaccessibleObjects: boolean = inaccessibleObjectsCount > 0;\n      const hasNonCompliantObjects: boolean = nonCompliantObjectsCount > 0;\n\n      if (!hasInaccessibleObjects && !hasNonCompliantObjects) {\n         return VsanUiUtils.getString(\"vsan.evacuationStatus.report.accessibleAndCompliantObjectsMessage\");\n      }\n\n      const messages: string[] = [];\n      if (hasInaccessibleObjects) {\n         messages.push(VsanUiUtils.getString(\n               \"vsan.evacuationStatus.report.inaccessibleObjectsMessage\", inaccessibleObjectsCount));\n      }\n\n      if (hasNonCompliantObjects) {\n         if (noDurabilityObjectsCount > 0) {\n            messages.push(VsanUiUtils.getString(\n                  \"vsan.evacuationStatus.report.nonCompliantWithoutDurabilityObjectsMessage\",\n                  nonCompliantObjectsCount, noDurabilityObjectsCount));\n         } else {\n            messages.push(VsanUiUtils.getString(\n                  \"vsan.evacuationStatus.report.nonCompliantObjectsMessage\", nonCompliantObjectsCount));\n         }\n      }\n\n      return messages.join(PrecheckReportService.EMPTY_SPACE);\n   };\n\n   parseReportStatusToIcon(report: PrecheckReport): string {\n      switch (report.status) {\n         case PrecheckResultStatusType.GREEN:\n            return Icon.CLR_SUCCESS_STANDARD_ICON_SHAPE;\n         case PrecheckResultStatusType.YELLOW:\n            return Icon.CLR_WARN_STANDARD_ICON_SHAPE;\n         case PrecheckResultStatusType.RED:\n            return Icon.CLR_ERROR_STANDARD_ICON_SHAPE;\n      }\n   }\n\n   getVirtualObjectsTabIcon(report: PrecheckReport): string {\n      if (report.inaccessibleObjects && report.inaccessibleObjects.length) {\n         return Icon.CLR_ERROR_STANDARD_ICON_SHAPE;\n      }\n\n      if (report.nonCompliantObjects && report.nonCompliantObjects.length) {\n         return Icon.CLR_WARN_STANDARD_ICON_SHAPE;\n      }\n\n      return \"\";\n   }\n\n   getCapacityTabIcon(clusterCapacity: PrecheckClusterCapacityData): string {\n      const faultDomainErrors: boolean = clusterCapacity.faultDomains.some(\n            faultDomain => faultDomain.isAdditionalHostNeeded || faultDomain.hasInsufficientSpace\n                  || faultDomain.isComponentLimitReached);\n      const standaloneHostErrors: boolean = clusterCapacity.standaloneHosts.some(\n            host => !!host.capacityNeeded || host.isComponentLimitReached);\n\n      if (clusterCapacity.faultDomainsNeeded || faultDomainErrors || standaloneHostErrors) {\n         return Icon.CLR_ERROR_STANDARD_ICON_SHAPE;\n      }\n\n      const initialPercentage: number = this.getBarPercentage(clusterCapacity.preOperationCapacity.usedCapacity,\n            clusterCapacity.preOperationCapacity.totalCapacity);\n      const finalPercentage: number = this.getBarPercentage(clusterCapacity.postOperationCapacity.usedCapacity,\n            clusterCapacity.postOperationCapacity.totalCapacity);\n\n      if (initialPercentage >= clusterCapacity.warningThreshold\n            || finalPercentage >= clusterCapacity.warningThreshold) {\n         return Icon.CLR_WARN_STANDARD_ICON_SHAPE;\n      }\n\n      return \"\";\n   }\n\n   getHealthTabIcon(healthData: VsanHealthData): string {\n      switch (healthData.status) {\n         case VsanHealthStatus.green:\n         case VsanHealthStatus.info:\n            return \"\";\n         case VsanHealthStatus.red:\n            return Icon.CLR_ERROR_STANDARD_ICON_SHAPE;\n         default:\n            return Icon.CLR_WARN_STANDARD_ICON_SHAPE;\n      }\n   }\n\n   getPersistenceTabIcon(persistenceData: PrecheckPersistentInstanceData[]): string {\n      if (VsanUiUtils.isEmpty(persistenceData)) {\n         return  \"\";\n      } else if (persistenceData.find(p => p.state === PrecheckPersistentInstanceState.INACCESSIBLE)) {\n         return Icon.CLR_ERROR_STANDARD_ICON_SHAPE;\n      } else if (persistenceData.find(p => p.state === PrecheckPersistentInstanceState.REDUCED_AVAILABILITY)\n            || persistenceData.find(p => p.state === PrecheckPersistentInstanceState.REBUILD)) {\n         return Icon.CLR_WARN_STANDARD_ICON_SHAPE;\n      }\n\n      return \"\";\n   }\n\n   getPersistenceStateLabel(state: PrecheckPersistentInstanceState): string {\n      switch (state) {\n         case PrecheckPersistentInstanceState.INACCESSIBLE:\n            return VsanUiUtils.getString(\n                  \"vsan.evacuationStatus.report.predictedOverview.persistenceTab.table.predictedState.inaccessible\");\n         case PrecheckPersistentInstanceState.REDUCED_AVAILABILITY:\n            return VsanUiUtils.getString(\n                  \"vsan.evacuationStatus.report.predictedOverview.persistenceTab.table.predictedState.reducedAvailability\");\n         case PrecheckPersistentInstanceState.REBUILD:\n            return VsanUiUtils.getString(\n                  \"vsan.evacuationStatus.report.predictedOverview.persistenceTab.table.predictedState.rebuild\");\n         default: return \"\";\n      }\n   }\n\n   getPersistenceStateIcon(state: PrecheckPersistentInstanceState): string {\n      switch (state) {\n         case PrecheckPersistentInstanceState.INACCESSIBLE:\n            return Icon.CLR_ERROR_STANDARD_ICON_SHAPE;\n         case PrecheckPersistentInstanceState.REDUCED_AVAILABILITY:\n         case PrecheckPersistentInstanceState.REBUILD:\n            return Icon.CLR_WARN_STANDARD_ICON_SHAPE;\n         default: return \"\";\n      }\n   }\n\n   getPersistenceIconClass(state: PrecheckPersistentInstanceState): string {\n      const iconShape: string = this.getPersistenceStateIcon(state);\n      return this.getIconClasses(iconShape);\n   }\n\n   getIconClasses(shape: string): string {\n      return `is-solid ${Icon.clrIconShapeClassMap[shape]}`;\n   }\n\n   getRunningTaskMessage(runningTask: PrecheckTaskData, isDiskResourcePrecheckSupported: boolean,\n         isVsanMaxEnabled: boolean): string {\n      if (!runningTask) {\n         return \"\";\n      }\n      return isDiskResourcePrecheckSupported ? this.getRunningTaskMessageForAllObjects(runningTask, isVsanMaxEnabled)\n            : this.getRunningTaskMessageForHost(runningTask);\n   }\n\n   private getRunningTaskMessageForHost(runningTask: PrecheckTaskData): string {\n      switch (runningTask.taskType) {\n         case PrecheckTaskType.HOST_PRECHECK:\n            return runningTask.hostName\n                  ? VsanUiUtils.getString(\"vsan.evacuationStatus.report.taskInProgress.precheck\", runningTask.hostName,\n                        VsanDataMigrationUtil.getLocalizedDecommissionMode(runningTask.decommissionMode))\n                  : VsanUiUtils.getString(\"vsan.evacuationStatus.report.taskInProgress.precheck.unknownHost\",\n                        VsanDataMigrationUtil.getLocalizedDecommissionMode(runningTask.decommissionMode));\n         case PrecheckTaskType.HOST_ENTER_MAINTENANCE_MODE:\n            return runningTask.hostName\n                  ? VsanUiUtils.getString(\"vsan.evacuationStatus.report.taskInProgress.maintenanceMode\",\n                        runningTask.hostName)\n                  :  VsanUiUtils.getString(\"vsan.evacuationStatus.report.taskInProgress.maintenanceMode.unknownHost\");\n      }\n   }\n\n   private getRunningTaskMessageForAllObjects(runningTask: PrecheckTaskData, isVsanMaxEnabled: boolean): string {\n      const decommissionMode: string = VsanDataMigrationUtil.getLocalizedDecommissionMode(runningTask.decommissionMode);\n      const commonMessage: string = isVsanMaxEnabled\n            ? VsanUiUtils.getString(\"vsan.evacuationStatus.report.taskInProgress.commonMessage.vSanMax\")\n            : VsanUiUtils.getString(\"vsan.evacuationStatus.report.taskInProgress.commonMessage\");\n\n      switch (runningTask.taskType) {\n         case PrecheckTaskType.HOST_PRECHECK:\n            return runningTask.hostName\n                  ? VsanUiUtils.getString(\"vsan.evacuationStatus.report.taskInProgress.host.precheck\",\n                        runningTask.hostName, decommissionMode, commonMessage)\n                  : VsanUiUtils.getString(\"vsan.evacuationStatus.report.taskInProgress.host.precheck.unknownHost\",\n                        decommissionMode, commonMessage);\n         case PrecheckTaskType.HOST_ENTER_MAINTENANCE_MODE:\n            return runningTask.hostName\n                  ? VsanUiUtils.getString(\"vsan.evacuationStatus.report.taskInProgress.host.maintenanceMode\",\n                        runningTask.hostName, commonMessage) :\n                  VsanUiUtils.getString(\"vsan.evacuationStatus.report.taskInProgress.host.maintenanceMode.unknownHost\",\n                        commonMessage);\n         case PrecheckTaskType.DISKGROUP_REMOVAL:\n            return VsanUiUtils.getString(\"vsan.evacuationStatus.report.taskInProgress.removeGroup\",\n                  decommissionMode, commonMessage);\n         case PrecheckTaskType.DISKGROUP_RECREATE:\n            return VsanUiUtils.getString(\"vsan.evacuationStatus.report.taskInProgress.recreateGroup\",\n                  decommissionMode, commonMessage);\n         case PrecheckTaskType.DISKGROUP_UNMOUNT:\n            return VsanUiUtils.getString(\"vsan.evacuationStatus.report.taskInProgress.unmountGroup\",\n                  decommissionMode, commonMessage);\n         case PrecheckTaskType.DISK_REMOVAL:\n            return VsanUiUtils.getString(\"vsan.evacuationStatus.report.taskInProgress.removeDisks\",\n                  decommissionMode, commonMessage);\n         case PrecheckTaskType.DISK_UNMOUNT:\n            return VsanUiUtils.getString(\"vsan.evacuationStatus.report.taskInProgress.unmountDisk\",\n                  decommissionMode, commonMessage);\n         case PrecheckTaskType.DISKGROUP_PRECHECK:\n         case PrecheckTaskType.DISK_PRECHECK:\n            return VsanUiUtils.getString(\"vsan.evacuationStatus.report.taskInProgress.diskOrGroup.precheck\",\n                  runningTask.name, runningTask.hostName, decommissionMode, commonMessage);\n         default:\n            // Handle the rare case when UI doesn't know host information and if the entity is a disk or disk group.\n            // Additional info in https://bugzilla.eng.vmware.com/show_bug.cgi?id=2391487\n            return VsanUiUtils.getString(\"vsan.evacuationStatus.report.taskInProgress.unknownEntityType.unknownHost\",\n                  commonMessage);\n      }\n   }\n\n   isTaskForSelectedEntity(runningTask: PrecheckTaskData, selectedEntityUuid: string,\n         selectedDecommissionMode: DecommissionMode): boolean {\n      return selectedEntityUuid === runningTask.uuid && selectedDecommissionMode === runningTask.decommissionMode;\n   }\n\n   getFailedTaskMessage(taskType: PrecheckTaskType, entityName: string): string {\n      switch (taskType) {\n         case PrecheckTaskType.HOST_ENTER_MAINTENANCE_MODE:\n            return VsanUiUtils.getString(\"vsan.evacuationStatus.report.eMMTaskFailed\", entityName);\n         case PrecheckTaskType.DISKGROUP_REMOVAL:\n            return VsanUiUtils.getString(\"vsan.evacuationStatus.report.removeGroupFailed\", entityName);\n         case PrecheckTaskType.DISKGROUP_RECREATE:\n            return VsanUiUtils.getString(\"vsan.evacuationStatus.report.recreateGroupFailed\", entityName);\n         case PrecheckTaskType.DISKGROUP_UNMOUNT:\n            return VsanUiUtils.getString(\"vsan.evacuationStatus.report.unmountGroupFailed\", entityName);\n         case PrecheckTaskType.DISK_REMOVAL:\n            return VsanUiUtils.getString(\"vsan.evacuationStatus.report.removeDiskFailed\", entityName);\n         case PrecheckTaskType.DISK_UNMOUNT:\n            return VsanUiUtils.getString(\"vsan.evacuationStatus.report.unmountDiskFailed\", entityName);\n         default:\n            // Failed to run data migration precheck for host, disk group or disk.\n            return VsanUiUtils.getString(\"vsan.evacuationStatus.report.taskFailed\", entityName);\n      }\n   }\n\n   getClusterLevelCapacityErrorMessage(clusterCapacity: PrecheckClusterCapacityData): string {\n      const messages: string[] = [\n         VsanUiUtils.getString(\"vsan.evacuationStatus.report.predictedOverview.capacityTab.requiredStandaloneHost\")];\n\n      const hasComponentLimitError: boolean =\n            clusterCapacity.faultDomains.some(faultDomain => faultDomain.isComponentLimitReached)\n            || clusterCapacity.standaloneHosts.some(standAloneHost => standAloneHost.isComponentLimitReached);\n\n      if (hasComponentLimitError) {\n         messages.push(VsanUiUtils.getString(\n               \"vsan.evacuationStatus.report.predictedOverview.capacityTab.table.componentLimitReached\"));\n      } else {\n         messages.push(VsanUiUtils.getString(\n               \"vsan.evacuationStatus.report.predictedOverview.capacityTab.storagePolicyIncompliance\"));\n      }\n\n      return messages.join(\" \");\n   }\n\n}\n","/* Copyright 2020-2022 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, Input} from \"@angular/core\";\nimport {BarChartService} from \"@component/chart/capacity-bar-chart/bar-chart.service\";\nimport {DatastoreType} from \"@generated/datastore-type\";\nimport {PrecheckClusterCapacityData} from \"@generated/precheck-cluster-capacity-data\";\nimport {PrecheckEntityType} from \"@generated/precheck-entity-type\";\nimport {PrecheckFaultDomainCapacityData} from \"@generated/precheck-fault-domain-capacity-data\";\nimport {PrecheckHostCapacityData} from \"@generated/precheck-host-capacity-data\";\nimport {Icon} from \"@util/icon\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\n\n@Component({\n   templateUrl: \"precheck-capacity-breakdown.html\",\n   styleUrls: [\"precheck-capacity-tab.scss\"],\n   selector: \"vsan-precheck-capacity-breakdown\",\n})\nexport class PrecheckCapacityBreakdownComponent {\n\n   readonly Icon: typeof Icon = Icon;\n   readonly PrecheckEntityType: typeof PrecheckEntityType = PrecheckEntityType;\n\n   @Input()\n   clusterCapacity: PrecheckClusterCapacityData;\n\n   @Input()\n   hasError: boolean = false;\n\n   @Input()\n   datastoreType: DatastoreType = DatastoreType.VSAN;\n\n   constructor(private barChartService: BarChartService) {\n   }\n\n   getGreenColor = (): string => {\n      return this.barChartService.getGreenPallete()[0];\n   };\n\n   getYellowColor = (): string => {\n      return this.barChartService.getYellowPallete()[0];\n   };\n\n   getRedColor = (): string => {\n      return this.barChartService.getRedPallete()[0];\n   };\n\n   getCapacityColumnHeader = (): string => {\n      return this.datastoreType === DatastoreType.VSAN_DIRECT\n            ? VsanUiUtils.getString(\n                  \"vsan.evacuationStatus.report.predictedOverview.capacityTab.table.capacityHeader.vsanDirect\")\n            : VsanUiUtils.getString(\"vsan.evacuationStatus.report.predictedOverview.capacityTab.table.capacityHeader\");\n   };\n\n   getInsufficientSpaceLabel = (insufficientSpace: number): string => {\n      return VsanUiUtils.getString(\n            \"vsan.evacuationStatus.report.predictedOverview.capacityTab.table.insufficientSpaceOnHost\",\n            VsanUiUtils.formatFileSize(insufficientSpace));\n   };\n\n   showCapacityTable = (): boolean => {\n      return !this.clusterCapacity.faultDomainsNeeded && this.hasEntities();\n   };\n\n   hasFaultDomainErrors = (faultDomainCapacityData: PrecheckFaultDomainCapacityData): boolean => {\n      return faultDomainCapacityData.hasInsufficientSpace || faultDomainCapacityData.isAdditionalHostNeeded\n            || faultDomainCapacityData.isComponentLimitReached;\n   };\n\n   hasHostErrors = (hostsCapacityData: PrecheckHostCapacityData): boolean => {\n      return (this.hasError && !!hostsCapacityData.selectedEntityType)\n            || !!hostsCapacityData.capacityNeeded || hostsCapacityData.isComponentLimitReached;\n   };\n\n   private hasEntities(): boolean {\n      const hasFaultDomains: boolean = !!(this.clusterCapacity.faultDomains\n            && this.clusterCapacity.faultDomains.length);\n      const hasStandaloneHosts: boolean = !!(this.clusterCapacity.standaloneHosts\n            && this.clusterCapacity.standaloneHosts.length);\n\n      return hasFaultDomains || hasStandaloneHosts;\n   }\n}\n","<!--Copyright 2018-2020 VMware, Inc. All rights reserved. -- VMware Confidential-->\n<!--Bar chart-->\n<div class=\"bar-chart\" [ngClass]=\"{'table-bar-chart' : isThinBar}\">\n   <div class=\"progress-group\">\n      <div *ngIf=\"hasBeforeBar()\"\n           class=\"progress-static\"\n           [ngClass]=\"{'thin-bar' : isThinBar}\">\n         <div class=\"progress-meter\"\n              [ngClass]=\"{'empty-bar' : !preOperationCapacity.totalCapacity}\">\n            <div class=\"inner-bar\" style.width=\"{{beforeUsedCapacityWidth}}%\" [style.backgroundColor]=\"beforeBarColor\"></div>\n         </div>\n      </div>\n      <div *ngIf=\"hasAfterBar()\"\n           style.width=\"{{afterBarWidth}}%\"\n           class=\"progress-static\"\n           [ngClass]=\"{'thin-bar' : isThinBar}\">\n         <div class=\"progress-meter\"\n              [ngClass]=\"{'empty-bar' : !postOperationCapacity.totalCapacity}\">\n            <div class=\"inner-bar\" style.width=\"{{afterUsedCapacityWidth}}%\" [style.backgroundColor]=\"afterBarColor\"></div>\n         </div>\n      </div>\n   </div>\n</div>\n<!--Summary of used capacity-->\n<div class=\"bar-chart-info\">\n   <div *ngIf=\"hasBeforeBar()\" class=\"p8\">\n      {{getPreOperationCapacityLabel()}}\n   </div>\n   <div *ngIf=\"hasAfterBar()\"\n        class=\"p8\"\n        [ngClass]=\"{'selected-entity': !!selectedEntityType}\">\n      {{getPostOperationCapacityLabel()}}\n   </div>\n</div>","import {PrecheckDiskGroupData} from '@generated/precheck-disk-group-data';\nimport {PrecheckEntityType} from '@generated/precheck-entity-type';\nimport {DiskData} from '@generated/disk-data';\n\nexport interface PrecheckEntity {\n\n   hostRef: any;\n   type: PrecheckEntityType;\n   name: string;\n   primaryIconId: string;\n   uuid: string;\n   isHostConnected: boolean;\n   isInMaintenanceMode: boolean;\n   diskGroupData: PrecheckDiskGroupData;\n   diskData: DiskData;\n   children: PrecheckEntity[];\n} //class PrecheckEntity\n\nexport module PrecheckEntity{\nexport class Factory {\n\n   static create = (hostRef: any, type: PrecheckEntityType, name: string, primaryIconId: string, uuid: string, isHostConnected: boolean, isInMaintenanceMode: boolean, diskGroupData: PrecheckDiskGroupData, diskData: DiskData, children: PrecheckEntity[]): PrecheckEntity => {\n      return { hostRef: hostRef, type: type, name: name, primaryIconId: primaryIconId, uuid: uuid, isHostConnected: isHostConnected, isInMaintenanceMode: isInMaintenanceMode, diskGroupData: diskGroupData, diskData: diskData, children: children, };\n   }\n\n\n} //class Factory\n\n} //module PrecheckEntity\n","/* Copyright 2019-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {NgModule} from \"@angular/core\";\nimport {ClarityModule} from \"@clr/angular\";\nimport {FormsModule} from \"@angular/forms\";\nimport {CommonModule} from \"@angular/common\";\nimport {RouterModule, Routes} from \"@angular/router\";\nimport {VsanCommonModule} from \"../common/vsan-common.module\";\nimport {VsanChartModule} from \"@component/chart/chart.module\";\nimport {PrecheckComponent} from \"./precheck.component\";\nimport {PrecheckGuardRailsComponent} from \"./guard-rails/precheck-guard-rails.component\";\nimport {PrecheckReportService} from \"./report/precheck-report.service\";\nimport {PrecheckCapacityTabComponent} from \"./report/capacity/precheck-capacity-tab.component\";\nimport {PrecheckReportComponent} from \"./report/precheck-report.component\";\nimport {EnterMaintenanceModeDialogComponent} from \"./enter-maintenance-mode-dialog.component\";\nimport {PrecheckVirtualObjectsTabComponent} from \"./report/virtual-objects/precheck-virtual-objects-tab.component\";\nimport {PrecheckCapacityBarChartComponent} from \"./report/capacity/precheck-capacity-bar-chart.component\";\nimport {PrecheckModule} from \"@component/precheck/pre-check.module\";\nimport {VirtualObjectsTableModule} from \"@component/virtual-objects-table/virtual-objects-table.module\";\nimport {HealthChecksModule} from \"../health/health-checks.module\";\nimport {SpaceEfficiencyService} from \"@service/space-efficiency-service\";\nimport {UnavailableViewModule} from \"@component/unavailable-view/unavailable-view.module\";\nimport {PrecheckPersistenceTabComponent} from \"./report/psp/precheck-persistence-tab.component\";\nimport {PrecheckCapacityBreakdownComponent} from \"./report/capacity/precheck-capacity-breakdown.component\";\n\nconst precheckRoutes: Routes = [\n   {\n      path: \"\",\n      component: PrecheckComponent,\n   },\n   {\n      path: \"enterMaintenanceModeDialog\",\n      component: EnterMaintenanceModeDialogComponent,\n   },\n];\n\n@NgModule({\n   imports: [\n      FormsModule,\n      CommonModule,\n      ClarityModule,\n      PrecheckModule,\n      VsanChartModule,\n      VsanCommonModule,\n      HealthChecksModule,\n      UnavailableViewModule,\n      VirtualObjectsTableModule,\n      RouterModule.forChild(precheckRoutes),\n   ],\n   declarations: [\n      PrecheckCapacityTabComponent,\n      PrecheckGuardRailsComponent,\n      PrecheckReportComponent,\n      PrecheckComponent,\n      PrecheckVirtualObjectsTabComponent,\n      EnterMaintenanceModeDialogComponent,\n      PrecheckCapacityBarChartComponent,\n      PrecheckPersistenceTabComponent,\n      PrecheckCapacityBreakdownComponent,\n   ],\n   providers: [\n      PrecheckReportService,\n      SpaceEfficiencyService,\n   ],\n})\nexport class PrecheckReportModule {\n}\n","<!--Copyright 2018-2022 VMware, Inc. All rights reserved. -- VMware Confidential-->\n<vsan-validation id=\"evacuation-status-validation-message\"\n                 *ngIf=\"alertMessage\"\n                 class=\"alert-view\"\n                 [alert]=\"alertMessage\"\n                 (onClosed)=\"alertMessage = undefined\">\n</vsan-validation>\n<div *ngIf=\"loadingReport || loadingInitialInfo\" class=\"spinner central-spinner\">{{\"vsan.loading\" | localized}}</div>\n<ng-container *ngIf=\"!loadingReport && !loadingInitialInfo && report\">\n   <div *ngIf=\"!report.hasPrecheckReport && !isTaskForSelectedEntity\" id=\"evacuation-report-no-valid-test-label\">\n      {{\"vsan.evacuationStatus.report.noResult\" | localized}}\n   </div>\n   <ng-container *ngIf=\"report.hasPrecheckReport\">\n      <div class=\"report-header\">\n         <h5 id=\"evacuation-report-last-test-label\">\n            {{\"vsan.evacuationStatus.report.label\" | localized}}\n         </h5>\n         <div class=\"actions-container\">\n            <!--Enter maintenance mode button-->\n            <button id=\"enter-maintenance-mode-action\"\n                    class=\"btn btn-outline btn-sm\"\n                    *ngIf=\"enterMaintenanceModeVisible\"\n                    [disabled]=\"enterMaintenanceModeDisabledReason\"\n                    [attr.title]=\"enterMaintenanceModeDisabledReason\"\n                    (click)=\"onEnterMaintenanceModeClicked()\">\n               {{\"vsan.evacuationStatus.enterMaintenanceModeButtonLabel\" | localized}}\n            </button>\n            <!--Disk group actions-->\n            <button id=\"remove-disk-group-action\"\n                    class=\"btn btn-outline btn-sm\"\n                    *ngIf=\"removeDiskGroupVisible\"\n                    [disabled]=\"isDiskAndGroupActionDisabled\"\n                    [attr.title]=\"diskAndGroupActionDisabledReason\"\n                    (click)=\"deleteDiskGroup()\">\n               {{\"vsan.evacuationStatus.removeDiskgroupButtonLabel\" | localized}}\n            </button>\n            <button id=\"recreate-disk-group-action\"\n                    class=\"btn btn-outline btn-sm\"\n                    *ngIf=\"recreateDiskGroupVisible\"\n                    [disabled]=\"isDiskAndGroupActionDisabled\"\n                    [attr.title]=\"diskAndGroupActionDisabledReason\"\n                    (click)=\"recreateDiskGroup()\">\n               {{\"vsan.evacuationStatus.recreateDiskgroupButtonLabel\" | localized}}\n            </button>\n            <button id=\"unmount-disk-group-action\"\n                    class=\"btn btn-outline btn-sm\"\n                    *ngIf=\"unmountDiskGroupVisible\"\n                    [disabled]=\"isDiskAndGroupActionDisabled || !precheckEntity?.diskGroupData?.isMounted\"\n                    [attr.title]=\"diskAndGroupActionDisabledReason\"\n                    (click)=\"unmountDiskGroup()\">\n               {{\"vsan.evacuationStatus.unmountDiskgroupButtonLabel\" | localized}}\n            </button>\n            <!--Remove disk button-->\n            <button id=\"remove-disk-action\"\n                    class=\"btn btn-outline btn-sm\"\n                    *ngIf=\"removeDiskVisible\"\n                    [disabled]=\"isDiskAndGroupActionDisabled\"\n                    [attr.title]=\"diskAndGroupActionDisabledReason\"\n                    (click)=\"deleteDisk()\">\n               {{\"vsan.evacuationStatus.removeDiskButtonLabel\" | localized}}\n            </button>\n            <!--Unmount Vsan Max disk button-->\n            <button id=\"unmount-disk-action\"\n                    class=\"btn btn-outline btn-sm\"\n                    *ngIf=\"unmountVsanMaxDiskVisible\"\n                    [disabled]=\"isDiskAndGroupActionDisabled\"\n                    [attr.title]=\"diskAndGroupActionDisabledReason\"\n                    (click)=\"unmountVsanMaxDisk()\">\n               {{\"vsan.evacuationStatus.unmountDiskgroupButtonLabel\" | localized}}\n            </button>\n         </div>\n      </div>\n      <div>\n         <form class=\"clr-form clr-form-horizontal\">\n            <div class=\"clr-form-control\">\n               <!--Evacuation report last date and summary message-->\n               <label for=\"last-report-summary-message\" class=\"clr-control-label\">\n                  {{report.reportDate | l10nDate}}\n               </label>\n               <div class=\"clr-control-container\">\n                  <clr-icon id=\"selected-decommission-mode-summary-icon\"\n                            [attr.shape]=\"statusIcon\"\n                            [ngClass]=\"getIconClasses(statusIcon)\">\n                  </clr-icon>\n                  <span id=\"last-report-summary-message\">{{getSummaryReportMessage()}}</span>\n               </div>\n            </div>\n         </form>\n         <!--Warning messages returned from backend-->\n         <ng-container *ngIf=\"report?.messages?.length\">\n            <div *ngFor=\"let message of report.messages; let i = index\" class=\"clr-row\">\n               <div id=\"report-warning-message-{{i}}\" class=\"clr-col-12\">\n                  {{message}}\n               </div>\n            </div>\n         </ng-container>\n      </div>\n      <ng-container *ngIf=\"!hasReportError; else capacityData\">\n         <clr-tabs class=\"evacuation-report-tabs display-flex-column\">\n            <!--Virtual objects tab-->\n            <clr-tab [ngClass]=\"{'display-flex-column' : isVirtualObjectsTabActive}\">\n               <button clrTabLink\n                       class=\"btn btn-link\">\n                  <span class=\"tab-label text-nowrap\"\n                        title=\"{{'vsan.evacuationStatus.report.predictedOverview.virtualObjectsTab.label' | localized}}\">\n                     {{\"vsan.evacuationStatus.report.predictedOverview.virtualObjectsTab.label\" | localized}}\n                  </span>\n                  <clr-icon *ngIf=\"!!virtualObjectsTabStatusIcon\"\n                            [attr.shape]=\"virtualObjectsTabStatusIcon\"\n                            [ngClass]=\"getIconClasses(virtualObjectsTabStatusIcon)\">\n                  </clr-icon>\n               </button>\n               <ng-template [(clrIfActive)]=\"isVirtualObjectsTabActive\">\n                  <clr-tab-content *clrIfActive class=\"display-flex-column\">\n                     <vsan-precheck-virtual-objects-tab class=\"display-flex-column\"\n                                                        [statusIcon]=\"virtualObjectsTabStatusIcon\"\n                                                        [durableVirtualObjects]=\"durableVirtualObjects\"\n                                                        [delayTimer]=\"report.clusterRepairTime\"\n                                                        [isDurabilitySupported]=\"displayDurabilityColumn()\"\n                                                        [inaccessibleObjectsCount]=\"getInaccessibleObjectsCount()\"\n                                                        [nonCompliantObjectsCount]=\"getNonCompliantObjectsCount()\"\n                                                        [noDurabilityObjectsCount]=\"getObjectsWithoutEnhancedDurabilityCount()\">\n                     </vsan-precheck-virtual-objects-tab>\n                  </clr-tab-content>\n               </ng-template>\n            </clr-tab>\n            <!--Capacity tab-->\n            <clr-tab [ngClass]=\"{'display-flex-column' : isCapacityTabActive}\">\n               <button clrTabLink\n                       class=\"btn btn-link\">\n                  <span class=\"tab-label text-nowrap\"\n                        title=\"{{'vsan.evacuationStatus.report.predictedOverview.capacityTab.label' | localized}}\">\n                     {{\"vsan.evacuationStatus.report.predictedOverview.capacityTab.label\" | localized}}\n                  </span>\n                  <clr-icon *ngIf=\"!!capacityTabStatusIcon\"\n                            [attr.shape]=\"capacityTabStatusIcon\"\n                            [ngClass]=\"getIconClasses(capacityTabStatusIcon)\">\n                  </clr-icon>\n               </button>\n               <ng-template [(clrIfActive)]=\"isCapacityTabActive\">\n                  <clr-tab-content class=\"evacuation-report-capacity-tab display-flex-column\">\n                     <ng-container *ngTemplateOutlet=\"capacityData\"></ng-container>\n                  </clr-tab-content>\n               </ng-template>\n            </clr-tab>\n            <!--Health tab-->\n            <clr-tab *ngIf=\"report?.healthSummary\" [ngClass]=\"{'display-flex-column' : isHealthTabActive}\">\n               <button clrTabLink\n                       class=\"btn btn-link\">\n                 <span class=\"tab-label text-nowrap\"\n                       title=\"{{'vsan.evacuationStatus.report.predictedOverview.healthTab.label' | localized}}\">\n                     {{\"vsan.evacuationStatus.report.predictedOverview.healthTab.label\" | localized}}\n                 </span>\n                  <clr-icon *ngIf=\"!!healthTabStatusIcon\"\n                            [attr.shape]=\"healthTabStatusIcon\"\n                            [ngClass]=\"getIconClasses(healthTabStatusIcon)\">\n                  </clr-icon>\n               </button>\n               <ng-template [(clrIfActive)]=\"isHealthTabActive\">\n                  <clr-tab-content class=\"display-flex-column\">\n                     <div>\n                        {{\"vsan.evacuationStatus.report.predictedOverview.healthTab.generalInfo\" | localized}}\n                     </div>\n                     <vsan-health-checks [isVirtualObjectsLinkShown]=\"false\"\n                                         [isDiskSpaceActionShown]=\"false\"\n                                         [vsanHealthData]=\"report?.healthSummary\"\n                                         [isFlat]=\"true\"\n                                         [includeBorderToDetails]=\"true\">\n                     </vsan-health-checks>\n                  </clr-tab-content>\n               </ng-template>\n            </clr-tab>\n            <!--Data persistence platform tab-->\n            <clr-tab [ngClass]=\"{'display-flex-column' : isPersistenceTabActive}\"\n                     *ngIf=\"report.persistenceData?.persistentInstances?.length\">\n               <button clrTabLink\n                       class=\"btn btn-link\">\n                  <span class=\"tab-label text-nowrap\"\n                        title=\"{{'vsan.evacuationStatus.report.predictedOverview.persistenceTab.label' | localized}}\">\n                     {{\"vsan.evacuationStatus.report.predictedOverview.persistenceTab.label\" | localized}}\n                  </span>\n                  <clr-icon *ngIf=\"!!persistenceTabStatusIcon\"\n                            [attr.shape]=\"persistenceTabStatusIcon\"\n                            [ngClass]=\"getIconClasses(persistenceTabStatusIcon)\">\n                  </clr-icon>\n               </button>\n               <ng-template [(clrIfActive)]=\"isPersistenceTabActive\">\n                  <clr-tab-content class=\"display-flex-column\">\n                     <vsan-precheck-persistence-tab [persistentInstances]=\"report.persistenceData?.persistentInstances\">\n                     </vsan-precheck-persistence-tab>\n                  </clr-tab-content>\n               </ng-template>\n            </clr-tab>\n         </clr-tabs>\n      </ng-container>\n   </ng-container>\n   <!--Capacity related information-->\n   <ng-template #capacityData>\n      <vsan-precheck-capacity-tab [capacityReports]=\"getCapacityReports\"\n                                  [hasPersistenceDataToRebuild]=\"hasPersistenceDataToRebuild\"\n                                  [hasError]=\"hasReportError\">\n      </vsan-precheck-capacity-tab>\n   </ng-template>\n</ng-container>\n","<!--Copyright 2020-2022 VMware, Inc. All rights reserved. -- VMware Confidential-->\n<!--Cluster capacity representation-->\n<div class=\"capacity-row\" *ngIf=\"!hasError\">\n   <label class=\"capacity-label\">\n      <div class=\"p7\">\n         {{\"vsan.evacuationStatus.report.predictedOverview.capacityTab.before\" | localized}}\n      </div>\n      <div class=\"p7\">\n         {{\"vsan.evacuationStatus.report.predictedOverview.capacityTab.after\" | localized}}\n      </div>\n   </label>\n   <vsan-precheck-capacity-bar-chart class=\"capacity-bar-chart\"\n                                     [preOperationCapacity]=\"clusterCapacity.preOperationCapacity\"\n                                     [postOperationCapacity]=\"clusterCapacity.postOperationCapacity\"\n                                     [warningThreshold]=\"clusterCapacity.warningThreshold\"\n                                     [errorThreshold]=\"clusterCapacity.errorThreshold\">\n   </vsan-precheck-capacity-bar-chart>\n</div>\n<!--Cluster capacity datagrid breakdown-->\n<clr-datagrid id=\"evacuation-report-capacity-table\" *ngIf=\"showCapacityTable()\">\n   <!-- Header columns -->\n   <clr-dg-column id=\"object-column\" class=\"primary-column\">\n      {{\"vsan.evacuationStatus.report.predictedOverview.capacityTab.table.objectHeader\" | localized}}\n   </clr-dg-column>\n   <clr-dg-column id=\"capacity-column\">{{getCapacityColumnHeader()}}</clr-dg-column>\n   <!-- Datagrid Content -->\n   <!--Fault domains-->\n   <clr-dg-row *ngFor=\"let faultDomain of clusterCapacity.faultDomains; let i = index\">\n      <clr-dg-cell id=\"fault-domain-name-cell-{{i}}\">\n         <div>\n            <clr-icon id=\"fault-domains-cell-icon-{{i}}\"\n                      aria-hidden=\"true\"\n                      [attr.shape]=\"Icon.FAULT_DOMAIN\">\n            </clr-icon>\n            <span>{{faultDomain.faultDomainName}}</span>\n         </div>\n      </clr-dg-cell>\n      <clr-dg-cell id=\"predicted-capcity-cell-{{i}}\">\n         <span *ngIf=\"hasFaultDomainErrors(faultDomain)\">\n            <clr-icon id=\"fault-domains-cell-{{i}}\"\n                      aria-hidden=\"true\"\n                      shape=\"error-standard\"\n                      class=\"is-solid is-error capacity-error-summary-icon\">\n            </clr-icon>\n            <span *ngIf=\"faultDomain.isAdditionalHostNeeded\">\n               {{\"vsan.evacuationStatus.report.predictedOverview.capacityTab.table.additionalHostNeeded\" | localized}}\n            </span>\n            <span *ngIf=\"faultDomain.hasInsufficientSpace\">\n               {{\"vsan.evacuationStatus.report.predictedOverview.capacityTab.table.insufficientSpace\" | localized}}\n            </span>\n            <span *ngIf=\"faultDomain.isComponentLimitReached\">\n               {{\"vsan.evacuationStatus.report.predictedOverview.capacityTab.table.componentLimitReached\" | localized}}\n            </span>\n         </span>\n         <div *ngIf=\"!hasFaultDomainErrors(faultDomain)\" class=\"capacity-cell\">\n            <vsan-precheck-capacity-bar-chart [preOperationCapacity]=\"faultDomain.preOperationCapacity\"\n                                              [postOperationCapacity]=\"faultDomain.postOperationCapacity\"\n                                              [warningThreshold]=\"clusterCapacity.warningThreshold\"\n                                              [errorThreshold]=\"clusterCapacity.errorThreshold\"\n                                              [isThinBar]=\"'true'\">\n            </vsan-precheck-capacity-bar-chart>\n         </div>\n      </clr-dg-cell>\n      <!--Hosts within fault domains-->\n      <!-- Inner cells -->\n      <ng-container ngProjectAs=\"clr-dg-row-detail\"\n                    *ngFor=\"let hostsCapacityData of faultDomain.hostsCapacityData; let j = index\">\n         <ng-template [clrIfExpanded]=\"hasFaultDomainErrors(faultDomain)\">\n            <clr-dg-row-detail>\n               <clr-dg-cell id=\"host-name-cell-{{j}}\">\n                  <span class=\"host-cell-indent\">\n                     <clr-icon id=\"host-cell-icon-{{j}}\" [attr.shape]=\"hostsCapacityData.iconId\">\n                     </clr-icon>\n                     <span [ngClass]=\"{'selected-entity': !!hostsCapacityData.selectedEntityType}\">\n                        {{hostsCapacityData.hostName}}\n                     </span>\n                  </span>\n               </clr-dg-cell>\n               <clr-dg-cell id=\"predicted-capcity-host-cell-{{j}}\">\n                  <ng-container *ngTemplateOutlet=\"hostCell; context: {item: hostsCapacityData, idx: j}\"></ng-container>\n               </clr-dg-cell>\n            </clr-dg-row-detail>\n         </ng-template>\n      </ng-container>\n   </clr-dg-row>\n   <!--Standalone hosts-->\n   <clr-dg-row *ngFor=\"let standaloneHost of clusterCapacity.standaloneHosts; let i = index\">\n      <clr-dg-cell id=\"host-name-cell-{{i}}\">\n         <div>\n            <clr-icon id=\"host-name-cell-icon-{{i}}\"\n                      [attr.shape]=\"standaloneHost.iconId\">\n            </clr-icon>\n            <span [ngClass]=\"{'selected-entity': !!standaloneHost.selectedEntityType}\">\n               {{standaloneHost.hostName}}\n            </span>\n         </div>\n      </clr-dg-cell>\n      <clr-dg-cell id=\"host-predicted-capcity-cell-{{i}}\">\n         <ng-container *ngTemplateOutlet=\"hostCell; context: {item: standaloneHost, idx: i}\"></ng-container>\n      </clr-dg-cell>\n   </clr-dg-row>\n   <clr-dg-footer>\n      <div class=\"color-legend-container\">\n         <div class=\"color-legend\" [style.background-color]=\"getGreenColor()\"></div>\n         <span class=\"color-legend-label\">\n            {{\"vsan.common.ok\" | localized}}\n         </span>\n         <div class=\"color-legend\" [style.background-color]=\"getYellowColor()\"></div>\n         <span class=\"color-legend-label\">\n            {{\"vsan.evacuationStatus.report.predictedOverview.capacityTab.warningThreshold\" | localized: clusterCapacity.warningThreshold}}\n         </span>\n         <div class=\"color-legend\" [style.background-color]=\"getRedColor()\"></div>\n         <span class=\"color-legend-label\">\n            {{\"vsan.evacuationStatus.report.predictedOverview.capacityTab.dangerThreshold\" | localized: clusterCapacity.errorThreshold}}\n         </span>\n         <div class=\"color-legend no-capacity-legend\"></div>\n         <span class=\"color-legend-label\">\n            {{\"vsan.evacuationStatus.report.predictedOverview.capacityTab.noCapacity\" | localized}}\n         </span>\n      </div>\n   </clr-dg-footer>\n</clr-datagrid>\n<!-- Template for the cell which holds either a recommendation or the bar charts for a given host-->\n<ng-template #hostCell let-item=\"item\" let-idx=\"idx\">\n   <div *ngIf=\"hasHostErrors(item)\">\n      <clr-icon id=\"host-cell-error-{{idx}}\"\n                aria-hidden=\"true\"\n                shape=\"error-standard\"\n                class=\"is-solid is-error capacity-error-summary-icon\">\n      </clr-icon>\n      <ng-container *ngIf=\"hasError && !!item.selectedEntityType\">\n         <span *ngIf=\"item.selectedEntityType === PrecheckEntityType.HOST\">\n            {{\"vsan.evacuationStatus.report.predictedOverview.capacityTab.table.hostDecommissionedFailure\" | localized}}\n         </span>\n         <span *ngIf=\"item.selectedEntityType === PrecheckEntityType.DISK_GROUP\">\n            {{\"vsan.evacuationStatus.report.predictedOverview.capacityTab.table.diskGroupDecommissionedFailure\" | localized}}\n         </span>\n         <span *ngIf=\"item.selectedEntityType === PrecheckEntityType.DISK\">\n            {{\"vsan.evacuationStatus.report.predictedOverview.capacityTab.table.diskDecommissionedFailure\" | localized}}\n         </span>\n      </ng-container>\n      <span *ngIf=\"item.capacityNeeded\">\n         {{getInsufficientSpaceLabel(item.capacityNeeded)}}\n      </span>\n      <span *ngIf=\"item.isComponentLimitReached\">\n         {{\"vsan.evacuationStatus.report.predictedOverview.capacityTab.table.componentLimitReachedOnHost\" | localized}}\n      </span>\n   </div>\n   <ng-container *ngIf=\"!hasHostErrors(item)\">\n      <vsan-precheck-capacity-bar-chart [preOperationCapacity]=\"item.preOperationCapacity\"\n                                        [postOperationCapacity]=\"item.postOperationCapacity\"\n                                        [selectedEntityType]=\"item.selectedEntityType\"\n                                        [warningThreshold]=\"clusterCapacity.warningThreshold\"\n                                        [errorThreshold]=\"clusterCapacity.errorThreshold\"\n                                        [isThinBar]=\"'true'\">\n      </vsan-precheck-capacity-bar-chart>\n   </ng-container>\n</ng-template>","/* Copyright 2018-2022 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, OnInit} from \"@angular/core\";\nimport ObjectInfo from \"@component/inventory/tree-view/ObjectInfo\";\nimport {TreeNode} from \"@component/inventory/tree-view/tree-node\";\nimport {UnavailableViewSpec} from \"@component/unavailable-view/unavailable-view-spec\";\nimport {DecommissionMode} from \"@generated/decommission-mode\";\nimport {DiskData} from \"@generated/disk-data\";\nimport {PermissionService} from \"@generated/permission-service\";\nimport {PrecheckData} from \"@generated/precheck-data\";\nimport {PrecheckEntity} from \"@generated/precheck-entity\";\nimport {PrecheckEntityType} from \"@generated/precheck-entity-type\";\nimport {PrecheckOperation} from \"@generated/precheck-operation\";\nimport {PrecheckService} from \"@generated/precheck-service\";\nimport {PrecheckTaskData} from \"@generated/precheck-task-data\";\nimport {PrecheckTaskType} from \"@generated/precheck-task-type\";\nimport {Privileges} from \"@generated/privileges\";\nimport {SpaceEfficiencyConfig} from \"@generated/space-efficiency-config\";\nimport {TaskInfoData} from \"@generated/task-info-data\";\nimport {TaskService} from \"@generated/task-service\";\nimport {EvacuationContext} from \"@navigation/context/evacuation.context\";\nimport {RefreshHandler} from \"@service/global-refresh.service\";\nimport {ManagedObject} from \"@service/managed-object\";\nimport {ScreenReaderAnnouncer} from \"@service/screen-reader-announcer.service\";\nimport {SpaceEfficiencyService} from \"@service/space-efficiency-service\";\nimport {TaskStatus} from \"@service/task-monitor-service\";\nimport {Logger} from \"@util/logger\";\nimport {VsanDataMigrationUtil} from \"@util/vsan-data-migration-util\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {PrecheckUtil} from \"./precheck-util\";\nimport {PrecheckReportService} from \"./report/precheck-report.service\";\n\n@Component({\n   templateUrl: \"precheck.html\",\n   styleUrls: [\"precheck.scss\"],\n   selector: \"vsan-precheck\",\n})\nexport class PrecheckComponent implements OnInit {\n   private static readonly TIMEOUT_IN_MS: number = 2000;\n\n   private static readonly NEED_REFRESH_ACTIONS: PrecheckTaskType[] = [\n      PrecheckTaskType.HOST_ENTER_MAINTENANCE_MODE,\n      PrecheckTaskType.DISKGROUP_REMOVAL,\n      PrecheckTaskType.DISKGROUP_UNMOUNT,\n      PrecheckTaskType.DISKGROUP_RECREATE,\n      PrecheckTaskType.DISK_REMOVAL,\n      PrecheckTaskType.DISK_UNMOUNT,\n   ];\n\n   clusterRef: ManagedObject = ManagedObject.contextObject;\n   loading: boolean;\n   alertMessage: string;\n   spaceEfficiencyConfig: SpaceEfficiencyConfig;\n   isHostResourcePrecheckSupported: boolean;\n   isDiskResourcePrecheckSupported: boolean;\n   precheckEntities: PrecheckEntity[];\n   precheckEntitiesTreeNodes: TreeNode[];\n   selectedPrecheckEntities: PrecheckEntity[];\n   selectedDecommissionMode: DecommissionMode;\n   diskGroupOfSelectedDisk: PrecheckEntity;\n   precheckUnsupportedLabel: string;\n   precheckTask: PrecheckTaskData;\n   taskProgress: number;\n   showReport: boolean;\n   // whether we should display information for the task progress\n   // Changed when task is started, finished and on selection change.\n   isPrecheckInProgress: boolean;\n   // If there is another operation on the cluster the \"Pre-check\" button is disabled\n   isClusterOperationInProgress: boolean;\n   // Whether the running task is for the selected entity.\n   // Changed on task started and on selection change.\n   isRunningTaskForSelectedEntity: boolean;\n   // Whether the pre-check report is refreshed, mark it to false to load report.\n   reportRefreshed: boolean = false;\n\n   unavailableView: UnavailableViewSpec;\n   hasEditPrivilege: boolean;\n   isVsanMaxEnabled: boolean;\n\n   @ScreenReaderAnnouncer()\n   srOnlyMessage: string;\n\n   get selectedPrecheckEntity(): PrecheckEntity {\n      return VsanUiUtils.isEmpty(this.selectedPrecheckEntities)\n            ? null\n            : this.selectedPrecheckEntities[0];\n   }\n\n   set selectedPrecheckEntity(entity: PrecheckEntity) {\n      this.selectedPrecheckEntities = entity\n            ? [entity]\n            : [];\n      this.precheckUnsupportedLabel = this.getPrecheckUnsupportedLabel();\n      // Update disk group if new entity is a capacity disk.\n      this.diskGroupOfSelectedDisk = !!entity && entity.type === PrecheckEntityType.DISK\n            ? PrecheckUtil.extractParentEntityByUuid(entity.uuid, this.precheckEntities)\n            : null;\n   }\n\n   constructor(private precheckService: PrecheckService,\n         private precheckReportService: PrecheckReportService,\n         private taskService: TaskService,\n         private permissionService: PermissionService,\n         private spaceEfficiencyService: SpaceEfficiencyService) {\n   }\n\n   ngOnInit(): void {\n      this.loading = true;\n      this.permissionService.hasPermissions(this.clusterRef, [Privileges.EDIT_CLUSTER()])\n            .then(result => this.hasEditPrivilege = result)\n            .catch(error => {\n               Logger.warn(\"Unable to check edit cluster privilege: \", error);\n            });\n\n      const context: EvacuationContext = VsanUiUtils.getNavigationData();\n      if (context) {\n         if (context.selectedEntity) {\n            this.selectedPrecheckEntity = PrecheckEntity.Factory.create(\n                  ManagedObject.fromUid(context.selectedEntity), null, null, null, null, true, false, null, null, null);\n            if (context.objectUuid) {\n               this.selectedPrecheckEntity.uuid = context.objectUuid;\n            }\n            if (context.selectedEvacuationType) {\n               this.selectedDecommissionMode = context.selectedEvacuationType;\n            }\n         } else {\n            Logger.error(\"Missing selected entity when context is populated for Data migration pre-check view\");\n         }\n      }\n      this.refresh();\n   }\n\n   @RefreshHandler\n   refresh(): void {\n      this.loading = true;\n      this.unavailableView = null;\n\n      this.precheckService.getPrecheckData(this.clusterRef)\n            .then(this.onPrecheckRetrieved)\n            .catch(this.onError)\n            .finally(() => this.loading = false);\n   }\n\n   onPrecheckEntityChange(entity: PrecheckEntity): void {\n      this.selectedPrecheckEntity = entity;\n      this.selectedDecommissionMode = DecommissionMode.ensureObjectAccessibility;\n      // show report only when the resource pre-check can be run for the selected entity.\n      this.showReport = this.precheckSupported;\n      this.reportRefreshed = false;\n      this.isPrecheckInProgress = false;\n      this.isRunningTaskForSelectedEntity = false;\n   }\n\n   get precheckSupported(): boolean {\n      return this.selectedPrecheckEntity && !this.precheckUnsupportedLabel;\n   }\n\n   onDecommissionModeSummaryChanged(event: DecommissionMode): void {\n      this.selectedDecommissionMode = event;\n      this.reportRefreshed = false;\n      this.showReport = true;\n      this.isPrecheckInProgress = false;\n      this.isRunningTaskForSelectedEntity = false;\n   }\n\n   onReportRefreshed(): void {\n      this.reportRefreshed = true;\n   }\n\n   // override this flag only when it is regarding another entity in the cluster\n   onHasRunningTask(event: boolean): void {\n      if (!this.isRunningTaskForSelectedEntity) {\n         this.isClusterOperationInProgress = event;\n      }\n   }\n\n   async onPrecheckClicked(): Promise<void> {\n      try {\n         let taskType: PrecheckTaskType;\n         let operation: PrecheckOperation;\n         switch (this.selectedPrecheckEntity.type) {\n            case PrecheckEntityType.HOST:\n               taskType = PrecheckTaskType.HOST_PRECHECK;\n               operation = PrecheckOperation.ENTER_MAINTENANCE_MODE;\n               break;\n            case PrecheckEntityType.DISK_GROUP:\n               taskType = PrecheckTaskType.DISKGROUP_PRECHECK;\n               operation = PrecheckOperation.DISK_DATA_EVACUATION;\n               break;\n            case PrecheckEntityType.DISK:\n               taskType = PrecheckTaskType.DISK_PRECHECK;\n               operation = PrecheckOperation.DISK_DATA_EVACUATION;\n               break;\n         }\n\n         const precheckTaskRef: ManagedObject = await this.precheckService.runDataMigrationPrecheck(\n               this.clusterRef,\n               this.selectedPrecheckEntity.uuid,\n               this.selectedDecommissionMode.toString(),\n               operation);\n         this.precheckTask = PrecheckTaskData.Factory.create(\n               precheckTaskRef, // task MoRef\n               this.selectedPrecheckEntity.name, // entity name\n               this.selectedPrecheckEntity.uuid, // enitty uuid\n               null, // host name\n               this.selectedDecommissionMode, // decommission mode\n               taskType); // pre-check type\n         await this.onPrecheckTaskStarted(this.precheckTask);\n      } catch (error) {\n         this.onError(error);\n      }\n   }\n\n   async onPrecheckTaskStarted(precheckTaskData: PrecheckTaskData): Promise<void> {\n      this.alertMessage = undefined;\n      if (!precheckTaskData) {\n         return;\n      }\n\n      this.showReport = false;\n      this.isRunningTaskForSelectedEntity = this.precheckReportService.isTaskForSelectedEntity(\n            precheckTaskData, this.selectedPrecheckEntity.uuid, this.selectedDecommissionMode);\n      this.isClusterOperationInProgress = true;\n      if (!this.isRunningTaskForSelectedEntity) {\n         // show the report if the selection is changed\n         this.showReport = true;\n         return;\n      }\n\n      this.taskProgress = 0;\n      this.isPrecheckInProgress = true;\n      this.precheckTask = precheckTaskData;\n      // Await task completion\n      try {\n         while (true) {\n            // do not track the progress if the selection is changed\n            if (!this.isPrecheckInProgress) {\n               return;\n            }\n\n            const taskInfo: TaskInfoData = await this.taskService.getInfo(this.precheckTask.taskMoRef);\n            if (!taskInfo || taskInfo.status === TaskStatus.SUCCESS) {\n               break;\n            }\n\n            if (taskInfo.status === TaskStatus.ERROR) {\n               const errorMessage: string = this.precheckReportService.getFailedTaskMessage(\n                     this.precheckTask.taskType, this.selectedPrecheckEntity.name);\n               this.onError(errorMessage);\n               return;\n            }\n\n            this.taskProgress = taskInfo.progress;\n            // repeat on every 2 seconds\n            await new Promise(resolve => setTimeout(resolve, PrecheckComponent.TIMEOUT_IN_MS));\n         }\n      } catch (error) {\n         this.onError(error);\n         return;\n      }\n\n      this.isPrecheckInProgress = false;\n      this.isClusterOperationInProgress = false;\n\n      const refreshNeeded: boolean =\n            PrecheckComponent.NEED_REFRESH_ACTIONS.indexOf(precheckTaskData.taskType) > -1;\n      if (refreshNeeded) {\n         this.selectedPrecheckEntity = undefined;\n         this.refresh();\n      } else {\n         this.showReport = true;\n         this.reportRefreshed = false;\n      }\n   }\n\n   onSelectedObjectInfosChange(objectInfos: ObjectInfo[]): void {\n      if (VsanUiUtils.isEmpty(objectInfos) ||\n            (this.selectedPrecheckEntity && objectInfos[0].uuid === this.selectedPrecheckEntity.uuid)) {\n         return;\n      }\n      this.onPrecheckEntityChange(objectInfos[0] as PrecheckEntity);\n      this.selectedPrecheckEntities = objectInfos as PrecheckEntity[];\n   }\n\n   private convertToTreeNodes(entities: PrecheckEntity[]): TreeNode[] {\n      if (VsanUiUtils.isEmpty(entities)) {\n         return [];\n      }\n      return entities.map(entity => new TreeNode(entity, this.convertToTreeNodes(entity.children)));\n   }\n\n   private getPrecheckUnsupportedLabel(): string {\n      if (!this.selectedPrecheckEntity) {\n         return \"\";\n      }\n      switch (this.selectedPrecheckEntity.type) {\n         case PrecheckEntityType.HOST:\n            if (!this.selectedPrecheckEntity.isHostConnected) {\n               return VsanUiUtils.getString(\"vsan.dataMigrationPrecheck.notSupported.host.disconnected\");\n            } else if (this.selectedPrecheckEntity.isInMaintenanceMode) {\n               return VsanUiUtils.getString(\"vsan.dataMigrationPrecheck.notSupported.host.maintenanceMode\");\n            }\n            break;\n         case PrecheckEntityType.DISK_GROUP:\n            if (this.selectedPrecheckEntity.isInMaintenanceMode) {\n               return VsanUiUtils.getString(\"vsan.dataMigrationPrecheck.notSupported.diskgroup.maintenanceMode\");\n            }\n            if (this.selectedPrecheckEntity.diskGroupData) {\n               if (this.selectedPrecheckEntity.diskGroupData.isLocked) {\n                  return VsanUiUtils.getString(\"vsan.dataMigrationPrecheck.notSupported.diskgroup.locked\");\n               } else if (!this.selectedPrecheckEntity.diskGroupData.isMounted) {\n                  return VsanUiUtils.getString(\"vsan.dataMigrationPrecheck.notSupported.diskgroup.unmounted\");\n               }\n            }\n            break;\n         case PrecheckEntityType.DISK:\n            if (this.selectedPrecheckEntity.isInMaintenanceMode) {\n               return VsanUiUtils.getString(\"vsan.dataMigrationPrecheck.notSupported.disk.maintenanceMode\");\n            }\n            if (!this.spaceEfficiencyService.isDiskPreCheckEvacuationSupported(this.spaceEfficiencyConfig)) {\n               return VsanUiUtils.getString(\"vsan.dataMigrationPrecheck.notSupported.disk.dedupEnabled\");\n            }\n            if (this.selectedPrecheckEntity.diskData) {\n               if (this.selectedPrecheckEntity.diskData.deviceState === DiskData.DeviceState.OFF) {\n                  return this.isVsanMaxEnabled\n                        ? VsanUiUtils.getString(\"vsan.dataMigrationPrecheck.notSupported.disk.unmounted\")\n                        : VsanUiUtils.getString(\"vsan.dataMigrationPrecheck.notSupported.disk.unmountedDiskGroup\");\n               } else if (this.selectedPrecheckEntity.diskData.deviceState === DiskData.DeviceState.ERROR) {\n                  return VsanUiUtils.getString(\"vsan.dataMigrationPrecheck.notSupported.disk.deadOrError\");\n               }\n            }\n            break;\n         default:\n            return \"\";\n      }\n   }\n\n   getOperationInProgressLabel(): string {\n      if (!this.precheckTask) {\n         return VsanUiUtils.getString(\"vsan.evacuationStatus.report.inProgress\", this.taskProgress);\n      }\n\n      switch (this.precheckTask.taskType) {\n         case PrecheckTaskType.HOST_ENTER_MAINTENANCE_MODE:\n            return VsanUiUtils.getString(\"vsan.evacuationStatus.report.inProgress.maintenanceMode\", this.taskProgress);\n         case PrecheckTaskType.DISKGROUP_REMOVAL:\n            return VsanUiUtils.getString(\"vsan.evacuationStatus.report.inProgress.removeGroup\", this.taskProgress);\n         case PrecheckTaskType.DISKGROUP_RECREATE:\n            return VsanUiUtils.getString(\"vsan.evacuationStatus.report.inProgress.recreateGroup\", this.taskProgress);\n         case PrecheckTaskType.DISKGROUP_UNMOUNT:\n            return VsanUiUtils.getString(\"vsan.evacuationStatus.report.inProgress.unmountGroup\", this.taskProgress);\n         case PrecheckTaskType.DISK_REMOVAL:\n            return VsanUiUtils.getString(\"vsan.evacuationStatus.report.inProgress.removeDisk\", this.taskProgress);\n         case PrecheckTaskType.DISK_UNMOUNT:\n            return VsanUiUtils.getString(\"vsan.evacuationStatus.report.inProgress.unmountDisk\", this.taskProgress);\n         default:\n            // Running data migration pre-check for host, disk group or disk.\n            return VsanUiUtils.getString(\"vsan.evacuationStatus.report.inProgress\", this.taskProgress);\n      }\n   }\n\n   getGeneralMessageLabel(): string {\n      if (this.isVsanMaxEnabled) {\n         return VsanUiUtils.getString(\"vsan.evacuationStatus.hostDisk.resourcePrecheck.generalMessage\");\n      }\n\n      return this.isDiskResourcePrecheckSupported\n            ? VsanUiUtils.getString(\"vsan.evacuationStatus.hostDiskGroupDisk.resourcePrecheck.generalMessage\")\n            : VsanUiUtils.getString(\"vsan.evacuationStatus.host.resourcePrecheck.generalMessage\");\n   }\n\n   private onPrecheckRetrieved = (result: PrecheckData) => {\n      if (!result) {\n         return;\n      }\n\n      if (!result.isHostResourcePrecheckSupported) {\n         this.unavailableView = UnavailableViewSpec.DATA_MIGRATION_PRECHECK_VIEW_OLD_HOSTS;\n         this.announceToScreenReader();\n         return;\n      }\n\n      if (VsanUiUtils.isEmpty(result.precheckEntities)) {\n         this.unavailableView = UnavailableViewSpec.DATA_MIGRATION_PRECHECK_VIEW_NO_HOSTS;\n         this.announceToScreenReader();\n         return;\n      }\n\n      this.alertMessage = result.errorMessage;\n      this.spaceEfficiencyConfig = result.spaceEfficiencyConfig;\n      this.isHostResourcePrecheckSupported = result.isHostResourcePrecheckSupported;\n      this.isDiskResourcePrecheckSupported = result.isDiskResourcePrecheckSupported;\n      this.isVsanMaxEnabled = result.isVsanMaxEnabled;\n\n      this.precheckEntities = result.precheckEntities;\n      this.precheckEntitiesTreeNodes = this.convertToTreeNodes(this.precheckEntities);\n      this.selectPrecheckEntity();\n\n      if (this.selectedDecommissionMode === undefined || this.selectedDecommissionMode === null) {\n         this.selectedDecommissionMode = DecommissionMode.ensureObjectAccessibility;\n      }\n      this.showReport = this.precheckSupported;\n      this.reportRefreshed = false;\n\n      this.announceToScreenReader();\n   };\n\n   private selectPrecheckEntity(): void {\n      if (!this.selectedPrecheckEntity || VsanUiUtils.isEmpty(this.precheckEntities)) {\n         return;\n      }\n\n      if (this.selectedPrecheckEntity.uuid) {\n         // Update selected evacuation entity based on uuid after refreshing entities.\n         this.selectedPrecheckEntity = PrecheckUtil.extractPrecheckEntityByUuid(\n               this.selectedPrecheckEntity.uuid, this.precheckEntities);\n      } else {\n         // When we navigate the user from Enter Maintenance Mode dialog to this page, it only passes hostRef,\n         // we need to use the hostRef to extract the entire host entity data.\n         this.selectedPrecheckEntity = PrecheckUtil.extractHostEntity(\n               this.selectedPrecheckEntity.hostRef, this.precheckEntities);\n      }\n   }\n\n   private announceToScreenReader(): void {\n      if (this.selectedPrecheckEntity && this.selectedDecommissionMode) {\n         this.srOnlyMessage = VsanUiUtils.getString(\"vsan.evacuationStatus.report.srMessage\",\n               this.selectedPrecheckEntity.name,\n               VsanDataMigrationUtil.getLocalizedDecommissionMode(this.selectedDecommissionMode));\n      } else {\n         this.srOnlyMessage = VsanUiUtils.getString(\"vsan.screenReader.message.page.loaded\",\n               VsanUiUtils.getString(\"vsan.monitor.evacuationStatus.label\"));\n      }\n   }\n\n   private onError = (error: any) => {\n      this.alertMessage = error;\n      this.isRunningTaskForSelectedEntity = false;\n      this.isPrecheckInProgress = false;\n      this.isClusterOperationInProgress = false;\n      // even when the task fails we want to show the last valid report\n      this.showReport = true;\n      this.reportRefreshed = false;\n   };\n}\n","/* Copyright 2018-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {ChangeDetectionStrategy, Component, Input, OnInit} from \"@angular/core\";\nimport {BarChartService} from \"@component/chart/capacity-bar-chart/bar-chart.service\";\nimport {PrecheckCapacityData} from \"@generated/precheck-capacity-data\";\nimport {PrecheckEntityType} from \"@generated/precheck-entity-type\";\nimport {PrecheckReportService} from \"../precheck-report.service\";\n\n@Component({\n   templateUrl: \"precheck-capacity-bar-chart.html\",\n   styleUrls: [\"precheck-capacity-bar-chart.scss\"],\n   selector: \"vsan-precheck-capacity-bar-chart\",\n   changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PrecheckCapacityBarChartComponent implements OnInit {\n   @Input()\n   preOperationCapacity: PrecheckCapacityData;\n\n   @Input()\n   postOperationCapacity: PrecheckCapacityData;\n\n   @Input()\n   warningThreshold: number;\n\n   @Input()\n   errorThreshold: number;\n\n   @Input()\n   isThinBar: boolean;\n\n   @Input()\n   selectedEntityType: PrecheckEntityType;\n\n   afterBarWidth: number;\n\n   beforeUsedCapacityWidth: number;\n\n   afterUsedCapacityWidth: number;\n\n   beforeBarColor: string;\n\n   afterBarColor: string;\n\n   constructor(private precheckReportService: PrecheckReportService,\n         private barChartService: BarChartService) {\n   }\n\n   ngOnInit(): void {\n      this.afterBarWidth = this.precheckReportService.getBarChartWidth(this.preOperationCapacity.totalCapacity,\n            this.postOperationCapacity.totalCapacity) || 100;\n\n      this.beforeBarColor = this.barChartService.getColorPalette(this.preOperationCapacity.usedCapacity,\n            this.preOperationCapacity.totalCapacity, this.warningThreshold, this.errorThreshold)[0];\n      this.afterBarColor = this.barChartService.getColorPalette(this.postOperationCapacity.usedCapacity,\n            this.postOperationCapacity.totalCapacity, this.warningThreshold, this.errorThreshold)[0];\n\n      this.beforeUsedCapacityWidth = this.barChartService.asPercentage(this.preOperationCapacity.usedCapacity,\n            this.preOperationCapacity.totalCapacity);\n      this.afterUsedCapacityWidth = this.barChartService.asPercentage(this.postOperationCapacity.usedCapacity,\n            this.postOperationCapacity.totalCapacity);\n   }\n\n   hasBeforeBar(): boolean {\n      return !this.selectedEntityType || !!this.preOperationCapacity.totalCapacity;\n   }\n\n   // display the after bar when either there is capacity difference, cluster level bars are displayed,\n   // or the bar is for the selected entity\n   hasAfterBar(): boolean {\n      return this.hasCapacityDifference() || !this.isThinBar || !!this.selectedEntityType;\n   }\n\n   getPreOperationCapacityLabel(): string {\n      return this.precheckReportService.getCapacityLabel(this.preOperationCapacity, this.isThinBar,\n            this.hasCapacityDifference());\n   }\n\n   getPostOperationCapacityLabel(): string {\n      return this.precheckReportService.getPostOperationCapacityLabel(this.postOperationCapacity, this.isThinBar,\n            this.selectedEntityType);\n   }\n\n   hasCapacityDifference(): boolean {\n      return this.precheckReportService.hasCapacityDifference(this.preOperationCapacity,\n            this.postOperationCapacity);\n   }\n}\n","/* Copyright 2018-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, EventEmitter, HostBinding, Input, OnInit, Output} from \"@angular/core\";\nimport {GuardRailMessageStatus} from \"@generated/guard-rail-message-status\";\nimport {GuardRailPropertyProviderAdapter} from \"@generated/guard-rail-property-provider-adapter\";\nimport {PrecheckReport} from \"@generated/precheck-report\";\nimport {PrecheckService} from \"@generated/precheck-service\";\nimport {RefreshHandler} from \"@service/global-refresh.service\";\nimport {ManagedObject} from \"@service/managed-object\";\nimport {Logger} from \"@util/logger\";\nimport {ReferenceWatcher} from \"@util/reference-watcher\";\nimport {PrecheckReportService} from \"../report/precheck-report.service\";\n\n@Component({\n   templateUrl: \"precheck-guard-rails.html\",\n   styleUrls: [\"precheck-guard-rails.scss\"],\n   selector: \"vsan-precheck-guard-rails\",\n   providers: [ReferenceWatcher],\n})\nexport class PrecheckGuardRailsComponent implements OnInit {\n   @Input()\n   isDiskResourcePrecheckSupported: boolean;\n\n   @Input()\n   isVsanMaxEnabled: boolean;\n\n   @Output()\n   hasRunningTask: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n   @HostBinding(\"class\")\n   get noContentDisplayed(): string {\n      return (this.warningMessages && this.warningMessages.length > 0) || this.runningTaskMessage || this.alertMessage ?\n            \"\" : PrecheckGuardRailsComponent.NO_BOTTOM_SPACING_CLASS;\n   }\n\n   private static readonly GUARD_RAIL_MESSAGES_PROPERTY: string = \"clusterGuardRailMessages\";\n   private static readonly NO_BOTTOM_SPACING_CLASS: string = \"no-bottom-spacing\";\n   private static readonly TIMEOUT_IN_MS: number = 5000;\n\n   warningMessages: string[] = [];\n   alertMessage: string;\n   runningTaskMessage: string;\n\n   constructor(private precheckService: PrecheckService,\n         private precheckReportService: PrecheckReportService,\n         private guardRailService: GuardRailPropertyProviderAdapter,\n         private refWatcher: ReferenceWatcher) {\n   }\n\n   async ngOnInit(): Promise<any> {\n      await this.fetch();\n      this.refWatcher.setInterval(() => this.fetch(), PrecheckGuardRailsComponent.TIMEOUT_IN_MS);\n   }\n\n   @RefreshHandler\n   private async fetch(): Promise<any> {\n      try {\n         const result: any[] = await Promise.all([\n            this.precheckService.getPrecheckReport(ManagedObject.contextObject, null, null, null),\n            this.guardRailService.getGuardRailsMessages(ManagedObject.contextObject),\n         ]);\n         if (result && result.length === 2) {\n            this.populateRunningTaskMessage(result[0]);\n            this.populateGuardRailMessages(result[1]);\n         }\n      } catch (error) {\n         Logger.error(`Unexpected error ${error} encountered while querying Cluster guard rail messages`);\n         this.warningMessages = [];\n         this.runningTaskMessage = undefined;\n         this.alertMessage = error;\n      }\n   }\n\n   private populateRunningTaskMessage = (precheckReport: PrecheckReport) => {\n      if (!precheckReport || !precheckReport.runningTask) {\n         this.hasRunningTask.emit(false);\n         this.runningTaskMessage = undefined;\n         return;\n      }\n\n      this.hasRunningTask.emit(true);\n      this.runningTaskMessage = this.precheckReportService.getRunningTaskMessage(\n            precheckReport.runningTask, this.isDiskResourcePrecheckSupported, this.isVsanMaxEnabled);\n   };\n\n   private populateGuardRailMessages = (guardRailMessages: Map<GuardRailMessageStatus, string[]>) => {\n      this.warningMessages = guardRailMessages[GuardRailMessageStatus.WARNING];\n   };\n}\n","<!--Copyright 2018-2020 VMware, Inc. All rights reserved. -- VMware Confidential-->\n<vsan-validation id=\"evacuation-status-guard-rails-error-message\"\n                 *ngIf=\"alertMessage\"\n                 [alert]=\"alertMessage\">\n</vsan-validation>\n<!--Warning messages-->\n<clr-alert *ngIf=\"warningMessages?.length || runningTaskMessage\"\n           id=\"evacuation-status-guard-rails-warning-messages\"\n           [clrAlertType]=\"'warning'\"\n           [clrAlertClosable]=\"false\">\n   <!--Warning message for running blocking task on the cluster-->\n   <clr-alert-item *ngIf=\"runningTaskMessage\"\n                   id=\"evacuation-status-guard-rails-running-task-message\">\n      <span class=\"alert-text\" role=\"alert\">{{runningTaskMessage}}</span>\n   </clr-alert-item>\n   <!--guard-rail messages-->\n   <clr-alert-item *ngFor=\"let warningMessage of warningMessages\">\n      <span class=\"alert-text\" role=\"alert\">{{warningMessage}}</span>\n   </clr-alert-item>\n</clr-alert>\n","/* Copyright 2018-2022 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, EventEmitter, Input, OnInit, Output} from \"@angular/core\";\nimport {DecommissionMode} from \"@generated/decommission-mode\";\nimport {DurabilityState} from \"@generated/durability-state\";\nimport {PermissionService} from \"@generated/permission-service\";\nimport {PrecheckClusterCapacityData} from \"@generated/precheck-cluster-capacity-data\";\nimport {PrecheckEntity} from \"@generated/precheck-entity\";\nimport {PrecheckEntityType} from \"@generated/precheck-entity-type\";\nimport {PrecheckOperation} from \"@generated/precheck-operation\";\nimport {PrecheckReport} from \"@generated/precheck-report\";\nimport {PrecheckResultStatusType} from \"@generated/precheck-result-status-type\";\nimport {PrecheckService} from \"@generated/precheck-service\";\nimport {PrecheckTaskData} from \"@generated/precheck-task-data\";\nimport {PrecheckTaskType} from \"@generated/precheck-task-type\";\nimport {Privileges} from \"@generated/privileges\";\nimport {VirtualObjectModel} from \"@generated/virtual-object-model\";\nimport {VsanCapabilityData} from \"@generated/vsan-capability-data\";\nimport {VsanCapabilityProvider} from \"@generated/vsan-capability-provider\";\nimport {VsanConfigService} from \"@generated/vsan-config-service\";\nimport {VsanConfigSpec} from \"@generated/vsan-config-spec\";\nimport {WhatIfPropertyProvider} from \"@generated/what-if-property-provider\";\nimport {DiskGroupActionData} from \"@model/disk-group-action.data\";\nimport {HostActionData} from \"@model/host-action.data\";\nimport {DeleteDisksContext} from \"@navigation/context/delete-disks-context\";\nimport {DiskGroupActionContext} from \"@navigation/context/disk-group-action-context\";\nimport {UnmountDiskContext} from \"@navigation/context/unmount-disk-context\";\nimport {ManagedObject} from \"@service/managed-object\";\nimport {Icon} from \"@util/icon\";\nimport {Logger} from \"@util/logger\";\nimport {ModalBuilder} from \"@util/modal-builder\";\nimport {VsanDiskMgmtActionsUtil} from \"@util/vsan-disk-mgmt-actions-util\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {VsanRoutes} from \"../../../vsan-routes\";\nimport {EnterMaintenanceModeDialogContext} from \"../enter-maintenance-mode-dialog-context\";\nimport {EnterMaintenanceModeDialogComponent} from \"../enter-maintenance-mode-dialog.component\";\nimport {CapacityReport} from \"./capacity/precheck-capacity-tab.component\";\nimport {PrecheckReportService} from \"./precheck-report.service\";\n\n@Component({\n   templateUrl: \"precheck-report.html\",\n   styleUrls: [\"precheck-report.scss\"],\n   selector: \"vsan-precheck-report\",\n})\nexport class PrecheckReportComponent implements OnInit {\n\n   private readonly NO_DURABILITY_STATES: DurabilityState[] = [\n      DurabilityState.EXCEEDED_COMP_LIMIT,\n      DurabilityState.NO_RESOURCE,\n      DurabilityState.NO_SPACE,\n      DurabilityState.STALE_DURABILITY_COMP,\n   ];\n\n   readonly Icon: Icon = Icon;\n   loadingReport: boolean;\n   loadingInitialInfo: boolean;\n   alertMessage: string;\n   report: PrecheckReport;\n   durableVirtualObjects: VirtualObjectModel[] = [];\n   statusIcon: string;\n   virtualObjectsTabStatusIcon: string;\n   capacityTabStatusIcon: string;\n   healthTabStatusIcon: string;\n   persistenceTabStatusIcon: string;\n   isCapacityTabActive: boolean;\n   isHealthTabActive: boolean;\n   isVirtualObjectsTabActive: boolean;\n   isPersistenceTabActive: boolean;\n   isTaskForSelectedEntity: boolean;\n\n   // Actions status\n   enterMaintenanceModeVisible: boolean;\n   enterMaintenanceModeDisabledReason: string;\n   removeDiskGroupVisible: boolean;\n   recreateDiskGroupVisible: boolean;\n   unmountDiskGroupVisible: boolean;\n   removeDiskVisible: boolean;\n   unmountVsanMaxDiskVisible: boolean;\n   isDiskAndGroupActionDisabled: boolean;\n   diskAndGroupActionDisabledReason: string;\n\n   @Input()\n   diskGroupOfSelectedDisk: PrecheckEntity;\n\n   @Output()\n   precheckTaskStarted: EventEmitter<PrecheckTaskData> = new EventEmitter<PrecheckTaskData>();\n\n   @Input()\n   precheckEntity: PrecheckEntity;\n\n   @Input()\n   decommissionMode: DecommissionMode;\n\n   @Input()\n   isVsanMaxEnabled: boolean;\n\n   private _reportRefreshed: boolean;\n\n   @Input()\n   set reportRefreshed(refreshed: boolean) {\n      this._reportRefreshed = refreshed;\n      if (!refreshed && this.isInit) {\n         this.loadReport();\n         this.updateActionsStatus();\n      }\n   }\n\n   get reportRefreshed(): boolean {\n      return this._reportRefreshed;\n   }\n\n   @Output()\n   refreshReport: EventEmitter<void> = new EventEmitter<void>();\n\n   private isInit: boolean;\n   private autoClaimMode: boolean;\n   private hasEMMPermissions: boolean;\n   private hasEditPermission: boolean;\n   private hasStoragePermission: boolean;\n   private capabilities: VsanCapabilityData;\n\n   private _hasReportError: boolean;\n\n   set hasReportError(value: boolean) {\n      if (this._hasReportError !== value) {\n         this._hasReportError = value;\n         this.updateActionsStatus();\n      }\n   }\n\n   get hasReportError(): boolean {\n      return this._hasReportError;\n   }\n\n   get getCapacityReports(): Map<CapacityReport, PrecheckClusterCapacityData> {\n      const capacityReports: Map<CapacityReport, PrecheckClusterCapacityData> =\n            new Map<CapacityReport, PrecheckClusterCapacityData>();\n      if (this.report.clusterCapacity != null) {\n         capacityReports.set(CapacityReport.VSAN, this.report.clusterCapacity);\n      }\n      if (this.report.vsanDirectClusterCapacity != null) {\n         capacityReports.set(CapacityReport.VSAN_DIRECT, this.report.vsanDirectClusterCapacity);\n      }\n\n      return capacityReports;\n   }\n\n   get hasPersistenceDataToRebuild(): boolean {\n      return this.report.persistenceData && this.report.persistenceData.dataToRebuild > 0;\n   }\n\n   get isRecreateDiskGroupSupported(): boolean {\n      return this.capabilities && this.capabilities.isRecreateDiskGroupSupported;\n   }\n\n   constructor(private precheckService: PrecheckService,\n         private precheckReportService: PrecheckReportService,\n         private whatIfPropertyProvider: WhatIfPropertyProvider,\n         private capabilityProvider: VsanCapabilityProvider,\n         private permissionService: PermissionService,\n         private vsanConfigService: VsanConfigService) {\n   }\n\n   async ngOnInit(): Promise<void> {\n      const clusterRef: ManagedObject = ManagedObject.contextObject;\n      this.loadingInitialInfo = true;\n\n      try {\n         let privileges: Map<string, boolean>;\n         let vsanConfigSpec: VsanConfigSpec;\n         [privileges, this.capabilities, vsanConfigSpec] = await Promise.all([\n            this.permissionService.queryPermissions(\n                  clusterRef, [\n                     Privileges.EDIT_CLUSTER(),\n                     Privileges.CONFIG_STORAGE(),\n                     Privileges.HOST_MAINTENANCE(),\n                  ]),\n            this.capabilityProvider.getClusterCapabilityData(clusterRef),\n            this.vsanConfigService.getVsanConfigSpec(clusterRef),\n         ]);\n\n         this.hasEditPermission = privileges[Privileges.EDIT_CLUSTER()];\n         this.hasEMMPermissions = privileges[Privileges.HOST_MAINTENANCE()];\n         this.hasStoragePermission = privileges[Privileges.CONFIG_STORAGE()];\n         this.autoClaimMode = vsanConfigSpec.autoClaimDisks;\n      } catch (error) {\n         this.hasEditPermission = true;\n         this.hasEMMPermissions = true;\n         this.hasStoragePermission = true;\n         Logger.error(\"Unable to query the permissions or basic information required for precheck report operations. \"\n               + error);\n      } finally {\n         this.loadingInitialInfo = false;\n      }\n      if (!this.reportRefreshed) {\n         await this.loadReport();\n      }\n      this.updateActionsStatus();\n      this.isInit = true;\n   }\n\n   private async loadReport(): Promise<void> {\n      this.loadingReport = true;\n      try {\n         const operation: PrecheckOperation = this.precheckEntity.type === PrecheckEntityType.HOST\n               ? PrecheckOperation.ENTER_MAINTENANCE_MODE\n               : PrecheckOperation.DISK_DATA_EVACUATION;\n         this.report = await this.precheckService.getPrecheckReport(\n               ManagedObject.contextObject, this.precheckEntity, this.decommissionMode.toString(), operation);\n      } catch (error) {\n         this.alertMessage = error;\n      }\n      this.loadingReport = false;\n      this.refreshReport.emit();\n\n      // If the report is null or it doesn't belong to the selected entity and decommission mode, return.\n      if (!this.report || this.report.uuid !== this.precheckEntity.uuid ||\n            this.report.decommissionMode !== this.decommissionMode.toString()) {\n         return;\n      }\n\n      if (this.report.runningTask) {\n         this.isTaskForSelectedEntity = this.precheckReportService.isTaskForSelectedEntity(this.report.runningTask,\n               this.precheckEntity.uuid, this.decommissionMode);\n         this.precheckTaskStarted.emit(this.report.runningTask);\n         return;\n      }\n\n      if (this.report.hasPrecheckReport) {\n         this.statusIcon = this.precheckReportService.parseReportStatusToIcon(this.report);\n         this.hasReportError = this.report.status === PrecheckResultStatusType.RED;\n         this.capacityTabStatusIcon = this.precheckReportService.getCapacityTabIcon(this.report.clusterCapacity);\n         // in case of an error we only show capacity related information\n         if (!this.hasReportError) {\n            this.virtualObjectsTabStatusIcon = this.precheckReportService.getVirtualObjectsTabIcon(this.report);\n            this.durableVirtualObjects = this.report.virtualObjects;\n            this.healthTabStatusIcon = this.precheckReportService.getHealthTabIcon(this.report.healthSummary);\n            this.persistenceTabStatusIcon = this.getPersistenceTabIcon();\n         } else {\n            this.durableVirtualObjects = [];\n         }\n      }\n   }\n\n   displayDurabilityColumn(): boolean {\n      return this.precheckEntity.type === PrecheckEntityType.HOST &&\n            this.capabilities.isEnsureDurabilitySupported &&\n            this.decommissionMode === DecommissionMode.ensureObjectAccessibility;\n   }\n\n   onEnterMaintenanceModeClicked(): void {\n      const context: EnterMaintenanceModeDialogContext = {\n         decommissionMode: this.decommissionMode,\n         precheckEntity: this.precheckEntity,\n         clusterRef: ManagedObject.contextObject,\n         isDurabilityPossible: this.report.isDurabilityPossible,\n         isDurabilityGuaranteed: this.report.isDurabilityGuaranteed,\n      };\n\n      new ModalBuilder(\"evacuationStatus/enterMaintenanceModeDialog\")\n            .setSize(EnterMaintenanceModeDialogComponent.EMM_DIALOG_WIDTH,\n                  EnterMaintenanceModeDialogComponent.EMM_DIALOG_HEIGHT)\n            .open(context)\n            .then(taskRef => {\n               this.handleTask(taskRef, PrecheckTaskType.HOST_ENTER_MAINTENANCE_MODE);\n            });\n   }\n\n   deleteDiskGroup(): void {\n      if (!this.isDiskGroupSelected()) {\n         return;\n      }\n      new ModalBuilder(`${VsanRoutes.DISK_MANAGEMENT_VIEW}/deleteDiskGroup`)\n            .setSize(VsanDiskMgmtActionsUtil.DELETE_DISK_GROUP_WIDTH,\n                  VsanDiskMgmtActionsUtil.DELETE_DISK_GROUP_HEIGHT_SMALL)\n            .open(this.getDiskGroupActionContext())\n            .then(taskRef => {\n               this.handleTask(taskRef, PrecheckTaskType.DISKGROUP_REMOVAL);\n            });\n   }\n\n   recreateDiskGroup(): void {\n      if (!this.isDiskGroupSelected()) {\n         return;\n      }\n      new ModalBuilder(`${VsanRoutes.DISK_MANAGEMENT_VIEW}/recreateDiskGroup`)\n            .setSize(VsanDiskMgmtActionsUtil.RECREATE_DIALOG_WIDTH,\n                  VsanDiskMgmtActionsUtil.RECREATE_DIALOG_HEIGHT_SMALL)\n            .open(this.getDiskGroupActionContext())\n            .then(taskRef => {\n               this.handleTask(taskRef, PrecheckTaskType.DISKGROUP_RECREATE);\n            });\n   }\n\n   unmountDiskGroup(): void {\n      if (!this.isDiskGroupSelected()) {\n         return;\n      }\n      new ModalBuilder(`${VsanRoutes.DISK_MANAGEMENT_VIEW}/unmountDiskGroup`)\n            .setSize(VsanDiskMgmtActionsUtil.UNMOUNT_DISK_GROUP_DIALOG_WIDTH,\n                  VsanDiskMgmtActionsUtil.UNMOUNT_DISK_GROUP_DIALOG_HEIGHT_SMALL)\n            .open(this.getDiskGroupActionContext())\n            .then(taskRef => {\n               this.handleTask(taskRef, PrecheckTaskType.DISKGROUP_UNMOUNT);\n            });\n   }\n\n   private isDiskGroupSelected(): boolean {\n      return this.precheckEntity.type === PrecheckEntityType.DISK_GROUP;\n   }\n\n   private getDiskGroupActionContext(): DiskGroupActionContext {\n      return {\n         decommissionMode: this.decommissionMode,\n         host: HostActionData.fromPrecheckEntity(this.precheckEntity),\n         diskGroup: DiskGroupActionData.fromPrecheckEntity(this.precheckEntity),\n      };\n   }\n\n   private handleTask(taskRef: ManagedObject, precheckTaskType: PrecheckTaskType): void {\n      const precheckTask: PrecheckTaskData = PrecheckTaskData.Factory.create(\n            taskRef, this.precheckEntity.name, this.precheckEntity.uuid,\n            null, this.decommissionMode, precheckTaskType);\n      this.precheckTaskStarted.emit(precheckTask);\n   }\n\n   private getPersistenceTabIcon(): string {\n      return this.report.persistenceData\n            ? this.precheckReportService.getPersistenceTabIcon(this.report.persistenceData.persistentInstances)\n            : \"\";\n   }\n\n   deleteDisk(): void {\n      if (this.precheckEntity.type !== PrecheckEntityType.DISK) {\n         return;\n      }\n\n      const context: DeleteDisksContext = {\n         disks: [this.precheckEntity.diskData],\n         decommissionMode: this.decommissionMode,\n         host: HostActionData.fromPrecheckEntity(this.precheckEntity),\n         diskGroups: this.getDiskGroupActionData(),\n         isVsanMaxEnabled: this.isVsanMaxEnabled,\n      };\n      new ModalBuilder(`${VsanRoutes.DISK_MANAGEMENT_VIEW}/deleteDisks`)\n            .setSize(VsanDiskMgmtActionsUtil.DELETE_DISKS_WIDTH,\n                  VsanDiskMgmtActionsUtil.DELETE_DISKS_HEIGHT_SMALL)\n            .open(context)\n            .then((taskRefs: ManagedObject[]) => {\n               this.handleTask(taskRefs[0], PrecheckTaskType.DISK_REMOVAL);\n            });\n   }\n\n   unmountVsanMaxDisk(): void {\n      if (this.precheckEntity.type !== PrecheckEntityType.DISK) {\n         return;\n      }\n\n      const context: UnmountDiskContext = {\n         disk: this.precheckEntity.diskData,\n         decommissionMode: this.decommissionMode,\n         host: HostActionData.fromPrecheckEntity(this.precheckEntity),\n      };\n      new ModalBuilder(`${VsanRoutes.DISK_MANAGEMENT_VIEW}/unmountDisk`)\n            .setSize(VsanDiskMgmtActionsUtil.UNMOUNT_DISK_DIALOG_WIDTH,\n                  VsanDiskMgmtActionsUtil.UNMOUNT_DISK_DIALOG_HEIGHT_SMALL)\n            .open(context)\n            .then((task: ManagedObject) => {\n               this.handleTask(task, PrecheckTaskType.DISK_UNMOUNT);\n            });\n   }\n\n   getSummaryReportMessage(): string {\n      const persistenceDataToRebuild: number = this.report.persistenceData && this.report.persistenceData.dataToRebuild;\n      return this.precheckReportService.getSummaryMessage(this.report.status, this.precheckEntity.type,\n            this.report.dataToMove, persistenceDataToRebuild, this.isVsanMaxEnabled);\n   }\n\n   private updateActionsStatus(): void {\n      this.enterMaintenanceModeVisible = false;\n      this.removeDiskGroupVisible = false;\n      this.recreateDiskGroupVisible = false;\n      this.unmountDiskGroupVisible = false;\n      this.removeDiskVisible = false;\n      this.unmountVsanMaxDiskVisible = false;\n      if (this.hasReportError) {\n         return;\n      }\n\n      switch (this.precheckEntity.type) {\n         case PrecheckEntityType.HOST:\n            this.enterMaintenanceModeVisible = true;\n            this.enterMaintenanceModeDisabledReason = !this.hasEditPermission || !this.hasEMMPermissions\n                  ? VsanUiUtils.getString(\"vsan.common.nopermissions\")\n                  : \"\";\n            break;\n         case PrecheckEntityType.DISK_GROUP:\n            this.removeDiskGroupVisible = !this.autoClaimMode;\n            this.recreateDiskGroupVisible = !this.autoClaimMode\n                  && this.isRecreateDiskGroupSupported\n                  && this.precheckEntity.diskGroupData.isHealthy;\n            this.unmountDiskGroupVisible = true;\n            break;\n         case PrecheckEntityType.DISK:\n            this.removeDiskVisible = !this.autoClaimMode;\n            this.unmountVsanMaxDiskVisible = this.isVsanMaxEnabled;\n            this.isDiskAndGroupActionDisabled = !this.hasEditPermission || !this.hasStoragePermission;\n            this.diskAndGroupActionDisabledReason = this.isDiskAndGroupActionDisabled\n                  ? VsanUiUtils.getString(\"vsan.common.nopermissions\")\n                  : \"\";\n            break;\n      }\n   }\n\n   getIconClasses(shape: string): string {\n      return this.precheckReportService.getIconClasses(shape);\n   }\n\n   getInaccessibleObjectsCount(): number {\n      return !this.report?.inaccessibleObjects\n            ? 0\n            : this.report.inaccessibleObjects.length;\n   }\n\n   getNonCompliantObjectsCount(): number {\n      return !this.report?.nonCompliantObjects\n            ? 0\n            : this.report.nonCompliantObjects.length;\n   }\n\n   getObjectsWithoutEnhancedDurabilityCount(): number {\n      return !this.report\n            ? 0\n            : this.countObjectsWithoutDurability(this.report.virtualObjects);\n   }\n\n   private countObjectsWithoutDurability(virtualObjects: VirtualObjectModel[]): number {\n      if (!virtualObjects?.length) {\n         return 0;\n      }\n      // 1. get count of virtual objects, for which the durability state is not guaranteed.\n      const objectsWithoutDurabilityState: VirtualObjectModel[] = virtualObjects.filter(\n            obj => this.NO_DURABILITY_STATES.find(state => state === obj.durabilityState),\n      );\n      let count: number = objectsWithoutDurabilityState.length;\n      // 2. count children of each object, for which the durability state is not guaranteed\n      virtualObjects.forEach(obj => count += this.countObjectsWithoutDurability(obj.children));\n      return count;\n   }\n\n   private getDiskGroupActionData(): DiskGroupActionData[] {\n      return this.isVsanMaxEnabled\n            ? []\n            : [DiskGroupActionData.fromPrecheckEntity(this.diskGroupOfSelectedDisk)];\n   }\n}\n","/* Copyright 2020-2022 VMware, Inc. All rights reserved. -- VMware Confidential */\nexport class VsanDialogUtil {\n   static readonly CAPACITY_MANAGEMENT_DIALOG: VsanDialogProperties = {\n      width: 800,\n      height: 700,\n   };\n\n   static readonly DELETE_VOLUME_DIALOG: VsanDialogProperties = {\n      width: 500,\n      height: 250,\n   };\n\n   static readonly MIGRATE_VOLUME_DIALOG: VsanDialogProperties = {\n      width: 1030,\n      height: 710,\n   };\n\n   static readonly REAPPLY_VOLUME_POLICY_DIALOG: VsanDialogProperties = {\n      width: 700,\n      height: 250,\n   };\n\n   static readonly DUPLICATE_PCI_ID_MODEL_SELECTION_DIALOG: VsanDialogProperties = {\n      width: 800,\n      height: 500,\n   };\n\n   static readonly HEALTH_RESTORE_ACTION_DIALOG: VsanDialogProperties = {\n      width: 550,\n      height: 250,\n   };\n\n   // Keep in sync with plugin.xml extension point\n   static readonly CLUSTER_POWER_ON_DIALOG: VsanDialogProperties = {\n      width: 600,\n      height: 230,\n   };\n\n   static readonly VM_IO_DIAGNOSTICS_METRICS_DIALOG: VsanDialogProperties = {\n      width: 900,\n      height: 700,\n   };\n\n   static readonly VM_IO_DIAGNOSTICS_LATENCY_DIALOG: VsanDialogProperties = {\n      width: 1000,\n      height: 500,\n   };\n\n   static readonly VM_IO_DIAGNOSTICS_DOM_OWNER_LATENCY_DIALOG: VsanDialogProperties = {\n      width: 1000,\n      height: 400,\n   };\n\n   static readonly PERF_SVC_EDIT_ACTION_DIALOG: VsanDialogProperties = {\n      width: 800,\n      height: 450,\n   };\n\n   static readonly PERF_SVC_ENABLE_ACTION_DIALOG: VsanDialogProperties = {\n      width: 800,\n      height: 250,\n   };\n\n   static readonly CLAIM_DISKS_ACTION_DIALOG: VsanDialogProperties = {\n      width: 1200,\n      height: 650,\n   };\n\n   static readonly VSAN_DISK_CLAIM_ACTION_DIALOG: VsanDialogProperties = {\n      width: 670,\n      height: 300,\n   };\n}\n\nexport class VsanDialogProperties {\n   width: number;\n   height: number;\n}\n","/* Copyright 2018-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, Input, OnInit} from \"@angular/core\";\nimport {Icon} from \"@util/icon\";\nimport {VirtualObjectModel} from \"@generated/virtual-object-model\";\nimport {PrecheckReportService} from \"../precheck-report.service\";\n\n@Component({\n   templateUrl: \"precheck-virtual-objects-tab.html\",\n   styleUrls: [\"precheck-virtual-objects-tab.scss\"],\n   selector: \"vsan-precheck-virtual-objects-tab\",\n})\nexport class PrecheckVirtualObjectsTabComponent implements OnInit {\n\n   @Input()\n   statusIcon: string;\n\n   @Input()\n   inaccessibleObjectsCount: number = 0;\n\n   @Input()\n   nonCompliantObjectsCount: number = 0;\n\n   @Input()\n   noDurabilityObjectsCount: number = 0;\n\n   @Input()\n   durableVirtualObjects: VirtualObjectModel[];\n\n   @Input()\n   delayTimer: number;\n\n   @Input()\n   isDurabilitySupported: boolean;\n\n   loading: boolean;\n   areAllObjectsAccessibleAndCompliant: boolean;\n   reportMessage: string;\n\n   constructor(private precheckReportService: PrecheckReportService) {\n   }\n\n   async ngOnInit(): Promise<void> {\n      this.loading = true;\n      this.reportMessage = this.precheckReportService.getObjectsMessage(this.inaccessibleObjectsCount,\n            this.nonCompliantObjectsCount, this.noDurabilityObjectsCount);\n      if (!this.statusIcon) {\n         this.areAllObjectsAccessibleAndCompliant = true;\n         this.loading = false;\n         return;\n      }\n\n      this.loading = false;\n   }\n\n   getIconClass(): string {\n      return Icon.clrIconShapeClassMap[this.statusIcon];\n   }\n}\n","/* Copyright 2021 VMware, Inc. All rights reserved. -- VMware Confidential */\n\n/**\n * This class is used internally by the @Loader decorator and the decorators related to it.\n * It encapsulates the logic for accessing internal properties needed for the decorators to work.\n * The state of this class is kept in the \"backingObject\" passed to the constructor. This allows\n * the wrapper class to be easily recreated wherever it is needed without worrying about keeping its reference.\n *\n * <pre>\n * const obj: any = {};\n *\n * // Create a new LoadingFlowWrapper over obj\n * const wrapper1: LoadingFlowWrapper = new LoadingFlowWrapper(obj);\n * // Set the error field to \"alabala\" string\n * wrapper1.error = \"alabala\";\n *\n * // Create a new LoadingFlowWrapper over obj\n * const wrapper2: LoadingFlowWrapper = new LoadingFlowWrapper(obj);\n * console.log(wrapper2.error); // Prints \"alabala\" because the backing object is the same\n * </pre>\n */\nexport class LoadingFlowWrapper {\n\n   private static readonly ERROR_HOLDER: string = \"__ex__\";\n   private static readonly ERROR_HANDLERS_REF_HOLDER: string = \"__errorHandlers__\";\n   private static readonly ERROR_MESSAGE_GETTERS_REF_HOLDER: string = \"__errorMessageGetters__\";\n   private static readonly LOADS_COUNT_HOLDER: string = \"__loadsCount__\";\n\n   private static readonly DEFAULT_NAME: string = \"default-loader\";\n\n   constructor(private _backingObject: any,\n         private loaderName: string) {\n      this.loaderName = loaderName || LoadingFlowWrapper.DEFAULT_NAME;\n\n      // Init all collections\n      this.initCollection(LoadingFlowWrapper.ERROR_HOLDER);\n      this.initCollection(LoadingFlowWrapper.ERROR_HANDLERS_REF_HOLDER);\n      this.initCollection(LoadingFlowWrapper.ERROR_MESSAGE_GETTERS_REF_HOLDER);\n      this.initCollection(LoadingFlowWrapper.LOADS_COUNT_HOLDER);\n   }\n\n   private initCollection(collectionName: string): void {\n      // Check first if the collection hasn't been initialized by another wrapper.\n      // If so, do nothing as we don't want to override the data already set.\n      if (!this.backingObject[collectionName]) {\n         this.backingObject[collectionName] = [];\n      }\n   }\n\n   /**\n    * The original object which methods/properties were decorated\n    */\n   get backingObject(): any {\n      return this._backingObject;\n   }\n\n   /**\n    * Returns the thrown error\n    */\n   get error(): any {\n      return this.backingObject[LoadingFlowWrapper.ERROR_HOLDER][this.loaderName];\n   }\n\n   /**\n    * Sets the thrown error\n    */\n   set error(val: any) {\n      this.backingObject[LoadingFlowWrapper.ERROR_HOLDER][this.loaderName] = val;\n   }\n\n   /**\n    * Returns the number of active loading operations\n    */\n   private get loadsCount(): number {\n      return this.backingObject[LoadingFlowWrapper.LOADS_COUNT_HOLDER][this.loaderName];\n   }\n\n   /**\n    * Returns true if there are running loader methods or promises.\n    */\n   get isLoading(): boolean {\n      return !!this.loadsCount;\n   }\n\n   /**\n    * Increase the number of active loading operations by one\n    */\n   incrementLoads(): void {\n      // Initialize the counter if it hasn't been initialized yet\n      if (!this.loadsCount) {\n         this.backingObject[LoadingFlowWrapper.LOADS_COUNT_HOLDER][this.loaderName] = 0;\n      }\n      this.backingObject[LoadingFlowWrapper.LOADS_COUNT_HOLDER][this.loaderName] += 1;\n   }\n\n   /**\n    * Decreases the number of active loading operations by one\n    */\n   decrementLoads(): void {\n      this.backingObject[LoadingFlowWrapper.LOADS_COUNT_HOLDER][this.loaderName] -= 1;\n   }\n\n   get errorHandler(): any {\n      return this.backingObject[LoadingFlowWrapper.ERROR_HANDLERS_REF_HOLDER][this.loaderName];\n   }\n\n   /**\n    * Registers a new error handler.\n    */\n   set errorHandler(errorHandler: any) {\n      if (!!this.errorHandler) {\n         throw new Error(`ErrorHandler for loader \"${this.loaderName}\" already registered!`);\n      }\n      this.backingObject[LoadingFlowWrapper.ERROR_HANDLERS_REF_HOLDER][this.loaderName] = errorHandler;\n   }\n\n   get errorMessageGetter(): any {\n      return this.backingObject[LoadingFlowWrapper.ERROR_MESSAGE_GETTERS_REF_HOLDER][this.loaderName];\n   }\n\n   set errorMessageGetter(getter: any) {\n      if (!!this.errorMessageGetter) {\n         throw new Error(`ErrorMessage for loader \"${this.loaderName}\" already registered!`);\n      }\n      this.backingObject[LoadingFlowWrapper.ERROR_MESSAGE_GETTERS_REF_HOLDER][this.loaderName] = getter;\n   }\n}\n","<!--Copyright 2018-2020 VMware, Inc. All rights reserved. -- VMware Confidential-->\n<h5 vsan-auto-focus>\n   {{\"vsan.monitor.evacuationStatus.label\" | localized}}\n</h5>\n<vsan-validation id=\"evacuation-status-error-message\"\n                 *ngIf=\"alertMessage\"\n                 [alert]=\"alertMessage\">\n</vsan-validation>\n\n<div *ngIf=\"loading\" class=\"spinner central-spinner\">{{\"vsan.loading\" | localized}}</div>\n\n<ng-container *ngIf=\"!loading\">\n   <vsan-unavailable-view *ngIf=\"unavailableView\"\n                          [unavailableViewSpec]=\"unavailableView\"\n                          [clusterRef]=\"clusterRef\"\n                          [hasEditPrivilege]=\"hasEditPrivilege\">\n   </vsan-unavailable-view>\n\n   <ng-container *ngIf=\"!unavailableView\">\n      <!--Guard rails component-->\n      <vsan-precheck-guard-rails [isDiskResourcePrecheckSupported]=\"isDiskResourcePrecheckSupported\"\n                                 [isVsanMaxEnabled]=\"isVsanMaxEnabled\"\n                                 (hasRunningTask)=\"onHasRunningTask($event)\">\n      </vsan-precheck-guard-rails>\n\n      <div>{{getGeneralMessageLabel()}}</div>\n\n      <!-- Entity on which to test decommissioning -->\n      <vsan-dropdown-object-selector\n            [label]=\"'vsan.evacuationStatus.decomTestOnLabel' | localized\"\n            [nodes]=\"precheckEntitiesTreeNodes\"\n            [selectedObjectInfos]=\"selectedPrecheckEntities\"\n            [searchInputAriaLabelKey]=\"'vsan.evacuationStatus.decomTestOnLabel.searchInputAriaLabel'\"\n            (selectedObjectInfosChange)=\"onSelectedObjectInfosChange($event)\">\n      </vsan-dropdown-object-selector>\n\n      <div *ngIf=\"precheckSupported\" class=\"quick-pre-check-info\">\n         <!-- vSAN Decommissioning mode select options -->\n         <vsan-pre-check-evacuation-select\n               [selectedDecommissionMode]=\"selectedDecommissionMode\"\n               (selectedDecommisionModeChange)=\"onDecommissionModeSummaryChanged($event)\">\n         </vsan-pre-check-evacuation-select>\n\n         <button class=\"btn btn-primary evacuation-status-action-button\"\n                 [disabled]=\"isClusterOperationInProgress\"\n                 title=\"{{(isClusterOperationInProgress ?\n                    'vsan.evacuationStatus.precheckButton.title.inProgress' : null) | localized}}\"\n                 (click)=\"onPrecheckClicked()\">\n            {{'vsan.evacuationStatus.precheckButtonLabel' | localized}}\n         </button>\n      </div>\n      <!--General messages shown if the host is in MM or not connected-->\n      <div *ngIf=\"precheckUnsupportedLabel\" class=\"general-message bold-no-selection\">\n         {{precheckUnsupportedLabel}}\n      </div>\n      <!--Evacuation status report loading indicator-->\n      <div *ngIf=\"isPrecheckInProgress\">\n            <span class=\"spinner spinner-sm spinner-inline\"\n                  id=\"evacuation-status-test-in-progress-spinner\">\n            </span>\n         <span id=\"evacuation-status-test-in-progress-label\">{{getOperationInProgressLabel()}}</span>\n      </div>\n      <!--Precheck report-->\n      <vsan-precheck-report #precheckReport\n                            *ngIf=\"showReport\"\n                            [precheckEntity]=\"selectedPrecheckEntity\"\n                            [diskGroupOfSelectedDisk]=\"diskGroupOfSelectedDisk\"\n                            [isVsanMaxEnabled]=\"isVsanMaxEnabled\"\n                            (precheckTaskStarted)=\"onPrecheckTaskStarted($event)\"\n                            [reportRefreshed]=\"reportRefreshed\"\n                            (refreshReport)=\"onReportRefreshed()\"\n                            [decommissionMode]=\"selectedDecommissionMode\">\n      </vsan-precheck-report>\n   </ng-container>\n</ng-container>\n","/* Copyright 2018-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, OnInit} from \"@angular/core\";\nimport {environment} from \"@env/environment\";\nimport {DecommissionMode} from \"@generated/decommission-mode\";\nimport {PrecheckService} from \"@generated/precheck-service\";\nimport {ClusterComputeResource, VirtualMachine} from \"@service/client/dataservice/data-service-property\";\nimport {DataServiceQueryResult} from \"@service/client/dataservice/data-service.data\";\nimport {DataServiceClient} from \"@service/client/dataservice/data-service.service\";\nimport {ManagedObject} from \"@service/managed-object\";\nimport {VsanDataMigrationUtil} from \"@util/vsan-data-migration-util\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {EnterMaintenanceModeDialogContext} from \"./enter-maintenance-mode-dialog-context\";\n\n@Component({\n   templateUrl: \"enter-maintenance-mode-dialog.html\",\n   styleUrls: [\"enter-maintenance-mode-dialog.scss\"],\n})\nexport class EnterMaintenanceModeDialogComponent implements OnInit {\n\n   // DataService properties\n   private static readonly CLUSTER_DRS_ENABLED_PROPERTY: string = \"configurationEx.drsConfig.enabled\";\n   private static readonly HOST_POWERED_ON_VMS_PROPERTY: string = \"poweredOnVMs\";\n\n   // Dialog size\n   static readonly EMM_DIALOG_WIDTH: number = 700;\n   static readonly EMM_DIALOG_HEIGHT: number = 320;\n   private static readonly HEIGHT_ADDITION_POWERED_ON_VMS: number = 70;\n   private static readonly HEIGHT_ADDITION_DRS: number = 50;\n   private static readonly HEIGHT_ADDITION_DURABILITY: number = 100;\n\n   // todo georgig: add KB article id when provided. Bug 2676152\n   readonly ENHANCED_DURABILITY_KB: string = \"\";\n\n   decommissionModeLocalized: string;\n   secondaryTitle: string;\n   hostRef: ManagedObject;\n   alertMessages: string[];\n   isDrsEnabled: boolean;\n   movePoweredOffVms: boolean;\n   hasPoweredOnVms: boolean;\n   loading: boolean;\n   isDurabilityPossible: boolean;\n   isDurabilityGuaranteed: boolean;\n   ensureDurability: boolean;\n\n   private decommissionMode: DecommissionMode;\n\n   constructor(private dataService: DataServiceClient,\n         private precheckService: PrecheckService) {\n   }\n\n   ngOnInit(): void {\n      this.loading = true;\n\n      const context: EnterMaintenanceModeDialogContext = VsanUiUtils.getModalContext();\n      this.secondaryTitle = context.precheckEntity.name;\n      this.decommissionMode = context.decommissionMode;\n      this.decommissionModeLocalized = VsanDataMigrationUtil.getLocalizedDecommissionMode(this.decommissionMode);\n      this.hostRef = context.precheckEntity.hostRef;\n      this.isDurabilityPossible = context.isDurabilityPossible;\n      this.isDurabilityGuaranteed = context.isDurabilityGuaranteed;\n\n      Promise\n            .all([\n               this.dataService.getProperty(ClusterComputeResource.configurationEx.drsConfig.enabled, context.clusterRef),\n               this.getNumberOfPowerOnVmsOnHost(),\n            ])\n            .then(this.onPropertiesRetrieved)\n            .catch(this.onError);\n   }\n\n   private async getNumberOfPowerOnVmsOnHost(): Promise<number> {\n      if (environment.repa) {\n         // The original \"poweredOnVMs\" property is provided by H5C so we don't have access to it\n         // through the vsperejs/APIGW interface. Hence we need to craft the query by ourselves.\n         const result: DataServiceQueryResult = await this.dataService\n               .select()\n               .fromType(VirtualMachine.type)\n               .where()\n               .propertyEqualsMoRef(VirtualMachine.runtime.host, this.hostRef)\n               .and()\n               .propertyEquals(VirtualMachine.runtime.powerState, \"poweredOn\")\n               .execute();\n         return result.resultItems.length;\n      } else {\n         // In LOCAL mode fallback to the Java DS layer\n         const result: any[] = await this.dataService\n               .getProperty(EnterMaintenanceModeDialogComponent.HOST_POWERED_ON_VMS_PROPERTY, this.hostRef);\n         return !result ? 0 : result.length;\n      }\n   }\n\n   async onConfirm(): Promise<void> {\n      this.loading = true;\n      // pass EMM task to parent component\n      let precheckTask: ManagedObject;\n      try {\n         if (this.isDurabilityGuaranteed && this.ensureDurability) {\n            this.decommissionMode = DecommissionMode.ensureEnhancedDurability;\n         }\n         precheckTask = await this.precheckService.runEnterMaintenanceMode(this.hostRef,\n               this.decommissionMode.toString(), this.movePoweredOffVms);\n      } catch (error) {\n         this.onError(error);\n      }\n\n      VsanUiUtils.closeModalDialog(precheckTask);\n   }\n\n   getDurabilityAlertType(): string {\n      if (!this.isDurabilityPossible) {\n         return;\n      }\n      return this.isDurabilityGuaranteed ? \"info\" : \"warning\";\n   }\n\n   getDurabilityAlertMessage(): string {\n      if (!this.isDurabilityPossible) {\n         return;\n      }\n      return this.isDurabilityGuaranteed ?\n            VsanUiUtils.getString(\"vsan.evacuationStatus.report.enterMaintenanceModeDialog.ensureDurabilityInfo\") :\n            VsanUiUtils.getString(\"vsan.evacuationStatus.report.enterMaintenanceModeDialog.ensureDurabilityWarn\");\n   }\n\n   private onPropertiesRetrieved = (results: any[]) => {\n      this.isDrsEnabled = !!results[0];\n      if (this.isDrsEnabled) {\n         // when DRS is enabled, the option to move powered off VMs is enabled by default\n         this.movePoweredOffVms = true;\n      }\n\n      this.hasPoweredOnVms = !!results[1];\n\n      // enlarge dialog according to the properties shown\n      let height: number = EnterMaintenanceModeDialogComponent.EMM_DIALOG_HEIGHT;\n      if (this.isDrsEnabled) {\n         height += EnterMaintenanceModeDialogComponent.HEIGHT_ADDITION_DRS;\n      }\n      if (this.hasPoweredOnVms) {\n         height += EnterMaintenanceModeDialogComponent.HEIGHT_ADDITION_POWERED_ON_VMS;\n      }\n      if (this.isDurabilityPossible) {\n         height += EnterMaintenanceModeDialogComponent.HEIGHT_ADDITION_DURABILITY;\n      }\n      VsanUiUtils.setModalDialogHeight(height);\n\n      this.loading = false;\n   };\n\n   private onError = (error: any) => {\n      this.alertMessages = [error];\n      this.loading = false;\n   };\n}\n","/* Copyright 2017-2020 VMware, Inc. All rights reserved. -- VMware Confidential */\n\nimport {Filter, TreeDatagridRow} from \"../tree-datagrid\";\nimport {ClrDatagridStringFilterInterface} from \"@clr/angular\";\n\n/**\n * Abstract filter class that needs to be extended in order to implement custom filtration.\n * The class has a single abstract method that takes an object of type T and returns its\n * string representation.\n */\nexport class BaseFilter<T> implements ClrDatagridStringFilterInterface<T>, Filter {\n\n   accepts(data: T, search: string): boolean {\n      // Handle correctly TreeDatagrid components\n      if (data instanceof TreeDatagridRow) {\n         data = data.data;\n      }\n\n      let label: string = this.stringify(data);\n      if (label) {\n         // Compare ignoring the case\n         return label.toLowerCase().indexOf(search.toLowerCase()) != -1;\n      } else {\n         return false;\n      }\n   }\n\n   match(data: T, search: string): boolean {\n      return this.accepts(data, search);\n   }\n\n   protected stringify(data: T): string  {\n      return data + \"\";\n   }\n\n}\n\n","export enum PrecheckOperation {\n   ENTER_MAINTENANCE_MODE = \"EnterMaintenanceMode\",\n   DISK_DATA_EVACUATION = \"DiskDataEvacuation\",\n}\n","<!--Copyright 2018-2022 VMware, Inc. All rights reserved. -- VMware Confidential-->\n<ng-container *ngIf=\"showCapacity()\">\n   <vsan-validation id=\"evacuation-status-vsan-direct-error-message\"\n                    *ngIf=\"capacityReports.get(CapacityReport.VSAN_DIRECT)?.errorMessages?.length\"\n                    [alertType]=\"AlertType.DANGER\"\n                    [(alerts)]=\"capacityReports.get(CapacityReport.VSAN_DIRECT).errorMessages\">\n   </vsan-validation>\n   <ng-container *ngIf=\"showVsanDirectCapacity() else vsanCapacityTemplate\">\n      <vsan-validation *ngIf=\"hasPersistenceDataToRebuild\"\n                       id=\"evacuation-status-vsan-direct-info-message\"\n                       [alertType]=\"AlertType.INFO\"\n                       [allowClose]=\"false\"\n                       [alert]=\"'vsan.evacuationStatus.report.predictedOverview.capacityTab.vSanDirectInfo' | localized\">\n         <div class=\"external-link\">\n            <a id=\"learn-more-link\"\n               class=\"alert-action\"\n               [external-link]\n               [articleId]=\"KnowledgeBaseId.PRECHECK_PCP\">\n            </a>\n         </div>\n      </vsan-validation>\n\n      <div id=\"vsan-capacity-tabs\"\n           role=\"tablist\"\n           class=\"btn-group btn-outline-primary btn-sm\"\n           [attr.aria-label]=\"'vsan.evacuationStatus.report.predictedOverview.capacityTab.tabList'|localized\">\n         <button id=\"vsan-capacity-tab\"\n                 role=\"tab\"\n                 class=\"btn\"\n                 aria-controls=\"vsan-capacity-breakdown\"\n                 (click)=\"currentCapacityReport = CapacityReport.VSAN\"\n                 [attr.aria-selected]=\"CapacityReport.VSAN === currentCapacityReport\"\n                 [ngClass]=\"{'btn-primary': CapacityReport.VSAN == currentCapacityReport}\">\n            {{\"vsan.evacuationStatus.report.predictedOverview.capacityTab.vSanButton\"|localized}}\n         </button>\n         <button id=\"vsan-direct-capacity-tab\"\n                 role=\"tab\"\n                 class=\"btn\"\n                 aria-controls=\"vsan-direct-capacity-breakdown\"\n                 (click)=\"currentCapacityReport = CapacityReport.VSAN_DIRECT\"\n                 [attr.aria-selected]=\"CapacityReport.VSAN_DIRECT === currentCapacityReport\"\n                 [ngClass]=\"{'btn-primary': CapacityReport.VSAN_DIRECT == currentCapacityReport}\">\n            {{\"vsan.evacuationStatus.report.predictedOverview.capacityTab.vSanDirectButton\"|localized}}\n         </button>\n      </div>\n\n      <ng-container *ngIf=\"currentCapacityReport === CapacityReport.VSAN\">\n         <ng-container *ngTemplateOutlet=\"vsanCapacityTemplate\"></ng-container>\n      </ng-container>\n      <vsan-precheck-capacity-breakdown id=\"vsan-direct-capacity-breakdown\"\n                                        *ngIf=\"currentCapacityReport === CapacityReport.VSAN_DIRECT\"\n                                        [clusterCapacity]=\"vsanDirectCapacity\"\n                                        [datastoreType]=\"DatastoreType.VSAN_DIRECT\">\n      </vsan-precheck-capacity-breakdown>\n   </ng-container>\n\n   <ng-template #vsanCapacityTemplate>\n      <div *ngIf=\"capacityReports.get(CapacityReport.VSAN)?.faultDomainsNeeded\">\n         <clr-icon id=\"fault-domains-needed-error-message-icon\"\n                   aria-hidden=\"true\"\n                   shape=\"error-standard\"\n                   class=\"is-solid is-error capacity-error-summary-icon\">\n         </clr-icon>\n         {{getClusterLevelErrorMessageLabel()}}\n      </div>\n\n      <vsan-precheck-capacity-breakdown id=\"vsan-capacity-breakdown\"\n                                        [clusterCapacity]=\"vsanCapacity\"\n                                        [hasError]=\"hasError\">\n      </vsan-precheck-capacity-breakdown>\n   </ng-template>\n</ng-container>\n","<div *ngIf=\"loading\" class=\"spinner central-spinner\">{{\"vsan.loading\" | localized}}</div>\n<ng-container *ngIf=\"!loading\">\n   <!--summary message where are not change in the objects's compliance status from the report-->\n   <div *ngIf=\"areAllObjectsAccessibleAndCompliant\"\n        class=\"general-message bold-no-selection\"\n        id=\"evacuation-status-virtual-objects-message\">\n      {{reportMessage}}\n   </div>\n   <!--status and table-->\n   <ng-container *ngIf=\"!areAllObjectsAccessibleAndCompliant\">\n      <!--General message-->\n      <div>\n         {{'vsan.evacuationStatus.report.predictedOverview.virtualObjectsTab.generalInfo' | localized}}\n      </div>\n      <!--Result icon and message-->\n      <div class=\"virtual-objects-summary-message\">\n         <clr-icon id=\"selected-decommission-mode-summary-icon\"\n                   [attr.shape]=\"statusIcon\"\n                   [attr.class]=\"'is-solid ' + getIconClass()\">\n         </clr-icon>\n         <label id=\"selected-decommision-mode-summary-label\" class=\"summary-label\">\n            {{reportMessage}}\n         </label>\n      </div>\n      <!--Delay timer information-->\n      <p *ngIf=\"delayTimer\" class=\"p7\">\n         {{'vsan.evacuationStatus.report.predictedOverview.virtualObjectsTab.delayTimerInfo' | localized: delayTimer}}\n      </p>\n      <!--List of objects that will become inaccessible or non-compliant-->\n      <vsan-virtual-objects-table id=\"virtual-objects-table\"\n                                  class=\"evacuation-status-virtual-objects-table\"\n                                  [isWhatIfData]=\"true\"\n                                  [isDurabilitySupported]=\"isDurabilitySupported\"\n                                  [hideRowSelection]=\"true\"\n                                  [virtualObjects]=\"durableVirtualObjects\">\n      </vsan-virtual-objects-table>\n   </ng-container>\n</ng-container>\n","/* Copyright 2018-2022 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, Input} from \"@angular/core\";\nimport {AlertType} from \"@component/validation/alert-type\";\nimport {DatastoreType} from \"@generated/datastore-type\";\nimport {PrecheckClusterCapacityData} from \"@generated/precheck-cluster-capacity-data\";\nimport {PrecheckResultStatusType} from \"@generated/precheck-result-status-type\";\nimport {KnowledgeBaseId} from \"@service/navigation/model/knowledge-base-id\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {PrecheckReportService} from \"../precheck-report.service\";\n\n@Component({\n   templateUrl: \"precheck-capacity-tab.html\",\n   styleUrls: [\"precheck-capacity-tab.scss\"],\n   selector: \"vsan-precheck-capacity-tab\",\n})\nexport class PrecheckCapacityTabComponent {\n   CapacityReport: typeof CapacityReport = CapacityReport;\n   AlertType: typeof AlertType = AlertType;\n   DatastoreType: typeof DatastoreType = DatastoreType;\n   readonly KnowledgeBaseId: typeof KnowledgeBaseId = KnowledgeBaseId;\n\n   @Input()\n   capacityReports: Map<CapacityReport, PrecheckClusterCapacityData>;\n\n   @Input()\n   hasPersistenceDataToRebuild: boolean;\n\n   @Input()\n   hasError: boolean;\n\n   currentCapacityReport: CapacityReport = CapacityReport.VSAN;\n\n   constructor(private precheckReportService: PrecheckReportService) {\n   }\n\n   get vsanCapacity(): PrecheckClusterCapacityData {\n      return this.capacityReports.get(CapacityReport.VSAN);\n   }\n\n   get vsanDirectCapacity(): PrecheckClusterCapacityData {\n      return this.capacityReports.get(CapacityReport.VSAN_DIRECT);\n   }\n\n   // Capacity information is shown when there is a vSAN capacity error with recommendations\n   // or when there is no vSAN direct capacity\n   // or there is vSAN direct capacity without an error\n   showCapacity(): boolean {\n      return this.vsanCapacity.status === PrecheckResultStatusType.RED\n            || !(this.vsanDirectCapacity && this.vsanDirectCapacity.status === PrecheckResultStatusType.RED);\n   }\n\n   showVsanDirectCapacity(): boolean {\n      return !!this.vsanDirectCapacity\n            && VsanUiUtils.isEmpty(this.vsanDirectCapacity.errorMessages)\n            && this.vsanCapacity.status !== PrecheckResultStatusType.RED;\n   }\n\n   getClusterLevelErrorMessageLabel = (): string => {\n      return this.precheckReportService.getClusterLevelCapacityErrorMessage(\n            this.capacityReports.get(CapacityReport.VSAN));\n   };\n}\n\nexport enum CapacityReport {\n   VSAN,\n   VSAN_DIRECT,\n}","/* Copyright 2020-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, EventEmitter, Input, Output} from \"@angular/core\";\nimport {PrecheckPersistentInstanceData} from \"@generated/precheck-persistent-instance-data\";\nimport {PrecheckPersistentInstanceState} from \"@generated/precheck-persistent-instance-state\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {PrecheckReportService} from \"../precheck-report.service\";\n\n@Component({\n   templateUrl: \"precheck-persistence-tab.html\",\n   styleUrls: [\"precheck-persistence-tab.scss\"],\n   selector: \"vsan-precheck-persistence-tab\",\n})\nexport class PrecheckPersistenceTabComponent {\n   @Input()\n   persistentInstances: PrecheckPersistentInstanceData[];\n\n   @Output()\n   filterChanged: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n   stateFilterValue: PrecheckPersistentInstanceData[];\n\n   readonly DEFAULT_ITEMS_PER_PAGE: number = 10;\n\n   constructor(private precheckReportService: PrecheckReportService) {\n   }\n\n   getPersistenceStateLabel = (state: PrecheckPersistentInstanceState): string => {\n      return this.precheckReportService.getPersistenceStateLabel(state);\n   };\n\n   getPersistenceStateIcon = (state: PrecheckPersistentInstanceState): string => {\n      return this.precheckReportService.getPersistenceStateIcon(state);\n   };\n\n   getPersistenceStateIconClasses = (state: PrecheckPersistentInstanceState): string => {\n      return this.precheckReportService.getPersistenceIconClass(state);\n   };\n\n   onSelectedFilterTypeChanged(value: PrecheckPersistentInstanceData[]): void {\n      this.stateFilterValue = value;\n      this.notifyFilterChange();\n   }\n\n   notifyFilterChange(): void {\n      const hasAppliedFilters: boolean = !VsanUiUtils.isEmpty(this.stateFilterValue);\n      this.filterChanged.emit(hasAppliedFilters);\n   }\n}\n","import {PrecheckTaskType} from '@generated/precheck-task-type';\nimport {DecommissionMode} from '@generated/decommission-mode';\n\nexport interface PrecheckTaskData {\n\n   taskMoRef: any;\n   name: string;\n   uuid: string;\n   hostName: string;\n   decommissionMode: DecommissionMode;\n   taskType: PrecheckTaskType;\n} //class PrecheckTaskData\n\nexport module PrecheckTaskData{\nexport class Factory {\n\n   static create = (taskMoRef: any, name: string, uuid: string, hostName: string, decommissionMode: DecommissionMode, taskType: PrecheckTaskType): PrecheckTaskData => {\n      return { taskMoRef: taskMoRef, name: name, uuid: uuid, hostName: hostName, decommissionMode: decommissionMode, taskType: taskType, };\n   }\n\n\n} //class Factory\n\n} //module PrecheckTaskData\n","/* Copyright 2016 VMware, Inc. All rights reserved. -- VMware Confidential */\n\nimport {BehaviorSubject} from \"rxjs\";\nimport {ClrDatagridFilterInterface} from \"@clr/angular\";\n\n/**\n * Hierarchical data provider.\n * This is a additional structure to the Clarity Datagrid that supports hierarchical data rendering.\n */\nexport class TreeDatagrid {\n\n   public static forChildProperty(childField: string, rowData?: any[]) {\n      return new TreeDatagrid(item => item[childField], rowData);\n   }\n\n   /**\n    * The data objects that are to be rendered as first-level rows.\n    */\n   protected roots: any[];\n\n   /**\n    * The flat row structure consisting of the root objects and their children\n    * in case the parents are expanded. Sorting and filtering are reflected here.\n    */\n   protected content: TreeDatagridRow[];\n\n   /**\n    * List of filters to be applied on the data.\n    */\n   protected filters: TreeFilter[] = [];\n\n   /**\n    * The comparator to be used to sort the items and their children.\n    */\n   public comparator: (item1: any, item2: any) => number;\n\n   /**\n    * Sorting direction.\n    */\n   public sortAscending: boolean;\n\n   /**\n    * @param childItems lambda for extracting the children of a given data object\n    * @param rootItems (optional) the initial data objects\n    */\n   constructor(private childItems: (parent: any) => any[], rootItems?: any[]) {\n      this.rootItems = rootItems;\n   }\n\n   /**\n    * Removes all items.\n    */\n   public clear = () => this.rootItems = [];\n\n   /**\n    * Sets the given data objects as content.\n    */\n   public refreshGrid = (rowData: any[]) => this.rootItems = rowData;\n\n   public set rootItems(value: any[]) {\n      this.roots = value ? value : [];\n      this.content = this.flatten(this.roots);\n   }\n\n   /**\n    * root data objects\n    */\n   public get rootItems(): any[] {\n      return this.roots;\n   }\n\n   /**\n    * The flat row structure consisting of the root objects and their children\n    * in case the parents are expanded. Sorting and filtering are reflected here.\n    */\n   public get rows(): TreeDatagridRow[] {\n      return this.content;\n   }\n\n   /**\n    * Registers a new filter in the data provider.\n    * Initially the filter will accept all items.\n    * The consumer can assign a predicate to the TreeFilter object\n    * to add filtering rule. All registered filters' predicates are\n    * evaluated using AND operator.\n    */\n   public registerFilter(): TreeFilter {\n      let filter: TreeFilter = new TreeFilter(() => this.content = this.flatten(this.rootItems));\n      this.filters.push(filter);\n      return filter;\n   }\n\n   public unregisterFilter(value: TreeFilter) {\n      let index: number = this.filters.indexOf(value);\n      if (index != -1) {\n         this.filters.splice(index, 1);\n      }\n   }\n\n   /**\n    * Applies sorting comparator and direction for the data provider.\n    */\n   public sort(comparator: (item1: any, item2: any) => number, ascending: boolean = true) {\n      this.comparator = comparator;\n      this.sortAscending = ascending;\n\n      // refresh content, will expand all nodes\n      this.content = this.flatten(this.rootItems);\n   }\n\n   public collapseAll = () => this.rows.forEach(r => this.collapse(r));\n\n   public expandAll = () => this.rows.forEach(r => this.expand(r));\n\n   protected expand(row: TreeDatagridRow) {\n      if (row.isExpanded) {\n         // already expanded\n         return;\n      }\n\n      let rowIndex = this.content.indexOf(row);\n      if (rowIndex == -1) {\n         // row is filtered out\n         return;\n      }\n\n      let flattenedChildren: TreeDatagridRow[] = this.flatten(this.childItems(row.data), row.depth + 1);\n      if (flattenedChildren.length > 0) {\n         this.content.splice(rowIndex + 1, 0, ... flattenedChildren);\n      }\n\n      row.isExpanded = true;\n   }\n\n   protected collapse(row: TreeDatagridRow) {\n      if (!row.isExpanded) {\n         // already collapsed\n         row.isExpanded = false;\n         return;\n      }\n\n      let rowIndex = this.content.indexOf(row);\n      if (rowIndex == -1) {\n         // row is filtered out\n         return;\n      }\n\n      let removeCount: number = 0;\n      for (let i = rowIndex + 1; i < this.content.length && row.depth < this.content[i].depth; i++) {\n         removeCount ++;\n      }\n\n      this.content.splice(rowIndex + 1, removeCount);\n      row.isExpanded = false;\n   }\n\n   // returns flattened list of the specified items and their children (and their children);\n   // sorting and filter are applied;\n   // items are returned in expanded state\n   protected flatten(items: any[], depth: number = 0, parent?: any): TreeDatagridRow[] {\n      if (!items) {\n         return [];\n      }\n\n      let sortedItems: any[] = [... items];\n      if (this.comparator) {\n         sortedItems.sort((item1: any, item2: any) => (this.sortAscending ? 1 : -1) * this.comparator(item1, item2));\n      }\n\n      let result: TreeDatagridRow[] = [];\n\n      for (let item of sortedItems) {\n\n         let childItems: any[] = this.childItems(item);\n\n         // flattened children, including their children\n         let children: TreeDatagridRow[] = this.flatten(childItems, depth + 1, item);\n\n         let filteredOut: boolean = false;\n         for (let filter of this.filters) {\n            // filter out items only if the filter is not applicable for the item or it's parent\n            const matchFilter: boolean = filter.predicate(item) || (!!parent && filter.predicate(parent));\n            if (!matchFilter) {\n               filteredOut = true;\n            }\n         }\n         if (!filteredOut || children.length > 0) {\n            let row: TreeDatagridRow = new TreeDatagridRow();\n            row.data = item;\n            row.toggle = () => row.isExpanded ? this.collapse(row) : this.expand(row);\n            row.depth = depth;\n            row.isExpanded = true;\n            row.isExpandable = childItems && childItems.length > 0;\n\n            result.push(row, ... children);\n         }\n      }\n\n      return result;\n   }\n\n}\n\n/**\n * Represents a single row in a flattened tree data provider.\n */\nexport class TreeDatagridRow {\n\n   /**\n    * The data object for the row\n    */\n   public data: any;\n\n   /**\n    * Will be true if the row has children\n    */\n   public isExpandable: boolean;\n\n   /**\n    * Will be true if the row is currently expanded\n    */\n   public isExpanded: boolean;\n\n   /**\n    * Will flip the row's expanded/collapsed state\n    */\n   public toggle: () => void;\n\n   /**\n    * The nesting level the row is rendered at\n    */\n   public depth: number;\n\n}\n\nexport interface Filter  {\n   match(data: any, filter:string): boolean;\n}\n\n/**\n * Allows specifying filtering predicate for the data provider.\n * @see TreeDatagrid.registerFilter\n */\nexport class TreeFilter implements ClrDatagridFilterInterface<any> {\n\n   private _predicate: (item: any) => boolean;\n   changes = new BehaviorSubject<boolean>(false);\n\n   constructor(private apply: () => void) {\n      this.clear();\n   }\n\n   public clear() {\n      this._predicate = (item: any) => true;\n      this.apply();\n   }\n\n   public set predicate(predicate: (item: any) => boolean) {\n      if (!predicate) {\n         this.clear();\n      } else {\n         this._predicate = predicate;\n         this.apply();\n      }\n   }\n\n   public get predicate(): (item: any) => boolean {\n      return this._predicate;\n   }\n\n   // Used by clarity filter\n   isActive(): boolean {\n      return this.changes.getValue();\n   }\n\n   // Used by clarity filter\n   accepts(val: any): boolean {\n      return true;\n   }\n}"]}