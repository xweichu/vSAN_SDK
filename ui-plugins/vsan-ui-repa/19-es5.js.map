{"version":3,"sources":["webpack:///src/app/vsan/common/component/datagrid/tree-expander.html","webpack:///src/app/vsan/common/component/datagrid/tree-expander.component.ts","webpack:///src/app/vsan/common/component/datagrid/tree-datagrid.ts"],"names":["TreeExpanderComponent","result","i","row","depth","push","isExpandable","isExpanded","expandedShape","collapsedShape","caretIcon","toggle","setTimeout","focus","TreeDatagrid","childItems","rootItems","filters","clear","refreshGrid","rowData","collapseAll","rows","forEach","r","collapse","expandAll","expand","roots","value","content","flatten","filter","TreeFilter","index","indexOf","splice","comparator","ascending","sortAscending","rowIndex","flattenedChildren","data","length","removeCount","items","parent","sortedItems","sort","item1","item2","item","children","filteredOut","matchFilter","predicate","TreeDatagridRow","childField","apply","changes","_predicate","getValue","val"],"mappings":"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","file":"19-es5.js","sourcesContent":["<!-- Copyright 2016-2021 VMware, Inc. All rights reserved. -- VMware Confidential -->\n<span *ngFor=\"let pad of depthPadding\">\n   <span class=\"depth-padding\"></span>\n</span>\n\n<span *ngIf=\"!row.isExpandable\"\n      class=\"depth-padding\">\n</span>\n\n<clr-icon id=\"expand-collapse\"\n          *ngIf=\"row.isExpandable\"\n          class=\"hand-cursor\"\n          [attr.shape]=\"iconShape\"\n          (click)=\"row.toggle()\"\n          tabindex=\"0\"\n          (keyup.enter)=\"toggleRow($event.target)\"\n          (keyup.space)=\"toggleRow($event.target)\">\n</clr-icon>\n","/* Copyright 2016-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, Input, ViewChild} from \"@angular/core\";\nimport {TreeDatagridRow} from \"./tree-datagrid\";\n\n@Component({\n   selector: \"vsan-expand\",\n   templateUrl: \"tree-expander.html\",\n   styleUrls: [\"tree-expander.scss\"],\n})\nexport class TreeExpanderComponent {\n\n   private static expandedShape: string = \"caret down\";\n   private static collapsedShape: string = \"caret right\";\n\n   @Input()\n   row: TreeDatagridRow;\n\n   get depthPadding(): any[] {\n      const result: any[] = [];\n      for (let i: number = 0; i < this.row.depth; i++) {\n         result.push(i);\n      }\n      return result;\n   }\n\n   /**\n    * Determines the icon of the expandable component.\n    */\n   get iconShape(): string {\n      if (this.row.isExpandable) {\n         return this.row.isExpanded ?\n               TreeExpanderComponent.expandedShape :\n               TreeExpanderComponent.collapsedShape;\n      }\n\n      return \"\";\n   }\n\n   toggleRow(caretIcon: HTMLElement): void {\n      this.row.toggle();\n      // Focus the caret icon after clicking Enter/Space, because it goes out of focus\n      setTimeout(() => caretIcon.focus());\n   }\n}\n","/* Copyright 2016 VMware, Inc. All rights reserved. -- VMware Confidential */\n\nimport {BehaviorSubject} from \"rxjs\";\nimport {ClrDatagridFilterInterface} from \"@clr/angular\";\n\n/**\n * Hierarchical data provider.\n * This is a additional structure to the Clarity Datagrid that supports hierarchical data rendering.\n */\nexport class TreeDatagrid {\n\n   public static forChildProperty(childField: string, rowData?: any[]) {\n      return new TreeDatagrid(item => item[childField], rowData);\n   }\n\n   /**\n    * The data objects that are to be rendered as first-level rows.\n    */\n   protected roots: any[];\n\n   /**\n    * The flat row structure consisting of the root objects and their children\n    * in case the parents are expanded. Sorting and filtering are reflected here.\n    */\n   protected content: TreeDatagridRow[];\n\n   /**\n    * List of filters to be applied on the data.\n    */\n   protected filters: TreeFilter[] = [];\n\n   /**\n    * The comparator to be used to sort the items and their children.\n    */\n   public comparator: (item1: any, item2: any) => number;\n\n   /**\n    * Sorting direction.\n    */\n   public sortAscending: boolean;\n\n   /**\n    * @param childItems lambda for extracting the children of a given data object\n    * @param rootItems (optional) the initial data objects\n    */\n   constructor(private childItems: (parent: any) => any[], rootItems?: any[]) {\n      this.rootItems = rootItems;\n   }\n\n   /**\n    * Removes all items.\n    */\n   public clear = () => this.rootItems = [];\n\n   /**\n    * Sets the given data objects as content.\n    */\n   public refreshGrid = (rowData: any[]) => this.rootItems = rowData;\n\n   public set rootItems(value: any[]) {\n      this.roots = value ? value : [];\n      this.content = this.flatten(this.roots);\n   }\n\n   /**\n    * root data objects\n    */\n   public get rootItems(): any[] {\n      return this.roots;\n   }\n\n   /**\n    * The flat row structure consisting of the root objects and their children\n    * in case the parents are expanded. Sorting and filtering are reflected here.\n    */\n   public get rows(): TreeDatagridRow[] {\n      return this.content;\n   }\n\n   /**\n    * Registers a new filter in the data provider.\n    * Initially the filter will accept all items.\n    * The consumer can assign a predicate to the TreeFilter object\n    * to add filtering rule. All registered filters' predicates are\n    * evaluated using AND operator.\n    */\n   public registerFilter(): TreeFilter {\n      let filter: TreeFilter = new TreeFilter(() => this.content = this.flatten(this.rootItems));\n      this.filters.push(filter);\n      return filter;\n   }\n\n   public unregisterFilter(value: TreeFilter) {\n      let index: number = this.filters.indexOf(value);\n      if (index != -1) {\n         this.filters.splice(index, 1);\n      }\n   }\n\n   /**\n    * Applies sorting comparator and direction for the data provider.\n    */\n   public sort(comparator: (item1: any, item2: any) => number, ascending: boolean = true) {\n      this.comparator = comparator;\n      this.sortAscending = ascending;\n\n      // refresh content, will expand all nodes\n      this.content = this.flatten(this.rootItems);\n   }\n\n   public collapseAll = () => this.rows.forEach(r => this.collapse(r));\n\n   public expandAll = () => this.rows.forEach(r => this.expand(r));\n\n   protected expand(row: TreeDatagridRow) {\n      if (row.isExpanded) {\n         // already expanded\n         return;\n      }\n\n      let rowIndex = this.content.indexOf(row);\n      if (rowIndex == -1) {\n         // row is filtered out\n         return;\n      }\n\n      let flattenedChildren: TreeDatagridRow[] = this.flatten(this.childItems(row.data), row.depth + 1);\n      if (flattenedChildren.length > 0) {\n         this.content.splice(rowIndex + 1, 0, ... flattenedChildren);\n      }\n\n      row.isExpanded = true;\n   }\n\n   protected collapse(row: TreeDatagridRow) {\n      if (!row.isExpanded) {\n         // already collapsed\n         row.isExpanded = false;\n         return;\n      }\n\n      let rowIndex = this.content.indexOf(row);\n      if (rowIndex == -1) {\n         // row is filtered out\n         return;\n      }\n\n      let removeCount: number = 0;\n      for (let i = rowIndex + 1; i < this.content.length && row.depth < this.content[i].depth; i++) {\n         removeCount ++;\n      }\n\n      this.content.splice(rowIndex + 1, removeCount);\n      row.isExpanded = false;\n   }\n\n   // returns flattened list of the specified items and their children (and their children);\n   // sorting and filter are applied;\n   // items are returned in expanded state\n   protected flatten(items: any[], depth: number = 0, parent?: any): TreeDatagridRow[] {\n      if (!items) {\n         return [];\n      }\n\n      let sortedItems: any[] = [... items];\n      if (this.comparator) {\n         sortedItems.sort((item1: any, item2: any) => (this.sortAscending ? 1 : -1) * this.comparator(item1, item2));\n      }\n\n      let result: TreeDatagridRow[] = [];\n\n      for (let item of sortedItems) {\n\n         let childItems: any[] = this.childItems(item);\n\n         // flattened children, including their children\n         let children: TreeDatagridRow[] = this.flatten(childItems, depth + 1, item);\n\n         let filteredOut: boolean = false;\n         for (let filter of this.filters) {\n            // filter out items only if the filter is not applicable for the item or it's parent\n            const matchFilter: boolean = filter.predicate(item) || (!!parent && filter.predicate(parent));\n            if (!matchFilter) {\n               filteredOut = true;\n            }\n         }\n         if (!filteredOut || children.length > 0) {\n            let row: TreeDatagridRow = new TreeDatagridRow();\n            row.data = item;\n            row.toggle = () => row.isExpanded ? this.collapse(row) : this.expand(row);\n            row.depth = depth;\n            row.isExpanded = true;\n            row.isExpandable = childItems && childItems.length > 0;\n\n            result.push(row, ... children);\n         }\n      }\n\n      return result;\n   }\n\n}\n\n/**\n * Represents a single row in a flattened tree data provider.\n */\nexport class TreeDatagridRow {\n\n   /**\n    * The data object for the row\n    */\n   public data: any;\n\n   /**\n    * Will be true if the row has children\n    */\n   public isExpandable: boolean;\n\n   /**\n    * Will be true if the row is currently expanded\n    */\n   public isExpanded: boolean;\n\n   /**\n    * Will flip the row's expanded/collapsed state\n    */\n   public toggle: () => void;\n\n   /**\n    * The nesting level the row is rendered at\n    */\n   public depth: number;\n\n}\n\nexport interface Filter  {\n   match(data: any, filter:string): boolean;\n}\n\n/**\n * Allows specifying filtering predicate for the data provider.\n * @see TreeDatagrid.registerFilter\n */\nexport class TreeFilter implements ClrDatagridFilterInterface<any> {\n\n   private _predicate: (item: any) => boolean;\n   changes = new BehaviorSubject<boolean>(false);\n\n   constructor(private apply: () => void) {\n      this.clear();\n   }\n\n   public clear() {\n      this._predicate = (item: any) => true;\n      this.apply();\n   }\n\n   public set predicate(predicate: (item: any) => boolean) {\n      if (!predicate) {\n         this.clear();\n      } else {\n         this._predicate = predicate;\n         this.apply();\n      }\n   }\n\n   public get predicate(): (item: any) => boolean {\n      return this._predicate;\n   }\n\n   // Used by clarity filter\n   isActive(): boolean {\n      return this.changes.getValue();\n   }\n\n   // Used by clarity filter\n   accepts(val: any): boolean {\n      return true;\n   }\n}"]}