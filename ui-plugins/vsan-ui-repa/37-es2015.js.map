{"version":3,"sources":["./src/app/vsan/common/component/datagrid/tree-column.html","./src/app/vsan/common/component/datagrid/tree-datagrid-view.ts","./src/app/vsan/common/component/datagrid/tree-column.component.ts","./src/app/vsan/common/component/datagrid/filter/base-filter.ts","./src/app/vsan/common/component/datagrid/filter/function-filter.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;mEAGM;YAAA;YAAA,YAE2B;YAAxB;;gCAAuB;;YAF1B;QAAA,aAE2B,8MAE3B;AAAA;yGACA,wHAAwB,2LAAS;yGANpC,oKAA4D,qFACzD,kZAE2B,IAEpB,gFACP,kZAAwB,IAAgB,6EAC3C,mDANS,mBAAgB,WAAtB,YAE2B,EAFrB,SAAgB,GAKhB,oBAAiB,WAAvB,YAAwB,EAAlB,SAAiB;;mEAIvB;YAAA;YAAA,YAIkC;YAAxB;;gCAAuB;;YAJjC;QAAA,oKAIkC,oFAClC,yDAHU,mBAAgC,oBAF1C,YAIkC,EAFxB,SAAgC;AAAA;;mEAK1C,sJAAkD,wFAC/C,spCAAsC,uFACnC;YAAA;YAAA;YAAA;;;;;;;;;;;;;;;;;;gCAAkE;;YAAtC;;gCAA0B;;YAAtD;QAAA,6rDAAkE,oFACrE,MAAgB,gFACnB,mDAHkB,mBAAsB,SAArC,YAAsC,EAAvB,SAAsB,GACN,oBAA0B,eAAtD,aAAkE,EAAtC,UAA0B,GAAtD,w3BAAkE;AAAA;yGArBK,0EACnF,oKAAuC,kFACpC,kZAA4D,IAOrD,+EAEP,2JAA+B,qFAC5B,kZAIkC,IACvB,kFAEX,mZAAkD,IAI3C,6EACV,MAAM,0EACT,mDAvBS,mBAAa,QAAnB,YAA4D,EAAtD,SAAa,GAWN,oDAA8C,cADxD,YAIkC,EAHxB,SAA8C,GAMlD,mBAAkB,aAAxB,aAAkD,EAA5C,SAAkB;;;;;;;;;;;;;;;;;ACnB9B;AAAA;AAAA;AAAA;AAAA,6EAA6E;AAEf;AAClB;AAE5C;;;;GAIG;AACI,MAAM,gBAAgB;IAU1B,YAAY,UAAkB;QAP9B,oBAAe,GAAY,IAAI,CAAC;QAEhC,sBAAiB,GAAY,KAAK,CAAC;QACnC,oBAAe,GAAsB,EAAE,CAAC;QAExC,mBAAc,GAAG,KAAK,CAAC;QAGpB,IAAI,CAAC,QAAQ,GAAG,2DAAY,CAAC,gBAAgB,CAAC,UAAU,CAAC,CAAC;QAC1D,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC;IAC/B,CAAC;IAES,QAAQ,CAAC,KAAY;QAC5B,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;QACjC,IAAI,CAAC,eAAe,GAAG,KAAK,CAAC;IAChC,CAAC;IAED;;;;;;;;OAQG;IACH,YAAY,CAAC,MAAuB,EAAE,KAAU;QAE7C,6DAA6D;QAC7D,yEAAyE;QACzE,IAAI,KAAK,CAAC,MAAM,CAAC,QAAQ,IAAI,KAAK;YAC5B,KAAK,CAAC,MAAM,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC;YAChC,KAAK,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,WAAW,IAAI,OAAO,EAAE;YACpD,OAAO;SACT;QAED,IAAI,KAAK,CAAC,OAAO,EAAE;YAChB,mDAAmD;YACnD,IAAI,IAAI,CAAC,eAAe,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE;gBACxC,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC;aACvE;iBAAM,IAAI,IAAI,CAAC,iBAAiB,EAAE;gBAChC,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;aACpC;iBAAM;gBACJ,sDAAsD;gBACtD,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC,EAAE,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC;gBAC5D,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;aAEpC;SACH;aAAM;YACJ,sDAAsD;YACtD,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC,EAAE,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC;YAC5D,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;SACpC;QAED,yCAAyC;QACzC,IAAI,IAAI,CAAC,sBAAsB,EAAE;YAC9B,IAAI,CAAC,sBAAsB,EAAE,CAAC;SAChC;IACJ,CAAC;IAED;;;;;;OAMG;IACH,aAAa,CAAC,GAAoB;QAC/B,OAAO,IAAI,CAAC,eAAe,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;IAC7C,CAAC;IAED;;;;OAIG;IACH,IAAI,mBAAmB;QACpB,OAAO,2DAAW,CAAC,sBAAsB,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;IACjE,CAAC;CACH;;;;;;;;;;;;;;ACzFD;AAAA;AAAA;AAAwD;AAExD;;;;;;;;;;;;;;;;;;;;GAoBG;AAMI;UAAM,mBAAmB;QALhC;YAWW,kBAAa,GAAW,EAAE,CAAC;QA2ItC,CAAC;QA9HE,IACI,YAAY,CAAC,KAAmB;YACjC,IAAI,IAAI,CAAC,aAAa,IAAI,IAAI,CAAC,MAAM,EAAE;gBACpC,IAAI,CAAC,aAAa,CAAC,gBAAgB,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;aACnD;YACD,IAAI,CAAC,aAAa,GAAG,KAAK,CAAC;YAC3B,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,aAAa,CAAC,cAAc,EAAE,CAAC;QACrD,CAAC;QAED,IAAI,YAAY;YACb,OAAO,IAAI,CAAC,aAAa,CAAC;QAC7B,CAAC;QAED;;;;WAIG;QACH,IACI,kBAAkB,CAAC,aAAoC;YACxD,IAAI,CAAC,UAAU,GAAG,CAAC,KAAU,EAAE,KAAU,EAAU,EAAE;gBAClD,MAAM,IAAI,GAAQ,aAAa,CAAC,KAAK,CAAC,CAAC;gBACvC,MAAM,IAAI,GAAQ,aAAa,CAAC,KAAK,CAAC,CAAC;gBAEvC,OAAO,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;YACrC,CAAC,CAAC;YACF,IAAI,CAAC,mBAAmB,GAAG,aAAa,CAAC;QAC5C,CAAC;QAED,IACI,SAAS,CAAC,KAAa;YAExB,IAAI,CAAC,IAAI,CAAC,mBAAmB,EAAE;gBAC5B,IAAI,CAAC,UAAU,GAAG,CAAC,KAAU,EAAE,KAAU,EAAU,EAAE;oBAClD,MAAM,IAAI,GAAQ,KAAK,CAAC,KAAK,CAAC,CAAC;oBAC/B,MAAM,IAAI,GAAQ,KAAK,CAAC,KAAK,CAAC,CAAC;oBAE/B,OAAO,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;gBACrC,CAAC,CAAC;aACJ;YACD,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC;QAC3B,CAAC;QAEO,SAAS,CAAC,IAAS,EAAE,IAAS;YACnC,IAAI,CAAC,IAAI,EAAE;gBACR,IAAI,CAAC,IAAI,EAAE;oBACR,OAAO,CAAC,CAAC;iBACX;gBACD,OAAO,CAAC,CAAC,CAAC;aACZ;iBAAM,IAAI,CAAC,IAAI,EAAE;gBACf,OAAO,CAAC,CAAC;aACX;YAED,IAAI,UAAU,CAAC,IAAI,CAAC,IAAI,UAAU,CAAC,IAAI,CAAC,EAAE;gBACvC;;;;;kBAKE;gBACF,MAAM,UAAU,GAAW,UAAU,CAAC,IAAI,CAAC,GAAG,UAAU,CAAC,IAAI,CAAC,CAAC;gBAC/D,IAAI,UAAU,KAAK,CAAC,EAAE;oBACnB,OAAO,UAAU,CAAC;iBACpB;aACH;YACD,OAAO,CAAC,EAAE,GAAG,IAAI,CAAC,CAAC,aAAa,CAAC,EAAE,GAAG,IAAI,CAAC,CAAC;QAC/C,CAAC;QAED,WAAW;YACR,IAAI,IAAI,CAAC,UAAU,KAAK,IAAI,CAAC,YAAY,CAAC,UAAU,EAAE;gBACnD,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE,CAAC,IAAI,CAAC,YAAY,CAAC,aAAa,CAAC,CAAC;aAC5E;iBAAM;gBACJ,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;aAChD;QACJ,CAAC;QAED,IAAI,iBAAiB;YAClB,IAAI,IAAI,CAAC,UAAU,KAAK,IAAI,CAAC,YAAY,CAAC,UAAU,EAAE;gBACnD,OAAO,IAAI,CAAC,YAAY,CAAC,aAAa;oBAChC,CAAC,CAAC,mBAAmB,CAAC,cAAc;oBACpC,CAAC,CAAC,mBAAmB,CAAC,eAAe,CAAC;aAC9C;YACD,OAAO,EAAE,CAAC;QACb,CAAC;QAED,IAAI,YAAY;YACb,OAAO,IAAI,CAAC,aAAa,CAAC;QAC7B,CAAC;QAED,IAAI,YAAY,CAAC,KAAa;YAC3B,IAAI,UAAU,GAAY,KAAK,CAAC;YAChC,IAAI,CAAC,aAAa,GAAG,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,WAAW,EAAE,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC;YAC7D,IAAI,IAAI,CAAC,UAAU,EAAE;gBAClB,IAAI,IAAI,CAAC,aAAa,CAAC,MAAM,GAAG,CAAC,EAAE;oBAChC,UAAU,GAAG,IAAI,CAAC;oBAClB,IAAI,CAAC,MAAM,CAAC,SAAS,GAAG,CAAC,IAAS,EAAW,EAAE;wBAC5C,IAAI,IAAI,CAAC,YAAY,EAAE;4BACpB,OAAO,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,IAAI,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC;yBAC3D;6BAAM,IAAI,IAAI,CAAC,mBAAmB,EAAE;4BAClC,MAAM,gBAAgB,GAAwB,IAAI,sEAAc,CAAC,CAAC,IAAS,EAAE,EAAE;gCAC5E,OAAO,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,CAAC;4BACzC,CAAC,CAAC,CAAC;4BACH,OAAO,gBAAgB,CAAC,KAAK,CAAC,IAAI,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC;yBAC1D;6BAAM;4BACJ,iCAAiC;4BACjC,MAAM,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;4BACpC,OAAO,KAAK,IAAI,CAAC,EAAE,GAAG,KAAK,CAAC,CAAC,WAAW,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC,CAAC;yBAChF;oBACJ,CAAC,CAAC;iBACJ;qBAAM;oBACJ,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC;iBACtB;aACH;YAED,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QACxC,CAAC;QAED,IAAI,QAAQ;YACT,OAAO,CAAC,CAAC,IAAI,CAAC,YAAY,IAAI,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC;QACnD,CAAC;QAED,IAAI,UAAU;YACX,MAAM,oBAAoB,GAAY,CAAC,CAAC,IAAI,CAAC,YAAY,IAAI,CAAC,CAAC,IAAI,CAAC,mBAAmB,IAAI,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC;YAC7G,OAAO,oBAAoB,IAAI,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC;QAChD,CAAC;;IA7IuB,kCAAc,GAAW,UAAU,CAAC;IACpC,mCAAe,GAAW,YAAY,CAAC;;;;;;;;;;;;;;;;AClClE;AAAA;AAAA;AAAA,kFAAkF;AAEzB;AAGzD;;;;GAIG;AACI,MAAM,UAAU;IAEpB,OAAO,CAAC,IAAO,EAAE,MAAc;QAC5B,2CAA2C;QAC3C,IAAI,IAAI,YAAY,8DAAe,EAAE;YAClC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;SACnB;QAED,IAAI,KAAK,GAAW,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;QACzC,IAAI,KAAK,EAAE;YACR,4BAA4B;YAC5B,OAAO,KAAK,CAAC,WAAW,EAAE,CAAC,OAAO,CAAC,MAAM,CAAC,WAAW,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC;SACjE;aAAM;YACJ,OAAO,KAAK,CAAC;SACf;IACJ,CAAC;IAED,KAAK,CAAC,IAAO,EAAE,MAAc;QAC1B,OAAO,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;IACrC,CAAC;IAES,SAAS,CAAC,IAAO;QACxB,OAAO,IAAI,GAAG,EAAE,CAAC;IACpB,CAAC;CAEH;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACnCD;AAAA;AAAA;AAAA,6EAA6E;AACpC;AAEzC;;;;GAIG;AACI,MAAM,cAAkB,SAAQ,uDAAa;IAEjD,YAAoB,QAA6B;QAC9C,KAAK,EAAE,CAAC;QADS,aAAQ,GAAR,QAAQ,CAAqB;IAEjD,CAAC;IAES,SAAS,CAAC,IAAO;QACxB,OAAO,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;IAC9B,CAAC;CACH","file":"37-es2015.js","sourcesContent":["<!--Copyright 2017-2020 VMware, Inc. All rights reserved. -- VMware Confidential-->\n<div class=\"vsan-tree-datagrid-column\">\n   <span *ngIf=\"title\" class=\"vsan-tree-datagrid-column-title\">\n      <span *ngIf=\"sortable\"\n         class=\"hand-cursor\"\n         (click)=\"sortClicked()\">\n         {{title}}\n      </span>\n      <span *ngIf=\"!sortable\">{{title}}</span>\n   </span>\n\n   <div class=\"column-right-area\">\n      <clr-icon id=\"sortState\"\n                *ngIf=\"dataProvider.comparator === comparator\"\n                [attr.shape]=\"sortIndicatorIcon\"\n                class=\"is-highlight hand-cursor\"\n                (click)=\"sortClicked()\">\n      </clr-icon>\n\n      <span *ngIf=\"filterable\" class=\"filter-container\">\n         <clr-dg-filter [clrDgFilter]=\"filter\">\n            <input clrInput type=\"text\" [(ngModel)]=\"filterString\" autofocus >\n         </clr-dg-filter>\n      </span>\n   </div>\n</div>","/* Copyright 2016 VMware, Inc. All rights reserved. -- VMware Confidential */\n\nimport {TreeDatagrid, TreeDatagridRow} from \"./tree-datagrid\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\n\n/**\n * Hierarchical datagrid view.\n * Takes care of selecting an item from the grid.\n * All views that want to use hierarchical datagrid can extend this view.\n */\nexport class TreeDatagridView {\n\n   datagrid: TreeDatagrid;\n   datagridLoading: boolean = true;\n\n   multipleSelection: boolean = false;\n   selectedTargets: TreeDatagridRow[] = [];\n   selectionChangeHandler: () => void;\n   filterDisabled = false;\n\n   constructor(childField: string) {\n      this.datagrid = TreeDatagrid.forChildProperty(childField);\n      this.datagridLoading = true;\n   }\n\n   protected initData(items: any[]): void {\n      this.datagrid.refreshGrid(items);\n      this.datagridLoading = false;\n   }\n\n   /**\n    * Click handler that sets iSCSI target.\n    *\n    * TODO: add also check if Ctr button was clicked during the mouse click\n    * in this case de-selection of the row has to be done\n    *\n    * @param target        selected target row\n    * @param event         mouse event\n    */\n   selectTarget(target: TreeDatagridRow, event: any): void {\n\n      // check if we are not expanding an collapsing a datagrid row\n      //TODO: this depends on Clarity icons internal implementation - change it\n      if (event.target.nodeName == \"svg\" &&\n            event.target.children.length > 0 &&\n            event.target.children[0].textContent == \"angle\") {\n         return;\n      }\n\n      if (event.ctrlKey) {\n         // if the element is already selected - deselect it\n         if (this.selectedTargets.includes(target)) {\n            this.selectedTargets.splice(this.selectedTargets.indexOf(target), 1);\n         } else if (this.multipleSelection) {\n            this.selectedTargets.push(target);\n         } else {\n            // remove all elements and select just the clicked one\n            this.selectedTargets.splice(0, this.selectedTargets.length);\n            this.selectedTargets.push(target);\n\n         }\n      } else {\n         // remove all elements and select just the clicked one\n         this.selectedTargets.splice(0, this.selectedTargets.length);\n         this.selectedTargets.push(target);\n      }\n\n      // invoke selection change handler if any\n      if (this.selectionChangeHandler) {\n         this.selectionChangeHandler();\n      }\n   }\n\n   /**\n    * Checks if current row is selected.\n    * This is used to know which rows have to be grayed out.\n    *\n    * @param row               the datagrid row in question\n    * @returns {boolean}       if the row is selected or not\n    */\n   isRowSelected(row: TreeDatagridRow): boolean {\n      return this.selectedTargets.includes(row);\n   }\n\n   /**\n    * Generates the proper datagrid footer - contains items count.\n    *\n    * @returns {string}       datagrid footer label\n    */\n   get datagridFooterLabel(): string {\n      return VsanUiUtils.getDatagridFooterLabel(this.datagrid.rows);\n   }\n}\n","/* Copyright 2017-2020 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, Input} from \"@angular/core\";\nimport {Filter, TreeDatagrid, TreeFilter} from \"./tree-datagrid\";\nimport {FunctionFilter} from \"./filter/function-filter\";\n\n/**\n * Component that can be used as content for the clr-dg-column component\n * that is compatible with the TreeDatagrid sorting and filtering mechanisms.\n * If the column is hideble the component must be placed outside the clrDgHideableColumn directive\n *\n * Usage:\n * <clr-dg-column>\n *    <ng-container *clrDgHideableColumn=\"{hidden: true}\">\n *       {{'my-column-title-key' | localized}}\n *    </ng-container>\n *    <vsan-tree-column\n *          [plainValueFunction]=\"plainValueFunction\" <!-- function(data: any): string that returns data object value\n *                                              to be sorted/filtered for this column. Overrides value set by dataField.\n *                                              Will not take effect for filtering if filterObject is set -->\n *          [dataField]=\"'name'\" <!-- the data object property to be sorted/filtered by this column.\n *                                  Will not take effect if plainValue is set -->\n *          [dataProvider]=\"myDatagrid\" <!-- the data provider rendered in the data grid -->\n *          [title]=\"'my-column-title-key' | localized\">\n *     </vsan-tree-column>\n *   </clr-dg-column>\n */\n@Component({\n   selector: \"vsan-tree-column\",\n   templateUrl: \"tree-column.html\",\n   styleUrls: [\"tree-column.scss\"],\n})\nexport class TreeColumnComponent {\n\n   private static readonly arrowAscending: string = \"arrow up\";\n   private static readonly arrowDescending: string = \"arrow down\";\n\n   private _dataProvider: TreeDatagrid;\n   private _filterString: string = \"\";\n   private _dataField: string;\n   private _plainValueFunction: (item: any) => string;\n   filter: TreeFilter;\n\n   comparator: (item1: any, item2: any) => number;\n\n   @Input()\n   title: string;\n\n   @Input()\n   filterObject: Filter;\n\n   @Input()\n   set dataProvider(value: TreeDatagrid) {\n      if (this._dataProvider && this.filter) {\n         this._dataProvider.unregisterFilter(this.filter);\n      }\n      this._dataProvider = value;\n      this.filter = this._dataProvider.registerFilter();\n   }\n\n   get dataProvider(): TreeDatagrid {\n      return this._dataProvider;\n   }\n\n   /**\n    * Returns the string value of the data item. Used for:\n    *    - on sorting: when set overrides <code>dataField</code>\n    *    - on filtering: when set overrides <code>dataField</code>, overridden by <code>plainObject<code>\n    */\n   @Input()\n   set plainValueFunction(valueFunction: (item: any) => string) {\n      this.comparator = (item1: any, item2: any): number => {\n         const val1: any = valueFunction(item1);\n         const val2: any = valueFunction(item2);\n\n         return this.doCompare(val1, val2);\n      };\n      this._plainValueFunction = valueFunction;\n   }\n\n   @Input()\n   set dataField(value: string) {\n\n      if (!this._plainValueFunction) {\n         this.comparator = (item1: any, item2: any): number => {\n            const val1: any = item1[value];\n            const val2: any = item2[value];\n\n            return this.doCompare(val1, val2);\n         };\n      }\n      this._dataField = value;\n   }\n\n   private doCompare(val1: any, val2: any): number {\n      if (!val1) {\n         if (!val2) {\n            return 0;\n         }\n         return -1;\n      } else if (!val2) {\n         return 1;\n      }\n\n      if (parseFloat(val1) && parseFloat(val2)) {\n         /*\n         if values starts with number - compare them as numbers.\n         If leading numbers are equals compare the whole string\n         comparing as string - '9 GB' > '10 GB' => comparing leading number - 9 GB < 10 GB\n         comparing leading number while equal - 10.10.1 === 10.10.2 => comparing whole string when leading number equal\n         */\n         const comparison: number = parseFloat(val1) - parseFloat(val2);\n         if (comparison !== 0) {\n            return comparison;\n         }\n      }\n      return (\"\" + val1).localeCompare(\"\" + val2);\n   }\n\n   sortClicked(): void {\n      if (this.comparator === this.dataProvider.comparator) {\n         this.dataProvider.sort(this.comparator, !this.dataProvider.sortAscending);\n      } else {\n         this.dataProvider.sort(this.comparator, true);\n      }\n   }\n\n   get sortIndicatorIcon(): string {\n      if (this.comparator === this.dataProvider.comparator) {\n         return this.dataProvider.sortAscending\n               ? TreeColumnComponent.arrowAscending\n               : TreeColumnComponent.arrowDescending;\n      }\n      return \"\";\n   }\n\n   get filterString(): string {\n      return this._filterString;\n   }\n\n   set filterString(value: string) {\n      let isFiltered: boolean = false;\n      this._filterString = value ? value.toLowerCase().trim() : \"\";\n      if (this.filterable) {\n         if (this._filterString.length > 0) {\n            isFiltered = true;\n            this.filter.predicate = (item: any): boolean => {\n               if (this.filterObject) {\n                  return this.filterObject.match(item, this._filterString);\n               } else if (this._plainValueFunction) {\n                  const plainValueFilter: FunctionFilter<any> = new FunctionFilter((data: any) => {\n                     return this._plainValueFunction(data);\n                  });\n                  return plainValueFilter.match(item, this._filterString);\n               } else {\n                  // Do the default filtering logic\n                  const value = item[this._dataField];\n                  return value && (\"\" + value).toLowerCase().indexOf(this._filterString) !== -1;\n               }\n            };\n         } else {\n            this.filter.clear();\n         }\n      }\n\n      this.filter.changes.next(isFiltered);\n   }\n\n   get sortable(): boolean {\n      return !!this.dataProvider && !!this.comparator;\n   }\n\n   get filterable(): boolean {\n      const isFilterMechanismSet: boolean = !!this.filterObject || !!this._plainValueFunction || !!this._dataField;\n      return isFilterMechanismSet && !!this.filter;\n   }\n\n}\n","/* Copyright 2017-2020 VMware, Inc. All rights reserved. -- VMware Confidential */\n\nimport {Filter, TreeDatagridRow} from \"../tree-datagrid\";\nimport {ClrDatagridStringFilterInterface} from \"@clr/angular\";\n\n/**\n * Abstract filter class that needs to be extended in order to implement custom filtration.\n * The class has a single abstract method that takes an object of type T and returns its\n * string representation.\n */\nexport class BaseFilter<T> implements ClrDatagridStringFilterInterface<T>, Filter {\n\n   accepts(data: T, search: string): boolean {\n      // Handle correctly TreeDatagrid components\n      if (data instanceof TreeDatagridRow) {\n         data = data.data;\n      }\n\n      let label: string = this.stringify(data);\n      if (label) {\n         // Compare ignoring the case\n         return label.toLowerCase().indexOf(search.toLowerCase()) != -1;\n      } else {\n         return false;\n      }\n   }\n\n   match(data: T, search: string): boolean {\n      return this.accepts(data, search);\n   }\n\n   protected stringify(data: T): string  {\n      return data + \"\";\n   }\n\n}\n\n","/* Copyright 2017 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {BaseFilter} from \"./base-filter\";\n\n/**\n * Extends BaseFilter by allowing the consumer to provide a custom filter function. The function\n * takes a single argument of type T and returns its string representation to be used\n * in the comparison.\n */\nexport class FunctionFilter<T> extends BaseFilter<T> {\n\n   constructor(private callback: (data: T) => string) {\n      super();\n   }\n\n   protected stringify(data: T): string {\n      return this.callback(data);\n   }\n}\n\n"],"sourceRoot":"webpack:///"}