{"version":3,"sources":["webpack:///src/app/vsan/health/view/model/health-perspective-data.ts","webpack:///src/app/vsan/common/util/reactive-form-util.ts","webpack:///src/app/vsan/health/view/card/health-nav-tab.html","webpack:///src/app/vsan/common/util/promise/promise-baton.ts","webpack:///src/app/vsan/health/view/card/health-nav-tab.component.ts","webpack:///src/app/vsan/health/view/health-checks.html","webpack:///src/app/vsan/common/component/action-button/button-title.directive.ts","webpack:///src/app/vsan/common/directive/clr-button-group/clr-button-group-common.directive.ts","webpack:///src/app/vsan/health/view/health-overview.component.ts","webpack:///src/app/vsan/health/model/health-tests.data.ts","webpack:///src/app/vsan/health/view/health-checks.component.ts","webpack:///src/app/vsan/health/health-checks.module.ts","webpack:///src/app/vsan/common/component/action-button/button-group.directive.ts","webpack:///src/app/vsan/common/util/promise/race-condition-safe.decorator.ts","webpack:///src/app/vsan/health/view/health-overview.html"],"names":["HealthPerspectiveData","isHistoricalHealthPerspective","rangeEndDate","rangeStartDate","Date","getTime","to","DAY_IN_MILLISECONDS","from","_from","value","roundToMinuteStart","_to","roundToMinuteEnd","range","ReactiveFormUtil","FORM_CONTROLS_DELIMITER","validateAllFormFields","formGroup","markAsTouched","Object","keys","controls","forEach","field","control","get","onlySelf","childControl","validateControls","updateValueAndValidity","emitEvent","updateFormControlsValueAndValidity","getFormControlPath","parts","join","id","PromiseBaton","ongoingPromise","promise","rejectOnCancel","cancelLastOne","cancel","HealthNavTabComponent","isSelected","onClicked","onClick","emit","shape","statusClass","getVsanHealthStatusBackgroundClass","status","getVsanHealthStatusIconShape","ButtonTitleDirective","host","titleChange","_title","next","asObservable","name","Math","random","toString","unsubscribe","ClrButtonGroupCommonDirective","elRef","setTimeout","allButtons","nativeElement","querySelectorAll","clrButtons","filter","clrButton","directives","index","buttonFound","findButtonByName","directive","resolveButton","buttons","i","length","item","HealthOverviewComponent","historicalHealthService","Icon","IllustratedMessageType","onTestSelection","isHistoricalHealth","fetchHistoricalInstances","clusterRef","contextObject","getHistoricalOverallHealth","historicalDateRange","historicalInstances","instanceTimestamp","overviewData","isTimestampSelected","selectedHistoricalTimestamp","getHistoricalOverallHealthForInstance","testId","params","timestamp","coreIssues","getString","isHistoricalCorrelationsLoading","isHistoricalInstancesLoading","test","relatedHealthTests","silentTestIds","isEmpty","selectedSilenceChecks","isSilentTest","testData","isSkipped","SKIPPED_CHECK","getVsanHealthStatusIconClass","skipped","testStatus","some","silenceId","indexOf","INSTANCES_LOADING_KEY","CORRELATIONS_LOADING_KEY","trackBy","INPUT_VALUES","HealthTests","isCollapsed","HealthChecksComponent","DateTimeSelectMode","VsanHealthStatus","ShowHideState","VsanHealthUtil","HEALTH_STATUS_ORDER","red","yellow","info","green","unknown","MAX_HISTORICAL_HEALTH_INTERVAL_DAYS","DAYS_IN_MONTH_DEFAULT","healthTests","isVirtualObjectsLinkShown","isDiskSpaceActionShown","hasEditPermissions","isFlat","selectedSubTestId","selectedSubTestIdChange","preselectTimestamp","showOverviewPageChange","isTestDataInitialised","silentCheckSupported","_healthPerspective","healthPerspectiveChange","retest","error","isSilentCheck","subtests","silentItems","check","silenceTestId","_showOverviewPage","val","showOverviewPage","_vsanHealthData","data","testsData","hasNoTestData","overviewTestsData","initTestGroups","updateTestGroups","newValue","clone","equals","dateRange","concat","map","healthTest","find","subtest","selectedTest","selectedSubtest","testCategory","vsanHealthData","t","s","CEIP_TEST_ID","SUPPORT_INSIGHT_TEST_ID","isUnhealthyStatus","isSilent","push","selectedCategory","getSelectedCategory","sortSubtests","splice","settings","runRetest","retestOnlineHealth","group","helpId","testCategiries","subtestId","healthData","inProgress","getLoadedGroupCollapseState","preselectFirstAvailableCheck","firstCategoryWithTests","category","changeSummaryCard","newHealthData","currentGroup","updatedTest","isUnhealthy","subTest","sort","a","b","getElementPosition","element","result","selectedSubtestId","isHistoricalPerspective","notifyHistoricalHealthRangeChanged","dateRangeError","undefined","earliestAvailableTimestamp","getEarliestAvailableTimestamp","lastCheckedTimestamp","getUnhealthySubtests","DISABLED","getHealthySubtests","SHOWN","HIDDEN","MISSING_DATA","HealthChecksModule","ButtonGroupDirective","_maximumInlineActions","_buttonTitleDirectives","updateButtonTitles","getVisibleButtons","getInMenuButtons","titleDirective","button","getAttribute","title","titleChangeEvent","subscribe","subscribeToggleButtonClick","btns","_btns","updateInMenuButtons","groupWithMenu","btn","inMenu","toggleButton","getToggleButton","onclick","Array","VISIBLE_BUTTON_ELEMENTS_SELECTOR","ownerDocument","IN_MENU_BUTTON_ELEMENTS_SELECTOR","querySelector","TOGGLE_MENU_BUTTON_SELECTOR","RaceConditionSafe","targetClass","functionName","descriptor","getUniqueId","func","promiseBaton","addEventListeners","args","resolveOnly","call","apply","Instance","registerRefreshHandler"],"mappings":"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","file":"53-es5.js","sourcesContent":["/* Copyright 2019-2020 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {DateRangeData} from \"@component/datetime-picker/date-range-picker.component\";\nimport {VsanDateTimeUtils} from \"@util/vsan-dateteime-util\";\n\n/**\n * Information about the perspective for presenting the health view.\n */\nexport class HealthPerspectiveData {\n\n   private _from: number;\n\n   set from(value: number) {\n      if (!value) {\n         this._from = null;\n         return;\n      }\n      this._from = VsanDateTimeUtils.roundToMinuteStart(value);\n   }\n\n   get from(): number {\n      return this._from;\n   }\n\n   private _to: number;\n\n   set to(value: number) {\n      if (!value) {\n         this._to = null;\n         return;\n      }\n      this._to = VsanDateTimeUtils.roundToMinuteEnd(value);\n   }\n\n   get to(): number {\n      return this._to;\n   }\n\n   constructor(public isHistoricalHealthPerspective: boolean, rangeEndDate?: number, rangeStartDate?: number) {\n      if (!rangeEndDate) {\n         rangeEndDate = new Date().getTime();\n      }\n      this.to = rangeEndDate;\n      if (!rangeStartDate) {\n         rangeStartDate = rangeEndDate - VsanDateTimeUtils.DAY_IN_MILLISECONDS;\n      }\n      this.from = rangeStartDate;\n   }\n\n   set dateRange(range: DateRangeData) {\n      this.from = range.from;\n      this.to = range.to;\n   }\n\n   get dateRange(): DateRangeData {\n      return new DateRangeData(this.from, this.to);\n   }\n\n   equals(value: HealthPerspectiveData) {\n      return value &&\n            value.isHistoricalHealthPerspective == this.isHistoricalHealthPerspective &&\n            value.from == this.from &&\n            value.to == this.to;\n   }\n\n   clone(): HealthPerspectiveData {\n      return new HealthPerspectiveData(this.isHistoricalHealthPerspective, this.to, this.from);\n   }\n}","/* Copyright 2017 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {FormArray, FormControl, FormGroup} from \"@angular/forms\";\n\nexport class ReactiveFormUtil {\n\n   private static readonly FORM_CONTROLS_DELIMITER: string = \".\";\n\n   /*\n    * Trigger validation on all controls in a form group and mark them as touched to display errors\n    */\n   static validateAllFormFields = (formGroup: FormGroup): void => {\n      formGroup.markAsTouched();\n      Object.keys(formGroup.controls).forEach(field => {\n         const control = formGroup.get(field);\n         control.markAsTouched({ onlySelf: true });\n         if (control instanceof FormGroup) {\n            ReactiveFormUtil.validateAllFormFields(control);\n         } else if (control instanceof FormArray) {\n            control.controls.forEach(\n                  (childControl: FormGroup) => ReactiveFormUtil.validateAllFormFields(childControl));\n         } else if (control instanceof FormControl) {\n            ReactiveFormUtil.validateControls([control]);\n         }\n      });\n   };\n\n   static validateControls = (controls: FormControl[]): void => {\n      controls.forEach((control) => {\n         control.markAsTouched({onlySelf: true});\n         control.updateValueAndValidity({\n            onlySelf: false,\n            emitEvent: true\n         });\n      });\n   };\n\n   /**\n    * Trigger updateValueAndValidity() to call ValidatorFn and update validity of all controls in a form group.\n    */\n   static updateFormControlsValueAndValidity = (formGroup: FormGroup) => {\n      Object.keys(formGroup.controls).forEach(control => {\n         if (formGroup.get(control) instanceof FormControl) {\n            formGroup.get(control).updateValueAndValidity();\n         }\n      })\n   };\n\n   static getFormControlPath = (...parts: string[]): string => {\n      return parts.join(ReactiveFormUtil.FORM_CONTROLS_DELIMITER);\n   };\n}\n","<!-- Copyright 2017-2021 VMware, Inc. All rights reserved. -- VMware Confidential -->\n<button id=\"{{id}}\"\n        class=\"nav-item\"\n        role=\"tab\"\n        [class.selected]=\"isSelected\"\n        (click)=\"onClick()\"\n        [attr.aria-selected]=\"isSelected\">\n\n   <!-- Show a custom icon -->\n   <div *ngIf=\"isCustomIconPassed\" class=\"nav-item-left\">\n      <clr-icon [attr.shape]=\"shape\" [style.color]=\"shapeColor.getColor()\" class=\"is-solid\"></clr-icon>\n   </div>\n   <!-- Show a status icon -->\n   <div *ngIf=\"!isCustomIconPassed\" class=\"nav-item-left\" [ngClass]=\"statusClass\">\n      <clr-icon [attr.shape]=\"statusIconShape\" class=\"alert-icon is-solid\"></clr-icon>\n   </div>\n\n   <div class=\"nav-item-right\" title=\"{{name}}\">\n      {{name}}\n   </div>\n</button>\n","/* Copyright 2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {CancelablePromise} from \"@util/promise/cancelable-promise\";\n\nexport class PromiseBaton<TResult> {\n   private ongoingPromise: CancelablePromise<TResult>;\n\n   constructor() {\n      this.ongoingPromise = null;\n   }\n\n   /**\n    * Only the last passed promise will be resolved. Others will be canceled.\n    * @param promise - The only pending promise that we want to resolve.\n    * @param rejectOnCancel - Whether we want to rethrow the cancellation of the returned promise.\n    * @example\n    * ```ts\n    * // If later we cancel the returned promise it will be rejected with the following error: { canceled: true }.\n    * resolveOnly(promise, true);\n    * ```\n    * ```ts\n    * // If later we cancel the returned promise it won't be rejected and the 'catch' callback won't be invoked.\n    * resolveOnly(promise, false);\n    * ```\n    */\n   resolveOnly(promise: Promise<TResult>, rejectOnCancel: boolean = false): Promise<TResult> {\n      this.cancelLastOne();\n      // We wrap it into CancelablePromise to be able to cancel this one without affecting the original promise.\n      // Original promise subscribers still will be able to get the result.\n      this.ongoingPromise = new CancelablePromise(promise, rejectOnCancel);\n      return this.ongoingPromise.promise;\n   }\n\n   /**\n    * Reject the currently running promise.\n    */\n   cancelLastOne(): void {\n      if (this.ongoingPromise) {\n         this.ongoingPromise.cancel();\n      }\n   }\n}","/* Copyright 2017-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, EventEmitter, Input, Output} from \"@angular/core\";\nimport {VsanHealthUtil} from \"@util/vsan-health-util\";\nimport {VsanHealthStatus} from \"@generated/vsan-health-status\";\nimport {ThemeSpecificColor} from \"@model/theme-specific-color\";\n\n@Component({\n   templateUrl: \"health-nav-tab.html\",\n   styleUrls: [\"health-nav-tab.scss\"],\n   selector: \"vsan-health-nav-tab\",\n})\nexport class HealthNavTabComponent {\n\n   @Input()\n   id: string;\n\n   @Input()\n   name: string;\n\n   @Input()\n   shape: string;\n\n   @Input()\n   shapeColor: ThemeSpecificColor;\n\n   @Input()\n   status: VsanHealthStatus;\n\n   @Input()\n   isSelected: boolean = false;\n\n   @Output()\n   onClicked: EventEmitter<string> = new EventEmitter();\n\n   onClick = (): void => {\n      this.onClicked.emit(this.id);\n   };\n\n   get isCustomIconPassed(): boolean {\n      return this.shape != null;\n   }\n\n   get statusClass(): string {\n      const statusClass: string = VsanHealthUtil.getVsanHealthStatusBackgroundClass(this.status);\n      return statusClass ? `alert ${statusClass}` : \"\";\n   }\n\n   get statusIconShape(): string {\n      return VsanHealthUtil.getVsanHealthStatusIconShape(this.status);\n   }\n}\n","<!-- Copyright 2018-2021 VMware, Inc. All rights reserved. -- VMware Confidential -->\n<div class=\"nav-container\">\n   <div *ngIf=\"titleHealder\" class=\"title-header\">\n      <ng-container *ngTemplateOutlet=\"titleHealder\"></ng-container>\n   </div>\n   <div *ngIf=\"!isFlat && includeHistoricalHealth\" class=\"perspective-wrapper\">\n      <clr-toggle-wrapper class=\"toggle-wrapper\">\n         <input type=\"checkbox\" clrToggle\n                id=\"health-perspective-switch\"\n                [ngModel]=\"isHistoricalHealth\"\n                (ngModelChange)=\"onPerspectiveSwitch($event)\"/>\n         <label id=\"health-perspective-switch-label\">{{\"vsan.health.historical.switch.label\" | localized}}</label>\n      </clr-toggle-wrapper>\n      <vsan-datetime-picker *ngIf=\"isHistoricalHealth\"\n                            [selectMode]=\"DateTimeSelectMode.RANGE\"\n                            [datetime]=\"dateRange\"\n                            [errorMessage]=\"dateRangeError\"\n                            (datetimeChange)=\"onDateRangeChange($event)\"\n                            [max]=\"getCurrentDate()\"\n                            role=\"group\"\n                            aria-labelledby=\"health-perspective-switch-label\">\n      </vsan-datetime-picker>\n   </div>\n\n   <ng-container *ngIf=\"!hasErrors && !hasNoTestData\">\n      <ng-container *ngIf=\"!isFlat\">\n         <div class=\"sidenav-wrapper\">\n            <vsan-health-nav-tab *ngIf=\"overviewTestsData\"\n                                                [name]=\"'vsan.health.overview.title' | localized\"\n                                                [isSelected]=\"showOverviewPage\"\n                                                (onClicked)=\"onOverviewPageSelected()\"\n                                                [shape]=\"Icon.DASHBOARD.shape\"\n                                                [shapeColor]=\"Icon.DASHBOARD.color\"\n                                                role=\"presentation\">\n            </vsan-health-nav-tab>\n            <clr-accordion [clrAccordionMultiPanel]=\"true\">\n               <clr-accordion-panel *ngFor=\"let test of healthTests;let i=index\"\n                                    id=\"test-category-{{test.testData?.testId}}\"\n                                    [clrAccordionPanelDisabled]=\"test.testData.inProgress\"\n                                    [clrAccordionPanelOpen]=\"!test.isCollapsed\"\n                                    (clrAccordionPanelOpenChange)=\"test.isCollapsed = !$event\">\n                  <clr-accordion-title>\n                     <label id=\"check-{{i}}\" title=\"{{test.testData.testDescription}}\">\n                        {{test.testData.testName}}\n                     </label>\n                     <span *ngIf=\"test.testData.inProgress\" class=\"spinner spinner-sm spinner-inline\"></span>\n                     <clr-icon *ngIf=\"isCategoryIconVisible(test)\"\n                               [attr.shape]=\"getIconShape(test.testData)\"\n                               class=\"is-solid {{getIconClass(test.testData)}}\"\n                               size=\"18\">\n                     </clr-icon>\n                  </clr-accordion-title>\n                  <clr-accordion-content>\n                     <ng-container *ngTemplateOutlet=\"section;context: {test: test, selectedSubtestId: selectedSubTestId}\">\n                     </ng-container>\n                  </clr-accordion-content>\n               </clr-accordion-panel>\n            </clr-accordion>\n         </div>\n      </ng-container>\n\n      <ng-container *ngIf=\"isFlat\">\n         <ng-container *ngTemplateOutlet=\"section;context: {test: healthTests[0], selectedSubtestId: selectedSubTestId}\">\n         </ng-container>\n      </ng-container>\n   </ng-container>\n\n</div>\n\n<div *ngIf=\"!hasNoTestData && !showOverviewPage\"\n     class=\"checks-details\"\n     role=\"tabpanel\" [attr.aria-labelledby]=\"selectedSubtest?.testId\">\n   <vsan-health-details-card *ngIf=\"!hasErrors\"\n                                       class=\"details-card\"\n                                       [class.has-border]=\"includeBorderToDetails\"\n                                       [preselectTimestamp]=\"preselectTimestamp\"\n                                       [data]=\"selectedSubtest\"\n                                       [isVirtualObjectsLinkShown]=\"isVirtualObjectsLinkShown\"\n                                       [isDiskSpaceActionShown]=\"isDiskSpaceActionShown\"\n                                       [isSilentCheck]=\"isSilentCheck(selectedSubtest)\"\n                                       [isOnlineTest]=\"isOnlineTestSelected\"\n                                       [silentCheckSupported]=\"silentCheckSupported\"\n                                       [isVsphereHealth]=\"isVsphereHealth\"\n                                       [hasEditPermissions]=\"hasEditPermissions\"\n                                       [showTestName]=\"!isFlat\"\n                                       [isHistoricalTestData]=\"healthPerspective.isHistoricalHealthPerspective\"\n                                       [showHealthCorrelationMessages]=\"true\"\n                                       (onHealthTestNavigation)=\"navigateToHealthTest($event)\"\n                                       (onRetest)=\"retest.emit($event)\"\n                                       (onSilentChange)=\"silentChange($event)\"\n                                       (onError)=\"error.emit($event)\">\n   </vsan-health-details-card>\n</div>\n\n<!-- Overview health page -->\n<div *ngIf=\"!hasNoTestData && showOverviewPage\" class=\"checks-details\" role=\"tabpanel\">\n   <vsan-health-overview [overviewData]=\"overviewTestsData\"\n                         [selectedSilenceChecks]=\"selectedSilenceChecks\"\n                         [isHistoricalHealth]=\"isHistoricalHealth\"\n                         [historicalDateRange]=\"dateRange\"\n                         (onTestSelection)=\"navigateToHealthTest($event)\">\n   </vsan-health-overview>\n</div>\n\n<!-- No historical test data for selected period -->\n<vsan-illustrated-message *ngIf=\"!hasErrors && isHistoricalHealth && hasNoTestData\"\n                          [type]=\"noDataMessageType\"\n                          [message]=\"'vsan.health.historical.details.test.data.missing' | localized\">\n</vsan-illustrated-message>\n\n<ng-template #section let-test=\"test\" let-selectedSubtestId=\"selectedSubtestId\">\n   <div *ngIf=\"test?.testData\" class=\"nav-list\">\n      <vsan-health-nav-tab *ngFor=\"let subtest of getUnhealthySubtests(test.testData.subtests)\"\n                                          [id]=\"subtest.testId\"\n                                          [status]=\"subtest.status\"\n                                          [name]=\"subtest.testName\"\n                                          [isSelected]=\"selectedSubtestId == subtest.testId\"\n                                          (onClicked)=\"summaryCardClick($event)\" role=\"presentation\">\n      </vsan-health-nav-tab>\n      <div *ngIf=\"getHealthySubtests(test.testData.subtests).length\"\n           class=\"healthy-tests-wrapper\"\n           [vsan-show-hide]=\"getHealthyTestWrapperState(test.testData.subtests)\"\n           [showTriggerElement]=\"showTrigger\"\n           [hideTriggerElement]=\"hideTrigger\" role=\"presentation\">\n         <vsan-health-nav-tab *ngFor=\"let subtest of getHealthySubtests(test.testData.subtests)\"\n                                             [id]=\"subtest.testId\"\n                                             [status]=\"subtest.status\"\n                                             [name]=\"subtest.testName\"\n                                             [isSelected]=\"selectedSubtestId == subtest.testId\"\n                                             (onClicked)=\"summaryCardClick($event)\" role=\"presentation\">\n         </vsan-health-nav-tab>\n      </div>\n      <ng-template #showTrigger>\n         <button class=\"healthy-test-trigger\" aria-expanded=\"false\">\n            {{\"vsan.monitor.health.expand.healthy.tests\" | localized: getHealthySubtests(test.testData.subtests).length.toString()}}\n         </button>\n      </ng-template>\n      <ng-template #hideTrigger>\n         <button class=\"healthy-test-trigger\" aria-expanded=\"true\">\n            {{\"vsan.monitor.health.collapse.healthy.tests\" | localized: getHealthySubtests(test.testData.subtests).length.toString()}}\n         </button>\n      </ng-template>\n   </div>\n</ng-template>\n","/* Copyright 2019 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Directive, Input, OnInit} from '@angular/core';\nimport {BehaviorSubject, Observable} from \"rxjs\";\nimport {ClrButton} from \"@clr/angular\";\n\n/**\n * Attribute directive for detecting button title change and storing title.\n * Only used for clr-button in clr-button-group.\n * @title - The title of clr-button\n */\n@Directive({\n   selector: \"clr-button[vsan-button-title]\"\n})\nexport class ButtonTitleDirective implements OnInit {\n\n   constructor(public host: ClrButton) {}\n\n   private _title: string;\n\n   @Input(\"vsan-button-title\")\n   set title(value: string) {\n      if (this._title !== value) {\n         this.titleChange.next(value);\n      }\n      this._title = value;\n   }\n\n   get title(): string {\n      return this._title;\n   }\n\n   private titleChange: BehaviorSubject<string> = new BehaviorSubject<string>(\"\");\n\n   get titleChangeEvent(): Observable<string> {\n      return this.titleChange.asObservable();\n   }\n\n   ngOnInit(): void {\n      // name should be set, if not provided in template - generate one. ClrButtom#name is used to generate the name\n      // attribute of the markup button. Later the name is used to match the generated markup with the directive.\n      if (!this.host.name) {\n         this.host.name = Math.random().toString();\n      }\n   }\n\n   ngOnDestroy() {\n      this.titleChange.unsubscribe();\n   }\n}","/* Copyright 2020 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {AfterContentInit, ContentChildren, Directive, ElementRef} from \"@angular/core\";\nimport {ClrButton} from \"@clr/angular\";\nimport {ClrButtonBaseDirective, DirectiveHolder} from \"@directive/clr-button-group/clr-button-base.directive\";\n\n/**\n * Applies on every clr-button-group and help to link the clr-button with directive applieds on it,  which extends\n * {@link ClrButtonBaseDirective}, to the actual rendered html button.\n */\n@Directive({\n   selector: \"clr-button-group\",\n})\nexport class ClrButtonGroupCommonDirective implements AfterContentInit {\n\n   @ContentChildren(ClrButton, {descendants: true})\n   clrButtons: ClrButton[];\n\n   constructor(private elRef: ElementRef) {}\n\n   ngAfterContentInit(): void {\n      setTimeout(() => {\n         const allButtons: NodeListOf<HTMLButtonElement> = this.elRef.nativeElement.querySelectorAll(\"button\");\n         // match button with clrButton and notify directives\n         this.clrButtons.filter(clrButton => !!(clrButton as DirectiveHolder).directives)\n               .forEach((clrButton, index) => {\n                  const buttonFound: HTMLButtonElement = this.findButtonByName(clrButton.name, allButtons);\n                  if (buttonFound) {\n                     (clrButton as DirectiveHolder).directives.forEach(directive => {\n                        directive.resolveButton(clrButton, buttonFound, index);\n                     });\n                  }\n               });\n      });\n   }\n\n   private findButtonByName(name: string, buttons: NodeListOf<HTMLButtonElement>): HTMLButtonElement {\n      for (let i: number = 0; i < buttons.length; i++) {\n         if (buttons.item(i).name === name) {\n            return buttons.item(i);\n         }\n      }\n      return null;\n   }\n\n}","/* Copyright 2021-2022 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, EventEmitter, Input, OnInit, Output} from \"@angular/core\";\nimport {DateRangeData} from \"@component/datetime-picker/date-range-picker.component\";\nimport {IllustratedMessageType} from \"@component/illustrated-message/illustrated-message.component\";\nimport {VsanHealthOverviewData} from \"@generated/vsan-health-overview-data\";\nimport {VsanHealthStatus} from \"@generated/vsan-health-status\";\nimport {VsanHistoricalHealthService} from \"@generated/vsan-historical-health-service\";\nimport {VsanTestCorrelationData} from \"@generated/vsan-test-correlation-data\";\nimport {VsanTestInstanceDetails} from \"@generated/vsan-test-instance-details\";\nimport {Loader} from \"@service/flow/loader.decorator\";\nimport {LoadingIndicator} from \"@service/flow/loading-indicator.decorator\";\nimport {ManagedObject} from \"@service/managed-object\";\nimport {Cached, TrackBy} from \"@util/cache/cached.decorator\";\nimport {Icon} from \"@util/icon\";\nimport {RaceConditionSafe} from \"@util/promise/race-condition-safe.decorator\";\nimport {VsanHealthUtil} from \"@util/vsan-health-util\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {HealthTestNavParams} from \"../model/health-test-nav-params\";\n\n@Component({\n   selector: \"vsan-health-overview\",\n   templateUrl: \"health-overview.html\",\n   styleUrls: [\"health-overview.scss\"],\n})\nexport class HealthOverviewComponent implements OnInit {\n   Icon: typeof Icon = Icon;\n   IllustratedMessageType: typeof IllustratedMessageType = IllustratedMessageType;\n\n   @Input()\n   overviewData: VsanHealthOverviewData;\n\n   @Input()\n   selectedSilenceChecks: string[];\n\n   @Input()\n   isHistoricalHealth: boolean;\n\n   @Input()\n   historicalDateRange: DateRangeData;\n\n   @Output()\n   onTestSelection: EventEmitter<HealthTestNavParams> = new EventEmitter<HealthTestNavParams>();\n\n   private static readonly INSTANCES_LOADING_KEY: string = \"instances-loading\";\n   @LoadingIndicator({name: HealthOverviewComponent.INSTANCES_LOADING_KEY})\n   isHistoricalInstancesLoading: boolean;\n\n   private static readonly CORRELATIONS_LOADING_KEY: string = \"correlations-loading\";\n   @LoadingIndicator({name: HealthOverviewComponent.CORRELATIONS_LOADING_KEY})\n   isHistoricalCorrelationsLoading: boolean;\n\n   historicalInstances: VsanTestInstanceDetails[];\n   selectedHistoricalTimestamp: number;\n\n   isTimestampSelected: boolean;\n   clusterRef: ManagedObject;\n\n   constructor(private historicalHealthService: VsanHistoricalHealthService) {\n   }\n\n   async ngOnInit(): Promise<void> {\n      if (this.isHistoricalHealth) {\n         await this.fetchHistoricalInstances();\n      }\n   }\n\n   @Loader({name: HealthOverviewComponent.INSTANCES_LOADING_KEY})\n   private async fetchHistoricalInstances(): Promise<void> {\n      this.clusterRef = ManagedObject.contextObject;\n      this.historicalInstances =\n            await this.getHistoricalOverallHealth(this.historicalDateRange.from, this.historicalDateRange.to);\n   }\n\n   @RaceConditionSafe()\n   @Cached({trackBy: TrackBy.INPUT_VALUES})\n   private async getHistoricalOverallHealth(from: number, to: number): Promise<VsanTestInstanceDetails[]> {\n      return await this.historicalHealthService.getHistoricalOverallHealth(this.clusterRef, from, to);\n   }\n\n   @Loader({name: HealthOverviewComponent.CORRELATIONS_LOADING_KEY})\n   async instanceSelected(instanceTimestamp: number): Promise<void> {\n      this.overviewData = null;\n      this.isTimestampSelected = !!instanceTimestamp;\n      if (instanceTimestamp) {\n         this.selectedHistoricalTimestamp = instanceTimestamp;\n         this.overviewData = await this.getHistoricalOverallHealthForInstance(instanceTimestamp);\n      }\n   }\n\n   @RaceConditionSafe()\n   @Cached({trackBy: TrackBy.INPUT_VALUES})\n   private async getHistoricalOverallHealthForInstance(instanceTimestamp: number): Promise<VsanHealthOverviewData> {\n      return this.historicalHealthService.getHistoricalOverallHealthForInstance(this.clusterRef, instanceTimestamp);\n   }\n\n   onTestSelected(testId: string): void {\n      const params: HealthTestNavParams = new HealthTestNavParams(testId);\n      if (this.isHistoricalHealth) {\n         params.timestamp = this.selectedHistoricalTimestamp;\n      }\n      this.onTestSelection.emit(params);\n   }\n\n   get otherIssuesTitle(): string {\n      return this.overviewData.coreIssues && this.overviewData.coreIssues.length > 0\n            ? VsanUiUtils.getString(\"vsan.health.overview.other.issues.label\")\n            : VsanUiUtils.getString(\"vsan.health.overview.issues.label\");\n   }\n\n   get noIssuesMessage(): string {\n      return this.isHistoricalHealth\n            ? VsanUiUtils.getString(\"vsan.health.overview.historical.noIssues\")\n            : VsanUiUtils.getString(\"vsan.health.overview.normal.noIssues\");\n   }\n\n   get showOverallCounts(): boolean {\n      return this.isHistoricalHealth\n            ? this.overviewData && !this.isHistoricalCorrelationsLoading && this.isTimestampSelected\n            : !!this.overviewData;\n   }\n\n   get showIssues(): boolean {\n      return this.isHistoricalHealth\n            ? !this.isHistoricalInstancesLoading && !this.isHistoricalCorrelationsLoading && this.isTimestampSelected\n            : !!this.overviewData;\n   }\n\n   getChildren(test: VsanTestCorrelationData): VsanTestCorrelationData[] {\n      return test.relatedHealthTests;\n   }\n\n   getOverallCount(silentTestIds: string[]): number {\n      if (VsanUiUtils.isEmpty(silentTestIds)) {\n         return 0;\n      }\n\n      return silentTestIds.filter(testId => VsanUiUtils.isEmpty(this.selectedSilenceChecks)\n            || !this.isSilentTest(testId)).length;\n   }\n\n   getStatusIconClass(testData: VsanTestCorrelationData): string {\n      if (testData.isSkipped) {\n         return Icon.SKIPPED_CHECK;\n      }\n      return VsanHealthUtil.getVsanHealthStatusIconClass(this.isSilentTest(testData.testId)\n            ? VsanHealthStatus.skipped\n            : testData.testStatus);\n   }\n\n   getStatusIconShape(testData: VsanTestCorrelationData): string {\n      if (testData.isSkipped) {\n         return Icon.SKIPPED_CHECK;\n      }\n      return VsanHealthUtil.getVsanHealthStatusIconShape(this.isSilentTest(testData.testId)\n            ? VsanHealthStatus.skipped\n            : testData.testStatus);\n   }\n\n   private isSilentTest(testId: string): boolean {\n      if (this.isHistoricalHealth) {\n         // Don't show the currently silenced test as silencedwhen dealing with older versions of the test (historical).\n         return false;\n      }\n      return this.selectedSilenceChecks?.some(silenceId => testId.indexOf(silenceId) !== -1);\n   }\n}","/* Copyright 2019-2020 VMware, Inc. All rights reserved. -- VMware Confidential */\n\nimport {VsanTestData} from \"@generated/vsan-test-data\";\n\n/**\n * Data model used to display health tests summary cards.\n */\nexport class HealthTests {\n   constructor(\n         public testData: VsanTestData,\n         public isCollapsed: boolean = true) {\n   }\n}\n","/* Copyright 2018-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {\n   Component,\n   EventEmitter,\n   HostBinding,\n   Input,\n   Output,\n   TemplateRef,\n} from \"@angular/core\";\nimport {VsanHealthUtil} from \"@util/vsan-health-util\";\nimport {VsanHealthData} from \"@generated/vsan-health-data\";\nimport {VsanTestData} from \"@generated/vsan-test-data\";\nimport {HealthTests} from \"../model/health-tests.data\";\nimport {VsanHealthStatus} from \"@generated/vsan-health-status\";\nimport {DateTimeSelectMode} from \"@component/datetime-picker/datetime-picker.component\";\nimport {DateRangeData} from \"@component/datetime-picker/date-range-picker.component\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {ShowHideState} from \"@directive/show-hide/show-hide.directive\";\nimport {VsanDateTimeUtils} from \"@util/vsan-dateteime-util\";\nimport {IllustratedMessageType} from \"@component/illustrated-message/illustrated-message.component\";\nimport {HealthTestNavParams} from \"../model/health-test-nav-params\";\nimport {VsanHealthOverviewData} from \"@generated/vsan-health-overview-data\";\nimport {HealthSilentChangeData} from \"../model/health-silent-change.data\";\nimport {HealthRetestEventData} from \"../model/health-retest-event.data\";\nimport {Icon} from \"@util/icon\";\nimport {HealthPerspectiveData} from \"./model/health-perspective-data\";\n\n@Component({\n   templateUrl: \"health-checks.html\",\n   styleUrls: [\"health-checks.scss\"],\n   selector: \"vsan-health-checks\",\n})\nexport class HealthChecksComponent {\n   DateTimeSelectMode: typeof DateTimeSelectMode = DateTimeSelectMode;\n   VsanHealthStatus: typeof VsanHealthStatus = VsanHealthStatus;\n   ShowHideState: typeof ShowHideState = ShowHideState;\n   VsanHealthUtil: typeof VsanHealthUtil = VsanHealthUtil;\n   Icon: typeof Icon = Icon;\n\n   readonly HEALTH_STATUS_ORDER: VsanHealthStatus[] = [\n      VsanHealthStatus.red, VsanHealthStatus.yellow, VsanHealthStatus.info,\n      VsanHealthStatus.green, VsanHealthStatus.skipped, VsanHealthStatus.unknown,\n   ];\n\n   private readonly MAX_HISTORICAL_HEALTH_INTERVAL_DAYS: number = VsanDateTimeUtils.DAYS_IN_MONTH_DEFAULT;\n\n   isHistoricalHealth: boolean;\n   dateRange: DateRangeData;\n   dateRangeError: string;\n   healthTests: HealthTests[] = [];\n   waitingForServiceConfig: boolean;\n\n   @HostBinding(\"class.no-sidenav-layout\")\n   hasNoTestData: boolean;\n\n   @Input()\n   titleHealder: TemplateRef<any>;\n\n   @Input()\n   isVirtualObjectsLinkShown: boolean = true;\n\n   @Input()\n   isDiskSpaceActionShown: boolean = true;\n\n   @Input()\n   hasEditPermissions: boolean = false;\n\n   @Input()\n   isFlat: boolean = false;\n\n   @Input()\n   includeHistoricalHealth: boolean;\n\n   @Input()\n   selectedSubTestId: string = \"\";\n\n   @Input()\n   lastCheckedTimestamp: number;\n\n   @Input()\n   includeBorderToDetails: boolean;\n\n   @Input()\n   hasErrors: boolean;\n\n   @Output()\n   selectedSubTestIdChange: EventEmitter<string> = new EventEmitter<string>();\n\n   preselectTimestamp: number = null;\n\n   private _showOverviewPage: boolean;\n\n   @Input()\n   set showOverviewPage(val: boolean) {\n      this._showOverviewPage = val;\n      if (this.showOverviewPage) {\n         // If the overview page is selected, hide the test details.\n         this.selectedSubTestIdChange.emit(null);\n      }\n      this.showOverviewPageChange.emit(this.showOverviewPage);\n   }\n\n   get showOverviewPage(): boolean {\n      return this._showOverviewPage;\n   }\n\n   @Output()\n   showOverviewPageChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n   overviewTestsData: VsanHealthOverviewData;\n\n   private _vsanHealthData: VsanHealthData;\n   private isTestDataInitialised: boolean = false;\n\n   @Input()\n   set vsanHealthData(data: VsanHealthData) {\n      this._vsanHealthData = data;\n\n      if (!data || VsanUiUtils.isEmpty(data.testsData)) {\n         this.healthTests = [];\n         this.selectedSubTestId = null;\n         this.preselectTimestamp = null;\n         this.hasNoTestData = true;\n         return;\n      }\n\n      this.overviewTestsData = this._vsanHealthData.overviewData;\n\n      if (!this.isTestDataInitialised) {\n         this.initTestGroups(this._vsanHealthData);\n         this.isTestDataInitialised = true;\n         return;\n      }\n\n      this.updateTestGroups(this._vsanHealthData);\n   }\n\n   get vsanHealthData(): VsanHealthData {\n      return this._vsanHealthData;\n   }\n\n   @Input()\n   silentCheckSupported: boolean = false;\n\n   @Input()\n   selectedSilenceChecks: string[] = [];\n\n   @Input()\n   isVsphereHealth: boolean;\n\n   private _healthPerspective: HealthPerspectiveData = new HealthPerspectiveData(false);\n\n   @Input()\n   set healthPerspective(value: HealthPerspectiveData) {\n      // the object is two-way bound between parent and child. If the same object is passed back and forth it is\n      // impossible to detect a change (difference from the cached one). To address this issue always work with a clone\n      // of the object (new object)\n      const newValue: HealthPerspectiveData = value.clone();\n      if (!newValue || newValue.equals(this._healthPerspective)) {\n         return;\n      }\n      this._healthPerspective = newValue;\n      this.isHistoricalHealth = this._healthPerspective.isHistoricalHealthPerspective;\n      this.dateRange = this._healthPerspective.dateRange;\n   }\n\n   get healthPerspective(): HealthPerspectiveData {\n      return this._healthPerspective;\n   }\n\n   @Output()\n   healthPerspectiveChange: EventEmitter<HealthPerspectiveData> = new EventEmitter<HealthPerspectiveData>();\n\n   @Output()\n   retest: EventEmitter<HealthRetestEventData> = new EventEmitter<HealthRetestEventData>();\n\n   @Output()\n   error: EventEmitter<string> = new EventEmitter<string>();\n\n   get selectedSubtest(): VsanTestData {\n      if (!this.selectedSubTestId) {\n         return null;\n      }\n      return [].concat(...this.healthTests.map(healthTest => healthTest.testData.subtests))\n            .find(subtest => subtest.testId === this.selectedSubTestId);\n   }\n\n   get isOnlineTestSelected(): boolean {\n      const selectedTest: VsanTestData = this.selectedSubtest;\n      if  (!selectedTest) {\n         return false;\n      }\n\n      const testCategory: VsanTestData = this.vsanHealthData.testsData.find(t =>\n            t.subtests && t.subtests.some(s => s.testId === selectedTest.testId));\n      if (!testCategory) {\n         return false;\n      }\n\n      return testCategory.subtests &&\n            testCategory.subtests.some(subtest => subtest.testId === VsanHealthUtil.CEIP_TEST_ID\n                  || subtest.testId === VsanHealthUtil.SUPPORT_INSIGHT_TEST_ID);\n   }\n\n   getHealthySubtests(subtests: VsanTestData[]): VsanTestData[] {\n      if (!subtests) {\n         return [];\n      }\n      return subtests.filter(subtest => !this.isUnhealthyStatus(subtest.status));\n   }\n\n   getUnhealthySubtests(subtests: VsanTestData[]): VsanTestData[] {\n      if (VsanUiUtils.isEmpty(subtests)) {\n         return [];\n      }\n      return subtests.filter(subtest => this.isUnhealthyStatus(subtest.status));\n   }\n\n   isSilentCheck = (testData: VsanTestData): boolean => {\n      if (!testData) {\n         return false;\n      }\n      // for a test category, if all of the subtests are silence, the category is marked as silence\n      if (testData.subtests) {\n         const silentItems: string[] =\n               !VsanUiUtils.isEmpty(this.selectedSilenceChecks) &&\n               this.selectedSilenceChecks.filter(check => testData.subtests.some(\n                     test => check === test.silenceTestId));\n         return (silentItems.length === testData.subtests.length);\n      }\n      return !VsanUiUtils.isEmpty(this.selectedSilenceChecks) &&\n            this.selectedSilenceChecks.some(check => check === testData.silenceTestId);\n   };\n\n   silentChange(data: HealthSilentChangeData): void {\n      if (data.isSilent) {\n         this.selectedSilenceChecks.push(this.selectedSubtest.silenceTestId);\n         this.selectedSubtest.status = VsanHealthStatus.skipped;\n         // get selected test category and resort subtests, because there is new skipped subtest\n         const selectedCategory: VsanTestData =\n               this.getSelectedCategory(this.vsanHealthData.testsData, this.selectedSubtest.testId);\n         if (selectedCategory) {\n            this.sortSubtests(selectedCategory.subtests);\n         }\n      } else {\n         this.selectedSilenceChecks.splice(this.selectedSilenceChecks.indexOf(this.selectedSubtest.silenceTestId), 1);\n         if (data.settings.runRetest) {\n            this.retest.emit(new HealthRetestEventData(data.settings.retestOnlineHealth));\n         }\n      }\n   }\n\n   navigateToHealthTest(params: HealthTestNavParams): void {\n      this.showOverviewPage = false;\n      this.selectedSubTestId = params.testId;\n      this.preselectTimestamp = params.timestamp;\n      const group: HealthTests = this.healthTests.find(test => test.testData && test.testData.subtests &&\n            test.testData.subtests.some(subtest => subtest.helpId === this.selectedSubTestId));\n      if (group) {\n         group.isCollapsed = false;\n      }\n   }\n\n   private getSelectedCategory(testCategiries: VsanTestData[], subtestId: string): VsanTestData {\n      return testCategiries.find(testCategory =>\n            testCategory.subtests.some(subtest => subtest.testId === subtestId));\n   }\n\n   private initTestGroups(healthData: VsanHealthData): void {\n      if (this.isFlat) {\n         this.healthTests = healthData.testsData.map(item => new HealthTests(item, false));\n      } else {\n         this.healthTests = healthData.testsData.map((item: VsanTestData) => {\n            this.sortSubtests(item.subtests);\n            return new HealthTests(item, item.inProgress ? true : this.getLoadedGroupCollapseState(item));\n         });\n      }\n      // once healthTests are initialized, try to get selected subtest from the persisted id. If not found reset\n      // selected test id. This may happen if the selected test is not present any more or has no historical data\n      // for the selected period.\n      // Also preselecting the first test should be done only if \"Overview\" page is not currently shown.\n      if (!this.selectedSubtest && !this.showOverviewPage) {\n         this.preselectFirstAvailableCheck();\n      }\n   }\n\n   private preselectFirstAvailableCheck(): void {\n      const firstCategoryWithTests: HealthTests =\n            this.healthTests.find(category => !VsanUiUtils.isEmpty(category.testData.subtests));\n      if (!firstCategoryWithTests) {\n         return;\n      }\n      firstCategoryWithTests.isCollapsed = false;\n      this.selectedSubTestId = firstCategoryWithTests.testData.subtests[0].testId;\n      this.changeSummaryCard(this.selectedSubTestId);\n   }\n\n   private updateTestGroups(newHealthData: VsanHealthData): void {\n      this.healthTests.forEach((currentGroup) => {\n         const updatedTest: VsanTestData = newHealthData.testsData.find(\n               test => test.testId === currentGroup.testData.testId);\n         if (updatedTest.inProgress) {\n            return; // group is still loading or has loaded in previous poll\n         }\n         // if the test is ready, update its data\n         // NOTE: the test will remain collapsed in order to avoid scroll jumping\n         currentGroup.testData = updatedTest;\n         this.sortSubtests(currentGroup.testData.subtests);\n      });\n   }\n\n   private getLoadedGroupCollapseState(testData: VsanTestData): boolean {\n      const isUnhealthy: boolean = this.isUnhealthyStatus(testData.status);\n      const isSelected: boolean = (testData.subtests.some(subTest => subTest.testId === this.selectedSubTestId));\n      return !isUnhealthy && !isSelected;\n   }\n\n   private sortSubtests(subtests: VsanTestData[]): void {\n      subtests.sort((a, b) => this.getElementPosition(a) - this.getElementPosition(b));\n   }\n\n   private getElementPosition(element: VsanTestData): number {\n      if (!element || !element.status) {\n         return this.HEALTH_STATUS_ORDER.length;\n      }\n      // put all not known statuses at the end - return index greater than the last element of the order array;\n      const result: number = this.HEALTH_STATUS_ORDER.indexOf(element.status);\n      return result < 0 ? this.HEALTH_STATUS_ORDER.length : result;\n   }\n\n   summaryCardClick(selectedSubtestId: string): void {\n      this.changeSummaryCard(selectedSubtestId);\n   }\n\n   private async changeSummaryCard(selectedSubtestId: string): Promise<void> {\n      this.showOverviewPage = false;\n      this.selectedSubTestId = selectedSubtestId;\n      this.preselectTimestamp = null;\n      if (!this.selectedSubtest) {\n         return;\n      }\n      this.selectedSubTestIdChange.emit(this.selectedSubtest.testId);\n   }\n\n   onOverviewPageSelected(): void {\n      this.selectedSubTestId = null;\n      this.showOverviewPage = true;\n   }\n\n   getIconShape(test: VsanTestData): string {\n      return VsanHealthUtil.getVsanHealthStatusIconShape(test.status);\n   }\n\n   getIconClass(test: VsanTestData): string {\n      return VsanHealthUtil.getVsanHealthStatusIconClass(test.status);\n   }\n\n   onPerspectiveSwitch(isHistoricalPerspective: boolean): void {\n      this.isHistoricalHealth = isHistoricalPerspective;\n      this._healthPerspective.isHistoricalHealthPerspective = isHistoricalPerspective;\n      this.notifyHistoricalHealthRangeChanged();\n   }\n\n   onDateRangeChange(range: DateRangeData): void {\n      this.dateRangeError = undefined;\n\n      if (!range.from || !range.to) {\n         this.dateRangeError = VsanUiUtils.getString(\"vsan.health.historical.daterange.empty\");\n         return;\n      }\n      // from before to\n      if (range.from > range.to) {\n         this.dateRangeError = VsanUiUtils.getString(\"vsan.health.historical.daterange.not.valid\");\n         return;\n      }\n      // more than 30 days back\n      const earliestAvailableTimestamp: number = VsanDateTimeUtils.getEarliestAvailableTimestamp(\n            this.lastCheckedTimestamp,\n            this.MAX_HISTORICAL_HEALTH_INTERVAL_DAYS * VsanDateTimeUtils.DAY_IN_MILLISECONDS);\n      if (range.from < earliestAvailableTimestamp) {\n         this.dateRangeError = VsanUiUtils.getString(\"vsan.health.historical.daterange.older.than.allowed\",\n               this.MAX_HISTORICAL_HEALTH_INTERVAL_DAYS);\n         return;\n      }\n\n      this._healthPerspective.dateRange = range;\n      this.notifyHistoricalHealthRangeChanged();\n   }\n\n   notifyHistoricalHealthRangeChanged(): void {\n      this.healthPerspectiveChange.emit(this._healthPerspective);\n   }\n\n   getCurrentDate(): Date {\n      return new Date();\n   }\n\n   getHealthyTestWrapperState(subtests: VsanTestData[]): ShowHideState {\n      // if all tests are healthy do not add option to hide / show\n      if (!this.getUnhealthySubtests(subtests).length) {\n         return ShowHideState.DISABLED;\n      }\n      // show healthy tests only if one of them is selected\n      return this.getHealthySubtests(subtests).some(subtest => subtest.testId === this.selectedSubTestId) ?\n            ShowHideState.SHOWN : ShowHideState.HIDDEN;\n   }\n\n   get noDataMessageType(): IllustratedMessageType {\n      return IllustratedMessageType.MISSING_DATA;\n   }\n\n   private isUnhealthyStatus(status: VsanHealthStatus): boolean {\n      return status === VsanHealthStatus.red || status === VsanHealthStatus.yellow;\n   }\n\n   isCategoryIconVisible(test: HealthTests): boolean {\n      if (!test || test.testData.inProgress) {\n         return false;\n      }\n      return test.isCollapsed && this.isUnhealthyStatus(test.testData.status);\n   }\n}\n","/* Copyright 2019-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {NgModule} from \"@angular/core\";\nimport {CommonModule} from \"@angular/common\";\nimport {ClarityModule} from \"@clr/angular\";\nimport {HealthChecksComponent} from \"./view/health-checks.component\";\nimport {HealthNavTabComponent} from \"./view/card/health-nav-tab.component\";\nimport {HealthDetailsCardModule} from \"./health-details-card.module\";\nimport {FormsModule} from \"@angular/forms\";\nimport {CommonPipeModule} from \"@pipe/common-pipe.module\";\nimport {DatetimePickerModule} from \"@component/datetime-picker/datetime-picker.module\";\nimport {CommonDirectiveModule} from \"@directive/common-directive.module\";\nimport {HealthConfigModule} from \"./config/health-config.module\";\nimport {IllustratedMessageModule} from \"@component/illustrated-message/illustrated-message.module\";\nimport {HealthOverviewComponent} from \"./view/health-overview.component\";\nimport {CommonCellsModule} from \"@component/cell/common-cells.module\";\n\n@NgModule({\n   imports: [\n      CommonModule,\n      FormsModule,\n      ClarityModule,\n      CommonPipeModule,\n      CommonDirectiveModule,\n      DatetimePickerModule,\n      HealthDetailsCardModule,\n      HealthConfigModule,\n      IllustratedMessageModule,\n      CommonCellsModule,\n   ],\n   declarations: [\n         HealthChecksComponent,\n         HealthNavTabComponent,\n         HealthOverviewComponent,\n   ],\n   exports: [\n         HealthChecksComponent,\n   ],\n})\nexport class HealthChecksModule {\n}","/* Copyright 2019-2022 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {ContentChildren, Directive, ElementRef, Input} from \"@angular/core\";\nimport {ClrButton} from \"@clr/angular\";\nimport {ButtonTitleDirective} from \"./button-title.directive\";\n\n/**\n * Attribute directive used to dynamically arrange child buttons, align some horizontally and\n * put the others into the drop-down list, this directive also add title attribute to the buttons.\n * It can only used on clr-button-group and there should be clr-button in the button group.\n * @maximumInlineActions - The maximum value of inline buttons.\n */\n@Directive({\n   selector: \"clr-button-group[vsan-button-group]\",\n})\nexport class ButtonGroupDirective {\n\n   private static readonly TOGGLE_MENU_BUTTON_SELECTOR: string = \"button.btn.dropdown-toggle\";\n   private static readonly VISIBLE_BUTTON_ELEMENTS_SELECTOR: string = \"button\";\n   private static readonly IN_MENU_BUTTON_ELEMENTS_SELECTOR: string = \"div.clr-button-group-menu > button\";\n\n   // Set the maximum value to 10 to display all buttons inline when there is enough space.\n   private _maximumInlineActions: number = 10;\n\n   @Input(\"vsan-button-group\")\n   set maximumInlineActions(value: number) {\n      if (!!value) {\n         this._maximumInlineActions = value;\n      }\n   }\n\n   private _buttonTitleDirectives: ButtonTitleDirective[] = [];\n\n   @ContentChildren(ButtonTitleDirective, {descendants: true})\n   set buttons(value: ButtonTitleDirective[]) {\n      this._buttonTitleDirectives = value;\n      this._buttonTitleDirectives.forEach(titleDirective => {\n         // Update button title when its title in directive changes.\n         titleDirective.titleChangeEvent.subscribe(() => {\n            setTimeout(this.updateButtonTitles);\n         });\n      });\n\n      // when action buttons with directive are changed (added / removed) some of them may go to the menu with\n      // additional actions. There is no other way found to handle toggle menu event, but click on the toggle button.\n      this.subscribeToggleButtonClick();\n   }\n\n   private _btns: ClrButton[];\n\n   @ContentChildren(ClrButton, {descendants: true})\n   set clrButtons(btns: ClrButton[]) {\n      this._btns = btns;\n      this.updateInMenuButtons();\n   }\n\n   constructor(private elRef: ElementRef) {\n   }\n\n   private updateInMenuButtons(): void {\n      const groupWithMenu: boolean = this._btns.length > this._maximumInlineActions;\n      this._btns.forEach((btn, index) => {\n         if (groupWithMenu) {\n            // When the number of buttons exceeds the maximum and the button overflows, place the button in the menu.\n            btn.inMenu = index >= this._maximumInlineActions - 1;\n         } else {\n            btn.inMenu = false;\n         }\n      });\n   }\n\n   private updateButtonTitles = (): void => {\n      const allButtons: HTMLButtonElement[] = this.getVisibleButtons().concat(this.getInMenuButtons());\n      if (!allButtons.length) {\n         return;\n      }\n\n      // if there is a rendered button for the directive - update its title.\n      this._buttonTitleDirectives.forEach(titleDirective => {\n         allButtons.forEach((button: HTMLElement) => {\n            if (button.getAttribute(\"name\") === titleDirective.host.name) {\n               button.title = titleDirective.title;\n            }\n         });\n      });\n   };\n\n   private subscribeToggleButtonClick(): void {\n      // If there is menu with additional buttons, find the toggle button and update button names on click.\n      setTimeout(() => {\n         const toggleButton: HTMLElement | null = this.getToggleButton();\n\n         // if there is a toggle button set function to handle the click event only once.\n         if (toggleButton && !toggleButton.onclick) {\n            toggleButton.onclick = this.updateButtonTitles;\n         }\n      });\n   }\n\n   // the buttons are visible buttons in button group, toggle menu button\n   private getVisibleButtons(): HTMLButtonElement[] {\n      return Array.from(this.elRef.nativeElement.querySelectorAll(\n            ButtonGroupDirective.VISIBLE_BUTTON_ELEMENTS_SELECTOR));\n   }\n\n   // inMenu buttons are rendered outside of the elRef, get them directly from the document\n   private getInMenuButtons(): HTMLButtonElement[] {\n      return Array.from(this.elRef.nativeElement.ownerDocument.querySelectorAll(\n            ButtonGroupDirective.IN_MENU_BUTTON_ELEMENTS_SELECTOR));\n   }\n\n   private getToggleButton(): HTMLElement | null {\n      return this.elRef.nativeElement.querySelector(ButtonGroupDirective.TOGGLE_MENU_BUTTON_SELECTOR);\n   }\n}","/* Copyright 2021-2022 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {GlobalRefreshService} from \"@service/global-refresh.service\";\nimport {IdGenerator} from \"@util/id-generator\";\nimport {PromiseBaton} from \"@util/promise/promise-baton\";\n\n/**\n * This decorator solve the race condition problem.\n * - Problem - Call single async method multiple times and we can't be sure which result will come last.\n * - Solution - It will resolve/reject only the last promise. On global refresh we cancel the ongoing promise.\n */\nexport function RaceConditionSafe(): MethodDecorator {\n   return function (targetClass: any, functionName: string, descriptor: PropertyDescriptor): void {\n      // Prototype level\n      const id: string = IdGenerator.getUniqueId();\n      const func: (...args: any[]) => Promise<any> = descriptor.value;\n      const promiseBaton: PromiseBaton<any> = new PromiseBaton();\n\n      // Instance level\n      descriptor.value = function (...args: any[]): Promise<any> {\n         addEventListeners(id, promiseBaton);\n         return promiseBaton.resolveOnly.call(promiseBaton, func.apply(this, args));\n      };\n   };\n\n   function addEventListeners(id: string, promiseBaton: PromiseBaton<any>): void {\n      GlobalRefreshService.Instance.registerRefreshHandler(id, () => promiseBaton.cancelLastOne(), null, false);\n   }\n}\n","<!-- Copyright 2021 VMware, Inc. All rights reserved. -- VMware Confidential -->\n<h4>{{\"vsan.health.overview.title\" | localized}}</h4>\n<div *ngIf=\"!isHistoricalInstancesLoading\" class=\"card\">\n   <vsan-historical-test-details *ngIf=\"isHistoricalHealth && historicalInstances?.length\"\n                                 [isOverviewCorrelationsDisplayed]=\"true\"\n                                 [instances]=\"historicalInstances\"\n                                 (onInstanceSelect)=\"instanceSelected($event)\">\n   </vsan-historical-test-details>\n   <div *ngIf=\"showOverallCounts\" class=\"overall-statuses card-block\">\n      <vsan-health-status-cell *ngIf=\"getOverallCount(overviewData?.healthyTestsIds) > 0\"\n                               [iconClass]=\"Icon.CLR_SUCCESS_ICON_CLASS\"\n                               [shape]=\"Icon.CLR_SUCCESS_STANDARD_ICON_SHAPE\"\n                               [label]=\"'vsan.health.overview.healthy.overall.label' | localized: getOverallCount(overviewData.healthyTestsIds)\">\n      </vsan-health-status-cell>\n      <vsan-health-status-cell *ngIf=\"getOverallCount(overviewData?.errorTestsIds) > 0\"\n                               [iconClass]=\"Icon.CLR_ERROR_ICON_CLASS\"\n                               [shape]=\"Icon.CLR_ERROR_STANDARD_ICON_SHAPE\"\n                               [label]=\"'vsan.health.overview.error.overall.label' | localized: getOverallCount(overviewData.errorTestsIds)\">\n      </vsan-health-status-cell>\n      <vsan-health-status-cell *ngIf=\"getOverallCount(overviewData?.warningTestsIds) > 0\"\n                               [iconClass]=\"Icon.CLR_WARN_ICON_CLASS\"\n                               [shape]=\"Icon.CLR_WARN_STANDARD_ICON_SHAPE\"\n                               [label]=\"'vsan.health.overview.warning.overall.label' | localized: getOverallCount(overviewData.warningTestsIds)\">\n      </vsan-health-status-cell>\n      <vsan-health-status-cell *ngIf=\"getOverallCount(overviewData?.infoTestsIds) > 0\"\n                               [shape]=\"Icon.CLR_INFO_STANDARD_ICON_SHAPE\"\n                               [iconClass]=\"Icon.CLR_INFO_ICON_CLASS\"\n                               [label]=\"'vsan.health.overview.info.overall.label' | localized: getOverallCount(overviewData.infoTestsIds)\">\n      </vsan-health-status-cell>\n      <vsan-health-status-cell *ngIf=\"selectedSilenceChecks?.length > 0\"\n                               [shape]=\"Icon.SILENT_CHECK\"\n                               [label]=\"'vsan.health.overview.silenced.overall.label' | localized: selectedSilenceChecks?.length\">\n      </vsan-health-status-cell>\n      <div class=\"tooltip-container\" *ngIf=\"getOverallCount(overviewData?.skippedTestsIds) > 0\">\n         <vsan-health-status-cell [shape]=\"Icon.SKIPPED_CHECK\"\n                                  [label]=\"'vsan.health.overview.skipped.overall.label' | localized: getOverallCount(overviewData.skippedTestsIds)\">\n         </vsan-health-status-cell>\n         <clr-signpost [vsan-signpost-title]=\"'vsan.health.overview.skipped.overall.signpost.label' | localized\">\n            <clr-signpost-content *clrIfOpen clrPosition=\"bottom-middle\">\n               {{\"vsan.health.overview.skipped.overall.description\" | localized}}\n            </clr-signpost-content>\n         </clr-signpost>\n      </div>\n   </div>\n</div>\n\n<div *ngIf=\"isHistoricalInstancesLoading\" class=\"spinner central-spinner\"></div>\n\n<!-- loading indicator for loading health tests correlations -->\n<div *ngIf=\"isHistoricalCorrelationsLoading\" class=\"loading-wrapper\">\n   <div class=\"spinner\"></div>\n</div>\n\n<vsan-illustrated-message *ngIf=\"isHistoricalHealth && !isTimestampSelected\"\n                          [type]=\"IllustratedMessageType.MISSING_SELECTION\"\n                          [message]=\"'vsan.health.historical.details.select.instance' | localized\">\n</vsan-illustrated-message>\n\n<ng-container *ngIf=\"showIssues\">\n   <vsan-illustrated-message *ngIf=\"!overviewData?.coreIssues?.length && !overviewData?.otherIssues?.length\"\n                             [type]=\"IllustratedMessageType.MISSING_DATA\"\n                             [message]=\"noIssuesMessage\">\n   </vsan-illustrated-message>\n\n   <ng-container *ngIf=\"overviewData?.coreIssues?.length\">\n      <div *ngFor=\"let coreIssue of overviewData?.coreIssues\" class=\"card\">\n         <div class=\"core-issue card-block\">\n            <div class=\"core-issue-details\">\n               <h4>{{\"vsan.health.overview.core.issue.label\" | localized}}</h4>\n               <ng-container *ngTemplateOutlet=\"testRow; context: {test: coreIssue}\"></ng-container>\n            </div>\n            <div class=\"core-issue-children\">\n               <ng-container *ngIf=\"coreIssue.relatedHealthTests.length\">\n                  <span class=\"bold\">{{\"vsan.health.overview.possible.impact.label\" | localized}}</span>\n                  <clr-tree>\n                     <clr-tree-node [clrExpanded]=\"true\"\n                                    *clrRecursiveFor=\"let node of coreIssue.relatedHealthTests; getChildren: getChildren\">\n                        <ng-container *ngTemplateOutlet=\"testRow; context: {test: node}\"></ng-container>\n                     </clr-tree-node>\n                  </clr-tree>\n               </ng-container>\n            </div>\n         </div>\n      </div>\n   </ng-container>\n\n   <div *ngIf=\"overviewData?.otherIssues?.length\" class=\"card\">\n      <div class=\"other-issues card-block\">\n         <h4>{{otherIssuesTitle}}</h4>\n         <div class=\"other-issues-details\">\n            <ng-container *ngFor=\"let otherIssue of overviewData.otherIssues\">\n               <ng-container *ngTemplateOutlet=\"testRow; context: {test: otherIssue}\"></ng-container>\n            </ng-container>\n         </div>\n      </div>\n   </div>\n</ng-container>\n\n<ng-template #testRow let-test=\"test\">\n   <div class=\"icon-name-container\">\n      <clr-icon class=\"is-solid\" [ngClass]=\"getStatusIconClass(test)\"\n                [attr.shape]=\"getStatusIconShape(test)\">\n      </clr-icon>\n      <a [id]=\"test.testId\" class=\"pointer\" (click)=\"onTestSelected(test.testId)\">{{test.testName}}</a>\n   </div>\n</ng-template>\n"]}