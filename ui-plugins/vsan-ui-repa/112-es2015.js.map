{"version":3,"sources":["./src/app/vsan/common/directive/clr-button-group/clr-button-base.directive.ts","./src/app/vsan/cluster/configure/wizard/ready-to-complete-page.component.ts","./src/app/vsan/common/service/flow/error-handler.decorator.ts","./src/app/vsan/cluster/configure/wizard/claim-disks-page.html","./src/app/vsan/cluster/configure/wizard/vsan-max-page.component.ts","./src/app/vsan/cluster/configure/wizard/config-type-page.html","./src/app/vsan/common/pipe/virtual-objects/health-state-label.pipe.ts","./src/app/vsan/cluster/configure/wizard/configure-wizard.component.ts","./src/app/vsan/common/util/vsan-dialog-util.ts","./src/app/vsan/cluster/configure/wizard/services-page.component.ts","./src/app/vsan/cluster/configure/wizard/ready-to-complete-page.html","./src/app/vsan/cluster/configure/wizard/claim-disks-page.component.ts","./src/app/vsan/cluster/configure/wizard/configure-wizard.module.ts","./src/app/vsan/cluster/configure/wizard/services-page.html","./src/app/vsan/common/directive/external-link/external-link.directive.ts","./src/app/vsan/cluster/configure/wizard/enable-services.html","./src/app/vsan/cluster/configure/wizard/enable-services.component.ts","./src/app/vsan/cluster/configure/wizard/config-type-page.component.ts","./src/app/vsan/cluster/configure/wizard/vsan-max-page.html","./src/app/vsan/cluster/configure/wizard/configure-wizard.html"],"names":[],"mappings":";;;;;;;;;;AAGA;AAAA;AAAA;;;GAGG;AACI,MAAe,sBAAsB;IAEzC,YAAoB,SAAoB;QAApB,cAAS,GAAT,SAAS,CAAW;QACrC,IAAI,CAAC,SAAS,EAAE;YACb,OAAO;SACT;QACD,8GAA8G;QAC9G,2GAA2G;QAC3G,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE;YAClB,SAAS,CAAC,IAAI,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE,CAAC;SAC5C;QAED,MAAM,eAAe,GAAqB,SAA6B,CAAC;QACxE,eAAe,CAAC,UAAU,GAAG,eAAe,CAAC,UAAU,IAAI,EAAE,CAAC;QAC9D,eAAe,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACzC,CAAC;CAMH;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC1BqD;AACoC;AAE9C;AAG+B;AACQ;AACC;AAGc;AACzB;AACrB;AACS;AACF;AAC4B;;IAWvF,IAAa,wBAAwB,GAArC,MAAa,wBAAwB;QAyDlC,YAAoB,sBAA8C;YAA9C,2BAAsB,GAAtB,sBAAsB,CAAwB;YAvDlE,oBAAe,GAA2B,6EAAe,CAAC;YAC1D,gBAAW,GAAuB,mEAAW,CAAC;YAsL9C,aAAQ,GAAG,GAAa,EAAE;gBACvB,qEAAqE;gBACrE,IAAI,IAAI,CAAC,iBAAiB,EAAE;oBACzB,IAAI,CAAC,cAAc,CAAC,sBAAsB;wBACpC,mGAA0B,CAAC,OAAO,CAAC,MAAM,CACnC,IAAI,CAAC,WAAW,EAChB,IAAI,CAAC,sBAAsB,EAC3B,IAAI,CAAC,gBAAgB,EACrB,IAAI,CAAC,aAAa,EAClB,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,gBAAgB,CAAC,EACpC,IAAI,CAAC,aAAa,EAClB,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,gBAAgB,CAAC,EACpC,IAAI,CAAC,CAAC;iBACpB;gBACD,sBAAsB;gBACtB,OAAO,IAAI,CAAC;YACf,CAAC,CAAC;QAhJmE,CAAC;QAEtE,IAAI,eAAe;YAChB,QAAQ,IAAI,CAAC,UAAU,EAAE;gBACtB,KAAK,6EAAe,CAAC,mBAAmB,CAAC;gBACzC,KAAK,6EAAe,CAAC,iBAAiB;oBACnC,OAAO,2DAAW,CAAC,SAAS,CAAC,kDAAkD,CAAC,CAAC;gBACpF,KAAK,6EAAe,CAAC,qBAAqB;oBACvC,OAAO,2DAAW,CAAC,SAAS,CAAC,iDAAiD,CAAC,CAAC;gBACnF,KAAK,6EAAe,CAAC,iBAAiB;oBACnC,OAAO,2DAAW,CAAC,SAAS,CAAC,sDAAsD,CAAC,CAAC;gBACxF,KAAK,6EAAe,CAAC,YAAY;oBAC9B,OAAO,2DAAW,CAAC,SAAS,CAAC,4CAA4C,CAAC,CAAC;gBAC9E;oBACG,MAAM,IAAI,KAAK,CAAC,oCAAoC,GAAG,IAAI,CAAC,UAAU,CAAC,CAAC;aAC7E;QACJ,CAAC;QAED,IAAI,qBAAqB;YACtB,OAAO,IAAI,CAAC,sBAAsB,CAAC,OAAO,CAAC,IAAI,CAAC,cAAc,CAAC,qBAAqB,CAAC,CAAC;QACzF,CAAC;QAED,IAAI,aAAa;YACd,OAAO,IAAI,CAAC,uBAAuB,CAAC,IAAI,CAAC,cAAc,CAAC,gBAAgB,CAAC,CAAC;QAC7E,CAAC;QAED,IAAI,2BAA2B;YAC5B,OAAO,IAAI,CAAC,uBAAuB,CAAC,IAAI,CAAC,cAAc,CAAC,sBAAsB,CAAC,CAAC;QACnF,CAAC;QAED,IAAI,8BAA8B;YAC/B,OAAO,IAAI,CAAC,uBAAuB,CAAC,IAAI,CAAC,cAAc,CAAC,6BAA6B,CAAC,CAAC;QAC1F,CAAC;QAED,IAAI,wBAAwB;YACzB,OAAO,IAAI,CAAC,uBAAuB,CAAC,IAAI,CAAC,cAAc,CAAC,mBAAmB,CAAC,CAAC;QAChF,CAAC;QAED,IAAI,6BAA6B;YAC7B,OAAO,IAAI,CAAC,uBAAuB,CAAC,IAAI,CAAC,cAAc,CAAC,eAAe;gBACjE,IAAI,CAAC,cAAc,CAAC,eAAe,CAAC,0BAA0B,CAAC,CAAC;QAC1E,CAAC;QAED,IAAI,SAAS;YACV,OAAO,IAAI,CAAC,uBAAuB,CAAC,IAAI,CAAC,cAAc,CAAC,UAAU,CAAC,CAAC;QACvE,CAAC;QAED,uBAAuB,CAAC,QAAiB;YACtC,OAAO,2DAAW,CAAC,uBAAuB,CAAC,QAAQ,CAAC,CAAC;QACxD,CAAC;QAED,qBAAqB,CAAC,WAAwB;YAC3C,IAAI,CAAC,IAAI,CAAC,uBAAuB,EAAE;gBAChC,OAAO,KAAK,CAAC;aACf;YAED,OAAO,IAAI,CAAC,uBAAuB,CAAC,qBAAqB,CAAC,WAAW,CAAC,CAAC;QAC1E,CAAC;QAED;;WAEG;QACH,IAAI,mBAAmB;YACpB,qFAAqF;YACrF,IAAI,IAAI,CAAC,cAAc,CAAC,gBAAgB,IAAI,IAAI,CAAC,WAAW,EAAE;gBAC3D,OAAO,CAAC,mEAAW,CAAC,UAAU,CAAC,CAAC;aAClC;iBAAM,IAAI,CAAC,IAAI,CAAC,uBAAuB,EAAE;gBACvC,OAAO,EAAE,CAAC;aACZ;YAED,OAAO,2EAAgB,CAAC,6BAA6B,CAAC,MAAM,CACtD,WAAW,CAAC,EAAE,CAAC,IAAI,CAAC,uBAAuB,CAAC,qBAAqB,CAAC,WAAW,CAAC,CAAC,CAAC;QACzF,CAAC;QAED,oBAAoB,CAAC,WAAwB;;YAC1C,IAAI,WAAW,KAAK,mEAAW,CAAC,UAAU,IAAI,IAAI,CAAC,WAAW,EAAE;gBAC7D,OAAO,2DAAW,CAAC,cAAc,CAAC,CAAD,KAAC,IAAI,CAAC,gBAAgB,0CAAE,oBAAoB,CAAC,CAAC;aACjF;iBAAM,IAAI,CAAC,IAAI,CAAC,uBAAuB,EAAE;gBACvC,OAAO,2DAAW,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC;aACvC;iBAAM,IAAI,IAAI,CAAC,uBAAuB,CAAC,qBAAqB,CAAC,WAAW,CAAC,KAAK,CAAC,EAAE;gBAC/E,OAAO,2DAAW,CAAC,cAAc,CAAC,IAAI,CAAC,uBAAuB,CAAC,kBAAkB,CAAC,WAAW,CAAC,CAAC,CAAC;aAClG;iBAAM;gBACJ,OAAO,2DAAW,CAAC,SAAS,CACtB,0DAA0D,EAC1D,2DAAW,CAAC,cAAc,CAAC,IAAI,CAAC,uBAAuB,CAAC,kBAAkB,CAAC,WAAW,CAAC,CAAC,EACxF,2DAAW,CAAC,cAAc,CAAC,IAAI,CAAC,uBAAuB,CAAC,qBAAqB,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;aACrG;QACJ,CAAC;QAED,wBAAwB;;YACrB,IAAI,IAAI,CAAC,WAAW,EAAE;gBACnB,OAAO,2DAAW,CAAC,SAAS,CAAC,oEAAoE,QAC3F,IAAI,CAAC,gBAAgB,0CAAE,UAAU,EACjC,2DAAW,CAAC,SAAS,CAAC,yEAAyE,CAAC,CAAC,CAAC;aAC1G;YAED,OAAO,2DAAW,CAAC,SAAS,CAAC,oEAAoE,EAC3F,IAAI,CAAC,uBAAuB,CAAC,mBAAmB,CAAC,mEAAW,CAAC,UAAU,CAAC,EACxE,2DAAW,CAAC,SAAS,CAAC,2EAA2E,CAAC,CAAC,CAAC;QAC7G,CAAC;QAED,mBAAmB,CAAC,WAAwB;YACzC,QAAQ,WAAW,EAAE;gBAClB,KAAK,mEAAW,CAAC,eAAe;oBAC7B,OAAO,2DAAW,CAAC,SAAS,CAAC,8CAA8C,CAAC,CAAC;gBAChF,KAAK,mEAAW,CAAC,aAAa;oBAC3B,OAAO,2DAAW,CAAC,SAAS,CAAC,2CAA2C,CAAC,CAAC;gBAC7E,KAAK,mEAAW,CAAC,UAAU;oBACxB,OAAO,2DAAW,CAAC,SAAS,CAAC,oEAAoE,CAAC,CAAC;gBACtG;oBACG,OAAO,2DAAW,CAAC,SAAS,CAAC,yCAAyC,EAChE,2EAAgB,CAAC,mBAAmB,CAAC,WAAW,CAAC,CAAC,CAAC;aAC9D;QACJ,CAAC;QAED,IAAI,wBAAwB;YACzB,IAAI,IAAI,CAAC,UAAU,KAAK,6EAAe,CAAC,qBAAqB,EAAE;gBAC5D,OAAO,2DAAW,CAAC,SAAS,CAAC,0DAA0D,CAAC,CAAC;aAC3F;iBAAM,IAAI,IAAI,CAAC,UAAU,KAAK,6EAAe,CAAC,iBAAiB,EAAE;gBAC/D,OAAO,2DAAW,CAAC,SAAS,CAAC,+DAA+D,CAAC,CAAC;aAChG;iBAAM,IAAI,IAAI,CAAC,UAAU,KAAK,6EAAe,CAAC,mBAAmB;mBACzD,2DAAW,CAAC,OAAO,CAAC,IAAI,CAAC,gBAAgB,CAAC,EAAE;gBAClD,OAAO,2DAAW,CAAC,SAAS,CAAC,0DAA0D,CAAC,CAAC;aAC3F;iBAAM;gBACJ,OAAO,2DAAW,CAAC,SAAS,CAAC,kDAAkD,CAAC,CAAC;aACnF;QACJ,CAAC;QAoBD,IAAI,iBAAiB;YAClB,OAAO,IAAI,CAAC,UAAU,KAAK,6EAAe,CAAC,qBAAqB;mBACvD,IAAI,CAAC,UAAU,KAAK,6EAAe,CAAC,iBAAiB,CAAC;QAClE,CAAC;QAEO,QAAQ,CAAC,gBAAoC;YAClD,MAAM,MAAM,GAAoB,EAAE,CAAC;YAEnC,KAAK,MAAM,YAAY,IAAI,gBAAgB,EAAE;gBAC1C,IAAI,YAAY,CAAC,MAAM,EAAE;oBACtB,MAAM,CAAC,IAAI,CAAC,qEAAa,CAAC,OAAO,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC,CAAC;iBACvD;qBAAM;oBACJ,KAAK,MAAM,IAAI,IAAI,YAAY,CAAC,QAAQ,EAAE;wBACvC,MAAM,CAAC,IAAI,CAAC,qEAAa,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;qBAC/C;iBACH;aACH;YACD,OAAO,MAAM,CAAC;QACjB,CAAC;KACH;IAvNE;QAFC,qFAAa,EAAE;QACf,sFAAc,EAAE;;oEACc;IAG/B;QADC,qFAAa,EAAE;;gEACY;IAG5B;QADC,qFAAa,EAAE;;sEACqB;IAGrC;QADC,qFAAa,EAAE;;2EAC0B;IAG1C;QADC,qFAAa,EAAE;;2EACe;IAG/B;QADC,qFAAa,CAAC,6EAAa,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;gFACpB,iHAAuB;6EAAC;IAGjD;QADC,qFAAa,CAAC,6EAAa,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;gFAC3B,uGAAoB;sEAAC;IAGvC;QADC,qFAAa,CAAC,6EAAa,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;;iEACxB;IAGrB;QADC,qFAAa,CAAC,6EAAa,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;;sEAClB;IAG3B;QADC,qFAAa,CAAC,6EAAa,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;;mEACvB;IAGtB;QADC,qFAAa,CAAC,6EAAa,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;;sEACR;IAGrC;QADC,qFAAa,CAAC,6EAAa,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;;mEACvB;IAGtB;QADC,qFAAa,CAAC,6EAAa,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;;sEACR;IAGrC;QADC,qFAAa,CAAC,6EAAa,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;;qEACrB;IAGxB;QADC,qFAAa,CAAC,6EAAa,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;gFAChC,qEAAa;iEAAC;IAG3B;QADC,qFAAa,CAAC,6EAAa,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;;4EACL;IAGxC;QADC,qFAAa,CAAC,6EAAa,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;;sEAClB;IAvDjB,wBAAwB;QATpC,kFAAU,CACL,2DAAW,CAAC,SAAS,CAAC,qDAAqD,CAAC,EAC5E,IAAI,EACJ,CAAC,0FAAsB,EAAE,kGAA0B,CAAC,CACzD;OAKY,wBAAwB,CA8NpC;;;AA9NoC;;;;;;;;;;;;;;AC7BrC;AAAA;AAAA;AAAA,6EAA6E;AAEF;AAE3E;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAmCG;AACI,SAAS,YAAY,CAAC,KAA8B;IACxD,KAAK,GAAG,KAAK,IAAI,EAAE,CAAC;IACpB,OAAO,CAAC,WAAgB,EAAE,YAAoB,EAAE,UAA8B,EAAQ,EAAE;QACrF,CAAC,IAAI,0FAAkB,CAAC,WAAW,EAAE,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,YAAY,GAAG,UAAU,CAAC,KAAK,CAAC;IACrF,CAAC,CAAC;AACL,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;mECvCE;YAAA;YAAA,YAE+E;YAAxD;;gCAAuD;;YAF9E;QAAA,8hBAE+E,mFAC/E,mDAFuB,mBAAuC,oBAD9D,YAE+E,EADxD,SAAuC;AAAA;;mEANjE,wHAAsD,kFACnD;YAAA;YAAA,YAEoE;YAF5C;;gCAA6B;;YAE7B;;gCAA2C;;YAFnE;QAAA,okBAEoE,mFACpE,MAAyB,6EACzB,6YAE+E,IACvD,0EAC3B,mDAR2B,mBAA6B,cAC7B,mBAAyC,qBADjE,YAEoE,EAF5C,SAA6B,EAC7B,SAAyC,GAG1C,mBAAmB,cAA1C,YAE+E,EAFxD,SAAmB;AAAA;;mEANsC,0EACnF,6YAAsD,IASvC,0EACf,MAAqG,0EACrG;YAAA;YAAA,YAMqF;YAFnE;;gCAAwC;;YACxC;;gCAAyC;;YACzC;;gCAAkE;;YANpF;QAAA,2oBAMqF,GANnE,mEAAoC,KAAtD,g4BAMqF,gFACrF,mDAlBc,mBAAuC,kCAArD,YAAsD,EAAxC,SAAuC,GAWnC,iCAAoC,eAAtD,YAMqF,EANnE,SAAoC,GACpC,qBAAsB,EACtB,mBAAiC,iBACjC,mBAAuC,oBAHzD,YAMqF,EALnE,SAAsB,EACtB,SAAiC,EACjC,SAAuC;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACbiC;AAC9C;AACmB;AACT;AACiB;AACI;AACR;AACU;AACvB;AAGK;AACyC;AAC9C;;IAYtD,IAAa,WAAW,GAAxB,MAAa,WAAW;QA2BrB,YAAoB,aAAsC;YAAtC,kBAAa,GAAb,aAAa,CAAyB;YAJ1D,qBAAgB,GAA4B,8EAAgB,CAAC;YAC7D,2BAAsB,GAAkC,oHAAsB,CAAC;YAC/E,cAAS,GAAqB,2EAAS,CAAC;QAGxC,CAAC;QAEK,QAAQ;;gBACV,IAAI,CAAC,YAAyB,CAAC,oBAAoB,GAAG,IAAI,CAAC;gBAC5D,MAAM,IAAI,CAAC,wBAAwB,EAAE,CAAC;gBACrC,IAAI,CAAC,YAAyB,CAAC,oBAAoB,GAAG,KAAK,CAAC;YAChE,CAAC;SAAA;QAED,IAAI,YAAY;;YACb,IAAI,IAAI,CAAC,mBAAmB,CAAC,MAAM,KAAK,8EAAgB,CAAC,GAAG,EAAE;gBAC3D,OAAO,2DAAW,CAAC,SAAS,CAAC,mEAAmE,CAAC,CAAC;aACpG;YAED,OAAO,CAAC,IAAI,CAAC,iBAAiB,IAAI,WAAI,CAAC,mBAAmB,0CAAE,MAAM,MAAK,8EAAgB,CAAC,KAAK;gBACvF,CAAC,CAAC,2DAAW,CAAC,SAAS,CAAC,iEAAiE,CAAC;gBAC1F,CAAC,CAAC,IAAI,CAAC;QAChB,CAAC;QAMa,wBAAwB;;;gBACnC,IAAI,CAAC,mBAAmB,GAAG,MAAM,IAAI,CAAC,aAAa,CAAC,sBAAsB,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;gBAC5F,qEAAqE;gBACrE,IAAI,CAAC,iBAAiB,GAAG,WAAI,CAAC,mBAAmB,0CAAE,MAAM,MAAK,8EAAgB,CAAC,KAAK,CAAC;gBACrF,2BAA2B;gBAC3B,IAAI,CAAC,2DAAW,CAAC,OAAO,CAAC,CAAD,KAAC,IAAI,CAAC,mBAAmB,0CAAE,cAAc,CAAC,EAAE;oBACjE,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,mBAAmB,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC;iBAC1E;;SACH;QAED,YAAY,CAAC,IAAgD;YAC1D,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC;QAC7D,CAAC;QAED,YAAY,CAAC,MAAwB;YAClC,OAAO,sEAAc,CAAC,4BAA4B,CAAC,MAAM,CAAC,CAAC;QAC9D,CAAC;QAED,YAAY,CAAC,MAAwB;YAClC,OAAO,sEAAc,CAAC,4BAA4B,CAAC,MAAM,CAAC,CAAC;QAC9D,CAAC;KACH;IApEE;QADC,qFAAa,EAAE;gFACJ,qEAAa;mDAAC;IAG1B;QADC,qFAAa,EAAE;;qDACW;IAK3B;QADC,sFAAc,EAAE;;0DACU;IAG3B;QADC,kGAAgB,EAAE;;gDACF;IAGjB;QADC,0FAAY,EAAE;;qDACM;IAiCrB;QAJC,6EAAM,CAAC;YACL,SAAS,EAAE,6CAA6C;YACxD,aAAa,EAAE,sFAAa,CAAC,UAAU;SACzC,CAAC;;;;+DASD;IA1DS,WAAW;QARvB,kFAAU,CACL,2DAAW,CAAC,SAAS,CAAC,6CAA6C,CAAC,EACpE,EAAE,CACP;OAKY,WAAW,CAuEvB;;;AAvEuB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oGCkElB,uHAA6E,6cAE7E;;mEAlBN,6+DAAuF,iFACpF,8vBAAmB,oFAChB;YAAA;YAAA;YAAA;;;;;;;;;;;;;;;;;;;;;;;;;;gCAOsC;;YAF/B;;gCAAwB;;YAExB;;gCAA8B;;YAPrC;QAAA,0xEAOsC,oFACtC,0mBAA0B,gKAE1B,IAAQ,6EACX,MAAoB,6EACpB,ypBAAwC,iFACrC,2HAAK,8IAAyF,IAAM,6EACpG,2YAA6E,IAEvE,0EACT,MAAqB,0EACxB,mDAnBG,aAAmB,GAGT,6BAAiB,EAIjB,oBAAsC,+BAN7C,aAOsC,EAL/B,UAAiB,EAIjB,UAAsC,GAJtC,6BAAiB,EAEjB,qBAA4E,iEAC5E,oBAAwB,aAL/B,aAOsC,EAL/B,UAAiB,EAEjB,UAA4E,EAC5E,UAAwB,GALxB,+BAAiB,EAAxB,aAOsC,EAP/B,UAAiB,GAQjB,+BAAkB,EAAzB,aAA0B,EAAnB,UAAkB,GAMpB,qBAAuE,iEAA5E,aAA6E,EAAxE,UAAuE,2BAhBlF,saAAuF,GACpF,8CAAmB,GAChB,szBAOsC,GACtC,8GAA0B,mQAE1B,GAEH,4IAAwC,GAChC,sQAAyF;AAAA;;8MA5FjB,0EACnF,8+DAAqB,iFAClB,6vBAAmB,oFAChB;YAAA;YAAA;YAAA;;;;;;;;;;;;;;;;;;;;;;;;;;gCAOe;;YAHR;;gCAAwB;;YAExB;;gCAA8B;;YANrC;QAAA,0vEAOe,oFACf,+oBAC+B,gKAE/B,IAAQ,6EACX,MAAoB,6EACpB,wpBAAwC,uJAExC,IAAqB,0EACxB,MAAsB,4EAEtB,k/DAAqB,iFAClB,8vBAAmB,oFAChB;YAAA;YAAA;YAAA;;;;;;;;;;;;;;;;;;;;;;;;;;gCAMsC;;YAF/B;;gCAAwB;;YAExB;;gCAA8B;;YANrC;QAAA,2vEAMsC,oFACtC,yqBAC2C,gKAE3C,IAAQ,6EACX,MAAoB,6EACpB,ypBAAwC,uJAExC,IAAqB,0EACxB,MAAsB,4EAEtB,q/DAAqB,iFAClB,8vBAAmB,oFAChB;YAAA;YAAA;YAAA;;;;;;;;;;;;;;;;;;;;;;;;;;gCAOsC;;YAF/B;;gCAAwB;;YAExB;;gCAA8B;;YAPrC;QAAA,6vEAOsC,oFACtC,8mBAA4B,kKAE5B,IAAQ,6EACX,MAAoB,6EACpB,2pBAAwC,yJAExC,IAAqB,0EACxB,MAAsB,4EAEtB,u/DAAqB,iFAClB,gwBAAmB,oFAChB;YAAA;YAAA;YAAA;;;;;;;;;;;;;;;;;;;;;;;;;;gCAMsC;;YAF/B;;gCAAwB;;YAExB;;gCAA8B;;YANrC;QAAA,gwEAMsC,oFACtC,8mBAA4B,kKAE5B,IAAQ,6EACX,MAAoB,6EACpB,2pBAAwC,yJAExC,IAAqB,0EACxB,MAAsB,4EAEtB,+YAAuF,IAoBjE,0EACtB,mDAhGG,aAAmB,GAGT,6BAAiB,EAGjB,oBAA6C,sCALpD,aAOe,EALR,UAAiB,EAGjB,UAA6C,GAH7C,6BAAiB,EAEjB,oBAAwB,aAJ/B,aAOe,EALR,UAAiB,EAEjB,UAAwB,GAJxB,oCAAsB,EAA7B,aAOe,EAPR,UAAsB,GAStB,oCAAuB,EAD9B,aAC+B,EAAxB,UAAuB,GAUjC,aAAmB,GAGT,6BAAiB,EAGjB,oBAA2C,oCALlD,aAMsC,EAJ/B,UAAiB,EAGjB,UAA2C,GAH3C,6BAAiB,EAEjB,oBAAwB,aAJ/B,aAMsC,EAJ/B,UAAiB,EAEjB,UAAwB,GAJxB,gDAAkC,EAAzC,aAMsC,EAN/B,UAAkC,GAQlC,gDAAmC,EAD1C,aAC2C,EAApC,UAAmC,GAU7C,aAAmB,GAGT,6BAAiB,EAIjB,oBAA+C,wCANtD,aAOsC,EAL/B,UAAiB,EAIjB,UAA+C,GAJ/C,6BAAiB,EAGjB,oBAAwB,aAL/B,aAOsC,EAL/B,UAAiB,EAGjB,UAAwB,GALxB,iCAAmB,EAA1B,cAOsC,EAP/B,UAAmB,GAQnB,iCAAoB,EAA3B,cAA4B,EAArB,UAAoB,GAU9B,cAAmB,GAGT,6BAAiB,EAGjB,oBAA2C,oCALlD,cAMsC,EAJ/B,UAAiB,EAGjB,UAA2C,GAH3C,6BAAiB,EAEjB,oBAAwB,aAJ/B,cAMsC,EAJ/B,UAAiB,EAEjB,UAAwB,GAJxB,iCAAmB,EAA1B,cAMsC,EAN/B,UAAmB,GAOnB,iCAAoB,EAA3B,cAA4B,EAArB,UAAoB,GASZ,oBAAiE,4DAAtF,cAAuF,EAAlE,UAAiE,2BA5EtF,saAAqB,GAClB,8CAAmB,GAChB,szBAOe,GACf,8GAC+B,2PAE/B,GAEH,4IAAwC,iQAExC,GAGH,mbAAqB,GAClB,gDAAmB,GAChB,g0BAMsC,GACtC,8GAC2C,yPAE3C,GAEH,4IAAwC,+PAExC,GAGH,mbAAqB,GAClB,gDAAmB,GAChB,w0BAOsC,GACtC,gHAA4B,4PAE5B,GAEH,8IAAwC,kQAExC,GAGH,wbAAqB,GAClB,iDAAmB,GAChB,y0BAMsC,GACtC,gHAA4B,kQAE5B,GAEH,8IAAwC,wQAExC;AAAA;;;;;;;;;;;;;;;;;ACxEH;AAAA;AAAA;AAAuE;AAKhE,MAAM,iCAAiC;IAC3C,SAAS,CAAC,KAA+B;QACtC,OAAO,qEAAc,CAAC,6BAA6B,CAAC,KAAK,CAAC,CAAC;IAC9D,CAAC;CACH;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACP+D;AACiD;AACX;AACa;AACf;AACvB;AACmB;AACnC;AACyB;AACG;AAEnC;AACiD;AAEnE;AACQ;AACY;AACI;AACA;AACgB;AACrB;AACD;AAM/C;UAAM,wBAAwB;QAclC,YAAoB,WAA8B,EACpC,iBAA2C,EAC3C,iBAAoC;YAF9B,gBAAW,GAAX,WAAW,CAAmB;YACpC,sBAAiB,GAAjB,iBAAiB,CAA0B;YAC3C,sBAAiB,GAAjB,iBAAiB,CAAmB;YARzC,aAAQ,GAAU,CAAC,4FAAuB,EAAE,+GAAgC,EAAE,qGAA2B,CAAC,CAAC;YAgC5G,qBAAgB,GAAG,CAAC,UAA4B,EAAE,EAAE;gBACzD,MAAM,WAAW,GAAW,UAAU,CAAC,GAAG,CAAC,yGAAsB,CAAC,IAAI,CAAC,CAAC;gBACxE,IAAI,SAAS,GAAW,UAAU,CAAC,GAAG,CAAC,yGAAsB,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;gBAC3E,IAAI,CAAC,SAAS,EAAE;oBACb,SAAS,GAAG,CAAC,CAAC;iBAChB;gBACD,IAAI,CAAC,OAAO,GAAG;oBACZ,KAAK,EAAE,IAAI,CAAC,UAAU;oBACtB,UAAU,EAAE,IAAI,CAAC,UAAU;oBAC3B,WAAW,EAAE,WAAW;oBACxB,UAAU,EAAE,wBAAwB,CAAC,mBAAmB;oBACxD,sBAAsB,EAAE,IAAI;oBAC5B,cAAc,EAAE,SAAS;oBACzB,iBAAiB,EAAE,IAAI,CAAC,iBAAiB;oBACzC,iBAAiB,EAAE,KAAK;iBAC1B,CAAC;YACL,CAAC,CAAC;YAEM,0BAAqB,GAAG,CAAC,UAA2B,EACtD,sBAA+B,EAC/B,wBAAiC,EACjC,iBAA0B,EAAW,EAAE;gBAC1C,OAAO,wEAAe,CAAC,uBAAuB,CACxC,UAAU,EAAE,sBAAsB,EAAE,wBAAwB,EAAE,iBAAiB,CAAC,CAAC;YAC1F,CAAC,CAAC;YAEO,UAAK,GAAc;gBACzB,IAAI,+EAAO,CAAC,CAAC,2EAAc,CAAC,CAAC;gBAC7B,IAAI,+EAAO,CAAC,CAAC,qEAAW,CAAC,EACnB,CAAC,iBAAoC,EAAE,UAA2B,EAAE,EAAE;oBACnE,OAAO,UAAU,KAAK,4EAAe,CAAC,YAAY;4BACzC,iBAAiB,aAAjB,iBAAiB,uBAAjB,iBAAiB,CAAE,qBAAqB,CAAC,4BAA4B,EAAC;gBAClF,CAAC,CAAC;gBACR,IAAI,+EAAO,CAAC,CAAC,sEAAY,CAAC;gBACpB;;;mBAGG;gBACH,CAAC,iBAAoC,EAAE,UAA2B,EAAE,EAAE;oBACnE,OAAO,iBAAiB;2BACf,CAAC,CAAC,UAAU,KAAK,4EAAe,CAAC,YAAY,CAAC;2BAC9C,CAAC,iBAAiB,CAAC,qBAAqB,CAAC,qBAAqB;+BACxD,iBAAiB,CAAC,qBAAqB,CAAC,0BAA0B;+BAClE,iBAAiB,CAAC,qBAAqB,CAAC,sCAAsC;+BAC9E,iBAAiB,CAAC,qBAAqB,CAAC,iCAAiC;+BACzE,iBAAiB,CAAC,qBAAqB,CAAC,eAAe,CAAC,CAAC;gBAC3E,CAAC,CAAC;gBACR,IAAI,+EAAO,CAAC,CAAC,2EAAc,CAAC,EACtB,CAAC,UAA2B,EAAE,EAAE,CAAC,CAAC,CAAC,UAAU,KAAK,4EAAe,CAAC,YAAY,CAAC,CAAC;gBACtF,IAAI,+EAAO,CAAC,CAAC,kIAA0B,CAAC,EAClC,CAAC,UAA2B,EAAE,EAAE;oBAC7B,OAAO,UAAU,KAAK,4EAAe,CAAC,iBAAiB,CAAC;gBAC3D,CAAC,CAAC;gBACR,IAAI,+EAAO,CAAC,CAAC,mHAAwB,CAAC,EAChC,CAAC,UAA2B,EAAE,EAAE,CAAC,UAAU,KAAK,4EAAe,CAAC,qBAAqB,CAAC;gBAC5F,IAAI,+EAAO,CAAC,CAAC,qHAAyB,EAAE,mHAAwB,CAAC,EAC3D,CAAC,UAA2B,EAAE,EAAE,CAAC,UAAU,KAAK,4EAAe,CAAC,iBAAiB,CAAC;gBACxF,IAAI,+EAAO,CAAC,CAAC,gIAAyB,CAAC,EAAE,IAAI,CAAC,qBAAqB,CAAC;gBACpE,IAAI,+EAAO,CAAC,CAAC,2FAAwB,CAAC,CAAC;aACzC,CAAC;QAlFF,CAAC;QAEK,QAAQ;;gBACX,IAAI,CAAC,UAAU,GAAG,sEAAa,CAAC,aAAa,CAAC;gBAE9C,MAAM,iBAAiB,GAA+B,IAAI,CAAC,iBAAiB;qBACrE,wBAAwB,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;gBAEjD,MAAM,kBAAkB,GAA8B,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC;oBAClF,yGAAsB,CAAC,IAAI;oBAC3B,yGAAsB,CAAC,IAAI,CAAC,MAAM;iBACpC,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC;gBAEpB,IAAI,YAA8B,CAAC;gBACnC,IAAI;oBACD,CAAC,IAAI,CAAC,iBAAiB,EAAE,YAAY,CAAC,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC,CAAC,iBAAiB,EAAE,kBAAkB,CAAC,CAAC,CAAC;oBACpG,IAAI,CAAC,gBAAgB,CAAC,YAAY,CAAC,CAAC;iBACtC;gBAAC,OAAO,CAAC,EAAE;oBACT,oDAAM,CAAC,KAAK,CAAC,kFAAkF,GAAG,CAAC,CAAC,CAAC;oBACrG,IAAI,CAAC,YAAY,GAAG,4DAAW,CAAC,SAAS,CAAC,kCAAkC,CAAC,CAAC;iBAChF;YACJ,CAAC;SAAA;QA+DD,iBAAiB,CAAC,OAAsB;YACrC,IAAI,CAAC,iBAAiB,CAAC,WAAW,CAAC,IAAI,qGAAoB,CAAC,OAAO,EAAE,iGAAgB,CAAC,oBAAoB,CAAC,CAAC,CAAC;YAC7G,4DAAW,CAAC,gBAAgB,EAAE,CAAC;QAClC,CAAC;;IAtGe,4CAAmB,GAAoB,4EAAe,CAAC,mBAAmB,CAAC;;;;;;;;;;;;;;;;ACjC9F;AAAA;AAAA;AAAA,kFAAkF;AAC3E;UAAM,cAAc;;IACR,yCAA0B,GAAyB;QAChE,KAAK,EAAE,GAAG;QACV,MAAM,EAAE,GAAG;KACb,CAAC;IAEc,mCAAoB,GAAyB;QAC1D,KAAK,EAAE,GAAG;QACV,MAAM,EAAE,GAAG;KACb,CAAC;IAEc,oCAAqB,GAAyB;QAC3D,KAAK,EAAE,IAAI;QACX,MAAM,EAAE,GAAG;KACb,CAAC;IAEc,2CAA4B,GAAyB;QAClE,KAAK,EAAE,GAAG;QACV,MAAM,EAAE,GAAG;KACb,CAAC;IAEc,sDAAuC,GAAyB;QAC7E,KAAK,EAAE,GAAG;QACV,MAAM,EAAE,GAAG;KACb,CAAC;IAEc,2CAA4B,GAAyB;QAClE,KAAK,EAAE,GAAG;QACV,MAAM,EAAE,GAAG;KACb,CAAC;IAEF,+CAA+C;IAC/B,sCAAuB,GAAyB;QAC7D,KAAK,EAAE,GAAG;QACV,MAAM,EAAE,GAAG;KACb,CAAC;IAEc,+CAAgC,GAAyB;QACtE,KAAK,EAAE,GAAG;QACV,MAAM,EAAE,GAAG;KACb,CAAC;IAEc,+CAAgC,GAAyB;QACtE,KAAK,EAAE,IAAI;QACX,MAAM,EAAE,GAAG;KACb,CAAC;IAEc,yDAA0C,GAAyB;QAChF,KAAK,EAAE,IAAI;QACX,MAAM,EAAE,GAAG;KACb,CAAC;IAEc,0CAA2B,GAAyB;QACjE,KAAK,EAAE,GAAG;QACV,MAAM,EAAE,GAAG;KACb,CAAC;IAEc,4CAA6B,GAAyB;QACnE,KAAK,EAAE,GAAG;QACV,MAAM,EAAE,GAAG;KACb,CAAC;IAEc,wCAAyB,GAAyB;QAC/D,KAAK,EAAE,IAAI;QACX,MAAM,EAAE,GAAG;KACb,CAAC;IAEc,4CAA6B,GAAyB;QACnE,KAAK,EAAE,GAAG;QACV,MAAM,EAAE,GAAG;KACb,CAAC;;;AAGE,MAAM,oBAAoB;CAGhC;;;;;;;;;;;;;;;;;;;;;;;;;;AC3EqD;AACoC;AAE9C;AAC+B;AACQ;AAED;AAET;AACZ;;IAU7D,IAAa,YAAY,GAAzB,MAAa,YAAY;QA0BtB,YAAoB,sBAA8C;YAA9C,2BAAsB,GAAtB,sBAAsB,CAAwB;YAxBlE,oBAAe,GAA2B,4EAAe,CAAC;QAyB1D,CAAC;QAED,QAAQ;YACL,2DAA2D;YAC3D,IAAI,IAAI,CAAC,iBAAiB,CAAC,qBAAqB,CAAC,eAAe,EAAE;gBAC/D,IAAI,CAAC,cAAc,CAAC,UAAU,GAAG,KAAK,CAAC;aACzC;QACJ,CAAC;QAED,gBAAgB,CAAC,MAAsB;YACpC,IAAI,CAAC,cAAc,GAAG,2DAAW,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;QACvD,CAAC;QAED,QAAQ;YACL,MAAM,gBAAgB,GAAa,IAAI,CAAC,iBAAiB,CAAC,cAAc,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;YAE9F,MAAM,eAAe,GAA0B,IAAI,CAAC,cAAc,CAAC,qBAAqB,CAAC;YACzF,IAAI,IAAI,CAAC,sBAAsB,CAAC,uCAAuC,CAAC,eAAe,CAAC;mBAC/E,IAAI,CAAC,mBAAmB,EAAE;gBAChC,gBAAgB,CAAC,IAAI,CACf,2DAAW,CAAC,SAAS,CAAC,8CAA8C,EAC9D,IAAI,CAAC,sBAAsB,CAAC,OAAO,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;aACrE;YAED,+FAA+F;YAC/F,OAAO,gBAAgB,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,gBAAgB,CAAC,CAAC,CAAC,IAAI,CAAC;QAChE,CAAC;KACH;IAjDE;QADC,qFAAa,EAAE;gFACG,iGAAiB;2DAAC;IAGrC;QADC,qFAAa,EAAE;;oDACY;IAG5B;QADC,qFAAa,EAAE;;6DACa;IAG7B;QADC,qFAAa,EAAE;;sDACW;IAG3B;QADC,qFAAa,EAAE;gFACJ,qEAAa;oDAAC;IAG1B;QADC,qFAAa,EAAE;;2DACW;IAI3B;QAFC,qFAAa,EAAE;QACf,sFAAc,EAAE;;wDACc;IAxBrB,YAAY;QARxB,kFAAU,CACL,2DAAW,CAAC,SAAS,CAAC,8CAA8C,CAAC,EACrE,2DAAW,CAAC,SAAS,CAAC,oDAAoD,CAAC,EAC3E,CAAC,0FAAsB,EAAE,kGAA0B,CAAC,CACzD;OAIY,YAAY,CAsDxB;;;AAtDwB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8GCXtB,omBACmF,GAA/D,uDAA8D,IAAC,6EAChF,mJAA0B,gFAAiB,MAAO,0EACrD,2BAFoB,4MAA8D,IADlF,YACmF,EAA/D,SAA8D,mDACrD,0DAAiB;8GAY3C,omBACqG,GAAjF,uDAAgF,IAAC,gFAClG,yJAAgC,qKAEhC,IAAO,6EACV,2BAJoB,qOAAgF,IADpG,YACqG,EAAjF,SAAgF,2BACjE,sNAEhC;8GAEH,omBACqG,GAAjF,uDAAgF,IAAC,gFAClG,qJAA4B,qKAE5B,IAAO,6EACV,2BAJoB,qOAAgF,IADpG,YACqG,EAAjF,SAAgF,mDACrE,mSAE5B;8GAEH,omBAC+F,GAA3E,uDAA0E,IAAC,gFAC5F,sJAA6B,yGAE7B,MAAO,6EACV,2BAJoB,+NAA0E,IAD9F,YAC+F,EAA3E,SAA0E,mDAC9D,qEAE7B;8GAjBN,yHAAsF,qFACnF,uZACqG,IAIhF,gFACrB,uZACqG,IAIhF,gFACrB,uZAC+F,IAI1E,6EACxB,mDAlBuB,oBAAkD,4CAAtE,YACqG,EADjF,SAAkD,GAMlD,mBAAiD,4CAArE,YACqG,EADjF,SAAiD,GAMjD,mBAAiD,4CAArE,YAC+F,EAD3E,SAAiD;8GAgBxE,wHAA+E,qFAC5E,0mBAAwG,GAApF,uDAAmF,IAAC,gFACrG,0JAAiC,yGAEjC,MAAO,6EACV,MAAqB,6EACxB,2BALuB,iOAAmF,IAAvG,YAAwG,EAApF,SAAmF,mDACnE,2EAEjC;8GAMN,omBACkG,GAA9E,uDAA6E,IAAC,6EAC/F,gKAAuC,mGAEvC,MAAO,0EACV,2BAJoB,2NAA6E,IADjG,YACkG,EAA9E,SAA6E,mDACvD,0EAEvC;+GAaA,4qBAIsC,GAFrB,uDAAsG,IAEjF,gFACtC,2BAJiB,yBAAmB,EACnB,2PAAsG,IAEtG,qBAAoB,EADpB,oBAAgB,EAHjC,YAIsC,EAHrB,SAAmB,EACnB,SAAsG,EAEtG,SAAoB,EADpB,SAAgB;+GAGjC,4qBAIsC,GAFrB,uDAAsG,IAEjF,gFACtC,2BAJiB,yBAAmB,EACnB,2PAAsG,IAEtG,qBAAoB,EADpB,oBAAgB,EAHjC,YAIsC,EAHrB,SAAmB,EACnB,SAAsG,EAEtG,SAAoB,EADpB,SAAgB;8GAlBpC,yHAAyE,qFACtE,0mBAAwF,GAApE,uDAAmE,IAAC,gFACrF,qJAA4B,qKAI5B,IAAO,6EACV,MAAqB,gFACrB,MAAqG,gFACrG,yZAIsC,IACpB,gFAClB,yZAIsC,IACpB,gFAClB,4mBAA+E,oFAC5E,0JAAgC,0GAEhC,MAAO,6EACV,MAAqB,gFACrB,4mBAA6E,oFAC1E,uJAA6B,0GAE7B,MAAO,6EACV,MAAqB,6EACxB,mDA9BuB,iNAAmE,IAAvF,YAAwF,EAApE,SAAmE,GAQtE,mBAAqD,gDAAtE,aAIsC,EAJrB,SAAqD,GAMrD,mBAAiD,4CAAlE,aAIsC,EAJrB,SAAiD,GAM9C,2CAA0D,+BAA9E,aAA+E,EAA3D,SAA0D,GAK1D,2CAAwD,6BAA5E,aAA6E,EAAzD,SAAwD,mDAxB7C,0VAI5B,GAgBgC,mGAEhC,GAG6B,iGAE7B;+GAKN,wHAAsD,qFACnD,0mBAA+G,GAA3F,uDAA0F,IAAC,gFAC5G,+JAAsC,gFAA8B,MAAO,6EAC9E,MAAqB,6EACxB,2BAHuB,wOAA0F,IAA9G,YAA+G,EAA3F,SAA0F,mDACrE,uEAA8B;+GAMvE,omBAC+D,oFAC5D,qIAAiD,yGAEjD,MAAO,6EACV,mDAJoB,0CAA0C,qBAD9D,YAC+D,EAA3C,SAA0C,mDACrD,0IAA0C,GAAhD,YAAiD,EAA3C,SAA0C,GAAC,uFAEjD;+GALN,wHAAiD,qFAC9C,ieAC+D,IAI1C,6EACxB,mDANuB,mBAA+C,sBAAnE,YAC+D,EAD3C,SAA+C;+GAetE,yHAAwC,qFACrC,0mBAAuF,GAAnE,uDAAkE,IAAC,gFACpF,2JAAkC,yGAElC,MAAO,6EACV,MAAqB,gFACrB,4mBAAuF,GAAnE,wDAAkE,IAAC,gFACpF,4JAAkC,0GAElC,MAAO,6EACV,MAAqB,gFACrB,4mBAA4F,GAAxE,wDAAuE,IAAC,gFACzF,wJAA8B,0GAE9B,MAAO,6EACV,MAAqB,6EACxB,2BAfuB,gNAAkE,IAAtF,YAAuF,EAAnE,SAAkE,GAKlE,kNAAkE,IAAtF,aAAuF,EAAnE,SAAkE,GAKlE,uNAAuE,IAA3F,aAA4F,EAAxE,SAAuE,mDATtD,0DAElC,GAGkC,2DAElC,GAG8B,6DAE9B;+GAQG,iIAA6E,+GAE7E,iCAFiD,wHAA2B,GAA5E,YAA6E,EAA5B,SAA2B,GAAC,6DAE7E;+GALT,yHAA+C,qFAC5C,2mBAAwF,GAApE,uDAAmE,IAAC,gFACrF,0HAAK,8EAAC,MAAkG,sFACrG,keAA6E,IAEvE,mFACT,MAAM,6EACT,MAAqB,6EACxB,mDAPuB,iNAAmE,IAAvF,YAAwF,EAApE,SAAmE,GAE5E,mBAA2C,mBAAhD,aAA6E,EAAxE,SAA2C;+GAQzD,wHAA4D,qFACzD,0mBAAoF,GAAhE,uDAA+D,IAAC,gFACjF,6JAAoC,yGAEpC,MAAO,6EACV,MAAqB,6EACxB,2BALuB,6MAA+D,IAAnF,YAAoF,EAAhE,SAA+D,mDAC5C,sDAEpC;8GAzJT,yHAAkE,kFAC/D,MAAiB,6EACjB,uZACmF,IAE9D,+EAErB,MAAyB,6EACzB,0mBAAgG,GAA5E,uDAA2E,IAAC,6EAC7F,yJAA+B,oGAE/B,MAAO,0EACV,MAAqB,+EAErB,MAAgC,6EAChC,wZAAsF,IAmBvE,+EAEf,MAAiC,6EACjC,4mBAAkG,GAA9E,wDAA6E,IAAC,6EAC/F,4JAAkC,oGAElC,MAAO,0EACV,MAAqB,+EAErB,MAAmC,6EACnC,wZAA+E,IAMhE,+EAEf,MAAoC,6EACpC,MAAoG,6EACpG,wZACkG,IAI7E,+EAErB,MAA6B,6EAC7B,wZAAyE,IA+B1D,+EAEf,MAAmC,6EACnC,yZAAsD,IAIvC,+EAEf,MAA8D,6EAC9D,yZAAiD,IAOlC,+EAEf,MAAsB,6EACtB,4mBAAkG,GAA9E,wDAA6E,IAAC,6EAC/F,yJAA+B,oGAE/B,MAAO,0EACV,MAAqB,+EAErB,yZAAwC,IAgBzB,+EAEf,MAA2B,6EAC3B,yZAA+C,IAQhC,+EAEf,MAAoB,6EACpB,yZAA4D,IAM7C,0EAClB,mDA1JuB,mBAA0D,qDAA9E,YACmF,EAD/D,SAA0D,GAM1D,kNAA2E,IAA/F,YAAgG,EAA5E,SAA2E,GAOjF,kEAAuE,yBAArF,aAAsF,EAAxE,SAAuE,GAsBjE,sNAA6E,IAAjG,aAAkG,EAA9E,SAA6E,GAOnF,mBAAgE,2DAA9E,aAA+E,EAAjE,SAAgE,GAU1D,oBAA4D,sDAAhF,aACkG,EAD9E,SAA4D,GAQlE,6CAA0D,+BAAxE,aAAyE,EAA3D,SAA0D,GAkC1D,mBAAuC,kCAArD,aAAsD,EAAxC,SAAuC,GAOvC,oBAAkC,6BAAhD,aAAiD,EAAnC,UAAkC,GAU5B,uNAA6E,IAAjG,aAAkG,EAA9E,UAA6E,GAMnF,oBAAyB,oBAAvC,aAAwC,EAA1B,UAAyB,GAmBzB,6DAAgC,2BAA9C,aAA+C,EAAjC,UAAgC,GAWhC,oBAA6C,wCAA3D,aAA4D,EAA9C,UAA6C,mDA5IzB,mEAE/B,GA2BkC,yEAElC,GA0E+B,wEAE/B;+GA0CN,wHAAkE,kFAC/D,0pBAGsC,GAFrB,uDAAoF,IAE/D,6EACtC,MAAkB,0EACrB,2BALoB,sBAAoB,EACpB,2NAAoF,IAEpF,qBAAoB,EADpB,oBAAgB,EAFjC,YAGsC,EAHrB,SAAoB,EACpB,SAAoF,EAEpF,SAAoB,EADpB,SAAgB;yPA1K+C,0EACnF,MAAoB,0EACpB,0mBAA6F,GAAzE,uDAAwE,IAAC,0EAC1F,sJAA6B,6FAE7B,MAAO,uEACV,MAAqB,4EAErB,MAAwE,0EACxE,wZAAkE,IA4JnD,4EAEf,yZAAkE,IAMnD,0EACf,mDA5KoB,wMAAwE,IAA5F,YAA6F,EAAzE,SAAwE,GAO9E,uCAAmD,gCAAjE,aAAkE,EAApD,SAAmD,GA8JnD,uCAAmD,gCAAjE,aAAkE,EAApD,SAAmD,mDApKjC,4DAE7B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACHoF;AACW;AACR;AAGjB;AAKvB;AACN;;IAW5C,IAAa,cAAc,GAA3B,MAAa,cAAc;QAA3B;YA2BG,gBAAW,GAAY,KAAK,CAAC;YAI7B,uBAAkB,GAAY,KAAK,CAAC;YAEpC,gEAAgE;YACxD,gCAA2B,GAAY,KAAK,CAAC;QAiDxD,CAAC;QAxEE,IAAI,iBAAiB;YAClB,OAAO,IAAI,CAAC,kBAAkB,CAAC;QAClC,CAAC;QAGD,IAAI,iBAAiB,CAAC,KAAsC;YACzD,IAAI,CAAC,kBAAkB,GAAG,IAAI,GAAG,CAA6B,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC;QACxF,CAAC;QAkBD,QAAQ;;YACL,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,cAAc,CAAC,qBAAqB,CAAC;YAChE,kEAAkE;YAClE,IAAI,CAAC,kBAAkB,GAAG,iEAAY,CAAC,yBAAyB,CAAC,CAAC,GAAG,CAAH,KAAG,IAAI,CAAC,iBAAiB,0CAAE,MAAM,EAAE,CAAC,CAAC,CAAC;YACxG,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,cAAc,CAAC,gBAAgB,IAAI,IAAI,CAAC,kBAAkB,CAAC;YACnF,2EAA2E;YAC3E,kDAAkD;YAClD,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE;gBACpB,IAAI,CAAC,iBAAiB,EAAE,CAAC;aAC3B;QACJ,CAAC;QAED,QAAQ;YACL,IAAI,CAAC,IAAI,CAAC,kBAAkB,EAAE;gBAC3B,OAAO,CAAC,2DAAW,CAAC,SAAS,CAAC,+DAA+D,CAAC,CAAC,CAAC;aAClG;YAED,OAAO,IAAI,CAAC;QACf,CAAC;QAED,cAAc,CAAC,YAA6C;YACzD,IAAI,CAAC,cAAc,CAAC,YAAY,GAAG,YAAY,CAAC;YAChD,IAAI,CAAC,YAAY,CAAC,UAAU,EAAE,CAAC;YAC9B,IAAI,CAAC,YAAyB,CAAC,oBAAoB,GAAG,KAAK,CAAC;YAC7D,IAAI,CAAC,2BAA2B,GAAG,IAAI,CAAC;QAC3C,CAAC;QAED,mBAAmB;YAChB,IAAI,CAAC,cAAc,CAAC,sBAAsB,GAAG,IAAI,CAAC,WAAW,CAAC;YAC9D,2GAA2G;YAC3G,aAAa;YACb,IAAI,CAAC,IAAI,CAAC,2BAA2B,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE;gBACzD,IAAI,CAAC,iBAAiB,EAAE,CAAC;aAC3B;QACJ,CAAC;QAED,2BAA2B,CAAC,mBAA4C;YACrE,IAAI,CAAC,uBAAuB,GAAG,mBAAmB,CAAC;QACtD,CAAC;QAED,wBAAwB,CAAC,gBAAsC;YAC5D,IAAI,CAAC,gBAAgB,GAAG,gBAAgB,CAAC;QAC5C,CAAC;QAEO,iBAAiB;YACrB,IAAI,CAAC,YAAyB,CAAC,oBAAoB,GAAG,IAAI,CAAC;QAC/D,CAAC;KACH;IAhFE;QADC,qFAAa,EAAE;;wDACW;IAI3B;QAFC,qFAAa,EAAE;QACf,sFAAc,EAAE;;0DACc;IAS/B;QADC,qFAAa,EAAE;gFACa,GAAG;uFAAH,GAAG;2DAE/B;IAGD;QADC,sFAAc,EAAE;gFACQ,iHAAuB;mEAAC;IAGjD;QADC,sFAAc,EAAE;gFACC,sGAAoB;4DAAC;IAGvC;QADC,sFAAc,EAAE;;uDACY;IA3BnB,cAAc;QAT1B,kFAAU,CACL,2DAAW,CAAC,SAAS,CAAC,qCAAqC,CAAC,EAC5D,2DAAW,CAAC,SAAS,CAAC,2CAA2C,CAAC,EAClE,CAAC,wFAAqB,CAAC,CAC5B;OAKY,cAAc,CAmF1B;;;AAnF0B;;;;;;;;;;;;;;ACjB3B;AAAA;AAAA;AAAA;AAAsE;AAGF;AAapE,MAAM,qBAAqB,GAAW;IACnC;QACG,IAAI,EAAE,EAAE;QACR,SAAS,EAAE,oFAAwB;KACrC;IACD;QACG,IAAI,EAAE,cAAc;QACpB,SAAS,EAAE,kFAAuB;KACpC;CACH,CAAC;AAoCK,MAAM,qBAAqB;CACjC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;mECpED;YAAA;YAAA,YAUwD;YAAlD;;gCAAiD;;YAVvD;QAAA,krCAUwD,gFACxD,mDATM,mBAAyB,aACzB,mBAA4B,oBAC5B,qBAAoB,EACpB,oBAA6G,wEAC7G,mBAAiF,0DACjF,oBAAwB,EACxB,mBAAyB,aACzB,mBAAuC,oBAT7C,YAUwD,EARlD,SAAyB,EACzB,SAA4B,EAC5B,SAAoB,EACpB,SAA6G,EAC7G,SAAiF,EACjF,SAAwB,EACxB,SAAyB,EACzB,SAAuC;AAAA;kGAViC,0EAC9E,2YAUwD,IAChC,0EACxB,mDAXM,mBAAyB,oBAD/B,YAUwD,EATlD,SAAyB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACU/B;AAAA;AAAA;AAAA;AAA4C;AAEiD;AAG7F;;;;;;;;GAQG;AAII,MAAM,qBAAsB,SAAQ,4GAAsB;IAiC9D,YAAoB,EAA2B,EACjC,QAAkC,EAClC,QAAmB,EACnB,iBAAoC;IAC5C,mEAAmE;IACvC,SAAoB;QACnD,KAAK,CAAC,SAAS,CAAC,CAAC;QANA,OAAE,GAAF,EAAE,CAAyB;QACjC,aAAQ,GAAR,QAAQ,CAA0B;QAClC,aAAQ,GAAR,QAAQ,CAAW;QACnB,sBAAiB,GAAjB,iBAAiB,CAAmB;QAnCjC,gCAA2B,GAAW,uBAAuB,CAAC;QAC9D,gCAA2B,GAAW,uBAAuB,CAAC;QAE9D,oBAAe,GAAW,qBAAqB,CAAC;QAChD,0BAAqB,GAAW,OAAO,CAAC;QACxC,wBAAmB,GAAW,eAAe,CAAC;QAC9C,2BAAsB,GAAW,MAAM,CAAC;QACxC,2BAAsB,GAAW,UAAU,CAAC;QAC5C,gCAA2B,GAAW,MAAM,CAAC;QAC7C,iCAA4B,GAAW,MAAM,CAAC;QAC9C,yBAAoB,GAAW,OAAO,CAAC;QACvC,0BAAqB,GAAW,SAAS,CAAC;QAC1C,wBAAmB,GAAW,MAAM,CAAC;QACrC,yBAAoB,GAAW,IAAI,CAAC;QACpC,yBAAoB,GAAW,OAAO,CAAC;QACvC,0BAAqB,GAAW,MAAM,CAAC;QACvC,yBAAoB,GAAW,OAAO,CAAC;QAEvC,WAAM,GAAW,0BAA0B,CAAC;IAqB7D,CAAC;IAED,eAAe;QACZ,MAAM,OAAO,GAAgB,IAAI,CAAC,EAAE,CAAC,aAAa,CAAC;QACnD,kDAAkD;QAClD,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,EAAE;YACnD,8FAA8F;YAC9F,OAAO;SACT;QACD,IAAI,CAAC,mBAAmB,CAAC,OAAO,CAAC,CAAC;IACrC,CAAC;IAED,aAAa,CAAC,SAAoB,EAAE,MAAyB,EAAE,KAAa;QACzE,iGAAiG;QACjG,IAAI,CAAC,mBAAmB,CAAC,MAAM,CAAC,CAAC;IACpC,CAAC;IAEO,mBAAmB,CAAC,OAAoB;QAC7C,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,OAAO,EAAE,IAAI,CAAC,eAAe,CAAC,CAAC;QAEtD,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;QACtB,IAAI,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,EAAE;YACvB,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC;SAC7B;aAAM;YACJ,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;SAC5B;QAED,IAAI,CAAC,2BAA2B,CAAC,OAAO,CAAC,CAAC;IAC7C,CAAC;IAEO,QAAQ,CAAC,OAAoB;QAClC,OAAO,OAAO,YAAY,iBAAiB,CAAC;IAC/C,CAAC;IAEO,MAAM,CAAC,OAAoB;QAChC,OAAO,OAAO,YAAY,iBAAiB,CAAC;IAC/C,CAAC;IAEO,OAAO,CAAC,OAAoB;QACjC,MAAM,IAAI,GAAoB,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,IAAI,CAAC,sBAAsB,CAAC,CAAC;QACvF,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;QACvC,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;QAEzC,MAAM,IAAI,GAAoB,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,IAAI,CAAC,sBAAsB,CAAC,CAAC;QACvF,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,oBAAoB,EAAE,IAAI,CAAC,qBAAqB,CAAC,CAAC;QACzE,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,mBAAmB,EAAE,IAAI,CAAC,oBAAoB,CAAC,CAAC;QACvE,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,oBAAoB,EAAE,IAAI,CAAC,qBAAqB,CAAC,CAAC;QACzE,mDAAmD;QACnD,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,oBAAoB,EAAE,2DAAW,CAAC,SAAS,CAAC,2CAA2C,CAAC,CAAC,CAAC;QACjH,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;IAC5C,CAAC;IAEO,OAAO,CAAC,OAAoB;QACjC,IAAI,IAAI,CAAC,UAAU,EAAE;YAClB,OAAO,IAAI,CAAC,UAAU,CAAC;SACzB;QACD,MAAM,GAAG,GAAW,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,2BAA2B,CAAC,CAAC,CAAC,IAAI,CAAC,2BAA2B,CAAC;QACjH,OAAO,2DAAW,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;IACrC,CAAC;IAEO,YAAY,CAAC,OAAoB;QACtC,MAAM,WAAW,GAAoB,OAA0B,CAAC;QAChE,kFAAkF;QAClF,WAAW,CAAC,IAAI,GAAG,IAAI,CAAC,mBAAmB,CAAC;QAC5C,4BAA4B;QAC5B,WAAW,CAAC,KAAK,CAAC,OAAO,GAAG,aAAa,CAAC;IAC7C,CAAC;IAEO,2BAA2B,CAAC,OAAoB;QACrD,OAAO,CAAC,gBAAgB,CAAC,IAAI,CAAC,qBAAqB,EAAE,GAAG,EAAE;YACvD,IAAI,IAAI,CAAC,MAAM,EAAE;gBACd,IAAI,CAAC,iBAAiB,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;gBAC9C,OAAO;aACT;YACD,IAAI,IAAI,CAAC,SAAS,EAAE;gBACjB,IAAI,CAAC,iBAAiB,CAAC,iBAAiB,CAAC,GAAG,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,SAAS,EAAE,CAAC,CAAC;gBAC5E,OAAO;aACT;YACD,IAAI,IAAI,CAAC,GAAG,EAAE;gBACX,IAAI,CAAC,iBAAiB,CAAC,iBAAiB,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;aACrD;QACJ,CAAC,CAAC,CAAC;IACN,CAAC;IAED,wDAAwD;IAChD,WAAW,CAAC,OAAoB;QACrC,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,OAAO,EAAE,IAAI,CAAC,2BAA2B,EAAE,IAAI,CAAC,4BAA4B,CAAC,CAAC;IAC5G,CAAC;CACH;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;mEChJE;YAAA;YAAA,YASqD;YAA/C;;gCAA8C;;YATpD;QAAA,yrCASqD,mFACrD,mDARM,mBAAyB,aACzB,mBAAiB,SACjB,qBAAoB,EACpB,oBAA8B,EAC9B,oBAA0B,EAE1B,oBAA2C,EAD3C,qBAA0C,EAPhD,YASqD,EAP/C,SAAyB,EACzB,SAAiB,EACjB,SAAoB,EACpB,SAA8B,EAC9B,SAA0B,EAE1B,SAA2C,EAD3C,SAA0C;AAAA;;iTApBnD;YAAA;YAAA,YAM8B;YADxB;;gCAA0B;;YAC1B;;gCAAuB;;YAN7B;QAAA,6wBAM8B,KALxB,uDAA2D,GAC3D,uDAA+C,IAIvB,0EAC3B,8pBAI8B,GAFxB,uDAAkE,IAE1C,6EAC9B,MAAkB,0EAClB,qZASqD,IAC7B,uEAC3B,MAAqB,0EACrB,mDAxBM,2LAA2D,IAC3D,yKAA+C,IAG/C,mBAA0B,SAD1B,mCAAiC,UADjC,mCAAkC,UAHxC,YAM8B,EALxB,SAA2D,EAC3D,SAA+C,EAG/C,SAA0B,EAD1B,SAAiC,EADjC,SAAkC,GAQ/B,yBAAuB,EAFvB,kMAAkE,IAClE,qBAAoB,EAH1B,YAI8B,EAAxB,SAAuB,EAFvB,SAAkE,EAClE,SAAoB,GAIpB,oBAAgB,UADtB,aASqD,EAR/C,SAAgB;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACP0C;AACd;AACC;AACqB;AACrB;AACiB;AACgC;AAE3D;AAE5C;;GAEG;AAMI;UAAM,uBAAuB;QAkBjC,YAAoB,aAAsC,EAC5C,iBAA2C,EAC3C,iBAAoC;YAF9B,kBAAa,GAAb,aAAa,CAAyB;YAC5C,sBAAiB,GAAjB,iBAAiB,CAA0B;YAC3C,sBAAiB,GAAjB,iBAAiB,CAAmB;YAJlD,WAAM,GAAa,EAAE,CAAC;QAKtB,CAAC;QAOK,QAAQ;;gBACX,IAAI,CAAC,UAAU,GAAG,qEAAa,CAAC,aAAa,CAAC;gBAC9C,IAAI,CAAC,MAAM,GAAG,MAAM,IAAI,CAAC,iBAAiB,CAAC,wBAAwB,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;gBACrF,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,MAAM,CAAC,mBAAmB,EAAE,CAAC;YAC3D,CAAC;SAAA;QAGO,eAAe,CAAC,KAAa;YAClC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAC3B,CAAC;QAGK,OAAO;;gBACV,MAAM,MAAM,GAAa,IAAI,CAAC,wBAAwB,CAAC,MAAM,CAAC,cAAc,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;gBAClG,IAAI,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE;oBACpB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;iBACvB;qBAAM;oBACJ,MAAM,IAAI,GAAQ,MAAM,IAAI,CAAC,aAAa,CAAC,gBAAgB,CAAC,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,cAAc,CAAC,CAAC;oBAElG,IAAI,CAAC,iBAAiB,CAAC,WAAW,CAC5B,IAAI,oGAAoB,CAAC,IAAI,EAAE,gGAAgB,CAAC,oBAAoB,CAAC,CAAC,CAAC;oBAC7E,2DAAW,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC;iBACrC;YACJ,CAAC;SAAA;QAGO,kBAAkB,CAAC,KAAa;YACrC,IAAI,CAAC,MAAM,GAAG,CAAC,KAAK,CAAC,CAAC;QACzB,CAAC;;IA7CD;QADC,kGAAgB,CAAC,EAAC,IAAI,EAAE,oEAAU,CAAC,OAAO,EAAC,CAAC;;4DAC5B;IAGjB;QADC,kGAAgB,CAAC,EAAC,IAAI,EAAE,oEAAU,CAAC,UAAU,EAAC,CAAC;;2DAChC;IAchB;QALC,6EAAM,CAAC;YACL,IAAI,EAAE,oEAAU,CAAC,OAAO;YACxB,SAAS,EAAE,qCAAqC;YAChD,aAAa,EAAE,sFAAa,CAAC,UAAU;SACzC,CAAC;;;;2DAKD;IAGD;QADC,0FAAY,CAAC,EAAC,IAAI,EAAE,oEAAU,CAAC,OAAO,EAAC,CAAC;;;;kEAGxC;IAGD;QADC,6EAAM,CAAC,EAAC,IAAI,EAAE,oEAAU,CAAC,UAAU,EAAC,CAAC;;;;0DAYrC;IAGD;QADC,0FAAY,CAAC,EAAC,IAAI,EAAE,oEAAU,CAAC,UAAU,EAAC,CAAC;;;;qEAG3C;;;;;;;;;;;;;;;;;;;;;;;;;;;AC/EsF;AAC9C;AAGoB;AACH;AACqB;AAE9B;AACkC;;IAUtF,IAAa,cAAc,GAA3B,MAAa,cAAc;QA4CxB,YAAoB,4BAA0D;YAA1D,iCAA4B,GAA5B,4BAA4B,CAA8B;YA1C9E,oBAAe,GAA2B,4EAAe,CAAC;QA0CuB,CAAC;QAElF,QAAQ;YACL,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,iBAAiB,CAAC,mBAAmB,EAAE,CAAC;YACnE,IAAI,CAAC,cAAc,CAAC,WAAW,GAAG,IAAI,CAAC;QAC1C,CAAC;QAED,QAAQ;YACL,MAAM,gBAAgB,GAAa,IAAI,CAAC,mBAAmB,EAAE,CAAC;YAC9D,IAAI,gBAAgB,CAAC,MAAM,GAAG,CAAC,EAAE;gBAC9B,OAAO,gBAAgB,CAAC;aAC1B;YAED,OAAO,IAAI,CAAC,CAAC,mBAAmB;QACnC,CAAC;QAEO,mBAAmB;YACxB,MAAM,gBAAgB,GAAa,EAAE,CAAC;YAEtC,QAAQ,IAAI,CAAC,UAAU,EAAE;gBACtB,KAAK,4EAAe,CAAC,qBAAqB;oBACvC,IAAI,IAAI,CAAC,cAAc,KAAK,CAAC,EAAE;wBAC5B,gBAAgB,CAAC,IAAI,CACf,2DAAW,CAAC,SAAS,CAAC,2CAA2C,EAAE,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC;qBACjG;oBAED,KAAK,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,gBAAgB,EACrC,IAAI,CAAC,4BAA4B,CAAC,8BAA8B,CAAC,IAAI,CAAC,0BAA0B,CAAC,CAAC,CAAC;oBACzG,MAAM;gBACT,KAAK,4EAAe,CAAC,iBAAiB;oBACnC,IAAI,CAAC,IAAI,CAAC,uBAAuB,EAAE;wBAChC,gBAAgB,CAAC,IAAI,CAAC,2DAAW,CAAC,SAAS,CAAC,iDAAiD,CAAC,CAAC,CAAC;qBAClG;yBAAM,IAAI,IAAI,CAAC,cAAc,GAAG,CAAC,EAAE;wBACjC,gBAAgB,CAAC,IAAI,CAAC,2DAAW,CAAC,SAAS,CAAC,sDAAsD,CAAC,CAAC,CAAC;qBACvG;oBAED,KAAK,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,gBAAgB,EACrC,IAAI,CAAC,4BAA4B,CAAC,8BAA8B,CAAC,IAAI,CAAC,0BAA0B,CAAC,CAAC,CAAC;oBACzG,MAAM;aACX;YACD,OAAO,gBAAgB,CAAC;QAC3B,CAAC;QAED,iBAAiB;YACd,IAAI,CAAC,YAAY,CAAC,UAAU,EAAE,CAAC;YAC/B,IAAI,CAAC,YAAY,CAAC,qBAAqB,EAAE,CAAC;YAE1C,MAAM,aAAa,GAAa,IAAI,CAAC,mBAAmB,EAAE,CAAC;YAC3D,IAAI,aAAa,EAAE;gBAChB,IAAI,CAAC,YAAY,CAAC,mBAAmB,CAAC,aAAa,CAAC,CAAC;aACvD;YAED,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,UAAU,KAAK,4EAAe,CAAC,qBAAqB,CAAC,CAAC;QACvF,CAAC;QAED,iBAAiB;YACd,IAAI,IAAI,CAAC,UAAU,KAAK,4EAAe,CAAC,YAAY,EAAE;gBACnD,IAAI,CAAC,cAAc,CAAC,WAAW,GAAG,mEAAW,CAAC,OAAO,CAAC;aACxD;iBAAM;gBACJ,IAAI,CAAC,cAAc,CAAC,WAAW,GAAG,IAAI,CAAC;aACzC;YAED,IAAI,CAAC,iBAAiB,EAAE,CAAC;QAC5B,CAAC;QAEO,mBAAmB,CAAC,WAAoB;YAC7C,IAAI,WAAW,IAAI,IAAI,CAAC,0BAA0B,CAAC,MAAM,KAAK,CAAC,EAAE;gBAC9D,IAAI,CAAC,aAAa,GAAG,2DAAW,CAAC,SAAS,CACpC,4FAA4F,CAAC,CAAC;gBACpG,IAAI,CAAC,gBAAgB,GAAG,CAAC,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,0BAA0B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBACpF,IAAI,CAAC,aAAa,GAAG,2DAAW,CAAC,SAAS,CACpC,4FAA4F,CAAC,CAAC;gBACpG,IAAI,CAAC,gBAAgB,GAAG,CAAC,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,0BAA0B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;aACtF;iBAAM;gBACJ,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC;gBAC1B,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC;gBAC7B,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC;gBAC1B,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC;aAC/B;QACJ,CAAC;QAEO,gBAAgB,CAAC,MAA2B;YACjD,OAAO,+EAAgB,CAAC,OAAO,CAAC,MAAM,CAChC,MAAM,CAAC,OAAO,EACd,MAAM,CAAC,IAAI,EACX,IAAI,EACJ,MAAM,CAAC,aAAa,EACpB,KAAK,EACL,KAAK,EACL,IAAI,EACJ,IAAI,CAAC,CAAC;QACf,CAAC;KACH;IA/HE;QADC,qFAAa,EAAE;;0DACO;IAGvB;QADC,qFAAa,EAAE;;wDACW;IAG3B;QADC,qFAAa,EAAE;;mEACiB;IAGjC;QADC,qFAAa,EAAE;;sEACkC;IAGlD;QADC,qFAAa,EAAE;gFACG,iGAAiB;6DAAC;IAKrC;QADC,sFAAc,EAAE;;0DACc;IAI/B;QAFC,qFAAa,EAAE;QACf,sFAAc,EAAE;;sDACW;IAG5B;QADC,sFAAc,EAAE;;yDACK;IAGtB;QADC,sFAAc,EAAE;;4DACoB;IAGrC;QADC,sFAAc,EAAE;;yDACK;IAGtB;QADC,sFAAc,EAAE;;4DACoB;IA1C3B,cAAc;QAR1B,kFAAU,CACL,2DAAW,CAAC,SAAS,CAAC,uDAAuD,CAAC,EAC9E,2DAAW,CAAC,SAAS,CAAC,6DAA6D,CAAC,CACzF;OAKY,cAAc,CAwI1B;;;AAxI0B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;iGCpB3B,2nBAGwC,8EACxC,mDADiB,mBAAsB,eADtB,qBAAoB,EAFrC,YAGwC,EAAvB,SAAsB,EADtB,SAAoB;iGAGrC,oJAA8C,kFAC3C,iKAAqC,KAAO,6EAC5C,0JAA8B,4IAA+D,IAAO,0EACvG,iCADiC,uOAA+D;iGAgB7F,4qBAKkC,iFAClC,mDAHiB,mBAA+B,oBAD/B,mBAAsB,eAEtB,qBAAoB,EACpB,oBAAgB,EALjC,YAKkC,EAFjB,SAA+B,EAD/B,SAAsB,EAEtB,SAAoB,EACpB,SAAgB;iGAEjC,2LAEwC,qFACrC,gcAGqE,GAFvD,0FAEsD,MAAC,gFACrE,MAAe,gFACf,gcAGqE,GAFvD,0FAEsD,MAAC,gFACrE,MAAe,gFACf,kcAGqE,GAFvD,2FAEsD,MAAC,gFACrE,MAAe,6EAClB,mDAdiB,+KAEsD,2CAHtD,uFAAwC,GAAtD,YAGqE,EAFvD,SAEsD,EAHtD,SAAwC,GAMxC,2LAEsD,2CAHtD,uFAAwC,GAAtD,YAGqE,EAFvD,SAEsD,EAHtD,SAAwC,GAMxC,gLAEsD,2CAHtD,uFAAwC,GAAtD,aAGqE,EAFvD,SAEsD,EAHtD,SAAwC;;mEAlC5D,yHAAsD,kFACnD,2/DAAsB,sFACnB,2hCAAoB,uFACjB;YAAA;YAAA;YAAA;;;;;;;;;;gCAK+B;;YADxB;;gCAA+B;;YAJtC;QAAA,gtDAK+B,uFAC/B,2mBAA6B,sKAE7B,IAAQ,gFACX,MAAqB,6EACxB,MAAuB,6EACvB,2YAKkC,IAChB,6EAClB,saAEwC,IAgBnC,0EACR,mDAtCM,aAAoB,GAMV,kCAAsB,EAFtB,wDAAgE,wBAChE,oBAA+B,oBAJtC,aAK+B,EAAxB,UAAsB,EAFtB,UAAgE,EAChE,UAA+B,GAF/B,kCAAoB,EAF3B,aAK+B,EAHxB,UAAoB,GAIpB,kCAAqB,EAA5B,aAA6B,EAAtB,UAAqB,GAKjB,oBAAoB,eAArC,aAKkC,EALjB,UAAoB,GAOjC,mKAAsF,GAA1F,aAEwC,EAFpC,sBAAsF,2BApB1F,saAAsB,GACnB,0MAAoB,GACjB,wzBAK+B,GAC/B,8GAA6B,8OAE7B;AAAA;iGA+B2F,6EACjG,6HAAI,qFACD,wpBAAyC,IAA2B,gFACpE,gKAAmC,wFAChC,6kBAAiC,6IAAqB,IAAQ,mFAC9D,+HAAM,8IAA2B,IAAO,gFAC3C,MAAM,6EACT,MAAK,0EACR,2BANgC,kBAAc,gBAAxC,YAAyC,EAAf,SAAc,GAErC,iJAAiC,8MAAqB,GAChD,iNAA2B;iGAsB9B,mfAAsC,0FACnC,MAAiE,sFACjE,wuDAIiD,6FACjD,MAA2B,mFAC9B,2BAH6B,oBAA2B,EAC3B,qBAAsB,EAFtB,kBAAa,2BAFvC,YAIiD,EADvB,SAA2B,EAC3B,SAAsB,EAFtB,SAAa;;mEAjB7C;YAAA;YAAA,YAIyE;YAApD;;gCAAmD;;YAJxE;QAAA,0xDAIyE,yFACtE,6iBAAiD,0FAC9C,g/BAG2B,6FAC3B,MAAW,sFACX,yIAAuC,iFAAiB,MAAO,mFAClE,MAAsB,mFACtB,wxBAAsC,IAQd,gFAC3B,mDArBqB,oDAAwD,kBAD7E,YAIyE,EAHpD,SAAwD,GACxD,kBAA6B,2BAC7B,kBAAgC,2BAHrD,YAIyE,EAFpD,SAA6B,EAC7B,SAAgC,GAIrC,0BAAgB,EAChB,mCAAqC,4BAF/C,aAG2B,EAFjB,SAAgB,EAChB,SAAqC,GAK3B,qBAAc,EAArC,aAAsC,EAAf,UAAc,mDAbxC,6CAIyE,GACtE,6CAAiD,GACpC,mCAAwC,4BAGxC,kBAAgB,EAH1B,aAG2B,EAHjB,SAAwC,EAGxC,SAAgB,GAEpB,gIAAgC,GAAtC,aAAuC,EAAjC,SAAgC,GAAC,yEAAiB;AAAA;iGAfrC,6EAC/B,+JAAkC,qFAC/B,4HAAI,4IAA2E,IAAK,gFACpF,4/BAA6C,oFAC1C,idAIyE,IAkBnD,6EACzB,MAAgB,6EACnB,MAAM,0EACT,mDA1BqB,sBAA6B,EAA5C,YAA6C,EAA9B,SAA6B,GACpB,mBAAuD,qCAA5E,aAIyE,EAJpD,SAAuD,2BAF3E,mPAA2E,GAC/E,6CAA6C;6OAjE2B,0EAC9E,0YAGwC,IACtB,0EAClB,0YAA8C,IAGxC,0EACN,0YAAsD,IAwCvC,4EAEf,mIAAoG,KAQtF,4EAEd,mIAAkC,kDA5DjB,mBAAoB,eADrC,YAGwC,EAFvB,SAAoB,GAIP,mBAAe,UAA7C,YAA8C,EAAhB,SAAe,GAI/B,oCAAuC,uBAArD,YAAsD,EAAxC,SAAuC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8GCVrD,8lBAAkF,iDAA5C,mBAAsB,eAAC,qBAAoB,EAAjF,YAAkF,EAA5C,SAAsB,EAAC,SAAoB;;8MAAjF,iZAAkF,IAAkB,0EACpG;YAAA;YAAA,YAM6C;YAAvC;;gCAAsC;;YAN5C;QAAA,2xBAM6C,KALvC,uDAA2D,IAKpB,0EAC7C,MAAmB,0EACnB,mDATiB,mBAAoB,eAArC,YAAkF,EAAjE,SAAoB,GAK/B,sCAA+C,EAH/C,2LAA2D,IAE3D,mBAA6B,UAD7B,mBAAkB,QAGlB,mBAAqB,WAL3B,YAM6C,EAFvC,SAA+C,EAH/C,SAA2D,EAE3D,SAA6B,EAD7B,SAAkB,EAGlB,SAAqB;AAAA","file":"112-es2015.js","sourcesContent":["/* Copyright 2020 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {ClrButton} from \"@clr/angular\";\n\n/**\n * Use this class as base class for directive, which handles clr-button. It will help to link the rendered button with\n * the clr-button on which the directive is applied.\n */\nexport abstract class ClrButtonBaseDirective {\n\n   constructor(private clrButton: ClrButton) {\n      if (!clrButton) {\n         return;\n      }\n      // name should be set, if not provided in template - generate one. ClrButtom#name is used to generate the name\n      // attribute of the markup button. Later the name is used to match the generated markup with the directive.\n      if (!clrButton.name) {\n         clrButton.name = Math.random().toString();\n      }\n\n      const directiveHolder: DirectiveHolder = (clrButton as DirectiveHolder);\n      directiveHolder.directives = directiveHolder.directives || [];\n      directiveHolder.directives.push(this);\n   }\n\n   /**\n    * This method will be called when the actual html button is rendered.\n    */\n   abstract resolveButton(clrButton: ClrButton, button: HTMLButtonElement, index: number);\n}\n\nexport interface DirectiveHolder extends ClrButton {\n   directives: ClrButtonBaseDirective[];\n}","/* Copyright 2017-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component} from \"@angular/core\";\nimport {ManagedObject} from \"@service/managed-object\";\nimport {InputProperty, OutputProperty, WizardPage} from \"@component/wizard/flow-metadata\";\nimport {OnValidate} from \"@component/wizard/flow-wizard.component\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {VsanConfigSpec} from \"@generated/vsan-config-spec\";\nimport {VsanCapabilityData} from \"@generated/vsan-capability-data\";\nimport {VsanCapabilityProvider} from \"@generated/vsan-capability-provider\";\nimport {EncryptionPropertyProvider} from \"@generated/encryption-property-provider\";\nimport {VsanStretchedClusterConfig} from \"@generated/vsan-stretched-cluster-config\";\nimport {VsanDiskMapping} from \"@generated/vsan-disk-mapping\";\nimport {DomainOrHostData} from \"@generated/domain-or-host-data\";\nimport {DisksClaimingConfigInfo} from \"@component/diskmgmt/model/disks-claiming-config-info.data\";\nimport {SpaceEfficiencyService} from \"@service/space-efficiency-service\";\nimport {ClaimOption} from \"@generated/claim-option\";\nimport {VsanClusterType} from \"@generated/vsan-cluster-type\";\nimport {DiskMgmtDiskUtil} from \"@util/disk-mgmt-disk.util\";\nimport {AutoClaimSummaryData} from \"@component/diskmgmt/model/auto-claim-summary.data\";\n\n@WizardPage(\n      VsanUiUtils.getString(\"vsan.cluster.configure.wizard.readyToComplete.title\"),\n      null,\n      [VsanCapabilityProvider, EncryptionPropertyProvider],\n)\n@Component({\n   templateUrl: \"ready-to-complete-page.html\",\n   styleUrls: [\"ready-to-complete-page.scss\"],\n})\nexport class ConfigureVsanSummaryPage implements OnValidate {\n\n   VsanClusterType: typeof VsanClusterType = VsanClusterType;\n   ClaimOption: typeof ClaimOption = ClaimOption;\n\n   @InputProperty()\n   @OutputProperty()\n   vsanConfigSpec: VsanConfigSpec;\n\n   @InputProperty()\n   configType: VsanClusterType;\n\n   @InputProperty()\n   vcCapabilityData: VsanCapabilityData;\n\n   @InputProperty()\n   clusterCapabilityData: VsanCapabilityData;\n\n   @InputProperty()\n   encryptionPermissions: boolean;\n\n   @InputProperty(InputProperty.required(false))\n   disksClaimingConfigInfo: DisksClaimingConfigInfo;\n\n   @InputProperty(InputProperty.required(false))\n   autoClaimedDisks: AutoClaimSummaryData;\n\n   @InputProperty(InputProperty.required(false))\n   isAutoClaim: boolean;\n\n   @InputProperty(InputProperty.required(false))\n   faultDomainNames: string[];\n\n   @InputProperty(InputProperty.required(false))\n   preferredName: string;\n\n   @InputProperty(InputProperty.required(false))\n   preferredDomains: DomainOrHostData[];\n\n   @InputProperty(InputProperty.required(false))\n   secondaryName: string;\n\n   @InputProperty(InputProperty.required(false))\n   secondaryDomains: DomainOrHostData[];\n\n   @InputProperty(InputProperty.required(false))\n   witnessHostName: string;\n\n   @InputProperty(InputProperty.required(false))\n   witnessHost: ManagedObject;\n\n   @InputProperty(InputProperty.required(false))\n   witnessHostDiskMapping: VsanDiskMapping;\n\n   @InputProperty(InputProperty.required(false))\n   storagePoolDisks: string[];\n\n   constructor(private spaceEfficiencyService: SpaceEfficiencyService) {}\n\n   get configTypeLabel(): string {\n      switch (this.configType) {\n         case VsanClusterType.SINGLE_SITE_CLUSTER:\n         case VsanClusterType.CUSTOM_FD_CLUSTER:\n            return VsanUiUtils.getString(\"vsan.cluster.configure.summary.singleSiteCluster\");\n         case VsanClusterType.TWO_HOST_VSAN_CLUSTER:\n            return VsanUiUtils.getString(\"vsan.cluster.configure.summary.roboClusterLabel\");\n         case VsanClusterType.STRETCHED_CLUSTER:\n            return VsanUiUtils.getString(\"vsan.cluster.configure.summary.stretchedClusterLabel\");\n         case VsanClusterType.COMPUTE_ONLY:\n            return VsanUiUtils.getString(\"vsan.cluster.configure.summary.computeOnly\");\n         default:\n            throw new Error(\"Unsupported config type detected: \" + this.configType);\n      }\n   }\n\n   get spaceEfficiencyStatus(): string {\n      return this.spaceEfficiencyService.toLabel(this.vsanConfigSpec.spaceEfficiencyConfig);\n   }\n\n   get vsanMaxStatus(): string {\n      return this.getBooleanPropertyLabel(this.vsanConfigSpec.isVsanMaxEnabled);\n   }\n\n   get allowReducedRedundancyLabel(): string {\n      return this.getBooleanPropertyLabel(this.vsanConfigSpec.allowReducedRedundancy);\n   }\n\n   get dataInTransitEncryptionEnabled(): string {\n      return this.getBooleanPropertyLabel(this.vsanConfigSpec.enableDataInTransitEncryption);\n   }\n\n   get eraseDisksBeforeUseLabel(): string {\n      return this.getBooleanPropertyLabel(this.vsanConfigSpec.eraseDisksBeforeUse);\n   }\n\n   get largeScaleClusterSupportLabel(): string {\n       return this.getBooleanPropertyLabel(this.vsanConfigSpec.advancedOptions &&\n             this.vsanConfigSpec.advancedOptions.largeClusterSupportEnabled);\n   }\n\n   get rdmaLabel(): string {\n      return this.getBooleanPropertyLabel(this.vsanConfigSpec.enableRdma);\n   }\n\n   getBooleanPropertyLabel(property: boolean): string {\n      return VsanUiUtils.getBooleanPropertyLabel(property);\n   }\n\n   hasNewClaimedCapacity(claimOption: ClaimOption): boolean {\n      if (!this.disksClaimingConfigInfo) {\n         return false;\n      }\n\n      return this.disksClaimingConfigInfo.hasNewClaimedCapacity(claimOption);\n   }\n\n   /**\n    * Get managed by vSAN claim options with new claimed capacity\n    */\n   get managedClaimOptions(): ClaimOption[] {\n      // Include vSAN Max auto claim option, where disksClaimingConfigInfo is not populated\n      if (this.vsanConfigSpec.isVsanMaxEnabled && this.isAutoClaim) {\n         return [ClaimOption.SingleTier];\n      } else if (!this.disksClaimingConfigInfo) {\n         return [];\n      }\n\n      return DiskMgmtDiskUtil.MANAGED_BY_VSAN_CLAIM_OPTIONS.filter(\n            claimOption => this.disksClaimingConfigInfo.hasNewClaimedCapacity(claimOption));\n   }\n\n   totalClaimedCapacity(claimOption: ClaimOption): string {\n      if (claimOption === ClaimOption.SingleTier && this.isAutoClaim) {\n         return VsanUiUtils.formatFileSize(this.autoClaimedDisks?.totalClaimedCapacity);\n      } else if (!this.disksClaimingConfigInfo) {\n         return VsanUiUtils.formatFileSize(0);\n      } else if (this.disksClaimingConfigInfo.getOldClaimedCapacity(claimOption) === 0) {\n         return VsanUiUtils.formatFileSize(this.disksClaimingConfigInfo.getClaimedCapacity(claimOption));\n      } else {\n         return VsanUiUtils.getString(\n               \"vsan.cluster.configure.summary.totalAndOldCapacityFormat\",\n               VsanUiUtils.formatFileSize(this.disksClaimingConfigInfo.getClaimedCapacity(claimOption)),\n               VsanUiUtils.formatFileSize(this.disksClaimingConfigInfo.getOldClaimedCapacity(claimOption)));\n      }\n   }\n\n   vsanMaxTotalClaimedDisks(): string {\n      if (this.isAutoClaim) {\n         return VsanUiUtils.getString(\"vsan.cluster.configure.summary.vsanMaxDatastore.claimedDisks.value\",\n               this.autoClaimedDisks?.disksCount,\n               VsanUiUtils.getString(\"vsan.cluster.configure.summary.vsanMaxDatastore.claimedDisks.auto.label\"));\n      }\n\n      return VsanUiUtils.getString(\"vsan.cluster.configure.summary.vsanMaxDatastore.claimedDisks.value\",\n            this.disksClaimingConfigInfo.getClaimedDiskCount(ClaimOption.SingleTier),\n            VsanUiUtils.getString(\"vsan.cluster.configure.summary.vsanMaxDatastore.claimedDisks.manual.label\"));\n   }\n\n   getClaimOptionLabel(claimOption: ClaimOption): string {\n      switch (claimOption) {\n         case ClaimOption.ClaimForStorage:\n            return VsanUiUtils.getString(\"vsan.cluster.configure.summary.totalCapacity\");\n         case ClaimOption.ClaimForCache:\n            return VsanUiUtils.getString(\"vsan.cluster.configure.summary.totalCache\");\n         case ClaimOption.SingleTier:\n            return VsanUiUtils.getString(\"vsan.cluster.configure.summary.vsanMaxDatastore.capacitySize.label\");\n         default:\n            return VsanUiUtils.getString(\"vsan.cluster.configure.summary.capacity\",\n                  DiskMgmtDiskUtil.getLocalizedStorage(claimOption));\n      }\n   }\n\n   get faultDomainsConfigString(): string {\n      if (this.configType === VsanClusterType.TWO_HOST_VSAN_CLUSTER) {\n         return VsanUiUtils.getString(\"vsan.cluster.configure.summary.configureRoboClusterLabel\");\n      } else if (this.configType === VsanClusterType.STRETCHED_CLUSTER) {\n         return VsanUiUtils.getString(\"vsan.cluster.configure.summary.configureStretchedClusterLabel\");\n      } else if (this.configType === VsanClusterType.SINGLE_SITE_CLUSTER\n            || VsanUiUtils.isEmpty(this.faultDomainNames)) {\n         return VsanUiUtils.getString(\"vsan.cluster.configure.summary.fdAndWitnessNoConfigLabel\");\n      } else {\n         return VsanUiUtils.getString(\"vsan.cluster.configure.summary.configureFdsLabel\");\n      }\n   }\n\n   validate = (): string[] => {\n      // If stretched or ROBO cluster then prepare the stretch cluster spec\n      if (this.isStretchedConfig) {\n         this.vsanConfigSpec.stretchedClusterConfig =\n               VsanStretchedClusterConfig.Factory.create(\n                     this.witnessHost,\n                     this.witnessHostDiskMapping,\n                     this.storagePoolDisks,\n                     this.preferredName,\n                     this.getHosts(this.preferredDomains),\n                     this.secondaryName,\n                     this.getHosts(this.secondaryDomains),\n                     true);\n      }\n      // nothing to validate\n      return null;\n   };\n\n   get isStretchedConfig(): boolean {\n      return this.configType === VsanClusterType.TWO_HOST_VSAN_CLUSTER\n            || this.configType === VsanClusterType.STRETCHED_CLUSTER;\n   }\n\n   private getHosts(domainOrHostData: DomainOrHostData[]): ManagedObject[] {\n      const result: ManagedObject[] = [];\n\n      for (const domainOrHost of domainOrHostData) {\n         if (domainOrHost.isHost) {\n            result.push(ManagedObject.fromUid(domainOrHost.uid));\n         } else {\n            for (const host of domainOrHost.children) {\n               result.push(ManagedObject.fromUid(host.uid));\n            }\n         }\n      }\n      return result;\n   }\n}\n","/* Copyright 2021 VMware, Inc. All rights reserved. -- VMware Confidential */\n\nimport {LoadingFlowWrapper} from \"@service/flow/loading-flow-wrapper.data\";\n\n/**\n * This property decorator is supposed to be used along with the @Loader decorator.\n * If an exception is thrown during the execution of the method decorated with @Loader\n * the ErrorHandler method will be invoked. You can define as many ErrorHandlers as you want,\n * but they must be with different names. The name can be provided as input to the decorator.\n * If a name is set to the ErrorHandler it will handle only the errors thrown by Loader functions\n * with the same name. If no name is passed to the ErrorHandler, it will handle only the errors\n * from Loader functions with no name.\n *\n * <pre>\n * // Example 1:\n * @Loader()\n * loadSyncData(): any {\n *    throw new Error(\"Failed to load sync data\");\n * }\n *\n * @ErrorHandler()\n * handleError(err: any) {\n *    // handle the error.\n * }\n *...\n *\n * // Example 2\n *\n * @Loader({name: \"data-loading-flow})\n * async loadAsyncData(): Promise<any> {\n *    return Promise.reject(\"Failed to load async data\");\n * }\n *\n * @ErrorHandler({name: \"data-loading-flow})\n * handleError(err: any) {\n *    // handle the error.\n * }\n * ...\n * </pre>\n */\nexport function ErrorHandler(props?: ErrorHandlerProperties): MethodDecorator {\n   props = props || {};\n   return (targetClass: any, functionName: string, descriptor: PropertyDescriptor): void => {\n      (new LoadingFlowWrapper(targetClass, props.name)).errorHandler = descriptor.value;\n   };\n}\n\n/**\n * Properties of the ErrorHandler decorator.\n */\nexport interface ErrorHandlerProperties {\n\n   /**\n    * Indicates which @Loder should be handled by this @ErrorHandler\n    */\n   name?: string;\n}\n","<!--Copyright 2021-2022 VMware, Inc. All rights reserved. -- VMware Confidential-->\n<ng-container *ngIf=\"vsanConfigSpec.isVsanMaxEnabled\">\n   <vsan-claim-mode-toggle [(isAutoClaim)]=\"isAutoClaim\"\n                           [isAutoClaimAllowed]=\"isAutoClaimAllowed\"\n                           (isAutoClaimChange)=\"onIsAutoClaimChange()\">\n   </vsan-claim-mode-toggle>\n   <vsan-auto-claim-disks *ngIf=\"isAutoClaim\"\n                          [hostsClaimingData]=\"hostsClaimingData\"\n                          (claimedDisksChange)=\"onAutoClaimedDisksChange($event)\">\n   </vsan-auto-claim-disks>\n</ng-container>\n<!-- Do not destroy the components when the toggle is pressed to avoid data re-fetch and rerender -->\n<vsan-claim-disks [ngClass]=\"{'hidden' : isAutoClaim}\"\n                  [isStandalone]=\"false\"\n                  [vsanConfigSpec]=\"vsanConfigSpec\"\n                  [hostsClaimingData]=\"hostsClaimingData\"\n                  (configUpdated)=\"onConfigChange($event)\"\n                  (configValid)=\"isConfigAcceptable=$event\"\n                  (disksClaimingConfigUpdated)=\"onDisksClaimingConfigChange($event)\">\n</vsan-claim-disks>","/* Copyright 2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, OnInit} from \"@angular/core\";\nimport {InputProperty, OutputProperty, WizardPage} from \"@component/wizard/flow-metadata\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {VsanHealthStatus} from \"@generated/vsan-health-status\";\nimport {Loader} from \"@service/flow/loader.decorator\";\nimport {SrMessageType} from \"@service/screen-reader-announcer.service\";\nimport {LoadingIndicator} from \"@service/flow/loading-indicator.decorator\";\nimport {ErrorMessage} from \"@service/flow/error-message.decorator\";\nimport {ConfigureClusterService} from \"@generated/configure-cluster-service\";\nimport {ManagedObject} from \"@service/managed-object\";\nimport {PageControls} from \"@component/wizard/flow-wizard.component\";\nimport {PageItem} from \"@component/wizard/page-item\";\nimport {AlertType} from \"@component/validation/alert-type\";\nimport {IllustratedMessageType} from \"@component/illustrated-message/illustrated-message.component\";\nimport {VsanHealthUtil} from \"@util/vsan-health-util\";\nimport {VsanPrecheckHealthData} from \"@generated/vsan-precheck-health-data\";\nimport {AccordionPanelToggleExpandEventArg} from \"@directive/clr-accordion/clr-accordion-panel.directive\";\n\n@WizardPage(\n      VsanUiUtils.getString(\"vsan.cluster.configure.wizard.vsanMax.title\"),\n      \"\",\n)\n@Component({\n   templateUrl: \"vsan-max-page.html\",\n   styleUrls: [\"vsan-max-page.scss\"],\n})\nexport class VsanMaxPage implements OnInit {\n\n   @InputProperty()\n   clusterRef: ManagedObject;\n\n   @InputProperty()\n   pageControls: PageControls;\n\n   // Use separate outputProperty and assign the value to vsanConfigSpec on Services page,\n   // because it is created from scratch there and any values assigned here would be otherwise lost.\n   @OutputProperty()\n   isVsanMaxWorkflow: boolean;\n\n   @LoadingIndicator()\n   loading: boolean;\n\n   @ErrorMessage()\n   alertMessage: string;\n\n   vsanMaxPrecheckData: VsanPrecheckHealthData;\n\n   selectedTestId: string;\n\n   VsanHealthStatus: typeof VsanHealthStatus = VsanHealthStatus;\n   IllustratedMessageType: typeof IllustratedMessageType = IllustratedMessageType;\n   AlertType: typeof AlertType = AlertType;\n\n   constructor(private configService: ConfigureClusterService) {\n   }\n\n   async ngOnInit(): Promise<void> {\n      (this.pageControls as PageItem).nextButtonIsDisabled = true;\n      await this.fetchVsanMaxPrecheckData();\n      (this.pageControls as PageItem).nextButtonIsDisabled = false;\n   }\n\n   get vsanMaxAlert(): string {\n      if (this.vsanMaxPrecheckData.status === VsanHealthStatus.red) {\n         return VsanUiUtils.getString(\"vsan.cluster.configure.wizard.vsanMax.disabled.warning.ineligible\");\n      }\n\n      return !this.isVsanMaxWorkflow && this.vsanMaxPrecheckData?.status === VsanHealthStatus.green\n            ? VsanUiUtils.getString(\"vsan.cluster.configure.wizard.vsanMax.disabled.warning.eligible\")\n            : null;\n   }\n\n   @Loader({\n      srMessage: \"vsan.cluster.configure.wizard.vsanMax.title\",\n      srMessageType: SrMessageType.PAGE_TITLE,\n   })\n   private async fetchVsanMaxPrecheckData(): Promise<void> {\n      this.vsanMaxPrecheckData = await this.configService.getVsanMaxPrecheckData(this.clusterRef);\n      // Initially enable vSAN Max workflow if there are no issues reported\n      this.isVsanMaxWorkflow = this.vsanMaxPrecheckData?.status === VsanHealthStatus.green;\n      // Preselect the first test\n      if (!VsanUiUtils.isEmpty(this.vsanMaxPrecheckData?.unhealthyTests)) {\n         this.selectedTestId = this.vsanMaxPrecheckData.unhealthyTests[0].helpId;\n      }\n   }\n\n   toggleExpand(args: AccordionPanelToggleExpandEventArg<string>): void {\n      this.selectedTestId = args.isExpanded ? args.model : null;\n   }\n\n   getIconShape(status: VsanHealthStatus): string {\n      return VsanHealthUtil.getVsanHealthStatusIconShape(status);\n   }\n\n   getIconClass(status: VsanHealthStatus): string {\n      return VsanHealthUtil.getVsanHealthStatusIconClass(status);\n   }\n}\n","<!--Copyright 2017-2022 VMware, Inc. All rights reserved. -- VMware Confidential-->\n<clr-radio-container>\n   <clr-radio-wrapper>\n      <input id=\"singleSiteCluster\"\n             type=\"radio\"\n             name=\"configType\"\n             clrRadio\n             [(ngModel)]=\"configType\"\n             [value]=\"VsanClusterType.SINGLE_SITE_CLUSTER\"\n             (change)=\"updateClusterType()\"\n             checked>\n      <label id=\"singleSiteClusterLabel\"\n             for=\"singleSiteCluster\">\n         {{\"vsan.cluster.configure.wizard.configurationType.singleSite.label\" | localized}}\n      </label>\n   </clr-radio-wrapper>\n   <clr-control-helper class=\"description\">\n      {{\"vsan.cluster.configure.wizard.configurationType.singleSite.description\" | localized}}\n   </clr-control-helper>\n</clr-radio-container>\n\n<clr-radio-container>\n   <clr-radio-wrapper>\n      <input id=\"custom-fd-single-site-cluster\"\n             type=\"radio\"\n             name=\"configType\"\n             clrRadio\n             [(ngModel)]=\"configType\"\n             [value]=\"VsanClusterType.CUSTOM_FD_CLUSTER\"\n             (change)=\"updateClusterType()\">\n      <label id=\"custom-fd-single-site-cluster-label\"\n             for=\"custom-fd-single-site-cluster\">\n         {{\"vsan.cluster.configure.wizard.configurationType.customFd.label\" | localized}}\n      </label>\n   </clr-radio-wrapper>\n   <clr-control-helper class=\"description\">\n      {{\"vsan.cluster.configure.wizard.configurationType.customFd.description\" | localized}}\n   </clr-control-helper>\n</clr-radio-container>\n\n<clr-radio-container>\n   <clr-radio-wrapper>\n      <input id=\"twoHostCluster\"\n             type=\"radio\"\n             name=\"configType\"\n             aria-describedby=\"two-host-cluster-description\"\n             clrRadio\n             [(ngModel)]=\"configType\"\n             [value]=\"VsanClusterType.TWO_HOST_VSAN_CLUSTER\"\n             (change)=\"updateClusterType()\">\n      <label for=\"twoHostCluster\">\n         {{\"vsan.cluster.configure.wizard.configurationType.twoHosts.label\" | localized}}\n      </label>\n   </clr-radio-wrapper>\n   <clr-control-helper class=\"description\">\n      {{\"vsan.cluster.configure.wizard.configurationType.twoHosts.description\" | localized}}\n   </clr-control-helper>\n</clr-radio-container>\n\n<clr-radio-container>\n   <clr-radio-wrapper>\n      <input id=\"stretchCluster\"\n             type=\"radio\"\n             name=\"configType\"\n             clrRadio\n             [(ngModel)]=\"configType\"\n             [value]=\"VsanClusterType.STRETCHED_CLUSTER\"\n             (change)=\"updateClusterType()\">\n      <label for=\"stretchCluster\">\n         {{\"vsan.cluster.configure.wizard.configurationType.stretchCluster.label\" | localized}}\n      </label>\n   </clr-radio-wrapper>\n   <clr-control-helper class=\"description\">\n      {{\"vsan.cluster.configure.wizard.configurationType.stretchCluster.description\" | localized}}\n   </clr-control-helper>\n</clr-radio-container>\n\n<clr-radio-container *ngIf=\"vsanGeneralConfig.vcCapabilityData.isComputeOnlySupported\">\n   <clr-radio-wrapper>\n      <input id=\"compute-only\"\n             type=\"radio\"\n             name=\"configType\"\n             clrRadio\n             [disabled]=\"!vsanGeneralConfig.clusterCapabilityData.isComputeOnlySupported\"\n             [(ngModel)]=\"configType\"\n             [value]=\"VsanClusterType.COMPUTE_ONLY\"\n             (change)=\"updateClusterType()\">\n      <label for=\"compute-only\">\n         {{\"vsan.cluster.configure.wizard.configurationType.computeOnly.label\" | localized}}\n      </label>\n   </clr-radio-wrapper>\n   <clr-control-helper class=\"description\">\n      <div>{{\"vsan.cluster.configure.wizard.configurationType.computeOnly.description\" | localized}}</div>\n      <div *ngIf=\"!vsanGeneralConfig.clusterCapabilityData.isComputeOnlySupported\">\n         {{\"vsan.cluster.configure.wizard.configurationType.computeOnly.unsupportedMessage\" | localized}}\n      </div>\n   </clr-control-helper>\n</clr-radio-container>\n","/* Copyright 2017-2020 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Pipe, PipeTransform} from \"@angular/core\";\nimport {BaseHealthState, VsanHealthUtil} from \"@util/vsan-health-util\";\n\n@Pipe({\n   name: \"healthStateLabel\",\n})\nexport class VirtualObjectHealthStateLabelPipe implements PipeTransform {\n   transform(state: BaseHealthState | string): string {\n      return VsanHealthUtil.getVsanObjectHealthStatusText(state);\n   }\n}","/* Copyright 2017-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, OnInit} from \"@angular/core\";\nimport {GeneralConfigData} from \"@component/general-settings/general-config.data\";\nimport {VsanGeneralConfigService} from \"@component/general-settings/vsan-general-config.service\";\nimport {PageSet} from \"@component/wizard/flow-wizard.component\";\nimport {ClaimDisksWitnessHostPage} from \"@component/wizard/shared-pages/claim-disks-witness-host-page.component\";\nimport {FaultDomainsPageComponent} from \"@component/wizard/shared-pages/fault-domains-page.component\";\nimport {SingleSiteFaultDomainsPage} from \"@component/wizard/shared-pages/single-site-fault-domains-page.component\";\nimport {WitnessHostPageComponent} from \"@component/wizard/shared-pages/witness-host-page.component\";\nimport {ConfigureClusterService} from \"@generated/configure-cluster-service\";\nimport {ConfigureStretchedClusterService} from \"@generated/configure-stretched-cluster-service\";\nimport {VsanClusterType} from \"@generated/vsan-cluster-type\";\nimport {VsanStretchedClusterService} from \"@generated/vsan-stretched-cluster-service\";\nimport {ClusterComputeResource} from \"@service/client/dataservice/data-service-property\";\nimport {DataServiceClient} from \"@service/client/dataservice/data-service.service\";\nimport {ManagedObject} from \"@service/managed-object\";\nimport {StatusChangeType, VsanStatusChangeData} from \"@service/status-updates/vsan-status-change.data\";\nimport {VsanStatusService} from \"@service/status-updates/vsan-status.service\";\nimport {Logger} from \"@util/logger\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {WitnessHostUtil} from \"@util/witness-host.util\";\nimport {ClaimDisksPage} from \"./claim-disks-page.component\";\nimport {ConfigTypePage} from \"./config-type-page.component\";\nimport {ConfigureVsanSummaryPage} from \"./ready-to-complete-page.component\";\nimport {ServicesPage} from \"./services-page.component\";\nimport {VsanMaxPage} from \"./vsan-max-page.component\";\n\n@Component({\n   templateUrl: \"configure-wizard.html\",\n   selector: \"vsan-configure-wizard\",\n})\nexport class ConfigureWizardComponent implements OnInit {\n\n   static readonly DEFAULT_CONFIG_TYPE: VsanClusterType = VsanClusterType.SINGLE_SITE_CLUSTER;\n\n   /**\n    * Holds wizard context data, shared between all the pages.\n    */\n   context: any;\n   readonly services: any[] = [ConfigureClusterService, ConfigureStretchedClusterService, VsanStretchedClusterService];\n   private clusterRef: ManagedObject;\n   private generalConfigData: GeneralConfigData;\n\n   errorMessage: string;\n\n   constructor(private dataService: DataServiceClient,\n         private vsanConfigService: VsanGeneralConfigService,\n         private vsanStatusService: VsanStatusService) {\n   }\n\n   async ngOnInit(): Promise<void> {\n      this.clusterRef = ManagedObject.contextObject;\n\n      const vsanConfigPromise: Promise<GeneralConfigData> = this.vsanConfigService\n            .getVsanGeneralConfigData(this.clusterRef);\n\n      const dataServicePromise: Promise<Map<string, any>> = this.dataService.getProperties([\n         ClusterComputeResource.name,\n         ClusterComputeResource.host.length,\n      ], this.clusterRef);\n\n      let dsProperties: Map<string, any>;\n      try {\n         [this.generalConfigData, dsProperties] = await Promise.all([vsanConfigPromise, dataServicePromise]);\n         this.setWizardContext(dsProperties);\n      } catch (e) {\n         Logger.error(\"Unable to get vSAN cluster's configuration and related data service properties: \" + e);\n         this.errorMessage = VsanUiUtils.getString(\"vsan.common.error.dataExtraction\");\n      }\n   }\n\n   private setWizardContext = (properties: Map<string, any>) => {\n      const clusterName: string = properties.get(ClusterComputeResource.name);\n      let hostCount: number = properties.get(ClusterComputeResource.host.length);\n      if (!hostCount) {\n         hostCount = 0;\n      }\n      this.context = {\n         moRef: this.clusterRef,\n         clusterRef: this.clusterRef,\n         clusterName: clusterName,\n         configType: ConfigureWizardComponent.DEFAULT_CONFIG_TYPE,\n         hasDiskGroupsOnWitness: null,\n         hostsInCluster: hostCount,\n         vsanGeneralConfig: this.generalConfigData,\n         isVsanMaxWorkflow: false, // Init here, since the vSAN max page is not always added.\n      };\n   };\n\n   private includeClaimDisksPage = (configType: VsanClusterType,\n         hasDiskGroupsOnWitness: boolean,\n         isWitnessDeployedFromOvf: boolean,\n         isVsanMaxWorkflow: boolean): boolean => {\n      return WitnessHostUtil.isClaimDisksPageVisible(\n            configType, hasDiskGroupsOnWitness, isWitnessDeployedFromOvf, isVsanMaxWorkflow);\n   };\n\n   readonly pages: PageSet[] = [\n      new PageSet([ConfigTypePage]),\n      new PageSet([VsanMaxPage],\n            (vsanGeneralConfig: GeneralConfigData, configType: VsanClusterType) => {\n               return configType !== VsanClusterType.COMPUTE_ONLY\n                     && vsanGeneralConfig?.clusterCapabilityData.isVsanMaxSingleTierSupported;\n            }),\n      new PageSet([ServicesPage],\n            /*\n             * The services page only loads content when capabilities are enabled.\n             * If all of them are disabled we better hide it or it will be empty in the wizard.\n             */\n            (vsanGeneralConfig: GeneralConfigData, configType: VsanClusterType) => {\n               return vsanGeneralConfig\n                     && !(configType === VsanClusterType.COMPUTE_ONLY)\n                     && (vsanGeneralConfig.clusterCapabilityData.isEncryptionSupported\n                           || vsanGeneralConfig.clusterCapabilityData.isCompressionOnlySupported\n                           || vsanGeneralConfig.clusterCapabilityData.isDeduplicationAndCompressionSupported\n                           || vsanGeneralConfig.clusterCapabilityData.isAdvancedClusterOptionsSupported\n                           || vsanGeneralConfig.clusterCapabilityData.isRdmaSupported);\n            }),\n      new PageSet([ClaimDisksPage],\n            (configType: VsanClusterType) => !(configType === VsanClusterType.COMPUTE_ONLY)),\n      new PageSet([SingleSiteFaultDomainsPage],\n            (configType: VsanClusterType) => {\n               return configType === VsanClusterType.CUSTOM_FD_CLUSTER;\n            }),\n      new PageSet([WitnessHostPageComponent],\n            (configType: VsanClusterType) => configType === VsanClusterType.TWO_HOST_VSAN_CLUSTER),\n      new PageSet([FaultDomainsPageComponent, WitnessHostPageComponent],\n            (configType: VsanClusterType) => configType === VsanClusterType.STRETCHED_CLUSTER),\n      new PageSet([ClaimDisksWitnessHostPage], this.includeClaimDisksPage),\n      new PageSet([ConfigureVsanSummaryPage]),\n   ];\n\n   onConfigureFinish(taskRef: ManagedObject): void {\n      this.vsanStatusService.storeChange(new VsanStatusChangeData(taskRef, StatusChangeType.VSAN_SERVICE_ENABLED));\n      VsanUiUtils.closeModalDialog();\n   }\n}\n","/* Copyright 2020-2022 VMware, Inc. All rights reserved. -- VMware Confidential */\nexport class VsanDialogUtil {\n   static readonly CAPACITY_MANAGEMENT_DIALOG: VsanDialogProperties = {\n      width: 800,\n      height: 700,\n   };\n\n   static readonly DELETE_VOLUME_DIALOG: VsanDialogProperties = {\n      width: 500,\n      height: 250,\n   };\n\n   static readonly MIGRATE_VOLUME_DIALOG: VsanDialogProperties = {\n      width: 1030,\n      height: 710,\n   };\n\n   static readonly REAPPLY_VOLUME_POLICY_DIALOG: VsanDialogProperties = {\n      width: 700,\n      height: 250,\n   };\n\n   static readonly DUPLICATE_PCI_ID_MODEL_SELECTION_DIALOG: VsanDialogProperties = {\n      width: 800,\n      height: 500,\n   };\n\n   static readonly HEALTH_RESTORE_ACTION_DIALOG: VsanDialogProperties = {\n      width: 550,\n      height: 250,\n   };\n\n   // Keep in sync with plugin.xml extension point\n   static readonly CLUSTER_POWER_ON_DIALOG: VsanDialogProperties = {\n      width: 600,\n      height: 230,\n   };\n\n   static readonly VM_IO_DIAGNOSTICS_METRICS_DIALOG: VsanDialogProperties = {\n      width: 900,\n      height: 700,\n   };\n\n   static readonly VM_IO_DIAGNOSTICS_LATENCY_DIALOG: VsanDialogProperties = {\n      width: 1000,\n      height: 500,\n   };\n\n   static readonly VM_IO_DIAGNOSTICS_DOM_OWNER_LATENCY_DIALOG: VsanDialogProperties = {\n      width: 1000,\n      height: 400,\n   };\n\n   static readonly PERF_SVC_EDIT_ACTION_DIALOG: VsanDialogProperties = {\n      width: 800,\n      height: 450,\n   };\n\n   static readonly PERF_SVC_ENABLE_ACTION_DIALOG: VsanDialogProperties = {\n      width: 800,\n      height: 250,\n   };\n\n   static readonly CLAIM_DISKS_ACTION_DIALOG: VsanDialogProperties = {\n      width: 1200,\n      height: 650,\n   };\n\n   static readonly VSAN_DISK_CLAIM_ACTION_DIALOG: VsanDialogProperties = {\n      width: 670,\n      height: 300,\n   };\n}\n\nexport class VsanDialogProperties {\n   width: number;\n   height: number;\n}\n","/* Copyright 2017-2020 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, OnInit} from \"@angular/core\";\nimport {ManagedObject} from \"@service/managed-object\";\nimport {InputProperty, OutputProperty, WizardPage} from \"@component/wizard/flow-metadata\";\nimport {OnValidate, PageControls} from \"@component/wizard/flow-wizard.component\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {VsanCapabilityProvider} from \"@generated/vsan-capability-provider\";\nimport {EncryptionPropertyProvider} from \"@generated/encryption-property-provider\";\nimport {VsanConfigSpec} from \"@generated/vsan-config-spec\";\nimport {GeneralConfigData} from \"@component/general-settings/general-config.data\";\nimport {SpaceEfficiencyConfig} from \"@generated/space-efficiency-config\";\nimport {SpaceEfficiencyService} from \"@service/space-efficiency-service\";\nimport {VsanClusterType} from \"@generated/vsan-cluster-type\";\n\n@WizardPage(\n      VsanUiUtils.getString(\"vsan.cluster.configure.wizard.services.title\"),\n      VsanUiUtils.getString(\"vsan.cluster.configure.wizard.services.description\"),\n      [VsanCapabilityProvider, EncryptionPropertyProvider],\n)\n@Component({\n   templateUrl: \"services-page.html\",\n})\nexport class ServicesPage implements OnInit, OnValidate {\n\n   VsanClusterType: typeof VsanClusterType = VsanClusterType;\n\n   @InputProperty()\n   vsanGeneralConfig: GeneralConfigData;\n\n   @InputProperty()\n   configType: VsanClusterType;\n\n   @InputProperty()\n   hasHybridDiskGroups: boolean;\n\n   @InputProperty()\n   pageControls: PageControls;\n\n   @InputProperty()\n   clusterRef: ManagedObject;\n\n   @InputProperty()\n   isVsanMaxWorkflow: boolean;\n\n   @InputProperty()\n   @OutputProperty()\n   vsanConfigSpec: VsanConfigSpec;\n\n   constructor(private spaceEfficiencyService: SpaceEfficiencyService) {\n   }\n\n   ngOnInit(): void {\n      // ensure RDMA is always disabled for Configure vSAN wizard\n      if (this.vsanGeneralConfig.clusterCapabilityData.isRdmaSupported) {\n         this.vsanConfigSpec.enableRdma = false;\n      }\n   }\n\n   updateVsanConfig(config: VsanConfigSpec) {\n      this.vsanConfigSpec = VsanUiUtils.deepClone(config);\n   }\n\n   validate(): string[] {\n      const validationErrors: string[] = this.vsanGeneralConfig.validateConfig(this.vsanConfigSpec);\n\n      const spaceEfficiency: SpaceEfficiencyConfig = this.vsanConfigSpec.spaceEfficiencyConfig;\n      if (this.spaceEfficiencyService.isOnlyAllFlashSupportedForClaimingDisks(spaceEfficiency)\n            && this.hasHybridDiskGroups) {\n         validationErrors.push(\n               VsanUiUtils.getString(\"vsan.generalConfig.hybridGroupsExist.warning\",\n                     this.spaceEfficiencyService.toLabel(spaceEfficiency)));\n      }\n\n      // If there are validation errors dismiss the disk wiping warning as errors are more important.\n      return validationErrors.length > 0 ? validationErrors : null;\n   }\n}\n","<!--Copyright 2017-2020 VMware, Inc. All rights reserved. -- VMware Confidential-->\n<!-- Config type -->\n<vsan-summary-entry [label]=\"'vsan.cluster.configure.summary.configurationType' | localized\">\n   <span id=\"config-type-entry\">\n      {{configTypeLabel}}\n   </span>\n</vsan-summary-entry>\n\n<!-- Compute-only clusters do not support the standard vSAN services -->\n<ng-container *ngIf=\"configType !== VsanClusterType.COMPUTE_ONLY\">\n   <!-- vSAN Max -->\n   <vsan-summary-entry *ngIf=\"clusterCapabilityData.isVsanMaxSingleTierSupported\"\n                       [label]=\"'vsan.cluster.configure.summary.vsanMax' | localized\">\n      <span id=\"vsan-max-entry\">{{vsanMaxStatus}}</span>\n   </vsan-summary-entry>\n\n   <!-- Space Efficiency -->\n   <vsan-summary-entry [label]=\"'vsan.cluster.configure.summary.spaceEfficiencyLabel' | localized\">\n      <span id=\"dedup-enabled-entry\">\n         {{spaceEfficiencyStatus}}\n      </span>\n   </vsan-summary-entry>\n\n   <!-- Data-At-Rest Encryption -->\n   <ng-container *ngIf=\"vcCapabilityData.isEncryptionSupported && encryptionPermissions\">\n      <vsan-summary-entry *ngIf=\"!vsanConfigSpec.enableDataAtRestEncryption\"\n                          [label]=\"'vsan.cluster.configure.summary.dataAtRestEncryptionLabel' | localized\">\n         <span id=\"dedup-disabled-entry\">\n            {{'vsan.common.no' | localized}}\n         </span>\n      </vsan-summary-entry>\n      <vsan-summary-entry *ngIf=\"vsanConfigSpec.enableDataAtRestEncryption\"\n                          [label]=\"'vsan.cluster.configure.summary.dataAtRestEncryptionLabel' | localized\">\n         <span id=\"dedup-kmip-entry\">\n            {{\"vsan.cluster.configure.summary.encryption.withKmipCluster\" | localized: vsanConfigSpec.kmipClusterId}}\n         </span>\n      </vsan-summary-entry>\n      <vsan-summary-entry *ngIf=\"vsanConfigSpec.enableDataAtRestEncryption\"\n                          [label]=\"'vsan.cluster.configure.summary.eraseDisksBeforeUse' | localized\">\n         <span id=\"erase-disks-entry\">\n            {{eraseDisksBeforeUseLabel}}\n         </span>\n      </vsan-summary-entry>\n   </ng-container>\n\n   <!-- Allow Reduced Redundancy -->\n   <vsan-summary-entry [label]=\"'vsan.cluster.configure.summary.allowReducedRedundancy' | localized\">\n      <span id=\"allow-redundancy-entry\">\n         {{allowReducedRedundancyLabel}}\n      </span>\n   </vsan-summary-entry>\n\n   <!-- Data-In-Transit Encryption -->\n   <ng-container *ngIf=\"clusterCapabilityData.isDataInTransitEncryptionSupported\">\n      <vsan-summary-entry [label]=\"'vsan.cluster.configure.summary.dataInTransitEncryptionLabel' | localized\">\n         <span id=\"data-in-transit-entry\">\n            {{dataInTransitEncryptionEnabled}}\n         </span>\n      </vsan-summary-entry>\n   </ng-container>\n\n   <!-- Large Scale Cluster Support -->\n   <!-- Show setting for large cluster support (more than 32 hosts) if it is NOT supported natively -->\n   <vsan-summary-entry *ngIf=\"!clusterCapabilityData.isNativeLargeClusterSupported\"\n                       [label]=\"'configureVsan.settings.largeScaleClusterSupport.label' | localized\">\n      <span id=\"large-scale-cluster-support\">\n         {{largeScaleClusterSupportLabel}}\n      </span>\n   </vsan-summary-entry>\n\n   <!-- Disk Claiming Config -->\n   <ng-container *ngIf=\"hasNewClaimedCapacity(ClaimOption.ClaimForStorage)\">\n      <vsan-summary-entry [label]=\"'vsan.cluster.configure.summary.diskClaiming' | localized\">\n         <span id=\"group-type-entry\">\n            {{(disksClaimingConfigInfo.claimAllFlash\n               ? 'vsan.cluster.configure.summary.diskClaiming.allFlash'\n               : 'vsan.cluster.configure.summary.diskClaiming.hybrid') | localized}}\n         </span>\n      </vsan-summary-entry>\n      <!-- TODO dtsvetkova: confirm with Abbey if we want to include warning in Ready to complete page. -->\n      <vsan-validation *ngIf=\"disksClaimingConfigInfo.disksNotEquallySpread\"\n                       alertType=\"warning\"\n                       [alert]=\"'vsan.cluster.configure.summary.semiAutoClaimDialog.warning.notOptimumSelection' | localized\"\n                       [isSmall]=\"true\"\n                       [allowClose]=\"false\">\n      </vsan-validation>\n      <vsan-validation *ngIf=\"disksClaimingConfigInfo.mixedDiskClaiming\"\n                       alertType=\"warning\"\n                       [alert]=\"'vsan.cluster.configure.summary.semiAutoClaimDialog.warning.mixedCreateEditMode' | localized\"\n                       [isSmall]=\"true\"\n                       [allowClose]=\"false\">\n      </vsan-validation>\n      <vsan-summary-entry [label]=\"getClaimOptionLabel(ClaimOption.ClaimForStorage)\">\n         <span id=\"total-capacity-entry\">\n            {{totalClaimedCapacity(ClaimOption.ClaimForStorage)}}\n         </span>\n      </vsan-summary-entry>\n      <vsan-summary-entry [label]=\"getClaimOptionLabel(ClaimOption.ClaimForCache)\">\n         <span id=\"total-cache-entry\">\n            {{totalClaimedCapacity(ClaimOption.ClaimForCache)}}\n         </span>\n      </vsan-summary-entry>\n   </ng-container>\n\n   <!-- Claimed disks for vSAN Max -->\n   <ng-container *ngIf=\"vsanConfigSpec.isVsanMaxEnabled\">\n      <vsan-summary-entry [label]=\"'vsan.cluster.configure.summary.vsanMaxDatastore.claimedDisks.label' | localized\">\n         <span id=\"total-disks-vsan-max-entry\">{{vsanMaxTotalClaimedDisks()}}</span>\n      </vsan-summary-entry>\n   </ng-container>\n\n   <!-- Total claimed capacity for all types of claimed disks -->\n   <ng-container *ngIf=\"managedClaimOptions.length\">\n      <vsan-summary-entry *ngFor=\"let claimOption of managedClaimOptions\"\n                          [label]=\"getClaimOptionLabel(claimOption)\">\n         <span id=\"{{'total-' + claimOption + '-entry'}}\">\n            {{totalClaimedCapacity(claimOption)}}\n         </span>\n      </vsan-summary-entry>\n   </ng-container>\n\n   <!-- Fault domains -->\n   <vsan-summary-entry [label]=\"'vsan.cluster.configure.summary.faultDomainsAndWitness' | localized\">\n      <span id=\"fault-domains-entry\">\n         {{faultDomainsConfigString}}\n      </span>\n   </vsan-summary-entry>\n\n   <ng-container *ngIf=\"isStretchedConfig\">\n      <vsan-summary-entry [label]=\"'vsan.cluster.configure.summary.preferredFd' | localized\">\n         <span id=\"preferred-domain-entry\">\n            {{preferredName}}\n         </span>\n      </vsan-summary-entry>\n      <vsan-summary-entry [label]=\"'vsan.cluster.configure.summary.secondaryFd' | localized\">\n         <span id=\"secnodary-domain-entry\">\n            {{secondaryName}}\n         </span>\n      </vsan-summary-entry>\n      <vsan-summary-entry [label]=\"'vsan.cluster.configure.summary.witnessHostLabel' | localized\">\n         <span id=\"witness-host-entry\">\n            {{witnessHostName}}\n         </span>\n      </vsan-summary-entry>\n   </ng-container>\n\n   <!-- Fault domain names -->\n   <ng-container *ngIf=\"faultDomainNames?.length\">\n      <vsan-summary-entry [label]=\"'vsan.cluster.configure.summary.faultDomains' | localized\">\n         <div> <!-- Needed to keep the domain names on separate lines, as vsan-summary-entry has flex display -->\n            <div *ngFor=\"let domainName of faultDomainNames\" id=\"domain_{{domainName}}_\">\n               {{domainName}}\n            </div>\n         </div>\n      </vsan-summary-entry>\n   </ng-container>\n\n   <!-- RDMA config -->\n   <ng-container *ngIf=\"clusterCapabilityData.isRdmaSupported\">\n      <vsan-summary-entry [label]=\"'vsan.services.network.rdmaSupport.label' | localized\">\n         <span id=\"rdma-configuration-entry\">\n            {{rdmaLabel}}\n         </span>\n      </vsan-summary-entry>\n   </ng-container>\n</ng-container>\n\n<ng-container *ngIf=\"configType === VsanClusterType.COMPUTE_ONLY\">\n   <vsan-validation [alertType]=\"'info'\"\n                    [alert]=\"'vsan.cluster.configure.summary.computeOnlyClusterInfoMessage' | localized\"\n                    [isSmall]=\"true\"\n                    [allowClose]=\"false\">\n   </vsan-validation>\n</ng-container>\n","/* Copyright 2017-2022 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, OnInit} from \"@angular/core\";\nimport {AutoClaimSummaryData} from \"@component/diskmgmt/model/auto-claim-summary.data\";\nimport {DisksClaimingConfigInfo} from \"@component/diskmgmt/model/disks-claiming-config-info.data\";\nimport {InputProperty, OutputProperty, WizardPage} from \"@component/wizard/flow-metadata\";\nimport {OnValidate, PageControls} from \"@component/wizard/flow-wizard.component\";\nimport {PageItem} from \"@component/wizard/page-item\";\nimport {DiskManagementService} from \"@generated/disk-management-service\";\nimport {SpaceEfficiencyConfig} from \"@generated/space-efficiency-config\";\nimport {VsanClaimDisksData} from \"@generated/vsan-claim-disks-data\";\nimport {VsanClaimHostDiskMappingsSpec} from \"@generated/vsan-claim-host-disk-mappings-spec\";\nimport {VsanConfigSpec} from \"@generated/vsan-config-spec\";\nimport {DiskMgmtUtil} from \"@util/disk-mgmt.util\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\n\n@WizardPage(\n      VsanUiUtils.getString(\"vsan.configure.claimDisksPage.title\"),\n      VsanUiUtils.getString(\"vsan.configure.claimDisksPage.description\"),\n      [DiskManagementService],\n)\n@Component({\n   templateUrl: \"claim-disks-page.html\",\n   styleUrls: [\"claim-disks-page.scss\"],\n})\nexport class ClaimDisksPage implements OnInit, OnValidate {\n\n   @InputProperty()\n   pageControls: PageControls;\n\n   @InputProperty()\n   @OutputProperty()\n   vsanConfigSpec: VsanConfigSpec;\n\n   private _hostsClaimingData: Map<string, VsanClaimDisksData>;\n\n   get hostsClaimingData(): Map<string, VsanClaimDisksData> {\n      return this._hostsClaimingData;\n   }\n\n   @InputProperty()\n   set hostsClaimingData(value: Map<string, VsanClaimDisksData>) {\n      this._hostsClaimingData = new Map<string, VsanClaimDisksData>(Object.entries(value));\n   }\n\n   @OutputProperty()\n   disksClaimingConfigInfo: DisksClaimingConfigInfo;\n\n   @OutputProperty()\n   autoClaimedDisks: AutoClaimSummaryData;\n\n   @OutputProperty()\n   isAutoClaim: boolean = false;\n\n   dataEfficiency: SpaceEfficiencyConfig;\n   isConfigAcceptable: boolean;\n   isAutoClaimAllowed: boolean = false;\n\n   // Set to \"true\" when disk data for manual claiming is collected\n   private isManualClaimDiskDataLoaded: boolean = false;\n\n   ngOnInit(): void {\n      this.dataEfficiency = this.vsanConfigSpec.spaceEfficiencyConfig;\n      // Set auto claim ON for vsan MAX, when there are compatible disks\n      this.isAutoClaimAllowed = DiskMgmtUtil.hasVsanMaxCompatibleDisks([...this.hostsClaimingData?.values()]);\n      this.isAutoClaim = this.vsanConfigSpec.isVsanMaxEnabled && this.isAutoClaimAllowed;\n      // Disable the next button, when manual claim mode page is loaded initially\n      // as it loads some more data upon initialization.\n      if (!this.isAutoClaim) {\n         this.disableNextButton();\n      }\n   }\n\n   validate(): string[] {\n      if (!this.isConfigAcceptable) {\n         return [VsanUiUtils.getString(\"vsan.dialog.semiAutoClaimDialog.confError.notAcceptableErrors\")];\n      }\n\n      return null;\n   }\n\n   onConfigChange(diskMappings: VsanClaimHostDiskMappingsSpec[]): void {\n      this.vsanConfigSpec.diskMappings = diskMappings;\n      this.pageControls.rebuildToc();\n      (this.pageControls as PageItem).nextButtonIsDisabled = false;\n      this.isManualClaimDiskDataLoaded = true;\n   }\n\n   onIsAutoClaimChange(): void {\n      this.vsanConfigSpec.isDiskClaimVsanManaged = this.isAutoClaim;\n      // Disable Next button on initial switch between auto/manual claim if the manual claim disk data is not yet\n      // collected.\n      if (!this.isManualClaimDiskDataLoaded && !this.isAutoClaim) {\n         this.disableNextButton();\n      }\n   }\n\n   onDisksClaimingConfigChange(disksClaimingConfig: DisksClaimingConfigInfo): void {\n      this.disksClaimingConfigInfo = disksClaimingConfig;\n   }\n\n   onAutoClaimedDisksChange(autoClaimedDisks: AutoClaimSummaryData): void {\n      this.autoClaimedDisks = autoClaimedDisks;\n   }\n\n   private disableNextButton(): void {\n      (this.pageControls as PageItem).nextButtonIsDisabled = true;\n   }\n}\n","/* Copyright 2019-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {NgModule} from \"@angular/core\";\nimport {CommonModule} from \"@angular/common\";\nimport {FormsModule, ReactiveFormsModule} from \"@angular/forms\";\nimport {RouterModule, Routes} from \"@angular/router\";\nimport {ClarityModule} from \"@clr/angular\";\nimport {GeneralSettingsModule} from \"@component/general-settings/general-settings.module\";\nimport {ConfigureWizardComponent} from \"./configure-wizard.component\";\nimport {ClaimDisksPage} from \"./claim-disks-page.component\";\nimport {ConfigTypePage} from \"./config-type-page.component\";\nimport {EnableServicesComponent} from \"./enable-services.component\";\nimport {ConfigureVsanSummaryPage} from './ready-to-complete-page.component';\nimport {ServicesPage} from \"./services-page.component\";\nimport {NgDragDropModule} from \"ng-drag-drop\";\nimport {VsanCommonModule} from \"app/vsan/common/vsan-common.module\";\nimport {FlowWizardModule} from \"@component/wizard/flow-wizard.module\";\nimport {WizardSharedPagesModule} from \"@component/wizard/shared-pages/wizard-shared-pages.module\";\nimport {DiskmgmtCommonModule} from \"@component/diskmgmt/diskmgmt-common.module\";\nimport {FaultDomainValidationService} from \"@service/fault-domain-validation.service\";\nimport {VsanMaxPage} from \"./vsan-max-page.component\";\nimport {IllustratedMessageModule} from \"@component/illustrated-message/illustrated-message.module\";\nimport {HealthDetailsCardModule} from \"../../../health/health-details-card.module\";\n\nconst configureWizardRoutes: Routes = [\n   {\n      path: \"\",\n      component: ConfigureWizardComponent\n   },\n   {\n      path: \"emptyCluster\",\n      component: EnableServicesComponent\n   },\n];\n\n@NgModule({\n   imports: [\n      CommonModule,\n      FormsModule,\n      ReactiveFormsModule,\n      ClarityModule,\n      NgDragDropModule,\n      VsanCommonModule,\n      FlowWizardModule,\n      GeneralSettingsModule,\n      DiskmgmtCommonModule,\n      WizardSharedPagesModule,\n      RouterModule.forChild(configureWizardRoutes),\n      IllustratedMessageModule,\n      HealthDetailsCardModule,\n   ],\n   declarations: [\n      ConfigureWizardComponent,\n      ServicesPage,\n      ClaimDisksPage,\n      ConfigTypePage,\n      EnableServicesComponent,\n      ConfigureVsanSummaryPage,\n      VsanMaxPage,\n   ],\n   entryComponents: [\n      ConfigTypePage,\n      ServicesPage,\n      ClaimDisksPage,\n      ConfigureVsanSummaryPage,\n      VsanMaxPage,\n   ],\n   providers: [FaultDomainValidationService],\n})\nexport class ConfigureWizardModule {\n}","<!--Copyright 2020 VMware, Inc. All rights reserved. -- VMware Confidential-->\n<vsan-general-settings\n      *ngIf=\"vsanGeneralConfig\"\n      [clusterRef]=\"clusterRef\"\n      [config]=\"vsanGeneralConfig\"\n      [showTitles]=\"false\"\n      [showLargeScaleClusterSupportOption]=\"!vsanGeneralConfig.clusterCapabilityData.isNativeLargeClusterSupported\"\n      [showRdmaSupportOption]=\"vsanGeneralConfig.clusterCapabilityData.isRdmaSupported\"\n      [resetRdmaStatus]=\"true\"\n      [configType]=\"configType\"\n      [isVsanMaxWorkflow]=\"isVsanMaxWorkflow\"\n      (vsanConfigSpecChange)=\"updateVsanConfig($event)\">\n</vsan-general-settings>\n","/* Copyright 2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {\n   AfterViewInit,\n   ComponentFactoryResolver,\n   Directive,\n   ElementRef,\n   Host,\n   Input,\n   Optional,\n   Renderer2,\n   Self,\n} from \"@angular/core\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {NavigationService} from \"@navigation/navigation.service\";\nimport {ClrButtonBaseDirective} from \"@directive/clr-button-group/clr-button-base.directive\";\nimport {ClrButton} from \"@clr/angular\";\n\n/**\n * Decorates a button or an anchor as external link. Requires one of the optional parameters articleId, helpId or url.\n *\n * @param external-link: Optional. Localization key of the text label of the external link. If omitted default label\n * will be used - \"Learn more\" for anchors or \"Ask VMWare\" for buttons.\n * @param articleId - Optional. Id of article in knowledge base.\n * @param helpId - Optional. Help id which will redirect to Knowledge Base.\n * @param url - Optional. External URL.\n */\n@Directive({\n   selector: \"a[external-link], button[external-link], clr-button[external-link]\",\n})\nexport class ExternalLinkDirective extends ClrButtonBaseDirective implements AfterViewInit {\n   private readonly ASK_VMWARE_DEFAULT_TEXT_KEY: string = \"vsan.common.askVMware\";\n   private readonly LEARN_MORE_DEFAULT_TEXT_KEY: string = \"vsan.common.learnMore\";\n\n   private readonly CONTAINER_CLASS: string = \"icon-name-container\";\n   private readonly NAVIGATION_EVENT_TYPE: string = \"click\";\n   private readonly LEAD_TO_NOWHERE_URL: string = \"javascript://\";\n   private readonly HTML_ELEMENT_SPAN_NAME: string = \"span\";\n   private readonly HTML_ELEMENT_ICON_NAME: string = \"clr-icon\";\n   private readonly HTML_ELEMENT_ROLE_ATTR_NAME: string = \"role\";\n   private readonly HTML_ELEMENT_ROLE_ATTR_VALUE: string = \"link\";\n   private readonly ICON_SHAPE_ATTR_NAME: string = \"shape\";\n   private readonly ICON_SHAPE_ATTR_VALUE: string = \"pop-out\";\n   private readonly ICON_SIZE_ATTR_NAME: string = \"size\";\n   private readonly ICON_SIZE_ATTR_VALUE: string = \"16\";\n   private readonly ICON_CLASS_ATTR_NAME: string = \"class\";\n   private readonly ICON_CLASS_ATTR_VALUE: string = \"link\";\n   private readonly ICON_TITLE_ATTR_NAME: string = \"title\";\n\n   private readonly KB_URL: string = \"http://kb.vmware.com/kb/\";\n\n   @Input(\"external-link\")\n   anchorText: string;\n\n   @Input()\n   articleId: string;\n\n   @Input()\n   helpId: string;\n\n   @Input()\n   url: string;\n\n   constructor(private el: ElementRef<HTMLElement>,\n         private resolver: ComponentFactoryResolver,\n         private renderer: Renderer2,\n         private navigationService: NavigationService,\n         // this variable will be initialized only if the host is clr-button\n         @Host() @Self() @Optional() clrButton: ClrButton) {\n      super(clrButton);\n   }\n\n   ngAfterViewInit(): void {\n      const element: HTMLElement = this.el.nativeElement;\n      // continue only if element is HTML link or button\n      if (!this.isLink(element) && !this.isButton(element)) {\n         // element is clr-button, wait until html button for it is resolved - handled by resloveButton\n         return;\n      }\n      this.prepareExternalLink(element);\n   }\n\n   resolveButton(clrButton: ClrButton, button: HTMLButtonElement, index: number): void {\n      // only if element is clr-button. At this point the html button is already resolved. Apply on it.\n      this.prepareExternalLink(button);\n   }\n\n   private prepareExternalLink(element: HTMLElement): void {\n      this.renderer.addClass(element, this.CONTAINER_CLASS);\n\n      this.setText(element);\n      if (this.isLink(element)) {\n         this.decorateLink(element);\n      } else {\n         this.addLinkRole(element);\n      }\n\n      this.initializeNavigationHandler(element);\n   }\n\n   private isButton(element: HTMLElement): boolean {\n      return element instanceof HTMLButtonElement;\n   }\n\n   private isLink(element: HTMLElement): boolean {\n      return element instanceof HTMLAnchorElement;\n   }\n\n   private setText(element: HTMLElement): void {\n      const span: HTMLSpanElement = this.renderer.createElement(this.HTML_ELEMENT_SPAN_NAME);\n      span.innerText = this.getText(element);\n      this.renderer.appendChild(element, span);\n\n      const icon: HTMLSpanElement = this.renderer.createElement(this.HTML_ELEMENT_ICON_NAME);\n      icon.setAttribute(this.ICON_SHAPE_ATTR_NAME, this.ICON_SHAPE_ATTR_VALUE);\n      icon.setAttribute(this.ICON_SIZE_ATTR_NAME, this.ICON_SIZE_ATTR_VALUE);\n      icon.setAttribute(this.ICON_CLASS_ATTR_NAME, this.ICON_CLASS_ATTR_VALUE);\n      // Set title of the icon for screen readers clarity\n      icon.setAttribute(this.ICON_TITLE_ATTR_NAME, VsanUiUtils.getString(\"vsan.screenReader.label.externalLink.icon\"));\n      this.renderer.appendChild(element, icon);\n   }\n\n   private getText(element: HTMLElement): string {\n      if (this.anchorText) {\n         return this.anchorText;\n      }\n      const key: string = this.isButton(element) ? this.ASK_VMWARE_DEFAULT_TEXT_KEY : this.LEARN_MORE_DEFAULT_TEXT_KEY;\n      return VsanUiUtils.getString(key);\n   }\n\n   private decorateLink(element: HTMLElement): void {\n      const linkElement: HTMLLinkElement = element as HTMLLinkElement;\n      // don't use href attribute. If omitted, the link will be not visualized properly.\n      linkElement.href = this.LEAD_TO_NOWHERE_URL;\n      // display link on same line\n      linkElement.style.display = \"inline-flex\";\n   }\n\n   private initializeNavigationHandler(element: HTMLElement): void {\n      element.addEventListener(this.NAVIGATION_EVENT_TYPE, () => {\n         if (this.helpId) {\n            this.navigationService.askVMware(this.helpId);\n            return;\n         }\n         if (this.articleId) {\n            this.navigationService.navigateToAddress(`${this.KB_URL}${this.articleId}`);\n            return;\n         }\n         if (this.url) {\n            this.navigationService.navigateToAddress(this.url);\n         }\n      });\n   }\n\n   // Indicate external navigation by assigning \"link\" role\n   private addLinkRole(element: HTMLElement): void {\n      this.renderer.setAttribute(element, this.HTML_ELEMENT_ROLE_ATTR_NAME, this.HTML_ELEMENT_ROLE_ATTR_VALUE);\n   }\n}","<vsan-create-prompt\n      [title]=\"'vsan.cluster.configure.wizard.title' | localized\"\n      [confirmText]=\"'vsan.common.apply' | localized\"\n      [blockContent]=\"loading || saving\"\n      [blockButton]=\"loading || saving\"\n      [(alertMessages)]=\"errors\"\n      (onConfirm)=\"confirm()\">\n   <vsan-validation\n         id=\"emptyClusterWarning\"\n         [alert]=\"'vsan.generalConfig.emptyClusterWarningText' | localized\"\n         [allowClose]=\"false\"\n         [alertType]=\"'warning'\">\n   </vsan-validation>\n   <vsan-general-settings\n         *ngIf=\"!loading\"\n         [clusterRef]=\"clusterRef\"\n         [config]=\"config\"\n         [showTitles]=\"false\"\n         [showComputeOnlyOption]=\"true\"\n         [showVsanMaxOption]=\"true\"\n         [showAllowReducedRedundancyOption]=\"false\"\n         [showLargeScaleClusterSupportOption]=\"true\"\n         (vsanConfigSpecChange)=\"vsanConfigSpec=$event\">\n   </vsan-general-settings>\n</vsan-create-prompt>\n","/* Copyright 2017-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, OnInit, ViewChild} from \"@angular/core\";\nimport {GeneralConfigData} from \"@component/general-settings/general-config.data\";\nimport {GeneralSettingsComponent} from \"@component/general-settings/general-settings.component\";\nimport {VsanGeneralConfigService} from \"@component/general-settings/vsan-general-config.service\";\nimport {ConfigureClusterService} from \"@generated/configure-cluster-service\";\nimport {VsanConfigSpec} from \"@generated/vsan-config-spec\";\nimport {ErrorHandler} from \"@service/flow/error-handler.decorator\";\nimport {LoaderName} from \"@service/flow/loader-name\";\nimport {Loader} from \"@service/flow/loader.decorator\";\nimport {LoadingIndicator} from \"@service/flow/loading-indicator.decorator\";\nimport {ManagedObject} from \"@service/managed-object\";\nimport {SrMessageType} from \"@service/screen-reader-announcer.service\";\nimport {StatusChangeType, VsanStatusChangeData} from \"@service/status-updates/vsan-status-change.data\";\nimport {VsanStatusService} from \"@service/status-updates/vsan-status.service\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\n\n/**\n * Shown instead of the Configure vSAN wizard in case the cluster has no hosts.\n */\n@Component({\n   templateUrl: \"enable-services.html\",\n   styleUrls: [\"enable-services.scss\"],\n   selector: \"vsan-configure-empty-cluster\",\n})\nexport class EnableServicesComponent implements OnInit {\n\n   @ViewChild(GeneralSettingsComponent)\n   generalSettingsComponent: GeneralSettingsComponent;\n\n   config: GeneralConfigData;\n   vsanConfigSpec: VsanConfigSpec;\n\n   clusterRef: ManagedObject;\n\n   @LoadingIndicator({name: LoaderName.ON_INIT})\n   loading: boolean;\n\n   @LoadingIndicator({name: LoaderName.ON_CONFIRM})\n   saving: boolean;\n\n   errors: string[] = [];\n\n   constructor(private configService: ConfigureClusterService,\n         private vsanConfigService: VsanGeneralConfigService,\n         private vsanStatusService: VsanStatusService) {\n   }\n\n   @Loader({\n      name: LoaderName.ON_INIT,\n      srMessage: \"vsan.cluster.configure.wizard.title\",\n      srMessageType: SrMessageType.PAGE_TITLE,\n   })\n   async ngOnInit(): Promise<void> {\n      this.clusterRef = ManagedObject.contextObject;\n      this.config = await this.vsanConfigService.getVsanGeneralConfigData(this.clusterRef);\n      this.vsanConfigSpec = this.config.cloneVsanConfigSpec();\n   }\n\n   @ErrorHandler({name: LoaderName.ON_INIT})\n   private handleInitError(error: string): void {\n      this.errors.push(error);\n   }\n\n   @Loader({name: LoaderName.ON_CONFIRM})\n   async confirm(): Promise<void> {\n      const errors: string[] = this.generalSettingsComponent.config.validateConfig(this.vsanConfigSpec);\n      if (errors.length > 0) {\n         this.errors = errors;\n      } else {\n         const task: any = await this.configService.configureCluster(this.clusterRef, this.vsanConfigSpec);\n\n         this.vsanStatusService.storeChange(\n               new VsanStatusChangeData(task, StatusChangeType.VSAN_SERVICE_ENABLED));\n         VsanUiUtils.closeModalDialog(task);\n      }\n   }\n\n   @ErrorHandler({name: LoaderName.ON_CONFIRM})\n   private handleConfirmError(error: string): void {\n      this.errors = [error];\n   }\n}\n","/* Copyright 2017-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, OnInit} from \"@angular/core\";\nimport {InputProperty, OutputProperty, WizardPage} from \"@component/wizard/flow-metadata\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {OnValidate, PageControls} from \"@component/wizard/flow-wizard.component\";\nimport {HostFaultDomainData} from \"@generated/host-fault-domain-data\";\nimport {DomainOrHostData} from \"@generated/domain-or-host-data\";\nimport {VsanClusterType} from \"@generated/vsan-cluster-type\";\nimport {GeneralConfigData} from \"@component/general-settings/general-config.data\";\nimport {VsanConfigSpec} from \"@generated/vsan-config-spec\";\nimport {ClusterMode} from \"@generated/cluster-mode\";\nimport {FaultDomainValidationService} from \"@service/fault-domain-validation.service\";\n\n@WizardPage(\n      VsanUiUtils.getString(\"vsan.cluster.configure.wizard.configurationType.title\"),\n      VsanUiUtils.getString(\"vsan.cluster.configure.wizard.configurationType.description\"),\n)\n@Component({\n   templateUrl: \"config-type-page.html\",\n   styleUrls: [\"config-type-page.scss\"],\n})\nexport class ConfigTypePage implements OnValidate, OnInit {\n\n   VsanClusterType: typeof VsanClusterType = VsanClusterType;\n   proceedWarning: string;\n   proceedToNextPage: () => void;\n\n   // Input\n\n   @InputProperty()\n   hostsInCluster: number;\n\n   @InputProperty()\n   pageControls: PageControls;\n\n   @InputProperty()\n   stretchClusterSupported: boolean;\n\n   @InputProperty()\n   clusterHostFaultDomainData: HostFaultDomainData[];\n\n   @InputProperty()\n   vsanGeneralConfig: GeneralConfigData;\n\n   // Output\n\n   @OutputProperty()\n   vsanConfigSpec: VsanConfigSpec;\n\n   @InputProperty()\n   @OutputProperty()\n   configType: VsanClusterType;\n\n   @OutputProperty()\n   preferredName: string;\n\n   @OutputProperty()\n   preferredDomains: DomainOrHostData[];\n\n   @OutputProperty()\n   secondaryName: string;\n\n   @OutputProperty()\n   secondaryDomains: DomainOrHostData[];\n\n   constructor(private faultDomainValidationService: FaultDomainValidationService) {}\n\n   ngOnInit(): void {\n      this.vsanConfigSpec = this.vsanGeneralConfig.cloneVsanConfigSpec();\n      this.vsanConfigSpec.clusterMode = null;\n   }\n\n   validate(): string[] | Promise<string[]> {\n      const validationErrors: string[] = this.getValidationErrors();\n      if (validationErrors.length > 0) {\n         return validationErrors;\n      }\n\n      return null; // proceed directly\n   }\n\n   private getValidationErrors(): string[] {\n      const validationErrors: string[] = [];\n\n      switch (this.configType) {\n         case VsanClusterType.TWO_HOST_VSAN_CLUSTER:\n            if (this.hostsInCluster !== 2) {\n               validationErrors.push(\n                     VsanUiUtils.getString(\"vsan.generalConfig.wrongHostNumberForRobo\", this.hostsInCluster));\n            }\n\n            Array.prototype.push.apply(validationErrors,\n                  this.faultDomainValidationService.getFaultDomainValidationErrors(this.clusterHostFaultDomainData));\n            break;\n         case VsanClusterType.STRETCHED_CLUSTER:\n            if (!this.stretchClusterSupported) {\n               validationErrors.push(VsanUiUtils.getString(\"vsan.generalConfig.stretchedClusterNotSupported\"));\n            } else if (this.hostsInCluster < 2) {\n               validationErrors.push(VsanUiUtils.getString(\"vsan.generalConfig.notEnoughHostsForStretchedCluster\"));\n            }\n\n            Array.prototype.push.apply(validationErrors,\n                  this.faultDomainValidationService.getFaultDomainValidationErrors(this.clusterHostFaultDomainData));\n            break;\n      }\n      return validationErrors;\n   }\n\n   validateSelection(): void {\n      this.pageControls.rebuildToc();\n      this.pageControls.clearValidationErrors();\n\n      const errorMessages: string[] = this.getValidationErrors();\n      if (errorMessages) {\n         this.pageControls.addValidationErrors(errorMessages);\n      }\n\n      this.applyDefaultDomains(this.configType === VsanClusterType.TWO_HOST_VSAN_CLUSTER);\n   }\n\n   updateClusterType(): void {\n      if (this.configType === VsanClusterType.COMPUTE_ONLY) {\n         this.vsanConfigSpec.clusterMode = ClusterMode.COMPUTE;\n      } else {\n         this.vsanConfigSpec.clusterMode = null;\n      }\n\n      this.validateSelection();\n   }\n\n   private applyDefaultDomains(useDefaults: boolean): void {\n      if (useDefaults && this.clusterHostFaultDomainData.length === 2) {\n         this.preferredName = VsanUiUtils.getString(\n               \"vsan.faultDomains.stretchedCluster.wizard.configure.page.faultDomains.defaultPreferredName\");\n         this.preferredDomains = [this.convertDataModel(this.clusterHostFaultDomainData[0])];\n         this.secondaryName = VsanUiUtils.getString(\n               \"vsan.faultDomains.stretchedCluster.wizard.configure.page.faultDomains.defaultSecondaryName\");\n         this.secondaryDomains = [this.convertDataModel(this.clusterHostFaultDomainData[1])];\n      } else {\n         this.preferredName = null;\n         this.preferredDomains = null;\n         this.secondaryName = null;\n         this.secondaryDomains = null;\n      }\n   }\n\n   private convertDataModel(source: HostFaultDomainData): DomainOrHostData {\n      return DomainOrHostData.Factory.create(\n            source.hostUid,\n            source.name,\n            true,\n            source.primaryIconId,\n            false,\n            false,\n            null,\n            null);\n   }\n}\n","<!--Copyright 2021 VMware, Inc. All rights reserved. -- VMware Confidential-->\n<vsan-validation id=\"vsan-max-validation\"\n                 *ngIf=\"alertMessage\"\n                 [allowClose]=\"false\"\n                 [alert]=\"alertMessage\">\n</vsan-validation>\n<div class=\"centered-content\" *ngIf=\"loading\">\n   <span class=\"spinner spinner-inline\"></span>\n   <span id=\"loading-pre-checks\">{{\"vsan.cluster.configure.wizard.vsanMax.loading\" | localized}}</span>\n</div>\n<ng-container *ngIf=\"!loading && vsanMaxPrecheckData\">\n   <clr-toggle-container>\n      <clr-toggle-wrapper>\n         <input type=\"checkbox\"\n                clrToggle\n                id=\"vsan-max-toggle\"\n                [disabled]=\"vsanMaxPrecheckData.status === VsanHealthStatus.red\"\n                [(ngModel)]=\"isVsanMaxWorkflow\"\n                name=\"vsan-max-toggle\"/>\n         <label for=\"vsan-max-toggle\">\n            {{\"vsan.cluster.configure.wizard.vsanMax.toggle\" | localized}}\n         </label>\n      </clr-toggle-wrapper>\n   </clr-toggle-container>\n   <vsan-validation *ngIf=\"vsanMaxAlert\"\n                    id=\"vsan-max-alert\"\n                    [alert]=\"vsanMaxAlert\"\n                    [alertType]=\"AlertType.WARNING\"\n                    [allowClose]=\"false\"\n                    [isSmall]=\"true\">\n   </vsan-validation>\n   <ul *ngIf=\"vsanMaxPrecheckData.status === VsanHealthStatus.green else compatibilityChecks\"\n       class=\"list-unstyled\"\n       id=\"vsan-max-description-container\">\n      <ng-container [ngTemplateOutlet]=\"descriptionListItem\"\n                    [ngTemplateOutletContext]=\"{label: 'vsan.cluster.configure.wizard.vsanMax.description.performance',\n                          description: 'vsan.cluster.configure.wizard.vsanMax.description.performance.description',\n                          image: IllustratedMessageType.FILTER_NO_RESULT}\">\n      </ng-container>\n      <ng-container [ngTemplateOutlet]=\"descriptionListItem\"\n                    [ngTemplateOutletContext]=\"{label: 'vsan.cluster.configure.wizard.vsanMax.description.storageEfficiency',\n                          description: 'vsan.cluster.configure.wizard.vsanMax.description.storageEfficiency.description',\n                          image: IllustratedMessageType.FILTER_NO_RESULT}\">\n      </ng-container>\n      <ng-container [ngTemplateOutlet]=\"descriptionListItem\"\n                    [ngTemplateOutletContext]=\"{label: 'vsan.cluster.configure.wizard.vsanMax.description.storageCost',\n                          description: 'vsan.cluster.configure.wizard.vsanMax.description.storageCost.description',\n                          image: IllustratedMessageType.FILTER_NO_RESULT}\">\n      </ng-container>\n   </ul>\n</ng-container>\n\n<ng-template #descriptionListItem let-label=\"label\" let-description=\"description\" let-image=\"image\">\n   <li>\n      <vsan-illustrated-message [type]=\"image\"></vsan-illustrated-message>\n      <div class=\"column-flex-container\">\n         <label class=\"clr-control-label\">{{label | localized}}</label>\n         <span>{{description | localized}}</span>\n      </div>\n   </li>\n</ng-template>\n\n<ng-template #compatibilityChecks>\n   <div class=\"compatibility-checks\">\n      <h6>{{\"vsan.cluster.configure.wizard.vsanMax.compatibilityChecks\" | localized}}</h6>\n      <clr-accordion clrAccordionMultiPanel=\"true\">\n         <clr-accordion-panel *ngFor=\"let test of vsanMaxPrecheckData.unhealthyTests\"\n                              [clrAccordionPanelOpen]=\"test.helpId === selectedTestId\"\n                              [vsan-panel-id]=\"test.helpId\"\n                              [vsan-panel-model]=\"test.helpId\"\n                              (accordionPanelToggleExpand)=\"toggleExpand($event)\">\n            <clr-accordion-title class=\"icon-name-container\">\n               <clr-icon [attr.shape]=\"getIconShape(test.status)\"\n                         class=\"is-solid\"\n                         [ngClass]=\"getIconClass(test.status)\"\n                         [attr.size]=\"18\">\n               </clr-icon>\n               <span title=\"{{test.testDescription}}\">{{test.testName}}</span>\n            </clr-accordion-title>\n            <clr-accordion-content *clrIfExpanded>\n               <!-- Edit permissions are checked before the wizard is opened -->\n               <vsan-health-details-card id=\"test-details\"\n                                         class=\"details-card\"\n                                         [data]=\"test\"\n                                         [hasEditPermissions]=\"true\"\n                                         [showTestName]=\"false\">\n               </vsan-health-details-card>\n            </clr-accordion-content>\n         </clr-accordion-panel>\n      </clr-accordion>\n   </div>\n</ng-template>","<vsan-validation *ngIf=\"errorMessage\" [alert]=\"errorMessage\" [allowClose]=\"false\"></vsan-validation>\n<vsan-flow-wizard\n      [title]=\"'vsan.cluster.configure.wizard.title' | localized\"\n      [pageSets]=\"pages\"\n      [contextProperties]=\"context\"\n      [startingTaskProperty]=\"'configureClusterTask'\"\n      [services]=\"services\"\n      (onFinish)=\"onConfigureFinish($event)\">\n</vsan-flow-wizard>\n"],"sourceRoot":"webpack:///"}