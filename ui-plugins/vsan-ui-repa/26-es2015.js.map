{"version":3,"sources":["./src/app/generated/vsan-fault-domain-spec.ts","./src/app/vsan/common/component/diskmgmt/diskmgmt-common.module.ts","./src/app/vsan/common/component/diskmgmt/disks-property-retriever.ts"],"names":[],"mappings":"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","file":"26-es2015.js","sourcesContent":["\nexport interface VsanFaultDomainSpec {\n\n   faultDomain: string;\n   hostRef: any;\n} //class VsanFaultDomainSpec\n\nexport module VsanFaultDomainSpec{\nexport class Factory {\n\n   static create = (faultDomain: string, hostRef: any): VsanFaultDomainSpec => {\n      return { faultDomain: faultDomain, hostRef: hostRef, };\n   }\n\n\n} //class Factory\n\n} //module VsanFaultDomainSpec\n","/* Copyright 2019-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {NgModule} from \"@angular/core\";\nimport {CommonModule} from \"@angular/common\";\nimport {FormsModule} from \"@angular/forms\";\nimport {ClarityModule} from \"@clr/angular\";\nimport {DisksPropertyRetriever} from \"@component/diskmgmt/disks-property-retriever\";\nimport {ValidationModule} from \"@component/validation/validation.module\";\nimport {CommonPipeModule} from \"@pipe/common-pipe.module\";\nimport {CreateDiskGroupComponent} from \"@component/diskmgmt/create-disk-group.component\";\nimport {ClaimDisksComponent} from \"@component/diskmgmt/claim-disks.component\";\nimport {ValidationPanelComponent} from \"@component/diskmgmt/validation-panel.component\";\nimport {VsanCommonModule} from \"../../vsan-common.module\";\nimport {SpaceEfficiencyService} from \"@service/space-efficiency-service\";\nimport {VsanChartModule} from \"@component/chart/chart.module\";\nimport {VsanCapacityService} from \"@component/capacity/capacity.service\";\nimport {DisksCapacityChartComponent} from \"@component/diskmgmt/disks-capacity-chart.component\";\nimport {ClaimForPmemComponent} from \"@component/diskmgmt/claim-for-pmem.component\";\nimport {ClaimForVsanComponent} from \"@component/diskmgmt/claim-for-vsan.component\";\nimport {ClaimForVsanDirectComponent} from \"@component/diskmgmt/claim-for-vsan-direct.component\";\nimport {DisksGroupByPerspectiveComponent} from \"@component/diskmgmt/perspective/disks-group-by-perspective.component\";\nimport {TransportTypePipe} from \"../../../disk-management/views/pipes/transport-type.pipe\";\nimport {ClaimForVsanMaxComponent} from \"@component/diskmgmt/claim-for-vsan-max.component\";\nimport {ClaimModeToggleComponent} from \"@component/diskmgmt/claim-mode-toggle.component\";\nimport {AutoClaimDisksComponent} from \"@component/diskmgmt/auto-claim-disks.component\";\nimport {SelectDisksComponent} from \"@component/diskmgmt/select-disks.component\";\n\n@NgModule({\n   imports: [\n      CommonModule,\n      FormsModule,\n      ClarityModule,\n      ValidationModule,\n      CommonPipeModule,\n      VsanCommonModule,\n      VsanChartModule,\n   ],\n   declarations: [\n      CreateDiskGroupComponent,\n      ClaimDisksComponent,\n      ClaimModeToggleComponent,\n      AutoClaimDisksComponent,\n      DisksCapacityChartComponent,\n      ValidationPanelComponent,\n      ClaimForVsanComponent,\n      ClaimForPmemComponent,\n      ClaimForVsanMaxComponent,\n      ClaimForVsanDirectComponent,\n      DisksGroupByPerspectiveComponent,\n      TransportTypePipe,\n      SelectDisksComponent,\n   ],\n   exports: [\n      CreateDiskGroupComponent,\n      ClaimDisksComponent,\n      AutoClaimDisksComponent,\n      ClaimModeToggleComponent,\n      ClaimForPmemComponent,\n      ClaimForVsanComponent,\n      ClaimForVsanDirectComponent,\n      DisksGroupByPerspectiveComponent,\n      TransportTypePipe,\n      SelectDisksComponent,\n   ],\n   providers: [\n      SpaceEfficiencyService,\n      VsanCapacityService,\n      DisksPropertyRetriever,\n   ],\n})\nexport class DiskmgmtCommonModule {\n}\n","/* Copyright 2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Injectable} from \"@angular/core\";\nimport {ResultItem} from \"@service/client/core/query.data\";\nimport {ClusterComputeResource, HostStorageSystem, HostSystem} from \"@service/client/dataservice/data-service-property\";\nimport {DataServiceQueryResult} from \"@service/client/dataservice/data-service.data\";\nimport {DataServiceClient} from \"@service/client/dataservice/data-service.service\";\nimport {VpxdModelFactory} from \"@service/client/vpxd/vpxd-model-factory.service\";\nimport {DataServiceResult} from \"@service/data-access.service\";\nimport {ManagedObject, ManagedObjectUtils} from \"@service/managed-object\";\n\n// TODO (REPA) After switch to remote plugin:\n//  * move to a proper service\n//  * create proper UI models for all the data being retrieved. Currently we cannot do so because the data in the local\n//  plugin is retrieved from H5C provider which returns its own model.\n@Injectable()\nexport class DisksPropertyRetriever {\n   private static readonly ICON_ID: string = \"primaryIconId\";\n\n   private static readonly MO_PREFIX_HOST: string = \"host\";\n   private static readonly MO_PREFIX_STORAGE_SYSTEM: string = \"storageSystem\";\n\n   constructor(private dataService: DataServiceClient,\n         private vpxdModelFactory: VpxdModelFactory) {\n   }\n\n   async getPropertiesForHosts(clusterRef: ManagedObject): Promise<DataServiceResult[]> {\n      const hostRefs: ManagedObject[] = await this.dataService\n            .getProperty(ClusterComputeResource.host.id, clusterRef);\n      const storageSystemRefs: ManagedObject[] = hostRefs.map(this.hostRefToStorateSystemRef);\n\n      let hostPropertiesResult: DataServiceResult[];\n      let storageDevicesPropertiesResult: DataServiceResult[];\n      [hostPropertiesResult, storageDevicesPropertiesResult] = await Promise.all([\n         this.getHostProperties(hostRefs),\n         this.getStorageDeviceProperties(storageSystemRefs),\n      ]);\n      return [...hostPropertiesResult, ...storageDevicesPropertiesResult];\n   }\n\n   async getStorageDevicePropertiesByHost(hostRef: ManagedObject): Promise<DataServiceResult[]> {\n      return this.getStorageDeviceProperties([this.hostRefToStorateSystemRef(hostRef)]);\n   }\n\n   static readonly PROP_VSAN_STORAGE_ADAPTER_DEVICES: string = \"vsanStorageAdapterDevices\";\n\n   private async getStorageDeviceProperties(storageSystemRefs: ManagedObject[]): Promise<DataServiceResult[]> {\n      const storageDevices: DataServiceQueryResult = await this.dataService\n            .select(HostStorageSystem.storageDeviceInfo.hostBusAdapter,\n                  HostStorageSystem.storageDeviceInfo.scsiLun,\n                  HostStorageSystem.storageDeviceInfo.plugStoreTopology.path,\n                  HostStorageSystem.storageDeviceInfo.plugStoreTopology.adapter,\n                  HostStorageSystem.storageDeviceInfo.plugStoreTopology.target,\n                  HostStorageSystem.storageDeviceInfo.plugStoreTopology.device)\n            .fromMoRef(...storageSystemRefs)\n            .execute();\n      return storageDevices.resultItems.map((ri: ResultItem) => {\n         const adapters: any[] = ri.get(HostStorageSystem.storageDeviceInfo.hostBusAdapter);\n         const luns: any[] = ri.get(HostStorageSystem.storageDeviceInfo.scsiLun);\n\n         // The PlugStoreTopology property contains the mapping between LUNs and other objects\n         // https://opengrok.eng.vmware.com/source/xref/main.perforce.1666/bora/vim/vmodl/vim/host/PlugStoreTopology.java#15\n         const topologyDevices: any[] = ri.get(HostStorageSystem.storageDeviceInfo.plugStoreTopology.device);\n         const topologyAdapters: any[] = ri.get(HostStorageSystem.storageDeviceInfo.plugStoreTopology.adapter);\n         const topologyPaths: any[] = ri.get(HostStorageSystem.storageDeviceInfo.plugStoreTopology.path);\n         const topologyTargets: any[] = ri.get(HostStorageSystem.storageDeviceInfo.plugStoreTopology.target);\n\n         // LUN-to-TRANSPORT mapping\n         // topologyDevice.path[] -> topologyPath.key\n         // topologyPath.target -> topologyTargets.key\n         // topologyTarget.transport\n\n         // LUN-to-ADAPTER mapping\n         // lun.key -> topologyDevices.lun\n         // topologyDevices.key -> topologyPath.device\n         // topologyPath.adapter -> topologyAdapters.key\n         // topologyAdapters.adapter -> adapter.key\n\n         const storageDeviceData: any[] = luns.map(lun => {\n            const topologyDevice: any = topologyDevices.find(td => td.lun === lun.key);\n            const topologyPath: any = topologyPaths.find(p => p.device === topologyDevice.key);\n            const topologyAdapter: any = topologyAdapters.find(ta => ta.key === topologyPath.adapter);\n            const adapter: any = adapters.find(a => a.key === topologyAdapter.adapter);\n            const topologyTarget: any = topologyTargets.find(t => t.key === topologyPath.target);\n\n            // This model is defined in the H5C code base. We need to stick to it as long as we have the local\n            // plugin part supported.\n            return {\n               underlyingLun: lun,\n               transport: this.getTransport(topologyTarget?.transport),\n               adapter: adapter.device,\n            };\n         });\n\n         const storageSystemRef: ManagedObject = ri.resourceObject;\n         const hostRef: ManagedObject = this.storageSystemRefToHostRef(storageSystemRef);\n         return this.createDataServiceResult(hostRef, DisksPropertyRetriever.PROP_VSAN_STORAGE_ADAPTER_DEVICES, storageDeviceData);\n      });\n   }\n\n   private async getHostProperties(hostRefs: ManagedObject[]): Promise<DataServiceResult[]> {\n      const hostProps: DataServiceQueryResult = await this.dataService\n            .select(HostSystem.name, HostSystem.config.product.version)\n            .fromMoRef(...hostRefs)\n            .execute();\n      const result: DataServiceResult[] = [];\n      hostProps.resultItems.forEach((ri: ResultItem) => {\n         const hostRef: ManagedObject = ri.resourceObject;\n         result.push(this.createDataServiceResult(hostRef, DisksPropertyRetriever.ICON_ID, ManagedObjectUtils.getObjectTypeIcon(hostRef)));\n         ri.propertyValues.forEach(((value: any, key: string) => {\n            result.push(this.createDataServiceResult(hostRef, key, value));\n         }));\n      });\n      return result;\n   }\n\n   private storageSystemRefToHostRef(storageSystemRef: ManagedObject): ManagedObject {\n      return ManagedObject.create(HostSystem.type,\n            storageSystemRef.value.replace(DisksPropertyRetriever.MO_PREFIX_STORAGE_SYSTEM, DisksPropertyRetriever.MO_PREFIX_HOST),\n            storageSystemRef.serverGuid);\n   }\n\n   private hostRefToStorateSystemRef(mo: ManagedObject): ManagedObject {\n      return ManagedObject.create(HostStorageSystem.type,\n            mo.value.replace(DisksPropertyRetriever.MO_PREFIX_HOST, DisksPropertyRetriever.MO_PREFIX_STORAGE_SYSTEM),\n            mo.serverGuid);\n   }\n\n   private createDataServiceResult(obj: ManagedObject, propertyName: string, value: any): DataServiceResult {\n      return {\n         resourceObject: obj,\n         value: value,\n         propertyName: propertyName,\n      } as DataServiceResult;\n   }\n\n   private getTransport(transport: any): string[] {\n      if (!transport) {\n         return [];\n      }\n\n      // https://opengrok.eng.vmware.com/source/xref/vim-clients.h5c-main.perforce.1666/h5c-main/applications/vsphere-client/server/modules-api/src/main/java/com/vmware/vsphere/client/storage/adapters/StorageDeviceTransport.java#37\n      const clazz: string = this.vpxdModelFactory.getObjectType(transport);\n      switch (clazz) {\n         case TransportType.HostFibreChannelOverEthernetTargetTransport:\n            return [\"FCOETRANSPORT\"];\n         case TransportType.HostFibreChannelTargetTransport:\n            return [\"FCTRANSPORT\"];\n         case TransportType.HostInternetScsiTargetTransport:\n            return [\"ISCSITRANSPORT\"];\n         case TransportType.HostParallelScsiTargetTransport:\n            return [\"PARALLELTRANSPORT\"];\n         case TransportType.HostBlockAdapterTargetTransport:\n            return [\"BLOCKTRANSPORT\"];\n         case TransportType.HostSerialAttachedTargetTransport:\n            return [\"SASTRANSPORT\"];\n         case TransportType.HostPcieTargetTransport:\n            return [\"PCIETRANSPORT\"];\n         case TransportType.HostRdmaTargetTransport:\n            return [\"RDMATRANSPORT\"];\n         case TransportType.HostTcpTargetTransport:\n            return [\"TCPTRANSPORT\"];\n         default:\n            return [];\n      }\n   }\n}\n\nenum TransportType {\n   HostFibreChannelOverEthernetTargetTransport = \"HostFibreChannelOverEthernetTargetTransport\",\n   HostFibreChannelTargetTransport = \"HostFibreChannelTargetTransport\",\n   HostInternetScsiTargetTransport = \"HostInternetScsiTargetTransport\",\n   HostParallelScsiTargetTransport = \"HostParallelScsiTargetTransport\",\n   HostBlockAdapterTargetTransport = \"HostBlockAdapterTargetTransport\",\n   HostSerialAttachedTargetTransport = \"HostSerialAttachedTargetTransport\",\n   HostPcieTargetTransport = \"HostPcieTargetTransport\",\n   HostRdmaTargetTransport = \"HostRdmaTargetTransport\",\n   HostTcpTargetTransport = \"HostTcpTargetTransport\",\n}\n\n\n"],"sourceRoot":"webpack:///"}