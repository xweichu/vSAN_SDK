{"version":3,"sources":["./src/app/vsan/health/view/model/health-perspective-data.ts","./src/app/vsan/common/util/reactive-form-util.ts","./src/app/vsan/health/view/card/health-nav-tab.html","./src/app/vsan/common/util/promise/promise-baton.ts","./src/app/vsan/health/view/card/health-nav-tab.component.ts","./src/app/vsan/health/view/health-checks.html","./src/app/vsan/common/component/action-button/button-title.directive.ts","./src/app/vsan/common/directive/clr-button-group/clr-button-group-common.directive.ts","./src/app/vsan/health/view/health-overview.component.ts","./src/app/vsan/health/model/health-tests.data.ts","./src/app/vsan/health/view/health-checks.component.ts","./src/app/vsan/health/health-checks.module.ts","./src/app/vsan/common/component/action-button/button-group.directive.ts","./src/app/vsan/common/util/promise/race-condition-safe.decorator.ts","./src/app/vsan/health/view/health-overview.html"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA,kFAAkF;AACG;AACzB;AAE5D;;GAEG;AACI,MAAM,qBAAqB;IA8B/B,YAAmB,6BAAsC,EAAE,YAAqB,EAAE,cAAuB;QAAtF,kCAA6B,GAA7B,6BAA6B,CAAS;QACtD,IAAI,CAAC,YAAY,EAAE;YAChB,YAAY,GAAG,IAAI,IAAI,EAAE,CAAC,OAAO,EAAE,CAAC;SACtC;QACD,IAAI,CAAC,EAAE,GAAG,YAAY,CAAC;QACvB,IAAI,CAAC,cAAc,EAAE;YAClB,cAAc,GAAG,YAAY,GAAG,2EAAiB,CAAC,mBAAmB,CAAC;SACxE;QACD,IAAI,CAAC,IAAI,GAAG,cAAc,CAAC;IAC9B,CAAC;IAnCD,IAAI,IAAI,CAAC,KAAa;QACnB,IAAI,CAAC,KAAK,EAAE;YACT,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;YAClB,OAAO;SACT;QACD,IAAI,CAAC,KAAK,GAAG,2EAAiB,CAAC,kBAAkB,CAAC,KAAK,CAAC,CAAC;IAC5D,CAAC;IAED,IAAI,IAAI;QACL,OAAO,IAAI,CAAC,KAAK,CAAC;IACrB,CAAC;IAID,IAAI,EAAE,CAAC,KAAa;QACjB,IAAI,CAAC,KAAK,EAAE;YACT,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC;YAChB,OAAO;SACT;QACD,IAAI,CAAC,GAAG,GAAG,2EAAiB,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC;IACxD,CAAC;IAED,IAAI,EAAE;QACH,OAAO,IAAI,CAAC,GAAG,CAAC;IACnB,CAAC;IAaD,IAAI,SAAS,CAAC,KAAoB;QAC/B,IAAI,CAAC,IAAI,GAAG,KAAK,CAAC,IAAI,CAAC;QACvB,IAAI,CAAC,EAAE,GAAG,KAAK,CAAC,EAAE,CAAC;IACtB,CAAC;IAED,IAAI,SAAS;QACV,OAAO,IAAI,oGAAa,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,EAAE,CAAC,CAAC;IAChD,CAAC;IAED,MAAM,CAAC,KAA4B;QAChC,OAAO,KAAK;YACN,KAAK,CAAC,6BAA6B,IAAI,IAAI,CAAC,6BAA6B;YACzE,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI;YACvB,KAAK,CAAC,EAAE,IAAI,IAAI,CAAC,EAAE,CAAC;IAC7B,CAAC;IAED,KAAK;QACF,OAAO,IAAI,qBAAqB,CAAC,IAAI,CAAC,6BAA6B,EAAE,IAAI,CAAC,EAAE,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;IAC5F,CAAC;CACH;;;;;;;;;;;;;;ACnED;AAAA;AAAA;AAAA,6EAA6E;AACZ;AAE1D;UAAM,gBAAgB;;IAEF,wCAAuB,GAAW,GAAG,CAAC;IAE9D;;OAEG;IACI,sCAAqB,GAAG,CAAC,SAAoB,EAAQ,EAAE;QAC3D,SAAS,CAAC,aAAa,EAAE,CAAC;QAC1B,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;YAC7C,MAAM,OAAO,GAAG,SAAS,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;YACrC,OAAO,CAAC,aAAa,CAAC,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC,CAAC;YAC1C,IAAI,OAAO,YAAY,wDAAS,EAAE;gBAC/B,gBAAgB,CAAC,qBAAqB,CAAC,OAAO,CAAC,CAAC;aAClD;iBAAM,IAAI,OAAO,YAAY,wDAAS,EAAE;gBACtC,OAAO,CAAC,QAAQ,CAAC,OAAO,CAClB,CAAC,YAAuB,EAAE,EAAE,CAAC,gBAAgB,CAAC,qBAAqB,CAAC,YAAY,CAAC,CAAC,CAAC;aAC3F;iBAAM,IAAI,OAAO,YAAY,0DAAW,EAAE;gBACxC,gBAAgB,CAAC,gBAAgB,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;aAC/C;QACJ,CAAC,CAAC,CAAC;IACN,CAAC,CAAC;IAEK,iCAAgB,GAAG,CAAC,QAAuB,EAAQ,EAAE;QACzD,QAAQ,CAAC,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE;YAC1B,OAAO,CAAC,aAAa,CAAC,EAAC,QAAQ,EAAE,IAAI,EAAC,CAAC,CAAC;YACxC,OAAO,CAAC,sBAAsB,CAAC;gBAC5B,QAAQ,EAAE,KAAK;gBACf,SAAS,EAAE,IAAI;aACjB,CAAC,CAAC;QACN,CAAC,CAAC,CAAC;IACN,CAAC,CAAC;IAEF;;OAEG;IACI,mDAAkC,GAAG,CAAC,SAAoB,EAAE,EAAE;QAClE,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE;YAC/C,IAAI,SAAS,CAAC,GAAG,CAAC,OAAO,CAAC,YAAY,0DAAW,EAAE;gBAChD,SAAS,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,sBAAsB,EAAE,CAAC;aAClD;QACJ,CAAC,CAAC;IACL,CAAC,CAAC;IAEK,mCAAkB,GAAG,CAAC,GAAG,KAAe,EAAU,EAAE;QACxD,OAAO,KAAK,CAAC,IAAI,CAAC,gBAAgB,CAAC,uBAAuB,CAAC,CAAC;IAC/D,CAAC,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2GCxCF,iJAAsD,qFACnD,skBAAsF,IAAW,6EACpG,yDADa,mBAAoB,QAAC,mBAAqC,wBAApE,YAAsF,EAA5E,SAAoB,EAAC,SAAqC;2GAGvE,8jBAA+E,oFAC5E,6jBAAqE,IAAW,6EACnF,mDAFiC,+BAAqB,EAAC,mBAAuB,cAA9E,YAA+E,EAA9C,SAAqB,EAAC,SAAuB,mDACjE,mBAA8B,kBAAxC,YAAqE,EAA3D,SAA8B;;mEAduC,0EACrF;YAAA;YAAA,YAK0C;YADlC;;gCAAmB;;YAJ3B;QAAA,aAK0C,oFAEvC,MAA2B,6EAC3B,oZAAsD,IAEhD,6EACN,MAA2B,6EAC3B,oZAA+E,IAEzE,+EAEN,sKAA6C,8FAE7C,MAAM,0EACT,MAAS,0EACT,mDAZQ,mBAA0B,qBAA/B,YAAsD,EAAjD,SAA0B,GAI1B,oBAA2B,qBAAhC,YAA+E,EAA1E,SAA2B,mDAZ3B,kGAAW,GAGX,mBAA6B,aAE7B,mBAAiC,aALzC,YAK0C,EALlC,SAAW,EAGX,SAA6B,EAE7B,SAAiC,GAWV,oGAAgB,GAA5C,aAA6C,EAAjB,SAAgB,GAAC,kDAE7C;AAAA;;;;;;;;;;;;;;;;;ACnBH;AAAA;AAAA;AAAA,6EAA6E;AACV;AAE5D,MAAM,YAAY;IAGtB;QACG,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC;IAC9B,CAAC;IAED;;;;;;;;;;;;;OAaG;IACH,WAAW,CAAC,OAAyB,EAAE,cAAc,GAAY,KAAK;QACnE,IAAI,CAAC,aAAa,EAAE,CAAC;QACrB,0GAA0G;QAC1G,qEAAqE;QACrE,IAAI,CAAC,cAAc,GAAG,IAAI,kFAAiB,CAAC,OAAO,EAAE,cAAc,CAAC,CAAC;QACrE,OAAO,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC;IACtC,CAAC;IAED;;OAEG;IACH,aAAa;QACV,IAAI,IAAI,CAAC,cAAc,EAAE;YACtB,IAAI,CAAC,cAAc,CAAC,MAAM,EAAE,CAAC;SAC/B;IACJ,CAAC;CACH;;;;;;;;;;;;;;ACxCD;AAAA;AAAA;AAAA;AAAA,kFAAkF;AACb;AACf;AAS/C,MAAM,qBAAqB;IALlC;QAuBG,eAAU,GAAY,KAAK,CAAC;QAG5B,cAAS,GAAyB,IAAI,0DAAY,EAAE,CAAC;QAErD,YAAO,GAAG,GAAS,EAAE;YAClB,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;QAChC,CAAC,CAAC;IAcL,CAAC;IAZE,IAAI,kBAAkB;QACnB,OAAO,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC;IAC7B,CAAC;IAED,IAAI,WAAW;QACZ,MAAM,WAAW,GAAW,qEAAc,CAAC,kCAAkC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QAC3F,OAAO,WAAW,CAAC,CAAC,CAAC,SAAS,WAAW,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC;IACpD,CAAC;IAED,IAAI,eAAe;QAChB,OAAO,qEAAc,CAAC,4BAA4B,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IACnE,CAAC;CACH;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2GC/CK,wHAA+C;2GADlD,gJAA+C,qFAC5C,8XAA+C,IAAe,6EACjE,mDADiB,mBAAgC,eAA9C,YAA+C,EAAjC,SAAgC;;mEAU9C;YAAA;YAAA,YAOwE;YAHlD;;gCAA4C;;YAJlE;QAAA,mtBAOwE,sFACxE,mDAPsB,mBAAuC,2BAEvC,mBAA+B,iBAE/B,mBAAwB,mBAHxB,mBAAsB,YAF5C,YAOwE,EANlD,SAAuC,EAEvC,SAA+B,EAE/B,SAAwB,EAHxB,SAAsB;AAAA;;mEAV/C,wJAA4E,qFACzE,ujCAA2C,uFACxC;YAAA;YAAA;YAAA;;;;;;;;;;gCAGsD;;YAA/C;;gCAA6C;;YAHpD;QAAA,ypDAGsD,uFACtD,2lBAA4C,6IAAqD,IAAQ,gFAC5G,MAAqB,gFACrB,qZAOwE,IACjD,6EAC1B,mDAhBG,YAA2C,GAGjC,oBAA8B,qBAFrC,aAGsD,EAD/C,UAA8B,GAD9B,4CAA8B,EADrC,aAGsD,EAF/C,UAA8B,GAGrC,aAA4C,GAEzB,oBAA0B,qBAAhD,aAOwE,EAPlD,UAA0B,2BAPhD,uMAA2C,GACxC,+yBAGsD,GACtD,8GAA4C,qOAAqD;AAAA;;mEAgB9F;YAAA;YAAA,YAMwD;YAHpB;;gCAAsC;;YAH1E;QAAA,0fAMwD,KALpB,uDAAiD,IAK7B,sFACxD,mDANoC,uMAAiD,IAGjD,mBAA8B,uBAC9B,mBAAmC,uBAHnC,mBAA+B,mBAFnE,YAMwD,EALpB,SAAiD,EAGjD,SAA8B,EAC9B,SAAmC,EAHnC,SAA+B;AAAA;2GAgB1D,sKAAiF;4GACjF,2jBAGoB,mGACpB,yDAHU,mCAA0C,qCAC1C,2JAAgD,GAF1D,YAGoB,EAFV,SAA0C,EAC1C,SAAgD;4GAK1D,wHAAsG,oGACtG;;mEAlBN;YAAA,aAIgF;YAA3D;;gCAA0D;;YAJ/E;QAAA,q7CAIgF,6FAC7E,6gBAAqB,gGAClB,6kBAAkE,iIAElE,MAAQ,4FACR,kZAAiF,IAAO,4FACxF,mZAGoB,IACT,yFACd,MAAsB,yFACtB,wfAAuB,gGACpB,sbAAsG,GAAxF,sFAAuF,MACtF,yFAClB,MAAwB,sFAC3B,mDAlBqB,kBAAsD,wCACtD,mBAA2C,gCAHhE,YAIgF,EAF3D,SAAsD,EACtD,SAA2C,GAG1D,aAAkE,GAG5D,kBAAgC,wCAAtC,aAAiF,EAA3E,SAAgC,GAC5B,6CAAmC,qBAA7C,aAGoB,EAHV,UAAmC,GAO/B,6KAAuF,GAArG,aAAsG,EAAxF,sBAAuF,2BAhBtF,iMAA4C,GADjE,kCAIgF,EAH3D,SAA4C,EADjE,SAIgF,GAC7E,6CAAqB,GACX,kHAAgB,GAAC,yIAAyC,GAAjE,iGAAkE,EAA3D,SAAgB,EAAC,SAAyC,EAAjE,SAAkE,mFAElE;AAAA;2GAnBf,yHAA8B,wFAC3B,0JAA6B,2FAC1B,oZAMwD,IAClC,sFACtB,09BAA+C,0FAC5C,2dAIgF,IAgB1D,mFACzB,MAAgB,mFACnB,MAAM,gFACT,mDAhC2B,mBAAyB,oBAA9C,YAMwD,EANnC,SAAyB,GAQ/B,oBAA+B,EAA9C,YAA+C,EAAhC,SAA+B,GACtB,mBAA4C,cAAjE,aAIgF,EAJ3D,SAA4C,2BADpE,6CAA+C;4GA2BlD,wHAAgH,wFAChH;4GAFH,wHAA6B,wFAC1B,wbAAgH,GAAlG,qFAAiG,MAChG,gFAClB,mDAFiB,iKAAiG,GAA/G,YAAgH,EAAlG,oBAAiG;2GAtCrH,wHAAmD,qFAChD,oZAA8B,IAkCf,kFAEf,qZAA6B,IAGd,6EAClB,mDAxCiB,oBAAe,SAA7B,YAA8B,EAAhB,SAAe,GAoCf,mBAAc,SAA5B,YAA6B,EAAf,SAAc;;mEAW/B;YAAA;YAAA,YAkBmE;YAH/B;;gCAAuD;;YACvD;;gCAAgC;;YAChC;;gCAAuC;;YACvC;;gCAA8B;;YAlBlE;QAAA,4kEAkBmE,mFACnE,mDAdoC,mBAAuD,4BACvD,mBAAiD,yBAKjD,mBAAyC,qBACzC,oBAAwB,SALxB,qCAAgD,mBAChD,mBAAqC,uBACrC,mBAA6C,uBAC7C,mBAAmC,kBAGnC,mBAAwE,kDAVxE,oBAAyC,qBAWzC,qBAAsC,EAVtC,oBAAwB,kBAJ5D,eAKoC,SAAuD,EACvD,SAAiD,EAKjD,SAAyC,EACzC,SAAwB,EALxB,SAAgD,EAChD,SAAqC,EACrC,SAA6C,EAC7C,SAAmC,EAGnC,SAAwE,EAVxE,UAAyC,EAWzC,UAAsC,EAVtC,UAAwB,CAcO,mDAhB/B,mBAA2C,yBAF/E,YAkBmE,EAhB/B,SAA2C;AAAA;4GALlF,+LAEsE,kFACnE,qZAkBmE,IACxC,0EAC9B,mDApB6B,oBAAkB,YAA5C,YAkBmE,EAlBzC,SAAkB,mDAD1B,2DAAgD,0BAFrE,YAEsE,EAAjD,SAAgD;;mEAwBrE,wKAAuF,kFACpF;YAAA;YAAA,YAIuE;YAAjD;;gCAAgD;;YAJtE;QAAA,2rBAIuE,mFACvE,MAAuB,0EAC1B,mDANyB,mBAAkC,oBAClC,mBAA+C,wBAC/C,mBAAyC,qBACzC,mBAAiC,YAHvD,YAIuE,EAJjD,SAAkC,EAClC,SAA+C,EAC/C,SAAyC,EACzC,SAAiC;AAAA;4GAM1D,8qBAEqG,GAA3E,uDAA0E,IAAC,uEACrG,mDAF0B,mBAA0B,oBAC1B,+MAA0E,IAFpG,YAEqG,EAD3E,SAA0B,EAC1B,SAA0E;;mEAK9F;YAAA;YAAA,YAK+F;YAA3D;;gCAAsC;;YAL1E;QAAA,4eAK+F,sFAC/F,2BALoC,kBAAqB,2BAErB,kBAAyB,6BADzB,kBAAyB,2BAEzB,iEAAkD,4BAJtF,YAK+F,EAJ3D,SAAqB,EAErB,SAAyB,EADzB,SAAyB,EAEzB,SAAkD;AAAA;;mEAQnF;YAAA;YAAA,YAK+F;YAA3D;;gCAAsC;;YAL1E;QAAA,4eAK+F,yFAC/F,2BALoC,kBAAqB,2BAErB,kBAAyB,6BADzB,kBAAyB,2BAEzB,wEAAkD,4BAJtF,YAK+F,EAJ3D,SAAqB,EAErB,SAAyB,EADzB,SAAyB,EAEzB,SAAkD;AAAA;4GATzF,25BAI4D,uFACzD,8dAK+F,IACzE,gFACzB,mIAVK,iDAAqE,gDACrE,+EAAkC,GAClC,gFAAkC,GAJvC,YAI4D,EAFvD,SAAqE,EACrE,SAAkC,EAClC,SAAkC,GACf,yCAAkE,gDAAvF,YAK+F,EAL1E,SAAkE;4GAQhE,mFACvB,6LAA2D,qKAE3D,IAAS,gFACZ,yDAH8D,2UAE3D;4GAEuB,mFACvB,4LAA0D,qKAE1D,IAAS,gFACZ,yDAH6D,6UAE1D;4GA7BN,6IAA6C,qFAC1C,8dAK+F,IACzE,gFACtB,qZAI4D,IAQtD,gFACN,sIAA0B,KAIZ,gFACd,sIAA0B,KAIZ,6EACjB,mDA9BwB,2CAAoE,yCAAzF,YAK+F,EAL1E,SAAoE,GAOpF,yCAAyD,gDAA9D,YAI4D,EAJvD,SAAyD;4GATY,6EAC7E,qZAA6C,IA+BvC,0EACT,2BAhCQ,sDAAsB,yBAA3B,YAA6C,EAAxC,SAAsB;uPA/GuD,0EACrF,wJAA2B,kFACxB,oZAA+C,IAEzC,6EACN,oZAA4E,IAiBtE,+EAEN,qZAAmD,IAyCpC,4EAElB,MAAM,4EAEN,sZAEsE,IAqBhE,4EAEN,MAA6B,0EAC7B,sZAAuF,IAOjF,4EAEN,MAAoD,0EACpD,sZAEqG,IAC1E,4EAE3B,kIAAgF,KAiClE,0EACd,mDA9IQ,mBAAoB,eAAzB,YAA+C,EAA1C,SAAoB,GAGpB,mCAA0C,2BAA/C,YAA4E,EAAvE,SAA0C,GAmBjC,uCAAoC,iBAAlD,aAAmD,EAArC,SAAoC,GA6ChD,2CAA2C,oBAAhD,aAEsE,EAFjE,SAA2C,GA0B3C,0CAA0C,oBAA/C,aAAuF,EAAlF,SAA0C,GAUrB,kEAAyD,iBAAnF,aAEqG,EAF3E,SAAyD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACvGnF;AAAA;AAAA;AAAiD;AAGjD;;;;GAIG;AAII,MAAM,oBAAoB;IAE9B,YAAmB,IAAe;QAAf,SAAI,GAAJ,IAAI,CAAW;QAgB1B,gBAAW,GAA4B,IAAI,oDAAe,CAAS,EAAE,CAAC,CAAC;IAhB1C,CAAC;IAItC,IACI,KAAK,CAAC,KAAa;QACpB,IAAI,IAAI,CAAC,MAAM,KAAK,KAAK,EAAE;YACxB,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;SAC/B;QACD,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;IACvB,CAAC;IAED,IAAI,KAAK;QACN,OAAO,IAAI,CAAC,MAAM,CAAC;IACtB,CAAC;IAID,IAAI,gBAAgB;QACjB,OAAO,IAAI,CAAC,WAAW,CAAC,YAAY,EAAE,CAAC;IAC1C,CAAC;IAED,QAAQ;QACL,8GAA8G;QAC9G,2GAA2G;QAC3G,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE;YAClB,IAAI,CAAC,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE,CAAC;SAC5C;IACJ,CAAC;IAED,WAAW;QACR,IAAI,CAAC,WAAW,CAAC,WAAW,EAAE,CAAC;IAClC,CAAC;CACH;;;;;;;;;;;;;;AC3CD;AAAA;AAAA;;;GAGG;AAII,MAAM,6BAA6B;IAKvC,YAAoB,KAAiB;QAAjB,UAAK,GAAL,KAAK,CAAY;IAAG,CAAC;IAEzC,kBAAkB;QACf,UAAU,CAAC,GAAG,EAAE;YACb,MAAM,UAAU,GAAkC,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,gBAAgB,CAAC,QAAQ,CAAC,CAAC;YACtG,oDAAoD;YACpD,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,SAAS,CAAC,EAAE,CAAC,CAAC,CAAE,SAA6B,CAAC,UAAU,CAAC;iBACzE,OAAO,CAAC,CAAC,SAAS,EAAE,KAAK,EAAE,EAAE;gBAC3B,MAAM,WAAW,GAAsB,IAAI,CAAC,gBAAgB,CAAC,SAAS,CAAC,IAAI,EAAE,UAAU,CAAC,CAAC;gBACzF,IAAI,WAAW,EAAE;oBACb,SAA6B,CAAC,UAAU,CAAC,OAAO,CAAC,SAAS,CAAC,EAAE;wBAC3D,SAAS,CAAC,aAAa,CAAC,SAAS,EAAE,WAAW,EAAE,KAAK,CAAC,CAAC;oBAC1D,CAAC,CAAC,CAAC;iBACL;YACJ,CAAC,CAAC,CAAC;QACZ,CAAC,CAAC,CAAC;IACN,CAAC;IAEO,gBAAgB,CAAC,IAAY,EAAE,OAAsC;QAC1E,KAAK,IAAI,CAAC,GAAW,CAAC,EAAE,CAAC,GAAG,OAAO,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YAC9C,IAAI,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,KAAK,IAAI,EAAE;gBAChC,OAAO,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;aACzB;SACH;QACD,OAAO,IAAI,CAAC;IACf,CAAC;CAEH;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC5CD,kFAAkF;AACL;AAEuB;AAErC;AAIT;AACqB;AACrB;AACO;AAC7B;AAC8C;AACxB;AACV;AACwB;AAO7D;UAAM,uBAAuB;QAiCjC,YAAoB,uBAAoD;YAApD,4BAAuB,GAAvB,uBAAuB,CAA6B;YAhCxE,SAAI,GAAgB,+CAAI,CAAC;YACzB,2BAAsB,GAAkC,mHAAsB,CAAC;YAe/E,oBAAe,GAAsC,IAAI,0DAAY,EAAuB,CAAC;QAiB7F,CAAC;QAEK,QAAQ;;gBACX,IAAI,IAAI,CAAC,kBAAkB,EAAE;oBAC1B,MAAM,IAAI,CAAC,wBAAwB,EAAE,CAAC;iBACxC;YACJ,CAAC;SAAA;QAGa,wBAAwB;;gBACnC,IAAI,CAAC,UAAU,GAAG,qEAAa,CAAC,aAAa,CAAC;gBAC9C,IAAI,CAAC,mBAAmB;oBAClB,MAAM,IAAI,CAAC,0BAA0B,CAAC,IAAI,CAAC,mBAAmB,CAAC,IAAI,EAAE,IAAI,CAAC,mBAAmB,CAAC,EAAE,CAAC,CAAC;YAC3G,CAAC;SAAA;QAIa,0BAA0B,CAAC,IAAY,EAAE,EAAU;;gBAC9D,OAAO,MAAM,IAAI,CAAC,uBAAuB,CAAC,0BAA0B,CAAC,IAAI,CAAC,UAAU,EAAE,IAAI,EAAE,EAAE,CAAC,CAAC;YACnG,CAAC;SAAA;QAGK,gBAAgB,CAAC,iBAAyB;;gBAC7C,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;gBACzB,IAAI,CAAC,mBAAmB,GAAG,CAAC,CAAC,iBAAiB,CAAC;gBAC/C,IAAI,iBAAiB,EAAE;oBACpB,IAAI,CAAC,2BAA2B,GAAG,iBAAiB,CAAC;oBACrD,IAAI,CAAC,YAAY,GAAG,MAAM,IAAI,CAAC,qCAAqC,CAAC,iBAAiB,CAAC,CAAC;iBAC1F;YACJ,CAAC;SAAA;QAIa,qCAAqC,CAAC,iBAAyB;;gBAC1E,OAAO,IAAI,CAAC,uBAAuB,CAAC,qCAAqC,CAAC,IAAI,CAAC,UAAU,EAAE,iBAAiB,CAAC,CAAC;YACjH,CAAC;SAAA;QAED,cAAc,CAAC,MAAc;YAC1B,MAAM,MAAM,GAAwB,IAAI,kFAAmB,CAAC,MAAM,CAAC,CAAC;YACpE,IAAI,IAAI,CAAC,kBAAkB,EAAE;gBAC1B,MAAM,CAAC,SAAS,GAAG,IAAI,CAAC,2BAA2B,CAAC;aACtD;YACD,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QACrC,CAAC;QAED,IAAI,gBAAgB;YACjB,OAAO,IAAI,CAAC,YAAY,CAAC,UAAU,IAAI,IAAI,CAAC,YAAY,CAAC,UAAU,CAAC,MAAM,GAAG,CAAC;gBACxE,CAAC,CAAC,4DAAW,CAAC,SAAS,CAAC,yCAAyC,CAAC;gBAClE,CAAC,CAAC,4DAAW,CAAC,SAAS,CAAC,mCAAmC,CAAC,CAAC;QACtE,CAAC;QAED,IAAI,eAAe;YAChB,OAAO,IAAI,CAAC,kBAAkB;gBACxB,CAAC,CAAC,4DAAW,CAAC,SAAS,CAAC,0CAA0C,CAAC;gBACnE,CAAC,CAAC,4DAAW,CAAC,SAAS,CAAC,sCAAsC,CAAC,CAAC;QACzE,CAAC;QAED,IAAI,iBAAiB;YAClB,OAAO,IAAI,CAAC,kBAAkB;gBACxB,CAAC,CAAC,IAAI,CAAC,YAAY,IAAI,CAAC,IAAI,CAAC,+BAA+B,IAAI,IAAI,CAAC,mBAAmB;gBACxF,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC;QAC/B,CAAC;QAED,IAAI,UAAU;YACX,OAAO,IAAI,CAAC,kBAAkB;gBACxB,CAAC,CAAC,CAAC,IAAI,CAAC,4BAA4B,IAAI,CAAC,IAAI,CAAC,+BAA+B,IAAI,IAAI,CAAC,mBAAmB;gBACzG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC;QAC/B,CAAC;QAED,WAAW,CAAC,IAA6B;YACtC,OAAO,IAAI,CAAC,kBAAkB,CAAC;QAClC,CAAC;QAED,eAAe,CAAC,aAAuB;YACpC,IAAI,4DAAW,CAAC,OAAO,CAAC,aAAa,CAAC,EAAE;gBACrC,OAAO,CAAC,CAAC;aACX;YAED,OAAO,aAAa,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC,4DAAW,CAAC,OAAO,CAAC,IAAI,CAAC,qBAAqB,CAAC;mBAC5E,CAAC,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC;QAC/C,CAAC;QAED,kBAAkB,CAAC,QAAiC;YACjD,IAAI,QAAQ,CAAC,SAAS,EAAE;gBACrB,OAAO,+CAAI,CAAC,aAAa,CAAC;aAC5B;YACD,OAAO,sEAAc,CAAC,4BAA4B,CAAC,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,MAAM,CAAC;gBAC/E,CAAC,CAAC,8EAAgB,CAAC,OAAO;gBAC1B,CAAC,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;QAChC,CAAC;QAED,kBAAkB,CAAC,QAAiC;YACjD,IAAI,QAAQ,CAAC,SAAS,EAAE;gBACrB,OAAO,+CAAI,CAAC,aAAa,CAAC;aAC5B;YACD,OAAO,sEAAc,CAAC,4BAA4B,CAAC,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,MAAM,CAAC;gBAC/E,CAAC,CAAC,8EAAgB,CAAC,OAAO;gBAC1B,CAAC,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;QAChC,CAAC;QAEO,YAAY,CAAC,MAAc;;YAChC,IAAI,IAAI,CAAC,kBAAkB,EAAE;gBAC1B,+GAA+G;gBAC/G,OAAO,KAAK,CAAC;aACf;YACD,OAAO,CAAP,KAAO,IAAI,CAAC,qBAAqB,0CAAE,IAAI,CAAC,SAAS,CAAC,EAAE,CAAC,MAAM,CAAC,OAAO,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;QAC1F,CAAC;;IAzHuB,6CAAqB,GAAW,mBAAmB,CAAC;IAIpD,gDAAwB,GAAW,sBAAsB,CAAC;IAFlF;QADC,kGAAgB,CAAC,EAAC,IAAI,EAAE,uBAAuB,CAAC,qBAAqB,EAAC,CAAC;;iFAClC;IAItC;QADC,kGAAgB,CAAC,EAAC,IAAI,EAAE,uBAAuB,CAAC,wBAAwB,EAAC,CAAC;;oFAClC;IAkBzC;QADC,6EAAM,CAAC,EAAC,IAAI,EAAE,uBAAuB,CAAC,qBAAqB,EAAC,CAAC;;;;2EAK7D;IAID;QAFC,qGAAiB,EAAE;QACnB,2EAAM,CAAC,EAAC,OAAO,EAAE,oEAAO,CAAC,YAAY,EAAC,CAAC;;;;6EAGvC;IAGD;QADC,6EAAM,CAAC,EAAC,IAAI,EAAE,uBAAuB,CAAC,wBAAwB,EAAC,CAAC;;;;mEAQhE;IAID;QAFC,qGAAiB,EAAE;QACnB,2EAAM,CAAC,EAAC,OAAO,EAAE,oEAAO,CAAC,YAAY,EAAC,CAAC;;;;wFAGvC;;;;;;;;;;;;;;;;AC7FJ;AAAA;AAAA,kFAAkF;AAIlF;;GAEG;AACI,MAAM,WAAW;IACrB,YACa,QAAsB,EACtB,WAAW,GAAY,IAAI;QAD3B,aAAQ,GAAR,QAAQ,CAAc;QACtB,gBAAW,GAAX,WAAW,CAAgB;IACxC,CAAC;CACH;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACZD,kFAAkF;AAQ3D;AAC+B;AAGC;AACQ;AACyB;AAE5C;AAC2B;AACX;AACwC;AAI5B;AACxC;AACsC;AAO/D,MAAM,qBAAqB;IALlC;QAMG,uBAAkB,GAA8B,uGAAkB,CAAC;QACnE,qBAAgB,GAA4B,8EAAgB,CAAC;QAC7D,kBAAa,GAAyB,sFAAa,CAAC;QACpD,mBAAc,GAA0B,qEAAc,CAAC;QACvD,SAAI,GAAgB,gDAAI,CAAC;QAEhB,wBAAmB,GAAuB;YAChD,8EAAgB,CAAC,GAAG,EAAE,8EAAgB,CAAC,MAAM,EAAE,8EAAgB,CAAC,IAAI;YACpE,8EAAgB,CAAC,KAAK,EAAE,8EAAgB,CAAC,OAAO,EAAE,8EAAgB,CAAC,OAAO;SAC5E,CAAC;QAEe,wCAAmC,GAAW,2EAAiB,CAAC,qBAAqB,CAAC;QAKvG,gBAAW,GAAkB,EAAE,CAAC;QAUhC,8BAAyB,GAAY,IAAI,CAAC;QAG1C,2BAAsB,GAAY,IAAI,CAAC;QAGvC,uBAAkB,GAAY,KAAK,CAAC;QAGpC,WAAM,GAAY,KAAK,CAAC;QAMxB,sBAAiB,GAAW,EAAE,CAAC;QAY/B,4BAAuB,GAAyB,IAAI,0DAAY,EAAU,CAAC;QAE3E,uBAAkB,GAAW,IAAI,CAAC;QAmBlC,2BAAsB,GAA0B,IAAI,0DAAY,EAAW,CAAC;QAKpE,0BAAqB,GAAY,KAAK,CAAC;QA8B/C,yBAAoB,GAAY,KAAK,CAAC;QAGtC,0BAAqB,GAAa,EAAE,CAAC;QAK7B,uBAAkB,GAA0B,IAAI,qFAAqB,CAAC,KAAK,CAAC,CAAC;QAqBrF,4BAAuB,GAAwC,IAAI,0DAAY,EAAyB,CAAC;QAGzG,WAAM,GAAwC,IAAI,0DAAY,EAAyB,CAAC;QAGxF,UAAK,GAAyB,IAAI,0DAAY,EAAU,CAAC;QAyCzD,kBAAa,GAAG,CAAC,QAAsB,EAAW,EAAE;YACjD,IAAI,CAAC,QAAQ,EAAE;gBACZ,OAAO,KAAK,CAAC;aACf;YACD,6FAA6F;YAC7F,IAAI,QAAQ,CAAC,QAAQ,EAAE;gBACpB,MAAM,WAAW,GACX,CAAC,2DAAW,CAAC,OAAO,CAAC,IAAI,CAAC,qBAAqB,CAAC;oBAChD,IAAI,CAAC,qBAAqB,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAC3D,IAAI,CAAC,EAAE,CAAC,KAAK,KAAK,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC;gBACnD,OAAO,CAAC,WAAW,CAAC,MAAM,KAAK,QAAQ,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;aAC3D;YACD,OAAO,CAAC,2DAAW,CAAC,OAAO,CAAC,IAAI,CAAC,qBAAqB,CAAC;gBACjD,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,KAAK,KAAK,QAAQ,CAAC,aAAa,CAAC,CAAC;QACpF,CAAC,CAAC;IA6LL,CAAC;IAzUE,IACI,gBAAgB,CAAC,GAAY;QAC9B,IAAI,CAAC,iBAAiB,GAAG,GAAG,CAAC;QAC7B,IAAI,IAAI,CAAC,gBAAgB,EAAE;YACxB,2DAA2D;YAC3D,IAAI,CAAC,uBAAuB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;SAC1C;QACD,IAAI,CAAC,sBAAsB,CAAC,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;IAC3D,CAAC;IAED,IAAI,gBAAgB;QACjB,OAAO,IAAI,CAAC,iBAAiB,CAAC;IACjC,CAAC;IAUD,IACI,cAAc,CAAC,IAAoB;QACpC,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC;QAE5B,IAAI,CAAC,IAAI,IAAI,2DAAW,CAAC,OAAO,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE;YAC/C,IAAI,CAAC,WAAW,GAAG,EAAE,CAAC;YACtB,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC;YAC9B,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC;YAC/B,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC;YAC1B,OAAO;SACT;QAED,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC,eAAe,CAAC,YAAY,CAAC;QAE3D,IAAI,CAAC,IAAI,CAAC,qBAAqB,EAAE;YAC9B,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;YAC1C,IAAI,CAAC,qBAAqB,GAAG,IAAI,CAAC;YAClC,OAAO;SACT;QAED,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;IAC/C,CAAC;IAED,IAAI,cAAc;QACf,OAAO,IAAI,CAAC,eAAe,CAAC;IAC/B,CAAC;IAaD,IACI,iBAAiB,CAAC,KAA4B;QAC/C,0GAA0G;QAC1G,iHAAiH;QACjH,6BAA6B;QAC7B,MAAM,QAAQ,GAA0B,KAAK,CAAC,KAAK,EAAE,CAAC;QACtD,IAAI,CAAC,QAAQ,IAAI,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,EAAE;YACxD,OAAO;SACT;QACD,IAAI,CAAC,kBAAkB,GAAG,QAAQ,CAAC;QACnC,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC,kBAAkB,CAAC,6BAA6B,CAAC;QAChF,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,kBAAkB,CAAC,SAAS,CAAC;IACtD,CAAC;IAED,IAAI,iBAAiB;QAClB,OAAO,IAAI,CAAC,kBAAkB,CAAC;IAClC,CAAC;IAWD,IAAI,eAAe;QAChB,IAAI,CAAC,IAAI,CAAC,iBAAiB,EAAE;YAC1B,OAAO,IAAI,CAAC;SACd;QACD,OAAO,EAAE,CAAC,MAAM,CAAC,GAAG,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,UAAU,CAAC,EAAE,CAAC,UAAU,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;aAC9E,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,OAAO,CAAC,MAAM,KAAK,IAAI,CAAC,iBAAiB,CAAC,CAAC;IACrE,CAAC;IAED,IAAI,oBAAoB;QACrB,MAAM,YAAY,GAAiB,IAAI,CAAC,eAAe,CAAC;QACxD,IAAK,CAAC,YAAY,EAAE;YACjB,OAAO,KAAK,CAAC;SACf;QAED,MAAM,YAAY,GAAiB,IAAI,CAAC,cAAc,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CACpE,CAAC,CAAC,QAAQ,IAAI,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,MAAM,KAAK,YAAY,CAAC,MAAM,CAAC,CAAC,CAAC;QAC5E,IAAI,CAAC,YAAY,EAAE;YAChB,OAAO,KAAK,CAAC;SACf;QAED,OAAO,YAAY,CAAC,QAAQ;YACtB,YAAY,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,OAAO,CAAC,MAAM,KAAK,qEAAc,CAAC,YAAY;mBAC3E,OAAO,CAAC,MAAM,KAAK,qEAAc,CAAC,uBAAuB,CAAC,CAAC;IAC7E,CAAC;IAED,kBAAkB,CAAC,QAAwB;QACxC,IAAI,CAAC,QAAQ,EAAE;YACZ,OAAO,EAAE,CAAC;SACZ;QACD,OAAO,QAAQ,CAAC,MAAM,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC;IAC9E,CAAC;IAED,oBAAoB,CAAC,QAAwB;QAC1C,IAAI,2DAAW,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE;YAChC,OAAO,EAAE,CAAC;SACZ;QACD,OAAO,QAAQ,CAAC,MAAM,CAAC,OAAO,CAAC,EAAE,CAAC,IAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC;IAC7E,CAAC;IAkBD,YAAY,CAAC,IAA4B;QACtC,IAAI,IAAI,CAAC,QAAQ,EAAE;YAChB,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC,aAAa,CAAC,CAAC;YACpE,IAAI,CAAC,eAAe,CAAC,MAAM,GAAG,8EAAgB,CAAC,OAAO,CAAC;YACvD,uFAAuF;YACvF,MAAM,gBAAgB,GAChB,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,cAAc,CAAC,SAAS,EAAE,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC;YAC3F,IAAI,gBAAgB,EAAE;gBACnB,IAAI,CAAC,YAAY,CAAC,gBAAgB,CAAC,QAAQ,CAAC,CAAC;aAC/C;SACH;aAAM;YACJ,IAAI,CAAC,qBAAqB,CAAC,MAAM,CAAC,IAAI,CAAC,qBAAqB,CAAC,OAAO,CAAC,IAAI,CAAC,eAAe,CAAC,aAAa,CAAC,EAAE,CAAC,CAAC,CAAC;YAC7G,IAAI,IAAI,CAAC,QAAQ,CAAC,SAAS,EAAE;gBAC1B,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,sFAAqB,CAAC,IAAI,CAAC,QAAQ,CAAC,kBAAkB,CAAC,CAAC,CAAC;aAChF;SACH;IACJ,CAAC;IAED,oBAAoB,CAAC,MAA2B;QAC7C,IAAI,CAAC,gBAAgB,GAAG,KAAK,CAAC;QAC9B,IAAI,CAAC,iBAAiB,GAAG,MAAM,CAAC,MAAM,CAAC;QACvC,IAAI,CAAC,kBAAkB,GAAG,MAAM,CAAC,SAAS,CAAC;QAC3C,MAAM,KAAK,GAAgB,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,QAAQ,CAAC,QAAQ;YAC1F,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,OAAO,CAAC,MAAM,KAAK,IAAI,CAAC,iBAAiB,CAAC,CAAC,CAAC;QACzF,IAAI,KAAK,EAAE;YACR,KAAK,CAAC,WAAW,GAAG,KAAK,CAAC;SAC5B;IACJ,CAAC;IAEO,mBAAmB,CAAC,cAA8B,EAAE,SAAiB;QAC1E,OAAO,cAAc,CAAC,IAAI,CAAC,YAAY,CAAC,EAAE,CACpC,YAAY,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,OAAO,CAAC,MAAM,KAAK,SAAS,CAAC,CAAC,CAAC;IAC9E,CAAC;IAEO,cAAc,CAAC,UAA0B;QAC9C,IAAI,IAAI,CAAC,MAAM,EAAE;YACd,IAAI,CAAC,WAAW,GAAG,UAAU,CAAC,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,oEAAW,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC,CAAC;SACpF;aAAM;YACJ,IAAI,CAAC,WAAW,GAAG,UAAU,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,IAAkB,EAAE,EAAE;gBAChE,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;gBACjC,OAAO,IAAI,oEAAW,CAAC,IAAI,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,2BAA2B,CAAC,IAAI,CAAC,CAAC,CAAC;YACjG,CAAC,CAAC,CAAC;SACL;QACD,0GAA0G;QAC1G,2GAA2G;QAC3G,2BAA2B;QAC3B,kGAAkG;QAClG,IAAI,CAAC,IAAI,CAAC,eAAe,IAAI,CAAC,IAAI,CAAC,gBAAgB,EAAE;YAClD,IAAI,CAAC,4BAA4B,EAAE,CAAC;SACtC;IACJ,CAAC;IAEO,4BAA4B;QACjC,MAAM,sBAAsB,GACtB,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,2DAAW,CAAC,OAAO,CAAC,QAAQ,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC;QAC1F,IAAI,CAAC,sBAAsB,EAAE;YAC1B,OAAO;SACT;QACD,sBAAsB,CAAC,WAAW,GAAG,KAAK,CAAC;QAC3C,IAAI,CAAC,iBAAiB,GAAG,sBAAsB,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC;QAC5E,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;IAClD,CAAC;IAEO,gBAAgB,CAAC,aAA6B;QACnD,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC,YAAY,EAAE,EAAE;YACvC,MAAM,WAAW,GAAiB,aAAa,CAAC,SAAS,CAAC,IAAI,CACxD,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,MAAM,KAAK,YAAY,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;YAC5D,IAAI,WAAW,CAAC,UAAU,EAAE;gBACzB,OAAO,CAAC,wDAAwD;aAClE;YACD,wCAAwC;YACxC,wEAAwE;YACxE,YAAY,CAAC,QAAQ,GAAG,WAAW,CAAC;YACpC,IAAI,CAAC,YAAY,CAAC,YAAY,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;QACrD,CAAC,CAAC,CAAC;IACN,CAAC;IAEO,2BAA2B,CAAC,QAAsB;QACvD,MAAM,WAAW,GAAY,IAAI,CAAC,iBAAiB,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;QACrE,MAAM,UAAU,GAAY,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,OAAO,CAAC,MAAM,KAAK,IAAI,CAAC,iBAAiB,CAAC,CAAC,CAAC;QAC3G,OAAO,CAAC,WAAW,IAAI,CAAC,UAAU,CAAC;IACtC,CAAC;IAEO,YAAY,CAAC,QAAwB;QAC1C,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,kBAAkB,CAAC,CAAC,CAAC,CAAC,CAAC;IACpF,CAAC;IAEO,kBAAkB,CAAC,OAAqB;QAC7C,IAAI,CAAC,OAAO,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE;YAC9B,OAAO,IAAI,CAAC,mBAAmB,CAAC,MAAM,CAAC;SACzC;QACD,yGAAyG;QACzG,MAAM,MAAM,GAAW,IAAI,CAAC,mBAAmB,CAAC,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;QACxE,OAAO,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,mBAAmB,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC;IAChE,CAAC;IAED,gBAAgB,CAAC,iBAAyB;QACvC,IAAI,CAAC,iBAAiB,CAAC,iBAAiB,CAAC,CAAC;IAC7C,CAAC;IAEa,iBAAiB,CAAC,iBAAyB;;YACtD,IAAI,CAAC,gBAAgB,GAAG,KAAK,CAAC;YAC9B,IAAI,CAAC,iBAAiB,GAAG,iBAAiB,CAAC;YAC3C,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC;YAC/B,IAAI,CAAC,IAAI,CAAC,eAAe,EAAE;gBACxB,OAAO;aACT;YACD,IAAI,CAAC,uBAAuB,CAAC,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC;QAClE,CAAC;KAAA;IAED,sBAAsB;QACnB,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC;QAC9B,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC;IAChC,CAAC;IAED,YAAY,CAAC,IAAkB;QAC5B,OAAO,qEAAc,CAAC,4BAA4B,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IACnE,CAAC;IAED,YAAY,CAAC,IAAkB;QAC5B,OAAO,qEAAc,CAAC,4BAA4B,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IACnE,CAAC;IAED,mBAAmB,CAAC,uBAAgC;QACjD,IAAI,CAAC,kBAAkB,GAAG,uBAAuB,CAAC;QAClD,IAAI,CAAC,kBAAkB,CAAC,6BAA6B,GAAG,uBAAuB,CAAC;QAChF,IAAI,CAAC,kCAAkC,EAAE,CAAC;IAC7C,CAAC;IAED,iBAAiB,CAAC,KAAoB;QACnC,IAAI,CAAC,cAAc,GAAG,SAAS,CAAC;QAEhC,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,EAAE,EAAE;YAC3B,IAAI,CAAC,cAAc,GAAG,2DAAW,CAAC,SAAS,CAAC,wCAAwC,CAAC,CAAC;YACtF,OAAO;SACT;QACD,iBAAiB;QACjB,IAAI,KAAK,CAAC,IAAI,GAAG,KAAK,CAAC,EAAE,EAAE;YACxB,IAAI,CAAC,cAAc,GAAG,2DAAW,CAAC,SAAS,CAAC,4CAA4C,CAAC,CAAC;YAC1F,OAAO;SACT;QACD,yBAAyB;QACzB,MAAM,0BAA0B,GAAW,2EAAiB,CAAC,6BAA6B,CACpF,IAAI,CAAC,oBAAoB,EACzB,IAAI,CAAC,mCAAmC,GAAG,2EAAiB,CAAC,mBAAmB,CAAC,CAAC;QACxF,IAAI,KAAK,CAAC,IAAI,GAAG,0BAA0B,EAAE;YAC1C,IAAI,CAAC,cAAc,GAAG,2DAAW,CAAC,SAAS,CAAC,qDAAqD,EAC3F,IAAI,CAAC,mCAAmC,CAAC,CAAC;YAChD,OAAO;SACT;QAED,IAAI,CAAC,kBAAkB,CAAC,SAAS,GAAG,KAAK,CAAC;QAC1C,IAAI,CAAC,kCAAkC,EAAE,CAAC;IAC7C,CAAC;IAED,kCAAkC;QAC/B,IAAI,CAAC,uBAAuB,CAAC,IAAI,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;IAC9D,CAAC;IAED,cAAc;QACX,OAAO,IAAI,IAAI,EAAE,CAAC;IACrB,CAAC;IAED,0BAA0B,CAAC,QAAwB;QAChD,4DAA4D;QAC5D,IAAI,CAAC,IAAI,CAAC,oBAAoB,CAAC,QAAQ,CAAC,CAAC,MAAM,EAAE;YAC9C,OAAO,sFAAa,CAAC,QAAQ,CAAC;SAChC;QACD,qDAAqD;QACrD,OAAO,IAAI,CAAC,kBAAkB,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,OAAO,CAAC,MAAM,KAAK,IAAI,CAAC,iBAAiB,CAAC,CAAC,CAAC;YAC/F,sFAAa,CAAC,KAAK,CAAC,CAAC,CAAC,sFAAa,CAAC,MAAM,CAAC;IACpD,CAAC;IAED,IAAI,iBAAiB;QAClB,OAAO,mHAAsB,CAAC,YAAY,CAAC;IAC9C,CAAC;IAEO,iBAAiB,CAAC,MAAwB;QAC/C,OAAO,MAAM,KAAK,8EAAgB,CAAC,GAAG,IAAI,MAAM,KAAK,8EAAgB,CAAC,MAAM,CAAC;IAChF,CAAC;IAED,qBAAqB,CAAC,IAAiB;QACpC,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,QAAQ,CAAC,UAAU,EAAE;YACpC,OAAO,KAAK,CAAC;SACf;QACD,OAAO,IAAI,CAAC,WAAW,IAAI,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;IAC3E,CAAC;CACH;;;;;;;;;;;;;;AC/XD;AAAA;AAAO,MAAM,kBAAkB;CAC9B;;;;;;;;;;;;;;AClCD;AAAA;AAAA;;;;;GAKG;AAII;UAAM,oBAAoB;QAyC9B,YAAoB,KAAiB;YAAjB,UAAK,GAAL,KAAK,CAAY;YAnCrC,wFAAwF;YAChF,0BAAqB,GAAW,EAAE,CAAC;YASnC,2BAAsB,GAA2B,EAAE,CAAC;YAwCpD,uBAAkB,GAAG,GAAS,EAAE;gBACrC,MAAM,UAAU,GAAwB,IAAI,CAAC,iBAAiB,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,gBAAgB,EAAE,CAAC,CAAC;gBACjG,IAAI,CAAC,UAAU,CAAC,MAAM,EAAE;oBACrB,OAAO;iBACT;gBAED,sEAAsE;gBACtE,IAAI,CAAC,sBAAsB,CAAC,OAAO,CAAC,cAAc,CAAC,EAAE;oBAClD,UAAU,CAAC,OAAO,CAAC,CAAC,MAAmB,EAAE,EAAE;wBACxC,IAAI,MAAM,CAAC,YAAY,CAAC,MAAM,CAAC,KAAK,cAAc,CAAC,IAAI,CAAC,IAAI,EAAE;4BAC3D,MAAM,CAAC,KAAK,GAAG,cAAc,CAAC,KAAK,CAAC;yBACtC;oBACJ,CAAC,CAAC,CAAC;gBACN,CAAC,CAAC,CAAC;YACN,CAAC,CAAC;QA5BF,CAAC;QAjCD,IACI,oBAAoB,CAAC,KAAa;YACnC,IAAI,CAAC,CAAC,KAAK,EAAE;gBACV,IAAI,CAAC,qBAAqB,GAAG,KAAK,CAAC;aACrC;QACJ,CAAC;QAID,IACI,OAAO,CAAC,KAA6B;YACtC,IAAI,CAAC,sBAAsB,GAAG,KAAK,CAAC;YACpC,IAAI,CAAC,sBAAsB,CAAC,OAAO,CAAC,cAAc,CAAC,EAAE;gBAClD,2DAA2D;gBAC3D,cAAc,CAAC,gBAAgB,CAAC,SAAS,CAAC,GAAG,EAAE;oBAC5C,UAAU,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;gBACvC,CAAC,CAAC,CAAC;YACN,CAAC,CAAC,CAAC;YAEH,wGAAwG;YACxG,+GAA+G;YAC/G,IAAI,CAAC,0BAA0B,EAAE,CAAC;QACrC,CAAC;QAID,IACI,UAAU,CAAC,IAAiB;YAC7B,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;YAClB,IAAI,CAAC,mBAAmB,EAAE,CAAC;QAC9B,CAAC;QAKO,mBAAmB;YACxB,MAAM,aAAa,GAAY,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG,IAAI,CAAC,qBAAqB,CAAC;YAC9E,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,GAAG,EAAE,KAAK,EAAE,EAAE;gBAC/B,IAAI,aAAa,EAAE;oBAChB,yGAAyG;oBACzG,GAAG,CAAC,MAAM,GAAG,KAAK,IAAI,IAAI,CAAC,qBAAqB,GAAG,CAAC,CAAC;iBACvD;qBAAM;oBACJ,GAAG,CAAC,MAAM,GAAG,KAAK,CAAC;iBACrB;YACJ,CAAC,CAAC,CAAC;QACN,CAAC;QAkBO,0BAA0B;YAC/B,qGAAqG;YACrG,UAAU,CAAC,GAAG,EAAE;gBACb,MAAM,YAAY,GAAuB,IAAI,CAAC,eAAe,EAAE,CAAC;gBAEhE,gFAAgF;gBAChF,IAAI,YAAY,IAAI,CAAC,YAAY,CAAC,OAAO,EAAE;oBACxC,YAAY,CAAC,OAAO,GAAG,IAAI,CAAC,kBAAkB,CAAC;iBACjD;YACJ,CAAC,CAAC,CAAC;QACN,CAAC;QAED,sEAAsE;QAC9D,iBAAiB;YACtB,OAAO,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,gBAAgB,CACrD,oBAAoB,CAAC,gCAAgC,CAAC,CAAC,CAAC;QACjE,CAAC;QAED,wFAAwF;QAChF,gBAAgB;YACrB,OAAO,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,aAAa,CAAC,gBAAgB,CACnE,oBAAoB,CAAC,gCAAgC,CAAC,CAAC,CAAC;QACjE,CAAC;QAEO,eAAe;YACpB,OAAO,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,aAAa,CAAC,oBAAoB,CAAC,2BAA2B,CAAC,CAAC;QACnG,CAAC;;IAhGuB,gDAA2B,GAAW,4BAA4B,CAAC;IACnE,qDAAgC,GAAW,QAAQ,CAAC;IACpD,qDAAgC,GAAW,oCAAoC,CAAC;;;;;;;;;;;;;;;;AClB3G;AAAA;AAAA;AAAA;AAAA;AAAA,kFAAkF;AACb;AACtB;AACU;AAEzD;;;;GAIG;AACI,SAAS,iBAAiB;IAC9B,OAAO,UAAU,WAAgB,EAAE,YAAoB,EAAE,UAA8B;QACpF,kBAAkB;QAClB,MAAM,EAAE,GAAW,8DAAW,CAAC,WAAW,EAAE,CAAC;QAC7C,MAAM,IAAI,GAAqC,UAAU,CAAC,KAAK,CAAC;QAChE,MAAM,YAAY,GAAsB,IAAI,wEAAY,EAAE,CAAC;QAE3D,iBAAiB;QACjB,UAAU,CAAC,KAAK,GAAG,UAAU,GAAG,IAAW;YACxC,iBAAiB,CAAC,EAAE,EAAE,YAAY,CAAC,CAAC;YACpC,OAAO,YAAY,CAAC,WAAW,CAAC,IAAI,CAAC,YAAY,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC;QAC9E,CAAC,CAAC;IACL,CAAC,CAAC;IAEF,SAAS,iBAAiB,CAAC,EAAU,EAAE,YAA+B;QACnE,oFAAoB,CAAC,QAAQ,CAAC,sBAAsB,CAAC,EAAE,EAAE,GAAG,EAAE,CAAC,YAAY,CAAC,aAAa,EAAE,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC;IAC7G,CAAC;AACJ,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;mECxBE;YAAA;YAAA,YAG4E;YAA9C;;gCAA6C;;YAH3E;QAAA,+kBAG4E,mFAC5E,mDAH8B,oBAAwC,EACxC,mBAAiC,sBAF/D,YAG4E,EAF9C,SAAwC,EACxC,SAAiC;AAAA;6GAI5D,onBAG2I,GAAlH,uDAAiH,IAAC,gFAC3I,mDAHyB,mBAAyC,8BACzC,mBAA8C,uCAC9C,gPAAiH,kCAH1I,YAG2I,EAFlH,SAAyC,EACzC,SAA8C,EAC9C,SAAiH;6GAE1I,onBAGuI,GAA9G,uDAA6G,IAAC,gFACvI,mDAHyB,mBAAuC,4BACvC,mBAA4C,qCAC5C,8OAA6G,gCAHtI,YAGuI,EAF9G,SAAuC,EACvC,SAA4C,EAC5C,SAA6G;6GAEtI,onBAG2I,GAAlH,uDAAiH,IAAC,gFAC3I,mDAHyB,mBAAsC,2BACtC,mBAA2C,oCAC3C,gPAAiH,kCAH1I,YAG2I,EAFlH,SAAsC,EACtC,SAA2C,EAC3C,SAAiH;6GAE1I,onBAGqI,GAA5G,uDAA2G,IAAC,gFACrI,mDAFyB,mBAAsC,2BADtC,mBAA2C,oCAE3C,6OAA2G,+BAHpI,YAGqI,EAD5G,SAAsC,EADtC,SAA2C,EAE3C,SAA2G;6GAEpI,ulBAE4H,GAAnG,uDAAkG,IAAC,gFAC5H,mDAFyB,mBAA2B,oBAC3B,2QAAkG,kCAF3H,YAE4H,EADnG,SAA2B,EAC3B,SAAkG;8GAOrH,itCAA6D,uKAE7D,yBAFiC,+BAA2B,EAA5D,YAA6D,EAA5B,SAA2B,2BAA5D,uPAA6D,kQAE7D;6GAPN,sJAA0F,wFACvF,6lBAC2I,GAAlH,uDAAiH,IAAC,mFAC3I,MAA0B,mFAC1B,4+CAAwG,GAA1F,wDAAyF,GAAvG,4MAAwG,uFACrG,8dAA6D,IAEtC,gFAC1B,MAAe,gFAClB,mDAR4B,mBAA4B,qBAC5B,gPAAiH,kCAD1I,YAC2I,EADlH,SAA4B,EAC5B,SAAiH,GAE5H,kOAAyF,IAAvG,aAAwG,EAA1F,SAAyF,GAC9E,oBAAU,EAAhC,aAA6D,EAAvC,SAAU,2BADnC,6CAAwG;6GA7B9G,gKAAmE,qFAChE,sZAG2I,IACjH,gFAC1B,sZAGuI,IAC7G,gFAC1B,sZAG2I,IACjH,gFAC1B,uZAGqI,IAC3G,gFAC1B,uZAE4H,IAClG,gFAC1B,uZAA0F,IASpF,6EACT,mDAlC4B,gHAA0D,GAAnF,YAG2I,EAHlH,SAA0D,GAK1D,8GAAwD,GAAjF,YAGuI,EAH9G,SAAwD,GAKxD,gHAA0D,GAAnF,YAG2I,EAHlH,SAA0D,GAK1D,6GAAuD,GAAhF,aAGqI,EAH5G,SAAuD,GAKvD,oGAAyC,GAAlE,aAE4H,EAFnG,SAAyC,GAInC,gHAA0D,GAAzF,aAA0F,EAA3D,SAA0D;6GA/B/F,wIAAwD,kFACrD,sZAG4E,IAC7C,6EAC/B,sZAAmE,IAmC7D,0EACT,mDAzCiC,0FAAyD,+BAAvF,YAG4E,EAH9C,SAAyD,GAKlF,mBAAyB,oBAA9B,YAAmE,EAA9D,SAAyB;8GAsCjC,2JAA0E;8GAG1E,mJAAqE,kFAClE,iJAAqB,KAAM,0EAC9B;8GAEA,8qBAEmG,GAAzE,uDAAwE,IAAC,uEACnG,mDAF0B,mBAAiD,2CACjD,6MAAwE,IAFlG,YAEmG,EADzE,SAAiD,EACjD,SAAwE;8GAI/F,8qBAEsD,8EACtD,mDAF0B,mBAA4C,sCAC5C,mBAA2B,kBAFrD,YAEsD,EAD5B,SAA4C,EAC5C,SAA2B;8GAQzC,wHAAsE;8GAQ7D,wHAAiE;8GAFpE,8wDACqG,qGAClG,ubAAiE,GAAnD,gEAAkD,MAAgB,4FACnF,2BAHe,oBAAoB,EAAnC,YACqG,EADtF,SAAoB,GAElB,kKAAkD,GAAhE,YAAiE,EAAnD,oBAAkD,2BAFnE,oFACqG;;mEAJ3G,yHAA0D,iGACvD,+IAAmB,4IAA4D,IAAO,4FACtF;YAAA;YAAA;;;;;+8BAAU,kGACP,+eACqG,IAErF,yFACnB,MAAW,yFACd,mDAJqB,mFAAqF,cADpG,aACqG,EAAtF,oBAAqF,2BAHpF,yPAA4D,GAC/E,sPAAU;AAAA;8GATtB,yIAAqE,wFAClE,gKAAmC,2FAChC,4JAAgC,8FAC7B,4HAAI,4IAAuD,IAAK,yFAChE,2bAAsE,GAAxD,gEAAuD,MAAgB,sFACxF,MAAM,sFACN,8JAAiC,8FAC9B,wZAA0D,IAQ3C,sFAClB,MAAM,mFACT,MAAM,gFACT,2BAduB,oJAAuD,GAArE,aAAsE,EAAxD,oBAAuD,GAGvD,kBAA2C,8CAAzD,aAA0D,EAA5C,SAA2C,2BAJrD,6OAAuD;8GAJvE,wHAAuD,qFACpD,geAAqE,IAkB/D,6EACT,mDAnBQ,wDAAkD,2BAAvD,YAAqE,EAAhE,SAAkD;8GA0B9C,wHAAuE;8GAD1E,wHAAkE,8FAC/D,0bAAuE,GAAzD,+DAAwD,MAAgB,sFACzF,2BADiB,mJAAwD,GAAtE,YAAuE,EAAzD,oBAAwD;8GALlF,yIAA4D,qFACzD,kKAAqC,wFAClC,4HAAI,gFAAoB,MAAK,mFAC7B,8JAAkC,2FAC/B,ieAAkE,IAEnD,mFAClB,MAAM,gFACT,MAAM,6EACT,mDALuB,mBAAmD,2BAAjE,aAAkE,EAApD,SAAmD,mDAFhE,6DAAoB;8GA9BjC,yHAAiC,kFAC9B,uZAEsD,IAC3B,+EAE3B,uZAAuD,IAoBxC,+EAEf,uZAA4D,IAStD,0EACT,mDArC6B,yOAA+E,qCAAzG,YAEsD,EAF5B,SAA+E,GAK3F,wGAAwC,mCAAtD,YAAuD,EAAzC,SAAwC,GAsBjD,yGAAyC,oCAA9C,YAA4D,EAAvD,SAAyC;;mEAYX,6EACnC,8JAAiC,qFAC9B,+9BACkD,oFAClD,MAAW,gFACX;YAAA;YAAA,YAA4E;YAAtC;;gCAAqC;;YAA3E;QAAA,aAA4E,iFAAiB,MAAI,6EACpG,MAAM,0EACT,mDALgB,0BAAgB,EAAC,yCAAoC,gBAA/D,YACkD,EADxC,SAAgB,EAAC,SAAoC,mDACrD,yCAAuC,gBADjD,YACkD,EAAxC,SAAuC,GAE9C,kBAAkB,sBAArB,YAA4E,EAAzE,SAAkB,GAAuD,kEAAiB;AAAA;yPAvGnB,0EAChF,4HAAI,4IAA4C,IAAK,0EACrD,sZAAwD,IA0ClD,4EAEN,wZAA0E,IAAM,4EAEhF,MAAgE,0EAChE,wZAAqE,IAE/D,4EAEN,wZAEmG,IACxE,4EAE3B,wZAAiC,IAsClB,4EAEf,oIAAsC,KAOxB,0EACd,mDAxGK,oBAAqC,+BAA1C,YAAwD,EAAnD,SAAqC,GA4CrC,mBAAoC,+BAAzC,aAA0E,EAArE,SAAoC,GAGpC,mBAAuC,kCAA5C,aAAqE,EAAhE,SAAuC,GAIlB,+CAAkD,uBAA5E,aAEmG,EAFzE,SAAkD,GAK9D,mBAAkB,aAAhC,aAAiC,EAAnB,SAAkB,2BAzD5B,6MAA4C","file":"53-es2015.js","sourcesContent":["/* Copyright 2019-2020 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {DateRangeData} from \"@component/datetime-picker/date-range-picker.component\";\nimport {VsanDateTimeUtils} from \"@util/vsan-dateteime-util\";\n\n/**\n * Information about the perspective for presenting the health view.\n */\nexport class HealthPerspectiveData {\n\n   private _from: number;\n\n   set from(value: number) {\n      if (!value) {\n         this._from = null;\n         return;\n      }\n      this._from = VsanDateTimeUtils.roundToMinuteStart(value);\n   }\n\n   get from(): number {\n      return this._from;\n   }\n\n   private _to: number;\n\n   set to(value: number) {\n      if (!value) {\n         this._to = null;\n         return;\n      }\n      this._to = VsanDateTimeUtils.roundToMinuteEnd(value);\n   }\n\n   get to(): number {\n      return this._to;\n   }\n\n   constructor(public isHistoricalHealthPerspective: boolean, rangeEndDate?: number, rangeStartDate?: number) {\n      if (!rangeEndDate) {\n         rangeEndDate = new Date().getTime();\n      }\n      this.to = rangeEndDate;\n      if (!rangeStartDate) {\n         rangeStartDate = rangeEndDate - VsanDateTimeUtils.DAY_IN_MILLISECONDS;\n      }\n      this.from = rangeStartDate;\n   }\n\n   set dateRange(range: DateRangeData) {\n      this.from = range.from;\n      this.to = range.to;\n   }\n\n   get dateRange(): DateRangeData {\n      return new DateRangeData(this.from, this.to);\n   }\n\n   equals(value: HealthPerspectiveData) {\n      return value &&\n            value.isHistoricalHealthPerspective == this.isHistoricalHealthPerspective &&\n            value.from == this.from &&\n            value.to == this.to;\n   }\n\n   clone(): HealthPerspectiveData {\n      return new HealthPerspectiveData(this.isHistoricalHealthPerspective, this.to, this.from);\n   }\n}","/* Copyright 2017 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {FormArray, FormControl, FormGroup} from \"@angular/forms\";\n\nexport class ReactiveFormUtil {\n\n   private static readonly FORM_CONTROLS_DELIMITER: string = \".\";\n\n   /*\n    * Trigger validation on all controls in a form group and mark them as touched to display errors\n    */\n   static validateAllFormFields = (formGroup: FormGroup): void => {\n      formGroup.markAsTouched();\n      Object.keys(formGroup.controls).forEach(field => {\n         const control = formGroup.get(field);\n         control.markAsTouched({ onlySelf: true });\n         if (control instanceof FormGroup) {\n            ReactiveFormUtil.validateAllFormFields(control);\n         } else if (control instanceof FormArray) {\n            control.controls.forEach(\n                  (childControl: FormGroup) => ReactiveFormUtil.validateAllFormFields(childControl));\n         } else if (control instanceof FormControl) {\n            ReactiveFormUtil.validateControls([control]);\n         }\n      });\n   };\n\n   static validateControls = (controls: FormControl[]): void => {\n      controls.forEach((control) => {\n         control.markAsTouched({onlySelf: true});\n         control.updateValueAndValidity({\n            onlySelf: false,\n            emitEvent: true\n         });\n      });\n   };\n\n   /**\n    * Trigger updateValueAndValidity() to call ValidatorFn and update validity of all controls in a form group.\n    */\n   static updateFormControlsValueAndValidity = (formGroup: FormGroup) => {\n      Object.keys(formGroup.controls).forEach(control => {\n         if (formGroup.get(control) instanceof FormControl) {\n            formGroup.get(control).updateValueAndValidity();\n         }\n      })\n   };\n\n   static getFormControlPath = (...parts: string[]): string => {\n      return parts.join(ReactiveFormUtil.FORM_CONTROLS_DELIMITER);\n   };\n}\n","<!-- Copyright 2017-2021 VMware, Inc. All rights reserved. -- VMware Confidential -->\n<button id=\"{{id}}\"\n        class=\"nav-item\"\n        role=\"tab\"\n        [class.selected]=\"isSelected\"\n        (click)=\"onClick()\"\n        [attr.aria-selected]=\"isSelected\">\n\n   <!-- Show a custom icon -->\n   <div *ngIf=\"isCustomIconPassed\" class=\"nav-item-left\">\n      <clr-icon [attr.shape]=\"shape\" [style.color]=\"shapeColor.getColor()\" class=\"is-solid\"></clr-icon>\n   </div>\n   <!-- Show a status icon -->\n   <div *ngIf=\"!isCustomIconPassed\" class=\"nav-item-left\" [ngClass]=\"statusClass\">\n      <clr-icon [attr.shape]=\"statusIconShape\" class=\"alert-icon is-solid\"></clr-icon>\n   </div>\n\n   <div class=\"nav-item-right\" title=\"{{name}}\">\n      {{name}}\n   </div>\n</button>\n","/* Copyright 2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {CancelablePromise} from \"@util/promise/cancelable-promise\";\n\nexport class PromiseBaton<TResult> {\n   private ongoingPromise: CancelablePromise<TResult>;\n\n   constructor() {\n      this.ongoingPromise = null;\n   }\n\n   /**\n    * Only the last passed promise will be resolved. Others will be canceled.\n    * @param promise - The only pending promise that we want to resolve.\n    * @param rejectOnCancel - Whether we want to rethrow the cancellation of the returned promise.\n    * @example\n    * ```ts\n    * // If later we cancel the returned promise it will be rejected with the following error: { canceled: true }.\n    * resolveOnly(promise, true);\n    * ```\n    * ```ts\n    * // If later we cancel the returned promise it won't be rejected and the 'catch' callback won't be invoked.\n    * resolveOnly(promise, false);\n    * ```\n    */\n   resolveOnly(promise: Promise<TResult>, rejectOnCancel: boolean = false): Promise<TResult> {\n      this.cancelLastOne();\n      // We wrap it into CancelablePromise to be able to cancel this one without affecting the original promise.\n      // Original promise subscribers still will be able to get the result.\n      this.ongoingPromise = new CancelablePromise(promise, rejectOnCancel);\n      return this.ongoingPromise.promise;\n   }\n\n   /**\n    * Reject the currently running promise.\n    */\n   cancelLastOne(): void {\n      if (this.ongoingPromise) {\n         this.ongoingPromise.cancel();\n      }\n   }\n}","/* Copyright 2017-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, EventEmitter, Input, Output} from \"@angular/core\";\nimport {VsanHealthUtil} from \"@util/vsan-health-util\";\nimport {VsanHealthStatus} from \"@generated/vsan-health-status\";\nimport {ThemeSpecificColor} from \"@model/theme-specific-color\";\n\n@Component({\n   templateUrl: \"health-nav-tab.html\",\n   styleUrls: [\"health-nav-tab.scss\"],\n   selector: \"vsan-health-nav-tab\",\n})\nexport class HealthNavTabComponent {\n\n   @Input()\n   id: string;\n\n   @Input()\n   name: string;\n\n   @Input()\n   shape: string;\n\n   @Input()\n   shapeColor: ThemeSpecificColor;\n\n   @Input()\n   status: VsanHealthStatus;\n\n   @Input()\n   isSelected: boolean = false;\n\n   @Output()\n   onClicked: EventEmitter<string> = new EventEmitter();\n\n   onClick = (): void => {\n      this.onClicked.emit(this.id);\n   };\n\n   get isCustomIconPassed(): boolean {\n      return this.shape != null;\n   }\n\n   get statusClass(): string {\n      const statusClass: string = VsanHealthUtil.getVsanHealthStatusBackgroundClass(this.status);\n      return statusClass ? `alert ${statusClass}` : \"\";\n   }\n\n   get statusIconShape(): string {\n      return VsanHealthUtil.getVsanHealthStatusIconShape(this.status);\n   }\n}\n","<!-- Copyright 2018-2021 VMware, Inc. All rights reserved. -- VMware Confidential -->\n<div class=\"nav-container\">\n   <div *ngIf=\"titleHealder\" class=\"title-header\">\n      <ng-container *ngTemplateOutlet=\"titleHealder\"></ng-container>\n   </div>\n   <div *ngIf=\"!isFlat && includeHistoricalHealth\" class=\"perspective-wrapper\">\n      <clr-toggle-wrapper class=\"toggle-wrapper\">\n         <input type=\"checkbox\" clrToggle\n                id=\"health-perspective-switch\"\n                [ngModel]=\"isHistoricalHealth\"\n                (ngModelChange)=\"onPerspectiveSwitch($event)\"/>\n         <label id=\"health-perspective-switch-label\">{{\"vsan.health.historical.switch.label\" | localized}}</label>\n      </clr-toggle-wrapper>\n      <vsan-datetime-picker *ngIf=\"isHistoricalHealth\"\n                            [selectMode]=\"DateTimeSelectMode.RANGE\"\n                            [datetime]=\"dateRange\"\n                            [errorMessage]=\"dateRangeError\"\n                            (datetimeChange)=\"onDateRangeChange($event)\"\n                            [max]=\"getCurrentDate()\"\n                            role=\"group\"\n                            aria-labelledby=\"health-perspective-switch-label\">\n      </vsan-datetime-picker>\n   </div>\n\n   <ng-container *ngIf=\"!hasErrors && !hasNoTestData\">\n      <ng-container *ngIf=\"!isFlat\">\n         <div class=\"sidenav-wrapper\">\n            <vsan-health-nav-tab *ngIf=\"overviewTestsData\"\n                                                [name]=\"'vsan.health.overview.title' | localized\"\n                                                [isSelected]=\"showOverviewPage\"\n                                                (onClicked)=\"onOverviewPageSelected()\"\n                                                [shape]=\"Icon.DASHBOARD.shape\"\n                                                [shapeColor]=\"Icon.DASHBOARD.color\"\n                                                role=\"presentation\">\n            </vsan-health-nav-tab>\n            <clr-accordion [clrAccordionMultiPanel]=\"true\">\n               <clr-accordion-panel *ngFor=\"let test of healthTests;let i=index\"\n                                    id=\"test-category-{{test.testData?.testId}}\"\n                                    [clrAccordionPanelDisabled]=\"test.testData.inProgress\"\n                                    [clrAccordionPanelOpen]=\"!test.isCollapsed\"\n                                    (clrAccordionPanelOpenChange)=\"test.isCollapsed = !$event\">\n                  <clr-accordion-title>\n                     <label id=\"check-{{i}}\" title=\"{{test.testData.testDescription}}\">\n                        {{test.testData.testName}}\n                     </label>\n                     <span *ngIf=\"test.testData.inProgress\" class=\"spinner spinner-sm spinner-inline\"></span>\n                     <clr-icon *ngIf=\"isCategoryIconVisible(test)\"\n                               [attr.shape]=\"getIconShape(test.testData)\"\n                               class=\"is-solid {{getIconClass(test.testData)}}\"\n                               size=\"18\">\n                     </clr-icon>\n                  </clr-accordion-title>\n                  <clr-accordion-content>\n                     <ng-container *ngTemplateOutlet=\"section;context: {test: test, selectedSubtestId: selectedSubTestId}\">\n                     </ng-container>\n                  </clr-accordion-content>\n               </clr-accordion-panel>\n            </clr-accordion>\n         </div>\n      </ng-container>\n\n      <ng-container *ngIf=\"isFlat\">\n         <ng-container *ngTemplateOutlet=\"section;context: {test: healthTests[0], selectedSubtestId: selectedSubTestId}\">\n         </ng-container>\n      </ng-container>\n   </ng-container>\n\n</div>\n\n<div *ngIf=\"!hasNoTestData && !showOverviewPage\"\n     class=\"checks-details\"\n     role=\"tabpanel\" [attr.aria-labelledby]=\"selectedSubtest?.testId\">\n   <vsan-health-details-card *ngIf=\"!hasErrors\"\n                                       class=\"details-card\"\n                                       [class.has-border]=\"includeBorderToDetails\"\n                                       [preselectTimestamp]=\"preselectTimestamp\"\n                                       [data]=\"selectedSubtest\"\n                                       [isVirtualObjectsLinkShown]=\"isVirtualObjectsLinkShown\"\n                                       [isDiskSpaceActionShown]=\"isDiskSpaceActionShown\"\n                                       [isSilentCheck]=\"isSilentCheck(selectedSubtest)\"\n                                       [isOnlineTest]=\"isOnlineTestSelected\"\n                                       [silentCheckSupported]=\"silentCheckSupported\"\n                                       [isVsphereHealth]=\"isVsphereHealth\"\n                                       [hasEditPermissions]=\"hasEditPermissions\"\n                                       [showTestName]=\"!isFlat\"\n                                       [isHistoricalTestData]=\"healthPerspective.isHistoricalHealthPerspective\"\n                                       [showHealthCorrelationMessages]=\"true\"\n                                       (onHealthTestNavigation)=\"navigateToHealthTest($event)\"\n                                       (onRetest)=\"retest.emit($event)\"\n                                       (onSilentChange)=\"silentChange($event)\"\n                                       (onError)=\"error.emit($event)\">\n   </vsan-health-details-card>\n</div>\n\n<!-- Overview health page -->\n<div *ngIf=\"!hasNoTestData && showOverviewPage\" class=\"checks-details\" role=\"tabpanel\">\n   <vsan-health-overview [overviewData]=\"overviewTestsData\"\n                         [selectedSilenceChecks]=\"selectedSilenceChecks\"\n                         [isHistoricalHealth]=\"isHistoricalHealth\"\n                         [historicalDateRange]=\"dateRange\"\n                         (onTestSelection)=\"navigateToHealthTest($event)\">\n   </vsan-health-overview>\n</div>\n\n<!-- No historical test data for selected period -->\n<vsan-illustrated-message *ngIf=\"!hasErrors && isHistoricalHealth && hasNoTestData\"\n                          [type]=\"noDataMessageType\"\n                          [message]=\"'vsan.health.historical.details.test.data.missing' | localized\">\n</vsan-illustrated-message>\n\n<ng-template #section let-test=\"test\" let-selectedSubtestId=\"selectedSubtestId\">\n   <div *ngIf=\"test?.testData\" class=\"nav-list\">\n      <vsan-health-nav-tab *ngFor=\"let subtest of getUnhealthySubtests(test.testData.subtests)\"\n                                          [id]=\"subtest.testId\"\n                                          [status]=\"subtest.status\"\n                                          [name]=\"subtest.testName\"\n                                          [isSelected]=\"selectedSubtestId == subtest.testId\"\n                                          (onClicked)=\"summaryCardClick($event)\" role=\"presentation\">\n      </vsan-health-nav-tab>\n      <div *ngIf=\"getHealthySubtests(test.testData.subtests).length\"\n           class=\"healthy-tests-wrapper\"\n           [vsan-show-hide]=\"getHealthyTestWrapperState(test.testData.subtests)\"\n           [showTriggerElement]=\"showTrigger\"\n           [hideTriggerElement]=\"hideTrigger\" role=\"presentation\">\n         <vsan-health-nav-tab *ngFor=\"let subtest of getHealthySubtests(test.testData.subtests)\"\n                                             [id]=\"subtest.testId\"\n                                             [status]=\"subtest.status\"\n                                             [name]=\"subtest.testName\"\n                                             [isSelected]=\"selectedSubtestId == subtest.testId\"\n                                             (onClicked)=\"summaryCardClick($event)\" role=\"presentation\">\n         </vsan-health-nav-tab>\n      </div>\n      <ng-template #showTrigger>\n         <button class=\"healthy-test-trigger\" aria-expanded=\"false\">\n            {{\"vsan.monitor.health.expand.healthy.tests\" | localized: getHealthySubtests(test.testData.subtests).length.toString()}}\n         </button>\n      </ng-template>\n      <ng-template #hideTrigger>\n         <button class=\"healthy-test-trigger\" aria-expanded=\"true\">\n            {{\"vsan.monitor.health.collapse.healthy.tests\" | localized: getHealthySubtests(test.testData.subtests).length.toString()}}\n         </button>\n      </ng-template>\n   </div>\n</ng-template>\n","/* Copyright 2019 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Directive, Input, OnInit} from '@angular/core';\nimport {BehaviorSubject, Observable} from \"rxjs\";\nimport {ClrButton} from \"@clr/angular\";\n\n/**\n * Attribute directive for detecting button title change and storing title.\n * Only used for clr-button in clr-button-group.\n * @title - The title of clr-button\n */\n@Directive({\n   selector: \"clr-button[vsan-button-title]\"\n})\nexport class ButtonTitleDirective implements OnInit {\n\n   constructor(public host: ClrButton) {}\n\n   private _title: string;\n\n   @Input(\"vsan-button-title\")\n   set title(value: string) {\n      if (this._title !== value) {\n         this.titleChange.next(value);\n      }\n      this._title = value;\n   }\n\n   get title(): string {\n      return this._title;\n   }\n\n   private titleChange: BehaviorSubject<string> = new BehaviorSubject<string>(\"\");\n\n   get titleChangeEvent(): Observable<string> {\n      return this.titleChange.asObservable();\n   }\n\n   ngOnInit(): void {\n      // name should be set, if not provided in template - generate one. ClrButtom#name is used to generate the name\n      // attribute of the markup button. Later the name is used to match the generated markup with the directive.\n      if (!this.host.name) {\n         this.host.name = Math.random().toString();\n      }\n   }\n\n   ngOnDestroy() {\n      this.titleChange.unsubscribe();\n   }\n}","/* Copyright 2020 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {AfterContentInit, ContentChildren, Directive, ElementRef} from \"@angular/core\";\nimport {ClrButton} from \"@clr/angular\";\nimport {ClrButtonBaseDirective, DirectiveHolder} from \"@directive/clr-button-group/clr-button-base.directive\";\n\n/**\n * Applies on every clr-button-group and help to link the clr-button with directive applieds on it,  which extends\n * {@link ClrButtonBaseDirective}, to the actual rendered html button.\n */\n@Directive({\n   selector: \"clr-button-group\",\n})\nexport class ClrButtonGroupCommonDirective implements AfterContentInit {\n\n   @ContentChildren(ClrButton, {descendants: true})\n   clrButtons: ClrButton[];\n\n   constructor(private elRef: ElementRef) {}\n\n   ngAfterContentInit(): void {\n      setTimeout(() => {\n         const allButtons: NodeListOf<HTMLButtonElement> = this.elRef.nativeElement.querySelectorAll(\"button\");\n         // match button with clrButton and notify directives\n         this.clrButtons.filter(clrButton => !!(clrButton as DirectiveHolder).directives)\n               .forEach((clrButton, index) => {\n                  const buttonFound: HTMLButtonElement = this.findButtonByName(clrButton.name, allButtons);\n                  if (buttonFound) {\n                     (clrButton as DirectiveHolder).directives.forEach(directive => {\n                        directive.resolveButton(clrButton, buttonFound, index);\n                     });\n                  }\n               });\n      });\n   }\n\n   private findButtonByName(name: string, buttons: NodeListOf<HTMLButtonElement>): HTMLButtonElement {\n      for (let i: number = 0; i < buttons.length; i++) {\n         if (buttons.item(i).name === name) {\n            return buttons.item(i);\n         }\n      }\n      return null;\n   }\n\n}","/* Copyright 2021-2022 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, EventEmitter, Input, OnInit, Output} from \"@angular/core\";\nimport {DateRangeData} from \"@component/datetime-picker/date-range-picker.component\";\nimport {IllustratedMessageType} from \"@component/illustrated-message/illustrated-message.component\";\nimport {VsanHealthOverviewData} from \"@generated/vsan-health-overview-data\";\nimport {VsanHealthStatus} from \"@generated/vsan-health-status\";\nimport {VsanHistoricalHealthService} from \"@generated/vsan-historical-health-service\";\nimport {VsanTestCorrelationData} from \"@generated/vsan-test-correlation-data\";\nimport {VsanTestInstanceDetails} from \"@generated/vsan-test-instance-details\";\nimport {Loader} from \"@service/flow/loader.decorator\";\nimport {LoadingIndicator} from \"@service/flow/loading-indicator.decorator\";\nimport {ManagedObject} from \"@service/managed-object\";\nimport {Cached, TrackBy} from \"@util/cache/cached.decorator\";\nimport {Icon} from \"@util/icon\";\nimport {RaceConditionSafe} from \"@util/promise/race-condition-safe.decorator\";\nimport {VsanHealthUtil} from \"@util/vsan-health-util\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {HealthTestNavParams} from \"../model/health-test-nav-params\";\n\n@Component({\n   selector: \"vsan-health-overview\",\n   templateUrl: \"health-overview.html\",\n   styleUrls: [\"health-overview.scss\"],\n})\nexport class HealthOverviewComponent implements OnInit {\n   Icon: typeof Icon = Icon;\n   IllustratedMessageType: typeof IllustratedMessageType = IllustratedMessageType;\n\n   @Input()\n   overviewData: VsanHealthOverviewData;\n\n   @Input()\n   selectedSilenceChecks: string[];\n\n   @Input()\n   isHistoricalHealth: boolean;\n\n   @Input()\n   historicalDateRange: DateRangeData;\n\n   @Output()\n   onTestSelection: EventEmitter<HealthTestNavParams> = new EventEmitter<HealthTestNavParams>();\n\n   private static readonly INSTANCES_LOADING_KEY: string = \"instances-loading\";\n   @LoadingIndicator({name: HealthOverviewComponent.INSTANCES_LOADING_KEY})\n   isHistoricalInstancesLoading: boolean;\n\n   private static readonly CORRELATIONS_LOADING_KEY: string = \"correlations-loading\";\n   @LoadingIndicator({name: HealthOverviewComponent.CORRELATIONS_LOADING_KEY})\n   isHistoricalCorrelationsLoading: boolean;\n\n   historicalInstances: VsanTestInstanceDetails[];\n   selectedHistoricalTimestamp: number;\n\n   isTimestampSelected: boolean;\n   clusterRef: ManagedObject;\n\n   constructor(private historicalHealthService: VsanHistoricalHealthService) {\n   }\n\n   async ngOnInit(): Promise<void> {\n      if (this.isHistoricalHealth) {\n         await this.fetchHistoricalInstances();\n      }\n   }\n\n   @Loader({name: HealthOverviewComponent.INSTANCES_LOADING_KEY})\n   private async fetchHistoricalInstances(): Promise<void> {\n      this.clusterRef = ManagedObject.contextObject;\n      this.historicalInstances =\n            await this.getHistoricalOverallHealth(this.historicalDateRange.from, this.historicalDateRange.to);\n   }\n\n   @RaceConditionSafe()\n   @Cached({trackBy: TrackBy.INPUT_VALUES})\n   private async getHistoricalOverallHealth(from: number, to: number): Promise<VsanTestInstanceDetails[]> {\n      return await this.historicalHealthService.getHistoricalOverallHealth(this.clusterRef, from, to);\n   }\n\n   @Loader({name: HealthOverviewComponent.CORRELATIONS_LOADING_KEY})\n   async instanceSelected(instanceTimestamp: number): Promise<void> {\n      this.overviewData = null;\n      this.isTimestampSelected = !!instanceTimestamp;\n      if (instanceTimestamp) {\n         this.selectedHistoricalTimestamp = instanceTimestamp;\n         this.overviewData = await this.getHistoricalOverallHealthForInstance(instanceTimestamp);\n      }\n   }\n\n   @RaceConditionSafe()\n   @Cached({trackBy: TrackBy.INPUT_VALUES})\n   private async getHistoricalOverallHealthForInstance(instanceTimestamp: number): Promise<VsanHealthOverviewData> {\n      return this.historicalHealthService.getHistoricalOverallHealthForInstance(this.clusterRef, instanceTimestamp);\n   }\n\n   onTestSelected(testId: string): void {\n      const params: HealthTestNavParams = new HealthTestNavParams(testId);\n      if (this.isHistoricalHealth) {\n         params.timestamp = this.selectedHistoricalTimestamp;\n      }\n      this.onTestSelection.emit(params);\n   }\n\n   get otherIssuesTitle(): string {\n      return this.overviewData.coreIssues && this.overviewData.coreIssues.length > 0\n            ? VsanUiUtils.getString(\"vsan.health.overview.other.issues.label\")\n            : VsanUiUtils.getString(\"vsan.health.overview.issues.label\");\n   }\n\n   get noIssuesMessage(): string {\n      return this.isHistoricalHealth\n            ? VsanUiUtils.getString(\"vsan.health.overview.historical.noIssues\")\n            : VsanUiUtils.getString(\"vsan.health.overview.normal.noIssues\");\n   }\n\n   get showOverallCounts(): boolean {\n      return this.isHistoricalHealth\n            ? this.overviewData && !this.isHistoricalCorrelationsLoading && this.isTimestampSelected\n            : !!this.overviewData;\n   }\n\n   get showIssues(): boolean {\n      return this.isHistoricalHealth\n            ? !this.isHistoricalInstancesLoading && !this.isHistoricalCorrelationsLoading && this.isTimestampSelected\n            : !!this.overviewData;\n   }\n\n   getChildren(test: VsanTestCorrelationData): VsanTestCorrelationData[] {\n      return test.relatedHealthTests;\n   }\n\n   getOverallCount(silentTestIds: string[]): number {\n      if (VsanUiUtils.isEmpty(silentTestIds)) {\n         return 0;\n      }\n\n      return silentTestIds.filter(testId => VsanUiUtils.isEmpty(this.selectedSilenceChecks)\n            || !this.isSilentTest(testId)).length;\n   }\n\n   getStatusIconClass(testData: VsanTestCorrelationData): string {\n      if (testData.isSkipped) {\n         return Icon.SKIPPED_CHECK;\n      }\n      return VsanHealthUtil.getVsanHealthStatusIconClass(this.isSilentTest(testData.testId)\n            ? VsanHealthStatus.skipped\n            : testData.testStatus);\n   }\n\n   getStatusIconShape(testData: VsanTestCorrelationData): string {\n      if (testData.isSkipped) {\n         return Icon.SKIPPED_CHECK;\n      }\n      return VsanHealthUtil.getVsanHealthStatusIconShape(this.isSilentTest(testData.testId)\n            ? VsanHealthStatus.skipped\n            : testData.testStatus);\n   }\n\n   private isSilentTest(testId: string): boolean {\n      if (this.isHistoricalHealth) {\n         // Don't show the currently silenced test as silencedwhen dealing with older versions of the test (historical).\n         return false;\n      }\n      return this.selectedSilenceChecks?.some(silenceId => testId.indexOf(silenceId) !== -1);\n   }\n}","/* Copyright 2019-2020 VMware, Inc. All rights reserved. -- VMware Confidential */\n\nimport {VsanTestData} from \"@generated/vsan-test-data\";\n\n/**\n * Data model used to display health tests summary cards.\n */\nexport class HealthTests {\n   constructor(\n         public testData: VsanTestData,\n         public isCollapsed: boolean = true) {\n   }\n}\n","/* Copyright 2018-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {\n   Component,\n   EventEmitter,\n   HostBinding,\n   Input,\n   Output,\n   TemplateRef,\n} from \"@angular/core\";\nimport {VsanHealthUtil} from \"@util/vsan-health-util\";\nimport {VsanHealthData} from \"@generated/vsan-health-data\";\nimport {VsanTestData} from \"@generated/vsan-test-data\";\nimport {HealthTests} from \"../model/health-tests.data\";\nimport {VsanHealthStatus} from \"@generated/vsan-health-status\";\nimport {DateTimeSelectMode} from \"@component/datetime-picker/datetime-picker.component\";\nimport {DateRangeData} from \"@component/datetime-picker/date-range-picker.component\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {ShowHideState} from \"@directive/show-hide/show-hide.directive\";\nimport {VsanDateTimeUtils} from \"@util/vsan-dateteime-util\";\nimport {IllustratedMessageType} from \"@component/illustrated-message/illustrated-message.component\";\nimport {HealthTestNavParams} from \"../model/health-test-nav-params\";\nimport {VsanHealthOverviewData} from \"@generated/vsan-health-overview-data\";\nimport {HealthSilentChangeData} from \"../model/health-silent-change.data\";\nimport {HealthRetestEventData} from \"../model/health-retest-event.data\";\nimport {Icon} from \"@util/icon\";\nimport {HealthPerspectiveData} from \"./model/health-perspective-data\";\n\n@Component({\n   templateUrl: \"health-checks.html\",\n   styleUrls: [\"health-checks.scss\"],\n   selector: \"vsan-health-checks\",\n})\nexport class HealthChecksComponent {\n   DateTimeSelectMode: typeof DateTimeSelectMode = DateTimeSelectMode;\n   VsanHealthStatus: typeof VsanHealthStatus = VsanHealthStatus;\n   ShowHideState: typeof ShowHideState = ShowHideState;\n   VsanHealthUtil: typeof VsanHealthUtil = VsanHealthUtil;\n   Icon: typeof Icon = Icon;\n\n   readonly HEALTH_STATUS_ORDER: VsanHealthStatus[] = [\n      VsanHealthStatus.red, VsanHealthStatus.yellow, VsanHealthStatus.info,\n      VsanHealthStatus.green, VsanHealthStatus.skipped, VsanHealthStatus.unknown,\n   ];\n\n   private readonly MAX_HISTORICAL_HEALTH_INTERVAL_DAYS: number = VsanDateTimeUtils.DAYS_IN_MONTH_DEFAULT;\n\n   isHistoricalHealth: boolean;\n   dateRange: DateRangeData;\n   dateRangeError: string;\n   healthTests: HealthTests[] = [];\n   waitingForServiceConfig: boolean;\n\n   @HostBinding(\"class.no-sidenav-layout\")\n   hasNoTestData: boolean;\n\n   @Input()\n   titleHealder: TemplateRef<any>;\n\n   @Input()\n   isVirtualObjectsLinkShown: boolean = true;\n\n   @Input()\n   isDiskSpaceActionShown: boolean = true;\n\n   @Input()\n   hasEditPermissions: boolean = false;\n\n   @Input()\n   isFlat: boolean = false;\n\n   @Input()\n   includeHistoricalHealth: boolean;\n\n   @Input()\n   selectedSubTestId: string = \"\";\n\n   @Input()\n   lastCheckedTimestamp: number;\n\n   @Input()\n   includeBorderToDetails: boolean;\n\n   @Input()\n   hasErrors: boolean;\n\n   @Output()\n   selectedSubTestIdChange: EventEmitter<string> = new EventEmitter<string>();\n\n   preselectTimestamp: number = null;\n\n   private _showOverviewPage: boolean;\n\n   @Input()\n   set showOverviewPage(val: boolean) {\n      this._showOverviewPage = val;\n      if (this.showOverviewPage) {\n         // If the overview page is selected, hide the test details.\n         this.selectedSubTestIdChange.emit(null);\n      }\n      this.showOverviewPageChange.emit(this.showOverviewPage);\n   }\n\n   get showOverviewPage(): boolean {\n      return this._showOverviewPage;\n   }\n\n   @Output()\n   showOverviewPageChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n   overviewTestsData: VsanHealthOverviewData;\n\n   private _vsanHealthData: VsanHealthData;\n   private isTestDataInitialised: boolean = false;\n\n   @Input()\n   set vsanHealthData(data: VsanHealthData) {\n      this._vsanHealthData = data;\n\n      if (!data || VsanUiUtils.isEmpty(data.testsData)) {\n         this.healthTests = [];\n         this.selectedSubTestId = null;\n         this.preselectTimestamp = null;\n         this.hasNoTestData = true;\n         return;\n      }\n\n      this.overviewTestsData = this._vsanHealthData.overviewData;\n\n      if (!this.isTestDataInitialised) {\n         this.initTestGroups(this._vsanHealthData);\n         this.isTestDataInitialised = true;\n         return;\n      }\n\n      this.updateTestGroups(this._vsanHealthData);\n   }\n\n   get vsanHealthData(): VsanHealthData {\n      return this._vsanHealthData;\n   }\n\n   @Input()\n   silentCheckSupported: boolean = false;\n\n   @Input()\n   selectedSilenceChecks: string[] = [];\n\n   @Input()\n   isVsphereHealth: boolean;\n\n   private _healthPerspective: HealthPerspectiveData = new HealthPerspectiveData(false);\n\n   @Input()\n   set healthPerspective(value: HealthPerspectiveData) {\n      // the object is two-way bound between parent and child. If the same object is passed back and forth it is\n      // impossible to detect a change (difference from the cached one). To address this issue always work with a clone\n      // of the object (new object)\n      const newValue: HealthPerspectiveData = value.clone();\n      if (!newValue || newValue.equals(this._healthPerspective)) {\n         return;\n      }\n      this._healthPerspective = newValue;\n      this.isHistoricalHealth = this._healthPerspective.isHistoricalHealthPerspective;\n      this.dateRange = this._healthPerspective.dateRange;\n   }\n\n   get healthPerspective(): HealthPerspectiveData {\n      return this._healthPerspective;\n   }\n\n   @Output()\n   healthPerspectiveChange: EventEmitter<HealthPerspectiveData> = new EventEmitter<HealthPerspectiveData>();\n\n   @Output()\n   retest: EventEmitter<HealthRetestEventData> = new EventEmitter<HealthRetestEventData>();\n\n   @Output()\n   error: EventEmitter<string> = new EventEmitter<string>();\n\n   get selectedSubtest(): VsanTestData {\n      if (!this.selectedSubTestId) {\n         return null;\n      }\n      return [].concat(...this.healthTests.map(healthTest => healthTest.testData.subtests))\n            .find(subtest => subtest.testId === this.selectedSubTestId);\n   }\n\n   get isOnlineTestSelected(): boolean {\n      const selectedTest: VsanTestData = this.selectedSubtest;\n      if  (!selectedTest) {\n         return false;\n      }\n\n      const testCategory: VsanTestData = this.vsanHealthData.testsData.find(t =>\n            t.subtests && t.subtests.some(s => s.testId === selectedTest.testId));\n      if (!testCategory) {\n         return false;\n      }\n\n      return testCategory.subtests &&\n            testCategory.subtests.some(subtest => subtest.testId === VsanHealthUtil.CEIP_TEST_ID\n                  || subtest.testId === VsanHealthUtil.SUPPORT_INSIGHT_TEST_ID);\n   }\n\n   getHealthySubtests(subtests: VsanTestData[]): VsanTestData[] {\n      if (!subtests) {\n         return [];\n      }\n      return subtests.filter(subtest => !this.isUnhealthyStatus(subtest.status));\n   }\n\n   getUnhealthySubtests(subtests: VsanTestData[]): VsanTestData[] {\n      if (VsanUiUtils.isEmpty(subtests)) {\n         return [];\n      }\n      return subtests.filter(subtest => this.isUnhealthyStatus(subtest.status));\n   }\n\n   isSilentCheck = (testData: VsanTestData): boolean => {\n      if (!testData) {\n         return false;\n      }\n      // for a test category, if all of the subtests are silence, the category is marked as silence\n      if (testData.subtests) {\n         const silentItems: string[] =\n               !VsanUiUtils.isEmpty(this.selectedSilenceChecks) &&\n               this.selectedSilenceChecks.filter(check => testData.subtests.some(\n                     test => check === test.silenceTestId));\n         return (silentItems.length === testData.subtests.length);\n      }\n      return !VsanUiUtils.isEmpty(this.selectedSilenceChecks) &&\n            this.selectedSilenceChecks.some(check => check === testData.silenceTestId);\n   };\n\n   silentChange(data: HealthSilentChangeData): void {\n      if (data.isSilent) {\n         this.selectedSilenceChecks.push(this.selectedSubtest.silenceTestId);\n         this.selectedSubtest.status = VsanHealthStatus.skipped;\n         // get selected test category and resort subtests, because there is new skipped subtest\n         const selectedCategory: VsanTestData =\n               this.getSelectedCategory(this.vsanHealthData.testsData, this.selectedSubtest.testId);\n         if (selectedCategory) {\n            this.sortSubtests(selectedCategory.subtests);\n         }\n      } else {\n         this.selectedSilenceChecks.splice(this.selectedSilenceChecks.indexOf(this.selectedSubtest.silenceTestId), 1);\n         if (data.settings.runRetest) {\n            this.retest.emit(new HealthRetestEventData(data.settings.retestOnlineHealth));\n         }\n      }\n   }\n\n   navigateToHealthTest(params: HealthTestNavParams): void {\n      this.showOverviewPage = false;\n      this.selectedSubTestId = params.testId;\n      this.preselectTimestamp = params.timestamp;\n      const group: HealthTests = this.healthTests.find(test => test.testData && test.testData.subtests &&\n            test.testData.subtests.some(subtest => subtest.helpId === this.selectedSubTestId));\n      if (group) {\n         group.isCollapsed = false;\n      }\n   }\n\n   private getSelectedCategory(testCategiries: VsanTestData[], subtestId: string): VsanTestData {\n      return testCategiries.find(testCategory =>\n            testCategory.subtests.some(subtest => subtest.testId === subtestId));\n   }\n\n   private initTestGroups(healthData: VsanHealthData): void {\n      if (this.isFlat) {\n         this.healthTests = healthData.testsData.map(item => new HealthTests(item, false));\n      } else {\n         this.healthTests = healthData.testsData.map((item: VsanTestData) => {\n            this.sortSubtests(item.subtests);\n            return new HealthTests(item, item.inProgress ? true : this.getLoadedGroupCollapseState(item));\n         });\n      }\n      // once healthTests are initialized, try to get selected subtest from the persisted id. If not found reset\n      // selected test id. This may happen if the selected test is not present any more or has no historical data\n      // for the selected period.\n      // Also preselecting the first test should be done only if \"Overview\" page is not currently shown.\n      if (!this.selectedSubtest && !this.showOverviewPage) {\n         this.preselectFirstAvailableCheck();\n      }\n   }\n\n   private preselectFirstAvailableCheck(): void {\n      const firstCategoryWithTests: HealthTests =\n            this.healthTests.find(category => !VsanUiUtils.isEmpty(category.testData.subtests));\n      if (!firstCategoryWithTests) {\n         return;\n      }\n      firstCategoryWithTests.isCollapsed = false;\n      this.selectedSubTestId = firstCategoryWithTests.testData.subtests[0].testId;\n      this.changeSummaryCard(this.selectedSubTestId);\n   }\n\n   private updateTestGroups(newHealthData: VsanHealthData): void {\n      this.healthTests.forEach((currentGroup) => {\n         const updatedTest: VsanTestData = newHealthData.testsData.find(\n               test => test.testId === currentGroup.testData.testId);\n         if (updatedTest.inProgress) {\n            return; // group is still loading or has loaded in previous poll\n         }\n         // if the test is ready, update its data\n         // NOTE: the test will remain collapsed in order to avoid scroll jumping\n         currentGroup.testData = updatedTest;\n         this.sortSubtests(currentGroup.testData.subtests);\n      });\n   }\n\n   private getLoadedGroupCollapseState(testData: VsanTestData): boolean {\n      const isUnhealthy: boolean = this.isUnhealthyStatus(testData.status);\n      const isSelected: boolean = (testData.subtests.some(subTest => subTest.testId === this.selectedSubTestId));\n      return !isUnhealthy && !isSelected;\n   }\n\n   private sortSubtests(subtests: VsanTestData[]): void {\n      subtests.sort((a, b) => this.getElementPosition(a) - this.getElementPosition(b));\n   }\n\n   private getElementPosition(element: VsanTestData): number {\n      if (!element || !element.status) {\n         return this.HEALTH_STATUS_ORDER.length;\n      }\n      // put all not known statuses at the end - return index greater than the last element of the order array;\n      const result: number = this.HEALTH_STATUS_ORDER.indexOf(element.status);\n      return result < 0 ? this.HEALTH_STATUS_ORDER.length : result;\n   }\n\n   summaryCardClick(selectedSubtestId: string): void {\n      this.changeSummaryCard(selectedSubtestId);\n   }\n\n   private async changeSummaryCard(selectedSubtestId: string): Promise<void> {\n      this.showOverviewPage = false;\n      this.selectedSubTestId = selectedSubtestId;\n      this.preselectTimestamp = null;\n      if (!this.selectedSubtest) {\n         return;\n      }\n      this.selectedSubTestIdChange.emit(this.selectedSubtest.testId);\n   }\n\n   onOverviewPageSelected(): void {\n      this.selectedSubTestId = null;\n      this.showOverviewPage = true;\n   }\n\n   getIconShape(test: VsanTestData): string {\n      return VsanHealthUtil.getVsanHealthStatusIconShape(test.status);\n   }\n\n   getIconClass(test: VsanTestData): string {\n      return VsanHealthUtil.getVsanHealthStatusIconClass(test.status);\n   }\n\n   onPerspectiveSwitch(isHistoricalPerspective: boolean): void {\n      this.isHistoricalHealth = isHistoricalPerspective;\n      this._healthPerspective.isHistoricalHealthPerspective = isHistoricalPerspective;\n      this.notifyHistoricalHealthRangeChanged();\n   }\n\n   onDateRangeChange(range: DateRangeData): void {\n      this.dateRangeError = undefined;\n\n      if (!range.from || !range.to) {\n         this.dateRangeError = VsanUiUtils.getString(\"vsan.health.historical.daterange.empty\");\n         return;\n      }\n      // from before to\n      if (range.from > range.to) {\n         this.dateRangeError = VsanUiUtils.getString(\"vsan.health.historical.daterange.not.valid\");\n         return;\n      }\n      // more than 30 days back\n      const earliestAvailableTimestamp: number = VsanDateTimeUtils.getEarliestAvailableTimestamp(\n            this.lastCheckedTimestamp,\n            this.MAX_HISTORICAL_HEALTH_INTERVAL_DAYS * VsanDateTimeUtils.DAY_IN_MILLISECONDS);\n      if (range.from < earliestAvailableTimestamp) {\n         this.dateRangeError = VsanUiUtils.getString(\"vsan.health.historical.daterange.older.than.allowed\",\n               this.MAX_HISTORICAL_HEALTH_INTERVAL_DAYS);\n         return;\n      }\n\n      this._healthPerspective.dateRange = range;\n      this.notifyHistoricalHealthRangeChanged();\n   }\n\n   notifyHistoricalHealthRangeChanged(): void {\n      this.healthPerspectiveChange.emit(this._healthPerspective);\n   }\n\n   getCurrentDate(): Date {\n      return new Date();\n   }\n\n   getHealthyTestWrapperState(subtests: VsanTestData[]): ShowHideState {\n      // if all tests are healthy do not add option to hide / show\n      if (!this.getUnhealthySubtests(subtests).length) {\n         return ShowHideState.DISABLED;\n      }\n      // show healthy tests only if one of them is selected\n      return this.getHealthySubtests(subtests).some(subtest => subtest.testId === this.selectedSubTestId) ?\n            ShowHideState.SHOWN : ShowHideState.HIDDEN;\n   }\n\n   get noDataMessageType(): IllustratedMessageType {\n      return IllustratedMessageType.MISSING_DATA;\n   }\n\n   private isUnhealthyStatus(status: VsanHealthStatus): boolean {\n      return status === VsanHealthStatus.red || status === VsanHealthStatus.yellow;\n   }\n\n   isCategoryIconVisible(test: HealthTests): boolean {\n      if (!test || test.testData.inProgress) {\n         return false;\n      }\n      return test.isCollapsed && this.isUnhealthyStatus(test.testData.status);\n   }\n}\n","/* Copyright 2019-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {NgModule} from \"@angular/core\";\nimport {CommonModule} from \"@angular/common\";\nimport {ClarityModule} from \"@clr/angular\";\nimport {HealthChecksComponent} from \"./view/health-checks.component\";\nimport {HealthNavTabComponent} from \"./view/card/health-nav-tab.component\";\nimport {HealthDetailsCardModule} from \"./health-details-card.module\";\nimport {FormsModule} from \"@angular/forms\";\nimport {CommonPipeModule} from \"@pipe/common-pipe.module\";\nimport {DatetimePickerModule} from \"@component/datetime-picker/datetime-picker.module\";\nimport {CommonDirectiveModule} from \"@directive/common-directive.module\";\nimport {HealthConfigModule} from \"./config/health-config.module\";\nimport {IllustratedMessageModule} from \"@component/illustrated-message/illustrated-message.module\";\nimport {HealthOverviewComponent} from \"./view/health-overview.component\";\nimport {CommonCellsModule} from \"@component/cell/common-cells.module\";\n\n@NgModule({\n   imports: [\n      CommonModule,\n      FormsModule,\n      ClarityModule,\n      CommonPipeModule,\n      CommonDirectiveModule,\n      DatetimePickerModule,\n      HealthDetailsCardModule,\n      HealthConfigModule,\n      IllustratedMessageModule,\n      CommonCellsModule,\n   ],\n   declarations: [\n         HealthChecksComponent,\n         HealthNavTabComponent,\n         HealthOverviewComponent,\n   ],\n   exports: [\n         HealthChecksComponent,\n   ],\n})\nexport class HealthChecksModule {\n}","/* Copyright 2019-2022 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {ContentChildren, Directive, ElementRef, Input} from \"@angular/core\";\nimport {ClrButton} from \"@clr/angular\";\nimport {ButtonTitleDirective} from \"./button-title.directive\";\n\n/**\n * Attribute directive used to dynamically arrange child buttons, align some horizontally and\n * put the others into the drop-down list, this directive also add title attribute to the buttons.\n * It can only used on clr-button-group and there should be clr-button in the button group.\n * @maximumInlineActions - The maximum value of inline buttons.\n */\n@Directive({\n   selector: \"clr-button-group[vsan-button-group]\",\n})\nexport class ButtonGroupDirective {\n\n   private static readonly TOGGLE_MENU_BUTTON_SELECTOR: string = \"button.btn.dropdown-toggle\";\n   private static readonly VISIBLE_BUTTON_ELEMENTS_SELECTOR: string = \"button\";\n   private static readonly IN_MENU_BUTTON_ELEMENTS_SELECTOR: string = \"div.clr-button-group-menu > button\";\n\n   // Set the maximum value to 10 to display all buttons inline when there is enough space.\n   private _maximumInlineActions: number = 10;\n\n   @Input(\"vsan-button-group\")\n   set maximumInlineActions(value: number) {\n      if (!!value) {\n         this._maximumInlineActions = value;\n      }\n   }\n\n   private _buttonTitleDirectives: ButtonTitleDirective[] = [];\n\n   @ContentChildren(ButtonTitleDirective, {descendants: true})\n   set buttons(value: ButtonTitleDirective[]) {\n      this._buttonTitleDirectives = value;\n      this._buttonTitleDirectives.forEach(titleDirective => {\n         // Update button title when its title in directive changes.\n         titleDirective.titleChangeEvent.subscribe(() => {\n            setTimeout(this.updateButtonTitles);\n         });\n      });\n\n      // when action buttons with directive are changed (added / removed) some of them may go to the menu with\n      // additional actions. There is no other way found to handle toggle menu event, but click on the toggle button.\n      this.subscribeToggleButtonClick();\n   }\n\n   private _btns: ClrButton[];\n\n   @ContentChildren(ClrButton, {descendants: true})\n   set clrButtons(btns: ClrButton[]) {\n      this._btns = btns;\n      this.updateInMenuButtons();\n   }\n\n   constructor(private elRef: ElementRef) {\n   }\n\n   private updateInMenuButtons(): void {\n      const groupWithMenu: boolean = this._btns.length > this._maximumInlineActions;\n      this._btns.forEach((btn, index) => {\n         if (groupWithMenu) {\n            // When the number of buttons exceeds the maximum and the button overflows, place the button in the menu.\n            btn.inMenu = index >= this._maximumInlineActions - 1;\n         } else {\n            btn.inMenu = false;\n         }\n      });\n   }\n\n   private updateButtonTitles = (): void => {\n      const allButtons: HTMLButtonElement[] = this.getVisibleButtons().concat(this.getInMenuButtons());\n      if (!allButtons.length) {\n         return;\n      }\n\n      // if there is a rendered button for the directive - update its title.\n      this._buttonTitleDirectives.forEach(titleDirective => {\n         allButtons.forEach((button: HTMLElement) => {\n            if (button.getAttribute(\"name\") === titleDirective.host.name) {\n               button.title = titleDirective.title;\n            }\n         });\n      });\n   };\n\n   private subscribeToggleButtonClick(): void {\n      // If there is menu with additional buttons, find the toggle button and update button names on click.\n      setTimeout(() => {\n         const toggleButton: HTMLElement | null = this.getToggleButton();\n\n         // if there is a toggle button set function to handle the click event only once.\n         if (toggleButton && !toggleButton.onclick) {\n            toggleButton.onclick = this.updateButtonTitles;\n         }\n      });\n   }\n\n   // the buttons are visible buttons in button group, toggle menu button\n   private getVisibleButtons(): HTMLButtonElement[] {\n      return Array.from(this.elRef.nativeElement.querySelectorAll(\n            ButtonGroupDirective.VISIBLE_BUTTON_ELEMENTS_SELECTOR));\n   }\n\n   // inMenu buttons are rendered outside of the elRef, get them directly from the document\n   private getInMenuButtons(): HTMLButtonElement[] {\n      return Array.from(this.elRef.nativeElement.ownerDocument.querySelectorAll(\n            ButtonGroupDirective.IN_MENU_BUTTON_ELEMENTS_SELECTOR));\n   }\n\n   private getToggleButton(): HTMLElement | null {\n      return this.elRef.nativeElement.querySelector(ButtonGroupDirective.TOGGLE_MENU_BUTTON_SELECTOR);\n   }\n}","/* Copyright 2021-2022 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {GlobalRefreshService} from \"@service/global-refresh.service\";\nimport {IdGenerator} from \"@util/id-generator\";\nimport {PromiseBaton} from \"@util/promise/promise-baton\";\n\n/**\n * This decorator solve the race condition problem.\n * - Problem - Call single async method multiple times and we can't be sure which result will come last.\n * - Solution - It will resolve/reject only the last promise. On global refresh we cancel the ongoing promise.\n */\nexport function RaceConditionSafe(): MethodDecorator {\n   return function (targetClass: any, functionName: string, descriptor: PropertyDescriptor): void {\n      // Prototype level\n      const id: string = IdGenerator.getUniqueId();\n      const func: (...args: any[]) => Promise<any> = descriptor.value;\n      const promiseBaton: PromiseBaton<any> = new PromiseBaton();\n\n      // Instance level\n      descriptor.value = function (...args: any[]): Promise<any> {\n         addEventListeners(id, promiseBaton);\n         return promiseBaton.resolveOnly.call(promiseBaton, func.apply(this, args));\n      };\n   };\n\n   function addEventListeners(id: string, promiseBaton: PromiseBaton<any>): void {\n      GlobalRefreshService.Instance.registerRefreshHandler(id, () => promiseBaton.cancelLastOne(), null, false);\n   }\n}\n","<!-- Copyright 2021 VMware, Inc. All rights reserved. -- VMware Confidential -->\n<h4>{{\"vsan.health.overview.title\" | localized}}</h4>\n<div *ngIf=\"!isHistoricalInstancesLoading\" class=\"card\">\n   <vsan-historical-test-details *ngIf=\"isHistoricalHealth && historicalInstances?.length\"\n                                 [isOverviewCorrelationsDisplayed]=\"true\"\n                                 [instances]=\"historicalInstances\"\n                                 (onInstanceSelect)=\"instanceSelected($event)\">\n   </vsan-historical-test-details>\n   <div *ngIf=\"showOverallCounts\" class=\"overall-statuses card-block\">\n      <vsan-health-status-cell *ngIf=\"getOverallCount(overviewData?.healthyTestsIds) > 0\"\n                               [iconClass]=\"Icon.CLR_SUCCESS_ICON_CLASS\"\n                               [shape]=\"Icon.CLR_SUCCESS_STANDARD_ICON_SHAPE\"\n                               [label]=\"'vsan.health.overview.healthy.overall.label' | localized: getOverallCount(overviewData.healthyTestsIds)\">\n      </vsan-health-status-cell>\n      <vsan-health-status-cell *ngIf=\"getOverallCount(overviewData?.errorTestsIds) > 0\"\n                               [iconClass]=\"Icon.CLR_ERROR_ICON_CLASS\"\n                               [shape]=\"Icon.CLR_ERROR_STANDARD_ICON_SHAPE\"\n                               [label]=\"'vsan.health.overview.error.overall.label' | localized: getOverallCount(overviewData.errorTestsIds)\">\n      </vsan-health-status-cell>\n      <vsan-health-status-cell *ngIf=\"getOverallCount(overviewData?.warningTestsIds) > 0\"\n                               [iconClass]=\"Icon.CLR_WARN_ICON_CLASS\"\n                               [shape]=\"Icon.CLR_WARN_STANDARD_ICON_SHAPE\"\n                               [label]=\"'vsan.health.overview.warning.overall.label' | localized: getOverallCount(overviewData.warningTestsIds)\">\n      </vsan-health-status-cell>\n      <vsan-health-status-cell *ngIf=\"getOverallCount(overviewData?.infoTestsIds) > 0\"\n                               [shape]=\"Icon.CLR_INFO_STANDARD_ICON_SHAPE\"\n                               [iconClass]=\"Icon.CLR_INFO_ICON_CLASS\"\n                               [label]=\"'vsan.health.overview.info.overall.label' | localized: getOverallCount(overviewData.infoTestsIds)\">\n      </vsan-health-status-cell>\n      <vsan-health-status-cell *ngIf=\"selectedSilenceChecks?.length > 0\"\n                               [shape]=\"Icon.SILENT_CHECK\"\n                               [label]=\"'vsan.health.overview.silenced.overall.label' | localized: selectedSilenceChecks?.length\">\n      </vsan-health-status-cell>\n      <div class=\"tooltip-container\" *ngIf=\"getOverallCount(overviewData?.skippedTestsIds) > 0\">\n         <vsan-health-status-cell [shape]=\"Icon.SKIPPED_CHECK\"\n                                  [label]=\"'vsan.health.overview.skipped.overall.label' | localized: getOverallCount(overviewData.skippedTestsIds)\">\n         </vsan-health-status-cell>\n         <clr-signpost [vsan-signpost-title]=\"'vsan.health.overview.skipped.overall.signpost.label' | localized\">\n            <clr-signpost-content *clrIfOpen clrPosition=\"bottom-middle\">\n               {{\"vsan.health.overview.skipped.overall.description\" | localized}}\n            </clr-signpost-content>\n         </clr-signpost>\n      </div>\n   </div>\n</div>\n\n<div *ngIf=\"isHistoricalInstancesLoading\" class=\"spinner central-spinner\"></div>\n\n<!-- loading indicator for loading health tests correlations -->\n<div *ngIf=\"isHistoricalCorrelationsLoading\" class=\"loading-wrapper\">\n   <div class=\"spinner\"></div>\n</div>\n\n<vsan-illustrated-message *ngIf=\"isHistoricalHealth && !isTimestampSelected\"\n                          [type]=\"IllustratedMessageType.MISSING_SELECTION\"\n                          [message]=\"'vsan.health.historical.details.select.instance' | localized\">\n</vsan-illustrated-message>\n\n<ng-container *ngIf=\"showIssues\">\n   <vsan-illustrated-message *ngIf=\"!overviewData?.coreIssues?.length && !overviewData?.otherIssues?.length\"\n                             [type]=\"IllustratedMessageType.MISSING_DATA\"\n                             [message]=\"noIssuesMessage\">\n   </vsan-illustrated-message>\n\n   <ng-container *ngIf=\"overviewData?.coreIssues?.length\">\n      <div *ngFor=\"let coreIssue of overviewData?.coreIssues\" class=\"card\">\n         <div class=\"core-issue card-block\">\n            <div class=\"core-issue-details\">\n               <h4>{{\"vsan.health.overview.core.issue.label\" | localized}}</h4>\n               <ng-container *ngTemplateOutlet=\"testRow; context: {test: coreIssue}\"></ng-container>\n            </div>\n            <div class=\"core-issue-children\">\n               <ng-container *ngIf=\"coreIssue.relatedHealthTests.length\">\n                  <span class=\"bold\">{{\"vsan.health.overview.possible.impact.label\" | localized}}</span>\n                  <clr-tree>\n                     <clr-tree-node [clrExpanded]=\"true\"\n                                    *clrRecursiveFor=\"let node of coreIssue.relatedHealthTests; getChildren: getChildren\">\n                        <ng-container *ngTemplateOutlet=\"testRow; context: {test: node}\"></ng-container>\n                     </clr-tree-node>\n                  </clr-tree>\n               </ng-container>\n            </div>\n         </div>\n      </div>\n   </ng-container>\n\n   <div *ngIf=\"overviewData?.otherIssues?.length\" class=\"card\">\n      <div class=\"other-issues card-block\">\n         <h4>{{otherIssuesTitle}}</h4>\n         <div class=\"other-issues-details\">\n            <ng-container *ngFor=\"let otherIssue of overviewData.otherIssues\">\n               <ng-container *ngTemplateOutlet=\"testRow; context: {test: otherIssue}\"></ng-container>\n            </ng-container>\n         </div>\n      </div>\n   </div>\n</ng-container>\n\n<ng-template #testRow let-test=\"test\">\n   <div class=\"icon-name-container\">\n      <clr-icon class=\"is-solid\" [ngClass]=\"getStatusIconClass(test)\"\n                [attr.shape]=\"getStatusIconShape(test)\">\n      </clr-icon>\n      <a [id]=\"test.testId\" class=\"pointer\" (click)=\"onTestSelected(test.testId)\">{{test.testName}}</a>\n   </div>\n</ng-template>\n"],"sourceRoot":"webpack:///"}