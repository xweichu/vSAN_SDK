{"version":3,"sources":["webpack:///src/app/vsan/common/component/datagrid/tree-column.html","webpack:///src/app/vsan/common/component/datagrid/tree-datagrid-view.ts","webpack:///src/app/vsan/common/component/datagrid/tree-column.component.ts","webpack:///src/app/vsan/common/component/datagrid/filter/base-filter.ts","webpack:///src/app/vsan/common/component/datagrid/filter/function-filter.ts"],"names":["TreeDatagridView","childField","datagridLoading","multipleSelection","selectedTargets","filterDisabled","datagrid","forChildProperty","items","refreshGrid","target","event","nodeName","children","length","textContent","ctrlKey","includes","splice","indexOf","push","selectionChangeHandler","row","getDatagridFooterLabel","rows","TreeColumnComponent","_filterString","_dataProvider","value","filter","unregisterFilter","registerFilter","valueFunction","comparator","item1","item2","val1","val2","doCompare","_plainValueFunction","_dataField","parseFloat","comparison","localeCompare","dataProvider","sort","sortAscending","arrowAscending","arrowDescending","isFiltered","toLowerCase","trim","filterable","predicate","item","filterObject","match","plainValueFilter","data","clear","changes","next","isFilterMechanismSet","BaseFilter","search","label","stringify","accepts","FunctionFilter","callback"],"mappings":"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","file":"37-es5.js","sourcesContent":["<!--Copyright 2017-2020 VMware, Inc. All rights reserved. -- VMware Confidential-->\n<div class=\"vsan-tree-datagrid-column\">\n   <span *ngIf=\"title\" class=\"vsan-tree-datagrid-column-title\">\n      <span *ngIf=\"sortable\"\n         class=\"hand-cursor\"\n         (click)=\"sortClicked()\">\n         {{title}}\n      </span>\n      <span *ngIf=\"!sortable\">{{title}}</span>\n   </span>\n\n   <div class=\"column-right-area\">\n      <clr-icon id=\"sortState\"\n                *ngIf=\"dataProvider.comparator === comparator\"\n                [attr.shape]=\"sortIndicatorIcon\"\n                class=\"is-highlight hand-cursor\"\n                (click)=\"sortClicked()\">\n      </clr-icon>\n\n      <span *ngIf=\"filterable\" class=\"filter-container\">\n         <clr-dg-filter [clrDgFilter]=\"filter\">\n            <input clrInput type=\"text\" [(ngModel)]=\"filterString\" autofocus >\n         </clr-dg-filter>\n      </span>\n   </div>\n</div>","/* Copyright 2016 VMware, Inc. All rights reserved. -- VMware Confidential */\n\nimport {TreeDatagrid, TreeDatagridRow} from \"./tree-datagrid\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\n\n/**\n * Hierarchical datagrid view.\n * Takes care of selecting an item from the grid.\n * All views that want to use hierarchical datagrid can extend this view.\n */\nexport class TreeDatagridView {\n\n   datagrid: TreeDatagrid;\n   datagridLoading: boolean = true;\n\n   multipleSelection: boolean = false;\n   selectedTargets: TreeDatagridRow[] = [];\n   selectionChangeHandler: () => void;\n   filterDisabled = false;\n\n   constructor(childField: string) {\n      this.datagrid = TreeDatagrid.forChildProperty(childField);\n      this.datagridLoading = true;\n   }\n\n   protected initData(items: any[]): void {\n      this.datagrid.refreshGrid(items);\n      this.datagridLoading = false;\n   }\n\n   /**\n    * Click handler that sets iSCSI target.\n    *\n    * TODO: add also check if Ctr button was clicked during the mouse click\n    * in this case de-selection of the row has to be done\n    *\n    * @param target        selected target row\n    * @param event         mouse event\n    */\n   selectTarget(target: TreeDatagridRow, event: any): void {\n\n      // check if we are not expanding an collapsing a datagrid row\n      //TODO: this depends on Clarity icons internal implementation - change it\n      if (event.target.nodeName == \"svg\" &&\n            event.target.children.length > 0 &&\n            event.target.children[0].textContent == \"angle\") {\n         return;\n      }\n\n      if (event.ctrlKey) {\n         // if the element is already selected - deselect it\n         if (this.selectedTargets.includes(target)) {\n            this.selectedTargets.splice(this.selectedTargets.indexOf(target), 1);\n         } else if (this.multipleSelection) {\n            this.selectedTargets.push(target);\n         } else {\n            // remove all elements and select just the clicked one\n            this.selectedTargets.splice(0, this.selectedTargets.length);\n            this.selectedTargets.push(target);\n\n         }\n      } else {\n         // remove all elements and select just the clicked one\n         this.selectedTargets.splice(0, this.selectedTargets.length);\n         this.selectedTargets.push(target);\n      }\n\n      // invoke selection change handler if any\n      if (this.selectionChangeHandler) {\n         this.selectionChangeHandler();\n      }\n   }\n\n   /**\n    * Checks if current row is selected.\n    * This is used to know which rows have to be grayed out.\n    *\n    * @param row               the datagrid row in question\n    * @returns {boolean}       if the row is selected or not\n    */\n   isRowSelected(row: TreeDatagridRow): boolean {\n      return this.selectedTargets.includes(row);\n   }\n\n   /**\n    * Generates the proper datagrid footer - contains items count.\n    *\n    * @returns {string}       datagrid footer label\n    */\n   get datagridFooterLabel(): string {\n      return VsanUiUtils.getDatagridFooterLabel(this.datagrid.rows);\n   }\n}\n","/* Copyright 2017-2020 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, Input} from \"@angular/core\";\nimport {Filter, TreeDatagrid, TreeFilter} from \"./tree-datagrid\";\nimport {FunctionFilter} from \"./filter/function-filter\";\n\n/**\n * Component that can be used as content for the clr-dg-column component\n * that is compatible with the TreeDatagrid sorting and filtering mechanisms.\n * If the column is hideble the component must be placed outside the clrDgHideableColumn directive\n *\n * Usage:\n * <clr-dg-column>\n *    <ng-container *clrDgHideableColumn=\"{hidden: true}\">\n *       {{'my-column-title-key' | localized}}\n *    </ng-container>\n *    <vsan-tree-column\n *          [plainValueFunction]=\"plainValueFunction\" <!-- function(data: any): string that returns data object value\n *                                              to be sorted/filtered for this column. Overrides value set by dataField.\n *                                              Will not take effect for filtering if filterObject is set -->\n *          [dataField]=\"'name'\" <!-- the data object property to be sorted/filtered by this column.\n *                                  Will not take effect if plainValue is set -->\n *          [dataProvider]=\"myDatagrid\" <!-- the data provider rendered in the data grid -->\n *          [title]=\"'my-column-title-key' | localized\">\n *     </vsan-tree-column>\n *   </clr-dg-column>\n */\n@Component({\n   selector: \"vsan-tree-column\",\n   templateUrl: \"tree-column.html\",\n   styleUrls: [\"tree-column.scss\"],\n})\nexport class TreeColumnComponent {\n\n   private static readonly arrowAscending: string = \"arrow up\";\n   private static readonly arrowDescending: string = \"arrow down\";\n\n   private _dataProvider: TreeDatagrid;\n   private _filterString: string = \"\";\n   private _dataField: string;\n   private _plainValueFunction: (item: any) => string;\n   filter: TreeFilter;\n\n   comparator: (item1: any, item2: any) => number;\n\n   @Input()\n   title: string;\n\n   @Input()\n   filterObject: Filter;\n\n   @Input()\n   set dataProvider(value: TreeDatagrid) {\n      if (this._dataProvider && this.filter) {\n         this._dataProvider.unregisterFilter(this.filter);\n      }\n      this._dataProvider = value;\n      this.filter = this._dataProvider.registerFilter();\n   }\n\n   get dataProvider(): TreeDatagrid {\n      return this._dataProvider;\n   }\n\n   /**\n    * Returns the string value of the data item. Used for:\n    *    - on sorting: when set overrides <code>dataField</code>\n    *    - on filtering: when set overrides <code>dataField</code>, overridden by <code>plainObject<code>\n    */\n   @Input()\n   set plainValueFunction(valueFunction: (item: any) => string) {\n      this.comparator = (item1: any, item2: any): number => {\n         const val1: any = valueFunction(item1);\n         const val2: any = valueFunction(item2);\n\n         return this.doCompare(val1, val2);\n      };\n      this._plainValueFunction = valueFunction;\n   }\n\n   @Input()\n   set dataField(value: string) {\n\n      if (!this._plainValueFunction) {\n         this.comparator = (item1: any, item2: any): number => {\n            const val1: any = item1[value];\n            const val2: any = item2[value];\n\n            return this.doCompare(val1, val2);\n         };\n      }\n      this._dataField = value;\n   }\n\n   private doCompare(val1: any, val2: any): number {\n      if (!val1) {\n         if (!val2) {\n            return 0;\n         }\n         return -1;\n      } else if (!val2) {\n         return 1;\n      }\n\n      if (parseFloat(val1) && parseFloat(val2)) {\n         /*\n         if values starts with number - compare them as numbers.\n         If leading numbers are equals compare the whole string\n         comparing as string - '9 GB' > '10 GB' => comparing leading number - 9 GB < 10 GB\n         comparing leading number while equal - 10.10.1 === 10.10.2 => comparing whole string when leading number equal\n         */\n         const comparison: number = parseFloat(val1) - parseFloat(val2);\n         if (comparison !== 0) {\n            return comparison;\n         }\n      }\n      return (\"\" + val1).localeCompare(\"\" + val2);\n   }\n\n   sortClicked(): void {\n      if (this.comparator === this.dataProvider.comparator) {\n         this.dataProvider.sort(this.comparator, !this.dataProvider.sortAscending);\n      } else {\n         this.dataProvider.sort(this.comparator, true);\n      }\n   }\n\n   get sortIndicatorIcon(): string {\n      if (this.comparator === this.dataProvider.comparator) {\n         return this.dataProvider.sortAscending\n               ? TreeColumnComponent.arrowAscending\n               : TreeColumnComponent.arrowDescending;\n      }\n      return \"\";\n   }\n\n   get filterString(): string {\n      return this._filterString;\n   }\n\n   set filterString(value: string) {\n      let isFiltered: boolean = false;\n      this._filterString = value ? value.toLowerCase().trim() : \"\";\n      if (this.filterable) {\n         if (this._filterString.length > 0) {\n            isFiltered = true;\n            this.filter.predicate = (item: any): boolean => {\n               if (this.filterObject) {\n                  return this.filterObject.match(item, this._filterString);\n               } else if (this._plainValueFunction) {\n                  const plainValueFilter: FunctionFilter<any> = new FunctionFilter((data: any) => {\n                     return this._plainValueFunction(data);\n                  });\n                  return plainValueFilter.match(item, this._filterString);\n               } else {\n                  // Do the default filtering logic\n                  const value = item[this._dataField];\n                  return value && (\"\" + value).toLowerCase().indexOf(this._filterString) !== -1;\n               }\n            };\n         } else {\n            this.filter.clear();\n         }\n      }\n\n      this.filter.changes.next(isFiltered);\n   }\n\n   get sortable(): boolean {\n      return !!this.dataProvider && !!this.comparator;\n   }\n\n   get filterable(): boolean {\n      const isFilterMechanismSet: boolean = !!this.filterObject || !!this._plainValueFunction || !!this._dataField;\n      return isFilterMechanismSet && !!this.filter;\n   }\n\n}\n","/* Copyright 2017-2020 VMware, Inc. All rights reserved. -- VMware Confidential */\n\nimport {Filter, TreeDatagridRow} from \"../tree-datagrid\";\nimport {ClrDatagridStringFilterInterface} from \"@clr/angular\";\n\n/**\n * Abstract filter class that needs to be extended in order to implement custom filtration.\n * The class has a single abstract method that takes an object of type T and returns its\n * string representation.\n */\nexport class BaseFilter<T> implements ClrDatagridStringFilterInterface<T>, Filter {\n\n   accepts(data: T, search: string): boolean {\n      // Handle correctly TreeDatagrid components\n      if (data instanceof TreeDatagridRow) {\n         data = data.data;\n      }\n\n      let label: string = this.stringify(data);\n      if (label) {\n         // Compare ignoring the case\n         return label.toLowerCase().indexOf(search.toLowerCase()) != -1;\n      } else {\n         return false;\n      }\n   }\n\n   match(data: T, search: string): boolean {\n      return this.accepts(data, search);\n   }\n\n   protected stringify(data: T): string  {\n      return data + \"\";\n   }\n\n}\n\n","/* Copyright 2017 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {BaseFilter} from \"./base-filter\";\n\n/**\n * Extends BaseFilter by allowing the consumer to provide a custom filter function. The function\n * takes a single argument of type T and returns its string representation to be used\n * in the comparison.\n */\nexport class FunctionFilter<T> extends BaseFilter<T> {\n\n   constructor(private callback: (data: T) => string) {\n      super();\n   }\n\n   protected stringify(data: T): string {\n      return this.callback(data);\n   }\n}\n\n"]}