{"version":3,"sources":["./src/app/vsan/common/component/inventory/tree-view/tree-node.html","./src/app/vsan/common/component/inventory/tree-view/tree-view.html","./src/app/vsan/common/component/inventory/tree-view/tree-nodes.component.ts","./src/app/vsan/common/component/inventory/tree-view/tree-view.component.ts","./src/app/vsan/common/component/inventory/tree-view/tree-node.component.ts","./src/app/vsan/common/component/inventory/tree-view/tree-nodes.html"],"names":[],"mappings":"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","file":"46-es2015.js","sourcesContent":["<!--Copyright 2019-2021 VMware, Inc. All rights reserved. -- VMware Confidential-->\n<ng-container *ngIf=\"node.visible\">\n   <clr-tree-node *ngIf=\"allowMultipleSelection\"\n                  id=\"{{'tree-node-' + node.objectInfo.name}}\"\n                  [(clrSelected)]=\"node.clrSelectedState\">\n      <div class=\"tree-node-content\">\n         <clr-icon [attr.shape]=\"node.objectInfo.primaryIconId\"></clr-icon>\n         <div class=\"text-nowrap\" [class.matched]=\"matched\" title=\"{{node.objectInfo.name}}\">\n            {{node.objectInfo.name}}\n         </div>\n      </div>\n      <vsan-tree-nodes *ngIf=\"expandable\" [(clrIfExpanded)]=\"node.isExpanded\"\n                       [node]=\"node\"\n                       [allowMultipleSelection]=\"allowMultipleSelection\"\n                       [filter]=\"filter\"\n                       [selectedObjectInfos]=\"selectedObjectInfos\"\n                       (onChangeNodeVisibility)=\"changeNodeVisibility.emit()\">\n      </vsan-tree-nodes>\n   </clr-tree-node>\n\n   <clr-tree-node *ngIf=\"!allowMultipleSelection\"\n                  id=\"{{'tree-node-' + node.objectInfo.name //noinspection XmlDuplicatedId}}\">\n      <button (click)=\"onNodeClicked($event)\" class=\"clr-treenode-link text-nowrap\" [class.active]=\"node.isSelected()\">\n         <div class=\"tree-node-content\">\n            <clr-icon [attr.shape]=\"node.objectInfo.primaryIconId\"></clr-icon>\n            <div class=\"text-nowrap\" [class.matched]=\"matched\" title=\"{{node.objectInfo.name}}\">\n               {{node.objectInfo.name}}\n            </div>\n         </div>\n      </button>\n      <vsan-tree-nodes *ngIf=\"expandable\" [(clrIfExpanded)]=\"node.isExpanded\"\n                       [node]=\"node\"\n                       [allowMultipleSelection]=\"allowMultipleSelection\"\n                       [filter]=\"filter\"\n                       [selectedObjectInfos]=\"selectedObjectInfos\"\n                       (onNodeClicked)=\"onNodeClicked($event)\"\n                       (onChangeNodeVisibility)=\"changeNodeVisibility.emit()\">\n      </vsan-tree-nodes>\n   </clr-tree-node>\n</ng-container>","<!--Copyright 2019-2020 VMware, Inc. All rights reserved. -- VMware Confidential-->\n<vsan-search-input (keyup)=\"stopPropagation($event)\"\n                   (keydown)=\"stopPropagation($event)\"\n                   (keypress)=\"stopPropagation($event)\"\n                   *ngIf=\"showSearch\"\n                   id=\"tree-view-search-input\"\n                   (filterChange)=\"filter=$event\"\n                   [inputAriaLabelKey]=\"searchInputAriaLabelKey\">\n</vsan-search-input>\n\n<clr-tree class=\"tree-view-container\">\n   <div id=\"no-items-available\" *ngIf=\"!hasVisibleNodes\">\n      {{\"inventory.browser.dialog.no.items\" | localized}}\n   </div>\n   <vsan-tree-node *ngFor=\"let node of nodes\"\n                   [node]=\"node\"\n                   [allowMultipleSelection]=\"allowMultipleSelection\"\n                   [filter]=\"filter\"\n                   [selectedObjectInfos]=\"selectedObjectInfos\"\n                   (nodeClicked)=\"nodeClicked($event)\"\n                   (changeNodeVisibility)=\"onNodeVisibilityChanged()\">\n   </vsan-tree-node>\n</clr-tree>\n","/* Copyright 2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, EventEmitter, Input, Output} from \"@angular/core\";\nimport {TreeNode} from \"./tree-node\";\nimport ObjectInfo from \"@component/inventory/tree-view/ObjectInfo\";\n/**\n * A separate component is required because of https://github.com/vmware/clarity/issues/5514\n */\n@Component({\n   selector: \"vsan-tree-nodes\",\n   templateUrl: \"tree-nodes.html\",\n   styleUrls: [\"tree-nodes.scss\"],\n})\nexport class TreeNodesComponent {\n\n   @Input()\n   node: TreeNode;\n\n   @Input()\n   allowMultipleSelection;\n\n   @Input()\n   filter: string;\n\n   @Input()\n   selectedObjectInfos: ObjectInfo[];\n\n   @Output()\n   onNodeClicked: EventEmitter<TreeNode> = new EventEmitter<TreeNode>();\n\n   @Output()\n   onChangeNodeVisibility: EventEmitter<void> = new EventEmitter<void>();\n}","/* Copyright 2019-2020 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {\n   ChangeDetectionStrategy,\n   ChangeDetectorRef,\n   Component,\n   EventEmitter,\n   Input,\n   Output,\n   ViewRef\n} from \"@angular/core\";\nimport {TreeNode} from \"./tree-node\";\nimport {ManagedObject} from \"@service/managed-object\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {ClrSelectedState} from \"@clr/angular\";\nimport ObjectInfo from \"@component/inventory/tree-view/ObjectInfo\";\nimport {Logger} from \"@util/logger\";\n\n/**\n * This component provides a search input and tree view, and the data for the tree view should be prepared in advance.\n * If the data for the tree view is lazy loading, you should use another component InventoryBrowserComponent.\n */\n@Component({\n   selector: \"vsan-tree-view\",\n   templateUrl: \"tree-view.html\",\n   styleUrls: [\"tree-view.scss\"],\n   changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TreeViewComponent {\n\n   filter: string;\n\n   @Input()\n   showSearch: boolean = true;\n\n   @Input()\n   searchInputAriaLabelKey: string;\n\n   @Input()\n   allowMultipleSelection = false;\n\n   /**\n    * Implement this comparator if the ObjectInfos does not have moRef or uuid\n    * @param obj1\n    * @param obj2\n    */\n   @Input()\n   areObjectsEqual: (obj1: ObjectInfo, obj2: ObjectInfo) => boolean = (obj1: ObjectInfo, obj2: ObjectInfo) => {\n      if (!obj1 || !obj2) {\n         return false;\n      }\n\n      // default implementation covering comparison by moRef or uuid\n      if (obj1.moRef && obj2.moRef) {\n         return ManagedObject.areEqual(obj1.moRef, obj2.moRef);\n      }\n\n      if (obj1.uuid && obj2.uuid) {\n         return obj1.uuid === obj2.uuid;\n      }\n\n      Logger.error(\n            \"Implement the object comparator in order for the TreeView selection functionality to work correctly!\");\n      return obj1.name === obj2.name; // compare by name (not perfect, but still something)\n   };\n\n   private _nodes: TreeNode[];\n\n   get nodes(): TreeNode[] {\n      return this._nodes;\n   }\n\n   @Input()\n   set nodes(newNodes: TreeNode[]) {\n      this._nodes = newNodes ? newNodes : [];\n      this.setNodesClrSelectedStatuses();\n   }\n\n   private _selectedObjectInfos: ObjectInfo[];\n\n   @Input()\n   set selectedObjectInfos(objectInfos: ObjectInfo[]) {\n      this._selectedObjectInfos = objectInfos;\n      this.setNodesClrSelectedStatuses();\n   }\n\n   get selectedObjectInfos(): ObjectInfo[] {\n      return this._selectedObjectInfos;\n   }\n\n   @Output()\n   selectedObjectInfosChange: EventEmitter<ObjectInfo[]> = new EventEmitter<ObjectInfo[]>();\n\n   constructor(private changeDetector: ChangeDetectorRef) {\n   }\n\n   private filterClrSelectedNodes(nodes: TreeNode[]): TreeNode[] {\n      return nodes.reduce((accumulator: TreeNode[], currentNode: TreeNode) => {\n         if (VsanUiUtils.isEmpty(currentNode.children)) {\n            return currentNode.isSelected()\n                  ? [...accumulator, currentNode]\n                  : accumulator;\n         }\n         return currentNode.isSelected()\n               ? [...this.filterClrSelectedNodes(currentNode.children), currentNode]\n               : this.filterClrSelectedNodes(currentNode.children);\n      }, []);\n   }\n\n   nodeClicked(clickedNode: TreeNode) {\n      if (this.allowMultipleSelection) {\n         this.selectedObjectInfos = this.filterClrSelectedNodes(this.nodes).map(node => node.objectInfo);\n      } else {\n         this.selectedObjectInfos = [clickedNode.objectInfo];\n      }\n\n      this.selectedObjectInfosChange.emit(this.selectedObjectInfos);\n   }\n\n   get hasVisibleNodes(): boolean {\n      return this.nodes && this.nodes.some(node => node.visible);\n   }\n\n   onNodeVisibilityChanged = () => {\n      setTimeout(() => {\n         if (this.changeDetector && !(this.changeDetector as ViewRef).destroyed) {\n            this.changeDetector.detectChanges();\n         }\n      });\n   };\n\n   private setNodesClrSelectedStatuses() {\n      if (this.allowMultipleSelection) {\n         this.setMultipleSelectionNodesStatuses();\n      } else {\n         this.setSingleSelectionNodesStatuses();\n      }\n   }\n\n   private setMultipleSelectionNodesStatuses() {\n      this.nodes.forEach(treeNode => {\n         // Remove the callback while setting the status manually to prevent in from multiple executions\n         treeNode.onClrSelectedStateChange = null;\n         const selected: boolean = !VsanUiUtils.isEmpty(this.selectedObjectInfos) &&\n               this.selectedObjectInfos.some(objectInfo => this.areObjectsEqual(objectInfo, treeNode.objectInfo));\n         if (selected) {\n            treeNode.clrSelectedState = ClrSelectedState.SELECTED;\n         }\n         // Add the callback after the status is set\n         treeNode.onClrSelectedStateChange = (node: TreeNode) => {\n            this.nodeClicked(node);\n         };\n      });\n   }\n\n   private setSingleSelectionNodesStatuses() {\n      this.updateSingleSelectionNodesStatuses(this.nodes);\n   }\n\n   private updateSingleSelectionNodesStatuses(nodes: TreeNode[]) {\n      if (VsanUiUtils.isEmpty(nodes)) {\n         return;\n      }\n      nodes.forEach(node => {\n         const selected: boolean = !VsanUiUtils.isEmpty(this.selectedObjectInfos) &&\n               this.areObjectsEqual(this.selectedObjectInfos[0], node.objectInfo);\n         node.clrSelectedState = selected ? ClrSelectedState.SELECTED : ClrSelectedState.UNSELECTED;\n         if (!VsanUiUtils.isEmpty(node.children)) {\n            this.updateSingleSelectionNodesStatuses(node.children);\n         }\n      });\n   }\n\n   /**\n    * Prevents propagation of the event.\n    * Useful to prevent behaviours such as closing of a dropdown when space is typed in the filter field.\n    */\n   stopPropagation($event: Event) {\n      $event.stopImmediatePropagation();\n      $event.stopPropagation();\n   }\n}\n","/* Copyright 2019-2020 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, EventEmitter, Input, Output} from \"@angular/core\";\nimport {TreeNode} from \"./tree-node\";\nimport ObjectInfo from \"@component/inventory/tree-view/ObjectInfo\";\n\n@Component({\n   selector: \"vsan-tree-node\",\n   templateUrl: \"tree-node.html\",\n   styleUrls: [\"tree-node.scss\"],\n})\nexport class TreeNodeComponent {\n\n   @Input()\n   node: TreeNode;\n\n   private _filter: string;\n\n   get filter(): string {\n      return this._filter;\n   }\n\n   @Input()\n   set filter(newFilter: string) {\n      this._filter = newFilter;\n      if (this.filter) {\n         this.node.isExpanded = true;\n      }\n      this.refreshFilter();\n   }\n\n   @Input()\n   allowMultipleSelection = false;\n\n   @Input()\n   selectedObjectInfos: ObjectInfo[];\n\n   @Output()\n   nodeClicked: EventEmitter<TreeNode> = new EventEmitter<TreeNode>();\n\n   @Output()\n   changeNodeVisibility: EventEmitter<void> = new EventEmitter<void>();\n\n   get expandable(): boolean {\n      return this.node.children && this.node.children.length > 0;\n   }\n\n   get matched(): boolean {\n      return this.nodeNameIncludesFilter(this.node);\n   }\n\n   onNodeClicked($event: MouseEvent | TreeNode) {\n      let node: TreeNode;\n      if ($event instanceof MouseEvent) {\n         // If the event is triggered by clicking on the target node, select the target node to emit\n         node = this.node;\n         $event.stopPropagation(); // We don't need to propagate the event to parent nodes\n      } else {\n         node = $event; // If the target node is already selected, pass it to the parent\n      }\n\n      this.nodeClicked.emit(node);\n   }\n\n   // Check recursively if any of the child nodes are selected\n   private isChildNodeSelected(parentNode: TreeNode): boolean {\n      if (!parentNode.children || parentNode.children.length === 0) {\n         return false;\n      }\n      // Checks if a child node is selected and expand its parents\n      for (let child of parentNode.children) {\n         if (child.isSelected()) {\n            return true;\n         }\n         if (this.isChildNodeSelected(child) === true) {\n            return true;\n         }\n      }\n      // None of the current children or their children are selected\n      return false;\n   }\n\n   private refreshFilter = () => {\n      if (!this.filter) {\n         this.node.visible = true;\n      } else {\n         this.node.visible = this.recursiveNameCheck(this.node);\n      }\n      this.changeNodeVisibility.emit();\n   };\n\n   private recursiveNameCheck = (node: TreeNode): boolean => {\n      if (this.nodeNameIncludesFilter(node)) {\n         return true;\n      }\n      for (let child of node.children) {\n         if (this.recursiveNameCheck(child)) {\n            return true;\n         }\n      }\n      return false;\n   };\n\n   private nodeNameIncludesFilter = (node: TreeNode): boolean => {\n      return this.filter && node.objectInfo.name.trim().toLowerCase().includes(this.filter.trim().toLowerCase());\n   };\n}","<!--Copyright 2021 VMware, Inc. All rights reserved. -- VMware Confidential-->\n<vsan-tree-node *ngFor=\"let child of node?.children\"\n                [node]=\"child\"\n                [allowMultipleSelection]=\"allowMultipleSelection\"\n                [filter]=\"filter\"\n                [selectedObjectInfos]=\"selectedObjectInfos\"\n                (nodeClicked)=\"onNodeClicked.emit($event)\"\n                (changeNodeVisibility)=\"onChangeNodeVisibility.emit()\">\n</vsan-tree-node>"],"sourceRoot":"webpack:///"}