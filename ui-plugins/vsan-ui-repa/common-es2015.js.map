{"version":3,"sources":["./src/app/vsan/common/util/vsan-data-migration-util.ts","./src/app/vsan/vm/io-diagnostics/graph-view/model/graph-node-details.ts","./src/app/vsan/common/pipe/TimePipe.ts","./src/app/generated/ip-addresses-request-spec.ts","./src/app/vsan/common/directive/clr-accordion/clr-accordion-panel.directive.ts","./src/app/vsan/common/model/host-action.data.ts","./src/app/vsan/common/component/datagrid/filter/pipe-filter.ts","./src/app/vsan/common/component/diskmgmt/model/storage-group-identifier.ts","./src/app/vsan/resync/resync-objects-util.ts","./src/app/vsan/common/pipe/not-empty.pipe.ts","./src/app/vsan/common/component/datagrid/comparator/string-comparator.ts","./src/app/vsan/common/model/disk-group-action.data.ts","./src/app/generated/perf-states-obj-spec.ts"],"names":[],"mappings":"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","file":"common-es2015.js","sourcesContent":["/* Copyright 2019 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {VsanUiUtils} from \"./vsan-util\";\nimport {DecommissionMode} from \"@generated/decommission-mode\";\n\n/**\n * vSAN data migration utilities.\n */\nexport class VsanDataMigrationUtil {\n   static getLocalizedDecommissionMode = (decommissionMode: DecommissionMode): string => {\n      if (!decommissionMode) {\n         return \"\";\n      }\n\n      switch (decommissionMode) {\n         case DecommissionMode.noAction :\n            return VsanUiUtils.getString(\"vsan.dialog.precheckEvacuation.noDataMigration\");\n         case DecommissionMode.ensureObjectAccessibility :\n            return VsanUiUtils.getString(\"vsan.dialog.precheckEvacuation.ensureAccessibility\");\n         case DecommissionMode.evacuateAllData :\n            return VsanUiUtils.getString(\"vsan.dialog.precheckEvacuation.fullDataMigration\");\n      }\n   };\n}","/* Copyright 2021 VMware, Inc. All rights reserved. -- VMware Confidential */\n\nimport {GraphNode} from \"@generated/graph-node\";\nimport {GraphClasses} from \"@generated/graph-classes\";\nimport {GraphNodeData} from \"@generated/graph-node-data\";\n\n/**\n * Contains all needed data for fetching the object details data.\n */\nexport class GraphNodeDetails {\n   constructor(public id: string,\n               public entityName: string,\n               public hostName: string,\n               public hostUuid: string,\n               public type: GraphNodeType) {\n   }\n\n   static fromGraphNode(node: GraphNode & any): GraphNodeDetails {\n      const nodeData: GraphNodeData = node.data();\n      const nodeClasses: string[] = node.classes();\n      const nodeType: GraphNodeType = GraphNodeDetails.getGraphNodeType(nodeClasses);\n      const entityName: string = nodeType === GraphNodeType.DISK\n            ? nodeData.detailedInfo?.physicalDiskUuid\n            : nodeData.detailedInfo?.diskGroupUuid;\n      return new GraphNodeDetails(nodeData.id,\n            entityName,\n            nodeData.detailedInfo?.hostName,\n            nodeData.detailedInfo?.hostUuid,\n            nodeType);\n   }\n\n   private static getGraphNodeType(nodeClasses: string[]): GraphNodeType {\n      if (nodeClasses.includes(GraphClasses.NIC_NODE())) {\n         return GraphNodeType.NIC;\n      } else if (nodeClasses.includes(GraphClasses.DISK_GROUP_NODE())) {\n         return GraphNodeType.DISK_GROUP;\n      } else if (nodeClasses.includes(GraphClasses.DISK_NODE())) {\n         return GraphNodeType.DISK;\n      }\n   }\n}\n\nexport enum GraphNodeType {\n   DISK_GROUP,\n   DISK,\n   NIC,\n}\n","/* Copyright 2018-2019 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Pipe, PipeTransform} from '@angular/core';\nimport {VsanUiUtils} from \"@util/vsan-util\";\n\n/**\n * Returns the time as a single integer in the closest largest unit.\n *\n * @param seconds\n *    time in seconds.\n * @return\n *    String like \"Unknown\" if t &lt; 0.\n *    time in seconds if t &lt; 119 seconds.\n *    time in minutes if 119 seconds &lt; t &lt; 119 minutes.\n *    time in hours if 119 minutes &lt; t &lt; 24 hours.\n *    time in days if 24 hours &lt; t\n */\n@Pipe({\n   name: 'timeSpan'\n})\nexport class TimePipe implements PipeTransform {\n\n   public transform(time: number | string,  ...args: string[]): string {\n      if (typeof time === \"string\") {\n         return time;\n      }\n      if (time < 0) {\n         return VsanUiUtils.getString(\"vsan.common.unknown\");\n      }\n      let s: number = time % 60;\n      time = (time - s) / 60;\n      let m: number = time % 60;\n      time = (time - m) / 60;\n      let h: number = time % 24;\n      time = (time - h) / 24;\n      let d: number = time;\n      // return seconds up to 119\n      if (m < 2 && h < 1 && d < 1) {\n         s = s + (m * 60);\n         return VsanUiUtils.getString(s === 1 ? \"vsan.common.second\" : \"vsan.common.seconds\", s);\n      }\n\n      // return minutes up to 119\n      if (h < 2 && d < 1) {\n         return VsanUiUtils.getString(\"vsan.common.minutes\", m + (h * 60));\n      }\n\n      // return hours up to 24\n      if (d < 1) {\n         return VsanUiUtils.getString(\"vsan.common.hours\", h + (d * 24));\n      }\n      return  VsanUiUtils.getString(d === 1 ? \"vsan.common.day\" : \"vsan.common.days\", d);\n   }\n\n}","\nexport interface IpAddressesRequestSpec {\n\n   ipAddress: string;\n   subnetMask: string;\n   hostsNumber: number;\n} //class IpAddressesRequestSpec\n\nexport module IpAddressesRequestSpec{\nexport class Factory {\n\n   static create = (ipAddress: string, subnetMask: string, hostsNumber: number): IpAddressesRequestSpec => {\n      return { ipAddress: ipAddress, subnetMask: subnetMask, hostsNumber: hostsNumber, };\n   }\n\n\n} //class Factory\n\n} //module IpAddressesRequestSpec\n","/* Copyright 2020 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {AfterContentInit, Directive, ElementRef, EventEmitter, Input, Output} from \"@angular/core\";\nimport {ClrAccordionPanel} from \"@clr/angular\";\n\n/**\n * Generally, panelOpenChange event is triggered for all the accordion's panels, no matter which panel is\n * collapsed/expanded. This directive provides {@link accordionPanelToggleExpand} event that is triggered\n * only by the target panel. Directive requires to set an id of the panel via vsan-panel-id property.\n * How it works:\n *    - Directive attaches to the panelOpenChange event where:\n *    - The panel DOM element's id is obtained by traversing parent elements of the clicked target.\n *    - If the panel's model id equals the id of the DOM element then the custom event is emitted.\n */\n@Directive({\n   selector: \"clr-accordion-panel[vsan-panel-id]\",\n})\nexport class ClrAccordionPanelDirective<T> implements AfterContentInit {\n   static ACCORDION_PANEL_TAG: string = \"CLR-ACCORDION-PANEL\";\n\n   constructor(private accordionPanel: ClrAccordionPanel, private el: ElementRef<HTMLElement>) {\n      this.accordionPanel.panelOpenChange.subscribe(isExpanded => {\n         this.onExpandCollapse(isExpanded, this.model);\n      });\n   }\n\n   @Input(\"vsan-panel-id\")\n   panelId: string;\n\n   @Input(\"vsan-panel-model\")\n   model: T;\n\n   @Output()\n   accordionPanelToggleExpand: EventEmitter<AccordionPanelToggleExpandEventArg<T>> =\n         new EventEmitter<AccordionPanelToggleExpandEventArg<T>>();\n\n   ngAfterContentInit(): void {\n      this.el.nativeElement.id = this.panelId;\n   }\n\n   onExpandCollapse(isExpanded: boolean, model: any) {\n      const panelIdDOM: string = this.findAccordionPanelId(event.currentTarget as HTMLElement, 5);\n      if (this.panelId === panelIdDOM) {\n         this.accordionPanelToggleExpand.emit(new AccordionPanelToggleExpandEventArg<T>(isExpanded, model));\n      }\n   }\n\n   findAccordionPanelId(targetEl: HTMLElement, parentCount: number): string {\n      if (targetEl.nodeName === ClrAccordionPanelDirective.ACCORDION_PANEL_TAG) {\n         return targetEl.getAttribute(\"id\");\n      }\n      if (targetEl && targetEl.parentElement && parentCount) {\n         return this.findAccordionPanelId(targetEl.parentElement, --parentCount);\n      }\n   }\n}\n\nexport class AccordionPanelToggleExpandEventArg<T> {\n   constructor(public isExpanded: boolean, public model: T) {}\n}","/* Copyright 2019-2022 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {ManagedObject} from \"@service/managed-object\";\nimport {HostData} from \"@generated/host-data\";\nimport {PrecheckEntity} from \"@generated/precheck-entity\";\n\n/**\n * Host data required for disk and group actions.\n */\nexport class HostActionData {\n   hostRef: ManagedObject;\n   isWitnessHost: boolean;\n   isWhatIfSupported: boolean;\n   isInMaintenanceMode: boolean;\n\n   static fromHostData(host: HostData): HostActionData {\n      const hostData: HostActionData = new HostActionData();\n      hostData.hostRef = host.hostRef;\n      hostData.isWitnessHost = host.isWitnessHost;\n      hostData.isInMaintenanceMode = host.isInMaintenanceMode;\n      hostData.isWhatIfSupported = true;\n      return hostData;\n   }\n\n   static fromPrecheckEntity = (entity: PrecheckEntity): HostActionData => {\n      const hostData: HostActionData = new HostActionData();\n      hostData.isWitnessHost = false;\n      hostData.isWhatIfSupported = true;\n      hostData.hostRef = entity.hostRef;\n      hostData.isInMaintenanceMode = entity.isInMaintenanceMode;\n      return hostData;\n   };\n}","/* Copyright 2017 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {BaseFilter} from \"./base-filter\";\nimport {PipeTransform} from \"@angular/core\";\n\n/**\n * Extends BaseFilter by allowing the consumer to provide a\n pipe that will be used in the comparison process.\n */\nexport class PipeFilter<T> extends BaseFilter<T> {\n\n   constructor(private pipe: PipeTransform, private dataField: string = null) {\n      super();\n   }\n\n   protected stringify(data: T): string {\n      if (this.dataField && data) {\n         return this.pipe.transform(data[this.dataField]);\n      }\n      return this.pipe.transform(data);\n   }\n}\n","/* Copyright 2021 VMware, Inc. All rights reserved. -- VMware Confidential */\n\nimport {DiskGroupType} from \"@generated/disk-group-type\";\nimport {DiskGroupData} from \"@generated/disk-group-data\";\n\n/**\n * Disk group identifier by type and name, used for passing preselection context from\n * other pages' navigation or page refresh. vSAN Direct, PMEM and Unused groups have null name.\n */\nexport class StorageGroupIdentifier {\n   constructor(public diskGroupType: DiskGroupType = null, public name: string = null) {}\n\n   static fromDiskGroupName(name: string): StorageGroupIdentifier {\n      return new StorageGroupIdentifier(null, name);\n   }\n\n   static fromDiskGroup(diskGroup: DiskGroupData): StorageGroupIdentifier {\n      return new StorageGroupIdentifier(diskGroup.diskGroupType, diskGroup.name);\n   }\n   static areEqual(value1: StorageGroupIdentifier, value2: StorageGroupIdentifier): boolean {\n      // Disk group type is an optional argument,\n      // so it should be taken into account only if both diskGroupTypes are not null.\n      const diskGroupTypeOptionalCheck: boolean =\n            (!value1.diskGroupType || !value2.diskGroupType)\n            || value1.diskGroupType === value2.diskGroupType;\n      return value1 && value2 && diskGroupTypeOptionalCheck && (value1.name === value2.name);\n   }\n}","/* Copyright 2021-2022 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {RepairTimerData} from \"@generated/repair-timer-data\";\nimport {ResyncMonitorData} from \"@generated/resync-monitor-data\";\nimport {DateFormat} from \"@util/date-time\";\nimport {VsanDateTimeUtils} from \"@util/vsan-dateteime-util\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\n\nexport class ResyncObjectsUtil {\n   static getScheduledResync(resyncData: ResyncMonitorData, isResyncETAImprovementSupported: boolean): string {\n      if (!resyncData) {\n         return VsanUiUtils.getString(\"vsan.loading\");\n      } else if (!resyncData.repairTimerData) {\n         return VsanUiUtils.getString(\"vsan.na.label\");\n      } else if (!resyncData.repairTimerData.isSupported) {\n         return VsanUiUtils.getString(\"vsan.monitor.resyncSummary.scheduledResync.message.notSupported\");\n      }\n\n      const repairTimerData: RepairTimerData = resyncData.repairTimerData;\n\n      if (isResyncETAImprovementSupported) {\n         if (!repairTimerData.objectsCount) {\n            return VsanUiUtils.getString(\"vsan.monitor.resyncSummary.scheduledResync.message.none\");\n         }\n\n         return repairTimerData.objectsCount === 1\n               ? VsanUiUtils.getString(\"vsan.monitor.resyncSummary.scheduledResync.message.total.one.object\")\n               : VsanUiUtils.getString(\"vsan.monitor.resyncSummary.scheduledResync.message.total.many.objects\",\n                     repairTimerData.objectsCount);\n      }\n\n      return this.getFormattedScheduledResync(repairTimerData.objectsCount,\n            resyncData.repairTimerData.minTimer,\n            resyncData.repairTimerData.maxTimer);\n   }\n\n   static getFormattedScheduledResync(objectsCount: number, minTimer: number, maxTimer: number): string {\n      if (!objectsCount) {\n         return VsanUiUtils.getString(\"vsan.monitor.resyncSummary.scheduledResync.message.none\");\n      }\n\n      let startTime: string;\n      let endTime: string;\n      // handle the case when only 1 object is scheduled for resync\n      if (objectsCount === 1) {\n         if (VsanDateTimeUtils.isToday(minTimer)) {\n            startTime = VsanDateTimeUtils.applyFormatting(minTimer, DateFormat.SHORT_TIME);\n            return VsanUiUtils.getString(\"vsan.monitor.resyncSummary.scheduledResync.message.one.today\", startTime);\n         }\n\n         if (VsanDateTimeUtils.isTomorrow(minTimer)) {\n            startTime = VsanDateTimeUtils.applyFormatting(minTimer, DateFormat.SHORT_TIME);\n            return VsanUiUtils.getString(\"vsan.monitor.resyncSummary.scheduledResync.message.one.tomorrow\", startTime);\n         }\n\n         startTime = VsanDateTimeUtils.applyFormatting(minTimer, DateFormat.FULL_DATE_TIME);\n         return VsanUiUtils.getString(\"vsan.monitor.resyncSummary.scheduledResync.message.one.differentDays\",\n               startTime);\n      }\n\n      // when minTimer === maxTimer, or maxTimer < 0, consider only minTimer for displaying the scheduled resync\n      const isSameTime: boolean =\n            VsanDateTimeUtils.getNoSecondsTime(minTimer) === VsanDateTimeUtils.getNoSecondsTime(maxTimer);\n      if (isSameTime || maxTimer < 0) {\n         if (VsanDateTimeUtils.isToday(minTimer)) {\n            startTime = VsanDateTimeUtils.applyFormatting(minTimer, DateFormat.SHORT_TIME);\n            return VsanUiUtils.getString(\"vsan.monitor.resyncSummary.scheduledResync.message.many.today\",\n                  objectsCount, startTime);\n         }\n\n         if (VsanDateTimeUtils.isTomorrow(minTimer)) {\n            startTime = VsanDateTimeUtils.applyFormatting(minTimer, DateFormat.SHORT_TIME);\n            return VsanUiUtils.getString(\"vsan.monitor.resyncSummary.scheduledResync.message.many.tomorrow\",\n                  objectsCount, startTime);\n         }\n\n         startTime = VsanDateTimeUtils.applyFormatting(minTimer, DateFormat.FULL_DATE_TIME);\n         return VsanUiUtils.getString(\"vsan.monitor.resyncSummary.scheduledResync.message.many.differentDays\",\n               objectsCount, startTime);\n      }\n\n      // display the scheduled resync in the form \"between minTimer and maxTimer\"\n      if (VsanDateTimeUtils.isToday(minTimer) && VsanDateTimeUtils.isToday(maxTimer)) {\n         startTime = VsanDateTimeUtils.applyFormatting(minTimer, DateFormat.SHORT_TIME);\n         endTime = VsanDateTimeUtils.applyFormatting(maxTimer, DateFormat.SHORT_TIME);\n         return VsanUiUtils.getString(\"vsan.monitor.resyncSummary.scheduledResync.message.some.today\",\n               objectsCount, startTime, endTime);\n      }\n\n      if (VsanDateTimeUtils.isTomorrow(minTimer) && VsanDateTimeUtils.isTomorrow(maxTimer)) {\n         startTime = VsanDateTimeUtils.applyFormatting(minTimer, DateFormat.SHORT_TIME);\n         endTime = VsanDateTimeUtils.applyFormatting(maxTimer, DateFormat.SHORT_TIME);\n         return VsanUiUtils.getString(\"vsan.monitor.resyncSummary.scheduledResync.message.some.tomorrow\",\n               objectsCount, startTime, endTime);\n      }\n\n      startTime = VsanDateTimeUtils.applyFormatting(minTimer, DateFormat.FULL_DATE_TIME);\n      endTime = VsanDateTimeUtils.applyFormatting(maxTimer, DateFormat.FULL_DATE_TIME);\n      return VsanUiUtils.getString(\"vsan.monitor.resyncSummary.scheduledResync.message.some.differentDays\",\n            objectsCount, startTime, endTime);\n   }\n}\n","/* Copyright 2019-2020 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Pipe, PipeTransform} from \"@angular/core\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\n\n/**\n * If the original value is null or an empty string, shows \"--\" instead.\n */\n@Pipe({\n   name: 'notEmpty'\n})\nexport class NotEmptyPipe implements PipeTransform {\n\n   public transform(value: any): any {\n      if (value != null && value.toString().trim().length != 0) {\n         return value;\n      } else {\n         return VsanUiUtils.getString(\"vsan.na.label\");\n      }\n   }\n\n}","/* Copyright 2019 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {BaseComparator} from \"@component/datagrid/comparator/base-comparator\";\n\nexport class StringComparator<T> extends BaseComparator<T> {\n   constructor(private dataField: string) {\n      super();\n   }\n\n   protected compareValue(a: T, b: T): number {\n      return this.stringify(a, this.dataField).toLowerCase()\n            .localeCompare(this.stringify(b, this.dataField).toLowerCase());\n   }\n}\n","/* Copyright 2019-2020 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {DiskGroupData} from \"@generated/disk-group-data\";\nimport {VsanDiskMapping} from \"@generated/vsan-disk-mapping\";\nimport {VsanDiskMgmtActionsUtil} from \"@util/vsan-disk-mgmt-actions-util\";\nimport {PrecheckEntity} from \"@generated/precheck-entity\";\n\n/**\n * The disk group data required for disk and disk group actions,\n * such as: remove/recreate/unmount disk group and remove disks.\n */\nexport class DiskGroupActionData {\n   vsanUuid: string;\n   isLocked: boolean;\n   isMounted: boolean;\n   diskGroupName: string;\n   diskMapping: VsanDiskMapping;\n\n   static fromDiskGroupData = (group: DiskGroupData): DiskGroupActionData => {\n      const groupData: DiskGroupActionData = new DiskGroupActionData();\n      groupData.isLocked = group.isLocked;\n      groupData.diskGroupName = group.name;\n      groupData.isMounted = group.isMounted;\n      groupData.diskMapping = VsanDiskMgmtActionsUtil.getVsanDiskMapping(group);\n      groupData.vsanUuid = group.disks.find(disk => disk.isMappedAsCache).vsanUuid;\n      return groupData;\n   };\n\n   static fromPrecheckEntity = (precheckEntity: PrecheckEntity) => {\n      const groupData: DiskGroupActionData = new DiskGroupActionData();\n      groupData.vsanUuid = precheckEntity.uuid;\n      groupData.diskGroupName = precheckEntity.name;\n      groupData.isLocked = precheckEntity.diskGroupData.isLocked;\n      groupData.isMounted = precheckEntity.diskGroupData.isMounted;\n      groupData.diskMapping = precheckEntity.diskGroupData.diskMapping;\n      return groupData;\n   };\n}","\nexport interface PerfStatesObjSpec {\n\n   clusterRef: any;\n   profileId: string;\n   isVerboseEnabled: boolean;\n   isNetworkDiagnosticModeEnabled: boolean;\n} //class PerfStatesObjSpec\n\nexport module PerfStatesObjSpec{\nexport class Factory {\n\n   static create = (clusterRef: any, profileId: string, isVerboseEnabled: boolean, isNetworkDiagnosticModeEnabled: boolean): PerfStatesObjSpec => {\n      return { clusterRef: clusterRef, profileId: profileId, isVerboseEnabled: isVerboseEnabled, isNetworkDiagnosticModeEnabled: isNetworkDiagnosticModeEnabled, };\n   }\n\n\n} //class Factory\n\n} //module PerfStatesObjSpec\n"],"sourceRoot":"webpack:///"}