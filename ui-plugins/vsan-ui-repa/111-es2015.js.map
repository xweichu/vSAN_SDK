{"version":3,"sources":["./src/app/vsan/performance-diagnostics/performance-diagnostics.module.ts","./src/app/vsan/performance-diagnostics/view/performance-diagnostics.html","./src/app/vsan/performance-diagnostics/view/performance-diagnostics.component.ts","./src/app/vsan/common/component/datagrid/tree-datagrid.module.ts","./src/app/vsan/common/service/navigation/model/knowledge-base-id.ts","./src/app/generated/perf-diagnostic-query-spec.ts","./src/app/vsan/common/component/popup-list/popup-list.module.ts","./src/app/vsan/performance-diagnostics/view/issues-list.html","./src/app/vsan/performance-diagnostics/model/aggregated-entity.data.ts","./src/app/vsan/common/component/navigation/vsan-breadcrumb.module.ts","./src/app/vsan/performance-diagnostics/view/performance-diagnostics-feedback.html","./src/app/vsan/performance-diagnostics/model/single-issue-entity.data.ts","./src/app/vsan/performance-diagnostics/model/diagnostics-issue.data.ts","./src/app/generated/feedback-spec.ts","./src/app/vsan/performance-diagnostics/view/performance-diagnostics-feedback.component.ts","./src/app/vsan/common/component/cell/common-cells.module.ts","./src/app/vsan/common/component/inventory/inventory-browser.module.ts","./src/app/generated/perf-diagnostic-type.ts","./src/app/vsan/performance-diagnostics/view/issues-list.component.ts","./src/app/vsan/common/vsan-common.module.ts","./src/app/vsan/common/component/search/search.module.ts","./src/app/vsan/common/component/action-button/action-button.module.ts"],"names":[],"mappings":"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","file":"111-es2015.js","sourcesContent":["/* Copyright 2020 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {NgModule} from \"@angular/core\";\nimport {ClarityModule} from \"@clr/angular\";\nimport {CommonModule} from \"@angular/common\";\nimport {RouterModule, Routes} from \"@angular/router\";\nimport {VsanCommonModule} from \"../common/vsan-common.module\";\nimport {VsanChartModule} from \"@component/chart/chart.module\";\nimport {UnavailableViewModule} from \"@component/unavailable-view/unavailable-view.module\";\nimport {IssuesListComponent} from \"./view/issues-list.component\";\nimport {PerformanceDiagnosticsComponent} from \"./view/performance-diagnostics.component\";\nimport {PerformanceDiagnosticsFeedbackComponent} from \"./view/performance-diagnostics-feedback.component\";\nimport {PerformancePersistenceService} from \"@service/performance-persistence.service\";\nimport {PersistentStorageService} from \"@service/browser-storage.service\";\n\nconst performanceDiagnosticsRoutes: Routes = [\n   {\n      path: \"\",\n      component: PerformanceDiagnosticsComponent,\n   },\n];\n\n@NgModule({\n   imports: [\n      CommonModule,\n      ClarityModule,\n      VsanChartModule,\n      VsanCommonModule,\n      UnavailableViewModule,\n      RouterModule.forChild(performanceDiagnosticsRoutes),\n   ],\n   declarations: [\n      IssuesListComponent,\n      PerformanceDiagnosticsComponent,\n      PerformanceDiagnosticsFeedbackComponent,\n   ],\n   providers: [\n      PerformancePersistenceService,\n      PersistentStorageService,\n   ],\n})\nexport class PerformanceDiagnosticsModule {\n}\n","<!-- Copyright 2017-2021 VMware, Inc. All rights reserved. -- VMware Confidential -->\n<h5 vsan-auto-focus>\n   {{\"vsan.cluster.monitor.performance.diagnostics.title\" | localized}}\n</h5>\n<!-- busy indicator -->\n<span class=\"busy-backdrop\" *ngIf=\"loading\">\n   <span class=\"spinner central-spinner\"></span>\n</span>\n\n<vsan-validation id=\"configuration-falied-message\"\n                 *ngIf=\"configurationFailedMessage\"\n                 [alert]=\"configurationFailedMessage\"\n                 [allowReload]=\"false\"\n                 [allowClose]=\"false\">\n</vsan-validation>\n\n<vsan-unavailable-view *ngIf=\"!loading && !disabledService.allRequiredServicesAreEnabled\"\n                       [unavailableViewSpec]=\"disabledService\"\n                       [hasEditPrivilege]=\"hasEditPrivilege && hasReadPolicyPrivilege\"\n                       [clusterRef]=\"clusterRef\">\n</vsan-unavailable-view>\n\n<ng-container *ngIf=\"!loading && isPerfEnabled && isCeipEnabled\">\n\n   <vsan-validation id=\"validation-message\"\n                    *ngIf=\"alertMessage\"\n                    [alert]=\"alertMessage\"\n                    [allowReload]=\"false\"\n                    (onClosed)=\"alertMessage = null\">\n   </vsan-validation>\n   <vsan-validation id=\"no-permissions\"\n                    *ngIf=\"!hasDiagnosticsPermissions\"\n                    [alert]=\"getString('vsan.perf.diagnosticts.nopermissions')\"\n                    [allowClose]=\"false\">\n   </vsan-validation>\n\n   <div id=\"header\" *ngIf=\"!noDataView\">\n      <span id=\"description\">{{'vsan.cluster.monitor.performance.diagnostics.description' | localized}}</span>\n      <a [external-link]=\"'vsan.cluster.monitor.performance.diagnostics.link' | localized\"\n         [articleId]=\"KnowledgeBaseId.PERFORMANCE_DIAGNOSTICS\"></a>\n   </div>\n\n   <div id=\"filters\" class=\"filters-container\" *ngIf=\"hasDiagnosticsPermissions\">\n      <label id=\"label-goal\" for=\"goal\">{{'vsan.perf.diagnostics.perspectiveLabel' | localized}}</label>\n      <clr-dropdown id=\"goal\" class=\"range-dropdown\">\n         <button class=\"dropdown-toggle btn btn-sm btn-link\" clrDropdownToggle>\n            {{goal.title}}\n            <clr-icon shape=\"caret down\"></clr-icon>\n         </button>\n         <clr-dropdown-menu\n               clrPosition=\"bottom-left\"\n               [attr.aria-label]=\"'vsan.perf.diagnostics.perspectiveLabel.srMessage.dropdownMenu.label' | localized\">\n            <div *ngFor=\"let goal of goals\">\n               <button clrDropdownItem (click)=\"onGoalChanged(goal)\" [title]=\"goal.title\">\n                  {{goal.title}}\n               </button>\n            </div>\n         </clr-dropdown-menu>\n      </clr-dropdown>\n\n      <vsan-time-range-picker id=\"time-range-picker\"\n                              role=\"group\"\n                              aria-labelledby=\"time-range-label\"\n                              [clusterRef]=\"clusterRef\"\n                              [enabled]=\"!loadingIssues\"\n                              (changeRange)=\"requestDiagnosticsData($event)\">\n      </vsan-time-range-picker>\n   </div>\n\n   <vsan-unavailable-view *ngIf=\"noDataView\"\n                          [unavailableViewSpec]=\"noDataView\">\n   </vsan-unavailable-view>\n\n   <ng-container *ngIf=\"!noDataView\">\n      <div id=\"summary\" *ngIf=\"statusText && !loadingIssues\">\n         <span>{{'vsan.perf.diagnostics.summaryLabel' | localized}}</span>\n         <clr-icon [attr.shape]=\"statusIconShape\" class=\"{{statusIconClass}} is-solid\"></clr-icon>\n         <span>{{statusText}}</span>\n      </div>\n\n      <vsan-issues-list id=\"issuesList\"\n                        *ngIf=\"hasDiagnosticsPermissions\"\n                        [data]=\"issues\"\n                        [loading]=\"loadingIssues\"\n                        (selectIssue)=\"onIssueSelected($event)\">\n      </vsan-issues-list>\n\n      <div id=\"details\" class=\"details-container\">\n         <ng-container *ngIf=\"issues && issues.length && !loadingIssues\">\n            <div id=\"selection-warning-message\"\n                 *ngIf=\"!selectedIssue || isParentIssueSelected\"\n                 class=\"bold-no-selection\">\n               {{'vsan.perf.diagnostic.noEntitySelectedLabel' | localized}}\n            </div>\n         </ng-container>\n\n         <ng-container *ngIf=\"selectedIssue && !isParentIssueSelected\">\n            <span id=\"parent-issue-name\">{{parentIssueTitle}}</span>\n            <span id=\"parent-issue-description\">{{parentIssueDescription}}</span>\n            <vsan-validation id=\"recommendation\"\n                             *ngIf=\"isRecommendationShown\"\n                             alertType=\"info\"\n                             [allowClose]=\"false\"\n                             [alert]=\"getSelectedIssueRecommendation()\">\n            </vsan-validation>\n            <vsan-perf-charts-container *ngFor=\"let data of chartsData; let i=index\"\n                                        id=\"charts-container-{{i}}\"\n                                        [data]=\"[data.data]\"\n                                        [title]=\"data.issue?.name\"\n                                        [subtitle]=\"data.issue?.description\"\n                                        (clickShowAllLink)=\"onShowAllMetricsLinkClicked(data.issue)\"\n                                        [isShowAllLinkVisible]=\"isShowAllLinkVisible(data)\"\n                                        [isEmptyChartsVisible]=\"!alertMessage\">\n            </vsan-perf-charts-container>\n            <vsan-performance-diagnostics-feedback *ngIf=\"isPerfDiagnosticsFeedbackSupported\"\n                                                   [clusterRef]=\"clusterRef\"\n                                                   [transactionId]=\"transactionId\"\n                                                   [selectedIssue]=\"selectedIssue\"\n                                                   (feedbackSubmit)=\"onFeedbackSubmit($event)\">\n            </vsan-performance-diagnostics-feedback>\n         </ng-container>\n      </div>\n   </ng-container>\n</ng-container>\n","/* Copyright 2017-2022 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {DatePipe} from \"@angular/common\";\nimport {ChangeDetectorRef, Component, OnInit, ViewChild} from \"@angular/core\";\nimport {GraphMetric} from \"@component/chart/performance/graph-metrics.data\";\nimport {PerfChartUtil} from \"@component/chart/performance/perf-chart-util\";\nimport {PerfGraph} from \"@component/chart/performance/perf-graph\";\nimport {RangePickerState} from \"@component/datetime-picker/time-range-picker/range-picker-state\";\nimport {VsanTimeRangePickerComponent} from \"@component/datetime-picker/time-range-picker/time-range-picker.component\";\nimport {UnavailableViewSpec} from \"@component/unavailable-view/unavailable-view-spec\";\nimport {CeipService} from \"@generated/ceip-service\";\nimport {DiagnosticException} from \"@generated/diagnostic-exception\";\nimport {PerfDiagnosticQuerySpec} from \"@generated/perf-diagnostic-query-spec\";\nimport {PerfDiagnosticType} from \"@generated/perf-diagnostic-type\";\nimport {PerfEntityStateData} from \"@generated/perf-entity-state-data\";\nimport {PerfTimeRangeData} from \"@generated/perf-time-range-data\";\nimport {PerformanceDiagnosticData} from \"@generated/performance-diagnostic-data\";\nimport {PerformanceDiagnosticsPropertyProvider} from \"@generated/performance-diagnostics-property-provider\";\nimport {PerformanceEntitiesData} from \"@generated/performance-entities-data\";\nimport {PerformanceExceptionsData} from \"@generated/performance-exceptions-data\";\nimport {PerformanceObjectType} from \"@generated/performance-object-type\";\nimport {PermissionService} from \"@generated/permission-service\";\nimport {Privileges} from \"@generated/privileges\";\nimport {VsanCapabilityProvider} from \"@generated/vsan-capability-provider\";\nimport {VsanPerfPropertyProvider} from \"@generated/vsan-perf-property-provider\";\nimport {FullTimeRangeSelectionData} from \"@model/full-time-range-selection.data\";\nimport {PerformanceContext} from \"@navigation/context/performance-context\";\nimport {KnowledgeBaseId} from \"@navigation/model/knowledge-base-id\";\nimport {NavigationService, PlatformExtension} from \"@navigation/navigation.service\";\nimport {RefreshHandler} from \"@service/global-refresh.service\";\nimport {ManagedObject} from \"@service/managed-object\";\nimport {PerformancePersistenceService} from \"@service/performance-persistence.service\";\nimport {ScreenReaderAnnouncer} from \"@service/screen-reader-announcer.service\";\nimport {TaskMonitorService} from \"@service/task-monitor-service\";\nimport {Icon} from \"@util/icon\";\nimport {Logger} from \"@util/logger\";\nimport {VsanDateTimeUtils} from \"@util/vsan-dateteime-util\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {PerfMonitorViewType} from \"../../performance/model/perf-monitor-view-type.model\";\nimport {AggregatedIssueEntity} from \"../model/aggregated-entity.data\";\nimport {DiagnosticIssue} from \"../model/diagnostics-issue.data\";\nimport {SingleIssueEntity} from \"../model/single-issue-entity.data\";\n\n@Component({\n   templateUrl: \"performance-diagnostics.html\",\n   styleUrls: [\"performance-diagnostics.scss\"],\n   selector: \"vsan-performance-diagnostics\",\n})\nexport class PerformanceDiagnosticsComponent implements OnInit {\n\n   readonly KnowledgeBaseId: typeof KnowledgeBaseId = KnowledgeBaseId;\n   private static readonly MAX_REQUEST: number = 256;\n   private static readonly AGGREGATED_METRIC_NAME: string = \"aggregate\";\n\n   loading: boolean = true;\n   loadingIssues: boolean = false;\n   alertMessage: string;\n   goals: Goal[];\n   goal: Goal;\n   issues: DiagnosticIssue[];\n   chartsData: ChartData[] = [];\n   selectedIssue: DiagnosticIssue | AggregatedIssueEntity | SingleIssueEntity;\n   statusIconShape: string;\n   statusIconClass: string;\n   statusText: string;\n   clusterRef: ManagedObject;\n   hasDiagnosticsPermissions: boolean;\n\n   isPerfEnabled: boolean;\n   isCeipEnabled: boolean;\n   isPerfDiagnosticsFeedbackSupported: boolean = false;\n   hasEditPrivilege: boolean = false;\n   hasReadPolicyPrivilege: boolean = false;\n   disabledService: UnavailableViewSpec = UnavailableViewSpec.PERF_DIAGNOSTICS_VIEW_DISABLED_SERVICES;\n   noDataView: UnavailableViewSpec;\n   configurationFailedMessage: string = null;\n\n   getString: (key: string, ...params: any[]) => string = VsanUiUtils.getString;\n\n   private entityTypes: any; // A map containing entity types definitions\n   private aggregatedEntityTypes: any; // A map containing aggregated entity types definitions\n\n   private exceptionTypes: any; // A map containg entityRed id to entityRef data\n   private timeRange: PerfTimeRangeData;\n\n   transactionId: string;\n\n   @ViewChild(VsanTimeRangePickerComponent)\n   private timeRangePicker: VsanTimeRangePickerComponent;\n\n   @ScreenReaderAnnouncer()\n   srOnlyMessage: string;\n\n   constructor(private perfDiagnosticsProvider: PerformanceDiagnosticsPropertyProvider,\n         private perfProvider: VsanPerfPropertyProvider,\n         private permissionService: PermissionService,\n         private ceipService: CeipService,\n         private capabilityProvider: VsanCapabilityProvider,\n         private taskSvc: TaskMonitorService,\n         private navigationService: NavigationService,\n         private changeDetector: ChangeDetectorRef,\n         private perfPersistenceService: PerformancePersistenceService) {\n   }\n\n   @ViewChild(VsanTimeRangePickerComponent)\n   timeRangePickerComponent: VsanTimeRangePickerComponent;\n\n   private initializePersistedSelections(): void {\n      if (this.timeRangePickerComponent == null) {\n         setTimeout(() => {\n            this.initializePersistedSelections();\n         }, 1000);\n         return;\n      }\n\n      // Try to get persisted selection.\n      const persistedSelection: FullTimeRangeSelectionData =\n            this.perfPersistenceService.getPersistedSelection();\n      /*\n       * If there is persisted time range selection, then wait for time-range-picker component\n       * initialization and pass the cached range into it.\n      * */\n      if (persistedSelection != null) {\n         const timeRange: PerfTimeRangeData = persistedSelection.timeRange;\n         const state: RangePickerState = persistedSelection.state;\n\n         if (this.timeRangePickerComponent.currentTimeRange.from !== timeRange.from ||\n               this.timeRangePickerComponent.currentTimeRange.to !== timeRange.to) {\n            this.timeRange = timeRange;\n            this.timeRangePickerComponent.setTimerange(this.timeRange, state);\n            this.timeRangePickerComponent.changeRange.emit(this.timeRange);\n         }\n      }\n   }\n\n   ngOnInit(): void {\n      this.initializePersistedSelections();\n\n      this.clusterRef = ManagedObject.contextObject;\n\n      // Init predefined goals\n      this.goals = [];\n      this.goals.push(new Goal(PerfDiagnosticType.iops,\n            VsanUiUtils.getString(\"vsan.perf.diagnostics.perspective.iops\")));\n      this.goals.push(new Goal(PerfDiagnosticType.tput,\n            VsanUiUtils.getString(\"vsan.perf.diagnostics.perspective.throughput\")));\n      this.goals.push(new Goal(PerfDiagnosticType.lat,\n            VsanUiUtils.getString(\"vsan.perf.diagnostics.perspective.latency\")));\n\n      // Select the first one\n      this.goal = this.goals[0];\n\n      this.fetch();\n   }\n\n   @RefreshHandler\n   async fetch(): Promise<void> {\n      const promises: Promise<any>[] = [\n         this.perfProvider.getPerfServiceEnabled(this.clusterRef),\n         this.ceipService.getCeipServiceEnabled(this.clusterRef),\n         this.capabilityProvider.getIsPerfDiagnosticsFeedbackSupportedOnVc(this.clusterRef),\n         this.permissionService.hasPermissions(this.clusterRef, [Privileges.EDIT_CLUSTER()]),\n         this.permissionService.hasVcPermissions(this.clusterRef, [Privileges.READ_POLICIES()]),\n      ];\n\n      try {\n         this.loading = true;\n         [\n            this.isPerfEnabled,\n            this.isCeipEnabled,\n            this.isPerfDiagnosticsFeedbackSupported,\n            this.hasEditPrivilege,\n            this.hasReadPolicyPrivilege,\n         ] = await Promise.all(promises);\n\n         this.disabledService.setRequiredServiceStatus(UnavailableViewSpec.PERF_DISABLED, this.isPerfEnabled);\n         this.disabledService.setRequiredServiceStatus(UnavailableViewSpec.PERF_DIAGNOSTICS_VIEW_CEIP_DISABLED,\n               this.isCeipEnabled);\n         if (this.disabledService.allRequiredServicesAreEnabled) {\n            this.requestData();\n         } else {\n            this.loading = false;\n         }\n\n         this.alertMessage = null;\n      } catch (ex) {\n         this.loading = false;\n         this.alertMessage = ex;\n         Logger.error(ex);\n      }\n   }\n\n   private requestData(): void {\n      this.permissionService.hasPermissions(this.clusterRef, [Privileges.GLOBAL_DIAGNOSTICS()])\n            .then((result: boolean) => {\n               this.hasDiagnosticsPermissions = result;\n\n               // Request this data only once as it won\"t change unless the vSAN service us upgraded on the server.\n               this.requestExceptionsData();\n            })\n            .catch(this.handleError);\n   }\n\n   /**\n    * Request the exceptions definitions and cache them in the memory as they don\"t change.\n    */\n   private requestExceptionsData = () => {\n      this.loading = true;\n\n      this.perfDiagnosticsProvider.getPerformanceExceptionsData(this.clusterRef).then(\n            (result: PerformanceExceptionsData) => {\n               // Cache result\n               this.entityTypes = result.performanceEntityTypes;\n               this.aggregatedEntityTypes = result.performanceAggregatedEntityTypes;\n               this.exceptionTypes = result.performanceExceptionIdToException;\n\n               this.loading = false;\n               this.srOnlyMessage = VsanUiUtils.getString(\"vsan.screenReader.message.page.loaded\",\n                     VsanUiUtils.getString(\"vsan.cluster.monitor.performance.diagnostics.title\"));\n            }).catch(this.handleError);\n   };\n\n   /**\n    * Requests performance diagnostics data and entity infos\n    */\n   async requestDiagnosticsData(range: PerfTimeRangeData): Promise<void> {\n      this.perfPersistenceService.saveSelection(range, this.timeRangePickerComponent.currentPickerState);\n      this.timeRange = range;\n      this.loadingIssues = true;\n      this.issues = [];\n      this.chartsData = [];\n      this.selectedIssue = null;\n      this.noDataView = null;\n\n      let perfDiagnosticTaskRef: ManagedObject;\n      const spec: PerfDiagnosticQuerySpec = PerfDiagnosticQuerySpec.Factory\n            .create(range.from, range.to, this.goal.type);\n      try {\n         perfDiagnosticTaskRef = await this.perfDiagnosticsProvider.getPerformanceDiagnosticTask(this.clusterRef, spec);\n         this.transactionId = await this.taskSvc.getAwaitResult(perfDiagnosticTaskRef);\n      } catch (e) {\n         // No data is available when the error is thrown.\n         this.loadingIssues = false;\n         this.noDataView = VsanDateTimeUtils.isRecentTimeRange(this.timeRange)\n               ? UnavailableViewSpec.PERF_VIEW_NO_DATA\n               : UnavailableViewSpec.PERF_VIEW_NO_DATA_FOR_SELECTED_PERIOD;\n         return;\n      }\n      this.perfDiagnosticsProvider.getPerformanceDiagnosticData(this.clusterRef, perfDiagnosticTaskRef, spec).then(\n            (result: PerformanceDiagnosticData) => {\n               this.alertMessage = null;\n\n               // Save only unique issues\n               if (result && result.issues) {\n                  result.issues.forEach((issue: DiagnosticException) => {\n                     const exceptionData: any = this.exceptionTypes[issue.exceptionId];\n                     if (exceptionData) {\n                        const issuePO: DiagnosticIssue = new DiagnosticIssue(issue, exceptionData);\n                        this.issues.push(issuePO);\n                     }\n                  });\n               }\n\n               if (result && result.entityRefIds) {\n                  this.requestEntityInfos(result.entityRefIds).then((entityInfos: any) => {\n                     const issuesWithEntities: DiagnosticIssue[] = [];\n\n                     // Remove issues without entities as we\n                     // cannot show information for them\n                     this.issues.forEach((issue: DiagnosticIssue) => {\n                        issue.addEntities(this.entityTypes, entityInfos);\n                        if (issue.issues.length > 0) {\n                           issuesWithEntities.push(issue);\n                        }\n                     });\n                     this.issues = issuesWithEntities;\n                     this.populateIssuesSummary(spec);\n\n                     this.loadingIssues = false;\n                  }, this.handleError);\n               } else {\n                  this.populateIssuesSummary(spec);\n                  this.loadingIssues = false;\n               }\n            }, this.handleError);\n   }\n\n   /**\n    * Generic error handler\n    */\n   private handleError = (error: any) => {\n      Logger.error(\"Unable to retrieve performance diagnostics data.\", error);\n      this.alertMessage = VsanUiUtils.getString(\"vsan.perf.diagnostics.errorLoadingData\");\n      this.loadingIssues = false;\n      this.loading = false;\n   };\n\n   /**\n    * Loads the data about all entityRefIds in portions as the server API\n    * does not support more than 256 IDs in a single request.\n    */\n   private requestEntityInfos = async (entityRefIds: string[]) => {\n      if (!entityRefIds || entityRefIds.length === 0) {\n         return;\n      }\n\n      const entityRefIdToEntityRefDataMap: any = {};\n      const notRequestedRefIds: string[] = entityRefIds.slice();\n\n      // Load the data in portions\n      while (notRequestedRefIds.length > 0) {\n         const ids: string[] = [];\n         for (let i: number = 0; i < PerformanceDiagnosticsComponent.MAX_REQUEST && notRequestedRefIds.length > 0;\n               ++i) {\n            const id: string = notRequestedRefIds.shift();\n            ids.push(id);\n         }\n\n         const result: PerformanceEntitiesData = await this.perfDiagnosticsProvider\n               .getPerfEntitiesInfo(this.clusterRef, ids);\n\n         for (const key in result.entityRefIdToEntityRefData) {\n            if (!result.entityRefIdToEntityRefData.hasOwnProperty(key)) {\n               continue;\n            }\n            entityRefIdToEntityRefDataMap[key] = result.entityRefIdToEntityRefData[key];\n         }\n      }\n\n      return entityRefIdToEntityRefDataMap;\n   };\n\n   /**\n    * Updates the summary label according to the retrieved issues.\n    */\n   private populateIssuesSummary(spec: PerfDiagnosticQuerySpec): void {\n      const startTime: string = PerformanceDiagnosticsComponent.formatDate(spec.startTime);\n      const endTime: string = PerformanceDiagnosticsComponent.formatDate(spec.endTime);\n      const perspective: string = this.getDiagnosticTypeLabel(spec.queryType);\n      const issuesCount: number = this.issues == null\n            ? 0\n            : this.issues.length;\n\n      if (issuesCount === 0) {\n         this.statusIconShape = Icon.CLR_SUCCESS_STANDARD_ICON_SHAPE;\n         this.statusIconClass = Icon.clrIconShapeClassMap[Icon.CLR_SUCCESS_STANDARD_ICON_SHAPE];\n         this.statusText = VsanUiUtils.getString(\"vsan.perf.diagnostics.noIssuesFoundLabel\",\n               startTime, endTime, perspective);\n      } else {\n         this.statusIconShape = Icon.CLR_WARN_STANDARD_ICON_SHAPE;\n         this.statusIconClass = Icon.clrIconShapeClassMap[Icon.CLR_WARN_STANDARD_ICON_SHAPE];\n         this.statusText = VsanUiUtils.getString(\"vsan.perf.diagnostics.foundIssuesLabel\",\n               issuesCount, startTime, endTime, perspective);\n      }\n   }\n\n   private getDiagnosticTypeLabel(diagnosticType: PerfDiagnosticType): string {\n      let result: string;\n      switch (diagnosticType) {\n         case PerfDiagnosticType.eval:\n            result = VsanUiUtils.getString(\"vsan.perf.diagnostics.perspective.eval\");\n            break;\n         case PerfDiagnosticType.iops:\n            result = VsanUiUtils.getString(\"vsan.perf.diagnostics.perspective.iops\");\n            break;\n         case PerfDiagnosticType.tput:\n            result = VsanUiUtils.getString(\"vsan.perf.diagnostics.perspective.throughput\");\n            break;\n         case PerfDiagnosticType.lat:\n            result = VsanUiUtils.getString(\"vsan.perf.diagnostics.perspective.latency\");\n            break;\n         default:\n            Logger.error(\"Uknown diagnostic type: \" + diagnosticType);\n      }\n      return result;\n   }\n\n   /**\n    * Formats the given date in the \"yMdjm\" format (e.g. `9/3/2010, 12:05 PM` for `en-US`)\n    */\n   private static formatDate(date: number): string {\n      const formatter: DatePipe = new DatePipe(VsanUiUtils.getLocaleForDecimal());\n      return formatter.transform(date, VsanUiUtils.getString(\"vsan.common.datePipe.platform.format\"));\n   }\n\n   onGoalChanged = (goal: Goal) => {\n      this.goal = goal;\n   };\n\n   onIssueSelected(issue: any): void {\n      this.selectedIssue = issue;\n\n      // Do nothing for parent issues as they are just\n      // logical groups and there is no charts defined for them\n      if (this.isParentIssueSelected) {\n         return;\n      }\n\n      if (issue instanceof SingleIssueEntity) {\n         this.chartsData = this.createChartsDataFromSingleIssue(issue as SingleIssueEntity);\n      } else if (issue instanceof AggregatedIssueEntity) {\n         this.chartsData = this.createChartsDataFromAggregatedIssue(issue as AggregatedIssueEntity);\n      } else {\n         Logger.error(\"Unknown issueEntity type: \" + issue);\n      }\n\n      this.changeDetector.detectChanges();\n   }\n\n   onFeedbackSubmit(feedback: any): void {\n      (this.selectedIssue as any).feedback = feedback;\n   }\n\n   private createChartsDataFromSingleIssue = (issue: SingleIssueEntity): ChartData[] => {\n      const metricName: string = issue.refData.metricName;\n      const entityType: any = this.entityTypes[metricName];\n\n      // The charts component works with an array of metrics so\n      // if we have a single metrics objects, wrap it in an array\n      const metrics: PerfEntityStateData = issue.metric;\n      const graphs: PerfGraph[] = entityType.graphs.map(graph => PerfChartUtil.getGraphDefinition(graph));\n      const graphMetric: GraphMetric = new GraphMetric(metrics, graphs);\n\n      const chartData: ChartData = new ChartData();\n      chartData.issue = issue;\n      chartData.data = graphMetric;\n      chartData.isShowAllDataAvailable = true;\n      return [chartData];\n   };\n\n   private createChartsDataFromAggregatedIssue = (issue: AggregatedIssueEntity): ChartData[] => {\n      const aggregatedGraphMetricsMap: any = this.aggregateGraphMetrics(issue);\n      const chartsData: ChartData[] = [];\n      const chartTitles: Set<string> = new Set<string>();\n      if (issue.aggregatedEntity) {\n         const entity: SingleIssueEntity = issue.aggregatedEntity;\n         const id: string = entity.metric.entityRefId;\n         const metrics: PerfEntityStateData = entity.metric;\n         const metricName: string = PerformanceDiagnosticsComponent.AGGREGATED_METRIC_NAME;\n         const rawGraphs: any[] = this.aggregatedEntityTypes[metricName].graphs;\n         const graphs: PerfGraph[] = rawGraphs.map(graph => PerfChartUtil.getGraphDefinition(graph));\n\n         const data: ChartData = new ChartData();\n         data.issue = issue;\n         data.isShowAllDataAvailable = false;\n         data.data = new GraphMetric(metrics, graphs, id);\n         if (!!data.data.graphs && data.data.graphs.length > 0) {\n            // Show the aggregated chart only if we can draw it!\n            chartsData.push(data);\n            chartTitles.add(data.issue.name);\n         }\n      }\n\n      for (const entityId in aggregatedGraphMetricsMap) {\n         if (!aggregatedGraphMetricsMap.hasOwnProperty(entityId)) {\n            continue;\n         }\n         const entry: any = aggregatedGraphMetricsMap[entityId];\n         const data: ChartData = new ChartData();\n         data.isShowAllDataAvailable = true;\n         data.issue = entry.issue;\n         data.data = new GraphMetric(entry.metrics, entry.graphs, entityId);\n         // Don't set the same title on each chart within the same entity\n         if (chartTitles.has(data.issue.name)) {\n            data.issue.name = null;\n         } else {\n            chartTitles.add(data.issue.name);\n         }\n         chartsData.push(data);\n      }\n\n      return chartsData;\n   };\n\n   private aggregateGraphMetrics(issue: AggregatedIssueEntity): void {\n      const aggregatedGraphMetricsMap: any = {};\n      issue.entities.forEach((entity: SingleIssueEntity) => {\n         const id: string = entity.refData.entityRefId;\n         let data: any = aggregatedGraphMetricsMap[id];\n\n         if (!data) {\n            data = {\n               issue: undefined,\n               graphs: [],\n               metrics: undefined,\n            };\n            aggregatedGraphMetricsMap[id] = data;\n         }\n\n         if (data) {\n            if (!data.issue) {\n               data.issue = entity;\n            }\n            if (data.graphs.length === 0) {\n               const metricName: string = entity.refData.metricName;\n               const entityType: any = this.entityTypes[metricName];\n               data.graphs = entityType.graphs.map(graph => PerfChartUtil.getGraphDefinition(graph));\n            }\n            if (data.metrics && entity.metric.entityRefId === data.metrics.entityRefId) {\n               // aggregate the metrics series so we can have the entire chart\n               data.metrics.metricsSeries.push(...entity.metric.metricsSeries);\n            } else {\n               // Shallow copy metricsSeries to avoid multiple last series adding on each selection.\n               data.metrics = {\n                  entityRefId: entity.metric.entityRefId,\n                  timeStamps: entity.metric.timeStamps,\n                  metricsCollectInterval: entity.metric.metricsCollectInterval,\n                  metricsSeries: [...entity.metric.metricsSeries],\n               };\n            }\n         }\n      });\n      return aggregatedGraphMetricsMap;\n   }\n\n   /**\n    * If the issue is a parent - return its name\n    * If the issue is a child - return its parent\"s name\n    */\n   get parentIssueTitle(): string {\n      if (this.selectedIssue instanceof DiagnosticIssue) {\n         return this.selectedIssue.name;\n      } else {\n         return this.selectedIssue.parentIssue.name;\n      }\n   }\n\n   /**\n    * If the issue is a parent - return its descriptions\n    * If the issue is a child - return its parent\"s description\n    */\n   get parentIssueDescription(): string {\n      if (this.selectedIssue instanceof DiagnosticIssue) {\n         return this.selectedIssue.description;\n      } else {\n         return this.selectedIssue.parentIssue.description;\n      }\n   }\n\n   get isParentIssueSelected(): boolean {\n      return this.selectedIssue instanceof DiagnosticIssue;\n   }\n\n   get isRecommendationShown(): boolean {\n      return this.selectedIssue\n            && (this.selectedIssue instanceof SingleIssueEntity || this.selectedIssue instanceof AggregatedIssueEntity)\n            && this.selectedIssue.recommendation\n            && this.selectedIssue.recommendation.trim() !== \"\";\n   }\n\n   getSelectedIssueRecommendation(): string {\n      return VsanUiUtils.getString(\"vsan.perf.diagnosticts.recommendation\", this.selectedIssue &&\n            (this.selectedIssue as SingleIssueEntity | AggregatedIssueEntity).recommendation);\n   }\n\n   onShowAllMetricsLinkClicked(issue: SingleIssueEntity): void {\n      const moRef: ManagedObject = issue.refData.managedObjectRef;\n      const objectType: PerformanceObjectType = issue.refData.performanceObjectType;\n\n      let extensionId: string;\n      let viewType: PerfMonitorViewType;\n      switch (objectType) {\n            // Cluster\n         case PerformanceObjectType.clusterVmConsumption:\n            extensionId = PlatformExtension.CLUSTER_PERFORMANCE;\n            viewType = PerfMonitorViewType.CLUSTER_VM_CONSUMPTION;\n            break;\n         case PerformanceObjectType.clusterBackend:\n            extensionId = PlatformExtension.CLUSTER_PERFORMANCE;\n            viewType = PerfMonitorViewType.CLUSTER_BACKEND;\n            break;\n         case PerformanceObjectType.clusterDomOwner:\n            extensionId = PlatformExtension.CLUSTER_PERFORMANCE;\n            viewType = PerfMonitorViewType.CLUSTER_ISCSI;\n            break;\n         case PerformanceObjectType.clusterIoInsight:\n            extensionId = PlatformExtension.CLUSTER_PERFORMANCE;\n            viewType = PerfMonitorViewType.CLUSTER_IO_INSIGHT;\n            break;\n\n            // Host\n         case PerformanceObjectType.hostBackend:\n            extensionId = PlatformExtension.HOST_PERFORMANCE;\n            viewType = PerfMonitorViewType.HOST_BACKEND;\n            break;\n         case PerformanceObjectType.hostVmConsumption:\n            extensionId = PlatformExtension.HOST_PERFORMANCE;\n            viewType = PerfMonitorViewType.HOST_VM_CONSUMPTION;\n            break;\n         case PerformanceObjectType.hostPnic:\n            extensionId = PlatformExtension.HOST_PERFORMANCE;\n            viewType = PerfMonitorViewType.HOST_PHYSICAL_ADAPTER;\n            break;\n         case PerformanceObjectType.hostVnic:\n            extensionId = PlatformExtension.HOST_PERFORMANCE;\n            viewType = PerfMonitorViewType.HOST_VIRTUAL_ADAPTER;\n            break;\n         case PerformanceObjectType.hostNet:\n            extensionId = PlatformExtension.HOST_PERFORMANCE;\n            viewType = PerfMonitorViewType.HOST_VIRTUAL_ADAPTER;\n            break;\n         case PerformanceObjectType.diskGroup:\n         case PerformanceObjectType.cacheDisk:\n         case PerformanceObjectType.capacityDisk:\n            extensionId = PlatformExtension.HOST_PERFORMANCE;\n            viewType = PerfMonitorViewType.HOST_DISK;\n            break;\n         case PerformanceObjectType.hostIoInsight:\n            extensionId = PlatformExtension.HOST_PERFORMANCE;\n            viewType = PerfMonitorViewType.HOST_IO_INSIGHT;\n            break;\n\n            // Virtual Machine\n         case PerformanceObjectType.vm:\n            extensionId = PlatformExtension.VM_PERFORMANCE;\n            viewType = PerfMonitorViewType.VM_CONSUMPTION;\n            break;\n         case PerformanceObjectType.virtualDisk:\n         case PerformanceObjectType.vscsi:\n            extensionId = PlatformExtension.VM_PERFORMANCE;\n            viewType = PerfMonitorViewType.VM_VIRTUAL_DISK;\n            break;\n         default:\n            throw new Error(\"Unsupported PefrormanceObjectType: \" + objectType);\n      }\n\n      const props: PerformanceContext = {\n         timeRangeFrom: this.timeRange.from,\n         timeRangeTo: this.timeRange.to,\n         timeRangeName: this.timeRange.name,\n         viewType: PerfMonitorViewType[viewType],\n         pickerState: RangePickerState[this.timeRangePicker.currentPickerState],\n         pickerInterval: this.timeRangePicker.hourInterval,\n         pickerFromDate: this.timeRangePicker.fromDate\n               ? this.timeRangePicker.fromDate.toString()\n               : null,\n         entityUuid: issue.vsanUuid,\n      };\n\n      this.navigationService.navigateTo(extensionId, moRef, props);\n   }\n\n   isLinkSupported(type: PerformanceObjectType): boolean {\n      return [\n         PerformanceObjectType.clusterVmConsumption,\n         PerformanceObjectType.clusterBackend,\n         PerformanceObjectType.clusterDomOwner,\n         PerformanceObjectType.clusterIoInsight,\n         PerformanceObjectType.hostBackend,\n         PerformanceObjectType.hostVmConsumption,\n         PerformanceObjectType.hostPnic,\n         PerformanceObjectType.hostVnic,\n         PerformanceObjectType.hostNet,\n         PerformanceObjectType.hostIoInsight,\n         PerformanceObjectType.diskGroup,\n         PerformanceObjectType.cacheDisk,\n         PerformanceObjectType.capacityDisk,\n         PerformanceObjectType.vm,\n         PerformanceObjectType.virtualDisk,\n         PerformanceObjectType.vscsi,\n      ].includes(type);\n   }\n\n   isShowAllLinkVisible(chartData: ChartData): boolean {\n      const issue: SingleIssueEntity = chartData.issue as SingleIssueEntity;\n      return issue\n            && issue.refData\n            && !issue.refData.isEntityMissing\n            && this.isLinkSupported(issue.refData.performanceObjectType)\n            && chartData.isShowAllDataAvailable;\n   }\n}\n\n/**\n * Represents the goal for which the exceptions data is loaded\n */\nclass Goal {\n   constructor(public type: PerfDiagnosticType, public title: string) {\n   }\n}\n\nclass ChartData {\n   issue: SingleIssueEntity | AggregatedIssueEntity;\n   data: GraphMetric;\n   isShowAllDataAvailable: boolean;\n}\n","/* Copyright 2019-2020 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {NgModule} from \"@angular/core\";\nimport {CommonModule} from \"@angular/common\";\nimport {FormsModule} from \"@angular/forms\";\nimport {ClarityModule} from \"@clr/angular\";\nimport {ValidationModule} from \"@component/validation/validation.module\";\nimport {CommonPipeModule} from \"@pipe/common-pipe.module\";\nimport {TreeExpanderComponent} from \"@component/datagrid/tree-expander.component\";\nimport {TreeColumnComponent} from \"@component/datagrid/tree-column.component\";\nimport {EnumeratedFilterComponent} from \"./filter/enumerated-filter.component\";\nimport {EnumeratedFilterItemComponent} from \"./filter/enumerated-filter-item.component\";\nimport {EnumFilterComponent} from \"@component/datagrid/filter/enum-filter.component\";\n\n@NgModule({\n   imports: [\n      CommonModule,\n      FormsModule,\n      ClarityModule,\n      ValidationModule,\n      CommonPipeModule,\n   ],\n   declarations: [\n      TreeColumnComponent,\n      TreeExpanderComponent,\n      EnumeratedFilterComponent,\n      EnumeratedFilterItemComponent,\n      EnumeratedFilterComponent,\n      EnumFilterComponent,\n   ],\n   exports: [\n      TreeColumnComponent,\n      TreeExpanderComponent,\n      EnumeratedFilterComponent,\n      EnumeratedFilterItemComponent,\n      EnumFilterComponent,\n   ],\n})\nexport class TreeDatagridModule {\n}\n","/* Copyright 2021 VMware, Inc. All rights reserved. -- VMware Confidential */\n/**\n * IDs used in external KB link navigation\n */\nexport enum KnowledgeBaseId {\n   PRECHECK_PCP = \"83954\",\n   VIRTUAL_OBJECTS = \"2108319\",\n   UPGRADE = \"2148493\",\n   PERFORMANCE_DIAGNOSTICS = \"2148770\",\n   SUPPORT_INSIGHT = \"60206\",\n}\n","import {PerfDiagnosticType} from '@generated/perf-diagnostic-type';\n\nexport interface PerfDiagnosticQuerySpec {\n\n   startTime: any;\n   endTime: any;\n   queryType: PerfDiagnosticType;\n} //class PerfDiagnosticQuerySpec\n\nexport module PerfDiagnosticQuerySpec{\nexport class Factory {\n\n   static create = (startTime: any, endTime: any, queryType: PerfDiagnosticType): PerfDiagnosticQuerySpec => {\n      return { startTime: startTime, endTime: endTime, queryType: queryType, };\n   }\n\n\n} //class Factory\n\n} //module PerfDiagnosticQuerySpec\n","/* Copyright 2019 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {NgModule} from \"@angular/core\";\nimport {CommonModule} from \"@angular/common\";\nimport {ClarityModule} from \"@clr/angular\";\nimport {CommonPipeModule} from \"@pipe/common-pipe.module\";\nimport {PopupListComponent} from \"@component/popup-list/popup-list.component\";\nimport {PopupListItemDirective} from \"@component/popup-list/popup-list-item.directive\";\n\n@NgModule({\n   imports: [\n      CommonModule,\n      ClarityModule,\n      CommonPipeModule\n   ],\n   declarations: [\n      PopupListComponent,\n      PopupListItemDirective\n   ],\n   exports: [\n      PopupListComponent,\n      PopupListItemDirective\n   ]\n})\nexport class PopupListModule {\n}\n","<clr-datagrid id=\"issues\" [clrDgLoading]=\"loading\">\n   <!-- Header columns -->\n   <clr-dg-column>\n      <vsan-tree-column id=\"issue-column\"\n                        [dataField]=\"'name'\"\n                        [dataProvider]=\"datagrid\"\n                        title=\"{{'vsan.perf.diagnostics.issueNameColumn' | localized}}\">\n      </vsan-tree-column>\n   </clr-dg-column>\n   <clr-dg-column>\n      <vsan-tree-column id=\"more-column\"\n                        [dataProvider]=\"datagrid\"\n                        title=\"{{'vsan.perf.diagnostics.moreInfoColumn' | localized}}\">\n      </vsan-tree-column>\n   </clr-dg-column>\n\n   <!-- Datagrid Content -->\n   <clr-dg-row *clrDgItems=\"let row of datagrid.rows\"\n               (click)=\"onRowSelected(row, $event)\"\n               [class.datagrid-selected]=\"isRowSelected(row)\">\n      <clr-dg-cell>\n         <vsan-expand [row]=\"row\"></vsan-expand>\n         {{row.data.name}}\n      </clr-dg-cell>\n      <clr-dg-cell>\n         <a href=\"{{row.data.helpUrl}}\"\n            *ngIf=\"row.data.hasOwnProperty('helpUrl')\"\n            target=\"_blank\">\n            {{'vsan.perf.diagnosticts.askVmware' | localized}}\n         </a>\n      </clr-dg-cell>\n   </clr-dg-row>\n\n   <!-- Datagrid Footer -->\n   <clr-dg-footer>{{datagridFooterLabel}}</clr-dg-footer>\n</clr-datagrid>","/* Copyright 2017-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {SingleIssueEntity} from \"./single-issue-entity.data\";\nimport {AggregatedDiagnosticIssueEntity} from \"@generated/aggregated-diagnostic-issue-entity\";\nimport {DiagnosticIssueEntity} from \"@generated/diagnostic-issue-entity\";\nimport {SingleDiagnosticIssueEntity} from \"@generated/single-diagnostic-issue-entity\";\nimport {DiagnosticIssue} from \"./diagnostics-issue.data\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {EntityRefData} from \"@generated/entity-ref-data\";\nimport {EntityRefType} from \"@generated/entity-ref-type\";\n\n/**\n * Presentation object for AggregatedDiagnosticIssueEntity. Used in the issues grid.\n */\nexport class AggregatedIssueEntity {\n\n   name: string;\n   icon: any;\n   aggregatedRefIds: string[];\n   recommendation: string;\n   refData: EntityRefData;\n   aggregatedEntity: SingleIssueEntity;\n   entities: SingleIssueEntity[];\n   hasSingleEntityInside: boolean;\n   parentIssue: DiagnosticIssue;\n   feedback: boolean | undefined; // undefined - not set; true - thumbs up; false - thumbs down;\n\n   static create(entity: any, // AggregatedDiagnosticIssueEntity\n                        performanceTypes: { }, // A map containing entity types definitions\n                        entityRefIdToEntityRefDataMap: {}, // A map containing entityRed id to entityRef data\n                        issue: DiagnosticIssue): AggregatedIssueEntity { // The parent issue\n      const result: AggregatedIssueEntity = new AggregatedIssueEntity();\n\n      // Casting to two different types because the two interfaces\n      // don't extend each other.\n      const diagnosticIssue: DiagnosticIssueEntity = entity as DiagnosticIssueEntity;\n      const aggregatedIssue: AggregatedDiagnosticIssueEntity = entity as AggregatedDiagnosticIssueEntity;\n\n      result.aggregatedRefIds = aggregatedIssue.aggregatedRefIds;\n      result.recommendation = diagnosticIssue.recommendation;\n      result.hasSingleEntityInside = aggregatedIssue.hasSingleEntityInside;\n      result.parentIssue = issue;\n      result.aggregatedEntity = SingleIssueEntity.create(aggregatedIssue.aggregatedEntity,\n            entityRefIdToEntityRefDataMap, issue);\n      // entityRefId is required for sending diagnostics feedback.\n      result.refData = EntityRefData.Factory.create(\n            aggregatedIssue.aggregatedEntity.entityRefId, null, null, null, null, null, null, null);\n      result.entities = [];\n      aggregatedIssue.entities.forEach((childEntity: SingleDiagnosticIssueEntity) => {\n         const singleEntity: SingleIssueEntity = SingleIssueEntity.create(\n               childEntity, entityRefIdToEntityRefDataMap, issue);\n\n         if (singleEntity) {\n            result.entities.push(singleEntity);\n         }\n      });\n\n      if (result.entities.length === 0) {\n         return null;\n      }\n\n      if (result.hasSingleEntityInside) {\n         const firstEntity: SingleIssueEntity = result.entities[0];\n         result.name = firstEntity.name;\n         result.icon = firstEntity.icon;\n      } else {\n      result.updateName(aggregatedIssue, performanceTypes);\n      result.icon = \"\";\n      }\n\n      return result;\n   }\n\n   /**\n    * Updates the entities name according to the other entities that it aggregates.\n    */\n   private updateName(aggregatedEntity: AggregatedDiagnosticIssueEntity,\n         performanceEntityTypes: {}): void {\n\n      if (!this.aggregatedRefIds || this.aggregatedRefIds.length === 0) {\n         this.name = \"\";\n      }\n\n      if (this.aggregatedRefIds.length === 1 && aggregatedEntity.metricIdLabel) {\n         const aggrregatedEntityName: string = AggregatedIssueEntity.getAggregatedEntityRefIdName(\n               this.aggregatedRefIds[0]);\n\n         if (aggregatedEntity.usingSingleMetricForAllEntities) {\n            // now get the user friendly name for this metricId label\n            const issue: SingleIssueEntity = this.entities[0] as SingleIssueEntity;\n            const vsanPerfEntityType: any = performanceEntityTypes[issue.refData.metricName];\n            const metric = vsanPerfEntityType.graphs.reduce((prev: any, current: any, currentIndex: number) => {\n               // The first index is 1. Create the new\n               // array on the first step of the reducing\n               if (currentIndex === 1) {\n                  return [].concat(prev.metrics, current.metrics);\n               } else {\n                  return prev.concat(current.metrics);\n               }\n            }).find((metric) => {\n               return metric.label === aggregatedEntity.metricIdLabel;\n            });\n\n            if (metric) {\n               this.name = VsanUiUtils.getString(\"vsan.perf.diagnostics.aggregatedEntityForMetric\",\n                     metric.name,\n                     aggrregatedEntityName);\n               return;\n            }\n         }\n      }\n\n      this.name = VsanUiUtils.getString(\"vsan.perf.diagnostics.aggregated.multiEntityAggregation\",\n            AggregatedIssueEntity.getAggregatedEntityRefIdName(this.aggregatedRefIds[0]),\n            AggregatedIssueEntity.getAggregatedEntityRefIdName(this.aggregatedRefIds[1]));\n   }\n\n   private static getAggregatedEntityRefIdName(aggregatedRefId: string): string {\n      let name: string;\n      switch (aggregatedRefId) {\n         case EntityRefType.DISK_GROUP():\n            name = VsanUiUtils.getString(\"vsan.perf.diagnostics.aggregated.diskGroup\");\n            break;\n         case EntityRefType.CLUSTER():\n            name = VsanUiUtils.getString(\"vsan.perf.diagnostics.aggregated.cluster\");\n            break;\n         case EntityRefType.CAPACITY_DISK():\n            name = VsanUiUtils.getString(\"vsan.perf.diagnostics.aggregated.capacityDisk\");\n            break;\n         case EntityRefType.HOST_DOMCOMPMGR():\n            name = VsanUiUtils.getString(\"vsan.perf.diagnostics.aggregated.hostDomCompMgr\");\n            break;\n         case EntityRefType.HOST_DOMCLIENT():\n            name = VsanUiUtils.getString(\"vsan.perf.diagnostics.aggregated.hostDomClient\");\n            break;\n         case EntityRefType.CLUSTER_DOMCLIENT():\n            name = VsanUiUtils.getString(\"vsan.perf.diagnostics.aggregated.clusterDomClient\");\n            break;\n         case EntityRefType.CACHE_DISK():\n            name = VsanUiUtils.getString(\"vsan.perf.diagnostics.aggregated.cacheDisk\");\n            break;\n         default:\n            name = aggregatedRefId;\n            break;\n      }\n      return name;\n   }\n}","/* Copyright 2020 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {NgModule} from \"@angular/core\";\nimport {VsanBreadcrumbNavComponent} from \"./vsan-breadcrumb-nav.component\";\nimport {ClarityModule} from \"@clr/angular\";\nimport {CommonModule} from \"@angular/common\";\nimport {CommonDirectiveModule} from \"@directive/common-directive.module\";\nimport {CommonPipeModule} from \"@pipe/common-pipe.module\";\n\n@NgModule({\n   imports: [CommonModule, ClarityModule, CommonDirectiveModule, CommonPipeModule],\n   declarations: [VsanBreadcrumbNavComponent],\n   exports: [\n      VsanBreadcrumbNavComponent,\n   ],\n})\nexport class VsanBreadcrumbModule {}\n","<clr-alert id=\"parent-issue-feedback\"\n           [clrAlertClosable]=\"false\"\n           [clrAlertType]=\"'info'\">\n   <clr-alert-item>\n      <span class=\"alert-text\">\n         <span id=\"feedback-ask\">\n            {{'vsan.cluster.monitor.performance.diagnostics.feedback.ask' | localized}}\n         </span>\n         <button class=\"btn btn-icon btn-link\"\n                 (click)=\"submitFeedback(true)\"\n                 [attr.aria-label]=\"'vsan.cluster.monitor.performance.diagnostics.feedback.thumbsUp'|localized\">\n            <clr-icon id=\"thumbs-up\"\n                      shape=\"thumbs-up\"\n                      size=\"23\"\n                      class=\"feedback-item\"\n                      [ngClass]=\"{'is-solid' : selectedIssue.feedback}\">\n            </clr-icon>\n         </button>\n         <button class=\"btn btn-icon btn-link\"\n                 (click)=\"submitFeedback(false)\"\n                 [attr.aria-label]=\"'vsan.cluster.monitor.performance.diagnostics.feedback.thumbsDown'|localized\">\n            <clr-icon id=\"thumbs-down\"\n                      shape=\"thumbs-down\"\n                      size=\"23\"\n                      class=\"feedback-item\"\n                      [ngClass]=\"{'is-solid' : selectedIssue.feedback === false}\">\n            </clr-icon>\n         </button>\n         <span id=\"feedback-acknowledgement\"\n               *ngIf=\"(selectedIssue.feedback !== undefined) && !feedbackError\"\n               class=\"feedback-item\">\n            {{'vsan.cluster.monitor.performance.diagnostics.feedback.acknowledgement' | localized}}\n         </span>\n         <span id=\"feedback-error\"\n               *ngIf=\"feedbackError\"\n               class=\"feedback-item\">\n            {{feedbackError}}\n         </span>\n         <span id=\"busy-spinner\" class=\"spinner spinner-inline\" *ngIf=\"feedbackSubmitting\"></span>\n      </span>\n   </clr-alert-item>\n</clr-alert>","/* Copyright 2017-2018 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {EntityRefData} from \"@generated/entity-ref-data\";\nimport {DiagnosticIssueEntity} from \"@generated/diagnostic-issue-entity\";\nimport {SingleDiagnosticIssueEntity} from \"@generated/single-diagnostic-issue-entity\";\nimport {DiagnosticIssue} from \"./diagnostics-issue.data\";\nimport {PerformanceObjectType} from \"@generated/performance-object-type\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {PerfEntityStateData} from \"@generated/perf-entity-state-data\";\nimport {Icon} from \"@util/icon\";\n\n/**\n * Presentation object for SingleDiagnosticIssueEntity class. Used in the issues grid.\n */\nexport class SingleIssueEntity {\n\n   icon: string;\n   name: string;\n   recommendation: string;\n   refData: EntityRefData;\n   vsanUuid: string;\n   metric: PerfEntityStateData;\n   isEntityMissing: boolean;\n   parentIssue: DiagnosticIssue;\n   feedback: boolean | undefined; // undefined - not set; true - thumbs up; false - thumbs down;\n\n   static create(entity: any, // SingleDiagnosticIssueEntity\n         entityRefIdToEntityRefDataMap: any, // A map containing entityRed id to entityRef data\n         issue: DiagnosticIssue) { // The parent issue\n      // Casting to two different types because the two interfaces\n      // don't extend each other.\n      const diagnosticIssue: DiagnosticIssueEntity = entity as DiagnosticIssueEntity;\n      const singleIssue: SingleDiagnosticIssueEntity = entity as SingleDiagnosticIssueEntity;\n\n      const result = new SingleIssueEntity();\n\n      if (entityRefIdToEntityRefDataMap.hasOwnProperty(singleIssue.entityRefId)) {\n         result.refData = entityRefIdToEntityRefDataMap[singleIssue.entityRefId] as EntityRefData;\n         result.vsanUuid = result.refData.vsanUuid;\n         result.icon = SingleIssueEntity.getIcon(result.refData);\n         result.name = SingleIssueEntity.getEntityName(result.refData, result.vsanUuid);\n         result.isEntityMissing = result.refData.isEntityMissing;\n      }\n\n      result.metric = singleIssue.metric;\n      result.recommendation = diagnosticIssue.recommendation;\n      result.parentIssue = issue;\n\n      return result;\n   }\n\n   static getIcon(refData: EntityRefData): string {\n      let icon: string = \"\";\n      if (refData.performanceObjectType == null) {\n         return icon;\n      }\n\n      switch (refData.performanceObjectType) {\n         case PerformanceObjectType.cacheDisk:\n            icon = Icon.VSAN_SSD_DISK_IMAGE;\n            break;\n         case PerformanceObjectType.capacityDisk:\n            icon = Icon.VSAN_NON_SSD_DISK_IMAGE;\n            break;\n         case PerformanceObjectType.diskGroup:\n            icon = Icon.DISK_GROUP_IMAGE;\n            break;\n         case PerformanceObjectType.hostBackend:\n         case PerformanceObjectType.hostVmConsumption:\n            icon = Icon.HOST;\n            break;\n      }\n      return icon;\n   }\n\n   private static getEntityName(refData: EntityRefData,\n         vsanUuid: string): string {\n      let objectName: string;\n      if (refData.performanceObjectType == null) {\n         return refData.entityRefId;\n      }\n      switch (refData.performanceObjectType) {\n         case PerformanceObjectType.hostPnic:\n            if (refData.isEntityMissing) {\n               objectName = VsanUiUtils.getString(\"vsan.perf.diagnostics.entityType.missingHostPnic\", vsanUuid);\n            } else {\n               objectName = VsanUiUtils.getString(\"vsan.perf.diagnostics.entityType.hostPnic\",\n                     refData.managedObjectName,\n                     refData.objectName);\n            }\n            break;\n         case PerformanceObjectType.hostVnic:\n            if (refData.isEntityMissing) {\n               objectName = VsanUiUtils.getString(\"vsan.perf.diagnostics.entityType.missingHostVnic\", vsanUuid);\n            } else {\n               // The VNIC comes prefixed by its TCP layer\n               // https://opengrok.eng.vmware.com/source/xref/storage-main.perforce.1666/bora/vsan/pyvmodl/VsanPerformanceManager.py#1549\n               let vnicName: string = refData.objectName;\n               if (refData.objectName) {\n                  vnicName = refData.objectName.split(\"|\").pop();\n               }\n               objectName = VsanUiUtils.getString(\"vsan.perf.diagnostics.entityType.hostVnic\",\n                     refData.managedObjectName,\n                     vnicName);\n            }\n            break;\n         case PerformanceObjectType.hostNet:\n            if (refData.isEntityMissing) {\n               objectName = VsanUiUtils.getString(\"vsan.perf.diagnostics.entityType.missingHostNet\", vsanUuid);\n            } else {\n               objectName = VsanUiUtils.getString(\"vsan.perf.diagnostics.entityType.hostNet\",\n                     refData.managedObjectName);\n            }\n            break;\n         case PerformanceObjectType.virtualDisk:\n            if (refData.isEntityMissing) {\n               objectName = VsanUiUtils.getString(\"vsan.perf.diagnostics.entityType.missingVmDisk\", vsanUuid);\n            } else {\n               objectName = VsanUiUtils.getString(\"vsan.perf.diagnostics.entityType.vmDisk\",\n                     refData.managedObjectName,\n                     refData.objectName);\n            }\n            break;\n         case PerformanceObjectType.cacheDisk:\n            if (refData.isEntityMissing) {\n               objectName = VsanUiUtils.getString(\"vsan.perf.diagnostics.entityType.missingCacheDisk\", vsanUuid);\n            } else {\n               objectName = VsanUiUtils.getString(\"vsan.perf.diagnostics.entityType.cacheDisk\",\n                     refData.managedObjectName,\n                     refData.objectName);\n            }\n            break;\n         case PerformanceObjectType.capacityDisk:\n            if (refData.isEntityMissing) {\n               objectName = VsanUiUtils.getString(\"vsan.perf.diagnostics.entityType.missingCapacityDisk\", vsanUuid);\n            } else {\n               objectName = VsanUiUtils.getString(\n                     \"vsan.perf.diagnostics.entityType.capacityDisk\",\n                     refData.managedObjectName,\n                     refData.objectName);\n            }\n            break;\n         case PerformanceObjectType.diskGroup:\n            if (refData.isEntityMissing) {\n               objectName = VsanUiUtils.getString(\"vsan.perf.diagnostics.entityType.missingDiskGroup\", vsanUuid);\n            } else {\n               objectName = VsanUiUtils.getString(\n                     \"vsan.perf.diagnostics.entityType.diskGroup\",\n                     refData.managedObjectName,\n                     refData.vsanUuid);\n            }\n            break;\n         case PerformanceObjectType.clusterBackend:\n            objectName = VsanUiUtils.getString(\n                  \"vsan.perf.diagnostics.entityType.vsanBackend\");\n            break;\n         case PerformanceObjectType.clusterVmConsumption:\n            objectName = VsanUiUtils.getString(\n                  \"vsan.perf.diagnostics.entityType.vsanVmConsumption\");\n            break;\n         case PerformanceObjectType.hostBackend:\n            if (refData.isEntityMissing) {\n               objectName = VsanUiUtils.getString(\"vsan.perf.diagnostics.entityType.missingHostVsanBackend\", vsanUuid);\n            } else {\n               objectName = VsanUiUtils.getString(\n                     \"vsan.perf.diagnostics.entityType.hostVsanBackend\",\n                     refData.managedObjectName);\n            }\n            break;\n         case PerformanceObjectType.hostVmConsumption:\n            if (refData.isEntityMissing) {\n               objectName = VsanUiUtils.getString(\n                     \"vsan.perf.diagnostics.entityType.missingHostVmConsumption\", vsanUuid);\n            } else {\n               objectName = VsanUiUtils.getString(\n                     \"vsan.perf.diagnostics.entityType.hostVmConsumption\", refData.managedObjectName);\n            }\n            break;\n         case PerformanceObjectType.vm:\n            if (refData.isEntityMissing) {\n               objectName = VsanUiUtils.getString(\n                     \"vsan.perf.diagnostics.entityType.missingVmVsanVmConsumption\", vsanUuid);\n            } else {\n               objectName = VsanUiUtils.getString(\n                     \"vsan.perf.diagnostics.entityType.vmVsanVmConsumption\", refData.managedObjectName);\n            }\n            break;\n         case PerformanceObjectType.vscsi:\n            if (refData.isEntityMissing) {\n               objectName = VsanUiUtils.getString(\"vsan.perf.diagnostics.entityType.missingVscsi\", vsanUuid);\n            } else {\n               objectName = VsanUiUtils.getString(\"vsan.perf.diagnostics.entityType.vscsi\",\n                     refData.managedObjectName,\n                     refData.objectName);\n            }\n            break;\n         case PerformanceObjectType.cmmds:\n            objectName = refData.managedObjectName;\n            break;\n         case PerformanceObjectType.clomDiskStats:\n            objectName = refData.managedObjectName;\n            break;\n         case PerformanceObjectType.clomHostStats:\n            objectName = refData.managedObjectName;\n            break;\n         case PerformanceObjectType.clusterDomOwner:\n            objectName = refData.managedObjectName;\n            break;\n      }\n      if (!objectName) {\n         objectName = refData.entityRefId;\n      }\n      if (refData.isEntityMissing) {\n         objectName = VsanUiUtils.getString(\"vsan.perf.diagnostics.missingEntityFormat\",\n               objectName);\n      }\n      return objectName;\n   }\n}","/* Copyright 2017 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {DiagnosticException} from \"@generated/diagnostic-exception\";\nimport {DiagnosticIssueEntity} from \"@generated/diagnostic-issue-entity\";\nimport {AggregatedDiagnosticIssueEntity} from \"@generated/aggregated-diagnostic-issue-entity\";\nimport {SingleDiagnosticIssueEntity} from \"@generated/single-diagnostic-issue-entity\";\nimport {SingleIssueEntity} from \"./single-issue-entity.data\";\nimport {AggregatedIssueEntity} from \"./aggregated-entity.data\";\n\n/**\n * Presentation object for DiagnosticsException class. Used in the issues grid.\n */\nexport class DiagnosticIssue {\n\n   public name: string;\n   public description: string;\n   public helpUrl: string;\n   public issues: any[];\n   private diagnosticException: DiagnosticException;\n\n   public constructor(diagnosticException: DiagnosticException,\n                      exceptionDefinition: any) { //PerformanceDiagnosticException\n      this.diagnosticException = diagnosticException;\n      this.name = exceptionDefinition.message;\n      this.description = exceptionDefinition.description;\n      this.helpUrl = exceptionDefinition.exceptionUrl;\n      this.issues = [];\n   }\n\n   public addEntities(performanceEntityTypes: Object, entityRefIdToEntityRefDataMap: Object): void {\n      let issueEntities: any[] = [];\n\n      this.diagnosticException.exceptionEntities.forEach((entity: DiagnosticIssueEntity) => {\n         if ('aggregatedRefIds' in entity) {\n            // AgregatedDiagnosticIssueEntity\n            this.addAggregatedIssueEntity(entity, performanceEntityTypes, entityRefIdToEntityRefDataMap);\n         } else {\n            // SingleDiagnosticIssueEntity\n            this.addSingleIssueEntity(entity, entityRefIdToEntityRefDataMap);\n         }\n      });\n   }\n\n   private addAggregatedIssueEntity(entity: any,\n                                    performanceEntityTypes: Object,\n                                    entityRefIdToEntityRefDataMap: Object): void {\n      let aggregatedIssueEntity: AggregatedDiagnosticIssueEntity = entity as AggregatedDiagnosticIssueEntity;\n      let aggregatedEntity: AggregatedIssueEntity = AggregatedIssueEntity.create(aggregatedIssueEntity,\n            performanceEntityTypes,\n            entityRefIdToEntityRefDataMap,\n            this);\n      if (aggregatedEntity) {\n         this.issues.push(aggregatedEntity);\n      }\n   }\n\n   private addSingleIssueEntity(entity: any, entityRefIdToEntityRefDataMap: Object): void {\n      let singleIssueEntity: SingleDiagnosticIssueEntity = entity as SingleDiagnosticIssueEntity;\n\n      let singleEntity: SingleIssueEntity = SingleIssueEntity.create(singleIssueEntity, entityRefIdToEntityRefDataMap, this);\n      if (singleEntity) {\n         this.issues.push(singleEntity);\n      }\n   }\n}","\nexport interface FeedbackSpec {\n\n   transactionId: string;\n   exceptionId: string;\n   entityRefId: string;\n} //class FeedbackSpec\n\nexport module FeedbackSpec{\nexport class Factory {\n\n   static create = (transactionId: string, exceptionId: string, entityRefId: string): FeedbackSpec => {\n      return { transactionId: transactionId, exceptionId: exceptionId, entityRefId: entityRefId, };\n   }\n\n\n} //class Factory\n\n} //module FeedbackSpec\n","/* Copyright 2018 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, EventEmitter, Input, Output} from \"@angular/core\";\nimport {ManagedObject} from \"@service/managed-object\";\nimport {PerformanceDiagnosticsPropertyProvider} from \"@generated/performance-diagnostics-property-provider\";\nimport {Logger} from \"@util/logger\";\nimport {FeedbackSpec} from \"@generated/feedback-spec\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\n\n@Component({\n   templateUrl: \"performance-diagnostics-feedback.html\",\n   styleUrls: [\"performance-diagnostics-feedback.scss\"],\n   selector: \"vsan-performance-diagnostics-feedback\",\n})\n\nexport class PerformanceDiagnosticsFeedbackComponent {\n\n   feedbackSubmitting: boolean = false;\n   feedbackError: string = null;\n\n   @Input()\n   set selectedIssue(val: any) {\n      if (this._selectedIssue === val) {\n         return;\n      }\n      this.feedbackError = null;\n      this._selectedIssue = val;\n   }\n\n   get selectedIssue(){\n      return this._selectedIssue;\n   }\n\n   private _selectedIssue: any;\n\n   @Input()\n   clusterRef: ManagedObject;\n\n   @Input()\n   transactionId: string;\n\n   @Output()\n   feedbackSubmit: EventEmitter<boolean> = new EventEmitter();\n\n   constructor(private perfDiagnosticsProvider: PerformanceDiagnosticsPropertyProvider) {\n   }\n\n   async submitFeedback(feedbackValue: boolean) {\n      if (this.selectedIssue.feedback !== feedbackValue) {\n         this.feedbackSubmitting = true;\n\n         try {\n            const exceptionId: string = this.selectedIssue.parentIssue.diagnosticException.exceptionId;\n            const entityRefId: string = this.selectedIssue.refData.entityRefId;\n            const feedbackSpec: FeedbackSpec = FeedbackSpec.Factory.create(this.transactionId, exceptionId, entityRefId);\n            await this.perfDiagnosticsProvider.submitFeedbackForDiagnosisResult(\n                  this.clusterRef, feedbackSpec, feedbackValue);\n            this.feedbackError = null;\n            this.feedbackSubmit.emit(feedbackValue);\n            this.feedbackSubmitting = false;\n         } catch(e) {\n            this.handleError(VsanUiUtils.getString(\"vsan.cluster.monitor.performance.diagnostics.feedback.error\"));\n         }\n      }\n   }\n\n   handleError = (error: any) => {\n      Logger.error(error);\n      this.feedbackError = error;\n      this.feedbackSubmitting = false;\n   };\n}\n","/* Copyright 2019-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {NgModule} from \"@angular/core\";\nimport {CommonModule} from \"@angular/common\";\nimport {FormsModule} from \"@angular/forms\";\nimport {ClarityModule} from \"@clr/angular\";\nimport {ValidationModule} from \"@component/validation/validation.module\";\nimport {CommonPipeModule} from \"@pipe/common-pipe.module\";\nimport {CommonDirectiveModule} from \"@directive/common-directive.module\";\nimport {HealthStatusCell} from \"@component/cell/health-status-cell.component\";\nimport {LabelCell} from \"@component/cell/label-cell.component\";\nimport {StoragePolicyCell} from \"@component/cell/storage-policy-cell.component\";\nimport {MorCell} from \"@component/cell/mor-cell.component\";\nimport {IconItemComponent} from \"@component/cell/icon-item.component\";\nimport {HealthStateItemComponent} from \"@component/cell/health-state-item.component\";\nimport {ListCell} from \"@component/cell/list-cell.component\";\nimport {PspHealthStateItemComponent} from \"@component/cell/psp-health-state-item.component\";\nimport {HealthTestValueComponent} from \"@component/cell/health-test-value.component\";\nimport {HealthLinkCellComponent} from \"@component/cell/health-link-cell.component\";\nimport {HealthMorCellComponent} from \"@component/cell/health-mor-cell.component\";\n\n@NgModule({\n   imports: [\n      CommonModule,\n      FormsModule,\n      ClarityModule,\n      ValidationModule,\n      CommonPipeModule,\n      CommonDirectiveModule,\n   ],\n   // TODO: (vasilevd) Move health specific components to a separate common health module\n   declarations: [\n      HealthStatusCell,\n      HealthTestValueComponent,\n      LabelCell,\n      StoragePolicyCell,\n      MorCell,\n      HealthMorCellComponent,\n      ListCell,\n      IconItemComponent,\n      HealthStateItemComponent,\n      PspHealthStateItemComponent,\n      HealthLinkCellComponent,\n   ],\n   exports: [\n      HealthStatusCell,\n      HealthTestValueComponent,\n      LabelCell,\n      StoragePolicyCell,\n      MorCell,\n      HealthMorCellComponent,\n      ListCell,\n      IconItemComponent,\n      HealthStateItemComponent,\n      PspHealthStateItemComponent,\n      HealthLinkCellComponent,\n   ],\n})\nexport class CommonCellsModule {\n}\n","/* Copyright 2019-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {NgModule} from \"@angular/core\";\nimport {CommonModule} from \"@angular/common\";\nimport {FormsModule} from \"@angular/forms\";\nimport {ClarityModule} from \"@clr/angular\";\nimport {CommonPipeModule} from \"@pipe/common-pipe.module\";\nimport {InventoryBrowserComponent} from \"@component/inventory/inventory-browser.component\";\nimport {InventoryNodeComponent} from \"@component/inventory/inventory-node.component\";\nimport {WitnessCandidateInventoryService} from \"@generated/witness-candidate-inventory-service\";\nimport {DatacenterInventoryService} from \"@generated/datacenter-inventory-service\";\nimport {NetworkInventoryService} from \"@generated/network-inventory-service\";\nimport {ComputeInventoryService} from \"@generated/compute-inventory-service\";\nimport {IoInsightInventoryService} from \"@generated/io-insight-inventory-service\";\nimport {SearchModule} from \"@component/search/search.module\";\nimport {TreeNodeComponent} from \"@component/inventory/tree-view/tree-node.component\";\nimport {TreeViewComponent} from \"@component/inventory/tree-view/tree-view.component\";\nimport {DropdownObjectSelectorComponent} from \"@component/inventory/dropdown-object-selector/dropdown-object-selector.component\";\nimport {CommonDirectiveModule} from \"@directive/common-directive.module\";\nimport {InventoryNodesComponent} from \"@component/inventory/inventory-nodes.component\";\nimport {TreeNodesComponent} from \"@component/inventory/tree-view/tree-nodes.component\";\n\n@NgModule({\n   imports: [\n      CommonModule,\n      FormsModule,\n      ClarityModule,\n      CommonPipeModule,\n      SearchModule,\n      CommonDirectiveModule,\n   ],\n   declarations: [\n      InventoryBrowserComponent,\n      InventoryNodesComponent,\n      InventoryNodeComponent,\n      TreeNodeComponent,\n      TreeNodesComponent,\n      TreeViewComponent,\n      DropdownObjectSelectorComponent,\n   ],\n   exports: [\n      InventoryBrowserComponent,\n      DropdownObjectSelectorComponent,\n      TreeViewComponent,\n   ],\n   providers: [\n      WitnessCandidateInventoryService,\n      DatacenterInventoryService,\n      NetworkInventoryService,\n      ComputeInventoryService,\n      IoInsightInventoryService,\n   ],\n})\nexport class InventoryBrowserModule {\n}","export enum PerfDiagnosticType {\n   eval = \"eval\",\n   tput = \"tput\",\n   iops = \"iops\",\n   lat = \"lat\",\n}\n","/* Copyright 2017 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, Input, Output, EventEmitter} from \"@angular/core\";\nimport {TreeDatagridView} from \"../../common/component/datagrid/tree-datagrid-view\";\nimport {ResyncComponent} from \"@generated/resync-component\";\nimport {DiagnosticIssue} from \"../model/diagnostics-issue.data\";\nimport ResyncReasonCode = ResyncComponent.ResyncReasonCode;\nimport {TreeDatagridRow} from \"../../common/component/datagrid/tree-datagrid\";\n\n@Component({\n   templateUrl: 'issues-list.html',\n   selector: 'vsan-issues-list',\n   styleUrls: ['issues-list.scss'],\n})\nexport class IssuesListComponent extends TreeDatagridView {\n\n   @Input()\n   public set data(data: DiagnosticIssue[]) {\n      this.initData(data);\n   }\n\n   @Input()\n   public loading: boolean;\n\n   @Output()\n   public selectIssue:EventEmitter<DiagnosticIssue> = new EventEmitter();\n\n   constructor() {\n      super(\"issues\");\n   };\n\n   public onRowSelected(target: TreeDatagridRow, event: any):void {\n      super.selectTarget(target, event);\n      this.selectIssue.emit(target.data)\n   }\n}","/* Copyright 2019 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {NgModule} from \"@angular/core\";\nimport {CommonDirectiveModule} from \"@directive/common-directive.module\";\nimport {CommonPipeModule} from \"@pipe/common-pipe.module\";\nimport {ValidationModule} from \"@component/validation/validation.module\";\nimport {ActionButtonModule} from \"@component/action-button/action-button.module\";\nimport {PromptModule} from \"@component/dialog/prompt/prompt.module\";\nimport {CommonCellsModule} from \"@component/cell/common-cells.module\";\nimport {InventoryBrowserModule} from \"@component/inventory/inventory-browser.module\";\nimport {SearchModule} from \"@component/search/search.module\";\nimport {TreeDatagridModule} from \"@component/datagrid/tree-datagrid.module\";\nimport {DatetimePickerModule} from \"@component/datetime-picker/datetime-picker.module\";\nimport {PopupListModule} from \"@component/popup-list/popup-list.module\";\nimport {VsanBreadcrumbModule} from \"@component/navigation/vsan-breadcrumb.module\";\n\n@NgModule({\n   imports: [\n         CommonDirectiveModule,\n         CommonPipeModule,\n         ValidationModule,\n         ActionButtonModule,\n         PromptModule,\n         CommonCellsModule,\n         InventoryBrowserModule,\n         SearchModule,\n         TreeDatagridModule,\n         DatetimePickerModule,\n         PopupListModule,\n         VsanBreadcrumbModule,\n   ],\n   exports: [\n      CommonDirectiveModule,\n      CommonPipeModule,\n      ValidationModule,\n      ActionButtonModule,\n      PromptModule,\n      CommonCellsModule,\n      InventoryBrowserModule,\n      SearchModule,\n      TreeDatagridModule,\n      DatetimePickerModule,\n      PopupListModule,\n      VsanBreadcrumbModule,\n   ],\n})\nexport class VsanCommonModule { }","/* Copyright 2019 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {NgModule} from \"@angular/core\";\nimport {CommonModule} from \"@angular/common\";\nimport {FormsModule} from \"@angular/forms\";\nimport {ClarityModule} from \"@clr/angular\";\nimport {CommonPipeModule} from \"@pipe/common-pipe.module\";\nimport {SearchComponent} from \"@component/search/search.component\";\n\n@NgModule({\n   imports: [\n      CommonModule,\n      FormsModule,\n      ClarityModule,\n      CommonPipeModule\n   ],\n   declarations: [\n      SearchComponent\n   ],\n   exports: [\n      SearchComponent\n   ],\n})\nexport class SearchModule {\n}\n","/* Copyright 2019-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {NgModule} from \"@angular/core\";\nimport {CommonModule} from \"@angular/common\";\nimport {ClarityModule} from \"@clr/angular\";\nimport {ActionButtonSeparatorComponent} from \"@component/action-button/action-button-separator.component\";\nimport {ButtonTitleDirective} from \"@component/action-button/button-title.directive\";\nimport {ButtonGroupDirective} from \"@component/action-button/button-group.directive\";\nimport {ButtonGroupWrapDirective} from \"@component/action-button/button-group-wrap.directive\";\n\n@NgModule({\n   imports: [\n      CommonModule,\n      ClarityModule,\n   ],\n   declarations: [\n      ActionButtonSeparatorComponent,\n      ButtonGroupDirective,\n      ButtonGroupWrapDirective,\n      ButtonTitleDirective,\n   ],\n   exports: [\n      ActionButtonSeparatorComponent,\n      ButtonGroupDirective,\n      ButtonGroupWrapDirective,\n      ButtonTitleDirective,\n   ]\n})\nexport class ActionButtonModule {\n}\n"],"sourceRoot":"webpack:///"}