{"version":3,"sources":["webpack:///src/app/vsan/common/directive/clr-button-group/clr-button-base.directive.ts","webpack:///src/app/vsan/common/directive/signpost-title/signpost-title.directive.ts","webpack:///src/app/vsan/common/component/datagrid/tree-datagrid.module.ts","webpack:///src/app/vsan/common/service/navigation/model/knowledge-base-id.ts","webpack:///src/app/vsan/common/util/modal-builder.ts","webpack:///src/app/vsan/proactivetests/view/test-details.component.ts","webpack:///src/app/vsan/common/component/popup-list/popup-list.module.ts","webpack:///src/app/vsan/proactivetests/view/run-test-dialog.component.ts","webpack:///src/app/vsan/common/component/navigation/vsan-breadcrumb.module.ts","webpack:///src/app/vsan/proactivetests/view/run-test-dialog.html","webpack:///src/app/vsan/common/component/unavailable-view/unavailable-view.module.ts","webpack:///src/app/vsan/common/component/inventory/tree-view/tree-node.ts","webpack:///src/app/vsan/common/util/vsan-dialog-util.ts","webpack:///src/app/vsan/common/component/cell/common-cells.module.ts","webpack:///src/app/vsan/proactivetests/view/proactive-tests.component.ts","webpack:///src/app/vsan/proactivetests/proactive-tests.module.ts","webpack:///src/app/vsan/proactivetests/model/proactive-test-result.ts","webpack:///src/app/vsan/proactivetests/view/test-details.html","webpack:///src/app/vsan/proactivetests/view/proactive-tests.html","webpack:///src/app/vsan/common/directive/external-link/external-link.directive.ts","webpack:///src/app/vsan/common/vsan-common.module.ts","webpack:///src/app/vsan/common/component/action-button/action-button.module.ts"],"names":["ClrButtonBaseDirective","clrButton","name","Math","random","toString","directiveHolder","directives","push","SignpostTitleDirective","el","renderer","BUTTON_TAG_NAME","CLR_ICON_TAG_NAME","TITLE_ATTRIBUTE","ARIA_EXPANDED_ATTRIBUTE","ARIA_LABEL_ATTRIBUTE","signpostTitle","signpostIcon","nativeElement","getElementsByTagName","item","setAttribute","getString","button","TreeDatagridModule","KnowledgeBaseId","ModalBuilder","appId","size","DEFAULT_SIZE","title","accessibilityTitle","urlParams","dimensions","length","warn","setSize","WIDTH","HEIGHT","width","height","params","eventTarget","context","Promise","accept","pluginContext","targetElement","event","target","modalResultHandler","data","JSON","parse","stringify","focus","setTimeout","actionUrl","APP_URL","separator","param","openModalDialog","contextObjectUid","WIZARD_XL","repa","repaExtension","TestDetailsComponent","VsanUiUtils","VsanHealthUtil","DEFAULT_ITEMS_PER_PAGE","_detailsArray","isEmpty","map","index","rows","detailsArray","cellValue","yellow","green","red","PopupListModule","RunTestDialogComponent","capabilityProvider","perfPropertyProvider","perfMutationProvider","csdService","loading","onOkClicked","perfEnabled","perfSetting","serviceEnabled","networkDiagnosticsModeAllowed","turnOnNetworkDiagnosticMode","networkDiagnosticModeEnabled","perfSpec","Factory","create","contextObject","spbmProfileUuid","verboseModeEnabled","editPerfConfiguration","then","closeModalDialog","err","errorMessage","selectedTest","getModalContext","dialogTitle","type","PerfTestType","vmCreation","unicast","dialogQuestion","dialogContent","setModalDialogHeight","all","getPerfStatsInfo","getClusterCapabilityData","isComputeOnlyCluster","clusterCapabilityData","determineNetworkDiagnosticsModeStatus","isPerfDiagnosticModeSupported","MODAL_NON_NETWORK_DIAGNOSTICS_HEIGHT","VsanBreadcrumbModule","UnavailableViewModule","TreeNode","objectInfo","nodes","onClrSelectedStateChange","_clrSelectedState","UNSELECTED","isExpanded","children","_childNodes","value","clrSelectedState","SELECTED","VsanDialogUtil","CAPACITY_MANAGEMENT_DIALOG","DELETE_VOLUME_DIALOG","MIGRATE_VOLUME_DIALOG","REAPPLY_VOLUME_POLICY_DIALOG","DUPLICATE_PCI_ID_MODEL_SELECTION_DIALOG","HEALTH_RESTORE_ACTION_DIALOG","CLUSTER_POWER_ON_DIALOG","VM_IO_DIAGNOSTICS_METRICS_DIALOG","VM_IO_DIAGNOSTICS_LATENCY_DIALOG","VM_IO_DIAGNOSTICS_DOM_OWNER_LATENCY_DIALOG","PERF_SVC_EDIT_ACTION_DIALOG","PERF_SVC_ENABLE_ACTION_DIALOG","CLAIM_DISKS_ACTION_DIALOG","VSAN_DISK_CLAIM_ACTION_DIALOG","VsanDialogProperties","CommonCellsModule","ProactiveTestsComponent","proactiveTestsService","permissionService","taskMonitorService","HCIBENCH_SITE","COMMUNITY_SITE","TIMEOUT","runningTests","Set","loadingTests","showReload","hasEditPermissions","testTypeToResultMap","Map","testTypeToDatastoreObjectInfoMap","isCsdSupported","onCatch","error","alertMessage","runTestSucceeded","result","dataStoreRef","getRunningTestData","perfTestType","areEqual","getSelectedDatastoreRef","handleSingleTestResult","set","runTestFailed","testType","fetch","hasPermissions","EDIT_CLUSTER","getMountedDatastores","mountedDatastores","filter","ds","shareableDatastore","serverCluster","isLocal","datastoreTreeNodes","getDatastoreTreeNodes","unavailableView","PROACTIVE_TESTS_NO_DATASTORE","getAllTestResults","selectedDatastoreRef","datastore","moRef","selectedServerClusterRef","getProactiveTestResults","results","handleAllTestResults","selectedDatastoreObjectInfo","forEach","srOnlyMessage","isRunningTest","isLoadingTest","displayTestDetailsSpinner","getActionTitle","some","open","runTest","add","getVMCreationTestResult","isNetworkTestAgainstLocalCluster","isTestMulticast","multicast","getNetworkPerfTestResult","startNetworkPerfTestTask","getSelectedServerClusterRef","task","handleNetworkTestTask","datastoreRef","getAwaitResult","getLastNetworkTestResult","networkTestData","mountedDatastore","getSelectedMountedRemoteDatastore","has","RUNNING_TEST_KEY_SEPARATOR","get","objectInfos","fetchLastTestResult","getLastVmCreationTestResult","vmCreationTestResult","loadTestSucceeded","networkTestResult","testResult","status","find","mountedDs","clonedDS","deepClone","proactiveTestsRoutes","path","component","ProactiveTestsModule","ProactiveTestResult","model","tooltip","timestampLabel","formatDate","timestamp","generalData","description","testDescription","statusLabel","instances","details","detail","testData","id","ExternalLinkDirective","resolver","navigationService","ASK_VMWARE_DEFAULT_TEXT_KEY","LEARN_MORE_DEFAULT_TEXT_KEY","CONTAINER_CLASS","NAVIGATION_EVENT_TYPE","LEAD_TO_NOWHERE_URL","HTML_ELEMENT_SPAN_NAME","HTML_ELEMENT_ICON_NAME","HTML_ELEMENT_ROLE_ATTR_NAME","HTML_ELEMENT_ROLE_ATTR_VALUE","ICON_SHAPE_ATTR_NAME","ICON_SHAPE_ATTR_VALUE","ICON_SIZE_ATTR_NAME","ICON_SIZE_ATTR_VALUE","ICON_CLASS_ATTR_NAME","ICON_CLASS_ATTR_VALUE","ICON_TITLE_ATTR_NAME","KB_URL","element","isLink","isButton","prepareExternalLink","addClass","setText","decorateLink","addLinkRole","initializeNavigationHandler","HTMLButtonElement","HTMLAnchorElement","span","createElement","innerText","getText","appendChild","icon","anchorText","key","linkElement","href","style","display","addEventListener","helpId","askVMware","articleId","navigateToAddress","url","VsanCommonModule","ActionButtonModule"],"mappings":"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","file":"113-es5.js","sourcesContent":["/* Copyright 2020 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {ClrButton} from \"@clr/angular\";\n\n/**\n * Use this class as base class for directive, which handles clr-button. It will help to link the rendered button with\n * the clr-button on which the directive is applied.\n */\nexport abstract class ClrButtonBaseDirective {\n\n   constructor(private clrButton: ClrButton) {\n      if (!clrButton) {\n         return;\n      }\n      // name should be set, if not provided in template - generate one. ClrButtom#name is used to generate the name\n      // attribute of the markup button. Later the name is used to match the generated markup with the directive.\n      if (!clrButton.name) {\n         clrButton.name = Math.random().toString();\n      }\n\n      const directiveHolder: DirectiveHolder = (clrButton as DirectiveHolder);\n      directiveHolder.directives = directiveHolder.directives || [];\n      directiveHolder.directives.push(this);\n   }\n\n   /**\n    * This method will be called when the actual html button is rendered.\n    */\n   abstract resolveButton(clrButton: ClrButton, button: HTMLButtonElement, index: number);\n}\n\nexport interface DirectiveHolder extends ClrButton {\n   directives: ClrButtonBaseDirective[];\n}","/* Copyright 2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {AfterViewInit, Directive, ElementRef, Input, Renderer2} from \"@angular/core\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\n\n/**\n * Attribute directive for setting a custom title to the clr-icon inside a clr-signpost.\n * It also adds aria-label with the same value and aria-expanded=\"false\" to the button, holding the icon.\n * Used for changing the title when a clr-icon is not explicitly added inside a clr-signpost.\n */\n@Directive({\n   selector: \"clr-signpost\",\n})\nexport class SignpostTitleDirective implements AfterViewInit {\n   private readonly BUTTON_TAG_NAME: string = \"button\";\n   private readonly CLR_ICON_TAG_NAME: string = \"clr-icon\";\n\n   private readonly TITLE_ATTRIBUTE: string = \"title\";\n   private readonly ARIA_EXPANDED_ATTRIBUTE: string = \"aria-expanded\";\n   private readonly ARIA_LABEL_ATTRIBUTE: string = \"aria-label\";\n\n   @Input(\"vsan-signpost-title\")\n   signpostTitle: string;\n\n   constructor(private el: ElementRef<HTMLElement>,\n         private renderer: Renderer2) {\n   }\n\n   ngAfterViewInit(): void {\n      if (!this.signpostTitle) {\n         return;\n      }\n\n      const signpostIcon: Element = this.el.nativeElement.getElementsByTagName(this.CLR_ICON_TAG_NAME).item(0);\n      if (signpostIcon) {\n         this.renderer.setAttribute(signpostIcon, this.TITLE_ATTRIBUTE, VsanUiUtils.getString(this.signpostTitle));\n      }\n      const button: Element = this.el.nativeElement.getElementsByTagName(this.BUTTON_TAG_NAME).item(0);\n      if (button) {\n         this.renderer.setAttribute(button, this.ARIA_EXPANDED_ATTRIBUTE, \"false\");\n         this.renderer.setAttribute(button, this.ARIA_LABEL_ATTRIBUTE, VsanUiUtils.getString(this.signpostTitle));\n      }\n   }\n}\n","/* Copyright 2019-2020 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {NgModule} from \"@angular/core\";\nimport {CommonModule} from \"@angular/common\";\nimport {FormsModule} from \"@angular/forms\";\nimport {ClarityModule} from \"@clr/angular\";\nimport {ValidationModule} from \"@component/validation/validation.module\";\nimport {CommonPipeModule} from \"@pipe/common-pipe.module\";\nimport {TreeExpanderComponent} from \"@component/datagrid/tree-expander.component\";\nimport {TreeColumnComponent} from \"@component/datagrid/tree-column.component\";\nimport {EnumeratedFilterComponent} from \"./filter/enumerated-filter.component\";\nimport {EnumeratedFilterItemComponent} from \"./filter/enumerated-filter-item.component\";\nimport {EnumFilterComponent} from \"@component/datagrid/filter/enum-filter.component\";\n\n@NgModule({\n   imports: [\n      CommonModule,\n      FormsModule,\n      ClarityModule,\n      ValidationModule,\n      CommonPipeModule,\n   ],\n   declarations: [\n      TreeColumnComponent,\n      TreeExpanderComponent,\n      EnumeratedFilterComponent,\n      EnumeratedFilterItemComponent,\n      EnumeratedFilterComponent,\n      EnumFilterComponent,\n   ],\n   exports: [\n      TreeColumnComponent,\n      TreeExpanderComponent,\n      EnumeratedFilterComponent,\n      EnumeratedFilterItemComponent,\n      EnumFilterComponent,\n   ],\n})\nexport class TreeDatagridModule {\n}\n","/* Copyright 2021 VMware, Inc. All rights reserved. -- VMware Confidential */\n/**\n * IDs used in external KB link navigation\n */\nexport enum KnowledgeBaseId {\n   PRECHECK_PCP = \"83954\",\n   VIRTUAL_OBJECTS = \"2108319\",\n   UPGRADE = \"2148493\",\n   PERFORMANCE_DIAGNOSTICS = \"2148770\",\n   SUPPORT_INSIGHT = \"60206\",\n}\n","/* Copyright 2017-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {environment} from \"@env/environment\";\nimport {ManagedObject} from \"@service/managed-object\";\nimport {Logger} from \"./logger\";\nimport {WebPlatform} from \"./platform\";\nimport {VsanUiUtils} from \"./vsan-util\";\n\nexport class ModalBuilder {\n\n   static readonly WIDTH: number = 0;\n   static readonly HEIGHT: number = 1;\n\n   static readonly DEFAULT_SIZE: number[] = [1000, 530];\n   static readonly WIZARD_XL: number[] = [1200, 700];\n\n   static readonly APP_URL: string = (environment.repa && environment.repaExtension)\n         ? \"index.html\"\n         : \"/ui/h5-vsan-ui/\";\n\n   private size: number[] = ModalBuilder.DEFAULT_SIZE;\n\n   // When null, the modal dialog will be headless and the docked\n   // view is expected to provide a title bar.\n   private title: string = null;\n\n   private accessibilityTitle: string = null;\n\n   private urlParams: any = {};\n\n   private eventTarget: EventTarget;\n\n   constructor(private appId: string) {\n   }\n\n   setDimensions(dimensions: number[]): ModalBuilder {\n      if (!dimensions || dimensions.length !== 2) {\n         Logger.warn(\"invalid modal dimensions\", dimensions);\n         dimensions = ModalBuilder.DEFAULT_SIZE;\n      }\n      return this.setSize(dimensions[ModalBuilder.WIDTH], dimensions[ModalBuilder.HEIGHT]);\n   }\n\n   setSize(width: number, height: number): ModalBuilder {\n      this.size = [width, height];\n      return this;\n   }\n\n   setUrlParameters(params: any): ModalBuilder {\n      this.urlParams = params;\n      return this;\n   }\n\n   /**\n    * Set to null if the view provides its own title bar\n    */\n   setTitle(title: string): ModalBuilder {\n      this.title = title;\n      return this;\n   }\n\n   setAccessibilityTitle(accessibilityTitle: string): ModalBuilder {\n      this.accessibilityTitle = accessibilityTitle;\n      return this;\n   }\n\n   /**\n    * Set explicit event target if it is changed before opening the modal.\n    * For example when making a preceding request the event target is the XMLHttpRequest object.\n    */\n   setEventTarget(eventTarget: EventTarget): ModalBuilder {\n      this.eventTarget = eventTarget;\n      return this;\n   }\n\n   /**\n    * Opens a modal dialog and returns a promise to collect the result; On close the target element is focused.\n    * @param context - any JS data object, can be retrieved by WebPlatform.getModalContext()\n    * @returns {Promise<any>} - Invoked if the dialog invokes WebPlatform.closeModalDialog(arg)\n    *       with non-null arg. The promise is never rejected.\n    */\n   open(context?: any): Promise<any> {\n      return new Promise<any>((accept) => {\n         VsanUiUtils.pluginContext.targetElement = this.eventTarget ? this.eventTarget :\n               (event && event.target ? event.target : null);\n         VsanUiUtils.pluginContext.modalResultHandler = (data?: any) => {\n            if (typeof data !== \"undefined\") {\n               // Deep copy of the object was required to resolve an issue with object's prototype overriding when\n               // passing complex objects in IE11/Edge; Keep it for safety.\n               accept(JSON.parse(JSON.stringify(data)));\n            } else if (VsanUiUtils.pluginContext.targetElement && VsanUiUtils.pluginContext.targetElement.focus) {\n               // On cancel just focus the target element. Timeout is required as otherwise the focus may be\n               // consumed by the mouse click.\n               setTimeout(() => VsanUiUtils.pluginContext.targetElement.focus(), 100);\n            }\n         };\n\n         let actionUrl: string = `${ModalBuilder.APP_URL}?viewId=${this.appId}`;\n\n         let separator: string = \"?\";\n         for (const param in this.urlParams) {\n            actionUrl += separator + param + \"=\" + this.urlParams[param];\n            separator = \"&\";\n         }\n\n         WebPlatform.openModalDialog(this.title,\n               actionUrl,\n               ManagedObject.contextObjectUid,\n               this.size[0], this.size[1],\n               this.title != null,\n               VsanUiUtils.pluginContext.modalResultHandler /* onClose */,\n               context /* retrieve with Platform.getModalContext() */,\n               this.accessibilityTitle);\n      });\n   }\n\n}\n","/* Copyright 2020-2022 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, Input} from \"@angular/core\";\nimport {VsanTestTable} from \"@generated/vsan-test-table\";\nimport {VsanHealthUtil} from \"@util/vsan-health-util\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {VsanHealthStatus} from \"@generated/vsan-health-status\";\nimport {VsanTestRow} from \"@generated/vsan-test-row\";\n\n@Component({\n   templateUrl: \"test-details.html\",\n   selector: \"vsan-tests-details\",\n   styleUrls: [\"test-details.scss\"],\n})\nexport class TestDetailsComponent {\n   VsanUiUtils: typeof VsanUiUtils = VsanUiUtils;\n   VsanHealthUtil: typeof VsanHealthUtil = VsanHealthUtil;\n   readonly DEFAULT_ITEMS_PER_PAGE: number = 10;\n\n   private _detailsArray: VsanTestTable[];\n\n   @Input()\n   loading: boolean;\n\n   @Input()\n   set detailsArray(data: VsanTestTable[]) {\n      if (VsanUiUtils.isEmpty(data)) {\n         this._detailsArray = [];\n         return;\n      }\n      if (VsanUiUtils.isEmpty(this._detailsArray)) {\n         this._detailsArray = data;\n         return;\n      }\n      this._detailsArray.map((item, index) => {\n         item.rows = data[index].rows;\n      });\n   }\n\n   get detailsArray(): VsanTestTable[] {\n      return this._detailsArray;\n   }\n\n   get testResults(): VsanTestRow[] {\n      return VsanUiUtils.isEmpty(this.detailsArray) ? null : this.detailsArray[0].rows;\n   }\n\n   getHealthStatusLabel(cellValue: any): string {\n      switch (cellValue) {\n         case VsanHealthStatus.yellow:\n            return VsanUiUtils.getString(\"vsan.health.monitor.proactive.warningStatus\");\n         case VsanHealthStatus.green:\n            return VsanUiUtils.getString(\"vsan.health.monitor.proactive.okStatus\");\n         case VsanHealthStatus.red:\n            return VsanUiUtils.getString(\"vsan.health.monitor.proactive.errorStatus\");\n      }\n   }\n}\n","/* Copyright 2019 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {NgModule} from \"@angular/core\";\nimport {CommonModule} from \"@angular/common\";\nimport {ClarityModule} from \"@clr/angular\";\nimport {CommonPipeModule} from \"@pipe/common-pipe.module\";\nimport {PopupListComponent} from \"@component/popup-list/popup-list.component\";\nimport {PopupListItemDirective} from \"@component/popup-list/popup-list-item.directive\";\n\n@NgModule({\n   imports: [\n      CommonModule,\n      ClarityModule,\n      CommonPipeModule\n   ],\n   declarations: [\n      PopupListComponent,\n      PopupListItemDirective\n   ],\n   exports: [\n      PopupListComponent,\n      PopupListItemDirective\n   ]\n})\nexport class PopupListModule {\n}\n","/* Copyright 2017-2020 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, OnInit} from \"@angular/core\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {ManagedObject} from \"@service/managed-object\";\nimport {ProactiveTestResult} from \"./../model/proactive-test-result\";\nimport {ProactiveTestData} from \"@generated/proactive-test-data\";\nimport {PerfStatsObjectInfo} from \"@generated/perf-stats-object-info\";\nimport {VsanPerfPropertyProvider} from \"@generated/vsan-perf-property-provider\";\nimport {VsanPerfMutationProvider} from \"@generated/vsan-perf-mutation-provider\";\nimport {VsanCapabilityProvider} from \"@generated/vsan-capability-provider\";\nimport {VsanCapabilityData} from \"@generated/vsan-capability-data\";\nimport {PerfStatesObjSpec} from \"@generated/perf-states-obj-spec\";\nimport {CsdService} from \"@generated/csd-service\";\n\n@Component({\n   templateUrl: \"run-test-dialog.html\",\n   styleUrls: [\"run-test-dialog.scss\"],\n   selector: \"vsan-run-test-dialog\",\n})\nexport class RunTestDialogComponent {\n   private static readonly MODAL_NON_NETWORK_DIAGNOSTICS_HEIGHT: number = 230;\n\n   dialogTitle: string;\n   dialogQuestion: string;\n   dialogContent: string;\n   errorMessage: string[];\n   perfSetting: PerfStatsObjectInfo;\n   networkDiagnosticsModeAllowed: boolean;\n   turnOnNetworkDiagnosticMode: boolean;\n   loading: boolean = false;\n\n   private isComputeOnlyCluster: boolean;\n   private clusterCapabilityData: VsanCapabilityData;\n   private selectedTest: ProactiveTestResult;\n\n   constructor(private capabilityProvider: VsanCapabilityProvider,\n         private perfPropertyProvider: VsanPerfPropertyProvider,\n         private perfMutationProvider: VsanPerfMutationProvider,\n         private csdService: CsdService) {\n   }\n\n   async ngOnInit(): Promise<void> {\n      this.selectedTest = VsanUiUtils.getModalContext();\n      this.dialogTitle = VsanUiUtils.getString(\"vsan.health.monitor.proactive.warning.title\",\n            this.selectedTest.name);\n      switch (this.selectedTest.type) {\n         case ProactiveTestData.PerfTestType.vmCreation:\n            this.dialogQuestion = VsanUiUtils.getString(\"vsan.health.monitor.proactive.warning.vmCreation.question\");\n            this.dialogContent = VsanUiUtils.getString(\"vsan.health.monitor.proactive.warning.vmCreation.desc\");\n            break;\n         case ProactiveTestData.PerfTestType.unicast:\n            VsanUiUtils.setModalDialogHeight(360);\n\n            this.dialogQuestion =\n                  VsanUiUtils.getString(\"vsan.health.monitor.proactive.warning.network.unicast.question\");\n            this.dialogContent =\n                  VsanUiUtils.getString(\"vsan.health.monitor.proactive.warning.network.unicast.desc\");\n            this.loading = true;\n            [this.perfSetting, this.clusterCapabilityData, this.isComputeOnlyCluster] = await Promise.all([\n               this.perfPropertyProvider.getPerfStatsInfo(ManagedObject.contextObject),\n               this.capabilityProvider.getClusterCapabilityData(ManagedObject.contextObject),\n               this.csdService.isComputeOnlyCluster(ManagedObject.contextObject)]);\n            this.determineNetworkDiagnosticsModeStatus();\n            this.loading = false;\n            break;\n      }\n   }\n\n   private determineNetworkDiagnosticsModeStatus(): void {\n      // Set as turned on by default. The only exception is compute-only cluster.\n      this.turnOnNetworkDiagnosticMode = !this.isComputeOnlyCluster;\n      this.networkDiagnosticsModeAllowed = !this.isComputeOnlyCluster &&\n            this.selectedTest.type === ProactiveTestData.PerfTestType.unicast &&\n            this.clusterCapabilityData && this.clusterCapabilityData.isPerfDiagnosticModeSupported;\n      if (!this.networkDiagnosticsModeAllowed) {\n         VsanUiUtils.setModalDialogHeight(RunTestDialogComponent.MODAL_NON_NETWORK_DIAGNOSTICS_HEIGHT);\n      }\n   }\n\n   get canEnableNetworkDiagnosticMode(): boolean {\n      return this.perfSetting && this.perfSetting.serviceEnabled && !this.perfSetting.networkDiagnosticModeEnabled;\n   }\n\n   get disabledReason(): string {\n      const perfEnabled: boolean = this.perfSetting && this.perfSetting.serviceEnabled;\n      if (!perfEnabled) {\n         return VsanUiUtils.getString(\"vsan.health.monitor.proactive.network.diagnostic.perf.disabled\");\n      }\n      return VsanUiUtils.getString(\"vsan.health.monitor.proactive.network.diagnostic.alreadyOn\");\n   }\n\n   onOkClicked = (): void => {\n      const perfEnabled: boolean = this.perfSetting && this.perfSetting.serviceEnabled;\n      if (this.networkDiagnosticsModeAllowed && this.turnOnNetworkDiagnosticMode\n            && perfEnabled && !this.perfSetting.networkDiagnosticModeEnabled) {\n         const perfSpec: PerfStatesObjSpec = PerfStatesObjSpec.Factory.create(ManagedObject.contextObject,\n               this.perfSetting.spbmProfileUuid,\n               this.perfSetting.verboseModeEnabled,\n               this.turnOnNetworkDiagnosticMode);\n         this.perfMutationProvider.editPerfConfiguration(perfSpec)\n               .then(() => VsanUiUtils.closeModalDialog(null))\n               .catch(err => this.errorMessage = err);\n         return;\n      }\n      VsanUiUtils.closeModalDialog(null);\n   };\n}\n","/* Copyright 2020 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {NgModule} from \"@angular/core\";\nimport {VsanBreadcrumbNavComponent} from \"./vsan-breadcrumb-nav.component\";\nimport {ClarityModule} from \"@clr/angular\";\nimport {CommonModule} from \"@angular/common\";\nimport {CommonDirectiveModule} from \"@directive/common-directive.module\";\nimport {CommonPipeModule} from \"@pipe/common-pipe.module\";\n\n@NgModule({\n   imports: [CommonModule, ClarityModule, CommonDirectiveModule, CommonPipeModule],\n   declarations: [VsanBreadcrumbNavComponent],\n   exports: [\n      VsanBreadcrumbNavComponent,\n   ],\n})\nexport class VsanBreadcrumbModule {}\n","<!-- Copyright 2017-2020 VMware, Inc. All rights reserved. -- VMware Confidential -->\n<vsan-default-prompt\n      [title]=\"dialogTitle\"\n      [(alertMessages)]=\"errorMessage\"\n      [blockContent]=\"loading\"\n      [confirmText]=\"'vsan.health.monitor.proactive.run' | localized\"\n      (onConfirm)=\"onOkClicked()\">\n   <div *ngIf=\"!loading\" class=\"dialog-container\">\n      <div id=\"description_text\">{{dialogContent}}</div>\n      <ng-container *ngIf=\"networkDiagnosticsModeAllowed\">\n         <div class=\"network-diagnostic-mode\">\n            <clr-checkbox-container>\n               <clr-checkbox-wrapper>\n                  <input type=\"checkbox\"\n                         clrCheckbox\n                         id=\"enable-network-diagnostic-mode\"\n                         name=\"enable-network-diagnostic-mode\"\n                         [disabled]=\"!canEnableNetworkDiagnosticMode\"\n                         [(ngModel)]=\"turnOnNetworkDiagnosticMode\"/>\n                  <label>{{\"vsan.services.performance.network.diagnostic.enable\" | localized}}</label>\n               </clr-checkbox-wrapper>\n            </clr-checkbox-container>\n            <clr-signpost class=\"checkbox-signpost\" *ngIf=\"!canEnableNetworkDiagnosticMode\">\n               <clr-signpost-content *clrIfOpen clrPosition=\"bottom-middle\">\n                  <span>{{disabledReason}}</span>\n               </clr-signpost-content>\n            </clr-signpost>\n         </div>\n         <div id=\"diagnostic_description\"\n              [class.disable-action]=\"!canEnableNetworkDiagnosticMode\">\n            {{\"vsan.services.performance.network.diagnostic.desc\" | localized}}\n         </div>\n      </ng-container>\n   </div>\n</vsan-default-prompt>\n","/* Copyright 2020 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {NgModule} from \"@angular/core\";\nimport {ClarityModule} from \"@clr/angular\";\nimport {CommonModule} from \"@angular/common\";\nimport {CommonPipeModule} from \"@pipe/common-pipe.module\";\nimport {CommonDirectiveModule} from \"@directive/common-directive.module\";\nimport {UnavailableViewComponent} from \"@component/unavailable-view/unavailable-view.component\";\nimport {ValidationModule} from \"@component/validation/validation.module\";\n\n@NgModule({\n   imports: [\n      CommonModule,\n      ClarityModule,\n      CommonPipeModule,\n      ValidationModule,\n      CommonDirectiveModule,\n   ],\n   declarations: [\n      UnavailableViewComponent,\n   ],\n   exports: [\n      UnavailableViewComponent,\n   ],\n})\nexport class UnavailableViewModule {\n}\n","/* Copyright 2019-2020 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {ClrSelectedState} from \"@clr/angular\";\nimport ObjectInfo from './ObjectInfo';\n\nexport class TreeNode {\n   private _childNodes: TreeNode[];\n\n   get children(): TreeNode[] {\n      return this._childNodes;\n   }\n\n   set children(nodes: TreeNode[]) {\n      this._childNodes = !!nodes ? nodes : [];\n   }\n\n   private _clrSelectedState: ClrSelectedState = ClrSelectedState.UNSELECTED;\n\n   get clrSelectedState(): ClrSelectedState {\n      return this._clrSelectedState;\n   }\n\n   set clrSelectedState(value) {\n      if (value != this._clrSelectedState) {\n         this._clrSelectedState = value;\n         // Timeout in order to wait for clarity to update the selected state of the children/parent\n         setTimeout(() => {\n            this.onClrSelectedStateChange && this.onClrSelectedStateChange(this);\n         });\n      }\n   }\n\n   visible: boolean;\n\n   isExpanded: boolean = false;\n\n   constructor(\n         public objectInfo: ObjectInfo,\n         public nodes: TreeNode[] = [],\n         public onClrSelectedStateChange: (node: TreeNode) => any = null) {\n      this.children = nodes;\n   }\n\n   public isSelected(): boolean {\n      return this.clrSelectedState === ClrSelectedState.SELECTED;\n   }\n}","/* Copyright 2020-2022 VMware, Inc. All rights reserved. -- VMware Confidential */\nexport class VsanDialogUtil {\n   static readonly CAPACITY_MANAGEMENT_DIALOG: VsanDialogProperties = {\n      width: 800,\n      height: 700,\n   };\n\n   static readonly DELETE_VOLUME_DIALOG: VsanDialogProperties = {\n      width: 500,\n      height: 250,\n   };\n\n   static readonly MIGRATE_VOLUME_DIALOG: VsanDialogProperties = {\n      width: 1030,\n      height: 710,\n   };\n\n   static readonly REAPPLY_VOLUME_POLICY_DIALOG: VsanDialogProperties = {\n      width: 700,\n      height: 250,\n   };\n\n   static readonly DUPLICATE_PCI_ID_MODEL_SELECTION_DIALOG: VsanDialogProperties = {\n      width: 800,\n      height: 500,\n   };\n\n   static readonly HEALTH_RESTORE_ACTION_DIALOG: VsanDialogProperties = {\n      width: 550,\n      height: 250,\n   };\n\n   // Keep in sync with plugin.xml extension point\n   static readonly CLUSTER_POWER_ON_DIALOG: VsanDialogProperties = {\n      width: 600,\n      height: 230,\n   };\n\n   static readonly VM_IO_DIAGNOSTICS_METRICS_DIALOG: VsanDialogProperties = {\n      width: 900,\n      height: 700,\n   };\n\n   static readonly VM_IO_DIAGNOSTICS_LATENCY_DIALOG: VsanDialogProperties = {\n      width: 1000,\n      height: 500,\n   };\n\n   static readonly VM_IO_DIAGNOSTICS_DOM_OWNER_LATENCY_DIALOG: VsanDialogProperties = {\n      width: 1000,\n      height: 400,\n   };\n\n   static readonly PERF_SVC_EDIT_ACTION_DIALOG: VsanDialogProperties = {\n      width: 800,\n      height: 450,\n   };\n\n   static readonly PERF_SVC_ENABLE_ACTION_DIALOG: VsanDialogProperties = {\n      width: 800,\n      height: 250,\n   };\n\n   static readonly CLAIM_DISKS_ACTION_DIALOG: VsanDialogProperties = {\n      width: 1200,\n      height: 650,\n   };\n\n   static readonly VSAN_DISK_CLAIM_ACTION_DIALOG: VsanDialogProperties = {\n      width: 670,\n      height: 300,\n   };\n}\n\nexport class VsanDialogProperties {\n   width: number;\n   height: number;\n}\n","/* Copyright 2019-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {NgModule} from \"@angular/core\";\nimport {CommonModule} from \"@angular/common\";\nimport {FormsModule} from \"@angular/forms\";\nimport {ClarityModule} from \"@clr/angular\";\nimport {ValidationModule} from \"@component/validation/validation.module\";\nimport {CommonPipeModule} from \"@pipe/common-pipe.module\";\nimport {CommonDirectiveModule} from \"@directive/common-directive.module\";\nimport {HealthStatusCell} from \"@component/cell/health-status-cell.component\";\nimport {LabelCell} from \"@component/cell/label-cell.component\";\nimport {StoragePolicyCell} from \"@component/cell/storage-policy-cell.component\";\nimport {MorCell} from \"@component/cell/mor-cell.component\";\nimport {IconItemComponent} from \"@component/cell/icon-item.component\";\nimport {HealthStateItemComponent} from \"@component/cell/health-state-item.component\";\nimport {ListCell} from \"@component/cell/list-cell.component\";\nimport {PspHealthStateItemComponent} from \"@component/cell/psp-health-state-item.component\";\nimport {HealthTestValueComponent} from \"@component/cell/health-test-value.component\";\nimport {HealthLinkCellComponent} from \"@component/cell/health-link-cell.component\";\nimport {HealthMorCellComponent} from \"@component/cell/health-mor-cell.component\";\n\n@NgModule({\n   imports: [\n      CommonModule,\n      FormsModule,\n      ClarityModule,\n      ValidationModule,\n      CommonPipeModule,\n      CommonDirectiveModule,\n   ],\n   // TODO: (vasilevd) Move health specific components to a separate common health module\n   declarations: [\n      HealthStatusCell,\n      HealthTestValueComponent,\n      LabelCell,\n      StoragePolicyCell,\n      MorCell,\n      HealthMorCellComponent,\n      ListCell,\n      IconItemComponent,\n      HealthStateItemComponent,\n      PspHealthStateItemComponent,\n      HealthLinkCellComponent,\n   ],\n   exports: [\n      HealthStatusCell,\n      HealthTestValueComponent,\n      LabelCell,\n      StoragePolicyCell,\n      MorCell,\n      HealthMorCellComponent,\n      ListCell,\n      IconItemComponent,\n      HealthStateItemComponent,\n      PspHealthStateItemComponent,\n      HealthLinkCellComponent,\n   ],\n})\nexport class CommonCellsModule {\n}\n","/* Copyright 2020 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, OnInit} from \"@angular/core\";\nimport {Logger} from \"@util/logger\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {ManagedObject} from \"@service/managed-object\";\nimport {RefreshHandler} from \"@service/global-refresh.service\";\nimport {ProactiveTestData} from \"@generated/proactive-test-data\";\nimport {ProactiveTestsService} from \"@generated/proactive-tests-service\";\nimport {ProactiveTestResult} from \"../model/proactive-test-result\";\nimport {PermissionService} from \"@generated/permission-service\";\nimport {Privileges} from \"@generated/privileges\";\nimport {CsdService} from \"@generated/csd-service\";\nimport {MountedRemoteDatastore} from \"@generated/mounted-remote-datastore\";\nimport {TreeNode} from \"@component/inventory/tree-view/tree-node\";\nimport {InventoryNode} from \"@generated/inventory-node\";\nimport {ModalBuilder} from \"@util/modal-builder\";\nimport {TaskMonitorService} from \"@service/task-monitor-service\";\nimport ObjectInfo from \"@component/inventory/tree-view/ObjectInfo\";\nimport {ScreenReaderAnnouncer} from \"@service/screen-reader-announcer.service\";\nimport {VsanHealthUtil} from \"@util/vsan-health-util\";\nimport {UnavailableViewSpec} from \"@component/unavailable-view/unavailable-view-spec\";\n\n@Component({\n   templateUrl: \"proactive-tests.html\",\n   styleUrls: [\"proactive-tests.scss\"],\n   selector: \"vsan-proactive-tests\",\n})\nexport class ProactiveTestsComponent implements OnInit {\n   VsanUiUtils: typeof VsanUiUtils = VsanUiUtils;\n   VsanHealthUtil: typeof VsanHealthUtil = VsanHealthUtil;\n   PerfTestType: typeof ProactiveTestData.PerfTestType = ProactiveTestData.PerfTestType;\n   readonly HCIBENCH_SITE: string = \"https://labs.vmware.com/flings/hcibench\";\n   readonly COMMUNITY_SITE: string = \"https://communities.vmware.com/community/vmtn/vsan\";\n   private static readonly RUNNING_TEST_KEY_SEPARATOR: string = \":\";\n\n   // The timeout time for the VM creation test, its value should be greater than 190.\n   private readonly TIMEOUT: number = 200;\n\n   // The value of runningTests and loadingTests looks like {\"vmCreation\", \"unicast\"} when CSD is not supported,\n   // or {\"datastore-65:vmCreation\", \"datastore-66:unicast\"} when CSD is supported.\n   private runningTests: Set<string> = new Set();\n   private loadingTests: Set<string> = new Set();\n\n   loading: boolean = true;\n   showReload: boolean = false;\n   alertMessage: string;\n   unavailableView: UnavailableViewSpec;\n   hasEditPermissions: boolean = false;\n\n   testTypeToResultMap: Map<ProactiveTestData.PerfTestType, ProactiveTestResult> =\n         new Map<ProactiveTestData.PerfTestType, ProactiveTestResult>();\n   testTypeToDatastoreObjectInfoMap: Map<ProactiveTestData.PerfTestType, InventoryNode> =\n         new Map<ProactiveTestData.PerfTestType, InventoryNode>();\n\n   isCsdSupported: boolean = false;\n   mountedDatastores: MountedRemoteDatastore[];\n   datastoreTreeNodes: TreeNode[];\n\n   @ScreenReaderAnnouncer()\n   srOnlyMessage: string;\n\n   constructor(private proactiveTestsService: ProactiveTestsService,\n         private permissionService: PermissionService,\n         private csdService: CsdService,\n         private taskMonitorService: TaskMonitorService) {\n   }\n\n   async ngOnInit(): Promise<void> {\n      this.isCsdSupported = await this.csdService.isCsdSupported(ManagedObject.contextObject);\n      this.fetch();\n   }\n\n   @RefreshHandler\n   async fetch(): Promise<void> {\n      this.loading = true;\n      this.alertMessage = null;\n      this.permissionService.hasPermissions(ManagedObject.contextObject, [Privileges.EDIT_CLUSTER()])\n            .then(result => this.hasEditPermissions = result);\n      this.mountedDatastores = (await this.csdService.getMountedDatastores(ManagedObject.contextObject))\n            .filter((ds: MountedRemoteDatastore) => ds.shareableDatastore.serverCluster);\n      if (!this.isCsdSupported) {\n         this.mountedDatastores = this.mountedDatastores.filter((ds: MountedRemoteDatastore) => ds.isLocal);\n      }\n      this.datastoreTreeNodes = this.getDatastoreTreeNodes();\n\n      if (VsanUiUtils.isEmpty(this.mountedDatastores)) {\n         this.unavailableView = UnavailableViewSpec.PROACTIVE_TESTS_NO_DATASTORE;\n      } else {\n         this.unavailableView = null;\n         this.getAllTestResults();\n      }\n      this.loading = false;\n   }\n\n   private async getAllTestResults(): Promise<void> {\n      try {\n         const selectedDatastoreRef: ManagedObject = VsanUiUtils.isEmpty(this.mountedDatastores) ? null :\n               this.mountedDatastores[0].shareableDatastore.datastore.moRef;\n         const selectedServerClusterRef: ManagedObject = VsanUiUtils.isEmpty(this.mountedDatastores) ? null :\n               this.mountedDatastores[0].shareableDatastore.serverCluster.moRef;\n         const results: ProactiveTestData[] = await this.proactiveTestsService.getProactiveTestResults(\n               ManagedObject.contextObject, selectedDatastoreRef, selectedServerClusterRef);\n         // Initialize the proactive tests page, the result is an array in this case\n         this.handleAllTestResults(results);\n      } catch (err) {\n         this.onCatch(err);\n      } finally {\n         this.loading = false;\n      }\n   }\n\n   private handleAllTestResults(results: ProactiveTestData[]): Promise<void> {\n      if (VsanUiUtils.isEmpty(results)) {\n         this.showReload = true;\n         this.alertMessage = VsanUiUtils.getString(\"vsan.health.monitor.proactive.no.data\");\n         return;\n      }\n      const selectedDatastoreObjectInfo: InventoryNode = !VsanUiUtils.isEmpty(this.datastoreTreeNodes)\n            ? this.datastoreTreeNodes[0].objectInfo as InventoryNode\n            : null;\n      results.forEach(item => {\n         this.testTypeToResultMap.set(item.perfTestType, new ProactiveTestResult(item));\n         this.testTypeToDatastoreObjectInfoMap.set(item.perfTestType, selectedDatastoreObjectInfo);\n      });\n      this.srOnlyMessage = VsanUiUtils.getString(\"vsan.screenReader.message.page.loaded\",\n            VsanUiUtils.getString(\"vsan.health.monitor.proactive.title\"));\n   }\n\n   private onCatch = (error: any) => {\n      this.showReload = true;\n      this.alertMessage = VsanUiUtils.getString(\"vsan.health.monitor.proactive.no.data\");\n      Logger.error(\"Unable to query Proactive Test History data: \" + error);\n   };\n\n   get displaySpinner(): boolean {\n      return this.loading && this.testTypeToResultMap.size === 0;\n   }\n\n   displayTestDetailsSpinner(type: ProactiveTestData.PerfTestType): boolean {\n      return type && (this.loading || this.isRunningTest(type) || this.isLoadingTest(type));\n   }\n\n   isRunTestButtonDisabled(type: ProactiveTestData.PerfTestType): boolean {\n      return !this.hasEditPermissions || this.displayTestDetailsSpinner(type) ||\n            VsanUiUtils.isEmpty(this.mountedDatastores);\n   }\n\n   get runTestButtonTitle(): string {\n      if (VsanUiUtils.isEmpty(this.mountedDatastores)) {\n         return VsanUiUtils.getString(\"vsan.health.monitor.proactive.runTest.noDatastores\");\n      }\n      return VsanUiUtils.getActionTitle(this.hasEditPermissions, \"vsan.health.monitor.proactive.runTest\");\n   }\n\n   get selectorVisible(): boolean {\n      return this.isCsdSupported && !VsanUiUtils.isEmpty(this.mountedDatastores) &&\n            this.mountedDatastores.some((ds: MountedRemoteDatastore) => !ds.isLocal);\n   }\n\n   openRunTestDialog(selectedTest: ProactiveTestResult): void {\n      new ModalBuilder(\"proactiveTests/runProactiveTest\")\n            .setSize(670, 260)\n            .open(selectedTest)\n            .then(() => this.runTest(selectedTest));\n   }\n\n   private runTest(selectedTest: ProactiveTestResult): void {\n      // After the task is completed, we use dataStoreRef and test type to delete the test from the running test list,\n      // store dataStoreRef to a new variable to avoid its value being changed after switching to another datastore.\n      const dataStoreRef: ManagedObject = this.getSelectedDatastoreRef(selectedTest.type);\n      this.runningTests.add(this.getRunningTestData(dataStoreRef, selectedTest.type));\n      if (selectedTest.type === ProactiveTestData.PerfTestType.vmCreation) {\n         this.proactiveTestsService.getVMCreationTestResult(\n               ManagedObject.contextObject, this.TIMEOUT, dataStoreRef)\n               .then(data => this.runTestSucceeded(data, dataStoreRef))\n               .catch(error => this.runTestFailed(error, selectedTest.name, ProactiveTestData.PerfTestType.vmCreation,\n                     dataStoreRef));\n      } else {\n         if (this.isNetworkTestAgainstLocalCluster(selectedTest.type)) {\n            const isTestMulticast: boolean = selectedTest.type === ProactiveTestData.PerfTestType.multicast;\n            this.proactiveTestsService.getNetworkPerfTestResult(ManagedObject.contextObject, isTestMulticast)\n                  .then(data => this.runTestSucceeded(data, dataStoreRef))\n                  .catch(error => this.runTestFailed(error, selectedTest.name, ProactiveTestData.PerfTestType.unicast,\n                        dataStoreRef));\n         } else {\n            this.proactiveTestsService.startNetworkPerfTestTask(\n                  ManagedObject.contextObject, this.getSelectedServerClusterRef(selectedTest.type))\n                  .then(task => this.handleNetworkTestTask(task, dataStoreRef, selectedTest.type))\n                  .catch(error => this.runTestFailed(error, selectedTest.name, ProactiveTestData.PerfTestType.multicast,\n                        dataStoreRef));\n         }\n      }\n   }\n\n   private async handleNetworkTestTask(task: ManagedObject, datastoreRef: ManagedObject,\n         type: ProactiveTestData.PerfTestType): Promise<void> {\n      await this.taskMonitorService.getAwaitResult(task);\n      const networkTestData: ProactiveTestData = await this.proactiveTestsService.getLastNetworkTestResult(\n            ManagedObject.contextObject, this.getSelectedServerClusterRef(type));\n      this.runTestSucceeded(networkTestData, datastoreRef);\n   }\n\n   private runTestSucceeded = (result: ProactiveTestData, dataStoreRef: ManagedObject) => {\n      this.runningTests.delete(this.getRunningTestData(dataStoreRef, result.perfTestType));\n      if (!this.isCsdSupported ||\n            ManagedObject.areEqual(this.getSelectedDatastoreRef(result.perfTestType), dataStoreRef)) {\n         this.handleSingleTestResult(result);\n      }\n   };\n\n   private handleSingleTestResult = (result: ProactiveTestData) => {\n      if (!result) {\n         this.showReload = true;\n         this.alertMessage = VsanUiUtils.getString(\"vsan.health.monitor.proactive.no.data\");\n         return;\n      }\n      this.testTypeToResultMap.set(result.perfTestType, new ProactiveTestResult(result));\n   };\n\n   private runTestFailed = (error: any, name: string, testType: ProactiveTestData.PerfTestType,\n         dataStoreRef: ManagedObject) => {\n      this.showReload = false;\n      this.runningTests.delete(this.getRunningTestData(dataStoreRef, testType));\n      this.alertMessage = VsanUiUtils.getString(\"vsan.health.monitor.proactive.running.error\", name);\n      Logger.error(`Unable to run ${name}: ` + error);\n   };\n\n   private isNetworkTestAgainstLocalCluster(type: ProactiveTestData.PerfTestType): boolean {\n      const mountedDatastore: MountedRemoteDatastore = this.getSelectedMountedRemoteDatastore(type);\n      return mountedDatastore ? mountedDatastore.isLocal : true;\n   }\n\n   isRunningTest(type: ProactiveTestData.PerfTestType): boolean {\n      return this.runningTests.has(this.getRunningTestData(this.getSelectedDatastoreRef(type), type));\n   }\n\n   private getRunningTestData(dataStoreRef: ManagedObject, testType: ProactiveTestData.PerfTestType): string {\n      return dataStoreRef ?\n            dataStoreRef.value + ProactiveTestsComponent.RUNNING_TEST_KEY_SEPARATOR + testType.toString() :\n            testType.toString();\n   }\n\n   getSelectedDatastoreObjectInfosBasedOnType(type: ProactiveTestData.PerfTestType): InventoryNode[] {\n      return [this.testTypeToDatastoreObjectInfoMap.get(type)];\n   }\n\n   onSelectedDatastoreObjectInfosChange(objectInfos: ObjectInfo[], type: ProactiveTestData.PerfTestType): void {\n      const datastoreRef: ManagedObject = this.getSelectedDatastoreRef(type);\n      if ((!datastoreRef && VsanUiUtils.isEmpty(objectInfos)) ||\n            ManagedObject.areEqual(datastoreRef, objectInfos[0].moRef)) {\n         return;\n      }\n      this.testTypeToDatastoreObjectInfoMap.set(type, objectInfos[0] as InventoryNode);\n      this.fetchLastTestResult(type);\n   }\n\n   private async fetchLastTestResult(type?: ProactiveTestData.PerfTestType): Promise<void> {\n      const datastoreRef: ManagedObject = this.getSelectedDatastoreRef(type);\n      this.loadingTests.add(this.getRunningTestData(datastoreRef, type));\n      // this.runningTests.add(this.getRunningTestData(datastoreRef, type));\n      if (type === ProactiveTestData.PerfTestType.vmCreation) {\n         const vmCreationTestResult: ProactiveTestData = await this.proactiveTestsService.getLastVmCreationTestResult(\n               ManagedObject.contextObject, datastoreRef);\n         this.loadTestSucceeded(vmCreationTestResult, datastoreRef);\n      } else {\n         const networkTestResult: ProactiveTestData = await this.proactiveTestsService.getLastNetworkTestResult(\n               ManagedObject.contextObject, this.getSelectedServerClusterRef(type));\n         this.loadTestSucceeded(networkTestResult, datastoreRef);\n      }\n   }\n\n   private loadTestSucceeded(result: ProactiveTestData, dataStoreRef: ManagedObject): void {\n      this.loadingTests.delete(this.getRunningTestData(dataStoreRef, result.perfTestType));\n      if (!this.isCsdSupported ||\n            ManagedObject.areEqual(this.getSelectedDatastoreRef(result.perfTestType), dataStoreRef)) {\n         this.handleSingleTestResult(result);\n      }\n   }\n\n   isLoadingTest(type: ProactiveTestData.PerfTestType): boolean {\n      return type && this.loadingTests.has(this.getRunningTestData(this.getSelectedDatastoreRef(type), type));\n   }\n\n   displayTestResult(testResult: ProactiveTestResult): boolean {\n      return testResult && !this.isLoadingTest(testResult.type) && !!testResult.status;\n   }\n\n   getSelectedDatastoreRef(type: ProactiveTestData.PerfTestType): ManagedObject | null {\n      const selectedDatastoreObjectInfo: InventoryNode = this.testTypeToDatastoreObjectInfoMap.get(type);\n      return selectedDatastoreObjectInfo ? selectedDatastoreObjectInfo.moRef : null;\n   }\n\n   getSelectedServerClusterRef(type: ProactiveTestData.PerfTestType): ManagedObject | null {\n      const mountedDatastore: MountedRemoteDatastore = this.getSelectedMountedRemoteDatastore(type);\n      return mountedDatastore ? mountedDatastore.shareableDatastore.serverCluster.moRef : null;\n   }\n\n   getSelectedMountedRemoteDatastore(type: ProactiveTestData.PerfTestType): MountedRemoteDatastore | null {\n      const selectedDatastoreObjectInfo: InventoryNode = this.testTypeToDatastoreObjectInfoMap.get(type);\n      if (!selectedDatastoreObjectInfo) {\n         return null;\n      }\n      return this.mountedDatastores.find(mountedDs => ManagedObject.areEqual(\n            mountedDs.shareableDatastore.datastore.moRef, selectedDatastoreObjectInfo.moRef));\n   }\n\n   private getDatastoreTreeNodes(): TreeNode[] {\n      return this.mountedDatastores.map((ds: MountedRemoteDatastore) => {\n         const clonedDS: MountedRemoteDatastore = VsanUiUtils.deepClone(ds);\n         clonedDS.shareableDatastore.datastore.name = VsanUiUtils.getString(\"vsan.csd.datastoreWithServerCluster\",\n               clonedDS.shareableDatastore.datastore.name, clonedDS.shareableDatastore.serverCluster.name);\n         return new TreeNode(clonedDS.shareableDatastore.datastore, null);\n      });\n   }\n}\n","/* Copyright 2020 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {NgModule} from \"@angular/core\";\nimport {RouterModule, Routes} from \"@angular/router\";\nimport {CommonModule} from \"@angular/common\";\nimport {ClarityModule} from \"@clr/angular\";\nimport {VsanCommonModule} from \"../common/vsan-common.module\";\nimport {ProactiveTestsComponent} from \"./view/proactive-tests.component\";\nimport {TestDetailsComponent} from \"./view/test-details.component\";\nimport {RunTestDialogComponent} from \"./view/run-test-dialog.component\";\nimport {FormsModule} from \"@angular/forms\";\nimport {UnavailableViewModule} from \"@component/unavailable-view/unavailable-view.module\";\n\nconst proactiveTestsRoutes: Routes = [\n   {\n      path: \"\",\n      component: ProactiveTestsComponent,\n   },\n   {\n      path: \"runProactiveTest\",\n      component: RunTestDialogComponent,\n   },\n];\n\n@NgModule({\n   imports: [\n      FormsModule,\n      CommonModule,\n      ClarityModule,\n      VsanCommonModule,\n      UnavailableViewModule,\n      RouterModule.forChild(proactiveTestsRoutes),\n   ],\n   declarations: [\n      TestDetailsComponent,\n      RunTestDialogComponent,\n      ProactiveTestsComponent,\n   ],\n\n})\nexport class ProactiveTestsModule {\n}\n","/* Copyright 2017-2020 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {VsanHealthStatus} from \"@generated/vsan-health-status\";\nimport {ProactiveTestData} from \"@generated/proactive-test-data\";\nimport {VsanTestTable} from \"@generated/vsan-test-table\";\nimport {VsanUiUtils} from \"../../common/util/vsan-util\";\nimport {VsanDateTimeUtils} from \"@util/vsan-dateteime-util\";\n\n/**\n * Get the data of proactive tests result\n */\nexport class ProactiveTestResult {\n   name: string;\n   type: ProactiveTestData.PerfTestType;\n   tooltip: string;\n   timestampLabel: string;\n   status: VsanHealthStatus;\n   statusLabel: string;\n   details: VsanTestTable[];\n   helpId: string;\n   description: string;\n\n   constructor(model: ProactiveTestData) {\n      // If model.timestamp is not null, the test has been run. Otherwise, the test has never been run.\n      switch (model.perfTestType) {\n         case ProactiveTestData.PerfTestType.vmCreation:\n            this.name = VsanUiUtils.getString(\"vsan.health.monitor.proactive.tests.vmCreation\");\n            this.tooltip = VsanUiUtils.getString(\"vsan.health.monitor.proactive.warning.vmCreation.desc\");\n            break;\n         case ProactiveTestData.PerfTestType.multicast:\n            this.name = VsanUiUtils.getString(\"vsan.health.monitor.proactive.tests.network.multicast\");\n            this.tooltip = VsanUiUtils.getString(\"vsan.health.monitor.proactive.warning.network.multicast.desc\");\n            break;\n         case ProactiveTestData.PerfTestType.unicast:\n            this.name = VsanUiUtils.getString(\"vsan.health.monitor.proactive.tests.network.unicast\");\n            this.tooltip = VsanUiUtils.getString(\"vsan.health.monitor.proactive.warning.network.unicast.desc\");\n            break;\n      }\n\n      this.type = model.perfTestType;\n      this.timestampLabel = VsanDateTimeUtils.formatDate(model.timestamp);\n\n      if (!model.generalData) {\n         return;\n      }\n\n      this.description = model.generalData.testDescription;\n      this.status = model.generalData.status;\n      switch (model.generalData.status) {\n         case VsanHealthStatus.red:\n            this.statusLabel = VsanUiUtils.getString(\"vsan.health.monitor.proactive.errorStatus\");\n            break;\n         case VsanHealthStatus.yellow:\n            this.statusLabel = VsanUiUtils.getString(\"vsan.health.monitor.proactive.warningStatus\");\n            break;\n         case VsanHealthStatus.green:\n            this.statusLabel = VsanUiUtils.getString(\"vsan.health.monitor.proactive.okStatus\");\n            break;\n         default:\n            this.statusLabel = VsanUiUtils.getString(\"vsan.na.label\");\n            break;\n      }\n\n      // expected exact one execution\n      if (model.generalData.instances && model.generalData.instances[0].details.length > 0) {\n         // details includes the result of running test, every test has only one result,\n         // so if the test has been run, details contains only one element.\n         this.details = model.generalData.instances[0].details;\n         for (const detail of this.details) {\n            detail.rows = detail.rows || [];\n         }\n      }\n   }\n\n   static createEmptyVmCreationTestResult() {\n      const testData: ProactiveTestData = ProactiveTestData.Factory.create(\n            null, null, ProactiveTestData.PerfTestType.vmCreation, null);\n      return new ProactiveTestResult(testData);\n   }\n}\n","<!-- Copyright 2020 VMware, Inc. All rights reserved. VMware Confidential -->\n<clr-datagrid id=\"test-details-datagrid\" [clrDgLoading]=\"loading\">\n   <clr-dg-placeholder>\n      {{\"vsan.health.monitor.proactive.noData\" | localized}}\n   </clr-dg-placeholder>\n   <ng-container *ngFor=\"let table of detailsArray\">\n      <clr-dg-column *ngFor=\"let column of table?.columns\" class=\"name-column\">\n         {{column.columnLabel}}\n      </clr-dg-column>\n      <clr-dg-row *clrDgItems=\"let row of table?.rows; let rowIndex = index\">\n         <clr-dg-cell id=\"test-details-cell-{{rowIndex}}-{{cellIndex}}\"\n                      vsan-show-title\n                      class=\"name-column\"\n                      [ngClass]=\"cellIndex === table.columns.length - 1 ? 'last-cell': ''\"\n                      *ngFor=\"let cell of row?.rowValues; let cellIndex = index\" >\n            <ng-container *ngIf=\"VsanHealthUtil.isTextCell(cell)\">\n               {{cell.cellValue}}\n            </ng-container>\n            <ng-container *ngIf=\"VsanHealthUtil.isNumericCell(cell)\">\n               {{VsanHealthUtil.formatedNumber(cell.cellValue, cell.cellType)}}\n            </ng-container>\n            <vsan-health-status-cell *ngIf=\"VsanHealthUtil.isHealthStatusCell(cell)\"\n                                     [label]=\"getHealthStatusLabel(cell.cellValue)\"\n                                     [iconClass]=\"VsanHealthUtil.getHealthStatusClass(cell.cellValue)\"\n                                     [shape]=\"VsanHealthUtil.getHealthStatusShape(cell.cellValue)\">\n            </vsan-health-status-cell>\n            <ng-container *ngIf=\"VsanHealthUtil.isStatusCell(cell)\">\n               <clr-icon [attr.shape]=\"VsanHealthUtil.getStatusShape(cell)\"\n                         class=\"{{VsanHealthUtil.getStatusClass(cell)}}\"\n                         aria-hidden=\"true\">\n               </clr-icon>\n               {{VsanHealthUtil.getStatusLabel(cell)}}\n            </ng-container>\n            <vsan-health-mor-cell *ngIf=\"VsanHealthUtil.isMorCell(cell)\"\n                                  [data]=\"VsanHealthUtil.getMorCellData(cell)\">\n            </vsan-health-mor-cell>\n         </clr-dg-cell>\n      </clr-dg-row>\n   </ng-container>\n   <clr-dg-footer>\n      <clr-dg-pagination #pagination\n                         [hidden]=\"!testResults\"\n                         [clrDgTotalItems]=\"testResults?.length\"\n                         [clrDgPageSize]=\"DEFAULT_ITEMS_PER_PAGE\">\n         {{VsanUiUtils.getDatagridFooterLabel(testResults, pagination, DEFAULT_ITEMS_PER_PAGE)}}\n      </clr-dg-pagination>\n   </clr-dg-footer>\n</clr-datagrid>\n","<!--Copyright 2020 VMware, Inc. All rights reserved. -- VMware Confidential-->\n<div *ngIf=\"displaySpinner\" class=\"spinner central-spinner\">{{\"vsan.loading\" | localized}}</div>\n\n<ng-container *ngIf=\"!displaySpinner\">\n   <vsan-validation id=\"validation-message\"\n                    *ngIf=\"alertMessage\"\n                    [alert]=\"alertMessage\"\n                    [allowReload]=\"showReload\"\n                    (onReload)=\"fetch()\"\n                    (onClosed)=\"alertMessage=null\">\n   </vsan-validation>\n   <h5 vsan-auto-focus>\n      {{\"vsan.health.monitor.proactive.title\" | localized}}\n   </h5>\n   <span>\n      {{\"vsan.health.monitor.proactive.desc\" | localized}}\n   </span>\n\n   <vsan-unavailable-view *ngIf=\"unavailableView\"\n                          [unavailableViewSpec]=\"unavailableView\">\n   </vsan-unavailable-view>\n\n   <clr-stack-view *ngIf=\"!unavailableView\">\n      <ng-container *ngTemplateOutlet=\"stackBlock; context: {\n                  id: 'vm-creation-test',\n                  label: 'vsan.health.monitor.proactive.tests.vmCreation',\n                  desc: 'vsan.health.monitor.proactive.vmCreationTest.desc',\n                  helpId: 'com.vmware.vsan.health.test.createvmtest',\n                  testResult: testTypeToResultMap.get(PerfTestType.vmCreation)}\"></ng-container>\n      <ng-container *ngTemplateOutlet=\"stackBlock; context: {\n                  id: 'network-performance-test',\n                  label: 'vsan.health.monitor.proactive.tests.network.unicast',\n                  desc: 'vsan.health.monitor.proactive.networkPerformanceTest.desc',\n                  helpId: 'com.vmware.vsan.health.test.unicastperftest',\n                  testResult: testTypeToResultMap.get(PerfTestType.unicast)}\"></ng-container>\n      <clr-stack-block>\n         <clr-stack-label id=\"storage-performance-test-label\">\n            {{\"vsan.health.monitor.proactive.tests.network.storagePerformanceTest\" | localized }}\n         </clr-stack-label>\n         <clr-stack-block class=\"test-section\">\n            <clr-stack-content>\n               <span>\n                  {{\"vsan.health.monitor.proactive.storage.performance.test.desc.part1\" | localized}}\n                  <a id=\"storage-desc-part2\"\n                     [url]=\"HCIBENCH_SITE\"\n                     [external-link]=\"'vsan.health.monitor.proactive.storage.performance.test.desc.part2' | localized\">\n                  </a>\n                  {{\"vsan.health.monitor.proactive.storage.performance.test.desc.part3\" | localized}}\n                  <a id=\"storage-desc-part4\"\n                     [url]=\"COMMUNITY_SITE\"\n                     [external-link]=\"'vsan.health.monitor.proactive.storage.performance.test.desc.part4' | localized\">\n                  </a>\n                  {{\"vsan.health.monitor.proactive.storage.performance.test.desc.part5\" | localized}}\n               </span>\n            </clr-stack-content>\n         </clr-stack-block>\n      </clr-stack-block>\n   </clr-stack-view>\n</ng-container>\n\n<ng-template #stackBlock let-id=\"id\" let-label=\"label\" let-desc=\"desc\" let-helpId=\"helpId\" let-testResult=\"testResult\">\n   <clr-stack-block *ngIf=\"testResult\">\n      <clr-stack-label id=\"{{id}}-label\">{{label | localized}}</clr-stack-label>\n      <clr-stack-block class=\"test-section\">\n         <clr-stack-content>\n            <span id=\"{{id}}-desc\">\n               {{desc | localized}}\n               <a id=\"{{id}}-ask-VMware\"\n                  name=\"{{id}}-ask-VMware\"\n                  [external-link]\n                  [helpId]=\"helpId\"\n                  [title]=\"'vsan.common.askVMware' | localized\"></a>\n            </span>\n            <div class=\"selector-container\">\n               <vsan-dropdown-object-selector *ngIf=\"selectorVisible\"\n                                              [label]=\"'vsan.health.monitor.proactive.runOn' | localized\"\n                                              [showSearch]=\"false\"\n                                              [nodes]=\"datastoreTreeNodes\"\n                                              [selectedObjectInfos]=\"getSelectedDatastoreObjectInfosBasedOnType(testResult.type)\"\n                                              (selectedObjectInfosChange)=\"onSelectedDatastoreObjectInfosChange($event, testResult.type)\">\n               </vsan-dropdown-object-selector>\n               <button id=\"{{id}}-run-test-btn\"\n                       name=\"{{id}}-run-test-btn\"\n                       class=\"btn btn-sm btn-primary run-test-btn\"\n                       [disabled]=\"isRunTestButtonDisabled(testResult?.type)\"\n                       (click)=\"openRunTestDialog(testResult)\"\n                       [title]=\"runTestButtonTitle\">\n                  {{\"vsan.health.monitor.proactive.runTestBtn\" | localized}}\n               </button>\n               <div *ngIf=\"displayTestResult(testResult)\" class=\"test-result\">\n                  {{\"vsan.health.monitor.proactive.timestampAndResult.label\" | localized: testResult.timestampLabel}}\n                  <clr-icon *ngIf=\"testResult.status\"\n                            aria-hidden=\"true\"\n                            [attr.shape]=\"VsanHealthUtil.getVsanHealthStatusIconShape(testResult.status)\"\n                            class=\"{{VsanHealthUtil.getVsanHealthStatusIconClass(testResult.status)}}\">\n                  </clr-icon>\n                  {{testResult.statusLabel}}\n               </div>\n               <span *ngIf=\"isLoadingTest(testResult?.type)\" class=\"spinner spinner-inline\">\n                  {{\"vsan.loading\" | localized}}\n               </span>\n            </div>\n            <vsan-tests-details [detailsArray]=\"testResult?.details\"\n                                [loading]=\"displayTestDetailsSpinner(testResult?.type)\">\n            </vsan-tests-details>\n         </clr-stack-content>\n      </clr-stack-block>\n   </clr-stack-block>\n</ng-template>\n","/* Copyright 2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {\n   AfterViewInit,\n   ComponentFactoryResolver,\n   Directive,\n   ElementRef,\n   Host,\n   Input,\n   Optional,\n   Renderer2,\n   Self,\n} from \"@angular/core\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {NavigationService} from \"@navigation/navigation.service\";\nimport {ClrButtonBaseDirective} from \"@directive/clr-button-group/clr-button-base.directive\";\nimport {ClrButton} from \"@clr/angular\";\n\n/**\n * Decorates a button or an anchor as external link. Requires one of the optional parameters articleId, helpId or url.\n *\n * @param external-link: Optional. Localization key of the text label of the external link. If omitted default label\n * will be used - \"Learn more\" for anchors or \"Ask VMWare\" for buttons.\n * @param articleId - Optional. Id of article in knowledge base.\n * @param helpId - Optional. Help id which will redirect to Knowledge Base.\n * @param url - Optional. External URL.\n */\n@Directive({\n   selector: \"a[external-link], button[external-link], clr-button[external-link]\",\n})\nexport class ExternalLinkDirective extends ClrButtonBaseDirective implements AfterViewInit {\n   private readonly ASK_VMWARE_DEFAULT_TEXT_KEY: string = \"vsan.common.askVMware\";\n   private readonly LEARN_MORE_DEFAULT_TEXT_KEY: string = \"vsan.common.learnMore\";\n\n   private readonly CONTAINER_CLASS: string = \"icon-name-container\";\n   private readonly NAVIGATION_EVENT_TYPE: string = \"click\";\n   private readonly LEAD_TO_NOWHERE_URL: string = \"javascript://\";\n   private readonly HTML_ELEMENT_SPAN_NAME: string = \"span\";\n   private readonly HTML_ELEMENT_ICON_NAME: string = \"clr-icon\";\n   private readonly HTML_ELEMENT_ROLE_ATTR_NAME: string = \"role\";\n   private readonly HTML_ELEMENT_ROLE_ATTR_VALUE: string = \"link\";\n   private readonly ICON_SHAPE_ATTR_NAME: string = \"shape\";\n   private readonly ICON_SHAPE_ATTR_VALUE: string = \"pop-out\";\n   private readonly ICON_SIZE_ATTR_NAME: string = \"size\";\n   private readonly ICON_SIZE_ATTR_VALUE: string = \"16\";\n   private readonly ICON_CLASS_ATTR_NAME: string = \"class\";\n   private readonly ICON_CLASS_ATTR_VALUE: string = \"link\";\n   private readonly ICON_TITLE_ATTR_NAME: string = \"title\";\n\n   private readonly KB_URL: string = \"http://kb.vmware.com/kb/\";\n\n   @Input(\"external-link\")\n   anchorText: string;\n\n   @Input()\n   articleId: string;\n\n   @Input()\n   helpId: string;\n\n   @Input()\n   url: string;\n\n   constructor(private el: ElementRef<HTMLElement>,\n         private resolver: ComponentFactoryResolver,\n         private renderer: Renderer2,\n         private navigationService: NavigationService,\n         // this variable will be initialized only if the host is clr-button\n         @Host() @Self() @Optional() clrButton: ClrButton) {\n      super(clrButton);\n   }\n\n   ngAfterViewInit(): void {\n      const element: HTMLElement = this.el.nativeElement;\n      // continue only if element is HTML link or button\n      if (!this.isLink(element) && !this.isButton(element)) {\n         // element is clr-button, wait until html button for it is resolved - handled by resloveButton\n         return;\n      }\n      this.prepareExternalLink(element);\n   }\n\n   resolveButton(clrButton: ClrButton, button: HTMLButtonElement, index: number): void {\n      // only if element is clr-button. At this point the html button is already resolved. Apply on it.\n      this.prepareExternalLink(button);\n   }\n\n   private prepareExternalLink(element: HTMLElement): void {\n      this.renderer.addClass(element, this.CONTAINER_CLASS);\n\n      this.setText(element);\n      if (this.isLink(element)) {\n         this.decorateLink(element);\n      } else {\n         this.addLinkRole(element);\n      }\n\n      this.initializeNavigationHandler(element);\n   }\n\n   private isButton(element: HTMLElement): boolean {\n      return element instanceof HTMLButtonElement;\n   }\n\n   private isLink(element: HTMLElement): boolean {\n      return element instanceof HTMLAnchorElement;\n   }\n\n   private setText(element: HTMLElement): void {\n      const span: HTMLSpanElement = this.renderer.createElement(this.HTML_ELEMENT_SPAN_NAME);\n      span.innerText = this.getText(element);\n      this.renderer.appendChild(element, span);\n\n      const icon: HTMLSpanElement = this.renderer.createElement(this.HTML_ELEMENT_ICON_NAME);\n      icon.setAttribute(this.ICON_SHAPE_ATTR_NAME, this.ICON_SHAPE_ATTR_VALUE);\n      icon.setAttribute(this.ICON_SIZE_ATTR_NAME, this.ICON_SIZE_ATTR_VALUE);\n      icon.setAttribute(this.ICON_CLASS_ATTR_NAME, this.ICON_CLASS_ATTR_VALUE);\n      // Set title of the icon for screen readers clarity\n      icon.setAttribute(this.ICON_TITLE_ATTR_NAME, VsanUiUtils.getString(\"vsan.screenReader.label.externalLink.icon\"));\n      this.renderer.appendChild(element, icon);\n   }\n\n   private getText(element: HTMLElement): string {\n      if (this.anchorText) {\n         return this.anchorText;\n      }\n      const key: string = this.isButton(element) ? this.ASK_VMWARE_DEFAULT_TEXT_KEY : this.LEARN_MORE_DEFAULT_TEXT_KEY;\n      return VsanUiUtils.getString(key);\n   }\n\n   private decorateLink(element: HTMLElement): void {\n      const linkElement: HTMLLinkElement = element as HTMLLinkElement;\n      // don't use href attribute. If omitted, the link will be not visualized properly.\n      linkElement.href = this.LEAD_TO_NOWHERE_URL;\n      // display link on same line\n      linkElement.style.display = \"inline-flex\";\n   }\n\n   private initializeNavigationHandler(element: HTMLElement): void {\n      element.addEventListener(this.NAVIGATION_EVENT_TYPE, () => {\n         if (this.helpId) {\n            this.navigationService.askVMware(this.helpId);\n            return;\n         }\n         if (this.articleId) {\n            this.navigationService.navigateToAddress(`${this.KB_URL}${this.articleId}`);\n            return;\n         }\n         if (this.url) {\n            this.navigationService.navigateToAddress(this.url);\n         }\n      });\n   }\n\n   // Indicate external navigation by assigning \"link\" role\n   private addLinkRole(element: HTMLElement): void {\n      this.renderer.setAttribute(element, this.HTML_ELEMENT_ROLE_ATTR_NAME, this.HTML_ELEMENT_ROLE_ATTR_VALUE);\n   }\n}","/* Copyright 2019 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {NgModule} from \"@angular/core\";\nimport {CommonDirectiveModule} from \"@directive/common-directive.module\";\nimport {CommonPipeModule} from \"@pipe/common-pipe.module\";\nimport {ValidationModule} from \"@component/validation/validation.module\";\nimport {ActionButtonModule} from \"@component/action-button/action-button.module\";\nimport {PromptModule} from \"@component/dialog/prompt/prompt.module\";\nimport {CommonCellsModule} from \"@component/cell/common-cells.module\";\nimport {InventoryBrowserModule} from \"@component/inventory/inventory-browser.module\";\nimport {SearchModule} from \"@component/search/search.module\";\nimport {TreeDatagridModule} from \"@component/datagrid/tree-datagrid.module\";\nimport {DatetimePickerModule} from \"@component/datetime-picker/datetime-picker.module\";\nimport {PopupListModule} from \"@component/popup-list/popup-list.module\";\nimport {VsanBreadcrumbModule} from \"@component/navigation/vsan-breadcrumb.module\";\n\n@NgModule({\n   imports: [\n         CommonDirectiveModule,\n         CommonPipeModule,\n         ValidationModule,\n         ActionButtonModule,\n         PromptModule,\n         CommonCellsModule,\n         InventoryBrowserModule,\n         SearchModule,\n         TreeDatagridModule,\n         DatetimePickerModule,\n         PopupListModule,\n         VsanBreadcrumbModule,\n   ],\n   exports: [\n      CommonDirectiveModule,\n      CommonPipeModule,\n      ValidationModule,\n      ActionButtonModule,\n      PromptModule,\n      CommonCellsModule,\n      InventoryBrowserModule,\n      SearchModule,\n      TreeDatagridModule,\n      DatetimePickerModule,\n      PopupListModule,\n      VsanBreadcrumbModule,\n   ],\n})\nexport class VsanCommonModule { }","/* Copyright 2019-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {NgModule} from \"@angular/core\";\nimport {CommonModule} from \"@angular/common\";\nimport {ClarityModule} from \"@clr/angular\";\nimport {ActionButtonSeparatorComponent} from \"@component/action-button/action-button-separator.component\";\nimport {ButtonTitleDirective} from \"@component/action-button/button-title.directive\";\nimport {ButtonGroupDirective} from \"@component/action-button/button-group.directive\";\nimport {ButtonGroupWrapDirective} from \"@component/action-button/button-group-wrap.directive\";\n\n@NgModule({\n   imports: [\n      CommonModule,\n      ClarityModule,\n   ],\n   declarations: [\n      ActionButtonSeparatorComponent,\n      ButtonGroupDirective,\n      ButtonGroupWrapDirective,\n      ButtonTitleDirective,\n   ],\n   exports: [\n      ActionButtonSeparatorComponent,\n      ButtonGroupDirective,\n      ButtonGroupWrapDirective,\n      ButtonTitleDirective,\n   ]\n})\nexport class ActionButtonModule {\n}\n"]}