{"version":3,"sources":["webpack:///src/app/vsan/common/component/datagrid/tree-datagrid.module.ts","webpack:///src/app/vsan/csd/wizard/mount/select-remote-datastore-page.component.ts","webpack:///src/app/vsan/csd/wizard/mount/check-compatibility-page.component.ts","webpack:///src/app/vsan/csd/wizard/mount/mount-wizard.module.ts","webpack:///src/app/vsan/common/component/popup-list/popup-list.module.ts","webpack:///src/app/vsan/common/component/datagrid/comparator/numeric-comparator.ts","webpack:///src/app/vsan/common/component/datagrid/comparator/base-comparator.ts","webpack:///src/app/vsan/csd/wizard/mount/select-remote-datastore-page.html","webpack:///src/app/vsan/common/component/navigation/vsan-breadcrumb.module.ts","webpack:///src/app/vsan/csd/wizard/mount/mount-remote-datastore-wizard.component.ts.MountRemoteDatastoreWizardComponent.html","webpack:///src/app/vsan/common/component/cell/common-cells.module.ts","webpack:///src/app/vsan/common/component/datagrid/filter/object-filter.ts","webpack:///src/app/vsan/csd/wizard/mount/check-compatibility-page.html","webpack:///src/app/vsan/common/component/datagrid/filter/base-filter.ts","webpack:///src/app/vsan/common/component/inventory/inventory-browser.module.ts","webpack:///src/app/vsan/csd/wizard/mount/mount-remote-datastore-wizard.component.ts","webpack:///src/app/vsan/common/vsan-common.module.ts","webpack:///src/app/vsan/common/component/search/search.module.ts","webpack:///src/app/vsan/common/component/action-button/action-button.module.ts","webpack:///src/app/vsan/common/component/datagrid/tree-datagrid.ts"],"names":["TreeDatagridModule","SelectRemoteDatastorePageComponent","datastoreComparator","serverClusterComparator","capacityComparator","freeSpaceComparator","ascSort","ASC","datastoreFilter","serverClusterFilter","availableShareableDatastores","length","pageControls","nextButtonIsDisabled","ifEmpty","getString","CheckCompatibilityPageComponent","csdMountService","getHealthIconClass","getHealthStatusClass","getHealthIconShape","getHealthStatusShape","loadingTests","hasError","selectedDatastore","datastore","moRef","getPrecheckResult","context","getModalContext","runCsdMountPrecheck","clusterRef","precheckTests","additionalMessages","getAdditionalMessages","updateSrOnlyMessage","error","setValidationErrors","isMountPossible","some","test","status","red","filter","reasons","map","alerts","type","getAlertType","failures","message","DANGER","warnings","WARNING","srOnlyMessage","e","warn","testStatus","yellow","INFO","mountWizardRoutes","path","component","MountWizardModule","PopupListModule","NumericComparator","dataField","a","b","BaseComparator","data","field","stringify","Error","compareValue","VsanBreadcrumbModule","CommonCellsModule","ObjectFilter","BaseFilter","search","label","toLowerCase","indexOf","accepts","InventoryBrowserModule","MountRemoteDatastoreWizardComponent","services","pages","VsanCommonModule","SearchModule","ActionButtonModule","TreeDatagrid","childItems","rootItems","filters","clear","refreshGrid","rowData","collapseAll","rows","forEach","r","collapse","expandAll","expand","roots","value","content","flatten","TreeFilter","push","index","splice","comparator","ascending","sortAscending","row","isExpanded","rowIndex","flattenedChildren","depth","removeCount","i","items","parent","sortedItems","sort","item1","item2","result","item","children","filteredOut","matchFilter","predicate","TreeDatagridRow","toggle","isExpandable","childField","apply","changes","_predicate","getValue","val"],"mappings":"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","file":"116-es5.js","sourcesContent":["/* Copyright 2019-2020 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {NgModule} from \"@angular/core\";\nimport {CommonModule} from \"@angular/common\";\nimport {FormsModule} from \"@angular/forms\";\nimport {ClarityModule} from \"@clr/angular\";\nimport {ValidationModule} from \"@component/validation/validation.module\";\nimport {CommonPipeModule} from \"@pipe/common-pipe.module\";\nimport {TreeExpanderComponent} from \"@component/datagrid/tree-expander.component\";\nimport {TreeColumnComponent} from \"@component/datagrid/tree-column.component\";\nimport {EnumeratedFilterComponent} from \"./filter/enumerated-filter.component\";\nimport {EnumeratedFilterItemComponent} from \"./filter/enumerated-filter-item.component\";\nimport {EnumFilterComponent} from \"@component/datagrid/filter/enum-filter.component\";\n\n@NgModule({\n   imports: [\n      CommonModule,\n      FormsModule,\n      ClarityModule,\n      ValidationModule,\n      CommonPipeModule,\n   ],\n   declarations: [\n      TreeColumnComponent,\n      TreeExpanderComponent,\n      EnumeratedFilterComponent,\n      EnumeratedFilterItemComponent,\n      EnumeratedFilterComponent,\n      EnumFilterComponent,\n   ],\n   exports: [\n      TreeColumnComponent,\n      TreeExpanderComponent,\n      EnumeratedFilterComponent,\n      EnumeratedFilterItemComponent,\n      EnumFilterComponent,\n   ],\n})\nexport class TreeDatagridModule {\n}\n","/* Copyright 2019-2020 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component} from \"@angular/core\";\nimport {InputProperty, OutputProperty, WizardPage} from \"@component/wizard/flow-metadata\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {ShareableDatastore} from \"@generated/shareable-datastore\";\nimport {ClrDatagridSortOrder} from \"@clr/angular\";\nimport {PageControls} from \"@component/wizard/flow-wizard.component\";\nimport {ObjectFilter} from \"@component/datagrid/filter/object-filter\";\nimport {NumericComparator} from \"@component/datagrid/comparator/numeric-comparator\";\nimport {StringComparator} from \"@component/datagrid/comparator/string-comparator\";\nimport {PageItem} from \"@component/wizard/page-item\";\n\n@WizardPage(VsanUiUtils.getString(\"vsan.csd.mountWizard.selectDatastore.title\"))\n@Component({\n   templateUrl: \"select-remote-datastore-page.html\"\n})\nexport class SelectRemoteDatastorePageComponent {\n\n   @InputProperty()\n   pageControls: PageControls;\n\n   @InputProperty()\n   availableShareableDatastores: ShareableDatastore[];\n\n   @OutputProperty(OutputProperty.ifEmpty(VsanUiUtils.getString(\n         \"vsan.csd.mountWizard.selectDatastore.noSelectedDatastore\")))\n   selectedDatastore: ShareableDatastore;\n\n   datastoreComparator = new StringComparator<any>(\"datastore.name\");\n   serverClusterComparator = new StringComparator<any>(\"serverCluster.name\");\n   capacityComparator = new NumericComparator<any>(\"capacityB\");\n   freeSpaceComparator = new NumericComparator<any>(\"freeSpaceB\");\n   ascSort = ClrDatagridSortOrder.ASC;\n\n   datastoreFilter = new ObjectFilter<any>(\"datastore.name\");\n   serverClusterFilter = new ObjectFilter<any>(\"serverCluster.name\");\n\n   ngOnInit() {\n      if (!this.availableShareableDatastores.length) {\n         (this.pageControls as PageItem).nextButtonIsDisabled = true;\n      }\n   }\n}","/* Copyright 2019-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component} from \"@angular/core\";\nimport {InputProperty, OutputProperty, WizardPage} from \"@component/wizard/flow-metadata\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {ShareableDatastore} from \"@generated/shareable-datastore\";\nimport {MountPrecheckTest} from \"@generated/mount-precheck-test\";\nimport {CsdMountService} from \"@generated/csd-mount-service\";\nimport {MountRemoteDatastoreContext} from \"@navigation/context/mount-remote-datastore-context\";\nimport {VsanHealthStatus} from \"@generated/vsan-health-status\";\nimport {VsanHealthUtil} from \"@util/vsan-health-util\";\nimport {Logger} from \"@util/logger\";\nimport {PageItem} from \"@component/wizard/page-item\";\nimport {PageControls} from \"@component/wizard/flow-wizard.component\";\nimport {AlertType} from \"@component/validation/alert-type\";\nimport {ScreenReaderAnnouncer} from \"@service/screen-reader-announcer.service\";\nimport {ManagedObject} from \"@service/managed-object\";\n\n@WizardPage(VsanUiUtils.getString(\"vsan.csd.mountWizard.checkCompatibility.title\"))\n@Component({\n   templateUrl: \"check-compatibility-page.html\",\n   styleUrls: [\"check-compatibility-page.scss\"],\n})\nexport class CheckCompatibilityPageComponent {\n\n   getHealthIconClass: (val: VsanHealthStatus) => string = VsanHealthUtil.getHealthStatusClass;\n   getHealthIconShape: (val: VsanHealthStatus) => string = VsanHealthUtil.getHealthStatusShape;\n\n   @InputProperty()\n   private pageControls: PageControls;\n\n   @InputProperty()\n   selectedDatastore: ShareableDatastore;\n\n   @ScreenReaderAnnouncer()\n   srOnlyMessage: string;\n\n   @OutputProperty()\n   get datastoreRef(): ManagedObject {\n      return this.selectedDatastore.datastore.moRef;\n   }\n\n   loadingTests: boolean = true;\n   hasError: boolean = false;\n\n   precheckTests: MountPrecheckTest[];\n   additionalMessages: PrecheckAdditionalMessage[];\n\n   constructor(private csdMountService: CsdMountService) {\n   }\n\n   async ngOnInit(): Promise<void> {\n      (this.pageControls as PageItem).nextButtonIsDisabled = true;\n      this.getPrecheckResult();\n   }\n\n   async getPrecheckResult(): Promise<void> {\n      try {\n         const context: MountRemoteDatastoreContext = VsanUiUtils.getModalContext();\n         this.precheckTests = await this.csdMountService.runCsdMountPrecheck(context.clusterRef,\n               this.selectedDatastore.datastore.moRef);\n         this.additionalMessages = this.getAdditionalMessages(this.precheckTests);\n         this.updateSrOnlyMessage();\n      } catch (err) {\n         Logger.error(\"Error running the mount pre-check: \" + err);\n         this.pageControls.setValidationErrors([err]);\n         this.hasError = true;\n      } finally {\n         this.loadingTests = false;\n         (this.pageControls as PageItem).nextButtonIsDisabled = !this.isMountPossible();\n      }\n   }\n\n   isMountPossible(): boolean {\n      return !this.hasError && !this.precheckTests.some(test => test.status === VsanHealthStatus.red);\n   }\n\n   private getAdditionalMessages(precheckTests: MountPrecheckTest[]): PrecheckAdditionalMessage[] {\n      return precheckTests\n            .filter(test => test.reasons)\n            .map(test => ({\n               alerts: test.reasons,\n               type: CheckCompatibilityPageComponent.getAlertType(test.status),\n            }) as PrecheckAdditionalMessage);\n   }\n\n   private updateSrOnlyMessage(): void {\n      try {\n         const failures: number = this.additionalMessages.filter(message => message.type === AlertType.DANGER).length;\n         const warnings: number = this.additionalMessages.filter(message => message.type === AlertType.WARNING).length;\n         this.srOnlyMessage =\n               VsanUiUtils.getString(\"vsan.csd.mountWizard.checkCompatibility.srOnlyMessage\", failures, warnings);\n      } catch (e) {\n         Logger.warn(\"Failed to build screenreader message.\");\n      }\n   }\n\n   private static getAlertType(testStatus: VsanHealthStatus): AlertType {\n      switch (testStatus) {\n         case VsanHealthStatus.yellow:\n            return AlertType.WARNING;\n         case VsanHealthStatus.red:\n            return AlertType.DANGER;\n         default:\n            return AlertType.INFO;\n      }\n   }\n}\n\ninterface PrecheckAdditionalMessage {\n   type: AlertType;\n   alerts: string[];\n}\n","/* Copyright 2019-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {RouterModule, Routes} from \"@angular/router\";\nimport {NgModule} from \"@angular/core\";\nimport {CommonModule} from \"@angular/common\";\nimport {ClarityModule} from \"@clr/angular\";\nimport {CommonPipeModule} from \"@pipe/common-pipe.module\";\nimport {ValidationModule} from \"@component/validation/validation.module\";\nimport {CommonDirectiveModule} from \"@directive/common-directive.module\";\nimport {FlowWizardModule} from \"@component/wizard/flow-wizard.module\";\nimport {VsanCommonModule} from \"../../../common/vsan-common.module\";\nimport {MountRemoteDatastoreWizardComponent} from \"./mount-remote-datastore-wizard.component\";\nimport {SelectRemoteDatastorePageComponent} from \"./select-remote-datastore-page.component\";\nimport {CheckCompatibilityPageComponent} from \"./check-compatibility-page.component\";\n\nconst mountWizardRoutes: Routes = [\n   {\n      path: \"\",\n      component: MountRemoteDatastoreWizardComponent\n   }\n];\n\n@NgModule({\n   imports: [\n      CommonModule,\n      ClarityModule,\n      VsanCommonModule,\n      CommonPipeModule,\n      ValidationModule,\n      CommonDirectiveModule,\n      FlowWizardModule,\n      RouterModule.forChild(mountWizardRoutes)\n   ],\n   declarations: [\n      MountRemoteDatastoreWizardComponent,\n      SelectRemoteDatastorePageComponent,\n      CheckCompatibilityPageComponent\n   ],\n   entryComponents: [\n      SelectRemoteDatastorePageComponent,\n      CheckCompatibilityPageComponent\n   ]\n})\nexport class MountWizardModule {\n}","/* Copyright 2019 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {NgModule} from \"@angular/core\";\nimport {CommonModule} from \"@angular/common\";\nimport {ClarityModule} from \"@clr/angular\";\nimport {CommonPipeModule} from \"@pipe/common-pipe.module\";\nimport {PopupListComponent} from \"@component/popup-list/popup-list.component\";\nimport {PopupListItemDirective} from \"@component/popup-list/popup-list-item.directive\";\n\n@NgModule({\n   imports: [\n      CommonModule,\n      ClarityModule,\n      CommonPipeModule\n   ],\n   declarations: [\n      PopupListComponent,\n      PopupListItemDirective\n   ],\n   exports: [\n      PopupListComponent,\n      PopupListItemDirective\n   ]\n})\nexport class PopupListModule {\n}\n","/* Copyright 2019 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {BaseComparator} from \"@component/datagrid/comparator/base-comparator\";\n\nexport class NumericComparator<T> extends BaseComparator<T> {\n   constructor(private dataField: string) {\n      super();\n   }\n\n   protected compareValue(a: T, b: T): number {\n      return a[this.dataField] - b[this.dataField];\n   }\n}\n","/* Copyright 2019 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {ClrDatagridComparatorInterface} from \"@clr/angular\";\nimport { VsanUiUtils } from '@util/vsan-util';\n\n/**\n * Basic comparator, the child component should override the compareValue method\n * We don't expect the compared value to be json format\n */\nexport class BaseComparator<T> implements ClrDatagridComparatorInterface<T> {\n   protected stringify(data: T, field: string): string {\n      return VsanUiUtils.stringify(data, field);\n   }\n\n   protected compareValue(a: T, b: T): number {\n      throw new Error(\"Method not implemented\");\n   }\n\n   compare(a: T, b: T): number {\n      return this.compareValue(a, b);\n   }\n}","<!--Copyright 2019 VMware, Inc. All rights reserved. VMware Confidential-->\n<clr-datagrid [(clrDgSingleSelected)]=\"selectedDatastore\">\n   <clr-dg-column class=\"datastore-column\"\n                  [clrDgSortBy]=\"datastoreComparator\"\n                  [clrDgSortOrder]=\"ascSort\">\n         {{\"vsan.csd.datastoreSharing.grid.datastore\" | localized}}\n      <clr-dg-string-filter [clrDgStringFilter]=\"datastoreFilter\"></clr-dg-string-filter>\n   </clr-dg-column>\n   <clr-dg-column class=\"server-cluster-column\"\n                  [clrDgSortBy]=\"serverClusterComparator\">\n         {{\"vsan.csd.datastoreSharing.grid.serverCluster\" | localized}}\n      <clr-dg-string-filter [clrDgStringFilter]=\"serverClusterFilter\"></clr-dg-string-filter>\n   </clr-dg-column>\n   <clr-dg-column class=\"storage-size-column\"\n                  [clrDgSortBy]=\"capacityComparator\">\n         {{\"vsan.csd.datastoreSharing.grid.capacity\" | localized}}\n   </clr-dg-column>\n   <clr-dg-column class=\"storage-size-column\"\n                  [clrDgSortBy]=\"freeSpaceComparator\">\n         {{\"vsan.csd.datastoreSharing.grid.freeSpace\" | localized}}\n   </clr-dg-column>\n\n   <clr-dg-placeholder>{{\"vsan.csd.mountWizard.selectDatastore.noAvailableDatastores\" | localized}}</clr-dg-placeholder>\n\n   <clr-dg-row\n         *clrDgItems=\"let datastore of availableShareableDatastores\"\n         [clrDgItem]=\"datastore\">\n      <clr-dg-cell vsan-show-title>\n         <clr-icon [attr.shape]=\"datastore.datastore.primaryIconId\"></clr-icon>\n         {{datastore.datastore.name}}\n      </clr-dg-cell>\n      <clr-dg-cell vsan-show-title>\n         <clr-icon [attr.shape]=\"datastore.serverCluster.primaryIconId\"></clr-icon>\n         {{datastore.serverCluster.name}}\n      </clr-dg-cell>\n      <clr-dg-cell>\n         {{datastore.capacityB | fileSize}}\n      </clr-dg-cell>\n      <clr-dg-cell>\n         {{datastore.freeSpaceB | fileSize}}\n      </clr-dg-cell>\n   </clr-dg-row>\n\n   <clr-dg-footer>\n      <clr-dg-pagination #pagination></clr-dg-pagination>\n   </clr-dg-footer>\n</clr-datagrid>\n\n","/* Copyright 2020 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {NgModule} from \"@angular/core\";\nimport {VsanBreadcrumbNavComponent} from \"./vsan-breadcrumb-nav.component\";\nimport {ClarityModule} from \"@clr/angular\";\nimport {CommonModule} from \"@angular/common\";\nimport {CommonDirectiveModule} from \"@directive/common-directive.module\";\nimport {CommonPipeModule} from \"@pipe/common-pipe.module\";\n\n@NgModule({\n   imports: [CommonModule, ClarityModule, CommonDirectiveModule, CommonPipeModule],\n   declarations: [VsanBreadcrumbNavComponent],\n   exports: [\n      VsanBreadcrumbNavComponent,\n   ],\n})\nexport class VsanBreadcrumbModule {}\n","\n      <vsan-flow-wizard\n            [title]=\"'vsan.csd.mountWizard.title' | localized\"\n            [pageSets]=\"pages\"\n            [startingTaskProperty]=\"'mountRemoteDatastore'\"\n            [contextProperties]=\"context\"\n            [services]=\"services\">\n      </vsan-flow-wizard>","/* Copyright 2019-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {NgModule} from \"@angular/core\";\nimport {CommonModule} from \"@angular/common\";\nimport {FormsModule} from \"@angular/forms\";\nimport {ClarityModule} from \"@clr/angular\";\nimport {ValidationModule} from \"@component/validation/validation.module\";\nimport {CommonPipeModule} from \"@pipe/common-pipe.module\";\nimport {CommonDirectiveModule} from \"@directive/common-directive.module\";\nimport {HealthStatusCell} from \"@component/cell/health-status-cell.component\";\nimport {LabelCell} from \"@component/cell/label-cell.component\";\nimport {StoragePolicyCell} from \"@component/cell/storage-policy-cell.component\";\nimport {MorCell} from \"@component/cell/mor-cell.component\";\nimport {IconItemComponent} from \"@component/cell/icon-item.component\";\nimport {HealthStateItemComponent} from \"@component/cell/health-state-item.component\";\nimport {ListCell} from \"@component/cell/list-cell.component\";\nimport {PspHealthStateItemComponent} from \"@component/cell/psp-health-state-item.component\";\nimport {HealthTestValueComponent} from \"@component/cell/health-test-value.component\";\nimport {HealthLinkCellComponent} from \"@component/cell/health-link-cell.component\";\nimport {HealthMorCellComponent} from \"@component/cell/health-mor-cell.component\";\n\n@NgModule({\n   imports: [\n      CommonModule,\n      FormsModule,\n      ClarityModule,\n      ValidationModule,\n      CommonPipeModule,\n      CommonDirectiveModule,\n   ],\n   // TODO: (vasilevd) Move health specific components to a separate common health module\n   declarations: [\n      HealthStatusCell,\n      HealthTestValueComponent,\n      LabelCell,\n      StoragePolicyCell,\n      MorCell,\n      HealthMorCellComponent,\n      ListCell,\n      IconItemComponent,\n      HealthStateItemComponent,\n      PspHealthStateItemComponent,\n      HealthLinkCellComponent,\n   ],\n   exports: [\n      HealthStatusCell,\n      HealthTestValueComponent,\n      LabelCell,\n      StoragePolicyCell,\n      MorCell,\n      HealthMorCellComponent,\n      ListCell,\n      IconItemComponent,\n      HealthStateItemComponent,\n      PspHealthStateItemComponent,\n      HealthLinkCellComponent,\n   ],\n})\nexport class CommonCellsModule {\n}\n","/* Copyright 2019-2020 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {BaseFilter} from \"./base-filter\";\nimport {VsanUiUtils} from '@util/vsan-util';\n\n/**\n * Extends BaseFilter by allowing the consumer to filter the hierarchical data field.\n * It tries to find the final string value of the data field by visiting the attribute hirarchy.\n */\nexport class ObjectFilter<T> extends BaseFilter<T> {\n   constructor(protected dataField: string){\n      super();\n   }\n\n   protected stringify(data: T): string {\n      return VsanUiUtils.stringify(data, this.dataField);\n   }\n}\n","<!--Copyright 2019-2022 VMware, Inc. All rights reserved. VMware Confidential-->\n<p class=\"page-description\">\n   {{'vsan.csd.mountWizard.checkCompatibility.description' | localized : selectedDatastore.datastore.name}}\n</p>\n\n<div *ngIf=\"loadingTests\" class=\"spinner spinner-md\"></div>\n<ng-container *ngIf=\"!loadingTests\">\n   <ng-container *ngIf=\"!hasError\">\n      <div class=\"precheck-tests-container\">\n         <div class=\"precheck-test\" *ngFor=\"let test of precheckTests\">\n            <clr-icon class=\"is-solid\"\n                      [ngClass]=[getHealthIconClass(test.status)]\n                      [attr.shape]=\"getHealthIconShape(test.status)\">\n            </clr-icon>\n            <span>{{test.description}}</span>\n         </div>\n      </div>\n\n      <div class=\"precheck-messages-container\">\n         <vsan-validation *ngFor=\"let message of additionalMessages\"\n                          [alertType]=\"message.type\"\n                          [(alerts)]=\"message.alerts\"\n                          [allowClose]=\"false\"\n                          [markedForFocus]=\"false\">\n         </vsan-validation>\n      </div>\n   </ng-container>\n</ng-container>\n","/* Copyright 2017-2020 VMware, Inc. All rights reserved. -- VMware Confidential */\n\nimport {Filter, TreeDatagridRow} from \"../tree-datagrid\";\nimport {ClrDatagridStringFilterInterface} from \"@clr/angular\";\n\n/**\n * Abstract filter class that needs to be extended in order to implement custom filtration.\n * The class has a single abstract method that takes an object of type T and returns its\n * string representation.\n */\nexport class BaseFilter<T> implements ClrDatagridStringFilterInterface<T>, Filter {\n\n   accepts(data: T, search: string): boolean {\n      // Handle correctly TreeDatagrid components\n      if (data instanceof TreeDatagridRow) {\n         data = data.data;\n      }\n\n      let label: string = this.stringify(data);\n      if (label) {\n         // Compare ignoring the case\n         return label.toLowerCase().indexOf(search.toLowerCase()) != -1;\n      } else {\n         return false;\n      }\n   }\n\n   match(data: T, search: string): boolean {\n      return this.accepts(data, search);\n   }\n\n   protected stringify(data: T): string  {\n      return data + \"\";\n   }\n\n}\n\n","/* Copyright 2019-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {NgModule} from \"@angular/core\";\nimport {CommonModule} from \"@angular/common\";\nimport {FormsModule} from \"@angular/forms\";\nimport {ClarityModule} from \"@clr/angular\";\nimport {CommonPipeModule} from \"@pipe/common-pipe.module\";\nimport {InventoryBrowserComponent} from \"@component/inventory/inventory-browser.component\";\nimport {InventoryNodeComponent} from \"@component/inventory/inventory-node.component\";\nimport {WitnessCandidateInventoryService} from \"@generated/witness-candidate-inventory-service\";\nimport {DatacenterInventoryService} from \"@generated/datacenter-inventory-service\";\nimport {NetworkInventoryService} from \"@generated/network-inventory-service\";\nimport {ComputeInventoryService} from \"@generated/compute-inventory-service\";\nimport {IoInsightInventoryService} from \"@generated/io-insight-inventory-service\";\nimport {SearchModule} from \"@component/search/search.module\";\nimport {TreeNodeComponent} from \"@component/inventory/tree-view/tree-node.component\";\nimport {TreeViewComponent} from \"@component/inventory/tree-view/tree-view.component\";\nimport {DropdownObjectSelectorComponent} from \"@component/inventory/dropdown-object-selector/dropdown-object-selector.component\";\nimport {CommonDirectiveModule} from \"@directive/common-directive.module\";\nimport {InventoryNodesComponent} from \"@component/inventory/inventory-nodes.component\";\nimport {TreeNodesComponent} from \"@component/inventory/tree-view/tree-nodes.component\";\n\n@NgModule({\n   imports: [\n      CommonModule,\n      FormsModule,\n      ClarityModule,\n      CommonPipeModule,\n      SearchModule,\n      CommonDirectiveModule,\n   ],\n   declarations: [\n      InventoryBrowserComponent,\n      InventoryNodesComponent,\n      InventoryNodeComponent,\n      TreeNodeComponent,\n      TreeNodesComponent,\n      TreeViewComponent,\n      DropdownObjectSelectorComponent,\n   ],\n   exports: [\n      InventoryBrowserComponent,\n      DropdownObjectSelectorComponent,\n      TreeViewComponent,\n   ],\n   providers: [\n      WitnessCandidateInventoryService,\n      DatacenterInventoryService,\n      NetworkInventoryService,\n      ComputeInventoryService,\n      IoInsightInventoryService,\n   ],\n})\nexport class InventoryBrowserModule {\n}","/* Copyright 2019 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, OnInit} from \"@angular/core\";\nimport {PageSet} from \"@component/wizard/flow-wizard.component\";\nimport {SelectRemoteDatastorePageComponent} from \"./select-remote-datastore-page.component\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {MountRemoteDatastoreContext} from \"@navigation/context/mount-remote-datastore-context\";\nimport {CheckCompatibilityPageComponent} from \"./check-compatibility-page.component\";\nimport {CsdMountService} from \"@generated/csd-mount-service\";\n\n@Component({\n   selector: \"vsan-mount-remote-datastore-wizard\",\n   template: `\n      <vsan-flow-wizard\n            [title]=\"'vsan.csd.mountWizard.title' | localized\"\n            [pageSets]=\"pages\"\n            [startingTaskProperty]=\"'mountRemoteDatastore'\"\n            [contextProperties]=\"context\"\n            [services]=\"services\">\n      </vsan-flow-wizard>`\n})\nexport class MountRemoteDatastoreWizardComponent implements OnInit {\n   // Get contextProperties from the modal builder in order to\n   // enable opening it across different context objects (datacenters, clusters, etc.)\n   context: MountRemoteDatastoreContext = VsanUiUtils.getModalContext();\n   pages: PageSet[];\n   services: any = [CsdMountService];\n\n   async ngOnInit() {\n      this.pages = [\n         new PageSet([SelectRemoteDatastorePageComponent, CheckCompatibilityPageComponent])\n      ];\n   }\n}\n","/* Copyright 2019 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {NgModule} from \"@angular/core\";\nimport {CommonDirectiveModule} from \"@directive/common-directive.module\";\nimport {CommonPipeModule} from \"@pipe/common-pipe.module\";\nimport {ValidationModule} from \"@component/validation/validation.module\";\nimport {ActionButtonModule} from \"@component/action-button/action-button.module\";\nimport {PromptModule} from \"@component/dialog/prompt/prompt.module\";\nimport {CommonCellsModule} from \"@component/cell/common-cells.module\";\nimport {InventoryBrowserModule} from \"@component/inventory/inventory-browser.module\";\nimport {SearchModule} from \"@component/search/search.module\";\nimport {TreeDatagridModule} from \"@component/datagrid/tree-datagrid.module\";\nimport {DatetimePickerModule} from \"@component/datetime-picker/datetime-picker.module\";\nimport {PopupListModule} from \"@component/popup-list/popup-list.module\";\nimport {VsanBreadcrumbModule} from \"@component/navigation/vsan-breadcrumb.module\";\n\n@NgModule({\n   imports: [\n         CommonDirectiveModule,\n         CommonPipeModule,\n         ValidationModule,\n         ActionButtonModule,\n         PromptModule,\n         CommonCellsModule,\n         InventoryBrowserModule,\n         SearchModule,\n         TreeDatagridModule,\n         DatetimePickerModule,\n         PopupListModule,\n         VsanBreadcrumbModule,\n   ],\n   exports: [\n      CommonDirectiveModule,\n      CommonPipeModule,\n      ValidationModule,\n      ActionButtonModule,\n      PromptModule,\n      CommonCellsModule,\n      InventoryBrowserModule,\n      SearchModule,\n      TreeDatagridModule,\n      DatetimePickerModule,\n      PopupListModule,\n      VsanBreadcrumbModule,\n   ],\n})\nexport class VsanCommonModule { }","/* Copyright 2019 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {NgModule} from \"@angular/core\";\nimport {CommonModule} from \"@angular/common\";\nimport {FormsModule} from \"@angular/forms\";\nimport {ClarityModule} from \"@clr/angular\";\nimport {CommonPipeModule} from \"@pipe/common-pipe.module\";\nimport {SearchComponent} from \"@component/search/search.component\";\n\n@NgModule({\n   imports: [\n      CommonModule,\n      FormsModule,\n      ClarityModule,\n      CommonPipeModule\n   ],\n   declarations: [\n      SearchComponent\n   ],\n   exports: [\n      SearchComponent\n   ],\n})\nexport class SearchModule {\n}\n","/* Copyright 2019-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {NgModule} from \"@angular/core\";\nimport {CommonModule} from \"@angular/common\";\nimport {ClarityModule} from \"@clr/angular\";\nimport {ActionButtonSeparatorComponent} from \"@component/action-button/action-button-separator.component\";\nimport {ButtonTitleDirective} from \"@component/action-button/button-title.directive\";\nimport {ButtonGroupDirective} from \"@component/action-button/button-group.directive\";\nimport {ButtonGroupWrapDirective} from \"@component/action-button/button-group-wrap.directive\";\n\n@NgModule({\n   imports: [\n      CommonModule,\n      ClarityModule,\n   ],\n   declarations: [\n      ActionButtonSeparatorComponent,\n      ButtonGroupDirective,\n      ButtonGroupWrapDirective,\n      ButtonTitleDirective,\n   ],\n   exports: [\n      ActionButtonSeparatorComponent,\n      ButtonGroupDirective,\n      ButtonGroupWrapDirective,\n      ButtonTitleDirective,\n   ]\n})\nexport class ActionButtonModule {\n}\n","/* Copyright 2016 VMware, Inc. All rights reserved. -- VMware Confidential */\n\nimport {BehaviorSubject} from \"rxjs\";\nimport {ClrDatagridFilterInterface} from \"@clr/angular\";\n\n/**\n * Hierarchical data provider.\n * This is a additional structure to the Clarity Datagrid that supports hierarchical data rendering.\n */\nexport class TreeDatagrid {\n\n   public static forChildProperty(childField: string, rowData?: any[]) {\n      return new TreeDatagrid(item => item[childField], rowData);\n   }\n\n   /**\n    * The data objects that are to be rendered as first-level rows.\n    */\n   protected roots: any[];\n\n   /**\n    * The flat row structure consisting of the root objects and their children\n    * in case the parents are expanded. Sorting and filtering are reflected here.\n    */\n   protected content: TreeDatagridRow[];\n\n   /**\n    * List of filters to be applied on the data.\n    */\n   protected filters: TreeFilter[] = [];\n\n   /**\n    * The comparator to be used to sort the items and their children.\n    */\n   public comparator: (item1: any, item2: any) => number;\n\n   /**\n    * Sorting direction.\n    */\n   public sortAscending: boolean;\n\n   /**\n    * @param childItems lambda for extracting the children of a given data object\n    * @param rootItems (optional) the initial data objects\n    */\n   constructor(private childItems: (parent: any) => any[], rootItems?: any[]) {\n      this.rootItems = rootItems;\n   }\n\n   /**\n    * Removes all items.\n    */\n   public clear = () => this.rootItems = [];\n\n   /**\n    * Sets the given data objects as content.\n    */\n   public refreshGrid = (rowData: any[]) => this.rootItems = rowData;\n\n   public set rootItems(value: any[]) {\n      this.roots = value ? value : [];\n      this.content = this.flatten(this.roots);\n   }\n\n   /**\n    * root data objects\n    */\n   public get rootItems(): any[] {\n      return this.roots;\n   }\n\n   /**\n    * The flat row structure consisting of the root objects and their children\n    * in case the parents are expanded. Sorting and filtering are reflected here.\n    */\n   public get rows(): TreeDatagridRow[] {\n      return this.content;\n   }\n\n   /**\n    * Registers a new filter in the data provider.\n    * Initially the filter will accept all items.\n    * The consumer can assign a predicate to the TreeFilter object\n    * to add filtering rule. All registered filters' predicates are\n    * evaluated using AND operator.\n    */\n   public registerFilter(): TreeFilter {\n      let filter: TreeFilter = new TreeFilter(() => this.content = this.flatten(this.rootItems));\n      this.filters.push(filter);\n      return filter;\n   }\n\n   public unregisterFilter(value: TreeFilter) {\n      let index: number = this.filters.indexOf(value);\n      if (index != -1) {\n         this.filters.splice(index, 1);\n      }\n   }\n\n   /**\n    * Applies sorting comparator and direction for the data provider.\n    */\n   public sort(comparator: (item1: any, item2: any) => number, ascending: boolean = true) {\n      this.comparator = comparator;\n      this.sortAscending = ascending;\n\n      // refresh content, will expand all nodes\n      this.content = this.flatten(this.rootItems);\n   }\n\n   public collapseAll = () => this.rows.forEach(r => this.collapse(r));\n\n   public expandAll = () => this.rows.forEach(r => this.expand(r));\n\n   protected expand(row: TreeDatagridRow) {\n      if (row.isExpanded) {\n         // already expanded\n         return;\n      }\n\n      let rowIndex = this.content.indexOf(row);\n      if (rowIndex == -1) {\n         // row is filtered out\n         return;\n      }\n\n      let flattenedChildren: TreeDatagridRow[] = this.flatten(this.childItems(row.data), row.depth + 1);\n      if (flattenedChildren.length > 0) {\n         this.content.splice(rowIndex + 1, 0, ... flattenedChildren);\n      }\n\n      row.isExpanded = true;\n   }\n\n   protected collapse(row: TreeDatagridRow) {\n      if (!row.isExpanded) {\n         // already collapsed\n         row.isExpanded = false;\n         return;\n      }\n\n      let rowIndex = this.content.indexOf(row);\n      if (rowIndex == -1) {\n         // row is filtered out\n         return;\n      }\n\n      let removeCount: number = 0;\n      for (let i = rowIndex + 1; i < this.content.length && row.depth < this.content[i].depth; i++) {\n         removeCount ++;\n      }\n\n      this.content.splice(rowIndex + 1, removeCount);\n      row.isExpanded = false;\n   }\n\n   // returns flattened list of the specified items and their children (and their children);\n   // sorting and filter are applied;\n   // items are returned in expanded state\n   protected flatten(items: any[], depth: number = 0, parent?: any): TreeDatagridRow[] {\n      if (!items) {\n         return [];\n      }\n\n      let sortedItems: any[] = [... items];\n      if (this.comparator) {\n         sortedItems.sort((item1: any, item2: any) => (this.sortAscending ? 1 : -1) * this.comparator(item1, item2));\n      }\n\n      let result: TreeDatagridRow[] = [];\n\n      for (let item of sortedItems) {\n\n         let childItems: any[] = this.childItems(item);\n\n         // flattened children, including their children\n         let children: TreeDatagridRow[] = this.flatten(childItems, depth + 1, item);\n\n         let filteredOut: boolean = false;\n         for (let filter of this.filters) {\n            // filter out items only if the filter is not applicable for the item or it's parent\n            const matchFilter: boolean = filter.predicate(item) || (!!parent && filter.predicate(parent));\n            if (!matchFilter) {\n               filteredOut = true;\n            }\n         }\n         if (!filteredOut || children.length > 0) {\n            let row: TreeDatagridRow = new TreeDatagridRow();\n            row.data = item;\n            row.toggle = () => row.isExpanded ? this.collapse(row) : this.expand(row);\n            row.depth = depth;\n            row.isExpanded = true;\n            row.isExpandable = childItems && childItems.length > 0;\n\n            result.push(row, ... children);\n         }\n      }\n\n      return result;\n   }\n\n}\n\n/**\n * Represents a single row in a flattened tree data provider.\n */\nexport class TreeDatagridRow {\n\n   /**\n    * The data object for the row\n    */\n   public data: any;\n\n   /**\n    * Will be true if the row has children\n    */\n   public isExpandable: boolean;\n\n   /**\n    * Will be true if the row is currently expanded\n    */\n   public isExpanded: boolean;\n\n   /**\n    * Will flip the row's expanded/collapsed state\n    */\n   public toggle: () => void;\n\n   /**\n    * The nesting level the row is rendered at\n    */\n   public depth: number;\n\n}\n\nexport interface Filter  {\n   match(data: any, filter:string): boolean;\n}\n\n/**\n * Allows specifying filtering predicate for the data provider.\n * @see TreeDatagrid.registerFilter\n */\nexport class TreeFilter implements ClrDatagridFilterInterface<any> {\n\n   private _predicate: (item: any) => boolean;\n   changes = new BehaviorSubject<boolean>(false);\n\n   constructor(private apply: () => void) {\n      this.clear();\n   }\n\n   public clear() {\n      this._predicate = (item: any) => true;\n      this.apply();\n   }\n\n   public set predicate(predicate: (item: any) => boolean) {\n      if (!predicate) {\n         this.clear();\n      } else {\n         this._predicate = predicate;\n         this.apply();\n      }\n   }\n\n   public get predicate(): (item: any) => boolean {\n      return this._predicate;\n   }\n\n   // Used by clarity filter\n   isActive(): boolean {\n      return this.changes.getValue();\n   }\n\n   // Used by clarity filter\n   accepts(val: any): boolean {\n      return true;\n   }\n}"]}