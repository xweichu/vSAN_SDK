{"version":3,"sources":["webpack:///src/app/vsan/file-services/enable-service/enable-file-service.component.ts","webpack:///src/app/vsan/file-services/enable-service/enable-file-service.html","webpack:///src/app/vsan/file-services/enable-service/enable-file-service.module.ts","webpack:///src/app/vsan/common/service/flow/loader-name.ts"],"names":["EnableFileServiceComponent","fileService","networkInventoryService","dataAccessService","healthService","taskMonitorService","clusterRef","contextObject","startUpload","Icon","context","getModalContext","existingOvfVersion","precheckResult","ovfInstalled","fsvmVersion","hostVersion","networkRef","network","networkNamePromise","Promise","resolve","getNetworkName","all","getRegisteredOvfs","getExternalProxySettings","registeredOvfs","externalProxyData","networkName","canUseExistingOvf","some","ovf","isCompatible","version","downloadTask","find","isInternetAccessEnabled","enableInternetAccess","getPublicOvfProps","publicOvfProps","ovfSettings","getOvfOption","event","node","data","isLeafNode","nodeRef","name","showNetworkBrowser","alertMessages","blockEnableButton","getString","isUseExisting","isManualDownload","registerOvfTask","monitorDownloadTask","enableFileService","validateUploadOvf","validationResult","ovfFileSelector","validate","errors","length","EXISTING","isEmpty","url","MANUAL","DOWNLOAD","downloadPublicOvf","getAwaitResult","configureFileService","Factory","create","task","closeModalDialog","ON_INIT","REGISTER","MONITOR","routes","path","component","EnableFileServiceModule","LoaderName"],"mappings":"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","file":"141-es5.js","sourcesContent":["/* Copyright 2022 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, OnInit, ViewChild} from \"@angular/core\";\nimport {InventorySelectionEvent} from \"@component/inventory/inventory-node\";\nimport {ExternalProxySettingsConfig} from \"@generated/external-proxy-settings-config\";\nimport {NetworkInventoryService} from \"@generated/network-inventory-service\";\nimport {VsanFileServiceCommonConfig} from \"@generated/vsan-file-service-common-config\";\nimport {VsanFileServiceConfigService} from \"@generated/vsan-file-service-config-service\";\nimport {VsanFileServiceOvf} from \"@generated/vsan-file-service-ovf\";\nimport {VsanFileServiceOvfProps} from \"@generated/vsan-file-service-ovf-props\";\nimport {VsanHealthPropertyProvider} from \"@generated/vsan-health-property-provider\";\nimport {DataAccessService} from \"@service/data-access.service\";\nimport {LoaderName} from \"@service/flow/loader-name\";\nimport {Loader} from \"@service/flow/loader.decorator\";\nimport {LoadingIndicator} from \"@service/flow/loading-indicator.decorator\";\nimport {ManagedObject} from \"@service/managed-object\";\nimport {TaskMonitorService} from \"@service/task-monitor-service\";\nimport {Icon} from \"@util/icon\";\nimport {StringUtil} from \"@util/string-util\";\nimport {Version} from \"@util/version\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {FileServicesOvfSettings} from \"../shared/file-services-ovf-settings.component\";\nimport {OvfOption, OvfSettings} from \"../shared/file-services-ovf-settings.data\";\nimport {EnableFileServiceModalContext} from \"./enable-file-service-modal-context.data\";\n\n@Component({\n   selector: \"vsan-enable-file-service-dialog\",\n   templateUrl: \"enable-file-service.html\",\n   styleUrls: [\"enable-file-service.scss\"],\n})\nexport class EnableFileServiceComponent implements OnInit {\n   @LoadingIndicator({\n      name: [LoaderName.ON_INIT, LoaderName.REGISTER, LoaderName.MONITOR],\n   })\n   busy: boolean;\n   blockEnableButton: boolean;\n   alertMessages: string[];\n\n   networkRef: ManagedObject;\n   networkName: string;\n   clusterRef: ManagedObject = ManagedObject.contextObject;\n   publicOvfProps: VsanFileServiceOvfProps;\n   ovfSettings: OvfSettings;\n   isInternetAccessEnabled: boolean;\n   downloadTask: ManagedObject;\n   existingOvfVersion: Version;\n   fsvmVersion: Version;\n   hostVersion: Version;\n   canUseExistingOvf: boolean;\n   startUpload: boolean = false;\n   showNetworkBrowser: boolean;\n   Icon: typeof Icon = Icon;\n\n   @ViewChild(\"ovfFileSelector\")\n   ovfFileSelector: FileServicesOvfSettings;\n\n   constructor(private fileService: VsanFileServiceConfigService,\n         public networkInventoryService: NetworkInventoryService,\n         private dataAccessService: DataAccessService,\n         private healthService: VsanHealthPropertyProvider,\n         private taskMonitorService: TaskMonitorService) {\n   }\n\n   @Loader({name: LoaderName.ON_INIT})\n   async ngOnInit(): Promise<void> {\n      const context: EnableFileServiceModalContext = VsanUiUtils.getModalContext() as EnableFileServiceModalContext;\n      this.existingOvfVersion = new Version(context.precheckResult.ovfInstalled);\n      this.fsvmVersion = new Version(context.precheckResult.fsvmVersion);\n      this.hostVersion = new Version(context.precheckResult.hostVersion);\n      this.networkRef = context.network;\n      const networkNamePromise: Promise<string> = !this.networkRef\n            ? Promise.resolve(\"\")\n            : this.networkInventoryService.getNetworkName(this.networkRef);\n      let registeredOvfs: VsanFileServiceOvf[];\n      let externalProxyData: ExternalProxySettingsConfig;\n      [registeredOvfs, externalProxyData, this.networkName] = await Promise.all([\n         this.fileService.getRegisteredOvfs(this.clusterRef),\n         this.healthService.getExternalProxySettings(this.clusterRef),\n         networkNamePromise,\n      ]);\n      this.canUseExistingOvf =\n            registeredOvfs.some(ovf => ovf.isCompatible && ovf.version === context.precheckResult.ovfInstalled);\n      this.downloadTask = registeredOvfs.find(ovf => ovf.downloadTask)?.downloadTask;\n      this.isInternetAccessEnabled = externalProxyData.enableInternetAccess;\n\n      if (this.isInternetAccessEnabled) {\n         this.publicOvfProps = await this.fileService.getPublicOvfProps(this.clusterRef);\n      }\n      this.ovfSettings = new OvfSettings(this.getOvfOption(), this.publicOvfProps);\n   }\n\n   selectNode(event: InventorySelectionEvent): void {\n      if (event.node.data.isLeafNode) {\n         this.networkRef = event.node.data.nodeRef;\n         this.networkName = event.node.data.name || \"\";\n         this.showNetworkBrowser = false;\n      }\n   }\n\n   async enable(): Promise<void> {\n      this.alertMessages = null;\n      this.blockEnableButton = true;\n      if (!this.networkName) {\n         this.alertMessages = [VsanUiUtils.getString(\"vsan.services.fileservices.wizard.ipPool.validation.network.empty\")];\n         this.blockEnableButton = false;\n         return;\n      }\n      // auto download OVF files, hold until the download task completes\n      if (!this.ovfSettings.isUseExisting && !this.ovfSettings.isManualDownload) {\n         await this.registerOvfTask();\n         await this.monitorDownloadTask();\n      }\n      if (!this.ovfSettings.isManualDownload) {\n         return await this.enableFileService();\n      }\n      // Manually upload OVF files, the enable fs task starts after the uploading completes,\n      // goto ovfUploadComplete method for details\n      await this.validateUploadOvf();\n   }\n\n   /**\n    * Check the validation result of the local OVF files, and start uploading them if everything is OK\n    */\n   private async validateUploadOvf(): Promise<void> {\n      const validationResult: string[] | Promise<string[]> = this.ovfFileSelector.validate();\n      if (validationResult) {\n         if (validationResult instanceof Promise) {\n            const errors: string[] = await validationResult;\n            if (errors?.length) {\n               this.alertMessages = errors;\n               this.blockEnableButton = false;\n               return;\n            }\n            // This triggers the uploading task\n            this.startUpload = true;\n         } else {\n            this.alertMessages = validationResult;\n            this.blockEnableButton = false;\n         }\n      }\n   }\n\n   private getOvfOption(): OvfOption {\n      if (this.canUseExistingOvf) {\n         return OvfOption.EXISTING;\n      }\n      if (!this.isInternetAccessEnabled || StringUtil.isEmpty(this.publicOvfProps?.url)) {\n         return OvfOption.MANUAL;\n      }\n      return OvfOption.DOWNLOAD;\n   }\n\n   @Loader({name: LoaderName.REGISTER})\n   private async registerOvfTask(): Promise<void> {\n      this.downloadTask = await this.fileService.downloadPublicOvf(this.clusterRef);\n   }\n\n   @Loader({name: LoaderName.MONITOR})\n   private async monitorDownloadTask(): Promise<void> {\n      this.blockEnableButton = true;\n      await this.taskMonitorService.getAwaitResult(this.downloadTask);\n   }\n\n   private async enableFileService(): Promise<void> {\n      const task: ManagedObject = await this.fileService.configureFileService(this.clusterRef,\n            VsanFileServiceCommonConfig.Factory.create(null, this.networkRef, false, false));\n      VsanUiUtils.closeModalDialog(task);\n   }\n\n   async ovfUploadComplete(): Promise<void> {\n      this.startUpload = false;\n      await this.enableFileService();\n   }\n\n   ovfUploadCancel(): void {\n      this.startUpload = false;\n      this.blockEnableButton = false;\n   }\n\n   ovfUploadError(errors: string[]): void {\n      this.alertMessages = errors;\n      this.startUpload = false;\n      this.blockEnableButton = false;\n   }\n}\n","<!--Copyright 2022 VMware, Inc. All rights reserved. -- VMware Confidential-->\n<vsan-create-prompt\n      [title]=\"'vsan.generalconfig.fileServices.edit.toggle' | localized\"\n      [blockContent]=\"busy\"\n      [blockButton]=\"blockEnableButton\"\n      [confirmText]=\"'vsan.common.enable' | localized\"\n      [(alertMessages)]=\"alertMessages\"\n      (onConfirm)=\"enable()\">\n   <vsan-validation id=\"network-security-warning\"\n                    [isSmall]=\"true\"\n                    [alertType]=\"'info'\"\n                    [allowClose]=\"false\"\n                    [alert]=\"'vsan.services.fileservices.wizard.ipPool.input.network.security.warning' | localized\">\n   </vsan-validation>\n   <h5 id=\"file-service-network\">{{\"vsan.services.network.title\" | localized}}</h5>\n   <div id=\"network-container\" class=\"clr-row\">\n      <label class=\"clr-control-label clr-col-md-4\" for=\"browse-network\">\n         {{\"vsan.services.fileservices.wizard.ipPool.input.network\"| localized}}\n      </label>\n      <div class=\"clr-control-container clr-col-md-8\">\n         <clr-dropdown [clrCloseMenuOnItemClick]=\"true\">\n            <button id=\"browse-network\"\n                    class=\"dropdown-toggle btn btn-link\"\n                    (click)=\"showNetworkBrowser = true;\"\n                    clrDropdownToggle>\n               <clr-icon *ngIf=\"networkName\"\n                         class=\"network-icon\"\n                         [attr.shape]=\"Icon.NETWORK\"></clr-icon>\n               {{networkName || ('vsan.common.select' | localized)}}\n               <clr-icon shape=\"caret down\"></clr-icon>\n            </button>\n            <ng-template [(clrIfOpen)]=\"showNetworkBrowser\">\n               <clr-dropdown-menu clrPosition=\"bottom-left\"\n                                  [attr.aria-label]=\"'vsan.common.srMessage.dropdownMenu.expanded.label' | localized:\n                                       ('vsan.services.fileservices.wizard.ipPool.input.network' | localized)\">\n                  <vsan-inventory-browser #selector\n                                          [objRefs]=\"[clusterRef]\"\n                                          [inventoryService]=\"networkInventoryService\"\n                                          [preselectedNodes]=\"[networkRef]\"\n                                          (nodeSelected)=\"selectNode($event)\"\n                                          [searchInputAriaLabelKey]=\"'vsan.services.fileservices.wizard.ipPool.input.network.searchInputAriaLabel'\">\n                  </vsan-inventory-browser>\n               </clr-dropdown-menu>\n            </ng-template>\n         </clr-dropdown>\n      </div>\n   </div>\n\n   <h5 id=\"file-service-agent\">{{\"vsan.services.fileservices.wizard.ovf.title\" | localized}}</h5>\n   <div class=\"clr-row ovf-options\">\n      <vsan-file-services-ovf-settings id=\"ovf-settings\"\n                                       *ngIf=\"ovfSettings\"\n                                       #ovfFileSelector\n                                       [clusterRef]=\"clusterRef\"\n                                       [publicOvfProps]=\"publicOvfProps\"\n                                       [startUpload]=\"startUpload\"\n                                       [isInternetAccessEnabled]=\"isInternetAccessEnabled\"\n                                       [downloadTask]=\"downloadTask\"\n                                       [displayUseExistingOption]=\"canUseExistingOvf\"\n                                       [existingOvfVersion]=\"existingOvfVersion\"\n                                       [fsvmVersion]=\"fsvmVersion\"\n                                       [hostVersion]=\"hostVersion\"\n                                       [(ovfSettings)]=\"ovfSettings\"\n                                       (uploadComplete)=\"ovfUploadComplete()\"\n                                       (onCancel)=\"ovfUploadCancel()\"\n                                       (onError)=\"ovfUploadError($event)\">\n      </vsan-file-services-ovf-settings>\n   </div>\n</vsan-create-prompt>\n","/* Copyright 2022 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {NgModule} from \"@angular/core\";\nimport {CommonModule} from \"@angular/common\";\nimport {RouterModule, Routes} from \"@angular/router\";\nimport {ClarityModule} from \"@clr/angular\";\nimport {InventoryBrowserModule} from \"@component/inventory/inventory-browser.module\";\nimport {ValidationModule} from \"@component/validation/validation.module\";\nimport {CommonPipeModule} from \"@pipe/common-pipe.module\";\nimport {PromptModule} from \"@component/dialog/prompt/prompt.module\";\nimport {FileServicesCommonModule} from \"../shared/file-services-common.module\";\nimport {EnableFileServiceComponent} from \"./enable-file-service.component\";\n\nconst routes: Routes = [\n   {\n      path: \"\",\n      component: EnableFileServiceComponent,\n   },\n];\n\n@NgModule({\n   imports: [\n      CommonModule,\n      CommonPipeModule,\n      PromptModule,\n      ClarityModule,\n      InventoryBrowserModule,\n      FileServicesCommonModule,\n      ValidationModule,\n      RouterModule.forChild(routes),\n   ],\n   declarations: [\n      EnableFileServiceComponent,\n   ],\n})\nexport class EnableFileServiceModule {\n}\n","/* Copyright 2021 VMware, Inc. All rights reserved. -- VMware Confidential */\n\n/*\n   Names to use in the Loader decorator\n */\nexport enum LoaderName {\n   ON_INIT = \"on-init\",\n   ON_CONFIRM = \"on-confirm\",\n   PERFORM_CHANGE = \"perform-change\",\n   REGISTER = \"register\",\n   UPGRADE = \"upgrade\",\n   MONITOR = \"monitor\",\n   DATA_EVACUATION = \"data-evacuation\",\n}\n"]}