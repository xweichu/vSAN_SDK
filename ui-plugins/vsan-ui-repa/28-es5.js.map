{"version":3,"sources":["webpack:///src/app/vsan/common/model/fault-domain.model.ts","webpack:///src/app/vsan/common/util/fault-domains-util.ts","webpack:///src/app/vsan/common/model/fault-domain-consumption-data.ts"],"names":["FaultDomainModel","isLoading","isDragging","hosts","isPreferred","isSelected","UNSELECTED","validTargets","validTargetDomains","domain","allDomains","result","data","dropScope","uid","title","children","map","host","createHost","length","createDomain","getString","domainModel","filter","CREATE_DOMAIN_PLACEHOLDER","STANDALONE_PLACEHOLDER","find","item","FaultDomainsUtil","sourceItems","targetItems","isHost","moveHost","moveDomain","hostDomain","removeHostFromSource","addHostToTarget","remove","removeHostFromContainingDomain","removeFromDomain","isEmpty","foundDomain","findDomain","push","cloneDomainAndMoveHost","copiedDomain","deepmergeObjects","addDomainToTarget","concat","items","index","indexOf","splice","domainUid","hostsAndDomains","i","standaloneHostsCount","domainsCount","witnessHostsCount","standaloneHostsAndDomainsCount","Math","min","MAX_SUPPORTED_FAILERS","allNodesCount","floor","witnessInfos","preferredFaultDomainName","availableDomains","domains","standaloneHosts","hostData","preferredDomain","sort","item1","item2","label","localeCompare","models","forEach","createPreferredDomain","model1","model2","standaloneModels","faultDomainModels","storageConsumption","witness","inMaintenanceMode","root","notComputeOnlyNode","some","key","calculateFailuresToTolerate","fdModel","faultDomain","getDomainConsumption","totalBytes","model","getDomainConsumptionData","FaultDomainConsumptionData","usedBytes","reservedBytes","freeBytes","userCapacity","reservedCapacity","totalCapacity","freeCapacity","percentageValue","getPercentage"],"mappings":"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","file":"28-es5.js","sourcesContent":["/* Copyright 2018-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {ClrSelectedState} from \"@clr/angular\";\nimport {DomainOrHostData} from \"@generated/domain-or-host-data\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\n\n/**\n * Wraps a DomainOrHostData object.\n * Controls the behavior and look of a fault domain card.\n */\nexport class FaultDomainModel {\n\n   static readonly STANDALONE_PLACEHOLDER: string = \"__standalone_hosts_#_\";\n   static readonly CREATE_DOMAIN_PLACEHOLDER: string = \"__create_domain_#_\";\n\n   data: DomainOrHostData;\n   isLoading: boolean = false;\n   isDragging: boolean = false;\n\n   // for domains\n   title: string;\n   hosts: FaultDomainModel[] = [];\n   isPreferred: boolean = false;\n\n   // for hosts\n   domain: FaultDomainModel;\n   isSelected: ClrSelectedState = ClrSelectedState.UNSELECTED;\n   validTargets: string[] = [];\n   validTargetDomains: string[] = [];\n   dropScope: string;\n\n   protected constructor() {}\n\n   static createDomain(domain: DomainOrHostData, allDomains: DomainOrHostData[]): FaultDomainModel {\n      const result: FaultDomainModel = new FaultDomainModel();\n      result.data = domain;\n      result.dropScope = domain.uid;\n      result.title = domain.uid;\n      result.hosts = domain.children.map(host => FaultDomainModel.createHost(host, result, allDomains));\n      result.validTargets = result.hosts.length > 0 ? result.hosts[0].validTargets : [];\n      result.validTargetDomains = result.hosts.length > 0 ? result.hosts[0].validTargetDomains : [];\n      return result;\n   }\n\n   static createPreferredDomain(domain: DomainOrHostData, allDomains: DomainOrHostData[]): FaultDomainModel {\n      const result: FaultDomainModel = FaultDomainModel.createDomain(domain, allDomains);\n      result.title = VsanUiUtils.getString(\"vsan.faultDomains.card.preferred\", result.title);\n      result.isPreferred = true;\n      return result;\n   }\n\n   static createHost(host: DomainOrHostData,\n         domainModel: FaultDomainModel,\n         allDomains: DomainOrHostData[]): FaultDomainModel {\n      const result: FaultDomainModel = new FaultDomainModel();\n      result.data = host;\n      result.domain = domainModel;\n      result.validTargetDomains = allDomains.map(domain => domain.uid);\n      if (domainModel) {\n         result.validTargetDomains = result.validTargetDomains\n               .filter(uid => uid !== domainModel.data.uid);\n      }\n      result.validTargets = [\n            FaultDomainModel.CREATE_DOMAIN_PLACEHOLDER,\n            FaultDomainModel.STANDALONE_PLACEHOLDER,\n            ...result.validTargetDomains];\n      return result;\n   }\n\n   /**\n    * Returns true if all of the specified hosts belong to the same domain\n    * and there are no other hosts in it.\n    */\n   static allAffected(hosts: FaultDomainModel[]): boolean {\n      if (!hosts || hosts.length === 0 || !hosts[0].domain || !hosts[0].domain.data) {\n         return false;\n      }\n      if (hosts.find(item => item.domain !== hosts[0].domain)) {\n         return false;\n      }\n      return hosts.length === hosts[0].domain.hosts.length;\n   }\n}\n","/* Copyright 2019-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {DomainOrHostData} from \"@generated/domain-or-host-data\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {FaultDomainModel} from \"@model/fault-domain.model\";\nimport {WitnessHostData} from \"@generated/witness-host-data\";\nimport {FaultDomainConsumptionData} from \"@model/fault-domain-consumption-data\";\n\n/**\n * Provide utility methods for moving hosts or fault domains from a source to a target destination.\n */\nexport class FaultDomainsUtil {\n   static MAX_SUPPORTED_FAILERS: number = 3;\n\n\n   /**\n    * Move host or fault domain from source to destination list\n    * @param item - The fault domain or standalone host being moved.\n    * @param sourceItems - The list from which the item is being removed. E.g. preferred or secondary domain.\n    * @param targetItems - The list to which the item is being added E.g. preferred or secondary domain.\n    */\n   static move(item: DomainOrHostData, sourceItems: DomainOrHostData[], targetItems: DomainOrHostData[]): void {\n      if (!item) {\n         return;\n      }\n\n      if (item.isHost) {\n         this.moveHost(item, sourceItems, targetItems);\n      } else {\n         this.moveDomain(item, sourceItems, targetItems);\n      }\n   }\n\n   private static moveHost(host: DomainOrHostData,\n         sourceItems: DomainOrHostData[],\n         targetItems: DomainOrHostData[]): void {\n      const hostDomain: DomainOrHostData = this.removeHostFromSource(host, sourceItems);\n      this.addHostToTarget(host, hostDomain, targetItems);\n   }\n\n   private static removeHostFromSource(host: DomainOrHostData, sourceItems: DomainOrHostData[]): DomainOrHostData {\n      if (this.remove(host, sourceItems)) {\n         // Host is not part of any domain, nothing else to do\n         return null;\n      } else {\n         return this.removeHostFromContainingDomain(host, sourceItems);\n      }\n   }\n\n   private static removeHostFromContainingDomain(\n         host: DomainOrHostData,\n         sourceItems: DomainOrHostData[]): DomainOrHostData {\n      const hostDomain: DomainOrHostData = sourceItems.filter(item => !item.isHost && this.removeFromDomain(host, item))\n            .find(item => VsanUiUtils.isEmpty(item.children));\n      if (hostDomain) {\n         // The host was the only item under this domain, remove it from source side\n         this.remove(hostDomain, sourceItems);\n      }\n      return hostDomain;\n   }\n\n   private static removeFromDomain(host: DomainOrHostData, domain: DomainOrHostData): boolean {\n      return !VsanUiUtils.isEmpty(domain.children) && this.remove(host, domain.children);\n   }\n\n   private static addHostToTarget(\n         host: DomainOrHostData,\n         hostDomain: DomainOrHostData,\n         targetItems: DomainOrHostData[]): void {\n      if (hostDomain) {\n         const foundDomain: DomainOrHostData = this.findDomain(hostDomain.uid, targetItems);\n         if (foundDomain) {\n            foundDomain.children.push(host);\n         } else {\n            targetItems.push(this.cloneDomainAndMoveHost(host, hostDomain));\n         }\n      } else {\n         targetItems.push(host);\n      }\n   }\n\n   private static cloneDomainAndMoveHost(host: DomainOrHostData, hostDomain: DomainOrHostData): DomainOrHostData {\n      const copiedDomain: any = VsanUiUtils.deepmergeObjects({}, hostDomain);\n      // Host is no longer part of that domain object + there might be other hosts in that domain\n      copiedDomain.children = [host];\n      return copiedDomain;\n   }\n\n   private static moveDomain(domain: DomainOrHostData,\n         sourceItems: DomainOrHostData[],\n         targetItems: DomainOrHostData[]): void {\n      this.remove(domain, sourceItems);\n      this.addDomainToTarget(domain, targetItems);\n   }\n\n   private static addDomainToTarget(domain: DomainOrHostData, targetItems: DomainOrHostData[]): void {\n      const foundDomain: DomainOrHostData = this.findDomain(domain.uid, targetItems);\n      if (foundDomain) {\n         foundDomain.children = foundDomain.children.concat(domain.children);\n      } else {\n         targetItems.push(domain);\n      }\n   }\n\n   /**\n    * If the item is removed from the items array return TRUE. Otherwise return FALSE\n    */\n   private static remove(item: DomainOrHostData, items: DomainOrHostData[]): boolean {\n      const index: number = items.indexOf(item);\n      if (index > -1) {\n         items.splice(index, 1);\n         return true;\n      }\n      return false;\n   }\n\n   private static findDomain(domainUid: string, hostsAndDomains: DomainOrHostData[]): DomainOrHostData {\n      return hostsAndDomains.find(i => !i.isHost && i.uid === domainUid);\n   }\n\n   static calculateFailuresToTolerate(standaloneHostsCount: number,\n         domainsCount: number,\n         witnessHostsCount: number): number {\n      const standaloneHostsAndDomainsCount: number = standaloneHostsCount + domainsCount;\n      if (standaloneHostsAndDomainsCount < witnessHostsCount) {\n         // when there are more metadata nodes than data nodes, the formula is:\n         // tolerance = x-1, where x is the count of data nodes\n         return standaloneHostsAndDomainsCount > 0 ?\n               Math.min(FaultDomainsUtil.MAX_SUPPORTED_FAILERS, standaloneHostsAndDomainsCount - 1) : 0;\n      } else {\n         const allNodesCount: number = standaloneHostsAndDomainsCount + witnessHostsCount;\n         // else the formula is:\n         // (x+y-1)/2 where x is the count of data nodes, y is the count of metadata nodes\n         return allNodesCount > 0 ?\n               Math.min(FaultDomainsUtil.MAX_SUPPORTED_FAILERS, Math.floor((allNodesCount - 1) / 2)) : 0;\n      }\n   }\n\n   static getPreferredDomain(witnessInfos: WitnessHostData[]): string {\n      // Preferred domain name should be the same for all witness hosts, retrieve it from the first.\n      return !VsanUiUtils.isEmpty(witnessInfos)\n            ? witnessInfos[0].preferredFaultDomainName\n            : null;\n   }\n\n   static getStandaloneModels(availableDomains: DomainOrHostData[],\n         witnessInfos: WitnessHostData[]): FaultDomainModel[] {\n      const domains: DomainOrHostData[] = availableDomains.filter(item => !item.isHost);\n      const standaloneHosts: DomainOrHostData[] = availableDomains.filter(item => item.isHost);\n      if (!witnessInfos || !witnessInfos.length || standaloneHosts.length > 0) {\n         return standaloneHosts.map(hostData =>\n               FaultDomainModel.createHost(hostData, null, domains));\n      }\n      return [];\n   }\n\n   static getFaultDomainModels(availableDomains: DomainOrHostData[], preferredDomain: string): FaultDomainModel[] {\n      availableDomains.sort((item1, item2) => item1.label.localeCompare(item2.label));\n\n      const models: FaultDomainModel[] = [];\n      const domains: DomainOrHostData[] = availableDomains.filter(item => !item.isHost);\n      domains.forEach(domain => {\n         if (domain.uid === preferredDomain) {\n            // preferred domain, insert at index 0\n            models.splice(0, 0, FaultDomainModel.createPreferredDomain(domain, domains));\n         } else {\n            models.push(FaultDomainModel.createDomain(domain, domains));\n         }\n      });\n\n      models.sort((model1, model2) => model1.data.uid.localeCompare(model2.data.uid));\n      return models;\n   }\n\n   static getFaultToleranceInfo(availableDomains: DomainOrHostData[],\n         witnessInfos: WitnessHostData[],\n         standaloneModels: FaultDomainModel[],\n         faultDomainModels: FaultDomainModel[],\n         storageConsumption: any): string {\n      if (VsanUiUtils.isEmpty(availableDomains) ||\n            (VsanUiUtils.isEmpty(standaloneModels) && VsanUiUtils.isEmpty(faultDomainModels))) {\n         return VsanUiUtils.getString(\"vsan.faultDomains.stretchedCluster.numOfHostFailures\", 0);\n      }\n\n      const witnessHostsCount: number = witnessInfos && witnessInfos.length ?\n            witnessInfos.filter(witness => !witness.inMaintenanceMode).length : 0;\n      let standaloneHostsCount: number = 0;\n      let domainsCount: number = 0;\n      availableDomains.forEach(root => {\n         if (!this.notComputeOnlyNode(root, standaloneModels, faultDomainModels, storageConsumption)) {\n            return;\n         }\n         if (root.isHost && !root.inMaintenanceMode) {\n            // count standalone hosts which are not in mmode and not a compute-only node\n            standaloneHostsCount++;\n         } else if (!root.isHost) {\n            // count fault domain if at least one of its hosts is not in mmode and not a compute-only node\n            if (root.children.some(host => !host.inMaintenanceMode)) {\n               domainsCount++;\n            }\n         }\n      });\n\n      const key: string = availableDomains.find(item => !item.isHost)\n            ? \"vsan.faultDomains.stretchedCluster.numOfDomainFailures\"\n            : \"vsan.faultDomains.stretchedCluster.numOfHostFailures\";\n      return VsanUiUtils.getString(key,\n            FaultDomainsUtil.calculateFailuresToTolerate(standaloneHostsCount, domainsCount, witnessHostsCount));\n   }\n\n   private static notComputeOnlyNode(item: DomainOrHostData,\n         standaloneModels: FaultDomainModel[],\n         faultDomainModels: FaultDomainModel[],\n         storageConsumption: any): boolean {\n      let fdModel: FaultDomainModel;\n      if (item.isHost) {\n         fdModel = (standaloneModels.find(host => host.data.uid === item.uid));\n      } else {\n         fdModel = (faultDomainModels.find(faultDomain => faultDomain.data.uid === item.uid));\n      }\n      return this.getDomainConsumption(fdModel, storageConsumption).totalBytes > 0;\n   }\n\n   private static getDomainConsumption(model: FaultDomainModel, storageConsumption: any): FaultDomainConsumptionData {\n      return FaultDomainConsumptionData.getDomainConsumptionData(model, storageConsumption);\n   }\n}\n","/* Copyright 2018-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {HostStorageConsumptionData} from \"@generated/host-storage-consumption-data\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {FaultDomainModel} from \"@model/fault-domain.model\";\n\nexport class FaultDomainConsumptionData {\n   usedBytes: number = 0;\n   reservedBytes: number = 0;\n   totalBytes: number = 0;\n   freeBytes: number = 0;\n\n   constructor(hostData: HostStorageConsumptionData[]) {\n      for (const data of hostData) {\n         // Data will be missing if the host is disconnected.\n         if (data) {\n            this.usedBytes += data.userCapacity;\n            this.reservedBytes += data.reservedCapacity;\n            this.totalBytes += data.totalCapacity;\n            const freeCapacity: number = data.totalCapacity - data.userCapacity;\n            this.freeBytes += (freeCapacity > 0 ? freeCapacity : 0);\n         }\n      }\n   }\n\n   get consumptionInfo(): string {\n      if (this.totalBytes === 0) {\n         return \"\";\n      }\n      const percentageValue: number = (this.usedBytes / this.totalBytes) * 100;\n      return VsanUiUtils.getPercentage(percentageValue);\n   }\n\n   static getDomainConsumptionData(model: FaultDomainModel, storageConsumption: any): FaultDomainConsumptionData {\n      let hosts: FaultDomainModel[] = model.hosts;\n      if (!hosts || hosts.length === 0) {\n         hosts = [model];\n      }\n      const hostData: HostStorageConsumptionData[] = hosts\n            .map(host => storageConsumption[host.data.uid])\n            .filter(data => data !== null);\n      return new FaultDomainConsumptionData(hostData);\n   }\n}\n"]}