{"version":3,"sources":["./src/app/vsan/file-services/upgrade/upgrade-file-service.module.ts","./src/app/vsan/common/service/flow/error-handler.decorator.ts","./src/app/vsan/file-services/upgrade/upgrade-file-service.html","./src/app/vsan/file-services/upgrade/upgrade-file-service.component.ts","./src/app/vsan/common/service/flow/loader-name.ts"],"names":[],"mappings":"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","file":"138-es2015.js","sourcesContent":["/* Copyright 2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {NgModule} from \"@angular/core\";\nimport {CommonModule} from \"@angular/common\";\nimport {ClarityModule} from \"@clr/angular\";\nimport {RouterModule, Routes} from \"@angular/router\";\nimport {CommonPipeModule} from \"@pipe/common-pipe.module\";\nimport {PromptModule} from \"@component/dialog/prompt/prompt.module\";\nimport {UpgradeFileServiceComponent} from \"./upgrade-file-service.component\";\nimport {FileServicesCommonModule} from \"../shared/file-services-common.module\";\n\nconst routes: Routes = [\n   {\n      path: \"\",\n      component: UpgradeFileServiceComponent,\n   },\n];\n\n@NgModule({\n   imports: [\n      CommonModule,\n      ClarityModule,\n      CommonPipeModule,\n      PromptModule,\n      FileServicesCommonModule,\n      RouterModule.forChild(routes),\n   ],\n   declarations: [\n      UpgradeFileServiceComponent,\n   ],\n})\nexport class UpgradeFileServiceModule {\n}","/* Copyright 2021 VMware, Inc. All rights reserved. -- VMware Confidential */\n\nimport {LoadingFlowWrapper} from \"@service/flow/loading-flow-wrapper.data\";\n\n/**\n * This property decorator is supposed to be used along with the @Loader decorator.\n * If an exception is thrown during the execution of the method decorated with @Loader\n * the ErrorHandler method will be invoked. You can define as many ErrorHandlers as you want,\n * but they must be with different names. The name can be provided as input to the decorator.\n * If a name is set to the ErrorHandler it will handle only the errors thrown by Loader functions\n * with the same name. If no name is passed to the ErrorHandler, it will handle only the errors\n * from Loader functions with no name.\n *\n * <pre>\n * // Example 1:\n * @Loader()\n * loadSyncData(): any {\n *    throw new Error(\"Failed to load sync data\");\n * }\n *\n * @ErrorHandler()\n * handleError(err: any) {\n *    // handle the error.\n * }\n *...\n *\n * // Example 2\n *\n * @Loader({name: \"data-loading-flow})\n * async loadAsyncData(): Promise<any> {\n *    return Promise.reject(\"Failed to load async data\");\n * }\n *\n * @ErrorHandler({name: \"data-loading-flow})\n * handleError(err: any) {\n *    // handle the error.\n * }\n * ...\n * </pre>\n */\nexport function ErrorHandler(props?: ErrorHandlerProperties): MethodDecorator {\n   props = props || {};\n   return (targetClass: any, functionName: string, descriptor: PropertyDescriptor): void => {\n      (new LoadingFlowWrapper(targetClass, props.name)).errorHandler = descriptor.value;\n   };\n}\n\n/**\n * Properties of the ErrorHandler decorator.\n */\nexport interface ErrorHandlerProperties {\n\n   /**\n    * Indicates which @Loder should be handled by this @ErrorHandler\n    */\n   name?: string;\n}\n","<!--Copyright 2019-2022 VMware, Inc. All rights reserved. -- VMware Confidential-->\n<vsan-prompt\n      [title]=\"'vsan.fileservices.upgrade.dialog.title' | localized\"\n      [confirmText]=\"'vsan.fileservices.upgrade.button.label' | localized\"\n      [(alertMessages)]=\"errors\"\n      [alertType]=\"errorType\"\n      [blockButton]=\"upgradeButtonDisabled\"\n      [blockContent]=\"loading\"\n      [cancelText]=\"'vsan.common.cancel' | localized\"\n      (onConfirm)=\"upgrade()\">\n   <div class=\"upgrade-options\">\n      <div id=\"upgrade-file-service-desc\">\n         {{\"vsan.fileservices.upgrade.dialog.desc\" | localized}}\n      </div>\n      <h5>\n         {{\"vsan.fileservices.upgrade.dialog.ovf.title\" | localized}}\n      </h5>\n      <vsan-file-services-ovf-settings id=\"ovf-settings\"\n                                       *ngIf=\"ovfSettings\"\n                                       #ovfFileSelector\n                                       [clusterRef]=\"clusterRef\"\n                                       [publicOvfProps]=\"publicOvfProps\"\n                                       [startUpload]=\"startUpload\"\n                                       [isInternetAccessEnabled]=\"isInternetAccessEnabled\"\n                                       [downloadTask]=\"downloadTask\"\n                                       [displayUseExistingOption]=\"canUseExistingOvf\"\n                                       [existingOvfVersion]=\"existingOvfVersion\"\n                                       [fsvmVersion]=\"fsvmVersion\"\n                                       [hostVersion]=\"hostVersion\"\n                                       [(ovfSettings)]=\"ovfSettings\"\n                                       (uploadComplete)=\"ovfUploadComplete()\"\n                                       (onCancel)=\"ovfUploadCancel()\"\n                                       (onError)=\"ovfUploadError($event)\">\n      </vsan-file-services-ovf-settings>\n   </div>\n</vsan-prompt>\n","/* Copyright 2019-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, OnInit, ViewChild} from \"@angular/core\";\nimport {VsanFileServiceOvfProps} from \"@generated/vsan-file-service-ovf-props\";\nimport {VsanFileServiceConfigService} from \"@generated/vsan-file-service-config-service\";\nimport {ManagedObject} from \"@service/managed-object\";\nimport {OvfOption, OvfSettings} from \"../shared/file-services-ovf-settings.data\";\nimport {VsanHealthPropertyProvider} from \"@generated/vsan-health-property-provider\";\nimport {ExternalProxySettingsConfig} from \"@generated/external-proxy-settings-config\";\nimport {FileServicesOvfSettings} from \"../shared/file-services-ovf-settings.component\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {TaskMonitorService} from \"@service/task-monitor-service\";\nimport {VsanFileServicePrecheckResult} from \"@generated/vsan-file-service-precheck-result\";\nimport {VsanFileServiceDomain} from \"@generated/vsan-file-service-domain\";\nimport {Logger} from \"@util/logger\";\nimport {AlertType} from \"@component/validation/alert-type\";\nimport {DataAccessService} from \"@service/data-access.service\";\nimport {UpgradeFileServiceModalContext} from \"./upgrade-file-service-modal-context\";\nimport {Version} from \"@util/version\";\nimport {LoadingIndicator} from \"@service/flow/loading-indicator.decorator\";\nimport {Loader} from \"@service/flow/loader.decorator\";\nimport {ErrorHandler} from \"@service/flow/error-handler.decorator\";\nimport {SrMessageType} from \"@service/screen-reader-announcer.service\";\nimport {LoaderName} from \"@service/flow/loader-name\";\n\n@Component({\n   templateUrl: \"upgrade-file-service.html\",\n   selector: \"vsan-upgrade-file-service\",\n   styleUrls: [\"upgrade-file-service.scss\"],\n})\nexport class UpgradeFileServiceComponent implements OnInit {\n\n   @LoadingIndicator({\n      name: [LoaderName.ON_INIT, LoaderName.REGISTER, LoaderName.UPGRADE, LoaderName.MONITOR],\n   })\n   loading: boolean;\n\n   publicOvfProps: VsanFileServiceOvfProps;\n   ovfSettings: OvfSettings;\n   clusterRef: ManagedObject = ManagedObject.contextObject;\n   isInternetAccessEnabled: boolean;\n   downloadTask: ManagedObject;\n   existingOvfVersion: Version;\n   fsvmVersion: Version;\n   hostVersion: Version;\n   canUseExistingOvf: boolean;\n   errors: string[];\n   errorType: string = AlertType.DANGER;\n   upgradeButtonDisabled: boolean = false;\n   startUpload: boolean = false;\n\n   @ViewChild(\"ovfFileSelector\")\n   ovfFileSelector: FileServicesOvfSettings;\n\n   private domainConfig: VsanFileServiceDomain;\n\n   constructor(private fileService: VsanFileServiceConfigService,\n         private dataAccessService: DataAccessService,\n         private healthService: VsanHealthPropertyProvider,\n         private taskMonitorService: TaskMonitorService) {\n   }\n\n   @Loader({\n      name: LoaderName.ON_INIT,\n      srMessage: \"vsan.fileservices.upgrade.dialog.title\",\n      srMessageType: SrMessageType.PAGE_TITLE,\n   })\n   async ngOnInit(): Promise<void> {\n      const context: UpgradeFileServiceModalContext = VsanUiUtils.getModalContext() as UpgradeFileServiceModalContext;\n      this.domainConfig = context.domainConfig;\n      this.existingOvfVersion = new Version(context.precheckResult.ovfInstalled);\n      this.fsvmVersion = new Version(context.precheckResult.fsvmVersion);\n      this.hostVersion = new Version(context.precheckResult.hostVersion);\n      this.canUseExistingOvf = this.isExistingOvfUpgradable();\n      try {\n         const externalProxyData: ExternalProxySettingsConfig =\n               await this.healthService.getExternalProxySettings(this.clusterRef);\n         this.isInternetAccessEnabled = externalProxyData.enableInternetAccess;\n      } catch (err) {\n         Logger.error(err);\n         this.isInternetAccessEnabled = false;\n      }\n      if (this.isInternetAccessEnabled) {\n         try {\n            this.publicOvfProps = await this.fileService.getPublicOvfProps(this.clusterRef);\n         } catch (err) {\n            Logger.error(err);\n         }\n      }\n      this.ovfSettings = new OvfSettings(this.getOvfOption(), this.publicOvfProps);\n   }\n\n   private isExistingOvfUpgradable(): boolean {\n      return Version.isLarger(this.existingOvfVersion, this.fsvmVersion);\n   }\n\n   private getOvfOption(): OvfOption {\n      if (this.canUseExistingOvf) {\n         return OvfOption.EXISTING;\n      }\n      if (!this.isInternetAccessEnabled || VsanUiUtils.isEmpty(this.publicOvfProps && this.publicOvfProps.url)) {\n         return OvfOption.MANUAL;\n      }\n      return OvfOption.DOWNLOAD;\n   }\n\n   upgrade = async () => {\n      this.errors = null;\n      if (this.ovfSettings.isUseExisting) {\n         await this.upgradeAfterPreflightCheck();\n         return;\n      }\n\n      if (!this.ovfSettings.isManualDownload) {\n         if (this.ovfSettings.ovfUrlSecured) {\n            if (!this.ovfSettings.isUrlTrusted) {\n               this.errors = [VsanUiUtils.getString(\"vsan.services.fileservices.wizard.ovf.ssl.trust.error\")];\n               this.errorType = AlertType.DANGER;\n               return;\n            }\n         }\n\n         await this.registerOvfTask();\n         await this.monitorDownloadTask();\n      } else {\n         const validationResult: string[] | Promise<string[]> = this.ovfFileSelector.validate();\n         if (validationResult) {\n            if (validationResult instanceof Promise) {\n               validationResult.then((errors: string[]) => {\n                  if (errors && errors.length) {\n                     this.errors = errors;\n                     this.errorType = AlertType.DANGER;\n                     this.upgradeButtonDisabled = false;\n                     return;\n                  }\n                  // Start to upload files\n                  this.startUpload = true;\n                  this.upgradeButtonDisabled = true;\n               });\n            } else {\n               this.errors = validationResult;\n               this.errorType = AlertType.DANGER;\n            }\n         }\n      }\n   };\n\n   /**\n    * Check the OVF files downloaded/uploaded before upgrading the FSVM\n    */\n   @Loader({name: LoaderName.UPGRADE})\n   private async upgradeAfterPreflightCheck(): Promise<void> {\n      // we need a check for the OVF file downloaded/uploaded before upgrading\n      const precheckResult: VsanFileServicePrecheckResult =\n            await this.fileService.getPrecheckResult(this.clusterRef, this.domainConfig, false);\n      // fsvmVersion: the running fsvm version\n      // ovfInstalled: the name is confusing.\n      // It is called 'installed' but actually it's the version of ovf file downloaded/uploaded\n      if (new Version(precheckResult.ovfInstalled).compare(new Version(precheckResult.fsvmVersion)) > 0) {\n         this.fileService.upgradeFsvm(this.clusterRef)\n               .then(task => VsanUiUtils.closeModalDialog(task))\n               .catch(err => this.errors = [err]);\n      } else {\n         this.upgradeButtonDisabled = true;\n         this.errors = [VsanUiUtils.getString(\"vsan.fileservices.upgrade.latest.desc\")];\n         this.errorType = AlertType.WARNING;\n      }\n   }\n\n   @ErrorHandler({name: LoaderName.UPGRADE})\n   private handleUpgradeAfterPreflightCheckError(): void {\n      this.errors = [VsanUiUtils.getString(\"vsan.fileservices.upgrade.preflight.error\")];\n   }\n\n   @Loader({name: LoaderName.REGISTER})\n   private async registerOvfTask(): Promise<void> {\n      this.downloadTask = await this.fileService.downloadPublicOvf(this.clusterRef);\n   }\n\n   @ErrorHandler({name: LoaderName.REGISTER})\n   private handleError(error: string): void {\n      this.errors = [error];\n   }\n\n   /**\n    * Hold the next checks until the download completes\n    */\n   @Loader({name: LoaderName.MONITOR})\n   private async monitorDownloadTask(): Promise<void> {\n      this.upgradeButtonDisabled = true;\n      await this.taskMonitorService.getAwaitResult(this.downloadTask);\n      await this.upgradeAfterPreflightCheck();\n   }\n\n   @ErrorHandler({name: LoaderName.MONITOR})\n   private handleMonitorError(error: string): void {\n      Logger.error(error);\n      this.errors = [VsanUiUtils.getString(\"vsan.services.fileservices.rtc.download.failed\")];\n      this.errorType = AlertType.DANGER;\n   }\n\n   ovfUploadComplete = () => {\n      this.startUpload = false;\n      this.upgradeAfterPreflightCheck();\n   };\n\n   ovfUploadCancel = () => {\n      this.startUpload = false;\n      this.upgradeButtonDisabled = false;\n   };\n\n   ovfUploadError = (errors: string[]) => {\n      this.errors = errors;\n      this.startUpload = false;\n      this.upgradeButtonDisabled = false;\n   };\n}\n","/* Copyright 2021 VMware, Inc. All rights reserved. -- VMware Confidential */\n\n/*\n   Names to use in the Loader decorator\n */\nexport enum LoaderName {\n   ON_INIT = \"on-init\",\n   ON_CONFIRM = \"on-confirm\",\n   PERFORM_CHANGE = \"perform-change\",\n   REGISTER = \"register\",\n   UPGRADE = \"upgrade\",\n   MONITOR = \"monitor\",\n   DATA_EVACUATION = \"data-evacuation\",\n}\n"],"sourceRoot":"webpack:///"}