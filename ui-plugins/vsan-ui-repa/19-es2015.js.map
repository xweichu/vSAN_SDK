{"version":3,"sources":["./src/app/vsan/common/component/datagrid/tree-expander.html","./src/app/vsan/common/component/datagrid/tree-expander.component.ts","./src/app/vsan/common/component/datagrid/tree-datagrid.ts"],"names":[],"mappings":"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","file":"19-es2015.js","sourcesContent":["<!-- Copyright 2016-2021 VMware, Inc. All rights reserved. -- VMware Confidential -->\n<span *ngFor=\"let pad of depthPadding\">\n   <span class=\"depth-padding\"></span>\n</span>\n\n<span *ngIf=\"!row.isExpandable\"\n      class=\"depth-padding\">\n</span>\n\n<clr-icon id=\"expand-collapse\"\n          *ngIf=\"row.isExpandable\"\n          class=\"hand-cursor\"\n          [attr.shape]=\"iconShape\"\n          (click)=\"row.toggle()\"\n          tabindex=\"0\"\n          (keyup.enter)=\"toggleRow($event.target)\"\n          (keyup.space)=\"toggleRow($event.target)\">\n</clr-icon>\n","/* Copyright 2016-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, Input, ViewChild} from \"@angular/core\";\nimport {TreeDatagridRow} from \"./tree-datagrid\";\n\n@Component({\n   selector: \"vsan-expand\",\n   templateUrl: \"tree-expander.html\",\n   styleUrls: [\"tree-expander.scss\"],\n})\nexport class TreeExpanderComponent {\n\n   private static expandedShape: string = \"caret down\";\n   private static collapsedShape: string = \"caret right\";\n\n   @Input()\n   row: TreeDatagridRow;\n\n   get depthPadding(): any[] {\n      const result: any[] = [];\n      for (let i: number = 0; i < this.row.depth; i++) {\n         result.push(i);\n      }\n      return result;\n   }\n\n   /**\n    * Determines the icon of the expandable component.\n    */\n   get iconShape(): string {\n      if (this.row.isExpandable) {\n         return this.row.isExpanded ?\n               TreeExpanderComponent.expandedShape :\n               TreeExpanderComponent.collapsedShape;\n      }\n\n      return \"\";\n   }\n\n   toggleRow(caretIcon: HTMLElement): void {\n      this.row.toggle();\n      // Focus the caret icon after clicking Enter/Space, because it goes out of focus\n      setTimeout(() => caretIcon.focus());\n   }\n}\n","/* Copyright 2016 VMware, Inc. All rights reserved. -- VMware Confidential */\n\nimport {BehaviorSubject} from \"rxjs\";\nimport {ClrDatagridFilterInterface} from \"@clr/angular\";\n\n/**\n * Hierarchical data provider.\n * This is a additional structure to the Clarity Datagrid that supports hierarchical data rendering.\n */\nexport class TreeDatagrid {\n\n   public static forChildProperty(childField: string, rowData?: any[]) {\n      return new TreeDatagrid(item => item[childField], rowData);\n   }\n\n   /**\n    * The data objects that are to be rendered as first-level rows.\n    */\n   protected roots: any[];\n\n   /**\n    * The flat row structure consisting of the root objects and their children\n    * in case the parents are expanded. Sorting and filtering are reflected here.\n    */\n   protected content: TreeDatagridRow[];\n\n   /**\n    * List of filters to be applied on the data.\n    */\n   protected filters: TreeFilter[] = [];\n\n   /**\n    * The comparator to be used to sort the items and their children.\n    */\n   public comparator: (item1: any, item2: any) => number;\n\n   /**\n    * Sorting direction.\n    */\n   public sortAscending: boolean;\n\n   /**\n    * @param childItems lambda for extracting the children of a given data object\n    * @param rootItems (optional) the initial data objects\n    */\n   constructor(private childItems: (parent: any) => any[], rootItems?: any[]) {\n      this.rootItems = rootItems;\n   }\n\n   /**\n    * Removes all items.\n    */\n   public clear = () => this.rootItems = [];\n\n   /**\n    * Sets the given data objects as content.\n    */\n   public refreshGrid = (rowData: any[]) => this.rootItems = rowData;\n\n   public set rootItems(value: any[]) {\n      this.roots = value ? value : [];\n      this.content = this.flatten(this.roots);\n   }\n\n   /**\n    * root data objects\n    */\n   public get rootItems(): any[] {\n      return this.roots;\n   }\n\n   /**\n    * The flat row structure consisting of the root objects and their children\n    * in case the parents are expanded. Sorting and filtering are reflected here.\n    */\n   public get rows(): TreeDatagridRow[] {\n      return this.content;\n   }\n\n   /**\n    * Registers a new filter in the data provider.\n    * Initially the filter will accept all items.\n    * The consumer can assign a predicate to the TreeFilter object\n    * to add filtering rule. All registered filters' predicates are\n    * evaluated using AND operator.\n    */\n   public registerFilter(): TreeFilter {\n      let filter: TreeFilter = new TreeFilter(() => this.content = this.flatten(this.rootItems));\n      this.filters.push(filter);\n      return filter;\n   }\n\n   public unregisterFilter(value: TreeFilter) {\n      let index: number = this.filters.indexOf(value);\n      if (index != -1) {\n         this.filters.splice(index, 1);\n      }\n   }\n\n   /**\n    * Applies sorting comparator and direction for the data provider.\n    */\n   public sort(comparator: (item1: any, item2: any) => number, ascending: boolean = true) {\n      this.comparator = comparator;\n      this.sortAscending = ascending;\n\n      // refresh content, will expand all nodes\n      this.content = this.flatten(this.rootItems);\n   }\n\n   public collapseAll = () => this.rows.forEach(r => this.collapse(r));\n\n   public expandAll = () => this.rows.forEach(r => this.expand(r));\n\n   protected expand(row: TreeDatagridRow) {\n      if (row.isExpanded) {\n         // already expanded\n         return;\n      }\n\n      let rowIndex = this.content.indexOf(row);\n      if (rowIndex == -1) {\n         // row is filtered out\n         return;\n      }\n\n      let flattenedChildren: TreeDatagridRow[] = this.flatten(this.childItems(row.data), row.depth + 1);\n      if (flattenedChildren.length > 0) {\n         this.content.splice(rowIndex + 1, 0, ... flattenedChildren);\n      }\n\n      row.isExpanded = true;\n   }\n\n   protected collapse(row: TreeDatagridRow) {\n      if (!row.isExpanded) {\n         // already collapsed\n         row.isExpanded = false;\n         return;\n      }\n\n      let rowIndex = this.content.indexOf(row);\n      if (rowIndex == -1) {\n         // row is filtered out\n         return;\n      }\n\n      let removeCount: number = 0;\n      for (let i = rowIndex + 1; i < this.content.length && row.depth < this.content[i].depth; i++) {\n         removeCount ++;\n      }\n\n      this.content.splice(rowIndex + 1, removeCount);\n      row.isExpanded = false;\n   }\n\n   // returns flattened list of the specified items and their children (and their children);\n   // sorting and filter are applied;\n   // items are returned in expanded state\n   protected flatten(items: any[], depth: number = 0, parent?: any): TreeDatagridRow[] {\n      if (!items) {\n         return [];\n      }\n\n      let sortedItems: any[] = [... items];\n      if (this.comparator) {\n         sortedItems.sort((item1: any, item2: any) => (this.sortAscending ? 1 : -1) * this.comparator(item1, item2));\n      }\n\n      let result: TreeDatagridRow[] = [];\n\n      for (let item of sortedItems) {\n\n         let childItems: any[] = this.childItems(item);\n\n         // flattened children, including their children\n         let children: TreeDatagridRow[] = this.flatten(childItems, depth + 1, item);\n\n         let filteredOut: boolean = false;\n         for (let filter of this.filters) {\n            // filter out items only if the filter is not applicable for the item or it's parent\n            const matchFilter: boolean = filter.predicate(item) || (!!parent && filter.predicate(parent));\n            if (!matchFilter) {\n               filteredOut = true;\n            }\n         }\n         if (!filteredOut || children.length > 0) {\n            let row: TreeDatagridRow = new TreeDatagridRow();\n            row.data = item;\n            row.toggle = () => row.isExpanded ? this.collapse(row) : this.expand(row);\n            row.depth = depth;\n            row.isExpanded = true;\n            row.isExpandable = childItems && childItems.length > 0;\n\n            result.push(row, ... children);\n         }\n      }\n\n      return result;\n   }\n\n}\n\n/**\n * Represents a single row in a flattened tree data provider.\n */\nexport class TreeDatagridRow {\n\n   /**\n    * The data object for the row\n    */\n   public data: any;\n\n   /**\n    * Will be true if the row has children\n    */\n   public isExpandable: boolean;\n\n   /**\n    * Will be true if the row is currently expanded\n    */\n   public isExpanded: boolean;\n\n   /**\n    * Will flip the row's expanded/collapsed state\n    */\n   public toggle: () => void;\n\n   /**\n    * The nesting level the row is rendered at\n    */\n   public depth: number;\n\n}\n\nexport interface Filter  {\n   match(data: any, filter:string): boolean;\n}\n\n/**\n * Allows specifying filtering predicate for the data provider.\n * @see TreeDatagrid.registerFilter\n */\nexport class TreeFilter implements ClrDatagridFilterInterface<any> {\n\n   private _predicate: (item: any) => boolean;\n   changes = new BehaviorSubject<boolean>(false);\n\n   constructor(private apply: () => void) {\n      this.clear();\n   }\n\n   public clear() {\n      this._predicate = (item: any) => true;\n      this.apply();\n   }\n\n   public set predicate(predicate: (item: any) => boolean) {\n      if (!predicate) {\n         this.clear();\n      } else {\n         this._predicate = predicate;\n         this.apply();\n      }\n   }\n\n   public get predicate(): (item: any) => boolean {\n      return this._predicate;\n   }\n\n   // Used by clarity filter\n   isActive(): boolean {\n      return this.changes.getValue();\n   }\n\n   // Used by clarity filter\n   accepts(val: any): boolean {\n      return true;\n   }\n}"],"sourceRoot":"webpack:///"}