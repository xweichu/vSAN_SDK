{"version":3,"sources":["./src/app/vsan/common/directive/clr-button-group/clr-button-base.directive.ts","./src/app/vsan/hci/health/health-check-dialog.component.ts","./src/app/vsan/hci/gettingstarted/getting-started-view.html","./src/app/vsan/hci/configure/dialog/configure-confirmation-dialog.component.ts.ConfigureConfirmationDialogComponent.html","./src/app/vsan/hci/configure/dialog/configure-warning-dialog.component.ts","./src/app/vsan/hci/gettingstarted/hci-pman.component.ts","./src/app/vsan/common/util/reactive-form-util.ts","./src/app/vsan/common/component/datagrid/tree-datagrid.module.ts","./src/app/vsan/common/util/modal-builder.ts","./src/app/vsan/common/component/action-button/button-title.directive.ts","./src/app/vsan/common/component/popup-list/popup-list.module.ts","./src/app/vsan/common/directive/clr-button-group/clr-button-group-common.directive.ts","./src/app/vsan/hci/gettingstarted/getting-started-view.component.ts","./src/app/vsan/hci/configure/dialog/configure-confirmation-dialog.component.ts","./src/app/vsan/health/model/health-tests.data.ts","./src/app/vsan/hci/getting-started-view.module.ts","./src/app/vsan/common/component/navigation/vsan-breadcrumb.module.ts","./src/app/vsan/hci/dismiss/dismiss-quickstart-dialog.component.ts","./src/app/vsan/common/component/action-button/button-group.directive.ts","./src/app/vsan/common/pipe/virtual-objects/health-state-label.pipe.ts","./src/app/vsan/hci/configure/dialog/configure-warning-dialog.component.ts.ConfigureWarningDialogComponent.html","./src/app/vsan/common/util/vsan-dialog-util.ts","./src/app/vsan/hci/gettingstarted/getting-started.utils.ts","./src/app/vsan/common/component/cell/common-cells.module.ts","./src/app/vsan/common/component/inventory/inventory-browser.module.ts","./src/app/vsan/hci/dismiss/dismiss-quickstart-dialog.component.ts.DismissQuickstartDialogComponent.html","./src/app/vsan/common/util/dom-util.ts","./src/app/vsan/hci/health/health-check-dialog.html","./src/app/vsan/common/directive/external-link/external-link.directive.ts","./src/app/vsan/common/vsan-common.module.ts","./src/app/vsan/common/component/search/search.module.ts","./src/app/vsan/common/component/action-button/action-button.module.ts","./src/app/vsan/hci/gettingstarted/hci-pman.html"],"names":[],"mappings":"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","file":"107-es2015.js","sourcesContent":["/* Copyright 2020 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {ClrButton} from \"@clr/angular\";\n\n/**\n * Use this class as base class for directive, which handles clr-button. It will help to link the rendered button with\n * the clr-button on which the directive is applied.\n */\nexport abstract class ClrButtonBaseDirective {\n\n   constructor(private clrButton: ClrButton) {\n      if (!clrButton) {\n         return;\n      }\n      // name should be set, if not provided in template - generate one. ClrButtom#name is used to generate the name\n      // attribute of the markup button. Later the name is used to match the generated markup with the directive.\n      if (!clrButton.name) {\n         clrButton.name = Math.random().toString();\n      }\n\n      const directiveHolder: DirectiveHolder = (clrButton as DirectiveHolder);\n      directiveHolder.directives = directiveHolder.directives || [];\n      directiveHolder.directives.push(this);\n   }\n\n   /**\n    * This method will be called when the actual html button is rendered.\n    */\n   abstract resolveButton(clrButton: ClrButton, button: HTMLButtonElement, index: number);\n}\n\nexport interface DirectiveHolder extends ClrButton {\n   directives: ClrButtonBaseDirective[];\n}","/* Copyright 2018-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, OnInit} from \"@angular/core\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {HciClusterService} from \"@generated/hci-cluster-service\";\nimport {ManagedObject} from \"@service/managed-object\";\nimport {VsanTestData} from \"@generated/vsan-test-data\";\nimport {VsanHealthUtil} from \"@util/vsan-health-util\";\nimport {Logger} from \"@util/logger\";\nimport {PermissionService} from '@generated/permission-service';\nimport {Privileges} from '@generated/privileges';\nimport {HealthTests} from \"../../health/model/health-tests.data\";\n\n@Component({\n   templateUrl: \"health-check-dialog.html\",\n   selector: \"vsan-health-check-dialog\",\n   styleUrls: ['health-check-dialog.scss']\n})\nexport class HealthCheckDialogComponent implements OnInit {\n\n   title: string;\n   alertMessages: string[] = [];\n   loading: boolean;\n\n   perspective: string;\n   healthGroup: string;\n   healthTest: string;\n\n   displayGroup: boolean;\n   testData: VsanTestData;\n   groupTests: HealthTests[];\n   hasEditClusterPermission: boolean = false;\n\n   constructor(private hciService: HciClusterService,\n         private permissionService: PermissionService) {}\n\n   ngOnInit(): void {\n      this.loading = true;\n\n      const context: any = VsanUiUtils.getModalContext();\n      this.title = context.title;\n      this.perspective = context.perspective;\n      this.healthGroup = context.healthGroup;\n      this.healthTest = context.healthTest;\n      this.displayGroup = !this.healthTest;\n\n      Promise.all([\n         this.permissionService.hasPermissions(ManagedObject.contextObject, [Privileges.EDIT_CLUSTER()]),\n         this.hciService.getHealthGroupData(ManagedObject.contextObject, this.perspective, this.healthGroup),\n      ]).then(result => {\n         this.hasEditClusterPermission = result[0];\n         this.handleHealthData(result[1]);\n      }).catch(this.handleError);\n   }\n\n   handleHealthData = (result: VsanTestData) => {\n      if (!result) {\n         this.handleError(null);\n         return;\n      }\n\n      if (this.displayGroup) {\n         this.groupTests = result.subtests.map((subtest: VsanTestData) => {\n            return new HealthTests(subtest, true);\n         });\n      } else {\n         this.testData = result.subtests.find((test) => test.testName === this.healthTest);\n      }\n\n      this.loading = false;\n   };\n\n   private handleError = (error: string) => {\n      if (error) {\n         Logger.error(error);\n      }\n\n      this.alertMessages = [VsanUiUtils.getString(\"vsan.common.error.dataExtraction\")];\n      this.loading = false;\n   };\n\n   getIconShape = (test: VsanTestData): string => {\n      return VsanHealthUtil.getVsanHealthStatusIconShape(test.status);\n   };\n\n   getIconClass = (test: VsanTestData): string => {\n      return VsanHealthUtil.getVsanHealthStatusIconClass(test.status);\n   };\n}","<!-- Copyright 2017-2021 VMware, Inc. All rights reserved. VMware Confidential -->\n<div *ngIf=\"loading\" class=\"spinner central-spinner\">{{\"vsan.loading\" | localized}}</div>\n<ng-container *ngIf=\"!loading\">\n   <div class=\"title\">\n      <h5 vsan-auto-focus>\n         {{title}}\n      </h5>\n      <button class=\"btn btn-sm btn-outline\"\n              *ngIf=\"showCloseQuickstartButton\"\n              (click)=\"closeQuickstart()\">\n         {{\"vsan.cluster.hci.gettingStartedPage.closeQuickstartButton.label\" | localized}}\n      </button>\n   </div>\n   <div id=\"quickstart-text\">{{text}}</div>\n   <vsan-validation id=\"validation-message\"\n                    *ngIf=\"alertMessage\"\n                    [alert]=\"alertMessage\"\n                    [allowClose]=\"false\"\n                    [allowReload]=\"true\"\n                    (onReload)=\"fetch()\">\n   </vsan-validation>\n   <vsan-validation id=\"vsan-quickstart-status-info\"\n                    [alert]=\"'vsan.cluster.hci.gettingStartedPage.notFinishedWarning.alarmsSuppressedInfo' | localized\"\n                    [allowClose]=\"false\"\n                    *ngIf=\"showCloseQuickstartButton && basicClusterData.vsanEnabled\"\n                    alertType=\"info\">\n   </vsan-validation>\n   <div class=\"cards-container\">\n      <div id=\"cluster-basics-card\" class=\"card\">\n         <div class=\"card-header\">\n            <span class=\"text-nowrap\">{{\"vsan.hci.gettingStarted.clusterBasics.title\" | localized}}</span>\n            <clr-icon shape=\"success-standard\" class=\"is-success is-solid\">\n            </clr-icon>\n         </div>\n         <div class=\"card-block\">\n            <h5 class=\"card-title\">\n               {{GettingStartedUtils.getClusterBasicsHeader(enabledServices)}}\n            </h5>\n            <div class=\"card-text\">\n               <ul *ngIf=\"enabledServices?.length\">\n                  <li *ngFor=\"let service of enabledServices\">{{service}}</li>\n               </ul>\n               <vsan-hci-pman\n                     *ngIf=\"basicClusterData.pmanEnabled\"\n                     [pmanText]=\"'vsan.hci.gettingStarted.clusterBasics.personalityManagerEnabledText' | localized\">\n               </vsan-hci-pman>\n            </div>\n         </div>\n         <div class=\"card-footer\">\n            <button class=\"btn btn-sm\"\n               (click)=\"invokeEditCluster()\"\n               [disabled]=\"!clusterBasicsCard.enabled\">\n               {{\"vsan.hci.gettingStarted.clusterBasics.launchButton.text\" | localized}}\n            </button>\n         </div>\n      </div>\n\n      <div id=\"add-hosts-card\" class=\"card\">\n         <div class=\"card-header\">\n            <span class=\"text-nowrap\">\n               {{\"vsan.hci.gettingStarted.addHostsCard.title\" | localized}}\n            </span>\n            <ng-container *ngTemplateOutlet=\"cardStateIcon; context: {card: addHostsCard}\"></ng-container>\n         </div>\n         <div class=\"card-block\">\n            <!-- In case vSAN MAX is supported on the cluster,\n                 but the user didn't enable it already, prompt him to enable it -->\n            <vsan-validation *ngIf=\"promptUserToEnableVsanMax()\"\n                             class=\"card-text\"\n                             [alertType]=\"AlertType.INFO\"\n                             [alert]=\"'vsan.hci.gettingStarted.addHostsCard.vsanMaxSupported.info.text' | localized\"\n                             [allowClose]=\"false\">\n            </vsan-validation>\n            <h5 *ngIf=\"basicClusterData.totalHosts\" class=\"card-title\">\n               {{GettingStartedUtils.getHostsLabel(basicClusterData)}}\n            </h5>\n            <div *ngIf=\"!basicClusterData.totalHosts\" class=\"card-text\">\n               {{\"vsan.hci.gettingStarted.addHostsCard.contentText\" | localized}}\n            </div>\n            <!-- When vSAN MAX is enabled, we split the health checks into two groups-->\n            <ng-container *ngIf=\"showVsanMaxPrechecks()\">\n               <div class=\"card-block\" id=\"vsan-max-enabled-checks\">\n                  <h6>{{\"vsan.hci.gettingStarted.addHostsCard.hardwareChecks.label\" | localized}}</h6>\n                  <!-- If there are some failed tests, show them -->\n                  <ng-container *ngIf=\"getVsanMaxHealthChecks(addHostsCard)?.length\">\n                     <ng-container *ngTemplateOutlet=\"validationResults;\n                           context: {vsanHealthChecks: getVsanMaxHealthChecks(addHostsCard), enableNavigation: false}\">\n                     </ng-container>\n                  </ng-container>\n                  <!-- Otherwise display a success message -->\n                  <span *ngIf=\"!getVsanMaxHealthChecks(addHostsCard)?.length\">\n                     <div class=\"icon-name-container\">\n                        <clr-icon [attr.shape]=\"Icon.CLR_SUCCESS_STANDARD_ICON_SHAPE\" class=\"is-success is-solid\">\n                        </clr-icon>\n                        <span>{{\"vsan.hci.gettingStarted.addHostsCard.vsanMaxChecks.passed\" | localized}}</span>\n                     </div>\n                  </span>\n               </div>\n               <div class=\"card-block\" *ngIf=\"getGenericHealthChecks(addHostsCard)?.length\">\n                  <h6>{{\"vsan.hci.gettingStarted.addHostsCard.otherChecks.label\" | localized}}</h6>\n                  <ng-container *ngTemplateOutlet=\"validationResults;\n                        context: {vsanHealthChecks: getGenericHealthChecks(addHostsCard), enableNavigation: false}\">\n                  </ng-container>\n               </div>\n            </ng-container>\n            <!-- vSAN MAX is not enabled, list all health checks together -->\n            <ng-container *ngIf=\"!basicClusterData.isVsanMaxEnabled\">\n               <ng-container *ngTemplateOutlet=\"validationResults;\n                     context: {vsanHealthChecks: addHostsCard?.validationData?.vsanHealthChecks, enableNavigation: false}\">\n               </ng-container>\n            </ng-container>\n         </div>\n         <div class=\"card-footer\">\n            <button class=\"btn btn-sm\"\n                  [ngClass]=\"{'btn-primary': !addHostsCard.validateEnabled}\"\n                  (click)=\"invokeAddHosts()\"\n                  [disabled]=\"!addHostsCard.enabled\">\n               {{\"vsan.hci.gettingStarted.addHostsCard.launchButton.text\" | localized}}\n            </button>\n            <button class=\"btn btn-sm btn-outline\"\n                    (click)=\"validateHosts()\"\n                    [disabled]=\"!addHostsCard.validateEnabled || addHostsCard.validateInProgress\">\n               {{\"vsan.cluster.hci.gettingStartedPage.card.validate\" | localized}}\n            </button>\n         </div>\n      </div>\n\n      <div id=\"configure-cluster-card\" class=\"card\">\n         <div class=\"card-header\">\n            <span class=\"text-nowrap\">\n               {{GettingStartedUtils.getConfigureClusterHeader(configureClusterCard.isExtend)}}\n            </span>\n            <ng-container *ngTemplateOutlet=\"cardStateIcon; context: {card: configureClusterCard}\"></ng-container>\n         </div>\n         <div class=\"card-block\">\n            <h5 *ngIf=\"GettingStartedUtils.getConfiguredClusterHeaderLabel(basicClusterData)\" class=\"card-title\">\n               {{GettingStartedUtils.getConfiguredClusterHeaderLabel(basicClusterData)}}\n            </h5>\n            <div class=\"card-text\">\n               <span *ngIf=\"GettingStartedUtils.getConfigureCardContentText(configureClusterCard, basicClusterData)\"\n                     class=\"card-text\">\n                  {{GettingStartedUtils.getConfigureCardContentText(configureClusterCard, basicClusterData)}}\n               </span>\n               <ng-container *ngIf=\"configureClusterCard.validationData?.vsanHealthChecks?.length\">\n                  <li *ngFor=\"let healthCheck of configureClusterCard.validationData.vsanHealthChecks\"\n                      class=\"non-bullet-item\">\n                     <health-check-item [healthCheck]=\"healthCheck\"\n                                        [canNavigateToHealthView]=\"basicClusterData.vsanEnabled\">\n                     </health-check-item>\n                  </li>\n               </ng-container>\n            </div>\n            <vsan-validation *ngIf=\"basicClusterData.isVsanMaxEnabled && isVsanMaxConfigurationInvalid()\"\n                             id=\"vsan-max-configure-warning\"\n                             class=\"card-text\"\n                             [alertType]=\"AlertType.WARNING\"\n                             [alert]=\"getVsanMaxConfigurationWarningMessage()\"\n                             [allowClose]=\"false\">\n            </vsan-validation>\n         </div>\n         <div class=\"card-footer\">\n            <button class=\"btn btn-sm\"\n                    [ngClass]=\"{'btn-primary': configureClusterCard.enabled}\"\n                    (click)=\"invokeConfigureWizard()\"\n                    [disabled]=\"!configureClusterCard.enabled\">\n               {{\"vsan.hci.gettingStarted.configureServicesCard.launchButton.text\" | localized}}\n            </button>\n            <button class=\"btn btn-sm btn-outline\"\n                    (click)=\"validateCluster()\"\n                    [disabled]=\"!configureClusterCard.validateEnabled || configureClusterCard.validateInProgress\">\n               {{\"vsan.cluster.hci.gettingStartedPage.card.validate\" | localized}}\n            </button>\n         </div>\n      </div>\n   </div>\n</ng-container>\n\n<ng-template #cardStateIcon let-card=\"card\">\n   <span *ngIf=\"card.validateInProgress || card.isConfigureOperationInProgress\" class=\"spinner spinner-inline\"></span>\n   <clr-icon *ngIf=\"!card.validateInProgress && !card.isConfigureOperationInProgress && getValidateResultIconShape(card)\"\n             class=\"is-solid\"\n             [attr.shape]=\"getValidateResultIconShape(card)\"\n             [ngClass]=\"getValidateResultIconClass(card)\">\n   </clr-icon>\n</ng-template>\n\n<ng-template #validationResults let-vsanHealthChecks=\"vsanHealthChecks\" let-enableNavigation=\"enableNavigation\">\n   <li *ngFor=\"let healthCheck of vsanHealthChecks\" class=\"non-bullet-item\">\n      <health-check-item [healthCheck]=\"healthCheck\"\n                         [canNavigateToHealthView]=\"enableNavigation\">\n      </health-check-item>\n   </li>\n</ng-template>","\n      <vsan-prompt\n            [title]=\"title\"\n            [confirmText]=\"'vsan.common.continue'\"\n            [cancelText]=\"'vsan.common.cancel'\"\n            [blockContent]=\"busy\"\n            [blockButton]=\"busy\"\n            (onConfirm)=\"proceed()\"\n            (onCancel)=\"close()\">\n         <span>\n            {{\"vsan.cluster.hci.configureHciCluster.dialog.text\" | localized}}\n         </span>\n         <span *ngIf=\"showLockdownMode\">\n            {{\"vsan.cluster.hci.configureHciCluster.dialog.lockdownModeText\" | localized:lockdownModeString}}\n         </span>\n      </vsan-prompt>\n   ","/* Copyright 2017-2020 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, OnInit} from \"@angular/core\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\n\n@Component({\n   template:`\n      <vsan-info-prompt [title]=\"title\"\n                        [isCallbackTriggerEnabled]=\"true\"\n                        confirmText=\"vsan.common.ok\">\n         <vsan-validation *ngIf=\"incompatibleNetworkConfig\"\n                          [alertType]=\"'danger'\"\n                          [allowClose]=\"false\"\n                          [alert]=\"'vsan.cluster.hci.configureHciCluster.warningDialog.errorMessage' | localized\">\n         </vsan-validation>\n         <p *ngFor=\"let message of content\">{{message}}</p>\n      </vsan-info-prompt>\n   `,\n   selector: \"vsan-configure-warning\"\n})\nexport class ConfigureWarningDialogComponent implements OnInit {\n\n   title: boolean;\n   content: string[];\n   incompatibleNetworkConfig: boolean;\n\n   ngOnInit(): void {\n      this.title = VsanUiUtils.getModalContext().title;\n      if (VsanUiUtils.getModalContext().content) {\n         this.content = VsanUiUtils.getModalContext().content;\n         this.incompatibleNetworkConfig = true;\n      } else {\n         this.content = [VsanUiUtils.getString(\"vsan.cluster.hci.configureHciCluster.warningDialog.text\")];\n      }\n   }\n}","import {Component, Input} from \"@angular/core\";\nimport {Icon} from \"@util/icon\";\nimport {PlatformExtension} from \"@navigation/model/platform-extension\";\nimport {ManagedObject} from \"@service/managed-object\";\nimport {NavigationService} from \"@navigation/navigation.service\";\n\n@Component({\n   templateUrl: \"hci-pman.html\",\n   styleUrls: [\"hci-pman.scss\"],\n   selector: \"vsan-hci-pman\",\n   host: {class: \"getting-started-view\"}, // Class required by the H5C. DO NOT REMOVE!\n})\nexport class HciPmanComponent {\n\n   constructor(private navigationService: NavigationService) {\n   }\n\n   Icon: typeof Icon = Icon;\n\n   @Input()\n   pmanText: string;\n\n   navigateToClusterImage(): void {\n      this.navigationService.navigateTo(PlatformExtension.PMAN_CLUSTER_IMAGE, ManagedObject.contextObject, null);\n   }\n}","/* Copyright 2017 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {FormArray, FormControl, FormGroup} from \"@angular/forms\";\n\nexport class ReactiveFormUtil {\n\n   private static readonly FORM_CONTROLS_DELIMITER: string = \".\";\n\n   /*\n    * Trigger validation on all controls in a form group and mark them as touched to display errors\n    */\n   static validateAllFormFields = (formGroup: FormGroup): void => {\n      formGroup.markAsTouched();\n      Object.keys(formGroup.controls).forEach(field => {\n         const control = formGroup.get(field);\n         control.markAsTouched({ onlySelf: true });\n         if (control instanceof FormGroup) {\n            ReactiveFormUtil.validateAllFormFields(control);\n         } else if (control instanceof FormArray) {\n            control.controls.forEach(\n                  (childControl: FormGroup) => ReactiveFormUtil.validateAllFormFields(childControl));\n         } else if (control instanceof FormControl) {\n            ReactiveFormUtil.validateControls([control]);\n         }\n      });\n   };\n\n   static validateControls = (controls: FormControl[]): void => {\n      controls.forEach((control) => {\n         control.markAsTouched({onlySelf: true});\n         control.updateValueAndValidity({\n            onlySelf: false,\n            emitEvent: true\n         });\n      });\n   };\n\n   /**\n    * Trigger updateValueAndValidity() to call ValidatorFn and update validity of all controls in a form group.\n    */\n   static updateFormControlsValueAndValidity = (formGroup: FormGroup) => {\n      Object.keys(formGroup.controls).forEach(control => {\n         if (formGroup.get(control) instanceof FormControl) {\n            formGroup.get(control).updateValueAndValidity();\n         }\n      })\n   };\n\n   static getFormControlPath = (...parts: string[]): string => {\n      return parts.join(ReactiveFormUtil.FORM_CONTROLS_DELIMITER);\n   };\n}\n","/* Copyright 2019-2020 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {NgModule} from \"@angular/core\";\nimport {CommonModule} from \"@angular/common\";\nimport {FormsModule} from \"@angular/forms\";\nimport {ClarityModule} from \"@clr/angular\";\nimport {ValidationModule} from \"@component/validation/validation.module\";\nimport {CommonPipeModule} from \"@pipe/common-pipe.module\";\nimport {TreeExpanderComponent} from \"@component/datagrid/tree-expander.component\";\nimport {TreeColumnComponent} from \"@component/datagrid/tree-column.component\";\nimport {EnumeratedFilterComponent} from \"./filter/enumerated-filter.component\";\nimport {EnumeratedFilterItemComponent} from \"./filter/enumerated-filter-item.component\";\nimport {EnumFilterComponent} from \"@component/datagrid/filter/enum-filter.component\";\n\n@NgModule({\n   imports: [\n      CommonModule,\n      FormsModule,\n      ClarityModule,\n      ValidationModule,\n      CommonPipeModule,\n   ],\n   declarations: [\n      TreeColumnComponent,\n      TreeExpanderComponent,\n      EnumeratedFilterComponent,\n      EnumeratedFilterItemComponent,\n      EnumeratedFilterComponent,\n      EnumFilterComponent,\n   ],\n   exports: [\n      TreeColumnComponent,\n      TreeExpanderComponent,\n      EnumeratedFilterComponent,\n      EnumeratedFilterItemComponent,\n      EnumFilterComponent,\n   ],\n})\nexport class TreeDatagridModule {\n}\n","/* Copyright 2017-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {environment} from \"@env/environment\";\nimport {ManagedObject} from \"@service/managed-object\";\nimport {Logger} from \"./logger\";\nimport {WebPlatform} from \"./platform\";\nimport {VsanUiUtils} from \"./vsan-util\";\n\nexport class ModalBuilder {\n\n   static readonly WIDTH: number = 0;\n   static readonly HEIGHT: number = 1;\n\n   static readonly DEFAULT_SIZE: number[] = [1000, 530];\n   static readonly WIZARD_XL: number[] = [1200, 700];\n\n   static readonly APP_URL: string = (environment.repa && environment.repaExtension)\n         ? \"index.html\"\n         : \"/ui/h5-vsan-ui/\";\n\n   private size: number[] = ModalBuilder.DEFAULT_SIZE;\n\n   // When null, the modal dialog will be headless and the docked\n   // view is expected to provide a title bar.\n   private title: string = null;\n\n   private accessibilityTitle: string = null;\n\n   private urlParams: any = {};\n\n   private eventTarget: EventTarget;\n\n   constructor(private appId: string) {\n   }\n\n   setDimensions(dimensions: number[]): ModalBuilder {\n      if (!dimensions || dimensions.length !== 2) {\n         Logger.warn(\"invalid modal dimensions\", dimensions);\n         dimensions = ModalBuilder.DEFAULT_SIZE;\n      }\n      return this.setSize(dimensions[ModalBuilder.WIDTH], dimensions[ModalBuilder.HEIGHT]);\n   }\n\n   setSize(width: number, height: number): ModalBuilder {\n      this.size = [width, height];\n      return this;\n   }\n\n   setUrlParameters(params: any): ModalBuilder {\n      this.urlParams = params;\n      return this;\n   }\n\n   /**\n    * Set to null if the view provides its own title bar\n    */\n   setTitle(title: string): ModalBuilder {\n      this.title = title;\n      return this;\n   }\n\n   setAccessibilityTitle(accessibilityTitle: string): ModalBuilder {\n      this.accessibilityTitle = accessibilityTitle;\n      return this;\n   }\n\n   /**\n    * Set explicit event target if it is changed before opening the modal.\n    * For example when making a preceding request the event target is the XMLHttpRequest object.\n    */\n   setEventTarget(eventTarget: EventTarget): ModalBuilder {\n      this.eventTarget = eventTarget;\n      return this;\n   }\n\n   /**\n    * Opens a modal dialog and returns a promise to collect the result; On close the target element is focused.\n    * @param context - any JS data object, can be retrieved by WebPlatform.getModalContext()\n    * @returns {Promise<any>} - Invoked if the dialog invokes WebPlatform.closeModalDialog(arg)\n    *       with non-null arg. The promise is never rejected.\n    */\n   open(context?: any): Promise<any> {\n      return new Promise<any>((accept) => {\n         VsanUiUtils.pluginContext.targetElement = this.eventTarget ? this.eventTarget :\n               (event && event.target ? event.target : null);\n         VsanUiUtils.pluginContext.modalResultHandler = (data?: any) => {\n            if (typeof data !== \"undefined\") {\n               // Deep copy of the object was required to resolve an issue with object's prototype overriding when\n               // passing complex objects in IE11/Edge; Keep it for safety.\n               accept(JSON.parse(JSON.stringify(data)));\n            } else if (VsanUiUtils.pluginContext.targetElement && VsanUiUtils.pluginContext.targetElement.focus) {\n               // On cancel just focus the target element. Timeout is required as otherwise the focus may be\n               // consumed by the mouse click.\n               setTimeout(() => VsanUiUtils.pluginContext.targetElement.focus(), 100);\n            }\n         };\n\n         let actionUrl: string = `${ModalBuilder.APP_URL}?viewId=${this.appId}`;\n\n         let separator: string = \"?\";\n         for (const param in this.urlParams) {\n            actionUrl += separator + param + \"=\" + this.urlParams[param];\n            separator = \"&\";\n         }\n\n         WebPlatform.openModalDialog(this.title,\n               actionUrl,\n               ManagedObject.contextObjectUid,\n               this.size[0], this.size[1],\n               this.title != null,\n               VsanUiUtils.pluginContext.modalResultHandler /* onClose */,\n               context /* retrieve with Platform.getModalContext() */,\n               this.accessibilityTitle);\n      });\n   }\n\n}\n","/* Copyright 2019 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Directive, Input, OnInit} from '@angular/core';\nimport {BehaviorSubject, Observable} from \"rxjs\";\nimport {ClrButton} from \"@clr/angular\";\n\n/**\n * Attribute directive for detecting button title change and storing title.\n * Only used for clr-button in clr-button-group.\n * @title - The title of clr-button\n */\n@Directive({\n   selector: \"clr-button[vsan-button-title]\"\n})\nexport class ButtonTitleDirective implements OnInit {\n\n   constructor(public host: ClrButton) {}\n\n   private _title: string;\n\n   @Input(\"vsan-button-title\")\n   set title(value: string) {\n      if (this._title !== value) {\n         this.titleChange.next(value);\n      }\n      this._title = value;\n   }\n\n   get title(): string {\n      return this._title;\n   }\n\n   private titleChange: BehaviorSubject<string> = new BehaviorSubject<string>(\"\");\n\n   get titleChangeEvent(): Observable<string> {\n      return this.titleChange.asObservable();\n   }\n\n   ngOnInit(): void {\n      // name should be set, if not provided in template - generate one. ClrButtom#name is used to generate the name\n      // attribute of the markup button. Later the name is used to match the generated markup with the directive.\n      if (!this.host.name) {\n         this.host.name = Math.random().toString();\n      }\n   }\n\n   ngOnDestroy() {\n      this.titleChange.unsubscribe();\n   }\n}","/* Copyright 2019 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {NgModule} from \"@angular/core\";\nimport {CommonModule} from \"@angular/common\";\nimport {ClarityModule} from \"@clr/angular\";\nimport {CommonPipeModule} from \"@pipe/common-pipe.module\";\nimport {PopupListComponent} from \"@component/popup-list/popup-list.component\";\nimport {PopupListItemDirective} from \"@component/popup-list/popup-list-item.directive\";\n\n@NgModule({\n   imports: [\n      CommonModule,\n      ClarityModule,\n      CommonPipeModule\n   ],\n   declarations: [\n      PopupListComponent,\n      PopupListItemDirective\n   ],\n   exports: [\n      PopupListComponent,\n      PopupListItemDirective\n   ]\n})\nexport class PopupListModule {\n}\n","/* Copyright 2020 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {AfterContentInit, ContentChildren, Directive, ElementRef} from \"@angular/core\";\nimport {ClrButton} from \"@clr/angular\";\nimport {ClrButtonBaseDirective, DirectiveHolder} from \"@directive/clr-button-group/clr-button-base.directive\";\n\n/**\n * Applies on every clr-button-group and help to link the clr-button with directive applieds on it,  which extends\n * {@link ClrButtonBaseDirective}, to the actual rendered html button.\n */\n@Directive({\n   selector: \"clr-button-group\",\n})\nexport class ClrButtonGroupCommonDirective implements AfterContentInit {\n\n   @ContentChildren(ClrButton, {descendants: true})\n   clrButtons: ClrButton[];\n\n   constructor(private elRef: ElementRef) {}\n\n   ngAfterContentInit(): void {\n      setTimeout(() => {\n         const allButtons: NodeListOf<HTMLButtonElement> = this.elRef.nativeElement.querySelectorAll(\"button\");\n         // match button with clrButton and notify directives\n         this.clrButtons.filter(clrButton => !!(clrButton as DirectiveHolder).directives)\n               .forEach((clrButton, index) => {\n                  const buttonFound: HTMLButtonElement = this.findButtonByName(clrButton.name, allButtons);\n                  if (buttonFound) {\n                     (clrButton as DirectiveHolder).directives.forEach(directive => {\n                        directive.resolveButton(clrButton, buttonFound, index);\n                     });\n                  }\n               });\n      });\n   }\n\n   private findButtonByName(name: string, buttons: NodeListOf<HTMLButtonElement>): HTMLButtonElement {\n      for (let i: number = 0; i < buttons.length; i++) {\n         if (buttons.item(i).name === name) {\n            return buttons.item(i);\n         }\n      }\n      return null;\n   }\n\n}","/* Copyright 2017-2022 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, OnDestroy, OnInit} from \"@angular/core\";\nimport {AlertType} from \"@component/validation/alert-type\";\nimport {BasicClusterConfigData} from \"@generated/basic-cluster-config-data\";\nimport {ConfigureWizardData} from \"@generated/configure-wizard-data\";\nimport {HciBasicCardData} from \"@generated/hci-basic-card-data\";\nimport {HciClusterService} from \"@generated/hci-cluster-service\";\nimport {HciConfigureClusterCardData} from \"@generated/hci-configure-cluster-card-data\";\nimport {HciQuickstartService} from \"@generated/hci-quickstart-service\";\nimport {HciQuickstartValidationService} from \"@generated/hci-quickstart-validation-service\";\nimport {HciValidationCard} from \"@generated/hci-validation-card\";\nimport {HciValidationData} from \"@generated/hci-validation-data\";\nimport {HciWorkflowState} from \"@generated/hci-workflow-state\";\nimport {QuickstartViewData} from \"@generated/quickstart-view-data\";\nimport {VsanHealthCheck} from \"@generated/vsan-health-check\";\nimport {VsanHealthStatus} from \"@generated/vsan-health-status\";\nimport {HciConfigureWizardContext} from \"@navigation/context/hci-configure-wizard-context\";\nimport {NavigationService, PlatformExtension} from \"@navigation/navigation.service\";\nimport {ErrorMessage} from \"@service/flow/error-message.decorator\";\nimport {Loader} from \"@service/flow/loader.decorator\";\nimport {LoadingIndicator} from \"@service/flow/loading-indicator.decorator\";\nimport {RefreshHandler} from \"@service/global-refresh.service\";\nimport {ManagedObject} from \"@service/managed-object\";\nimport {ScreenReaderAnnouncer} from \"@service/screen-reader-announcer.service\";\nimport {TaskMonitorService} from \"@service/task-monitor-service\";\nimport {DomUtil} from \"@util/dom-util\";\nimport {Icon} from \"@util/icon\";\nimport {Logger} from \"@util/logger\";\nimport {ModalBuilder} from \"@util/modal-builder\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {Subject} from \"rxjs\";\nimport {auditTime} from \"rxjs/operators\";\nimport {VsanRoutes} from \"../../../vsan-routes\";\nimport {GettingStartedUtils} from \"./getting-started.utils\";\n\n@Component({\n   templateUrl: \"getting-started-view.html\",\n   styleUrls: [\"getting-started-view.scss\"],\n   selector: \"vsan-hci-getting-started\",\n   host: {class: \"getting-started-view\"}, // Class required by the H5C. DO NOT REMOVE!\n})\nexport class GettingStartedViewComponent implements OnInit, OnDestroy {\n\n   private static readonly MESSAGE: string = \"message\";\n   private static readonly REFRESH_EVENT_NAME: string = \"refreshQuickstart\";\n\n   private static readonly DISMISS_DIALOG_WIDTH: number = 750;\n   private static readonly DISMISS_DIALOG_HEIGHT: number = 250;\n   private static readonly CONFIGURE_CONFIRM_DIALOG_WIDTH: number = 576;\n   private static readonly CONFIGURE_CONFIRM_DIALOG_HEIGHT: number = 250;\n   private static readonly CONFIGURE_WARNING_DIALOG_WIDTH: number = 700;\n   private static readonly CONFIGURE_WARNING_DIALOG_HEIGHT: number = 200;\n   private static readonly CONFIGURE_WARNING_NETWORK_DIALOG_HEIGHT: number = 270;\n   private static readonly REFRESH_DEBOUNCE_MS: number = 2000;\n   private static readonly CHECK_OPERATION_TIMEOUT_MS: number = 5000;\n\n   GettingStartedUtils: typeof GettingStartedUtils = GettingStartedUtils;\n   AlertType: typeof AlertType = AlertType;\n   Icon: typeof Icon = Icon;\n\n   @LoadingIndicator()\n   loading: boolean;\n\n   @ErrorMessage()\n   alertMessage: string;\n\n   title: string = VsanUiUtils.getString(\"vsan.cluster.hci.gettingStartedPage.title\");\n   text: string;\n   clusterBasicsCard: HciBasicCardData;\n   addHostsCard: HciValidationCard;\n   configureClusterCard: HciConfigureClusterCardData;\n   enabledServices: string[];\n   basicClusterData: BasicClusterConfigData;\n\n   showCloseQuickstartButton: boolean = false;\n   isVsanMaxSupportedOnHosts: boolean = false;\n\n   @ScreenReaderAnnouncer()\n   srOnlyMessage: string;\n\n   private refreshStream: Subject<void> = new Subject<void>();\n   private configOperationTimer: number;\n   private originalConfigureCardEnabled: boolean;\n   private isExtend: boolean;\n\n   constructor(private hciQuickstartService: HciQuickstartService,\n         private hciQuickstartValidationService: HciQuickstartValidationService,\n         private hciConfigureService: HciClusterService,\n         private taskService: TaskMonitorService,\n         private navigationService: NavigationService) {\n   }\n\n   ngOnInit(): void {\n      this.fetch();\n      this.registerRefreshEvents();\n   }\n\n   @RefreshHandler\n   @Loader()\n   async fetch(): Promise<void> {\n      this.handleCardsData(await this.hciQuickstartService.getGettingStartedData(ManagedObject.contextObject));\n      this.validateCards();\n      this.updateConfigOperationInterval();\n      this.srOnlyMessage = VsanUiUtils.getString(\"vsan.screenReader.message.page.loaded\",\n            VsanUiUtils.getString(\"vsan.cluster.hci.gettingStartedPage.title\"));\n   }\n\n   private handleCardsData(viewData: QuickstartViewData): void {\n      this.basicClusterData = viewData.basicClusterData;\n      this.title = viewData.header;\n      this.text = viewData.text;\n      this.enabledServices = GettingStartedUtils.getEnabledServices(this.basicClusterData);\n      this.showCloseQuickstartButton = viewData.showCloseQuickstartButton;\n      this.clusterBasicsCard = viewData.clusterBasicsCard;\n      this.addHostsCard = viewData.addHostsCard;\n      this.configureClusterCard = viewData.configureClusterCard;\n      // Store this to be able to restore it after host are validated.\n      this.originalConfigureCardEnabled = this.configureClusterCard.enabled;\n      this.isExtend = viewData.extendCard;\n   }\n\n   private updateConfigOperationInterval(): void {\n      if (this.configOperationTimer) {\n         clearInterval(this.configOperationTimer);\n      } else if (this.configureClusterCard.isConfigureOperationInProgress) {\n         this.configOperationTimer = this.checkConfigOperationInProgress();\n      }\n   }\n\n   private async validateCards(): Promise<void> {\n      if (this.addHostsCard.validateEnabled) {\n         await this.validateHosts();\n      } else if (this.configureClusterCard.validateEnabled) {\n         await this.validateCluster();\n      }\n\n      /* After the health checks are loaded and displayed in the second/third card. all the cards grow as\n       we keep them all with equal size. Unfortunately in some Chrome versions the cards are not rendered correctly\n       after their size is changed. This causes the buttons in the footer to not be clickable. For more info please\n       check bug https://bz3-prod-wwwd.eng.vmware.com/show_bug.cgi?id=2392360\n       The solution is to force the browser to redraw the problematic DOM elements.\n       */\n      // TO DO: Check if we still need this? The above mentioned PR has nothing to do with the comment.\n      DomUtil.redraw(\".card\");\n   }\n\n   async validateHosts(): Promise<void> {\n      this.addHostsCard.validateInProgress = true;\n      // Disable the configure action, while hosts are being validated\n      this.configureClusterCard.enabled = false;\n      this.isVsanMaxSupportedOnHosts = false;\n      try {\n         [this.addHostsCard.validationData, this.isVsanMaxSupportedOnHosts] = await Promise.all([\n            this.hciQuickstartValidationService.validateNotConfiguredHosts(ManagedObject.contextObject),\n            this.hciQuickstartValidationService.validateVsanMaxHostsSupport(ManagedObject.contextObject),\n         ]);\n\n         // If there are no errors in hosts validation, configure cluster card's enabled state should be reverted\n         if (HciValidationData.Status.ERROR !== this.addHostsCard.validationData.status) {\n            this.configureClusterCard.enabled = this.originalConfigureCardEnabled;\n         }\n\n      } catch (e) {\n         Logger.error(e);\n         this.alertMessage = e;\n      } finally {\n         this.addHostsCard.validateInProgress = false;\n      }\n   }\n\n   async validateCluster(): Promise<void> {\n      this.configureClusterCard.validateInProgress = true;\n      try {\n         this.configureClusterCard.validationData = await this.hciQuickstartValidationService\n               .validateCluster(ManagedObject.contextObject);\n      } catch (e) {\n         Logger.error(e);\n      } finally {\n         // TODO: Anyone that understands this, please add comment why this must happen here???\n         if (!this.configureClusterCard.isConfigureOperationInProgress && this.configOperationTimer) {\n            clearInterval(this.configOperationTimer);\n         }\n         this.configureClusterCard.validateInProgress = false;\n      }\n   }\n\n   showVsanMaxPrechecks(): boolean {\n      return this.basicClusterData.isVsanMaxEnabled\n            && this.basicClusterData.hciWorkflowState !== HciWorkflowState.INVALID\n            && this.basicClusterData.hciWorkflowState !== HciWorkflowState.DONE\n            && !this.addHostsCard.validateInProgress;\n   }\n\n   promptUserToEnableVsanMax(): boolean {\n      return this.basicClusterData?.vsanEnabled\n            && this.basicClusterData.notConfiguredHosts > 0\n            && this.basicClusterData.hciWorkflowState === HciWorkflowState.IN_PROGRESS\n            && !this.basicClusterData?.isVsanMaxEnabled\n            && this.isVsanMaxSupportedOnHosts;\n   }\n\n   getVsanMaxHealthChecks(card: HciValidationCard): VsanHealthCheck[] {\n      return card?.validationData?.vsanHealthChecks?.filter(check => check.isHardwareCheck);\n   }\n\n   getGenericHealthChecks(card: HciValidationCard): VsanHealthCheck[] {\n      return card?.validationData?.vsanHealthChecks?.filter(check => !check.isHardwareCheck);\n   }\n\n   /**\n    * Checks if there are any vsan max related prechecks in error state in order to display\n    * warning in the Configure cluster card\n    */\n   isVsanMaxConfigurationInvalid(): boolean {\n      return this.getVsanMaxHealthChecks(this.addHostsCard)?.filter(\n            check => check.status === VsanHealthStatus.red).length > 0;\n   }\n\n   getVsanMaxConfigurationWarningMessage(): string {\n      return this.isExtend\n            ? VsanUiUtils.getString(\"vsan.hci.gettingStarted.configureServicesCard.vsanMaxWarning.extend\")\n            : VsanUiUtils.getString(\"vsan.hci.gettingStarted.configureServicesCard.vsanMaxWarning.initial\");\n   }\n\n   getValidateResultIconShape(card: HciValidationCard): string {\n      if (card.validationData?.status === HciValidationData.Status.ERROR) {\n         return Icon.CLR_ERROR_STANDARD_ICON_SHAPE;\n      } else if (card.validationData?.status === HciValidationData.Status.PASSED) {\n         return Icon.CLR_SUCCESS_STANDARD_ICON_SHAPE;\n      } else {\n         return null;\n      }\n   }\n\n   getValidateResultIconClass(card: HciValidationCard): string {\n      if (card.validationData?.status === HciValidationData.Status.ERROR) {\n         return Icon.CLR_ERROR_ICON_CLASS;\n      } else if (card.validationData?.status === HciValidationData.Status.PASSED) {\n         return Icon.CLR_SUCCESS_ICON_CLASS;\n      } else {\n         return null;\n      }\n   }\n\n   invokeEditCluster(): void {\n      const actionEval: any = {\n         action: {\n            label: VsanUiUtils.getString(\"vsan.cluster.hci.clusterBasics.edit.action\"),\n         },\n      };\n      this.navigationService.invokePlatformAction(PlatformExtension.CLUSTER_EDIT, [ManagedObject.contextObjectUid],\n            null, actionEval);\n   }\n\n   invokeAddHosts(): void {\n      this.navigationService.invokePlatformAction(PlatformExtension.ADD_HOSTS, [ManagedObject.contextObjectUid]);\n   }\n\n   async invokeConfigureWizard(): Promise<void> {\n      try {\n         this.configureClusterCard.enabled = false;\n         const result: ConfigureWizardData = await this.hciConfigureService\n               .getConfigureWizardData(ManagedObject.contextObject);\n         this.handleConfigureWizardData(result);\n      } catch (e) {\n         this.alertMessage = e;\n         Logger.error(e);\n      } finally {\n         this.configureClusterCard.enabled = true;\n      }\n   }\n\n   private handleConfigureWizardData(result: ConfigureWizardData): void {\n      if (result.openYesNoDialog) {\n         new ModalBuilder(\"hciCluster/confirmationDialog\")\n               .setSize(\n                     GettingStartedViewComponent.CONFIGURE_CONFIRM_DIALOG_WIDTH,\n                     GettingStartedViewComponent.CONFIGURE_CONFIRM_DIALOG_HEIGHT)\n               .open({title: result.dialogText})\n               .then(() => {\n                  this.refresh();\n               });\n      } else if (result.openWarningDialog) {\n         new ModalBuilder(\"hciCluster/warningDialog\")\n               .setSize(\n                     GettingStartedViewComponent.CONFIGURE_WARNING_DIALOG_WIDTH,\n                     result.warningDialogContent && result.warningDialogContent.length\n                           ? GettingStartedViewComponent.CONFIGURE_WARNING_NETWORK_DIALOG_HEIGHT\n                           : GettingStartedViewComponent.CONFIGURE_WARNING_DIALOG_HEIGHT)\n               .open({\n                  title: result.dialogText,\n                  content: result.warningDialogContent,\n               })\n               .then(() => {\n                  this.refresh();\n               });\n      } else {\n         const configureWizardContext: HciConfigureWizardContext = {\n            configureWizardData: result,\n            isVsanMaxSupportedOnHosts: this.isVsanMaxSupportedOnHosts,\n         };\n         new ModalBuilder(VsanRoutes.HCI_CONFIGURE_WIZARD)\n               .setDimensions(ModalBuilder.WIZARD_XL)\n               .open(configureWizardContext)\n               .then((task: ManagedObject) => {\n                  // trigger refresh in order to disable the card until the task is done\n                  this.fetch();\n\n                  this.taskService.getAwaitResult(task).then(() => {\n                     this.refresh();\n                  });\n               }); // catch is impossible\n      }\n   }\n\n   // Repeatedly check if the operation has failed in order to avoid indefinite card loading.\n   // If the operation has failed, refresh is be triggered.\n   private checkConfigOperationInProgress(): any {\n      return setInterval(() => {\n         this.hciQuickstartService.isConfigureOperationInProgress(ManagedObject.contextObject)\n               .then((result: boolean) => {\n                  // when the operation is no longer in progress refresh is triggered\n                  if (!result) {\n                     this.refresh();\n                     clearInterval(this.configOperationTimer);\n                  }\n               })\n               .catch(() => {\n                  clearInterval(this.configOperationTimer);\n               });\n\n      }, GettingStartedViewComponent.CHECK_OPERATION_TIMEOUT_MS);\n   }\n\n   closeQuickstart(): void {\n      new ModalBuilder(\"hciCluster/dismissQuickstart\")\n            .setSize(\n                  GettingStartedViewComponent.DISMISS_DIALOG_WIDTH,\n                  GettingStartedViewComponent.DISMISS_DIALOG_HEIGHT)\n            .open()\n            .then(() => {\n               this.showCloseQuickstartButton = true;\n               this.refresh();\n            });\n   }\n\n   private registerRefreshEvents = () => {\n      window.addEventListener(\n            GettingStartedViewComponent.MESSAGE,\n            (event: any) => {\n               if (event.data === GettingStartedViewComponent.REFRESH_EVENT_NAME) {\n                  this.refresh();\n               }\n            },\n            false);\n\n      this.refreshStream.pipe(auditTime(GettingStartedViewComponent.REFRESH_DEBOUNCE_MS))\n            .subscribe(() => {\n               this.fetch();\n            });\n   };\n\n   refresh(): void {\n      // The data fetch will not happen more than once every two seconds.\n      // It will be triggered at the end of the interval.\n      // This is done in order to prevent firing multiple data fetch requests\n      // at the same time due to live and self refresh.\n      this.refreshStream.next();\n   }\n\n   ngOnDestroy(): void {\n      (window as any).removeEventListener(GettingStartedViewComponent.MESSAGE);\n      if (this.configOperationTimer) {\n         clearInterval(this.configOperationTimer);\n      }\n   }\n}\n","/* Copyright 2017-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, OnInit} from \"@angular/core\";\nimport {HciClusterService} from \"@generated/hci-cluster-service\";\nimport {ClusterComputeResource} from \"@service/client/dataservice/data-service-property\";\nimport {DataServiceClient} from \"@service/client/dataservice/data-service.service\";\nimport {ManagedObject} from \"@service/managed-object\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\n\n@Component({\n   template: `\n      <vsan-prompt\n            [title]=\"title\"\n            [confirmText]=\"'vsan.common.continue'\"\n            [cancelText]=\"'vsan.common.cancel'\"\n            [blockContent]=\"busy\"\n            [blockButton]=\"busy\"\n            (onConfirm)=\"proceed()\"\n            (onCancel)=\"close()\">\n         <span>\n            {{\"vsan.cluster.hci.configureHciCluster.dialog.text\" | localized}}\n         </span>\n         <span *ngIf=\"showLockdownMode\">\n            {{\"vsan.cluster.hci.configureHciCluster.dialog.lockdownModeText\" | localized:lockdownModeString}}\n         </span>\n      </vsan-prompt>\n   `,\n   selector: \"vsan-configure-confirmation\"\n})\nexport class ConfigureConfirmationDialogComponent implements OnInit {\n\n   busy: boolean;\n   title: boolean;\n   showLockdownMode: boolean = false;\n   lockdownModeString: string;\n\n   constructor(private hciClusterService: HciClusterService, private dataService: DataServiceClient) {\n   }\n\n   async ngOnInit(): Promise<void> {\n      this.busy = true;\n      this.title = VsanUiUtils.getModalContext().title;\n      const lockdownMode: string = await this.dataService\n            .getProperty(ClusterComputeResource.hciConfig.hostConfigProfile.lockdownMode, ManagedObject.contextObject);\n      this.showLockdownMode = !(\"lockdownDisabled\" === lockdownMode);\n      if (this.showLockdownMode) {\n         this.lockdownModeString = (\"lockdownNormal\" === lockdownMode)\n               ? VsanUiUtils.getString(\"vsan.cluster.configure.wizard.advancedOptions.host.options.lockdown.mode.normal\")\n               : VsanUiUtils.getString(\"vsan.cluster.configure.wizard.advancedOptions.host.options.lockdown.mode.strict\");\n      }\n      this.busy = false;\n   }\n\n   proceed = (): void => {\n      this.hciClusterService.simpleClusterExtend(ManagedObject.contextObject)\n            .then(() => {\n               this.close()\n            });\n   };\n\n   close = (): void => {\n      VsanUiUtils.closeModalDialog(true);\n   };\n}\n","/* Copyright 2019-2020 VMware, Inc. All rights reserved. -- VMware Confidential */\n\nimport {VsanTestData} from \"@generated/vsan-test-data\";\n\n/**\n * Data model used to display health tests summary cards.\n */\nexport class HealthTests {\n   constructor(\n         public testData: VsanTestData,\n         public isCollapsed: boolean = true) {\n   }\n}\n","/* Copyright 2020-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {NgModule} from \"@angular/core\";\nimport {ClarityModule} from \"@clr/angular\";\nimport {FormsModule} from \"@angular/forms\";\nimport {CommonModule} from \"@angular/common\";\nimport {RouterModule, Routes} from \"@angular/router\";\nimport {CommonPipeModule} from \"@pipe/common-pipe.module\";\nimport {PromptModule} from \"@component/dialog/prompt/prompt.module\";\nimport {HealthDetailsCardModule} from \"../health/health-details-card.module\";\nimport {HealthCheckDialogComponent} from \"./health/health-check-dialog.component\";\nimport {GettingStartedViewComponent} from \"./gettingstarted/getting-started-view.component\";\nimport {DismissQuickstartDialogComponent} from \"./dismiss/dismiss-quickstart-dialog.component\";\nimport {ConfigureWarningDialogComponent} from \"./configure/dialog/configure-warning-dialog.component\";\nimport {ConfigureConfirmationDialogComponent} from \"./configure/dialog/configure-confirmation-dialog.component\";\nimport {ValidationModule} from \"@component/validation/validation.module\";\nimport {CommonDirectiveModule} from \"@directive/common-directive.module\";\nimport {HealthCheckItemModule} from \"@component/health/health-check-item.module\";\nimport {HciPmanComponent} from \"./gettingstarted/hci-pman.component\";\n\nconst hciRoutes: Routes = [\n   {\n      path: \"\",\n      component: GettingStartedViewComponent,\n   },\n   {\n      path: \"warningDialog\",\n      component: ConfigureWarningDialogComponent,\n   },\n   {\n      path: \"confirmationDialog\",\n      component: ConfigureConfirmationDialogComponent,\n   },\n   {\n      path: \"healthCheckDialog\",\n      component: HealthCheckDialogComponent,\n   },\n   {\n      path: \"dismissQuickstart\",\n      component: DismissQuickstartDialogComponent,\n   },\n];\n\n@NgModule({\n   imports: [\n      FormsModule,\n      CommonModule,\n      PromptModule,\n      ClarityModule,\n      CommonPipeModule,\n      CommonDirectiveModule,\n      HealthDetailsCardModule,\n      ValidationModule,\n      HealthCheckItemModule,\n      RouterModule.forChild(hciRoutes),\n   ],\n   declarations: [\n      HealthCheckDialogComponent,\n      GettingStartedViewComponent,\n      HciPmanComponent,\n      ConfigureWarningDialogComponent,\n      DismissQuickstartDialogComponent,\n      ConfigureConfirmationDialogComponent,\n   ],\n})\nexport class GettingStartedViewModule {\n}\n","/* Copyright 2020 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {NgModule} from \"@angular/core\";\nimport {VsanBreadcrumbNavComponent} from \"./vsan-breadcrumb-nav.component\";\nimport {ClarityModule} from \"@clr/angular\";\nimport {CommonModule} from \"@angular/common\";\nimport {CommonDirectiveModule} from \"@directive/common-directive.module\";\nimport {CommonPipeModule} from \"@pipe/common-pipe.module\";\n\n@NgModule({\n   imports: [CommonModule, ClarityModule, CommonDirectiveModule, CommonPipeModule],\n   declarations: [VsanBreadcrumbNavComponent],\n   exports: [\n      VsanBreadcrumbNavComponent,\n   ],\n})\nexport class VsanBreadcrumbModule {}\n","/* Copyright 2017-2019 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component} from \"@angular/core\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {ManagedObject} from \"@service/managed-object\";\nimport {HciClusterService} from \"@generated/hci-cluster-service\";\n\n@Component({\n   template:`\n      <vsan-prompt\n            [title]=\"'vsan.cluster.hci.gettingStartedPage.closeQuickstart.title' | localized\"\n            [confirmText]=\"'vsan.common.continue'\"\n            [cancelText]=\"'vsan.common.cancel'\"\n            [confirmStyle]=\"'btn-danger'\"\n            [blockContent]=\"busy\"\n            [blockButton]=\"busy\"\n            (onConfirm)=\"continue()\"\n            (onCancel)=\"close()\">\n         {{\"vsan.cluster.hci.gettingStartedPage.closeQuickstart.description\" | localized}}\n      </vsan-prompt>\n   `,\n   selector: \"vsan-dismiss-quickstart\"\n})\nexport class DismissQuickstartDialogComponent {\n\n   busy: boolean;\n\n   constructor(private hciClusterService: HciClusterService) {}\n\n   continue = (): void => {\n      this.busy = true;\n      this.hciClusterService.abandonHciWorkflowCluster(ManagedObject.contextObject)\n            .then(() => {\n               this.busy = false;\n               this.close(true)\n            });\n   };\n\n   close = (isDialogClosed: boolean = undefined): void => {\n      VsanUiUtils.closeModalDialog(isDialogClosed);\n   };\n}\n","/* Copyright 2019-2022 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {ContentChildren, Directive, ElementRef, Input} from \"@angular/core\";\nimport {ClrButton} from \"@clr/angular\";\nimport {ButtonTitleDirective} from \"./button-title.directive\";\n\n/**\n * Attribute directive used to dynamically arrange child buttons, align some horizontally and\n * put the others into the drop-down list, this directive also add title attribute to the buttons.\n * It can only used on clr-button-group and there should be clr-button in the button group.\n * @maximumInlineActions - The maximum value of inline buttons.\n */\n@Directive({\n   selector: \"clr-button-group[vsan-button-group]\",\n})\nexport class ButtonGroupDirective {\n\n   private static readonly TOGGLE_MENU_BUTTON_SELECTOR: string = \"button.btn.dropdown-toggle\";\n   private static readonly VISIBLE_BUTTON_ELEMENTS_SELECTOR: string = \"button\";\n   private static readonly IN_MENU_BUTTON_ELEMENTS_SELECTOR: string = \"div.clr-button-group-menu > button\";\n\n   // Set the maximum value to 10 to display all buttons inline when there is enough space.\n   private _maximumInlineActions: number = 10;\n\n   @Input(\"vsan-button-group\")\n   set maximumInlineActions(value: number) {\n      if (!!value) {\n         this._maximumInlineActions = value;\n      }\n   }\n\n   private _buttonTitleDirectives: ButtonTitleDirective[] = [];\n\n   @ContentChildren(ButtonTitleDirective, {descendants: true})\n   set buttons(value: ButtonTitleDirective[]) {\n      this._buttonTitleDirectives = value;\n      this._buttonTitleDirectives.forEach(titleDirective => {\n         // Update button title when its title in directive changes.\n         titleDirective.titleChangeEvent.subscribe(() => {\n            setTimeout(this.updateButtonTitles);\n         });\n      });\n\n      // when action buttons with directive are changed (added / removed) some of them may go to the menu with\n      // additional actions. There is no other way found to handle toggle menu event, but click on the toggle button.\n      this.subscribeToggleButtonClick();\n   }\n\n   private _btns: ClrButton[];\n\n   @ContentChildren(ClrButton, {descendants: true})\n   set clrButtons(btns: ClrButton[]) {\n      this._btns = btns;\n      this.updateInMenuButtons();\n   }\n\n   constructor(private elRef: ElementRef) {\n   }\n\n   private updateInMenuButtons(): void {\n      const groupWithMenu: boolean = this._btns.length > this._maximumInlineActions;\n      this._btns.forEach((btn, index) => {\n         if (groupWithMenu) {\n            // When the number of buttons exceeds the maximum and the button overflows, place the button in the menu.\n            btn.inMenu = index >= this._maximumInlineActions - 1;\n         } else {\n            btn.inMenu = false;\n         }\n      });\n   }\n\n   private updateButtonTitles = (): void => {\n      const allButtons: HTMLButtonElement[] = this.getVisibleButtons().concat(this.getInMenuButtons());\n      if (!allButtons.length) {\n         return;\n      }\n\n      // if there is a rendered button for the directive - update its title.\n      this._buttonTitleDirectives.forEach(titleDirective => {\n         allButtons.forEach((button: HTMLElement) => {\n            if (button.getAttribute(\"name\") === titleDirective.host.name) {\n               button.title = titleDirective.title;\n            }\n         });\n      });\n   };\n\n   private subscribeToggleButtonClick(): void {\n      // If there is menu with additional buttons, find the toggle button and update button names on click.\n      setTimeout(() => {\n         const toggleButton: HTMLElement | null = this.getToggleButton();\n\n         // if there is a toggle button set function to handle the click event only once.\n         if (toggleButton && !toggleButton.onclick) {\n            toggleButton.onclick = this.updateButtonTitles;\n         }\n      });\n   }\n\n   // the buttons are visible buttons in button group, toggle menu button\n   private getVisibleButtons(): HTMLButtonElement[] {\n      return Array.from(this.elRef.nativeElement.querySelectorAll(\n            ButtonGroupDirective.VISIBLE_BUTTON_ELEMENTS_SELECTOR));\n   }\n\n   // inMenu buttons are rendered outside of the elRef, get them directly from the document\n   private getInMenuButtons(): HTMLButtonElement[] {\n      return Array.from(this.elRef.nativeElement.ownerDocument.querySelectorAll(\n            ButtonGroupDirective.IN_MENU_BUTTON_ELEMENTS_SELECTOR));\n   }\n\n   private getToggleButton(): HTMLElement | null {\n      return this.elRef.nativeElement.querySelector(ButtonGroupDirective.TOGGLE_MENU_BUTTON_SELECTOR);\n   }\n}","/* Copyright 2017-2020 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Pipe, PipeTransform} from \"@angular/core\";\nimport {BaseHealthState, VsanHealthUtil} from \"@util/vsan-health-util\";\n\n@Pipe({\n   name: \"healthStateLabel\",\n})\nexport class VirtualObjectHealthStateLabelPipe implements PipeTransform {\n   transform(state: BaseHealthState | string): string {\n      return VsanHealthUtil.getVsanObjectHealthStatusText(state);\n   }\n}","\n      <vsan-info-prompt [title]=\"title\"\n                        [isCallbackTriggerEnabled]=\"true\"\n                        confirmText=\"vsan.common.ok\">\n         <vsan-validation *ngIf=\"incompatibleNetworkConfig\"\n                          [alertType]=\"'danger'\"\n                          [allowClose]=\"false\"\n                          [alert]=\"'vsan.cluster.hci.configureHciCluster.warningDialog.errorMessage' | localized\">\n         </vsan-validation>\n         <p *ngFor=\"let message of content\">{{message}}</p>\n      </vsan-info-prompt>\n   ","/* Copyright 2020-2022 VMware, Inc. All rights reserved. -- VMware Confidential */\nexport class VsanDialogUtil {\n   static readonly CAPACITY_MANAGEMENT_DIALOG: VsanDialogProperties = {\n      width: 800,\n      height: 700,\n   };\n\n   static readonly DELETE_VOLUME_DIALOG: VsanDialogProperties = {\n      width: 500,\n      height: 250,\n   };\n\n   static readonly MIGRATE_VOLUME_DIALOG: VsanDialogProperties = {\n      width: 1030,\n      height: 710,\n   };\n\n   static readonly REAPPLY_VOLUME_POLICY_DIALOG: VsanDialogProperties = {\n      width: 700,\n      height: 250,\n   };\n\n   static readonly DUPLICATE_PCI_ID_MODEL_SELECTION_DIALOG: VsanDialogProperties = {\n      width: 800,\n      height: 500,\n   };\n\n   static readonly HEALTH_RESTORE_ACTION_DIALOG: VsanDialogProperties = {\n      width: 550,\n      height: 250,\n   };\n\n   // Keep in sync with plugin.xml extension point\n   static readonly CLUSTER_POWER_ON_DIALOG: VsanDialogProperties = {\n      width: 600,\n      height: 230,\n   };\n\n   static readonly VM_IO_DIAGNOSTICS_METRICS_DIALOG: VsanDialogProperties = {\n      width: 900,\n      height: 700,\n   };\n\n   static readonly VM_IO_DIAGNOSTICS_LATENCY_DIALOG: VsanDialogProperties = {\n      width: 1000,\n      height: 500,\n   };\n\n   static readonly VM_IO_DIAGNOSTICS_DOM_OWNER_LATENCY_DIALOG: VsanDialogProperties = {\n      width: 1000,\n      height: 400,\n   };\n\n   static readonly PERF_SVC_EDIT_ACTION_DIALOG: VsanDialogProperties = {\n      width: 800,\n      height: 450,\n   };\n\n   static readonly PERF_SVC_ENABLE_ACTION_DIALOG: VsanDialogProperties = {\n      width: 800,\n      height: 250,\n   };\n\n   static readonly CLAIM_DISKS_ACTION_DIALOG: VsanDialogProperties = {\n      width: 1200,\n      height: 650,\n   };\n\n   static readonly VSAN_DISK_CLAIM_ACTION_DIALOG: VsanDialogProperties = {\n      width: 670,\n      height: 300,\n   };\n}\n\nexport class VsanDialogProperties {\n   width: number;\n   height: number;\n}\n","/* Copyright 2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {BasicClusterConfigData} from \"@generated/basic-cluster-config-data\";\nimport {HciConfigureClusterCardData} from \"@generated/hci-configure-cluster-card-data\";\nimport {HciWorkflowState} from \"@generated/hci-workflow-state\";\n\nexport class GettingStartedUtils {\n\n   static getEnabledServices(basicClusterConfigData: BasicClusterConfigData): string[] {\n      const result: string[] = [];\n\n      if (basicClusterConfigData.drsEnabled) {\n         result.push(VsanUiUtils.getString(\"vsan.hci.gettingStarted.basicConfigCard.services.drs\"));\n      }\n\n      if (basicClusterConfigData.haEnabled) {\n         result.push(VsanUiUtils.getString(\"vsan.hci.gettingStarted.basicConfigCard.services.ha\"));\n      }\n\n      if (basicClusterConfigData.vsanEnabled) {\n         result.push(VsanUiUtils.getString(basicClusterConfigData.isVsanMaxEnabled ?\n               \"vsan.hci.gettingStarted.basicConfigCard.services.vsanMax\" :\n               \"vsan.hci.gettingStarted.basicConfigCard.services.vsan\"));\n      }\n\n      if (basicClusterConfigData.isComputeOnlyCluster) {\n         result.push(VsanUiUtils.getString(\"vsan.hci.gettingStarted.basicConfigCard.services.vsanComputeOnly\"));\n      }\n\n      return result;\n   }\n\n   static getClusterBasicsHeader(enabledServices: string[]): string {\n      return  VsanUiUtils.getString(enabledServices.length > 0\n            ? \"vsan.hci.gettingStarted.basicConfigCard.contentHeader.selectedServices\"\n            : \"vsan.hci.gettingStarted.basicConfigCard.contentHeader.noServices\");\n   }\n\n   static getConfigureClusterHeader(isExtend: boolean) : string {\n      return  VsanUiUtils.getString(isExtend\n            ? \"vsan.hci.gettingStarted.configureServicesCard.titleInExtend\"\n            : \"vsan.hci.gettingStarted.configureServicesCard.title\");\n   }\n\n   static getHostsLabel(basicClusterConfigData: BasicClusterConfigData): string {\n      if (basicClusterConfigData.notConfiguredHosts !== 0) {\n         if (basicClusterConfigData.notConfiguredHosts === basicClusterConfigData.totalHosts) {\n            return VsanUiUtils.getString(\n                  \"vsan.hci.gettingStarted.addHostsCard.notConfiguredHostsInTheCluster\",\n                  basicClusterConfigData.notConfiguredHosts);\n         } else {\n            return VsanUiUtils.getString(\n                  \"vsan.hci.gettingStarted.addHostsCard.hostsInTheClusterByType\",\n                  basicClusterConfigData.totalHosts,\n                  basicClusterConfigData.notConfiguredHosts);\n         }\n      } else {\n         return VsanUiUtils.getString(\n               \"vsan.hci.gettingStarted.addHostsCard.hostsInTheCluster\",\n               basicClusterConfigData.totalHosts);\n      }\n   }\n\n   static getConfiguredClusterHeaderLabel(configData: BasicClusterConfigData): string {\n      if (configData.hciWorkflowState === HciWorkflowState.DONE && configData.notConfiguredHosts > 0) {\n         return configData.notConfiguredHosts === 1 ?\n               VsanUiUtils.getString(\"vsan.hci.gettingStarted.configureServicesCard.notConfiguredHostText\") :\n               VsanUiUtils.getString(\"vsan.hci.gettingStarted.configureServicesCard.notConfiguredHostsText\",\n                     configData.notConfiguredHosts);\n      }\n      return null;\n   }\n\n   static getConfigureCardContentText(configureClusterCard: HciConfigureClusterCardData,\n         basicClusterConfigData: BasicClusterConfigData): string {\n      if (configureClusterCard.validateEnabled && configureClusterCard.validationData) {\n         // When validation has passed, only the validation result will be shown in the cluster card.\n         return null;\n      }\n      if (basicClusterConfigData.drsEnabled && basicClusterConfigData.vsanEnabled) {\n         return VsanUiUtils.getString(\"vsan.hci.gettingStarted.configureServicesCard.contentText.vMotionVsanTraffic\");\n      }\n      if (basicClusterConfigData.drsEnabled) {\n         return VsanUiUtils.getString(\"vsan.hci.gettingStarted.configureServicesCard.contentText.vMotionTraffic\");\n      }\n      if (basicClusterConfigData.vsanEnabled) {\n         return VsanUiUtils.getString(\"vsan.hci.gettingStarted.configureServicesCard.contentText.vSanTraffic\");\n      }\n\n      return VsanUiUtils.getString(\"vsan.hci.gettingStarted.configureServicesCard.contentText.default\");\n   }\n}","/* Copyright 2019-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {NgModule} from \"@angular/core\";\nimport {CommonModule} from \"@angular/common\";\nimport {FormsModule} from \"@angular/forms\";\nimport {ClarityModule} from \"@clr/angular\";\nimport {ValidationModule} from \"@component/validation/validation.module\";\nimport {CommonPipeModule} from \"@pipe/common-pipe.module\";\nimport {CommonDirectiveModule} from \"@directive/common-directive.module\";\nimport {HealthStatusCell} from \"@component/cell/health-status-cell.component\";\nimport {LabelCell} from \"@component/cell/label-cell.component\";\nimport {StoragePolicyCell} from \"@component/cell/storage-policy-cell.component\";\nimport {MorCell} from \"@component/cell/mor-cell.component\";\nimport {IconItemComponent} from \"@component/cell/icon-item.component\";\nimport {HealthStateItemComponent} from \"@component/cell/health-state-item.component\";\nimport {ListCell} from \"@component/cell/list-cell.component\";\nimport {PspHealthStateItemComponent} from \"@component/cell/psp-health-state-item.component\";\nimport {HealthTestValueComponent} from \"@component/cell/health-test-value.component\";\nimport {HealthLinkCellComponent} from \"@component/cell/health-link-cell.component\";\nimport {HealthMorCellComponent} from \"@component/cell/health-mor-cell.component\";\n\n@NgModule({\n   imports: [\n      CommonModule,\n      FormsModule,\n      ClarityModule,\n      ValidationModule,\n      CommonPipeModule,\n      CommonDirectiveModule,\n   ],\n   // TODO: (vasilevd) Move health specific components to a separate common health module\n   declarations: [\n      HealthStatusCell,\n      HealthTestValueComponent,\n      LabelCell,\n      StoragePolicyCell,\n      MorCell,\n      HealthMorCellComponent,\n      ListCell,\n      IconItemComponent,\n      HealthStateItemComponent,\n      PspHealthStateItemComponent,\n      HealthLinkCellComponent,\n   ],\n   exports: [\n      HealthStatusCell,\n      HealthTestValueComponent,\n      LabelCell,\n      StoragePolicyCell,\n      MorCell,\n      HealthMorCellComponent,\n      ListCell,\n      IconItemComponent,\n      HealthStateItemComponent,\n      PspHealthStateItemComponent,\n      HealthLinkCellComponent,\n   ],\n})\nexport class CommonCellsModule {\n}\n","/* Copyright 2019-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {NgModule} from \"@angular/core\";\nimport {CommonModule} from \"@angular/common\";\nimport {FormsModule} from \"@angular/forms\";\nimport {ClarityModule} from \"@clr/angular\";\nimport {CommonPipeModule} from \"@pipe/common-pipe.module\";\nimport {InventoryBrowserComponent} from \"@component/inventory/inventory-browser.component\";\nimport {InventoryNodeComponent} from \"@component/inventory/inventory-node.component\";\nimport {WitnessCandidateInventoryService} from \"@generated/witness-candidate-inventory-service\";\nimport {DatacenterInventoryService} from \"@generated/datacenter-inventory-service\";\nimport {NetworkInventoryService} from \"@generated/network-inventory-service\";\nimport {ComputeInventoryService} from \"@generated/compute-inventory-service\";\nimport {IoInsightInventoryService} from \"@generated/io-insight-inventory-service\";\nimport {SearchModule} from \"@component/search/search.module\";\nimport {TreeNodeComponent} from \"@component/inventory/tree-view/tree-node.component\";\nimport {TreeViewComponent} from \"@component/inventory/tree-view/tree-view.component\";\nimport {DropdownObjectSelectorComponent} from \"@component/inventory/dropdown-object-selector/dropdown-object-selector.component\";\nimport {CommonDirectiveModule} from \"@directive/common-directive.module\";\nimport {InventoryNodesComponent} from \"@component/inventory/inventory-nodes.component\";\nimport {TreeNodesComponent} from \"@component/inventory/tree-view/tree-nodes.component\";\n\n@NgModule({\n   imports: [\n      CommonModule,\n      FormsModule,\n      ClarityModule,\n      CommonPipeModule,\n      SearchModule,\n      CommonDirectiveModule,\n   ],\n   declarations: [\n      InventoryBrowserComponent,\n      InventoryNodesComponent,\n      InventoryNodeComponent,\n      TreeNodeComponent,\n      TreeNodesComponent,\n      TreeViewComponent,\n      DropdownObjectSelectorComponent,\n   ],\n   exports: [\n      InventoryBrowserComponent,\n      DropdownObjectSelectorComponent,\n      TreeViewComponent,\n   ],\n   providers: [\n      WitnessCandidateInventoryService,\n      DatacenterInventoryService,\n      NetworkInventoryService,\n      ComputeInventoryService,\n      IoInsightInventoryService,\n   ],\n})\nexport class InventoryBrowserModule {\n}","\n      <vsan-prompt\n            [title]=\"'vsan.cluster.hci.gettingStartedPage.closeQuickstart.title' | localized\"\n            [confirmText]=\"'vsan.common.continue'\"\n            [cancelText]=\"'vsan.common.cancel'\"\n            [confirmStyle]=\"'btn-danger'\"\n            [blockContent]=\"busy\"\n            [blockButton]=\"busy\"\n            (onConfirm)=\"continue()\"\n            (onCancel)=\"close()\">\n         {{\"vsan.cluster.hci.gettingStartedPage.closeQuickstart.description\" | localized}}\n      </vsan-prompt>\n   ","/* Copyright 2021 VMware, Inc. All rights reserved. -- VMware Confidential */\n/**\n * Util methods for manipulating DOM\n */\nexport class DomUtil {\n   static onClick(element: HTMLElement, callback: () => any): void {\n      element.addEventListener(\"click\", () => callback());\n   }\n\n   static onEnterKeyUp(element: HTMLElement, callback: () => any): void {\n      element.addEventListener(\"keyup\", (event) => {\n         // Handle \"Enter\" key on the keyboard\n         if (event.keyCode === 13) {\n            callback();\n         }\n      });\n   }\n\n   static onMouseOver(element: HTMLElement, callback: () => any): void {\n      element.addEventListener(\"mouseover\", () => callback());\n   }\n\n   static onMouseOut(element: HTMLElement, callback: () => any): void {\n      element.addEventListener(\"mouseout\", () => callback());\n   }\n\n   /**\n    * Causes the DOM elements matching the given selector to be redrawn by the browser's layout enging.\n    * This is useful when the browser fails to render some elements correctly and by redrawing them, this is fixed.\n    */\n   static redraw(selector: string): void {\n      setTimeout(() => {\n         $(selector).hide().show(0);\n      }, 100);\n   }\n\n   static domElementExists(elementName: string): boolean {\n      return !!document.getElementById(elementName);\n   }\n}","<!--Copyright 2018-2021 VMware, Inc. All rights reserved. -- VMware Confidential-->\n\n<vsan-info-prompt [title]=\"title\"\n                  [(alertMessages)]=\"alertMessages\"\n                  [blockContent]=\"loading\"\n                  confirmText=\"vsan.common.ok\">\n   <ng-container *ngIf=\"!loading && !displayGroup\">\n      <vsan-health-details-card id=\"test-details\"\n                                class=\"details-card\"\n                                [data]=\"testData\"\n                                [hasEditPermissions]=\"hasEditClusterPermission\"\n                                [showTestName]=\"false\">\n      </vsan-health-details-card>\n   </ng-container>\n   <div *ngIf=\"!loading && displayGroup\">\n      <div *ngFor=\"let test of groupTests;let i=index\"\n           class=\"sidenav\">\n         <section class=\"sidenav-content\">\n            <section class=\"nav-group collapsible\">\n               <input id=\"check-{{i}}\"\n                      type=\"checkbox\"\n                      [(ngModel)]=\"test.isCollapsed\"/>\n               <label for=\"check-{{i}}\" title=\"{{test.testData.testDescription}}\">\n                  <clr-icon [attr.shape]=\"getIconShape(test.testData)\"\n                            size=\"24\"\n                            [attr.class]=\"'is-solid ' + getIconClass(test.testData)\">\n                  </clr-icon>\n                  <span title=\"{{test.testData.testName}}\">{{test.testData.testName}}</span>\n               </label>\n\n               <vsan-health-details-card class=\"details-card\"\n                                         *ngIf=\"!test.isCollapsed\"\n                                         [data]=\"test.testData\"\n                                         [hasEditPermissions]=\"hasEditClusterPermission\"\n                                         [showTestName]=\"false\">\n               </vsan-health-details-card>\n            </section>\n         </section>\n      </div>\n   </div>\n</vsan-info-prompt>","/* Copyright 2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {\n   AfterViewInit,\n   ComponentFactoryResolver,\n   Directive,\n   ElementRef,\n   Host,\n   Input,\n   Optional,\n   Renderer2,\n   Self,\n} from \"@angular/core\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {NavigationService} from \"@navigation/navigation.service\";\nimport {ClrButtonBaseDirective} from \"@directive/clr-button-group/clr-button-base.directive\";\nimport {ClrButton} from \"@clr/angular\";\n\n/**\n * Decorates a button or an anchor as external link. Requires one of the optional parameters articleId, helpId or url.\n *\n * @param external-link: Optional. Localization key of the text label of the external link. If omitted default label\n * will be used - \"Learn more\" for anchors or \"Ask VMWare\" for buttons.\n * @param articleId - Optional. Id of article in knowledge base.\n * @param helpId - Optional. Help id which will redirect to Knowledge Base.\n * @param url - Optional. External URL.\n */\n@Directive({\n   selector: \"a[external-link], button[external-link], clr-button[external-link]\",\n})\nexport class ExternalLinkDirective extends ClrButtonBaseDirective implements AfterViewInit {\n   private readonly ASK_VMWARE_DEFAULT_TEXT_KEY: string = \"vsan.common.askVMware\";\n   private readonly LEARN_MORE_DEFAULT_TEXT_KEY: string = \"vsan.common.learnMore\";\n\n   private readonly CONTAINER_CLASS: string = \"icon-name-container\";\n   private readonly NAVIGATION_EVENT_TYPE: string = \"click\";\n   private readonly LEAD_TO_NOWHERE_URL: string = \"javascript://\";\n   private readonly HTML_ELEMENT_SPAN_NAME: string = \"span\";\n   private readonly HTML_ELEMENT_ICON_NAME: string = \"clr-icon\";\n   private readonly HTML_ELEMENT_ROLE_ATTR_NAME: string = \"role\";\n   private readonly HTML_ELEMENT_ROLE_ATTR_VALUE: string = \"link\";\n   private readonly ICON_SHAPE_ATTR_NAME: string = \"shape\";\n   private readonly ICON_SHAPE_ATTR_VALUE: string = \"pop-out\";\n   private readonly ICON_SIZE_ATTR_NAME: string = \"size\";\n   private readonly ICON_SIZE_ATTR_VALUE: string = \"16\";\n   private readonly ICON_CLASS_ATTR_NAME: string = \"class\";\n   private readonly ICON_CLASS_ATTR_VALUE: string = \"link\";\n   private readonly ICON_TITLE_ATTR_NAME: string = \"title\";\n\n   private readonly KB_URL: string = \"http://kb.vmware.com/kb/\";\n\n   @Input(\"external-link\")\n   anchorText: string;\n\n   @Input()\n   articleId: string;\n\n   @Input()\n   helpId: string;\n\n   @Input()\n   url: string;\n\n   constructor(private el: ElementRef<HTMLElement>,\n         private resolver: ComponentFactoryResolver,\n         private renderer: Renderer2,\n         private navigationService: NavigationService,\n         // this variable will be initialized only if the host is clr-button\n         @Host() @Self() @Optional() clrButton: ClrButton) {\n      super(clrButton);\n   }\n\n   ngAfterViewInit(): void {\n      const element: HTMLElement = this.el.nativeElement;\n      // continue only if element is HTML link or button\n      if (!this.isLink(element) && !this.isButton(element)) {\n         // element is clr-button, wait until html button for it is resolved - handled by resloveButton\n         return;\n      }\n      this.prepareExternalLink(element);\n   }\n\n   resolveButton(clrButton: ClrButton, button: HTMLButtonElement, index: number): void {\n      // only if element is clr-button. At this point the html button is already resolved. Apply on it.\n      this.prepareExternalLink(button);\n   }\n\n   private prepareExternalLink(element: HTMLElement): void {\n      this.renderer.addClass(element, this.CONTAINER_CLASS);\n\n      this.setText(element);\n      if (this.isLink(element)) {\n         this.decorateLink(element);\n      } else {\n         this.addLinkRole(element);\n      }\n\n      this.initializeNavigationHandler(element);\n   }\n\n   private isButton(element: HTMLElement): boolean {\n      return element instanceof HTMLButtonElement;\n   }\n\n   private isLink(element: HTMLElement): boolean {\n      return element instanceof HTMLAnchorElement;\n   }\n\n   private setText(element: HTMLElement): void {\n      const span: HTMLSpanElement = this.renderer.createElement(this.HTML_ELEMENT_SPAN_NAME);\n      span.innerText = this.getText(element);\n      this.renderer.appendChild(element, span);\n\n      const icon: HTMLSpanElement = this.renderer.createElement(this.HTML_ELEMENT_ICON_NAME);\n      icon.setAttribute(this.ICON_SHAPE_ATTR_NAME, this.ICON_SHAPE_ATTR_VALUE);\n      icon.setAttribute(this.ICON_SIZE_ATTR_NAME, this.ICON_SIZE_ATTR_VALUE);\n      icon.setAttribute(this.ICON_CLASS_ATTR_NAME, this.ICON_CLASS_ATTR_VALUE);\n      // Set title of the icon for screen readers clarity\n      icon.setAttribute(this.ICON_TITLE_ATTR_NAME, VsanUiUtils.getString(\"vsan.screenReader.label.externalLink.icon\"));\n      this.renderer.appendChild(element, icon);\n   }\n\n   private getText(element: HTMLElement): string {\n      if (this.anchorText) {\n         return this.anchorText;\n      }\n      const key: string = this.isButton(element) ? this.ASK_VMWARE_DEFAULT_TEXT_KEY : this.LEARN_MORE_DEFAULT_TEXT_KEY;\n      return VsanUiUtils.getString(key);\n   }\n\n   private decorateLink(element: HTMLElement): void {\n      const linkElement: HTMLLinkElement = element as HTMLLinkElement;\n      // don't use href attribute. If omitted, the link will be not visualized properly.\n      linkElement.href = this.LEAD_TO_NOWHERE_URL;\n      // display link on same line\n      linkElement.style.display = \"inline-flex\";\n   }\n\n   private initializeNavigationHandler(element: HTMLElement): void {\n      element.addEventListener(this.NAVIGATION_EVENT_TYPE, () => {\n         if (this.helpId) {\n            this.navigationService.askVMware(this.helpId);\n            return;\n         }\n         if (this.articleId) {\n            this.navigationService.navigateToAddress(`${this.KB_URL}${this.articleId}`);\n            return;\n         }\n         if (this.url) {\n            this.navigationService.navigateToAddress(this.url);\n         }\n      });\n   }\n\n   // Indicate external navigation by assigning \"link\" role\n   private addLinkRole(element: HTMLElement): void {\n      this.renderer.setAttribute(element, this.HTML_ELEMENT_ROLE_ATTR_NAME, this.HTML_ELEMENT_ROLE_ATTR_VALUE);\n   }\n}","/* Copyright 2019 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {NgModule} from \"@angular/core\";\nimport {CommonDirectiveModule} from \"@directive/common-directive.module\";\nimport {CommonPipeModule} from \"@pipe/common-pipe.module\";\nimport {ValidationModule} from \"@component/validation/validation.module\";\nimport {ActionButtonModule} from \"@component/action-button/action-button.module\";\nimport {PromptModule} from \"@component/dialog/prompt/prompt.module\";\nimport {CommonCellsModule} from \"@component/cell/common-cells.module\";\nimport {InventoryBrowserModule} from \"@component/inventory/inventory-browser.module\";\nimport {SearchModule} from \"@component/search/search.module\";\nimport {TreeDatagridModule} from \"@component/datagrid/tree-datagrid.module\";\nimport {DatetimePickerModule} from \"@component/datetime-picker/datetime-picker.module\";\nimport {PopupListModule} from \"@component/popup-list/popup-list.module\";\nimport {VsanBreadcrumbModule} from \"@component/navigation/vsan-breadcrumb.module\";\n\n@NgModule({\n   imports: [\n         CommonDirectiveModule,\n         CommonPipeModule,\n         ValidationModule,\n         ActionButtonModule,\n         PromptModule,\n         CommonCellsModule,\n         InventoryBrowserModule,\n         SearchModule,\n         TreeDatagridModule,\n         DatetimePickerModule,\n         PopupListModule,\n         VsanBreadcrumbModule,\n   ],\n   exports: [\n      CommonDirectiveModule,\n      CommonPipeModule,\n      ValidationModule,\n      ActionButtonModule,\n      PromptModule,\n      CommonCellsModule,\n      InventoryBrowserModule,\n      SearchModule,\n      TreeDatagridModule,\n      DatetimePickerModule,\n      PopupListModule,\n      VsanBreadcrumbModule,\n   ],\n})\nexport class VsanCommonModule { }","/* Copyright 2019 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {NgModule} from \"@angular/core\";\nimport {CommonModule} from \"@angular/common\";\nimport {FormsModule} from \"@angular/forms\";\nimport {ClarityModule} from \"@clr/angular\";\nimport {CommonPipeModule} from \"@pipe/common-pipe.module\";\nimport {SearchComponent} from \"@component/search/search.component\";\n\n@NgModule({\n   imports: [\n      CommonModule,\n      FormsModule,\n      ClarityModule,\n      CommonPipeModule\n   ],\n   declarations: [\n      SearchComponent\n   ],\n   exports: [\n      SearchComponent\n   ],\n})\nexport class SearchModule {\n}\n","/* Copyright 2019-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {NgModule} from \"@angular/core\";\nimport {CommonModule} from \"@angular/common\";\nimport {ClarityModule} from \"@clr/angular\";\nimport {ActionButtonSeparatorComponent} from \"@component/action-button/action-button-separator.component\";\nimport {ButtonTitleDirective} from \"@component/action-button/button-title.directive\";\nimport {ButtonGroupDirective} from \"@component/action-button/button-group.directive\";\nimport {ButtonGroupWrapDirective} from \"@component/action-button/button-group-wrap.directive\";\n\n@NgModule({\n   imports: [\n      CommonModule,\n      ClarityModule,\n   ],\n   declarations: [\n      ActionButtonSeparatorComponent,\n      ButtonGroupDirective,\n      ButtonGroupWrapDirective,\n      ButtonTitleDirective,\n   ],\n   exports: [\n      ActionButtonSeparatorComponent,\n      ButtonGroupDirective,\n      ButtonGroupWrapDirective,\n      ButtonTitleDirective,\n   ]\n})\nexport class ActionButtonModule {\n}\n","<div class=\"clr-row\">\n   <div class=\"clr-col-1\">\n      <clr-icon [attr.shape]=\"Icon.CLR_CHECK_ICON_SHAPE\" size=\"24\"></clr-icon>\n   </div>\n   <div class=\"clr-col-11\">\n      <div>{{pmanText}}</div>\n      <div>\n         <span>\n            {{\"vsan.cluster.hci.configureHciCluster.card.pmanClusterImageLabel\" | localized}}\n         </span>\n         <a href=\"javascript://\" class=\"card-link\" (click)=\"navigateToClusterImage()\">\n            {{\"vsan.cluster.hci.configureHciCluster.card.pmanClusterImageLink\" | localized}}\n         </a>\n      </div>\n   </div>\n</div>"],"sourceRoot":"webpack:///"}