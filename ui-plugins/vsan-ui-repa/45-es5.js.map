{"version":3,"sources":["webpack:///src/app/vsan/common/component/drag-and-drop/drag-and-drop.module.ts","webpack:///src/app/vsan/file-services/file-service-util.ts","webpack:///src/app/vsan/common/component/drag-and-drop/draggable-cards-util.ts","webpack:///src/app/vsan/common/component/drag-and-drop/draggable-card.directive.ts","webpack:///node_modules/css-element-queries/src/ResizeSensor.js","webpack:///src/app/vsan/common/component/drag-and-drop/drag-and-drop.component.ts","webpack:///src/app/vsan/common/component/drag-and-drop/drag-and-drop.html","webpack:///src/app/vsan/common/util/vsan-dialog-util.ts","webpack:///src/app/vsan/common/component/drag-and-drop/drag-card-position.ts","webpack:///node_modules/css-element-queries/index.js","webpack:///node_modules/@angular/cdk/fesm2015/drag-drop.js","webpack:///node_modules/angular-resize-event/fesm2015/angular-resize-event.js","webpack:///node_modules/css-element-queries/src/ElementQueries.js","webpack:///src/app/vsan/common/component/drag-and-drop/card-view.ts"],"names":["DragAndDropModule","FileServiceUtil","site","availableDomains","PREFERRED_DOMAIN","preferredDomain","find","domain","isPreferred","getString","label","NON_PREFERRED_DOMAIN","secondaryDomain","isHost","vdfsConfig","config","domainConfig","ipSettings","map","ipSetting","ip","getIpLabel","fqdn","dnsName","affinitySite","getAffinitySiteLabel","affinityLocation","isDefault","address","SHARE_NAME_PROPERTY","SHARE_UUID_PROPERTY","SHARE_FILE_INDEXING_ENABLED_PROPERTY","DraggableCardsUtil","view","cardPositionsBrowserInfo","browserStorageService","get","cardName","isEmpty","value","reduce","obj","set","Map","Array","from","entries","DraggableCardDirective","template","isVisible","root","factory","window","globalWindow","Math","self","Function","requestAnimationFrame","mozRequestAnimationFrame","webkitRequestAnimationFrame","fn","setTimeout","cancelAnimationFrame","mozCancelAnimationFrame","webkitCancelAnimationFrame","timer","clearTimeout","forEachElement","elements","callback","elementsType","Object","prototype","toString","call","isCollectionTyped","jQuery","Elements","i","j","length","getElementSize","element","getBoundingClientRect","width","offsetWidth","height","offsetHeight","rect","round","setStyle","style","keys","forEach","key","ResizeSensor","lastAnimationFrameForInvisibleCheck","EventQueue","q","add","ev","push","sizeInfo","remove","newQueue","attachResizeEvent","resized","resizedAttached","resizeSensor","document","createElement","dir","className","pointerEvents","position","left","top","right","bottom","overflow","zIndex","visibility","maxWidth","styleChild","transition","expand","expandChild","appendChild","shrink","shrinkChild","computedStyle","getComputedStyle","getPropertyValue","dirty","rafId","size","lastWidth","lastHeight","initialHiddenCheck","resetExpandShrink","scrollLeft","scrollTop","reset","invisible","resetSensor","onResized","onScroll","addEvent","el","name","cb","attachEvent","addEventListener","elem","detach","contains","removeChild","MutationObserver","observer","mutations","hasOwnProperty","items","addedNodes","event","observe","body","childList","subtree","DragAndDropComponent","cardPositions","getCardsPosition","getDefaultCardsPositions","showCards","wrapCards","newWidth","MIN_WIDTH_NO_WRAP","leftSideCardsTmp","rightSideCardsTmp","newCards","cardTemplates","filter","cardTemplate","positionInfo","container","LEFT","splice","index","leftSideCards","rightSideCards","card","updateCardsPositionInfo","previousContainer","data","previousIndex","currentIndex","RIGHT","storeCardsPosition","VsanDialogUtil","CAPACITY_MANAGEMENT_DIALOG","DELETE_VOLUME_DIALOG","MIGRATE_VOLUME_DIALOG","REAPPLY_VOLUME_POLICY_DIALOG","DUPLICATE_PCI_ID_MODEL_SELECTION_DIALOG","HEALTH_RESTORE_ACTION_DIALOG","CLUSTER_POWER_ON_DIALOG","VM_IO_DIAGNOSTICS_METRICS_DIALOG","VM_IO_DIAGNOSTICS_LATENCY_DIALOG","VM_IO_DIAGNOSTICS_DOM_OWNER_LATENCY_DIALOG","PERF_SVC_EDIT_ACTION_DIALOG","PERF_SVC_ENABLE_ACTION_DIALOG","CLAIM_DISKS_ACTION_DIALOG","VSAN_DISK_CLAIM_ACTION_DIALOG","VsanDialogProperties","DragCardPosition","CardContainer","module","exports","ElementQueries","extendStyles","dest","source","toggleNativeDragInteractions","enable","userSelect","touchAction","webkitUserDrag","webkitTapHighlightColor","msUserSelect","webkitUserSelect","MozUserSelect","toggleVisibility","styles","opacity","parseCssTimeUnitsToMs","multiplier","toLowerCase","indexOf","parseFloat","getTransformTransitionDurationInMs","transitionedProperties","parseCssPropertyValue","property","prop","propertyIndex","rawDurations","rawDelays","split","part","trim","getMutableClientRect","clientRect","isInsideClientRect","x","y","adjustClientRect","isPointerNearClientRect","threshold","pointerX","pointerY","xThreshold","yThreshold","ParentPositionTracker","_document","_viewportRuler","positions","clear","scrollPosition","getViewportScrollPosition","target","cachedPosition","scrolledParentNode","documentElement","newTop","newLeft","viewportScrollPosition","topDifference","leftDifference","node","deepCloneNode","clone","cloneNode","descendantsWithId","querySelectorAll","nodeName","removeAttribute","transferCanvasData","transferInputData","transferData","selector","descendantElements","cloneElements","cloneUniqueId","type","context","getContext","drawImage","_a","passiveEventListenerOptions","passive","activeEventListenerOptions","MOUSE_EVENT_IGNORE_TIME","DragRef","_config","_ngZone","_dragDropRegistry","_passiveTransform","_activeTransform","_moveEvents","_pointerMoveSubscription","EMPTY","_pointerUpSubscription","_scrollSubscription","_resizeSubscription","_boundaryElement","_nativeInteractionsEnabled","_handles","_disabledHandles","Set","_direction","dragStartDelay","_disabled","beforeStarted","started","released","ended","entered","exited","dropped","moved","_pointerDown","next","targetHandle","handle","has","disabled","_initializeDragSequence","_rootElement","_pointerMove","preventDefault","pointerPosition","_getPointerPositionOnPage","_hasStartedDragging","distanceX","abs","_pickupPositionOnPage","distanceY","isOverThreshold","dragStartThreshold","isDelayElapsed","Date","now","_dragStartTime","_getDragStartDelay","_dropContainer","_endDragSequence","isDragging","isReceiving","run","_startDragSequence","_previewRect","_preview","constrainedPointerPosition","_getConstrainedPointerPosition","_hasMoved","_lastKnownPointerPosition","_updatePointerDirectionDelta","_updateActiveDropContainer","activeTransform","_applyRootElementTransform","SVGElement","appliedTransform","setAttribute","observers","distance","_getDragDistance","delta","_pointerDirectionDelta","_pointerUp","withRootElement","_parentPositions","registerDragItem","newValue","_toggleNativeDragInteractions","_placeholder","getPlaceholderElement","getRootElement","handles","_previewTemplate","_placeholderTemplate","rootElement","_removeRootElementListeners","runOutsideAngular","_initialTransform","undefined","_ownerSVGElement","ownerSVGElement","boundaryElement","unsubscribe","change","subscribe","_containInsideBoundaryOnResize","removeNode","_anchor","_destroyPreview","_destroyPlaceholder","removeDragItem","_removeSubscriptions","complete","transform","direction","_previewRef","destroy","_placeholderRef","stopDragging","_rootElementTapHighlight","_stopScrolling","_animatePreviewToPlaceholder","then","_cleanupDragArtifacts","_cleanupCachedDimensions","isTouchEvent","_lastTouchEventTime","dropContainer","parent","parentNode","preview","_createPreviewElement","placeholder","_createPlaceholderElement","anchor","createComment","insertBefore","replaceChild","getPreviewInsertionPoint","start","_initialContainer","_initialIndex","getItemIndex","cache","getScrollableParents","referenceElement","stopPropagation","isTouchSequence","isAuxiliaryMouseButton","button","isSyntheticEvent","draggable","pointerMove","pointerUp","scroll","scrollEvent","_updateOnScroll","_boundaryRect","previewTemplate","_pickupPositionInElement","matchSize","_getPointerPositionInElement","_pointerPositionAtLastDirectionChange","startDragging","isPointerOverContainer","_isOverContainer","item","drop","rawX","rawY","newContainer","_getSiblingContainerFromPosition","exit","enter","sortingDisabled","_startScrollingIfNecessary","_sortItem","getTransform","previewConfig","previewClass","rootRect","viewRef","viewContainer","createEmbeddedView","detectChanges","getRootNode","matchElementSize","margin","classList","isArray","Promise","resolve","placeholderRect","duration","handler","propertyName","removeEventListener","timeout","placeholderConfig","placeholderTemplate","elementRect","handleElement","referenceRect","point","targetTouches","_getViewportScrollPosition","pageX","pageY","touches","changedTouches","svgMatrix","getScreenCTM","svgPoint","createSVGPoint","matrixTransform","inverse","dropContainerLock","lockAxis","constrainPosition","pickupX","pickupY","boundaryRect","previewRect","minY","maxY","minX","maxX","clamp","pointerPositionOnPage","positionSinceLastChange","changeX","changeY","pointerDirectionChangeThreshold","shouldEnable","currentPosition","pickupPosition","leftOverflow","rightOverflow","topOverflow","bottomOverflow","setFreeDragPosition","touch","mouse","scrollDifference","handleScroll","min","max","documentRef","fullscreenElement","webkitFullscreenElement","mozFullScreenElement","msFullscreenElement","rootNodes","nodeType","ELEMENT_NODE","wrapper","sourceRect","moveItemInArray","array","fromIndex","toIndex","clamp$1","to","transferArrayItem","currentArray","targetArray","targetIndex","copyArrayItem","DROP_PROXIMITY_THRESHOLD","SCROLL_PROXIMITY_THRESHOLD","AUTO_SCROLL_STEP","DropListRef","autoScrollDisabled","enterPredicate","sorted","_isDragging","_itemPositions","_previousSwap","drag","overlaps","_siblings","_orientation","_activeSiblings","_viewportScrollSubscription","_verticalScrollDirection","_horizontalScrollDirection","_stopScrollTimers","_cachedShadowRoot","_startScrollInterval","pipe","_scrollNode","incrementVerticalScroll","incrementHorizontalScroll","withScrollableParents","registerDropContainer","removeDropContainer","_initialScrollSnap","msScrollSnapType","scrollSnapType","_cacheItems","sibling","_startReceiving","_listenToScrollEvents","newIndex","_draggables","_getItemIndexFromPointerPosition","activeDraggables","_activeDraggables","newPositionReference","parentElement","_shouldEnterAsFirstChild","reference","unshift","_cacheItemPositions","_cacheParentPositions","_reset","previousItems","_withDropContainer","draggedItems","every","connectedTo","slice","orientation","_scrollableElements","reverse","findIndex","currentItem","pointerDelta","_clientRect","siblings","isHorizontal","siblingAtNewPosition","newPosition","itemOffset","_getItemOffsetPx","siblingOffset","_getSiblingOffsetPx","oldOrder","isDraggedItem","offset","elementToOffset","scrollNode","verticalScrollDirection","horizontalScrollDirection","getElementScrollDirections","getViewportSize","getVerticalScrollDirection","getHorizontalScrollDirection","elementToMeasure","getVisibleElement","sort","a","b","_stopReceiving","immediateSibling","end","itemPositions","reversed","lastItemRect","firstItemRect","_","floor","_canReceive","elementFromPoint","_getShadowRoot","nativeElement","activeSiblings","_sortFromLastPointerPosition","shadowRoot","predicate","amount","scrollBy","computedVertical","computedHorizontal","scrollHeight","clientHeight","scrollWidth","clientWidth","activeCapturingEventOptions","capture","DragDropRegistry","_dropInstances","_dragInstances","_activeDragInstances","_globalListeners","_preventDefaultWhileDragging","_persistentTouchmoveListener","startsWith","e","options","_clearGlobalListeners","instance","ɵprov","DragDropRegistry_Factory","token","providedIn","DEFAULT_CONFIG","DragDrop","DragDrop_Factory","CDK_DRAG_PARENT","CDK_DROP_LIST_GROUP","CdkDropListGroup","_items","CDK_DRAG_CONFIG","_uniqueIdCounter","CDK_DROP_LIST","ɵ0","CdkDropList","dragDrop","_changeDetectorRef","_dir","_group","_scrollDispatcher","_destroyed","id","_unsortedItems","_dropListRef","createDropList","_assignDefaults","_setupInputSyncSubscription","_handleEvents","_dropLists","_syncItemsWithRef","documentPosition","_dragRef","compareDocumentPosition","Node","DOCUMENT_POSITION_FOLLOWING","dispose","ref","withDirection","correspondingDropList","list","ngDevMode","console","warn","_scrollableParentsResolved","scrollableParents","getAncestorScrollContainers","scrollable","getElementRef","withOrientation","markForCheck","emit","draggingDisabled","listAutoScrollDisabled","listOrientation","withItems","getSortedItems","CDK_DRAG_HANDLE","CdkDragHandle","parentDrag","_stateChanges","_parentDrag","CDK_DRAG_PLACEHOLDER","CdkDragPlaceholder","templateRef","CDK_DRAG_PREVIEW","CdkDragPreview","_matchSize","CdkDrag","_viewContainerRef","_selfHandle","subscription","movedEvent","createDrag","addItem","_syncInputs","getFreeDragPosition","onStable","_updateRootElement","changes","childHandleElements","rootElementSelector","withHandles","handleInstance","dragRef","disableHandle","enableHandle","freeDragPosition","rootSelectorChange","positionChange","firstChange","removeItem","getClosestMatchingAncestor","Error","boundary","withBoundaryElement","_getBoundaryElement","withPlaceholderTemplate","withPreviewTemplate","currentElement","matches","msMatchesSelector","DragDropModule","ResizedEvent","newHeight","oldWidth","oldHeight","ResizedDirective","AngularResizedEventModule","cssStyleElement","allQueries","idToSelectorMapping","getEmSize","fontSize","convertToPx","numbers","units","vw","vh","chooser","SetupInformation","option","elementSize","actualValue","attrValues","attrValue","attrName","attributes","mode","k","substr","setupElement","elementQueriesSetupInformation","elementQueriesSensor","queueQuery","innerHTML","getQuery","query","bind","$$","findElementQueriesElements","attachResponsiveImage","children","rules","sources","defaultImageId","lastActiveImage","loadedImages","tagName","minWidth","getAttribute","src","rule","display","check","imageToDisplay","image","Image","onload","resizeSensorInstance","findResponsiveImages","regex","attrRegex","extractQuery","css","match","smatch","attrs","attrMatch","replace","exec","readRules","selectorText","cssText","cssRules","styleSheet","defaultCssInjected","init","animationStart","animationName","requiresSetup","sensorStyles","parseInt","getElementsByTagName","styleSheets","href","update","domLoaded","test","navigator","userAgent","DOMLoadTimer","setInterval","readyState","clearInterval","listen","CardView","CardName"],"mappings":"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","file":"45-es5.js","sourcesContent":["/* Copyright 2020 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {NgModule} from \"@angular/core\";\nimport {CommonModule} from \"@angular/common\";\nimport {DragAndDropComponent} from \"@component/drag-and-drop/drag-and-drop.component\";\nimport {DraggableCardDirective} from \"@component/drag-and-drop/draggable-card.directive\";\nimport {DragDropModule} from \"@angular/cdk/drag-drop\";\nimport {AngularResizedEventModule} from \"angular-resize-event\";\n\n@NgModule({\n   imports: [\n      CommonModule,\n      DragDropModule,\n      AngularResizedEventModule,\n   ],\n   declarations: [\n      DragAndDropComponent,\n      DraggableCardDirective,\n   ],\n   exports: [\n      DragAndDropComponent,\n      DraggableCardDirective,\n   ],\n})\nexport class DragAndDropModule { }\n","/* Copyright 2020-2022 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {AffinitySiteLocation} from \"@generated/affinity-site-location\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {DomainOrHostData} from \"@generated/domain-or-host-data\";\nimport {IpSettingData} from \"@component/configurations/file-service-configuration.component\";\nimport {VsanFileServiceHostIpSettings} from \"@generated/vsan-file-service-host-ip-settings\";\nimport {VsanVdfsConfig} from \"@generated/vsan-vdfs-config\";\n\n/**\n * Holds the common properties and methods used for file service UI\n */\nexport class FileServiceUtil {\n   // properties used for API fileServiceConfigService.getFileShareAttributes\n   static readonly SHARE_NAME_PROPERTY: string = \"sharenames\";\n   static readonly SHARE_UUID_PROPERTY: string = \"shareuuids\";\n   static readonly SHARE_FILE_INDEXING_ENABLED_PROPERTY: string = \"fileIndexingEnabled\";\n\n   static getAffinitySiteLabel(site: AffinitySiteLocation, availableDomains: DomainOrHostData[]): string {\n      switch (site) {\n         case AffinitySiteLocation.PREFERRED_DOMAIN:\n            const preferredDomain: DomainOrHostData = availableDomains.find(domain => domain.isPreferred);\n            return preferredDomain ?\n                  VsanUiUtils.getString(\"vsan.fileservices.affinitySite.preferred.label\", preferredDomain.label):\n                  VsanUiUtils.getString(\"vsan.cluster.configure.summary.preferredFd\");\n         case AffinitySiteLocation.NON_PREFERRED_DOMAIN:\n            const secondaryDomain: DomainOrHostData =\n                  availableDomains.find(domain => !domain.isPreferred && !domain.isHost);\n            return secondaryDomain ?\n                  VsanUiUtils.getString(\"vsan.fileservices.affinitySite.nonPreferred.label\", secondaryDomain.label) :\n                  VsanUiUtils.getString(\"vsan.cluster.configure.summary.secondaryFd\");\n         default:\n            return VsanUiUtils.getString(\"vsan.fileservices.affinitySite.none.label\");\n      }\n   }\n\n   /**\n    * Returns the IP addresses from the File Service configuration in the form of a string, separated by commas.\n    */\n   static getIpSettings(vdfsConfig: VsanVdfsConfig, availableDomains: DomainOrHostData[]): IpSettingData[] {\n      if (!vdfsConfig\n            || !vdfsConfig.config\n            || !vdfsConfig.config.domainConfig\n            || !vdfsConfig.config.domainConfig.ipSettings) {\n         return [];\n      }\n\n      return vdfsConfig.config.domainConfig.ipSettings.map((ipSetting: VsanFileServiceHostIpSettings) => {\n         return {\n            ip: this.getIpLabel(ipSetting),\n            fqdn: ipSetting.dnsName,\n            affinitySite: FileServiceUtil.getAffinitySiteLabel(ipSetting.affinityLocation, availableDomains),\n         };\n      });\n   }\n\n   private static getIpLabel(ipSetting: VsanFileServiceHostIpSettings): string {\n      return ipSetting.isDefault\n            ? VsanUiUtils.getString(\"vsan.services.fileservices.primaryIp\", ipSetting.address)\n            : ipSetting.address;\n   }\n}\n","/* Copyright 2020 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {StaticDependencyInjector} from \"@util/static-dependency-injector\";\nimport {PersistentStorageService} from \"@service/browser-storage.service\";\nimport {CardContainer, DragCardPosition} from \"./drag-card-position\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {CardView} from \"@component/drag-and-drop/card-view\";\n\n/**\n * Util methods for storing and fetching the positioning state of draggable cards from the browser cache.\n */\nexport class DraggableCardsUtil {\n   private static browserStorageService: PersistentStorageService =\n         StaticDependencyInjector.get<PersistentStorageService>(PersistentStorageService);\n\n   static getCardsPosition(view: CardView): Map<string, DragCardPosition> {\n      const cardPositionsBrowserInfo: {value: any[]} = DraggableCardsUtil.browserStorageService.get(view.cardName);\n      if (cardPositionsBrowserInfo && !VsanUiUtils.isEmpty(cardPositionsBrowserInfo.value)) {\n         // Cards are already initialized via browser storage, convert the data to Map\n         return cardPositionsBrowserInfo.value.reduce((map, obj) => {\n            map.set(obj[0], obj[1]);\n            return map;\n         }, new Map<string, DragCardPosition>());\n      }\n      return null;\n   }\n\n   static storeCardsPosition(view: CardView, value: Map<string, DragCardPosition>): void {\n      if (!value) {\n         return;\n      }\n      this.browserStorageService.set(view.cardName, {value: Array.from(value.entries())});\n   }\n}","/* Copyright 2020 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Directive, Input, TemplateRef} from \"@angular/core\";\n\n@Directive({\n   selector: \"[vsan-drag-service]\",\n})\nexport class DraggableCardDirective {\n\n   constructor(public template: TemplateRef<any>) {\n   }\n\n   @Input(\"vsan-drag-service\")\n   name: string;\n\n   @Input(\"visible\")\n   isVisible: boolean = true;\n}","'use strict';\n\n/**\n * Copyright Marc J. Schmidt. See the LICENSE file at the top-level\n * directory of this distribution and at\n * https://github.com/marcj/css-element-queries/blob/master/LICENSE.\n */\n(function (root, factory) {\n    if (typeof define === \"function\" && define.amd) {\n        define(factory);\n    } else if (typeof exports === \"object\") {\n        module.exports = factory();\n    } else {\n        root.ResizeSensor = factory();\n    }\n}(typeof window !== 'undefined' ? window : this, function () {\n\n    // Make sure it does not throw in a SSR (Server Side Rendering) situation\n    if (typeof window === \"undefined\") {\n        return null;\n    }\n    // https://github.com/Semantic-Org/Semantic-UI/issues/3855\n    // https://github.com/marcj/css-element-queries/issues/257\n    var globalWindow = typeof window != 'undefined' && window.Math == Math\n        ? window\n        : typeof self != 'undefined' && self.Math == Math\n            ? self\n            : Function('return this')();\n    // Only used for the dirty checking, so the event callback count is limited to max 1 call per fps per sensor.\n    // In combination with the event based resize sensor this saves cpu time, because the sensor is too fast and\n    // would generate too many unnecessary events.\n    var requestAnimationFrame = globalWindow.requestAnimationFrame ||\n        globalWindow.mozRequestAnimationFrame ||\n        globalWindow.webkitRequestAnimationFrame ||\n        function (fn) {\n            return globalWindow.setTimeout(fn, 20);\n        };\n\n    var cancelAnimationFrame = globalWindow.cancelAnimationFrame ||\n        globalWindow.mozCancelAnimationFrame ||\n        globalWindow.webkitCancelAnimationFrame ||\n        function (timer) {\n            globalWindow.clearTimeout(timer);\n        };\n\n    /**\n     * Iterate over each of the provided element(s).\n     *\n     * @param {HTMLElement|HTMLElement[]} elements\n     * @param {Function}                  callback\n     */\n    function forEachElement(elements, callback){\n        var elementsType = Object.prototype.toString.call(elements);\n        var isCollectionTyped = ('[object Array]' === elementsType\n            || ('[object NodeList]' === elementsType)\n            || ('[object HTMLCollection]' === elementsType)\n            || ('[object Object]' === elementsType)\n            || ('undefined' !== typeof jQuery && elements instanceof jQuery) //jquery\n            || ('undefined' !== typeof Elements && elements instanceof Elements) //mootools\n        );\n        var i = 0, j = elements.length;\n        if (isCollectionTyped) {\n            for (; i < j; i++) {\n                callback(elements[i]);\n            }\n        } else {\n            callback(elements);\n        }\n    }\n\n    /**\n    * Get element size\n    * @param {HTMLElement} element\n    * @returns {Object} {width, height}\n    */\n    function getElementSize(element) {\n        if (!element.getBoundingClientRect) {\n            return {\n                width: element.offsetWidth,\n                height: element.offsetHeight\n            }\n        }\n\n        var rect = element.getBoundingClientRect();\n        return {\n            width: Math.round(rect.width),\n            height: Math.round(rect.height)\n        }\n    }\n\n    /**\n     * Apply CSS styles to element.\n     *\n     * @param {HTMLElement} element\n     * @param {Object} style\n     */\n    function setStyle(element, style) {\n        Object.keys(style).forEach(function(key) {\n            element.style[key] = style[key];\n        });\n    }\n\n    /**\n     * Class for dimension change detection.\n     *\n     * @param {Element|Element[]|Elements|jQuery} element\n     * @param {Function} callback\n     *\n     * @constructor\n     */\n    var ResizeSensor = function(element, callback) {\n        //Is used when checking in reset() only for invisible elements\n        var lastAnimationFrameForInvisibleCheck = 0;\n\n        /**\n         *\n         * @constructor\n         */\n        function EventQueue() {\n            var q = [];\n            this.add = function(ev) {\n                q.push(ev);\n            };\n\n            var i, j;\n            this.call = function(sizeInfo) {\n                for (i = 0, j = q.length; i < j; i++) {\n                    q[i].call(this, sizeInfo);\n                }\n            };\n\n            this.remove = function(ev) {\n                var newQueue = [];\n                for(i = 0, j = q.length; i < j; i++) {\n                    if(q[i] !== ev) newQueue.push(q[i]);\n                }\n                q = newQueue;\n            };\n\n            this.length = function() {\n                return q.length;\n            }\n        }\n\n        /**\n         *\n         * @param {HTMLElement} element\n         * @param {Function}    resized\n         */\n        function attachResizeEvent(element, resized) {\n            if (!element) return;\n            if (element.resizedAttached) {\n                element.resizedAttached.add(resized);\n                return;\n            }\n\n            element.resizedAttached = new EventQueue();\n            element.resizedAttached.add(resized);\n\n            element.resizeSensor = document.createElement('div');\n            element.resizeSensor.dir = 'ltr';\n            element.resizeSensor.className = 'resize-sensor';\n\n            var style = {\n                pointerEvents: 'none',\n                position: 'absolute',\n                left: '0px',\n                top: '0px',\n                right: '0px',\n                bottom: '0px',\n                overflow: 'hidden',\n                zIndex: '-1',\n                visibility: 'hidden',\n                maxWidth: '100%'\n            };\n            var styleChild = {\n                position: 'absolute',\n                left: '0px',\n                top: '0px',\n                transition: '0s',\n            };\n\n            setStyle(element.resizeSensor, style);\n\n            var expand = document.createElement('div');\n            expand.className = 'resize-sensor-expand';\n            setStyle(expand, style);\n\n            var expandChild = document.createElement('div');\n            setStyle(expandChild, styleChild);\n            expand.appendChild(expandChild);\n\n            var shrink = document.createElement('div');\n            shrink.className = 'resize-sensor-shrink';\n            setStyle(shrink, style);\n\n            var shrinkChild = document.createElement('div');\n            setStyle(shrinkChild, styleChild);\n            setStyle(shrinkChild, { width: '200%', height: '200%' });\n            shrink.appendChild(shrinkChild);\n\n            element.resizeSensor.appendChild(expand);\n            element.resizeSensor.appendChild(shrink);\n            element.appendChild(element.resizeSensor);\n\n            var computedStyle = window.getComputedStyle(element);\n            var position = computedStyle ? computedStyle.getPropertyValue('position') : null;\n            if ('absolute' !== position && 'relative' !== position && 'fixed' !== position && 'sticky' !== position) {\n                element.style.position = 'relative';\n            }\n\n            var dirty = false;\n\n            //last request animation frame id used in onscroll event\n            var rafId = 0;\n            var size = getElementSize(element);\n            var lastWidth = 0;\n            var lastHeight = 0;\n            var initialHiddenCheck = true;\n            lastAnimationFrameForInvisibleCheck = 0;\n\n            var resetExpandShrink = function () {\n                var width = element.offsetWidth;\n                var height = element.offsetHeight;\n\n                expandChild.style.width = (width + 10) + 'px';\n                expandChild.style.height = (height + 10) + 'px';\n\n                expand.scrollLeft = width + 10;\n                expand.scrollTop = height + 10;\n\n                shrink.scrollLeft = width + 10;\n                shrink.scrollTop = height + 10;\n            };\n\n            var reset = function() {\n                // Check if element is hidden\n                if (initialHiddenCheck) {\n                    var invisible = element.offsetWidth === 0 && element.offsetHeight === 0;\n                    if (invisible) {\n                        // Check in next frame\n                        if (!lastAnimationFrameForInvisibleCheck){\n                            lastAnimationFrameForInvisibleCheck = requestAnimationFrame(function(){\n                                lastAnimationFrameForInvisibleCheck = 0;\n                                reset();\n                            });\n                        }\n\n                        return;\n                    } else {\n                        // Stop checking\n                        initialHiddenCheck = false;\n                    }\n                }\n\n                resetExpandShrink();\n            };\n            element.resizeSensor.resetSensor = reset;\n\n            var onResized = function() {\n                rafId = 0;\n\n                if (!dirty) return;\n\n                lastWidth = size.width;\n                lastHeight = size.height;\n\n                if (element.resizedAttached) {\n                    element.resizedAttached.call(size);\n                }\n            };\n\n            var onScroll = function() {\n                size = getElementSize(element);\n                dirty = size.width !== lastWidth || size.height !== lastHeight;\n\n                if (dirty && !rafId) {\n                    rafId = requestAnimationFrame(onResized);\n                }\n\n                reset();\n            };\n\n            var addEvent = function(el, name, cb) {\n                if (el.attachEvent) {\n                    el.attachEvent('on' + name, cb);\n                } else {\n                    el.addEventListener(name, cb);\n                }\n            };\n\n            addEvent(expand, 'scroll', onScroll);\n            addEvent(shrink, 'scroll', onScroll);\n\n            // Fix for custom Elements and invisible elements\n            lastAnimationFrameForInvisibleCheck = requestAnimationFrame(function(){\n                lastAnimationFrameForInvisibleCheck = 0;\n                reset();\n            });\n        }\n\n        forEachElement(element, function(elem){\n            attachResizeEvent(elem, callback);\n        });\n\n        this.detach = function(ev) {\n            // clean up the unfinished animation frame to prevent a potential endless requestAnimationFrame of reset\n            if (!lastAnimationFrameForInvisibleCheck) {\n                cancelAnimationFrame(lastAnimationFrameForInvisibleCheck);\n                lastAnimationFrameForInvisibleCheck = 0;\n            }\n            ResizeSensor.detach(element, ev);\n        };\n\n        this.reset = function() {\n            element.resizeSensor.resetSensor();\n        };\n    };\n\n    ResizeSensor.reset = function(element) {\n        forEachElement(element, function(elem){\n            elem.resizeSensor.resetSensor();\n        });\n    };\n\n    ResizeSensor.detach = function(element, ev) {\n        forEachElement(element, function(elem){\n            if (!elem) return;\n            if(elem.resizedAttached && typeof ev === \"function\"){\n                elem.resizedAttached.remove(ev);\n                if(elem.resizedAttached.length()) return;\n            }\n            if (elem.resizeSensor) {\n                if (elem.contains(elem.resizeSensor)) {\n                    elem.removeChild(elem.resizeSensor);\n                }\n                delete elem.resizeSensor;\n                delete elem.resizedAttached;\n            }\n        });\n    };\n\n    if (typeof MutationObserver !== \"undefined\") {\n        var observer = new MutationObserver(function (mutations) {\n            for (var i in mutations) {\n                if (mutations.hasOwnProperty(i)) {\n                    var items = mutations[i].addedNodes;\n                    for (var j = 0; j < items.length; j++) {\n                        if (items[j].resizeSensor) {\n                            ResizeSensor.reset(items[j]);\n                        }\n                    }\n                }\n            }\n        });\n\n        document.addEventListener(\"DOMContentLoaded\", function (event) {\n            observer.observe(document.body, {\n                childList: true,\n                subtree: true,\n            });\n        });\n    }\n\n    return ResizeSensor;\n\n}));\n","/* Copyright 2020 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, Input, QueryList} from \"@angular/core\";\nimport {DraggableCardDirective} from \"./draggable-card.directive\";\nimport {CardContainer, DragCardPosition} from \"./drag-card-position\";\nimport {DraggableCardsUtil} from \"./draggable-cards-util\";\nimport {CdkDragDrop, moveItemInArray, transferArrayItem} from \"@angular/cdk/drag-drop\";\nimport {CardView} from \"@component/drag-and-drop/card-view\";\nimport {ResizedEvent} from \"angular-resize-event\";\n\n@Component({\n  selector: \"vsan-drag-and-drop\",\n  templateUrl: \"drag-and-drop.html\",\n  styleUrls: [\"drag-and-drop.scss\"],\n})\nexport class DragAndDropComponent {\n\n  private static readonly MIN_WIDTH_NO_WRAP: number = 1000;\n\n  @Input()\n  view: CardView;\n\n  @Input()\n  cardTemplates: QueryList<DraggableCardDirective>;\n\n  leftSideCards: DraggableCardDirective[];\n  rightSideCards: DraggableCardDirective[];\n\n  wrapCards: boolean;\n\n  // Holds map with card positions for each card. They are stored/read from the browser cache.\n  private cardPositions: Map<string, DragCardPosition>;\n\n  ngOnInit(): void {\n    this.cardPositions = DraggableCardsUtil.getCardsPosition(this.view);\n    if (!this.cardPositions) {\n       this.cardPositions = this.view.getDefaultCardsPositions();\n    }\n    this.showCards();\n  }\n\n  onResized(event: ResizedEvent): void {\n    this.wrapCards = event.newWidth < DragAndDropComponent.MIN_WIDTH_NO_WRAP;\n  }\n\n  private showCards(): void {\n    // Timeout is needed as the isVisible property is not initialized at the time\n    // this method gets called, which causes the checks to always fail.\n    setTimeout(() => {\n      // Using tmp arrays to avoid multiple change detection happening for the drag lists\n      // as we add service templates to them\n      const leftSideCardsTmp: DraggableCardDirective[] = [];\n      const rightSideCardsTmp: DraggableCardDirective[] = [];\n      // once visualized, the cards and their positions are cached in a map. If new cards are added / old cards are\n      // renamed, they can not be found in the cache map. Add them here and update the cached map at the end.\n      const newCards: DraggableCardDirective[] = [];\n      this.cardTemplates\n            .filter(cardTemplate => cardTemplate.isVisible)\n            .forEach(cardTemplate => {\n              const positionInfo: DragCardPosition = this.cardPositions.get(cardTemplate.name);\n              if (!positionInfo) {\n                newCards.push(cardTemplate);\n              } else if (positionInfo.container === CardContainer.LEFT) {\n                leftSideCardsTmp.splice(positionInfo.index, 0, cardTemplate);\n              } else {\n                rightSideCardsTmp.splice(positionInfo.index, 0, cardTemplate);\n              }\n            });\n\n      this.leftSideCards = leftSideCardsTmp;\n      this.rightSideCards = rightSideCardsTmp;\n\n      if (newCards.length) {\n        newCards.forEach(card => {\n          if (this.leftSideCards.length <= this.rightSideCards.length) {\n            this.leftSideCards.push(card);\n          } else {\n            this.rightSideCards.push(card);\n          }\n        });\n        this.updateCardsPositionInfo();\n      }\n    });\n  }\n\n  drop(event: CdkDragDrop<string[]>) {\n    if (event.previousContainer === event.container) {\n      moveItemInArray(event.container.data, event.previousIndex, event.currentIndex);\n    } else {\n      transferArrayItem(event.previousContainer.data,\n            event.container.data,\n            event.previousIndex,\n            event.currentIndex);\n    }\n    this.updateCardsPositionInfo();\n  }\n\n  private updateCardsPositionInfo(): void {\n    this.leftSideCards.forEach((card, index) => {\n      this.cardPositions.set(card.name, new DragCardPosition(CardContainer.LEFT, index));\n    });\n\n    this.rightSideCards.forEach((card, index) => {\n      this.cardPositions.set(card.name, new DragCardPosition(CardContainer.RIGHT, index));\n    });\n    DraggableCardsUtil.storeCardsPosition(this.view, this.cardPositions);\n  }\n}\n","<!--Copyright 2020 VMware, Inc. All rights reserved. -- VMware Confidential-->\n<div class=\"cards-container\"\n     (resized)=\"onResized($event)\"\n     [ngClass]=\"{'wrap-cards': wrapCards}\"\n     cdkDropListGroup>\n   <div cdkDropList\n        [cdkDropListData]=\"leftSideCards\"\n        (cdkDropListDropped)=\"drop($event)\">\n      <div *ngFor=\"let card of leftSideCards\"\n           class=\"card-template\"\n           cdkDrag>\n         <div class=\"drag-custom-placeholder\" *cdkDragPlaceholder></div>\n         <ng-container [ngTemplateOutlet]=\"card.template\"\n                       [ngTemplateOutletContext]=\"{ card: card }\">\n         </ng-container>\n      </div>\n   </div>\n   <div cdkDropList\n        [cdkDropListData]=\"rightSideCards\"\n        (cdkDropListDropped)=\"drop($event)\">\n      <div *ngFor=\"let card of rightSideCards\"\n           class=\"card-template\"\n           cdkDrag>\n         <div class=\"drag-custom-placeholder\" *cdkDragPlaceholder></div>\n         <ng-container [ngTemplateOutlet]=\"card.template\"\n                       [ngTemplateOutletContext]=\"{ card: card }\">\n         </ng-container>\n      </div>\n   </div>\n</div>","/* Copyright 2020-2022 VMware, Inc. All rights reserved. -- VMware Confidential */\nexport class VsanDialogUtil {\n   static readonly CAPACITY_MANAGEMENT_DIALOG: VsanDialogProperties = {\n      width: 800,\n      height: 700,\n   };\n\n   static readonly DELETE_VOLUME_DIALOG: VsanDialogProperties = {\n      width: 500,\n      height: 250,\n   };\n\n   static readonly MIGRATE_VOLUME_DIALOG: VsanDialogProperties = {\n      width: 1030,\n      height: 710,\n   };\n\n   static readonly REAPPLY_VOLUME_POLICY_DIALOG: VsanDialogProperties = {\n      width: 700,\n      height: 250,\n   };\n\n   static readonly DUPLICATE_PCI_ID_MODEL_SELECTION_DIALOG: VsanDialogProperties = {\n      width: 800,\n      height: 500,\n   };\n\n   static readonly HEALTH_RESTORE_ACTION_DIALOG: VsanDialogProperties = {\n      width: 550,\n      height: 250,\n   };\n\n   // Keep in sync with plugin.xml extension point\n   static readonly CLUSTER_POWER_ON_DIALOG: VsanDialogProperties = {\n      width: 600,\n      height: 230,\n   };\n\n   static readonly VM_IO_DIAGNOSTICS_METRICS_DIALOG: VsanDialogProperties = {\n      width: 900,\n      height: 700,\n   };\n\n   static readonly VM_IO_DIAGNOSTICS_LATENCY_DIALOG: VsanDialogProperties = {\n      width: 1000,\n      height: 500,\n   };\n\n   static readonly VM_IO_DIAGNOSTICS_DOM_OWNER_LATENCY_DIALOG: VsanDialogProperties = {\n      width: 1000,\n      height: 400,\n   };\n\n   static readonly PERF_SVC_EDIT_ACTION_DIALOG: VsanDialogProperties = {\n      width: 800,\n      height: 450,\n   };\n\n   static readonly PERF_SVC_ENABLE_ACTION_DIALOG: VsanDialogProperties = {\n      width: 800,\n      height: 250,\n   };\n\n   static readonly CLAIM_DISKS_ACTION_DIALOG: VsanDialogProperties = {\n      width: 1200,\n      height: 650,\n   };\n\n   static readonly VSAN_DISK_CLAIM_ACTION_DIALOG: VsanDialogProperties = {\n      width: 670,\n      height: 300,\n   };\n}\n\nexport class VsanDialogProperties {\n   width: number;\n   height: number;\n}\n","/* Copyright 2020 VMware, Inc. All rights reserved. -- VMware Confidential */\n\n/**\n * Holds information for the positioning of service cards\n */\nexport class DragCardPosition {\n   constructor(public container: CardContainer, public index: number) {\n   }\n}\n\n/**\n * Whether the card appears on the left or right side of the screen.\n */\nexport enum CardContainer {\n   LEFT,\n   RIGHT,\n}","module.exports = {\n    ResizeSensor: require('./src/ResizeSensor'),\n    ElementQueries: require('./src/ElementQueries')\n};\n","import { ɵɵdefineInjectable, ɵɵinject, NgZone, Injectable, Inject, InjectionToken, Directive, Input, EventEmitter, ElementRef, ChangeDetectorRef, Optional, SkipSelf, Output, TemplateRef, ViewContainerRef, Self, ContentChildren, ContentChild, NgModule } from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\nimport { ViewportRuler, ScrollDispatcher, CdkScrollableModule } from '@angular/cdk/scrolling';\nimport { normalizePassiveListenerOptions, _getShadowRoot } from '@angular/cdk/platform';\nimport { coerceBooleanProperty, coerceElement, coerceArray, coerceNumberProperty } from '@angular/cdk/coercion';\nimport { Subject, Subscription, interval, animationFrameScheduler, Observable, merge } from 'rxjs';\nimport { takeUntil, startWith, map, take, tap, switchMap } from 'rxjs/operators';\nimport { Directionality } from '@angular/cdk/bidi';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Shallow-extends a stylesheet object with another stylesheet object.\n * @docs-private\n */\nfunction extendStyles(dest, source) {\n    for (let key in source) {\n        if (source.hasOwnProperty(key)) {\n            dest[key] = source[key];\n        }\n    }\n    return dest;\n}\n/**\n * Toggles whether the native drag interactions should be enabled for an element.\n * @param element Element on which to toggle the drag interactions.\n * @param enable Whether the drag interactions should be enabled.\n * @docs-private\n */\nfunction toggleNativeDragInteractions(element, enable) {\n    const userSelect = enable ? '' : 'none';\n    extendStyles(element.style, {\n        touchAction: enable ? '' : 'none',\n        webkitUserDrag: enable ? '' : 'none',\n        webkitTapHighlightColor: enable ? '' : 'transparent',\n        userSelect: userSelect,\n        msUserSelect: userSelect,\n        webkitUserSelect: userSelect,\n        MozUserSelect: userSelect\n    });\n}\n/**\n * Toggles whether an element is visible while preserving its dimensions.\n * @param element Element whose visibility to toggle\n * @param enable Whether the element should be visible.\n * @docs-private\n */\nfunction toggleVisibility(element, enable) {\n    const styles = element.style;\n    styles.position = enable ? '' : 'fixed';\n    styles.top = styles.opacity = enable ? '' : '0';\n    styles.left = enable ? '' : '-999em';\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Parses a CSS time value to milliseconds. */\nfunction parseCssTimeUnitsToMs(value) {\n    // Some browsers will return it in seconds, whereas others will return milliseconds.\n    const multiplier = value.toLowerCase().indexOf('ms') > -1 ? 1 : 1000;\n    return parseFloat(value) * multiplier;\n}\n/** Gets the transform transition duration, including the delay, of an element in milliseconds. */\nfunction getTransformTransitionDurationInMs(element) {\n    const computedStyle = getComputedStyle(element);\n    const transitionedProperties = parseCssPropertyValue(computedStyle, 'transition-property');\n    const property = transitionedProperties.find(prop => prop === 'transform' || prop === 'all');\n    // If there's no transition for `all` or `transform`, we shouldn't do anything.\n    if (!property) {\n        return 0;\n    }\n    // Get the index of the property that we're interested in and match\n    // it up to the same index in `transition-delay` and `transition-duration`.\n    const propertyIndex = transitionedProperties.indexOf(property);\n    const rawDurations = parseCssPropertyValue(computedStyle, 'transition-duration');\n    const rawDelays = parseCssPropertyValue(computedStyle, 'transition-delay');\n    return parseCssTimeUnitsToMs(rawDurations[propertyIndex]) +\n        parseCssTimeUnitsToMs(rawDelays[propertyIndex]);\n}\n/** Parses out multiple values from a computed style into an array. */\nfunction parseCssPropertyValue(computedStyle, name) {\n    const value = computedStyle.getPropertyValue(name);\n    return value.split(',').map(part => part.trim());\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Gets a mutable version of an element's bounding `ClientRect`. */\nfunction getMutableClientRect(element) {\n    const clientRect = element.getBoundingClientRect();\n    // We need to clone the `clientRect` here, because all the values on it are readonly\n    // and we need to be able to update them. Also we can't use a spread here, because\n    // the values on a `ClientRect` aren't own properties. See:\n    // https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect#Notes\n    return {\n        top: clientRect.top,\n        right: clientRect.right,\n        bottom: clientRect.bottom,\n        left: clientRect.left,\n        width: clientRect.width,\n        height: clientRect.height\n    };\n}\n/**\n * Checks whether some coordinates are within a `ClientRect`.\n * @param clientRect ClientRect that is being checked.\n * @param x Coordinates along the X axis.\n * @param y Coordinates along the Y axis.\n */\nfunction isInsideClientRect(clientRect, x, y) {\n    const { top, bottom, left, right } = clientRect;\n    return y >= top && y <= bottom && x >= left && x <= right;\n}\n/**\n * Updates the top/left positions of a `ClientRect`, as well as their bottom/right counterparts.\n * @param clientRect `ClientRect` that should be updated.\n * @param top Amount to add to the `top` position.\n * @param left Amount to add to the `left` position.\n */\nfunction adjustClientRect(clientRect, top, left) {\n    clientRect.top += top;\n    clientRect.bottom = clientRect.top + clientRect.height;\n    clientRect.left += left;\n    clientRect.right = clientRect.left + clientRect.width;\n}\n/**\n * Checks whether the pointer coordinates are close to a ClientRect.\n * @param rect ClientRect to check against.\n * @param threshold Threshold around the ClientRect.\n * @param pointerX Coordinates along the X axis.\n * @param pointerY Coordinates along the Y axis.\n */\nfunction isPointerNearClientRect(rect, threshold, pointerX, pointerY) {\n    const { top, right, bottom, left, width, height } = rect;\n    const xThreshold = width * threshold;\n    const yThreshold = height * threshold;\n    return pointerY > top - yThreshold && pointerY < bottom + yThreshold &&\n        pointerX > left - xThreshold && pointerX < right + xThreshold;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Keeps track of the scroll position and dimensions of the parents of an element. */\nclass ParentPositionTracker {\n    constructor(_document, _viewportRuler) {\n        this._document = _document;\n        this._viewportRuler = _viewportRuler;\n        /** Cached positions of the scrollable parent elements. */\n        this.positions = new Map();\n    }\n    /** Clears the cached positions. */\n    clear() {\n        this.positions.clear();\n    }\n    /** Caches the positions. Should be called at the beginning of a drag sequence. */\n    cache(elements) {\n        this.clear();\n        this.positions.set(this._document, {\n            scrollPosition: this._viewportRuler.getViewportScrollPosition(),\n        });\n        elements.forEach(element => {\n            this.positions.set(element, {\n                scrollPosition: { top: element.scrollTop, left: element.scrollLeft },\n                clientRect: getMutableClientRect(element)\n            });\n        });\n    }\n    /** Handles scrolling while a drag is taking place. */\n    handleScroll(event) {\n        const target = event.target;\n        const cachedPosition = this.positions.get(target);\n        if (!cachedPosition) {\n            return null;\n        }\n        // Used when figuring out whether an element is inside the scroll parent. If the scrolled\n        // parent is the `document`, we use the `documentElement`, because IE doesn't support\n        // `contains` on the `document`.\n        const scrolledParentNode = target === this._document ? target.documentElement : target;\n        const scrollPosition = cachedPosition.scrollPosition;\n        let newTop;\n        let newLeft;\n        if (target === this._document) {\n            const viewportScrollPosition = this._viewportRuler.getViewportScrollPosition();\n            newTop = viewportScrollPosition.top;\n            newLeft = viewportScrollPosition.left;\n        }\n        else {\n            newTop = target.scrollTop;\n            newLeft = target.scrollLeft;\n        }\n        const topDifference = scrollPosition.top - newTop;\n        const leftDifference = scrollPosition.left - newLeft;\n        // Go through and update the cached positions of the scroll\n        // parents that are inside the element that was scrolled.\n        this.positions.forEach((position, node) => {\n            if (position.clientRect && target !== node && scrolledParentNode.contains(node)) {\n                adjustClientRect(position.clientRect, topDifference, leftDifference);\n            }\n        });\n        scrollPosition.top = newTop;\n        scrollPosition.left = newLeft;\n        return { top: topDifference, left: leftDifference };\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Creates a deep clone of an element. */\nfunction deepCloneNode(node) {\n    const clone = node.cloneNode(true);\n    const descendantsWithId = clone.querySelectorAll('[id]');\n    const nodeName = node.nodeName.toLowerCase();\n    // Remove the `id` to avoid having multiple elements with the same id on the page.\n    clone.removeAttribute('id');\n    for (let i = 0; i < descendantsWithId.length; i++) {\n        descendantsWithId[i].removeAttribute('id');\n    }\n    if (nodeName === 'canvas') {\n        transferCanvasData(node, clone);\n    }\n    else if (nodeName === 'input' || nodeName === 'select' || nodeName === 'textarea') {\n        transferInputData(node, clone);\n    }\n    transferData('canvas', node, clone, transferCanvasData);\n    transferData('input, textarea, select', node, clone, transferInputData);\n    return clone;\n}\n/** Matches elements between an element and its clone and allows for their data to be cloned. */\nfunction transferData(selector, node, clone, callback) {\n    const descendantElements = node.querySelectorAll(selector);\n    if (descendantElements.length) {\n        const cloneElements = clone.querySelectorAll(selector);\n        for (let i = 0; i < descendantElements.length; i++) {\n            callback(descendantElements[i], cloneElements[i]);\n        }\n    }\n}\n// Counter for unique cloned radio button names.\nlet cloneUniqueId = 0;\n/** Transfers the data of one input element to another. */\nfunction transferInputData(source, clone) {\n    // Browsers throw an error when assigning the value of a file input programmatically.\n    if (clone.type !== 'file') {\n        clone.value = source.value;\n    }\n    // Radio button `name` attributes must be unique for radio button groups\n    // otherwise original radio buttons can lose their checked state\n    // once the clone is inserted in the DOM.\n    if (clone.type === 'radio' && clone.name) {\n        clone.name = `mat-clone-${clone.name}-${cloneUniqueId++}`;\n    }\n}\n/** Transfers the data of one canvas element to another. */\nfunction transferCanvasData(source, clone) {\n    const context = clone.getContext('2d');\n    if (context) {\n        // In some cases `drawImage` can throw (e.g. if the canvas size is 0x0).\n        // We can't do much about it so just ignore the error.\n        try {\n            context.drawImage(source, 0, 0);\n        }\n        catch (_a) { }\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Options that can be used to bind a passive event listener. */\nconst passiveEventListenerOptions = normalizePassiveListenerOptions({ passive: true });\n/** Options that can be used to bind an active event listener. */\nconst activeEventListenerOptions = normalizePassiveListenerOptions({ passive: false });\n/**\n * Time in milliseconds for which to ignore mouse events, after\n * receiving a touch event. Used to avoid doing double work for\n * touch devices where the browser fires fake mouse events, in\n * addition to touch events.\n */\nconst MOUSE_EVENT_IGNORE_TIME = 800;\n/**\n * Reference to a draggable item. Used to manipulate or dispose of the item.\n */\nclass DragRef {\n    constructor(element, _config, _document, _ngZone, _viewportRuler, _dragDropRegistry) {\n        this._config = _config;\n        this._document = _document;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        this._dragDropRegistry = _dragDropRegistry;\n        /**\n         * CSS `transform` applied to the element when it isn't being dragged. We need a\n         * passive transform in order for the dragged element to retain its new position\n         * after the user has stopped dragging and because we need to know the relative\n         * position in case they start dragging again. This corresponds to `element.style.transform`.\n         */\n        this._passiveTransform = { x: 0, y: 0 };\n        /** CSS `transform` that is applied to the element while it's being dragged. */\n        this._activeTransform = { x: 0, y: 0 };\n        /** Emits when the item is being moved. */\n        this._moveEvents = new Subject();\n        /** Subscription to pointer movement events. */\n        this._pointerMoveSubscription = Subscription.EMPTY;\n        /** Subscription to the event that is dispatched when the user lifts their pointer. */\n        this._pointerUpSubscription = Subscription.EMPTY;\n        /** Subscription to the viewport being scrolled. */\n        this._scrollSubscription = Subscription.EMPTY;\n        /** Subscription to the viewport being resized. */\n        this._resizeSubscription = Subscription.EMPTY;\n        /** Cached reference to the boundary element. */\n        this._boundaryElement = null;\n        /** Whether the native dragging interactions have been enabled on the root element. */\n        this._nativeInteractionsEnabled = true;\n        /** Elements that can be used to drag the draggable item. */\n        this._handles = [];\n        /** Registered handles that are currently disabled. */\n        this._disabledHandles = new Set();\n        /** Layout direction of the item. */\n        this._direction = 'ltr';\n        /**\n         * Amount of milliseconds to wait after the user has put their\n         * pointer down before starting to drag the element.\n         */\n        this.dragStartDelay = 0;\n        this._disabled = false;\n        /** Emits as the drag sequence is being prepared. */\n        this.beforeStarted = new Subject();\n        /** Emits when the user starts dragging the item. */\n        this.started = new Subject();\n        /** Emits when the user has released a drag item, before any animations have started. */\n        this.released = new Subject();\n        /** Emits when the user stops dragging an item in the container. */\n        this.ended = new Subject();\n        /** Emits when the user has moved the item into a new container. */\n        this.entered = new Subject();\n        /** Emits when the user removes the item its container by dragging it into another container. */\n        this.exited = new Subject();\n        /** Emits when the user drops the item inside a container. */\n        this.dropped = new Subject();\n        /**\n         * Emits as the user is dragging the item. Use with caution,\n         * because this event will fire for every pixel that the user has dragged.\n         */\n        this.moved = this._moveEvents;\n        /** Handler for the `mousedown`/`touchstart` events. */\n        this._pointerDown = (event) => {\n            this.beforeStarted.next();\n            // Delegate the event based on whether it started from a handle or the element itself.\n            if (this._handles.length) {\n                const targetHandle = this._handles.find(handle => {\n                    const target = event.target;\n                    return !!target && (target === handle || handle.contains(target));\n                });\n                if (targetHandle && !this._disabledHandles.has(targetHandle) && !this.disabled) {\n                    this._initializeDragSequence(targetHandle, event);\n                }\n            }\n            else if (!this.disabled) {\n                this._initializeDragSequence(this._rootElement, event);\n            }\n        };\n        /** Handler that is invoked when the user moves their pointer after they've initiated a drag. */\n        this._pointerMove = (event) => {\n            // Prevent the default action as early as possible in order to block\n            // native actions like dragging the selected text or images with the mouse.\n            event.preventDefault();\n            const pointerPosition = this._getPointerPositionOnPage(event);\n            if (!this._hasStartedDragging) {\n                const distanceX = Math.abs(pointerPosition.x - this._pickupPositionOnPage.x);\n                const distanceY = Math.abs(pointerPosition.y - this._pickupPositionOnPage.y);\n                const isOverThreshold = distanceX + distanceY >= this._config.dragStartThreshold;\n                // Only start dragging after the user has moved more than the minimum distance in either\n                // direction. Note that this is preferrable over doing something like `skip(minimumDistance)`\n                // in the `pointerMove` subscription, because we're not guaranteed to have one move event\n                // per pixel of movement (e.g. if the user moves their pointer quickly).\n                if (isOverThreshold) {\n                    const isDelayElapsed = Date.now() >= this._dragStartTime + this._getDragStartDelay(event);\n                    const container = this._dropContainer;\n                    if (!isDelayElapsed) {\n                        this._endDragSequence(event);\n                        return;\n                    }\n                    // Prevent other drag sequences from starting while something in the container is still\n                    // being dragged. This can happen while we're waiting for the drop animation to finish\n                    // and can cause errors, because some elements might still be moving around.\n                    if (!container || (!container.isDragging() && !container.isReceiving())) {\n                        this._hasStartedDragging = true;\n                        this._ngZone.run(() => this._startDragSequence(event));\n                    }\n                }\n                return;\n            }\n            // We only need the preview dimensions if we have a boundary element.\n            if (this._boundaryElement) {\n                // Cache the preview element rect if we haven't cached it already or if\n                // we cached it too early before the element dimensions were computed.\n                if (!this._previewRect || (!this._previewRect.width && !this._previewRect.height)) {\n                    this._previewRect = (this._preview || this._rootElement).getBoundingClientRect();\n                }\n            }\n            const constrainedPointerPosition = this._getConstrainedPointerPosition(pointerPosition);\n            this._hasMoved = true;\n            this._lastKnownPointerPosition = pointerPosition;\n            this._updatePointerDirectionDelta(constrainedPointerPosition);\n            if (this._dropContainer) {\n                this._updateActiveDropContainer(constrainedPointerPosition, pointerPosition);\n            }\n            else {\n                const activeTransform = this._activeTransform;\n                activeTransform.x =\n                    constrainedPointerPosition.x - this._pickupPositionOnPage.x + this._passiveTransform.x;\n                activeTransform.y =\n                    constrainedPointerPosition.y - this._pickupPositionOnPage.y + this._passiveTransform.y;\n                this._applyRootElementTransform(activeTransform.x, activeTransform.y);\n                // Apply transform as attribute if dragging and svg element to work for IE\n                if (typeof SVGElement !== 'undefined' && this._rootElement instanceof SVGElement) {\n                    const appliedTransform = `translate(${activeTransform.x} ${activeTransform.y})`;\n                    this._rootElement.setAttribute('transform', appliedTransform);\n                }\n            }\n            // Since this event gets fired for every pixel while dragging, we only\n            // want to fire it if the consumer opted into it. Also we have to\n            // re-enter the zone because we run all of the events on the outside.\n            if (this._moveEvents.observers.length) {\n                this._ngZone.run(() => {\n                    this._moveEvents.next({\n                        source: this,\n                        pointerPosition: constrainedPointerPosition,\n                        event,\n                        distance: this._getDragDistance(constrainedPointerPosition),\n                        delta: this._pointerDirectionDelta\n                    });\n                });\n            }\n        };\n        /** Handler that is invoked when the user lifts their pointer up, after initiating a drag. */\n        this._pointerUp = (event) => {\n            this._endDragSequence(event);\n        };\n        this.withRootElement(element);\n        this._parentPositions = new ParentPositionTracker(_document, _viewportRuler);\n        _dragDropRegistry.registerDragItem(this);\n    }\n    /** Whether starting to drag this element is disabled. */\n    get disabled() {\n        return this._disabled || !!(this._dropContainer && this._dropContainer.disabled);\n    }\n    set disabled(value) {\n        const newValue = coerceBooleanProperty(value);\n        if (newValue !== this._disabled) {\n            this._disabled = newValue;\n            this._toggleNativeDragInteractions();\n        }\n    }\n    /**\n     * Returns the element that is being used as a placeholder\n     * while the current element is being dragged.\n     */\n    getPlaceholderElement() {\n        return this._placeholder;\n    }\n    /** Returns the root draggable element. */\n    getRootElement() {\n        return this._rootElement;\n    }\n    /**\n     * Gets the currently-visible element that represents the drag item.\n     * While dragging this is the placeholder, otherwise it's the root element.\n     */\n    getVisibleElement() {\n        return this.isDragging() ? this.getPlaceholderElement() : this.getRootElement();\n    }\n    /** Registers the handles that can be used to drag the element. */\n    withHandles(handles) {\n        this._handles = handles.map(handle => coerceElement(handle));\n        this._handles.forEach(handle => toggleNativeDragInteractions(handle, false));\n        this._toggleNativeDragInteractions();\n        return this;\n    }\n    /**\n     * Registers the template that should be used for the drag preview.\n     * @param template Template that from which to stamp out the preview.\n     */\n    withPreviewTemplate(template) {\n        this._previewTemplate = template;\n        return this;\n    }\n    /**\n     * Registers the template that should be used for the drag placeholder.\n     * @param template Template that from which to stamp out the placeholder.\n     */\n    withPlaceholderTemplate(template) {\n        this._placeholderTemplate = template;\n        return this;\n    }\n    /**\n     * Sets an alternate drag root element. The root element is the element that will be moved as\n     * the user is dragging. Passing an alternate root element is useful when trying to enable\n     * dragging on an element that you might not have access to.\n     */\n    withRootElement(rootElement) {\n        const element = coerceElement(rootElement);\n        if (element !== this._rootElement) {\n            if (this._rootElement) {\n                this._removeRootElementListeners(this._rootElement);\n            }\n            this._ngZone.runOutsideAngular(() => {\n                element.addEventListener('mousedown', this._pointerDown, activeEventListenerOptions);\n                element.addEventListener('touchstart', this._pointerDown, passiveEventListenerOptions);\n            });\n            this._initialTransform = undefined;\n            this._rootElement = element;\n        }\n        if (typeof SVGElement !== 'undefined' && this._rootElement instanceof SVGElement) {\n            this._ownerSVGElement = this._rootElement.ownerSVGElement;\n        }\n        return this;\n    }\n    /**\n     * Element to which the draggable's position will be constrained.\n     */\n    withBoundaryElement(boundaryElement) {\n        this._boundaryElement = boundaryElement ? coerceElement(boundaryElement) : null;\n        this._resizeSubscription.unsubscribe();\n        if (boundaryElement) {\n            this._resizeSubscription = this._viewportRuler\n                .change(10)\n                .subscribe(() => this._containInsideBoundaryOnResize());\n        }\n        return this;\n    }\n    /** Removes the dragging functionality from the DOM element. */\n    dispose() {\n        this._removeRootElementListeners(this._rootElement);\n        // Do this check before removing from the registry since it'll\n        // stop being considered as dragged once it is removed.\n        if (this.isDragging()) {\n            // Since we move out the element to the end of the body while it's being\n            // dragged, we have to make sure that it's removed if it gets destroyed.\n            removeNode(this._rootElement);\n        }\n        removeNode(this._anchor);\n        this._destroyPreview();\n        this._destroyPlaceholder();\n        this._dragDropRegistry.removeDragItem(this);\n        this._removeSubscriptions();\n        this.beforeStarted.complete();\n        this.started.complete();\n        this.released.complete();\n        this.ended.complete();\n        this.entered.complete();\n        this.exited.complete();\n        this.dropped.complete();\n        this._moveEvents.complete();\n        this._handles = [];\n        this._disabledHandles.clear();\n        this._dropContainer = undefined;\n        this._resizeSubscription.unsubscribe();\n        this._parentPositions.clear();\n        this._boundaryElement = this._rootElement = this._ownerSVGElement = this._placeholderTemplate =\n            this._previewTemplate = this._anchor = null;\n    }\n    /** Checks whether the element is currently being dragged. */\n    isDragging() {\n        return this._hasStartedDragging && this._dragDropRegistry.isDragging(this);\n    }\n    /** Resets a standalone drag item to its initial position. */\n    reset() {\n        this._rootElement.style.transform = this._initialTransform || '';\n        this._activeTransform = { x: 0, y: 0 };\n        this._passiveTransform = { x: 0, y: 0 };\n    }\n    /**\n     * Sets a handle as disabled. While a handle is disabled, it'll capture and interrupt dragging.\n     * @param handle Handle element that should be disabled.\n     */\n    disableHandle(handle) {\n        if (this._handles.indexOf(handle) > -1) {\n            this._disabledHandles.add(handle);\n        }\n    }\n    /**\n     * Enables a handle, if it has been disabled.\n     * @param handle Handle element to be enabled.\n     */\n    enableHandle(handle) {\n        this._disabledHandles.delete(handle);\n    }\n    /** Sets the layout direction of the draggable item. */\n    withDirection(direction) {\n        this._direction = direction;\n        return this;\n    }\n    /** Sets the container that the item is part of. */\n    _withDropContainer(container) {\n        this._dropContainer = container;\n    }\n    /**\n     * Gets the current position in pixels the draggable outside of a drop container.\n     */\n    getFreeDragPosition() {\n        const position = this.isDragging() ? this._activeTransform : this._passiveTransform;\n        return { x: position.x, y: position.y };\n    }\n    /**\n     * Sets the current position in pixels the draggable outside of a drop container.\n     * @param value New position to be set.\n     */\n    setFreeDragPosition(value) {\n        this._activeTransform = { x: 0, y: 0 };\n        this._passiveTransform.x = value.x;\n        this._passiveTransform.y = value.y;\n        if (!this._dropContainer) {\n            this._applyRootElementTransform(value.x, value.y);\n        }\n        return this;\n    }\n    /** Updates the item's sort order based on the last-known pointer position. */\n    _sortFromLastPointerPosition() {\n        const position = this._lastKnownPointerPosition;\n        if (position && this._dropContainer) {\n            this._updateActiveDropContainer(this._getConstrainedPointerPosition(position), position);\n        }\n    }\n    /** Unsubscribes from the global subscriptions. */\n    _removeSubscriptions() {\n        this._pointerMoveSubscription.unsubscribe();\n        this._pointerUpSubscription.unsubscribe();\n        this._scrollSubscription.unsubscribe();\n    }\n    /** Destroys the preview element and its ViewRef. */\n    _destroyPreview() {\n        if (this._preview) {\n            removeNode(this._preview);\n        }\n        if (this._previewRef) {\n            this._previewRef.destroy();\n        }\n        this._preview = this._previewRef = null;\n    }\n    /** Destroys the placeholder element and its ViewRef. */\n    _destroyPlaceholder() {\n        if (this._placeholder) {\n            removeNode(this._placeholder);\n        }\n        if (this._placeholderRef) {\n            this._placeholderRef.destroy();\n        }\n        this._placeholder = this._placeholderRef = null;\n    }\n    /**\n     * Clears subscriptions and stops the dragging sequence.\n     * @param event Browser event object that ended the sequence.\n     */\n    _endDragSequence(event) {\n        // Note that here we use `isDragging` from the service, rather than from `this`.\n        // The difference is that the one from the service reflects whether a dragging sequence\n        // has been initiated, whereas the one on `this` includes whether the user has passed\n        // the minimum dragging threshold.\n        if (!this._dragDropRegistry.isDragging(this)) {\n            return;\n        }\n        this._removeSubscriptions();\n        this._dragDropRegistry.stopDragging(this);\n        this._toggleNativeDragInteractions();\n        if (this._handles) {\n            this._rootElement.style.webkitTapHighlightColor = this._rootElementTapHighlight;\n        }\n        if (!this._hasStartedDragging) {\n            return;\n        }\n        this.released.next({ source: this });\n        if (this._dropContainer) {\n            // Stop scrolling immediately, instead of waiting for the animation to finish.\n            this._dropContainer._stopScrolling();\n            this._animatePreviewToPlaceholder().then(() => {\n                this._cleanupDragArtifacts(event);\n                this._cleanupCachedDimensions();\n                this._dragDropRegistry.stopDragging(this);\n            });\n        }\n        else {\n            // Convert the active transform into a passive one. This means that next time\n            // the user starts dragging the item, its position will be calculated relatively\n            // to the new passive transform.\n            this._passiveTransform.x = this._activeTransform.x;\n            this._passiveTransform.y = this._activeTransform.y;\n            this._ngZone.run(() => {\n                this.ended.next({\n                    source: this,\n                    distance: this._getDragDistance(this._getPointerPositionOnPage(event))\n                });\n            });\n            this._cleanupCachedDimensions();\n            this._dragDropRegistry.stopDragging(this);\n        }\n    }\n    /** Starts the dragging sequence. */\n    _startDragSequence(event) {\n        if (isTouchEvent(event)) {\n            this._lastTouchEventTime = Date.now();\n        }\n        this._toggleNativeDragInteractions();\n        const dropContainer = this._dropContainer;\n        if (dropContainer) {\n            const element = this._rootElement;\n            const parent = element.parentNode;\n            const preview = this._preview = this._createPreviewElement();\n            const placeholder = this._placeholder = this._createPlaceholderElement();\n            const anchor = this._anchor = this._anchor || this._document.createComment('');\n            // Insert an anchor node so that we can restore the element's position in the DOM.\n            parent.insertBefore(anchor, element);\n            // We move the element out at the end of the body and we make it hidden, because keeping it in\n            // place will throw off the consumer's `:last-child` selectors. We can't remove the element\n            // from the DOM completely, because iOS will stop firing all subsequent events in the chain.\n            toggleVisibility(element, false);\n            this._document.body.appendChild(parent.replaceChild(placeholder, element));\n            getPreviewInsertionPoint(this._document).appendChild(preview);\n            this.started.next({ source: this }); // Emit before notifying the container.\n            dropContainer.start();\n            this._initialContainer = dropContainer;\n            this._initialIndex = dropContainer.getItemIndex(this);\n        }\n        else {\n            this.started.next({ source: this });\n            this._initialContainer = this._initialIndex = undefined;\n        }\n        // Important to run after we've called `start` on the parent container\n        // so that it has had time to resolve its scrollable parents.\n        this._parentPositions.cache(dropContainer ? dropContainer.getScrollableParents() : []);\n    }\n    /**\n     * Sets up the different variables and subscriptions\n     * that will be necessary for the dragging sequence.\n     * @param referenceElement Element that started the drag sequence.\n     * @param event Browser event object that started the sequence.\n     */\n    _initializeDragSequence(referenceElement, event) {\n        // Always stop propagation for the event that initializes\n        // the dragging sequence, in order to prevent it from potentially\n        // starting another sequence for a draggable parent somewhere up the DOM tree.\n        event.stopPropagation();\n        const isDragging = this.isDragging();\n        const isTouchSequence = isTouchEvent(event);\n        const isAuxiliaryMouseButton = !isTouchSequence && event.button !== 0;\n        const rootElement = this._rootElement;\n        const isSyntheticEvent = !isTouchSequence && this._lastTouchEventTime &&\n            this._lastTouchEventTime + MOUSE_EVENT_IGNORE_TIME > Date.now();\n        // If the event started from an element with the native HTML drag&drop, it'll interfere\n        // with our own dragging (e.g. `img` tags do it by default). Prevent the default action\n        // to stop it from happening. Note that preventing on `dragstart` also seems to work, but\n        // it's flaky and it fails if the user drags it away quickly. Also note that we only want\n        // to do this for `mousedown` since doing the same for `touchstart` will stop any `click`\n        // events from firing on touch devices.\n        if (event.target && event.target.draggable && event.type === 'mousedown') {\n            event.preventDefault();\n        }\n        // Abort if the user is already dragging or is using a mouse button other than the primary one.\n        if (isDragging || isAuxiliaryMouseButton || isSyntheticEvent) {\n            return;\n        }\n        // If we've got handles, we need to disable the tap highlight on the entire root element,\n        // otherwise iOS will still add it, even though all the drag interactions on the handle\n        // are disabled.\n        if (this._handles.length) {\n            this._rootElementTapHighlight = rootElement.style.webkitTapHighlightColor || '';\n            rootElement.style.webkitTapHighlightColor = 'transparent';\n        }\n        this._hasStartedDragging = this._hasMoved = false;\n        // Avoid multiple subscriptions and memory leaks when multi touch\n        // (isDragging check above isn't enough because of possible temporal and/or dimensional delays)\n        this._removeSubscriptions();\n        this._pointerMoveSubscription = this._dragDropRegistry.pointerMove.subscribe(this._pointerMove);\n        this._pointerUpSubscription = this._dragDropRegistry.pointerUp.subscribe(this._pointerUp);\n        this._scrollSubscription = this._dragDropRegistry.scroll.subscribe(scrollEvent => {\n            this._updateOnScroll(scrollEvent);\n        });\n        if (this._boundaryElement) {\n            this._boundaryRect = getMutableClientRect(this._boundaryElement);\n        }\n        // If we have a custom preview we can't know ahead of time how large it'll be so we position\n        // it next to the cursor. The exception is when the consumer has opted into making the preview\n        // the same size as the root element, in which case we do know the size.\n        const previewTemplate = this._previewTemplate;\n        this._pickupPositionInElement = previewTemplate && previewTemplate.template &&\n            !previewTemplate.matchSize ? { x: 0, y: 0 } :\n            this._getPointerPositionInElement(referenceElement, event);\n        const pointerPosition = this._pickupPositionOnPage = this._lastKnownPointerPosition =\n            this._getPointerPositionOnPage(event);\n        this._pointerDirectionDelta = { x: 0, y: 0 };\n        this._pointerPositionAtLastDirectionChange = { x: pointerPosition.x, y: pointerPosition.y };\n        this._dragStartTime = Date.now();\n        this._dragDropRegistry.startDragging(this, event);\n    }\n    /** Cleans up the DOM artifacts that were added to facilitate the element being dragged. */\n    _cleanupDragArtifacts(event) {\n        // Restore the element's visibility and insert it at its old position in the DOM.\n        // It's important that we maintain the position, because moving the element around in the DOM\n        // can throw off `NgFor` which does smart diffing and re-creates elements only when necessary,\n        // while moving the existing elements in all other cases.\n        toggleVisibility(this._rootElement, true);\n        this._anchor.parentNode.replaceChild(this._rootElement, this._anchor);\n        this._destroyPreview();\n        this._destroyPlaceholder();\n        this._boundaryRect = this._previewRect = undefined;\n        // Re-enter the NgZone since we bound `document` events on the outside.\n        this._ngZone.run(() => {\n            const container = this._dropContainer;\n            const currentIndex = container.getItemIndex(this);\n            const pointerPosition = this._getPointerPositionOnPage(event);\n            const distance = this._getDragDistance(this._getPointerPositionOnPage(event));\n            const isPointerOverContainer = container._isOverContainer(pointerPosition.x, pointerPosition.y);\n            this.ended.next({ source: this, distance });\n            this.dropped.next({\n                item: this,\n                currentIndex,\n                previousIndex: this._initialIndex,\n                container: container,\n                previousContainer: this._initialContainer,\n                isPointerOverContainer,\n                distance\n            });\n            container.drop(this, currentIndex, this._initialContainer, isPointerOverContainer, distance, this._initialIndex);\n            this._dropContainer = this._initialContainer;\n        });\n    }\n    /**\n     * Updates the item's position in its drop container, or moves it\n     * into a new one, depending on its current drag position.\n     */\n    _updateActiveDropContainer({ x, y }, { x: rawX, y: rawY }) {\n        // Drop container that draggable has been moved into.\n        let newContainer = this._initialContainer._getSiblingContainerFromPosition(this, x, y);\n        // If we couldn't find a new container to move the item into, and the item has left its\n        // initial container, check whether the it's over the initial container. This handles the\n        // case where two containers are connected one way and the user tries to undo dragging an\n        // item into a new container.\n        if (!newContainer && this._dropContainer !== this._initialContainer &&\n            this._initialContainer._isOverContainer(x, y)) {\n            newContainer = this._initialContainer;\n        }\n        if (newContainer && newContainer !== this._dropContainer) {\n            this._ngZone.run(() => {\n                // Notify the old container that the item has left.\n                this.exited.next({ item: this, container: this._dropContainer });\n                this._dropContainer.exit(this);\n                // Notify the new container that the item has entered.\n                this._dropContainer = newContainer;\n                this._dropContainer.enter(this, x, y, newContainer === this._initialContainer &&\n                    // If we're re-entering the initial container and sorting is disabled,\n                    // put item the into its starting index to begin with.\n                    newContainer.sortingDisabled ? this._initialIndex : undefined);\n                this.entered.next({\n                    item: this,\n                    container: newContainer,\n                    currentIndex: newContainer.getItemIndex(this)\n                });\n            });\n        }\n        this._dropContainer._startScrollingIfNecessary(rawX, rawY);\n        this._dropContainer._sortItem(this, x, y, this._pointerDirectionDelta);\n        this._preview.style.transform =\n            getTransform(x - this._pickupPositionInElement.x, y - this._pickupPositionInElement.y);\n    }\n    /**\n     * Creates the element that will be rendered next to the user's pointer\n     * and will be used as a preview of the element that is being dragged.\n     */\n    _createPreviewElement() {\n        const previewConfig = this._previewTemplate;\n        const previewClass = this.previewClass;\n        const previewTemplate = previewConfig ? previewConfig.template : null;\n        let preview;\n        if (previewTemplate && previewConfig) {\n            // Measure the element before we've inserted the preview\n            // since the insertion could throw off the measurement.\n            const rootRect = previewConfig.matchSize ? this._rootElement.getBoundingClientRect() : null;\n            const viewRef = previewConfig.viewContainer.createEmbeddedView(previewTemplate, previewConfig.context);\n            viewRef.detectChanges();\n            preview = getRootNode(viewRef, this._document);\n            this._previewRef = viewRef;\n            if (previewConfig.matchSize) {\n                matchElementSize(preview, rootRect);\n            }\n            else {\n                preview.style.transform =\n                    getTransform(this._pickupPositionOnPage.x, this._pickupPositionOnPage.y);\n            }\n        }\n        else {\n            const element = this._rootElement;\n            preview = deepCloneNode(element);\n            matchElementSize(preview, element.getBoundingClientRect());\n        }\n        extendStyles(preview.style, {\n            // It's important that we disable the pointer events on the preview, because\n            // it can throw off the `document.elementFromPoint` calls in the `CdkDropList`.\n            pointerEvents: 'none',\n            // We have to reset the margin, because it can throw off positioning relative to the viewport.\n            margin: '0',\n            position: 'fixed',\n            top: '0',\n            left: '0',\n            zIndex: `${this._config.zIndex || 1000}`\n        });\n        toggleNativeDragInteractions(preview, false);\n        preview.classList.add('cdk-drag-preview');\n        preview.setAttribute('dir', this._direction);\n        if (previewClass) {\n            if (Array.isArray(previewClass)) {\n                previewClass.forEach(className => preview.classList.add(className));\n            }\n            else {\n                preview.classList.add(previewClass);\n            }\n        }\n        return preview;\n    }\n    /**\n     * Animates the preview element from its current position to the location of the drop placeholder.\n     * @returns Promise that resolves when the animation completes.\n     */\n    _animatePreviewToPlaceholder() {\n        // If the user hasn't moved yet, the transitionend event won't fire.\n        if (!this._hasMoved) {\n            return Promise.resolve();\n        }\n        const placeholderRect = this._placeholder.getBoundingClientRect();\n        // Apply the class that adds a transition to the preview.\n        this._preview.classList.add('cdk-drag-animating');\n        // Move the preview to the placeholder position.\n        this._preview.style.transform = getTransform(placeholderRect.left, placeholderRect.top);\n        // If the element doesn't have a `transition`, the `transitionend` event won't fire. Since\n        // we need to trigger a style recalculation in order for the `cdk-drag-animating` class to\n        // apply its style, we take advantage of the available info to figure out whether we need to\n        // bind the event in the first place.\n        const duration = getTransformTransitionDurationInMs(this._preview);\n        if (duration === 0) {\n            return Promise.resolve();\n        }\n        return this._ngZone.runOutsideAngular(() => {\n            return new Promise(resolve => {\n                const handler = ((event) => {\n                    if (!event || (event.target === this._preview && event.propertyName === 'transform')) {\n                        this._preview.removeEventListener('transitionend', handler);\n                        resolve();\n                        clearTimeout(timeout);\n                    }\n                });\n                // If a transition is short enough, the browser might not fire the `transitionend` event.\n                // Since we know how long it's supposed to take, add a timeout with a 50% buffer that'll\n                // fire if the transition hasn't completed when it was supposed to.\n                const timeout = setTimeout(handler, duration * 1.5);\n                this._preview.addEventListener('transitionend', handler);\n            });\n        });\n    }\n    /** Creates an element that will be shown instead of the current element while dragging. */\n    _createPlaceholderElement() {\n        const placeholderConfig = this._placeholderTemplate;\n        const placeholderTemplate = placeholderConfig ? placeholderConfig.template : null;\n        let placeholder;\n        if (placeholderTemplate) {\n            this._placeholderRef = placeholderConfig.viewContainer.createEmbeddedView(placeholderTemplate, placeholderConfig.context);\n            this._placeholderRef.detectChanges();\n            placeholder = getRootNode(this._placeholderRef, this._document);\n        }\n        else {\n            placeholder = deepCloneNode(this._rootElement);\n        }\n        placeholder.classList.add('cdk-drag-placeholder');\n        return placeholder;\n    }\n    /**\n     * Figures out the coordinates at which an element was picked up.\n     * @param referenceElement Element that initiated the dragging.\n     * @param event Event that initiated the dragging.\n     */\n    _getPointerPositionInElement(referenceElement, event) {\n        const elementRect = this._rootElement.getBoundingClientRect();\n        const handleElement = referenceElement === this._rootElement ? null : referenceElement;\n        const referenceRect = handleElement ? handleElement.getBoundingClientRect() : elementRect;\n        const point = isTouchEvent(event) ? event.targetTouches[0] : event;\n        const scrollPosition = this._getViewportScrollPosition();\n        const x = point.pageX - referenceRect.left - scrollPosition.left;\n        const y = point.pageY - referenceRect.top - scrollPosition.top;\n        return {\n            x: referenceRect.left - elementRect.left + x,\n            y: referenceRect.top - elementRect.top + y\n        };\n    }\n    /** Determines the point of the page that was touched by the user. */\n    _getPointerPositionOnPage(event) {\n        const scrollPosition = this._getViewportScrollPosition();\n        const point = isTouchEvent(event) ?\n            // `touches` will be empty for start/end events so we have to fall back to `changedTouches`.\n            // Also note that on real devices we're guaranteed for either `touches` or `changedTouches`\n            // to have a value, but Firefox in device emulation mode has a bug where both can be empty\n            // for `touchstart` and `touchend` so we fall back to a dummy object in order to avoid\n            // throwing an error. The value returned here will be incorrect, but since this only\n            // breaks inside a developer tool and the value is only used for secondary information,\n            // we can get away with it. See https://bugzilla.mozilla.org/show_bug.cgi?id=1615824.\n            (event.touches[0] || event.changedTouches[0] || { pageX: 0, pageY: 0 }) : event;\n        const x = point.pageX - scrollPosition.left;\n        const y = point.pageY - scrollPosition.top;\n        // if dragging SVG element, try to convert from the screen coordinate system to the SVG\n        // coordinate system\n        if (this._ownerSVGElement) {\n            const svgMatrix = this._ownerSVGElement.getScreenCTM();\n            if (svgMatrix) {\n                const svgPoint = this._ownerSVGElement.createSVGPoint();\n                svgPoint.x = x;\n                svgPoint.y = y;\n                return svgPoint.matrixTransform(svgMatrix.inverse());\n            }\n        }\n        return { x, y };\n    }\n    /** Gets the pointer position on the page, accounting for any position constraints. */\n    _getConstrainedPointerPosition(point) {\n        const dropContainerLock = this._dropContainer ? this._dropContainer.lockAxis : null;\n        let { x, y } = this.constrainPosition ? this.constrainPosition(point, this) : point;\n        if (this.lockAxis === 'x' || dropContainerLock === 'x') {\n            y = this._pickupPositionOnPage.y;\n        }\n        else if (this.lockAxis === 'y' || dropContainerLock === 'y') {\n            x = this._pickupPositionOnPage.x;\n        }\n        if (this._boundaryRect) {\n            const { x: pickupX, y: pickupY } = this._pickupPositionInElement;\n            const boundaryRect = this._boundaryRect;\n            const previewRect = this._previewRect;\n            const minY = boundaryRect.top + pickupY;\n            const maxY = boundaryRect.bottom - (previewRect.height - pickupY);\n            const minX = boundaryRect.left + pickupX;\n            const maxX = boundaryRect.right - (previewRect.width - pickupX);\n            x = clamp(x, minX, maxX);\n            y = clamp(y, minY, maxY);\n        }\n        return { x, y };\n    }\n    /** Updates the current drag delta, based on the user's current pointer position on the page. */\n    _updatePointerDirectionDelta(pointerPositionOnPage) {\n        const { x, y } = pointerPositionOnPage;\n        const delta = this._pointerDirectionDelta;\n        const positionSinceLastChange = this._pointerPositionAtLastDirectionChange;\n        // Amount of pixels the user has dragged since the last time the direction changed.\n        const changeX = Math.abs(x - positionSinceLastChange.x);\n        const changeY = Math.abs(y - positionSinceLastChange.y);\n        // Because we handle pointer events on a per-pixel basis, we don't want the delta\n        // to change for every pixel, otherwise anything that depends on it can look erratic.\n        // To make the delta more consistent, we track how much the user has moved since the last\n        // delta change and we only update it after it has reached a certain threshold.\n        if (changeX > this._config.pointerDirectionChangeThreshold) {\n            delta.x = x > positionSinceLastChange.x ? 1 : -1;\n            positionSinceLastChange.x = x;\n        }\n        if (changeY > this._config.pointerDirectionChangeThreshold) {\n            delta.y = y > positionSinceLastChange.y ? 1 : -1;\n            positionSinceLastChange.y = y;\n        }\n        return delta;\n    }\n    /** Toggles the native drag interactions, based on how many handles are registered. */\n    _toggleNativeDragInteractions() {\n        if (!this._rootElement || !this._handles) {\n            return;\n        }\n        const shouldEnable = this._handles.length > 0 || !this.isDragging();\n        if (shouldEnable !== this._nativeInteractionsEnabled) {\n            this._nativeInteractionsEnabled = shouldEnable;\n            toggleNativeDragInteractions(this._rootElement, shouldEnable);\n        }\n    }\n    /** Removes the manually-added event listeners from the root element. */\n    _removeRootElementListeners(element) {\n        element.removeEventListener('mousedown', this._pointerDown, activeEventListenerOptions);\n        element.removeEventListener('touchstart', this._pointerDown, passiveEventListenerOptions);\n    }\n    /**\n     * Applies a `transform` to the root element, taking into account any existing transforms on it.\n     * @param x New transform value along the X axis.\n     * @param y New transform value along the Y axis.\n     */\n    _applyRootElementTransform(x, y) {\n        const transform = getTransform(x, y);\n        // Cache the previous transform amount only after the first drag sequence, because\n        // we don't want our own transforms to stack on top of each other.\n        if (this._initialTransform == null) {\n            this._initialTransform = this._rootElement.style.transform || '';\n        }\n        // Preserve the previous `transform` value, if there was one. Note that we apply our own\n        // transform before the user's, because things like rotation can affect which direction\n        // the element will be translated towards.\n        this._rootElement.style.transform = this._initialTransform ?\n            transform + ' ' + this._initialTransform : transform;\n    }\n    /**\n     * Gets the distance that the user has dragged during the current drag sequence.\n     * @param currentPosition Current position of the user's pointer.\n     */\n    _getDragDistance(currentPosition) {\n        const pickupPosition = this._pickupPositionOnPage;\n        if (pickupPosition) {\n            return { x: currentPosition.x - pickupPosition.x, y: currentPosition.y - pickupPosition.y };\n        }\n        return { x: 0, y: 0 };\n    }\n    /** Cleans up any cached element dimensions that we don't need after dragging has stopped. */\n    _cleanupCachedDimensions() {\n        this._boundaryRect = this._previewRect = undefined;\n        this._parentPositions.clear();\n    }\n    /**\n     * Checks whether the element is still inside its boundary after the viewport has been resized.\n     * If not, the position is adjusted so that the element fits again.\n     */\n    _containInsideBoundaryOnResize() {\n        let { x, y } = this._passiveTransform;\n        if ((x === 0 && y === 0) || this.isDragging() || !this._boundaryElement) {\n            return;\n        }\n        const boundaryRect = this._boundaryElement.getBoundingClientRect();\n        const elementRect = this._rootElement.getBoundingClientRect();\n        // It's possible that the element got hidden away after dragging (e.g. by switching to a\n        // different tab). Don't do anything in this case so we don't clear the user's position.\n        if ((boundaryRect.width === 0 && boundaryRect.height === 0) ||\n            (elementRect.width === 0 && elementRect.height === 0)) {\n            return;\n        }\n        const leftOverflow = boundaryRect.left - elementRect.left;\n        const rightOverflow = elementRect.right - boundaryRect.right;\n        const topOverflow = boundaryRect.top - elementRect.top;\n        const bottomOverflow = elementRect.bottom - boundaryRect.bottom;\n        // If the element has become wider than the boundary, we can't\n        // do much to make it fit so we just anchor it to the left.\n        if (boundaryRect.width > elementRect.width) {\n            if (leftOverflow > 0) {\n                x += leftOverflow;\n            }\n            if (rightOverflow > 0) {\n                x -= rightOverflow;\n            }\n        }\n        else {\n            x = 0;\n        }\n        // If the element has become taller than the boundary, we can't\n        // do much to make it fit so we just anchor it to the top.\n        if (boundaryRect.height > elementRect.height) {\n            if (topOverflow > 0) {\n                y += topOverflow;\n            }\n            if (bottomOverflow > 0) {\n                y -= bottomOverflow;\n            }\n        }\n        else {\n            y = 0;\n        }\n        if (x !== this._passiveTransform.x || y !== this._passiveTransform.y) {\n            this.setFreeDragPosition({ y, x });\n        }\n    }\n    /** Gets the drag start delay, based on the event type. */\n    _getDragStartDelay(event) {\n        const value = this.dragStartDelay;\n        if (typeof value === 'number') {\n            return value;\n        }\n        else if (isTouchEvent(event)) {\n            return value.touch;\n        }\n        return value ? value.mouse : 0;\n    }\n    /** Updates the internal state of the draggable element when scrolling has occurred. */\n    _updateOnScroll(event) {\n        const scrollDifference = this._parentPositions.handleScroll(event);\n        if (scrollDifference) {\n            const target = event.target;\n            // ClientRect dimensions are based on the scroll position of the page and its parent node so\n            // we have to update the cached boundary ClientRect if the user has scrolled. Check for\n            // the `document` specifically since IE doesn't support `contains` on it.\n            if (this._boundaryRect && (target === this._document ||\n                (target !== this._boundaryElement && target.contains(this._boundaryElement)))) {\n                adjustClientRect(this._boundaryRect, scrollDifference.top, scrollDifference.left);\n            }\n            this._pickupPositionOnPage.x += scrollDifference.left;\n            this._pickupPositionOnPage.y += scrollDifference.top;\n            // If we're in free drag mode, we have to update the active transform, because\n            // it isn't relative to the viewport like the preview inside a drop list.\n            if (!this._dropContainer) {\n                this._activeTransform.x -= scrollDifference.left;\n                this._activeTransform.y -= scrollDifference.top;\n                this._applyRootElementTransform(this._activeTransform.x, this._activeTransform.y);\n            }\n        }\n    }\n    /** Gets the scroll position of the viewport. */\n    _getViewportScrollPosition() {\n        const cachedPosition = this._parentPositions.positions.get(this._document);\n        return cachedPosition ? cachedPosition.scrollPosition :\n            this._viewportRuler.getViewportScrollPosition();\n    }\n}\n/**\n * Gets a 3d `transform` that can be applied to an element.\n * @param x Desired position of the element along the X axis.\n * @param y Desired position of the element along the Y axis.\n */\nfunction getTransform(x, y) {\n    // Round the transforms since some browsers will\n    // blur the elements for sub-pixel transforms.\n    return `translate3d(${Math.round(x)}px, ${Math.round(y)}px, 0)`;\n}\n/** Clamps a value between a minimum and a maximum. */\nfunction clamp(value, min, max) {\n    return Math.max(min, Math.min(max, value));\n}\n/**\n * Helper to remove a node from the DOM and to do all the necessary null checks.\n * @param node Node to be removed.\n */\nfunction removeNode(node) {\n    if (node && node.parentNode) {\n        node.parentNode.removeChild(node);\n    }\n}\n/** Determines whether an event is a touch event. */\nfunction isTouchEvent(event) {\n    // This function is called for every pixel that the user has dragged so we need it to be\n    // as fast as possible. Since we only bind mouse events and touch events, we can assume\n    // that if the event's name starts with `t`, it's a touch event.\n    return event.type[0] === 't';\n}\n/** Gets the element into which the drag preview should be inserted. */\nfunction getPreviewInsertionPoint(documentRef) {\n    // We can't use the body if the user is in fullscreen mode,\n    // because the preview will render under the fullscreen element.\n    // TODO(crisbeto): dedupe this with the `FullscreenOverlayContainer` eventually.\n    return documentRef.fullscreenElement ||\n        documentRef.webkitFullscreenElement ||\n        documentRef.mozFullScreenElement ||\n        documentRef.msFullscreenElement ||\n        documentRef.body;\n}\n/**\n * Gets the root HTML element of an embedded view.\n * If the root is not an HTML element it gets wrapped in one.\n */\nfunction getRootNode(viewRef, _document) {\n    const rootNodes = viewRef.rootNodes;\n    if (rootNodes.length === 1 && rootNodes[0].nodeType === _document.ELEMENT_NODE) {\n        return rootNodes[0];\n    }\n    const wrapper = _document.createElement('div');\n    rootNodes.forEach(node => wrapper.appendChild(node));\n    return wrapper;\n}\n/**\n * Matches the target element's size to the source's size.\n * @param target Element that needs to be resized.\n * @param sourceRect Dimensions of the source element.\n */\nfunction matchElementSize(target, sourceRect) {\n    target.style.width = `${sourceRect.width}px`;\n    target.style.height = `${sourceRect.height}px`;\n    target.style.transform = getTransform(sourceRect.left, sourceRect.top);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Moves an item one index in an array to another.\n * @param array Array in which to move the item.\n * @param fromIndex Starting index of the item.\n * @param toIndex Index to which the item should be moved.\n */\nfunction moveItemInArray(array, fromIndex, toIndex) {\n    const from = clamp$1(fromIndex, array.length - 1);\n    const to = clamp$1(toIndex, array.length - 1);\n    if (from === to) {\n        return;\n    }\n    const target = array[from];\n    const delta = to < from ? -1 : 1;\n    for (let i = from; i !== to; i += delta) {\n        array[i] = array[i + delta];\n    }\n    array[to] = target;\n}\n/**\n * Moves an item from one array to another.\n * @param currentArray Array from which to transfer the item.\n * @param targetArray Array into which to put the item.\n * @param currentIndex Index of the item in its current array.\n * @param targetIndex Index at which to insert the item.\n */\nfunction transferArrayItem(currentArray, targetArray, currentIndex, targetIndex) {\n    const from = clamp$1(currentIndex, currentArray.length - 1);\n    const to = clamp$1(targetIndex, targetArray.length);\n    if (currentArray.length) {\n        targetArray.splice(to, 0, currentArray.splice(from, 1)[0]);\n    }\n}\n/**\n * Copies an item from one array to another, leaving it in its\n * original position in current array.\n * @param currentArray Array from which to copy the item.\n * @param targetArray Array into which is copy the item.\n * @param currentIndex Index of the item in its current array.\n * @param targetIndex Index at which to insert the item.\n *\n */\nfunction copyArrayItem(currentArray, targetArray, currentIndex, targetIndex) {\n    const to = clamp$1(targetIndex, targetArray.length);\n    if (currentArray.length) {\n        targetArray.splice(to, 0, currentArray[currentIndex]);\n    }\n}\n/** Clamps a number between zero and a maximum. */\nfunction clamp$1(value, max) {\n    return Math.max(0, Math.min(max, value));\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Proximity, as a ratio to width/height, at which a\n * dragged item will affect the drop container.\n */\nconst DROP_PROXIMITY_THRESHOLD = 0.05;\n/**\n * Proximity, as a ratio to width/height at which to start auto-scrolling the drop list or the\n * viewport. The value comes from trying it out manually until it feels right.\n */\nconst SCROLL_PROXIMITY_THRESHOLD = 0.05;\n/**\n * Number of pixels to scroll for each frame when auto-scrolling an element.\n * The value comes from trying it out manually until it feels right.\n */\nconst AUTO_SCROLL_STEP = 2;\n/**\n * Reference to a drop list. Used to manipulate or dispose of the container.\n */\nclass DropListRef {\n    constructor(element, _dragDropRegistry, _document, _ngZone, _viewportRuler) {\n        this._dragDropRegistry = _dragDropRegistry;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        /** Whether starting a dragging sequence from this container is disabled. */\n        this.disabled = false;\n        /** Whether sorting items within the list is disabled. */\n        this.sortingDisabled = false;\n        /**\n         * Whether auto-scrolling the view when the user\n         * moves their pointer close to the edges is disabled.\n         */\n        this.autoScrollDisabled = false;\n        /**\n         * Function that is used to determine whether an item\n         * is allowed to be moved into a drop container.\n         */\n        this.enterPredicate = () => true;\n        /** Emits right before dragging has started. */\n        this.beforeStarted = new Subject();\n        /**\n         * Emits when the user has moved a new drag item into this container.\n         */\n        this.entered = new Subject();\n        /**\n         * Emits when the user removes an item from the container\n         * by dragging it into another container.\n         */\n        this.exited = new Subject();\n        /** Emits when the user drops an item inside the container. */\n        this.dropped = new Subject();\n        /** Emits as the user is swapping items while actively dragging. */\n        this.sorted = new Subject();\n        /** Whether an item in the list is being dragged. */\n        this._isDragging = false;\n        /** Cache of the dimensions of all the items inside the container. */\n        this._itemPositions = [];\n        /**\n         * Keeps track of the item that was last swapped with the dragged item, as well as what direction\n         * the pointer was moving in when the swap occured and whether the user's pointer continued to\n         * overlap with the swapped item after the swapping occurred.\n         */\n        this._previousSwap = { drag: null, delta: 0, overlaps: false };\n        /** Drop lists that are connected to the current one. */\n        this._siblings = [];\n        /** Direction in which the list is oriented. */\n        this._orientation = 'vertical';\n        /** Connected siblings that currently have a dragged item. */\n        this._activeSiblings = new Set();\n        /** Layout direction of the drop list. */\n        this._direction = 'ltr';\n        /** Subscription to the window being scrolled. */\n        this._viewportScrollSubscription = Subscription.EMPTY;\n        /** Vertical direction in which the list is currently scrolling. */\n        this._verticalScrollDirection = 0 /* NONE */;\n        /** Horizontal direction in which the list is currently scrolling. */\n        this._horizontalScrollDirection = 0 /* NONE */;\n        /** Used to signal to the current auto-scroll sequence when to stop. */\n        this._stopScrollTimers = new Subject();\n        /** Shadow root of the current element. Necessary for `elementFromPoint` to resolve correctly. */\n        this._cachedShadowRoot = null;\n        /** Starts the interval that'll auto-scroll the element. */\n        this._startScrollInterval = () => {\n            this._stopScrolling();\n            interval(0, animationFrameScheduler)\n                .pipe(takeUntil(this._stopScrollTimers))\n                .subscribe(() => {\n                const node = this._scrollNode;\n                if (this._verticalScrollDirection === 1 /* UP */) {\n                    incrementVerticalScroll(node, -AUTO_SCROLL_STEP);\n                }\n                else if (this._verticalScrollDirection === 2 /* DOWN */) {\n                    incrementVerticalScroll(node, AUTO_SCROLL_STEP);\n                }\n                if (this._horizontalScrollDirection === 1 /* LEFT */) {\n                    incrementHorizontalScroll(node, -AUTO_SCROLL_STEP);\n                }\n                else if (this._horizontalScrollDirection === 2 /* RIGHT */) {\n                    incrementHorizontalScroll(node, AUTO_SCROLL_STEP);\n                }\n            });\n        };\n        this.element = coerceElement(element);\n        this._document = _document;\n        this.withScrollableParents([this.element]);\n        _dragDropRegistry.registerDropContainer(this);\n        this._parentPositions = new ParentPositionTracker(_document, _viewportRuler);\n    }\n    /** Removes the drop list functionality from the DOM element. */\n    dispose() {\n        this._stopScrolling();\n        this._stopScrollTimers.complete();\n        this._viewportScrollSubscription.unsubscribe();\n        this.beforeStarted.complete();\n        this.entered.complete();\n        this.exited.complete();\n        this.dropped.complete();\n        this.sorted.complete();\n        this._activeSiblings.clear();\n        this._scrollNode = null;\n        this._parentPositions.clear();\n        this._dragDropRegistry.removeDropContainer(this);\n    }\n    /** Whether an item from this list is currently being dragged. */\n    isDragging() {\n        return this._isDragging;\n    }\n    /** Starts dragging an item. */\n    start() {\n        const styles = coerceElement(this.element).style;\n        this.beforeStarted.next();\n        this._isDragging = true;\n        // We need to disable scroll snapping while the user is dragging, because it breaks automatic\n        // scrolling. The browser seems to round the value based on the snapping points which means\n        // that we can't increment/decrement the scroll position.\n        this._initialScrollSnap = styles.msScrollSnapType || styles.scrollSnapType || '';\n        styles.scrollSnapType = styles.msScrollSnapType = 'none';\n        this._cacheItems();\n        this._siblings.forEach(sibling => sibling._startReceiving(this));\n        this._viewportScrollSubscription.unsubscribe();\n        this._listenToScrollEvents();\n    }\n    /**\n     * Emits an event to indicate that the user moved an item into the container.\n     * @param item Item that was moved into the container.\n     * @param pointerX Position of the item along the X axis.\n     * @param pointerY Position of the item along the Y axis.\n     * @param index Index at which the item entered. If omitted, the container will try to figure it\n     *   out automatically.\n     */\n    enter(item, pointerX, pointerY, index) {\n        this.start();\n        // If sorting is disabled, we want the item to return to its starting\n        // position if the user is returning it to its initial container.\n        let newIndex;\n        if (index == null) {\n            newIndex = this.sortingDisabled ? this._draggables.indexOf(item) : -1;\n            if (newIndex === -1) {\n                // We use the coordinates of where the item entered the drop\n                // zone to figure out at which index it should be inserted.\n                newIndex = this._getItemIndexFromPointerPosition(item, pointerX, pointerY);\n            }\n        }\n        else {\n            newIndex = index;\n        }\n        const activeDraggables = this._activeDraggables;\n        const currentIndex = activeDraggables.indexOf(item);\n        const placeholder = item.getPlaceholderElement();\n        let newPositionReference = activeDraggables[newIndex];\n        // If the item at the new position is the same as the item that is being dragged,\n        // it means that we're trying to restore the item to its initial position. In this\n        // case we should use the next item from the list as the reference.\n        if (newPositionReference === item) {\n            newPositionReference = activeDraggables[newIndex + 1];\n        }\n        // Since the item may be in the `activeDraggables` already (e.g. if the user dragged it\n        // into another container and back again), we have to ensure that it isn't duplicated.\n        if (currentIndex > -1) {\n            activeDraggables.splice(currentIndex, 1);\n        }\n        // Don't use items that are being dragged as a reference, because\n        // their element has been moved down to the bottom of the body.\n        if (newPositionReference && !this._dragDropRegistry.isDragging(newPositionReference)) {\n            const element = newPositionReference.getRootElement();\n            element.parentElement.insertBefore(placeholder, element);\n            activeDraggables.splice(newIndex, 0, item);\n        }\n        else if (this._shouldEnterAsFirstChild(pointerX, pointerY)) {\n            const reference = activeDraggables[0].getRootElement();\n            reference.parentNode.insertBefore(placeholder, reference);\n            activeDraggables.unshift(item);\n        }\n        else {\n            coerceElement(this.element).appendChild(placeholder);\n            activeDraggables.push(item);\n        }\n        // The transform needs to be cleared so it doesn't throw off the measurements.\n        placeholder.style.transform = '';\n        // Note that the positions were already cached when we called `start` above,\n        // but we need to refresh them since the amount of items has changed and also parent rects.\n        this._cacheItemPositions();\n        this._cacheParentPositions();\n        this.entered.next({ item, container: this, currentIndex: this.getItemIndex(item) });\n    }\n    /**\n     * Removes an item from the container after it was dragged into another container by the user.\n     * @param item Item that was dragged out.\n     */\n    exit(item) {\n        this._reset();\n        this.exited.next({ item, container: this });\n    }\n    /**\n     * Drops an item into this container.\n     * @param item Item being dropped into the container.\n     * @param currentIndex Index at which the item should be inserted.\n     * @param previousContainer Container from which the item got dragged in.\n     * @param isPointerOverContainer Whether the user's pointer was over the\n     *    container when the item was dropped.\n     * @param distance Distance the user has dragged since the start of the dragging sequence.\n     * @param previousIndex Index of the item when dragging started.\n     *\n     * @breaking-change 11.0.0 `previousIndex` parameter to become required.\n     */\n    drop(item, currentIndex, previousContainer, isPointerOverContainer, distance, previousIndex) {\n        this._reset();\n        // @breaking-change 11.0.0 Remove this fallback logic once `previousIndex` is a required param.\n        if (previousIndex == null) {\n            previousIndex = previousContainer.getItemIndex(item);\n        }\n        this.dropped.next({ item,\n            currentIndex,\n            previousIndex,\n            container: this,\n            previousContainer,\n            isPointerOverContainer,\n            distance\n        });\n    }\n    /**\n     * Sets the draggable items that are a part of this list.\n     * @param items Items that are a part of this list.\n     */\n    withItems(items) {\n        const previousItems = this._draggables;\n        this._draggables = items;\n        items.forEach(item => item._withDropContainer(this));\n        if (this.isDragging()) {\n            const draggedItems = previousItems.filter(item => item.isDragging());\n            // If all of the items being dragged were removed\n            // from the list, abort the current drag sequence.\n            if (draggedItems.every(item => items.indexOf(item) === -1)) {\n                this._reset();\n            }\n            else {\n                this._cacheItems();\n            }\n        }\n        return this;\n    }\n    /** Sets the layout direction of the drop list. */\n    withDirection(direction) {\n        this._direction = direction;\n        return this;\n    }\n    /**\n     * Sets the containers that are connected to this one. When two or more containers are\n     * connected, the user will be allowed to transfer items between them.\n     * @param connectedTo Other containers that the current containers should be connected to.\n     */\n    connectedTo(connectedTo) {\n        this._siblings = connectedTo.slice();\n        return this;\n    }\n    /**\n     * Sets the orientation of the container.\n     * @param orientation New orientation for the container.\n     */\n    withOrientation(orientation) {\n        this._orientation = orientation;\n        return this;\n    }\n    /**\n     * Sets which parent elements are can be scrolled while the user is dragging.\n     * @param elements Elements that can be scrolled.\n     */\n    withScrollableParents(elements) {\n        const element = coerceElement(this.element);\n        // We always allow the current element to be scrollable\n        // so we need to ensure that it's in the array.\n        this._scrollableElements =\n            elements.indexOf(element) === -1 ? [element, ...elements] : elements.slice();\n        return this;\n    }\n    /** Gets the scrollable parents that are registered with this drop container. */\n    getScrollableParents() {\n        return this._scrollableElements;\n    }\n    /**\n     * Figures out the index of an item in the container.\n     * @param item Item whose index should be determined.\n     */\n    getItemIndex(item) {\n        if (!this._isDragging) {\n            return this._draggables.indexOf(item);\n        }\n        // Items are sorted always by top/left in the cache, however they flow differently in RTL.\n        // The rest of the logic still stands no matter what orientation we're in, however\n        // we need to invert the array when determining the index.\n        const items = this._orientation === 'horizontal' && this._direction === 'rtl' ?\n            this._itemPositions.slice().reverse() : this._itemPositions;\n        return findIndex(items, currentItem => currentItem.drag === item);\n    }\n    /**\n     * Whether the list is able to receive the item that\n     * is currently being dragged inside a connected drop list.\n     */\n    isReceiving() {\n        return this._activeSiblings.size > 0;\n    }\n    /**\n     * Sorts an item inside the container based on its position.\n     * @param item Item to be sorted.\n     * @param pointerX Position of the item along the X axis.\n     * @param pointerY Position of the item along the Y axis.\n     * @param pointerDelta Direction in which the pointer is moving along each axis.\n     */\n    _sortItem(item, pointerX, pointerY, pointerDelta) {\n        // Don't sort the item if sorting is disabled or it's out of range.\n        if (this.sortingDisabled ||\n            !isPointerNearClientRect(this._clientRect, DROP_PROXIMITY_THRESHOLD, pointerX, pointerY)) {\n            return;\n        }\n        const siblings = this._itemPositions;\n        const newIndex = this._getItemIndexFromPointerPosition(item, pointerX, pointerY, pointerDelta);\n        if (newIndex === -1 && siblings.length > 0) {\n            return;\n        }\n        const isHorizontal = this._orientation === 'horizontal';\n        const currentIndex = findIndex(siblings, currentItem => currentItem.drag === item);\n        const siblingAtNewPosition = siblings[newIndex];\n        const currentPosition = siblings[currentIndex].clientRect;\n        const newPosition = siblingAtNewPosition.clientRect;\n        const delta = currentIndex > newIndex ? 1 : -1;\n        // How many pixels the item's placeholder should be offset.\n        const itemOffset = this._getItemOffsetPx(currentPosition, newPosition, delta);\n        // How many pixels all the other items should be offset.\n        const siblingOffset = this._getSiblingOffsetPx(currentIndex, siblings, delta);\n        // Save the previous order of the items before moving the item to its new index.\n        // We use this to check whether an item has been moved as a result of the sorting.\n        const oldOrder = siblings.slice();\n        // Shuffle the array in place.\n        moveItemInArray(siblings, currentIndex, newIndex);\n        this.sorted.next({\n            previousIndex: currentIndex,\n            currentIndex: newIndex,\n            container: this,\n            item\n        });\n        siblings.forEach((sibling, index) => {\n            // Don't do anything if the position hasn't changed.\n            if (oldOrder[index] === sibling) {\n                return;\n            }\n            const isDraggedItem = sibling.drag === item;\n            const offset = isDraggedItem ? itemOffset : siblingOffset;\n            const elementToOffset = isDraggedItem ? item.getPlaceholderElement() :\n                sibling.drag.getRootElement();\n            // Update the offset to reflect the new position.\n            sibling.offset += offset;\n            // Since we're moving the items with a `transform`, we need to adjust their cached\n            // client rects to reflect their new position, as well as swap their positions in the cache.\n            // Note that we shouldn't use `getBoundingClientRect` here to update the cache, because the\n            // elements may be mid-animation which will give us a wrong result.\n            if (isHorizontal) {\n                // Round the transforms since some browsers will\n                // blur the elements, for sub-pixel transforms.\n                elementToOffset.style.transform = `translate3d(${Math.round(sibling.offset)}px, 0, 0)`;\n                adjustClientRect(sibling.clientRect, 0, offset);\n            }\n            else {\n                elementToOffset.style.transform = `translate3d(0, ${Math.round(sibling.offset)}px, 0)`;\n                adjustClientRect(sibling.clientRect, offset, 0);\n            }\n        });\n        // Note that it's important that we do this after the client rects have been adjusted.\n        this._previousSwap.overlaps = isInsideClientRect(newPosition, pointerX, pointerY);\n        this._previousSwap.drag = siblingAtNewPosition.drag;\n        this._previousSwap.delta = isHorizontal ? pointerDelta.x : pointerDelta.y;\n    }\n    /**\n     * Checks whether the user's pointer is close to the edges of either the\n     * viewport or the drop list and starts the auto-scroll sequence.\n     * @param pointerX User's pointer position along the x axis.\n     * @param pointerY User's pointer position along the y axis.\n     */\n    _startScrollingIfNecessary(pointerX, pointerY) {\n        if (this.autoScrollDisabled) {\n            return;\n        }\n        let scrollNode;\n        let verticalScrollDirection = 0 /* NONE */;\n        let horizontalScrollDirection = 0 /* NONE */;\n        // Check whether we should start scrolling any of the parent containers.\n        this._parentPositions.positions.forEach((position, element) => {\n            // We have special handling for the `document` below. Also this would be\n            // nicer with a  for...of loop, but it requires changing a compiler flag.\n            if (element === this._document || !position.clientRect || scrollNode) {\n                return;\n            }\n            if (isPointerNearClientRect(position.clientRect, DROP_PROXIMITY_THRESHOLD, pointerX, pointerY)) {\n                [verticalScrollDirection, horizontalScrollDirection] = getElementScrollDirections(element, position.clientRect, pointerX, pointerY);\n                if (verticalScrollDirection || horizontalScrollDirection) {\n                    scrollNode = element;\n                }\n            }\n        });\n        // Otherwise check if we can start scrolling the viewport.\n        if (!verticalScrollDirection && !horizontalScrollDirection) {\n            const { width, height } = this._viewportRuler.getViewportSize();\n            const clientRect = { width, height, top: 0, right: width, bottom: height, left: 0 };\n            verticalScrollDirection = getVerticalScrollDirection(clientRect, pointerY);\n            horizontalScrollDirection = getHorizontalScrollDirection(clientRect, pointerX);\n            scrollNode = window;\n        }\n        if (scrollNode && (verticalScrollDirection !== this._verticalScrollDirection ||\n            horizontalScrollDirection !== this._horizontalScrollDirection ||\n            scrollNode !== this._scrollNode)) {\n            this._verticalScrollDirection = verticalScrollDirection;\n            this._horizontalScrollDirection = horizontalScrollDirection;\n            this._scrollNode = scrollNode;\n            if ((verticalScrollDirection || horizontalScrollDirection) && scrollNode) {\n                this._ngZone.runOutsideAngular(this._startScrollInterval);\n            }\n            else {\n                this._stopScrolling();\n            }\n        }\n    }\n    /** Stops any currently-running auto-scroll sequences. */\n    _stopScrolling() {\n        this._stopScrollTimers.next();\n    }\n    /** Caches the positions of the configured scrollable parents. */\n    _cacheParentPositions() {\n        const element = coerceElement(this.element);\n        this._parentPositions.cache(this._scrollableElements);\n        // The list element is always in the `scrollableElements`\n        // so we can take advantage of the cached `ClientRect`.\n        this._clientRect = this._parentPositions.positions.get(element).clientRect;\n    }\n    /** Refreshes the position cache of the items and sibling containers. */\n    _cacheItemPositions() {\n        const isHorizontal = this._orientation === 'horizontal';\n        this._itemPositions = this._activeDraggables.map(drag => {\n            const elementToMeasure = drag.getVisibleElement();\n            return { drag, offset: 0, clientRect: getMutableClientRect(elementToMeasure) };\n        }).sort((a, b) => {\n            return isHorizontal ? a.clientRect.left - b.clientRect.left :\n                a.clientRect.top - b.clientRect.top;\n        });\n    }\n    /** Resets the container to its initial state. */\n    _reset() {\n        this._isDragging = false;\n        const styles = coerceElement(this.element).style;\n        styles.scrollSnapType = styles.msScrollSnapType = this._initialScrollSnap;\n        // TODO(crisbeto): may have to wait for the animations to finish.\n        this._activeDraggables.forEach(item => {\n            const rootElement = item.getRootElement();\n            if (rootElement) {\n                rootElement.style.transform = '';\n            }\n        });\n        this._siblings.forEach(sibling => sibling._stopReceiving(this));\n        this._activeDraggables = [];\n        this._itemPositions = [];\n        this._previousSwap.drag = null;\n        this._previousSwap.delta = 0;\n        this._previousSwap.overlaps = false;\n        this._stopScrolling();\n        this._viewportScrollSubscription.unsubscribe();\n        this._parentPositions.clear();\n    }\n    /**\n     * Gets the offset in pixels by which the items that aren't being dragged should be moved.\n     * @param currentIndex Index of the item currently being dragged.\n     * @param siblings All of the items in the list.\n     * @param delta Direction in which the user is moving.\n     */\n    _getSiblingOffsetPx(currentIndex, siblings, delta) {\n        const isHorizontal = this._orientation === 'horizontal';\n        const currentPosition = siblings[currentIndex].clientRect;\n        const immediateSibling = siblings[currentIndex + delta * -1];\n        let siblingOffset = currentPosition[isHorizontal ? 'width' : 'height'] * delta;\n        if (immediateSibling) {\n            const start = isHorizontal ? 'left' : 'top';\n            const end = isHorizontal ? 'right' : 'bottom';\n            // Get the spacing between the start of the current item and the end of the one immediately\n            // after it in the direction in which the user is dragging, or vice versa. We add it to the\n            // offset in order to push the element to where it will be when it's inline and is influenced\n            // by the `margin` of its siblings.\n            if (delta === -1) {\n                siblingOffset -= immediateSibling.clientRect[start] - currentPosition[end];\n            }\n            else {\n                siblingOffset += currentPosition[start] - immediateSibling.clientRect[end];\n            }\n        }\n        return siblingOffset;\n    }\n    /**\n     * Gets the offset in pixels by which the item that is being dragged should be moved.\n     * @param currentPosition Current position of the item.\n     * @param newPosition Position of the item where the current item should be moved.\n     * @param delta Direction in which the user is moving.\n     */\n    _getItemOffsetPx(currentPosition, newPosition, delta) {\n        const isHorizontal = this._orientation === 'horizontal';\n        let itemOffset = isHorizontal ? newPosition.left - currentPosition.left :\n            newPosition.top - currentPosition.top;\n        // Account for differences in the item width/height.\n        if (delta === -1) {\n            itemOffset += isHorizontal ? newPosition.width - currentPosition.width :\n                newPosition.height - currentPosition.height;\n        }\n        return itemOffset;\n    }\n    /**\n     * Checks if pointer is entering in the first position\n     * @param pointerX Position of the user's pointer along the X axis.\n     * @param pointerY Position of the user's pointer along the Y axis.\n     */\n    _shouldEnterAsFirstChild(pointerX, pointerY) {\n        if (!this._activeDraggables.length) {\n            return false;\n        }\n        const itemPositions = this._itemPositions;\n        const isHorizontal = this._orientation === 'horizontal';\n        // `itemPositions` are sorted by position while `activeDraggables` are sorted by child index\n        // check if container is using some sort of \"reverse\" ordering (eg: flex-direction: row-reverse)\n        const reversed = itemPositions[0].drag !== this._activeDraggables[0];\n        if (reversed) {\n            const lastItemRect = itemPositions[itemPositions.length - 1].clientRect;\n            return isHorizontal ? pointerX >= lastItemRect.right : pointerY >= lastItemRect.bottom;\n        }\n        else {\n            const firstItemRect = itemPositions[0].clientRect;\n            return isHorizontal ? pointerX <= firstItemRect.left : pointerY <= firstItemRect.top;\n        }\n    }\n    /**\n     * Gets the index of an item in the drop container, based on the position of the user's pointer.\n     * @param item Item that is being sorted.\n     * @param pointerX Position of the user's pointer along the X axis.\n     * @param pointerY Position of the user's pointer along the Y axis.\n     * @param delta Direction in which the user is moving their pointer.\n     */\n    _getItemIndexFromPointerPosition(item, pointerX, pointerY, delta) {\n        const isHorizontal = this._orientation === 'horizontal';\n        return findIndex(this._itemPositions, ({ drag, clientRect }, _, array) => {\n            if (drag === item) {\n                // If there's only one item left in the container, it must be\n                // the dragged item itself so we use it as a reference.\n                return array.length < 2;\n            }\n            if (delta) {\n                const direction = isHorizontal ? delta.x : delta.y;\n                // If the user is still hovering over the same item as last time, their cursor hasn't left\n                // the item after we made the swap, and they didn't change the direction in which they're\n                // dragging, we don't consider it a direction swap.\n                if (drag === this._previousSwap.drag && this._previousSwap.overlaps &&\n                    direction === this._previousSwap.delta) {\n                    return false;\n                }\n            }\n            return isHorizontal ?\n                // Round these down since most browsers report client rects with\n                // sub-pixel precision, whereas the pointer coordinates are rounded to pixels.\n                pointerX >= Math.floor(clientRect.left) && pointerX < Math.floor(clientRect.right) :\n                pointerY >= Math.floor(clientRect.top) && pointerY < Math.floor(clientRect.bottom);\n        });\n    }\n    /** Caches the current items in the list and their positions. */\n    _cacheItems() {\n        this._activeDraggables = this._draggables.slice();\n        this._cacheItemPositions();\n        this._cacheParentPositions();\n    }\n    /**\n     * Checks whether the user's pointer is positioned over the container.\n     * @param x Pointer position along the X axis.\n     * @param y Pointer position along the Y axis.\n     */\n    _isOverContainer(x, y) {\n        return isInsideClientRect(this._clientRect, x, y);\n    }\n    /**\n     * Figures out whether an item should be moved into a sibling\n     * drop container, based on its current position.\n     * @param item Drag item that is being moved.\n     * @param x Position of the item along the X axis.\n     * @param y Position of the item along the Y axis.\n     */\n    _getSiblingContainerFromPosition(item, x, y) {\n        return this._siblings.find(sibling => sibling._canReceive(item, x, y));\n    }\n    /**\n     * Checks whether the drop list can receive the passed-in item.\n     * @param item Item that is being dragged into the list.\n     * @param x Position of the item along the X axis.\n     * @param y Position of the item along the Y axis.\n     */\n    _canReceive(item, x, y) {\n        if (!isInsideClientRect(this._clientRect, x, y) || !this.enterPredicate(item, this)) {\n            return false;\n        }\n        const elementFromPoint = this._getShadowRoot().elementFromPoint(x, y);\n        // If there's no element at the pointer position, then\n        // the client rect is probably scrolled out of the view.\n        if (!elementFromPoint) {\n            return false;\n        }\n        const nativeElement = coerceElement(this.element);\n        // The `ClientRect`, that we're using to find the container over which the user is\n        // hovering, doesn't give us any information on whether the element has been scrolled\n        // out of the view or whether it's overlapping with other containers. This means that\n        // we could end up transferring the item into a container that's invisible or is positioned\n        // below another one. We use the result from `elementFromPoint` to get the top-most element\n        // at the pointer position and to find whether it's one of the intersecting drop containers.\n        return elementFromPoint === nativeElement || nativeElement.contains(elementFromPoint);\n    }\n    /**\n     * Called by one of the connected drop lists when a dragging sequence has started.\n     * @param sibling Sibling in which dragging has started.\n     */\n    _startReceiving(sibling) {\n        const activeSiblings = this._activeSiblings;\n        if (!activeSiblings.has(sibling)) {\n            activeSiblings.add(sibling);\n            this._cacheParentPositions();\n            this._listenToScrollEvents();\n        }\n    }\n    /**\n     * Called by a connected drop list when dragging has stopped.\n     * @param sibling Sibling whose dragging has stopped.\n     */\n    _stopReceiving(sibling) {\n        this._activeSiblings.delete(sibling);\n        this._viewportScrollSubscription.unsubscribe();\n    }\n    /**\n     * Starts listening to scroll events on the viewport.\n     * Used for updating the internal state of the list.\n     */\n    _listenToScrollEvents() {\n        this._viewportScrollSubscription = this._dragDropRegistry.scroll.subscribe(event => {\n            if (this.isDragging()) {\n                const scrollDifference = this._parentPositions.handleScroll(event);\n                if (scrollDifference) {\n                    // Since we know the amount that the user has scrolled we can shift all of the\n                    // client rectangles ourselves. This is cheaper than re-measuring everything and\n                    // we can avoid inconsistent behavior where we might be measuring the element before\n                    // its position has changed.\n                    this._itemPositions.forEach(({ clientRect }) => {\n                        adjustClientRect(clientRect, scrollDifference.top, scrollDifference.left);\n                    });\n                    // We need two loops for this, because we want all of the cached\n                    // positions to be up-to-date before we re-sort the item.\n                    this._itemPositions.forEach(({ drag }) => {\n                        if (this._dragDropRegistry.isDragging(drag)) {\n                            // We need to re-sort the item manually, because the pointer move\n                            // events won't be dispatched while the user is scrolling.\n                            drag._sortFromLastPointerPosition();\n                        }\n                    });\n                }\n            }\n            else if (this.isReceiving()) {\n                this._cacheParentPositions();\n            }\n        });\n    }\n    /**\n     * Lazily resolves and returns the shadow root of the element. We do this in a function, rather\n     * than saving it in property directly on init, because we want to resolve it as late as possible\n     * in order to ensure that the element has been moved into the shadow DOM. Doing it inside the\n     * constructor might be too early if the element is inside of something like `ngFor` or `ngIf`.\n     */\n    _getShadowRoot() {\n        if (!this._cachedShadowRoot) {\n            const shadowRoot = _getShadowRoot(coerceElement(this.element));\n            this._cachedShadowRoot = shadowRoot || this._document;\n        }\n        return this._cachedShadowRoot;\n    }\n}\n/**\n * Finds the index of an item that matches a predicate function. Used as an equivalent\n * of `Array.prototype.findIndex` which isn't part of the standard Google typings.\n * @param array Array in which to look for matches.\n * @param predicate Function used to determine whether an item is a match.\n */\nfunction findIndex(array, predicate) {\n    for (let i = 0; i < array.length; i++) {\n        if (predicate(array[i], i, array)) {\n            return i;\n        }\n    }\n    return -1;\n}\n/**\n * Increments the vertical scroll position of a node.\n * @param node Node whose scroll position should change.\n * @param amount Amount of pixels that the `node` should be scrolled.\n */\nfunction incrementVerticalScroll(node, amount) {\n    if (node === window) {\n        node.scrollBy(0, amount);\n    }\n    else {\n        // Ideally we could use `Element.scrollBy` here as well, but IE and Edge don't support it.\n        node.scrollTop += amount;\n    }\n}\n/**\n * Increments the horizontal scroll position of a node.\n * @param node Node whose scroll position should change.\n * @param amount Amount of pixels that the `node` should be scrolled.\n */\nfunction incrementHorizontalScroll(node, amount) {\n    if (node === window) {\n        node.scrollBy(amount, 0);\n    }\n    else {\n        // Ideally we could use `Element.scrollBy` here as well, but IE and Edge don't support it.\n        node.scrollLeft += amount;\n    }\n}\n/**\n * Gets whether the vertical auto-scroll direction of a node.\n * @param clientRect Dimensions of the node.\n * @param pointerY Position of the user's pointer along the y axis.\n */\nfunction getVerticalScrollDirection(clientRect, pointerY) {\n    const { top, bottom, height } = clientRect;\n    const yThreshold = height * SCROLL_PROXIMITY_THRESHOLD;\n    if (pointerY >= top - yThreshold && pointerY <= top + yThreshold) {\n        return 1 /* UP */;\n    }\n    else if (pointerY >= bottom - yThreshold && pointerY <= bottom + yThreshold) {\n        return 2 /* DOWN */;\n    }\n    return 0 /* NONE */;\n}\n/**\n * Gets whether the horizontal auto-scroll direction of a node.\n * @param clientRect Dimensions of the node.\n * @param pointerX Position of the user's pointer along the x axis.\n */\nfunction getHorizontalScrollDirection(clientRect, pointerX) {\n    const { left, right, width } = clientRect;\n    const xThreshold = width * SCROLL_PROXIMITY_THRESHOLD;\n    if (pointerX >= left - xThreshold && pointerX <= left + xThreshold) {\n        return 1 /* LEFT */;\n    }\n    else if (pointerX >= right - xThreshold && pointerX <= right + xThreshold) {\n        return 2 /* RIGHT */;\n    }\n    return 0 /* NONE */;\n}\n/**\n * Gets the directions in which an element node should be scrolled,\n * assuming that the user's pointer is already within it scrollable region.\n * @param element Element for which we should calculate the scroll direction.\n * @param clientRect Bounding client rectangle of the element.\n * @param pointerX Position of the user's pointer along the x axis.\n * @param pointerY Position of the user's pointer along the y axis.\n */\nfunction getElementScrollDirections(element, clientRect, pointerX, pointerY) {\n    const computedVertical = getVerticalScrollDirection(clientRect, pointerY);\n    const computedHorizontal = getHorizontalScrollDirection(clientRect, pointerX);\n    let verticalScrollDirection = 0 /* NONE */;\n    let horizontalScrollDirection = 0 /* NONE */;\n    // Note that we here we do some extra checks for whether the element is actually scrollable in\n    // a certain direction and we only assign the scroll direction if it is. We do this so that we\n    // can allow other elements to be scrolled, if the current element can't be scrolled anymore.\n    // This allows us to handle cases where the scroll regions of two scrollable elements overlap.\n    if (computedVertical) {\n        const scrollTop = element.scrollTop;\n        if (computedVertical === 1 /* UP */) {\n            if (scrollTop > 0) {\n                verticalScrollDirection = 1 /* UP */;\n            }\n        }\n        else if (element.scrollHeight - scrollTop > element.clientHeight) {\n            verticalScrollDirection = 2 /* DOWN */;\n        }\n    }\n    if (computedHorizontal) {\n        const scrollLeft = element.scrollLeft;\n        if (computedHorizontal === 1 /* LEFT */) {\n            if (scrollLeft > 0) {\n                horizontalScrollDirection = 1 /* LEFT */;\n            }\n        }\n        else if (element.scrollWidth - scrollLeft > element.clientWidth) {\n            horizontalScrollDirection = 2 /* RIGHT */;\n        }\n    }\n    return [verticalScrollDirection, horizontalScrollDirection];\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Event options that can be used to bind an active, capturing event. */\nconst activeCapturingEventOptions = normalizePassiveListenerOptions({\n    passive: false,\n    capture: true\n});\n/**\n * Service that keeps track of all the drag item and drop container\n * instances, and manages global event listeners on the `document`.\n * @docs-private\n */\n// Note: this class is generic, rather than referencing CdkDrag and CdkDropList directly, in order\n// to avoid circular imports. If we were to reference them here, importing the registry into the\n// classes that are registering themselves will introduce a circular import.\nclass DragDropRegistry {\n    constructor(_ngZone, _document) {\n        this._ngZone = _ngZone;\n        /** Registered drop container instances. */\n        this._dropInstances = new Set();\n        /** Registered drag item instances. */\n        this._dragInstances = new Set();\n        /** Drag item instances that are currently being dragged. */\n        this._activeDragInstances = new Set();\n        /** Keeps track of the event listeners that we've bound to the `document`. */\n        this._globalListeners = new Map();\n        /**\n         * Emits the `touchmove` or `mousemove` events that are dispatched\n         * while the user is dragging a drag item instance.\n         */\n        this.pointerMove = new Subject();\n        /**\n         * Emits the `touchend` or `mouseup` events that are dispatched\n         * while the user is dragging a drag item instance.\n         */\n        this.pointerUp = new Subject();\n        /** Emits when the viewport has been scrolled while the user is dragging an item. */\n        this.scroll = new Subject();\n        /**\n         * Event listener that will prevent the default browser action while the user is dragging.\n         * @param event Event whose default action should be prevented.\n         */\n        this._preventDefaultWhileDragging = (event) => {\n            if (this._activeDragInstances.size) {\n                event.preventDefault();\n            }\n        };\n        /** Event listener for `touchmove` that is bound even if no dragging is happening. */\n        this._persistentTouchmoveListener = (event) => {\n            if (this._activeDragInstances.size) {\n                event.preventDefault();\n                this.pointerMove.next(event);\n            }\n        };\n        this._document = _document;\n    }\n    /** Adds a drop container to the registry. */\n    registerDropContainer(drop) {\n        if (!this._dropInstances.has(drop)) {\n            this._dropInstances.add(drop);\n        }\n    }\n    /** Adds a drag item instance to the registry. */\n    registerDragItem(drag) {\n        this._dragInstances.add(drag);\n        // The `touchmove` event gets bound once, ahead of time, because WebKit\n        // won't preventDefault on a dynamically-added `touchmove` listener.\n        // See https://bugs.webkit.org/show_bug.cgi?id=184250.\n        if (this._dragInstances.size === 1) {\n            this._ngZone.runOutsideAngular(() => {\n                // The event handler has to be explicitly active,\n                // because newer browsers make it passive by default.\n                this._document.addEventListener('touchmove', this._persistentTouchmoveListener, activeCapturingEventOptions);\n            });\n        }\n    }\n    /** Removes a drop container from the registry. */\n    removeDropContainer(drop) {\n        this._dropInstances.delete(drop);\n    }\n    /** Removes a drag item instance from the registry. */\n    removeDragItem(drag) {\n        this._dragInstances.delete(drag);\n        this.stopDragging(drag);\n        if (this._dragInstances.size === 0) {\n            this._document.removeEventListener('touchmove', this._persistentTouchmoveListener, activeCapturingEventOptions);\n        }\n    }\n    /**\n     * Starts the dragging sequence for a drag instance.\n     * @param drag Drag instance which is being dragged.\n     * @param event Event that initiated the dragging.\n     */\n    startDragging(drag, event) {\n        // Do not process the same drag twice to avoid memory leaks and redundant listeners\n        if (this._activeDragInstances.has(drag)) {\n            return;\n        }\n        this._activeDragInstances.add(drag);\n        if (this._activeDragInstances.size === 1) {\n            const isTouchEvent = event.type.startsWith('touch');\n            // We explicitly bind __active__ listeners here, because newer browsers will default to\n            // passive ones for `mousemove` and `touchmove`. The events need to be active, because we\n            // use `preventDefault` to prevent the page from scrolling while the user is dragging.\n            this._globalListeners\n                .set(isTouchEvent ? 'touchend' : 'mouseup', {\n                handler: (e) => this.pointerUp.next(e),\n                options: true\n            })\n                .set('scroll', {\n                handler: (e) => this.scroll.next(e),\n                // Use capturing so that we pick up scroll changes in any scrollable nodes that aren't\n                // the document. See https://github.com/angular/components/issues/17144.\n                options: true\n            })\n                // Preventing the default action on `mousemove` isn't enough to disable text selection\n                // on Safari so we need to prevent the selection event as well. Alternatively this can\n                // be done by setting `user-select: none` on the `body`, however it has causes a style\n                // recalculation which can be expensive on pages with a lot of elements.\n                .set('selectstart', {\n                handler: this._preventDefaultWhileDragging,\n                options: activeCapturingEventOptions\n            });\n            // We don't have to bind a move event for touch drag sequences, because\n            // we already have a persistent global one bound from `registerDragItem`.\n            if (!isTouchEvent) {\n                this._globalListeners.set('mousemove', {\n                    handler: (e) => this.pointerMove.next(e),\n                    options: activeCapturingEventOptions\n                });\n            }\n            this._ngZone.runOutsideAngular(() => {\n                this._globalListeners.forEach((config, name) => {\n                    this._document.addEventListener(name, config.handler, config.options);\n                });\n            });\n        }\n    }\n    /** Stops dragging a drag item instance. */\n    stopDragging(drag) {\n        this._activeDragInstances.delete(drag);\n        if (this._activeDragInstances.size === 0) {\n            this._clearGlobalListeners();\n        }\n    }\n    /** Gets whether a drag item instance is currently being dragged. */\n    isDragging(drag) {\n        return this._activeDragInstances.has(drag);\n    }\n    ngOnDestroy() {\n        this._dragInstances.forEach(instance => this.removeDragItem(instance));\n        this._dropInstances.forEach(instance => this.removeDropContainer(instance));\n        this._clearGlobalListeners();\n        this.pointerMove.complete();\n        this.pointerUp.complete();\n    }\n    /** Clears out the global event listeners from the `document`. */\n    _clearGlobalListeners() {\n        this._globalListeners.forEach((config, name) => {\n            this._document.removeEventListener(name, config.handler, config.options);\n        });\n        this._globalListeners.clear();\n    }\n}\nDragDropRegistry.ɵprov = ɵɵdefineInjectable({ factory: function DragDropRegistry_Factory() { return new DragDropRegistry(ɵɵinject(NgZone), ɵɵinject(DOCUMENT)); }, token: DragDropRegistry, providedIn: \"root\" });\nDragDropRegistry.decorators = [\n    { type: Injectable, args: [{ providedIn: 'root' },] }\n];\nDragDropRegistry.ctorParameters = () => [\n    { type: NgZone },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Default configuration to be used when creating a `DragRef`. */\nconst DEFAULT_CONFIG = {\n    dragStartThreshold: 5,\n    pointerDirectionChangeThreshold: 5\n};\n/**\n * Service that allows for drag-and-drop functionality to be attached to DOM elements.\n */\nclass DragDrop {\n    constructor(_document, _ngZone, _viewportRuler, _dragDropRegistry) {\n        this._document = _document;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        this._dragDropRegistry = _dragDropRegistry;\n    }\n    /**\n     * Turns an element into a draggable item.\n     * @param element Element to which to attach the dragging functionality.\n     * @param config Object used to configure the dragging behavior.\n     */\n    createDrag(element, config = DEFAULT_CONFIG) {\n        return new DragRef(element, config, this._document, this._ngZone, this._viewportRuler, this._dragDropRegistry);\n    }\n    /**\n     * Turns an element into a drop list.\n     * @param element Element to which to attach the drop list functionality.\n     */\n    createDropList(element) {\n        return new DropListRef(element, this._dragDropRegistry, this._document, this._ngZone, this._viewportRuler);\n    }\n}\nDragDrop.ɵprov = ɵɵdefineInjectable({ factory: function DragDrop_Factory() { return new DragDrop(ɵɵinject(DOCUMENT), ɵɵinject(NgZone), ɵɵinject(ViewportRuler), ɵɵinject(DragDropRegistry)); }, token: DragDrop, providedIn: \"root\" });\nDragDrop.decorators = [\n    { type: Injectable, args: [{ providedIn: 'root' },] }\n];\nDragDrop.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: NgZone },\n    { type: ViewportRuler },\n    { type: DragDropRegistry }\n];\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token that can be used for a `CdkDrag` to provide itself as a parent to the\n * drag-specific child directive (`CdkDragHandle`, `CdkDragPreview` etc.). Used primarily\n * to avoid circular imports.\n * @docs-private\n */\nconst CDK_DRAG_PARENT = new InjectionToken('CDK_DRAG_PARENT');\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token that can be used to reference instances of `CdkDropListGroup`. It serves as\n * alternative token to the actual `CdkDropListGroup` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DROP_LIST_GROUP = new InjectionToken('CdkDropListGroup');\n/**\n * Declaratively connects sibling `cdkDropList` instances together. All of the `cdkDropList`\n * elements that are placed inside a `cdkDropListGroup` will be connected to each other\n * automatically. Can be used as an alternative to the `cdkDropListConnectedTo` input\n * from `cdkDropList`.\n */\nclass CdkDropListGroup {\n    constructor() {\n        /** Drop lists registered inside the group. */\n        this._items = new Set();\n        this._disabled = false;\n    }\n    /** Whether starting a dragging sequence from inside this group is disabled. */\n    get disabled() { return this._disabled; }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n    }\n    ngOnDestroy() {\n        this._items.clear();\n    }\n}\nCdkDropListGroup.decorators = [\n    { type: Directive, args: [{\n                selector: '[cdkDropListGroup]',\n                exportAs: 'cdkDropListGroup',\n                providers: [{ provide: CDK_DROP_LIST_GROUP, useExisting: CdkDropListGroup }],\n            },] }\n];\nCdkDropListGroup.propDecorators = {\n    disabled: [{ type: Input, args: ['cdkDropListGroupDisabled',] }]\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token that can be used to configure the\n * behavior of the drag&drop-related components.\n */\nconst CDK_DRAG_CONFIG = new InjectionToken('CDK_DRAG_CONFIG');\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Counter used to generate unique ids for drop zones. */\nlet _uniqueIdCounter = 0;\n/**\n * Injection token that can be used to reference instances of `CdkDropList`. It serves as\n * alternative token to the actual `CdkDropList` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DROP_LIST = new InjectionToken('CdkDropList');\nconst ɵ0 = undefined;\n/** Container that wraps a set of draggable items. */\nclass CdkDropList {\n    constructor(\n    /** Element that the drop list is attached to. */\n    element, dragDrop, _changeDetectorRef, _dir, _group, \n    /**\n     * @deprecated _scrollDispatcher parameter to become required.\n     * @breaking-change 11.0.0\n     */\n    _scrollDispatcher, config) {\n        this.element = element;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._dir = _dir;\n        this._group = _group;\n        this._scrollDispatcher = _scrollDispatcher;\n        /** Emits when the list has been destroyed. */\n        this._destroyed = new Subject();\n        /**\n         * Other draggable containers that this container is connected to and into which the\n         * container's items can be transferred. Can either be references to other drop containers,\n         * or their unique IDs.\n         */\n        this.connectedTo = [];\n        /**\n         * Unique ID for the drop zone. Can be used as a reference\n         * in the `connectedTo` of another `CdkDropList`.\n         */\n        this.id = `cdk-drop-list-${_uniqueIdCounter++}`;\n        /**\n         * Function that is used to determine whether an item\n         * is allowed to be moved into a drop container.\n         */\n        this.enterPredicate = () => true;\n        /** Emits when the user drops an item inside the container. */\n        this.dropped = new EventEmitter();\n        /**\n         * Emits when the user has moved a new drag item into this container.\n         */\n        this.entered = new EventEmitter();\n        /**\n         * Emits when the user removes an item from the container\n         * by dragging it into another container.\n         */\n        this.exited = new EventEmitter();\n        /** Emits as the user is swapping items while actively dragging. */\n        this.sorted = new EventEmitter();\n        /**\n         * Keeps track of the items that are registered with this container. Historically we used to\n         * do this with a `ContentChildren` query, however queries don't handle transplanted views very\n         * well which means that we can't handle cases like dragging the headers of a `mat-table`\n         * correctly. What we do instead is to have the items register themselves with the container\n         * and then we sort them based on their position in the DOM.\n         */\n        this._unsortedItems = new Set();\n        this._dropListRef = dragDrop.createDropList(element);\n        this._dropListRef.data = this;\n        if (config) {\n            this._assignDefaults(config);\n        }\n        this._dropListRef.enterPredicate = (drag, drop) => {\n            return this.enterPredicate(drag.data, drop.data);\n        };\n        this._setupInputSyncSubscription(this._dropListRef);\n        this._handleEvents(this._dropListRef);\n        CdkDropList._dropLists.push(this);\n        if (_group) {\n            _group._items.add(this);\n        }\n    }\n    /** Whether starting a dragging sequence from this container is disabled. */\n    get disabled() {\n        return this._disabled || (!!this._group && this._group.disabled);\n    }\n    set disabled(value) {\n        // Usually we sync the directive and ref state right before dragging starts, in order to have\n        // a single point of failure and to avoid having to use setters for everything. `disabled` is\n        // a special case, because it can prevent the `beforeStarted` event from firing, which can lock\n        // the user in a disabled state, so we also need to sync it as it's being set.\n        this._dropListRef.disabled = this._disabled = coerceBooleanProperty(value);\n    }\n    /** Registers an items with the drop list. */\n    addItem(item) {\n        this._unsortedItems.add(item);\n        if (this._dropListRef.isDragging()) {\n            this._syncItemsWithRef();\n        }\n    }\n    /** Removes an item from the drop list. */\n    removeItem(item) {\n        this._unsortedItems.delete(item);\n        if (this._dropListRef.isDragging()) {\n            this._syncItemsWithRef();\n        }\n    }\n    /** Gets the registered items in the list, sorted by their position in the DOM. */\n    getSortedItems() {\n        return Array.from(this._unsortedItems).sort((a, b) => {\n            const documentPosition = a._dragRef.getVisibleElement().compareDocumentPosition(b._dragRef.getVisibleElement());\n            // `compareDocumentPosition` returns a bitmask so we have to use a bitwise operator.\n            // https://developer.mozilla.org/en-US/docs/Web/API/Node/compareDocumentPosition\n            // tslint:disable-next-line:no-bitwise\n            return documentPosition & Node.DOCUMENT_POSITION_FOLLOWING ? -1 : 1;\n        });\n    }\n    ngOnDestroy() {\n        const index = CdkDropList._dropLists.indexOf(this);\n        if (index > -1) {\n            CdkDropList._dropLists.splice(index, 1);\n        }\n        if (this._group) {\n            this._group._items.delete(this);\n        }\n        this._unsortedItems.clear();\n        this._dropListRef.dispose();\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /** Syncs the inputs of the CdkDropList with the options of the underlying DropListRef. */\n    _setupInputSyncSubscription(ref) {\n        if (this._dir) {\n            this._dir.change\n                .pipe(startWith(this._dir.value), takeUntil(this._destroyed))\n                .subscribe(value => ref.withDirection(value));\n        }\n        ref.beforeStarted.subscribe(() => {\n            const siblings = coerceArray(this.connectedTo).map(drop => {\n                if (typeof drop === 'string') {\n                    const correspondingDropList = CdkDropList._dropLists.find(list => list.id === drop);\n                    if (!correspondingDropList && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                        console.warn(`CdkDropList could not find connected drop list with id \"${drop}\"`);\n                    }\n                    return correspondingDropList;\n                }\n                return drop;\n            });\n            if (this._group) {\n                this._group._items.forEach(drop => {\n                    if (siblings.indexOf(drop) === -1) {\n                        siblings.push(drop);\n                    }\n                });\n            }\n            // Note that we resolve the scrollable parents here so that we delay the resolution\n            // as long as possible, ensuring that the element is in its final place in the DOM.\n            // @breaking-change 11.0.0 Remove null check for _scrollDispatcher once it's required.\n            if (!this._scrollableParentsResolved && this._scrollDispatcher) {\n                const scrollableParents = this._scrollDispatcher\n                    .getAncestorScrollContainers(this.element)\n                    .map(scrollable => scrollable.getElementRef().nativeElement);\n                this._dropListRef.withScrollableParents(scrollableParents);\n                // Only do this once since it involves traversing the DOM and the parents\n                // shouldn't be able to change without the drop list being destroyed.\n                this._scrollableParentsResolved = true;\n            }\n            ref.disabled = this.disabled;\n            ref.lockAxis = this.lockAxis;\n            ref.sortingDisabled = coerceBooleanProperty(this.sortingDisabled);\n            ref.autoScrollDisabled = coerceBooleanProperty(this.autoScrollDisabled);\n            ref\n                .connectedTo(siblings.filter(drop => drop && drop !== this).map(list => list._dropListRef))\n                .withOrientation(this.orientation);\n        });\n    }\n    /** Handles events from the underlying DropListRef. */\n    _handleEvents(ref) {\n        ref.beforeStarted.subscribe(() => {\n            this._syncItemsWithRef();\n            this._changeDetectorRef.markForCheck();\n        });\n        ref.entered.subscribe(event => {\n            this.entered.emit({\n                container: this,\n                item: event.item.data,\n                currentIndex: event.currentIndex\n            });\n        });\n        ref.exited.subscribe(event => {\n            this.exited.emit({\n                container: this,\n                item: event.item.data\n            });\n            this._changeDetectorRef.markForCheck();\n        });\n        ref.sorted.subscribe(event => {\n            this.sorted.emit({\n                previousIndex: event.previousIndex,\n                currentIndex: event.currentIndex,\n                container: this,\n                item: event.item.data\n            });\n        });\n        ref.dropped.subscribe(event => {\n            this.dropped.emit({\n                previousIndex: event.previousIndex,\n                currentIndex: event.currentIndex,\n                previousContainer: event.previousContainer.data,\n                container: event.container.data,\n                item: event.item.data,\n                isPointerOverContainer: event.isPointerOverContainer,\n                distance: event.distance\n            });\n            // Mark for check since all of these events run outside of change\n            // detection and we're not guaranteed for something else to have triggered it.\n            this._changeDetectorRef.markForCheck();\n        });\n    }\n    /** Assigns the default input values based on a provided config object. */\n    _assignDefaults(config) {\n        const { lockAxis, draggingDisabled, sortingDisabled, listAutoScrollDisabled, listOrientation } = config;\n        this.disabled = draggingDisabled == null ? false : draggingDisabled;\n        this.sortingDisabled = sortingDisabled == null ? false : sortingDisabled;\n        this.autoScrollDisabled = listAutoScrollDisabled == null ? false : listAutoScrollDisabled;\n        this.orientation = listOrientation || 'vertical';\n        if (lockAxis) {\n            this.lockAxis = lockAxis;\n        }\n    }\n    /** Syncs up the registered drag items with underlying drop list ref. */\n    _syncItemsWithRef() {\n        this._dropListRef.withItems(this.getSortedItems().map(item => item._dragRef));\n    }\n}\n/** Keeps track of the drop lists that are currently on the page. */\nCdkDropList._dropLists = [];\nCdkDropList.decorators = [\n    { type: Directive, args: [{\n                selector: '[cdkDropList], cdk-drop-list',\n                exportAs: 'cdkDropList',\n                providers: [\n                    // Prevent child drop lists from picking up the same group as their parent.\n                    { provide: CDK_DROP_LIST_GROUP, useValue: ɵ0 },\n                    { provide: CDK_DROP_LIST, useExisting: CdkDropList },\n                ],\n                host: {\n                    'class': 'cdk-drop-list',\n                    '[id]': 'id',\n                    '[class.cdk-drop-list-disabled]': 'disabled',\n                    '[class.cdk-drop-list-dragging]': '_dropListRef.isDragging()',\n                    '[class.cdk-drop-list-receiving]': '_dropListRef.isReceiving()',\n                }\n            },] }\n];\nCdkDropList.ctorParameters = () => [\n    { type: ElementRef },\n    { type: DragDrop },\n    { type: ChangeDetectorRef },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: CdkDropListGroup, decorators: [{ type: Optional }, { type: Inject, args: [CDK_DROP_LIST_GROUP,] }, { type: SkipSelf }] },\n    { type: ScrollDispatcher },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [CDK_DRAG_CONFIG,] }] }\n];\nCdkDropList.propDecorators = {\n    connectedTo: [{ type: Input, args: ['cdkDropListConnectedTo',] }],\n    data: [{ type: Input, args: ['cdkDropListData',] }],\n    orientation: [{ type: Input, args: ['cdkDropListOrientation',] }],\n    id: [{ type: Input }],\n    lockAxis: [{ type: Input, args: ['cdkDropListLockAxis',] }],\n    disabled: [{ type: Input, args: ['cdkDropListDisabled',] }],\n    sortingDisabled: [{ type: Input, args: ['cdkDropListSortingDisabled',] }],\n    enterPredicate: [{ type: Input, args: ['cdkDropListEnterPredicate',] }],\n    autoScrollDisabled: [{ type: Input, args: ['cdkDropListAutoScrollDisabled',] }],\n    dropped: [{ type: Output, args: ['cdkDropListDropped',] }],\n    entered: [{ type: Output, args: ['cdkDropListEntered',] }],\n    exited: [{ type: Output, args: ['cdkDropListExited',] }],\n    sorted: [{ type: Output, args: ['cdkDropListSorted',] }]\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token that can be used to reference instances of `CdkDragHandle`. It serves as\n * alternative token to the actual `CdkDragHandle` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DRAG_HANDLE = new InjectionToken('CdkDragHandle');\n/** Handle that can be used to drag a CdkDrag instance. */\nclass CdkDragHandle {\n    constructor(element, parentDrag) {\n        this.element = element;\n        /** Emits when the state of the handle has changed. */\n        this._stateChanges = new Subject();\n        this._disabled = false;\n        this._parentDrag = parentDrag;\n    }\n    /** Whether starting to drag through this handle is disabled. */\n    get disabled() { return this._disabled; }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        this._stateChanges.next(this);\n    }\n    ngOnDestroy() {\n        this._stateChanges.complete();\n    }\n}\nCdkDragHandle.decorators = [\n    { type: Directive, args: [{\n                selector: '[cdkDragHandle]',\n                host: {\n                    'class': 'cdk-drag-handle'\n                },\n                providers: [{ provide: CDK_DRAG_HANDLE, useExisting: CdkDragHandle }],\n            },] }\n];\nCdkDragHandle.ctorParameters = () => [\n    { type: ElementRef },\n    { type: undefined, decorators: [{ type: Inject, args: [CDK_DRAG_PARENT,] }, { type: Optional }, { type: SkipSelf }] }\n];\nCdkDragHandle.propDecorators = {\n    disabled: [{ type: Input, args: ['cdkDragHandleDisabled',] }]\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token that can be used to reference instances of `CdkDragPlaceholder`. It serves as\n * alternative token to the actual `CdkDragPlaceholder` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DRAG_PLACEHOLDER = new InjectionToken('CdkDragPlaceholder');\n/**\n * Element that will be used as a template for the placeholder of a CdkDrag when\n * it is being dragged. The placeholder is displayed in place of the element being dragged.\n */\nclass CdkDragPlaceholder {\n    constructor(templateRef) {\n        this.templateRef = templateRef;\n    }\n}\nCdkDragPlaceholder.decorators = [\n    { type: Directive, args: [{\n                selector: 'ng-template[cdkDragPlaceholder]',\n                providers: [{ provide: CDK_DRAG_PLACEHOLDER, useExisting: CdkDragPlaceholder }],\n            },] }\n];\nCdkDragPlaceholder.ctorParameters = () => [\n    { type: TemplateRef }\n];\nCdkDragPlaceholder.propDecorators = {\n    data: [{ type: Input }]\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token that can be used to reference instances of `CdkDragPreview`. It serves as\n * alternative token to the actual `CdkDragPreview` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DRAG_PREVIEW = new InjectionToken('CdkDragPreview');\n/**\n * Element that will be used as a template for the preview\n * of a CdkDrag when it is being dragged.\n */\nclass CdkDragPreview {\n    constructor(templateRef) {\n        this.templateRef = templateRef;\n        this._matchSize = false;\n    }\n    /** Whether the preview should preserve the same size as the item that is being dragged. */\n    get matchSize() { return this._matchSize; }\n    set matchSize(value) { this._matchSize = coerceBooleanProperty(value); }\n}\nCdkDragPreview.decorators = [\n    { type: Directive, args: [{\n                selector: 'ng-template[cdkDragPreview]',\n                providers: [{ provide: CDK_DRAG_PREVIEW, useExisting: CdkDragPreview }],\n            },] }\n];\nCdkDragPreview.ctorParameters = () => [\n    { type: TemplateRef }\n];\nCdkDragPreview.propDecorators = {\n    data: [{ type: Input }],\n    matchSize: [{ type: Input }]\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Element that can be moved inside a CdkDropList container. */\nclass CdkDrag {\n    constructor(\n    /** Element that the draggable is attached to. */\n    element, \n    /** Droppable container that the draggable is a part of. */\n    dropContainer, _document, _ngZone, _viewContainerRef, config, _dir, dragDrop, _changeDetectorRef, _selfHandle) {\n        this.element = element;\n        this.dropContainer = dropContainer;\n        this._document = _document;\n        this._ngZone = _ngZone;\n        this._viewContainerRef = _viewContainerRef;\n        this._dir = _dir;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._selfHandle = _selfHandle;\n        this._destroyed = new Subject();\n        /** Emits when the user starts dragging the item. */\n        this.started = new EventEmitter();\n        /** Emits when the user has released a drag item, before any animations have started. */\n        this.released = new EventEmitter();\n        /** Emits when the user stops dragging an item in the container. */\n        this.ended = new EventEmitter();\n        /** Emits when the user has moved the item into a new container. */\n        this.entered = new EventEmitter();\n        /** Emits when the user removes the item its container by dragging it into another container. */\n        this.exited = new EventEmitter();\n        /** Emits when the user drops the item inside a container. */\n        this.dropped = new EventEmitter();\n        /**\n         * Emits as the user is dragging the item. Use with caution,\n         * because this event will fire for every pixel that the user has dragged.\n         */\n        this.moved = new Observable((observer) => {\n            const subscription = this._dragRef.moved.pipe(map(movedEvent => ({\n                source: this,\n                pointerPosition: movedEvent.pointerPosition,\n                event: movedEvent.event,\n                delta: movedEvent.delta,\n                distance: movedEvent.distance\n            }))).subscribe(observer);\n            return () => {\n                subscription.unsubscribe();\n            };\n        });\n        this._dragRef = dragDrop.createDrag(element, {\n            dragStartThreshold: config && config.dragStartThreshold != null ?\n                config.dragStartThreshold : 5,\n            pointerDirectionChangeThreshold: config && config.pointerDirectionChangeThreshold != null ?\n                config.pointerDirectionChangeThreshold : 5,\n            zIndex: config === null || config === void 0 ? void 0 : config.zIndex\n        });\n        this._dragRef.data = this;\n        if (config) {\n            this._assignDefaults(config);\n        }\n        // Note that usually the container is assigned when the drop list is picks up the item, but in\n        // some cases (mainly transplanted views with OnPush, see #18341) we may end up in a situation\n        // where there are no items on the first change detection pass, but the items get picked up as\n        // soon as the user triggers another pass by dragging. This is a problem, because the item would\n        // have to switch from standalone mode to drag mode in the middle of the dragging sequence which\n        // is too late since the two modes save different kinds of information. We work around it by\n        // assigning the drop container both from here and the list.\n        if (dropContainer) {\n            this._dragRef._withDropContainer(dropContainer._dropListRef);\n            dropContainer.addItem(this);\n        }\n        this._syncInputs(this._dragRef);\n        this._handleEvents(this._dragRef);\n    }\n    /** Whether starting to drag this element is disabled. */\n    get disabled() {\n        return this._disabled || (this.dropContainer && this.dropContainer.disabled);\n    }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        this._dragRef.disabled = this._disabled;\n    }\n    /**\n     * Returns the element that is being used as a placeholder\n     * while the current element is being dragged.\n     */\n    getPlaceholderElement() {\n        return this._dragRef.getPlaceholderElement();\n    }\n    /** Returns the root draggable element. */\n    getRootElement() {\n        return this._dragRef.getRootElement();\n    }\n    /** Resets a standalone drag item to its initial position. */\n    reset() {\n        this._dragRef.reset();\n    }\n    /**\n     * Gets the pixel coordinates of the draggable outside of a drop container.\n     */\n    getFreeDragPosition() {\n        return this._dragRef.getFreeDragPosition();\n    }\n    ngAfterViewInit() {\n        // We need to wait for the zone to stabilize, in order for the reference\n        // element to be in the proper place in the DOM. This is mostly relevant\n        // for draggable elements inside portals since they get stamped out in\n        // their original DOM position and then they get transferred to the portal.\n        this._ngZone.onStable\n            .pipe(take(1), takeUntil(this._destroyed))\n            .subscribe(() => {\n            this._updateRootElement();\n            // Listen for any newly-added handles.\n            this._handles.changes.pipe(startWith(this._handles), \n            // Sync the new handles with the DragRef.\n            tap((handles) => {\n                const childHandleElements = handles\n                    .filter(handle => handle._parentDrag === this)\n                    .map(handle => handle.element);\n                // Usually handles are only allowed to be a descendant of the drag element, but if\n                // the consumer defined a different drag root, we should allow the drag element\n                // itself to be a handle too.\n                if (this._selfHandle && this.rootElementSelector) {\n                    childHandleElements.push(this.element);\n                }\n                this._dragRef.withHandles(childHandleElements);\n            }), \n            // Listen if the state of any of the handles changes.\n            switchMap((handles) => {\n                return merge(...handles.map(item => {\n                    return item._stateChanges.pipe(startWith(item));\n                }));\n            }), takeUntil(this._destroyed)).subscribe(handleInstance => {\n                // Enabled/disable the handle that changed in the DragRef.\n                const dragRef = this._dragRef;\n                const handle = handleInstance.element.nativeElement;\n                handleInstance.disabled ? dragRef.disableHandle(handle) : dragRef.enableHandle(handle);\n            });\n            if (this.freeDragPosition) {\n                this._dragRef.setFreeDragPosition(this.freeDragPosition);\n            }\n        });\n    }\n    ngOnChanges(changes) {\n        const rootSelectorChange = changes['rootElementSelector'];\n        const positionChange = changes['freeDragPosition'];\n        // We don't have to react to the first change since it's being\n        // handled in `ngAfterViewInit` where it needs to be deferred.\n        if (rootSelectorChange && !rootSelectorChange.firstChange) {\n            this._updateRootElement();\n        }\n        // Skip the first change since it's being handled in `ngAfterViewInit`.\n        if (positionChange && !positionChange.firstChange && this.freeDragPosition) {\n            this._dragRef.setFreeDragPosition(this.freeDragPosition);\n        }\n    }\n    ngOnDestroy() {\n        if (this.dropContainer) {\n            this.dropContainer.removeItem(this);\n        }\n        this._destroyed.next();\n        this._destroyed.complete();\n        this._dragRef.dispose();\n    }\n    /** Syncs the root element with the `DragRef`. */\n    _updateRootElement() {\n        const element = this.element.nativeElement;\n        const rootElement = this.rootElementSelector ?\n            getClosestMatchingAncestor(element, this.rootElementSelector) : element;\n        if (rootElement && rootElement.nodeType !== this._document.ELEMENT_NODE &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error(`cdkDrag must be attached to an element node. ` +\n                `Currently attached to \"${rootElement.nodeName}\".`);\n        }\n        this._dragRef.withRootElement(rootElement || element);\n    }\n    /** Gets the boundary element, based on the `boundaryElement` value. */\n    _getBoundaryElement() {\n        const boundary = this.boundaryElement;\n        if (!boundary) {\n            return null;\n        }\n        if (typeof boundary === 'string') {\n            return getClosestMatchingAncestor(this.element.nativeElement, boundary);\n        }\n        const element = coerceElement(boundary);\n        if ((typeof ngDevMode === 'undefined' || ngDevMode) &&\n            !element.contains(this.element.nativeElement)) {\n            throw Error('Draggable element is not inside of the node passed into cdkDragBoundary.');\n        }\n        return element;\n    }\n    /** Syncs the inputs of the CdkDrag with the options of the underlying DragRef. */\n    _syncInputs(ref) {\n        ref.beforeStarted.subscribe(() => {\n            if (!ref.isDragging()) {\n                const dir = this._dir;\n                const dragStartDelay = this.dragStartDelay;\n                const placeholder = this._placeholderTemplate ? {\n                    template: this._placeholderTemplate.templateRef,\n                    context: this._placeholderTemplate.data,\n                    viewContainer: this._viewContainerRef\n                } : null;\n                const preview = this._previewTemplate ? {\n                    template: this._previewTemplate.templateRef,\n                    context: this._previewTemplate.data,\n                    matchSize: this._previewTemplate.matchSize,\n                    viewContainer: this._viewContainerRef\n                } : null;\n                ref.disabled = this.disabled;\n                ref.lockAxis = this.lockAxis;\n                ref.dragStartDelay = (typeof dragStartDelay === 'object' && dragStartDelay) ?\n                    dragStartDelay : coerceNumberProperty(dragStartDelay);\n                ref.constrainPosition = this.constrainPosition;\n                ref.previewClass = this.previewClass;\n                ref\n                    .withBoundaryElement(this._getBoundaryElement())\n                    .withPlaceholderTemplate(placeholder)\n                    .withPreviewTemplate(preview);\n                if (dir) {\n                    ref.withDirection(dir.value);\n                }\n            }\n        });\n    }\n    /** Handles the events from the underlying `DragRef`. */\n    _handleEvents(ref) {\n        ref.started.subscribe(() => {\n            this.started.emit({ source: this });\n            // Since all of these events run outside of change detection,\n            // we need to ensure that everything is marked correctly.\n            this._changeDetectorRef.markForCheck();\n        });\n        ref.released.subscribe(() => {\n            this.released.emit({ source: this });\n        });\n        ref.ended.subscribe(event => {\n            this.ended.emit({ source: this, distance: event.distance });\n            // Since all of these events run outside of change detection,\n            // we need to ensure that everything is marked correctly.\n            this._changeDetectorRef.markForCheck();\n        });\n        ref.entered.subscribe(event => {\n            this.entered.emit({\n                container: event.container.data,\n                item: this,\n                currentIndex: event.currentIndex\n            });\n        });\n        ref.exited.subscribe(event => {\n            this.exited.emit({\n                container: event.container.data,\n                item: this\n            });\n        });\n        ref.dropped.subscribe(event => {\n            this.dropped.emit({\n                previousIndex: event.previousIndex,\n                currentIndex: event.currentIndex,\n                previousContainer: event.previousContainer.data,\n                container: event.container.data,\n                isPointerOverContainer: event.isPointerOverContainer,\n                item: this,\n                distance: event.distance\n            });\n        });\n    }\n    /** Assigns the default input values based on a provided config object. */\n    _assignDefaults(config) {\n        const { lockAxis, dragStartDelay, constrainPosition, previewClass, boundaryElement, draggingDisabled, rootElementSelector } = config;\n        this.disabled = draggingDisabled == null ? false : draggingDisabled;\n        this.dragStartDelay = dragStartDelay || 0;\n        if (lockAxis) {\n            this.lockAxis = lockAxis;\n        }\n        if (constrainPosition) {\n            this.constrainPosition = constrainPosition;\n        }\n        if (previewClass) {\n            this.previewClass = previewClass;\n        }\n        if (boundaryElement) {\n            this.boundaryElement = boundaryElement;\n        }\n        if (rootElementSelector) {\n            this.rootElementSelector = rootElementSelector;\n        }\n    }\n}\nCdkDrag.decorators = [\n    { type: Directive, args: [{\n                selector: '[cdkDrag]',\n                exportAs: 'cdkDrag',\n                host: {\n                    'class': 'cdk-drag',\n                    '[class.cdk-drag-disabled]': 'disabled',\n                    '[class.cdk-drag-dragging]': '_dragRef.isDragging()',\n                },\n                providers: [{ provide: CDK_DRAG_PARENT, useExisting: CdkDrag }]\n            },] }\n];\nCdkDrag.ctorParameters = () => [\n    { type: ElementRef },\n    { type: undefined, decorators: [{ type: Inject, args: [CDK_DROP_LIST,] }, { type: Optional }, { type: SkipSelf }] },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: NgZone },\n    { type: ViewContainerRef },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [CDK_DRAG_CONFIG,] }] },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: DragDrop },\n    { type: ChangeDetectorRef },\n    { type: CdkDragHandle, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [CDK_DRAG_HANDLE,] }] }\n];\nCdkDrag.propDecorators = {\n    _handles: [{ type: ContentChildren, args: [CDK_DRAG_HANDLE, { descendants: true },] }],\n    _previewTemplate: [{ type: ContentChild, args: [CDK_DRAG_PREVIEW,] }],\n    _placeholderTemplate: [{ type: ContentChild, args: [CDK_DRAG_PLACEHOLDER,] }],\n    data: [{ type: Input, args: ['cdkDragData',] }],\n    lockAxis: [{ type: Input, args: ['cdkDragLockAxis',] }],\n    rootElementSelector: [{ type: Input, args: ['cdkDragRootElement',] }],\n    boundaryElement: [{ type: Input, args: ['cdkDragBoundary',] }],\n    dragStartDelay: [{ type: Input, args: ['cdkDragStartDelay',] }],\n    freeDragPosition: [{ type: Input, args: ['cdkDragFreeDragPosition',] }],\n    disabled: [{ type: Input, args: ['cdkDragDisabled',] }],\n    constrainPosition: [{ type: Input, args: ['cdkDragConstrainPosition',] }],\n    previewClass: [{ type: Input, args: ['cdkDragPreviewClass',] }],\n    started: [{ type: Output, args: ['cdkDragStarted',] }],\n    released: [{ type: Output, args: ['cdkDragReleased',] }],\n    ended: [{ type: Output, args: ['cdkDragEnded',] }],\n    entered: [{ type: Output, args: ['cdkDragEntered',] }],\n    exited: [{ type: Output, args: ['cdkDragExited',] }],\n    dropped: [{ type: Output, args: ['cdkDragDropped',] }],\n    moved: [{ type: Output, args: ['cdkDragMoved',] }]\n};\n/** Gets the closest ancestor of an element that matches a selector. */\nfunction getClosestMatchingAncestor(element, selector) {\n    let currentElement = element.parentElement;\n    while (currentElement) {\n        // IE doesn't support `matches` so we have to fall back to `msMatchesSelector`.\n        if (currentElement.matches ? currentElement.matches(selector) :\n            currentElement.msMatchesSelector(selector)) {\n            return currentElement;\n        }\n        currentElement = currentElement.parentElement;\n    }\n    return null;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass DragDropModule {\n}\nDragDropModule.decorators = [\n    { type: NgModule, args: [{\n                declarations: [\n                    CdkDropList,\n                    CdkDropListGroup,\n                    CdkDrag,\n                    CdkDragHandle,\n                    CdkDragPreview,\n                    CdkDragPlaceholder,\n                ],\n                exports: [\n                    CdkScrollableModule,\n                    CdkDropList,\n                    CdkDropListGroup,\n                    CdkDrag,\n                    CdkDragHandle,\n                    CdkDragPreview,\n                    CdkDragPlaceholder,\n                ],\n                providers: [\n                    DragDrop,\n                ]\n            },] }\n];\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CDK_DRAG_CONFIG, CDK_DRAG_HANDLE, CDK_DRAG_PARENT, CDK_DRAG_PLACEHOLDER, CDK_DRAG_PREVIEW, CDK_DROP_LIST, CDK_DROP_LIST_GROUP, CdkDrag, CdkDragHandle, CdkDragPlaceholder, CdkDragPreview, CdkDropList, CdkDropListGroup, DragDrop, DragDropModule, DragDropRegistry, DragRef, DropListRef, copyArrayItem, moveItemInArray, transferArrayItem };\n//# sourceMappingURL=drag-drop.js.map\n","import { EventEmitter, Directive, ElementRef, Output, NgModule } from '@angular/core';\nimport { ResizeSensor } from 'css-element-queries';\n\nclass ResizedEvent {\n    constructor(element, newWidth, newHeight, oldWidth, oldHeight) {\n        this.element = element;\n        this.newWidth = newWidth;\n        this.newHeight = newHeight;\n        this.oldWidth = oldWidth;\n        this.oldHeight = oldHeight;\n    }\n}\n\nclass ResizedDirective {\n    constructor(element) {\n        this.element = element;\n        this.resized = new EventEmitter();\n    }\n    ngOnInit() {\n        // only initialize resize watching if sensor is availablei\n        if (ResizeSensor) {\n            this.resizeSensor = new ResizeSensor(this.element.nativeElement, () => this.onResized());\n        }\n    }\n    ngOnDestroy() {\n        if (this.resizeSensor) {\n            this.resizeSensor.detach();\n        }\n    }\n    onResized() {\n        const newWidth = this.element.nativeElement.clientWidth;\n        const newHeight = this.element.nativeElement.clientHeight;\n        if (newWidth === this.oldWidth && newHeight === this.oldHeight) {\n            return;\n        }\n        const event = new ResizedEvent(this.element, newWidth, newHeight, this.oldWidth, this.oldHeight);\n        this.oldWidth = this.element.nativeElement.clientWidth;\n        this.oldHeight = this.element.nativeElement.clientHeight;\n        this.resized.emit(event);\n    }\n}\nResizedDirective.decorators = [\n    { type: Directive, args: [{\n                // tslint:disable-next-line:directive-selector\n                selector: '[resized]'\n            },] }\n];\nResizedDirective.ctorParameters = () => [\n    { type: ElementRef }\n];\nResizedDirective.propDecorators = {\n    resized: [{ type: Output }]\n};\n\nclass AngularResizedEventModule {\n}\nAngularResizedEventModule.decorators = [\n    { type: NgModule, args: [{\n                declarations: [ResizedDirective],\n                imports: [],\n                exports: [ResizedDirective]\n            },] }\n];\n\n/*\n * Public API Surface of angular-resize-event\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { AngularResizedEventModule, ResizedDirective, ResizedEvent };\n//# sourceMappingURL=angular-resize-event.js.map\n","'use strict';\n\n/**\n * Copyright Marc J. Schmidt. See the LICENSE file at the top-level\n * directory of this distribution and at\n * https://github.com/marcj/css-element-queries/blob/master/LICENSE.\n */\n(function (root, factory) {\n    if (typeof define === \"function\" && define.amd) {\n        define(['./ResizeSensor.js'], factory);\n    } else if (typeof exports === \"object\") {\n        module.exports = factory(require('./ResizeSensor.js'));\n    } else {\n        root.ElementQueries = factory(root.ResizeSensor);\n        root.ElementQueries.listen();\n    }\n}(typeof window !== 'undefined' ? window : this, function (ResizeSensor) {\n\n    /**\n     *\n     * @type {Function}\n     * @constructor\n     */\n    var ElementQueries = function () {\n        //<style> element with our dynamically created styles\n        var cssStyleElement;\n\n        //all rules found for element queries\n        var allQueries = {};\n\n        //association map to identify which selector belongs to a element from the animationstart event.\n        var idToSelectorMapping = [];\n\n        /**\n         *\n         * @param element\n         * @returns {Number}\n         */\n        function getEmSize(element) {\n            if (!element) {\n                element = document.documentElement;\n            }\n            var fontSize = window.getComputedStyle(element, null).fontSize;\n            return parseFloat(fontSize) || 16;\n        }\n\n        /**\n         * Get element size\n         * @param {HTMLElement} element\n         * @returns {Object} {width, height}\n         */\n        function getElementSize(element) {\n            if (!element.getBoundingClientRect) {\n                return {\n                    width: element.offsetWidth,\n                    height: element.offsetHeight\n                }\n            }\n\n            var rect = element.getBoundingClientRect();\n            return {\n                width: Math.round(rect.width),\n                height: Math.round(rect.height)\n            }\n        }\n\n        /**\n         *\n         * @copyright https://github.com/Mr0grog/element-query/blob/master/LICENSE\n         *\n         * @param {HTMLElement} element\n         * @param {*} value\n         * @returns {*}\n         */\n        function convertToPx(element, value) {\n            var numbers = value.split(/\\d/);\n            var units = numbers[numbers.length - 1];\n            value = parseFloat(value);\n            switch (units) {\n                case \"px\":\n                    return value;\n                case \"em\":\n                    return value * getEmSize(element);\n                case \"rem\":\n                    return value * getEmSize();\n                // Viewport units!\n                // According to http://quirksmode.org/mobile/tableViewport.html\n                // documentElement.clientWidth/Height gets us the most reliable info\n                case \"vw\":\n                    return value * document.documentElement.clientWidth / 100;\n                case \"vh\":\n                    return value * document.documentElement.clientHeight / 100;\n                case \"vmin\":\n                case \"vmax\":\n                    var vw = document.documentElement.clientWidth / 100;\n                    var vh = document.documentElement.clientHeight / 100;\n                    var chooser = Math[units === \"vmin\" ? \"min\" : \"max\"];\n                    return value * chooser(vw, vh);\n                default:\n                    return value;\n                // for now, not supporting physical units (since they are just a set number of px)\n                // or ex/ch (getting accurate measurements is hard)\n            }\n        }\n\n        /**\n         *\n         * @param {HTMLElement} element\n         * @param {String} id\n         * @constructor\n         */\n        function SetupInformation(element, id) {\n            this.element = element;\n            var key, option, elementSize, value, actualValue, attrValues, attrValue, attrName;\n\n            var attributes = ['min-width', 'min-height', 'max-width', 'max-height'];\n\n            /**\n             * Extracts the computed width/height and sets to min/max- attribute.\n             */\n            this.call = function () {\n                // extract current dimensions\n                elementSize = getElementSize(this.element);\n\n                attrValues = {};\n\n                for (key in allQueries[id]) {\n                    if (!allQueries[id].hasOwnProperty(key)) {\n                        continue;\n                    }\n                    option = allQueries[id][key];\n\n                    value = convertToPx(this.element, option.value);\n\n                    actualValue = option.property === 'width' ? elementSize.width : elementSize.height;\n                    attrName = option.mode + '-' + option.property;\n                    attrValue = '';\n\n                    if (option.mode === 'min' && actualValue >= value) {\n                        attrValue += option.value;\n                    }\n\n                    if (option.mode === 'max' && actualValue <= value) {\n                        attrValue += option.value;\n                    }\n\n                    if (!attrValues[attrName]) attrValues[attrName] = '';\n                    if (attrValue && -1 === (' ' + attrValues[attrName] + ' ').indexOf(' ' + attrValue + ' ')) {\n                        attrValues[attrName] += ' ' + attrValue;\n                    }\n                }\n\n                for (var k in attributes) {\n                    if (!attributes.hasOwnProperty(k)) continue;\n\n                    if (attrValues[attributes[k]]) {\n                        this.element.setAttribute(attributes[k], attrValues[attributes[k]].substr(1));\n                    } else {\n                        this.element.removeAttribute(attributes[k]);\n                    }\n                }\n            };\n        }\n\n        /**\n         * @param {HTMLElement} element\n         * @param {Object}      id\n         */\n        function setupElement(element, id) {\n            if (!element.elementQueriesSetupInformation) {\n                element.elementQueriesSetupInformation = new SetupInformation(element, id);\n            }\n\n            if (!element.elementQueriesSensor) {\n                element.elementQueriesSensor = new ResizeSensor(element, function () {\n                    element.elementQueriesSetupInformation.call();\n                });\n            }\n        }\n\n        /**\n         * Stores rules to the selector that should be applied once resized.\n         *\n         * @param {String} selector\n         * @param {String} mode min|max\n         * @param {String} property width|height\n         * @param {String} value\n         */\n        function queueQuery(selector, mode, property, value) {\n            if (typeof(allQueries[selector]) === 'undefined') {\n                allQueries[selector] = [];\n                // add animation to trigger animationstart event, so we know exactly when a element appears in the DOM\n\n                var id = idToSelectorMapping.length;\n                cssStyleElement.innerHTML += '\\n' + selector + ' {animation: 0.1s element-queries;}';\n                cssStyleElement.innerHTML += '\\n' + selector + ' > .resize-sensor {min-width: '+id+'px;}';\n                idToSelectorMapping.push(selector);\n            }\n\n            allQueries[selector].push({\n                mode: mode,\n                property: property,\n                value: value\n            });\n        }\n\n        function getQuery(container) {\n            var query;\n            if (document.querySelectorAll) query = (container) ? container.querySelectorAll.bind(container) : document.querySelectorAll.bind(document);\n            if (!query && 'undefined' !== typeof $$) query = $$;\n            if (!query && 'undefined' !== typeof jQuery) query = jQuery;\n\n            if (!query) {\n                throw 'No document.querySelectorAll, jQuery or Mootools\\'s $$ found.';\n            }\n\n            return query;\n        }\n\n        /**\n         * If animationStart didn't catch a new element in the DOM, we can manually search for it\n         */\n        function findElementQueriesElements(container) {\n            var query = getQuery(container);\n\n            for (var selector in allQueries) if (allQueries.hasOwnProperty(selector)) {\n                // find all elements based on the extract query selector from the element query rule\n                var elements = query(selector, container);\n\n                for (var i = 0, j = elements.length; i < j; i++) {\n                    setupElement(elements[i], selector);\n                }\n            }\n        }\n\n        /**\n         *\n         * @param {HTMLElement} element\n         */\n        function attachResponsiveImage(element) {\n            var children = [];\n            var rules = [];\n            var sources = [];\n            var defaultImageId = 0;\n            var lastActiveImage = -1;\n            var loadedImages = [];\n\n            for (var i in element.children) {\n                if (!element.children.hasOwnProperty(i)) continue;\n\n                if (element.children[i].tagName && element.children[i].tagName.toLowerCase() === 'img') {\n                    children.push(element.children[i]);\n\n                    var minWidth = element.children[i].getAttribute('min-width') || element.children[i].getAttribute('data-min-width');\n                    //var minHeight = element.children[i].getAttribute('min-height') || element.children[i].getAttribute('data-min-height');\n                    var src = element.children[i].getAttribute('data-src') || element.children[i].getAttribute('url');\n\n                    sources.push(src);\n\n                    var rule = {\n                        minWidth: minWidth\n                    };\n\n                    rules.push(rule);\n\n                    if (!minWidth) {\n                        defaultImageId = children.length - 1;\n                        element.children[i].style.display = 'block';\n                    } else {\n                        element.children[i].style.display = 'none';\n                    }\n                }\n            }\n\n            lastActiveImage = defaultImageId;\n\n            function check() {\n                var imageToDisplay = false, i;\n\n                for (i in children) {\n                    if (!children.hasOwnProperty(i)) continue;\n\n                    if (rules[i].minWidth) {\n                        if (element.offsetWidth > rules[i].minWidth) {\n                            imageToDisplay = i;\n                        }\n                    }\n                }\n\n                if (!imageToDisplay) {\n                    //no rule matched, show default\n                    imageToDisplay = defaultImageId;\n                }\n\n                if (lastActiveImage !== imageToDisplay) {\n                    //image change\n\n                    if (!loadedImages[imageToDisplay]) {\n                        //image has not been loaded yet, we need to load the image first in memory to prevent flash of\n                        //no content\n\n                        var image = new Image();\n                        image.onload = function () {\n                            children[imageToDisplay].src = sources[imageToDisplay];\n\n                            children[lastActiveImage].style.display = 'none';\n                            children[imageToDisplay].style.display = 'block';\n\n                            loadedImages[imageToDisplay] = true;\n\n                            lastActiveImage = imageToDisplay;\n                        };\n\n                        image.src = sources[imageToDisplay];\n                    } else {\n                        children[lastActiveImage].style.display = 'none';\n                        children[imageToDisplay].style.display = 'block';\n                        lastActiveImage = imageToDisplay;\n                    }\n                } else {\n                    //make sure for initial check call the .src is set correctly\n                    children[imageToDisplay].src = sources[imageToDisplay];\n                }\n            }\n\n            element.resizeSensorInstance = new ResizeSensor(element, check);\n            check();\n        }\n\n        function findResponsiveImages() {\n            var query = getQuery();\n\n            var elements = query('[data-responsive-image],[responsive-image]');\n            for (var i = 0, j = elements.length; i < j; i++) {\n                attachResponsiveImage(elements[i]);\n            }\n        }\n\n        var regex = /,?[\\s\\t]*([^,\\n]*?)((?:\\[[\\s\\t]*?(?:min|max)-(?:width|height)[\\s\\t]*?[~$\\^]?=[\\s\\t]*?\"[^\"]*?\"[\\s\\t]*?])+)([^,\\n\\s\\{]*)/mgi;\n        var attrRegex = /\\[[\\s\\t]*?(min|max)-(width|height)[\\s\\t]*?[~$\\^]?=[\\s\\t]*?\"([^\"]*?)\"[\\s\\t]*?]/mgi;\n\n        /**\n         * @param {String} css\n         */\n        function extractQuery(css) {\n            var match, smatch, attrs, attrMatch;\n\n            css = css.replace(/'/g, '\"');\n            while (null !== (match = regex.exec(css))) {\n                smatch = match[1] + match[3];\n                attrs = match[2];\n\n                while (null !== (attrMatch = attrRegex.exec(attrs))) {\n                    queueQuery(smatch, attrMatch[1], attrMatch[2], attrMatch[3]);\n                }\n            }\n        }\n\n        /**\n         * @param {CssRule[]|String} rules\n         */\n        function readRules(rules) {\n            var selector = '';\n\n            if (!rules) {\n                return;\n            }\n\n            if ('string' === typeof rules) {\n                rules = rules.toLowerCase();\n                if (-1 !== rules.indexOf('min-width') || -1 !== rules.indexOf('max-width')) {\n                    extractQuery(rules);\n                }\n            } else {\n                for (var i = 0, j = rules.length; i < j; i++) {\n                    if (1 === rules[i].type) {\n                        selector = rules[i].selectorText || rules[i].cssText;\n                        if (-1 !== selector.indexOf('min-height') || -1 !== selector.indexOf('max-height')) {\n                            extractQuery(selector);\n                        } else if (-1 !== selector.indexOf('min-width') || -1 !== selector.indexOf('max-width')) {\n                            extractQuery(selector);\n                        }\n                    } else if (4 === rules[i].type) {\n                        readRules(rules[i].cssRules || rules[i].rules);\n                    } else if (3 === rules[i].type) {\n                        if(rules[i].styleSheet.hasOwnProperty(\"cssRules\")) {\n                            readRules(rules[i].styleSheet.cssRules);\n                        }\n                    }\n                }\n            }\n        }\n\n        var defaultCssInjected = false;\n\n        /**\n         * Searches all css rules and setups the event listener to all elements with element query rules..\n         */\n        this.init = function () {\n            var animationStart = 'animationstart';\n            if (typeof document.documentElement.style['webkitAnimationName'] !== 'undefined') {\n                animationStart = 'webkitAnimationStart';\n            } else if (typeof document.documentElement.style['MozAnimationName'] !== 'undefined') {\n                animationStart = 'mozanimationstart';\n            } else if (typeof document.documentElement.style['OAnimationName'] !== 'undefined') {\n                animationStart = 'oanimationstart';\n            }\n\n            document.body.addEventListener(animationStart, function (e) {\n                var element = e.target;\n                var styles = element && window.getComputedStyle(element, null);\n                var animationName = styles && styles.getPropertyValue('animation-name');\n                var requiresSetup = animationName && (-1 !== animationName.indexOf('element-queries'));\n\n                if (requiresSetup) {\n                    element.elementQueriesSensor = new ResizeSensor(element, function () {\n                        if (element.elementQueriesSetupInformation) {\n                            element.elementQueriesSetupInformation.call();\n                        }\n                    });\n\n                    var sensorStyles = window.getComputedStyle(element.resizeSensor, null);\n                    var id = sensorStyles.getPropertyValue('min-width');\n                    id = parseInt(id.replace('px', ''));\n                    setupElement(e.target, idToSelectorMapping[id]);\n                }\n            });\n\n            if (!defaultCssInjected) {\n                cssStyleElement = document.createElement('style');\n                cssStyleElement.type = 'text/css';\n                cssStyleElement.innerHTML = '[responsive-image] > img, [data-responsive-image] {overflow: hidden; padding: 0; } [responsive-image] > img, [data-responsive-image] > img {width: 100%;}';\n\n                //safari wants at least one rule in keyframes to start working\n                cssStyleElement.innerHTML += '\\n@keyframes element-queries { 0% { visibility: inherit; } }';\n                document.getElementsByTagName('head')[0].appendChild(cssStyleElement);\n                defaultCssInjected = true;\n            }\n\n            for (var i = 0, j = document.styleSheets.length; i < j; i++) {\n                try {\n                    if (document.styleSheets[i].href && 0 === document.styleSheets[i].href.indexOf('file://')) {\n                        console.warn(\"CssElementQueries: unable to parse local css files, \" + document.styleSheets[i].href);\n                    }\n\n                    readRules(document.styleSheets[i].cssRules || document.styleSheets[i].rules || document.styleSheets[i].cssText);\n                } catch (e) {\n                }\n            }\n\n            findResponsiveImages();\n        };\n\n        /**\n         * Go through all collected rules (readRules()) and attach the resize-listener.\n         * Not necessary to call it manually, since we detect automatically when new elements\n         * are available in the DOM. However, sometimes handy for dirty DOM modifications.\n         *\n         * @param {HTMLElement} container only elements of the container are considered (document.body if not set)\n         */\n        this.findElementQueriesElements = function (container) {\n            findElementQueriesElements(container);\n        };\n\n        this.update = function () {\n            this.init();\n        };\n    };\n\n    ElementQueries.update = function () {\n        ElementQueries.instance.update();\n    };\n\n    /**\n     * Removes all sensor and elementquery information from the element.\n     *\n     * @param {HTMLElement} element\n     */\n    ElementQueries.detach = function (element) {\n        if (element.elementQueriesSetupInformation) {\n            //element queries\n            element.elementQueriesSensor.detach();\n            delete element.elementQueriesSetupInformation;\n            delete element.elementQueriesSensor;\n\n        } else if (element.resizeSensorInstance) {\n            //responsive image\n\n            element.resizeSensorInstance.detach();\n            delete element.resizeSensorInstance;\n        }\n    };\n\n    ElementQueries.init = function () {\n        if (!ElementQueries.instance) {\n            ElementQueries.instance = new ElementQueries();\n        }\n\n        ElementQueries.instance.init();\n    };\n\n    var domLoaded = function (callback) {\n        /* Mozilla, Chrome, Opera */\n        if (document.addEventListener) {\n            document.addEventListener('DOMContentLoaded', callback, false);\n        }\n        /* Safari, iCab, Konqueror */\n        else if (/KHTML|WebKit|iCab/i.test(navigator.userAgent)) {\n            var DOMLoadTimer = setInterval(function () {\n                if (/loaded|complete/i.test(document.readyState)) {\n                    callback();\n                    clearInterval(DOMLoadTimer);\n                }\n            }, 10);\n        }\n        /* Other web browsers */\n        else window.onload = callback;\n    };\n\n    ElementQueries.findElementQueriesElements = function (container) {\n        ElementQueries.instance.findElementQueriesElements(container);\n    };\n\n    ElementQueries.listen = function () {\n        domLoaded(ElementQueries.init);\n    };\n\n    return ElementQueries;\n\n}));\n","/* Copyright 2020-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {DragCardPosition} from \"@component/drag-and-drop/drag-card-position\";\n\n/**\n * The data used to load a view with draggable cards.\n * Holds the predefined card view name as well as a method to get the default cards' ordering.\n */\nexport class CardView {\n   constructor(public cardName: CardName, public getDefaultCardsPositions: () => Map<string, DragCardPosition>) {\n   }\n\n}\nexport enum CardName {\n   SERVICES_VIEW = \"vsan-service-cards-positions\",\n   FILE_DASHBOARD_ANALYTICS = \"vsan-file-dashboard-cards-positions\",\n   FILE_SHARE_DASHBOARD_ANALYTICS = \"vsan-file-share-dashboard-cards-positions\",\n   VSAN_HOME_CARD_VIEW = \"vsan-home-cards-positions\",\n}\n"]}