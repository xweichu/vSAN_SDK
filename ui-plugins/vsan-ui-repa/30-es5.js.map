{"version":3,"sources":["webpack:///src/app/vsan/common/component/diskmgmt/select-disks.component.ts","webpack:///src/app/vsan/common/component/diskmgmt/perspective/disks-group-by-perspective.ts","webpack:///src/app/vsan/common/pipe/disk-type.pipe.ts","webpack:///src/app/vsan/common/component/action-button/button-title.directive.ts","webpack:///src/app/vsan/common/directive/clr-button-group/clr-button-group-common.directive.ts","webpack:///src/app/vsan/common/component/diskmgmt/model/drive-type.data.ts","webpack:///src/app/vsan/common/component/diskmgmt/claim-disks-util.ts","webpack:///src/app/vsan/common/component/diskmgmt/create-disk-group.html","webpack:///src/app/vsan/common/component/action-button/button-group.directive.ts","webpack:///src/app/vsan/disk-management/views/pipes/transport-type.pipe.ts","webpack:///src/app/vsan/common/component/diskmgmt/model/vsan-base-list-item.data.ts","webpack:///src/app/vsan/common/component/diskmgmt/model/vsan-disk-list-item.ts","webpack:///src/app/vsan/common/component/diskmgmt/create-disk-group.component.ts","webpack:///src/app/vsan/common/component/diskmgmt/select-disks.html"],"names":["SelectDisksComponent","diskMgmtService","Icon","selectedDisksChange","disksLoaded","selectedDisks","listEligibleDisks","clusterRef","hostRef","isAllFlashDiskGroup","isVsanMaxEnabled","eligibleDisks","emit","hasVsanMaxWarning","some","disk","isVsanMaxCompatible","getIcon","getScsiDiskType","isFlash","getString","CLR_SUCCESS_STANDARD_ICON_SHAPE","CLR_WARN_STANDARD_ICON_SHAPE","DisksGroupByPerspective","DiskTypePipe","type","getDiskType","ButtonTitleDirective","host","titleChange","_title","value","next","asObservable","name","Math","random","toString","unsubscribe","ClrButtonGroupCommonDirective","elRef","setTimeout","allButtons","nativeElement","querySelectorAll","clrButtons","filter","clrButton","directives","forEach","index","buttonFound","findButtonByName","directive","resolveButton","buttons","i","length","item","DriveType","ClaimDisksUtil","claimOption","ClaimForCache","ClaimForStorage","VMFS","Custom","DoNotClaim","warn","CLAIM_AS_CACHE","CLAIM_AS_CAPACITY","DO_NOT_CLAIM","EMPTY_ICON","driveType","HDD","FLASH","MARKED_AS_HDD","MARKED_AS_FLASH","CUSTOM","groupByPerspective","datagrid","hostsInCluster","disksByVendor","DISKS_BY_VENDOR","refreshGrid","vendor","eligibleDisksInDatastoreContext","collapseAll","DISKS_BY_HOST","expandAll","DISKS_PER_DATAGRID_PAGE","ButtonGroupDirective","_maximumInlineActions","_buttonTitleDirectives","updateButtonTitles","getVisibleButtons","concat","getInMenuButtons","titleDirective","button","getAttribute","title","titleChangeEvent","subscribe","subscribeToggleButtonClick","btns","_btns","updateInMenuButtons","groupWithMenu","btn","inMenu","toggleButton","getToggleButton","onclick","Array","from","VISIBLE_BUTTON_ELEMENTS_SELECTOR","ownerDocument","IN_MENU_BUTTON_ELEMENTS_SELECTOR","querySelector","TOGGLE_MENU_BUTTON_SELECTOR","TransportTypePipe","getTransportTypeText","_instance","VsanBaseListItem","isRoot","_claimOption","_capacity","_name","newName","newValue","getClaimOptionIcon","isHdd","VsanDiskListItem","data","useRecommendedClaimOption","isAllFlashAvailable","fileSystemVersion","hasErrorOnSsd","vsanUuid","_rawDiskData","_disk","isCacheDisk","_isInDiskGroup","diskGroupUuid","_diskStatus","diskStatus","markedAsFlash","_possibleClaimOptions","possibleClaimOptions","_possibleClaimOptionsIfMarkedAsOppositeType","possibleClaimOptionsIfMarkedAsOppositeType","getInitialClaimOption","getScsiDiskName","formatFileSize","capacityNum","lbaToBytes","capacity","getLocalizedDriveType","_transportType","transport","transportArray","_transport","transportElement","_hostName","newHostName","ssd","_markedAsFlash","isClaimedForVsan","getDiskImage","hasError","claimOptions","values","uuid","_issue","getVsanPhysicalDiskIssue","_physicalLocation","getPhysicalLocation","physicalLocation","_selected","getHealth","issue","diskHealthStatus","healthStatus","isDiskHealthy","hasVsanIssue","join","diskModel","trim","model","diskData","recommendedAllFlashClaimOption","recommendedHybridClaimOption","CapacityType","CreateDiskGroupComponent","diskManagementService","capabilityProvider","vsanConfigService","spaceEfficiencyService","dataLoaded","configChanged","validateConfig","cacheDisks","capacityDisks","capacityHdds","capacityFlashDisks","capacityFlashDisksToShow","spaceEfficiencyConfig","NONE","perspectives","_selectedCapacityDisks","getDiskMapping","validate","reset","requestData","onDisksDataRetrieved","alertMessage","selectedCacheDisk","selectedCapacityDisks","promises","push","getIsAllFlashSupportedOnHost","getEligibleDisks","isWitnessHost","getSpaceEfficiencyStatus","Promise","all","result","createVsanDiskListItem","updatePerspective","USE_RECOMMENDED_CLAIM_OPTIONS","selectedPerspective","updateCapacityDisks","errors","isOnlyAllFlashSupportedForClaimingDisks","storageDisk","toLabel","diskItem","Factory","create","items","getDatagridFooterLabel","selectedDisk"],"mappings":"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","file":"30-es5.js","sourcesContent":["/* Copyright 2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, EventEmitter, Input, OnInit, Output} from \"@angular/core\";\nimport {DiskManagementService} from \"@generated/disk-management-service\";\nimport {DiskData} from \"@generated/disk-data\";\nimport {Icon} from \"@util/icon\";\nimport {ManagedObject} from \"@service/managed-object\";\nimport {DiskMgmtDiskUtil} from \"@util/disk-mgmt-disk.util\";\nimport {DiskType} from \"@generated/disk-type\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {LoadingIndicator} from \"@service/flow/loading-indicator.decorator\";\nimport {Loader} from \"@service/flow/loader.decorator\";\nimport {ErrorMessage} from \"@service/flow/error-message.decorator\";\n\n@Component({\n   templateUrl: \"select-disks.html\",\n   styleUrls: [\"select-disks.scss\"],\n   selector: \"vsan-select-disks\",\n})\nexport class SelectDisksComponent implements OnInit {\n\n   Icon: typeof Icon = Icon;\n\n   @Input()\n   clusterRef: ManagedObject;\n\n   @Input()\n   hostRef: ManagedObject;\n\n   @Input()\n   isVsanMaxEnabled: boolean;\n\n   @Input()\n   isAllFlashDiskGroup: boolean;\n\n   @Output()\n   selectedDisksChange: EventEmitter<DiskData[]> = new EventEmitter<DiskData[]>();\n\n   @Output()\n   disksLoaded: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n   @LoadingIndicator()\n   busy: boolean;\n\n   @ErrorMessage()\n   errorMessage: string;\n\n   eligibleDisks: DiskData[];\n   selectedDisks: DiskData[] = [];\n   hasVsanMaxWarning: boolean;\n\n   constructor(private diskMgmtService: DiskManagementService) {\n   }\n\n   @Loader()\n   async ngOnInit(): Promise<void> {\n      this.eligibleDisks = await this.diskMgmtService.listEligibleDisks(\n            this.clusterRef,\n            this.hostRef,\n            this.isAllFlashDiskGroup,\n            this.isVsanMaxEnabled);\n      this.disksLoaded.emit(true);\n   }\n\n   diskSelectionChange(): void {\n      this.selectedDisksChange.emit(this.selectedDisks);\n      this.hasVsanMaxWarning = this.isVsanMaxEnabled && this.selectedDisks.some(disk => !disk.isVsanMaxCompatible);\n   }\n\n   getIcon(disk: DiskData): string {\n      return DiskMgmtDiskUtil.getIcon(disk);\n   }\n\n   getDriveType(disk: DiskData): DiskType {\n      return DiskMgmtDiskUtil.getScsiDiskType(disk.isFlash);\n   }\n\n   getIsVsanMaxCompatibleLabel(disk: DiskData): string {\n      return disk.isVsanMaxCompatible\n            ? VsanUiUtils.getString(\"vsan.disk.list.vsanMax.compatible\")\n            : VsanUiUtils.getString(\"vsan.disk.list.vsanMax.incompatible\");\n   }\n\n   getIsVsanMaxCompatibleIconShape(disk: DiskData): string {\n      return disk.isVsanMaxCompatible ? Icon.CLR_SUCCESS_STANDARD_ICON_SHAPE : Icon.CLR_WARN_STANDARD_ICON_SHAPE;\n   }\n}","/* Copyright 2020-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nexport enum DisksGroupByPerspective {\n   DISKS_BY_VENDOR,\n   DISKS_BY_HOST,\n}","/* Copyright 2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Pipe, PipeTransform} from \"@angular/core\";\nimport {DiskType} from \"@generated/disk-type\";\nimport {DiskMgmtDiskUtil} from \"@util/disk-mgmt-disk.util\";\n\n/*\n * Returns the localization label for the disk type.\n */\n@Pipe({name: \"diskTypeLabel\"})\nexport class DiskTypePipe implements PipeTransform {\n   transform(type: DiskType): string {\n      return DiskMgmtDiskUtil.getDiskType(type);\n   }\n}","/* Copyright 2019 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Directive, Input, OnInit} from '@angular/core';\nimport {BehaviorSubject, Observable} from \"rxjs\";\nimport {ClrButton} from \"@clr/angular\";\n\n/**\n * Attribute directive for detecting button title change and storing title.\n * Only used for clr-button in clr-button-group.\n * @title - The title of clr-button\n */\n@Directive({\n   selector: \"clr-button[vsan-button-title]\"\n})\nexport class ButtonTitleDirective implements OnInit {\n\n   constructor(public host: ClrButton) {}\n\n   private _title: string;\n\n   @Input(\"vsan-button-title\")\n   set title(value: string) {\n      if (this._title !== value) {\n         this.titleChange.next(value);\n      }\n      this._title = value;\n   }\n\n   get title(): string {\n      return this._title;\n   }\n\n   private titleChange: BehaviorSubject<string> = new BehaviorSubject<string>(\"\");\n\n   get titleChangeEvent(): Observable<string> {\n      return this.titleChange.asObservable();\n   }\n\n   ngOnInit(): void {\n      // name should be set, if not provided in template - generate one. ClrButtom#name is used to generate the name\n      // attribute of the markup button. Later the name is used to match the generated markup with the directive.\n      if (!this.host.name) {\n         this.host.name = Math.random().toString();\n      }\n   }\n\n   ngOnDestroy() {\n      this.titleChange.unsubscribe();\n   }\n}","/* Copyright 2020 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {AfterContentInit, ContentChildren, Directive, ElementRef} from \"@angular/core\";\nimport {ClrButton} from \"@clr/angular\";\nimport {ClrButtonBaseDirective, DirectiveHolder} from \"@directive/clr-button-group/clr-button-base.directive\";\n\n/**\n * Applies on every clr-button-group and help to link the clr-button with directive applieds on it,  which extends\n * {@link ClrButtonBaseDirective}, to the actual rendered html button.\n */\n@Directive({\n   selector: \"clr-button-group\",\n})\nexport class ClrButtonGroupCommonDirective implements AfterContentInit {\n\n   @ContentChildren(ClrButton, {descendants: true})\n   clrButtons: ClrButton[];\n\n   constructor(private elRef: ElementRef) {}\n\n   ngAfterContentInit(): void {\n      setTimeout(() => {\n         const allButtons: NodeListOf<HTMLButtonElement> = this.elRef.nativeElement.querySelectorAll(\"button\");\n         // match button with clrButton and notify directives\n         this.clrButtons.filter(clrButton => !!(clrButton as DirectiveHolder).directives)\n               .forEach((clrButton, index) => {\n                  const buttonFound: HTMLButtonElement = this.findButtonByName(clrButton.name, allButtons);\n                  if (buttonFound) {\n                     (clrButton as DirectiveHolder).directives.forEach(directive => {\n                        directive.resolveButton(clrButton, buttonFound, index);\n                     });\n                  }\n               });\n      });\n   }\n\n   private findButtonByName(name: string, buttons: NodeListOf<HTMLButtonElement>): HTMLButtonElement {\n      for (let i: number = 0; i < buttons.length; i++) {\n         if (buttons.item(i).name === name) {\n            return buttons.item(i);\n         }\n      }\n      return null;\n   }\n\n}","/* Copyright 2019 VMware, Inc. All rights reserved. -- VMware Confidential */\n\nexport enum DriveType {\n   HDD,\n   FLASH,\n   MARKED_AS_HDD,\n   MARKED_AS_FLASH,\n   CUSTOM // Indicates that the drive type of the disks is different.\n}","/* Copyright 2020-2022 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {TreeDatagrid} from \"@component/datagrid/tree-datagrid\";\nimport {ClaimHostListItem} from \"@component/diskmgmt/model/claim-host-list-item.data\";\nimport {ClaimVendorListItem} from \"@component/diskmgmt/model/claim-vendor-list-item.data\";\nimport {DriveType} from \"@component/diskmgmt/model/drive-type.data\";\nimport {DisksGroupByPerspective} from \"@component/diskmgmt/perspective/disks-group-by-perspective\";\nimport {ClaimOption} from \"@generated/claim-option\";\nimport {Icon} from \"@util/icon\";\nimport {Logger} from \"@util/logger\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\n\nexport class ClaimDisksUtil {\n\n   static readonly DISKS_PER_DATAGRID_PAGE: number = 10;\n\n   static getLocalizedClaimOption(claimOption: ClaimOption): string {\n      switch (claimOption) {\n         case ClaimOption.ClaimForCache:\n            return VsanUiUtils.getString(\"vsan.disk.list.claimOption.ClaimForCache\");\n         case ClaimOption.ClaimForStorage:\n            return VsanUiUtils.getString(\"vsan.disk.list.claimOption.ClaimForStorage\");\n         case ClaimOption.VMFS:\n            return VsanUiUtils.getString(\"vsan.disk.list.claimOption.VMFS\");\n         case ClaimOption.Custom:\n            return VsanUiUtils.getString(\"vsan.disk.list.claimOption.Custom\");\n         case ClaimOption.DoNotClaim:\n            return VsanUiUtils.getString(\"vsan.disk.list.claimOption.DoNotClaim\");\n         default:\n            Logger.warn(\"Invalid claim option\");\n            return \"\";\n      }\n   }\n\n   static getClaimOptionIcon(claimOption: ClaimOption): string {\n      switch (claimOption) {\n         case ClaimOption.ClaimForCache:\n            return Icon.CLAIM_AS_CACHE;\n         case ClaimOption.ClaimForStorage:\n         case ClaimOption.VMFS:\n            return Icon.CLAIM_AS_CAPACITY;\n         case ClaimOption.DoNotClaim:\n            return Icon.DO_NOT_CLAIM;\n         default:\n            return Icon.EMPTY_ICON;\n      }\n   }\n\n   static getLocalizedDriveType(driveType: DriveType): string {\n      switch (driveType) {\n         case DriveType.HDD:\n            return VsanUiUtils.getString(\"vsan.disk.list.nonSsd\");\n         case DriveType.FLASH:\n            return VsanUiUtils.getString(\"vsan.disk.list.ssd\");\n         case DriveType.MARKED_AS_HDD:\n            return VsanUiUtils.getString(\"vsan.disk.list.markedAsHdd\");\n         case DriveType.MARKED_AS_FLASH:\n            return VsanUiUtils.getString(\"vsan.disk.list.markedAsFlash\");\n         case DriveType.CUSTOM:\n            return VsanUiUtils.getString(\"vsan.disk.list.driveType.custom\");\n         default:\n            Logger.warn(\"Invalid drive type\");\n            return \"\";\n      }\n   }\n\n   static changePerspective(\n         groupByPerspective: DisksGroupByPerspective,\n         datagrid: TreeDatagrid,\n         hostsInCluster: ClaimHostListItem[],\n         disksByVendor: ClaimVendorListItem[]): void {\n      switch (groupByPerspective) {\n         case DisksGroupByPerspective.DISKS_BY_VENDOR:\n            datagrid.refreshGrid(disksByVendor.filter(vendor => vendor.eligibleDisksInDatastoreContext.length));\n            // setTimeout fixes ExpressionChangedAfterItHasBeenCheckedError\n            setTimeout(() => datagrid.collapseAll(), 0);\n            break;\n         case DisksGroupByPerspective.DISKS_BY_HOST:\n            datagrid.refreshGrid(hostsInCluster.filter(host => host.eligibleDisksInDatastoreContext.length));\n            datagrid.expandAll();\n            break;\n      }\n   }\n\n   static getNameColumnTitle(groupByPerspective: DisksGroupByPerspective): string {\n      switch (groupByPerspective) {\n         case DisksGroupByPerspective.DISKS_BY_VENDOR:\n            return VsanUiUtils.getString(\"vsan.disk.list.diskModelSerialNumber\");\n         case DisksGroupByPerspective.DISKS_BY_HOST:\n            return VsanUiUtils.getString(\"vsan.disk.list.name\");\n         default:\n            Logger.warn(\"Invalid perspective: \" + groupByPerspective);\n            return VsanUiUtils.getString(\"vsan.na.label\");\n      }\n   }\n}","<!--Copyright 2018-2021 VMware, Inc. All rights reserved. -- VMware Confidential-->\n<vsan-validation id=\"witness-disk-group-alert\"\n                 *ngIf=\"alertMessage\"\n                 [isSmall]=\"true\"\n                 [allowClose]=\"false\"\n                 [alert]=\"alertMessage\">\n</vsan-validation>\n<h6 id=\"selectCacheDiskLabel\" class=\"header-label\">\n   {{\"vsan.faultDomains.stretchedCluster.wizard.configure.page.claimDisks.cacheTierInfo\" | localized}}\n</h6>\n\n<clr-datagrid id=\"cacheDisksDatagrid\"\n              [clrDgSingleSelected]=\"selectedCacheDisk\"\n              [clrDgLoading]=\"busy\">\n   <!-- Datagrid Header -->\n   <clr-dg-column [clrDgField]=\"'name'\" class=\"name-column\">\n      {{\"vsan.disk.list.name\" | localized}}\n   </clr-dg-column>\n   <clr-dg-column [clrDgField]=\"'driveTypeLabel'\">\n      {{\"vsan.disk.list.driveType\" | localized}}\n   </clr-dg-column>\n   <clr-dg-column [clrDgField]=\"'capacity'\">\n      {{\"vsan.disk.list.capacity\" | localized}}\n   </clr-dg-column>\n   <clr-dg-column [clrDgField]=\"'transportType'\">\n      {{\"vsan.disk.list.transportType\" | localized}}\n   </clr-dg-column>\n   <clr-dg-column [clrDgField]=\"'diskAdapter'\">\n      {{\"vsan.disk.list.diskAdapter\" | localized}}\n   </clr-dg-column>\n\n   <!-- Datagrid Content -->\n   <clr-dg-row *clrDgItems=\"let disk of cacheDisks\"\n               [clrDgItem]=\"disk\"\n               (click)=\"onCacheDiskSelectionChanged(disk)\">\n      <clr-dg-cell vsan-show-title>\n         <clr-icon [attr.shape]=\"disk.image\"></clr-icon>\n         {{disk.name}}\n      </clr-dg-cell>\n      <clr-dg-cell>{{disk.driveTypeLabel}}</clr-dg-cell>\n      <clr-dg-cell>{{disk.capacity}}</clr-dg-cell>\n      <clr-dg-cell>{{disk.transportType}}</clr-dg-cell>\n      <clr-dg-cell>{{disk.diskAdapter}}</clr-dg-cell>\n   </clr-dg-row>\n\n   <!-- Datagrid Footer -->\n   <clr-dg-footer>\n      {{getDatagridFooterText(cacheDisks)}}\n   </clr-dg-footer>\n</clr-datagrid>\n\n<h6 id=\"selectCapacityDiskLabel\" class=\"header-label\">\n   {{\"vsan.faultDomains.stretchedCluster.wizard.configure.page.claimDisks.capacityTierInfo\" | localized}}\n</h6>\n\n<clr-select-container id=\"optionList\" class=\"horizontal-layout label-auto-size\">\n   <label for=\"perspective-dropdown\">\n      {{\"vsan.faultDomains.stretchedCluster.wizard.configure.page.claimDisks.filterLabel\" | localized}}\n   </label>\n   <select clrSelect id=\"perspective-dropdown\"\n           #perspectiveDropDown\n           name=\"currentPerspective\"\n           [(ngModel)]=\"selectedPerspective\"\n           [disabled]=\"!isAllFlashAvailable\"\n           (change)=\"updateCapacityDisks()\">\n      <option *ngFor=\"let perspective of perspectives\"\n              value=\"{{perspectives.indexOf(perspective)}}\"\n              [selected]=\"perspectives.indexOf(perspective) == selectedPerspective\">\n         {{perspective}}\n      </option>\n   </select>\n</clr-select-container>\n\n<clr-datagrid [(clrDgSelected)]=\"selectedCapacityDisks\"\n              id=\"capacityDisksDatagrid\"\n              [clrDgLoading]=\"busy\">\n   <!-- Datagrid Header -->\n   <clr-dg-column [clrDgField]=\"'name'\" class=\"name-column\">\n      {{\"vsan.disk.list.name\" | localized}}\n   </clr-dg-column>\n   <clr-dg-column [clrDgField]=\"'driveTypeLabel'\">\n      {{\"vsan.disk.list.driveType\" | localized}}\n   </clr-dg-column>\n   <clr-dg-column [clrDgField]=\"'capacity'\">\n      {{\"vsan.disk.list.capacity\" | localized}}\n   </clr-dg-column>\n   <clr-dg-column [clrDgField]=\"'transportType'\">\n      {{\"vsan.disk.list.transportType\" | localized}}\n   </clr-dg-column>\n   <clr-dg-column [clrDgField]=\"'diskAdapter'\">\n      {{\"vsan.disk.list.diskAdapter\" | localized}}\n   </clr-dg-column>\n\n   <!-- Datagrid Content -->\n   <clr-dg-row *clrDgItems=\"let disk of capacityDisks\" [clrDgItem]=\"disk\">\n      <clr-dg-cell vsan-show-title>\n         <clr-icon [attr.shape]=\"disk.image\"></clr-icon>\n         {{disk.name}}\n      </clr-dg-cell>\n      <clr-dg-cell>{{disk.driveTypeLabel}}</clr-dg-cell>\n      <clr-dg-cell>{{disk.capacity}}</clr-dg-cell>\n      <clr-dg-cell>{{disk.transportType}}</clr-dg-cell>\n      <clr-dg-cell>{{disk.diskAdapter}}</clr-dg-cell>\n   </clr-dg-row>\n\n   <!-- Datagrid Footer -->\n   <clr-dg-footer>\n      {{getDatagridFooterText(capacityDisks)}}\n   </clr-dg-footer>\n</clr-datagrid>\n","/* Copyright 2019-2022 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {ContentChildren, Directive, ElementRef, Input} from \"@angular/core\";\nimport {ClrButton} from \"@clr/angular\";\nimport {ButtonTitleDirective} from \"./button-title.directive\";\n\n/**\n * Attribute directive used to dynamically arrange child buttons, align some horizontally and\n * put the others into the drop-down list, this directive also add title attribute to the buttons.\n * It can only used on clr-button-group and there should be clr-button in the button group.\n * @maximumInlineActions - The maximum value of inline buttons.\n */\n@Directive({\n   selector: \"clr-button-group[vsan-button-group]\",\n})\nexport class ButtonGroupDirective {\n\n   private static readonly TOGGLE_MENU_BUTTON_SELECTOR: string = \"button.btn.dropdown-toggle\";\n   private static readonly VISIBLE_BUTTON_ELEMENTS_SELECTOR: string = \"button\";\n   private static readonly IN_MENU_BUTTON_ELEMENTS_SELECTOR: string = \"div.clr-button-group-menu > button\";\n\n   // Set the maximum value to 10 to display all buttons inline when there is enough space.\n   private _maximumInlineActions: number = 10;\n\n   @Input(\"vsan-button-group\")\n   set maximumInlineActions(value: number) {\n      if (!!value) {\n         this._maximumInlineActions = value;\n      }\n   }\n\n   private _buttonTitleDirectives: ButtonTitleDirective[] = [];\n\n   @ContentChildren(ButtonTitleDirective, {descendants: true})\n   set buttons(value: ButtonTitleDirective[]) {\n      this._buttonTitleDirectives = value;\n      this._buttonTitleDirectives.forEach(titleDirective => {\n         // Update button title when its title in directive changes.\n         titleDirective.titleChangeEvent.subscribe(() => {\n            setTimeout(this.updateButtonTitles);\n         });\n      });\n\n      // when action buttons with directive are changed (added / removed) some of them may go to the menu with\n      // additional actions. There is no other way found to handle toggle menu event, but click on the toggle button.\n      this.subscribeToggleButtonClick();\n   }\n\n   private _btns: ClrButton[];\n\n   @ContentChildren(ClrButton, {descendants: true})\n   set clrButtons(btns: ClrButton[]) {\n      this._btns = btns;\n      this.updateInMenuButtons();\n   }\n\n   constructor(private elRef: ElementRef) {\n   }\n\n   private updateInMenuButtons(): void {\n      const groupWithMenu: boolean = this._btns.length > this._maximumInlineActions;\n      this._btns.forEach((btn, index) => {\n         if (groupWithMenu) {\n            // When the number of buttons exceeds the maximum and the button overflows, place the button in the menu.\n            btn.inMenu = index >= this._maximumInlineActions - 1;\n         } else {\n            btn.inMenu = false;\n         }\n      });\n   }\n\n   private updateButtonTitles = (): void => {\n      const allButtons: HTMLButtonElement[] = this.getVisibleButtons().concat(this.getInMenuButtons());\n      if (!allButtons.length) {\n         return;\n      }\n\n      // if there is a rendered button for the directive - update its title.\n      this._buttonTitleDirectives.forEach(titleDirective => {\n         allButtons.forEach((button: HTMLElement) => {\n            if (button.getAttribute(\"name\") === titleDirective.host.name) {\n               button.title = titleDirective.title;\n            }\n         });\n      });\n   };\n\n   private subscribeToggleButtonClick(): void {\n      // If there is menu with additional buttons, find the toggle button and update button names on click.\n      setTimeout(() => {\n         const toggleButton: HTMLElement | null = this.getToggleButton();\n\n         // if there is a toggle button set function to handle the click event only once.\n         if (toggleButton && !toggleButton.onclick) {\n            toggleButton.onclick = this.updateButtonTitles;\n         }\n      });\n   }\n\n   // the buttons are visible buttons in button group, toggle menu button\n   private getVisibleButtons(): HTMLButtonElement[] {\n      return Array.from(this.elRef.nativeElement.querySelectorAll(\n            ButtonGroupDirective.VISIBLE_BUTTON_ELEMENTS_SELECTOR));\n   }\n\n   // inMenu buttons are rendered outside of the elRef, get them directly from the document\n   private getInMenuButtons(): HTMLButtonElement[] {\n      return Array.from(this.elRef.nativeElement.ownerDocument.querySelectorAll(\n            ButtonGroupDirective.IN_MENU_BUTTON_ELEMENTS_SELECTOR));\n   }\n\n   private getToggleButton(): HTMLElement | null {\n      return this.elRef.nativeElement.querySelector(ButtonGroupDirective.TOGGLE_MENU_BUTTON_SELECTOR);\n   }\n}","/* Copyright 2017-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Pipe, PipeTransform} from \"@angular/core\";\nimport {DiskData} from \"@generated/disk-data\";\nimport {DiskMgmtDiskUtil} from \"@util/disk-mgmt-disk.util\";\n\n@Pipe({name: 'transportType'})\nexport class TransportTypePipe implements PipeTransform {\n\n   private static _instance: TransportTypePipe;\n\n   static instance(): TransportTypePipe {\n      if (!this._instance) {\n         this._instance = new TransportTypePipe();\n      }\n      return this._instance;\n   }\n\n   transform(value: DiskData.StorageDeviceTransport, ...args: any[]): any {\n      return DiskMgmtDiskUtil.getTransportTypeText(value);\n   }\n}","/* Copyright 2017-2019 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {ClaimOption} from \"@generated/claim-option\";\nimport {Icon} from \"@util/icon\";\nimport {ClaimDisksUtil} from \"@component/diskmgmt/claim-disks-util\";\n\nexport class VsanBaseListItem {\n\n   /* Whether the item is a root.*/\n   isRoot: boolean = true;\n   protected _name: string;\n   protected _claimOption: ClaimOption = ClaimOption.DoNotClaim;\n   protected _capacity: string = \"\";\n\n   get name(): string {\n      return this._name;\n   }\n\n   set name(newName: string) {\n      this._name = newName;\n   }\n\n   /**\n    * Gets the claim option for the root item\n    */\n   get claimOption(): ClaimOption {\n      return this._claimOption;\n   }\n\n   set claimOption(newValue: ClaimOption) {\n      this._claimOption = newValue;\n   }\n\n   /**\n    * Returns the icon corresponding to the current claim option\n    */\n   get claimOptionIcon(): string {\n      if (this.claimOption) {\n         return ClaimDisksUtil.getClaimOptionIcon(ClaimOption[this.claimOption.toString()]);\n      }\n\n      return Icon.EMPTY_ICON;\n   }\n\n   get possibleClaimOptions(): ClaimOption[] {\n      return null;\n   }\n\n   get image(): string {\n      return \"\";\n   }\n\n   /**\n    * Total capacity of the item.\n    */\n   get capacity(): string {\n      return this._capacity;\n   }\n\n   /**\n    * Total capacity of the item.\n    */\n   set capacity(newValue: string) {\n      this._capacity = newValue;\n   }\n\n   /**\n    * Number representation of  the capacity.\n    */\n   get capacityNum(): number {\n      return 0;\n   }\n\n   /**\n    * Children's drive type.\n    */\n   get driveTypeLabel(): string {\n      return \"\";\n   }\n\n   /**\n    * The hostName of the item\n    */\n   get hostName(): string {\n      return \"\";\n   }\n\n   /**\n    * Is the item flash-based\n    */\n   get isFlash(): boolean {\n      return false;\n   }\n\n   /**\n    * Is the item hdd-based\n    */\n   get isHdd(): boolean {\n      return false;\n   }\n\n   /**\n    * Flag denoting if the item is marked as Flash or not\n    */\n   get markedAsFlash(): boolean {\n      return this.isFlash && !this.isHdd;\n   }\n\n   set markedAsFlash(newValue: boolean) {\n      // Don't do anything here\n   }\n}\n","/* Copyright 2017-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {ManagedObject} from \"@service/managed-object\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {VsanDiskData} from \"@generated/vsan-disk-data\";\nimport {ClaimOption} from \"@generated/claim-option\";\nimport {VsanDiskUtil} from \"@util/vsan-disk-util\";\nimport {ScsiDisk} from \"./scsi-disk.data\";\nimport {VsanBaseListItem} from \"./vsan-base-list-item.data\";\nimport {DriveType} from \"./drive-type.data\";\nimport {DiskMgmtUtil} from \"@util/disk-mgmt.util\";\nimport {DiskStatus} from \"@generated/disk-status\";\nimport {DiskMgmtDiskUtil} from \"@util/disk-mgmt-disk.util\";\nimport {ClaimDisksUtil} from \"@component/diskmgmt/claim-disks-util\";\n\nexport class VsanDiskListItem extends VsanBaseListItem {\n\n   private _hostName: string;\n   private _markedAsFlash: boolean;\n\n   private _transportType: string;\n   private _physicalLocation: string;\n   private _selected: boolean;\n   private _issue: string;\n   private _isInDiskGroup: boolean;\n\n   private _rawDiskData: VsanDiskData;\n   private _disk: ScsiDisk;\n   private _transport: any[]; /*com.vmware.vsphere.client.storage.adapters.StorageDeviceTransport*/\n   private _diskStatus: DiskStatus;\n\n   private _possibleClaimOptions: ClaimOption[];\n   private _possibleClaimOptionsIfMarkedAsOppositeType: ClaimOption[];\n\n   diskAdapter: string;\n   vsanUuid: string;\n   hostMor: ManagedObject;\n\n   /**\n    * Flag denoting if the disk is used for cache in an existing disk group\n    */\n   isCacheDisk: boolean;\n\n   /**\n    * Whether the disk is compatible and can be claimed for vsan max.\n    */\n   isVsanMaxCompatible: boolean;\n\n   /* Virtual machines located on this disk */\n   vm: any[]; // VirtualMachine\n\n   /* vSAN File System Version of the disk. Applicable only for disks in use. */\n   fileSystemVersion: string = VsanUiUtils.getString(\"vsan.na.label\");\n\n   /**\n    * Flag indicating whether there is an error on the disk group's SSD disk.\n    */\n   hasErrorOnSsd: boolean = false;\n\n   constructor(data: VsanDiskData, useRecommendedClaimOption: boolean, isAllFlashAvailable: boolean = false) {\n      super();\n      if (!data.disk) {\n         return;\n      }\n\n      this.vsanUuid = data.vsanUuid;\n      this.isRoot = false;\n      this._rawDiskData = data;\n      this._disk = data.disk as ScsiDisk;\n      this.isCacheDisk = data.isCacheDisk;\n      this._isInDiskGroup = !!data.diskGroupUuid;\n      this.isVsanMaxCompatible = data.isVsanMaxCompatible;\n      this._diskStatus = data.diskStatus;\n\n      this.markedAsFlash = this.isFlash;\n      this._possibleClaimOptions = data.possibleClaimOptions;\n      this._possibleClaimOptionsIfMarkedAsOppositeType = data.possibleClaimOptionsIfMarkedAsOppositeType;\n      this.claimOption = this.getInitialClaimOption(data, useRecommendedClaimOption, isAllFlashAvailable);\n   }\n\n   /**\n    * Gets disk's name\n    */\n   get name(): string {\n      if (this._name) {\n         return this._name;\n      }\n\n      return this._name = DiskMgmtDiskUtil.getScsiDiskName(this._disk);\n   }\n\n   set name(newName: string) {\n      this._name = newName;\n   }\n\n   /**\n    * Disk's capacity.\n    */\n   get capacity(): string {\n      if (this._capacity) {\n         return this._capacity;\n      }\n\n      return this._capacity = VsanUiUtils.formatFileSize(this.capacityNum);\n   }\n\n   set capacity(newValue: string) {\n      this._capacity = newValue;\n   }\n\n   get capacityNum(): number {\n      return DiskMgmtUtil.lbaToBytes(this._disk.capacity);\n   }\n\n   get initialDriveType(): string {\n      return ClaimDisksUtil.getLocalizedDriveType(this.isFlash ? DriveType.FLASH : DriveType.HDD);\n   }\n\n   /**\n    * Disk's drive type label.\n    */\n   get driveTypeLabel(): string {\n      return ClaimDisksUtil.getLocalizedDriveType(this.driveType);\n   }\n\n   /**\n    * Disk's drive type.\n    */\n   get driveType(): DriveType {\n      if (this.isFlash) {\n         return !this.markedAsFlash ? DriveType.MARKED_AS_HDD : DriveType.FLASH;\n      } else {\n         return this.markedAsFlash ? DriveType.MARKED_AS_FLASH : DriveType.HDD;\n      }\n   }\n\n   /**\n    * Return possible drive types of a disk.\n    */\n   get possibleDriveTypes(): DriveType[] {\n      return this.isFlash\n            ? [DriveType.FLASH, DriveType.MARKED_AS_HDD]\n            : [DriveType.HDD, DriveType.MARKED_AS_FLASH];\n   }\n\n   /**\n    * Disk's transport type.\n    */\n   get transportType(): string {\n      if (this._transportType) {\n         return this._transportType;\n      }\n\n      this._transportType = \"\";\n\n      if (!this.transport) {\n         return this._transportType;\n      }\n\n      const transportArray: any[] = this._transport;\n      for (let i: number = 0; i < transportArray.length; i++) {\n         const transportElement: any = transportArray[i];\n         if (transportElement) {\n            this._transportType = VsanUiUtils.getString(\"vsan.disk.list.transport.\" + transportElement);\n         }\n      }\n\n      if (!this._transportType.length) {\n         this._transportType = VsanUiUtils.getString(\"vsan.disk.list.transport.unknownTransport\");\n      }\n\n      return this._transportType;\n   }\n\n   get hostName(): string {\n      return this._hostName;\n   }\n\n   set hostName(newHostName: string) {\n      this._hostName = newHostName;\n   }\n\n   /**\n    * Is the item flash-based\n    */\n   get isFlash(): boolean {\n      return !!this.disk.ssd;\n   }\n\n   /**\n    * Is the item hdd-based\n    */\n   get isHdd(): boolean {\n      return !this.isFlash;\n   }\n\n   get markedAsFlash(): boolean {\n      return this._markedAsFlash;\n   }\n\n   set markedAsFlash(newValue: boolean) {\n      if (this._markedAsFlash !== newValue) {\n         if (DiskMgmtDiskUtil.isClaimedForVsan(this.claimOption)) {\n            this.claimOption = ClaimOption.DoNotClaim;\n         }\n         this._markedAsFlash = newValue;\n      }\n   }\n\n   /**\n    * Gets the disk item's image.\n    */\n   get image(): string {\n      return VsanDiskUtil.getDiskImage(this.hasError(), this.isFlash);\n   }\n\n   set possibleClaimOptions(values: ClaimOption[]) {\n      this._possibleClaimOptions = values;\n   }\n\n   get possibleClaimOptions(): ClaimOption[] {\n      const claimOptions: ClaimOption[] = this.markedAsFlash === this.isFlash ?\n            this._possibleClaimOptions :\n            this._possibleClaimOptionsIfMarkedAsOppositeType;\n\n      if (!claimOptions) {\n         return [];\n      }\n\n      return claimOptions;\n   }\n\n   get transport(): any[] {\n      return this._transport;\n   }\n\n   /**\n    * Set disk's transport\n    */\n   set transport(transport: any[]) {\n      this._transport = transport;\n   }\n\n   /**\n    * Gets a scsi disk\n    */\n   get disk(): ScsiDisk {\n      return this._disk;\n   }\n\n   /**\n    * Gets vsan uuid\n    */\n   get uuid(): string {\n      return this._rawDiskData.vsanUuid;\n   }\n\n   /**\n    * Gets disk's uuid.\n    */\n   get diskUuid(): string {\n      return this._disk.uuid;\n   }\n\n   /**\n    * Gets the issues for the current disk.\n    */\n   get issue(): string {\n      if (this._issue) {\n         return this._issue;\n      }\n      this._issue = VsanDiskUtil.getVsanPhysicalDiskIssue(this._rawDiskData);\n      return this._issue;\n   }\n\n   /**\n    * Disk's physical location.\n    */\n   get physicalLocation(): string {\n      if (this._physicalLocation) {\n         return this._physicalLocation;\n      }\n      this._physicalLocation = DiskMgmtDiskUtil.getPhysicalLocation(this._disk.physicalLocation);\n      return this._physicalLocation;\n   }\n\n   /**\n    * Gets if the item is selected.\n    */\n   get selected(): boolean {\n      return this._selected;\n   }\n\n   /**\n    * Set item to selected state.\n    */\n   set selected(value: boolean) {\n      this._selected = value;\n   }\n\n   /**\n    * Get the disk health status of the disk.\n    */\n   get healthStatus(): string {\n      if (!this.isFlash && this.hasErrorOnSsd) {\n         return VsanUiUtils.getString(\"vsan.disk.list.healthStatus.ssdDown\");\n      }\n      return DiskMgmtDiskUtil.getHealth(this._diskStatus);\n   }\n\n   /**\n    * Return true if there is a vsan issue on the disk\n    */\n   get hasVsanIssue(): boolean {\n      return this.issue !== VsanUiUtils.getString(\"vsan.na.label\");\n   }\n\n   /**\n    * Combines the issue and disk health properties of the\n    * disk into single error string.\n    */\n   get aggregatedIssue(): string {\n      const diskHealthStatus: string = this.healthStatus;\n\n      if (!this.isDiskHealthy && this.hasVsanIssue) {\n         return [this.issue, diskHealthStatus].join(\"; \");\n      }\n      if (this.hasVsanIssue) {\n         return this.issue;\n      }\n\n      return diskHealthStatus;\n   }\n\n   /**\n    * Gets the Vendor Model, Capacity information of the disk\n    */\n   get model(): string {\n      return VsanUiUtils.getString(\n            \"vsan.disk.list.diskModelSerialNumber.format\",\n            this.vendor, this.diskModel, this.capacity);\n   }\n\n   /**\n    * Gets the role of the disk in the current disk group if any.\n    */\n   get role(): string {\n      if (this._isInDiskGroup) {\n         return this.isCacheDisk ?\n               VsanUiUtils.getString(\"vsan.disk.list.diskRole.cache\") :\n               VsanUiUtils.getString(\"vsan.disk.list.diskRole.capacity\");\n      }\n      return VsanUiUtils.getString(\"vsan.na.label\");\n   }\n\n   get vendor(): string {\n      return this.disk.vendor && this.disk.vendor.trim();\n   }\n\n   get diskModel(): string {\n      return this.disk.model && this.disk.model.trim();\n   }\n\n   private hasError(): boolean {\n      return !this.isDiskHealthy || this.hasVsanIssue;\n   }\n\n   private get isDiskHealthy(): boolean {\n      return this._diskStatus && this._diskStatus.isDiskHealthy;\n   }\n\n   private getInitialClaimOption(\n         diskData: VsanDiskData, useRecommendedClaimOption: boolean, isAllFlashAvailable: boolean): ClaimOption {\n\n      if (!useRecommendedClaimOption) {\n         return ClaimOption.DoNotClaim;\n      }\n\n      if (isAllFlashAvailable) {\n         return diskData.recommendedAllFlashClaimOption;\n      } else {\n         return diskData.recommendedHybridClaimOption;\n      }\n   }\n}\n","/* Copyright 2017-2022 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, EventEmitter, Input, OnInit, Output} from \"@angular/core\";\nimport {ManagedObject} from \"@service/managed-object\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {VsanDiskMapping} from \"@generated/vsan-disk-mapping\";\nimport {VsanCapabilityProvider} from \"@generated/vsan-capability-provider\";\nimport {VsanDiskListItem} from \"@component/diskmgmt/model/vsan-disk-list-item\";\nimport {ScsiDisk} from \"@component/diskmgmt/model/scsi-disk.data\";\nimport {VsanConfigService} from \"@generated/vsan-config-service\";\nimport {SpaceEfficiencyConfig} from \"@generated/space-efficiency-config\";\nimport {SpaceEfficiencyService} from \"@service/space-efficiency-service\";\nimport {VsanDiskData} from \"@generated/vsan-disk-data\";\nimport {LoadingIndicator} from \"@service/flow/loading-indicator.decorator\";\nimport {Loader} from \"@service/flow/loader.decorator\";\nimport {ErrorMessage} from \"@service/flow/error-message.decorator\";\nimport {DiskManagementService} from \"@generated/disk-management-service\";\n\nexport enum CapacityType {HDD, FLASH}\n\n@Component({\n   templateUrl: \"create-disk-group.html\",\n   styleUrls: [\"create-disk-group.scss\"],\n   selector: \"vsan-create-disk-group-page\",\n})\nexport class CreateDiskGroupComponent implements OnInit {\n\n   private static readonly USE_RECOMMENDED_CLAIM_OPTIONS: boolean = false;\n\n   @Input()\n   isWitnessHost: boolean;\n\n   @Input()\n   hostRef: ManagedObject;\n\n   @Input()\n   clusterRef: ManagedObject;\n\n   @Output()\n   dataLoaded: EventEmitter<void> = new EventEmitter();\n\n   @Output()\n   configChanged: EventEmitter<VsanDiskMapping> = new EventEmitter();\n\n   @Output()\n   validateConfig: EventEmitter<string[]> = new EventEmitter();\n\n   @LoadingIndicator()\n   busy: boolean;\n\n   @ErrorMessage()\n   alertMessage: string;\n\n   selectedCacheDisk: VsanDiskListItem;\n   cacheDisks: VsanDiskListItem[] = [];\n   capacityDisks: VsanDiskListItem[] = [];\n   capacityHdds: VsanDiskListItem[] = [];\n   capacityFlashDisks: VsanDiskListItem[] = [];\n   capacityFlashDisksToShow: VsanDiskListItem[] = [];\n   isAllFlashAvailable: boolean = false;\n   spaceEfficiencyConfig: SpaceEfficiencyConfig = SpaceEfficiencyConfig.NONE;\n   selectedPerspective: CapacityType;\n\n   perspectives: string[] = [\n      VsanUiUtils.getString(\"vsan.faultDomains.stretchedCluster.wizard.configure.page.claimDisks.hdd\"),\n      VsanUiUtils.getString(\"vsan.faultDomains.stretchedCluster.wizard.configure.page.claimDisks.flash\"),\n   ];\n\n   private _selectedCapacityDisks: VsanDiskListItem[] = [];\n\n   set selectedCapacityDisks(values: VsanDiskListItem[]) {\n      this._selectedCapacityDisks = values;\n      this.configChanged.emit(this.getDiskMapping());\n      this.validate();\n   }\n\n   get selectedCapacityDisks(): VsanDiskListItem[] {\n      return this._selectedCapacityDisks;\n   }\n\n   constructor(private diskManagementService: DiskManagementService,\n         private capabilityProvider: VsanCapabilityProvider,\n         private vsanConfigService: VsanConfigService,\n         private spaceEfficiencyService: SpaceEfficiencyService) {\n   }\n\n   @Loader()\n   async ngOnInit(): Promise<void> {\n      this.reset();\n      const data: any = await this.requestData();\n      this.onDisksDataRetrieved(data);\n   }\n\n   private reset(): void {\n      this.alertMessage = null;\n      this.selectedCacheDisk = null;\n      this.selectedCapacityDisks = [];\n      this.cacheDisks = [];\n      this.capacityHdds = [];\n      this.capacityFlashDisks = [];\n      this.capacityFlashDisksToShow = [];\n   }\n\n   async requestData(): Promise<any[]> {\n      const promises: Promise<any>[] = [];\n      promises.push(this.capabilityProvider.getIsAllFlashSupportedOnHost(this.hostRef));\n      promises.push(this.diskManagementService.getEligibleDisks(this.hostRef));\n      // Only request this, when the current host is not a witness\n      if (!this.isWitnessHost) {\n         promises.push(this.vsanConfigService.getSpaceEfficiencyStatus(this.clusterRef));\n      }\n\n      return Promise.all(promises);\n   }\n\n   onDisksDataRetrieved(result: any[]): void {\n      this.isAllFlashAvailable = result[0];\n      const eligibleDisks: VsanDiskData[] = result[1];\n      for (const diskData of eligibleDisks) {\n         // if disk is flash\n         if (diskData.disk.ssd) {\n            this.cacheDisks.push(this.createVsanDiskListItem(diskData));\n            // Populate capacity flash disks only if all-flash is supported\n            if (this.isAllFlashAvailable) {\n               this.capacityFlashDisks.push(this.createVsanDiskListItem(diskData));\n               this.capacityFlashDisksToShow.push(this.createVsanDiskListItem(diskData));\n            }\n         } else {\n            this.capacityHdds.push(this.createVsanDiskListItem(diskData));\n         }\n      }\n\n      if (!this.isWitnessHost) {\n         this.spaceEfficiencyConfig = result[2];\n      }\n\n      this.updatePerspective();\n      this.dataLoaded.emit();\n   }\n\n   private createVsanDiskListItem(diskData: VsanDiskData): VsanDiskListItem {\n      return new VsanDiskListItem(diskData, CreateDiskGroupComponent.USE_RECOMMENDED_CLAIM_OPTIONS);\n   }\n\n   updatePerspective(): void {\n      if (this.isAllFlashAvailable) {\n         this.selectedPerspective = this.capacityHdds.length < 1 ?\n               CapacityType.FLASH :\n               CapacityType.HDD;\n      } else {\n         this.selectedPerspective = CapacityType.HDD;\n      }\n      this.updateCapacityDisks();\n   }\n\n   updateCapacityDisks(): void {\n      // Note: use \"==\" here as the select's value is a string \"0\"/\"1\", which is not matching the enum if using ===\n      // tslint:disable-next-line\n      this.capacityDisks = this.selectedPerspective == CapacityType.FLASH ?\n            this.capacityFlashDisksToShow :\n            this.capacityHdds;\n      this.validate();\n      this.configChanged.emit(this.getDiskMapping());\n   }\n\n   private validate(): void {\n      const errors: any[] = [];\n\n      if (this.selectedCacheDisk == null) {\n         errors.push(VsanUiUtils.getString(\"vsan.dialog.createDiskGroup.error.selectSsd\"));\n      }\n      if (this.selectedCapacityDisks.length < 1) {\n         errors.push(VsanUiUtils.getString(\"vsan.dialog.createDiskGroup.error.selectDisks\"));\n      }\n      if (this.spaceEfficiencyService.isOnlyAllFlashSupportedForClaimingDisks(this.spaceEfficiencyConfig)\n            && !this.isWitnessHost\n            && this.selectedCapacityDisks.some(storageDisk => !storageDisk.disk.ssd)) {\n         errors.push(VsanUiUtils.getString(\n               \"vsan.dialog.semiAutoClaimDialog.confError.dataEfficiencyWithHdds\",\n               this.spaceEfficiencyService.toLabel(this.spaceEfficiencyConfig)));\n      }\n      this.validateConfig.emit(errors);\n   }\n\n   private getDiskMapping(): VsanDiskMapping {\n      if (!this.selectedCacheDisk || !this.selectedCapacityDisks) {\n         return null;\n      }\n      const capacityDisks: ScsiDisk[] = [];\n      for (const diskItem of this.selectedCapacityDisks) {\n         capacityDisks.push(diskItem.disk);\n      }\n\n      return VsanDiskMapping.Factory.create(this.selectedCacheDisk.disk, capacityDisks);\n   }\n\n   getDatagridFooterText(items: VsanDiskListItem[]): string {\n      return VsanUiUtils.getDatagridFooterLabel(items);\n   }\n\n   onCacheDiskSelectionChanged(selectedDisk: VsanDiskListItem): void {\n      this.selectedCacheDisk = selectedDisk;\n\n      // filter the capacity flash disks\n      this.capacityFlashDisksToShow = this.capacityFlashDisks.filter(item => item.disk !== selectedDisk.disk);\n      this.updateCapacityDisks();\n   }\n}\n","<!--Copyright 2021 VMware, Inc. All rights reserved. -- VMware Confidential-->\n<vsan-validation *ngIf=\"errorMessage\" [alert]=\"errorMessage\" [allowClose]=\"false\"></vsan-validation>\n<clr-datagrid id=\"disksDatagrid\"\n              [(clrDgSelected)]=\"selectedDisks\"\n              [clrDgLoading]=\"busy\"\n              (clrDgSelectedChange)=\"diskSelectionChange()\">\n\n   <!-- Datagrid Header -->\n   <clr-dg-column [clrDgField]=\"'name'\" class=\"name-column\">\n      {{\"vsan.disk.list.name\" | localized}}\n   </clr-dg-column>\n   <clr-dg-column *ngIf=\"isVsanMaxEnabled\" [clrDgField]=\"'isVsanMaxCompatible'\">\n      {{\"vsan.disk.list.isVsanMaxCompatible\" | localized}}\n   </clr-dg-column>\n   <clr-dg-column>\n      {{\"vsan.disk.list.driveType\" | localized}}\n   </clr-dg-column>\n   <clr-dg-column [clrDgField]=\"'capacity'\">\n      {{\"vsan.disk.list.capacity\" | localized}}\n   </clr-dg-column>\n   <clr-dg-column [clrDgField]=\"'transportType'\">\n      {{\"vsan.disk.list.transportType\" | localized}}\n   </clr-dg-column>\n   <clr-dg-column [clrDgField]=\"'diskAdapter'\">\n      {{\"vsan.disk.list.diskAdapter\" | localized}}\n   </clr-dg-column>\n\n   <!-- Datagrid Content -->\n   <clr-dg-row *clrDgItems=\"let disk of eligibleDisks\" [clrDgItem]=\"disk\">\n      <clr-dg-cell vsan-show-title>\n         <clr-icon [attr.shape]=\"getIcon(disk)\"></clr-icon>\n         {{disk.name}}\n      </clr-dg-cell>\n      <clr-dg-cell *ngIf=\"isVsanMaxEnabled\">\n         <vsan-icon-item [isIconSolid]=\"true\"\n                         [shape]=\"getIsVsanMaxCompatibleIconShape(disk)\"\n                         [iconClass]=\"Icon.clrIconShapeClassMap[this.getIsVsanMaxCompatibleIconShape(disk)]\"\n                         [label]=\"getIsVsanMaxCompatibleLabel(disk)\">\n         </vsan-icon-item>\n      </clr-dg-cell>\n      <clr-dg-cell>{{getDriveType(disk) | diskTypeLabel}}</clr-dg-cell>\n      <clr-dg-cell class=\"right-align-cell\">{{disk.capacity.total | fileSize}}</clr-dg-cell>\n      <clr-dg-cell>{{disk.transportType | transportType}}</clr-dg-cell>\n      <clr-dg-cell>{{disk.diskAdapter}}</clr-dg-cell>\n   </clr-dg-row>\n\n   <!-- Datagrid Footer -->\n   <clr-dg-footer>\n      <span *ngIf=\"eligibleDisks?.length === 1\">\n         {{\"vsan.common.datagrid.item\" | localized: eligibleDisks.length}}\n      </span>\n      <span *ngIf=\"eligibleDisks?.length > 1\">\n         {{\"vsan.common.datagrid.items\" | localized: eligibleDisks.length}}\n      </span>\n   </clr-dg-footer>\n</clr-datagrid>\n\n<vsan-validation *ngIf=\"hasVsanMaxWarning\"\n                 id=\"vsan-max-disk-selection-warning\"\n                 [alertType]=\"'warning'\"\n                 [allowClose]=\"false\"\n                 [alert]=\"'vsan.dialog.semiAutoClaimDialog.warning.vsanMaxIncompatibleDisks' | localized\">\n</vsan-validation>"]}