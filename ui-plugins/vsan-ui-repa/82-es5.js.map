{"version":3,"sources":["webpack:///src/app/vsan/common/component/placement-details/placement-details.component.ts","webpack:///src/app/vsan/common/component/placement-details/placement-details-grouped.html","webpack:///src/app/vsan/common/component/placement-details/placement-details-grouped.component.ts","webpack:///src/app/vsan/common/component/datagrid/filter/base-filter.ts","webpack:///src/app/vsan/common/component/inventory/inventory-browser.module.ts","webpack:///src/app/vsan/common/component/placement-details/placement-details.html","webpack:///src/app/vsan/common/component/search/search.module.ts","webpack:///src/app/vsan/common/component/placement-details/model/virtual-object-branch-model.ts"],"names":["PlacementDetailsComponent","physicalPlacementService","configService","isGrouped","_loadingObjects","loadingObjects","queryPlacementData","_selectedVirtualObjects","objects","isEmpty","clusterRef","getObjectsUuids","size","Promise","all","isVsanMaxEnabled","getPhysicalPlacement","getVsanObjectUuids","vsanDirectObjects","placementData","physicalPlacementDetails","toMap","savePhysicalPlacementDetails","Set","selectedVirtualObjects","map","virtualObject","uid","filter","vo","diskUuid","isSet","Factory","create","name","data","Map","has","forEach","set","get","PlacementDetailsGroupedComponent","DatastoreType","onError","physicalObjects","model","children","pathByVsanUuid","loadData","virtualObjects","hostAndDisksData","prepareHostsAndDisksTree","rootItems","length","select","selectedModel","virtualComponents","keys","uuid","models","JSON","parse","stringify","applyFilter","push","getPlacement","id","isSelected","componentsByVirtualObject","value","_virtualObjects","child","filterModel","predicate","comp","filterBy","hostUuid","host","nodeUuid","cacheUuid","cacheDisk","capacityUuid","capacityDisk","capacityUuids","includes","filterChildren","filterFunction","i","splice","hostByUuid","groupByUuid","unknownDisks","incrementIssue","issue","issueCount","issues","incrementedIssue","DEGRADED","ABSENT","acceptPartialModel","hasDisk","disk","unknownDisk","createDisk","state","ACTIVE","acceptModel","placement","c","hostData","createHost","hasState","datastoreType","VSAN","groupUuid","getGroupUuid","createCapacityDisk","group","createGroup","indexOf","find","values","components","component","Object","unknownDisksEntry","getString","unknownGroup","diskId","hostUuids","sortDiskGroups","diskGroup","every","BaseFilter","search","label","toLowerCase","accepts","InventoryBrowserModule","SearchModule","VirtualObjectBranchModel","iconId","tooltip","faultDomain","navigationTarget","createVsanDiskGroup","VSAN_DIRECT","PMEM","createManagedByVsanDiskGroup","result","cacheModel","capacityModel","DISK_GROUP_IMAGE"],"mappings":"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","file":"82-es5.js","sourcesContent":["/* Copyright 2017-2022 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, Input, OnInit} from \"@angular/core\";\nimport {PhysicalPlacementService} from \"@generated/physical-placement-service\";\nimport {VirtualObjectBasicModel} from \"@generated/virtual-object-basic-model\";\nimport {VirtualObjectModel} from \"@generated/virtual-object-model\";\nimport {VirtualObjectPlacementModel} from \"@generated/virtual-object-placement-model\";\nimport {VsanConfigService} from \"@generated/vsan-config-service\";\nimport {ErrorMessage} from \"@service/flow/error-message.decorator\";\nimport {Loader} from \"@service/flow/loader.decorator\";\nimport {ManagedObject} from \"@service/managed-object\";\nimport {MapUtil} from \"@util/map-util\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\n\n@Component({\n   templateUrl: \"placement-details.html\",\n   styleUrls: [\"placement-details.scss\"],\n   selector: \"vsan-placement-details\",\n})\nexport class PlacementDetailsComponent implements OnInit {\n\n   @Input()\n   isGrouped: boolean = false;\n\n   @Input()\n   vmRef: ManagedObject;\n\n   private _loadingObjects: boolean;\n\n   @Input()\n   set loadingObjects(loadingObjects: boolean) {\n      this._loadingObjects = loadingObjects;\n      if (!loadingObjects) {\n         this.queryPlacementData();\n      }\n   }\n\n   get loadingObjects(): boolean {\n      return this._loadingObjects;\n   }\n\n   private _selectedVirtualObjects: VirtualObjectModel[];\n\n   @Input()\n   set selectedVirtualObjects(objects: VirtualObjectModel[]) {\n      this._selectedVirtualObjects = objects;\n      if (VsanUiUtils.isEmpty(objects)) {\n         return;\n      }\n      this.queryPlacementData();\n   }\n\n   get selectedVirtualObjects(): VirtualObjectModel[] {\n      return this._selectedVirtualObjects;\n   }\n\n   @Input()\n   virtualObjects: VirtualObjectModel[];\n\n   @Input()\n   clusterRef: ManagedObject;\n\n   @ErrorMessage()\n   errorMessage: string;\n\n   data: Map<string, VirtualObjectPlacementModel[]>;\n   isVsanMaxEnabled: boolean;\n\n   constructor(private physicalPlacementService: PhysicalPlacementService,\n         private configService: VsanConfigService) {\n   }\n\n   async ngOnInit(): Promise<void> {\n      await this.queryPlacementData();\n   }\n\n   @Loader()\n   private async queryPlacementData(): Promise<void> {\n      if (this.loadingObjects || !this.clusterRef || this.getObjectsUuids().size === 0) {\n         return;\n      }\n\n      let placementData: any;\n      [this.isVsanMaxEnabled, placementData] = await Promise.all([\n         this.configService.isVsanMaxEnabled(this.clusterRef),\n         this.physicalPlacementService.getPhysicalPlacement(\n               this.clusterRef,\n               this.getVsanObjectUuids(),\n               this.vsanDirectObjects),\n      ]);\n      const physicalPlacementDetails: Map<string, VirtualObjectPlacementModel[]> =\n            MapUtil.toMap<string, VirtualObjectPlacementModel[]>(placementData);\n      this.savePhysicalPlacementDetails(physicalPlacementDetails);\n   }\n\n   private getObjectsUuids(): Set<string> {\n      return new Set(this.selectedVirtualObjects?.map(virtualObject => virtualObject.uid));\n   }\n\n   private getVsanObjectUuids(): string[] {\n      return [...new Set(this.selectedVirtualObjects?.filter(vo => vo.diskUuid === null).map(vo => vo.uid))];\n   }\n\n   private get vsanDirectObjects(): VirtualObjectBasicModel[] {\n      return this.selectedVirtualObjects?.filter(vo => VsanUiUtils.isSet(vo.diskUuid))\n            .map(vo => VirtualObjectBasicModel.Factory.create(vo.uid, vo.name, vo.diskUuid));\n   }\n\n   private savePhysicalPlacementDetails(physicalPlacementDetails: Map<string, VirtualObjectPlacementModel[]>): void {\n      this.data = new Map<string, VirtualObjectPlacementModel[]>();\n      // Keep the original order of the selected virtual objects\n      this.selectedVirtualObjects\n            .filter(virtualObject => physicalPlacementDetails.has(virtualObject.uid))\n            .forEach(virtualObject => this.data.set(virtualObject.uid, physicalPlacementDetails.get(virtualObject.uid)));\n   }\n}","<!--Copyright 2017-2022 VMware, Inc. All rights reserved. -- VMware Confidential-->\n<div id=\"hosts-and-disks\">\n   <div>\n      {{\"vsan.monitor.cluster.virtualObjects.action.viewDetails.tabs.placement.hostsAndDisksLabel\" | localized}}\n   </div>\n\n   <div *ngIf=\"!physicalObjects?.rootItems?.length\" class=\"spinner central-spinner\">{{\"vsan.loading\" | localized}}</div>\n\n   <clr-datagrid *ngIf=\"physicalObjects?.rootItems.length\">\n      <clr-dg-column vsan-show-title>\n         {{\"vsan.monitor.cluster.virtualObjects.action.viewDetails.tabs.placement.name\" | localized}}\n      </clr-dg-column>\n      <clr-dg-column vsan-show-title>\n         {{\"vsan.monitor.cluster.virtualObjects.action.viewDetails.tabs.placement.state\" | localized}}\n      </clr-dg-column>\n\n      <clr-dg-row *ngFor=\"let row of physicalObjects.rows\"\n                  (click)=\"select(row.data)\"\n                  [class.grid-row-selected]=\"isSelected(row.data)\">\n         <clr-dg-cell vsan-show-title>\n            <vsan-expand [row]=\"row\"></vsan-expand>\n            <clr-icon *ngIf=\"row.data.iconId\" [attr.shape]=\"row.data.iconId\"></clr-icon>\n            <span [title]=\"row.data.tooltip\" [ngClass]=\"row.data.navigationTarget ? 'highlight-text' : ''\">\n               {{row.data.label}}\n            </span>\n            <span *ngIf=\"row.data.faultDomain\">({{row.data.faultDomain}})</span>\n         </clr-dg-cell>\n         <clr-dg-cell vsan-show-title>\n            <ng-container *ngIf=\"row.data.hasState\">\n               <div *ngIf=\"row.data.issues > 0; else noErrors\">\n                  <clr-icon [attr.shape]=\"row.data.incrementedIssue | componentStateIconShape\"\n                            [ngClass]=\"row.data.incrementedIssue | componentStateIconClass\"\n                            class=\"is-solid\">\n                  </clr-icon>\n                  <span class=\"state-label\">\n                     {{(row.data.issues > 1\n                        ? \"vsan.monitor.cluster.virtualObjects.action.viewDetails.tabs.placement.state.unhealthy.manyIssues\"\n                        : \"vsan.monitor.cluster.virtualObjects.action.viewDetails.tabs.placement.state.unhealthy.oneIssue\")\n                        | localized: row.data.issues}}\n                  </span>\n               </div>\n               <ng-template #noErrors>\n                  <clr-icon shape=\"success-standard\" class=\"is-solid is-success\" aria-hidden=\"true\"></clr-icon>\n                  <span class=\"state-label\">\n                     {{\"vsan.monitor.cluster.virtualObjects.action.viewDetails.tabs.placement.state.healthy\" | localized}}\n                  </span>\n               </ng-template>\n            </ng-container>\n         </clr-dg-cell>\n      </clr-dg-row>\n   </clr-datagrid>\n</div>\n\n<div id=\"virtual-components\">\n   <div>\n      {{\"vsan.monitor.cluster.virtualObjects.action.viewDetails.tabs.placement.virtualComponentsLabel\" | localized}}\n   </div>\n   <clr-stack-view *ngFor=\"let row of virtualComponents\">\n      <clr-stack-block *ngIf=\"row.datastoreType === DatastoreType.VSAN\" [clrSbExpanded]=\"true\">\n         <clr-stack-label>\n            <virtual-objects-placement-details-path [path]=\"row.path\"\n                                                    [isTooltipVisible]=\"false\">\n            </virtual-objects-placement-details-path>\n         </clr-stack-label>\n         <!--List all components of a given virtual object-->\n         <clr-stack-block *ngFor=\"let child of row.lastLevelComponents\">\n            <clr-stack-label>\n               {{child.label}}\n            </clr-stack-label>\n            <clr-stack-content>\n               <physical-placement-property-box [model]=\"child\"></physical-placement-property-box>\n            </clr-stack-content>\n         </clr-stack-block>\n      </clr-stack-block>\n      <clr-stack-block *ngIf=\"row.datastoreType !== DatastoreType.VSAN\" [clrSbExpanded]=\"true\">\n         <clr-stack-label>\n            <ng-container *ngIf=\"row.label && !row.path\">\n               <!--When we have label-->\n               <clr-icon *ngIf=\"row.iconId\" [attr.shape]=\"row.iconId\"></clr-icon>\n               <span>{{row.label}}</span>\n            </ng-container>\n            <ng-container *ngIf=\"row.path && !row.label\">\n               <!--When we have path-->\n               <virtual-objects-placement-details-path [path]=\"row.path\"\n                                                       [isTooltipVisible]=\"false\">\n               </virtual-objects-placement-details-path>\n            </ng-container>\n         </clr-stack-label>\n      </clr-stack-block>\n   </clr-stack-view>\n</div>\n","/* Copyright 2017-2022 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, EventEmitter, Input, Output} from \"@angular/core\";\nimport {TreeDatagrid} from \"@component/datagrid/tree-datagrid\";\nimport {VirtualObjectBranchModel} from \"@component/placement-details/model/virtual-object-branch-model\";\nimport {PlacementDetailsUtil} from \"@component/placement-details/placement-details-util\";\nimport {DatastoreType} from \"@generated/datastore-type\";\nimport {VirtualObjectModel} from \"@generated/virtual-object-model\";\nimport {VirtualObjectPlacementModel} from \"@generated/virtual-object-placement-model\";\nimport {VsanComponentState} from \"@generated/vsan-component-state\";\nimport {DiskMgmtUtil} from \"@util/disk-mgmt.util\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\n\n@Component({\n   templateUrl: \"placement-details-grouped.html\",\n   styleUrls: [\"placement-details-grouped.scss\"],\n   selector: \"virtual-objects-placement-details-grouped\",\n})\nexport class PlacementDetailsGroupedComponent {\n\n   DatastoreType: typeof DatastoreType = DatastoreType;\n   private componentsByVirtualObject: Map<string, VirtualObjectPlacementModel[]>;\n   private _virtualObjects: VirtualObjectModel[];\n\n   @Input()\n   isVsanMaxEnabled: boolean;\n\n   @Output()\n   onError: EventEmitter<string> = new EventEmitter<string>();\n\n   physicalObjects: TreeDatagrid = new TreeDatagrid(model => model.children);\n\n   virtualComponents: any[];\n\n   pathByVsanUuid: any = {}; // vsanUuid => VirtualObjectModel[]\n\n   selectedModel: any;\n\n   @Input()\n   set data(value: Map<string, VirtualObjectPlacementModel[]>) {\n      this.componentsByVirtualObject = value;\n      if (!value) {\n         this.physicalObjects.rootItems = [];\n         return;\n      }\n      this.loadData();\n   }\n\n   get data(): Map<string, VirtualObjectPlacementModel[]> {\n      return this.componentsByVirtualObject;\n   }\n\n   @Input()\n   set virtualObjects(models: VirtualObjectModel[]) {\n      models.forEach(model => {\n         if (model.uid) {\n            this.pathByVsanUuid[model.uid] = [model];\n         }\n         if (model.children) {\n            model.children.forEach(child => {\n               if (child.uid) {\n                  this.pathByVsanUuid[child.uid] = [model, child];\n               }\n            });\n         }\n      });\n      this._virtualObjects = models;\n      this.loadData();\n   }\n\n   get virtualObjects(): VirtualObjectModel[] {\n      return this._virtualObjects;\n   }\n\n   loadData = () => {\n      if (!this.virtualObjects) {\n         return;\n      }\n\n      const hostAndDisksData: any[] = this.prepareHostsAndDisksTree();\n      this.physicalObjects.rootItems = hostAndDisksData;\n      if (hostAndDisksData.length > 0) {\n         this.select(hostAndDisksData[0]);\n      }\n   };\n\n   select = (model: any) => {\n      if (!this.physicalObjects?.rootItems?.length) {\n         return;\n      }\n      this.selectedModel = model;\n      this.virtualComponents = [];\n\n      if (!model) {\n         return;\n      }\n\n      for (const uuid of this.data.keys()) {\n         // deep clone the models, because the mergeSingleRaidConfig will move the\n         // raid config children to the upper level and\n         // we don't want to change the original data as well\n         const models: VirtualObjectPlacementModel[] = JSON.parse(JSON.stringify(this.data.get(uuid)));\n\n         this.applyFilter(models, model);\n\n         if (models.length) {\n            this.virtualComponents.push(PlacementDetailsUtil.getPlacement(\n                  uuid, models, this.virtualObjects, (id) => this.pathByVsanUuid[uuid]));\n         }\n      }\n   };\n\n   isSelected = (model: any) => this.selectedModel === model;\n\n   private applyFilter(models: VirtualObjectPlacementModel[], filterModel: any) {\n      const predicate = (comp: VirtualObjectPlacementModel, filterBy: any) => {\n         if (filterBy.hostUuid) {\n            return filterBy.hostUuid === (comp.host\n                  ? comp.host.nodeUuid\n                  : \"\");\n         } else if (filterBy.cacheUuid) {\n            return filterBy.cacheUuid === (comp.cacheDisk\n                  ? comp.cacheDisk.nodeUuid\n                  : \"\");\n         } else if (filterBy.capacityUuid) {\n            return filterBy.capacityUuid === (comp.capacityDisk\n                  ? comp.capacityDisk.nodeUuid\n                  : \"\");\n         } else if (filterBy.capacityUuids) {\n            return filterBy.capacityUuids.includes(comp.capacityDisk.nodeUuid);\n         } else if (filterBy.children) {\n            for (const child of filterBy.children) {\n               if (predicate(comp, child)) {\n                  return true;\n               }\n            }\n         }\n         return false;\n      };\n      // apply the filter to the last level components\n      this.filterChildren(models, filterModel, predicate);\n   }\n\n   private filterChildren(models: VirtualObjectPlacementModel[], filterModel: any, filterFunction: (...args) => any) {\n      for (let i = models.length - 1; i >= 0; i--) {\n         if (models[i].children) {\n            this.filterChildren(models[i].children, filterModel, filterFunction);\n         } else {\n            if (!filterFunction(models[i], filterModel)) {\n               models.splice(i, 1);\n            }\n         }\n\n         // when all children are filtered out, remove the parent element\n         if (models[i] && models[i].children && models[i].children.length === 0) {\n            models.splice(i, 1);\n         }\n      }\n   }\n\n   private prepareHostsAndDisksTree(): any[] {\n      const hostByUuid = {};\n      const groupByUuid = {};\n      const unknownDisks = {};\n\n      // Set DEGRADED or ABSENT aggregate state per object, so we can show warning or error icon if there are issues.\n      const incrementIssue = (model: VirtualObjectBranchModel, issue: VsanComponentState, issueCount: number = 1) => {\n         model.issues += issueCount;\n         if (!model.incrementedIssue) {\n            model.incrementedIssue =\n                  (issue === VsanComponentState.DEGRADED)\n                        ? VsanComponentState.DEGRADED\n                        : VsanComponentState.ABSENT;\n         } else if ((model.incrementedIssue !== issue) && (issue === VsanComponentState.DEGRADED)) {\n            model.incrementedIssue = VsanComponentState.DEGRADED;\n         }\n      };\n\n      const acceptPartialModel = (model: VirtualObjectPlacementModel) => {\n         const hasDisk = (disk: VirtualObjectPlacementModel) => disk && disk.nodeUuid;\n\n         if (hasDisk(model.cacheDisk)) {\n            let unknownDisk = unknownDisks[model.cacheDisk.nodeUuid];\n            if (!unknownDisk) {\n               unknownDisk = VirtualObjectBranchModel.createDisk(model.cacheDisk, true);\n               unknownDisks[model.cacheDisk.nodeUuid] = unknownDisk;\n            }\n            if (model.state !== VsanComponentState.ACTIVE) {\n               incrementIssue(unknownDisk, model.state);\n            }\n         }\n\n         if (hasDisk(model.capacityDisk)) {\n            let unknownDisk = unknownDisks[model.capacityDisk.nodeUuid];\n            if (!unknownDisk) {\n               unknownDisk = VirtualObjectBranchModel.createDisk(model.capacityDisk, true);\n               unknownDisk.capacityUuid = model.capacityDisk.nodeUuid;\n               unknownDisks[model.capacityDisk.nodeUuid] = unknownDisk;\n            }\n            if (model.state !== VsanComponentState.ACTIVE) {\n               incrementIssue(unknownDisk, model.state);\n            }\n         }\n      };\n\n      const acceptModel = (placement: VirtualObjectPlacementModel) => {\n         if (placement.children) {\n            return placement.children.forEach(c => acceptModel(c));\n         }\n\n         if (!placement.host) {\n            return acceptPartialModel(placement);\n         }\n\n         let hostData: VirtualObjectBranchModel = hostByUuid[placement.host.nodeUuid];\n         if (!hostData) {\n            hostData = VirtualObjectBranchModel.createHost(placement.host);\n            hostByUuid[placement.host.nodeUuid] = hostData;\n         }\n\n         const hasState: boolean = placement.datastoreType === DatastoreType.VSAN;\n         if (hasState) {\n            // If at least one object placed on that host has state, then the host also has a state\n            hostData.hasState = true;\n         }\n\n         const groupUuid: string = PlacementDetailsUtil.getGroupUuid(placement, this.isVsanMaxEnabled);\n         const capacityDisk: VirtualObjectBranchModel =\n               VirtualObjectBranchModel.createCapacityDisk(placement, hasState);\n\n         let group: VirtualObjectBranchModel = groupByUuid[groupUuid];\n         if (!group) {\n            group = VirtualObjectBranchModel.createGroup(placement, capacityDisk, this.isVsanMaxEnabled);\n            groupByUuid[groupUuid] = group;\n            hostData.children.push(group);\n         } else if (group.capacityUuids?.indexOf(placement.capacityDisk?.nodeUuid) < 0) {\n            group.children.push(capacityDisk);\n            group.capacityUuids.push(capacityDisk.capacityUuid);\n         }\n\n         if (hasState && placement.state !== VsanComponentState.ACTIVE) {\n            incrementIssue(hostData, placement.state);\n            incrementIssue(group, placement.state);\n\n            // Find the concrete disk and increment its issues number\n            const disk: VirtualObjectBranchModel = group.children?.find((vo: VirtualObjectBranchModel) => {\n               return vo.capacityUuid === placement.capacityDisk.nodeUuid;\n            });\n            if (disk) {\n               incrementIssue(disk, placement.state);\n            }\n         }\n      };\n\n      for (const components of this.componentsByVirtualObject.values()) {\n         components.forEach(component => acceptModel(component));\n      }\n\n      if (Object.keys(unknownDisks).length > 0) {\n         const unknownDisksEntry: string = VsanUiUtils.getString(\n               \"vsan.monitor.cluster.virtualObjects.action.viewDetails.tabs.placement.unknownGroup\");\n         const unknownGroup: VirtualObjectBranchModel =\n               new VirtualObjectBranchModel(null, unknownDisksEntry, [], unknownDisksEntry);\n         Object.keys(unknownDisks).forEach(diskId => {\n            const disk = unknownDisks[diskId];\n            unknownGroup.children.push(disk);\n            incrementIssue(unknownGroup, disk.incrementedIssue, disk.issues);\n         });\n         hostByUuid[unknownDisksEntry] = unknownGroup;\n      }\n\n      const hostUuids: string[] = Object.keys(hostByUuid);\n\n      return hostUuids.map(uid => {\n         DiskMgmtUtil.sortDiskGroups(hostByUuid[uid].children, (diskGroup: VirtualObjectBranchModel) => {\n            return !VsanUiUtils.isEmpty(diskGroup.cacheUuid)\n                  && diskGroup.hasState\n                  && diskGroup.children.every(disk => disk.hasState);\n         });\n\n         return hostByUuid[uid];\n      });\n   }\n}\n","/* Copyright 2017-2020 VMware, Inc. All rights reserved. -- VMware Confidential */\n\nimport {Filter, TreeDatagridRow} from \"../tree-datagrid\";\nimport {ClrDatagridStringFilterInterface} from \"@clr/angular\";\n\n/**\n * Abstract filter class that needs to be extended in order to implement custom filtration.\n * The class has a single abstract method that takes an object of type T and returns its\n * string representation.\n */\nexport class BaseFilter<T> implements ClrDatagridStringFilterInterface<T>, Filter {\n\n   accepts(data: T, search: string): boolean {\n      // Handle correctly TreeDatagrid components\n      if (data instanceof TreeDatagridRow) {\n         data = data.data;\n      }\n\n      let label: string = this.stringify(data);\n      if (label) {\n         // Compare ignoring the case\n         return label.toLowerCase().indexOf(search.toLowerCase()) != -1;\n      } else {\n         return false;\n      }\n   }\n\n   match(data: T, search: string): boolean {\n      return this.accepts(data, search);\n   }\n\n   protected stringify(data: T): string  {\n      return data + \"\";\n   }\n\n}\n\n","/* Copyright 2019-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {NgModule} from \"@angular/core\";\nimport {CommonModule} from \"@angular/common\";\nimport {FormsModule} from \"@angular/forms\";\nimport {ClarityModule} from \"@clr/angular\";\nimport {CommonPipeModule} from \"@pipe/common-pipe.module\";\nimport {InventoryBrowserComponent} from \"@component/inventory/inventory-browser.component\";\nimport {InventoryNodeComponent} from \"@component/inventory/inventory-node.component\";\nimport {WitnessCandidateInventoryService} from \"@generated/witness-candidate-inventory-service\";\nimport {DatacenterInventoryService} from \"@generated/datacenter-inventory-service\";\nimport {NetworkInventoryService} from \"@generated/network-inventory-service\";\nimport {ComputeInventoryService} from \"@generated/compute-inventory-service\";\nimport {IoInsightInventoryService} from \"@generated/io-insight-inventory-service\";\nimport {SearchModule} from \"@component/search/search.module\";\nimport {TreeNodeComponent} from \"@component/inventory/tree-view/tree-node.component\";\nimport {TreeViewComponent} from \"@component/inventory/tree-view/tree-view.component\";\nimport {DropdownObjectSelectorComponent} from \"@component/inventory/dropdown-object-selector/dropdown-object-selector.component\";\nimport {CommonDirectiveModule} from \"@directive/common-directive.module\";\nimport {InventoryNodesComponent} from \"@component/inventory/inventory-nodes.component\";\nimport {TreeNodesComponent} from \"@component/inventory/tree-view/tree-nodes.component\";\n\n@NgModule({\n   imports: [\n      CommonModule,\n      FormsModule,\n      ClarityModule,\n      CommonPipeModule,\n      SearchModule,\n      CommonDirectiveModule,\n   ],\n   declarations: [\n      InventoryBrowserComponent,\n      InventoryNodesComponent,\n      InventoryNodeComponent,\n      TreeNodeComponent,\n      TreeNodesComponent,\n      TreeViewComponent,\n      DropdownObjectSelectorComponent,\n   ],\n   exports: [\n      InventoryBrowserComponent,\n      DropdownObjectSelectorComponent,\n      TreeViewComponent,\n   ],\n   providers: [\n      WitnessCandidateInventoryService,\n      DatacenterInventoryService,\n      NetworkInventoryService,\n      ComputeInventoryService,\n      IoInsightInventoryService,\n   ],\n})\nexport class InventoryBrowserModule {\n}","<!-- Copyright 2017-2022 VMware, Inc. All rights reserved. VMware Confidential -->\n<vsan-validation id=\"validation-message\"\n                 *ngIf=\"errorMessage\"\n                 [alert]=\"errorMessage\"\n                 [allowClose]=\"false\">\n</vsan-validation>\n<ng-container *ngIf=\"!errorMessage\">\n   <clr-checkbox-wrapper>\n      <input type=\"checkbox\" clrCheckbox id=\"toggleGrouped\" [(ngModel)]=\"isGrouped\">\n      <label>\n         {{\"vsan.monitor.cluster.virtualObjects.action.viewDetails.tabs.placement.groupingSwitch\" | localized}}\n      </label>\n   </clr-checkbox-wrapper>\n   <virtual-objects-placement-details-flat *ngIf=\"!isGrouped\"\n                                           [vmRef]=\"vmRef\"\n                                           [virtualObjects]=\"virtualObjects\"\n                                           [data]=\"data\"\n                                           [isVsanMaxEnabled]=\"isVsanMaxEnabled\">\n   </virtual-objects-placement-details-flat>\n   <virtual-objects-placement-details-grouped *ngIf=\"isGrouped\"\n                                              [virtualObjects]=\"virtualObjects\"\n                                              [data]=\"data\"\n                                              [isVsanMaxEnabled]=\"isVsanMaxEnabled\">\n   </virtual-objects-placement-details-grouped>\n</ng-container>","/* Copyright 2019 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {NgModule} from \"@angular/core\";\nimport {CommonModule} from \"@angular/common\";\nimport {FormsModule} from \"@angular/forms\";\nimport {ClarityModule} from \"@clr/angular\";\nimport {CommonPipeModule} from \"@pipe/common-pipe.module\";\nimport {SearchComponent} from \"@component/search/search.component\";\n\n@NgModule({\n   imports: [\n      CommonModule,\n      FormsModule,\n      ClarityModule,\n      CommonPipeModule\n   ],\n   declarations: [\n      SearchComponent\n   ],\n   exports: [\n      SearchComponent\n   ],\n})\nexport class SearchModule {\n}\n","/* Copyright 2021-2022 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {DatastoreType} from \"@generated/datastore-type\";\nimport {VirtualObjectPlacementModel} from \"@generated/virtual-object-placement-model\";\nimport {VsanComponentState} from \"@generated/vsan-component-state\";\nimport {ManagedObject} from \"@service/managed-object\";\nimport {Icon} from \"@util/icon\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\n\n// Represents a node from the hierarchical path to a virtual object (e.g. Host, Cache disk)\nexport class VirtualObjectBranchModel {\n   hostUuid: string;\n   cacheUuid: string;\n   capacityUuid: string;\n   capacityUuids: string[];\n   incrementedIssue: VsanComponentState;\n\n   constructor(\n         public iconId: string,\n         public label: string,\n         public children: VirtualObjectBranchModel[] = [],\n         public tooltip: string = \"\",\n         public faultDomain: string = null,\n         public navigationTarget: ManagedObject = null,\n         public issues: number = 0,\n         public hasState: boolean = false) {\n   }\n\n   static createHost = (host: VirtualObjectPlacementModel): VirtualObjectBranchModel => {\n      const result: VirtualObjectBranchModel = new VirtualObjectBranchModel(\n            host.iconId, host.label, [], host.nodeUuid, host.faultDomain, host.navigationTarget);\n      result.hostUuid = host.nodeUuid;\n      return result;\n   };\n\n   static createDisk = (placement: VirtualObjectPlacementModel, hasState: boolean): VirtualObjectBranchModel => {\n      const disk: VirtualObjectBranchModel =\n            new VirtualObjectBranchModel(placement.iconId, placement.label, null, placement.nodeUuid);\n      disk.hasState = hasState; // vSAN disks have state based on the component states\n      return disk;\n   };\n\n   static createCapacityDisk(placement: VirtualObjectPlacementModel, hasState: boolean): VirtualObjectBranchModel {\n      const disk: VirtualObjectBranchModel = VirtualObjectBranchModel.createDisk(placement.capacityDisk, hasState);\n      disk.capacityUuid = placement.capacityDisk.nodeUuid;\n      return disk;\n   }\n\n   static createGroup(\n         placement: VirtualObjectPlacementModel,\n         capacityDisk: VirtualObjectBranchModel,\n         isVsanMaxEnabled: boolean): VirtualObjectBranchModel {\n      switch (placement.datastoreType) {\n         case DatastoreType.VSAN:\n            return isVsanMaxEnabled\n                  ? capacityDisk\n                  : VirtualObjectBranchModel.createVsanDiskGroup(placement.cacheDisk, capacityDisk);\n         case DatastoreType.VSAN_DIRECT:\n         case DatastoreType.PMEM:\n            return VirtualObjectBranchModel.createManagedByVsanDiskGroup(capacityDisk, placement.datastoreType);\n      }\n   }\n\n   private static createVsanDiskGroup = (\n         cacheModel: VirtualObjectPlacementModel,\n         capacityModel: VirtualObjectBranchModel): VirtualObjectBranchModel => {\n      const result: VirtualObjectBranchModel = new VirtualObjectBranchModel(\n            Icon.DISK_GROUP_IMAGE,\n            VsanUiUtils.getString(\n                  \"vsan.monitor.cluster.virtualObjects.action.viewDetails.tabs.placement.diskGroup\",\n                  cacheModel.label),\n            [capacityModel]);\n      result.cacheUuid = cacheModel.nodeUuid;\n      result.capacityUuids = [capacityModel.capacityUuid];\n      result.hasState = true; // vSAN DG has state based on the component states\n      return result;\n   };\n\n   private static createManagedByVsanDiskGroup = (\n         capacityModel: VirtualObjectBranchModel,\n         datastoreType: DatastoreType): VirtualObjectBranchModel => {\n      const group: VirtualObjectBranchModel = new VirtualObjectBranchModel(\n            \"\",\n            datastoreType === DatastoreType.VSAN_DIRECT\n                  ? VsanUiUtils.getString(\"vsan.diskGroup.type.vsanDirect\")\n                  : VsanUiUtils.getString(\"vsan.diskGroup.type.pmem\"),\n            [capacityModel]);\n      group.capacityUuids = [capacityModel.capacityUuid];\n      return group;\n   };\n}"]}