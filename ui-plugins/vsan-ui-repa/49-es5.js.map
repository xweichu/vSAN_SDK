{"version":3,"sources":["webpack:///src/app/vsan/common/component/upgrade/upgrade-action.component.ts","webpack:///src/app/vsan/common/component/upgrade/upgrade.module.ts","webpack:///src/app/vsan/common/component/upgrade/upgrade-action.html","webpack:///src/app/generated/vsan-upgrade-spec.ts"],"names":["UpgradeActionComponent","dataService","upgradeMutationProvider","upgradePropertyProvider","KnowledgeBaseId","allowReducedRedundancy","validationErrors","hasDiskFormatVersionTwo","close","taskRef","closeModalDialog","handleError","error","push","title","getString","confirmText","context","getModalContext","subtitle","clusterName","upgradeData","upgradeDiskData","minVersion","Promise","all","getProperty","name","contextObject","hasDiskFormatVersionTwoOrLower","dataMovementRequired","setModalDialogHeight","NO_DATA_MOVEMENT_REQUIRED_HEIGHT","hasPrecheckRunInformation","isDataMovementRequired","vsanUpgradeSpec","Factory","create","performUpgrade","then","routes","path","component","UpgradeModule","VsanUpgradeSpec","performObjectUpgrade","downgradeFormat"],"mappings":"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","file":"49-es5.js","sourcesContent":["/* Copyright 2017-2022 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component} from \"@angular/core\";\nimport {UpgradeData} from \"@component/upgrade/upgrade.data\";\nimport {VsanUpgradeMutationProvider} from \"@generated/vsan-upgrade-mutation-provider\";\nimport {VsanUpgradePropertyProvider} from \"@generated/vsan-upgrade-property-provider\";\nimport {VsanUpgradeSpec} from \"@generated/vsan-upgrade-spec\";\nimport {ClusterComputeResource} from \"@service/client/dataservice/data-service-property\";\nimport {DataServiceClient} from \"@service/client/dataservice/data-service.service\";\nimport {ManagedObject} from \"@service/managed-object\";\nimport {KnowledgeBaseId} from \"@service/navigation/model/knowledge-base-id\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\n\n@Component({\n   templateUrl: \"upgrade-action.html\",\n   styleUrls: [\"upgrade-action.scss\"],\n   selector: \"vsan-diskmgmt-upgrade\",\n})\nexport class UpgradeActionComponent {\n\n   static readonly NO_DATA_MOVEMENT_REQUIRED_HEIGHT: number = 280;\n   KnowledgeBaseId: typeof KnowledgeBaseId = KnowledgeBaseId;\n\n   allowReducedRedundancy: boolean = false;\n   validationErrors: string[] = [];\n   title: string;\n   subtitle: string;\n   confirmText: string;\n   upgradeData: UpgradeData;\n   hasDiskFormatVersionTwo: boolean = false;\n\n   constructor(private dataService: DataServiceClient,\n         private upgradeMutationProvider: VsanUpgradeMutationProvider,\n         private upgradePropertyProvider: VsanUpgradePropertyProvider) {\n   }\n\n   async ngOnInit(): Promise<void> {\n      this.title = VsanUiUtils.getString(\"vsan.upgrade.manage.upgrade.confirm.title\");\n      this.confirmText = VsanUiUtils.getString(\"vsan.upgrade.manage.upgrade.confirm.yes\");\n\n      const context: any = VsanUiUtils.getModalContext();\n      if (context) {\n         this.subtitle = context.clusterName;\n         this.upgradeData = context.upgradeData;\n         this.hasDiskFormatVersionTwo = context.upgradeData.upgradeDiskData.minVersion <= 2;\n      } else {\n         [this.subtitle, this.hasDiskFormatVersionTwo] = await Promise.all([\n            this.dataService.getProperty(ClusterComputeResource.name, ManagedObject.contextObject),\n            this.upgradePropertyProvider.hasDiskFormatVersionTwoOrLower(ManagedObject.contextObject),\n         ]);\n      }\n\n      if (!this.dataMovementRequired) {\n         VsanUiUtils.setModalDialogHeight(UpgradeActionComponent.NO_DATA_MOVEMENT_REQUIRED_HEIGHT);\n      }\n   }\n\n   get dataMovementRequired(): boolean {\n      if (this.upgradeData && this.upgradeData.hasPrecheckRunInformation) {\n         return this.upgradeData.isDataMovementRequired;\n      }\n      return this.hasDiskFormatVersionTwo;\n   }\n\n   ok(): void {\n      // NOTE: set default values here, don't expose to user.\n      const vsanUpgradeSpec: VsanUpgradeSpec = VsanUpgradeSpec.Factory.create(\n            true, // performObjectUpgrade\n            false, // downgradeFormat\n            this.allowReducedRedundancy);\n      this.upgradeMutationProvider.performUpgrade(ManagedObject.contextObject, vsanUpgradeSpec)\n            .then((taskRef: ManagedObject) => {\n               this.close(taskRef);\n            })\n            .catch(this.handleError);\n   }\n\n   close = (taskRef?: ManagedObject) => {\n      // Just close the window\n      VsanUiUtils.closeModalDialog(taskRef);\n   };\n\n   // Display error in the wizard\n   private handleError = (error: any) => {\n      this.validationErrors.push(error);\n   };\n}\n","/* Copyright 2020 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {NgModule} from \"@angular/core\";\nimport {FormsModule} from \"@angular/forms\";\nimport {CommonModule} from \"@angular/common\";\nimport {RouterModule, Routes} from \"@angular/router\";\nimport {ClarityModule} from \"@clr/angular\";\nimport {ValidationModule} from \"@component/validation/validation.module\";\nimport {CommonPipeModule} from \"@pipe/common-pipe.module\";\nimport {UpgradeComponent} from \"@component/upgrade/upgrade.component\";\nimport {UpgradeActionComponent} from \"@component/upgrade/upgrade-action.component\";\nimport {PromptModule} from \"@component/dialog/prompt/prompt.module\";\nimport {CommonDirectiveModule} from \"@directive/common-directive.module\";\nimport {UpgradeService} from \"@component/upgrade/upgrade.service\";\n\nconst routes: Routes = [\n   {\n      path: \"upgrade\",\n      component: UpgradeActionComponent,\n   },\n];\n\n@NgModule({\n   imports: [\n      CommonModule,\n      FormsModule,\n      ClarityModule,\n      ValidationModule,\n      PromptModule,\n      CommonPipeModule,\n      CommonDirectiveModule,\n      RouterModule.forChild(routes),\n   ],\n   declarations: [\n      UpgradeComponent,\n      UpgradeActionComponent,\n   ],\n   exports: [\n      UpgradeComponent,\n      UpgradeActionComponent,\n   ],\n   providers: [\n         UpgradeService,\n   ],\n})\nexport class UpgradeModule {\n}","<!--Copyright 2020-2022 VMware, Inc. All rights reserved. -- VMware Confidential -->\n<vsan-default-prompt [title]=\"title\"\n                     [subtitle]=\"subtitle\"\n                     [confirmText]=\"confirmText\"\n                     (onConfirm)=\"ok()\">\n   <!-- Validation errors container -->\n   <vsan-validation *ngIf=\"validationErrors\" [(alerts)]=\"validationErrors\"></vsan-validation>\n   <form>\n      <div>\n         <ng-container *ngIf=\"dataMovementRequired\">\n            <span>{{\"vsan.upgrade.manage.dialog.content.normal.dfcDataMovement.part1\" | localized}}</span>\n            <a [external-link]=\"'vsan.common.kb' | localized\" [articleId]=\"KnowledgeBaseId.UPGRADE\" ></a>\n            <span>{{\"vsan.upgrade.manage.dialog.content.normal.dfcDataMovement.part2\" | localized}}</span>\n         </ng-container>\n         <ng-container *ngIf=\"!dataMovementRequired\">\n            <span>{{\"vsan.upgrade.manage.dialog.content.normal.dfcNoDataMovement.part1\" | localized}}</span>\n            <a [external-link]=\"'vsan.common.kb' | localized\" [articleId]=\"KnowledgeBaseId.UPGRADE\" ></a>\n            <span>{{\"vsan.upgrade.manage.dialog.content.normal.dfcNoDataMovement.part2\" | localized}}</span>\n         </ng-container>\n      </div>\n      <clr-checkbox-container *ngIf=\"dataMovementRequired\">\n         <clr-checkbox-wrapper>\n            <input id=\"allowReducedRedundancyCheckBox\"\n                   name=\"allowReducedRedundancy\"\n                   class=\"clr-checkbox\"\n                   [(ngModel)]=\"allowReducedRedundancy\"\n                   type=\"checkbox\"\n                   clrCheckbox>\n            <label for=\"allowReducedRedundancyCheckBox\">\n               {{'vsan.generalConfig.dataEfficiency.allowReducedRedundancy' | localized}}\n            </label>\n            <clr-signpost [vsan-signpost-title]=\"'vsan.generalConfig.dataEfficiency.allowReducedRedundancy.signpost.label' | localized\">\n               <clr-signpost-content *clrIfOpen clrPosition=\"bottom-right\">\n                  {{\"vsan.upgrade.manage.dialog.reducedRedundancyText\" | localized}}\n               </clr-signpost-content>\n            </clr-signpost>\n         </clr-checkbox-wrapper>\n      </clr-checkbox-container>\n   </form>\n</vsan-default-prompt>\n","\nexport interface VsanUpgradeSpec {\n\n   performObjectUpgrade: boolean;\n   downgradeFormat: boolean;\n   allowReducedRedundancy: boolean;\n} //class VsanUpgradeSpec\n\nexport module VsanUpgradeSpec{\nexport class Factory {\n\n   static create = (performObjectUpgrade: boolean, downgradeFormat: boolean, allowReducedRedundancy: boolean): VsanUpgradeSpec => {\n      return { performObjectUpgrade: performObjectUpgrade, downgradeFormat: downgradeFormat, allowReducedRedundancy: allowReducedRedundancy, };\n   }\n\n\n} //class Factory\n\n} //module VsanUpgradeSpec\n"]}