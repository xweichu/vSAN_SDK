{"version":3,"sources":["webpack:///src/app/vsan/cluster/configure/action/performance/edit-perf.component.ts","webpack:///src/app/vsan/common/service/flow/loading-indicator.decorator.ts","webpack:///src/app/vsan/common/service/flow/error-handler.decorator.ts","webpack:///src/app/vsan/common/service/flow/loader.decorator.ts","webpack:///src/app/vsan/cluster/configure/action/performance/edit-perf.html","webpack:///src/app/vsan/cluster/configure/action/performance/edit-perf.module.ts","webpack:///src/app/vsan/common/service/flow/loading-flow-wrapper.data.ts"],"names":["EditPerfComponent","propertyProvider","mutationProvider","pbmProvider","capabilityProvider","dataSvc","AlertType","VsanUiUtils","originalNetworkDiagnosticModeTurnedOn","turnOnNetworkDiagnosticMode","errorMessages","availablePolicies","_currentPolicyId","id","updatePolicyAlert","context","getModalContext","clusterRef","clusterName","getProperty","name","loadConfigData","readPerfSettings","perfObject","networkDiagnosticModeEnabled","turnOnverboseMode","verboseModeEnabled","verboseModeSupported","vcCapabilityData","isPerfVerboseModeSupported","networkDiagnosticModeSupported","clusterCapabilityData","isPerfDiagnosticModeSupported","currentPolicyId","length","defaultPolicy","find","policy","isDefault","vsanDefault","EMPTY_CLUSTER_DEFAULT_PROFILE_NAME","Promise","all","getPerfEditData","getVcCapabilityData","getClusterCapabilityData","getStoragePolicies","perfEditData","isPerfServiceEnabled","isPerformanceEnabled","isFileAnalyticsEnabled","policyId","perfStatsObjectInfo","policyAlert","currentPolicy","policyAlertType","WARNING","getString","isCompatible","hasVsanNamespace","onTurnOnPerf","validateNetworkDiagnosticModeSetting","onPerfConfigurationChange","enablePerfService","createPerfStateObjSpec","taskRef","close","editPerfConfiguration","turnOnVerboseMode","Factory","create","error","loading","DANGER","closeModalDialog","srMessage","srMessageType","PAGE_TITLE","LoadingIndicator","props","targetClass","propertyKey","Object","defineProperty","get","Array","isArray","some","loaderName","isLoading","ErrorHandler","functionName","descriptor","errorHandler","value","Loader","params","tag","getClassName","originalFn","loadingFlowWrapper","preExecute","undefined","incrementLoads","invoke","preLoadSrMessage","LOADING","postExecute","LOADED","onError","ex","processError","rethrow","shouldRethrow","invokeErrorHandler","decrementLoads","backingObject","arguments","wrapper","handler","call","errorMessageGetter","routes","path","component","EditPerfModule","LoadingFlowWrapper","_backingObject","DEFAULT_NAME","initCollection","ERROR_HOLDER","ERROR_HANDLERS_REF_HOLDER","ERROR_MESSAGE_GETTERS_REF_HOLDER","LOADS_COUNT_HOLDER","collectionName","val","loadsCount","Error","getter"],"mappings":"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","file":"133-es5.js","sourcesContent":["/* Copyright 2017-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, OnInit} from \"@angular/core\";\nimport {AlertType} from \"@component/validation/alert-type\";\nimport {PbmDataProvider} from \"@generated/pbm-data-provider\";\nimport {PerfEditData} from \"@generated/perf-edit-data\";\nimport {PerfStatesObjSpec} from \"@generated/perf-states-obj-spec\";\nimport {PerfStatsObjectInfo} from \"@generated/perf-stats-object-info\";\nimport {StoragePolicyData} from \"@generated/storage-policy-data\";\nimport {VsanCapabilityData} from \"@generated/vsan-capability-data\";\nimport {VsanCapabilityProvider} from \"@generated/vsan-capability-provider\";\nimport {VsanPerfMutationProvider} from \"@generated/vsan-perf-mutation-provider\";\nimport {VsanPerfPropertyProvider} from \"@generated/vsan-perf-property-provider\";\nimport {ClusterComputeResource} from \"@service/client/dataservice/data-service-property\";\nimport {DataServiceClient} from \"@service/client/dataservice/data-service.service\";\nimport {ErrorHandler} from \"@service/flow/error-handler.decorator\";\nimport {Loader} from \"@service/flow/loader.decorator\";\nimport {LoadingIndicator} from \"@service/flow/loading-indicator.decorator\";\nimport {ManagedObject} from \"@service/managed-object\";\nimport {SrMessageType} from \"@service/screen-reader-announcer.service\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\n\n@Component({\n   templateUrl: \"edit-perf.html\",\n   styleUrls: [\"edit-perf.scss\"],\n   selector: \"vsan-edit-perf-config\",\n})\nexport class EditPerfComponent implements OnInit {\n   AlertType: typeof AlertType = AlertType;\n   VsanUiUtils: typeof VsanUiUtils = VsanUiUtils;\n\n   private static readonly EMPTY_CLUSTER_DEFAULT_PROFILE_NAME: string = \"vSAN Default Storage Policy\";\n\n   isPerfServiceEnabled: boolean;\n\n   private vcCapabilityData: VsanCapabilityData;\n   private clusterCapabilityData: VsanCapabilityData;\n\n   verboseModeSupported: boolean;\n   turnOnverboseMode: boolean;\n\n   networkDiagnosticModeSupported: boolean;\n   originalNetworkDiagnosticModeTurnedOn: boolean = false;\n   turnOnNetworkDiagnosticMode: boolean = false;\n\n   errorMessages: string[] = [];\n   availablePolicies: StoragePolicyData[] = [];\n\n   clusterRef: ManagedObject;\n   clusterName: string;\n   perfObject: PerfStatsObjectInfo;\n\n   @LoadingIndicator()\n   loading: boolean;\n\n   policyAlert: string;\n   policyAlertType: string;\n\n   private isFileAnalyticsEnabled: boolean;\n\n   private _currentPolicyId: string;\n\n   get currentPolicyId(): string {\n      return this._currentPolicyId;\n   }\n\n   set currentPolicyId(id: string) {\n      this._currentPolicyId = id;\n      this.updatePolicyAlert();\n   }\n\n   constructor(private propertyProvider: VsanPerfPropertyProvider,\n         private mutationProvider: VsanPerfMutationProvider,\n         private pbmProvider: PbmDataProvider,\n         private capabilityProvider: VsanCapabilityProvider,\n         private dataSvc: DataServiceClient) {\n   }\n\n   @Loader({srMessage: \"vsan.services.performance.service.dlg.title\", srMessageType: SrMessageType.PAGE_TITLE})\n   async ngOnInit(): Promise<void> {\n      const context: any = VsanUiUtils.getModalContext();\n      this.clusterRef = context.clusterRef;\n      this.clusterName = context.clusterName;\n\n      // Query cluster name if it is not passed by parent view.\n      if (!this.clusterName) {\n         this.clusterName = await this.dataSvc.getProperty(ClusterComputeResource.name, this.clusterRef);\n      }\n\n      await this.loadConfigData();\n      this.readPerfSettings();\n   }\n\n   private readPerfSettings(): void {\n      if (this.perfObject) {\n         this.originalNetworkDiagnosticModeTurnedOn = this.perfObject.networkDiagnosticModeEnabled;\n         this.turnOnverboseMode = this.perfObject.verboseModeEnabled;\n      }\n      this.verboseModeSupported = this.vcCapabilityData.isPerfVerboseModeSupported;\n      this.networkDiagnosticModeSupported = this.clusterCapabilityData.isPerfDiagnosticModeSupported;\n\n      this.updatePolicyAlert();\n\n      this.turnOnNetworkDiagnosticMode = this.originalNetworkDiagnosticModeTurnedOn;\n\n      if (!this.currentPolicyId && this.availablePolicies.length > 0) {\n         const defaultPolicy: StoragePolicyData = this.availablePolicies.find(policy => policy.isDefault);\n         if (defaultPolicy) {\n            this.currentPolicyId = defaultPolicy.id;\n         } else {\n            /**\n             * There could be no default policy if the cluster is empty,\n             * we should choose the 'vSAN Default Storage Policy' in this case.\n             */\n            const vsanDefault: StoragePolicyData = this.availablePolicies.find(policy =>\n                  policy.name === EditPerfComponent.EMPTY_CLUSTER_DEFAULT_PROFILE_NAME);\n            this.currentPolicyId = !vsanDefault ? this.availablePolicies[0].id : vsanDefault.id;\n         }\n      }\n   }\n\n   private async loadConfigData(): Promise<void> {\n      let perfEditData: PerfEditData;\n      [\n         perfEditData,\n         this.vcCapabilityData,\n         this.clusterCapabilityData,\n         this.availablePolicies] = await Promise.all([\n         this.propertyProvider.getPerfEditData(this.clusterRef),\n         this.capabilityProvider.getVcCapabilityData(this.clusterRef),\n         this.capabilityProvider.getClusterCapabilityData(this.clusterRef),\n         this.pbmProvider.getStoragePolicies(this.clusterRef),\n      ]);\n\n      this.isPerfServiceEnabled = perfEditData.isPerformanceEnabled;\n      this.isFileAnalyticsEnabled = perfEditData.isFileAnalyticsEnabled;\n      this.currentPolicyId = perfEditData.policyId;\n      this.perfObject = perfEditData.perfStatsObjectInfo;\n   }\n\n   private updatePolicyAlert(): void {\n      this.policyAlert = null;\n\n      const currentPolicy: StoragePolicyData =\n            this.availablePolicies.find(policy => policy.id === this.currentPolicyId);\n      if (!currentPolicy) {\n         this.policyAlertType = AlertType.WARNING;\n         if (!this.isPerfServiceEnabled) {\n            // Enable performance services without selecting any policies.\n            this.policyAlert = VsanUiUtils.getString(\"vsan.services.performance.policy.add.no.policy\");\n         } else {\n            // Edit performance services without selecting any policies.\n            this.policyAlert = VsanUiUtils.getString(\"vsan.services.performance.policy.edit.no.policy\");\n         }\n      } else if (!currentPolicy.isCompatible) {\n         this.policyAlertType = AlertType.WARNING;\n         this.policyAlert = VsanUiUtils.getString(\"vsan.services.performance.policy.notCompliant\");\n      } else if (!currentPolicy.hasVsanNamespace) {\n         this.policyAlertType = AlertType.WARNING;\n         this.policyAlert = VsanUiUtils.getString(\"vsan.services.performance.policy.no.vsan.namespace\");\n      }\n   }\n\n   ok(): void {\n      if (!this.isPerfServiceEnabled) {\n         this.onTurnOnPerf();\n      } else {\n         if (!this.validateNetworkDiagnosticModeSetting()) {\n            this.errorMessages = [VsanUiUtils.getString(\"vsan.perf.config.network.diagnostic.mode.off\")];\n            return;\n         }\n         this.onPerfConfigurationChange();\n      }\n   }\n\n   private validateNetworkDiagnosticModeSetting(): boolean {\n      // if the current cluster/hosts doesn't support network diagnostic mode(it could be turned off on vc,\n      // or the cluster has old hosts), but the network diagnostic mode was turned on,\n      // we should only allow user to turn off it\n      return !this.turnOnNetworkDiagnosticMode || this.networkDiagnosticModeSupported;\n   }\n\n   @Loader()\n   private async onTurnOnPerf(): Promise<void> {\n      const taskRef: any = await this.mutationProvider.enablePerfService(\n            this.createPerfStateObjSpec(false, false));\n      this.close(taskRef);\n   }\n\n   @Loader()\n   private async onPerfConfigurationChange(): Promise<void> {\n      const taskRef: any = await this.mutationProvider.editPerfConfiguration(\n            this.createPerfStateObjSpec(this.turnOnverboseMode, this.turnOnNetworkDiagnosticMode));\n      this.close(taskRef);\n   }\n\n   private createPerfStateObjSpec(turnOnVerboseMode: boolean, turnOnNetworkDiagnosticMode: boolean): PerfStatesObjSpec {\n      return PerfStatesObjSpec\n            .Factory\n            .create(this.clusterRef, this.currentPolicyId, turnOnVerboseMode, turnOnNetworkDiagnosticMode);\n   }\n\n   @ErrorHandler()\n   private handleError(error: string): void {\n      this.errorMessages = [error];\n   }\n\n   get isApplyButtonBlocked(): boolean {\n      return this.loading || this.policyAlertType === AlertType.DANGER;\n   }\n\n   close(taskRef: ManagedObject = null): void {\n      VsanUiUtils.closeModalDialog(taskRef);\n   }\n}\n","/* Copyright 2021 VMware, Inc. All rights reserved. -- VMware Confidential */\n\n\n\nimport {LoadingFlowWrapper} from \"@service/flow/loading-flow-wrapper.data\";\n\n/**\n * This property decorator is supposed to be used along with the @Loader decorator.\n * As the @Loader decorator keeps track of all the active loading operations,\n * we can easily know if all the loading is completed. If there are any ongoing loading\n * operations, the property decorated with @LoadingIndicator will be set to \"true\", otherwise - it will be \"false\".\n * You can have as many properties decorated with @LoadingIndicator as you want, but they need to have different names.\n * The LoadingIndicator will show the loading state of the Loader methods with the same name.\n *\n * <pre>\n * @Loader()\n * loadDataSync(): any {\n *    // Load some data\n * }\n *\n * @Loader()\n * loadDataAsync(): Promise<any> {\n *    // Load some data\n * }\n *\n * @LoadingIndicator\n * isLoading: boolean; // The field will be set to \"false\" when the both the methods are complete and the Promise is resolved.\n * </pre>\n */\nexport function LoadingIndicator(props?: LoadingIndicatorProperties): PropertyDecorator {\n   props = props || {};\n   return (targetClass: any, propertyKey: string): void => {\n      Object.defineProperty(targetClass, propertyKey, {\n         get: function (): boolean {\n            if (Array.isArray(props.name)) {\n               return props.name.some((loaderName: string) => (new LoadingFlowWrapper(this, loaderName)).isLoading);\n            }\n\n            return (new LoadingFlowWrapper(this, props.name)).isLoading;\n         },\n      });\n   };\n}\n\nexport interface LoadingIndicatorProperties {\n   name?: string | string[];\n}\n","/* Copyright 2021 VMware, Inc. All rights reserved. -- VMware Confidential */\n\nimport {LoadingFlowWrapper} from \"@service/flow/loading-flow-wrapper.data\";\n\n/**\n * This property decorator is supposed to be used along with the @Loader decorator.\n * If an exception is thrown during the execution of the method decorated with @Loader\n * the ErrorHandler method will be invoked. You can define as many ErrorHandlers as you want,\n * but they must be with different names. The name can be provided as input to the decorator.\n * If a name is set to the ErrorHandler it will handle only the errors thrown by Loader functions\n * with the same name. If no name is passed to the ErrorHandler, it will handle only the errors\n * from Loader functions with no name.\n *\n * <pre>\n * // Example 1:\n * @Loader()\n * loadSyncData(): any {\n *    throw new Error(\"Failed to load sync data\");\n * }\n *\n * @ErrorHandler()\n * handleError(err: any) {\n *    // handle the error.\n * }\n *...\n *\n * // Example 2\n *\n * @Loader({name: \"data-loading-flow})\n * async loadAsyncData(): Promise<any> {\n *    return Promise.reject(\"Failed to load async data\");\n * }\n *\n * @ErrorHandler({name: \"data-loading-flow})\n * handleError(err: any) {\n *    // handle the error.\n * }\n * ...\n * </pre>\n */\nexport function ErrorHandler(props?: ErrorHandlerProperties): MethodDecorator {\n   props = props || {};\n   return (targetClass: any, functionName: string, descriptor: PropertyDescriptor): void => {\n      (new LoadingFlowWrapper(targetClass, props.name)).errorHandler = descriptor.value;\n   };\n}\n\n/**\n * Properties of the ErrorHandler decorator.\n */\nexport interface ErrorHandlerProperties {\n\n   /**\n    * Indicates which @Loder should be handled by this @ErrorHandler\n    */\n   name?: string;\n}\n","/* Copyright 2021-2022 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {ErrorContext, FunctionWrapper} from \"@service/flow/function-wrapper\";\nimport {LoadingFlowWrapper} from \"@service/flow/loading-flow-wrapper.data\";\nimport {ScreenReaderAnnouncerService, SrEvent, SrMessageType} from \"@service/screen-reader-announcer.service\";\nimport {Reflection} from \"@util/reflection\";\nimport {GlobalLogger} from \"../../../../vsan-app.module\";\n\n/**\n * Method decorator that does the following:\n *  - watches for errors and if such appear:\n *       - the error is logged in the browser's console\n *       - the error is logged in the H5C server log\n *       - the related @ErrorMessage fields are populated\n *       - the related @ErrorHandler methods are invoked\n *  - Updates the @LoadingIndicator decorated fields\n *  - Invokes the screen reader service once the loading operation completes successfully\n */\nexport function Loader(params?: LoaderParams): MethodDecorator {\n   // If no params are passed, initialize the variable in order to avoid multiple null-checks\n   params = params || {};\n   return (targetClass: any, functionName: string, descriptor: PropertyDescriptor): void => {\n      // Use the component name as tag in order easily find where the error was thrown.\n      const tag: string = Reflection.getClassName(targetClass);\n      const loaderName: string = params.name;\n      const originalFn: any = descriptor.value;\n\n      descriptor.value = function (): any {\n         const loadingFlowWrapper: LoadingFlowWrapper = new LoadingFlowWrapper(this, loaderName);\n         return (new FunctionWrapper(originalFn))\n               .preExecute(() => {\n                  loadingFlowWrapper.error = undefined;\n                  loadingFlowWrapper.incrementLoads();\n                  ScreenReaderAnnouncerService.invoke(\n                        params.preLoadSrMessage || params.srMessage,\n                        params.srMessageType, SrEvent.LOADING);\n               })\n               .postExecute(() => {\n                  ScreenReaderAnnouncerService.invoke(params.srMessage, params.srMessageType, SrEvent.LOADED);\n               })\n               .onError((ex: any) => {\n                  processError(loadingFlowWrapper, tag, ex);\n                  const rethrow: boolean = shouldRethrow(loadingFlowWrapper, params);\n                  if (!rethrow) {\n                     ex = invokeErrorHandler(loadingFlowWrapper, ex);\n                  }\n                  return new ErrorContext(rethrow, ex);\n               })\n               .finally(() => {\n                  loadingFlowWrapper.decrementLoads();\n               })\n               .invoke(loadingFlowWrapper.backingObject, arguments);\n      };\n   };\n}\n\n/**\n * Parameters for the @Loader decorator\n */\nexport interface LoaderParams {\n\n   /**\n    * The name of the loader by which will be resolved te @LoadingIndicator, @ErrorHandler and @ErrorMessage\n    */\n   name?: string;\n\n   /**\n    * Indicates if the error should be rethrown after being processed by the @ErrorHandlers\n    */\n   rethrow?: boolean;\n\n   /**\n    * Used along with srMessageType to create the screen reader message to be announced after the loading\n    * operation completes successfully.\n    * If preLoadSrMessage is not set, srMessage will also be announced when the loading operation starts.\n    */\n   srMessage?: string;\n\n   /**\n    * Used when the message in preExecute() should be different than the one in postExecute().\n    * If not set, srMessage will be used in both places.\n    * Should be given a value when the srMessageType is set to CUSTOM,\n    * because otherwise the exact same message will be announced in preExecute() and postExecute().\n    */\n   preLoadSrMessage?: string;\n\n   /**\n    * The screen reader message type. Used for creating an appropriate message.\n    */\n   srMessageType?: SrMessageType;\n}\n\n/**\n * Handles the given error by:\n *  - logging the error in the browsers console\n *  - logging the error in the H5C backend log\n *  - updates all @ErrorMessage fields\n */\nfunction processError(wrapper: LoadingFlowWrapper, tag: string, ex: any): void {\n   // Log the error to the backend\n   GlobalLogger.error(tag, ex);\n\n   // Cache the error so it can be retrieved by @ErrorMessage decorated fields\n   wrapper.error = ex;\n}\n\n/**\n * Invokes the error handler (if defined)\n */\nfunction invokeErrorHandler(wrapper: LoadingFlowWrapper, ex: any): any {\n   const handler: any = wrapper.errorHandler;\n   return !!handler\n         ? handler.call(wrapper.backingObject, ex)\n         : null;\n}\n\n/**\n * Reject the promise only if:\n * 1. there are no handlers declared\n * 2. the components has explicitly requested the error to be rethrown\n */\nfunction shouldRethrow(wrapper: LoadingFlowWrapper, params: LoaderParams): boolean {\n   return !wrapper.errorHandler && !wrapper.errorMessageGetter\n         || !!params.rethrow;\n}\n","<!--Copyright 2021-2022 VMware, Inc. All rights reserved. -- VMware Confidential-->\n<vsan-edit-prompt\n      [title]=\"'vsan.services.performance.service.dlg.title' | localized\"\n      [subtitle]=\"clusterName\"\n      [blockContent]=\"loading\"\n      [blockButton]=\"isApplyButtonBlocked\"\n      [confirmText]=\"VsanUiUtils.getEditServiceButtonText(isPerfServiceEnabled)\"\n      [(alertMessages)]=\"errorMessages\"\n      (onConfirm)=\"ok()\">\n   <div class=\"dialog-container\">\n       <vsan-validation id=\"policy-alert\"\n                       *ngIf=\"policyAlert\"\n                       [isSmall]=\"true\"\n                       [allowClose]=\"false\"\n                       [alert]=\"policyAlert\"\n                       [alertType]=\"policyAlertType\">\n      </vsan-validation>\n\n      <form clrForm clrLayout=\"horizontal\">\n         <clr-select-container>\n            <label class=\"clr-col-12 clr-col-md-4\">{{\"vsan.services.performance.policy.label\" | localized}}</label>\n            <select clrSelect\n                    id=\"policy-selector\"\n                    class=\"clr-col-12 clr-col-md-8\"\n                    name=\"profileSelector\"\n                    [(ngModel)]=\"currentPolicyId\">\n               <option *ngFor=\"let policy of availablePolicies\"\n                       [value]=\"policy.id\"\n                       [selected]=\"currentPolicyId == policy.id\">\n                  {{policy.name}}\n               </option>\n            </select>\n            <clr-control-helper>\n               {{\"vsan.services.performance.service.policy.desc\" | localized}}\n            </clr-control-helper>\n         </clr-select-container>\n\n\n         <clr-checkbox-container *ngIf=\"verboseModeSupported && isPerfServiceEnabled\">\n            <label class=\"clr-col-12 clr-col-md-4\">{{\"vsan.services.performance.verbose.label\" | localized}}</label>\n            <clr-checkbox-wrapper>\n               <input type=\"checkbox\"\n                      class=\"clr-col-12 clr-col-md-8\"\n                      clrCheckbox\n                      id=\"enable-perf-verbose-mode-toggle\"\n                      name=\"enable-perf-verbose-mode-toggle\"\n                      [(ngModel)]=\"turnOnverboseMode\"/>\n               <label>{{\"vsan.services.performance.verboseMode.enable\" | localized}}</label>\n            </clr-checkbox-wrapper>\n            <clr-control-helper>\n               {{\"vsan.services.performance.edit.verbose.warning\" | localized}}\n            </clr-control-helper>\n         </clr-checkbox-container>\n\n         <ng-container\n               *ngIf=\"isPerfServiceEnabled && (networkDiagnosticModeSupported || originalNetworkDiagnosticModeTurnedOn)\">\n            <clr-checkbox-container>\n               <label class=\"clr-col-12 clr-col-md-4\">\n                  {{\"vsan.services.performance.network.diagnostic.label\" | localized}}\n               </label>\n               <clr-checkbox-wrapper>\n                  <input type=\"checkbox\"\n                         class=\"clr-col-12 clr-col-md-8\"\n                         clrCheckbox\n                         id=\"enable-network-diagnostics-mode-toggle\"\n                         name=\"enable-network-diagnostics-mode-toggle\"\n                         [(ngModel)]=\"turnOnNetworkDiagnosticMode\"/>\n                  <label>{{\"vsan.services.performance.network.diagnostic.enable\" | localized}}</label>\n               </clr-checkbox-wrapper>\n               <clr-control-helper>\n                  {{\"vsan.services.performance.network.diagnostic.desc\" | localized}}\n               </clr-control-helper>\n            </clr-checkbox-container>\n         </ng-container>\n      </form>\n   </div>\n</vsan-edit-prompt>\n","/* Copyright 2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {NgModule} from \"@angular/core\";\nimport {CommonModule} from \"@angular/common\";\nimport {FormsModule} from \"@angular/forms\";\nimport {RouterModule, Routes} from \"@angular/router\";\nimport {ClarityModule} from \"@clr/angular\";\nimport {CommonPipeModule} from \"@pipe/common-pipe.module\";\nimport {ValidationModule} from \"@component/validation/validation.module\";\nimport {PromptModule} from \"@component/dialog/prompt/prompt.module\";\nimport {CommonDirectiveModule} from \"@directive/common-directive.module\";\nimport {EditPerfComponent} from './edit-perf.component';\n\n\nconst routes: Routes = [\n   {\n      path: \"\",\n      component: EditPerfComponent,\n   },\n];\n\n@NgModule({\n   imports: [\n      CommonModule,\n      FormsModule,\n      ClarityModule,\n      CommonPipeModule,\n      CommonDirectiveModule,\n      ValidationModule,\n      PromptModule,\n      RouterModule.forChild(routes),\n   ],\n   declarations: [\n      EditPerfComponent,\n   ],\n})\nexport class EditPerfModule {\n}","/* Copyright 2021 VMware, Inc. All rights reserved. -- VMware Confidential */\n\n/**\n * This class is used internally by the @Loader decorator and the decorators related to it.\n * It encapsulates the logic for accessing internal properties needed for the decorators to work.\n * The state of this class is kept in the \"backingObject\" passed to the constructor. This allows\n * the wrapper class to be easily recreated wherever it is needed without worrying about keeping its reference.\n *\n * <pre>\n * const obj: any = {};\n *\n * // Create a new LoadingFlowWrapper over obj\n * const wrapper1: LoadingFlowWrapper = new LoadingFlowWrapper(obj);\n * // Set the error field to \"alabala\" string\n * wrapper1.error = \"alabala\";\n *\n * // Create a new LoadingFlowWrapper over obj\n * const wrapper2: LoadingFlowWrapper = new LoadingFlowWrapper(obj);\n * console.log(wrapper2.error); // Prints \"alabala\" because the backing object is the same\n * </pre>\n */\nexport class LoadingFlowWrapper {\n\n   private static readonly ERROR_HOLDER: string = \"__ex__\";\n   private static readonly ERROR_HANDLERS_REF_HOLDER: string = \"__errorHandlers__\";\n   private static readonly ERROR_MESSAGE_GETTERS_REF_HOLDER: string = \"__errorMessageGetters__\";\n   private static readonly LOADS_COUNT_HOLDER: string = \"__loadsCount__\";\n\n   private static readonly DEFAULT_NAME: string = \"default-loader\";\n\n   constructor(private _backingObject: any,\n         private loaderName: string) {\n      this.loaderName = loaderName || LoadingFlowWrapper.DEFAULT_NAME;\n\n      // Init all collections\n      this.initCollection(LoadingFlowWrapper.ERROR_HOLDER);\n      this.initCollection(LoadingFlowWrapper.ERROR_HANDLERS_REF_HOLDER);\n      this.initCollection(LoadingFlowWrapper.ERROR_MESSAGE_GETTERS_REF_HOLDER);\n      this.initCollection(LoadingFlowWrapper.LOADS_COUNT_HOLDER);\n   }\n\n   private initCollection(collectionName: string): void {\n      // Check first if the collection hasn't been initialized by another wrapper.\n      // If so, do nothing as we don't want to override the data already set.\n      if (!this.backingObject[collectionName]) {\n         this.backingObject[collectionName] = [];\n      }\n   }\n\n   /**\n    * The original object which methods/properties were decorated\n    */\n   get backingObject(): any {\n      return this._backingObject;\n   }\n\n   /**\n    * Returns the thrown error\n    */\n   get error(): any {\n      return this.backingObject[LoadingFlowWrapper.ERROR_HOLDER][this.loaderName];\n   }\n\n   /**\n    * Sets the thrown error\n    */\n   set error(val: any) {\n      this.backingObject[LoadingFlowWrapper.ERROR_HOLDER][this.loaderName] = val;\n   }\n\n   /**\n    * Returns the number of active loading operations\n    */\n   private get loadsCount(): number {\n      return this.backingObject[LoadingFlowWrapper.LOADS_COUNT_HOLDER][this.loaderName];\n   }\n\n   /**\n    * Returns true if there are running loader methods or promises.\n    */\n   get isLoading(): boolean {\n      return !!this.loadsCount;\n   }\n\n   /**\n    * Increase the number of active loading operations by one\n    */\n   incrementLoads(): void {\n      // Initialize the counter if it hasn't been initialized yet\n      if (!this.loadsCount) {\n         this.backingObject[LoadingFlowWrapper.LOADS_COUNT_HOLDER][this.loaderName] = 0;\n      }\n      this.backingObject[LoadingFlowWrapper.LOADS_COUNT_HOLDER][this.loaderName] += 1;\n   }\n\n   /**\n    * Decreases the number of active loading operations by one\n    */\n   decrementLoads(): void {\n      this.backingObject[LoadingFlowWrapper.LOADS_COUNT_HOLDER][this.loaderName] -= 1;\n   }\n\n   get errorHandler(): any {\n      return this.backingObject[LoadingFlowWrapper.ERROR_HANDLERS_REF_HOLDER][this.loaderName];\n   }\n\n   /**\n    * Registers a new error handler.\n    */\n   set errorHandler(errorHandler: any) {\n      if (!!this.errorHandler) {\n         throw new Error(`ErrorHandler for loader \"${this.loaderName}\" already registered!`);\n      }\n      this.backingObject[LoadingFlowWrapper.ERROR_HANDLERS_REF_HOLDER][this.loaderName] = errorHandler;\n   }\n\n   get errorMessageGetter(): any {\n      return this.backingObject[LoadingFlowWrapper.ERROR_MESSAGE_GETTERS_REF_HOLDER][this.loaderName];\n   }\n\n   set errorMessageGetter(getter: any) {\n      if (!!this.errorMessageGetter) {\n         throw new Error(`ErrorMessage for loader \"${this.loaderName}\" already registered!`);\n      }\n      this.backingObject[LoadingFlowWrapper.ERROR_MESSAGE_GETTERS_REF_HOLDER][this.loaderName] = getter;\n   }\n}\n"]}