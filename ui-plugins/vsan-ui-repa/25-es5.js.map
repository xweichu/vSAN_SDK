{"version":3,"sources":["webpack:///src/app/vsan/common/service/navigation/model/ask-vmware-id.ts","webpack:///src/app/vsan/common/component/chart/performance/perf-export-data.ts","webpack:///src/app/vsan/common/directive/clr-button-group/clr-button-group-common.directive.ts","webpack:///src/app/vsan/common/component/chart/performance/perf-charts-container.component.ts","webpack:///src/app/vsan/common/component/chart/performance/perf-charts-container.html"],"names":["AskVmwareId","PerfExportData","ClrButtonGroupCommonDirective","elRef","setTimeout","allButtons","nativeElement","querySelectorAll","clrButtons","filter","clrButton","directives","forEach","index","buttonFound","findButtonByName","name","directive","resolveButton","buttons","i","length","item","PerfChartsContainerComponent","perfOrchestrator","changeDetector","refWatcher","BOTTOM_MIDDLE_POSITION","BOTTOM_LEFT_POSITION","BOTTOM_RIGHT_POSITION","VsanUiUtils","PefGraphId","loadedCharts","flatData","looseXAxisLabel","isZoomButtonVisible","isEmptyChartsVisible","isShowGraphDescription","showHeaderSection","clickShowAllLink","zoom","chartLegendPosition","LEGEND_BOTTOM","compactMode","keepPlotLineOnClick","allChartsLoaded","onPlotLineChanged","onTooltipActionClicked","graphTooltipVisible","entry","graph","description","refreshZoomOnCollapseChart","zoomOptions","onChartZoomIn","getPopUpPosition","chartIndex","useFullWidth","value","_graphMetrics","metrics","push","graphs","map","entityRefId","entityIdentifier","isEmpty","isRealtime","oldMetric","newMetric","secondGraph","emit","setSecondGraphData","flatMetric","data","find","metric","id","series","metricsSeries","consolidatedFlatDataMap","differentConsolidatedGraphs","visibleGraphId","entitiesFlatData","x","getGuid","watchSubscriptionRef","consolidatedViewHelper","change","subscribe","isShowSpecificModeEnabled","isConsolidatedViewStateEnabled","consolidatedData","entitiesGraphData","isLoading","remainingEntitiesToLoad","opt","isZoomed","isZoomOut","zoomOutOptions","destroyed","detectChanges","pointHoveredOption","chart","exportChartData","graphName","label","chartsNumber","getExpectedChartsCount","message","getString","srOnlyMessage","isRecentTimeRange","currentTimeRange","PERF_VIEW_NO_DATA","PERF_VIEW_NO_DATA_FOR_SELECTED_PERIOD","smallResolution","document","body","scrollWidth","isOnlyOneChart","zoomOut","context","isShowZoomButton","customizableThresholds","setSize","open","then","emptyChartsVisible","title","subtitle","isAskVmwareLinkVisible","isShowAllLinkVisible","getSpecifiedEntitiesFlatDataByGraph"],"mappings":"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","file":"25-es5.js","sourcesContent":["/* Copyright 2021 VMware, Inc. All rights reserved. -- VMware Confidential */\n/**\n * IDs used in external navigation to Ask VMware pages\n */\nexport enum AskVmwareId {\n   CLUSTER_SHUTDOWN = \"com.vmware.vsan.clustershutdown.vmshutdown\",\n   FILE_SERVICE = \"fileservice.user.guide\",\n   FILE_SERVICE_IMBALANCE = \"com.vmware.vsan.fileservice.remediate.imbalance\",\n   TOP_CONTRIBUTORS = \"com.vmware.vsan.perf.graph.topn\",\n   OBFUSCATED_DATA = \"com.vmware.vsan.obfuscation.data.map\",\n   VM_CONSUMPTION_IOPS = \"com.vmware.vsan.perf.graph.cluster-domclient.iops\",\n}","/* Copyright 2020 VMware, Inc. All rights reserved. -- VMware Confidential */\n\n/**\n * The data needed for the export all charts functionality\n */\nexport class PerfExportData {\n   chart: Highcharts.Chart;\n\n   graphName: string;\n\n   entityName: string;\n\n   subEntityName: string;\n}","/* Copyright 2020 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {AfterContentInit, ContentChildren, Directive, ElementRef} from \"@angular/core\";\nimport {ClrButton} from \"@clr/angular\";\nimport {ClrButtonBaseDirective, DirectiveHolder} from \"@directive/clr-button-group/clr-button-base.directive\";\n\n/**\n * Applies on every clr-button-group and help to link the clr-button with directive applieds on it,  which extends\n * {@link ClrButtonBaseDirective}, to the actual rendered html button.\n */\n@Directive({\n   selector: \"clr-button-group\",\n})\nexport class ClrButtonGroupCommonDirective implements AfterContentInit {\n\n   @ContentChildren(ClrButton, {descendants: true})\n   clrButtons: ClrButton[];\n\n   constructor(private elRef: ElementRef) {}\n\n   ngAfterContentInit(): void {\n      setTimeout(() => {\n         const allButtons: NodeListOf<HTMLButtonElement> = this.elRef.nativeElement.querySelectorAll(\"button\");\n         // match button with clrButton and notify directives\n         this.clrButtons.filter(clrButton => !!(clrButton as DirectiveHolder).directives)\n               .forEach((clrButton, index) => {\n                  const buttonFound: HTMLButtonElement = this.findButtonByName(clrButton.name, allButtons);\n                  if (buttonFound) {\n                     (clrButton as DirectiveHolder).directives.forEach(directive => {\n                        directive.resolveButton(clrButton, buttonFound, index);\n                     });\n                  }\n               });\n      });\n   }\n\n   private findButtonByName(name: string, buttons: NodeListOf<HTMLButtonElement>): HTMLButtonElement {\n      for (let i: number = 0; i < buttons.length; i++) {\n         if (buttons.item(i).name === name) {\n            return buttons.item(i);\n         }\n      }\n      return null;\n   }\n\n}","/* Copyright 2017-2022 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {\n   AfterViewInit,\n   ChangeDetectorRef,\n   Component,\n   EventEmitter,\n   Input,\n   OnInit,\n   Output,\n   ViewRef,\n} from \"@angular/core\";\nimport {ChartPlotLineSelectionData} from \"@component/chart/model/chart-plot-line-selection.data\";\nimport {PefGraphId} from \"@component/chart/model/perf-graph-id\";\nimport {PerfChartContextData} from \"@component/chart/performance/perf-chart-context.data\";\nimport {PerfConsolidatedMetricSeries} from \"@component/chart/performance/perf-consolidated-metric-series\";\nimport {PerfExportData} from \"@component/chart/performance/perf-export-data\";\nimport {PerfGraph} from \"@component/chart/performance/perf-graph\";\nimport {SeriesPointHovered} from \"@component/chart/performance/series-point-hovered\";\nimport {DateRangeData} from \"@component/datetime-picker/date-range-picker.component\";\nimport {UnavailableViewSpec} from \"@component/unavailable-view/unavailable-view-spec\";\nimport {PerfGraphMetricsData} from \"@generated/perf-graph-metrics-data\";\nimport {PerfGraphThreshold} from \"@generated/perf-graph-threshold\";\nimport {PerfTimeRangeData} from \"@generated/perf-time-range-data\";\nimport {AskVmwareId} from \"@service/navigation/model/ask-vmware-id\";\nimport {ScreenReaderAnnouncer} from \"@service/screen-reader-announcer.service\";\nimport {IdGenerator} from \"@util/id-generator\";\nimport {ModalBuilder} from \"@util/modal-builder\";\nimport {PerfOrchestratorService} from \"@util/performance/perf-orchestrator-service\";\nimport {ReferenceWatcher} from \"@util/reference-watcher\";\nimport {VsanDateTimeUtils} from \"@util/vsan-dateteime-util\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {ConsolidatedEntitiesData} from \"../../../../performance/view/consolidated-entities-data.data\";\nimport {ChartZoomOption} from \"./chart-zoom-option\";\nimport {FlatGraphMetric} from \"./flat-graph-metric\";\nimport {GraphMetric} from \"./graph-metrics.data\";\nimport {PerfChartUtil} from \"./perf-chart-util\";\n\n@Component({\n   selector: \"vsan-perf-charts-container\",\n   templateUrl: \"perf-charts-container.html\",\n   styleUrls: [\"perf-charts-container.scss\"],\n   providers: [ReferenceWatcher],\n})\nexport class PerfChartsContainerComponent implements OnInit, AfterViewInit {\n   private readonly BOTTOM_MIDDLE_POSITION: string = \"bottom-middle\";\n   private readonly BOTTOM_LEFT_POSITION: string = \"bottom-left\";\n   private readonly BOTTOM_RIGHT_POSITION: string = \"bottom-right\";\n\n   VsanUiUtils: typeof VsanUiUtils = VsanUiUtils;\n   PefGraphId: typeof PefGraphId = PefGraphId;\n   readonly AskVmwareId: typeof AskVmwareId = AskVmwareId;\n\n   private loadedCharts: PerfExportData[] = [];\n\n   @ScreenReaderAnnouncer()\n   srOnlyMessage: string;\n\n   flatData: FlatGraphMetric[] = [];\n   visibleData: FlatGraphMetric;\n   isZoomed: boolean;\n\n   id: string;\n\n   @Input()\n   title: string;\n\n   @Input()\n   icon: string;\n\n   @Input()\n   subtitle: string;\n\n   @Input()\n   parentLoading: boolean;\n\n   @Input()\n   isShowAllLinkVisible: boolean;\n\n   @Input()\n   isAskVmwareLinkVisible: boolean;\n\n   @Input()\n   looseXAxisLabel: boolean = false;\n\n   @Input()\n   isZoomButtonVisible: boolean = true;\n\n   @Input()\n   isEmptyChartsVisible: boolean = true;\n\n   @Input()\n   isShowGraphDescription: boolean = true;\n\n   @Input()\n   showHeaderSection: boolean = true;\n\n   @Input()\n   currentTimeRange: PerfTimeRangeData | DateRangeData;\n\n   @Output()\n   clickShowAllLink: EventEmitter<void> = new EventEmitter<void>();\n\n   @Output()\n   zoom: EventEmitter<ChartZoomOption> = new EventEmitter<ChartZoomOption>(true);\n\n   @Input()\n   zoomOutOptions: ChartZoomOption;\n\n   pointHoveredOption: SeriesPointHovered;\n\n   @Input()\n   chartLegendPosition: string = PerfChartUtil.LEGEND_BOTTOM;\n\n   @Input()\n   collapsible: boolean;\n\n   /**\n    * compact mode means we need to display the small charts and keep them in one line\n    * currently only \"performance for support\" view has compact mode\n    */\n   @Input()\n   compactMode: boolean = false;\n\n   @Input()\n   customizableThresholds: PerfGraphThreshold[];\n\n   /**\n    * In top contributors view all the cluster vm graphs are requested, but only one is visible\n    * at a time, based on the selected cluster metric\n    */\n   @Input()\n   visibleGraphId: string;\n\n   @Input()\n   keepPlotLineOnClick: boolean = false;\n\n   @Output()\n   allChartsLoaded: EventEmitter<PerfExportData[]> = new EventEmitter<PerfExportData[]>();\n\n   @Output()\n   onPlotLineChanged: EventEmitter<ChartPlotLineSelectionData> = new EventEmitter<ChartPlotLineSelectionData>();\n\n   @Output()\n   onTooltipActionClicked: EventEmitter<ChartPlotLineSelectionData> = new EventEmitter<ChartPlotLineSelectionData>();\n\n   @Input()\n   selectedPlotLineValue: string;\n\n   @Input()\n   actionLink: string;\n\n   @Input()\n   consolidatedEntitiesData: ConsolidatedEntitiesData;\n\n   private _graphMetrics: GraphMetric[];\n\n   @Input()\n   set data(value: GraphMetric[]) {\n      if (value === this._graphMetrics) {\n         return;\n      }\n\n      if (value) {\n         this._graphMetrics = value;\n      } else {\n         if (this._graphMetrics && this._graphMetrics.length === 0) {\n            return;\n         } else {\n            this._graphMetrics = [];\n         }\n      }\n\n      this.loadedCharts = [];\n      // Update the flat collection\n      const metrics: FlatGraphMetric[] = [];\n      this._graphMetrics.forEach((entry: GraphMetric) => {\n         metrics.push(\n               ...entry.graphs.map(graph =>\n                     new FlatGraphMetric(entry.entityRefId, entry.metrics, graph, entry.entityIdentifier)));\n      });\n      if (VsanUiUtils.isEmpty(this.flatData) || !this.isRealtime) {\n         this.flatData = metrics;\n      } else {\n         this.flatData.forEach((oldMetric, index) => {\n            const newMetric: FlatGraphMetric = metrics[index];\n            oldMetric.metrics = newMetric.metrics;\n            oldMetric.graph.metrics = newMetric.graph.metrics;\n            oldMetric.graph.secondGraph = newMetric.graph.secondGraph;\n            oldMetric.entityIdentifier = newMetric.entityIdentifier;\n         });\n      }\n\n      // If there is no chart data available, PerfChartComponent.load.emit() cannot be triggered,\n      // we need to manually call this.allChartsLoaded.emit() to update the data of PerfChartExportComponent.\n      if (VsanUiUtils.isEmpty(this.flatData)) {\n         this.allChartsLoaded.emit(null);\n      }\n\n      this.setSecondGraphData();\n   }\n\n   @Input()\n   chartWidth: number;\n\n   @Input()\n   chartHeight: number;\n\n   @Input()\n   isRealtime: boolean;\n\n   setSecondGraphData(): void {\n      // Passed second graph metrics\n      this.flatData.forEach(flatMetric => {\n         if (flatMetric.graph.secondGraph == null) {\n            return;\n         }\n\n         const data: FlatGraphMetric =\n               this.flatData.find((metric: FlatGraphMetric) => metric.graph.id === flatMetric.graph.secondGraph.id);\n         if (!data) {\n            return;\n         }\n\n         flatMetric.graph.secondGraph = data.graph;\n\n         const series: PerfGraphMetricsData[] = data.metrics.metricsSeries;\n         flatMetric.metrics.metricsSeries.push(...series);\n      });\n   }\n\n   differentConsolidatedGraphs: PerfGraph[];\n\n   @Input()\n   set consolidatedData(value: GraphMetric[]) {\n      this.loadedCharts = [];\n      const consolidatedFlatDataMap: any = {};\n      this.differentConsolidatedGraphs = [];\n\n      value.forEach((entry: GraphMetric) => {\n         entry.graphs.forEach((graph: PerfGraph) => {\n            if (this.visibleGraphId && graph.id !== this.visibleGraphId) {\n               return;\n            }\n            if (consolidatedFlatDataMap[graph.id] == null) {\n               consolidatedFlatDataMap[graph.id] = [];\n               this.differentConsolidatedGraphs.push(graph);\n            }\n\n            // Set all metrics for current graph in map object\n            consolidatedFlatDataMap[graph.id]\n                  .push(...this.perfOrchestrator.data.entitiesFlatData\n                        .filter(x => x.graph.id === graph.id));\n         });\n      });\n   }\n\n   constructor(private perfOrchestrator: PerfOrchestratorService,\n         private changeDetector: ChangeDetectorRef,\n         private refWatcher: ReferenceWatcher) {\n   }\n\n   ngOnInit(): void {\n      this.id = IdGenerator.getGuid();\n\n      this.refWatcher.watchSubscriptionRef(this.perfOrchestrator.consolidatedViewHelper.change.subscribe(() => {\n         if (this.perfOrchestrator.isShowSpecificModeEnabled && this.perfOrchestrator.isConsolidatedViewStateEnabled) {\n            this.consolidatedData = this.perfOrchestrator.data.entitiesGraphData;\n         }\n      }));\n   }\n\n   ngAfterViewInit(): void {\n      /**\n       * If view state is changed (from \"Show specific vms\" to \"Cluster level metrics for example\")\n       * while some entity perf data is still fetching, then loading has to be stopped because\n       * this entity perf data is not needed and wouldn't be loaded.\n       */\n      if (this.perfOrchestrator.isLoading) {\n         this.perfOrchestrator.remainingEntitiesToLoad = 0;\n      }\n   }\n\n   onChartZoomIn(opt: ChartZoomOption): void {\n      this.isZoomed = !opt.isZoomOut;\n      this.zoomOutOptions = opt;\n      this.zoom.emit(opt);\n      if (!(this.changeDetector as ViewRef).destroyed) {\n         this.changeDetector.detectChanges();\n      }\n   }\n\n   onPointHovered(value: SeriesPointHovered): void {\n      this.pointHoveredOption = value;\n   }\n\n   onChartLoad(chart: Highcharts.Chart, graph: PerfGraph): void {\n      const exportChartData: PerfExportData = new PerfExportData();\n      exportChartData.chart = chart;\n      exportChartData.graphName = graph.label;\n\n      this.loadedCharts.push(exportChartData);\n\n      const chartsNumber: number = this.getExpectedChartsCount();\n\n      // Announce messages for screen reader users when all charts finish loading.\n      if (this.loadedCharts.length === chartsNumber) {\n         this.allChartsLoaded.emit(this.loadedCharts);\n         const message: string = chartsNumber === 1\n               ? VsanUiUtils.getString(\"vsan.monitor.performance.chart.loaded.singular\")\n               : VsanUiUtils.getString(\"vsan.monitor.performance.chart.loaded.plural\", chartsNumber);\n         this.srOnlyMessage = message;\n      }\n   }\n\n   getExpectedChartsCount(): number {\n      let chartsNumber: number = 0;\n      if (this.flatData && this.flatData.length > 0) {\n         // we expect only one graph to be visible\n         if (this.visibleGraphId) {\n            chartsNumber = 1;\n         } else {\n            chartsNumber = this.flatData.length;\n         }\n      } else if (this.differentConsolidatedGraphs && this.differentConsolidatedGraphs.length > 0) {\n         chartsNumber = this.differentConsolidatedGraphs.length;\n      }\n\n      return chartsNumber;\n   }\n\n   get noDataView(): UnavailableViewSpec {\n      return VsanDateTimeUtils.isRecentTimeRange(this.currentTimeRange)\n            ? UnavailableViewSpec.PERF_VIEW_NO_DATA\n            : UnavailableViewSpec.PERF_VIEW_NO_DATA_FOR_SELECTED_PERIOD;\n   }\n\n   get emptyChartsVisible(): boolean {\n      // in composite chart case if no vm is selected or all vms are unchecked the view should be empty without\n      // unavailable view shown. differentConsolidatedGraphs in this case is [], so check it only for null.\n      return this.currentTimeRange\n            && this.isEmptyChartsVisible\n            && VsanUiUtils.isEmpty(this.flatData)\n            && this.differentConsolidatedGraphs == null;\n   }\n\n   graphTooltipVisible = (entry: FlatGraphMetric): boolean => {\n      return this.isShowGraphDescription && !!entry.graph.description;\n   };\n\n   /**\n    * Expand the charts to full screen width when the screen\n    * size is small or we only have one chart\n    */\n   get useFullWidth(): boolean {\n      const smallResolution: boolean = document.body.scrollWidth < 1000;\n      const isOnlyOneChart: boolean = !VsanUiUtils.isEmpty(this.flatData) && this.flatData.length === 1;\n      return !!this.visibleGraphId || smallResolution || isOnlyOneChart;\n   }\n\n   /**\n    * Reset the zoom level to default\n    * @param event\n    */\n   onZoomOut(): void {\n      const zoomOut: ChartZoomOption = new ChartZoomOption();\n      zoomOut.isZoomOut = true;\n      this.zoomOutOptions = zoomOut;\n   }\n\n   /**\n    * Open dialog with expanded graphic\n    * @param event\n    */\n   onExpand(entry: FlatGraphMetric): void {\n      const context: PerfChartContextData = {\n         entry: entry,\n         isShowZoomButton: this.isZoomButtonVisible,\n         isShowGraphDescription: this.isShowGraphDescription,\n         looseXAxisLabel: this.looseXAxisLabel,\n         chartLegendPosition: this.chartLegendPosition,\n         zoomOptions: this.zoomOutOptions,\n         customizableThresholds: this.customizableThresholds,\n      };\n\n      new ModalBuilder(\"chart/expandChart\")\n            .setSize(1200, 600)\n            .open(context)\n            .then(this.refreshZoomOnCollapseChart);\n   }\n\n   private refreshZoomOnCollapseChart = async (zoomOptions: ChartZoomOption) => {\n      if (zoomOptions) {\n         this.onChartZoomIn(zoomOptions);\n      }\n   };\n\n   /**\n    * Calculates the popup position of the signpost to avoid been cut off by the small screens\n    */\n   getPopUpPosition = (chartIndex: number): string => {\n      if (this.useFullWidth) {\n         return this.BOTTOM_MIDDLE_POSITION;\n      }\n      if (!this.compactMode && chartIndex % 2 === 0) {\n         return this.BOTTOM_RIGHT_POSITION;\n      }\n      return this.BOTTOM_LEFT_POSITION;\n   };\n\n   isHeaderSectionVisible(): boolean {\n      return !this.emptyChartsVisible && (!!this.title || !!this.subtitle || this.isAskVmwareLinkVisible ||\n            this.isShowAllLinkVisible || this.isZoomButtonVisible) && this.showHeaderSection;\n   }\n\n   getSpecifiedEntitiesFlatDataByGraph(graph: PerfGraph): PerfConsolidatedMetricSeries[] {\n      return this.perfOrchestrator.getSpecifiedEntitiesFlatDataByGraph(graph);\n   }\n}\n","<!--Copyright 2018-2022 VMware, Inc. All rights reserved. -- VMware Confidential-->\n<div class=\"vsan-actions\" *ngIf=\"isHeaderSectionVisible()\">\n   <div id=\"title\" class=\"title\">\n      <div class=\"icon-name-container\">\n         <clr-icon *ngIf=\"icon\" [attr.shape]=\"icon\"></clr-icon>\n         <h6 *ngIf=\"title\" [innerHTML]=\"title\"></h6>\n      </div>\n      <clr-button-group class=\"btn-link buttons-group\">\n         <clr-button id=\"ask-vmware\"\n                     name=\"ask-vmware\"\n                     *ngIf=\"isAskVmwareLinkVisible\"\n                     class=\"btn btn-sm\"\n                     [external-link]=\"'vsan.perf.chart.link' | localized\"\n                     [helpId]=\"AskVmwareId.VM_CONSUMPTION_IOPS\">\n         </clr-button>\n         <clr-button id=\"show-all-btn\"\n                     name=\"show-all-btn\"\n                     *ngIf=\"isShowAllLinkVisible\"\n                     (click)=\"clickShowAllLink.emit()\"\n                     class=\"btn btn-sm\">\n            {{\"vsan.perf.diagnostics.fullPerormanceDetailsLink\" | localized}}\n         </clr-button>\n         <clr-button id=\"zoom-btn\"\n                     name=\"zoom-btn\"\n                     *ngIf=\"isZoomButtonVisible && isZoomed\"\n                     (click)=\"onZoomOut()\"\n                     class=\"btn btn-sm\">\n            {{\"vsan.perf.chart.zoom\" | localized}}\n         </clr-button>\n      </clr-button-group>\n   </div>\n   <span id=\"subtitle\" *ngIf=\"subtitle\">{{subtitle}}</span>\n</div>\n\n<vsan-unavailable-view *ngIf=\"emptyChartsVisible\"\n                       [unavailableViewSpec]=\"noDataView\">\n</vsan-unavailable-view>\n\n<section id=\"consolidated-charts\"\n         *ngIf=\"differentConsolidatedGraphs != null\"\n         [class.small-charts]=\"compactMode\">\n   <div *ngFor=\"let graph of differentConsolidatedGraphs; let i = index\"\n        class=\"chart-container\"\n        [class.full-width]=\"useFullWidth\">\n      <vsan-perf-chart [graph]=\"graph\"\n                       [consolidatedMetrics]=\"getSpecifiedEntitiesFlatDataByGraph(graph)\"\n                       [consolidatedEntitiesData]=\"consolidatedEntitiesData\"\n                       [extremes]=\"zoomOutOptions\"\n                       (zoom)=\"onChartZoomIn($event)\"\n                       (load)=\"onChartLoad($event, graph)\"\n                       [index]=\"i\"\n                       [showSmall]=\"compactMode\"\n                       [containerId]=\"id\"\n                       [showExpandButton]=\"false\"\n                       [showExportButton]=\"false\"\n                       [tooltipPopUpPosition]=\"getPopUpPosition(i)\"\n                       [looseXAxisLabel]=\"looseXAxisLabel\"\n                       [legendPosition]=\"chartLegendPosition\"\n                       [customizableThresholds]=\"customizableThresholds\"\n                       [chartWidth]=\"chartWidth\"\n                       [chartHeight]=\"chartHeight\"\n                       (pointHovered)=\"onPointHovered($event)\"\n                       [pointHoveredOption]=\"pointHoveredOption\">\n      </vsan-perf-chart>\n   </div>\n</section>\n<section id=\"charts\"\n         *ngIf=\"flatData?.length > 0 && !visibleGraphId\"\n         [class.small-charts]=\"compactMode\">\n   <div *ngFor=\"let entry of flatData; let i = index;\"\n        class=\"chart-container\"\n        [class.full-width]=\"useFullWidth\">\n      <vsan-perf-chart [graph]=\"entry.graph\"\n                       [metrics]=\"entry.metrics\"\n                       [entityRefId]=\"entry.entityRefId ? entry.entityRefId : entry.metrics.entityRefId\"\n                       (zoom)=\"onChartZoomIn($event)\"\n                       (expand)=\"onExpand(entry)\"\n                       (load)=\"onChartLoad($event, entry.graph)\"\n                       [index]=\"i\"\n                       [isRealtime]=\"isRealtime\"\n                       [isZoomAllowed]=\"!isRealtime\"\n                       [containerId]=\"id\"\n                       [showSmall]=\"compactMode\"\n                       [tooltipVisible]=\"graphTooltipVisible(entry)\"\n                       [tooltipPopUpPosition]=\"getPopUpPosition(i)\"\n                       [extremes]=\"zoomOutOptions\"\n                       [looseXAxisLabel]=\"looseXAxisLabel\"\n                       [legendPosition]=\"chartLegendPosition\"\n                       [customizableThresholds]=\"customizableThresholds\"\n                       [keepPlotLineOnClick]=\"keepPlotLineOnClick\"\n                       (onPlotLineChanged)=\"onPlotLineChanged.emit($event)\"\n                       (onTooltipActionClicked)=\"onTooltipActionClicked.emit($event)\"\n                       [selectedPlotLineValue]=\"selectedPlotLineValue\"\n                       [actionLink]=\"actionLink\"\n                       (pointHovered)=\"onPointHovered($event)\"\n                       [pointHoveredOption]=\"pointHoveredOption\">\n      </vsan-perf-chart>\n   </div>\n</section>\n<section id=\"filteredCharts\"\n         *ngIf=\"flatData?.length > 0 && visibleGraphId\">\n   <ng-container *ngFor=\"let entry of flatData; let i = index;\">\n      <vsan-perf-chart *ngIf=\"visibleGraphId === entry.graph.id\"\n                       [graph]=\"entry.graph\"\n                       [metrics]=\"entry.metrics\"\n                       [entityRefId]=\"entry.entityRefId ? entry.entityRefId : entry.metrics.entityRefId\"\n                       (zoom)=\"onChartZoomIn($event)\"\n                       (expand)=\"onExpand(entry)\"\n                       (load)=\"onChartLoad($event, entry.graph)\"\n                       [index]=\"0\"\n                       [containerId]=\"id\"\n                       [showSmall]=\"compactMode\"\n                       [tooltipVisible]=\"graphTooltipVisible(entry)\"\n                       [tooltipPopUpPosition]=\"getPopUpPosition(0)\"\n                       [extremes]=\"zoomOutOptions\"\n                       [looseXAxisLabel]=\"looseXAxisLabel\"\n                       [legendPosition]=\"chartLegendPosition\"\n                       [customizableThresholds]=\"customizableThresholds\"\n                       [keepPlotLineOnClick]=\"keepPlotLineOnClick\"\n                       (onPlotLineChanged)=\"onPlotLineChanged.emit($event)\"\n                       (onTooltipActionClicked)=\"onTooltipActionClicked.emit($event)\"\n                       [selectedPlotLineValue]=\"selectedPlotLineValue\"\n                       [actionLink]=\"actionLink\"\n                       (pointHovered)=\"onPointHovered($event)\"\n                       [pointHoveredOption]=\"pointHoveredOption\">\n      </vsan-perf-chart>\n   </ng-container>\n</section>"]}