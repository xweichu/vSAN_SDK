{"version":3,"sources":["webpack:///src/app/vsan/common/component/datagrid/tree-datagrid.module.ts","webpack:///src/app/vsan/common/util/modal-builder.ts","webpack:///src/app/vsan/internetconnectivity/edit/edit-internet-connectivity-config.component.ts","webpack:///src/app/vsan/common/component/popup-list/popup-list.module.ts","webpack:///src/app/vsan/internetconnectivity/internet-connectivity.html","webpack:///src/app/vsan/internetconnectivity/internet-connectivity.module.ts","webpack:///src/app/vsan/common/component/navigation/vsan-breadcrumb.module.ts","webpack:///src/app/vsan/common/component/cell/common-cells.module.ts","webpack:///src/app/vsan/common/component/inventory/inventory-browser.module.ts","webpack:///src/app/vsan/internetconnectivity/internet-connectivity.component.ts","webpack:///src/app/vsan/common/vsan-common.module.ts","webpack:///src/app/vsan/common/component/search/search.module.ts","webpack:///src/app/vsan/internetconnectivity/edit/edit-internet-connectivity-config.html","webpack:///src/app/vsan/common/component/action-button/action-button.module.ts","webpack:///src/app/vsan/common/directive/reactive-forms/disable-control.directive.ts"],"names":["TreeDatagridModule","ModalBuilder","appId","size","DEFAULT_SIZE","title","accessibilityTitle","urlParams","dimensions","length","warn","setSize","WIDTH","HEIGHT","width","height","params","eventTarget","context","Promise","accept","pluginContext","targetElement","event","target","modalResultHandler","data","JSON","parse","stringify","focus","setTimeout","actionUrl","APP_URL","separator","param","openModalDialog","contextObjectUid","WIZARD_XL","repa","repaExtension","EditInternetConnectivityComponent","formBuilder","healthProvider","healthMutationProvider","changeDetectorRef","ENABLE_INTERNET_CONTROL_NAME","PROXY_CONTROL_NAME","busy","handleSettings","currentSettings","originalSpec","hasHostname","hostName","internetSettings","group","enableInternetAccess","port","userName","password","handleError","alertMessages","getString","confirm","get","updateValueAndValidity","invalid","internetForm","markAsTouched","proxyConfig","value","applyProxySetting","getEnableInternet","enableProxy","spec","isAutoDiscovered","hostname","username","promises","setTelementryConfig","clusterRef","push","clearTelementryConfig","all","then","close","showAlert","statusChanged","closeModalDialog","error","getModalContext","getExternalProxySettings","detectChanges","touched","PopupListModule","internetConnectivityRoutes","path","component","InternetConnectivityModule","VsanBreadcrumbModule","CommonCellsModule","InventoryBrowserModule","InternetConnectivityComponent","vsanPropertyProvider","permissionService","hasEditPermissions","err","alertText","status","proxy","editSettings","open","fetchData","vcRef","contextObject","getAnyVsanCluster","hasVcPermissions","EDIT_CLUSTER","result","proxySettings","populateStatus","populateProxy","populateUserName","srOnlyMessage","externalProxyData","autoDetectTxt","VsanCommonModule","SearchModule","ActionButtonModule","DisableControlDirective","ngControl","isInit","_disableControl","control","setDisabled","disableControl","disable","enable"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAqCA;AAAA;;;AAAA;AAAA;AAAA;;UAAaA,kB;;;;;;;;;;;;;;;;;;;ACrCb;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAOO;AAAA,YAAMC,YAAN;AAwBJ,gCAAoBC,KAApB,EAAmC;AAAA;;AAAf,iBAAAA,KAAA,GAAAA,KAAA;AAZZ,iBAAAC,IAAA,GAAiBF,YAAY,CAACG,YAA9B,CAY2B,CAVnC;AACA;;AACQ,iBAAAC,KAAA,GAAgB,IAAhB;AAEA,iBAAAC,kBAAA,GAA6B,IAA7B;AAEA,iBAAAC,SAAA,GAAiB,EAAjB;AAKP;;AAzBG;AAAA;AAAA,mBA2BJ,uBAAcC,UAAd,EAAkC;AAC/B,kBAAI,CAACA,UAAD,IAAeA,UAAU,CAACC,MAAX,KAAsB,CAAzC,EAA4C;AACzC,+DAAOC,IAAP,CAAY,0BAAZ,EAAwCF,UAAxC;;AACAA,0BAAU,GAAGP,YAAY,CAACG,YAA1B;AACF;;AACD,qBAAO,KAAKO,OAAL,CAAaH,UAAU,CAACP,YAAY,CAACW,KAAd,CAAvB,EAA6CJ,UAAU,CAACP,YAAY,CAACY,MAAd,CAAvD,CAAP;AACF;AAjCG;AAAA;AAAA,mBAmCJ,iBAAQC,KAAR,EAAuBC,MAAvB,EAAqC;AAClC,mBAAKZ,IAAL,GAAY,CAACW,KAAD,EAAQC,MAAR,CAAZ;AACA,qBAAO,IAAP;AACF;AAtCG;AAAA;AAAA,mBAwCJ,0BAAiBC,MAAjB,EAA4B;AACzB,mBAAKT,SAAL,GAAiBS,MAAjB;AACA,qBAAO,IAAP;AACF;AAED;;;;AA7CI;AAAA;AAAA,mBAgDJ,kBAASX,KAAT,EAAsB;AACnB,mBAAKA,KAAL,GAAaA,KAAb;AACA,qBAAO,IAAP;AACF;AAnDG;AAAA;AAAA,mBAqDJ,+BAAsBC,kBAAtB,EAAgD;AAC7C,mBAAKA,kBAAL,GAA0BA,kBAA1B;AACA,qBAAO,IAAP;AACF;AAED;;;;;AA1DI;AAAA;AAAA,mBA8DJ,wBAAeW,WAAf,EAAuC;AACpC,mBAAKA,WAAL,GAAmBA,WAAnB;AACA,qBAAO,IAAP;AACF;AAED;;;;;;;AAnEI;AAAA;AAAA,mBAyEJ,cAAKC,OAAL,EAAkB;AAAA;;AACf,qBAAO,IAAIC,OAAJ,CAAiB,UAACC,MAAD,EAAY;AACjC,uEAAYC,aAAZ,CAA0BC,aAA1B,GAA0C,KAAI,CAACL,WAAL,GAAmB,KAAI,CAACA,WAAxB,GACnCM,KAAK,IAAIA,KAAK,CAACC,MAAf,GAAwBD,KAAK,CAACC,MAA9B,GAAuC,IAD9C;;AAEA,uEAAYH,aAAZ,CAA0BI,kBAA1B,GAA+C,UAACC,IAAD,EAAgB;AAC5D,sBAAI,OAAOA,IAAP,KAAgB,WAApB,EAAiC;AAC9B;AACA;AACAN,0BAAM,CAACO,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAeH,IAAf,CAAX,CAAD,CAAN;AACF,mBAJD,MAIO,IAAI,uDAAYL,aAAZ,CAA0BC,aAA1B,IAA2C,uDAAYD,aAAZ,CAA0BC,aAA1B,CAAwCQ,KAAvF,EAA8F;AAClG;AACA;AACAC,8BAAU,CAAC;AAAA,6BAAM,uDAAYV,aAAZ,CAA0BC,aAA1B,CAAwCQ,KAAxC,EAAN;AAAA,qBAAD,EAAwD,GAAxD,CAAV;AACF;AACH,iBAVD;;AAYA,oBAAIE,SAAS,aAAc/B,YAAY,CAACgC,OAA3B,qBAA6C,KAAI,CAAC/B,KAAlD,CAAb;AAEA,oBAAIgC,SAAS,GAAW,GAAxB;;AACA,qBAAK,IAAMC,KAAX,IAAoB,KAAI,CAAC5B,SAAzB,EAAoC;AACjCyB,2BAAS,IAAIE,SAAS,GAAGC,KAAZ,GAAoB,GAApB,GAA0B,KAAI,CAAC5B,SAAL,CAAe4B,KAAf,CAAvC;AACAD,2BAAS,GAAG,GAAZ;AACF;;AAED,sEAAYE,eAAZ,CAA4B,KAAI,CAAC/B,KAAjC,EACM2B,SADN,EAEM,sEAAcK,gBAFpB,EAGM,KAAI,CAAClC,IAAL,CAAU,CAAV,CAHN,EAGoB,KAAI,CAACA,IAAL,CAAU,CAAV,CAHpB,EAIM,KAAI,CAACE,KAAL,IAAc,IAJpB,EAKM,uDAAYgB,aAAZ,CAA0BI;AAAmB;AALnD,kBAMMP;AAAQ;AANd,kBAOM,KAAI,CAACZ,kBAPX;AAQF,eA/BM,CAAP;AAgCF;AA1GG;;AAAA;AAAA;;AAEY,qBAAAM,KAAA,GAAgB,CAAhB;AACA,qBAAAC,MAAA,GAAiB,CAAjB;AAEA,qBAAAT,YAAA,GAAyB,CAAC,IAAD,EAAO,GAAP,CAAzB;AACA,qBAAAkC,SAAA,GAAsB,CAAC,IAAD,EAAO,GAAP,CAAtB;AAEA,qBAAAL,OAAA,GAAmB,6DAAYM,IAAZ,IAAoB,6DAAYC,aAAjC,GAC1B,YAD0B,GAE1B,iBAFQ;;OARZ;;;;;;;;;;;;;;;;;ACDP;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;UAUaC,iC;AAgBV,mDAAoBC,WAApB,EACoBC,cADpB,EAEoBC,sBAFpB,EAGoBC,iBAHpB,EAG0D;AAAA;;AAAA;;AAHtC,eAAAH,WAAA,GAAAA,WAAA;AACA,eAAAC,cAAA,GAAAA,cAAA;AACA,eAAAC,sBAAA,GAAAA,sBAAA;AACA,eAAAC,iBAAA,GAAAA,iBAAA;AAjBX,eAAAC,4BAAA,GAAuC,gBAAvC;AACA,eAAAC,kBAAA,GAA6B,OAA7B;AAKT,eAAAC,IAAA,GAAgB,IAAhB;;AA2BQ,eAAAC,cAAA,GAAiB,UAACC,eAAD,EAAkD;AACxE,kBAAI,CAACF,IAAL,GAAY,KAAZ;AACA,kBAAI,CAACG,YAAL,GAAoBD,eAApB;;AAEA,gBAAI,MAAI,CAACE,WAAL,CAAiBF,eAAe,CAACG,QAAjC,CAAJ,EAAgD;AAAA;;AAC7C,oBAAI,CAACC,gBAAL,GAAwB,MAAI,CAACZ,WAAL,CAAiBa,KAAjB,qEACjB,MAAI,CAACT,4BADY,EACmB,IAAI,0DAAJ,CAAgBI,eAAe,CAACM,oBAAhC,CADnB,0CAEjB,MAAI,CAACT,kBAFY,EAES,IAAI,0DAAJ,CAAgB,IAAI,6FAAJ,CACrC,IADqC,EAErCG,eAAe,CAACG,QAFqB,EAGrCH,eAAe,CAACO,IAHqB,EAIrCP,eAAe,CAACQ,QAJqB,EAKrCR,eAAe,CAACS,QALqB,CAAhB,CAFT,0BAAxB;AASF,aAVD,MAUO;AAAA;;AACJ,oBAAI,CAACL,gBAAL,GAAwB,MAAI,CAACZ,WAAL,CAAiBa,KAAjB,uEACjB,MAAI,CAACT,4BADY,EACmB,IAAI,0DAAJ,CAAgBI,eAAe,CAACM,oBAAhC,CADnB,2CAEjB,MAAI,CAACT,kBAFY,EAES,IAAI,0DAAJ,CAAgB,IAAI,6FAAJ,EAAhB,CAFT,2BAAxB;AAIF;AACH,WApBO;;AAsBA,eAAAa,WAAA,GAAc,YAAM;AACzB,kBAAI,CAACZ,IAAL,GAAY,KAAZ;AACA,kBAAI,CAACa,aAAL,GAAqB,CAAC,4DAAYC,SAAZ,CAAsB,kCAAtB,CAAD,CAArB;AACF,WAHO;;AAKR,eAAAC,OAAA,GAAU,YAAM;AACb,kBAAI,CAACF,aAAL,GAAqB,IAArB,CADa,CAGb;AACA;;AACA,kBAAI,CAACP,gBAAL,CAAsBU,GAAtB,CAA0B,MAAI,CAACjB,kBAA/B,EAAmDkB,sBAAnD;;AACA,gBAAI,MAAI,CAACX,gBAAL,CAAsBY,OAA1B,EAAmC;AAChC;AACA,oBAAI,CAACC,YAAL,CAAkBC,aAAlB;;AACA;AACF;;AAED,gBAAMC,WAAW,GAAiB,MAAI,CAACf,gBAAL,CAAsBU,GAAtB,CAA0B,MAAI,CAACjB,kBAA/B,EAAmDuB,KAArF;;AACA,gBAAMC,iBAAiB,GAAY,CAAC,CAACF,WAAF,IAAiB,MAAI,CAACG,iBAAL,EAAjB,IAC7B,MAAI,CAAClB,gBAAL,CAAsBU,GAAtB,CAA0B,MAAI,CAACjB,kBAA/B,EAAmDuB,KAAnD,CAAyDG,WAD/D;;AAEA,gBAAMC,IAAI,GAAgC;AACvCC,8BAAgB,EAAE,KADqB;AAEvCnB,kCAAoB,EAAE,MAAI,CAACgB,iBAAL,EAFiB;AAGvCnB,sBAAQ,EAAEkB,iBAAiB,IAAIF,WAAW,CAACO,QAAjC,GAA4CP,WAAW,CAACO,QAAxD,GAAmE,IAHtC;AAIvCnB,kBAAI,EAAEc,iBAAiB,IAAIF,WAAW,CAACZ,IAAjC,GAAwCY,WAAW,CAACZ,IAApD,GAA2D,CAJ1B;AAKvCC,sBAAQ,EAAEa,iBAAiB,IAAIF,WAAW,CAACQ,QAAjC,GAA4CR,WAAW,CAACQ,QAAxD,GAAmE,IALtC;AAMvClB,sBAAQ,EAAEY,iBAAiB,IAAIF,WAAW,CAACV,QAAjC,GAA4CU,WAAW,CAACV,QAAxD,GAAmE;AANtC,aAA1C;AASA,gBAAMmB,QAAQ,GAAmB,CAAC,MAAI,CAAClC,sBAAL,CAA4BmC,mBAA5B,CAAgD,MAAI,CAACC,UAArD,EAAiEN,IAAjE,CAAD,CAAjC;;AACA,gBAAI,MAAI,CAACtB,WAAL,CAAiB,MAAI,CAACD,YAAL,CAAkBE,QAAnC,KACE,CAAC,MAAI,CAACC,gBAAL,CAAsBU,GAAtB,CAA0B,MAAI,CAACjB,kBAA/B,EAAmDuB,KAAnD,CAAyDG,WADhE,EAC6E;AAC1EK,sBAAQ,CAACG,IAAT,CAAc,MAAI,CAACrC,sBAAL,CAA4BsC,qBAA5B,CAAkD,MAAI,CAACF,UAAvD,CAAd;AACF;;AACD,kBAAI,CAAChC,IAAL,GAAY,IAAZ;AACA7B,mBAAO,CAACgE,GAAR,CAAYL,QAAZ,EAAsBM,IAAtB,CAA2B;AAAA,qBAAM,MAAI,CAACC,KAAL,CAAW,IAAX,CAAN;AAAA,aAA3B,WAAyD,MAAI,CAACC,SAA9D;AACF,WA/BD;;AAiCA,eAAAD,KAAA,GAAQ,YAAoC;AAAA,gBAAnCE,aAAmC,uEAAV,KAAU;AACzC,kBAAI,CAACvC,IAAL,GAAY,KAAZ;;AACA,wEAAYwC,gBAAZ,CAA6BD,aAA7B;AACF,WAHD;;AAKQ,eAAAD,SAAA,GAAY,UAACG,KAAD,EAAmB;AACpC,kBAAI,CAACzC,IAAL,GAAY,KAAZ;AACA,kBAAI,CAACa,aAAL,GAAqB,CAAC4B,KAAD,CAArB;AACF,WAHO;;AAKA,eAAArC,WAAA,GAAc,UAACC,QAAD,EAA+B;AAClD,mBAAQ,OAAOA,QAAP,KAAoB,WAArB,IAAqCA,QAAQ,KAAK,IAAlD,IAA0DA,QAAQ,CAAC5C,MAAT,GAAkB,CAAnF;AACF,WAFO;AAtFoD;;;;iBAE5D,oBAAQ;AACL,iBAAKuC,IAAL,GAAY,IAAZ;AACA,iBAAKgC,UAAL,GAAkB,4DAAYU,eAAZ,GAA8BV,UAAhD;AACA,iBAAKrC,cAAL,CAAoBgD,wBAApB,CAA6C,KAAKX,UAAlD,EACOI,IADP,CACY,KAAKnC,cADjB,WAEa,KAAKW,WAFlB;AAGF,W,CAED;AACA;;;;iBACA,8BAAkB;AACf,iBAAKf,iBAAL,CAAuB+C,aAAvB;AACF;;;iBA4ED,6BAAiB;AACd,mBAAO,KAAKtC,gBAAL,IAAyB,KAAKA,gBAAL,CAAsBU,GAAtB,CAA0B,KAAKlB,4BAA/B,EAA6DwB,KAA7F;AACF;;;eAED,eAAoB;AACjB,mBAAO,KAAKtB,IAAL,IACE,KAAKa,aAAL,IAAsB,KAAKA,aAAL,CAAmBpD,MAAnB,GAA4B,CADpD,IAEG,KAAK6C,gBAAL,IAAyB,KAAKA,gBAAL,CAAsBuC,OAA/C,IAA0D,KAAKvC,gBAAL,CAAsBY,OAF1F;AAGF;;;;;;;;;;;;;;;;;;;;;AC9GJ;AAAA;;;AAAA;AAAA;AAAA;;UAAa4B,e;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;uECtBb;AAAA;AAAA,sBAI+C,UAJ/C;;AAIiB;;;;;AAJjB;AAAA,8P,GAAA;AAAA;AAAA;AAAA;AAAA;AAAA,U,GAI+C,4E,IAC/C;AAAA;AAHiB,6BAAmB,UAAnB;AACA;;AAHjB,wBAEiB,SAFjB,EAGiB,SAHjB;AAGqC,S,EAAA,I;AAAA;;;kNAJ8C,4E,IACnF,+H,GAAA;AAAA;AAAA,gB,GAKkB,8E,IAElB,mX,GAAA,gJ,GAAyD,4E,IACtD,iW,GAAA,2M,GAAsC,+E,IACnC,8I,GAAA,sO,EAAA;AAAA;AAAA,gB,GAAsB,iG,GAAA,yD,GAEf,+E,IACP;AAAA;AAAA,sBAKsB,UALtB;;AAEQ;;;;;AAFR;AAAA,sB,IAKsB,iG,GAAA,yD,GAEb,4E,IACO,8E,IAEnB,igB,GAAA,oK,EAAA,yU,GAAgD,+E,IAC7C,kI,GAAA,2J,GAAiB,8E,GAAA,yD,GAAiG,+E,IAClH,oI,GAAA,2J,GAAmB,qF,IAChB,wJ,IAAgC,8E,IAAiB,kF,IAChC,4E,IACL,8E,IAElB,0f,GAAA,oK,EAAA,yU,GAAyC,+E,IACtC,kI,GAAA,2J,GAAiB,8E,GAAA,yD,GAAiF,+E,IAClG,oI,GAAA,2J,GAAmB,qF,IAChB,gK,IAAwC,8E,IAAgB,kF,IACvC,4E,IACL,8E,IAElB,qf,GAAA,oK,EAAA,yU,GAAoC,+E,IACjC,kI,GAAA,2J,GAAiB,8E,GAAA,yD,GAAoF,+E,IACrG,oI,GAAA,2J,GAAmB,qF,IAChB,iK,IAAyC,8E,IAAmB,kF,IAC3C,4E,IACL,yE,IACrB;AAAA;AAzCiB,6BAAiB,UAAjB;;AADjB,wBACiB,SADjB;;AASY;;AAAN,yBAAM,SAAN;;AAaH;;AAOA;;AAOA;AAAoC,S,EAAA;AAAA;;AA3BX;;AAAA;;AAMd,8BAAgC,mBAAhC;AACA,8BAAsC,mBAAtC;;AAJR,yBAGQ,SAHR,EAIQ,SAJR;;AAKsB;;AAAA;;AAKzB;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AACoB;;AAAA;;AAEkB;;AAAA;;AAItC;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AACoB;;AAAA;;AAE0B;;AAAA;;AAI9C;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AACoB;;AAAA;;AAE2B;;AAAA;AAAY,S;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;AChC9D;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAGA,UAAMC,0BAA0B,GAAW,CACxC;AACGC,YAAI,EAAE,EADT;AAEGC,iBAAS,EAAE;AAFd,OADwC,EAKxC;AACGD,YAAI,EAAE,YADT;AAEGC,iBAAS,EAAE;AAFd,OALwC,CAA3C;;UA0BaC,0B;;;;;;;;;;;;;;;;;;;ACtBb;AAAA;;;AAAA;AAAA;AAAA;;UAAaC,oB;;;;;;;;;;;;;;;;;;;AC0Cb;AAAA;;;AAAA;AAAA;AAAA;;UAAaC,iB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACLb;AAAA;;;AAAA;AAAA;AAAA;;UAAaC,sB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACjCN;AAAA,YAAMC,6BAAN;AAaJ,iDAAoB3D,cAApB,EACc4D,oBADd,EAEcC,iBAFd,EAEoD;AAAA;;AAAA;;AAFhC,iBAAA7D,cAAA,GAAAA,cAAA;AACN,iBAAA4D,oBAAA,GAAAA,oBAAA;AACA,iBAAAC,iBAAA,GAAAA,iBAAA;AAVd,iBAAAC,kBAAA,GAA8B,KAA9B;;AA2CQ,iBAAA7C,WAAA,GAAc,UAAC8C,GAAD,EAAiB;AACpC,oBAAI,CAACC,SAAL,GAAiBD,GAAjB;AACA,oBAAI,CAACE,MAAL,GAAc,4DAAY9C,SAAZ,CAAsB,eAAtB,CAAd;AACA,oBAAI,CAAC+C,KAAL,GAAa,4DAAY/C,SAAZ,CAAsB,eAAtB,CAAb;AACA,oBAAI,CAACJ,QAAL,GAAgB,4DAAYI,SAAZ,CAAsB,eAAtB,CAAhB;AACF,aALO;;AAyCR,iBAAAgD,YAAA,GAAe,YAAY;AACxB,kBAAI,CAAC,MAAI,CAAC9B,UAAV,EAAsB;AACnB;AACF;;AACD,kBAAI,gEAAJ,CAAiB,iCAAjB,EACOrE,OADP,CACe,GADf,EACoB,GADpB,EAEOoG,IAFP,CAEY;AACH/B,0BAAU,EAAE,MAAI,CAACA;AADd,eAFZ,EAKOI,IALP,CAKY,UAACG,aAAD,EAA4B;AAC/B,oBAAIA,aAAJ,EAAmB;AAChB,wBAAI,CAACyB,SAAL;AACF;AACH,eATP;AAUF,aAdD;AAzEC;;AAhBG;AAAA;AAAA,mBAkBJ,oBAAW;AACR,mBAAKA,SAAL;AACF;AApBG;AAAA;AAAA,mBAuBE,qBAAY;;;;;;;;;AACf,6BAAKL,SAAL,GAAiB,IAAjB;AACA,6BAAKC,MAAL,GAAc,4DAAY9C,SAAZ,CAAsB,cAAtB,CAAd;AACA,6BAAK+C,KAAL,GAAa,4DAAY/C,SAAZ,CAAsB,cAAtB,CAAb;AACA,6BAAKJ,QAAL,GAAgB,4DAAYI,SAAZ,CAAsB,cAAtB,CAAhB;AAEMmD,6B,GAAuB,sEAAcC,a;;;AAEtB,+BAAM,KAAKX,oBAAL,CAA0BY,iBAA1B,CAA4CF,KAA5C,CAAN;;;AAAlB,6BAAKjC,U;AACL,6BAAKwB,iBAAL,CAAuBY,gBAAvB,CAAwC,sEAAcF,aAAtD,EAAqE,CAAC,iEAAWG,YAAX,EAAD,CAArE,EACOjC,IADP,CACY,UAAAkC,MAAM;AAAA,iCAAI,MAAI,CAACb,kBAAL,GAA0Ba,MAA9B;AAAA,yBADlB,WAEa,UAAA7B,KAAK;AAAA,iCAAI,oDAAOA,KAAP,CAAa,kCAAkCA,KAA/C,CAAJ;AAAA,yBAFlB;;AAGsB,+BAAM,KAAK9C,cAAL,CAAoBgD,wBAApB,CAA6C,KAAKX,UAAlD,CAAN;;;AAAhBuC,qC;AACN,6BAAKX,MAAL,GAAc,KAAKY,cAAL,CAAoBD,aAApB,CAAd;AACA,6BAAKV,KAAL,GAAa,KAAKY,aAAL,CAAmBF,aAAnB,CAAb;AACA,6BAAK7D,QAAL,GAAgB,KAAKgE,gBAAL,CAAsBH,aAAtB,CAAhB;AAEA,6BAAKI,aAAL,GAAqB,4DAAY7D,SAAZ,CAAsB,uCAAtB,EACf,4DAAYA,SAAZ,CAAsB,yCAAtB,CADe,CAArB;;;;;;;;AAGA,4EAAO2B,KAAP;;AACA,6BAAK7B,WAAL;;;;;;;;;AAEL;AA9CG;AAAA;AAAA,mBAuDI,wBAAegE,iBAAf,EAA6D;AAClE,kBAAI,CAACA,iBAAL,EAAwB;AACrB,uBAAO,4DAAY9D,SAAZ,CAAsB,eAAtB,CAAP;AACF;;AACD,qBAAO8D,iBAAiB,CAACpE,oBAAlB,GACD,4DAAYM,SAAZ,CAAsB,iEAAtB,CADC,GAEC,4DAAYA,SAAZ,CAAsB,kEAAtB,CAFR;AAGF;AA9DG;AAAA;AAAA,mBAgEI,uBAAc8D,iBAAd,EAA4D;AACjE,kBAAI,CAACA,iBAAD,IAAsB,CAACA,iBAAiB,CAACvE,QAAzC,IACM,CAACuE,iBAAiB,CAACnE,IAAnB,IAA2BmE,iBAAiB,CAACnE,IAAlB,KAA2B,CADhE,EACoE;AAAE;AACnE,uBAAO,4DAAYK,SAAZ,CAAsB,eAAtB,CAAP;AACF;;AAED,kBAAMT,QAAQ,GAAWuE,iBAAiB,CAACvE,QAA3C;AACA,kBAAMI,IAAI,GAAW,KAAKmE,iBAAiB,CAACnE,IAA5C;AAEA,kBAAMoE,aAAa,GAAWD,iBAAiB,CAACjD,gBAAlB,GACxB,4DAAYb,SAAZ,CAAsB,0DAAtB,CADwB,GAEtB,4DAAYA,SAAZ,CAAsB,4DAAtB,CAFR;AAIA,qBAAO,4DAAYA,SAAZ,CAAsB,yDAAtB,EACDT,QADC,EACSI,IADT,EACeoE,aADf,CAAP;AAEF;AA/EG;AAAA;AAAA,mBAiFI,0BAAiBD,iBAAjB,EAA+D;AACpE,kBAAI,CAACA,iBAAD,IAAsB,CAACA,iBAAiB,CAAClE,QAA7C,EAAuD;AACpD,uBAAO,4DAAYI,SAAZ,CAAsB,eAAtB,CAAP;AACF;;AAED,qBAAO8D,iBAAiB,CAAClE,QAAzB;AACF;AAvFG;;AAAA;AAAA;;AAWJ,kEADC,wGACD,E,+EAAA,G,uCAAA,E,eAAA,E,MAAA;AAYA,kEADC,8EACD,E,iFAAA,E,iFAAA,E,sFAAA,G,uCAAA,E,WAAA,E,IAAA;;OAvBI;;;;;;;;;;;;;;;;;AC0BP;AAAA;;;AAAA;AAAA;AAAA;;UAAaoE,gB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACvBb;AAAA;;;AAAA;AAAA;AAAA;;UAAaC,Y;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;uEChBV;AAAA;;AAAA;;;;;;;;;;;;;;;;SAAA,E,IAAA,E,IAAA,C;;;;;;mBAA6F,kF,IAC1F,yZ,GAAA,wL,EAAA,8M,EAAA;AAAA;AAAA,U,EAAA,qK,GAAsB,qF,IACnB;AAAA;;AAAA;;;;;;;;;;;;;;;;SAAA,E,IAAA,E,IAAA,C;;;;;;mBAI4D,qF,IAC5D,6J,GAAA;AAAA;AAAA,gB,GAA6B,uG,GAAA,yD,GAErB,kF,IACY,kF,IACvB,0nB,GAAA,sO,EAAA;AAAA;AAAA,gB,EAAA;AAAA;AAAA,0H,EAAA;AAAA;AAAA,0H,EAAA;AAAA;AAAA,gB,EAAA,gM,EAAA,mN,GAI0D,kF,IACtC,+E,IACvB;AAAA;AAjB8D,8BAA8B,iBAA9B;;AAA9D,wBAA8D,UAA9D;;AAAuC;;AAAvC,wBAAuC,UAAvC;;AACG;;AAKU;;AAJP,yBAIO,UAJP;;AAEO;;AAFP,yBAEO,UAFP;;AAKO;;AAAP,yBAAO,UAAP;;AAQgB,8BAAsC,kBAAtC;;AAJnB,yBAImB,UAJnB;;AACmB;;AADnB,yBACmB,UADnB;AAC2D,S,EAAA;AAZ9D;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AACG;;AAAA;;AAAA;;AACG;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAKA;;AAAA;;AAA6B;;AAAA;;AAIhC;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;AAI0D,S;AAAA;;;;;aArBmB,4E,IACnF;AAAA;AAAA,sBAI0C,UAJ1C;;AAAkB;;;;;AAIA;;;;;AAJlB;AAAA,oP,GAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,U,EACkB,wD,GAGwB,4E,IACvC,gI,GAAA;AAAA;AAAA,gB,GAiBO,yE,IACS,4E,IACnB;AAAA;;AAvBkB;;AADA,6BAAiC,cAAjC;AAEA,6BAAgC,iBAAhC;AACA,6BAAqB,KAArB;;AAHlB,wBACkB,SADlB,EAAkB,SAAlB,EAEkB,SAFlB,EAGkB,SAHlB;;AAKS,6BAAwB,iBAAxB;;AAAN,wBAAM,SAAN;AAA8B,S,EAAA,I;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;ACqBjC;AAAA;;;AAAA;AAAA;AAAA;;UAAaC,kB;;;;;;;;;;;;;;;;;;;ACvBb;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;UAWaC,uB;AAIV,yCAAqBC,SAArB,EAA0C;AAAA;;AAArB,eAAAA,SAAA,GAAAA,SAAA;AAFb,eAAAC,MAAA,GAAkB,KAAlB;AAGP;;;;eAaD,eAAkB;AACf,mBAAO,KAAKC,eAAZ;AACF,W;eAXD,aACmB9D,KADnB,EACiC;AAC9B,iBAAK8D,eAAL,GAAuB9D,KAAvB;;AACA,gBAAI,CAAC,KAAK4D,SAAL,CAAeG,OAAhB,IAA2B,CAAC,KAAKF,MAArC,EAA6C;AAC1C;AACF;;AACD,iBAAKG,WAAL;AACF;;;iBAMD,oBAAQ;AACL,iBAAKA,WAAL;AACA,iBAAKH,MAAL,GAAc,IAAd;AACF;;;iBAEO,uBAAW;AAChB,iBAAKI,cAAL,GAAsB,KAAKL,SAAL,CAAeG,OAAf,CAAuBG,OAAvB,EAAtB,GAAyD,KAAKN,SAAL,CAAeG,OAAf,CAAuBI,MAAvB,EAAzD;AACF","file":"120-es5.js","sourcesContent":["/* Copyright 2019-2020 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {NgModule} from \"@angular/core\";\nimport {CommonModule} from \"@angular/common\";\nimport {FormsModule} from \"@angular/forms\";\nimport {ClarityModule} from \"@clr/angular\";\nimport {ValidationModule} from \"@component/validation/validation.module\";\nimport {CommonPipeModule} from \"@pipe/common-pipe.module\";\nimport {TreeExpanderComponent} from \"@component/datagrid/tree-expander.component\";\nimport {TreeColumnComponent} from \"@component/datagrid/tree-column.component\";\nimport {EnumeratedFilterComponent} from \"./filter/enumerated-filter.component\";\nimport {EnumeratedFilterItemComponent} from \"./filter/enumerated-filter-item.component\";\nimport {EnumFilterComponent} from \"@component/datagrid/filter/enum-filter.component\";\n\n@NgModule({\n   imports: [\n      CommonModule,\n      FormsModule,\n      ClarityModule,\n      ValidationModule,\n      CommonPipeModule,\n   ],\n   declarations: [\n      TreeColumnComponent,\n      TreeExpanderComponent,\n      EnumeratedFilterComponent,\n      EnumeratedFilterItemComponent,\n      EnumeratedFilterComponent,\n      EnumFilterComponent,\n   ],\n   exports: [\n      TreeColumnComponent,\n      TreeExpanderComponent,\n      EnumeratedFilterComponent,\n      EnumeratedFilterItemComponent,\n      EnumFilterComponent,\n   ],\n})\nexport class TreeDatagridModule {\n}\n","/* Copyright 2017-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {environment} from \"@env/environment\";\nimport {ManagedObject} from \"@service/managed-object\";\nimport {Logger} from \"./logger\";\nimport {WebPlatform} from \"./platform\";\nimport {VsanUiUtils} from \"./vsan-util\";\n\nexport class ModalBuilder {\n\n   static readonly WIDTH: number = 0;\n   static readonly HEIGHT: number = 1;\n\n   static readonly DEFAULT_SIZE: number[] = [1000, 530];\n   static readonly WIZARD_XL: number[] = [1200, 700];\n\n   static readonly APP_URL: string = (environment.repa && environment.repaExtension)\n         ? \"index.html\"\n         : \"/ui/h5-vsan-ui/\";\n\n   private size: number[] = ModalBuilder.DEFAULT_SIZE;\n\n   // When null, the modal dialog will be headless and the docked\n   // view is expected to provide a title bar.\n   private title: string = null;\n\n   private accessibilityTitle: string = null;\n\n   private urlParams: any = {};\n\n   private eventTarget: EventTarget;\n\n   constructor(private appId: string) {\n   }\n\n   setDimensions(dimensions: number[]): ModalBuilder {\n      if (!dimensions || dimensions.length !== 2) {\n         Logger.warn(\"invalid modal dimensions\", dimensions);\n         dimensions = ModalBuilder.DEFAULT_SIZE;\n      }\n      return this.setSize(dimensions[ModalBuilder.WIDTH], dimensions[ModalBuilder.HEIGHT]);\n   }\n\n   setSize(width: number, height: number): ModalBuilder {\n      this.size = [width, height];\n      return this;\n   }\n\n   setUrlParameters(params: any): ModalBuilder {\n      this.urlParams = params;\n      return this;\n   }\n\n   /**\n    * Set to null if the view provides its own title bar\n    */\n   setTitle(title: string): ModalBuilder {\n      this.title = title;\n      return this;\n   }\n\n   setAccessibilityTitle(accessibilityTitle: string): ModalBuilder {\n      this.accessibilityTitle = accessibilityTitle;\n      return this;\n   }\n\n   /**\n    * Set explicit event target if it is changed before opening the modal.\n    * For example when making a preceding request the event target is the XMLHttpRequest object.\n    */\n   setEventTarget(eventTarget: EventTarget): ModalBuilder {\n      this.eventTarget = eventTarget;\n      return this;\n   }\n\n   /**\n    * Opens a modal dialog and returns a promise to collect the result; On close the target element is focused.\n    * @param context - any JS data object, can be retrieved by WebPlatform.getModalContext()\n    * @returns {Promise<any>} - Invoked if the dialog invokes WebPlatform.closeModalDialog(arg)\n    *       with non-null arg. The promise is never rejected.\n    */\n   open(context?: any): Promise<any> {\n      return new Promise<any>((accept) => {\n         VsanUiUtils.pluginContext.targetElement = this.eventTarget ? this.eventTarget :\n               (event && event.target ? event.target : null);\n         VsanUiUtils.pluginContext.modalResultHandler = (data?: any) => {\n            if (typeof data !== \"undefined\") {\n               // Deep copy of the object was required to resolve an issue with object's prototype overriding when\n               // passing complex objects in IE11/Edge; Keep it for safety.\n               accept(JSON.parse(JSON.stringify(data)));\n            } else if (VsanUiUtils.pluginContext.targetElement && VsanUiUtils.pluginContext.targetElement.focus) {\n               // On cancel just focus the target element. Timeout is required as otherwise the focus may be\n               // consumed by the mouse click.\n               setTimeout(() => VsanUiUtils.pluginContext.targetElement.focus(), 100);\n            }\n         };\n\n         let actionUrl: string = `${ModalBuilder.APP_URL}?viewId=${this.appId}`;\n\n         let separator: string = \"?\";\n         for (const param in this.urlParams) {\n            actionUrl += separator + param + \"=\" + this.urlParams[param];\n            separator = \"&\";\n         }\n\n         WebPlatform.openModalDialog(this.title,\n               actionUrl,\n               ManagedObject.contextObjectUid,\n               this.size[0], this.size[1],\n               this.title != null,\n               VsanUiUtils.pluginContext.modalResultHandler /* onClose */,\n               context /* retrieve with Platform.getModalContext() */,\n               this.accessibilityTitle);\n      });\n   }\n\n}\n","/* Copyright 2018-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {ChangeDetectorRef, Component, OnInit, ViewChild} from \"@angular/core\";\nimport {ExternalProxySettingsConfig} from \"@generated/external-proxy-settings-config\";\nimport {VsanHealthPropertyProvider} from \"@generated/vsan-health-property-provider\";\nimport {VsanHealthMutationProvider} from \"@generated/vsan-health-mutation-provider\";\nimport {ManagedObject} from \"@service/managed-object\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {FormBuilder, FormControl, FormGroup} from '@angular/forms';\nimport {ClrForm} from \"@clr/angular\";\nimport {ProxySetting} from \"@component/proxy-settings/proxy-inputs.component\";\n\n@Component({\n   templateUrl: \"edit-internet-connectivity-config.html\",\n   styleUrls: [\"edit-internet-connectivity-config.scss\"],\n   selector: \"vsan-edit-internet-connectivity-config\",\n})\nexport class EditInternetConnectivityComponent implements OnInit {\n\n   readonly ENABLE_INTERNET_CONTROL_NAME: string = \"enableInternet\";\n   readonly PROXY_CONTROL_NAME: string = \"proxy\";\n\n   private originalSpec: ExternalProxySettingsConfig;\n   private clusterRef: ManagedObject;\n\n   busy: boolean = true;\n   alertMessages: string[];\n\n   internetSettings: FormGroup;\n\n   @ViewChild(ClrForm)\n   internetForm: ClrForm;\n\n   constructor(private formBuilder: FormBuilder,\n               private healthProvider: VsanHealthPropertyProvider,\n               private healthMutationProvider: VsanHealthMutationProvider,\n               private changeDetectorRef: ChangeDetectorRef) {}\n\n   ngOnInit(): void {\n      this.busy = true;\n      this.clusterRef = VsanUiUtils.getModalContext().clusterRef;\n      this.healthProvider.getExternalProxySettings(this.clusterRef)\n            .then(this.handleSettings)\n            .catch(this.handleError);\n   }\n\n   // Assigns correct change detection and prevents \"ExpressionChangedAfterItHasBeenCheckedError\" exception.\n   // The exception was causing the blockButton to not get correct value when toggling the forms\n   ngAfterViewChecked(): void {\n      this.changeDetectorRef.detectChanges();\n   }\n\n   private handleSettings = (currentSettings: ExternalProxySettingsConfig) => {\n      this.busy = false;\n      this.originalSpec = currentSettings;\n\n      if (this.hasHostname(currentSettings.hostName)) {\n         this.internetSettings = this.formBuilder.group({\n               [this.ENABLE_INTERNET_CONTROL_NAME]: new FormControl(currentSettings.enableInternetAccess),\n               [this.PROXY_CONTROL_NAME]: new FormControl(new ProxySetting(\n                     true,\n                     currentSettings.hostName,\n                     currentSettings.port,\n                     currentSettings.userName,\n                     currentSettings.password)),\n         });\n      } else {\n         this.internetSettings = this.formBuilder.group({\n               [this.ENABLE_INTERNET_CONTROL_NAME]: new FormControl(currentSettings.enableInternetAccess),\n               [this.PROXY_CONTROL_NAME]: new FormControl(new ProxySetting()),\n         });\n      }\n   };\n\n   private handleError = () => {\n      this.busy = false;\n      this.alertMessages = [VsanUiUtils.getString(\"vsan.common.error.dataExtraction\")];\n   };\n\n   confirm = () => {\n      this.alertMessages = null;\n\n      // For a special case: when enabling checkboxes and click APPLY button directly, the status of\n      // custom form control is not correct, we need to call updateValueAndValidity() for it first.\n      this.internetSettings.get(this.PROXY_CONTROL_NAME).updateValueAndValidity();\n      if (this.internetSettings.invalid) {\n         // Display input field error message when there is no proxy setting change.\n         this.internetForm.markAsTouched();\n         return;\n      }\n\n      const proxyConfig: ProxySetting = this.internetSettings.get(this.PROXY_CONTROL_NAME).value;\n      const applyProxySetting: boolean = !!proxyConfig && this.getEnableInternet() &&\n            this.internetSettings.get(this.PROXY_CONTROL_NAME).value.enableProxy;\n      const spec: ExternalProxySettingsConfig = {\n         isAutoDiscovered: false,\n         enableInternetAccess: this.getEnableInternet(),\n         hostName: applyProxySetting && proxyConfig.hostname ? proxyConfig.hostname : null,\n         port: applyProxySetting && proxyConfig.port ? proxyConfig.port : 0,\n         userName: applyProxySetting && proxyConfig.username ? proxyConfig.username : null,\n         password: applyProxySetting && proxyConfig.password ? proxyConfig.password : null,\n      };\n\n      const promises: Promise<any>[] = [this.healthMutationProvider.setTelementryConfig(this.clusterRef, spec)];\n      if (this.hasHostname(this.originalSpec.hostName) &&\n            !this.internetSettings.get(this.PROXY_CONTROL_NAME).value.enableProxy) {\n         promises.push(this.healthMutationProvider.clearTelementryConfig(this.clusterRef));\n      }\n      this.busy = true;\n      Promise.all(promises).then(() => this.close(true)).catch(this.showAlert);\n   };\n\n   close = (statusChanged: boolean = false) => {\n      this.busy = false;\n      VsanUiUtils.closeModalDialog(statusChanged);\n   };\n\n   private showAlert = (error: string) => {\n      this.busy = false;\n      this.alertMessages = [error];\n   };\n\n   private hasHostname = (hostName: string): boolean => {\n      return (typeof hostName !== 'undefined') && hostName !== null && hostName.length > 0;\n   };\n\n   getEnableInternet(): boolean {\n      return this.internetSettings && this.internetSettings.get(this.ENABLE_INTERNET_CONTROL_NAME).value;\n   }\n\n   get blockApplyButton(): boolean {\n      return this.busy\n            || this.alertMessages && this.alertMessages.length > 0\n            || (this.internetSettings && this.internetSettings.touched && this.internetSettings.invalid);\n   }\n}\n","/* Copyright 2019 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {NgModule} from \"@angular/core\";\nimport {CommonModule} from \"@angular/common\";\nimport {ClarityModule} from \"@clr/angular\";\nimport {CommonPipeModule} from \"@pipe/common-pipe.module\";\nimport {PopupListComponent} from \"@component/popup-list/popup-list.component\";\nimport {PopupListItemDirective} from \"@component/popup-list/popup-list-item.directive\";\n\n@NgModule({\n   imports: [\n      CommonModule,\n      ClarityModule,\n      CommonPipeModule\n   ],\n   declarations: [\n      PopupListComponent,\n      PopupListItemDirective\n   ],\n   exports: [\n      PopupListComponent,\n      PopupListItemDirective\n   ]\n})\nexport class PopupListModule {\n}\n","<!--Copyright 2016-2020 VMware, Inc. All rights reserved. -- VMware Confidential-->\n<vsan-validation id=\"alert\"\n                 *ngIf=\"alertText\"\n                 [alert]=\"alertText\"\n                 [allowReload]=\"true\"\n                 (onClosed)=\"alertText = null\">\n</vsan-validation>\n\n<clr-stack-view id=\"vsanInternetConnectivityStackEditor\">\n   <clr-stack-header id=\"property-stack\">\n      <span vsan-auto-focus>\n         {{\"vsan.manage.externalProxySettings.title\" | localized}}\n      </span>\n      <button id=\"editExternalProxySettingsBtn\"\n              class=\"stack-action btn btn-sm\"\n              (click)=\"editSettings()\"\n              [disabled]=\"!hasEditPermissions\"\n              [class.disabled]=\"!hasEditPermissions\"\n              type=\"button\">\n         {{\"vsan.manage.externalProxySettings.action.edit.label\" | localized}}\n      </button>\n   </clr-stack-header>\n\n   <clr-stack-block id=\"internetAccessStatusBlock\">\n      <clr-stack-label>{{\"vsan.manage.externalProxySettings.internetAccess.status.label\" | localized}}</clr-stack-label>\n      <clr-stack-content>\n         <span id=\"internetAccessStatus\">{{status}}</span>\n      </clr-stack-content>\n   </clr-stack-block>\n\n   <clr-stack-block id=\"proxySettingsBlock\">\n      <clr-stack-label>{{\"vsan.manage.externalProxySettings.proxy.label\" | localized}}</clr-stack-label>\n      <clr-stack-content>\n         <span id=\"externalProxySettingsSummary\">{{proxy}}</span>\n      </clr-stack-content>\n   </clr-stack-block>\n\n   <clr-stack-block id=\"userNameBlock\">\n      <clr-stack-label>{{\"vsan.manage.externalProxySettings.userName.label\" | localized}}</clr-stack-label>\n      <clr-stack-content>\n         <span id=\"externalProxySettingsUserName\">{{userName}}</span>\n      </clr-stack-content>\n   </clr-stack-block>\n</clr-stack-view>","/* Copyright 2019 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {NgModule} from \"@angular/core\";\nimport {CommonModule} from \"@angular/common\";\nimport {FormsModule, ReactiveFormsModule} from \"@angular/forms\";\nimport {RouterModule, Routes} from \"@angular/router\";\nimport {ClarityModule} from \"@clr/angular\";\nimport {VsanCommonModule} from \"app/vsan/common/vsan-common.module\";\nimport {ProxySettingsModule} from \"@component/proxy-settings/proxy-settings.module\";\nimport {InternetConnectivityComponent} from \"./internet-connectivity.component\";\nimport {EditInternetConnectivityComponent} from \"./edit/edit-internet-connectivity-config.component\";\n\nconst internetConnectivityRoutes: Routes = [\n   {\n      path: \"\",\n      component: InternetConnectivityComponent\n   },\n   {\n      path: \"editConfig\",\n      component: EditInternetConnectivityComponent\n   }\n];\n\n@NgModule({\n   imports: [\n      CommonModule,\n      FormsModule,\n      ReactiveFormsModule,\n      ClarityModule,\n      VsanCommonModule,\n      ProxySettingsModule,\n      RouterModule.forChild(internetConnectivityRoutes)\n   ],\n   declarations: [\n      InternetConnectivityComponent,\n      EditInternetConnectivityComponent\n   ]\n})\nexport class InternetConnectivityModule {\n}","/* Copyright 2020 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {NgModule} from \"@angular/core\";\nimport {VsanBreadcrumbNavComponent} from \"./vsan-breadcrumb-nav.component\";\nimport {ClarityModule} from \"@clr/angular\";\nimport {CommonModule} from \"@angular/common\";\nimport {CommonDirectiveModule} from \"@directive/common-directive.module\";\nimport {CommonPipeModule} from \"@pipe/common-pipe.module\";\n\n@NgModule({\n   imports: [CommonModule, ClarityModule, CommonDirectiveModule, CommonPipeModule],\n   declarations: [VsanBreadcrumbNavComponent],\n   exports: [\n      VsanBreadcrumbNavComponent,\n   ],\n})\nexport class VsanBreadcrumbModule {}\n","/* Copyright 2019-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {NgModule} from \"@angular/core\";\nimport {CommonModule} from \"@angular/common\";\nimport {FormsModule} from \"@angular/forms\";\nimport {ClarityModule} from \"@clr/angular\";\nimport {ValidationModule} from \"@component/validation/validation.module\";\nimport {CommonPipeModule} from \"@pipe/common-pipe.module\";\nimport {CommonDirectiveModule} from \"@directive/common-directive.module\";\nimport {HealthStatusCell} from \"@component/cell/health-status-cell.component\";\nimport {LabelCell} from \"@component/cell/label-cell.component\";\nimport {StoragePolicyCell} from \"@component/cell/storage-policy-cell.component\";\nimport {MorCell} from \"@component/cell/mor-cell.component\";\nimport {IconItemComponent} from \"@component/cell/icon-item.component\";\nimport {HealthStateItemComponent} from \"@component/cell/health-state-item.component\";\nimport {ListCell} from \"@component/cell/list-cell.component\";\nimport {PspHealthStateItemComponent} from \"@component/cell/psp-health-state-item.component\";\nimport {HealthTestValueComponent} from \"@component/cell/health-test-value.component\";\nimport {HealthLinkCellComponent} from \"@component/cell/health-link-cell.component\";\nimport {HealthMorCellComponent} from \"@component/cell/health-mor-cell.component\";\n\n@NgModule({\n   imports: [\n      CommonModule,\n      FormsModule,\n      ClarityModule,\n      ValidationModule,\n      CommonPipeModule,\n      CommonDirectiveModule,\n   ],\n   // TODO: (vasilevd) Move health specific components to a separate common health module\n   declarations: [\n      HealthStatusCell,\n      HealthTestValueComponent,\n      LabelCell,\n      StoragePolicyCell,\n      MorCell,\n      HealthMorCellComponent,\n      ListCell,\n      IconItemComponent,\n      HealthStateItemComponent,\n      PspHealthStateItemComponent,\n      HealthLinkCellComponent,\n   ],\n   exports: [\n      HealthStatusCell,\n      HealthTestValueComponent,\n      LabelCell,\n      StoragePolicyCell,\n      MorCell,\n      HealthMorCellComponent,\n      ListCell,\n      IconItemComponent,\n      HealthStateItemComponent,\n      PspHealthStateItemComponent,\n      HealthLinkCellComponent,\n   ],\n})\nexport class CommonCellsModule {\n}\n","/* Copyright 2019-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {NgModule} from \"@angular/core\";\nimport {CommonModule} from \"@angular/common\";\nimport {FormsModule} from \"@angular/forms\";\nimport {ClarityModule} from \"@clr/angular\";\nimport {CommonPipeModule} from \"@pipe/common-pipe.module\";\nimport {InventoryBrowserComponent} from \"@component/inventory/inventory-browser.component\";\nimport {InventoryNodeComponent} from \"@component/inventory/inventory-node.component\";\nimport {WitnessCandidateInventoryService} from \"@generated/witness-candidate-inventory-service\";\nimport {DatacenterInventoryService} from \"@generated/datacenter-inventory-service\";\nimport {NetworkInventoryService} from \"@generated/network-inventory-service\";\nimport {ComputeInventoryService} from \"@generated/compute-inventory-service\";\nimport {IoInsightInventoryService} from \"@generated/io-insight-inventory-service\";\nimport {SearchModule} from \"@component/search/search.module\";\nimport {TreeNodeComponent} from \"@component/inventory/tree-view/tree-node.component\";\nimport {TreeViewComponent} from \"@component/inventory/tree-view/tree-view.component\";\nimport {DropdownObjectSelectorComponent} from \"@component/inventory/dropdown-object-selector/dropdown-object-selector.component\";\nimport {CommonDirectiveModule} from \"@directive/common-directive.module\";\nimport {InventoryNodesComponent} from \"@component/inventory/inventory-nodes.component\";\nimport {TreeNodesComponent} from \"@component/inventory/tree-view/tree-nodes.component\";\n\n@NgModule({\n   imports: [\n      CommonModule,\n      FormsModule,\n      ClarityModule,\n      CommonPipeModule,\n      SearchModule,\n      CommonDirectiveModule,\n   ],\n   declarations: [\n      InventoryBrowserComponent,\n      InventoryNodesComponent,\n      InventoryNodeComponent,\n      TreeNodeComponent,\n      TreeNodesComponent,\n      TreeViewComponent,\n      DropdownObjectSelectorComponent,\n   ],\n   exports: [\n      InventoryBrowserComponent,\n      DropdownObjectSelectorComponent,\n      TreeViewComponent,\n   ],\n   providers: [\n      WitnessCandidateInventoryService,\n      DatacenterInventoryService,\n      NetworkInventoryService,\n      ComputeInventoryService,\n      IoInsightInventoryService,\n   ],\n})\nexport class InventoryBrowserModule {\n}","/* Copyright 2016-2020 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, OnInit} from \"@angular/core\";\nimport {ManagedObject} from \"@service/managed-object\";\nimport {RefreshHandler} from \"@service/global-refresh.service\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {ModalBuilder} from \"@util/modal-builder\";\nimport {Logger} from \"@util/logger\";\nimport {VsanHealthPropertyProvider} from \"@generated/vsan-health-property-provider\";\nimport {VsanPropertyProvider} from \"@generated/vsan-property-provider\";\nimport {ExternalProxySettingsConfig} from \"@generated/external-proxy-settings-config\";\nimport {PermissionService} from \"@generated/permission-service\";\nimport {Privileges} from \"@generated/privileges\";\nimport {ScreenReaderAnnouncer} from \"@service/screen-reader-announcer.service\";\n\n@Component({\n   templateUrl: \"internet-connectivity.html\",\n   styleUrls: [\"internet-connectivity.scss\"],\n   selector: \"vsan-internet-conn-settings\",\n})\nexport class InternetConnectivityComponent implements OnInit {\n\n   private clusterRef: ManagedObject;\n\n   alertText: string;\n   hasEditPermissions: boolean = false;\n   status: string;\n   proxy: string;\n   userName: string;\n\n   @ScreenReaderAnnouncer()\n   srOnlyMessage: string;\n\n   constructor(private healthProvider: VsanHealthPropertyProvider,\n         private vsanPropertyProvider: VsanPropertyProvider,\n         private permissionService: PermissionService) {\n   }\n\n   ngOnInit() {\n      this.fetchData();\n   }\n\n   @RefreshHandler\n   async fetchData() {\n      this.alertText = null;\n      this.status = VsanUiUtils.getString(\"vsan.loading\");\n      this.proxy = VsanUiUtils.getString(\"vsan.loading\");\n      this.userName = VsanUiUtils.getString(\"vsan.loading\");\n\n      const vcRef: ManagedObject = ManagedObject.contextObject;\n      try {\n         this.clusterRef = await this.vsanPropertyProvider.getAnyVsanCluster(vcRef);\n         this.permissionService.hasVcPermissions(ManagedObject.contextObject, [Privileges.EDIT_CLUSTER()])\n               .then(result => this.hasEditPermissions = result)\n               .catch(error => Logger.error(\"Cannot retrieve permissions: \" + error));\n         const proxySettings = await this.healthProvider.getExternalProxySettings(this.clusterRef);\n         this.status = this.populateStatus(proxySettings);\n         this.proxy = this.populateProxy(proxySettings);\n         this.userName = this.populateUserName(proxySettings);\n\n         this.srOnlyMessage = VsanUiUtils.getString(\"vsan.screenReader.message.page.loaded\",\n               VsanUiUtils.getString(\"vsan.manage.externalProxySettings.title\"));\n      } catch (error) {\n         Logger.error(`Error getting proxy settings: ${error}`);\n         this.handleError(error);\n      }\n   }\n\n   private handleError = (err: string) => {\n      this.alertText = err;\n      this.status = VsanUiUtils.getString(\"vsan.na.label\");\n      this.proxy = VsanUiUtils.getString(\"vsan.na.label\");\n      this.userName = VsanUiUtils.getString(\"vsan.na.label\");\n   };\n\n   private populateStatus(externalProxyData: ExternalProxySettingsConfig): string {\n      if (!externalProxyData) {\n         return VsanUiUtils.getString(\"vsan.na.label\");\n      }\n      return externalProxyData.enableInternetAccess ?\n            VsanUiUtils.getString(\"vsan.manage.externalProxySettings.internetAccess.status.enabled\")\n            : VsanUiUtils.getString(\"vsan.manage.externalProxySettings.internetAccess.status.disabled\");\n   }\n\n   private populateProxy(externalProxyData: ExternalProxySettingsConfig): string {\n      if (!externalProxyData || !externalProxyData.hostName ||\n               (!externalProxyData.port && externalProxyData.port !== 0)) { // 0 is a valid port number.\n         return VsanUiUtils.getString(\"vsan.na.label\");\n      }\n\n      const hostName: string = externalProxyData.hostName;\n      const port: string = \"\" + externalProxyData.port;\n\n      const autoDetectTxt: string = externalProxyData.isAutoDiscovered ?\n            VsanUiUtils.getString(\"vsan.manage.externalProxySettings.proxyType.autoDetected\")\n            : VsanUiUtils.getString(\"vsan.manage.externalProxySettings.proxyType.userConfigured\");\n\n      return VsanUiUtils.getString(\"vsan.manage.externalProxySettings.proxy.summary.pattern\",\n            hostName, port, autoDetectTxt);\n   }\n\n   private populateUserName(externalProxyData: ExternalProxySettingsConfig): string {\n      if (!externalProxyData || !externalProxyData.userName) {\n         return VsanUiUtils.getString(\"vsan.na.label\");\n      }\n\n      return externalProxyData.userName;\n   }\n\n   editSettings = (): void => {\n      if (!this.clusterRef) {\n         return;\n      }\n      new ModalBuilder(\"internetConnectivity/editConfig\")\n            .setSize(580, 420)\n            .open({\n               clusterRef: this.clusterRef,\n            })\n            .then((statusChanged: boolean) => {\n               if (statusChanged) {\n                  this.fetchData();\n               }\n            });\n   };\n}","/* Copyright 2019 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {NgModule} from \"@angular/core\";\nimport {CommonDirectiveModule} from \"@directive/common-directive.module\";\nimport {CommonPipeModule} from \"@pipe/common-pipe.module\";\nimport {ValidationModule} from \"@component/validation/validation.module\";\nimport {ActionButtonModule} from \"@component/action-button/action-button.module\";\nimport {PromptModule} from \"@component/dialog/prompt/prompt.module\";\nimport {CommonCellsModule} from \"@component/cell/common-cells.module\";\nimport {InventoryBrowserModule} from \"@component/inventory/inventory-browser.module\";\nimport {SearchModule} from \"@component/search/search.module\";\nimport {TreeDatagridModule} from \"@component/datagrid/tree-datagrid.module\";\nimport {DatetimePickerModule} from \"@component/datetime-picker/datetime-picker.module\";\nimport {PopupListModule} from \"@component/popup-list/popup-list.module\";\nimport {VsanBreadcrumbModule} from \"@component/navigation/vsan-breadcrumb.module\";\n\n@NgModule({\n   imports: [\n         CommonDirectiveModule,\n         CommonPipeModule,\n         ValidationModule,\n         ActionButtonModule,\n         PromptModule,\n         CommonCellsModule,\n         InventoryBrowserModule,\n         SearchModule,\n         TreeDatagridModule,\n         DatetimePickerModule,\n         PopupListModule,\n         VsanBreadcrumbModule,\n   ],\n   exports: [\n      CommonDirectiveModule,\n      CommonPipeModule,\n      ValidationModule,\n      ActionButtonModule,\n      PromptModule,\n      CommonCellsModule,\n      InventoryBrowserModule,\n      SearchModule,\n      TreeDatagridModule,\n      DatetimePickerModule,\n      PopupListModule,\n      VsanBreadcrumbModule,\n   ],\n})\nexport class VsanCommonModule { }","/* Copyright 2019 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {NgModule} from \"@angular/core\";\nimport {CommonModule} from \"@angular/common\";\nimport {FormsModule} from \"@angular/forms\";\nimport {ClarityModule} from \"@clr/angular\";\nimport {CommonPipeModule} from \"@pipe/common-pipe.module\";\nimport {SearchComponent} from \"@component/search/search.component\";\n\n@NgModule({\n   imports: [\n      CommonModule,\n      FormsModule,\n      ClarityModule,\n      CommonPipeModule\n   ],\n   declarations: [\n      SearchComponent\n   ],\n   exports: [\n      SearchComponent\n   ],\n})\nexport class SearchModule {\n}\n","<!--Copyright 2018-2020 VMware, Inc. All rights reserved. -- VMware Confidential-->\n<vsan-edit-prompt [(alertMessages)]=\"alertMessages\"\n                  [title]=\"'vsan.manage.externalProxySettings.action.edit.title' | localized\"\n                  [blockButton]=\"blockApplyButton\"\n                  [blockContent]=\"busy\"\n                  (onConfirm)=\"confirm()\">\n   <form *ngIf=\"internetSettings\" clrForm clrLayout=\"horizontal\" [formGroup]=\"internetSettings\">\n      <clr-checkbox-wrapper>\n         <input clrCheckbox\n                type=\"checkbox\"\n                id=\"enable-internet\"\n                name=\"enableInternet\"\n                formControlName=\"{{ENABLE_INTERNET_CONTROL_NAME}}\" />\n         <label for=\"enable-internet\">\n            {{'vsan.manage.externalProxySettings.action.edit.enableInternet' | localized}}\n         </label>\n      </clr-checkbox-wrapper>\n      <vsan-proxy-inputs class=\"indent\"\n                         formControlName=\"{{PROXY_CONTROL_NAME}}\"\n                         role=\"group\"\n                         aria-labelledby=\"proxy-checkbox-label\"\n                         [enableInternet]=\"getEnableInternet()\">\n      </vsan-proxy-inputs>\n   </form>\n</vsan-edit-prompt>\n","/* Copyright 2019-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {NgModule} from \"@angular/core\";\nimport {CommonModule} from \"@angular/common\";\nimport {ClarityModule} from \"@clr/angular\";\nimport {ActionButtonSeparatorComponent} from \"@component/action-button/action-button-separator.component\";\nimport {ButtonTitleDirective} from \"@component/action-button/button-title.directive\";\nimport {ButtonGroupDirective} from \"@component/action-button/button-group.directive\";\nimport {ButtonGroupWrapDirective} from \"@component/action-button/button-group-wrap.directive\";\n\n@NgModule({\n   imports: [\n      CommonModule,\n      ClarityModule,\n   ],\n   declarations: [\n      ActionButtonSeparatorComponent,\n      ButtonGroupDirective,\n      ButtonGroupWrapDirective,\n      ButtonTitleDirective,\n   ],\n   exports: [\n      ActionButtonSeparatorComponent,\n      ButtonGroupDirective,\n      ButtonGroupWrapDirective,\n      ButtonTitleDirective,\n   ]\n})\nexport class ActionButtonModule {\n}\n","/* Copyright 2019-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport { NgControl } from '@angular/forms';\nimport {Directive, Input, OnInit} from \"@angular/core\";\n\n/**\n * This directive is used to provide declarative style disabling for angular reactive forms's input elements.\n * This is required since the reactive forms only provide a way to disable them initially,\n * but there is no binding as it seems and subsequent changes to the argument doesn't affect the\n * input's disabled element.\n * Here is a stackoverflow thread with the given issue and some more details on the current approach:\n * https://stackoverflow.com/questions/40494968/reactive-forms-disabled-attribute\n */\n@Directive({\n   selector: \"[vsan-disable-form-control]\"\n})\nexport class DisableControlDirective implements OnInit {\n\n   private isInit: boolean = false;\n\n   constructor( private ngControl : NgControl ) {\n   }\n\n   private _disableControl: boolean;\n\n   @Input(\"vsan-disable-form-control\")\n   set disableControl(value: boolean ) {\n      this._disableControl = value;\n      if (!this.ngControl.control || !this.isInit) {\n         return;\n      }\n      this.setDisabled();\n   }\n\n   get disableControl(): boolean {\n      return this._disableControl;\n   }\n\n   ngOnInit(): void {\n      this.setDisabled();\n      this.isInit = true;\n   }\n\n   private setDisabled(): void {\n      this.disableControl ? this.ngControl.control.disable() : this.ngControl.control.enable();\n   }\n}"]}