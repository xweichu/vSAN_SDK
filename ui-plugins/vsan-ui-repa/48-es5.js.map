{"version":3,"sources":["webpack:///src/app/vsan/performance/model/expandable-perf-entity.ts","webpack:///src/app/vsan/performance/model/vm-disks-perf-entity.ts","webpack:///src/app/vsan/performance/export/perf-chart-export-options-dialog.component.ts","webpack:///src/app/vsan/performance/export/perf-chart-export-options-dialog.html","webpack:///src/app/vsan/performance/model/host-disk-entity.ts","webpack:///src/app/vsan/performance/util/perf-multi-entities-data-query.service.ts","webpack:///src/app/vsan/performance/performance-common.module.ts"],"names":["ExpandablePerfEntity","VmDisksPerfEntity","PerfChartExportOptionsDialogComponent","VsanUiUtils","subEntities","Map","graphs","showSubEntities","entityNames","Set","graphNames","context","getModalContext","exportData","forEach","data","subEntityName","add","set","graphName","setModalDialogHeight","BIG_HEIGHT","selectedSubEntities","value","key","selectedGraphs","result","Array","from","closeModalDialog","name","escape","HostDiskPerfEntity","DiskType","PerfMultiEntitesDataQueryService","perfProvider","iscsiTargetProvider","ioInsightService","diskManagementService","parseIscsiTargets","iscsiTargets","length","filter","item","isEmpty","luns","map","target","entityId","CLUSTER_ISCSI_TARGET_ENTITY","entityName","alias","entityUuid","children","parseIscsiLun","lunItem","lun","CLUSTER_ISCSI_LUN_ENTITY","getString","lunId","targetAlias","parseVirtualMachinesDiskData","vmDisksData","diskData","vmDisksPerfEntity","entityLabelName","vSCSIcontrollers","parseSCSIDiskData","vmUuid","nestedPerfEntity","values","perfEntity","IO_INSIGHT_ENTITY","push","parseVirtualDisk","isIoInsightSupported","virtualDisks","disk","virtualDisk","createVirtualDiskEntity","controllerKey","datastoreName","vmdkPath","combinedEntity","get","additionalConfigSpecId","VM_VIRTUAL_DISK_ENTITY","vmdk","datastorePath","diskName","icon","parsePhysicalAdapters","adapters","adapter","HOST_PHYSICAL_ADAPTER_ENTITY","deviceName","hostUuid","join","parseVnics","isRdtChecksumSupported","vnicAggregationEntity","HOST_NETWORK_ENTITY","HOST_RDT_NET_ENTITY","vmks","HOST_VIRTUAL_ADAPTER_ENTITY","netStackInstanceKey","unshift","parseDiskGroups","diskGroups","group","HOST_DISK_GROUP_ENTITY","diskGroupName","diskGroupUuid","getDisksFromDiskGroup","diskGroup","disks","cacheDisk","HOST_CACHE_DISK_ENTITY","diskUuid","diskType","CACHE_DISK","capacityDisks","capacityDisk","HOST_CAPACITY_DISK_ENTITY","CAPACITY_DISK","view","instance","requestIoInsightData","isVsanMaxEnabled","response","CLUSTER_ISCSI","HOST_DISK","HOST_PHYSICAL_ADAPTER","HOST_VIRTUAL_ADAPTER","VM_VIRTUAL_DISK","CLUSTER_IO_INSIGHT","HOST_IO_INSIGHT","getIscsiTargets","contextObject","getDiskMappings","getHostPhysicalAdapters","getHostVirtualAdapters","getVirtualMachineDiskData","getVirtualMachinesDiskData","Error","error","vscsiEntities","entity","vscsi","VM_VIRTUAL_SCSI_ENTITY","busId","position","vmdkName","getSingleTierDisks","parseSingleTierDisks","VSAN_MAX_DISK_LSOM","VSAN_MAX_DISK_SCSIFW","performanceRoutes","path","component","PerformanceCommonModule"],"mappings":"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","file":"48-es5.js","sourcesContent":["/* Copyright 2017 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {BasePerfEntity} from \"./base-perf-entity\";\n\nexport class ExpandablePerfEntity extends BasePerfEntity {\n   /**\n    * an iSCSI target object has several iSCSI luns as children\n    */\n   public children: BasePerfEntity[];\n}","/* Copyright 2019 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {BasePerfEntity} from \"./base-perf-entity\";\nimport {NestedPerfEntity} from \"./nested-perf-entity\";\n\nexport class VmDisksPerfEntity extends BasePerfEntity {\n   nestedPerfEntity: BasePerfEntity[];\n   icon: string;\n}","/* Copyright 2020-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, OnInit} from \"@angular/core\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {PerfChartExportContextData} from \"./perf-chart-export-context.data\";\nimport {PerfChartExportOptions} from \"./perf-chart-export-options\";\nimport {FileUtils} from \"@component/export/files/file-utils\";\n\n@Component({\n   templateUrl: \"perf-chart-export-options-dialog.html\",\n   selector: \"vsan-perf-chart-export-options-dialog\",\n   styleUrls: [\"perf-chart-export-options-dialog.scss\"],\n})\nexport class PerfChartExportOptionsDialogComponent implements OnInit {\n   private static readonly BIG_HEIGHT: number = 400;\n\n   VsanUiUtils: typeof VsanUiUtils = VsanUiUtils;\n\n   subEntities: Map<string, boolean> = new Map<string, boolean>();\n   graphs: Map<string, boolean> = new Map<string, boolean>();\n   showSubEntities: boolean = false;\n   entityNames: Set<string> = new Set<string>();\n   graphNames: Set<string> = new Set<string>();\n\n   ngOnInit(): void {\n      const context: PerfChartExportContextData = VsanUiUtils.getModalContext() as PerfChartExportContextData;\n      context.exportData.forEach(data => {\n         if (data.subEntityName) {\n            this.entityNames.add(data.subEntityName);\n            this.subEntities.set(data.subEntityName, true);\n         }\n         this.graphs.set(data.graphName, true);\n         this.graphNames.add(data.graphName);\n      });\n      this.showSubEntities = context.showSubEntities;\n      if (this.showSubEntities) {\n         VsanUiUtils.setModalDialogHeight(PerfChartExportOptionsDialogComponent.BIG_HEIGHT);\n      }\n   }\n\n   onConfirm(): void {\n      const selectedSubEntities: Set<string> = new Set<string>();\n      this.subEntities.forEach(\n            (value: boolean, key: string) => {\n               if (value) {\n                  selectedSubEntities.add(key);\n               }\n            });\n\n      const selectedGraphs: Set<string> = new Set<string>();\n      this.graphs.forEach(\n            (value: boolean, key: string) => {\n               if (value) {\n                  selectedGraphs.add(key);\n               }\n            });\n\n      const result: PerfChartExportOptions = {\n         selectedSubEntities: Array.from(selectedSubEntities),\n         selectedGraphs: Array.from(selectedGraphs),\n      };\n      VsanUiUtils.closeModalDialog(result);\n   }\n\n   escapeName(name: string): string {\n      return FileUtils.escape(name);\n   }\n}\n","<!--Copyright 2020-2021 VMware, Inc. All rights reserved. -- VMware Confidential-->\n<vsan-edit-prompt\n      [title]=\"'vsan.perf.chart.exportOptions.title' | localized\"\n      [confirmText]=\"'vsan.perf.chart.exportOptions.confirm.button' | localized\"\n      (onConfirm)=\"onConfirm()\">\n   <div class=\"dialog-container\">\n      <div>{{\"vsan.perf.chart.exportOptions.info\" | localized}}</div>\n      <div *ngIf=\"subEntities.size > 0 && showSubEntities\"\n           class=\"sub-entities-container\">\n         <div>{{\"vsan.perf.chart.exportOptions.selectVMDKs\" | localized}}</div>\n         <div class=\"checkbox-container\">\n            <clr-checkbox-container *ngFor=\"let subEntity of entityNames\">\n               <clr-checkbox-wrapper>\n                  <input type=\"checkbox\"\n                         clrCheckbox\n                         id=\"{{escapeName(subEntity)}}\"\n                         name=\"{{escapeName(subEntity)}}\"\n                         [ngModel]=\"subEntities.get(subEntity)\"\n                         (ngModelChange)=\"subEntities.set(subEntity, $event)\"/>\n                  <label>{{subEntity}}</label>\n               </clr-checkbox-wrapper>\n            </clr-checkbox-container>\n         </div>\n      </div>\n      <div>{{\"vsan.perf.chart.exportOptions.selectMetrics\" | localized}}</div>\n      <div class=\"checkbox-container\">\n         <clr-checkbox-container *ngFor=\"let graph of graphNames\">\n            <clr-checkbox-wrapper>\n               <input type=\"checkbox\"\n                      clrCheckbox\n                      id=\"{{escapeName(graph)}}\"\n                      name=\"{{escapeName(graph)}}\"\n                      [ngModel]=\"graphs.get(graph)\"\n                      (ngModelChange)=\"graphs.set(graph, $event)\"/>\n               <label>{{graph}}</label>\n            </clr-checkbox-wrapper>\n         </clr-checkbox-container>\n      </div>\n   </div>\n</vsan-edit-prompt>\n","/* Copyright 2017 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {BasePerfEntity} from \"./base-perf-entity\";\n\nexport class HostDiskPerfEntity extends BasePerfEntity {\n   public diskType: DiskType;\n   public diskGroup: string;\n}\n\nexport enum DiskType {\n   CACHE_DISK,\n   CAPACITY_DISK\n}","/* Copyright 2017-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Injectable} from \"@angular/core\";\nimport {VsanPerfPropertyProvider} from \"@generated/vsan-perf-property-provider\";\nimport {VsanIscsiTargetPropertyProvider} from \"@generated/vsan-iscsi-target-property-provider\";\nimport {IscsiTarget} from \"@generated/iscsi-target\";\nimport {IscsiLun} from \"@generated/iscsi-lun\";\nimport {BasePerfEntity} from \"../model/base-perf-entity\";\nimport {ManagedObject} from \"@service/managed-object\";\nimport {DiskGroup} from \"@generated/disk-group\";\nimport {DiskInfo} from \"@generated/disk-info\";\nimport {PerfVscsiEntity} from \"@generated/perf-vscsi-entity\";\nimport {PerfVirtualDiskEntity} from \"@generated/perf-virtual-disk-entity\";\nimport {PerfVirtualMachineDiskData} from \"@generated/perf-virtual-machine-disk-data\";\nimport {PerfPhysicalAdapterEntity} from \"@generated/perf-physical-adapter-entity\";\nimport {PerfVnicEntity} from \"@generated/perf-vnic-entity\";\nimport {DiskType, HostDiskPerfEntity} from \"../model/host-disk-entity\";\nimport {ExpandablePerfEntity} from \"../model/expandable-perf-entity\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {NestedPerfEntity} from \"../model/nested-perf-entity\";\nimport {PerfChartDataConstants} from \"@component/chart/performance/perf-chart-util\";\nimport {PerfMonitorViewType} from \"../model/perf-monitor-view-type.model\";\nimport {VmDisksPerfEntity} from \"../model/vm-disks-perf-entity\";\nimport {IoInsightInstance} from \"@generated/io-insight-instance\";\nimport {IoInsightService} from \"@generated/io-insight-service\";\nimport {DiskManagementService} from \"@generated/disk-management-service\";\nimport {Logger} from \"@util/logger\";\n\n/**\n * The wrapper object of VsanPerfPropertyProvider,\n * use this object to transform each response object of the perf multi-entities requests to BasePerfEntity[]\n */\n@Injectable()\nexport class PerfMultiEntitesDataQueryService {\n   constructor(private perfProvider: VsanPerfPropertyProvider,\n         private iscsiTargetProvider: VsanIscsiTargetPropertyProvider,\n         private ioInsightService: IoInsightService,\n         private diskManagementService: DiskManagementService) {\n   }\n\n   async queryEntitiesData(view: PerfMonitorViewType, instance: IoInsightInstance, requestIoInsightData: boolean,\n         isRdtChecksumSupported: boolean, isVsanMaxEnabled: boolean)\n         : Promise<BasePerfEntity[]> {\n      try {\n         let response: any = null;\n         switch (view) {\n            case PerfMonitorViewType.CLUSTER_ISCSI:\n               response = await this.iscsiTargetProvider.getIscsiTargets(ManagedObject.contextObject);\n               return this.parseIscsiTargets(response);\n            case PerfMonitorViewType.HOST_DISK:\n               return await this.getDiskMappings(isVsanMaxEnabled);\n            case PerfMonitorViewType.HOST_PHYSICAL_ADAPTER:\n               response = await this.perfProvider.getHostPhysicalAdapters(\n                     ManagedObject.contextObject);\n               return this.parsePhysicalAdapters(response);\n            case PerfMonitorViewType.HOST_VIRTUAL_ADAPTER:\n               response = await this.perfProvider.getHostVirtualAdapters(\n                     ManagedObject.contextObject);\n               return this.parseVnics(response, isRdtChecksumSupported);\n            case PerfMonitorViewType.VM_VIRTUAL_DISK:\n               response = await this.perfProvider.getVirtualMachineDiskData(\n                     ManagedObject.contextObject, true);\n               return this.parseVirtualDisk(response, requestIoInsightData);\n            case PerfMonitorViewType.CLUSTER_IO_INSIGHT:\n            case PerfMonitorViewType.HOST_IO_INSIGHT:\n               response = await this.ioInsightService.getVirtualMachinesDiskData(\n                     instance, ManagedObject.contextObject);\n               return this.parseVirtualMachinesDiskData(response);\n            default:\n               throw new Error(\"Unsupported multi-entities view detect in method queryEntitiesData(): \" + view);\n         }\n      } catch (e) {\n         Logger.error(\"Unable to fetch perf entities.\", e);\n      }\n   }\n\n   private parseIscsiTargets = (iscsiTargets: IscsiTarget[]): BasePerfEntity[] => {\n      if (iscsiTargets === null || iscsiTargets.length === 0) {\n         return [];\n      }\n      return iscsiTargets\n            .filter(item => !VsanUiUtils.isEmpty(item.luns))\n            .map((item: IscsiTarget): BasePerfEntity => {\n         const target: ExpandablePerfEntity = new ExpandablePerfEntity();\n         target.entityId = PerfChartDataConstants.CLUSTER_ISCSI_TARGET_ENTITY;\n         target.entityName = item.alias;\n         target.entityUuid = item.alias;\n         if (item.luns) {\n            target.children = item.luns.map(this.parseIscsiLun);\n         }\n         return target;\n      });\n   };\n\n   private parseIscsiLun = (lunItem: IscsiLun): BasePerfEntity => {\n      const lun: BasePerfEntity = new BasePerfEntity();\n      lun.entityId = PerfChartDataConstants.CLUSTER_ISCSI_LUN_ENTITY;\n      lun.entityName = lunItem.alias ?\n            lunItem.alias : VsanUiUtils.getString(\n                  \"vsan.monitor.iscsi.performance.lun.name\", lunItem.lunId);\n      lun.entityUuid = lunItem.targetAlias + \"|\" + lunItem.lunId;\n      return lun;\n   };\n\n   private parseVirtualMachinesDiskData = (vmDisksData: PerfVirtualMachineDiskData[]): BasePerfEntity[] => {\n      const result: BasePerfEntity[] = [];\n\n      vmDisksData.forEach(diskData => {\n         const vmDisksPerfEntity: VmDisksPerfEntity = new VmDisksPerfEntity();\n         vmDisksPerfEntity.entityName = diskData.entityLabelName;\n         const vSCSIcontrollers: Map<string, BasePerfEntity> = this.parseSCSIDiskData(diskData);\n         vmDisksPerfEntity.entityUuid = diskData.vmUuid + diskData.entityLabelName;\n         vmDisksPerfEntity.nestedPerfEntity = Array.from(vSCSIcontrollers.values());\n\n         vmDisksPerfEntity.nestedPerfEntity.forEach(perfEntity => {\n            perfEntity.entityId = PerfChartDataConstants.IO_INSIGHT_ENTITY;\n         });\n         result.push(vmDisksPerfEntity);\n      });\n      return result;\n   };\n\n   parseVirtualDisk = (vmDisksData: PerfVirtualMachineDiskData, isIoInsightSupported: boolean)\n         : NestedPerfEntity[] => {\n      if (!vmDisksData.virtualDisks) {\n         return [];\n      }\n\n      const vSCSIcontrollers: Map<string, BasePerfEntity> = this.parseSCSIDiskData(vmDisksData);\n\n      return vmDisksData.virtualDisks.map((disk: PerfVirtualDiskEntity): NestedPerfEntity => {\n         const virtualDisk: NestedPerfEntity = this.createVirtualDiskEntity(disk);\n         const controllerKey: string = \"[\" + disk.datastoreName + \"] \" + disk.vmdkPath;\n         virtualDisk.combinedEntity = vSCSIcontrollers.get(controllerKey);\n         // request IOInsight metrics if the feature is supported\n         if (isIoInsightSupported) {\n            virtualDisk.additionalConfigSpecId = PerfChartDataConstants.IO_INSIGHT_ENTITY;\n         }\n         return virtualDisk;\n      });\n   };\n\n   private parseSCSIDiskData(vmDisksData: PerfVirtualMachineDiskData): Map<string, BasePerfEntity> {\n      const vSCSIcontrollers: Map<string, BasePerfEntity> = new Map<string, BasePerfEntity>();\n\n      if (!vmDisksData.vscsiEntities) {\n         return vSCSIcontrollers;\n      }\n\n      const vmUuid: string = vmDisksData.vmUuid;\n      vmDisksData.vscsiEntities.forEach((entity: PerfVscsiEntity): void => {\n         const vscsi: BasePerfEntity = new BasePerfEntity();\n         vscsi.entityId = PerfChartDataConstants.VM_VIRTUAL_SCSI_ENTITY;\n         vscsi.entityName = VsanUiUtils.getString(\n               \"vsan.monitor.vm.performance.virtualdisk.name\",\n               entity.busId,\n               entity.position);\n         vscsi.entityLabelName = entity.deviceName + \" (\" + vscsi.entityName + \")\";\n         vscsi.entityUuid = vmUuid + \"|\" + vscsi.entityName;\n\n         vSCSIcontrollers.set(entity.vmdkName, vscsi);\n      });\n      return vSCSIcontrollers;\n   }\n\n   private createVirtualDiskEntity = (disk: PerfVirtualDiskEntity): NestedPerfEntity => {\n      const virtualDisk: NestedPerfEntity = new NestedPerfEntity();\n      virtualDisk.entityId = PerfChartDataConstants.VM_VIRTUAL_DISK_ENTITY;\n      virtualDisk.vmdk = disk.vmdkPath;\n      virtualDisk.entityUuid = disk.datastorePath + disk.vmdkPath;\n      virtualDisk.entityName = disk.diskName;\n      virtualDisk.icon = disk.icon;\n      return virtualDisk;\n   };\n\n   private parsePhysicalAdapters = (adapters: PerfPhysicalAdapterEntity[]): BasePerfEntity[] => {\n      if (adapters === null || adapters.length === 0) {\n         return [];\n      }\n      return adapters.map((item: PerfPhysicalAdapterEntity): BasePerfEntity => {\n         const adapter: BasePerfEntity = new BasePerfEntity();\n         adapter.entityId = PerfChartDataConstants.HOST_PHYSICAL_ADAPTER_ENTITY;\n         adapter.entityName = item.deviceName;\n         adapter.entityUuid = [\n            item.hostUuid,\n            item.deviceName].join(\"|\");\n         return adapter;\n      });\n   };\n\n   private parseVnics = (adapters: PerfVnicEntity[], isRdtChecksumSupported: boolean): BasePerfEntity[] => {\n      if (adapters === null || adapters.length === 0) {\n         return [];\n      }\n\n      let vnicAggregationEntity;\n      if (isRdtChecksumSupported) {\n         vnicAggregationEntity = new NestedPerfEntity();\n         vnicAggregationEntity.entityId = PerfChartDataConstants.HOST_NETWORK_ENTITY;\n         vnicAggregationEntity.entityName = VsanUiUtils.getString(\"vsan.monitor.host.performance.virtualAdapter.title\");\n         // the adapters belong to the same host, simply use the hostUuid from the first element.\n         vnicAggregationEntity.entityUuid = adapters[0].hostUuid;\n         vnicAggregationEntity.combinedEntity = new BasePerfEntity();\n         vnicAggregationEntity.combinedEntity.entityId = PerfChartDataConstants.HOST_RDT_NET_ENTITY;\n         vnicAggregationEntity.combinedEntity.entityUuid = adapters[0].hostUuid;\n         vnicAggregationEntity.combinedEntity.entityName = VsanUiUtils.getString(\"vsan.monitor.host.performance.virtualAdapter.title\");\n      } else {\n         vnicAggregationEntity = new BasePerfEntity();\n         vnicAggregationEntity.entityId = PerfChartDataConstants.HOST_NETWORK_ENTITY;\n         vnicAggregationEntity.entityName = VsanUiUtils.getString(\"vsan.monitor.host.performance.virtualAdapter.title\");\n         // the adapters belong to the same host, simply use the hostUuid from the first element.\n         vnicAggregationEntity.entityUuid = adapters[0].hostUuid;\n      }\n\n      const vmks: BasePerfEntity[] = adapters.map((item: PerfVnicEntity): BasePerfEntity => {\n         const adapter: BasePerfEntity = new BasePerfEntity();\n         adapter.entityId = PerfChartDataConstants.HOST_VIRTUAL_ADAPTER_ENTITY;\n         adapter.entityName = item.deviceName;\n         adapter.entityUuid = [\n            item.hostUuid,\n            item.netStackInstanceKey,\n            item.deviceName].join(\"|\");\n         return adapter;\n      });\n\n      // put the aggregation at the top of the vmk adapters\n      vmks.unshift(vnicAggregationEntity);\n      return vmks;\n   };\n\n   private async getDiskMappings(isVsanMaxEnabled: boolean): Promise<BasePerfEntity[]> {\n      if (isVsanMaxEnabled) {\n         return this.parseSingleTierDisks(\n               await this.diskManagementService.getSingleTierDisks(ManagedObject.contextObject));\n      }\n\n      return this.parseDiskGroups(await this.diskManagementService.getDiskMappings(ManagedObject.contextObject));\n   }\n\n   private parseSingleTierDisks(disks: DiskInfo[]): BasePerfEntity[] {\n      if (VsanUiUtils.isEmpty(disks)) {\n         return [];\n      }\n\n      return disks.map((item: DiskInfo): BasePerfEntity => {\n         const entity: NestedPerfEntity = new NestedPerfEntity();\n         entity.entityId = PerfChartDataConstants.VSAN_MAX_DISK_LSOM;\n         entity.entityUuid = item.diskUuid;\n         entity.entityName = item.diskName;\n         entity.combinedEntity = new BasePerfEntity();\n         entity.combinedEntity.entityId = PerfChartDataConstants.VSAN_MAX_DISK_SCSIFW;\n         entity.combinedEntity.entityUuid = item.diskUuid;\n         entity.combinedEntity.entityName = item.diskName;\n         return entity;\n      });\n   }\n\n   private parseDiskGroups = (diskGroups: DiskGroup[]): BasePerfEntity[] => {\n      if (diskGroups === null || diskGroups.length === 0) {\n         return [];\n      }\n      return diskGroups.map((item: DiskGroup): BasePerfEntity => {\n         const group: ExpandablePerfEntity = new ExpandablePerfEntity();\n         group.entityId = PerfChartDataConstants.HOST_DISK_GROUP_ENTITY;\n         group.entityName = item.diskGroupName;\n         group.entityUuid = item.diskGroupUuid;\n         group.children = this.getDisksFromDiskGroup(item);\n         return group;\n      });\n   };\n\n   private getDisksFromDiskGroup = (diskGroup: DiskGroup): BasePerfEntity[] => {\n      const disks: HostDiskPerfEntity[] = [];\n      if (!diskGroup) {\n         return disks;\n      }\n\n      /**\n       * every disk group has only one cache disk\n       */\n      if (diskGroup.cacheDisk) {\n         const cacheDisk: HostDiskPerfEntity = new HostDiskPerfEntity();\n         cacheDisk.entityId = PerfChartDataConstants.HOST_CACHE_DISK_ENTITY;\n         cacheDisk.entityUuid = diskGroup.cacheDisk.diskUuid;\n         cacheDisk.entityName = diskGroup.cacheDisk.diskName;\n         cacheDisk.diskType = DiskType.CACHE_DISK;\n         disks.push(cacheDisk);\n      }\n      /**\n       * disk group has several capacity disks\n       */\n      if (diskGroup.capacityDisks && diskGroup.capacityDisks.length) {\n         diskGroup.capacityDisks.forEach((capacityDisk: DiskInfo) => {\n            const disk: HostDiskPerfEntity = new HostDiskPerfEntity();\n            disk.entityId = PerfChartDataConstants.HOST_CAPACITY_DISK_ENTITY;\n            disk.entityUuid = capacityDisk.diskUuid;\n            disk.entityName = capacityDisk.diskName;\n            disk.diskType = DiskType.CAPACITY_DISK;\n            disks.push(disk);\n         });\n      }\n\n      return disks;\n   };\n}\n","/* Copyright 2020 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {NgModule} from \"@angular/core\";\nimport {ClarityModule} from \"@clr/angular\";\nimport {FormsModule} from \"@angular/forms\";\nimport {CommonModule} from \"@angular/common\";\nimport {PerfDetailChartsComponent} from \"./view/perf-detail-charts.component\";\nimport {SingleEntityDataPerfComponent} from \"./view/single-entity-data-perf.component\";\nimport {MultiEntitiesDataPerfComponent} from \"./view/multi-entities-data-perf.component\";\nimport {PerfMultiEntitiesMetricsComponent} from \"./view/perf-multi-entities-metrics.component\";\nimport {CommonPipeModule} from \"@pipe/common-pipe.module\";\nimport {VsanChartModule} from \"@component/chart/chart.module\";\nimport {ValidationModule} from \"@component/validation/validation.module\";\nimport {PerfMultiEntitesDataQueryService} from \"./util/perf-multi-entities-data-query.service\";\nimport {PerfOrchestratorService} from \"@util/performance/perf-orchestrator-service\";\nimport {IllustratedMessageModule} from \"@component/illustrated-message/illustrated-message.module\";\nimport {PerfChartExportComponent} from \"./export/perf-chart-export.component\";\nimport {PerfChartExportOptionsDialogComponent} from \"./export/perf-chart-export-options-dialog.component\";\nimport {RouterModule, Routes} from \"@angular/router\";\nimport {PromptModule} from \"@component/dialog/prompt/prompt.module\";\nimport {UnavailableViewModule} from \"@component/unavailable-view/unavailable-view.module\";\nimport {SearchModule} from \"@component/search/search.module\";\nimport {CommonDirectiveModule} from \"@directive/common-directive.module\";\n\nconst performanceRoutes: Routes = [\n   {\n      path: \"exportOptions\",\n      component: PerfChartExportOptionsDialogComponent,\n   },\n];\n\n@NgModule({\n   imports: [\n      FormsModule,\n      CommonModule,\n      ClarityModule,\n      IllustratedMessageModule,\n      UnavailableViewModule,\n      ValidationModule,\n      VsanChartModule,\n      PromptModule,\n      CommonPipeModule,\n      SearchModule,\n      RouterModule.forChild(performanceRoutes),\n      CommonDirectiveModule,\n   ],\n   declarations: [\n      PerfDetailChartsComponent,\n      SingleEntityDataPerfComponent,\n      MultiEntitiesDataPerfComponent,\n      PerfMultiEntitiesMetricsComponent,\n      PerfChartExportComponent,\n      PerfChartExportOptionsDialogComponent,\n   ],\n   exports: [\n      SingleEntityDataPerfComponent,\n      MultiEntitiesDataPerfComponent,\n      PerfChartExportOptionsDialogComponent,\n      PerfDetailChartsComponent,\n   ],\n   providers: [\n      PerfMultiEntitesDataQueryService,\n      PerfOrchestratorService,\n   ],\n})\nexport class PerformanceCommonModule {\n}\n"]}