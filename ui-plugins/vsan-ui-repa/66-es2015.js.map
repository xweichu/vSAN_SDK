{"version":3,"sources":["./src/app/vsan/disk-management/views/validation/disk-management-action-availability.service.ts","./src/app/vsan/disk-management/views/validation/disk-group-error.ts"],"names":[],"mappings":"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","file":"66-es2015.js","sourcesContent":["/* Copyright 2020-2022 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Injectable} from \"@angular/core\";\nimport {ClaimOption} from \"@generated/claim-option\";\nimport {ConnectionState} from \"@generated/connection-state\";\nimport {DiskData} from \"@generated/disk-data\";\nimport {DiskType} from \"@generated/disk-type\";\nimport {ManagedObject} from \"@service/managed-object\";\nimport {SpaceEfficiencyService} from \"@service/space-efficiency-service\";\nimport {DiskMgmtDiskUtil} from \"@util/disk-mgmt-disk.util\";\nimport {DiskMgmtHostUtil} from \"@util/disk-mgmt-host.util\";\nimport {ClaimableState} from \"@util/disk-mgmt.util\";\nimport {ActionAvailableStatus} from \"@util/validation/action-available-status\";\nimport {Validator} from \"@util/validation/validator\";\nimport {ValidatorsGroup} from \"@util/validation/validators-group\";\nimport {VsanDiskUtil} from \"@util/vsan-disk-util\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {Observable, Subject} from \"rxjs\";\nimport {ViewObjectsContext} from \"../model/view-objects-context\";\nimport {DiskGroupError} from \"./disk-group-error\";\nimport {DiskManagementActionContext} from \"./disk-management-action-context\";\nimport DeviceState = DiskData.DeviceState;\n\n/**\n * This service holds:\n *    1) The validation logic related to disk management actions. It stores action ids and mappings between them and\n *    the validations. Based on the specified actionId and context this class validates the action availability.\n *    2) Subjects and observables to facilitate sending and subscribing to the actions' result between components.\n */\n@Injectable()\nexport class DiskManagementActionAvailabilityService {\n\n   taskStarted: Subject<ManagedObject[]> = new Subject<ManagedObject[]>();\n   onTaskStarted: Observable<ManagedObject[]> = this.taskStarted.asObservable();\n   objectsViewSelected: Subject<ViewObjectsContext> = new Subject<ViewObjectsContext>();\n   onObjectsViewSelected: Observable<ViewObjectsContext> = this.objectsViewSelected.asObservable();\n   hostDetailsViewSelected: Subject<void> = new Subject<void>();\n   onHostDetailsViewSelected: Observable<void> = this.hostDetailsViewSelected.asObservable();\n\n   constructor(private spaceEfficiencyService: SpaceEfficiencyService) {\n   }\n\n   // Cluster level action IDs\n   static readonly SEMI_AUTO_CLAIM_DISKS_ID: string = \"vsphere.core.cluster.vsan.semiAutoClaimDisks\";\n   static readonly STOP_MANAGING_PMEM_ID: string = \"vsphere.core.cluster.vsan.stopManagingPmemAction\";\n   static readonly VIEW_CLUSTER_OBJECTS_ID: string = \"vsphere.core.cluster.vsan.viewObjects\";\n   static readonly VIEW_DUPLICATE_PCI_ID_DEVICES: string = \"viewDuplicatePciIdDevices\";\n   static readonly EDIT_VSAN_MANAGED_DISK_CLAIM_ID: string = \"editVsanManagedDiskClaim\";\n\n   // Host and disk group common action IDs\n   static readonly PRE_CHECK_ID: string = \"vsphere.core.cluster.vsan.preCheckEvacuationAction\";\n\n   // Host action IDs\n   static readonly CREATE_DISK_GROUP_ID: string = \"vsphere.core.cluster.vsan.createDiskGroupAction\";\n   static readonly VIEW_HOST_OBJECTS_ID: string = \"vsphere.core.cluster.vsan.host.viewObjects\";\n   static readonly VIEW_HOST_STORAGE_AND_GROUPS_ID: string = \"vsphere.core.cluster.vsan.host.viewDisksAndGroups\";\n\n   // Disk group action IDs\n   static readonly ADD_DISKS_TO_DISK_GROUP_ID: string = \"vsphere.core.cluster.vsan.addDiskToDiskGroupAction\";\n   static readonly DELETE_DISK_GROUP_ID: string = \"vsphere.core.cluster.vsan.deleteDiskGroupAction\";\n   static readonly RECREATE_DISK_GROUP_ID: string = \"vsphere.core.cluster.vsan.recreateDiskGroupAction\";\n   static readonly MOUNT_DISK_GROUP_ID: string = \"vsphere.core.cluster.vsan.mountDiskGroupAction\";\n   static readonly UNMOUNT_DISK_GROUP_ID: string = \"vsphere.core.cluster.vsan.unmountDiskGroupAction\";\n   static readonly VIEW_GROUP_OBJECTS_ID: string = \"vsphere.core.cluster.vsan.group.viewObjects\";\n   static readonly COPY_GROUP_UUID_ID: string = \"vsphere.core.cluster.vsan.group.copyGroupUuid\";\n\n   // Disk action IDs\n   static readonly ADD_DISK_TO_DISK_GROUP_ID: string = \"vsphere.core.cluster.vsan.disk.addDiskToDiskGroupAction\";\n   static readonly ADD_DISKS_TO_STORAGE_POOL_ID: string = \"vsphere.core.cluster.vsan.disk.addDisksToStoragePoolAction\";\n   static readonly DISK_PRE_CHECK_ID: string = \"vsphere.core.cluster.vsan.disk.preCheckEvacuationAction\";\n   static readonly DELETE_VSAN_DISK_ID: string = \"vsphere.core.cluster.vsan.disk.deleteDiskAction\";\n   static readonly DELETE_VSAN_DIRECT_DISK_ID: string = \"vsphere.core.cluster.vsan.disk.deleteDiskAction.vsanDirect\";\n   static readonly UNMOUNT_DISK_ID: string = \"vsphere.core.cluster.vsan.unmountDiskAction\";\n   static readonly MOUNT_DISK_ID: string = \"vsphere.core.cluster.vsan.mountDiskAction\";\n   static readonly TURN_LED_ON_ID: string = \"vsphere.core.cluster.vsan.turnLedOn\";\n   static readonly TURN_LED_OFF_ID: string = \"vsphere.core.cluster.vsan.turnLedOff\";\n   static readonly MARK_DISK_AS_SSD_ID: string = \"vsphere.core.cluster.vsan.tagAsSsd\";\n   static readonly MARK_DISK_AS_HDD_ID: string = \"vsphere.core.cluster.vsan.tagAsHdd\";\n   static readonly MARK_DISK_AS_LOCAL_ID: string = \"vsphere.core.cluster.vsan.markAsLocal\";\n   static readonly MARK_DISK_AS_REMOTE_ID: string = \"vsphere.core.cluster.vsan.markAsRemote\";\n   static readonly ERASE_DISK_PARTITIONS_ID: string = \"vsphere.core.cluster.vsan.erasePartitions\";\n   static readonly VIEW_STORAGE_OBJECTS_ID: string = \"vsphere.core.cluster.vsan.storage.viewObjects\";\n\n   /*\n    * Permission checks\n    */\n   private readonly hasEditPermission: Validator<DiskManagementActionContext> = new Validator(\n         (context: DiskManagementActionContext): boolean => !context.hasEditPermission,\n         VsanUiUtils.getString(\"vsan.common.nopermissions\"));\n\n   /*\n    * Validates that vSAN Max is enabled on the cluster.\n    */\n   private readonly isVsanMaxEnabled: Validator<DiskManagementActionContext> =  new Validator(\n         (ctx) => !ctx.vsanConfig?.isVsanMaxEnabled,\n         VsanUiUtils.getString(\"vsan.services.vsan.max.disabled.reason\"),\n   );\n\n   /*\n    * Whether the cluster is empty when checking for vSAN managed disk claim.\n    * Not a required validation if the vSAN managed disk claim is already enabled,\n    * as we want to allow the users to disable it.\n    */\n   private readonly isNotEmptyCluster: Validator<DiskManagementActionContext> =  new Validator(\n         // When the cluster is empty do not allow enabling this setting,\n         // however if it was already enabled we should let the user disable it.\n         (ctx) => !ctx.vsanConfig?.isDiskClaimVsanManaged && ctx.isEmptyCluster,\n         VsanUiUtils.getString(\"vsan.services.vsan.max.emptyCluster.reason\"),\n   );\n\n   /*\n    * Validates that auto claim mode is not enabled.\n    */\n   private readonly isNotAutoClaimMode: Validator<DiskManagementActionContext> = new Validator(\n         (context: DiskManagementActionContext): boolean => context.autoClaimMode,\n         VsanUiUtils.getString(\"vsan.diskmanagement.action.unsupportedReason.autoclaimMode\"));\n\n   /*\n    * Validates that the cluster has eligible disks for claiming.\n    */\n   private readonly hasClusterEligibleDisks: Validator<DiskManagementActionContext> = new Validator(\n         (context: DiskManagementActionContext): boolean => !DiskMgmtHostUtil.getEligibleDiskCount(context.allHosts),\n         VsanUiUtils.getString(\"vsan.actions.semiAutoClaimDisks.description.disabled\"));\n\n   /*\n    * Validates that the cluster has the disk group pre-check capability enabled and the host can be placed in MM\n    * with the current user's permissions.\n    */\n   private readonly isDiskGroupPreCheckAllowed: Validator<DiskManagementActionContext> = new Validator(\n         (context: DiskManagementActionContext): boolean =>\n               context.clusterCapabilities.isDiskResourcePrecheckSupported && !context.hasHostMaintenancePermission,\n         VsanUiUtils.getString(\"vsan.common.nopermissions\"));\n\n   /*\n    * Validates that the cluster has the host pre-check capability enabled and the host can be placed in MM\n    * with the current user's permissions.\n    */\n   private readonly isHostPreCheckAllowed: Validator<DiskManagementActionContext> = new Validator(\n         (context: DiskManagementActionContext): boolean =>\n               context.clusterCapabilities.isHostResourcePrecheckSupported && !context.hasHostMaintenancePermission,\n         VsanUiUtils.getString(\"vsan.common.nopermissions\"));\n\n   /*\n    * Validates that the cluster has the disk pre-check capability enabled and the host can be placed in MM\n    * with the current user's permissions.\n    */\n   private readonly isDiskPreCheckAllowed: Validator<DiskManagementActionContext> = new Validator(\n         (context: DiskManagementActionContext): boolean =>\n               context.clusterCapabilities.isDiskResourcePrecheckSupported && !context.hasHostMaintenancePermission,\n         VsanUiUtils.getString(\"vsan.common.nopermissions\"));\n\n   /*\n    * Validates that the cluster has objects on its hosts.\n    */\n   private readonly clusterHasObjectUuids: Validator<DiskManagementActionContext> = new Validator(\n         (context: DiskManagementActionContext): boolean =>\n               !(context.allHosts && context.allHosts.some(this.hasObjectUuids)),\n         VsanUiUtils.getString(\"vsan.actions.viewClusterObjects.description.disabled\"));\n\n   /*\n    * Host related checks\n    */\n   private readonly hostIsConnected: Validator<DiskManagementActionContext> = new Validator(\n         (context: DiskManagementActionContext): boolean => context.host.state !== ConnectionState.connected,\n         VsanUiUtils.getString(\"vsan.diskmanagement.action.unsupportedReason.hostDisconnected\"));\n\n   private readonly hostIsNotInMaintenanceMode: Validator<DiskManagementActionContext> = new Validator(\n         (context: DiskManagementActionContext): boolean => context.host.isInMaintenanceMode,\n         VsanUiUtils.getString(\"vsan.diskmanagement.action.unsupportedReason.hostInMaintenanceMode\"));\n\n   private readonly isNotWitnessHost: Validator<DiskManagementActionContext> = new Validator(\n         (context: DiskManagementActionContext): boolean => context.host.isWitnessHost,\n         VsanUiUtils.getString(\"vsan.dialog.precheckEvacuation.unsupportedWitness\"));\n\n   private readonly hostHasObjectUuids: Validator<DiskManagementActionContext> = new Validator(\n         (context: DiskManagementActionContext): boolean => !this.hasObjectUuids(context.host),\n         VsanUiUtils.getString(\"vsan.actions.viewHostObjects.description.disabled\"));\n\n   private readonly hostHasEligibleDisks: Validator<DiskManagementActionContext> = new Validator(\n         (context: DiskManagementActionContext): boolean =>\n               !DiskMgmtHostUtil.getClaimDistribution(context.host).get(ClaimableState.USABLE),\n         VsanUiUtils.getString(\"vsan.actions.semiAutoClaimDisks.description.disabled\"));\n\n   /*\n    * Disk group related checks\n    */\n   private readonly diskGroupIsNotLocked: Validator<DiskManagementActionContext> = new Validator(\n         (context: DiskManagementActionContext): boolean => context.diskGroup.isLocked,\n         (context: DiskManagementActionContext): string =>\n               context.actionId !== DiskManagementActionAvailabilityService.PRE_CHECK_ID\n                     ? VsanUiUtils.getString(\"vsan.diskmanagement.action.unsupportedReason.lockedDiskGroup\")\n                     : VsanUiUtils.getString(\"vsan.dialog.precheckEvacuation.unsupportedLockedDiskGroup\"));\n\n   private readonly diskGroupIsNotMounted: Validator<DiskManagementActionContext> = new Validator(\n         (context: DiskManagementActionContext): boolean => context.diskGroup.isMounted,\n         VsanUiUtils.getString(\"vsan.diskmanagement.action.unsupportedReason.mountedDiskGroup\"));\n\n   private readonly diskGroupIsMounted: Validator<DiskManagementActionContext> = new Validator(\n         (context: DiskManagementActionContext): boolean => !context.diskGroup.isMounted,\n         (context: DiskManagementActionContext): string =>\n               context.actionId !== DiskManagementActionAvailabilityService.PRE_CHECK_ID\n                     ? VsanUiUtils.getString(\"vsan.diskmanagement.action.unsupportedReason.unmountedDiskGroups\")\n                     : VsanUiUtils.getString(\"vsan.dialog.precheckEvacuation.unsupportedUnmountedDiskGroup\"));\n\n   private readonly diskGroupRecreationIsPossible: Validator<DiskManagementActionContext> = new Validator(\n         (context: DiskManagementActionContext): boolean => this.checkDiskGroup(context) !== null,\n         (context: DiskManagementActionContext): string => {\n            switch (this.checkDiskGroup(context)) {\n               case DiskGroupError.ALL_CAPACITY_DISKS_ARE_UNHEALTHY:\n                  return VsanUiUtils.getString(\n                        \"vsan.diskmanagement.action.unsupportedReason.unhealthyCapacityDisks\");\n               case DiskGroupError.CACHE_DISK_IS_UNHEALTHY:\n                  return VsanUiUtils.getString(\n                        \"vsan.diskmanagement.action.unsupportedReason.unhealthyCacheDisk\");\n            }\n         },\n   );\n\n   private checkDiskGroup(context: DiskManagementActionContext): DiskGroupError {\n      const capacityDisks: DiskData[] =\n            context.diskGroup.disks.filter(disk => disk.claimOption === ClaimOption.ClaimForStorage);\n      const unhealthyCapacityDisks: DiskData[] =\n            capacityDisks.filter(disk => !DiskMgmtDiskUtil.isHealthy(disk));\n\n      if (capacityDisks.length === unhealthyCapacityDisks.length) {\n         return DiskGroupError.ALL_CAPACITY_DISKS_ARE_UNHEALTHY;\n      }\n\n      const cacheDiskIsUnhealthy: boolean = !DiskMgmtDiskUtil.isHealthy(\n            context.diskGroup.disks.find(disk => disk.claimOption === ClaimOption.ClaimForCache));\n\n      if (cacheDiskIsUnhealthy) {\n         return DiskGroupError.CACHE_DISK_IS_UNHEALTHY;\n      }\n\n      return null;\n   }\n\n   private readonly diskGroupHasObjectUuids: Validator<DiskManagementActionContext> = new Validator(\n         (context: DiskManagementActionContext): boolean => !this.hasObjectUuids(context.diskGroup),\n         VsanUiUtils.getString(\"vsan.actions.viewGroupObjects.description.disabled\"));\n\n   /**\n    * Disk related checks\n    */\n   private readonly diskIsMounted: Validator<DiskManagementActionContext> = new Validator(\n         (context: DiskManagementActionContext): boolean =>\n               !VsanDiskUtil.isVsanDiskMounted(context.storageData.storage as DiskData),\n         VsanUiUtils.getString(\"vsan.dialog.precheckEvacuation.unsupportedUnmountedDiskGroup\"));\n\n   private readonly diskIsUnMounted: Validator<DiskManagementActionContext> = new Validator(\n         (context: DiskManagementActionContext): boolean =>\n               VsanDiskUtil.isVsanDiskMounted(context.storageData.storage as DiskData),\n         VsanUiUtils.getString(\"vsan.diskmanagement.action.unsupportedReason.mountedDiskGroup\"));\n\n   private readonly diskIsNotDeadOrWithError: Validator<DiskManagementActionContext> = new Validator(\n         (context: DiskManagementActionContext): boolean =>\n               (context.storageData.storage as DiskData).deviceState === DeviceState.ERROR,\n         VsanUiUtils.getString(\"vsan.dialog.precheckEvacuation.diskInDeadOrError\"));\n\n   private readonly isVsanCapacityDisk: Validator<DiskManagementActionContext> = new Validator(\n         (context: DiskManagementActionContext): boolean =>\n               (context.storageData.storage as DiskData).isMappedAsCache,\n         (context: DiskManagementActionContext): string => {\n            return context.actionId === DiskManagementActionAvailabilityService.DISK_PRE_CHECK_ID\n                  ? VsanUiUtils.getString(\"vsan.dialog.precheckEvacuation.unsupportedCacheDisk\")\n                  : VsanUiUtils.getString(\"vsan.diskmanagement.action.unsupportedReason.cacheDisk\");\n         });\n\n   private readonly spaceEfficiencySupportDiskPreCheck: Validator<DiskManagementActionContext> = new Validator(\n         (context: DiskManagementActionContext): boolean =>\n               !this.spaceEfficiencyService.isDiskPreCheckEvacuationSupported(context.spaceEfficiencyConfig),\n         VsanUiUtils.getString(\"vsan.dialog.precheckEvacuation.deduplicationEnabled\"));\n\n   private readonly storageHasObjectUuids: Validator<DiskManagementActionContext> = new Validator(\n         (context: DiskManagementActionContext): boolean => !this.hasObjectUuids(context.storageData.storage),\n         (context: DiskManagementActionContext): string =>\n               VsanUiUtils.getString(this.isPmem(context)\n                     ? \"vsan.actions.viewDeviceObjects.description.disabled\"\n                     : \"vsan.actions.viewDiskObjects.description.disabled\"));\n\n   private hasObjectUuids = (entity: { objectUuids: string[] }): boolean => !VsanUiUtils.isEmpty(entity.objectUuids);\n\n   private isPmem = (context: DiskManagementActionContext): boolean => context.storageData.type === DiskType.PMEM;\n\n   checkAvailability = (ctx: DiskManagementActionContext): ActionAvailableStatus => {\n      switch (ctx.actionId) {\n         case DiskManagementActionAvailabilityService.VIEW_HOST_STORAGE_AND_GROUPS_ID:\n            return this.validate(this.viewDisksAndGroupsAvailability, ctx,\n                  \"vsan.actions.viewDisksAndGroups.description\");\n         case DiskManagementActionAvailabilityService.VIEW_CLUSTER_OBJECTS_ID:\n            return this.validate(this.viewClusterObjectsAvailability, ctx,\n                  \"vsan.actions.viewClusterObjects.description\");\n         case DiskManagementActionAvailabilityService.VIEW_HOST_OBJECTS_ID:\n            return this.validate(this.viewHostObjectsAvailability, ctx,\n                  \"vsan.actions.viewHostObjects.description\");\n         case DiskManagementActionAvailabilityService.VIEW_GROUP_OBJECTS_ID:\n            return this.validate(this.viewDiskGroupObjectsAvailability, ctx,\n                  \"vsan.actions.viewGroupObjects.description\");\n         case DiskManagementActionAvailabilityService.ADD_DISKS_TO_DISK_GROUP_ID:\n            return this.validate(this.addDisksToDiskGroupAvailability, ctx,\n                  \"vsan.actions.addDiskToDiskGroup.description\");\n         case DiskManagementActionAvailabilityService.DELETE_DISK_GROUP_ID:\n            return this.validate(this.removeDiskGroupAvailability, ctx,\n                  \"vsan.actions.deleteDiskGroup.description\");\n         case DiskManagementActionAvailabilityService.RECREATE_DISK_GROUP_ID:\n            return this.validate(this.recreateDiskGroupAvailability, ctx,\n                  \"vsan.actions.recreateDiskGroup.description\");\n         case DiskManagementActionAvailabilityService.MOUNT_DISK_GROUP_ID:\n            return this.validate(this.mountDiskGroupAvailability, ctx,\n                  \"vsan.actions.mountDiskGroup.description\");\n         case DiskManagementActionAvailabilityService.UNMOUNT_DISK_GROUP_ID:\n            return this.validate(this.unmountDiskGroupAvailability, ctx,\n                  \"vsan.actions.unmountDiskGroup.description\");\n         case DiskManagementActionAvailabilityService.SEMI_AUTO_CLAIM_DISKS_ID:\n            return this.validate(this.semiAutoClaimDisksAvailability, ctx,\n                  \"vsan.actions.semiAutoClaimDisks.description\");\n         case DiskManagementActionAvailabilityService.CREATE_DISK_GROUP_ID:\n            return this.validate(this.createDiskGroupAvailability, ctx,\n                  \"vsan.actions.createDiskGroup.description\");\n         case DiskManagementActionAvailabilityService.PRE_CHECK_ID:\n            return ctx.diskGroup\n                  ? this.validate(this.diskGroupPreCheckAvailability, ctx, this.diskGroupPreCheckSuccessKey(ctx))\n                  : this.validate(this.hostPreCheckAvailability, ctx, this.hostPreCheckSuccessKey(ctx));\n         case DiskManagementActionAvailabilityService.ADD_DISK_TO_DISK_GROUP_ID:\n            return this.validate(this.addDiskToDiskGroupAvailability, ctx,\n                  \"vsan.actions.addDiskToDiskGroup.description\");\n         case DiskManagementActionAvailabilityService.DISK_PRE_CHECK_ID:\n            return this.validate(this.diskPreCheckAvailability, ctx,\n                  this.diskPreCheckSuccessKey(ctx));\n         case DiskManagementActionAvailabilityService.DELETE_VSAN_DISK_ID:\n            return this.validate(this.deleteVsanDiskAvailability, ctx,\n                  \"vsan.actions.deleteDiskFromDiskGroup.description\");\n         case DiskManagementActionAvailabilityService.DELETE_VSAN_DIRECT_DISK_ID:\n            return this.validate(this.deleteVsanDirectDiskAvailability, ctx,\n                  \"vsan.actions.deleteVsanDirectDisk.description\");\n         case DiskManagementActionAvailabilityService.VIEW_STORAGE_OBJECTS_ID:\n            return this.validate(this.viewStorageObjectsAvailability, ctx,\n                  this.viewStorageObjectsSuccessKey(ctx));\n         case DiskManagementActionAvailabilityService.TURN_LED_ON_ID:\n            return this.validate(this.toggleDiskLedAvailability, ctx,\n                  \"vsan.actions.turnLedOn.description\");\n         case DiskManagementActionAvailabilityService.TURN_LED_OFF_ID:\n            return this.validate(this.toggleDiskLedAvailability, ctx,\n                  \"vsan.actions.turnLedOff.description\");\n         case DiskManagementActionAvailabilityService.MARK_DISK_AS_SSD_ID:\n            return this.validate(this.changeDiskTypeAvailability, ctx,\n                  \"storage.adapters.devices.action.tagAsSsd\");\n         case DiskManagementActionAvailabilityService.MARK_DISK_AS_HDD_ID:\n            return this.validate(this.changeDiskTypeAvailability, ctx,\n                  \"storage.adapters.devices.action.untagAsSsd\");\n         case DiskManagementActionAvailabilityService.MARK_DISK_AS_LOCAL_ID:\n            return this.validate(this.changeDiskTypeAvailability, ctx,\n                  \"storage.adapters.devices.action.markAsLocal\");\n         case DiskManagementActionAvailabilityService.MARK_DISK_AS_REMOTE_ID:\n            return this.validate(this.changeDiskTypeAvailability, ctx,\n                  \"storage.adapters.devices.action.markAsRemote\");\n         case DiskManagementActionAvailabilityService.ERASE_DISK_PARTITIONS_ID:\n            return this.validate(this.eraseDiskPartitionsAvailability, ctx,\n                  \"storage.adapters.devices.action.erasePartitions\");\n         case DiskManagementActionAvailabilityService.STOP_MANAGING_PMEM_ID:\n            return this.validate(this.stopManagingPmemAvailability, ctx,\n                  \"vsan.actions.stopManagingPmem.description\");\n         case DiskManagementActionAvailabilityService.VIEW_DUPLICATE_PCI_ID_DEVICES:\n            return this.validate(this.viewDuplicatePciIdDevicesAvailability, ctx,\n                  \"vsan.cluster.duplicatePciIdDevices.diskMgmt.dialog.label\");\n         case DiskManagementActionAvailabilityService.ADD_DISKS_TO_STORAGE_POOL_ID:\n            return this.validate(this.addDisksToStoragePoolAvailability, ctx,\n                  \"vsan.dialog.addDisksToStoragePool.title\");\n         case DiskManagementActionAvailabilityService.MOUNT_DISK_ID:\n            return this.validate(this.mountDiskToStoragePoolAvailability, ctx,\n                  \"vsan.dialog.mountDisk.dialogTitle\");\n         case DiskManagementActionAvailabilityService.UNMOUNT_DISK_ID:\n            return this.validate(this.unmountDiskFromStoragePoolAvailability, ctx,\n                  \"vsan.actions.unmountDisk.label\");\n         case DiskManagementActionAvailabilityService.EDIT_VSAN_MANAGED_DISK_CLAIM_ID:\n            return this.validate(this.editVsanManagedDiskClaimAvailability, ctx);\n      }\n   };\n\n   private validate(\n         validatorsGroup: ValidatorsGroup<DiskManagementActionContext>,\n         context: DiskManagementActionContext,\n         successMessageKey: string = \"\"): ActionAvailableStatus {\n\n      const errorMessage: string = validatorsGroup.getFirstError(context);\n      const isActionAvailable: boolean = errorMessage === null;\n      const statusMessage: string = isActionAvailable\n            ? VsanUiUtils.getString(successMessageKey)\n            : errorMessage;\n\n      return new ActionAvailableStatus(isActionAvailable, statusMessage);\n   }\n\n   // Cluster level action availabilities\n   private readonly semiAutoClaimDisksAvailability: ValidatorsGroup<DiskManagementActionContext> = new ValidatorsGroup([\n      this.hasEditPermission,\n      this.hasClusterEligibleDisks,\n   ]);\n\n   private readonly stopManagingPmemAvailability: ValidatorsGroup<DiskManagementActionContext> = new ValidatorsGroup([\n      this.hasEditPermission,\n   ]);\n\n   private readonly viewClusterObjectsAvailability: ValidatorsGroup<DiskManagementActionContext> = new ValidatorsGroup([\n      this.clusterHasObjectUuids,\n   ]);\n\n   private readonly viewDuplicatePciIdDevicesAvailability: ValidatorsGroup<DiskManagementActionContext> =\n         new ValidatorsGroup([this.hasEditPermission]);\n\n   private readonly editVsanManagedDiskClaimAvailability: ValidatorsGroup<DiskManagementActionContext> =\n         new ValidatorsGroup([\n               this.hasEditPermission,\n               this.isVsanMaxEnabled,\n               this.isNotEmptyCluster,\n         ]);\n\n   private readonly addDisksToStoragePoolAvailability: ValidatorsGroup<DiskManagementActionContext> =\n         new ValidatorsGroup([\n            this.hasEditPermission,\n            this.hostIsConnected,\n            this.hostHasEligibleDisks,\n         ]);\n\n   private readonly unmountDiskFromStoragePoolAvailability: ValidatorsGroup<DiskManagementActionContext> =\n         new ValidatorsGroup([\n            this.hasEditPermission,\n            this.hostIsConnected,\n            this.diskIsMounted,\n         ]);\n\n   private readonly mountDiskToStoragePoolAvailability: ValidatorsGroup<DiskManagementActionContext> =\n         new ValidatorsGroup([\n            this.hasEditPermission,\n            this.hostIsConnected,\n            this.diskIsUnMounted,\n         ]);\n\n   // Host action availabilities\n   private readonly createDiskGroupAvailability: ValidatorsGroup<DiskManagementActionContext> = new ValidatorsGroup([\n      this.hasEditPermission,\n      this.hostIsConnected,\n      this.isNotAutoClaimMode,\n   ]);\n\n   private readonly hostPreCheckAvailability: ValidatorsGroup<DiskManagementActionContext> = new ValidatorsGroup([\n      this.hostIsConnected,\n      this.hostIsNotInMaintenanceMode,\n      this.isNotWitnessHost,\n      this.isHostPreCheckAllowed,\n   ]);\n\n   private readonly viewDisksAndGroupsAvailability: ValidatorsGroup<DiskManagementActionContext> = new ValidatorsGroup([\n      this.hostIsConnected,\n   ]);\n\n   private readonly viewHostObjectsAvailability: ValidatorsGroup<DiskManagementActionContext> = new ValidatorsGroup([\n      this.hostIsConnected,\n      this.hostHasObjectUuids,\n   ]);\n\n   // Disk group action availabilities\n   private readonly addDisksToDiskGroupAvailability: ValidatorsGroup<DiskManagementActionContext> =\n         new ValidatorsGroup([\n            this.hasEditPermission,\n            this.hostIsConnected,\n            this.isNotAutoClaimMode,\n            this.diskGroupIsNotLocked,\n         ]);\n\n   private readonly diskGroupPreCheckAvailability: ValidatorsGroup<DiskManagementActionContext> = new ValidatorsGroup([\n      this.hostIsConnected,\n      this.hostIsNotInMaintenanceMode,\n      this.isNotWitnessHost,\n      this.isDiskGroupPreCheckAllowed,\n      this.diskGroupIsNotLocked,\n      this.diskGroupIsMounted,\n   ]);\n\n   private readonly removeDiskGroupAvailability: ValidatorsGroup<DiskManagementActionContext> = new ValidatorsGroup([\n      this.hasEditPermission,\n      this.hostIsConnected,\n      this.isNotAutoClaimMode,\n   ]);\n\n   private readonly recreateDiskGroupAvailability: ValidatorsGroup<DiskManagementActionContext> = new ValidatorsGroup([\n      this.hasEditPermission,\n      this.hostIsConnected,\n      this.isNotAutoClaimMode,\n      this.diskGroupIsNotLocked,\n      this.diskGroupRecreationIsPossible,\n      this.diskGroupIsMounted,\n   ]);\n\n   private readonly mountDiskGroupAvailability: ValidatorsGroup<DiskManagementActionContext> = new ValidatorsGroup([\n      this.hasEditPermission,\n      this.hostIsConnected,\n      this.diskGroupIsNotMounted,\n   ]);\n\n   private readonly unmountDiskGroupAvailability: ValidatorsGroup<DiskManagementActionContext> = new ValidatorsGroup([\n      this.hasEditPermission,\n      this.hostIsConnected,\n      this.diskGroupIsMounted,\n   ]);\n\n   private readonly viewDiskGroupObjectsAvailability: ValidatorsGroup<DiskManagementActionContext> =\n         new ValidatorsGroup([\n            this.hostIsConnected,\n            this.diskGroupHasObjectUuids,\n         ]);\n\n   // Disk action availabilities\n   private readonly addDiskToDiskGroupAvailability: ValidatorsGroup<DiskManagementActionContext> = new ValidatorsGroup([\n      this.hasEditPermission,\n      this.hostIsConnected,\n      this.isNotAutoClaimMode,\n   ]);\n\n   private readonly diskPreCheckAvailability: ValidatorsGroup<DiskManagementActionContext> = new ValidatorsGroup([\n      this.hostIsConnected,\n      this.hostIsNotInMaintenanceMode,\n      this.isNotWitnessHost,\n      this.isDiskPreCheckAllowed,\n      this.diskIsMounted,\n      this.diskIsNotDeadOrWithError,\n      this.isVsanCapacityDisk,\n      this.spaceEfficiencySupportDiskPreCheck,\n   ]);\n\n   private readonly deleteVsanDiskAvailability: ValidatorsGroup<DiskManagementActionContext> = new ValidatorsGroup([\n      this.hasEditPermission,\n      this.hostIsConnected,\n      this.isNotAutoClaimMode,\n      this.isVsanCapacityDisk,\n   ]);\n\n   private readonly deleteVsanDirectDiskAvailability: ValidatorsGroup<DiskManagementActionContext> =\n         new ValidatorsGroup([\n            this.hasEditPermission,\n            this.hostIsConnected,\n            this.isNotAutoClaimMode,\n         ]);\n\n   private readonly toggleDiskLedAvailability: ValidatorsGroup<DiskManagementActionContext> = new ValidatorsGroup([\n      this.hasEditPermission,\n      this.hostIsConnected,\n      this.isNotAutoClaimMode,\n   ]);\n\n   private readonly changeDiskTypeAvailability: ValidatorsGroup<DiskManagementActionContext> = new ValidatorsGroup([\n      this.hasEditPermission,\n      this.hostIsConnected,\n      this.isNotAutoClaimMode,\n   ]);\n\n   private readonly eraseDiskPartitionsAvailability: ValidatorsGroup<DiskManagementActionContext> =\n         new ValidatorsGroup([\n            this.hasEditPermission,\n            this.hostIsConnected,\n            this.isNotAutoClaimMode,\n         ]);\n\n   private readonly viewStorageObjectsAvailability: ValidatorsGroup<DiskManagementActionContext> = new ValidatorsGroup([\n      this.hostIsConnected,\n      this.storageHasObjectUuids,\n   ]);\n\n   private diskPreCheckSuccessKey = (context: DiskManagementActionContext): string => {\n      return context.clusterCapabilities.isDiskResourcePrecheckSupported\n            ? \"vsan.actions.goToPrecheckDataMigration.disk.description\"\n            : \"vsan.actions.precheckDiskEvacuation.description\";\n   };\n\n   private diskGroupPreCheckSuccessKey = (context: DiskManagementActionContext): string => {\n      return context.clusterCapabilities.isDiskResourcePrecheckSupported\n            ? \"vsan.actions.goToPrecheckDataMigration.diskGroup.description\"\n            : \"vsan.actions.precheckDiskGroupEvacuation.description\";\n   };\n\n   private hostPreCheckSuccessKey = (context: DiskManagementActionContext): string => {\n      return context.clusterCapabilities.isHostResourcePrecheckSupported\n            ? \"vsan.actions.goToPrecheckDataMigration.host.description\"\n            : \"vsan.actions.precheckHostEvacuation.description\";\n   };\n\n   private viewStorageObjectsSuccessKey = (context: DiskManagementActionContext): string => {\n      return this.isPmem(context)\n            ? \"vsan.actions.viewDeviceObjects.description\"\n            : \"vsan.actions.viewDiskObjects.description\";\n   };\n}\n","/* Copyright 2020 VMware, Inc. All rights reserved. -- VMware Confidential */\nexport enum DiskGroupError {\n   ALL_CAPACITY_DISKS_ARE_UNHEALTHY,\n   CACHE_DISK_IS_UNHEALTHY\n}"],"sourceRoot":"webpack:///"}