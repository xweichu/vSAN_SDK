{"version":3,"sources":["webpack:///src/app/vsan/common/component/health/health-check-item.module.ts","webpack:///src/app/vsan/common/component/health/health-check-item.html","webpack:///src/app/vsan/common/component/health/health-check-item.component.ts"],"names":["HealthCheckItemModule","HealthCheckItem","navigationService","clusterRef","contextObject","onInlineHealthViewDisplay","openHealthItemDialog","setSize","HEALTH_CHECK_DIALOG_WIDTH","HEALTH_CHECK_DIALOG_HEIGHT","open","title","healthCheck","healthCheckLabel","perspective","healthGroup","healthTest","getVsanHealthStatusIconShape","status","getVsanHealthStatusIconClass","context","selectedSubTestId","healthTestId","inlineHealthView","navigateTo","CLUSTER_HEALTH","emit"],"mappings":"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","file":"91-es5.js","sourcesContent":["/* Copyright 2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {NgModule} from \"@angular/core\";\nimport {CommonModule} from \"@angular/common\";\nimport {ClarityModule} from \"@clr/angular\";\nimport {HealthCheckItem} from \"@component/health/health-check-item.component\";\nimport {VsanCommonModule} from \"../../vsan-common.module\";\n\n@NgModule({\n   imports: [\n      CommonModule,\n      ClarityModule,\n      VsanCommonModule,\n   ],\n   declarations: [\n      HealthCheckItem,\n   ],\n   exports: [\n      HealthCheckItem,\n   ],\n})\nexport class HealthCheckItemModule {}\n","<!--Copyright 2017-2021 VMware, Inc. All rights reserved. -- VMware Confidential-->\n<div class=\"item-container\">\n    <clr-icon [attr.shape]=\"getIconShape()\"\n              [ngClass]=\"getIconClass()\"\n              class=\"is-solid\"\n              size=\"18\">\n    </clr-icon>\n    <a *ngIf=\"canNavigateToHealthView\"\n       href=\"javascript://\"\n       (click)=\"onHealthItemClicked()\">\n        {{healthCheck.healthCheckLabel}}\n    </a>\n    <a *ngIf=\"!canNavigateToHealthView\"\n       [title]=\"'vsan.common.dialogOpen.title' | localized : healthCheck.healthCheckLabel\"\n       href=\"javascript://\"\n       (click)=\"openHealthItemDialog()\">\n        {{healthCheck.healthCheckLabel}}\n    </a>\n</div>\n","/* Copyright 2017-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, EventEmitter, Input, Output} from \"@angular/core\";\nimport {VsanHealthCheck} from \"@generated/vsan-health-check\";\nimport {VsanHealthUtil} from \"@util/vsan-health-util\";\nimport {ModalBuilder} from \"@util/modal-builder\";\nimport {NavigationService, PlatformExtension} from \"@navigation/navigation.service\";\nimport {ManagedObject} from \"@service/managed-object\";\nimport {HealthContext} from \"@navigation/context/health-context\";\n\n/**\n * Component for rendering vsan health check item\n */\n@Component({\n   selector: \"health-check-item\",\n   templateUrl: \"health-check-item.html\",\n   styleUrls: [\"health-check-item.scss\"],\n})\nexport class HealthCheckItem {\n\n   private static readonly HEALTH_CHECK_DIALOG_HEIGHT: number = 500;\n   private static readonly HEALTH_CHECK_DIALOG_WIDTH: number = 900;\n\n   constructor(private navigationService: NavigationService) {}\n\n   @Input()\n   healthCheck: VsanHealthCheck;\n\n   @Input()\n   canNavigateToHealthView: boolean;\n\n   @Input()\n   inlineHealthView: boolean;\n\n   @Input()\n   clusterRef: ManagedObject = ManagedObject.contextObject;\n\n   @Output()\n   onInlineHealthViewDisplay: EventEmitter<HealthContext> = new EventEmitter<HealthContext>();\n\n   getIconShape(): string {\n      return VsanHealthUtil.getVsanHealthStatusIconShape(this.healthCheck.status);\n   }\n\n   getIconClass(): string {\n      return VsanHealthUtil.getVsanHealthStatusIconClass(this.healthCheck.status);\n   }\n\n   onHealthItemClicked(): void {\n      const context: HealthContext = {\n         selectedSubTestId: this.healthCheck.healthTestId,\n      };\n\n      if (!this.inlineHealthView) {\n         this.navigationService.navigateTo(PlatformExtension.CLUSTER_HEALTH, this.clusterRef, context);\n      } else {\n         this.onInlineHealthViewDisplay.emit(context);\n      }\n   }\n\n   openHealthItemDialog = (): void => {\n      new ModalBuilder(\"hciCluster/healthCheckDialog\")\n            .setSize(\n                  HealthCheckItem.HEALTH_CHECK_DIALOG_WIDTH,\n                  HealthCheckItem.HEALTH_CHECK_DIALOG_HEIGHT)\n            .open({\n               title: this.healthCheck.healthCheckLabel,\n               perspective: this.healthCheck.perspective,\n               healthGroup: this.healthCheck.healthGroup,\n               healthTest: this.healthCheck.healthTest,\n            });\n   };\n}\n"]}