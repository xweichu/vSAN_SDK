{"version":3,"sources":["webpack:///src/app/vsan/common/service/witness-validation.service.ts","webpack:///src/app/vsan/common/directive/clr-button-group/clr-button-base.directive.ts","webpack:///src/app/vsan/shared-witness/shared-witness-clusters.module.ts","webpack:///src/app/vsan/common/service/navigation/model/knowledge-base-id.ts","webpack:///src/app/vsan/common/util/modal-builder.ts","webpack:///src/app/vsan/common/component/action-button/button-title.directive.ts","webpack:///src/app/vsan/common/directive/clr-button-group/clr-button-group-common.directive.ts","webpack:///src/app/vsan/common/component/action-button/button-group.directive.ts","webpack:///src/app/vsan/common/component/unavailable-view/unavailable-view.module.ts","webpack:///src/app/vsan/shared-witness/view/shared-witness-clusters.component.ts","webpack:///src/app/vsan/common/util/vsan-dialog-util.ts","webpack:///src/app/vsan/shared-witness/view/shared-witness-clusters.html","webpack:///src/app/vsan/common/directive/external-link/external-link.directive.ts","webpack:///src/app/vsan/common/component/action-button/action-button.module.ts"],"names":["WitnessValidationService","hostValidationData","handleHostValidationResult","vsanConfig","aggregateClusterErrors","validationMessages","validateWitnessCandidate","validateSharedWitnessHost","validateWarningConditions","isEncrypted","vLCMToBeDisabled","WitnessHostValidation","INFO","getString","SUCCESS","hostValidationResult","isHostInTheSameCluster","DANGER","isHostInVsanEnabledCluster","isHostDisconnected","isPoweredOn","isHostInMaintenanceMode","hasVsanEnabledNic","isVsanMaxCompatible","isWitnessHost","isStretchedClusterSupported","witnessValidationResult","isEmpty","witnessHostValidationErrors","clustersValidation","clusterValidationResults","Object","values","clusterValidationError","find","result","compatible","validationMessage","enableRdma","enableDataInTransitEncryption","isDitSharedWitnessInteroperabilitySupported","WARNING","error","clustersValidationData","twoNodeClusters","validationData","clusterData","updatedValidationResult","moRef","value","validationAlertType","ClrButtonBaseDirective","clrButton","name","Math","random","toString","directiveHolder","directives","push","routes","path","component","SELECT_CLUSTERS_DIALOG","SharedWitnessClustersModule","KnowledgeBaseId","ModalBuilder","appId","size","DEFAULT_SIZE","title","accessibilityTitle","urlParams","dimensions","length","warn","setSize","WIDTH","HEIGHT","width","height","params","eventTarget","context","Promise","accept","pluginContext","targetElement","event","target","modalResultHandler","data","JSON","parse","stringify","focus","setTimeout","actionUrl","APP_URL","separator","param","openModalDialog","contextObjectUid","WIZARD_XL","repa","repaExtension","ButtonTitleDirective","host","titleChange","_title","next","asObservable","unsubscribe","ClrButtonGroupCommonDirective","elRef","allButtons","nativeElement","querySelectorAll","clrButtons","filter","forEach","index","buttonFound","findButtonByName","directive","resolveButton","buttons","i","item","ButtonGroupDirective","_maximumInlineActions","_buttonTitleDirectives","updateButtonTitles","getVisibleButtons","concat","getInMenuButtons","titleDirective","button","getAttribute","titleChangeEvent","subscribe","subscribeToggleButtonClick","btns","_btns","updateInMenuButtons","groupWithMenu","btn","inMenu","toggleButton","getToggleButton","onclick","Array","from","VISIBLE_BUTTON_ELEMENTS_SELECTOR","ownerDocument","IN_MENU_BUTTON_ELEMENTS_SELECTOR","querySelector","TOGGLE_MENU_BUTTON_SELECTOR","UnavailableViewModule","SharedWitnessClustersComponent","sharedWitnessService","stretchedClusterService","permissionService","navigationService","taskSvc","vsanCapabilityProvider","addClustersActionTitle","isAddClustersActionDisabled","hasEditPermissions","selectedClusters","_objectsCountFilterValue","clusterObjectsCountFilter","accepts","low","high","componentsNumber","clusterNameFilter","search","cluster","toLowerCase","indexOf","thresholdFilterActionLink","label","getComponentsThresholdFilterLabel","action","filterClustersByComponentsThreshold","refreshOnTaskCompleted","task","getAwaitResult","then","fetch","resetData","getIsSharedWitnessSupported","contextObject","isSharedWitnessSupported","unavailableViewSpec","SHARED_WITNESS_NOT_SUPPORTED","all","getWitnessHostData","getSharedWitnessLimits","hasPermissions","EDIT_CLUSTER","clustersData","witnessLimits","updateSelection","componentsWarningThreshold","getComponentsWarningThreshold","ensureComponentsLimitAlert","updateActionsAvailability","alertType","Error","errorMessage","showComponentsLimitAlert","componentsLimitAlertType","componentsLimitAlertMessage","isNumericValue","maxWitnessClusters","maxComponentsPerCluster","getCurrentMaxComponentsCount","c","some","s","reduce","max","CLUSTER_COMPONENTS_THRESHOLD_PERC","isAnyClusterReachingComponentsLimit","hasAnyClusterReachedComponentsLimit","hasReachedComponentsLimit","isReachingComponentsLimit","localizationKey","CLR_ERROR_STANDARD_ICON_SHAPE","CLR_WARN_STANDARD_ICON_SHAPE","clrIconShapeClassMap","getComponentsLimitShape","minValue","isComponentsThresholdFilterApplied","maxValue","objectsCountFilterValue","clusterRef","navigateTo","CLUSTER_FAULT_DOMAIN","hasDiskGroups","ADD_CLUSTERS_WIZARD_FULL","modalSize","SELECT_CLUSTERS_DIALOG_FULL","setDimensions","setEventTarget","open","map","currentWitnessHost","REASSIGN_WITNESS_WIZARD_FULL","naLabel","assignedClustersCount","srMessage","srMessageType","PAGE_TITLE","VsanDialogUtil","CAPACITY_MANAGEMENT_DIALOG","DELETE_VOLUME_DIALOG","MIGRATE_VOLUME_DIALOG","REAPPLY_VOLUME_POLICY_DIALOG","DUPLICATE_PCI_ID_MODEL_SELECTION_DIALOG","HEALTH_RESTORE_ACTION_DIALOG","CLUSTER_POWER_ON_DIALOG","VM_IO_DIAGNOSTICS_METRICS_DIALOG","VM_IO_DIAGNOSTICS_LATENCY_DIALOG","VM_IO_DIAGNOSTICS_DOM_OWNER_LATENCY_DIALOG","PERF_SVC_EDIT_ACTION_DIALOG","PERF_SVC_ENABLE_ACTION_DIALOG","CLAIM_DISKS_ACTION_DIALOG","VSAN_DISK_CLAIM_ACTION_DIALOG","VsanDialogProperties","ExternalLinkDirective","el","resolver","renderer","ASK_VMWARE_DEFAULT_TEXT_KEY","LEARN_MORE_DEFAULT_TEXT_KEY","CONTAINER_CLASS","NAVIGATION_EVENT_TYPE","LEAD_TO_NOWHERE_URL","HTML_ELEMENT_SPAN_NAME","HTML_ELEMENT_ICON_NAME","HTML_ELEMENT_ROLE_ATTR_NAME","HTML_ELEMENT_ROLE_ATTR_VALUE","ICON_SHAPE_ATTR_NAME","ICON_SHAPE_ATTR_VALUE","ICON_SIZE_ATTR_NAME","ICON_SIZE_ATTR_VALUE","ICON_CLASS_ATTR_NAME","ICON_CLASS_ATTR_VALUE","ICON_TITLE_ATTR_NAME","KB_URL","element","isLink","isButton","prepareExternalLink","addClass","setText","decorateLink","addLinkRole","initializeNavigationHandler","HTMLButtonElement","HTMLAnchorElement","span","createElement","innerText","getText","appendChild","icon","setAttribute","anchorText","key","linkElement","href","style","display","addEventListener","helpId","askVMware","articleId","navigateToAddress","url","ActionButtonModule"],"mappings":"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","file":"123-es5.js","sourcesContent":["/* Copyright 2019-2022 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Injectable} from \"@angular/core\";\nimport {AlertType} from \"@component/validation/alert-type\";\nimport {InventoryNode as InventoryNodeInfo} from \"@generated/inventory-node\";\nimport {SharedWitnessClusterValidationData} from \"@generated/shared-witness-cluster-validation-data\";\nimport {SharedWitnessValidationData} from \"@generated/shared-witness-validation-data\";\nimport {VsanConfigSpec} from \"@generated/vsan-config-spec\";\nimport {WitnessHostValidationResult} from \"@generated/witness-host-validation-result\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\n\n/**\n * Provides validation for a selected witness host.\n */\n@Injectable()\nexport class WitnessValidationService {\n   handleSharedWitnessHostValidationResult(hostValidationData: WitnessHostValidationResult): WitnessHostValidation {\n      return this.handleHostValidationResult(hostValidationData, null, true);\n   }\n\n   handleSingleClusterWitnessValidationResult(hostValidationData: WitnessHostValidationResult,\n         vsanConfig: VsanConfigSpec): WitnessHostValidation {\n      return this.handleHostValidationResult(hostValidationData, vsanConfig, false);\n   }\n\n   /**\n    * Returns a single host level validation result.\n    * @param hostValidationData - The java side validation result\n    * @param vsanConfig - Contains the cluster's config. Used in single cluster scenarios like configure vSAN or HCI\n    * @param aggregateClusterErrors - Whether to report the cluster level errors as a host level error or return an\n    * aggregated error message.\n    * This is needed in shared witness scenarios, in order to show a general error message at the top of the page.\n    * We already show the per cluster error in the validation grid, so there is no information hiding.\n    * In the single cluster scenarios we show the cluster error from backend as it is more informative.\n    */\n   private handleHostValidationResult(hostValidationData: WitnessHostValidationResult, vsanConfig: VsanConfigSpec,\n         aggregateClusterErrors: boolean): WitnessHostValidation {\n\n      // First check the basics: is a connected host, is not in mm, has configured nic, etc.\n      let validationMessages: WitnessHostValidation = this.validateWitnessCandidate(hostValidationData);\n      if (validationMessages) {\n         return validationMessages;\n      }\n\n      // If all looks good, check if the shared witness host validation has passed\n      validationMessages = this.validateSharedWitnessHost(hostValidationData, vsanConfig, aggregateClusterErrors);\n      if (validationMessages) {\n         return validationMessages;\n      }\n\n      // Validate some conditions, to be reported as warnings\n      validationMessages = this.validateWarningConditions(hostValidationData.isEncrypted);\n      if (validationMessages) {\n         return validationMessages;\n      }\n      // Validate some minor conditions reported as infos\n      if (hostValidationData.vLCMToBeDisabled) {\n         return new WitnessHostValidation(AlertType.INFO,\n               [VsanUiUtils.getString(\"vsan.sharedWitness.assign.vLCM.warning\")]);\n      }\n      // All is good, return validation success\n      return new WitnessHostValidation(\n            AlertType.SUCCESS, [\n               VsanUiUtils.getString(\n                     \"vsan.faultDomains.stretchedCluster.wizard.configure.page.witnessHost.validation.compatibleHostState\"),\n            ]);\n   }\n\n   // Checks the basic host properties, such as connection state, powered state, etc..\n   private validateWitnessCandidate(hostValidationResult: WitnessHostValidationResult): WitnessHostValidation {\n      if (hostValidationResult.isHostInTheSameCluster) {\n         return new WitnessHostValidation(\n               AlertType.DANGER, [\n                  VsanUiUtils.getString(\n                        \"vsan.faultDomains.stretchedCluster.wizard.configure.page.witnessHost.validation.internalHostSelectedError\"),\n               ]);\n      } else if (hostValidationResult.isHostInVsanEnabledCluster) {\n         return new WitnessHostValidation(\n               AlertType.DANGER, [\n                  VsanUiUtils.getString(\n                        \"vsan.faultDomains.stretchedCluster.wizard.configure.page.witnessHost.validation.hostInVsanEnabledCluster\"),\n               ]);\n      } else if (hostValidationResult.isHostDisconnected) {\n         return new WitnessHostValidation(\n               AlertType.DANGER, [\n                  VsanUiUtils.getString(\n                        \"vsan.faultDomains.stretchedCluster.wizard.configure.page.witnessHost.validation.disconnectedHostState\"),\n               ]);\n      } else if (!hostValidationResult.isPoweredOn) {\n         return new WitnessHostValidation(\n               AlertType.DANGER, [\n                  VsanUiUtils.getString(\n                        \"vsan.faultDomains.stretchedCluster.wizard.configure.page.witnessHost.validation.notPoweredOnHostState\"),\n               ]);\n      } else if (hostValidationResult.isHostInMaintenanceMode) {\n         return new WitnessHostValidation(\n               AlertType.DANGER, [\n                  VsanUiUtils.getString(\n                        \"vsan.faultDomains.stretchedCluster.wizard.configure.page.witnessHost.validation.maintenanceModeHostState\"),\n               ]);\n      } else if (!hostValidationResult.hasVsanEnabledNic) {\n         return new WitnessHostValidation(\n               AlertType.DANGER, [\n                  VsanUiUtils.getString(\n                        \"vsan.faultDomains.stretchedCluster.wizard.configure.page.witnessHost.validation.noVsanNicEnabledOnHost\"),\n               ]);\n      } else if (!hostValidationResult.isVsanMaxCompatible) {\n         return new WitnessHostValidation(\n               AlertType.DANGER, [\n                  VsanUiUtils.getString(\n                        \"vsan.faultDomains.stretchedCluster.wizard.configure.page.witnessHost.validation.vsanMax.hostNotSupported\"),\n               ]);\n      }\n      return null;\n   }\n\n   private validateSharedWitnessHost(hostValidationData: WitnessHostValidationResult,\n         vsanConfig: VsanConfigSpec, aggregateClusterErrors: boolean): WitnessHostValidation {\n      if (hostValidationData.isWitnessHost && !hostValidationData.isStretchedClusterSupported) {\n         return new WitnessHostValidation(AlertType.DANGER, [\n            VsanUiUtils.getString(\n                  \"vsan.faultDomains.stretchedCluster.wizard.configure.page.witnessHost.validation.featureNotSupportedOnHost\"),\n         ]);\n      }\n\n      if (hostValidationData.witnessValidationResult) {\n         // Check if any API validation errors are returned for the witness host\n         if (!VsanUiUtils.isEmpty(hostValidationData.witnessValidationResult.witnessHostValidationErrors)) {\n            return new WitnessHostValidation(\n                  AlertType.DANGER, hostValidationData.witnessValidationResult.witnessHostValidationErrors);\n         }\n\n         // Check if any API validation errors are returned for the clusters. Aggregate them to a single host error\n         if (hostValidationData.witnessValidationResult.clustersValidation) {\n            const clusterValidationResults: SharedWitnessClusterValidationData[] =\n                  Object.values(hostValidationData.witnessValidationResult.clustersValidation);\n            const clusterValidationError: SharedWitnessClusterValidationData = clusterValidationResults\n                  .find(result => !result.compatible);\n            if (clusterValidationError) {\n               if (aggregateClusterErrors) {\n                  return new WitnessHostValidation(AlertType.DANGER, [\n                     VsanUiUtils.getString(\n                           \"vsan.host.sharedWitness.reassign.wizard.selectClusters.validation.incompatibleClusters\"),\n                  ]);\n               } else {\n                  return new WitnessHostValidation(AlertType.DANGER, [clusterValidationError.validationMessage]);\n               }\n            }\n\n         }\n      }\n\n      // RDMA is not supported when shared witness host is used\n      if (vsanConfig?.enableRdma && hostValidationData.isWitnessHost) {\n         return new WitnessHostValidation(AlertType.DANGER,\n               [VsanUiUtils.getString(\"vsan.sharedWitness.assign.rdma.error\")]);\n      }\n\n      // Finally check that if a shared witness host (which don't support DIT) is used when the DiT encryption is\n      // enabled\n      if (vsanConfig?.enableDataInTransitEncryption && hostValidationData.isWitnessHost\n            && !hostValidationData.isDitSharedWitnessInteroperabilitySupported) {\n         /**\n          * When Data-In-Transit Encryption is enabled, a shared witness host cannot be used.\n          */\n         return new WitnessHostValidation(AlertType.DANGER,\n               [VsanUiUtils.getString(\"vsan.sharedWitness.assign.dit.error\")]);\n      }\n      return null;\n   }\n\n   private validateWarningConditions(isEncrypted: boolean): WitnessHostValidation {\n      if (isEncrypted) {\n         return new WitnessHostValidation(AlertType.WARNING, [\n            VsanUiUtils.getString(\n                  \"vsan.faultDomains.stretchedCluster.wizard.configure.page.witnessHost.validation.hostIsEncrypted\"),\n         ]);\n      }\n      return null;\n   }\n\n   handleHostValidationError(error: string): WitnessHostValidation {\n      return new WitnessHostValidation(AlertType.DANGER, [error]);\n   }\n\n   updateClustersValidation(witnessValidationResult: SharedWitnessValidationData,\n         clustersValidationData: Map<string, SharedWitnessClusterValidationData>,\n         twoNodeClusters: InventoryNodeInfo[]): Map<string, SharedWitnessClusterValidationData> {\n      if (!witnessValidationResult) {\n         return clustersValidationData;\n      }\n      const validationData: any = witnessValidationResult.clustersValidation;\n      if (!clustersValidationData) {\n         // This is the first time we are doing the validation, just assign the result as is\n         clustersValidationData = validationData;\n         // If witness host validation is not passed cluster validation is null\n      } else if (validationData) {\n         // We need to only update the values, in case user deselected some of the clusters,\n         // we are not getting them as part of the validation result, but still want to show the original errors\n         for (const clusterData of twoNodeClusters) {\n            const updatedValidationResult: any = validationData[clusterData.moRef.value];\n            if (updatedValidationResult) {\n               clustersValidationData[clusterData.moRef.value] = updatedValidationResult;\n            }\n         }\n      }\n      return clustersValidationData;\n   }\n}\n\nexport class WitnessHostValidation {\n   constructor(\n         public validationAlertType: AlertType,\n         public validationMessages: string[],\n   ) {\n   }\n}","/* Copyright 2020 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {ClrButton} from \"@clr/angular\";\n\n/**\n * Use this class as base class for directive, which handles clr-button. It will help to link the rendered button with\n * the clr-button on which the directive is applied.\n */\nexport abstract class ClrButtonBaseDirective {\n\n   constructor(private clrButton: ClrButton) {\n      if (!clrButton) {\n         return;\n      }\n      // name should be set, if not provided in template - generate one. ClrButtom#name is used to generate the name\n      // attribute of the markup button. Later the name is used to match the generated markup with the directive.\n      if (!clrButton.name) {\n         clrButton.name = Math.random().toString();\n      }\n\n      const directiveHolder: DirectiveHolder = (clrButton as DirectiveHolder);\n      directiveHolder.directives = directiveHolder.directives || [];\n      directiveHolder.directives.push(this);\n   }\n\n   /**\n    * This method will be called when the actual html button is rendered.\n    */\n   abstract resolveButton(clrButton: ClrButton, button: HTMLButtonElement, index: number);\n}\n\nexport interface DirectiveHolder extends ClrButton {\n   directives: ClrButtonBaseDirective[];\n}","/* Copyright 2019-2022 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {CommonModule} from \"@angular/common\";\nimport {NgModule} from \"@angular/core\";\nimport {RouterModule, Routes} from \"@angular/router\";\nimport {ClarityModule} from \"@clr/angular\";\nimport {ActionButtonModule} from \"@component/action-button/action-button.module\";\nimport {CommonCellsModule} from \"@component/cell/common-cells.module\";\nimport {PromptModule} from \"@component/dialog/prompt/prompt.module\";\nimport {UnavailableViewModule} from \"@component/unavailable-view/unavailable-view.module\";\nimport {ValidationModule} from \"@component/validation/validation.module\";\nimport {CommonDirectiveModule} from \"@directive/common-directive.module\";\nimport {CommonPipeModule} from \"@pipe/common-pipe.module\";\nimport {WitnessValidationService} from \"@service/witness-validation.service\";\nimport {SharedWitnessCommonModule} from \"./common/shared-witness-common.module\";\nimport {SharedWitnessRoutePaths} from \"./common/shared-witness-route-paths\";\nimport {SelectClustersDialogComponent} from \"./dialog/select-clusters-dialog.component\";\nimport {SharedWitnessClustersComponent} from \"./view/shared-witness-clusters.component\";\n\nconst routes: Routes = [\n   {\n      path: \"\",\n      component: SharedWitnessClustersComponent,\n   },\n   {\n      path: SharedWitnessRoutePaths.SELECT_CLUSTERS_DIALOG,\n      component: SelectClustersDialogComponent,\n   },\n];\n\n@NgModule({\n   imports: [\n      CommonModule,\n      ClarityModule,\n      CommonPipeModule,\n      CommonDirectiveModule,\n      ValidationModule,\n      CommonCellsModule,\n      PromptModule,\n      ActionButtonModule,\n      SharedWitnessCommonModule,\n      UnavailableViewModule,\n      RouterModule.forChild(routes),\n   ],\n   declarations: [\n      SharedWitnessClustersComponent,\n   ],\n   providers: [\n      WitnessValidationService,\n   ],\n})\nexport class SharedWitnessClustersModule {\n}\n","/* Copyright 2021 VMware, Inc. All rights reserved. -- VMware Confidential */\n/**\n * IDs used in external KB link navigation\n */\nexport enum KnowledgeBaseId {\n   PRECHECK_PCP = \"83954\",\n   VIRTUAL_OBJECTS = \"2108319\",\n   UPGRADE = \"2148493\",\n   PERFORMANCE_DIAGNOSTICS = \"2148770\",\n   SUPPORT_INSIGHT = \"60206\",\n}\n","/* Copyright 2017-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {environment} from \"@env/environment\";\nimport {ManagedObject} from \"@service/managed-object\";\nimport {Logger} from \"./logger\";\nimport {WebPlatform} from \"./platform\";\nimport {VsanUiUtils} from \"./vsan-util\";\n\nexport class ModalBuilder {\n\n   static readonly WIDTH: number = 0;\n   static readonly HEIGHT: number = 1;\n\n   static readonly DEFAULT_SIZE: number[] = [1000, 530];\n   static readonly WIZARD_XL: number[] = [1200, 700];\n\n   static readonly APP_URL: string = (environment.repa && environment.repaExtension)\n         ? \"index.html\"\n         : \"/ui/h5-vsan-ui/\";\n\n   private size: number[] = ModalBuilder.DEFAULT_SIZE;\n\n   // When null, the modal dialog will be headless and the docked\n   // view is expected to provide a title bar.\n   private title: string = null;\n\n   private accessibilityTitle: string = null;\n\n   private urlParams: any = {};\n\n   private eventTarget: EventTarget;\n\n   constructor(private appId: string) {\n   }\n\n   setDimensions(dimensions: number[]): ModalBuilder {\n      if (!dimensions || dimensions.length !== 2) {\n         Logger.warn(\"invalid modal dimensions\", dimensions);\n         dimensions = ModalBuilder.DEFAULT_SIZE;\n      }\n      return this.setSize(dimensions[ModalBuilder.WIDTH], dimensions[ModalBuilder.HEIGHT]);\n   }\n\n   setSize(width: number, height: number): ModalBuilder {\n      this.size = [width, height];\n      return this;\n   }\n\n   setUrlParameters(params: any): ModalBuilder {\n      this.urlParams = params;\n      return this;\n   }\n\n   /**\n    * Set to null if the view provides its own title bar\n    */\n   setTitle(title: string): ModalBuilder {\n      this.title = title;\n      return this;\n   }\n\n   setAccessibilityTitle(accessibilityTitle: string): ModalBuilder {\n      this.accessibilityTitle = accessibilityTitle;\n      return this;\n   }\n\n   /**\n    * Set explicit event target if it is changed before opening the modal.\n    * For example when making a preceding request the event target is the XMLHttpRequest object.\n    */\n   setEventTarget(eventTarget: EventTarget): ModalBuilder {\n      this.eventTarget = eventTarget;\n      return this;\n   }\n\n   /**\n    * Opens a modal dialog and returns a promise to collect the result; On close the target element is focused.\n    * @param context - any JS data object, can be retrieved by WebPlatform.getModalContext()\n    * @returns {Promise<any>} - Invoked if the dialog invokes WebPlatform.closeModalDialog(arg)\n    *       with non-null arg. The promise is never rejected.\n    */\n   open(context?: any): Promise<any> {\n      return new Promise<any>((accept) => {\n         VsanUiUtils.pluginContext.targetElement = this.eventTarget ? this.eventTarget :\n               (event && event.target ? event.target : null);\n         VsanUiUtils.pluginContext.modalResultHandler = (data?: any) => {\n            if (typeof data !== \"undefined\") {\n               // Deep copy of the object was required to resolve an issue with object's prototype overriding when\n               // passing complex objects in IE11/Edge; Keep it for safety.\n               accept(JSON.parse(JSON.stringify(data)));\n            } else if (VsanUiUtils.pluginContext.targetElement && VsanUiUtils.pluginContext.targetElement.focus) {\n               // On cancel just focus the target element. Timeout is required as otherwise the focus may be\n               // consumed by the mouse click.\n               setTimeout(() => VsanUiUtils.pluginContext.targetElement.focus(), 100);\n            }\n         };\n\n         let actionUrl: string = `${ModalBuilder.APP_URL}?viewId=${this.appId}`;\n\n         let separator: string = \"?\";\n         for (const param in this.urlParams) {\n            actionUrl += separator + param + \"=\" + this.urlParams[param];\n            separator = \"&\";\n         }\n\n         WebPlatform.openModalDialog(this.title,\n               actionUrl,\n               ManagedObject.contextObjectUid,\n               this.size[0], this.size[1],\n               this.title != null,\n               VsanUiUtils.pluginContext.modalResultHandler /* onClose */,\n               context /* retrieve with Platform.getModalContext() */,\n               this.accessibilityTitle);\n      });\n   }\n\n}\n","/* Copyright 2019 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Directive, Input, OnInit} from '@angular/core';\nimport {BehaviorSubject, Observable} from \"rxjs\";\nimport {ClrButton} from \"@clr/angular\";\n\n/**\n * Attribute directive for detecting button title change and storing title.\n * Only used for clr-button in clr-button-group.\n * @title - The title of clr-button\n */\n@Directive({\n   selector: \"clr-button[vsan-button-title]\"\n})\nexport class ButtonTitleDirective implements OnInit {\n\n   constructor(public host: ClrButton) {}\n\n   private _title: string;\n\n   @Input(\"vsan-button-title\")\n   set title(value: string) {\n      if (this._title !== value) {\n         this.titleChange.next(value);\n      }\n      this._title = value;\n   }\n\n   get title(): string {\n      return this._title;\n   }\n\n   private titleChange: BehaviorSubject<string> = new BehaviorSubject<string>(\"\");\n\n   get titleChangeEvent(): Observable<string> {\n      return this.titleChange.asObservable();\n   }\n\n   ngOnInit(): void {\n      // name should be set, if not provided in template - generate one. ClrButtom#name is used to generate the name\n      // attribute of the markup button. Later the name is used to match the generated markup with the directive.\n      if (!this.host.name) {\n         this.host.name = Math.random().toString();\n      }\n   }\n\n   ngOnDestroy() {\n      this.titleChange.unsubscribe();\n   }\n}","/* Copyright 2020 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {AfterContentInit, ContentChildren, Directive, ElementRef} from \"@angular/core\";\nimport {ClrButton} from \"@clr/angular\";\nimport {ClrButtonBaseDirective, DirectiveHolder} from \"@directive/clr-button-group/clr-button-base.directive\";\n\n/**\n * Applies on every clr-button-group and help to link the clr-button with directive applieds on it,  which extends\n * {@link ClrButtonBaseDirective}, to the actual rendered html button.\n */\n@Directive({\n   selector: \"clr-button-group\",\n})\nexport class ClrButtonGroupCommonDirective implements AfterContentInit {\n\n   @ContentChildren(ClrButton, {descendants: true})\n   clrButtons: ClrButton[];\n\n   constructor(private elRef: ElementRef) {}\n\n   ngAfterContentInit(): void {\n      setTimeout(() => {\n         const allButtons: NodeListOf<HTMLButtonElement> = this.elRef.nativeElement.querySelectorAll(\"button\");\n         // match button with clrButton and notify directives\n         this.clrButtons.filter(clrButton => !!(clrButton as DirectiveHolder).directives)\n               .forEach((clrButton, index) => {\n                  const buttonFound: HTMLButtonElement = this.findButtonByName(clrButton.name, allButtons);\n                  if (buttonFound) {\n                     (clrButton as DirectiveHolder).directives.forEach(directive => {\n                        directive.resolveButton(clrButton, buttonFound, index);\n                     });\n                  }\n               });\n      });\n   }\n\n   private findButtonByName(name: string, buttons: NodeListOf<HTMLButtonElement>): HTMLButtonElement {\n      for (let i: number = 0; i < buttons.length; i++) {\n         if (buttons.item(i).name === name) {\n            return buttons.item(i);\n         }\n      }\n      return null;\n   }\n\n}","/* Copyright 2019-2022 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {ContentChildren, Directive, ElementRef, Input} from \"@angular/core\";\nimport {ClrButton} from \"@clr/angular\";\nimport {ButtonTitleDirective} from \"./button-title.directive\";\n\n/**\n * Attribute directive used to dynamically arrange child buttons, align some horizontally and\n * put the others into the drop-down list, this directive also add title attribute to the buttons.\n * It can only used on clr-button-group and there should be clr-button in the button group.\n * @maximumInlineActions - The maximum value of inline buttons.\n */\n@Directive({\n   selector: \"clr-button-group[vsan-button-group]\",\n})\nexport class ButtonGroupDirective {\n\n   private static readonly TOGGLE_MENU_BUTTON_SELECTOR: string = \"button.btn.dropdown-toggle\";\n   private static readonly VISIBLE_BUTTON_ELEMENTS_SELECTOR: string = \"button\";\n   private static readonly IN_MENU_BUTTON_ELEMENTS_SELECTOR: string = \"div.clr-button-group-menu > button\";\n\n   // Set the maximum value to 10 to display all buttons inline when there is enough space.\n   private _maximumInlineActions: number = 10;\n\n   @Input(\"vsan-button-group\")\n   set maximumInlineActions(value: number) {\n      if (!!value) {\n         this._maximumInlineActions = value;\n      }\n   }\n\n   private _buttonTitleDirectives: ButtonTitleDirective[] = [];\n\n   @ContentChildren(ButtonTitleDirective, {descendants: true})\n   set buttons(value: ButtonTitleDirective[]) {\n      this._buttonTitleDirectives = value;\n      this._buttonTitleDirectives.forEach(titleDirective => {\n         // Update button title when its title in directive changes.\n         titleDirective.titleChangeEvent.subscribe(() => {\n            setTimeout(this.updateButtonTitles);\n         });\n      });\n\n      // when action buttons with directive are changed (added / removed) some of them may go to the menu with\n      // additional actions. There is no other way found to handle toggle menu event, but click on the toggle button.\n      this.subscribeToggleButtonClick();\n   }\n\n   private _btns: ClrButton[];\n\n   @ContentChildren(ClrButton, {descendants: true})\n   set clrButtons(btns: ClrButton[]) {\n      this._btns = btns;\n      this.updateInMenuButtons();\n   }\n\n   constructor(private elRef: ElementRef) {\n   }\n\n   private updateInMenuButtons(): void {\n      const groupWithMenu: boolean = this._btns.length > this._maximumInlineActions;\n      this._btns.forEach((btn, index) => {\n         if (groupWithMenu) {\n            // When the number of buttons exceeds the maximum and the button overflows, place the button in the menu.\n            btn.inMenu = index >= this._maximumInlineActions - 1;\n         } else {\n            btn.inMenu = false;\n         }\n      });\n   }\n\n   private updateButtonTitles = (): void => {\n      const allButtons: HTMLButtonElement[] = this.getVisibleButtons().concat(this.getInMenuButtons());\n      if (!allButtons.length) {\n         return;\n      }\n\n      // if there is a rendered button for the directive - update its title.\n      this._buttonTitleDirectives.forEach(titleDirective => {\n         allButtons.forEach((button: HTMLElement) => {\n            if (button.getAttribute(\"name\") === titleDirective.host.name) {\n               button.title = titleDirective.title;\n            }\n         });\n      });\n   };\n\n   private subscribeToggleButtonClick(): void {\n      // If there is menu with additional buttons, find the toggle button and update button names on click.\n      setTimeout(() => {\n         const toggleButton: HTMLElement | null = this.getToggleButton();\n\n         // if there is a toggle button set function to handle the click event only once.\n         if (toggleButton && !toggleButton.onclick) {\n            toggleButton.onclick = this.updateButtonTitles;\n         }\n      });\n   }\n\n   // the buttons are visible buttons in button group, toggle menu button\n   private getVisibleButtons(): HTMLButtonElement[] {\n      return Array.from(this.elRef.nativeElement.querySelectorAll(\n            ButtonGroupDirective.VISIBLE_BUTTON_ELEMENTS_SELECTOR));\n   }\n\n   // inMenu buttons are rendered outside of the elRef, get them directly from the document\n   private getInMenuButtons(): HTMLButtonElement[] {\n      return Array.from(this.elRef.nativeElement.ownerDocument.querySelectorAll(\n            ButtonGroupDirective.IN_MENU_BUTTON_ELEMENTS_SELECTOR));\n   }\n\n   private getToggleButton(): HTMLElement | null {\n      return this.elRef.nativeElement.querySelector(ButtonGroupDirective.TOGGLE_MENU_BUTTON_SELECTOR);\n   }\n}","/* Copyright 2020 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {NgModule} from \"@angular/core\";\nimport {ClarityModule} from \"@clr/angular\";\nimport {CommonModule} from \"@angular/common\";\nimport {CommonPipeModule} from \"@pipe/common-pipe.module\";\nimport {CommonDirectiveModule} from \"@directive/common-directive.module\";\nimport {UnavailableViewComponent} from \"@component/unavailable-view/unavailable-view.component\";\nimport {ValidationModule} from \"@component/validation/validation.module\";\n\n@NgModule({\n   imports: [\n      CommonModule,\n      ClarityModule,\n      CommonPipeModule,\n      ValidationModule,\n      CommonDirectiveModule,\n   ],\n   declarations: [\n      UnavailableViewComponent,\n   ],\n   exports: [\n      UnavailableViewComponent,\n   ],\n})\nexport class UnavailableViewModule {\n}\n","/* Copyright 2019-2022 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, OnInit} from \"@angular/core\";\nimport {ClrDatagridNumericFilterInterface, ClrDatagridStringFilterInterface} from \"@clr/angular\";\nimport {UnavailableViewSpec} from \"@component/unavailable-view/unavailable-view-spec\";\nimport {AlertActionLink} from \"@component/validation/alert-action-link\";\nimport {AlertType} from \"@component/validation/alert-type\";\nimport {PermissionService} from \"@generated/permission-service\";\nimport {Privileges} from \"@generated/privileges\";\nimport {SharedWitnessHostClusterData} from \"@generated/shared-witness-host-cluster-data\";\nimport {SharedWitnessHostService} from \"@generated/shared-witness-host-service\";\nimport {SharedWitnessLimits} from \"@generated/shared-witness-limits\";\nimport {VsanCapabilityProvider} from \"@generated/vsan-capability-provider\";\nimport {VsanStretchedClusterService} from \"@generated/vsan-stretched-cluster-service\";\nimport {ReassignWitnessContext} from \"@navigation/context/reassign-witness-context\";\nimport {ErrorMessage} from \"@service/flow/error-message.decorator\";\nimport {Loader} from \"@service/flow/loader.decorator\";\nimport {LoadingIndicator} from \"@service/flow/loading-indicator.decorator\";\nimport {RefreshHandler} from \"@service/global-refresh.service\";\nimport {ManagedObject} from \"@service/managed-object\";\nimport {NavigationService, PlatformExtension} from \"@service/navigation/navigation.service\";\nimport {ScreenReaderAnnouncer, SrMessageType} from \"@service/screen-reader-announcer.service\";\nimport {TaskMonitorService} from \"@service/task-monitor-service\";\nimport {Icon} from \"@util/icon\";\nimport {Logger} from \"@util/logger\";\nimport {ModalBuilder} from \"@util/modal-builder\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {SharedWitnessConstants} from \"../common/shared-witness-constants\";\nimport {SharedWitnessRoutePaths} from \"../common/shared-witness-route-paths\";\n\n@Component({\n   templateUrl: \"shared-witness-clusters.html\",\n   styleUrls: [\"shared-witness-clusters.scss\"],\n   selector: \"vsan-shared-witness-clusters\",\n})\nexport class SharedWitnessClustersComponent implements OnInit {\n\n   @LoadingIndicator()\n   loading: boolean;\n\n   @ErrorMessage()\n   errorMessage: string;\n\n   alertType: AlertType;\n   addClustersActionTitle: string = \"\";\n   isAddClustersActionDisabled: boolean = true;\n   hasEditPermissions: boolean = false;\n   clustersData: SharedWitnessHostClusterData[];\n   selectedClusters: SharedWitnessHostClusterData[] = [];\n   witnessLimits: SharedWitnessLimits;\n   componentsWarningThreshold: number;\n   showComponentsLimitAlert: boolean;\n   componentsLimitAlertType: AlertType;\n   componentsLimitAlertMessage: string;\n   unavailableViewSpec: UnavailableViewSpec;\n\n   _objectsCountFilterValue: number[] = [null, null];\n\n   get objectsCountFilterValue(): number[] {\n      return this._objectsCountFilterValue;\n   }\n\n   set objectsCountFilterValue(value: number[]) {\n      this._objectsCountFilterValue = value;\n      // Trigger model change for the label as it is inside content projection\n      this.thresholdFilterActionLink.label = this.getComponentsThresholdFilterLabel();\n   }\n\n   clusterObjectsCountFilter: ClrDatagridNumericFilterInterface<SharedWitnessHostClusterData> =\n         new class implements ClrDatagridNumericFilterInterface<SharedWitnessHostClusterData> {\n            accepts = (item: SharedWitnessHostClusterData, low: number, high: number): boolean => {\n               if (low !== null && item.componentsNumber < low) {\n                  return false;\n               }\n               if (high !== null && item.componentsNumber > high) {\n                  return false;\n               }\n               return true;\n            };\n         }();\n\n   clusterNameFilter: ClrDatagridStringFilterInterface<SharedWitnessHostClusterData> =\n         new class implements ClrDatagridStringFilterInterface<SharedWitnessHostClusterData> {\n            accepts = (item: SharedWitnessHostClusterData, search: string): boolean => {\n               return item.cluster.name !== null && item.cluster.name.toLowerCase().indexOf(search) > -1;\n            };\n         }();\n\n   thresholdFilterActionLink: AlertActionLink = {\n      label: this.getComponentsThresholdFilterLabel(),\n      action: () => this.filterClustersByComponentsThreshold(),\n   };\n\n   @ScreenReaderAnnouncer()\n   srOnlyMessage: string;\n\n   constructor(private sharedWitnessService: SharedWitnessHostService,\n         private stretchedClusterService: VsanStretchedClusterService,\n         private permissionService: PermissionService,\n         private navigationService: NavigationService,\n         private taskSvc: TaskMonitorService,\n         private vsanCapabilityProvider: VsanCapabilityProvider) {\n   }\n\n   ngOnInit(): void {\n      this.fetch();\n   }\n\n   @RefreshHandler\n   @Loader({\n      srMessage: \"vsan.host.monitor.sharedWitnessClustersList.title\",\n      srMessageType: SrMessageType.PAGE_TITLE,\n   })\n   async fetch(): Promise<void> {\n      this.resetData();\n      const isSharedWitnessSupported: boolean = await this.vsanCapabilityProvider.getIsSharedWitnessSupported(\n            ManagedObject.contextObject);\n      if (!isSharedWitnessSupported) {\n         this.unavailableViewSpec = UnavailableViewSpec.SHARED_WITNESS_NOT_SUPPORTED;\n         return;\n      }\n      [this.clustersData, this.witnessLimits, this.hasEditPermissions] = await Promise.all([\n         this.sharedWitnessService.getWitnessHostData(ManagedObject.contextObject),\n         this.sharedWitnessService.getSharedWitnessLimits(ManagedObject.contextObject),\n         this.permissionService.hasPermissions(ManagedObject.contextObject, [Privileges.EDIT_CLUSTER()]),\n      ]);\n      this.updateSelection();\n      this.componentsWarningThreshold = this.getComponentsWarningThreshold();\n      this.ensureComponentsLimitAlert();\n      this.updateActionsAvailability();\n      if (!this.witnessLimits) {\n         this.alertType = AlertType.WARNING;\n         throw new Error(VsanUiUtils.getString(\"vsan.sharedWitness.limits.query.error\"));\n      }\n   }\n\n   private resetData(): void {\n      this.errorMessage = null;\n      this.alertType = AlertType.DANGER;\n      this.showComponentsLimitAlert = false;\n      this.componentsLimitAlertType = AlertType.WARNING;\n      this.componentsLimitAlertMessage = null;\n   }\n\n   private updateActionsAvailability(): void {\n      this.isAddClustersActionDisabled = false;\n      this.addClustersActionTitle = VsanUiUtils.getString(\n            \"vsan.host.monitor.sharedWitnessClustersList.addClusters.title\");\n      if (!this.clustersData || !this.witnessLimits) {\n         // The data is still not initialized, should not happen, just sanity check.\n         return;\n      }\n      if (VsanUiUtils.isNumericValue(this.witnessLimits.maxWitnessClusters) &&\n            (this.clustersData.length >= this.witnessLimits.maxWitnessClusters)) {\n         // The host already supports its max number of clusters\n         this.isAddClustersActionDisabled = true;\n         this.addClustersActionTitle = VsanUiUtils.getString(\n               \"vsan.host.monitor.sharedWitnessClustersList.addClusters.disabled.tooManyClusters\",\n               this.witnessLimits.maxWitnessClusters);\n      } else if (VsanUiUtils.isNumericValue(this.witnessLimits.maxComponentsPerCluster) &&\n            (this.witnessLimits.maxComponentsPerCluster <= this.getCurrentMaxComponentsCount())) {\n         // If we add even 1 cluster to this host, the components limit will be exceeded for some clusters.\n         this.isAddClustersActionDisabled = true;\n         this.addClustersActionTitle = VsanUiUtils.getString(\n               \"vsan.host.monitor.sharedWitnessClustersList.addClusters.disabled.notEnoughComponents\");\n      }\n   }\n\n   private updateSelection(): void {\n      // On reassign completed when data is fetched again clustersData may be empty\n      if (!VsanUiUtils.isEmpty(this.selectedClusters) && !VsanUiUtils.isEmpty(this.clustersData)) {\n         this.selectedClusters = this.clustersData.filter(\n               c => this.selectedClusters.some(s => s.cluster.moRef.value === c.cluster.moRef.value));\n      } else {\n         this.selectedClusters = [];\n      }\n   }\n\n   private getCurrentMaxComponentsCount(): number {\n      return this.clustersData.reduce((max: number, clusterData: SharedWitnessHostClusterData) =>\n            max = clusterData.componentsNumber > max\n                  ? clusterData.componentsNumber\n                  : max, 0);\n   }\n\n   private getComponentsWarningThreshold(): number {\n      if (!this.witnessLimits || !this.witnessLimits.maxComponentsPerCluster) {\n         return 0;\n      }\n      return this.witnessLimits.maxComponentsPerCluster * SharedWitnessConstants.CLUSTER_COMPONENTS_THRESHOLD_PERC;\n   }\n\n   private ensureComponentsLimitAlert(): void {\n      this.showComponentsLimitAlert = this.isAnyClusterReachingComponentsLimit();\n      if (this.showComponentsLimitAlert) {\n         const hasAnyClusterReachedComponentsLimit: boolean =\n               this.clustersData.some(c => this.hasReachedComponentsLimit(c));\n         this.componentsLimitAlertType = hasAnyClusterReachedComponentsLimit\n               ? AlertType.DANGER\n               : AlertType.WARNING;\n         this.componentsLimitAlertMessage = VsanUiUtils.getString(hasAnyClusterReachedComponentsLimit\n               ? \"vsan.host.monitor.sharedWitnessClustersList.clusters.warning.reachedLimit\"\n               : \"vsan.host.monitor.sharedWitnessClustersList.clusters.warning.reachingLimit\");\n      }\n   }\n\n   private isAnyClusterReachingComponentsLimit(): boolean {\n      return !VsanUiUtils.isEmpty(this.clustersData) &&\n            this.clustersData.some(c => this.isReachingComponentsLimit(c));\n   }\n\n   getReassignWitnessActionTitle(): string {\n      return VsanUiUtils.getString(this.selectedClusters.length\n            ? \"vsan.host.monitor.sharedWitnessClustersList.reassignWitness.title\"\n            : \"vsan.host.monitor.sharedWitnessClustersList.reassignWitness.disabled.noSelection\");\n   }\n\n   isReachingComponentsLimit(cluster: SharedWitnessHostClusterData): boolean {\n      return VsanUiUtils.isNumericValue(this.componentsWarningThreshold) &&\n            cluster.componentsNumber >= this.componentsWarningThreshold;\n   }\n\n   getComponentsLimitLabel(cluster: SharedWitnessHostClusterData): string {\n      const localizationKey: string = this.hasReachedComponentsLimit(cluster)\n            ? \"vsan.host.monitor.sharedWitnessClustersList.cluster.warning.reachedLimit\"\n            : \"vsan.host.monitor.sharedWitnessClustersList.cluster.warning.reachingLimit\";\n      return VsanUiUtils.getString(localizationKey, this.witnessLimits.maxComponentsPerCluster);\n   }\n\n   getComponentsLimitShape(cluster: SharedWitnessHostClusterData): string {\n      return this.hasReachedComponentsLimit(cluster)\n            ? Icon.CLR_ERROR_STANDARD_ICON_SHAPE\n            : Icon.CLR_WARN_STANDARD_ICON_SHAPE;\n   }\n\n   getComponentsLimitClass(cluster: SharedWitnessHostClusterData): string {\n      return Icon.clrIconShapeClassMap[this.getComponentsLimitShape(cluster)];\n   }\n\n   private hasReachedComponentsLimit(cluster: SharedWitnessHostClusterData): boolean {\n      return cluster.componentsNumber >= this.witnessLimits.maxComponentsPerCluster;\n   }\n\n   filterClustersByComponentsThreshold(): void {\n      const minValue: number = this.isComponentsThresholdFilterApplied()\n            ? null\n            : this.componentsWarningThreshold;\n      const maxValue: number = this.objectsCountFilterValue[1];\n      this.objectsCountFilterValue = [minValue, maxValue];\n   }\n\n   private getComponentsThresholdFilterLabel(): string {\n      return VsanUiUtils.getString(this.isComponentsThresholdFilterApplied()\n            ? \"vsan.host.monitor.sharedWitnessClustersList.clusters.warning.clearFilter\"\n            : \"vsan.host.monitor.sharedWitnessClustersList.clusters.warning.applyFilter\");\n   }\n\n   private isComponentsThresholdFilterApplied(): boolean {\n      return this.objectsCountFilterValue[0] === this.componentsWarningThreshold;\n   }\n\n   navigate(clusterRef: ManagedObject): void {\n      this.navigationService.navigateTo(PlatformExtension.CLUSTER_FAULT_DOMAIN, clusterRef);\n   }\n\n   async addClusters(): Promise<void> {\n      const eventTarget: EventTarget = event.target;\n      let hasDiskGroups: boolean = false;\n      try {\n         hasDiskGroups = await this.stretchedClusterService.hasDiskGroups(ManagedObject.contextObject);\n      } catch (error) {\n         // Don't cancel add clusters dialog opening if disk groups is not fetched.\n         Logger.error(error);\n      }\n      let appId: string = SharedWitnessRoutePaths.ADD_CLUSTERS_WIZARD_FULL;\n      let modalSize: number[] = ModalBuilder.WIZARD_XL;\n      if (hasDiskGroups) {\n         appId = SharedWitnessRoutePaths.SELECT_CLUSTERS_DIALOG_FULL;\n         modalSize = [700, 700];\n      }\n      new ModalBuilder(appId)\n            .setDimensions(modalSize)\n            .setEventTarget(eventTarget)\n            .open()\n            .then(this.refreshOnTaskCompleted);\n   }\n\n   reassignWitness(): void {\n      const context: ReassignWitnessContext = {\n         clustersData: this.selectedClusters.map(c => c.cluster),\n         currentWitnessHost: ManagedObject.contextObject,\n      };\n      new ModalBuilder(SharedWitnessRoutePaths.REASSIGN_WITNESS_WIZARD_FULL)\n            .setDimensions(ModalBuilder.WIZARD_XL)\n            .open(context)\n            .then(this.refreshOnTaskCompleted);\n   }\n\n   private refreshOnTaskCompleted = (task: ManagedObject) => {\n      if (!task) {\n         return;\n      }\n      this.taskSvc.getAwaitResult(task).then(() => this.fetch());\n   };\n\n   // Returns \"a (out of max b)\" label. If b is null, it is replaced by \"--\".\n   getAssignedClustersValueLabel(): string {\n      const naLabel: string = VsanUiUtils.getString(\"vsan.na.label\");\n      const assignedClustersCount: number = !VsanUiUtils.isEmpty(this.clustersData)\n            ? this.clustersData.length\n            : 0;\n      const maxWitnessClusters: number | string =\n            (this.witnessLimits && VsanUiUtils.isNumericValue(this.witnessLimits.maxWitnessClusters))\n                  ? this.witnessLimits.maxWitnessClusters\n                  : naLabel;\n      return VsanUiUtils.getString(\"vsan.host.monitor.sharedWitnessClustersList.clusters.limit.value\",\n            assignedClustersCount, maxWitnessClusters);\n   }\n\n   getComponentsLimitValueLabel(): string | number {\n      return this.witnessLimits && VsanUiUtils.isNumericValue(this.witnessLimits.maxComponentsPerCluster)\n            ? this.witnessLimits.maxComponentsPerCluster\n            : VsanUiUtils.getString(\"vsan.na.label\");\n   }\n}","/* Copyright 2020-2022 VMware, Inc. All rights reserved. -- VMware Confidential */\nexport class VsanDialogUtil {\n   static readonly CAPACITY_MANAGEMENT_DIALOG: VsanDialogProperties = {\n      width: 800,\n      height: 700,\n   };\n\n   static readonly DELETE_VOLUME_DIALOG: VsanDialogProperties = {\n      width: 500,\n      height: 250,\n   };\n\n   static readonly MIGRATE_VOLUME_DIALOG: VsanDialogProperties = {\n      width: 1030,\n      height: 710,\n   };\n\n   static readonly REAPPLY_VOLUME_POLICY_DIALOG: VsanDialogProperties = {\n      width: 700,\n      height: 250,\n   };\n\n   static readonly DUPLICATE_PCI_ID_MODEL_SELECTION_DIALOG: VsanDialogProperties = {\n      width: 800,\n      height: 500,\n   };\n\n   static readonly HEALTH_RESTORE_ACTION_DIALOG: VsanDialogProperties = {\n      width: 550,\n      height: 250,\n   };\n\n   // Keep in sync with plugin.xml extension point\n   static readonly CLUSTER_POWER_ON_DIALOG: VsanDialogProperties = {\n      width: 600,\n      height: 230,\n   };\n\n   static readonly VM_IO_DIAGNOSTICS_METRICS_DIALOG: VsanDialogProperties = {\n      width: 900,\n      height: 700,\n   };\n\n   static readonly VM_IO_DIAGNOSTICS_LATENCY_DIALOG: VsanDialogProperties = {\n      width: 1000,\n      height: 500,\n   };\n\n   static readonly VM_IO_DIAGNOSTICS_DOM_OWNER_LATENCY_DIALOG: VsanDialogProperties = {\n      width: 1000,\n      height: 400,\n   };\n\n   static readonly PERF_SVC_EDIT_ACTION_DIALOG: VsanDialogProperties = {\n      width: 800,\n      height: 450,\n   };\n\n   static readonly PERF_SVC_ENABLE_ACTION_DIALOG: VsanDialogProperties = {\n      width: 800,\n      height: 250,\n   };\n\n   static readonly CLAIM_DISKS_ACTION_DIALOG: VsanDialogProperties = {\n      width: 1200,\n      height: 650,\n   };\n\n   static readonly VSAN_DISK_CLAIM_ACTION_DIALOG: VsanDialogProperties = {\n      width: 670,\n      height: 300,\n   };\n}\n\nexport class VsanDialogProperties {\n   width: number;\n   height: number;\n}\n","<!-- Copyright 2019-2022 VMware, Inc. All rights reserved. VMware Confidential -->\n<h5 vsan-auto-focus>\n   {{\"vsan.host.monitor.sharedWitnessClustersList.title\" | localized}}\n</h5>\n<span *ngIf=\"loading\" class=\"busy-backdrop\">\n   <span class=\"spinner spinner-lg central-spinner\"></span>\n</span>\n<ng-container *ngIf=\"!loading\">\n   <vsan-unavailable-view *ngIf=\"unavailableViewSpec\"\n                          [unavailableViewSpec]=\"unavailableViewSpec\">\n   </vsan-unavailable-view>\n   <ng-container *ngIf=\"!unavailableViewSpec\">\n      <vsan-validation id=\"shared-witness-errors\"\n                       *ngIf=\"!!errorMessage\"\n                       [allowClose]=\"true\"\n                       [alertType]=\"alertType\"\n                       [alert]=\"errorMessage\"\n                       (onClosed)=\"errorMessage = null\">\n      </vsan-validation>\n      <clr-stack-view>\n         <clr-stack-block>\n            <clr-stack-label id=\"clustersLimitLabel\">\n               {{\"vsan.host.monitor.sharedWitnessClustersList.clusters.limit.label\" | localized}}\n            </clr-stack-label>\n            <clr-stack-content id=\"clustersLimitValue\">\n               {{getAssignedClustersValueLabel()}}\n            </clr-stack-content>\n         </clr-stack-block>\n         <clr-stack-block>\n            <clr-stack-label id=\"componentsLimitLabel\">\n               {{'vsan.host.monitor.sharedWitnessClustersList.components.limit.label' | localized}}\n            </clr-stack-label>\n            <clr-stack-content id=\"componentsLimitValue\">{{getComponentsLimitValueLabel()}}</clr-stack-content>\n         </clr-stack-block>\n      </clr-stack-view>\n\n      <vsan-validation *ngIf=\"showComponentsLimitAlert\"\n                       id=\"components-threshold-filter\"\n                       [alertType]=\"componentsLimitAlertType\"\n                       [alert]=\"componentsLimitAlertMessage\"\n                       [actionLink]=\"thresholdFilterActionLink\">\n      </vsan-validation>\n\n      <clr-button-group vsan-button-group class=\"btn-link\">\n         <clr-button id=\"add-clusters-action\"\n                     name=\"add-clusters-action\"\n                     (click)=\"addClusters()\"\n                     class=\"btn btn-sm\"\n                     [disabled]=\"isAddClustersActionDisabled || !hasEditPermissions\"\n                     [vsan-button-title]=\"addClustersActionTitle\">\n            {{\"vsan.host.monitor.sharedWitnessClustersList.addClusters.label\" | localized}}\n         </clr-button>\n         <clr-button id=\"reassign-witness-action\"\n                     name=\"reassign-witness-action\"\n                     (click)=\"reassignWitness()\"\n                     class=\"btn btn-sm\"\n                     [disabled]=\"!selectedClusters?.length || !hasEditPermissions\"\n                     [vsan-button-title]=\"getReassignWitnessActionTitle()\">\n            {{\"vsan.host.monitor.sharedWitnessClustersList.reassignWitness.label\" | localized}}\n         </clr-button>\n      </clr-button-group>\n\n      <clr-datagrid id=\"witness-host-clusters-list\"\n                    [(clrDgSelected)]=\"selectedClusters\">\n         <clr-dg-column id=\"cluster-name-column\" class=\"name-column\">\n            {{'vsan.host.monitor.sharedWitnessClustersList.cluster.name' | localized}}\n            <clr-dg-string-filter [clrDgStringFilter]=\"clusterNameFilter\"></clr-dg-string-filter>\n         </clr-dg-column>\n         <clr-dg-column id=\"cluster-components-column\">\n            {{'vsan.host.monitor.sharedWitnessClustersList.cluster.components' | localized}}\n            <clr-dg-numeric-filter [clrDgNumericFilter]=\"clusterObjectsCountFilter\"\n                                   [(clrFilterValue)]=\"objectsCountFilterValue\">\n            </clr-dg-numeric-filter>\n         </clr-dg-column>\n         <clr-dg-placeholder>\n            {{'vsan.host.monitor.sharedWitnessClustersList.clusters.no.result' | localized}}\n         </clr-dg-placeholder>\n         <clr-dg-row *clrDgItems=\"let clusterData of clustersData\" [clrDgItem]=\"clusterData\">\n            <clr-dg-cell vsan-show-title class=\"cluster-name-cell\">\n               <clr-icon [attr.shape]=\"clusterData.cluster?.primaryIconId\"></clr-icon>\n               <a href=\"javascript://\" (click)=\"navigate(clusterData.cluster?.moRef)\">\n                  {{clusterData.cluster?.name}}\n               </a>\n            </clr-dg-cell>\n            <clr-dg-cell class=\"cluster-components-cell no-vertical-padding\">\n               <span>{{clusterData.componentsNumber}}</span>\n               <vsan-health-status-cell *ngIf=\"isReachingComponentsLimit(clusterData)\"\n                                        [label]=\"getComponentsLimitLabel(clusterData)\"\n                                        [iconClass]=\"getComponentsLimitClass(clusterData)\"\n                                        [shape]=\"getComponentsLimitShape(clusterData)\">\n               </vsan-health-status-cell>\n            </clr-dg-cell>\n         </clr-dg-row>\n      </clr-datagrid>\n   </ng-container>\n</ng-container>\n","/* Copyright 2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {\n   AfterViewInit,\n   ComponentFactoryResolver,\n   Directive,\n   ElementRef,\n   Host,\n   Input,\n   Optional,\n   Renderer2,\n   Self,\n} from \"@angular/core\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {NavigationService} from \"@navigation/navigation.service\";\nimport {ClrButtonBaseDirective} from \"@directive/clr-button-group/clr-button-base.directive\";\nimport {ClrButton} from \"@clr/angular\";\n\n/**\n * Decorates a button or an anchor as external link. Requires one of the optional parameters articleId, helpId or url.\n *\n * @param external-link: Optional. Localization key of the text label of the external link. If omitted default label\n * will be used - \"Learn more\" for anchors or \"Ask VMWare\" for buttons.\n * @param articleId - Optional. Id of article in knowledge base.\n * @param helpId - Optional. Help id which will redirect to Knowledge Base.\n * @param url - Optional. External URL.\n */\n@Directive({\n   selector: \"a[external-link], button[external-link], clr-button[external-link]\",\n})\nexport class ExternalLinkDirective extends ClrButtonBaseDirective implements AfterViewInit {\n   private readonly ASK_VMWARE_DEFAULT_TEXT_KEY: string = \"vsan.common.askVMware\";\n   private readonly LEARN_MORE_DEFAULT_TEXT_KEY: string = \"vsan.common.learnMore\";\n\n   private readonly CONTAINER_CLASS: string = \"icon-name-container\";\n   private readonly NAVIGATION_EVENT_TYPE: string = \"click\";\n   private readonly LEAD_TO_NOWHERE_URL: string = \"javascript://\";\n   private readonly HTML_ELEMENT_SPAN_NAME: string = \"span\";\n   private readonly HTML_ELEMENT_ICON_NAME: string = \"clr-icon\";\n   private readonly HTML_ELEMENT_ROLE_ATTR_NAME: string = \"role\";\n   private readonly HTML_ELEMENT_ROLE_ATTR_VALUE: string = \"link\";\n   private readonly ICON_SHAPE_ATTR_NAME: string = \"shape\";\n   private readonly ICON_SHAPE_ATTR_VALUE: string = \"pop-out\";\n   private readonly ICON_SIZE_ATTR_NAME: string = \"size\";\n   private readonly ICON_SIZE_ATTR_VALUE: string = \"16\";\n   private readonly ICON_CLASS_ATTR_NAME: string = \"class\";\n   private readonly ICON_CLASS_ATTR_VALUE: string = \"link\";\n   private readonly ICON_TITLE_ATTR_NAME: string = \"title\";\n\n   private readonly KB_URL: string = \"http://kb.vmware.com/kb/\";\n\n   @Input(\"external-link\")\n   anchorText: string;\n\n   @Input()\n   articleId: string;\n\n   @Input()\n   helpId: string;\n\n   @Input()\n   url: string;\n\n   constructor(private el: ElementRef<HTMLElement>,\n         private resolver: ComponentFactoryResolver,\n         private renderer: Renderer2,\n         private navigationService: NavigationService,\n         // this variable will be initialized only if the host is clr-button\n         @Host() @Self() @Optional() clrButton: ClrButton) {\n      super(clrButton);\n   }\n\n   ngAfterViewInit(): void {\n      const element: HTMLElement = this.el.nativeElement;\n      // continue only if element is HTML link or button\n      if (!this.isLink(element) && !this.isButton(element)) {\n         // element is clr-button, wait until html button for it is resolved - handled by resloveButton\n         return;\n      }\n      this.prepareExternalLink(element);\n   }\n\n   resolveButton(clrButton: ClrButton, button: HTMLButtonElement, index: number): void {\n      // only if element is clr-button. At this point the html button is already resolved. Apply on it.\n      this.prepareExternalLink(button);\n   }\n\n   private prepareExternalLink(element: HTMLElement): void {\n      this.renderer.addClass(element, this.CONTAINER_CLASS);\n\n      this.setText(element);\n      if (this.isLink(element)) {\n         this.decorateLink(element);\n      } else {\n         this.addLinkRole(element);\n      }\n\n      this.initializeNavigationHandler(element);\n   }\n\n   private isButton(element: HTMLElement): boolean {\n      return element instanceof HTMLButtonElement;\n   }\n\n   private isLink(element: HTMLElement): boolean {\n      return element instanceof HTMLAnchorElement;\n   }\n\n   private setText(element: HTMLElement): void {\n      const span: HTMLSpanElement = this.renderer.createElement(this.HTML_ELEMENT_SPAN_NAME);\n      span.innerText = this.getText(element);\n      this.renderer.appendChild(element, span);\n\n      const icon: HTMLSpanElement = this.renderer.createElement(this.HTML_ELEMENT_ICON_NAME);\n      icon.setAttribute(this.ICON_SHAPE_ATTR_NAME, this.ICON_SHAPE_ATTR_VALUE);\n      icon.setAttribute(this.ICON_SIZE_ATTR_NAME, this.ICON_SIZE_ATTR_VALUE);\n      icon.setAttribute(this.ICON_CLASS_ATTR_NAME, this.ICON_CLASS_ATTR_VALUE);\n      // Set title of the icon for screen readers clarity\n      icon.setAttribute(this.ICON_TITLE_ATTR_NAME, VsanUiUtils.getString(\"vsan.screenReader.label.externalLink.icon\"));\n      this.renderer.appendChild(element, icon);\n   }\n\n   private getText(element: HTMLElement): string {\n      if (this.anchorText) {\n         return this.anchorText;\n      }\n      const key: string = this.isButton(element) ? this.ASK_VMWARE_DEFAULT_TEXT_KEY : this.LEARN_MORE_DEFAULT_TEXT_KEY;\n      return VsanUiUtils.getString(key);\n   }\n\n   private decorateLink(element: HTMLElement): void {\n      const linkElement: HTMLLinkElement = element as HTMLLinkElement;\n      // don't use href attribute. If omitted, the link will be not visualized properly.\n      linkElement.href = this.LEAD_TO_NOWHERE_URL;\n      // display link on same line\n      linkElement.style.display = \"inline-flex\";\n   }\n\n   private initializeNavigationHandler(element: HTMLElement): void {\n      element.addEventListener(this.NAVIGATION_EVENT_TYPE, () => {\n         if (this.helpId) {\n            this.navigationService.askVMware(this.helpId);\n            return;\n         }\n         if (this.articleId) {\n            this.navigationService.navigateToAddress(`${this.KB_URL}${this.articleId}`);\n            return;\n         }\n         if (this.url) {\n            this.navigationService.navigateToAddress(this.url);\n         }\n      });\n   }\n\n   // Indicate external navigation by assigning \"link\" role\n   private addLinkRole(element: HTMLElement): void {\n      this.renderer.setAttribute(element, this.HTML_ELEMENT_ROLE_ATTR_NAME, this.HTML_ELEMENT_ROLE_ATTR_VALUE);\n   }\n}","/* Copyright 2019-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {NgModule} from \"@angular/core\";\nimport {CommonModule} from \"@angular/common\";\nimport {ClarityModule} from \"@clr/angular\";\nimport {ActionButtonSeparatorComponent} from \"@component/action-button/action-button-separator.component\";\nimport {ButtonTitleDirective} from \"@component/action-button/button-title.directive\";\nimport {ButtonGroupDirective} from \"@component/action-button/button-group.directive\";\nimport {ButtonGroupWrapDirective} from \"@component/action-button/button-group-wrap.directive\";\n\n@NgModule({\n   imports: [\n      CommonModule,\n      ClarityModule,\n   ],\n   declarations: [\n      ActionButtonSeparatorComponent,\n      ButtonGroupDirective,\n      ButtonGroupWrapDirective,\n      ButtonTitleDirective,\n   ],\n   exports: [\n      ActionButtonSeparatorComponent,\n      ButtonGroupDirective,\n      ButtonGroupWrapDirective,\n      ButtonTitleDirective,\n   ]\n})\nexport class ActionButtonModule {\n}\n"]}