{"version":3,"sources":["webpack:///src/app/vsan/common/component/diskmgmt/model/auto-claim-summary.data.ts","webpack:///src/app/vsan/common/component/diskmgmt/model/auto-claim-disks.data.ts","webpack:///src/app/vsan/common/component/diskmgmt/claim-mode-toggle.html","webpack:///src/app/vsan/common/component/diskmgmt/auto-claim-disks.html","webpack:///src/app/vsan/common/component/diskmgmt/auto-claim-disks.component.ts","webpack:///src/app/vsan/common/service/fault-domain-validation.service.ts","webpack:///src/app/vsan/common/util/witness-host.util.ts","webpack:///src/app/vsan/common/component/diskmgmt/claim-mode-toggle.component.ts"],"names":["AutoClaimSummaryData","disksCount","totalClaimedCapacity","AutoClaimDisksData","modelName","diskCapacity","diskType","totalCapacity","AutoClaimDisksComponent","AlertType","claimedDisksChange","compatibleDisks","Map","incompatibleDisks","hostsClaimingData","size","populateViewData","totalClaimedDisks","values","claimData","isEmpty","notInUseDisks","filter","diskData","disk","map","forEach","isVsanMaxCompatible","updateDisksData","capacityNum","claimOption","SingleTier","DoNotClaim","emit","disksToUpdate","diskModel","vendor","concat","has","set","sameModelDisks","get","getScsiDiskType","isFlash","incrementDisks","diskModelData","Array","from","reduce","acc","compatible","getString","FaultDomainValidationService","clusterHostFaultDomainData","errors","faultDomainData","faultDomainName","canChangeFaultDomain","connectionState","connected","push","name","WitnessHostUtil","configType","hasClaimedDisks","isWitnessDeployedFromOvf","isVsanMaxWorkflow","STRETCHED_CLUSTER","TWO_HOST_VSAN_CLUSTER","ClaimModeToggleComponent","isAutoClaimChange","_isAutoClaim","value","isAutoClaim"],"mappings":"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","file":"83-es5.js","sourcesContent":["/* Copyright 2021 VMware, Inc. All rights reserved. -- VMware Confidential */\n\n/**\n * Holds data for the total claimed capacity and disk count\n * when using vSAN managed claiming, e.g. vSAN MAX auto claim.\n */\nexport class AutoClaimSummaryData {\n  constructor(public disksCount: number, public totalClaimedCapacity: number) {\n  }\n}","/* Copyright 2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {DiskType} from \"@generated/disk-type\";\n\n/**\n * Holds data for disks with the same vendor, model and size.\n * It is used to represent the auto Claim disks information for vSAN MAX.\n * .\n */\nexport class AutoClaimDisksData {\n\n   /**\n    * Combination of the disk's vendor + model.\n    */\n   modelName: string;\n\n   /**\n    * The size of each disk in this category.\n    */\n   diskCapacity: number;\n\n   /**\n    * The disk type. For now only SSD/HDD.\n    */\n   diskType: DiskType;\n\n   /**\n    * The total number of disks with the same model + size.\n    */\n   disksCount: number;\n\n   /**\n    * The total capacity of disks. Can be derived by diskCapacity * disksCount, holding it to optimise the template.\n    */\n   totalCapacity: number;\n\n   constructor(modelName: string, diskCapacity: number, diskType: DiskType) {\n      this.modelName = modelName;\n      this.diskCapacity = diskCapacity;\n      this.diskType = diskType;\n      this.disksCount = 0;\n      this.totalCapacity = 0;\n   }\n\n   incrementDisks(): void {\n      this.disksCount++;\n      this.totalCapacity += this.diskCapacity;\n   }\n}","<!--Copyright 2021-2022 VMware, Inc. All rights reserved. -- VMware Confidential-->\n<clr-toggle-wrapper>\n   <input type=\"checkbox\"\n          clrToggle\n          id=\"auto-claim\"\n          name=\"auto-claim\"\n          [disabled]=\"!isAutoClaimAllowed\"\n          [(ngModel)]=\"isAutoClaim\"/>\n   <label for=\"auto-claim\">\n      {{\"vsan.cluster.hci.configureHciCluster.wizard.claimDisksPage.autoClaimToggle.title\" | localized}}\n   </label>\n</clr-toggle-wrapper>\n<clr-signpost id=\"auto-claim-signpost\">\n   <clr-signpost-content *clrIfOpen clrPosition=\"bottom-middle\">\n      <ng-container *ngIf=\"isAutoClaimAllowed\">\n         <div>\n            {{\"vsan.cluster.hci.configureHciCluster.wizard.claimDisksPage.autoClaimToggle.signpost.part1\" | localized}}\n         </div>\n         <div>\n            {{\"vsan.cluster.hci.configureHciCluster.wizard.claimDisksPage.autoClaimToggle.signpost.part2\" | localized}}\n         </div>\n      </ng-container>\n      <ng-container *ngIf=\"!isAutoClaimAllowed\">\n         {{\"vsan.cluster.hci.configureHciCluster.wizard.claimDisksPage.autoClaimToggle.signpost.notAllowed\" | localized}}\n      </ng-container>\n   </clr-signpost-content>\n</clr-signpost>","<!-- Copyright (c) 2021 VMware, Inc. All Rights Reserved. -->\n<div class=\"disks-container\">\n   <ng-container *ngTemplateOutlet=\"disks;context: {disksData: compatibleDisks, compatible: true}\"></ng-container>\n   <ng-container *ngTemplateOutlet=\"disks;context: {disksData: incompatibleDisks, compatible: false}\"></ng-container>\n</div>\n<!-- If both compatible and incompatible disks are detected, show a warning. -->\n<vsan-validation *ngIf=\"compatibleDisks?.size > 0 && incompatibleDisks?.size > 0\"\n      [alert]=\"'vsan.disk.auto.claim.vsanMax.alert.label' | localized\"\n      [alertType]=\"AlertType.WARNING\"\n      [allowClose]=\"false\">\n</vsan-validation>\n<ng-template #disks let-disksData=\"disksData\" let-compatible=\"compatible\">\n   <div *ngFor=\"let diskName of disksData.keys()\" class=\"card\">\n      <div class=\"card-header\">\n         <h4 vsan-show-title>{{diskName}}</h4>\n         <div class=\"horizontally-centered-content\">\n            <span class=\"label\" [ngClass]=\"compatible ? 'label-success' : 'label-danger'\">\n               {{compatible ?\n                     (\"vsan.disk.auto.claim.vsanMax.compatible.label\" | localized)\n                     : (\"vsan.disk.auto.claim.vsanMax.incompatible.label\" | localized)}}\n            </span>\n            <h4 [ngClass]=\"compatible ? 'compatible-capacity' : 'incompatible-capacity'\">\n               {{getTotalCapacityForDiskModel(disksData.get(diskName)) | fileSize}}\n            </h4>\n         </div>\n      </div>\n\n      <div *ngFor=\"let diskCapacity of disksData.get(diskName).keys()\" class=\"card-block\">\n         <div class=\"icon-name-container\">\n            <clr-icon size=\"24\" shape=\"hard-drive-disks\"></clr-icon>\n            <span>{{getClaimLabel(compatible, disksData.get(diskName).get(diskCapacity).disksCount)}}</span>\n         </div>\n         <div>\n            <h6>{{\"vsan.disk.auto.claim.vsanMax.disk.details.label\" | localized}}</h6>\n            <div class=\"disk-details\">\n               <div>\n                  <span class=\"p4\">{{\"vsan.disk.auto.claim.vsanMax.disk.capacity.label\" | localized}}</span>\n                  <span>{{diskCapacity | fileSize}}</span>\n               </div>\n               <div>\n                  <span class=\"p4\">{{\"vsan.disk.auto.claim.vsanMax.disk.type.label\" | localized}}</span>\n                  <span>{{disksData.get(diskName).get(diskCapacity).diskType | diskTypeLabel}}</span>\n               </div>\n            </div>\n         </div>\n      </div>\n   </div>\n</ng-template>\n","/* Copyright 2021-2022 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {ChangeDetectionStrategy, Component, EventEmitter, Input, OnInit, Output} from \"@angular/core\";\nimport {VsanClaimDisksData} from \"@generated/vsan-claim-disks-data\";\nimport {AutoClaimDisksData} from \"@component/diskmgmt/model/auto-claim-disks.data\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {VsanDiskListItem} from \"@component/diskmgmt/model/vsan-disk-list-item\";\nimport {DiskMgmtDiskUtil} from \"@util/disk-mgmt-disk.util\";\nimport {AlertType} from '@component/validation/alert-type';\nimport {AutoClaimSummaryData} from \"@component/diskmgmt/model/auto-claim-summary.data\";\nimport {ClaimOption} from \"@generated/claim-option\";\n\n@Component({\n   selector: \"vsan-auto-claim-disks\",\n   templateUrl: \"auto-claim-disks.html\",\n   styleUrls: [\"auto-claim-disks.scss\"],\n   changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AutoClaimDisksComponent implements OnInit {\n\n   AlertType: typeof AlertType = AlertType;\n\n   @Input()\n   hostsClaimingData: Map<string, VsanClaimDisksData>;\n\n   @Output()\n   claimedDisksChange: EventEmitter<AutoClaimSummaryData> = new EventEmitter<AutoClaimSummaryData>();\n\n   // Group the disks per model+vendor name, compatibility and size\n   compatibleDisks: Map<string, Map<number, AutoClaimDisksData>> = new Map();\n   incompatibleDisks: Map<string, Map<number, AutoClaimDisksData>> = new Map();\n\n   ngOnInit(): void {\n      // Map the incoming hostsClaimingData into collections of disks grouped by disk model and size\n      if (!this.hostsClaimingData?.size) {\n         // TODO dtsvetkova: Implement no disks view - I asked the UX for this, will update when available.\n         return;\n      }\n      this.populateViewData();\n   }\n\n   private populateViewData(): void {\n      let totalClaimedCapacity: number = 0;\n      let totalClaimedDisks: number = 0;\n      // We do not care for the hosts in the auto claim view, so only processing the values.\n      for (const claimData of this.hostsClaimingData.values()) {\n         if (VsanUiUtils.isEmpty(claimData.notInUseDisks)) {\n            return;\n         }\n         claimData.notInUseDisks\n               .filter(diskData => !!diskData.disk)\n               .map(diskData => new VsanDiskListItem(diskData, false, false))\n               .forEach(disk => {\n                  if (disk.isVsanMaxCompatible) {\n                     this.updateDisksData(disk, this.compatibleDisks);\n                     ++totalClaimedDisks;\n                     totalClaimedCapacity += disk.capacityNum;\n                     disk.claimOption = ClaimOption.SingleTier;\n                  } else {\n                     this.updateDisksData(disk, this.incompatibleDisks);\n                     disk.claimOption = ClaimOption.DoNotClaim;\n                  }\n               });\n      }\n\n      this.claimedDisksChange.emit(new AutoClaimSummaryData(totalClaimedDisks, totalClaimedCapacity));\n   }\n\n   private updateDisksData(disk: VsanDiskListItem, disksToUpdate: Map<string, Map<number, AutoClaimDisksData>>): void {\n      const diskModel: string = disk.vendor.concat(\" \", disk.diskModel);\n      if (!disksToUpdate.has(diskModel)) {\n         disksToUpdate.set(diskModel, new Map());\n      }\n      const sameModelDisks: Map<number, AutoClaimDisksData> = disksToUpdate.get(diskModel);\n      const diskCapacity: number = disk.capacityNum;\n      if (!sameModelDisks.has(diskCapacity)) {\n         sameModelDisks.set(diskCapacity,\n               new AutoClaimDisksData(diskModel, disk.capacityNum, DiskMgmtDiskUtil.getScsiDiskType(disk.isFlash)));\n      }\n      sameModelDisks.get(diskCapacity).incrementDisks();\n   }\n\n   getTotalCapacityForDiskModel(diskModelData: Map<number, AutoClaimDisksData>): number {\n      return Array.from(diskModelData.values()).reduce((acc, diskData) => {\n         return acc += diskData.totalCapacity;\n      }, 0);\n   }\n\n   getClaimLabel(compatible: boolean, disksCount: number): string {\n      if (compatible) {\n         return disksCount === 1\n               ? VsanUiUtils.getString(\"vsan.disk.auto.claim.vsanMax.compatible.claim.label.singular\")\n               : VsanUiUtils.getString(\"vsan.disk.auto.claim.vsanMax.compatible.claim.label.plural\", disksCount);\n      }\n      return disksCount === 1\n            ? VsanUiUtils.getString(\"vsan.disk.auto.claim.vsanMax.incompatible.claim.label.singular\")\n            : VsanUiUtils.getString(\"vsan.disk.auto.claim.vsanMax.incompatible.claim.label.plural\", disksCount);\n   }\n}","/* Copyright 2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Injectable} from \"@angular/core\";\nimport {ConnectionState} from \"@generated/connection-state\";\nimport {HostFaultDomainData} from \"@generated/host-fault-domain-data\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\n\n/**\n * Service to validate if the user is able to create/edit fault domain\n */\n@Injectable()\nexport class FaultDomainValidationService {\n\n   getFaultDomainValidationErrors(clusterHostFaultDomainData: HostFaultDomainData[]): string[] {\n      const errors: string[] = [];\n      clusterHostFaultDomainData\n            .filter(faultDomainData => faultDomainData.faultDomainName && !faultDomainData.canChangeFaultDomain)\n            .forEach(faultDomainData => {\n               if (faultDomainData.connectionState !== ConnectionState.connected) {\n                  errors.push(VsanUiUtils.getString(\"vsan.generalConfig.fdError.disconnected\", faultDomainData.name));\n               }\n            });\n      return errors;\n   }\n}\n","/* Copyright 2021-2022 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {VsanClusterType} from \"@generated/vsan-cluster-type\";\n\nexport class WitnessHostUtil {\n   /**\n    * Used to check if the claim disks page for a witness host must be shown to the user in various wizards.\n    */\n   static isClaimDisksPageVisible(configType: VsanClusterType,\n         hasClaimedDisks: boolean,\n      isWitnessDeployedFromOvf: boolean,\n      isVsanMaxWorkflow: boolean): boolean {\n      if (configType !== VsanClusterType.STRETCHED_CLUSTER && configType !== VsanClusterType.TWO_HOST_VSAN_CLUSTER) {\n         return false;\n      }\n\n      // Show the claim disks page if it doesn't already have claimed disks or if it is deployed from OVF\n      return isVsanMaxWorkflow && !hasClaimedDisks && !isWitnessDeployedFromOvf\n            || !isVsanMaxWorkflow && !hasClaimedDisks;\n   }\n}","/* Copyright 2021-2022 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, EventEmitter, Input, OnChanges, Output} from \"@angular/core\";\n\n@Component({\n   selector: \"vsan-claim-mode-toggle\",\n   templateUrl: \"claim-mode-toggle.html\",\n   styleUrls: [\"claim-mode-toggle.scss\"],\n})\nexport class ClaimModeToggleComponent {\n\n   private _isAutoClaim: boolean;\n\n   @Input()\n   get isAutoClaim(): boolean {\n      return this._isAutoClaim;\n   }\n\n   set isAutoClaim(value: boolean) {\n      this._isAutoClaim = value;\n      this.isAutoClaimChange.emit(this.isAutoClaim);\n   }\n\n   @Input()\n   isAutoClaimAllowed: boolean;\n\n   @Output()\n   isAutoClaimChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n}"]}