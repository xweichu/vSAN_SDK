{"version":3,"sources":["./src/app/vsan/common/service/flow/loading-indicator.decorator.ts","./src/app/vsan/common/service/flow/error-handler.decorator.ts","./src/app/vsan/common/service/flow/loader.decorator.ts","./src/app/vsan/precheck/report/psp/precheck-persistence-tab.html","./src/app/vsan/precheck/precheck-util.ts","./src/app/vsan/common/service/navigation/model/knowledge-base-id.ts","./src/app/vsan/precheck/enter-maintenance-mode-dialog.html","./src/app/vsan/precheck/report/precheck-report.service.ts","./src/app/vsan/precheck/report/capacity/precheck-capacity-breakdown.component.ts","./src/app/vsan/precheck/report/capacity/precheck-capacity-bar-chart.html","./src/app/generated/precheck-entity.ts","./src/app/vsan/precheck/precheck-report.module.ts","./src/app/vsan/precheck/report/precheck-report.html","./src/app/vsan/precheck/report/capacity/precheck-capacity-breakdown.html","./src/app/vsan/precheck/precheck.component.ts","./src/app/vsan/precheck/report/capacity/precheck-capacity-bar-chart.component.ts","./src/app/vsan/precheck/guard-rails/precheck-guard-rails.component.ts","./src/app/vsan/precheck/guard-rails/precheck-guard-rails.html","./src/app/vsan/precheck/report/precheck-report.component.ts","./src/app/vsan/common/util/vsan-dialog-util.ts","./src/app/vsan/precheck/report/virtual-objects/precheck-virtual-objects-tab.component.ts","./src/app/vsan/common/service/flow/loading-flow-wrapper.data.ts","./src/app/vsan/precheck/precheck.html","./src/app/vsan/precheck/enter-maintenance-mode-dialog.component.ts","./src/app/vsan/common/component/datagrid/filter/base-filter.ts","./src/app/generated/precheck-operation.ts","./src/app/vsan/precheck/report/capacity/precheck-capacity-tab.html","./src/app/vsan/precheck/report/virtual-objects/precheck-virtual-objects-tab.html","./src/app/vsan/precheck/report/capacity/precheck-capacity-tab.component.ts","./src/app/vsan/precheck/report/psp/precheck-persistence-tab.component.ts","./src/app/generated/precheck-task-data.ts","./src/app/vsan/common/component/datagrid/tree-datagrid.ts"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA,6EAA6E;AAIF;AAE3E;;;;;;;;;;;;;;;;;;;;;;GAsBG;AACI,SAAS,gBAAgB,CAAC,KAAkC;IAChE,KAAK,GAAG,KAAK,IAAI,EAAE,CAAC;IACpB,OAAO,CAAC,WAAgB,EAAE,WAAmB,EAAQ,EAAE;QACpD,MAAM,CAAC,cAAc,CAAC,WAAW,EAAE,WAAW,EAAE;YAC7C,GAAG,EAAE;gBACF,IAAI,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE;oBAC5B,OAAO,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,UAAkB,EAAE,EAAE,CAAC,CAAC,IAAI,0FAAkB,CAAC,IAAI,EAAE,UAAU,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC;iBACvG;gBAED,OAAO,CAAC,IAAI,0FAAkB,CAAC,IAAI,EAAE,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,SAAS,CAAC;YAC/D,CAAC;SACH,CAAC,CAAC;IACN,CAAC,CAAC;AACL,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC1CD;AAAA;AAAA;AAAA,6EAA6E;AAEF;AAE3E;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAmCG;AACI,SAAS,YAAY,CAAC,KAA8B;IACxD,KAAK,GAAG,KAAK,IAAI,EAAE,CAAC;IACpB,OAAO,CAAC,WAAgB,EAAE,YAAoB,EAAE,UAA8B,EAAQ,EAAE;QACrF,CAAC,IAAI,0FAAkB,CAAC,WAAW,EAAE,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,YAAY,GAAG,UAAU,CAAC,KAAK,CAAC;IACrF,CAAC,CAAC;AACL,CAAC;;;;;;;;;;;;;;AC7CD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kFAAkF;AACL;AACF;AACmC;AAClE;AACa;AAEzD;;;;;;;;;GASG;AACI,SAAS,MAAM,CAAC,MAAqB;IACzC,0FAA0F;IAC1F,MAAM,GAAG,MAAM,IAAI,EAAE,CAAC;IACtB,OAAO,CAAC,WAAgB,EAAE,YAAoB,EAAE,UAA8B,EAAQ,EAAE;QACrF,iFAAiF;QACjF,MAAM,GAAG,GAAW,2DAAU,CAAC,YAAY,CAAC,WAAW,CAAC,CAAC;QACzD,MAAM,UAAU,GAAW,MAAM,CAAC,IAAI,CAAC;QACvC,MAAM,UAAU,GAAQ,UAAU,CAAC,KAAK,CAAC;QAEzC,UAAU,CAAC,KAAK,GAAG;YAChB,MAAM,kBAAkB,GAAuB,IAAI,0FAAkB,CAAC,IAAI,EAAE,UAAU,CAAC,CAAC;YACxF,OAAO,CAAC,IAAI,8EAAe,CAAC,UAAU,CAAC,CAAC;iBACjC,UAAU,CAAC,GAAG,EAAE;gBACd,kBAAkB,CAAC,KAAK,GAAG,SAAS,CAAC;gBACrC,kBAAkB,CAAC,cAAc,EAAE,CAAC;gBACpC,qGAA4B,CAAC,MAAM,CAC7B,MAAM,CAAC,gBAAgB,IAAI,MAAM,CAAC,SAAS,EAC3C,MAAM,CAAC,aAAa,EAAE,gFAAO,CAAC,OAAO,CAAC,CAAC;YAChD,CAAC,CAAC;iBACD,WAAW,CAAC,GAAG,EAAE;gBACf,qGAA4B,CAAC,MAAM,CAAC,MAAM,CAAC,SAAS,EAAE,MAAM,CAAC,aAAa,EAAE,gFAAO,CAAC,MAAM,CAAC,CAAC;YAC/F,CAAC,CAAC;iBACD,OAAO,CAAC,CAAC,EAAO,EAAE,EAAE;gBAClB,YAAY,CAAC,kBAAkB,EAAE,GAAG,EAAE,EAAE,CAAC,CAAC;gBAC1C,MAAM,OAAO,GAAY,aAAa,CAAC,kBAAkB,EAAE,MAAM,CAAC,CAAC;gBACnE,IAAI,CAAC,OAAO,EAAE;oBACX,EAAE,GAAG,kBAAkB,CAAC,kBAAkB,EAAE,EAAE,CAAC,CAAC;iBAClD;gBACD,OAAO,IAAI,2EAAY,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;YACxC,CAAC,CAAC;iBACD,OAAO,CAAC,GAAG,EAAE;gBACX,kBAAkB,CAAC,cAAc,EAAE,CAAC;YACvC,CAAC,CAAC;iBACD,MAAM,CAAC,kBAAkB,CAAC,aAAa,EAAE,SAAS,CAAC,CAAC;QAC9D,CAAC,CAAC;IACL,CAAC,CAAC;AACL,CAAC;AAsCD;;;;;GAKG;AACH,SAAS,YAAY,CAAC,OAA2B,EAAE,GAAW,EAAE,EAAO;IACpE,+BAA+B;IAC/B,6DAAY,CAAC,KAAK,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;IAE5B,2EAA2E;IAC3E,OAAO,CAAC,KAAK,GAAG,EAAE,CAAC;AACtB,CAAC;AAED;;GAEG;AACH,SAAS,kBAAkB,CAAC,OAA2B,EAAE,EAAO;IAC7D,MAAM,OAAO,GAAQ,OAAO,CAAC,YAAY,CAAC;IAC1C,OAAO,CAAC,CAAC,OAAO;QACV,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,aAAa,EAAE,EAAE,CAAC;QACzC,CAAC,CAAC,IAAI,CAAC;AAChB,CAAC;AAED;;;;GAIG;AACH,SAAS,aAAa,CAAC,OAA2B,EAAE,MAAoB;IACrE,OAAO,CAAC,OAAO,CAAC,YAAY,IAAI,CAAC,OAAO,CAAC,kBAAkB;WAClD,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC;AAC7B,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;qHCjGE,+qFAC6C,oFAC1C,g3DAA6B,6EAA2B,MAAc,gFACtE,g3DAA6B,6EAAgC,MAAc,gFAC3E,g3DAA6B,6EAA8B,MAAc,gFACzE,4hCAAa,oFACV,wlBAE4E,uFAC5E,MAAiB,6EACpB,MAAc,6EACjB,mIAVY,kBAAgC,oBAD5C,YAC6C,EAAjC,SAAgC,GACzC,6BAA6B,GAC7B,6BAA6B,GAC7B,6BAA6B,GAC7B,aAAa,GACM,gDAA4D,2BAC5D,sDAAsE,2BACtE,+CAA2D,2BAF3E,aAE4E,EAF5D,UAA4D,EAC5D,UAAsE,EACtE,UAA2D,2BARjF,qOAC6C,GAC1C,4QAA6B,sEAA2B,GACxD,sRAA6B,6EAAgC,GAC7D,sRAA6B,2EAA8B,GAC3D,+JAAa;;8MA/BnB,yoNAAgD,iFAC7C,MAAwB,6EACxB,g7FAAqC,uJAErC,IAAgB,6EAChB,g7FAA0C,uJAE1C,IAAgB,6EAChB,g7FAAwC,uJAExC,IAAgB,6EAChB,g7FAAsC,0JAEnC,qnCAAe,qFACZ;YAAA;YAAA,YAMyE;YAAnE;;gCAAkE;;YANxE;QAAA,2qBAMyE,yFACzE,MAAmB,6EACtB,MAAgB,0EACnB,MAAgB,+EAEhB,MAAyB,6EACzB,siBAC6C,IAUhC,+EAEb,MAAwB,6EACxB,wuBAAe,mFACZ,62BAGkE,iKAGlE,IAAoB,0EACvB,MAAgB,0EACnB,mDA/CkB,sBAAqB,EAApC,aAAqC,EAAtB,SAAqB,GAGrB,2BAA0B,EAAzC,aAA0C,EAA3B,SAA0B,GAG1B,0BAAwB,EAAvC,aAAwC,EAAzB,UAAwB,GAGxB,wBAAsB,EAArC,aAAsC,EAAvB,UAAsB,GAKzB,oBAA+B,sBAC/B,wBAAiB,EAEjB,oBAAyC,mBADzC,oBAAiD,2BAJvD,aAMyE,EAJnE,UAA+B,EAC/B,UAAiB,EAEjB,UAAyC,EADzC,UAAiD,GAQjD,oBAA2D,sBAAvE,aAC6C,EADjC,UAA2D,GAgBjD,oBAAwC,yBAExC,oBAA8C,6BAHjE,aAGkE,EAF/C,UAAwC,EAExC,UAA8C,mDA5CvE,yJAAgD,GAE7C,8IAAqC,uQAErC,GACA,8IAA0C,4QAE1C,GACA,kJAAwC,4QAExC,GACA,kJAAsC,mRAEnC,GA2BH,gDAAe,GAGO,qBAAsC,6BAFzD,oCAGkE,EAD/C,UAAsC,EAFzD,UAGkE,ycAGlE;AAAA;;;;;;;;;;;;;;;;;AC/CN;AAAA;AAAA;AAAA;AAAA;AAAA,kFAAkF;AAC5B;AACV;AAEuB;AAE5D;UAAM,YAAY;;IACtB;;OAEG;IACI,wCAA2B,GAAG,CAAC,IAAY,EAAE,QAA0B,EAAkB,EAAE;QAC/F,IAAI,CAAC,IAAI,IAAI,2DAAW,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE;YACzC,OAAO,IAAI,CAAC;SACd;QAED,KAAK,IAAI,KAAK,GAAW,CAAC,EAAE,KAAK,GAAG,QAAQ,CAAC,MAAM,EAAE,KAAK,EAAE,EAAE;YAC3D,IAAI,QAAQ,CAAC,KAAK,CAAC,CAAC,IAAI,KAAK,IAAI,EAAE;gBAChC,OAAO,QAAQ,CAAC,KAAK,CAAC,CAAC;aACzB;iBAAM;gBACJ,MAAM,cAAc,GAAmB,YAAY,CAAC,2BAA2B,CACzE,IAAI,EAAE,QAAQ,CAAC,KAAK,CAAC,CAAC,QAAQ,CAAC,CAAC;gBACtC,IAAI,cAAc,EAAE;oBACjB,OAAO,cAAc,CAAC;iBACxB;aACH;SACH;QAED,OAAO,IAAI,CAAC;IACf,CAAC,CAAC;IAEF;;OAEG;IACI,8BAAiB,GAAG,CAAC,OAAsB,EAAE,QAA0B,EAAkB,EAAE;QAC/F,IAAI,CAAC,OAAO,IAAI,2DAAW,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE;YAC5C,OAAO,IAAI,CAAC;SACd;QACD,OAAO,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,MAAM,CAAC,IAAI,KAAK,kFAAkB,CAAC,IAAI;YAChE,qEAAa,CAAC,QAAQ,CAAC,OAAO,EAAE,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC;IAC1D,CAAC,CAAC;IAEF;;OAEG;IACI,sCAAyB,GAAG,CAAC,IAAY,EAAE,QAA0B,EAAkB,EAAE;QAC7F,IAAI,CAAC,IAAI,IAAI,2DAAW,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE;YACzC,OAAO,IAAI,CAAC;SACd;QAED,KAAK,IAAI,WAAW,GAAW,CAAC,EAAE,WAAW,GAAG,QAAQ,CAAC,MAAM,EAAE,WAAW,EAAE,EAAE;YAC7E,MAAM,QAAQ,GAAqB,QAAQ,CAAC,WAAW,CAAC,CAAC,QAAQ,CAAC;YAClE,IAAI,CAAC,QAAQ,IAAI,QAAQ,CAAC,MAAM,KAAK,CAAC,EAAE;gBACrC,SAAS;aACX;YAED,IAAI,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,IAAI,KAAK,OAAO,CAAC,IAAI,CAAC,EAAE;gBAClD,OAAO,QAAQ,CAAC,WAAW,CAAC,CAAC;aAC/B;YAED,MAAM,kBAAkB,GAAmB,YAAY,CAAC,yBAAyB,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;YAClG,IAAI,kBAAkB,EAAE;gBACrB,OAAO,kBAAkB,CAAC;aAC5B;SACH;QAED,OAAO,IAAI,CAAC;IACf,CAAC,CAAC;;;;;;;;;;;;;;;;AClEL;AAAA;AAAA,6EAA6E;AAC7E;;GAEG;AACH,IAAY,eAMX,iBAND,WAAY,eAAe;IACxB,yCAAsB;IACtB,8CAA2B;IAC3B,sCAAmB;IACnB,sDAAmC;IACnC,4CAAyB;WALhB,eAAe;CAM1B,KAN0B,CAM1B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;yHCDE,yrBAIqH,GAApG,uDAAmG,IAAC,6EACrH,2BAFiB,yBAAuB,EACvB,0OAAmG,IAFnG,qBAAoB,EAFrC,YAIqH,EADpG,SAAuB,EACvB,SAAmG,EAFnG,SAAoB;;mEAW/B,whCAA2C,0FACxC;YAAA;YAAA;YAAA;;;;;;;;;;gCAIwC;;YAAjC;;gCAA+B;;YAJtC;QAAA,wuDAIwC,0FACxC,kjBAAO,6IAA2F,IAAQ,mFAC7G,mDAPA,YAA2C,GAGjC,uCAA2B,EAE3B,oBAA+B,oBAJtC,YAIwC,EAFjC,UAA2B,EAE3B,UAA+B,GAD/B,uCAAyB,EAHhC,aAIwC,EADjC,UAAyB,GAEhC,aAAO,2BANV,uMAA2C,GACxC,+yBAIwC,GACxC,8GAAO,2QAA2F;AAAA;;mEAcxG,+JAA+F,wFAC5F,8hCAAsB,0FACnB;YAAA;YAAA;YAAA;;;;;;;;;;gCAKuC;;YAAhC;;gCAA8B;;YALrC;QAAA,wwDAKuC,0FACvC,kjBAAO,6IAAoG,IAAQ,mFACtH,MAAuB,gFAC1B,mDATG,YAAsB,GAGZ,oCAAwB,EAExB,qBAAoC,yBACpC,oBAA8B,mBALrC,aAKuC,EAHhC,UAAwB,EAExB,UAAoC,EACpC,UAA8B,GAF9B,oCAAsB,EAH7B,aAKuC,EAFhC,UAAsB,GAG7B,aAAO,2BAPV,uMAAsB,GACnB,+yBAKuC,GACvC,8GAAO,sRAAoG;AAAA;yHAGjH,y/BAGqD,oFAClD,kiBAAgB,uFACb,uKAA8C,8FAC3C,8HAAM,iFAA+B,MAAO,yFAC5C,soBAAwD,IAAI,sFAC/D,MAAM,gFACT,MAAiB,6EACpB,mDARW,qBAA0B,EAC1B,mBAAyC,2BAHpD,YAGqD,EAD1C,SAA0B,EAC1B,SAAyC,GAIxB,mBAAoC,yBAAvD,aAAwD,EAArC,SAAoC,mDADjD,yEAA+B;;8MA3D+B,0EACnF;YAAA;YAAA,YAOuC;YAJ1B;;gCAAiC;;YAIjC;;gCAAyB;;YAPtC;QAAA,4xBAOuC,KAN1B,uDAAqF,GAIrF,uDAA4C,GAD5C,uDAA+C,IAGrB,0EACpC,gaAIqH,IACnG,0EAClB;YAAA;YAAA;;;;;;;;;owBAAwB,oFACrB,MAAmB,gFACnB,uKAA0C,iKAE1C,IAAO,gFACP,MAAqC,gFACrC,qKAAwC,wFACrC,oaAA2C,IAOpB,gFAC1B,MAAM,gFACN,MAAiC,gFACjC,0KAA4C,wFACzC,2JAA8B,2FAC3B,uqBAA4F,4KAE5F,IAAQ,sFACR,uNAAoF,gHAEpF,MAAO,mFACV,MAAM,gFACT,MAAM,gFACN,oaAA+F,IAUzF,gFACN,oaAGqD,IAOzC,gFACZ,MAA2B,gFAC3B,4KAA+C,iKAE/C,IAAO,6EACV,MAAO,uEACV,MAAc,0EACd,mDApEa,qNAAqF,IACrF,mBAA2B,iBAG3B,sKAA4C,IAD5C,0KAA+C,IAD/C,mBAAiC,gBAGjC,mBAAwB,UANrC,YAOuC,EAN1B,SAAqF,EACrF,SAA2B,EAG3B,SAA4C,EAD5C,SAA+C,EAD/C,SAAiC,EAGjC,SAAwB,GAGjB,mBAAuB,kBADxC,YAIqH,EAHpG,SAAuB,GAYZ,oBAAoB,eAA1C,aAA2C,EAArB,UAAoB,GAYhC,6DAAgD,EAAvD,aAA4F,EAArF,UAAgD,GAQrB,iDAAsD,0BAA9F,aAA+F,EAAvD,UAAsD,GAYnF,oBAA4B,uBADvC,aAGqD,EAF1C,UAA4B,mDAvC1C,8tBAAwB,GAEqB,oPAE1C,GAeM,8GAA4F,+NAE5F,GACoF,yEAEpF,GA0ByC,gQAE/C;AAAA;;;;;;;;;;;;;;;;;ACjEN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA4C;AACZ;AACqC;AAGN;AACA;AAE+B;AACd;AAGb;AAK5D;UAAM,qBAAqB;QADlC;YA4GG,sBAAiB,GAAG,CAAC,wBAAgC,EAC/C,wBAAgC,EAChC,wBAAgC,EAAU,EAAE;gBAC/C,MAAM,sBAAsB,GAAY,wBAAwB,GAAG,CAAC,CAAC;gBACrE,MAAM,sBAAsB,GAAY,wBAAwB,GAAG,CAAC,CAAC;gBAErE,IAAI,CAAC,sBAAsB,IAAI,CAAC,sBAAsB,EAAE;oBACrD,OAAO,2DAAW,CAAC,SAAS,CAAC,mEAAmE,CAAC,CAAC;iBACpG;gBAED,MAAM,QAAQ,GAAa,EAAE,CAAC;gBAC9B,IAAI,sBAAsB,EAAE;oBACzB,QAAQ,CAAC,IAAI,CAAC,2DAAW,CAAC,SAAS,CAC7B,yDAAyD,EAAE,wBAAwB,CAAC,CAAC,CAAC;iBAC9F;gBAED,IAAI,sBAAsB,EAAE;oBACzB,IAAI,wBAAwB,GAAG,CAAC,EAAE;wBAC/B,QAAQ,CAAC,IAAI,CAAC,2DAAW,CAAC,SAAS,CAC7B,0EAA0E,EAC1E,wBAAwB,EAAE,wBAAwB,CAAC,CAAC,CAAC;qBAC7D;yBAAM;wBACJ,QAAQ,CAAC,IAAI,CAAC,2DAAW,CAAC,SAAS,CAC7B,yDAAyD,EAAE,wBAAwB,CAAC,CAAC,CAAC;qBAC9F;iBACH;gBAED,OAAO,QAAQ,CAAC,IAAI,CAAC,qBAAqB,CAAC,WAAW,CAAC,CAAC;YAC3D,CAAC,CAAC;QAgOL,CAAC;QAjWE,6BAA6B,CAAC,qBAA2C,EAAE,SAAkB,EACvF,kBAAsC;YACzC,IAAI,kBAAkB,KAAK,kFAAkB,CAAC,IAAI,EAAE;gBACjD,OAAO,2DAAW,CAAC,SAAS,CACtB,kFAAkF,CAAC,CAAC;aAC5F;YAED,OAAO,IAAI,CAAC,gBAAgB,CAAC,qBAAqB,EAAE,SAAS,EAAE,IAAI,EAAE,kBAAkB,CAAC,CAAC;QAC5F,CAAC;QAED,gBAAgB,CAAC,QAA8B,EAAE,SAAkB,EAAE,qBAA8B,EAC7F,kBAAuC;YAC1C,IAAI,CAAC,QAAQ,CAAC,YAAY,IAAI,CAAC,QAAQ,CAAC,aAAa,EAAE;gBACpD,OAAO,2DAAW,CAAC,SAAS,CAAC,uEAAuE,CAAC,CAAC;aACxG;YAED,IAAI,UAAkB,CAAC;YACvB,IAAI,SAAS,EAAE;gBACZ,IAAI,qBAAqB,EAAE;oBACxB,MAAM,qBAAqB,GAAY,kBAAkB,KAAK,kFAAkB,CAAC,UAAU;2BAClF,kBAAkB,KAAK,kFAAkB,CAAC,IAAI,CAAC;oBACxD,UAAU,GAAG,qBAAqB;wBAC5B,CAAC,CAAC,6FAA6F;wBAC/F,CAAC,CAAC,8EAA8E,CAAC;iBACzF;qBAAM;oBACJ,UAAU,GAAG,sFAAsF,CAAC;iBACtG;aACH;iBAAM;gBACJ,UAAU,GAAG,gFAAgF,CAAC;aAChG;YAED,OAAO,2DAAW,CAAC,SAAS,CAAC,UAAU,EACjC,2DAAW,CAAC,cAAc,CAAC,QAAQ,CAAC,YAAY,CAAC,EACjD,2DAAW,CAAC,cAAc,CAAC,QAAQ,CAAC,aAAa,CAAC,EAClD,2DAAW,CAAC,aAAa,CAAC,IAAI,CAAC,gBAAgB,CAAC,QAAQ,CAAC,YAAY,EAAE,QAAQ,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC;QAC1G,CAAC;QAED,qBAAqB,CAAC,sBAA4C,EAC5D,qBAA2C;YAC9C,OAAO,2DAAW,CAAC,cAAc,CAAC,sBAAsB,CAAC,YAAY,CAAC;gBAChE,2DAAW,CAAC,cAAc,CAAC,qBAAqB,CAAC,YAAY,CAAC;mBAC3D,2DAAW,CAAC,cAAc,CAAC,sBAAsB,CAAC,aAAa,CAAC;oBACnE,2DAAW,CAAC,cAAc,CAAC,qBAAqB,CAAC,aAAa,CAAC,CAAC;QACzE,CAAC;QAED,gBAAgB,CAAC,mBAA2B,EAAE,kBAA0B;YACrE,OAAO,CAAC,kBAAkB,GAAG,mBAAmB,CAAC,GAAG,qBAAqB,CAAC,qBAAqB,CAAC;QACnG,CAAC;QAED,gBAAgB,CAAC,YAAoB,EAAE,aAAqB;YACzD,OAAO,CAAC,YAAY,GAAG,aAAa,CAAC,GAAG,qBAAqB,CAAC,qBAAqB,CAAC;QACvF,CAAC;QAED,qCAAqC;QACrC,iBAAiB,CAAC,MAAgC,EAAE,cAAkC,EAAE,UAAkB,EACpG,wBAAiC,EAAE,gBAA0B;YAChE,IAAI,OAAe,CAAC;YACpB,MAAM,QAAQ,GAAY,+FAAwB,CAAC,GAAG,KAAK,MAAM,CAAC;YAClE,QAAQ,cAAc,EAAE;gBACrB,KAAK,kFAAkB,CAAC,IAAI;oBACzB,IAAI,QAAQ,EAAE;wBACX,OAAO,2DAAW,CAAC,SAAS,CAAC,kDAAkD,CAAC,CAAC;qBACnF;oBAED,OAAO,GAAG,2DAAW,CAAC,SAAS,CAAC,qDAAqD,CAAC,CAAC;oBACvF,MAAM;gBACT,KAAK,kFAAkB,CAAC,UAAU;oBAC/B,IAAI,QAAQ,EAAE;wBACX,OAAO,2DAAW,CAAC,SAAS,CAAC,uDAAuD,CAAC,CAAC;qBACxF;oBAED,OAAO,GAAG,2DAAW,CAAC,SAAS,CAAC,0DAA0D,CAAC,CAAC;oBAC5F,MAAM;gBACT,KAAK,kFAAkB,CAAC,IAAI;oBACzB,IAAI,QAAQ,EAAE;wBACX,OAAO,gBAAgB;4BACjB,CAAC,CAAC,2DAAW,CAAC,SAAS,CAAC,0DAA0D,CAAC;4BACnF,CAAC,CAAC,2DAAW,CAAC,SAAS,CAAC,kDAAkD,CAAC,CAAC;qBACpF;oBAED,OAAO,GAAG,gBAAgB;wBACpB,CAAC,CAAC,2DAAW,CAAC,SAAS,CAAC,6DAA6D,CAAC;wBACtF,CAAC,CAAC,2DAAW,CAAC,SAAS,CAAC,qDAAqD,CAAC,CAAC;oBACrF,MAAM;aACX;YAED,IAAI,UAAU,EAAE;gBACb,OAAO,GAAG,OAAO,CAAC,MAAM,CAAC,qBAAqB,CAAC,WAAW,EACpD,2DAAW,CAAC,SAAS,CAAC,gDAAgD,EAChE,2DAAW,CAAC,cAAc,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;aACvD;YAED,IAAI,wBAAwB,EAAE;gBAC3B,OAAO,GAAG,OAAO,CAAC,MAAM,CAAC,qBAAqB,CAAC,WAAW,EACpD,2DAAW,CAAC,SAAS,CAAC,8DAA8D,EAC9E,2DAAW,CAAC,cAAc,CAAC,wBAAwB,CAAC,CAAC,CAAC,CAAC;aACrE;YAED,OAAO,OAAO,CAAC,IAAI,EAAE,CAAC;QACzB,CAAC;QAgCD,uBAAuB,CAAC,MAAsB;YAC3C,QAAQ,MAAM,CAAC,MAAM,EAAE;gBACpB,KAAK,+FAAwB,CAAC,KAAK;oBAChC,OAAO,+CAAI,CAAC,+BAA+B,CAAC;gBAC/C,KAAK,+FAAwB,CAAC,MAAM;oBACjC,OAAO,+CAAI,CAAC,4BAA4B,CAAC;gBAC5C,KAAK,+FAAwB,CAAC,GAAG;oBAC9B,OAAO,+CAAI,CAAC,6BAA6B,CAAC;aAC/C;QACJ,CAAC;QAED,wBAAwB,CAAC,MAAsB;YAC5C,IAAI,MAAM,CAAC,mBAAmB,IAAI,MAAM,CAAC,mBAAmB,CAAC,MAAM,EAAE;gBAClE,OAAO,+CAAI,CAAC,6BAA6B,CAAC;aAC5C;YAED,IAAI,MAAM,CAAC,mBAAmB,IAAI,MAAM,CAAC,mBAAmB,CAAC,MAAM,EAAE;gBAClE,OAAO,+CAAI,CAAC,4BAA4B,CAAC;aAC3C;YAED,OAAO,EAAE,CAAC;QACb,CAAC;QAED,kBAAkB,CAAC,eAA4C;YAC5D,MAAM,iBAAiB,GAAY,eAAe,CAAC,YAAY,CAAC,IAAI,CAC9D,WAAW,CAAC,EAAE,CAAC,WAAW,CAAC,sBAAsB,IAAI,WAAW,CAAC,oBAAoB;mBAC5E,WAAW,CAAC,uBAAuB,CAAC,CAAC;YACpD,MAAM,oBAAoB,GAAY,eAAe,CAAC,eAAe,CAAC,IAAI,CACpE,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,cAAc,IAAI,IAAI,CAAC,uBAAuB,CAAC,CAAC;YAErE,IAAI,eAAe,CAAC,kBAAkB,IAAI,iBAAiB,IAAI,oBAAoB,EAAE;gBAClF,OAAO,+CAAI,CAAC,6BAA6B,CAAC;aAC5C;YAED,MAAM,iBAAiB,GAAW,IAAI,CAAC,gBAAgB,CAAC,eAAe,CAAC,oBAAoB,CAAC,YAAY,EACnG,eAAe,CAAC,oBAAoB,CAAC,aAAa,CAAC,CAAC;YAC1D,MAAM,eAAe,GAAW,IAAI,CAAC,gBAAgB,CAAC,eAAe,CAAC,qBAAqB,CAAC,YAAY,EAClG,eAAe,CAAC,qBAAqB,CAAC,aAAa,CAAC,CAAC;YAE3D,IAAI,iBAAiB,IAAI,eAAe,CAAC,gBAAgB;mBAChD,eAAe,IAAI,eAAe,CAAC,gBAAgB,EAAE;gBAC3D,OAAO,+CAAI,CAAC,4BAA4B,CAAC;aAC3C;YAED,OAAO,EAAE,CAAC;QACb,CAAC;QAED,gBAAgB,CAAC,UAA0B;YACxC,QAAQ,UAAU,CAAC,MAAM,EAAE;gBACxB,KAAK,8EAAgB,CAAC,KAAK,CAAC;gBAC5B,KAAK,8EAAgB,CAAC,IAAI;oBACvB,OAAO,EAAE,CAAC;gBACb,KAAK,8EAAgB,CAAC,GAAG;oBACtB,OAAO,+CAAI,CAAC,6BAA6B,CAAC;gBAC7C;oBACG,OAAO,+CAAI,CAAC,4BAA4B,CAAC;aAC9C;QACJ,CAAC;QAED,qBAAqB,CAAC,eAAiD;YACpE,IAAI,2DAAW,CAAC,OAAO,CAAC,eAAe,CAAC,EAAE;gBACvC,OAAQ,EAAE,CAAC;aACb;iBAAM,IAAI,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,KAAK,KAAK,6GAA+B,CAAC,YAAY,CAAC,EAAE;gBAC7F,OAAO,+CAAI,CAAC,6BAA6B,CAAC;aAC5C;iBAAM,IAAI,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,KAAK,KAAK,6GAA+B,CAAC,oBAAoB,CAAC;mBAC7F,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,KAAK,KAAK,6GAA+B,CAAC,OAAO,CAAC,EAAE;gBACtF,OAAO,+CAAI,CAAC,4BAA4B,CAAC;aAC3C;YAED,OAAO,EAAE,CAAC;QACb,CAAC;QAED,wBAAwB,CAAC,KAAsC;YAC5D,QAAQ,KAAK,EAAE;gBACZ,KAAK,6GAA+B,CAAC,YAAY;oBAC9C,OAAO,2DAAW,CAAC,SAAS,CACtB,iGAAiG,CAAC,CAAC;gBAC5G,KAAK,6GAA+B,CAAC,oBAAoB;oBACtD,OAAO,2DAAW,CAAC,SAAS,CACtB,wGAAwG,CAAC,CAAC;gBACnH,KAAK,6GAA+B,CAAC,OAAO;oBACzC,OAAO,2DAAW,CAAC,SAAS,CACtB,4FAA4F,CAAC,CAAC;gBACvG,OAAO,CAAC,CAAC,OAAO,EAAE,CAAC;aACrB;QACJ,CAAC;QAED,uBAAuB,CAAC,KAAsC;YAC3D,QAAQ,KAAK,EAAE;gBACZ,KAAK,6GAA+B,CAAC,YAAY;oBAC9C,OAAO,+CAAI,CAAC,6BAA6B,CAAC;gBAC7C,KAAK,6GAA+B,CAAC,oBAAoB,CAAC;gBAC1D,KAAK,6GAA+B,CAAC,OAAO;oBACzC,OAAO,+CAAI,CAAC,4BAA4B,CAAC;gBAC5C,OAAO,CAAC,CAAC,OAAO,EAAE,CAAC;aACrB;QACJ,CAAC;QAED,uBAAuB,CAAC,KAAsC;YAC3D,MAAM,SAAS,GAAW,IAAI,CAAC,uBAAuB,CAAC,KAAK,CAAC,CAAC;YAC9D,OAAO,IAAI,CAAC,cAAc,CAAC,SAAS,CAAC,CAAC;QACzC,CAAC;QAED,cAAc,CAAC,KAAa;YACzB,OAAO,YAAY,+CAAI,CAAC,oBAAoB,CAAC,KAAK,CAAC,EAAE,CAAC;QACzD,CAAC;QAED,qBAAqB,CAAC,WAA6B,EAAE,+BAAwC,EACvF,gBAAyB;YAC5B,IAAI,CAAC,WAAW,EAAE;gBACf,OAAO,EAAE,CAAC;aACZ;YACD,OAAO,+BAA+B,CAAC,CAAC,CAAC,IAAI,CAAC,kCAAkC,CAAC,WAAW,EAAE,gBAAgB,CAAC;gBACzG,CAAC,CAAC,IAAI,CAAC,4BAA4B,CAAC,WAAW,CAAC,CAAC;QAC1D,CAAC;QAEO,4BAA4B,CAAC,WAA6B;YAC/D,QAAQ,WAAW,CAAC,QAAQ,EAAE;gBAC3B,KAAK,8EAAgB,CAAC,aAAa;oBAChC,OAAO,WAAW,CAAC,QAAQ;wBACrB,CAAC,CAAC,2DAAW,CAAC,SAAS,CAAC,sDAAsD,EAAE,WAAW,CAAC,QAAQ,EAC9F,oFAAqB,CAAC,4BAA4B,CAAC,WAAW,CAAC,gBAAgB,CAAC,CAAC;wBACvF,CAAC,CAAC,2DAAW,CAAC,SAAS,CAAC,kEAAkE,EACpF,oFAAqB,CAAC,4BAA4B,CAAC,WAAW,CAAC,gBAAgB,CAAC,CAAC,CAAC;gBACjG,KAAK,8EAAgB,CAAC,2BAA2B;oBAC9C,OAAO,WAAW,CAAC,QAAQ;wBACrB,CAAC,CAAC,2DAAW,CAAC,SAAS,CAAC,6DAA6D,EAC/E,WAAW,CAAC,QAAQ,CAAC;wBAC3B,CAAC,CAAE,2DAAW,CAAC,SAAS,CAAC,yEAAyE,CAAC,CAAC;aAC/G;QACJ,CAAC;QAEO,kCAAkC,CAAC,WAA6B,EAAE,gBAAyB;YAChG,MAAM,gBAAgB,GAAW,oFAAqB,CAAC,4BAA4B,CAAC,WAAW,CAAC,gBAAgB,CAAC,CAAC;YAClH,MAAM,aAAa,GAAW,gBAAgB;gBACxC,CAAC,CAAC,2DAAW,CAAC,SAAS,CAAC,mEAAmE,CAAC;gBAC5F,CAAC,CAAC,2DAAW,CAAC,SAAS,CAAC,2DAA2D,CAAC,CAAC;YAE3F,QAAQ,WAAW,CAAC,QAAQ,EAAE;gBAC3B,KAAK,8EAAgB,CAAC,aAAa;oBAChC,OAAO,WAAW,CAAC,QAAQ;wBACrB,CAAC,CAAC,2DAAW,CAAC,SAAS,CAAC,2DAA2D,EAC7E,WAAW,CAAC,QAAQ,EAAE,gBAAgB,EAAE,aAAa,CAAC;wBAC5D,CAAC,CAAC,2DAAW,CAAC,SAAS,CAAC,uEAAuE,EACzF,gBAAgB,EAAE,aAAa,CAAC,CAAC;gBAChD,KAAK,8EAAgB,CAAC,2BAA2B;oBAC9C,OAAO,WAAW,CAAC,QAAQ;wBACrB,CAAC,CAAC,2DAAW,CAAC,SAAS,CAAC,kEAAkE,EACpF,WAAW,CAAC,QAAQ,EAAE,aAAa,CAAC,CAAC,CAAC;wBAC5C,2DAAW,CAAC,SAAS,CAAC,8EAA8E,EAC9F,aAAa,CAAC,CAAC;gBAC9B,KAAK,8EAAgB,CAAC,iBAAiB;oBACpC,OAAO,2DAAW,CAAC,SAAS,CAAC,yDAAyD,EAChF,gBAAgB,EAAE,aAAa,CAAC,CAAC;gBAC1C,KAAK,8EAAgB,CAAC,kBAAkB;oBACrC,OAAO,2DAAW,CAAC,SAAS,CAAC,2DAA2D,EAClF,gBAAgB,EAAE,aAAa,CAAC,CAAC;gBAC1C,KAAK,8EAAgB,CAAC,iBAAiB;oBACpC,OAAO,2DAAW,CAAC,SAAS,CAAC,0DAA0D,EACjF,gBAAgB,EAAE,aAAa,CAAC,CAAC;gBAC1C,KAAK,8EAAgB,CAAC,YAAY;oBAC/B,OAAO,2DAAW,CAAC,SAAS,CAAC,yDAAyD,EAChF,gBAAgB,EAAE,aAAa,CAAC,CAAC;gBAC1C,KAAK,8EAAgB,CAAC,YAAY;oBAC/B,OAAO,2DAAW,CAAC,SAAS,CAAC,yDAAyD,EAChF,gBAAgB,EAAE,aAAa,CAAC,CAAC;gBAC1C,KAAK,8EAAgB,CAAC,kBAAkB,CAAC;gBACzC,KAAK,8EAAgB,CAAC,aAAa;oBAChC,OAAO,2DAAW,CAAC,SAAS,CAAC,kEAAkE,EACzF,WAAW,CAAC,IAAI,EAAE,WAAW,CAAC,QAAQ,EAAE,gBAAgB,EAAE,aAAa,CAAC,CAAC;gBAClF;oBACG,wGAAwG;oBACxG,6EAA6E;oBAC7E,OAAO,2DAAW,CAAC,SAAS,CAAC,2EAA2E,EAClG,aAAa,CAAC,CAAC;aAC1B;QACJ,CAAC;QAED,uBAAuB,CAAC,WAA6B,EAAE,kBAA0B,EAC3E,wBAA0C;YAC7C,OAAO,kBAAkB,KAAK,WAAW,CAAC,IAAI,IAAI,wBAAwB,KAAK,WAAW,CAAC,gBAAgB,CAAC;QAC/G,CAAC;QAED,oBAAoB,CAAC,QAA0B,EAAE,UAAkB;YAChE,QAAQ,QAAQ,EAAE;gBACf,KAAK,8EAAgB,CAAC,2BAA2B;oBAC9C,OAAO,2DAAW,CAAC,SAAS,CAAC,4CAA4C,EAAE,UAAU,CAAC,CAAC;gBAC1F,KAAK,8EAAgB,CAAC,iBAAiB;oBACpC,OAAO,2DAAW,CAAC,SAAS,CAAC,gDAAgD,EAAE,UAAU,CAAC,CAAC;gBAC9F,KAAK,8EAAgB,CAAC,kBAAkB;oBACrC,OAAO,2DAAW,CAAC,SAAS,CAAC,kDAAkD,EAAE,UAAU,CAAC,CAAC;gBAChG,KAAK,8EAAgB,CAAC,iBAAiB;oBACpC,OAAO,2DAAW,CAAC,SAAS,CAAC,iDAAiD,EAAE,UAAU,CAAC,CAAC;gBAC/F,KAAK,8EAAgB,CAAC,YAAY;oBAC/B,OAAO,2DAAW,CAAC,SAAS,CAAC,+CAA+C,EAAE,UAAU,CAAC,CAAC;gBAC7F,KAAK,8EAAgB,CAAC,YAAY;oBAC/B,OAAO,2DAAW,CAAC,SAAS,CAAC,gDAAgD,EAAE,UAAU,CAAC,CAAC;gBAC9F;oBACG,sEAAsE;oBACtE,OAAO,2DAAW,CAAC,SAAS,CAAC,yCAAyC,EAAE,UAAU,CAAC,CAAC;aACzF;QACJ,CAAC;QAED,mCAAmC,CAAC,eAA4C;YAC7E,MAAM,QAAQ,GAAa;gBACxB,2DAAW,CAAC,SAAS,CAAC,mFAAmF,CAAC;aAAC,CAAC;YAE/G,MAAM,sBAAsB,GACtB,eAAe,CAAC,YAAY,CAAC,IAAI,CAAC,WAAW,CAAC,EAAE,CAAC,WAAW,CAAC,uBAAuB,CAAC;mBAClF,eAAe,CAAC,eAAe,CAAC,IAAI,CAAC,cAAc,CAAC,EAAE,CAAC,cAAc,CAAC,uBAAuB,CAAC,CAAC;YAExG,IAAI,sBAAsB,EAAE;gBACzB,QAAQ,CAAC,IAAI,CAAC,2DAAW,CAAC,SAAS,CAC7B,wFAAwF,CAAC,CAAC,CAAC;aACnG;iBAAM;gBACJ,QAAQ,CAAC,IAAI,CAAC,2DAAW,CAAC,SAAS,CAC7B,sFAAsF,CAAC,CAAC,CAAC;aACjG;YAED,OAAO,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAC7B,CAAC;;IAnWuB,2CAAqB,GAAW,GAAG,CAAC;IAEpC,iCAAW,GAAW,GAAG,CAAC;;;;;;;;;;;;;;;;ACpBrD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAwD;AAEW;AAGnC;AACY;AAOrC,MAAM,kCAAkC;IAc5C,YAAoB,eAAgC;QAAhC,oBAAe,GAAf,eAAe,CAAiB;QAZ3C,SAAI,GAAgB,+CAAI,CAAC;QACzB,uBAAkB,GAA8B,kFAAkB,CAAC;QAM5E,aAAQ,GAAY,KAAK,CAAC;QAG1B,kBAAa,GAAkB,uEAAa,CAAC,IAAI,CAAC;QAKlD,kBAAa,GAAG,GAAW,EAAE;YAC1B,OAAO,IAAI,CAAC,eAAe,CAAC,eAAe,EAAE,CAAC,CAAC,CAAC,CAAC;QACpD,CAAC,CAAC;QAEF,mBAAc,GAAG,GAAW,EAAE;YAC3B,OAAO,IAAI,CAAC,eAAe,CAAC,gBAAgB,EAAE,CAAC,CAAC,CAAC,CAAC;QACrD,CAAC,CAAC;QAEF,gBAAW,GAAG,GAAW,EAAE;YACxB,OAAO,IAAI,CAAC,eAAe,CAAC,aAAa,EAAE,CAAC,CAAC,CAAC,CAAC;QAClD,CAAC,CAAC;QAEF,4BAAuB,GAAG,GAAW,EAAE;YACpC,OAAO,IAAI,CAAC,aAAa,KAAK,uEAAa,CAAC,WAAW;gBACjD,CAAC,CAAC,2DAAW,CAAC,SAAS,CACjB,4FAA4F,CAAC;gBACnG,CAAC,CAAC,2DAAW,CAAC,SAAS,CAAC,iFAAiF,CAAC,CAAC;QACpH,CAAC,CAAC;QAEF,8BAAyB,GAAG,CAAC,iBAAyB,EAAU,EAAE;YAC/D,OAAO,2DAAW,CAAC,SAAS,CACtB,0FAA0F,EAC1F,2DAAW,CAAC,cAAc,CAAC,iBAAiB,CAAC,CAAC,CAAC;QACxD,CAAC,CAAC;QAEF,sBAAiB,GAAG,GAAY,EAAE;YAC/B,OAAO,CAAC,IAAI,CAAC,eAAe,CAAC,kBAAkB,IAAI,IAAI,CAAC,WAAW,EAAE,CAAC;QACzE,CAAC,CAAC;QAEF,yBAAoB,GAAG,CAAC,uBAAwD,EAAW,EAAE;YAC1F,OAAO,uBAAuB,CAAC,oBAAoB,IAAI,uBAAuB,CAAC,sBAAsB;mBAC5F,uBAAuB,CAAC,uBAAuB,CAAC;QAC5D,CAAC,CAAC;QAEF,kBAAa,GAAG,CAAC,iBAA2C,EAAW,EAAE;YACtE,OAAO,CAAC,IAAI,CAAC,QAAQ,IAAI,CAAC,CAAC,iBAAiB,CAAC,kBAAkB,CAAC;mBACvD,CAAC,CAAC,iBAAiB,CAAC,cAAc,IAAI,iBAAiB,CAAC,uBAAuB,CAAC;QAC5F,CAAC,CAAC;IAvCF,CAAC;IAyCO,WAAW;QAChB,MAAM,eAAe,GAAY,CAAC,CAAC,CAAC,IAAI,CAAC,eAAe,CAAC,YAAY;eAC5D,IAAI,CAAC,eAAe,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC;QACnD,MAAM,kBAAkB,GAAY,CAAC,CAAC,CAAC,IAAI,CAAC,eAAe,CAAC,eAAe;eAClE,IAAI,CAAC,eAAe,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC;QAEtD,OAAO,eAAe,IAAI,kBAAkB,CAAC;IAChD,CAAC;CACH;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;uHC5EK,ikBAE0C,GAArC,qEAAoC,MAAC,mFACvC,qkBACqE,GAAhE,sEAA+D,MAAC,sFAClE,iMAA2G,KAAM,mFACpH,MAAM,gFACT,mDANK,iCAAuB,EACvB,iCAAoC,aAFzC,YAE0C,EADrC,SAAuB,EACvB,SAAoC,GACjC,gCAAsB,EACtB,kCAA+D,sCADpE,YACqE,EADhE,SAAsB,EACtB,SAA+D,mDAC1C,wHAA0C,GAAC,mBAAwC,iBAA1G,YAA2G,EAApF,SAA0C,EAAC,SAAwC;uHAGhH,ilBAG0C,GAArC,qEAAoC,MAAC,mFACvC,qkBACsE,GAAjE,sEAAgE,MAAC,sFACnE,iMAAyG,KAAM,mFAClH,MAAM,gFACT,mDANK,iCAAuB,EACvB,iCAAoC,aAHzC,YAG0C,EADrC,SAAuB,EACvB,SAAoC,GACjC,gCAAsB,EACtB,kCAAgE,uCADrE,YACsE,EADjE,SAAsB,EACtB,SAAgE,mDAJnE,8GAAgC,GADrC,YAG0C,EAFrC,SAAgC,GAKR,uHAAyC,GAAC,mBAAuC,gBAAxG,YAAyG,EAAlF,SAAyC,EAAC,SAAuC;uHAOjH,sIAAuC,iOAEvC;uHACA,mjBAE2D,GAAtD,4EAAqD,MAAC,wFAE3D,mDAHK,oBAAU,EACV,mCAAqD,sBAF1D,YAE2D,EADtD,SAAU,EACV,SAAqD,mDAAC,4EAE3D;uHAhCgF,0EACnF,MAAgB,0EAChB,ikBAAmE,GAA5C,4EAA2C,MAAC,6EAChE,wJAA4B,qFACzB,gaAE0C,IAKpC,gFACN,iaAG0C,IAKpC,6EACT,MAAM,0EACT,MAAM,0EACN,MAA+B,0EAC/B,yJAA4B,kFACzB,iaAAuC,IAEjC,6EACN,iaAE2D,IAErD,0EACT,mDA/BK,2BAAiB,EAAC,iCAA2C,aAAlE,YAAmE,EAA9D,SAAiB,EAAC,SAA2C,GAEvD,mBAAsB,iBAA3B,YAE0C,EAFrC,SAAsB,GAQtB,mBAAqB,gBAA1B,aAG0C,EAHrC,SAAqB,GAaxB,mBAAsB,iBAA3B,aAAuC,EAAlC,SAAsB,GAGtB,mBAAqB,gBAA1B,aAE2D,EAFtD,SAAqB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACV7B;AAAA;AAAO,IAAO,cAAc,CAU3B;AAVD,WAAc,cAAc;IAC5B,MAAa,OAAO;MAOlB,eAAe;IALP,cAAM,GAAG,CAAC,OAAY,EAAE,IAAwB,EAAE,IAAY,EAAE,aAAqB,EAAE,IAAY,EAAE,eAAwB,EAAE,mBAA4B,EAAE,aAAoC,EAAE,QAAkB,EAAE,QAA0B,EAAkB,EAAE;QACzQ,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,aAAa,EAAE,aAAa,EAAE,IAAI,EAAE,IAAI,EAAE,eAAe,EAAE,eAAe,EAAE,mBAAmB,EAAE,mBAAmB,EAAE,aAAa,EAAE,aAAa,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,GAAG,CAAC;IACpP,CAAC;IAJS,sBAAO,UAOnB;AAED,CAAC,EAVa,cAAc,KAAd,cAAc,QAU3B,CAAC,uBAAuB;;;;;;;;;;;;;;ACpBzB;AAAA;AAAA;AAAA;AAAuD;AAKuC;AAW9F,MAAM,cAAc,GAAW;IAC5B;QACG,IAAI,EAAE,EAAE;QACR,SAAS,EAAE,qEAAiB;KAC9B;IACD;QACG,IAAI,EAAE,4BAA4B;QAClC,SAAS,EAAE,4GAAmC;KAChD;CACH,CAAC;AA+BK,MAAM,oBAAoB;CAChC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;mEChED;YAAA;YAAA,YAIuD;YAAtC;;gCAAqC;;YAJtD;QAAA,2dAIuD,gFACvD,mDAFiB,mBAAsB,eAHvC,YAIuD,EADtC,SAAsB;AAAA;6GAGvC,2JAAiF,iXAA8B;6GAE5G,sKAA8G,8ZAE9G;;mEAQS;YAAA;YAAA,YAKkD;YAA1C;;gCAAyC;;YALjD;QAAA,aAKkD,2KAElD,uDAJQ,mBAA+C,qCAC/C,mBAAiD,qCAJzD,YAKkD,EAF1C,SAA+C,EAC/C,SAAiD,GACP,6PAElD;AAAA;;mEAEA;YAAA;YAAA,YAKoC;YAA5B;;gCAA2B;;YALnC;QAAA,aAKoC,2KAEpC,uDAJQ,mBAAyC,+BACzC,mBAA+C,mCAJvD,YAKoC,EAF5B,SAAyC,EACzC,SAA+C,GACnB,wPAEpC;AAAA;;mEACA;YAAA;YAAA,YAKsC;YAA9B;;gCAA6B;;YALrC;QAAA,aAKsC,2KAEtC,uDAJQ,mBAAyC,+BACzC,mBAA+C,mCAJvD,YAKsC,EAF9B,SAAyC,EACzC,SAA+C,GACjB,0PAEtC;AAAA;;mEACA;YAAA;YAAA,YAKqC;YAA7B;;gCAA4B;;YALpC;QAAA,aAKqC,2KAErC,uDAJQ,qJAAsF,4CACtF,mBAA+C,mCAJvD,YAKqC,EAF7B,SAAsF,EACtF,SAA+C,GAClB,yPAErC;AAAA;;mEAEA;YAAA;YAAA,YAK+B;YAAvB;;gCAAsB;;YAL9B;QAAA,aAK+B,2KAE/B,uDAJQ,mBAAyC,+BACzC,mBAA+C,mCAJvD,YAK+B,EAFvB,SAAyC,EACzC,SAA+C,GACxB,mPAE/B;AAAA;;mEAEA;YAAA;YAAA,YAKuC;YAA/B;;gCAA8B;;YALtC;QAAA,aAKuC,2KAEvC,uDAJQ,mBAAyC,+BACzC,mBAA+C,mCAJvD,YAKuC,EAF/B,SAAyC,EACzC,SAA+C,GAChB,yPAEvC;AAAA;8GAqBA,2IAA4E,8FACzE,8JAA0D,qHAE1D,MAAM,sFACT,iCAHQ,mIAAiC,GAAtC,YAA0D,EAArD,SAAiC,GAAoB,6DAE1D;8GAJN,wHAA+C,2FAC5C,geAA4E,IAItE,mFACT,mDALQ,mBAAsD,kBAA3D,YAA4E,EAAvE,SAAsD;8GAiBrD,86BAEkE,gGAClE,mDADU,sCAAuD,+BAFjE,YAEkE,EAAxD,SAAuD,mDADvD,mBAA0C,8BADpD,YAEkE,EADxD,SAA0C;8GAKpD,skCAA0D,gGACvD,qkCAO2G,mGAC3G,MAAoC,yFACvC,mDARsC,mBAA0C,8BAI1C,mBAA0D,gCAC1D,mBAA0D,gCAC1D,mBAAuE,6CALvE,mBAA+C,wBAC/C,mBAAuC,2BACvC,mBAAmD,4BAJtF,YAO2G,EANxE,SAA0C,EAI1C,SAA0D,EAC1D,SAA0D,EAC1D,SAAuE,EALvE,SAA+C,EAC/C,SAAuC,EACvC,SAAmD;8GANnC,4FACtD,kgBAA0D,IAUxC,yFACrB,2BAXoB,oBAAY,EAA7B,YAA0D,EAAzC,SAAY;8GAqB7B,86BAE4D,gGAC5D,mDADU,sCAAiD,yBAF3D,YAE4D,EAAlD,SAAiD,mDADjD,mBAAoC,wBAD9C,YAE4D,EADlD,SAAoC;8GAM3C,wHAA+C;8GAFF,4FAChD,2mCAA4E,gGACzE,8XAA+C,IAAe,yFACjE,MAAkB,yFACrB,2BAFoB,6FAAgC,GAA9C,YAA+C,EAAjC,SAAgC;8GAYjD,86BAE0D,gGAC1D,mDADU,sCAA+C,uBAFzD,YAE0D,EAAhD,SAA+C,mDAD/C,mBAAkC,sBAD5C,YAE0D,EADhD,SAAkC;8GAIE,4FAC9C,6kCAA6C,gGAC1C,0HAAK,6LAEL,IAAM,4FACN,sxBAIoD,mGACpD,MAAqB,yFACxB,MAAkB,yFACrB,mDAP0B,qBAAmC,EACnC,qBAAgC,EAEhC,oBAAe,EACf,oBAA+B,EAF/B,kDAAwC,wBAF5D,aAIoD,EAJhC,SAAmC,EACnC,SAAgC,EAEhC,SAAe,EACf,SAA+B,EAF/B,SAAwC,2BALvD,0RAEL,GACA,iHAIoD;;mEArB7D,0sBAA+F,GAAxD,gFAAuD,KAA9F,oxBAA+F,0FAC5F;YAAA;YAAA;;;;;s+BAC6B,+FAC3B,8KAC+F,IAAzF,wDAAwF,IAAC,mLAE/F,IAAO,4FACN,wZAE0D,IAC/C,yFACd,MAAS,sFACT;YAAA;YAAA,YAAiD;YAApC;;gCAAmC;;YAAhD;QAAA,qcAAiD,MAYnC,mFACjB,mDAzBuC,iCAAuD,qBAA9F,YAA+F,EAAxD,SAAuD,GAO9E,sBAA6B,sBAAvC,aAE0D,EAFhD,UAA6B,GAK7B,oBAAmC,oBAAhD,aAAiD,EAApC,UAAmC,2BAXhD,4vBAC6B,GAErB,mUAAwF,GAD9F,aAC+F,EAAzF,UAAwF,GAAC,kRAE/F;AAAA;8GA6BC,86BAE+D,gGAC/D,mDADU,sCAAoD,4BAF9D,YAE+D,EAArD,SAAoD,mDADpD,mBAAuC,2BADjD,YAE+D,EADrD,SAAuC;8GAIE,4FACnD,4kCAA6C,gGAC1C,ksBAAmG,mGACnG,MAAgC,yFACnC,MAAkB,yFACrB,mDAHqC,kEAAmE,8CAAlG,YAAmG,EAApE,SAAmE;;mEAf3G,0sBACqE,GAD5D,gFAA4D,KAArE,oxBACqE,0FAClE;YAAA;YAAA;;;;;s+BAC6B,gGAC1B,8KACoG,IAA9F,wDAA6F,IAAC,oLAEpG,IAAO,4FACP,wZAE+D,IACpD,yFACd,MAAS,sFACT;YAAA;YAAA,YAAsD;YAAzC;;gCAAwC;;YAArD;QAAA,qcAAsD,MAKxC,mFACjB,mDAnBS,iCAA4D,0BAArE,YACqE,EAD5D,SAA4D,GAQrD,sBAAkC,2BAA5C,aAE+D,EAFrD,UAAkC,GAKlC,oBAAwC,yBAArD,aAAsD,EAAzC,UAAwC,2BAXrD,4vBAC6B,GAEpB,wUAA6F,GADnG,aACoG,EAA9F,UAA6F,GAAC,uRAEpG;AAAA;;mEAnFZ,yHAAyD,wFACtD,ouDAA6D,0FAC1D,MAA0B,sFAC1B,ktBAAyE,GAAhE,iFAA+D,KAAxE,qxBAAyE,0FACtE;YAAA;YAAA;;;;;s+BAC6B,gGAC1B,8KACuG,IAAjG,wDAAgG,IAAC,oLAEvG,IAAO,4FACP,wZAEkE,IACvD,yFACd,MAAS,sFACT;YAAA;YAAA,YAAyD;YAA5C;;gCAA2C;;YAAxD;QAAA,qcAAyD,MAY3C,mFACjB,MAAU,sFACV,MAAmB,sFACnB,ktBAAmE,GAA1D,iFAAyD,KAAlE,qxBAAmE,0FAChE;YAAA;YAAA;;;;;s+BAC6B,gGAC1B,8KACiG,IAA3F,wDAA0F,IAAC,oLAEjG,IAAO,4FACP,wZAE4D,IACjD,yFACd,MAAS,sFACT;YAAA;YAAA,YAAmD;YAAtC;;gCAAqC;;YAAlD;QAAA,qcAAmD,MAIrC,mFACjB,MAAU,sFACV,MAAiB,sFACjB,wZAA+F,IAyBrF,sFACV,MAAoC,sFACpC,wZACqE,IAkB3D,mFACb,MAAW,gFACd,mDA9Fe,kCAA+D,6BAAxE,aAAyE,EAAhE,SAA+D,GAOxD,sBAAqC,8BAA/C,aAEkE,EAFxD,UAAqC,GAKrC,oBAA2C,4BAAxD,aAAyD,EAA5C,UAA2C,GAelD,mCAAyD,uBAAlE,aAAmE,EAA1D,UAAyD,GAOlD,sBAA+B,wBAAzC,aAE4D,EAFlD,UAA+B,GAK/B,oBAAqC,sBAAlD,aAAmD,EAAtC,UAAqC,GAO5C,mDAA6B,wBAAtC,aAA+F,EAAtF,UAA6B,GA4B7B,sIAA2D,sDADpE,aACqE,EAA5D,UAA2D,2BA5EvE,6GAA6D,GAGvD,+vBAC6B,GAEpB,oUAAgG,GADtG,aACuG,EAAjG,UAAgG,GAAC,mRAEvG,GAsBH,+wBAC6B,GAEpB,8TAA0F,GADhG,aACiG,EAA3F,UAA0F,GAAC,6QAEjG;AAAA;;mEAzHf,yHAA+C,qFAC5C,wJAA2B,wFACxB,uKAA2C,qKAE3C,IAAK,mFACL,4JAA+B,2FAC5B,MAAoC,sFACpC,uZAKkD,IAEzC,sFACT,MAAyB,sFACzB,uZAKoC,IAE3B,sFACT,uZAKsC,IAE7B,sFACT,uZAKqC,IAE5B,sFACT,MAAyB,sFACzB,wZAK+B,IAEtB,sFACT,MAAmC,sFACnC,wZAKuC,IAE9B,mFACZ,MAAM,gFACT,MAAM,gFACN,+HAAK,wFACF;YAAA;YAAA;;;;;;;;;0wBAA2C,0FACxC,4JAA8B,8FAC3B,MAAsD,yFACtD,8oBAAmE,kLAEnE,IAAQ,yFACR,iKAAmC,iGAChC,y+BAEiD,gGACjD,MAAW,4FACX,oKAAuC,iFAA6B,MAAO,yFAC9E,MAAM,sFACT,MAAM,mFACT,MAAO,mFACP,MAA6C,mFAC7C,wZAA+C,IAMhC,gFAClB,MAAM,gFACN,mbAAyD,IAiG1C,6EAClB,mDA9KiB,mBAAmC,8BAF3C,aAKkD,EAH1C,SAAmC,GASnC,mBAA8B,yBAFtC,aAKoC,EAH5B,SAA8B,GAQ9B,mBAAgC,2BAFxC,aAKsC,EAH9B,SAAgC,GAQhC,mBAA+B,0BAFvC,aAKqC,EAH7B,SAA+B,GAS/B,mBAAyB,oBAFjC,aAK+B,EAHvB,SAAyB,GASzB,mBAAiC,4BAFzC,aAKuC,EAH/B,SAAiC,GAY/B,8CAAiC,EAAxC,aAAmE,EAA5D,UAAiC,GAM3B,uCAAsC,cAFhD,aAEiD,EAAvC,UAAsC,GAO3C,2FAAgC,2BAA9C,aAA+C,EAAjC,UAAgC,GAQnC,sHAA0C,GAAxD,aAAyD,EAA3C,sBAA0C,mDAnFV,mOAE3C,GAyDA,8tBAA2C,GAGrC,8GAAmE,4NAEnE,GAGa,oBAAyB,aADnC,aAEiD,EADvC,UAAyB,GAGI,yEAA6B;AAAA;8GAiHxD,gFACxB,mxBAEwD,oFACxD,MAA6B,6EAChC,mDAJ+B,mBAAsC,qBACtC,mBAA2D,8BAC3D,mBAA2B,iBAFvD,YAEwD,EAF5B,SAAsC,EACtC,SAA2D,EAC3D,SAA2B;6GAhM7D,yHAAsE,kFACnE,sZAA8G,IAExG,6EACN,sZAA+C,IAuLhC,6EACf,MAAmC,6EACnC,yIAA2B,KAKb,0EACjB,mDAlMQ,sDAA6D,2BAAlE,YAA8G,EAAzG,SAA6D,GAGpD,mBAAgC,2BAA9C,YAA+C,EAAjC,SAAgC;+YAZkC,0EACnF,sZAIuD,IACrC,0EAClB,sZAAiF,IAAoC,0EACrH,uZAAsE,IAmMvD,0EACf,mDA1MiB,mBAAoB,eADrC,YAIuD,EAHtC,SAAoB,GAKhC,yCAA2C,sBAAhD,YAAiF,EAA5E,SAA2C,GAClC,uEAAuD,UAArE,aAAsE,EAAxD,SAAuD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;wHCNrE,iJAA4C,kFACzC,2kBAA8B,oFAC3B,4IAAgB,+JAEhB,IAAM,gFACN,4IAAgB,iKAEhB,IAAM,6EACT,MAAQ,6EACR,g+BAIoF,iFACpF,MAAmC,0EACtC,mDAdG,YAA8B,GASI,mBAA6D,uCAC7D,mBAA+D,wCAC/D,mBAAqD,mCACrD,mBAAiD,iCAJnF,aAIoF,EAHlD,SAA6D,EAC7D,SAA+D,EAC/D,SAAqD,EACrD,SAAiD,2BAZnF,0GAA8B,GACX,2PAEhB,GACgB,6PAEhB;wHAmCM,wHAAiD,8eAEjD;wHACA,wHAA+C,2eAE/C;wHACA,wHAAkD,+eAElD;wHAdH,yHAAgD,2FAC7C,0oBAGgE,0FAChE,MAAW,sFACX,iaAAiD,IAE1C,sFACP,kaAA+C,IAExC,sFACP,kaAAkD,IAE3C,mFACV,2BATS,kBAA0C,kDAAhD,YAAiD,EAA3C,SAA0C,GAG1C,kBAAwC,gDAA9C,aAA+C,EAAzC,SAAwC,GAGxC,kBAA2C,mDAAjD,aAAkD,EAA5C,SAA2C,2BAXvC,sIAA6B,GAAvC,YAGgE,EAHtD,SAA6B;wHAe1C,iJAAsE,2FACnE,49BAIuD,0FACvD,MAAmC,mFACtC,mDANqC,kBAAyD,gDACzD,kBAA2D,iDAC3D,mBAAqD,mCACrD,mBAAiD,iCACjD,sBAAoB,EAJtD,YAIuD,EAJrB,SAAyD,EACzD,SAA2D,EAC3D,SAAqD,EACrD,SAAiD,EACjD,SAAoB;yHAoBhD,wHAAuF;yHAZ/B,sFAC9D,suCAAmB,4FAChB,yiCAAuC,6FACpC,0JAA+B,oGAC5B,8iBAA4E,mGAC5E,MAAW,+FACX,whBAA8E,GAAxE,6EAAuE,MAAC,6HAE9E,MAAO,4FACV,MAAO,sFACV,MAAc,sFACd,0iCAAoD,6FACjD,mcAAuF,GAAzE,wEAAwE,MAAgB,sFACzG,MAAc,mFACjB,MAAoB,mFACvB,2BAbM,YAAuC,GAI3B,mCAAuE,+CAA7E,aAA8E,EAAxE,SAAuE,GAKnF,aAAoD,GACnC,6LAAwE,GAAtF,aAAuF,EAAzE,sBAAwE,2BAX5F,mSAAmB,GACH,kIAAyB,GAAtC,mIAAuC,EAA1B,SAAyB,EAAtC,oBAAuC,GAEvB,kIAAyB,GAAC,kBAAuC,kCAA3E,aAA4E,EAAlE,SAAyB,EAAC,SAAuC,GAEG,gFAE9E,GAGO,gJAAsC,GAAnD,uIAAoD,EAAvC,UAAsC,EAAnD,sBAAoD;wHAb7D,wHAC6F,wFAC1F,izBAAiE,IAenD,gFACjB,mDAhBgB,2CAAmD,4BAAhE,YAAiE,EAApD,SAAmD;wHAxCtE,6pFAAoF,oFACjF,0iCAA+C,oFAC5C,2HAAK,2FACF,qkBAE2C,0FAC3C,MAAW,sFACX,+HAAM,iFAA+B,MAAO,mFAC/C,MAAM,6EACT,MAAc,gFACd,0iCAA+C,oFAC5C,+ZAAgD,IAezC,gFACP,+ZAAsE,IAOhE,6EACT,MAAc,gFACd,MAAiC,gFACjC,MAAoB,gFACpB,weAC6F,IAiB9E,6EAClB,mIAzDA,YAAoF,GACjF,aAA+C,GAS/C,aAA+C,GACtC,4CAAyC,qBAA/C,aAAgD,EAA1C,UAAyC,GAgB1C,6CAA0C,qBAA/C,aAAsE,EAAjE,UAA0C,GAYpC,mBAA8E,sCAD5F,aAC6F,EAA/E,UAA8E,mDAvC/F,qOAAoF,GACpE,mIAAiC,GAA9C,qIAA+C,EAAlC,SAAiC,EAA9C,oBAA+C,GAE/B,oIAAkC,GAElC,mBAAgC,oBAF1C,aAE2C,EAFjC,SAAkC,EAElC,SAAgC,GAEpC,8EAA+B,GAG9B,mIAAiC,GAA9C,uIAA+C,EAAlC,SAAiC,EAA9C,sBAA+C;yHA6D5C,wHAAoF;yHAZ1F,8pFAA0F,oFACvF,2iCAAuC,oFACpC,4HAAK,2FACF,8iBAC+C,0FAC/C,MAAW,sFACX,whBAA2E,GAArE,6EAAoE,MAAC,2GAE3E,MAAO,mFACV,MAAM,6EACT,MAAc,gFACd,0iCAAoD,oFACjD,mcAAoF,GAAtE,wEAAqE,MAAgB,6EACtG,MAAc,6EACjB,2GAdA,YAA0F,GACvF,aAAuC,GAK3B,mCAAoE,wCAA1E,aAA2E,EAArE,SAAoE,GAKhF,aAAoD,GACnC,iKAAqE,GAAnF,aAAoF,EAAtE,sBAAqE,2BAZzF,qOAA0F,GAC1E,2HAAyB,GAAtC,qIAAuC,EAA1B,SAAyB,EAAtC,oBAAuC,GAEvB,gIAA8B,GAC9B,kBAAoC,2BAD9C,aAC+C,EADrC,SAA8B,EAC9B,SAAoC,GAE6B,uEAE3E,GAGO,yIAAsC,GAAnD,uIAAoD,EAAvC,UAAsC,EAAnD,sBAAoD;wHA9E1D,4oNAAgF,iFAC7E,MAAuB,6EACvB,m9FAAyD,uJAEzD,IAAgB,6EAChB,u7FAAoC,6EAA6B,MAAgB,6EACjF,MAAyB,6EACzB,MAAoB,6EACpB,2eAAoF,IAyDvE,6EACb,MAAuB,6EACvB,4eAA0F,IAc7E,6EACb,yuBAAe,mFACZ,+JAAoC,wFACjC,kLAAqE,KAAM,mFAC3E,8JAAiC,uKAEjC,IAAO,mFACP,kLAAsE,KAAM,mFAC5E,8JAAiC,uKAEjC,IAAO,mFACP,kLAAmE,KAAM,mFACzE,8JAAiC,uKAEjC,IAAO,mFACP,0KAA6C,KAAM,mFACnD,8JAAiC,uKAEjC,IAAO,gFACV,MAAM,0EACT,MAAgB,0EACnB,mDApGG,aAAyD,GAGzD,aAAoC,GAGxB,mBAAuE,+BAAnF,aAAoF,EAAxE,SAAuE,GA2DvE,mBAA6E,kCAAzF,aAA0F,EAA9E,SAA6E,mDAnE5F,yJAAgF,GAE7E,8IAAyD,6QAEzD,GACA,8IAAoC,0EAA6B,GA6EjE,gDAAe,GAEiB,oBAA0C,kBAApE,aAAqE,EAA3C,UAA0C,GACnC,6MAEjC,GAC0B,oBAA2C,mBAArE,aAAsE,EAA5C,UAA2C,GACpC,gTAEjC,GAC0B,oBAAwC,gBAAlE,aAAmE,EAAzC,UAAwC,GACjC,6SAEjC,GAEiC,oQAEjC;yHAaA,wHAAkE,6eAElE;yHACA,wHAAwE,kfAExE;yHACA,wHAAkE,6eAElE;yHATH,yHAA4D,wFACzD,kaAAkE,IAE3D,mFACP,kaAAwE,IAEjE,mFACP,kaAAkE,IAE3D,gFACV,mDATS,yEAA2D,2BAAjE,YAAkE,EAA5D,SAA2D,GAG3D,yEAAiE,iCAAvE,YAAwE,EAAlE,SAAiE,GAGjE,yEAA2D,2BAAjE,YAAkE,EAA5D,SAA2D;yHAIpE,wHAAkC,gRAElC;yHACA,wHAA2C,keAE3C;yHAtBH,wHAAiC,qFAC9B,0oBAGgE,oFAChE,MAAW,gFACX,kaAA4D,IAU7C,gFACf,maAAkC,IAE3B,gFACP,maAA2C,IAEpC,6EACV,mDAjBiB,qCAA6C,0CAA3D,YAA4D,EAA9C,SAA6C,GAWrD,kBAA2B,qCAAjC,aAAkC,EAA5B,SAA2B,GAG3B,kBAAoC,8CAA1C,aAA2C,EAArC,SAAoC,2BAnBhC,iIAA4B,GAAtC,YAGgE,EAHtD,SAA4B;yHAuBzC,wHAA2C,qFACxC,2gCAKuD,oFACvD,MAAmC,6EACtC,mDAPqC,kBAAkD,2CAClD,kBAAoD,4CAEpD,mBAAqD,mCACrD,mBAAiD,iCACjD,sBAAoB,EAHpB,kBAA8C,yCAFhF,YAKuD,EALrB,SAAkD,EAClD,SAAoD,EAEpD,SAAqD,EACrD,SAAiD,EACjD,SAAoB,EAHpB,SAA8C;yHA5BjC,6EAClD,kaAAiC,IAuB3B,6EACN,kaAA2C,IAQ5B,0EAClB,mDAjCQ,oCAA2B,gBAAhC,YAAiC,EAA5B,SAA2B,GAwBlB,qCAA4B,gBAA1C,YAA2C,EAA7B,SAA4B;oQApJsC,0EACnF,MAAsC,0EACtC,iaAA4C,IAetC,0EACN,MAA0C,0EAC1C,iaAAgF,IAsGjE,0EACf,MAAoG,0EACpG,gJAAqD,kDAzH3B,oBAAiB,WAA3C,YAA4C,EAAlB,SAAiB,GAiBS,mBAA2B,sBAA/E,YAAgF,EAA5B,SAA2B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AChBb;AACoB;AACxB;AAChB;AAGY;AACS;AACH;AAED;AACA;AACd;AAKc;AACT;AACyB;AAEtB;AACrB;AACiC;AACzB;AACC;AAQtC;UAAM,iBAAiB;QA8D3B,YAAoB,eAAgC,EACtC,qBAA4C,EAC5C,WAAwB,EACxB,iBAAoC,EACpC,sBAA8C;YAJxC,oBAAe,GAAf,eAAe,CAAiB;YACtC,0BAAqB,GAArB,qBAAqB,CAAuB;YAC5C,gBAAW,GAAX,WAAW,CAAa;YACxB,sBAAiB,GAAjB,iBAAiB,CAAmB;YACpC,2BAAsB,GAAtB,sBAAsB,CAAwB;YAtD5D,eAAU,GAAkB,sEAAa,CAAC,aAAa,CAAC;YAuBxD,8EAA8E;YAC9E,oBAAe,GAAY,KAAK,CAAC;YA0SzB,wBAAmB,GAAG,CAAC,MAAoB,EAAE,EAAE;gBACpD,IAAI,CAAC,MAAM,EAAE;oBACV,OAAO;iBACT;gBAED,IAAI,CAAC,MAAM,CAAC,+BAA+B,EAAE;oBAC1C,IAAI,CAAC,eAAe,GAAG,qGAAmB,CAAC,sCAAsC,CAAC;oBAClF,IAAI,CAAC,sBAAsB,EAAE,CAAC;oBAC9B,OAAO;iBACT;gBAED,IAAI,4DAAW,CAAC,OAAO,CAAC,MAAM,CAAC,gBAAgB,CAAC,EAAE;oBAC/C,IAAI,CAAC,eAAe,GAAG,qGAAmB,CAAC,qCAAqC,CAAC;oBACjF,IAAI,CAAC,sBAAsB,EAAE,CAAC;oBAC9B,OAAO;iBACT;gBAED,IAAI,CAAC,YAAY,GAAG,MAAM,CAAC,YAAY,CAAC;gBACxC,IAAI,CAAC,qBAAqB,GAAG,MAAM,CAAC,qBAAqB,CAAC;gBAC1D,IAAI,CAAC,+BAA+B,GAAG,MAAM,CAAC,+BAA+B,CAAC;gBAC9E,IAAI,CAAC,+BAA+B,GAAG,MAAM,CAAC,+BAA+B,CAAC;gBAC9E,IAAI,CAAC,gBAAgB,GAAG,MAAM,CAAC,gBAAgB,CAAC;gBAEhD,IAAI,CAAC,gBAAgB,GAAG,MAAM,CAAC,gBAAgB,CAAC;gBAChD,IAAI,CAAC,yBAAyB,GAAG,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;gBAChF,IAAI,CAAC,oBAAoB,EAAE,CAAC;gBAE5B,IAAI,IAAI,CAAC,wBAAwB,KAAK,SAAS,IAAI,IAAI,CAAC,wBAAwB,KAAK,IAAI,EAAE;oBACxF,IAAI,CAAC,wBAAwB,GAAG,6EAAgB,CAAC,yBAAyB,CAAC;iBAC7E;gBACD,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,iBAAiB,CAAC;gBACzC,IAAI,CAAC,eAAe,GAAG,KAAK,CAAC;gBAE7B,IAAI,CAAC,sBAAsB,EAAE,CAAC;YACjC,CAAC,CAAC;YA8BM,YAAO,GAAG,CAAC,KAAU,EAAE,EAAE;gBAC9B,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC;gBAC1B,IAAI,CAAC,8BAA8B,GAAG,KAAK,CAAC;gBAC5C,IAAI,CAAC,oBAAoB,GAAG,KAAK,CAAC;gBAClC,IAAI,CAAC,4BAA4B,GAAG,KAAK,CAAC;gBAC1C,iEAAiE;gBACjE,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;gBACvB,IAAI,CAAC,eAAe,GAAG,KAAK,CAAC;YAChC,CAAC,CAAC;QAnVF,CAAC;QAtBD,IAAI,sBAAsB;YACvB,OAAO,4DAAW,CAAC,OAAO,CAAC,IAAI,CAAC,wBAAwB,CAAC;gBACnD,CAAC,CAAC,IAAI;gBACN,CAAC,CAAC,IAAI,CAAC,wBAAwB,CAAC,CAAC,CAAC,CAAC;QAC5C,CAAC;QAED,IAAI,sBAAsB,CAAC,MAAsB;YAC9C,IAAI,CAAC,wBAAwB,GAAG,MAAM;gBAChC,CAAC,CAAC,CAAC,MAAM,CAAC;gBACV,CAAC,CAAC,EAAE,CAAC;YACX,IAAI,CAAC,wBAAwB,GAAG,IAAI,CAAC,2BAA2B,EAAE,CAAC;YACnE,sDAAsD;YACtD,IAAI,CAAC,uBAAuB,GAAG,CAAC,CAAC,MAAM,IAAI,MAAM,CAAC,IAAI,KAAK,kFAAkB,CAAC,IAAI;gBAC5E,CAAC,CAAC,4DAAY,CAAC,yBAAyB,CAAC,MAAM,CAAC,IAAI,EAAE,IAAI,CAAC,gBAAgB,CAAC;gBAC5E,CAAC,CAAC,IAAI,CAAC;QAChB,CAAC;QASD,QAAQ;YACL,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;YACpB,IAAI,CAAC,iBAAiB,CAAC,cAAc,CAAC,IAAI,CAAC,UAAU,EAAE,CAAC,iEAAU,CAAC,YAAY,EAAE,CAAC,CAAC;iBAC5E,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,IAAI,CAAC,gBAAgB,GAAG,MAAM,CAAC;iBAC9C,KAAK,CAAC,KAAK,CAAC,EAAE;gBACZ,oDAAM,CAAC,IAAI,CAAC,0CAA0C,EAAE,KAAK,CAAC,CAAC;YAClE,CAAC,CAAC,CAAC;YAET,MAAM,OAAO,GAAsB,4DAAW,CAAC,iBAAiB,EAAE,CAAC;YACnE,IAAI,OAAO,EAAE;gBACV,IAAI,OAAO,CAAC,cAAc,EAAE;oBACzB,IAAI,CAAC,sBAAsB,GAAG,yEAAc,CAAC,OAAO,CAAC,MAAM,CACrD,sEAAa,CAAC,OAAO,CAAC,OAAO,CAAC,cAAc,CAAC,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;oBAC5G,IAAI,OAAO,CAAC,UAAU,EAAE;wBACrB,IAAI,CAAC,sBAAsB,CAAC,IAAI,GAAG,OAAO,CAAC,UAAU,CAAC;qBACxD;oBACD,IAAI,OAAO,CAAC,sBAAsB,EAAE;wBACjC,IAAI,CAAC,wBAAwB,GAAG,OAAO,CAAC,sBAAsB,CAAC;qBACjE;iBACH;qBAAM;oBACJ,oDAAM,CAAC,KAAK,CAAC,qFAAqF,CAAC,CAAC;iBACtG;aACH;YACD,IAAI,CAAC,OAAO,EAAE,CAAC;QAClB,CAAC;QAGD,OAAO;YACJ,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;YACpB,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC;YAE5B,IAAI,CAAC,eAAe,CAAC,eAAe,CAAC,IAAI,CAAC,UAAU,CAAC;iBAC9C,IAAI,CAAC,IAAI,CAAC,mBAAmB,CAAC;iBAC9B,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC;iBACnB,OAAO,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC,CAAC;QAC9C,CAAC;QAED,sBAAsB,CAAC,MAAsB;YAC1C,IAAI,CAAC,sBAAsB,GAAG,MAAM,CAAC;YACrC,IAAI,CAAC,wBAAwB,GAAG,6EAAgB,CAAC,yBAAyB,CAAC;YAC3E,mFAAmF;YACnF,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,iBAAiB,CAAC;YACzC,IAAI,CAAC,eAAe,GAAG,KAAK,CAAC;YAC7B,IAAI,CAAC,oBAAoB,GAAG,KAAK,CAAC;YAClC,IAAI,CAAC,8BAA8B,GAAG,KAAK,CAAC;QAC/C,CAAC;QAED,IAAI,iBAAiB;YAClB,OAAO,IAAI,CAAC,sBAAsB,IAAI,CAAC,IAAI,CAAC,wBAAwB,CAAC;QACxE,CAAC;QAED,gCAAgC,CAAC,KAAuB;YACrD,IAAI,CAAC,wBAAwB,GAAG,KAAK,CAAC;YACtC,IAAI,CAAC,eAAe,GAAG,KAAK,CAAC;YAC7B,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;YACvB,IAAI,CAAC,oBAAoB,GAAG,KAAK,CAAC;YAClC,IAAI,CAAC,8BAA8B,GAAG,KAAK,CAAC;QAC/C,CAAC;QAED,iBAAiB;YACd,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC;QAC/B,CAAC;QAED,6EAA6E;QAC7E,gBAAgB,CAAC,KAAc;YAC5B,IAAI,CAAC,IAAI,CAAC,8BAA8B,EAAE;gBACvC,IAAI,CAAC,4BAA4B,GAAG,KAAK,CAAC;aAC5C;QACJ,CAAC;QAEK,iBAAiB;;gBACpB,IAAI;oBACD,IAAI,QAA0B,CAAC;oBAC/B,IAAI,SAA4B,CAAC;oBACjC,QAAQ,IAAI,CAAC,sBAAsB,CAAC,IAAI,EAAE;wBACvC,KAAK,kFAAkB,CAAC,IAAI;4BACzB,QAAQ,GAAG,8EAAgB,CAAC,aAAa,CAAC;4BAC1C,SAAS,GAAG,+EAAiB,CAAC,sBAAsB,CAAC;4BACrD,MAAM;wBACT,KAAK,kFAAkB,CAAC,UAAU;4BAC/B,QAAQ,GAAG,8EAAgB,CAAC,kBAAkB,CAAC;4BAC/C,SAAS,GAAG,+EAAiB,CAAC,oBAAoB,CAAC;4BACnD,MAAM;wBACT,KAAK,kFAAkB,CAAC,IAAI;4BACzB,QAAQ,GAAG,8EAAgB,CAAC,aAAa,CAAC;4BAC1C,SAAS,GAAG,+EAAiB,CAAC,oBAAoB,CAAC;4BACnD,MAAM;qBACX;oBAED,MAAM,eAAe,GAAkB,MAAM,IAAI,CAAC,eAAe,CAAC,wBAAwB,CACpF,IAAI,CAAC,UAAU,EACf,IAAI,CAAC,sBAAsB,CAAC,IAAI,EAChC,IAAI,CAAC,wBAAwB,CAAC,QAAQ,EAAE,EACxC,SAAS,CAAC,CAAC;oBACjB,IAAI,CAAC,YAAY,GAAG,8EAAgB,CAAC,OAAO,CAAC,MAAM,CAC7C,eAAe,EAAE,aAAa;oBAC9B,IAAI,CAAC,sBAAsB,CAAC,IAAI,EAAE,cAAc;oBAChD,IAAI,CAAC,sBAAsB,CAAC,IAAI,EAAE,cAAc;oBAChD,IAAI,EAAE,YAAY;oBAClB,IAAI,CAAC,wBAAwB,EAAE,oBAAoB;oBACnD,QAAQ,CAAC,CAAC,CAAC,iBAAiB;oBAClC,MAAM,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;iBACtD;gBAAC,OAAO,KAAK,EAAE;oBACb,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;iBACtB;YACJ,CAAC;SAAA;QAEK,qBAAqB,CAAC,gBAAkC;;gBAC3D,IAAI,CAAC,YAAY,GAAG,SAAS,CAAC;gBAC9B,IAAI,CAAC,gBAAgB,EAAE;oBACpB,OAAO;iBACT;gBAED,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC;gBACxB,IAAI,CAAC,8BAA8B,GAAG,IAAI,CAAC,qBAAqB,CAAC,uBAAuB,CAClF,gBAAgB,EAAE,IAAI,CAAC,sBAAsB,CAAC,IAAI,EAAE,IAAI,CAAC,wBAAwB,CAAC,CAAC;gBACzF,IAAI,CAAC,4BAA4B,GAAG,IAAI,CAAC;gBACzC,IAAI,CAAC,IAAI,CAAC,8BAA8B,EAAE;oBACvC,8CAA8C;oBAC9C,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;oBACvB,OAAO;iBACT;gBAED,IAAI,CAAC,YAAY,GAAG,CAAC,CAAC;gBACtB,IAAI,CAAC,oBAAoB,GAAG,IAAI,CAAC;gBACjC,IAAI,CAAC,YAAY,GAAG,gBAAgB,CAAC;gBACrC,wBAAwB;gBACxB,IAAI;oBACD,OAAO,IAAI,EAAE;wBACV,wDAAwD;wBACxD,IAAI,CAAC,IAAI,CAAC,oBAAoB,EAAE;4BAC7B,OAAO;yBACT;wBAED,MAAM,QAAQ,GAAiB,MAAM,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC;wBAC3F,IAAI,CAAC,QAAQ,IAAI,QAAQ,CAAC,MAAM,KAAK,yEAAU,CAAC,OAAO,EAAE;4BACtD,MAAM;yBACR;wBAED,IAAI,QAAQ,CAAC,MAAM,KAAK,yEAAU,CAAC,KAAK,EAAE;4BACvC,MAAM,YAAY,GAAW,IAAI,CAAC,qBAAqB,CAAC,oBAAoB,CACtE,IAAI,CAAC,YAAY,CAAC,QAAQ,EAAE,IAAI,CAAC,sBAAsB,CAAC,IAAI,CAAC,CAAC;4BACpE,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC;4BAC3B,OAAO;yBACT;wBAED,IAAI,CAAC,YAAY,GAAG,QAAQ,CAAC,QAAQ,CAAC;wBACtC,4BAA4B;wBAC5B,MAAM,IAAI,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,UAAU,CAAC,OAAO,EAAE,iBAAiB,CAAC,aAAa,CAAC,CAAC,CAAC;qBACrF;iBACH;gBAAC,OAAO,KAAK,EAAE;oBACb,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;oBACpB,OAAO;iBACT;gBAED,IAAI,CAAC,oBAAoB,GAAG,KAAK,CAAC;gBAClC,IAAI,CAAC,4BAA4B,GAAG,KAAK,CAAC;gBAE1C,MAAM,aAAa,GACb,iBAAiB,CAAC,oBAAoB,CAAC,OAAO,CAAC,gBAAgB,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC;gBACrF,IAAI,aAAa,EAAE;oBAChB,IAAI,CAAC,sBAAsB,GAAG,SAAS,CAAC;oBACxC,IAAI,CAAC,OAAO,EAAE,CAAC;iBACjB;qBAAM;oBACJ,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;oBACvB,IAAI,CAAC,eAAe,GAAG,KAAK,CAAC;iBAC/B;YACJ,CAAC;SAAA;QAED,2BAA2B,CAAC,WAAyB;YAClD,IAAI,4DAAW,CAAC,OAAO,CAAC,WAAW,CAAC;gBAC9B,CAAC,IAAI,CAAC,sBAAsB,IAAI,WAAW,CAAC,CAAC,CAAC,CAAC,IAAI,KAAK,IAAI,CAAC,sBAAsB,CAAC,IAAI,CAAC,EAAE;gBAC9F,OAAO;aACT;YACD,IAAI,CAAC,sBAAsB,CAAC,WAAW,CAAC,CAAC,CAAmB,CAAC,CAAC;YAC9D,IAAI,CAAC,wBAAwB,GAAG,WAA+B,CAAC;QACnE,CAAC;QAEO,kBAAkB,CAAC,QAA0B;YAClD,IAAI,4DAAW,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE;gBAChC,OAAO,EAAE,CAAC;aACZ;YACD,OAAO,QAAQ,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC,IAAI,iFAAQ,CAAC,MAAM,EAAE,IAAI,CAAC,kBAAkB,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;QACjG,CAAC;QAEO,2BAA2B;YAChC,IAAI,CAAC,IAAI,CAAC,sBAAsB,EAAE;gBAC/B,OAAO,EAAE,CAAC;aACZ;YACD,QAAQ,IAAI,CAAC,sBAAsB,CAAC,IAAI,EAAE;gBACvC,KAAK,kFAAkB,CAAC,IAAI;oBACzB,IAAI,CAAC,IAAI,CAAC,sBAAsB,CAAC,eAAe,EAAE;wBAC/C,OAAO,4DAAW,CAAC,SAAS,CAAC,2DAA2D,CAAC,CAAC;qBAC5F;yBAAM,IAAI,IAAI,CAAC,sBAAsB,CAAC,mBAAmB,EAAE;wBACzD,OAAO,4DAAW,CAAC,SAAS,CAAC,8DAA8D,CAAC,CAAC;qBAC/F;oBACD,MAAM;gBACT,KAAK,kFAAkB,CAAC,UAAU;oBAC/B,IAAI,IAAI,CAAC,sBAAsB,CAAC,mBAAmB,EAAE;wBAClD,OAAO,4DAAW,CAAC,SAAS,CAAC,mEAAmE,CAAC,CAAC;qBACpG;oBACD,IAAI,IAAI,CAAC,sBAAsB,CAAC,aAAa,EAAE;wBAC5C,IAAI,IAAI,CAAC,sBAAsB,CAAC,aAAa,CAAC,QAAQ,EAAE;4BACrD,OAAO,4DAAW,CAAC,SAAS,CAAC,0DAA0D,CAAC,CAAC;yBAC3F;6BAAM,IAAI,CAAC,IAAI,CAAC,sBAAsB,CAAC,aAAa,CAAC,SAAS,EAAE;4BAC9D,OAAO,4DAAW,CAAC,SAAS,CAAC,6DAA6D,CAAC,CAAC;yBAC9F;qBACH;oBACD,MAAM;gBACT,KAAK,kFAAkB,CAAC,IAAI;oBACzB,IAAI,IAAI,CAAC,sBAAsB,CAAC,mBAAmB,EAAE;wBAClD,OAAO,4DAAW,CAAC,SAAS,CAAC,8DAA8D,CAAC,CAAC;qBAC/F;oBACD,IAAI,CAAC,IAAI,CAAC,sBAAsB,CAAC,iCAAiC,CAAC,IAAI,CAAC,qBAAqB,CAAC,EAAE;wBAC7F,OAAO,4DAAW,CAAC,SAAS,CAAC,2DAA2D,CAAC,CAAC;qBAC5F;oBACD,IAAI,IAAI,CAAC,sBAAsB,CAAC,QAAQ,EAAE;wBACvC,IAAI,IAAI,CAAC,sBAAsB,CAAC,QAAQ,CAAC,WAAW,KAAK,6DAAQ,CAAC,WAAW,CAAC,GAAG,EAAE;4BAChF,OAAO,IAAI,CAAC,gBAAgB;gCACtB,CAAC,CAAC,4DAAW,CAAC,SAAS,CAAC,wDAAwD,CAAC;gCACjF,CAAC,CAAC,4DAAW,CAAC,SAAS,CAAC,iEAAiE,CAAC,CAAC;yBACnG;6BAAM,IAAI,IAAI,CAAC,sBAAsB,CAAC,QAAQ,CAAC,WAAW,KAAK,6DAAQ,CAAC,WAAW,CAAC,KAAK,EAAE;4BACzF,OAAO,4DAAW,CAAC,SAAS,CAAC,0DAA0D,CAAC,CAAC;yBAC3F;qBACH;oBACD,MAAM;gBACT;oBACG,OAAO,EAAE,CAAC;aACf;QACJ,CAAC;QAED,2BAA2B;YACxB,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE;gBACrB,OAAO,4DAAW,CAAC,SAAS,CAAC,yCAAyC,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC;aAC7F;YAED,QAAQ,IAAI,CAAC,YAAY,CAAC,QAAQ,EAAE;gBACjC,KAAK,8EAAgB,CAAC,2BAA2B;oBAC9C,OAAO,4DAAW,CAAC,SAAS,CAAC,yDAAyD,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC;gBAC9G,KAAK,8EAAgB,CAAC,iBAAiB;oBACpC,OAAO,4DAAW,CAAC,SAAS,CAAC,qDAAqD,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC;gBAC1G,KAAK,8EAAgB,CAAC,kBAAkB;oBACrC,OAAO,4DAAW,CAAC,SAAS,CAAC,uDAAuD,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC;gBAC5G,KAAK,8EAAgB,CAAC,iBAAiB;oBACpC,OAAO,4DAAW,CAAC,SAAS,CAAC,sDAAsD,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC;gBAC3G,KAAK,8EAAgB,CAAC,YAAY;oBAC/B,OAAO,4DAAW,CAAC,SAAS,CAAC,oDAAoD,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC;gBACzG,KAAK,8EAAgB,CAAC,YAAY;oBAC/B,OAAO,4DAAW,CAAC,SAAS,CAAC,qDAAqD,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC;gBAC1G;oBACG,iEAAiE;oBACjE,OAAO,4DAAW,CAAC,SAAS,CAAC,yCAAyC,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC;aAChG;QACJ,CAAC;QAED,sBAAsB;YACnB,IAAI,IAAI,CAAC,gBAAgB,EAAE;gBACxB,OAAO,4DAAW,CAAC,SAAS,CAAC,gEAAgE,CAAC,CAAC;aACjG;YAED,OAAO,IAAI,CAAC,+BAA+B;gBACrC,CAAC,CAAC,4DAAW,CAAC,SAAS,CAAC,yEAAyE,CAAC;gBAClG,CAAC,CAAC,4DAAW,CAAC,SAAS,CAAC,4DAA4D,CAAC,CAAC;QAC/F,CAAC;QAsCO,oBAAoB;YACzB,IAAI,CAAC,IAAI,CAAC,sBAAsB,IAAI,4DAAW,CAAC,OAAO,CAAC,IAAI,CAAC,gBAAgB,CAAC,EAAE;gBAC7E,OAAO;aACT;YAED,IAAI,IAAI,CAAC,sBAAsB,CAAC,IAAI,EAAE;gBACnC,6EAA6E;gBAC7E,IAAI,CAAC,sBAAsB,GAAG,4DAAY,CAAC,2BAA2B,CAChE,IAAI,CAAC,sBAAsB,CAAC,IAAI,EAAE,IAAI,CAAC,gBAAgB,CAAC,CAAC;aACjE;iBAAM;gBACJ,qGAAqG;gBACrG,qEAAqE;gBACrE,IAAI,CAAC,sBAAsB,GAAG,4DAAY,CAAC,iBAAiB,CACtD,IAAI,CAAC,sBAAsB,CAAC,OAAO,EAAE,IAAI,CAAC,gBAAgB,CAAC,CAAC;aACpE;QACJ,CAAC;QAEO,sBAAsB;YAC3B,IAAI,IAAI,CAAC,sBAAsB,IAAI,IAAI,CAAC,wBAAwB,EAAE;gBAC/D,IAAI,CAAC,aAAa,GAAG,4DAAW,CAAC,SAAS,CAAC,wCAAwC,EAC7E,IAAI,CAAC,sBAAsB,CAAC,IAAI,EAChC,qFAAqB,CAAC,4BAA4B,CAAC,IAAI,CAAC,wBAAwB,CAAC,CAAC,CAAC;aAC3F;iBAAM;gBACJ,IAAI,CAAC,aAAa,GAAG,4DAAW,CAAC,SAAS,CAAC,uCAAuC,EAC5E,4DAAW,CAAC,SAAS,CAAC,qCAAqC,CAAC,CAAC,CAAC;aACtE;QACJ,CAAC;;IA3YuB,+BAAa,GAAW,IAAI,CAAC;IAE7B,sCAAoB,GAAuB;QAChE,8EAAgB,CAAC,2BAA2B;QAC5C,8EAAgB,CAAC,iBAAiB;QAClC,8EAAgB,CAAC,iBAAiB;QAClC,8EAAgB,CAAC,kBAAkB;QACnC,8EAAgB,CAAC,YAAY;QAC7B,8EAAgB,CAAC,YAAY;KAC/B,CAAC;IAiCF;QADC,uGAAqB,EAAE;;4DACF;IAqDtB;QADC,+EAAc;;;;oDASd;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC/HJ;AAAA;AAAO,MAAM,iCAAiC;IA6B3C,YAAoB,qBAA4C,EAClD,eAAgC;QAD1B,0BAAqB,GAArB,qBAAqB,CAAuB;QAClD,oBAAe,GAAf,eAAe,CAAiB;IAC9C,CAAC;IAED,QAAQ;QACL,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,qBAAqB,CAAC,gBAAgB,CAAC,IAAI,CAAC,oBAAoB,CAAC,aAAa,EAClG,IAAI,CAAC,qBAAqB,CAAC,aAAa,CAAC,IAAI,GAAG,CAAC;QAEvD,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,eAAe,CAAC,eAAe,CAAC,IAAI,CAAC,oBAAoB,CAAC,YAAY,EAC3F,IAAI,CAAC,oBAAoB,CAAC,aAAa,EAAE,IAAI,CAAC,gBAAgB,EAAE,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC;QAC9F,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,eAAe,CAAC,eAAe,CAAC,IAAI,CAAC,qBAAqB,CAAC,YAAY,EAC3F,IAAI,CAAC,qBAAqB,CAAC,aAAa,EAAE,IAAI,CAAC,gBAAgB,EAAE,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC;QAE/F,IAAI,CAAC,uBAAuB,GAAG,IAAI,CAAC,eAAe,CAAC,YAAY,CAAC,IAAI,CAAC,oBAAoB,CAAC,YAAY,EACjG,IAAI,CAAC,oBAAoB,CAAC,aAAa,CAAC,CAAC;QAC/C,IAAI,CAAC,sBAAsB,GAAG,IAAI,CAAC,eAAe,CAAC,YAAY,CAAC,IAAI,CAAC,qBAAqB,CAAC,YAAY,EACjG,IAAI,CAAC,qBAAqB,CAAC,aAAa,CAAC,CAAC;IACnD,CAAC;IAED,YAAY;QACT,OAAO,CAAC,IAAI,CAAC,kBAAkB,IAAI,CAAC,CAAC,IAAI,CAAC,oBAAoB,CAAC,aAAa,CAAC;IAChF,CAAC;IAED,oGAAoG;IACpG,wCAAwC;IACxC,WAAW;QACR,OAAO,IAAI,CAAC,qBAAqB,EAAE,IAAI,CAAC,IAAI,CAAC,SAAS,IAAI,CAAC,CAAC,IAAI,CAAC,kBAAkB,CAAC;IACvF,CAAC;IAED,4BAA4B;QACzB,OAAO,IAAI,CAAC,qBAAqB,CAAC,gBAAgB,CAAC,IAAI,CAAC,oBAAoB,EAAE,IAAI,CAAC,SAAS,EACtF,IAAI,CAAC,qBAAqB,EAAE,CAAC,CAAC;IACvC,CAAC;IAED,6BAA6B;QAC1B,OAAO,IAAI,CAAC,qBAAqB,CAAC,6BAA6B,CAAC,IAAI,CAAC,qBAAqB,EAAE,IAAI,CAAC,SAAS,EACpG,IAAI,CAAC,kBAAkB,CAAC,CAAC;IAClC,CAAC;IAED,qBAAqB;QAClB,OAAO,IAAI,CAAC,qBAAqB,CAAC,qBAAqB,CAAC,IAAI,CAAC,oBAAoB,EAC3E,IAAI,CAAC,qBAAqB,CAAC,CAAC;IACrC,CAAC;CACH;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACrFD,kFAAkF;AACQ;AACd;AAIb;AACT;AAClB;AAU7B;UAAM,2BAA2B;QAwBrC,YAAoB,eAAgC,EACtC,qBAA4C,EAC5C,gBAAkD,EAClD,UAA4B;YAHtB,oBAAe,GAAf,eAAe,CAAiB;YACtC,0BAAqB,GAArB,qBAAqB,CAAuB;YAC5C,qBAAgB,GAAhB,gBAAgB,CAAkC;YAClD,eAAU,GAAV,UAAU,CAAkB;YAnB1C,mBAAc,GAA0B,IAAI,0DAAY,EAAW,CAAC;YAYpE,oBAAe,GAAa,EAAE,CAAC;YAkCvB,+BAA0B,GAAG,CAAC,cAA8B,EAAE,EAAE;gBACrE,IAAI,CAAC,cAAc,IAAI,CAAC,cAAc,CAAC,WAAW,EAAE;oBACjD,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;oBAChC,IAAI,CAAC,kBAAkB,GAAG,SAAS,CAAC;oBACpC,OAAO;iBACT;gBAED,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;gBAC/B,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC,qBAAqB,CAAC,qBAAqB,CACpE,cAAc,CAAC,WAAW,EAAE,IAAI,CAAC,+BAA+B,EAAE,IAAI,CAAC,gBAAgB,CAAC,CAAC;YAClG,CAAC,CAAC;YAEM,8BAAyB,GAAG,CAAC,iBAAwD,EAAE,EAAE;gBAC9F,IAAI,CAAC,eAAe,GAAG,iBAAiB,CAAC,2FAAsB,CAAC,OAAO,CAAC,CAAC;YAC5E,CAAC,CAAC;QAxCF,CAAC;QAlBD,IACI,kBAAkB;YACnB,OAAO,CAAC,IAAI,CAAC,eAAe,IAAI,IAAI,CAAC,eAAe,CAAC,MAAM,GAAG,CAAC,CAAC,IAAI,IAAI,CAAC,kBAAkB,IAAI,IAAI,CAAC,YAAY,CAAC,CAAC;gBAC5G,EAAE,CAAC,CAAC,CAAC,2BAA2B,CAAC,uBAAuB,CAAC;QAClE,CAAC;QAgBK,QAAQ;;gBACX,MAAM,IAAI,CAAC,KAAK,EAAE,CAAC;gBACnB,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,KAAK,EAAE,EAAE,2BAA2B,CAAC,aAAa,CAAC,CAAC;YAC9F,CAAC;SAAA;QAGa,KAAK;;gBAChB,IAAI;oBACD,MAAM,MAAM,GAAU,MAAM,OAAO,CAAC,GAAG,CAAC;wBACrC,IAAI,CAAC,eAAe,CAAC,iBAAiB,CAAC,qEAAa,CAAC,aAAa,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC;wBACrF,IAAI,CAAC,gBAAgB,CAAC,qBAAqB,CAAC,qEAAa,CAAC,aAAa,CAAC;qBAC1E,CAAC,CAAC;oBACH,IAAI,MAAM,IAAI,MAAM,CAAC,MAAM,KAAK,CAAC,EAAE;wBAChC,IAAI,CAAC,0BAA0B,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;wBAC3C,IAAI,CAAC,yBAAyB,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;qBAC5C;iBACH;gBAAC,OAAO,KAAK,EAAE;oBACb,mDAAM,CAAC,KAAK,CAAC,oBAAoB,KAAK,yDAAyD,CAAC,CAAC;oBACjG,IAAI,CAAC,eAAe,GAAG,EAAE,CAAC;oBAC1B,IAAI,CAAC,kBAAkB,GAAG,SAAS,CAAC;oBACpC,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC;iBAC5B;YACJ,CAAC;SAAA;;IApCuB,wDAA4B,GAAW,0BAA0B,CAAC;IAClE,mDAAuB,GAAW,mBAAmB,CAAC;IACtD,yCAAa,GAAW,IAAI,CAAC;IAkBrD;QADC,8EAAc;;;;4DAiBd;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;iHCrEJ,onBAEwC,8EACxC,mDADiB,mBAAsB,eAFvC,YAEwC,EAAvB,SAAsB;iHAQpC,4lBACwE,iFACrE,wTAAsC,+EAAsB,MAAO,0EACtE,yDADyC,+DAAsB;iHAG/D,8hBAA+D,iFAC5D,wTAAsC,+EAAkB,MAAO,0EAClE,iCADyC,6DAAkB;iHAX9D,+gCAGsC,8EACnC,MAA+D,0EAC/D,uZACwE,IAEvD,0EACjB,MAA0B,0EAC1B,ieAA+D,IAE9C,uEACpB,mDAVW,qBAA0B,EAD1B,yBAA0B,EAFrC,YAGsC,EAA3B,SAA0B,EAD1B,SAA0B,GAGlB,mBAA0B,qBAA1C,YACwE,EADxD,SAA0B,GAK1B,mBAA8C,kBAA9D,aAA+D,EAA/C,SAA8C;iHAhBkB,0EACnF,0ZAEwC,IACtB,0EAClB,MAAuB,0EACvB,0ZAGsC,IAU1B,0EACZ,mDAlBiB,mBAAoB,eADrC,YAEwC,EADvB,SAAoB,GAI1B,2FAAqD,sBAAhE,YAGsC,EAH3B,SAAqD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACNhE,kFAAkF;AACL;AACf;AACF;AAIO;AACH;AAEgB;AAEjB;AACA;AACd;AAOiB;AACX;AAID;AACtB;AACI;AACa;AACyB;AAC9B;AACI;AAE+C;AACrB;AAQnE,MAAM,uBAAuB;IA+GjC,YAAoB,eAAgC,EACtC,qBAA4C,EAC5C,sBAA8C,EAC9C,kBAA0C,EAC1C,iBAAoC,EACpC,iBAAoC;QAL9B,oBAAe,GAAf,eAAe,CAAiB;QACtC,0BAAqB,GAArB,qBAAqB,CAAuB;QAC5C,2BAAsB,GAAtB,sBAAsB,CAAwB;QAC9C,uBAAkB,GAAlB,kBAAkB,CAAwB;QAC1C,sBAAiB,GAAjB,iBAAiB,CAAmB;QACpC,sBAAiB,GAAjB,iBAAiB,CAAmB;QAlHjC,yBAAoB,GAAsB;YACxD,2EAAe,CAAC,mBAAmB;YACnC,2EAAe,CAAC,WAAW;YAC3B,2EAAe,CAAC,QAAQ;YACxB,2EAAe,CAAC,qBAAqB;SACvC,CAAC;QAEO,SAAI,GAAS,gDAAI,CAAC;QAK3B,0BAAqB,GAAyB,EAAE,CAAC;QA2BjD,wBAAmB,GAAmC,IAAI,0DAAY,EAAoB,CAAC;QA2B3F,kBAAa,GAAuB,IAAI,0DAAY,EAAQ,CAAC;IAiD7D,CAAC;IA/DD,IACI,eAAe,CAAC,SAAkB;QACnC,IAAI,CAAC,gBAAgB,GAAG,SAAS,CAAC;QAClC,IAAI,CAAC,SAAS,IAAI,IAAI,CAAC,MAAM,EAAE;YAC5B,IAAI,CAAC,UAAU,EAAE,CAAC;YAClB,IAAI,CAAC,mBAAmB,EAAE,CAAC;SAC7B;IACJ,CAAC;IAED,IAAI,eAAe;QAChB,OAAO,IAAI,CAAC,gBAAgB,CAAC;IAChC,CAAC;IAcD,IAAI,cAAc,CAAC,KAAc;QAC9B,IAAI,IAAI,CAAC,eAAe,KAAK,KAAK,EAAE;YACjC,IAAI,CAAC,eAAe,GAAG,KAAK,CAAC;YAC7B,IAAI,CAAC,mBAAmB,EAAE,CAAC;SAC7B;IACJ,CAAC;IAED,IAAI,cAAc;QACf,OAAO,IAAI,CAAC,eAAe,CAAC;IAC/B,CAAC;IAED,IAAI,kBAAkB;QACnB,MAAM,eAAe,GACf,IAAI,GAAG,EAA+C,CAAC;QAC7D,IAAI,IAAI,CAAC,MAAM,CAAC,eAAe,IAAI,IAAI,EAAE;YACtC,eAAe,CAAC,GAAG,CAAC,yFAAc,CAAC,IAAI,EAAE,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC,CAAC;SACxE;QACD,IAAI,IAAI,CAAC,MAAM,CAAC,yBAAyB,IAAI,IAAI,EAAE;YAChD,eAAe,CAAC,GAAG,CAAC,yFAAc,CAAC,WAAW,EAAE,IAAI,CAAC,MAAM,CAAC,yBAAyB,CAAC,CAAC;SACzF;QAED,OAAO,eAAe,CAAC;IAC1B,CAAC;IAED,IAAI,2BAA2B;QAC5B,OAAO,IAAI,CAAC,MAAM,CAAC,eAAe,IAAI,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC,aAAa,GAAG,CAAC,CAAC;IACvF,CAAC;IAED,IAAI,4BAA4B;QAC7B,OAAO,IAAI,CAAC,YAAY,IAAI,IAAI,CAAC,YAAY,CAAC,4BAA4B,CAAC;IAC9E,CAAC;IAUK,QAAQ;;YACX,MAAM,UAAU,GAAkB,sEAAa,CAAC,aAAa,CAAC;YAC9D,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC;YAE/B,IAAI;gBACD,IAAI,UAAgC,CAAC;gBACrC,IAAI,cAA8B,CAAC;gBACnC,CAAC,UAAU,EAAE,IAAI,CAAC,YAAY,EAAE,cAAc,CAAC,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC;oBACjE,IAAI,CAAC,iBAAiB,CAAC,gBAAgB,CACjC,UAAU,EAAE;wBACT,gEAAU,CAAC,YAAY,EAAE;wBACzB,gEAAU,CAAC,cAAc,EAAE;wBAC3B,gEAAU,CAAC,gBAAgB,EAAE;qBAC/B,CAAC;oBACR,IAAI,CAAC,kBAAkB,CAAC,wBAAwB,CAAC,UAAU,CAAC;oBAC5D,IAAI,CAAC,iBAAiB,CAAC,iBAAiB,CAAC,UAAU,CAAC;iBACtD,CAAC,CAAC;gBAEH,IAAI,CAAC,iBAAiB,GAAG,UAAU,CAAC,gEAAU,CAAC,YAAY,EAAE,CAAC,CAAC;gBAC/D,IAAI,CAAC,iBAAiB,GAAG,UAAU,CAAC,gEAAU,CAAC,gBAAgB,EAAE,CAAC,CAAC;gBACnE,IAAI,CAAC,oBAAoB,GAAG,UAAU,CAAC,gEAAU,CAAC,cAAc,EAAE,CAAC,CAAC;gBACpE,IAAI,CAAC,aAAa,GAAG,cAAc,CAAC,cAAc,CAAC;aACrD;YAAC,OAAO,KAAK,EAAE;gBACb,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC;gBAC9B,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC;gBAC9B,IAAI,CAAC,oBAAoB,GAAG,IAAI,CAAC;gBACjC,oDAAM,CAAC,KAAK,CAAC,gGAAgG;sBACrG,KAAK,CAAC,CAAC;aACjB;oBAAS;gBACP,IAAI,CAAC,kBAAkB,GAAG,KAAK,CAAC;aAClC;YACD,IAAI,CAAC,IAAI,CAAC,eAAe,EAAE;gBACxB,MAAM,IAAI,CAAC,UAAU,EAAE,CAAC;aAC1B;YACD,IAAI,CAAC,mBAAmB,EAAE,CAAC;YAC3B,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;QACtB,CAAC;KAAA;IAEa,UAAU;;YACrB,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC;YAC1B,IAAI;gBACD,MAAM,SAAS,GAAsB,IAAI,CAAC,cAAc,CAAC,IAAI,KAAK,kFAAkB,CAAC,IAAI;oBACnF,CAAC,CAAC,+EAAiB,CAAC,sBAAsB;oBAC1C,CAAC,CAAC,+EAAiB,CAAC,oBAAoB,CAAC;gBAC/C,IAAI,CAAC,MAAM,GAAG,MAAM,IAAI,CAAC,eAAe,CAAC,iBAAiB,CACpD,sEAAa,CAAC,aAAa,EAAE,IAAI,CAAC,cAAc,EAAE,IAAI,CAAC,gBAAgB,CAAC,QAAQ,EAAE,EAAE,SAAS,CAAC,CAAC;aACvG;YAAC,OAAO,KAAK,EAAE;gBACb,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC;aAC5B;YACD,IAAI,CAAC,aAAa,GAAG,KAAK,CAAC;YAC3B,IAAI,CAAC,aAAa,CAAC,IAAI,EAAE,CAAC;YAE1B,mGAAmG;YACnG,IAAI,CAAC,IAAI,CAAC,MAAM,IAAI,IAAI,CAAC,MAAM,CAAC,IAAI,KAAK,IAAI,CAAC,cAAc,CAAC,IAAI;gBAC3D,IAAI,CAAC,MAAM,CAAC,gBAAgB,KAAK,IAAI,CAAC,gBAAgB,CAAC,QAAQ,EAAE,EAAE;gBACtE,OAAO;aACT;YAED,IAAI,IAAI,CAAC,MAAM,CAAC,WAAW,EAAE;gBAC1B,IAAI,CAAC,uBAAuB,GAAG,IAAI,CAAC,qBAAqB,CAAC,uBAAuB,CAAC,IAAI,CAAC,MAAM,CAAC,WAAW,EACnG,IAAI,CAAC,cAAc,CAAC,IAAI,EAAE,IAAI,CAAC,gBAAgB,CAAC,CAAC;gBACvD,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC;gBACvD,OAAO;aACT;YAED,IAAI,IAAI,CAAC,MAAM,CAAC,iBAAiB,EAAE;gBAChC,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,qBAAqB,CAAC,uBAAuB,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;gBAClF,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,KAAK,+FAAwB,CAAC,GAAG,CAAC;gBAC1E,IAAI,CAAC,qBAAqB,GAAG,IAAI,CAAC,qBAAqB,CAAC,kBAAkB,CAAC,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC,CAAC;gBACxG,gEAAgE;gBAChE,IAAI,CAAC,IAAI,CAAC,cAAc,EAAE;oBACvB,IAAI,CAAC,2BAA2B,GAAG,IAAI,CAAC,qBAAqB,CAAC,wBAAwB,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;oBACpG,IAAI,CAAC,qBAAqB,GAAG,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC;oBACxD,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC,qBAAqB,CAAC,gBAAgB,CAAC,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC;oBAClG,IAAI,CAAC,wBAAwB,GAAG,IAAI,CAAC,qBAAqB,EAAE,CAAC;iBAC/D;qBAAM;oBACJ,IAAI,CAAC,qBAAqB,GAAG,EAAE,CAAC;iBAClC;aACH;QACJ,CAAC;KAAA;IAED,uBAAuB;QACpB,OAAO,IAAI,CAAC,cAAc,CAAC,IAAI,KAAK,kFAAkB,CAAC,IAAI;YACrD,IAAI,CAAC,YAAY,CAAC,2BAA2B;YAC7C,IAAI,CAAC,gBAAgB,KAAK,6EAAgB,CAAC,yBAAyB,CAAC;IAC9E,CAAC;IAED,6BAA6B;QAC1B,MAAM,OAAO,GAAsC;YAChD,gBAAgB,EAAE,IAAI,CAAC,gBAAgB;YACvC,cAAc,EAAE,IAAI,CAAC,cAAc;YACnC,UAAU,EAAE,sEAAa,CAAC,aAAa;YACvC,oBAAoB,EAAE,IAAI,CAAC,MAAM,CAAC,oBAAoB;YACtD,sBAAsB,EAAE,IAAI,CAAC,MAAM,CAAC,sBAAsB;SAC5D,CAAC;QAEF,IAAI,iEAAY,CAAC,6CAA6C,CAAC;aACxD,OAAO,CAAC,6GAAmC,CAAC,gBAAgB,EACvD,6GAAmC,CAAC,iBAAiB,CAAC;aAC3D,IAAI,CAAC,OAAO,CAAC;aACb,IAAI,CAAC,OAAO,CAAC,EAAE;YACb,IAAI,CAAC,UAAU,CAAC,OAAO,EAAE,8EAAgB,CAAC,2BAA2B,CAAC,CAAC;QAC1E,CAAC,CAAC,CAAC;IACZ,CAAC;IAED,eAAe;QACZ,IAAI,CAAC,IAAI,CAAC,mBAAmB,EAAE,EAAE;YAC9B,OAAO;SACT;QACD,IAAI,iEAAY,CAAC,GAAG,wDAAU,CAAC,oBAAoB,kBAAkB,CAAC;aAC/D,OAAO,CAAC,0FAAuB,CAAC,uBAAuB,EAClD,0FAAuB,CAAC,8BAA8B,CAAC;aAC5D,IAAI,CAAC,IAAI,CAAC,yBAAyB,EAAE,CAAC;aACtC,IAAI,CAAC,OAAO,CAAC,EAAE;YACb,IAAI,CAAC,UAAU,CAAC,OAAO,EAAE,8EAAgB,CAAC,iBAAiB,CAAC,CAAC;QAChE,CAAC,CAAC,CAAC;IACZ,CAAC;IAED,iBAAiB;QACd,IAAI,CAAC,IAAI,CAAC,mBAAmB,EAAE,EAAE;YAC9B,OAAO;SACT;QACD,IAAI,iEAAY,CAAC,GAAG,wDAAU,CAAC,oBAAoB,oBAAoB,CAAC;aACjE,OAAO,CAAC,0FAAuB,CAAC,qBAAqB,EAChD,0FAAuB,CAAC,4BAA4B,CAAC;aAC1D,IAAI,CAAC,IAAI,CAAC,yBAAyB,EAAE,CAAC;aACtC,IAAI,CAAC,OAAO,CAAC,EAAE;YACb,IAAI,CAAC,UAAU,CAAC,OAAO,EAAE,8EAAgB,CAAC,kBAAkB,CAAC,CAAC;QACjE,CAAC,CAAC,CAAC;IACZ,CAAC;IAED,gBAAgB;QACb,IAAI,CAAC,IAAI,CAAC,mBAAmB,EAAE,EAAE;YAC9B,OAAO;SACT;QACD,IAAI,iEAAY,CAAC,GAAG,wDAAU,CAAC,oBAAoB,mBAAmB,CAAC;aAChE,OAAO,CAAC,0FAAuB,CAAC,+BAA+B,EAC1D,0FAAuB,CAAC,sCAAsC,CAAC;aACpE,IAAI,CAAC,IAAI,CAAC,yBAAyB,EAAE,CAAC;aACtC,IAAI,CAAC,OAAO,CAAC,EAAE;YACb,IAAI,CAAC,UAAU,CAAC,OAAO,EAAE,8EAAgB,CAAC,iBAAiB,CAAC,CAAC;QAChE,CAAC,CAAC,CAAC;IACZ,CAAC;IAEO,mBAAmB;QACxB,OAAO,IAAI,CAAC,cAAc,CAAC,IAAI,KAAK,kFAAkB,CAAC,UAAU,CAAC;IACrE,CAAC;IAEO,yBAAyB;QAC9B,OAAO;YACJ,gBAAgB,EAAE,IAAI,CAAC,gBAAgB;YACvC,IAAI,EAAE,uEAAc,CAAC,kBAAkB,CAAC,IAAI,CAAC,cAAc,CAAC;YAC5D,SAAS,EAAE,kFAAmB,CAAC,kBAAkB,CAAC,IAAI,CAAC,cAAc,CAAC;SACxE,CAAC;IACL,CAAC;IAEO,UAAU,CAAC,OAAsB,EAAE,gBAAkC;QAC1E,MAAM,YAAY,GAAqB,8EAAgB,CAAC,OAAO,CAAC,MAAM,CAChE,OAAO,EAAE,IAAI,CAAC,cAAc,CAAC,IAAI,EAAE,IAAI,CAAC,cAAc,CAAC,IAAI,EAC3D,IAAI,EAAE,IAAI,CAAC,gBAAgB,EAAE,gBAAgB,CAAC,CAAC;QACrD,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;IAC/C,CAAC;IAEO,qBAAqB;QAC1B,OAAO,IAAI,CAAC,MAAM,CAAC,eAAe;YAC5B,CAAC,CAAC,IAAI,CAAC,qBAAqB,CAAC,qBAAqB,CAAC,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC,mBAAmB,CAAC;YACnG,CAAC,CAAC,EAAE,CAAC;IACd,CAAC;IAED,UAAU;QACP,IAAI,IAAI,CAAC,cAAc,CAAC,IAAI,KAAK,kFAAkB,CAAC,IAAI,EAAE;YACvD,OAAO;SACT;QAED,MAAM,OAAO,GAAuB;YACjC,KAAK,EAAE,CAAC,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC;YACrC,gBAAgB,EAAE,IAAI,CAAC,gBAAgB;YACvC,IAAI,EAAE,uEAAc,CAAC,kBAAkB,CAAC,IAAI,CAAC,cAAc,CAAC;YAC5D,UAAU,EAAE,IAAI,CAAC,sBAAsB,EAAE;YACzC,gBAAgB,EAAE,IAAI,CAAC,gBAAgB;SACzC,CAAC;QACF,IAAI,iEAAY,CAAC,GAAG,wDAAU,CAAC,oBAAoB,cAAc,CAAC;aAC3D,OAAO,CAAC,0FAAuB,CAAC,kBAAkB,EAC7C,0FAAuB,CAAC,yBAAyB,CAAC;aACvD,IAAI,CAAC,OAAO,CAAC;aACb,IAAI,CAAC,CAAC,QAAyB,EAAE,EAAE;YACjC,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,8EAAgB,CAAC,YAAY,CAAC,CAAC;QAC/D,CAAC,CAAC,CAAC;IACZ,CAAC;IAED,kBAAkB;QACf,IAAI,IAAI,CAAC,cAAc,CAAC,IAAI,KAAK,kFAAkB,CAAC,IAAI,EAAE;YACvD,OAAO;SACT;QAED,MAAM,OAAO,GAAuB;YACjC,IAAI,EAAE,IAAI,CAAC,cAAc,CAAC,QAAQ;YAClC,gBAAgB,EAAE,IAAI,CAAC,gBAAgB;YACvC,IAAI,EAAE,uEAAc,CAAC,kBAAkB,CAAC,IAAI,CAAC,cAAc,CAAC;SAC9D,CAAC;QACF,IAAI,iEAAY,CAAC,GAAG,wDAAU,CAAC,oBAAoB,cAAc,CAAC;aAC3D,OAAO,CAAC,0FAAuB,CAAC,yBAAyB,EACpD,0FAAuB,CAAC,gCAAgC,CAAC;aAC9D,IAAI,CAAC,OAAO,CAAC;aACb,IAAI,CAAC,CAAC,IAAmB,EAAE,EAAE;YAC3B,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE,8EAAgB,CAAC,YAAY,CAAC,CAAC;QACxD,CAAC,CAAC,CAAC;IACZ,CAAC;IAED,uBAAuB;QACpB,MAAM,wBAAwB,GAAW,IAAI,CAAC,MAAM,CAAC,eAAe,IAAI,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC,aAAa,CAAC;QAClH,OAAO,IAAI,CAAC,qBAAqB,CAAC,iBAAiB,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE,IAAI,CAAC,cAAc,CAAC,IAAI,EAC1F,IAAI,CAAC,MAAM,CAAC,UAAU,EAAE,wBAAwB,EAAE,IAAI,CAAC,gBAAgB,CAAC,CAAC;IAClF,CAAC;IAEO,mBAAmB;QACxB,IAAI,CAAC,2BAA2B,GAAG,KAAK,CAAC;QACzC,IAAI,CAAC,sBAAsB,GAAG,KAAK,CAAC;QACpC,IAAI,CAAC,wBAAwB,GAAG,KAAK,CAAC;QACtC,IAAI,CAAC,uBAAuB,GAAG,KAAK,CAAC;QACrC,IAAI,CAAC,iBAAiB,GAAG,KAAK,CAAC;QAC/B,IAAI,CAAC,yBAAyB,GAAG,KAAK,CAAC;QACvC,IAAI,IAAI,CAAC,cAAc,EAAE;YACtB,OAAO;SACT;QAED,QAAQ,IAAI,CAAC,cAAc,CAAC,IAAI,EAAE;YAC/B,KAAK,kFAAkB,CAAC,IAAI;gBACzB,IAAI,CAAC,2BAA2B,GAAG,IAAI,CAAC;gBACxC,IAAI,CAAC,kCAAkC,GAAG,CAAC,IAAI,CAAC,iBAAiB,IAAI,CAAC,IAAI,CAAC,iBAAiB;oBACtF,CAAC,CAAC,4DAAW,CAAC,SAAS,CAAC,2BAA2B,CAAC;oBACpD,CAAC,CAAC,EAAE,CAAC;gBACX,MAAM;YACT,KAAK,kFAAkB,CAAC,UAAU;gBAC/B,IAAI,CAAC,sBAAsB,GAAG,CAAC,IAAI,CAAC,aAAa,CAAC;gBAClD,IAAI,CAAC,wBAAwB,GAAG,CAAC,IAAI,CAAC,aAAa;uBAC1C,IAAI,CAAC,4BAA4B;uBACjC,IAAI,CAAC,cAAc,CAAC,aAAa,CAAC,SAAS,CAAC;gBACrD,IAAI,CAAC,uBAAuB,GAAG,IAAI,CAAC;gBACpC,MAAM;YACT,KAAK,kFAAkB,CAAC,IAAI;gBACzB,IAAI,CAAC,iBAAiB,GAAG,CAAC,IAAI,CAAC,aAAa,CAAC;gBAC7C,IAAI,CAAC,yBAAyB,GAAG,IAAI,CAAC,gBAAgB,CAAC;gBACvD,IAAI,CAAC,4BAA4B,GAAG,CAAC,IAAI,CAAC,iBAAiB,IAAI,CAAC,IAAI,CAAC,oBAAoB,CAAC;gBAC1F,IAAI,CAAC,gCAAgC,GAAG,IAAI,CAAC,4BAA4B;oBACnE,CAAC,CAAC,4DAAW,CAAC,SAAS,CAAC,2BAA2B,CAAC;oBACpD,CAAC,CAAC,EAAE,CAAC;gBACX,MAAM;SACX;IACJ,CAAC;IAED,cAAc,CAAC,KAAa;QACzB,OAAO,IAAI,CAAC,qBAAqB,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;IAC3D,CAAC;IAED,2BAA2B;;QACxB,OAAO,CAAC,CAAD,MAAC,IAAI,CAAC,MAAM,0CAAE,mBAAmB;YAClC,CAAC,CAAC,CAAC;YACH,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,mBAAmB,CAAC,MAAM,CAAC;IAClD,CAAC;IAED,2BAA2B;;QACxB,OAAO,CAAC,CAAD,MAAC,IAAI,CAAC,MAAM,0CAAE,mBAAmB;YAClC,CAAC,CAAC,CAAC;YACH,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,mBAAmB,CAAC,MAAM,CAAC;IAClD,CAAC;IAED,wCAAwC;QACrC,OAAO,CAAC,IAAI,CAAC,MAAM;YACb,CAAC,CAAC,CAAC;YACH,CAAC,CAAC,IAAI,CAAC,6BAA6B,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC;IAC1E,CAAC;IAEO,6BAA6B,CAAC,cAAoC;QACvE,IAAI,CAAC,eAAc,aAAd,cAAc,uBAAd,cAAc,CAAE,MAAM,GAAE;YAC1B,OAAO,CAAC,CAAC;SACX;QACD,qFAAqF;QACrF,MAAM,6BAA6B,GAAyB,cAAc,CAAC,MAAM,CAC3E,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,KAAK,KAAK,GAAG,CAAC,eAAe,CAAC,CAClF,CAAC;QACF,IAAI,KAAK,GAAW,6BAA6B,CAAC,MAAM,CAAC;QACzD,qFAAqF;QACrF,cAAc,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,CAAC,KAAK,IAAI,IAAI,CAAC,6BAA6B,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,CAAC;QACzF,OAAO,KAAK,CAAC;IAChB,CAAC;IAEO,sBAAsB;QAC3B,OAAO,IAAI,CAAC,gBAAgB;YACtB,CAAC,CAAC,EAAE;YACJ,CAAC,CAAC,CAAC,kFAAmB,CAAC,kBAAkB,CAAC,IAAI,CAAC,uBAAuB,CAAC,CAAC,CAAC;IAClF,CAAC;CACH;;;;;;;;;;;;;;ACtcD;AAAA;AAAA;AAAA,kFAAkF;AAC3E;UAAM,cAAc;;IACR,yCAA0B,GAAyB;QAChE,KAAK,EAAE,GAAG;QACV,MAAM,EAAE,GAAG;KACb,CAAC;IAEc,mCAAoB,GAAyB;QAC1D,KAAK,EAAE,GAAG;QACV,MAAM,EAAE,GAAG;KACb,CAAC;IAEc,oCAAqB,GAAyB;QAC3D,KAAK,EAAE,IAAI;QACX,MAAM,EAAE,GAAG;KACb,CAAC;IAEc,2CAA4B,GAAyB;QAClE,KAAK,EAAE,GAAG;QACV,MAAM,EAAE,GAAG;KACb,CAAC;IAEc,sDAAuC,GAAyB;QAC7E,KAAK,EAAE,GAAG;QACV,MAAM,EAAE,GAAG;KACb,CAAC;IAEc,2CAA4B,GAAyB;QAClE,KAAK,EAAE,GAAG;QACV,MAAM,EAAE,GAAG;KACb,CAAC;IAEF,+CAA+C;IAC/B,sCAAuB,GAAyB;QAC7D,KAAK,EAAE,GAAG;QACV,MAAM,EAAE,GAAG;KACb,CAAC;IAEc,+CAAgC,GAAyB;QACtE,KAAK,EAAE,GAAG;QACV,MAAM,EAAE,GAAG;KACb,CAAC;IAEc,+CAAgC,GAAyB;QACtE,KAAK,EAAE,IAAI;QACX,MAAM,EAAE,GAAG;KACb,CAAC;IAEc,yDAA0C,GAAyB;QAChF,KAAK,EAAE,IAAI;QACX,MAAM,EAAE,GAAG;KACb,CAAC;IAEc,0CAA2B,GAAyB;QACjE,KAAK,EAAE,GAAG;QACV,MAAM,EAAE,GAAG;KACb,CAAC;IAEc,4CAA6B,GAAyB;QACnE,KAAK,EAAE,GAAG;QACV,MAAM,EAAE,GAAG;KACb,CAAC;IAEc,wCAAyB,GAAyB;QAC/D,KAAK,EAAE,IAAI;QACX,MAAM,EAAE,GAAG;KACb,CAAC;IAEc,4CAA6B,GAAyB;QACnE,KAAK,EAAE,GAAG;QACV,MAAM,EAAE,GAAG;KACb,CAAC;;;AAGE,MAAM,oBAAoB;CAGhC;;;;;;;;;;;;;;;;;;;AC3E+B;AASzB,MAAM,kCAAkC;IA2B5C,YAAoB,qBAA4C;QAA5C,0BAAqB,GAArB,qBAAqB,CAAuB;QArBhE,6BAAwB,GAAW,CAAC,CAAC;QAGrC,6BAAwB,GAAW,CAAC,CAAC;QAGrC,6BAAwB,GAAW,CAAC,CAAC;IAgBrC,CAAC;IAEK,QAAQ;;YACX,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;YACpB,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,qBAAqB,CAAC,iBAAiB,CAAC,IAAI,CAAC,wBAAwB,EACzF,IAAI,CAAC,wBAAwB,EAAE,IAAI,CAAC,wBAAwB,CAAC,CAAC;YACpE,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE;gBACnB,IAAI,CAAC,mCAAmC,GAAG,IAAI,CAAC;gBAChD,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;gBACrB,OAAO;aACT;YAED,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;QACxB,CAAC;KAAA;IAED,YAAY;QACT,OAAO,+CAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;IACrD,CAAC;CACH;;;;;;;;;;;;;;ACzDD;AAAA;AAAA,6EAA6E;AAE7E;;;;;;;;;;;;;;;;;;GAkBG;AACI;UAAM,kBAAkB;QAS5B,YAAoB,cAAmB,EACzB,UAAkB;YADZ,mBAAc,GAAd,cAAc,CAAK;YACzB,eAAU,GAAV,UAAU,CAAQ;YAC7B,IAAI,CAAC,UAAU,GAAG,UAAU,IAAI,kBAAkB,CAAC,YAAY,CAAC;YAEhE,uBAAuB;YACvB,IAAI,CAAC,cAAc,CAAC,kBAAkB,CAAC,YAAY,CAAC,CAAC;YACrD,IAAI,CAAC,cAAc,CAAC,kBAAkB,CAAC,yBAAyB,CAAC,CAAC;YAClE,IAAI,CAAC,cAAc,CAAC,kBAAkB,CAAC,gCAAgC,CAAC,CAAC;YACzE,IAAI,CAAC,cAAc,CAAC,kBAAkB,CAAC,kBAAkB,CAAC,CAAC;QAC9D,CAAC;QAEO,cAAc,CAAC,cAAsB;YAC1C,4EAA4E;YAC5E,uEAAuE;YACvE,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,EAAE;gBACtC,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,GAAG,EAAE,CAAC;aAC1C;QACJ,CAAC;QAED;;WAEG;QACH,IAAI,aAAa;YACd,OAAO,IAAI,CAAC,cAAc,CAAC;QAC9B,CAAC;QAED;;WAEG;QACH,IAAI,KAAK;YACN,OAAO,IAAI,CAAC,aAAa,CAAC,kBAAkB,CAAC,YAAY,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QAC/E,CAAC;QAED;;WAEG;QACH,IAAI,KAAK,CAAC,GAAQ;YACf,IAAI,CAAC,aAAa,CAAC,kBAAkB,CAAC,YAAY,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,GAAG,GAAG,CAAC;QAC9E,CAAC;QAED;;WAEG;QACH,IAAY,UAAU;YACnB,OAAO,IAAI,CAAC,aAAa,CAAC,kBAAkB,CAAC,kBAAkB,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QACrF,CAAC;QAED;;WAEG;QACH,IAAI,SAAS;YACV,OAAO,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC;QAC5B,CAAC;QAED;;WAEG;QACH,cAAc;YACX,2DAA2D;YAC3D,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE;gBACnB,IAAI,CAAC,aAAa,CAAC,kBAAkB,CAAC,kBAAkB,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;aACjF;YACD,IAAI,CAAC,aAAa,CAAC,kBAAkB,CAAC,kBAAkB,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;QACnF,CAAC;QAED;;WAEG;QACH,cAAc;YACX,IAAI,CAAC,aAAa,CAAC,kBAAkB,CAAC,kBAAkB,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;QACnF,CAAC;QAED,IAAI,YAAY;YACb,OAAO,IAAI,CAAC,aAAa,CAAC,kBAAkB,CAAC,yBAAyB,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QAC5F,CAAC;QAED;;WAEG;QACH,IAAI,YAAY,CAAC,YAAiB;YAC/B,IAAI,CAAC,CAAC,IAAI,CAAC,YAAY,EAAE;gBACtB,MAAM,IAAI,KAAK,CAAC,4BAA4B,IAAI,CAAC,UAAU,uBAAuB,CAAC,CAAC;aACtF;YACD,IAAI,CAAC,aAAa,CAAC,kBAAkB,CAAC,yBAAyB,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,GAAG,YAAY,CAAC;QACpG,CAAC;QAED,IAAI,kBAAkB;YACnB,OAAO,IAAI,CAAC,aAAa,CAAC,kBAAkB,CAAC,gCAAgC,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QACnG,CAAC;QAED,IAAI,kBAAkB,CAAC,MAAW;YAC/B,IAAI,CAAC,CAAC,IAAI,CAAC,kBAAkB,EAAE;gBAC5B,MAAM,IAAI,KAAK,CAAC,4BAA4B,IAAI,CAAC,UAAU,uBAAuB,CAAC,CAAC;aACtF;YACD,IAAI,CAAC,aAAa,CAAC,kBAAkB,CAAC,gCAAgC,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,GAAG,MAAM,CAAC;QACrG,CAAC;;IAtGuB,+BAAY,GAAW,QAAQ,CAAC;IAChC,4CAAyB,GAAW,mBAAmB,CAAC;IACxD,mDAAgC,GAAW,yBAAyB,CAAC;IACrE,qCAAkB,GAAW,gBAAgB,CAAC;IAE9C,+BAAY,GAAW,gBAAgB,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;uGCxBnE,wmBAEwC,8EACxC,mDADiB,mBAAsB,eAFvC,YAEwC,EAAvB,SAAsB;uGAGvC,2JAAqD,iXAA8B;uGAGhF,2lCAG6D,iFAC7D,mDAHuB,mBAAuC,kBAEvC,mBAAqC,mBADrC,mBAAyB,aAFhD,YAG6D,EAFtC,SAAuC,EAEvC,SAAqC,EADrC,SAAyB;;mEAsB7C,yJAA4D,wFACzD,MAAiD,mFACjD;YAAA;YAAA,YAEiF;YAA3E;;gCAA0E;;YAFhF;QAAA,moBAEiF,yFACjF,MAAmC,qFAEnC;YAAA;YAAA,YAIsC;YAA9B;;gCAA6B;;YAJrC;QAAA,aAIsC,IAF9B,uDACiF,IACnD,iKAEtC,IAAS,gFACZ,mDAXS,mBAAqD,2BAD3D,YAEiF,EAD3E,SAAqD,mDAKnD,mBAAyC,+BACzC,4VACiF,GAHzF,YAIsC,EAH9B,SAAyC,EACzC,SACiF,GACnD,kPAEtC;AAAA;uGAGH,qKAAgF,iOAEhF;uGAEA,uHAAkC,2FAC5B,kOACsD,2FACtD,MAAO,mFACV,gLAAoD,gFAAiC,MAAO,gFAC/F,yDADuD,0EAAiC;;mEAGxF;YAAA;YAAA,YAQoE;YAH9C;;gCAAqD;;YAErD;;gCAAqC;;YAP3D;QAAA,gtCAQoE,sFACpE,mDANsB,mBAAmD,0BADnD,mBAAyC,yBAMzC,mBAA6C,2BAJ7C,mBAAqC,mBAErC,mBAAmC,kBANzD,YAQoE,EAL9C,SAAmD,EADnD,SAAyC,EAMzC,SAA6C,EAJ7C,SAAqC,EAErC,SAAmC;AAAA;;mEAnD5D,yHAAuC,qFACpC,MAA4B,gFAC5B;YAAA;YAAA,YAEuE;YAA5C;;gCAA2C;;YAFtE;QAAA,iqCAEuE,sFACvE,MAA4B,kFAE5B,6HAAK,gFAA4B,MAAM,kFAEvC,MAAgD,gFAChD;YAAA;YAAA,YAKwE;YAAlE;;gCAAiE;;YALvE;QAAA,oxBAKwE,KAJlE,wDAA8D,IAII,gFACxE,MAAgC,kFAEhC,kZAA4D,IActD,gFACN,MAAmE,gFACnE,kZAAgF,IAE1E,gFACN,MAAiD,gFACjD,kZAAkC,IAK5B,gFACN,MAAsB,gFACtB,kZAQoE,IAC7C,6EAC1B,mDArD8B,mBAAmE,kCACnE,mBAAqC,mBADhE,YAEuE,EAF5C,SAAmE,EACnE,SAAqC,GAQ1D,8MAA8D,IAC9D,mBAAmC,4BAEnC,6EAAyF,EADzF,mBAAgD,2BAHtD,aAKwE,EAJlE,SAA8D,EAC9D,SAAmC,EAEnC,SAAyF,EADzF,SAAgD,GAKjD,mBAAyB,oBAA9B,aAA4D,EAAvD,SAAyB,GAgBzB,mBAAgC,2BAArC,aAAgF,EAA3E,SAAgC,GAIhC,oBAA4B,uBAAjC,aAAkC,EAA7B,UAA4B,GAQX,oBAAkB,aADxC,aAQoE,EAP9C,UAAkB,mDA5CxC,qHAEuE,GAGlE,qEAA4B;AAAA;uGAdvC,wHAA+B,kFAC5B,iZAG6D,IACrC,+EAExB,iZAAuC,IAuDxB,0EAClB,mDA9D0B,mBAAuB,kBAA9C,YAG6D,EAHtC,SAAuB,GAMhC,oBAAwB,kBAAtC,YAAuC,EAAzB,SAAwB;mPAlB0C,0EACnF,o1BAAoB,kJAEpB,IAAK,0EACL,iZAEwC,IACtB,4EAElB,kZAAqD,IAAoC,4EAEzF,kZAA+B,IA+DhB,0EACf,mDA1EI,kBAAe,EAAnB,YAAoB,EAAhB,SAAe,GAIF,mBAAoB,eADrC,YAEwC,EADvB,SAAoB,GAIhC,mBAAe,UAApB,aAAqD,EAAhD,SAAe,GAEN,oBAAgB,UAA9B,aAA+B,EAAjB,SAAgB,2BAVV,sNAEpB;;;;;;;;;;;;;;;;;;;;;;;;;;ACD6C;AACiB;AAE2C;AAIpC;AACzB;AAOrC;UAAM,mCAAmC;QA8B7C,YAAoB,WAA8B,EACpC,eAAgC;YAD1B,gBAAW,GAAX,WAAW,CAAmB;YACpC,oBAAe,GAAf,eAAe,CAAiB;YAlB9C,6DAA6D;YACpD,2BAAsB,GAAW,EAAE,CAAC;YA8FrC,0BAAqB,GAAG,CAAC,OAAc,EAAE,EAAE;gBAChD,IAAI,CAAC,YAAY,GAAG,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;gBACjC,IAAI,IAAI,CAAC,YAAY,EAAE;oBACpB,gFAAgF;oBAChF,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC;iBAChC;gBAED,IAAI,CAAC,eAAe,GAAG,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;gBAEpC,mDAAmD;gBACnD,IAAI,MAAM,GAAW,mCAAmC,CAAC,iBAAiB,CAAC;gBAC3E,IAAI,IAAI,CAAC,YAAY,EAAE;oBACpB,MAAM,IAAI,mCAAmC,CAAC,mBAAmB,CAAC;iBACpE;gBACD,IAAI,IAAI,CAAC,eAAe,EAAE;oBACvB,MAAM,IAAI,mCAAmC,CAAC,8BAA8B,CAAC;iBAC/E;gBACD,IAAI,IAAI,CAAC,oBAAoB,EAAE;oBAC5B,MAAM,IAAI,mCAAmC,CAAC,0BAA0B,CAAC;iBAC3E;gBACD,2DAAW,CAAC,oBAAoB,CAAC,MAAM,CAAC,CAAC;gBAEzC,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;YACxB,CAAC,CAAC;YAEM,YAAO,GAAG,CAAC,KAAU,EAAE,EAAE;gBAC9B,IAAI,CAAC,aAAa,GAAG,CAAC,KAAK,CAAC,CAAC;gBAC7B,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;YACxB,CAAC,CAAC;QAxGF,CAAC;QAED,QAAQ;YACL,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;YAEpB,MAAM,OAAO,GAAsC,2DAAW,CAAC,eAAe,EAAE,CAAC;YACjF,IAAI,CAAC,cAAc,GAAG,OAAO,CAAC,cAAc,CAAC,IAAI,CAAC;YAClD,IAAI,CAAC,gBAAgB,GAAG,OAAO,CAAC,gBAAgB,CAAC;YACjD,IAAI,CAAC,yBAAyB,GAAG,oFAAqB,CAAC,4BAA4B,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;YAC3G,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC,cAAc,CAAC,OAAO,CAAC;YAC9C,IAAI,CAAC,oBAAoB,GAAG,OAAO,CAAC,oBAAoB,CAAC;YACzD,IAAI,CAAC,sBAAsB,GAAG,OAAO,CAAC,sBAAsB,CAAC;YAE7D,OAAO;iBACA,GAAG,CAAC;gBACF,IAAI,CAAC,WAAW,CAAC,WAAW,CAAC,wGAAsB,CAAC,eAAe,CAAC,SAAS,CAAC,OAAO,EAAE,OAAO,CAAC,UAAU,CAAC;gBAC1G,IAAI,CAAC,2BAA2B,EAAE;aACpC,CAAC;iBACD,IAAI,CAAC,IAAI,CAAC,qBAAqB,CAAC;iBAChC,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QAC9B,CAAC;QAEa,2BAA2B;;gBACtC,IAAI,4DAAW,CAAC,IAAI,EAAE;oBACnB,wFAAwF;oBACxF,uFAAuF;oBACvF,MAAM,MAAM,GAA2B,MAAM,IAAI,CAAC,WAAW;yBACtD,MAAM,EAAE;yBACR,QAAQ,CAAC,gGAAc,CAAC,IAAI,CAAC;yBAC7B,KAAK,EAAE;yBACP,mBAAmB,CAAC,gGAAc,CAAC,OAAO,CAAC,IAAI,EAAE,IAAI,CAAC,OAAO,CAAC;yBAC9D,GAAG,EAAE;yBACL,cAAc,CAAC,gGAAc,CAAC,OAAO,CAAC,UAAU,EAAE,WAAW,CAAC;yBAC9D,OAAO,EAAE,CAAC;oBACjB,OAAO,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC;iBACnC;qBAAM;oBACJ,8CAA8C;oBAC9C,MAAM,MAAM,GAAU,MAAM,IAAI,CAAC,WAAW;yBACrC,WAAW,CAAC,mCAAmC,CAAC,4BAA4B,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;oBACnG,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC;iBACrC;YACJ,CAAC;SAAA;QAEK,SAAS;;gBACZ,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;gBACpB,oCAAoC;gBACpC,IAAI,YAA2B,CAAC;gBAChC,IAAI;oBACD,IAAI,IAAI,CAAC,sBAAsB,IAAI,IAAI,CAAC,gBAAgB,EAAE;wBACvD,IAAI,CAAC,gBAAgB,GAAG,6EAAgB,CAAC,wBAAwB,CAAC;qBACpE;oBACD,YAAY,GAAG,MAAM,IAAI,CAAC,eAAe,CAAC,uBAAuB,CAAC,IAAI,CAAC,OAAO,EACxE,IAAI,CAAC,gBAAgB,CAAC,QAAQ,EAAE,EAAE,IAAI,CAAC,iBAAiB,CAAC,CAAC;iBAClE;gBAAC,OAAO,KAAK,EAAE;oBACb,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;iBACtB;gBAED,2DAAW,CAAC,gBAAgB,CAAC,YAAY,CAAC,CAAC;YAC9C,CAAC;SAAA;QAED,sBAAsB;YACnB,IAAI,CAAC,IAAI,CAAC,oBAAoB,EAAE;gBAC7B,OAAO;aACT;YACD,OAAO,IAAI,CAAC,sBAAsB,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,SAAS,CAAC;QAC3D,CAAC;QAED,yBAAyB;YACtB,IAAI,CAAC,IAAI,CAAC,oBAAoB,EAAE;gBAC7B,OAAO;aACT;YACD,OAAO,IAAI,CAAC,sBAAsB,CAAC,CAAC;gBAC9B,2DAAW,CAAC,SAAS,CAAC,8EAA8E,CAAC,CAAC,CAAC;gBACvG,2DAAW,CAAC,SAAS,CAAC,8EAA8E,CAAC,CAAC;QAC/G,CAAC;;IAxGD,yBAAyB;IACD,gEAA4B,GAAW,mCAAmC,CAAC;IAC3E,gEAA4B,GAAW,cAAc,CAAC;IAE9E,cAAc;IACE,oDAAgB,GAAW,GAAG,CAAC;IAC/B,qDAAiB,GAAW,GAAG,CAAC;IACxB,kEAA8B,GAAW,EAAE,CAAC;IAC5C,uDAAmB,GAAW,EAAE,CAAC;IACjC,8DAA0B,GAAW,GAAG,CAAC;;;;;;;;;;;;;;;;AC5BpE;AAAA;AAAA;AAAA,kFAAkF;AAEzB;AAGzD;;;;GAIG;AACI,MAAM,UAAU;IAEpB,OAAO,CAAC,IAAO,EAAE,MAAc;QAC5B,2CAA2C;QAC3C,IAAI,IAAI,YAAY,8DAAe,EAAE;YAClC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;SACnB;QAED,IAAI,KAAK,GAAW,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;QACzC,IAAI,KAAK,EAAE;YACR,4BAA4B;YAC5B,OAAO,KAAK,CAAC,WAAW,EAAE,CAAC,OAAO,CAAC,MAAM,CAAC,WAAW,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC;SACjE;aAAM;YACJ,OAAO,KAAK,CAAC;SACf;IACJ,CAAC;IAED,KAAK,CAAC,IAAO,EAAE,MAAc;QAC1B,OAAO,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;IACrC,CAAC;IAES,SAAS,CAAC,IAAO;QACxB,OAAO,IAAI,GAAG,EAAE,CAAC;IACpB,CAAC;CAEH;;;;;;;;;;;;;;ACnCD;AAAA;AAAA,IAAY,iBAGX,iBAHD,WAAY,iBAAiB;IAC1B,oEAA+C;IAC/C,gEAA2C;WAFlC,iBAAiB;CAG5B,KAH4B,CAG5B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;mECDE;YAAA;YAAA,YAG4F;YAA3E;;gCAA0E;;YAH3F;QAAA,kgBAG4F,mFAC5F,mDAFiB,mBAA8B,mBAC9B,2CAA0E,4CAH3F,YAG4F,EAD3E,SAA8B,EAC9B,SAA0E;AAAA;kHAGxF,grBAImH,GAAlG,uDAAiG,IAAC,mFAChH,oJAA2B,2FACxB,wrBAG8C,0FAC9C,MAAI,mFACP,MAAM,gFACT,mDAViB,mBAA4B,iBAE5B,sPAAiG,IADjG,qBAAoB,EAHrC,YAImH,EAFlG,SAA4B,EAE5B,SAAiG,EADjG,SAAoB,GAM5B,mBAA0C,+BAH7C,YAG8C,EAA3C,SAA0C;kHA8BhD,wHAAuD;kHAD1D,wHAAoE,wFACjE,qYAAuD,IAAe,gFACzE,2BADiB,sFAAwC,GAAtD,YAAuD,EAAzC,SAAwC;kHAEzD,uyBAG8E,oFAC9E,mDAFkC,mBAAsC,qBACtC,mBAA2C,4BAH7E,YAG8E,EAD5C,SAAsC,EACtC,SAA2C;;mEA7ChF,yHAAyE,qFACtE,2ZAImH,IAQjG,kFAElB,oPAGwG,IAAnG,uDAAkG,IAAC,mFACrG;YAAA;YAAA,YAMkF;YAF1E;;gCAAqD;;YAJ7D;QAAA,0bAMkF,GAA1E,yEAAyE,MAAC,kKAElF,IAAS,mFACT;YAAA;YAAA,YAMyF;YAFjF;;gCAA4D;;YAJpE;QAAA,2bAMyF,GAAjF,yEAAgF,MAAC,kKAEzF,IAAS,gFACZ,MAAM,kFAEN,4ZAAoE,IAErD,gFACf,4ZAG8E,IAC3C,6EACtC,mDA9CoB,mBAAmC,8BAApD,YAImH,EAJlG,SAAmC,GAoBzC,qBAAW,EAIX,8DAAyE,0BANjF,YAMkF,EAJ1E,SAAW,EAIX,SAAyE,GAKzE,qBAAW,EAIX,qEAAgF,0BANxF,aAMyF,EAJjF,SAAW,EAIX,SAAgF,GAK7E,mDAAqD,uBAAnE,aAAoE,EAAtD,UAAqD,GAIjC,mDAA4D,8BAD9F,aAG8E,EAF5C,UAA4D,mDAzBzF,wOAAkG,IAHvG,YAGwG,EAAnG,SAAkG,GAM5F,gDAAoE,yBAL5E,YAMkF,EAD1E,SAAoE,GACM,yQAElF,GAMQ,uDAA2E,yBALnF,aAMyF,EADjF,SAA2E,GACM,+QAEzF;AAAA;kHAcH,uHAA0E,wFACvE,qrBAGgE,uFAChE,MAAW,sOAEd;kHARgC,gFAChC,2ZAA0E,IAOpE,kFAEN,4xBAEwD,oFACxD,MAAmC,6EACtC,mDAbQ,4HAAoE,sBAAzE,YAA0E,EAArE,SAAoE,GAUvC,mBAAgC,eAChC,mBAAqB,WAFvD,YAEwD,EADtB,SAAgC,EAChC,SAAqB;kHAnE7D,wHAAqC,kFAClC,2ZAG4F,IAC1E,6EAClB,sbAAyE,IA+C1D,+EAEf,qJAAmC,KAcrB,0EACjB,mDApEoB,6KAA8E,yBAD/F,YAG4F,EAF3E,SAA8E,GAIjF,sHAA0D,GAAxE,YAAyE,EAA3D,oBAA0D;8PAPQ,0EACnF,2ZAAqC,IAsEtB,0EACf,mDAvEc,mBAAsB,iBAApC,YAAqC,EAAvB,SAAsB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;wHCDpC,2JAAqD,iXAA8B;wHAGhF,0NAEoD,gNAEpD;wHAkBG,oIAAiC,6fAEjC;wHAlBH,yHAA2D,qFACxD,MAAsB,gFACtB,6HAAK,+JAEL,IAAM,gFACN,MAA8B,gFAC9B,0KAA6C,wFAC1C,kmBAEsD,uFACtD,MAAW,mFACX,8nBAA0E,yGAE1E,MAAQ,gFACX,MAAM,gFACN,MAA8B,gFAC9B,kaAAiC,IAE7B,gFACJ,MAAqE,gFACrE,kpDAKqE,oFACrE,MAA6B,6EAChC,mDAhBM,aAA0E,GAK1E,mBAAkB,aAArB,aAAiC,EAA9B,SAAkB,GAMO,oBAAqB,EACrB,mBAA+C,wBAC/C,oBAAyB,EACzB,mBAAwC,wBALpE,aAKqE,EAHzC,SAAqB,EACrB,SAA+C,EAC/C,SAAyB,EACzB,SAAwC,mDAvB/D,6QAEL,GAIa,mBAAyB,aACzB,kCAA2C,kBAFrD,aAEsD,EAD5C,SAAyB,EACzB,SAA2C,GAErD,4GAA0E,8DAE1E;wHArBT,wHAA+B,kFAC5B,MAA8F,6EAC9F,iaAEoD,IAE9C,6EACN,MAAuB,6EACvB,iaAA2D,IA2B5C,0EAClB,mDAlCQ,mBAA2C,sCAAhD,YAEoD,EAF/C,SAA2C,GAMlC,oBAA4C,sCAA1D,YAA2D,EAA7C,SAA4C;oQAT7D,2ZAAqD,IAAoC,0EACzF,iaAA+B,IAoChB,0EACf,mDAtCK,mBAAe,UAApB,YAAqD,EAAhD,SAAe,GACN,oBAAgB,UAA9B,YAA+B,EAAjB,SAAgB;;;;;;;;;;;;;;;;;ACC9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA2D;AACH;AAEwB;AACJ;AAChC;AAQrC,MAAM,4BAA4B;IAiBtC,YAAoB,qBAA4C;QAA5C,0BAAqB,GAArB,qBAAqB,CAAuB;QAhBhE,mBAAc,GAA0B,cAAc,CAAC;QACvD,cAAS,GAAqB,0EAAS,CAAC;QACxC,kBAAa,GAAyB,uEAAa,CAAC;QAC3C,oBAAe,GAA2B,2FAAe,CAAC;QAWnE,0BAAqB,GAAmB,cAAc,CAAC,IAAI,CAAC;QA2B5D,qCAAgC,GAAG,GAAW,EAAE;YAC7C,OAAO,IAAI,CAAC,qBAAqB,CAAC,mCAAmC,CAC/D,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC,CAAC;QACxD,CAAC,CAAC;IA3BF,CAAC;IAED,IAAI,YAAY;QACb,OAAO,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;IACxD,CAAC;IAED,IAAI,kBAAkB;QACnB,OAAO,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,cAAc,CAAC,WAAW,CAAC,CAAC;IAC/D,CAAC;IAED,yFAAyF;IACzF,2CAA2C;IAC3C,oDAAoD;IACpD,YAAY;QACT,OAAO,IAAI,CAAC,YAAY,CAAC,MAAM,KAAK,+FAAwB,CAAC,GAAG;eACvD,CAAC,CAAC,IAAI,CAAC,kBAAkB,IAAI,IAAI,CAAC,kBAAkB,CAAC,MAAM,KAAK,+FAAwB,CAAC,GAAG,CAAC,CAAC;IAC1G,CAAC;IAED,sBAAsB;QACnB,OAAO,CAAC,CAAC,IAAI,CAAC,kBAAkB;eACvB,2DAAW,CAAC,OAAO,CAAC,IAAI,CAAC,kBAAkB,CAAC,aAAa,CAAC;eAC1D,IAAI,CAAC,YAAY,CAAC,MAAM,KAAK,+FAAwB,CAAC,GAAG,CAAC;IACtE,CAAC;CAMH;AAED,IAAY,cAGX,iBAHD,WAAY,cAAc;IACvB,mDAAI;IACJ,iEAAW;WAFF,cAAc;CAGzB,KAHyB,CAGzB;;;;;;;;;;;;;;AClED;AAAA;AAAA;AAAA;AAAA,kFAAkF;AACb;AAGzB;AAQrC,MAAM,+BAA+B;IAWzC,YAAoB,qBAA4C;QAA5C,0BAAqB,GAArB,qBAAqB,CAAuB;QANhE,kBAAa,GAA0B,IAAI,0DAAY,EAAW,CAAC;QAI1D,2BAAsB,GAAW,EAAE,CAAC;QAK7C,6BAAwB,GAAG,CAAC,KAAsC,EAAU,EAAE;YAC3E,OAAO,IAAI,CAAC,qBAAqB,CAAC,wBAAwB,CAAC,KAAK,CAAC,CAAC;QACrE,CAAC,CAAC;QAEF,4BAAuB,GAAG,CAAC,KAAsC,EAAU,EAAE;YAC1E,OAAO,IAAI,CAAC,qBAAqB,CAAC,uBAAuB,CAAC,KAAK,CAAC,CAAC;QACpE,CAAC,CAAC;QAEF,mCAA8B,GAAG,CAAC,KAAsC,EAAU,EAAE;YACjF,OAAO,IAAI,CAAC,qBAAqB,CAAC,uBAAuB,CAAC,KAAK,CAAC,CAAC;QACpE,CAAC,CAAC;IAZF,CAAC;IAcD,2BAA2B,CAAC,KAAuC;QAChE,IAAI,CAAC,gBAAgB,GAAG,KAAK,CAAC;QAC9B,IAAI,CAAC,kBAAkB,EAAE,CAAC;IAC7B,CAAC;IAED,kBAAkB;QACf,MAAM,iBAAiB,GAAY,CAAC,2DAAW,CAAC,OAAO,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;QAC/E,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;IAC9C,CAAC;CACH;;;;;;;;;;;;;;AClCD;AAAA;AAAO,IAAO,gBAAgB,CAU7B;AAVD,WAAc,gBAAgB;IAC9B,MAAa,OAAO;MAOlB,eAAe;IALP,cAAM,GAAG,CAAC,SAAc,EAAE,IAAY,EAAE,IAAY,EAAE,QAAgB,EAAE,gBAAkC,EAAE,QAA0B,EAAoB,EAAE;QAChK,OAAO,EAAE,SAAS,EAAE,SAAS,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,QAAQ,EAAE,QAAQ,EAAE,gBAAgB,EAAE,gBAAgB,EAAE,QAAQ,EAAE,QAAQ,GAAG,CAAC;IACxI,CAAC;IAJS,wBAAO,UAOnB;AAED,CAAC,EAVa,gBAAgB,KAAhB,gBAAgB,QAU7B,CAAC,yBAAyB;;;;;;;;;;;;;;ACvB3B;AAAA;AAAA;AAAA;AAAA;AAAA,6EAA6E;AAExC;AAGrC;;;GAGG;AACI,MAAM,YAAY;IAgCtB;;;OAGG;IACH,YAAoB,UAAkC,EAAE,SAAiB;QAArD,eAAU,GAAV,UAAU,CAAwB;QAnBtD;;WAEG;QACO,YAAO,GAAiB,EAAE,CAAC;QAoBrC;;WAEG;QACI,UAAK,GAAG,GAAG,EAAE,CAAC,IAAI,CAAC,SAAS,GAAG,EAAE,CAAC;QAEzC;;WAEG;QACI,gBAAW,GAAG,CAAC,OAAc,EAAE,EAAE,CAAC,IAAI,CAAC,SAAS,GAAG,OAAO,CAAC;QAqD3D,gBAAW,GAAG,GAAG,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;QAE7D,cAAS,GAAG,GAAG,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;QAlE7D,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;IAC9B,CAAC;IApCM,MAAM,CAAC,gBAAgB,CAAC,UAAkB,EAAE,OAAe;QAC/D,OAAO,IAAI,YAAY,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,UAAU,CAAC,EAAE,OAAO,CAAC,CAAC;IAC9D,CAAC;IA8CD,IAAW,SAAS,CAAC,KAAY;QAC9B,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC;QAChC,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAC3C,CAAC;IAED;;OAEG;IACH,IAAW,SAAS;QACjB,OAAO,IAAI,CAAC,KAAK,CAAC;IACrB,CAAC;IAED;;;OAGG;IACH,IAAW,IAAI;QACZ,OAAO,IAAI,CAAC,OAAO,CAAC;IACvB,CAAC;IAED;;;;;;OAMG;IACI,cAAc;QAClB,IAAI,MAAM,GAAe,IAAI,UAAU,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;QAC3F,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QAC1B,OAAO,MAAM,CAAC;IACjB,CAAC;IAEM,gBAAgB,CAAC,KAAiB;QACtC,IAAI,KAAK,GAAW,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;QAChD,IAAI,KAAK,IAAI,CAAC,CAAC,EAAE;YACd,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;SAChC;IACJ,CAAC;IAED;;OAEG;IACI,IAAI,CAAC,UAA8C,EAAE,SAAS,GAAY,IAAI;QAClF,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;QAC7B,IAAI,CAAC,aAAa,GAAG,SAAS,CAAC;QAE/B,yCAAyC;QACzC,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;IAC/C,CAAC;IAMS,MAAM,CAAC,GAAoB;QAClC,IAAI,GAAG,CAAC,UAAU,EAAE;YACjB,mBAAmB;YACnB,OAAO;SACT;QAED,IAAI,QAAQ,GAAG,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;QACzC,IAAI,QAAQ,IAAI,CAAC,CAAC,EAAE;YACjB,sBAAsB;YACtB,OAAO;SACT;QAED,IAAI,iBAAiB,GAAsB,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,GAAG,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC;QAClG,IAAI,iBAAiB,CAAC,MAAM,GAAG,CAAC,EAAE;YAC/B,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,QAAQ,GAAG,CAAC,EAAE,CAAC,EAAE,GAAI,iBAAiB,CAAC,CAAC;SAC9D;QAED,GAAG,CAAC,UAAU,GAAG,IAAI,CAAC;IACzB,CAAC;IAES,QAAQ,CAAC,GAAoB;QACpC,IAAI,CAAC,GAAG,CAAC,UAAU,EAAE;YAClB,oBAAoB;YACpB,GAAG,CAAC,UAAU,GAAG,KAAK,CAAC;YACvB,OAAO;SACT;QAED,IAAI,QAAQ,GAAG,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;QACzC,IAAI,QAAQ,IAAI,CAAC,CAAC,EAAE;YACjB,sBAAsB;YACtB,OAAO;SACT;QAED,IAAI,WAAW,GAAW,CAAC,CAAC;QAC5B,KAAK,IAAI,CAAC,GAAG,QAAQ,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,IAAI,GAAG,CAAC,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC,EAAE,EAAE;YAC3F,WAAW,EAAG,CAAC;SACjB;QAED,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,QAAQ,GAAG,CAAC,EAAE,WAAW,CAAC,CAAC;QAC/C,GAAG,CAAC,UAAU,GAAG,KAAK,CAAC;IAC1B,CAAC;IAED,yFAAyF;IACzF,kCAAkC;IAClC,uCAAuC;IAC7B,OAAO,CAAC,KAAY,EAAE,KAAK,GAAW,CAAC,EAAE,MAAY;QAC5D,IAAI,CAAC,KAAK,EAAE;YACT,OAAO,EAAE,CAAC;SACZ;QAED,IAAI,WAAW,GAAU,CAAC,GAAI,KAAK,CAAC,CAAC;QACrC,IAAI,IAAI,CAAC,UAAU,EAAE;YAClB,WAAW,CAAC,IAAI,CAAC,CAAC,KAAU,EAAE,KAAU,EAAE,EAAE,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,UAAU,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC,CAAC;SAC9G;QAED,IAAI,MAAM,GAAsB,EAAE,CAAC;QAEnC,KAAK,IAAI,IAAI,IAAI,WAAW,EAAE;YAE3B,IAAI,UAAU,GAAU,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;YAE9C,+CAA+C;YAC/C,IAAI,QAAQ,GAAsB,IAAI,CAAC,OAAO,CAAC,UAAU,EAAE,KAAK,GAAG,CAAC,EAAE,IAAI,CAAC,CAAC;YAE5E,IAAI,WAAW,GAAY,KAAK,CAAC;YACjC,KAAK,IAAI,MAAM,IAAI,IAAI,CAAC,OAAO,EAAE;gBAC9B,oFAAoF;gBACpF,MAAM,WAAW,GAAY,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,MAAM,IAAI,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,CAAC;gBAC9F,IAAI,CAAC,WAAW,EAAE;oBACf,WAAW,GAAG,IAAI,CAAC;iBACrB;aACH;YACD,IAAI,CAAC,WAAW,IAAI,QAAQ,CAAC,MAAM,GAAG,CAAC,EAAE;gBACtC,IAAI,GAAG,GAAoB,IAAI,eAAe,EAAE,CAAC;gBACjD,GAAG,CAAC,IAAI,GAAG,IAAI,CAAC;gBAChB,GAAG,CAAC,MAAM,GAAG,GAAG,EAAE,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;gBAC1E,GAAG,CAAC,KAAK,GAAG,KAAK,CAAC;gBAClB,GAAG,CAAC,UAAU,GAAG,IAAI,CAAC;gBACtB,GAAG,CAAC,YAAY,GAAG,UAAU,IAAI,UAAU,CAAC,MAAM,GAAG,CAAC,CAAC;gBAEvD,MAAM,CAAC,IAAI,CAAC,GAAG,EAAE,GAAI,QAAQ,CAAC,CAAC;aACjC;SACH;QAED,OAAO,MAAM,CAAC;IACjB,CAAC;CAEH;AAED;;GAEG;AACI,MAAM,eAAe;CA2B3B;AAMD;;;GAGG;AACI,MAAM,UAAU;IAKpB,YAAoB,KAAiB;QAAjB,UAAK,GAAL,KAAK,CAAY;QAFrC,YAAO,GAAG,IAAI,oDAAe,CAAU,KAAK,CAAC,CAAC;QAG3C,IAAI,CAAC,KAAK,EAAE,CAAC;IAChB,CAAC;IAEM,KAAK;QACT,IAAI,CAAC,UAAU,GAAG,CAAC,IAAS,EAAE,EAAE,CAAC,IAAI,CAAC;QACtC,IAAI,CAAC,KAAK,EAAE,CAAC;IAChB,CAAC;IAED,IAAW,SAAS,CAAC,SAAiC;QACnD,IAAI,CAAC,SAAS,EAAE;YACb,IAAI,CAAC,KAAK,EAAE,CAAC;SACf;aAAM;YACJ,IAAI,CAAC,UAAU,GAAG,SAAS,CAAC;YAC5B,IAAI,CAAC,KAAK,EAAE,CAAC;SACf;IACJ,CAAC;IAED,IAAW,SAAS;QACjB,OAAO,IAAI,CAAC,UAAU,CAAC;IAC1B,CAAC;IAED,yBAAyB;IACzB,QAAQ;QACL,OAAO,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC;IAClC,CAAC;IAED,yBAAyB;IACzB,OAAO,CAAC,GAAQ;QACb,OAAO,IAAI,CAAC;IACf,CAAC;CACH","file":"106-es2015.js","sourcesContent":["/* Copyright 2021 VMware, Inc. All rights reserved. -- VMware Confidential */\n\n\n\nimport {LoadingFlowWrapper} from \"@service/flow/loading-flow-wrapper.data\";\n\n/**\n * This property decorator is supposed to be used along with the @Loader decorator.\n * As the @Loader decorator keeps track of all the active loading operations,\n * we can easily know if all the loading is completed. If there are any ongoing loading\n * operations, the property decorated with @LoadingIndicator will be set to \"true\", otherwise - it will be \"false\".\n * You can have as many properties decorated with @LoadingIndicator as you want, but they need to have different names.\n * The LoadingIndicator will show the loading state of the Loader methods with the same name.\n *\n * <pre>\n * @Loader()\n * loadDataSync(): any {\n *    // Load some data\n * }\n *\n * @Loader()\n * loadDataAsync(): Promise<any> {\n *    // Load some data\n * }\n *\n * @LoadingIndicator\n * isLoading: boolean; // The field will be set to \"false\" when the both the methods are complete and the Promise is resolved.\n * </pre>\n */\nexport function LoadingIndicator(props?: LoadingIndicatorProperties): PropertyDecorator {\n   props = props || {};\n   return (targetClass: any, propertyKey: string): void => {\n      Object.defineProperty(targetClass, propertyKey, {\n         get: function (): boolean {\n            if (Array.isArray(props.name)) {\n               return props.name.some((loaderName: string) => (new LoadingFlowWrapper(this, loaderName)).isLoading);\n            }\n\n            return (new LoadingFlowWrapper(this, props.name)).isLoading;\n         },\n      });\n   };\n}\n\nexport interface LoadingIndicatorProperties {\n   name?: string | string[];\n}\n","/* Copyright 2021 VMware, Inc. All rights reserved. -- VMware Confidential */\n\nimport {LoadingFlowWrapper} from \"@service/flow/loading-flow-wrapper.data\";\n\n/**\n * This property decorator is supposed to be used along with the @Loader decorator.\n * If an exception is thrown during the execution of the method decorated with @Loader\n * the ErrorHandler method will be invoked. You can define as many ErrorHandlers as you want,\n * but they must be with different names. The name can be provided as input to the decorator.\n * If a name is set to the ErrorHandler it will handle only the errors thrown by Loader functions\n * with the same name. If no name is passed to the ErrorHandler, it will handle only the errors\n * from Loader functions with no name.\n *\n * <pre>\n * // Example 1:\n * @Loader()\n * loadSyncData(): any {\n *    throw new Error(\"Failed to load sync data\");\n * }\n *\n * @ErrorHandler()\n * handleError(err: any) {\n *    // handle the error.\n * }\n *...\n *\n * // Example 2\n *\n * @Loader({name: \"data-loading-flow})\n * async loadAsyncData(): Promise<any> {\n *    return Promise.reject(\"Failed to load async data\");\n * }\n *\n * @ErrorHandler({name: \"data-loading-flow})\n * handleError(err: any) {\n *    // handle the error.\n * }\n * ...\n * </pre>\n */\nexport function ErrorHandler(props?: ErrorHandlerProperties): MethodDecorator {\n   props = props || {};\n   return (targetClass: any, functionName: string, descriptor: PropertyDescriptor): void => {\n      (new LoadingFlowWrapper(targetClass, props.name)).errorHandler = descriptor.value;\n   };\n}\n\n/**\n * Properties of the ErrorHandler decorator.\n */\nexport interface ErrorHandlerProperties {\n\n   /**\n    * Indicates which @Loder should be handled by this @ErrorHandler\n    */\n   name?: string;\n}\n","/* Copyright 2021-2022 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {ErrorContext, FunctionWrapper} from \"@service/flow/function-wrapper\";\nimport {LoadingFlowWrapper} from \"@service/flow/loading-flow-wrapper.data\";\nimport {ScreenReaderAnnouncerService, SrEvent, SrMessageType} from \"@service/screen-reader-announcer.service\";\nimport {Reflection} from \"@util/reflection\";\nimport {GlobalLogger} from \"../../../../vsan-app.module\";\n\n/**\n * Method decorator that does the following:\n *  - watches for errors and if such appear:\n *       - the error is logged in the browser's console\n *       - the error is logged in the H5C server log\n *       - the related @ErrorMessage fields are populated\n *       - the related @ErrorHandler methods are invoked\n *  - Updates the @LoadingIndicator decorated fields\n *  - Invokes the screen reader service once the loading operation completes successfully\n */\nexport function Loader(params?: LoaderParams): MethodDecorator {\n   // If no params are passed, initialize the variable in order to avoid multiple null-checks\n   params = params || {};\n   return (targetClass: any, functionName: string, descriptor: PropertyDescriptor): void => {\n      // Use the component name as tag in order easily find where the error was thrown.\n      const tag: string = Reflection.getClassName(targetClass);\n      const loaderName: string = params.name;\n      const originalFn: any = descriptor.value;\n\n      descriptor.value = function (): any {\n         const loadingFlowWrapper: LoadingFlowWrapper = new LoadingFlowWrapper(this, loaderName);\n         return (new FunctionWrapper(originalFn))\n               .preExecute(() => {\n                  loadingFlowWrapper.error = undefined;\n                  loadingFlowWrapper.incrementLoads();\n                  ScreenReaderAnnouncerService.invoke(\n                        params.preLoadSrMessage || params.srMessage,\n                        params.srMessageType, SrEvent.LOADING);\n               })\n               .postExecute(() => {\n                  ScreenReaderAnnouncerService.invoke(params.srMessage, params.srMessageType, SrEvent.LOADED);\n               })\n               .onError((ex: any) => {\n                  processError(loadingFlowWrapper, tag, ex);\n                  const rethrow: boolean = shouldRethrow(loadingFlowWrapper, params);\n                  if (!rethrow) {\n                     ex = invokeErrorHandler(loadingFlowWrapper, ex);\n                  }\n                  return new ErrorContext(rethrow, ex);\n               })\n               .finally(() => {\n                  loadingFlowWrapper.decrementLoads();\n               })\n               .invoke(loadingFlowWrapper.backingObject, arguments);\n      };\n   };\n}\n\n/**\n * Parameters for the @Loader decorator\n */\nexport interface LoaderParams {\n\n   /**\n    * The name of the loader by which will be resolved te @LoadingIndicator, @ErrorHandler and @ErrorMessage\n    */\n   name?: string;\n\n   /**\n    * Indicates if the error should be rethrown after being processed by the @ErrorHandlers\n    */\n   rethrow?: boolean;\n\n   /**\n    * Used along with srMessageType to create the screen reader message to be announced after the loading\n    * operation completes successfully.\n    * If preLoadSrMessage is not set, srMessage will also be announced when the loading operation starts.\n    */\n   srMessage?: string;\n\n   /**\n    * Used when the message in preExecute() should be different than the one in postExecute().\n    * If not set, srMessage will be used in both places.\n    * Should be given a value when the srMessageType is set to CUSTOM,\n    * because otherwise the exact same message will be announced in preExecute() and postExecute().\n    */\n   preLoadSrMessage?: string;\n\n   /**\n    * The screen reader message type. Used for creating an appropriate message.\n    */\n   srMessageType?: SrMessageType;\n}\n\n/**\n * Handles the given error by:\n *  - logging the error in the browsers console\n *  - logging the error in the H5C backend log\n *  - updates all @ErrorMessage fields\n */\nfunction processError(wrapper: LoadingFlowWrapper, tag: string, ex: any): void {\n   // Log the error to the backend\n   GlobalLogger.error(tag, ex);\n\n   // Cache the error so it can be retrieved by @ErrorMessage decorated fields\n   wrapper.error = ex;\n}\n\n/**\n * Invokes the error handler (if defined)\n */\nfunction invokeErrorHandler(wrapper: LoadingFlowWrapper, ex: any): any {\n   const handler: any = wrapper.errorHandler;\n   return !!handler\n         ? handler.call(wrapper.backingObject, ex)\n         : null;\n}\n\n/**\n * Reject the promise only if:\n * 1. there are no handlers declared\n * 2. the components has explicitly requested the error to be rethrown\n */\nfunction shouldRethrow(wrapper: LoadingFlowWrapper, params: LoaderParams): boolean {\n   return !wrapper.errorHandler && !wrapper.errorMessageGetter\n         || !!params.rethrow;\n}\n","<clr-datagrid id=\"persistenceInstancesDatagrid\">\n   <!-- Datagrid Header -->\n   <clr-dg-column [clrDgField]=\"'name'\">\n      {{\"vsan.evacuationStatus.report.predictedOverview.persistenceTab.table.nameHeader\" | localized}}\n   </clr-dg-column>\n   <clr-dg-column [clrDgField]=\"'namespace'\">\n      {{\"vsan.evacuationStatus.report.predictedOverview.persistenceTab.table.namespaceHeader\" | localized}}\n   </clr-dg-column>\n   <clr-dg-column [clrDgField]=\"'service'\">\n      {{\"vsan.evacuationStatus.report.predictedOverview.persistenceTab.table.serviceHeader\" | localized}}\n   </clr-dg-column>\n   <clr-dg-column [clrDgField]=\"'state'\">\n      {{\"vsan.evacuationStatus.report.predictedOverview.persistenceTab.table.predictedStateHeader\" | localized}}\n      <clr-dg-filter>\n         <vsan-enum-filter\n               #typeFilterComponent\n               [objects]=\"persistentInstances\"\n               [field]=\"'state'\"\n               [enumToLabelConverter]=\"getPersistenceStateLabel\"\n               [selectedFilterValues]=\"stateFilterValue\"\n               (selectedFilterValuesChange)=\"onSelectedFilterTypeChanged($event)\">\n         </vsan-enum-filter>\n      </clr-dg-filter>\n   </clr-dg-column>\n\n   <!-- Datagrid Content -->\n   <clr-dg-row *clrDgItems=\"let persistentInstance of persistentInstances\"\n               [clrDgItem]=\"persistentInstance\">\n      <clr-dg-cell vsan-show-title>{{persistentInstance.name}}</clr-dg-cell>\n      <clr-dg-cell vsan-show-title>{{persistentInstance.namespace}}</clr-dg-cell>\n      <clr-dg-cell vsan-show-title>{{persistentInstance.service}}</clr-dg-cell>\n      <clr-dg-cell>\n         <vsan-icon-item [label]=\"getPersistenceStateLabel(persistentInstance.state)\"\n                         [iconClass]=\"getPersistenceStateIconClasses(persistentInstance.state)\"\n                         [shape]=\"getPersistenceStateIcon(persistentInstance.state)\">\n         </vsan-icon-item>\n      </clr-dg-cell>\n   </clr-dg-row>\n\n   <!-- Datagrid Footer -->\n   <clr-dg-footer>\n      <clr-dg-pagination #pagination\n                         [clrDgPageSize]=\"DEFAULT_ITEMS_PER_PAGE\"\n                         [hidden]=\"!persistentInstances.length\"\n                         [clrDgTotalItems]=\"persistentInstances.length\">\n         {{\"vsan.evacuationStatus.report.predictedOverview.persistenceTab.table.pagination.label\" |\n            localized: pagination.firstItem + 1 : pagination.lastItem + 1 : persistentInstances.length}}\n      </clr-dg-pagination>\n   </clr-dg-footer>\n</clr-datagrid>","/* Copyright 2019-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {ManagedObject} from \"@service/managed-object\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {PrecheckEntity} from \"@generated/precheck-entity\";\nimport {PrecheckEntityType} from \"@generated/precheck-entity-type\";\n\nexport class PrecheckUtil {\n   /**\n    * Extracts the specified precheck entity from entities based on uuid.\n    */\n   static extractPrecheckEntityByUuid = (uuid: string, entities: PrecheckEntity[]): PrecheckEntity => {\n      if (!uuid || VsanUiUtils.isEmpty(entities)) {\n         return null;\n      }\n\n      for (let index: number = 0; index < entities.length; index++) {\n         if (entities[index].uuid === uuid) {\n            return entities[index];\n         } else {\n            const selectedEntity: PrecheckEntity = PrecheckUtil.extractPrecheckEntityByUuid(\n                  uuid, entities[index].children);\n            if (selectedEntity) {\n               return selectedEntity;\n            }\n         }\n      }\n\n      return null;\n   };\n\n   /**\n    * Extracts the specified precheck host entity from entities based on host reference.\n    */\n   static extractHostEntity = (hostRef: ManagedObject, entities: PrecheckEntity[]): PrecheckEntity => {\n      if (!hostRef || VsanUiUtils.isEmpty(entities)) {\n         return null;\n      }\n      return entities.find(entity => entity.type === PrecheckEntityType.HOST &&\n            ManagedObject.areEqual(hostRef, entity.hostRef));\n   };\n\n   /**\n    * Extracts the parent entity of the specified uuid.\n    */\n   static extractParentEntityByUuid = (uuid: string, entities: PrecheckEntity[]): PrecheckEntity => {\n      if (!uuid || VsanUiUtils.isEmpty(entities)) {\n         return null;\n      }\n\n      for (let parentIndex: number = 0; parentIndex < entities.length; parentIndex++) {\n         const children: PrecheckEntity[] = entities[parentIndex].children;\n         if (!children || children.length === 0) {\n            continue;\n         }\n\n         if (children.find(element => uuid === element.uuid)) {\n            return entities[parentIndex];\n         }\n\n         const parentOfGrandChild: PrecheckEntity = PrecheckUtil.extractParentEntityByUuid(uuid, children);\n         if (parentOfGrandChild) {\n            return parentOfGrandChild;\n         }\n      }\n\n      return null;\n   };\n}","/* Copyright 2021 VMware, Inc. All rights reserved. -- VMware Confidential */\n/**\n * IDs used in external KB link navigation\n */\nexport enum KnowledgeBaseId {\n   PRECHECK_PCP = \"83954\",\n   VIRTUAL_OBJECTS = \"2108319\",\n   UPGRADE = \"2148493\",\n   PERFORMANCE_DIAGNOSTICS = \"2148770\",\n   SUPPORT_INSIGHT = \"60206\",\n}\n","<!--Copyright 2017-2022 VMware, Inc. All rights reserved. -- VMware Confidential-->\n<vsan-prompt id=\"enter-maintenance-mode-dialog\"\n             [title]=\"'vsan.evacuationStatus.report.enterMaintenanceModeDialog.title' | localized\"\n             [subtitle]=\"secondaryTitle\"\n             [(alertMessages)]=\"alertMessages\"\n             [cancelText]=\"'vsan.common.cancel' | localized\"\n             [confirmText]=\"'vsan.common.ok' | localized\"\n             [blockContent]=\"loading\"\n             (onConfirm)=\"onConfirm()\">\n   <vsan-validation id=\"enter-maintenance-mode-dialog-powered-on-vms-warning\"\n                    *ngIf=\"hasPoweredOnVms\"\n                    [allowClose]=\"false\"\n                    [alertType]=\"'warning'\"\n                    [alert]=\"'vsan.evacuationStatus.report.enterMaintenanceModeDialog.poweredOnVmsWarning' | localized\">\n   </vsan-validation>\n   <form class=\"container\">\n      <!--General text-->\n      <span id=\"enter-maintenance-mode-message\">\n         {{'vsan.evacuationStatus.report.enterMaintenanceModeDialog.text' | localized}}\n      </span>\n      <!--Option to move powered-off VMs-->\n      <div class=\"form-group no-left-padding\">\n         <clr-checkbox-wrapper *ngIf=\"isDrsEnabled\">\n            <input type=\"checkbox\"\n                   clrCheckbox\n                   name=\"move-powered-off-vms\"\n                   id=\"move-powered-off-vms\"\n                   [(ngModel)]=\"movePoweredOffVms\"/>\n            <label>{{'vsan.evacuationStatus.report.enterMaintenanceModeDialog.movePoweredOffVMs' | localized}}</label>\n         </clr-checkbox-wrapper>\n      </div>\n      <!--Selected decommission mode-->\n      <div class=\"form-group clr-form-horizontal\">\n         <div class=\"clr-form-control\">\n            <label for=\"enter-maintenance-mode-vsan-data-migration\" class=\"clr-control-label no-margin\">\n               {{'vsan.dialog.precheckEvacuation.label' | localized}}\n            </label>\n            <span id=\"enter-maintenance-mode-vsan-data-migration\" class=\"clr-control-container\">\n               {{decommissionModeLocalized}}\n            </span>\n         </div>\n      </div>\n      <div class=\"form-group no-left-padding\" *ngIf=\"isDurabilityPossible && isDurabilityGuaranteed\">\n         <clr-checkbox-wrapper>\n            <input type=\"checkbox\"\n                   clrCheckbox\n                   name=\"ensure-durability\"\n                   id=\"ensure-durability\"\n                   [disabled]=\"!isDurabilityGuaranteed\"\n                   [(ngModel)]=\"ensureDurability\"/>\n            <label>{{'vsan.evacuationStatus.report.enterMaintenanceModeDialog.ensureDurabilityConfirmation'|localized}}</label>\n         </clr-checkbox-wrapper>\n      </div>\n      <clr-alert id=\"ensure-durability-banner\"\n                 *ngIf=\"isDurabilityPossible\"\n                 [clrAlertClosable]=\"false\"\n                 [clrAlertType]=\"getDurabilityAlertType()\">\n         <clr-alert-item>\n            <div class=\"durability-alert-message-wrapper\">\n               <span>{{getDurabilityAlertMessage()}}</span>\n               <a [external-link] [articleId]=\"ENHANCED_DURABILITY_KB\"></a>\n            </div>\n         </clr-alert-item>\n      </clr-alert>\n      <!--Confirmation message-->\n      <span id=\"enter-maintenance-mode-confirmation\">\n         {{'vsan.evacuationStatus.report.enterMaintenanceModeDialog.confirmationText' | localized}}\n      </span>\n   </form>\n</vsan-prompt>\n","/* Copyright 2018-2022 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Injectable} from \"@angular/core\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {Icon} from \"@util/icon\";\nimport {VsanDataMigrationUtil} from \"@util/vsan-data-migration-util\";\nimport {DecommissionMode} from \"@generated/decommission-mode\";\nimport {VsanHealthData} from \"@generated/vsan-health-data\";\nimport {VsanHealthStatus} from \"@generated/vsan-health-status\";\nimport {PrecheckTaskType} from \"@generated/precheck-task-type\";\nimport {PrecheckPersistentInstanceData} from \"@generated/precheck-persistent-instance-data\";\nimport {PrecheckPersistentInstanceState} from \"@generated/precheck-persistent-instance-state\";\nimport {PrecheckResultStatusType} from \"@generated/precheck-result-status-type\";\nimport {PrecheckClusterCapacityData} from \"@generated/precheck-cluster-capacity-data\";\nimport {PrecheckCapacityData} from \"@generated/precheck-capacity-data\";\nimport {PrecheckEntityType} from \"@generated/precheck-entity-type\";\nimport {PrecheckReport} from \"@generated/precheck-report\";\nimport {PrecheckTaskData} from \"@generated/precheck-task-data\";\n\n@Injectable()\nexport class PrecheckReportService {\n\n   private static readonly PERCENTAGE_MULTIPLIER: number = 100;\n\n   private static readonly EMPTY_SPACE: string = \" \";\n\n   getPostOperationCapacityLabel(postOperationCapacity: PrecheckCapacityData, isThinBar: boolean,\n         selectedEntityType: PrecheckEntityType): string {\n      if (selectedEntityType === PrecheckEntityType.HOST) {\n         return VsanUiUtils.getString(\n               \"vsan.evacuationStatus.report.predictedOverview.capacityTab.table.maintenanceMode\");\n      }\n\n      return this.getCapacityLabel(postOperationCapacity, isThinBar, true, selectedEntityType);\n   }\n\n   getCapacityLabel(capacity: PrecheckCapacityData, isThinBar: boolean, hasCapacityDifference: boolean,\n         selectedEntityType?: PrecheckEntityType): string {\n      if (!capacity.usedCapacity && !capacity.totalCapacity) {\n         return VsanUiUtils.getString(\"vsan.evacuationStatus.report.predictedOverview.capacityTab.noCapacity\");\n      }\n\n      let messageKey: string;\n      if (isThinBar) {\n         if (hasCapacityDifference) {\n            const isChildEntitySelected: boolean = selectedEntityType === PrecheckEntityType.DISK_GROUP\n                  || selectedEntityType === PrecheckEntityType.DISK;\n            messageKey = isChildEntitySelected\n                  ? \"vsan.evacuationStatus.report.predictedOverview.capacityTab.tableCapacityInfoReducedCapacity\"\n                  : \"vsan.evacuationStatus.report.predictedOverview.capacityTab.tableCapacityInfo\";\n         } else {\n            messageKey = \"vsan.evacuationStatus.report.predictedOverview.capacityTab.tableCapacityInfoNoChange\";\n         }\n      } else {\n         messageKey = \"vsan.evacuationStatus.report.predictedOverview.capacityTab.generalCapacityInfo\";\n      }\n\n      return VsanUiUtils.getString(messageKey,\n            VsanUiUtils.formatFileSize(capacity.usedCapacity),\n            VsanUiUtils.formatFileSize(capacity.totalCapacity),\n            VsanUiUtils.getPercentage(this.getBarPercentage(capacity.usedCapacity, capacity.totalCapacity)));\n   }\n\n   hasCapacityDifference(preOperationalCapacity: PrecheckCapacityData,\n         postOperationCapacity: PrecheckCapacityData): boolean {\n      return VsanUiUtils.formatFileSize(preOperationalCapacity.usedCapacity) !==\n            VsanUiUtils.formatFileSize(postOperationCapacity.usedCapacity)\n            || VsanUiUtils.formatFileSize(preOperationalCapacity.totalCapacity) !==\n            VsanUiUtils.formatFileSize(postOperationCapacity.totalCapacity);\n   }\n\n   getBarChartWidth(beforeTotalCapacity: number, afterTotalCapacity: number): number {\n      return (afterTotalCapacity / beforeTotalCapacity) * PrecheckReportService.PERCENTAGE_MULTIPLIER;\n   }\n\n   getBarPercentage(usedCapacity: number, totalCapacity: number): number {\n      return (usedCapacity / totalCapacity) * PrecheckReportService.PERCENTAGE_MULTIPLIER;\n   }\n\n   // decommission mode helper functions\n   getSummaryMessage(status: PrecheckResultStatusType, precheckEntity: PrecheckEntityType, dataToMove: number,\n         persistenceDataToRebuild?: number, isVsanMaxEnabled?: boolean): string {\n      let message: string;\n      const hasError: boolean = PrecheckResultStatusType.RED === status;\n      switch (precheckEntity) {\n         case PrecheckEntityType.HOST:\n            if (hasError) {\n               return VsanUiUtils.getString(\"vsan.evacuationStatus.report.preCheckFailed.host\");\n            }\n\n            message = VsanUiUtils.getString(\"vsan.evacuationStatus.report.preCheckSucceeded.host\");\n            break;\n         case PrecheckEntityType.DISK_GROUP:\n            if (hasError) {\n               return VsanUiUtils.getString(\"vsan.evacuationStatus.report.preCheckFailed.diskGroup\");\n            }\n\n            message = VsanUiUtils.getString(\"vsan.evacuationStatus.report.preCheckSucceeded.diskGroup\");\n            break;\n         case PrecheckEntityType.DISK:\n            if (hasError) {\n               return isVsanMaxEnabled\n                     ? VsanUiUtils.getString(\"vsan.evacuationStatus.report.preCheckFailed.disk.vsanMax\")\n                     : VsanUiUtils.getString(\"vsan.evacuationStatus.report.preCheckFailed.disk\");\n            }\n\n            message = isVsanMaxEnabled\n                  ? VsanUiUtils.getString(\"vsan.evacuationStatus.report.preCheckSucceeded.disk.vsanMax\")\n                  : VsanUiUtils.getString(\"vsan.evacuationStatus.report.preCheckSucceeded.disk\");\n            break;\n      }\n\n      if (dataToMove) {\n         message = message.concat(PrecheckReportService.EMPTY_SPACE,\n               VsanUiUtils.getString(\"vsan.evacuationStatus.report.dataToMoveMessage\",\n                     VsanUiUtils.formatFileSize(dataToMove)));\n      }\n\n      if (persistenceDataToRebuild) {\n         message = message.concat(PrecheckReportService.EMPTY_SPACE,\n               VsanUiUtils.getString(\"vsan.evacuationStatus.report.persistenceDataToRebuildMessage\",\n                     VsanUiUtils.formatFileSize(persistenceDataToRebuild)));\n      }\n\n      return message.trim();\n   }\n\n   getObjectsMessage = (inaccessibleObjectsCount: number,\n         nonCompliantObjectsCount: number,\n         noDurabilityObjectsCount: number): string => {\n      const hasInaccessibleObjects: boolean = inaccessibleObjectsCount > 0;\n      const hasNonCompliantObjects: boolean = nonCompliantObjectsCount > 0;\n\n      if (!hasInaccessibleObjects && !hasNonCompliantObjects) {\n         return VsanUiUtils.getString(\"vsan.evacuationStatus.report.accessibleAndCompliantObjectsMessage\");\n      }\n\n      const messages: string[] = [];\n      if (hasInaccessibleObjects) {\n         messages.push(VsanUiUtils.getString(\n               \"vsan.evacuationStatus.report.inaccessibleObjectsMessage\", inaccessibleObjectsCount));\n      }\n\n      if (hasNonCompliantObjects) {\n         if (noDurabilityObjectsCount > 0) {\n            messages.push(VsanUiUtils.getString(\n                  \"vsan.evacuationStatus.report.nonCompliantWithoutDurabilityObjectsMessage\",\n                  nonCompliantObjectsCount, noDurabilityObjectsCount));\n         } else {\n            messages.push(VsanUiUtils.getString(\n                  \"vsan.evacuationStatus.report.nonCompliantObjectsMessage\", nonCompliantObjectsCount));\n         }\n      }\n\n      return messages.join(PrecheckReportService.EMPTY_SPACE);\n   };\n\n   parseReportStatusToIcon(report: PrecheckReport): string {\n      switch (report.status) {\n         case PrecheckResultStatusType.GREEN:\n            return Icon.CLR_SUCCESS_STANDARD_ICON_SHAPE;\n         case PrecheckResultStatusType.YELLOW:\n            return Icon.CLR_WARN_STANDARD_ICON_SHAPE;\n         case PrecheckResultStatusType.RED:\n            return Icon.CLR_ERROR_STANDARD_ICON_SHAPE;\n      }\n   }\n\n   getVirtualObjectsTabIcon(report: PrecheckReport): string {\n      if (report.inaccessibleObjects && report.inaccessibleObjects.length) {\n         return Icon.CLR_ERROR_STANDARD_ICON_SHAPE;\n      }\n\n      if (report.nonCompliantObjects && report.nonCompliantObjects.length) {\n         return Icon.CLR_WARN_STANDARD_ICON_SHAPE;\n      }\n\n      return \"\";\n   }\n\n   getCapacityTabIcon(clusterCapacity: PrecheckClusterCapacityData): string {\n      const faultDomainErrors: boolean = clusterCapacity.faultDomains.some(\n            faultDomain => faultDomain.isAdditionalHostNeeded || faultDomain.hasInsufficientSpace\n                  || faultDomain.isComponentLimitReached);\n      const standaloneHostErrors: boolean = clusterCapacity.standaloneHosts.some(\n            host => !!host.capacityNeeded || host.isComponentLimitReached);\n\n      if (clusterCapacity.faultDomainsNeeded || faultDomainErrors || standaloneHostErrors) {\n         return Icon.CLR_ERROR_STANDARD_ICON_SHAPE;\n      }\n\n      const initialPercentage: number = this.getBarPercentage(clusterCapacity.preOperationCapacity.usedCapacity,\n            clusterCapacity.preOperationCapacity.totalCapacity);\n      const finalPercentage: number = this.getBarPercentage(clusterCapacity.postOperationCapacity.usedCapacity,\n            clusterCapacity.postOperationCapacity.totalCapacity);\n\n      if (initialPercentage >= clusterCapacity.warningThreshold\n            || finalPercentage >= clusterCapacity.warningThreshold) {\n         return Icon.CLR_WARN_STANDARD_ICON_SHAPE;\n      }\n\n      return \"\";\n   }\n\n   getHealthTabIcon(healthData: VsanHealthData): string {\n      switch (healthData.status) {\n         case VsanHealthStatus.green:\n         case VsanHealthStatus.info:\n            return \"\";\n         case VsanHealthStatus.red:\n            return Icon.CLR_ERROR_STANDARD_ICON_SHAPE;\n         default:\n            return Icon.CLR_WARN_STANDARD_ICON_SHAPE;\n      }\n   }\n\n   getPersistenceTabIcon(persistenceData: PrecheckPersistentInstanceData[]): string {\n      if (VsanUiUtils.isEmpty(persistenceData)) {\n         return  \"\";\n      } else if (persistenceData.find(p => p.state === PrecheckPersistentInstanceState.INACCESSIBLE)) {\n         return Icon.CLR_ERROR_STANDARD_ICON_SHAPE;\n      } else if (persistenceData.find(p => p.state === PrecheckPersistentInstanceState.REDUCED_AVAILABILITY)\n            || persistenceData.find(p => p.state === PrecheckPersistentInstanceState.REBUILD)) {\n         return Icon.CLR_WARN_STANDARD_ICON_SHAPE;\n      }\n\n      return \"\";\n   }\n\n   getPersistenceStateLabel(state: PrecheckPersistentInstanceState): string {\n      switch (state) {\n         case PrecheckPersistentInstanceState.INACCESSIBLE:\n            return VsanUiUtils.getString(\n                  \"vsan.evacuationStatus.report.predictedOverview.persistenceTab.table.predictedState.inaccessible\");\n         case PrecheckPersistentInstanceState.REDUCED_AVAILABILITY:\n            return VsanUiUtils.getString(\n                  \"vsan.evacuationStatus.report.predictedOverview.persistenceTab.table.predictedState.reducedAvailability\");\n         case PrecheckPersistentInstanceState.REBUILD:\n            return VsanUiUtils.getString(\n                  \"vsan.evacuationStatus.report.predictedOverview.persistenceTab.table.predictedState.rebuild\");\n         default: return \"\";\n      }\n   }\n\n   getPersistenceStateIcon(state: PrecheckPersistentInstanceState): string {\n      switch (state) {\n         case PrecheckPersistentInstanceState.INACCESSIBLE:\n            return Icon.CLR_ERROR_STANDARD_ICON_SHAPE;\n         case PrecheckPersistentInstanceState.REDUCED_AVAILABILITY:\n         case PrecheckPersistentInstanceState.REBUILD:\n            return Icon.CLR_WARN_STANDARD_ICON_SHAPE;\n         default: return \"\";\n      }\n   }\n\n   getPersistenceIconClass(state: PrecheckPersistentInstanceState): string {\n      const iconShape: string = this.getPersistenceStateIcon(state);\n      return this.getIconClasses(iconShape);\n   }\n\n   getIconClasses(shape: string): string {\n      return `is-solid ${Icon.clrIconShapeClassMap[shape]}`;\n   }\n\n   getRunningTaskMessage(runningTask: PrecheckTaskData, isDiskResourcePrecheckSupported: boolean,\n         isVsanMaxEnabled: boolean): string {\n      if (!runningTask) {\n         return \"\";\n      }\n      return isDiskResourcePrecheckSupported ? this.getRunningTaskMessageForAllObjects(runningTask, isVsanMaxEnabled)\n            : this.getRunningTaskMessageForHost(runningTask);\n   }\n\n   private getRunningTaskMessageForHost(runningTask: PrecheckTaskData): string {\n      switch (runningTask.taskType) {\n         case PrecheckTaskType.HOST_PRECHECK:\n            return runningTask.hostName\n                  ? VsanUiUtils.getString(\"vsan.evacuationStatus.report.taskInProgress.precheck\", runningTask.hostName,\n                        VsanDataMigrationUtil.getLocalizedDecommissionMode(runningTask.decommissionMode))\n                  : VsanUiUtils.getString(\"vsan.evacuationStatus.report.taskInProgress.precheck.unknownHost\",\n                        VsanDataMigrationUtil.getLocalizedDecommissionMode(runningTask.decommissionMode));\n         case PrecheckTaskType.HOST_ENTER_MAINTENANCE_MODE:\n            return runningTask.hostName\n                  ? VsanUiUtils.getString(\"vsan.evacuationStatus.report.taskInProgress.maintenanceMode\",\n                        runningTask.hostName)\n                  :  VsanUiUtils.getString(\"vsan.evacuationStatus.report.taskInProgress.maintenanceMode.unknownHost\");\n      }\n   }\n\n   private getRunningTaskMessageForAllObjects(runningTask: PrecheckTaskData, isVsanMaxEnabled: boolean): string {\n      const decommissionMode: string = VsanDataMigrationUtil.getLocalizedDecommissionMode(runningTask.decommissionMode);\n      const commonMessage: string = isVsanMaxEnabled\n            ? VsanUiUtils.getString(\"vsan.evacuationStatus.report.taskInProgress.commonMessage.vSanMax\")\n            : VsanUiUtils.getString(\"vsan.evacuationStatus.report.taskInProgress.commonMessage\");\n\n      switch (runningTask.taskType) {\n         case PrecheckTaskType.HOST_PRECHECK:\n            return runningTask.hostName\n                  ? VsanUiUtils.getString(\"vsan.evacuationStatus.report.taskInProgress.host.precheck\",\n                        runningTask.hostName, decommissionMode, commonMessage)\n                  : VsanUiUtils.getString(\"vsan.evacuationStatus.report.taskInProgress.host.precheck.unknownHost\",\n                        decommissionMode, commonMessage);\n         case PrecheckTaskType.HOST_ENTER_MAINTENANCE_MODE:\n            return runningTask.hostName\n                  ? VsanUiUtils.getString(\"vsan.evacuationStatus.report.taskInProgress.host.maintenanceMode\",\n                        runningTask.hostName, commonMessage) :\n                  VsanUiUtils.getString(\"vsan.evacuationStatus.report.taskInProgress.host.maintenanceMode.unknownHost\",\n                        commonMessage);\n         case PrecheckTaskType.DISKGROUP_REMOVAL:\n            return VsanUiUtils.getString(\"vsan.evacuationStatus.report.taskInProgress.removeGroup\",\n                  decommissionMode, commonMessage);\n         case PrecheckTaskType.DISKGROUP_RECREATE:\n            return VsanUiUtils.getString(\"vsan.evacuationStatus.report.taskInProgress.recreateGroup\",\n                  decommissionMode, commonMessage);\n         case PrecheckTaskType.DISKGROUP_UNMOUNT:\n            return VsanUiUtils.getString(\"vsan.evacuationStatus.report.taskInProgress.unmountGroup\",\n                  decommissionMode, commonMessage);\n         case PrecheckTaskType.DISK_REMOVAL:\n            return VsanUiUtils.getString(\"vsan.evacuationStatus.report.taskInProgress.removeDisks\",\n                  decommissionMode, commonMessage);\n         case PrecheckTaskType.DISK_UNMOUNT:\n            return VsanUiUtils.getString(\"vsan.evacuationStatus.report.taskInProgress.unmountDisk\",\n                  decommissionMode, commonMessage);\n         case PrecheckTaskType.DISKGROUP_PRECHECK:\n         case PrecheckTaskType.DISK_PRECHECK:\n            return VsanUiUtils.getString(\"vsan.evacuationStatus.report.taskInProgress.diskOrGroup.precheck\",\n                  runningTask.name, runningTask.hostName, decommissionMode, commonMessage);\n         default:\n            // Handle the rare case when UI doesn't know host information and if the entity is a disk or disk group.\n            // Additional info in https://bugzilla.eng.vmware.com/show_bug.cgi?id=2391487\n            return VsanUiUtils.getString(\"vsan.evacuationStatus.report.taskInProgress.unknownEntityType.unknownHost\",\n                  commonMessage);\n      }\n   }\n\n   isTaskForSelectedEntity(runningTask: PrecheckTaskData, selectedEntityUuid: string,\n         selectedDecommissionMode: DecommissionMode): boolean {\n      return selectedEntityUuid === runningTask.uuid && selectedDecommissionMode === runningTask.decommissionMode;\n   }\n\n   getFailedTaskMessage(taskType: PrecheckTaskType, entityName: string): string {\n      switch (taskType) {\n         case PrecheckTaskType.HOST_ENTER_MAINTENANCE_MODE:\n            return VsanUiUtils.getString(\"vsan.evacuationStatus.report.eMMTaskFailed\", entityName);\n         case PrecheckTaskType.DISKGROUP_REMOVAL:\n            return VsanUiUtils.getString(\"vsan.evacuationStatus.report.removeGroupFailed\", entityName);\n         case PrecheckTaskType.DISKGROUP_RECREATE:\n            return VsanUiUtils.getString(\"vsan.evacuationStatus.report.recreateGroupFailed\", entityName);\n         case PrecheckTaskType.DISKGROUP_UNMOUNT:\n            return VsanUiUtils.getString(\"vsan.evacuationStatus.report.unmountGroupFailed\", entityName);\n         case PrecheckTaskType.DISK_REMOVAL:\n            return VsanUiUtils.getString(\"vsan.evacuationStatus.report.removeDiskFailed\", entityName);\n         case PrecheckTaskType.DISK_UNMOUNT:\n            return VsanUiUtils.getString(\"vsan.evacuationStatus.report.unmountDiskFailed\", entityName);\n         default:\n            // Failed to run data migration precheck for host, disk group or disk.\n            return VsanUiUtils.getString(\"vsan.evacuationStatus.report.taskFailed\", entityName);\n      }\n   }\n\n   getClusterLevelCapacityErrorMessage(clusterCapacity: PrecheckClusterCapacityData): string {\n      const messages: string[] = [\n         VsanUiUtils.getString(\"vsan.evacuationStatus.report.predictedOverview.capacityTab.requiredStandaloneHost\")];\n\n      const hasComponentLimitError: boolean =\n            clusterCapacity.faultDomains.some(faultDomain => faultDomain.isComponentLimitReached)\n            || clusterCapacity.standaloneHosts.some(standAloneHost => standAloneHost.isComponentLimitReached);\n\n      if (hasComponentLimitError) {\n         messages.push(VsanUiUtils.getString(\n               \"vsan.evacuationStatus.report.predictedOverview.capacityTab.table.componentLimitReached\"));\n      } else {\n         messages.push(VsanUiUtils.getString(\n               \"vsan.evacuationStatus.report.predictedOverview.capacityTab.storagePolicyIncompliance\"));\n      }\n\n      return messages.join(\" \");\n   }\n\n}\n","/* Copyright 2020-2022 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, Input} from \"@angular/core\";\nimport {BarChartService} from \"@component/chart/capacity-bar-chart/bar-chart.service\";\nimport {DatastoreType} from \"@generated/datastore-type\";\nimport {PrecheckClusterCapacityData} from \"@generated/precheck-cluster-capacity-data\";\nimport {PrecheckEntityType} from \"@generated/precheck-entity-type\";\nimport {PrecheckFaultDomainCapacityData} from \"@generated/precheck-fault-domain-capacity-data\";\nimport {PrecheckHostCapacityData} from \"@generated/precheck-host-capacity-data\";\nimport {Icon} from \"@util/icon\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\n\n@Component({\n   templateUrl: \"precheck-capacity-breakdown.html\",\n   styleUrls: [\"precheck-capacity-tab.scss\"],\n   selector: \"vsan-precheck-capacity-breakdown\",\n})\nexport class PrecheckCapacityBreakdownComponent {\n\n   readonly Icon: typeof Icon = Icon;\n   readonly PrecheckEntityType: typeof PrecheckEntityType = PrecheckEntityType;\n\n   @Input()\n   clusterCapacity: PrecheckClusterCapacityData;\n\n   @Input()\n   hasError: boolean = false;\n\n   @Input()\n   datastoreType: DatastoreType = DatastoreType.VSAN;\n\n   constructor(private barChartService: BarChartService) {\n   }\n\n   getGreenColor = (): string => {\n      return this.barChartService.getGreenPallete()[0];\n   };\n\n   getYellowColor = (): string => {\n      return this.barChartService.getYellowPallete()[0];\n   };\n\n   getRedColor = (): string => {\n      return this.barChartService.getRedPallete()[0];\n   };\n\n   getCapacityColumnHeader = (): string => {\n      return this.datastoreType === DatastoreType.VSAN_DIRECT\n            ? VsanUiUtils.getString(\n                  \"vsan.evacuationStatus.report.predictedOverview.capacityTab.table.capacityHeader.vsanDirect\")\n            : VsanUiUtils.getString(\"vsan.evacuationStatus.report.predictedOverview.capacityTab.table.capacityHeader\");\n   };\n\n   getInsufficientSpaceLabel = (insufficientSpace: number): string => {\n      return VsanUiUtils.getString(\n            \"vsan.evacuationStatus.report.predictedOverview.capacityTab.table.insufficientSpaceOnHost\",\n            VsanUiUtils.formatFileSize(insufficientSpace));\n   };\n\n   showCapacityTable = (): boolean => {\n      return !this.clusterCapacity.faultDomainsNeeded && this.hasEntities();\n   };\n\n   hasFaultDomainErrors = (faultDomainCapacityData: PrecheckFaultDomainCapacityData): boolean => {\n      return faultDomainCapacityData.hasInsufficientSpace || faultDomainCapacityData.isAdditionalHostNeeded\n            || faultDomainCapacityData.isComponentLimitReached;\n   };\n\n   hasHostErrors = (hostsCapacityData: PrecheckHostCapacityData): boolean => {\n      return (this.hasError && !!hostsCapacityData.selectedEntityType)\n            || !!hostsCapacityData.capacityNeeded || hostsCapacityData.isComponentLimitReached;\n   };\n\n   private hasEntities(): boolean {\n      const hasFaultDomains: boolean = !!(this.clusterCapacity.faultDomains\n            && this.clusterCapacity.faultDomains.length);\n      const hasStandaloneHosts: boolean = !!(this.clusterCapacity.standaloneHosts\n            && this.clusterCapacity.standaloneHosts.length);\n\n      return hasFaultDomains || hasStandaloneHosts;\n   }\n}\n","<!--Copyright 2018-2020 VMware, Inc. All rights reserved. -- VMware Confidential-->\n<!--Bar chart-->\n<div class=\"bar-chart\" [ngClass]=\"{'table-bar-chart' : isThinBar}\">\n   <div class=\"progress-group\">\n      <div *ngIf=\"hasBeforeBar()\"\n           class=\"progress-static\"\n           [ngClass]=\"{'thin-bar' : isThinBar}\">\n         <div class=\"progress-meter\"\n              [ngClass]=\"{'empty-bar' : !preOperationCapacity.totalCapacity}\">\n            <div class=\"inner-bar\" style.width=\"{{beforeUsedCapacityWidth}}%\" [style.backgroundColor]=\"beforeBarColor\"></div>\n         </div>\n      </div>\n      <div *ngIf=\"hasAfterBar()\"\n           style.width=\"{{afterBarWidth}}%\"\n           class=\"progress-static\"\n           [ngClass]=\"{'thin-bar' : isThinBar}\">\n         <div class=\"progress-meter\"\n              [ngClass]=\"{'empty-bar' : !postOperationCapacity.totalCapacity}\">\n            <div class=\"inner-bar\" style.width=\"{{afterUsedCapacityWidth}}%\" [style.backgroundColor]=\"afterBarColor\"></div>\n         </div>\n      </div>\n   </div>\n</div>\n<!--Summary of used capacity-->\n<div class=\"bar-chart-info\">\n   <div *ngIf=\"hasBeforeBar()\" class=\"p8\">\n      {{getPreOperationCapacityLabel()}}\n   </div>\n   <div *ngIf=\"hasAfterBar()\"\n        class=\"p8\"\n        [ngClass]=\"{'selected-entity': !!selectedEntityType}\">\n      {{getPostOperationCapacityLabel()}}\n   </div>\n</div>","import {PrecheckDiskGroupData} from '@generated/precheck-disk-group-data';\nimport {PrecheckEntityType} from '@generated/precheck-entity-type';\nimport {DiskData} from '@generated/disk-data';\n\nexport interface PrecheckEntity {\n\n   hostRef: any;\n   type: PrecheckEntityType;\n   name: string;\n   primaryIconId: string;\n   uuid: string;\n   isHostConnected: boolean;\n   isInMaintenanceMode: boolean;\n   diskGroupData: PrecheckDiskGroupData;\n   diskData: DiskData;\n   children: PrecheckEntity[];\n} //class PrecheckEntity\n\nexport module PrecheckEntity{\nexport class Factory {\n\n   static create = (hostRef: any, type: PrecheckEntityType, name: string, primaryIconId: string, uuid: string, isHostConnected: boolean, isInMaintenanceMode: boolean, diskGroupData: PrecheckDiskGroupData, diskData: DiskData, children: PrecheckEntity[]): PrecheckEntity => {\n      return { hostRef: hostRef, type: type, name: name, primaryIconId: primaryIconId, uuid: uuid, isHostConnected: isHostConnected, isInMaintenanceMode: isInMaintenanceMode, diskGroupData: diskGroupData, diskData: diskData, children: children, };\n   }\n\n\n} //class Factory\n\n} //module PrecheckEntity\n","/* Copyright 2019-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {NgModule} from \"@angular/core\";\nimport {ClarityModule} from \"@clr/angular\";\nimport {FormsModule} from \"@angular/forms\";\nimport {CommonModule} from \"@angular/common\";\nimport {RouterModule, Routes} from \"@angular/router\";\nimport {VsanCommonModule} from \"../common/vsan-common.module\";\nimport {VsanChartModule} from \"@component/chart/chart.module\";\nimport {PrecheckComponent} from \"./precheck.component\";\nimport {PrecheckGuardRailsComponent} from \"./guard-rails/precheck-guard-rails.component\";\nimport {PrecheckReportService} from \"./report/precheck-report.service\";\nimport {PrecheckCapacityTabComponent} from \"./report/capacity/precheck-capacity-tab.component\";\nimport {PrecheckReportComponent} from \"./report/precheck-report.component\";\nimport {EnterMaintenanceModeDialogComponent} from \"./enter-maintenance-mode-dialog.component\";\nimport {PrecheckVirtualObjectsTabComponent} from \"./report/virtual-objects/precheck-virtual-objects-tab.component\";\nimport {PrecheckCapacityBarChartComponent} from \"./report/capacity/precheck-capacity-bar-chart.component\";\nimport {PrecheckModule} from \"@component/precheck/pre-check.module\";\nimport {VirtualObjectsTableModule} from \"@component/virtual-objects-table/virtual-objects-table.module\";\nimport {HealthChecksModule} from \"../health/health-checks.module\";\nimport {SpaceEfficiencyService} from \"@service/space-efficiency-service\";\nimport {UnavailableViewModule} from \"@component/unavailable-view/unavailable-view.module\";\nimport {PrecheckPersistenceTabComponent} from \"./report/psp/precheck-persistence-tab.component\";\nimport {PrecheckCapacityBreakdownComponent} from \"./report/capacity/precheck-capacity-breakdown.component\";\n\nconst precheckRoutes: Routes = [\n   {\n      path: \"\",\n      component: PrecheckComponent,\n   },\n   {\n      path: \"enterMaintenanceModeDialog\",\n      component: EnterMaintenanceModeDialogComponent,\n   },\n];\n\n@NgModule({\n   imports: [\n      FormsModule,\n      CommonModule,\n      ClarityModule,\n      PrecheckModule,\n      VsanChartModule,\n      VsanCommonModule,\n      HealthChecksModule,\n      UnavailableViewModule,\n      VirtualObjectsTableModule,\n      RouterModule.forChild(precheckRoutes),\n   ],\n   declarations: [\n      PrecheckCapacityTabComponent,\n      PrecheckGuardRailsComponent,\n      PrecheckReportComponent,\n      PrecheckComponent,\n      PrecheckVirtualObjectsTabComponent,\n      EnterMaintenanceModeDialogComponent,\n      PrecheckCapacityBarChartComponent,\n      PrecheckPersistenceTabComponent,\n      PrecheckCapacityBreakdownComponent,\n   ],\n   providers: [\n      PrecheckReportService,\n      SpaceEfficiencyService,\n   ],\n})\nexport class PrecheckReportModule {\n}\n","<!--Copyright 2018-2022 VMware, Inc. All rights reserved. -- VMware Confidential-->\n<vsan-validation id=\"evacuation-status-validation-message\"\n                 *ngIf=\"alertMessage\"\n                 class=\"alert-view\"\n                 [alert]=\"alertMessage\"\n                 (onClosed)=\"alertMessage = undefined\">\n</vsan-validation>\n<div *ngIf=\"loadingReport || loadingInitialInfo\" class=\"spinner central-spinner\">{{\"vsan.loading\" | localized}}</div>\n<ng-container *ngIf=\"!loadingReport && !loadingInitialInfo && report\">\n   <div *ngIf=\"!report.hasPrecheckReport && !isTaskForSelectedEntity\" id=\"evacuation-report-no-valid-test-label\">\n      {{\"vsan.evacuationStatus.report.noResult\" | localized}}\n   </div>\n   <ng-container *ngIf=\"report.hasPrecheckReport\">\n      <div class=\"report-header\">\n         <h5 id=\"evacuation-report-last-test-label\">\n            {{\"vsan.evacuationStatus.report.label\" | localized}}\n         </h5>\n         <div class=\"actions-container\">\n            <!--Enter maintenance mode button-->\n            <button id=\"enter-maintenance-mode-action\"\n                    class=\"btn btn-outline btn-sm\"\n                    *ngIf=\"enterMaintenanceModeVisible\"\n                    [disabled]=\"enterMaintenanceModeDisabledReason\"\n                    [attr.title]=\"enterMaintenanceModeDisabledReason\"\n                    (click)=\"onEnterMaintenanceModeClicked()\">\n               {{\"vsan.evacuationStatus.enterMaintenanceModeButtonLabel\" | localized}}\n            </button>\n            <!--Disk group actions-->\n            <button id=\"remove-disk-group-action\"\n                    class=\"btn btn-outline btn-sm\"\n                    *ngIf=\"removeDiskGroupVisible\"\n                    [disabled]=\"isDiskAndGroupActionDisabled\"\n                    [attr.title]=\"diskAndGroupActionDisabledReason\"\n                    (click)=\"deleteDiskGroup()\">\n               {{\"vsan.evacuationStatus.removeDiskgroupButtonLabel\" | localized}}\n            </button>\n            <button id=\"recreate-disk-group-action\"\n                    class=\"btn btn-outline btn-sm\"\n                    *ngIf=\"recreateDiskGroupVisible\"\n                    [disabled]=\"isDiskAndGroupActionDisabled\"\n                    [attr.title]=\"diskAndGroupActionDisabledReason\"\n                    (click)=\"recreateDiskGroup()\">\n               {{\"vsan.evacuationStatus.recreateDiskgroupButtonLabel\" | localized}}\n            </button>\n            <button id=\"unmount-disk-group-action\"\n                    class=\"btn btn-outline btn-sm\"\n                    *ngIf=\"unmountDiskGroupVisible\"\n                    [disabled]=\"isDiskAndGroupActionDisabled || !precheckEntity?.diskGroupData?.isMounted\"\n                    [attr.title]=\"diskAndGroupActionDisabledReason\"\n                    (click)=\"unmountDiskGroup()\">\n               {{\"vsan.evacuationStatus.unmountDiskgroupButtonLabel\" | localized}}\n            </button>\n            <!--Remove disk button-->\n            <button id=\"remove-disk-action\"\n                    class=\"btn btn-outline btn-sm\"\n                    *ngIf=\"removeDiskVisible\"\n                    [disabled]=\"isDiskAndGroupActionDisabled\"\n                    [attr.title]=\"diskAndGroupActionDisabledReason\"\n                    (click)=\"deleteDisk()\">\n               {{\"vsan.evacuationStatus.removeDiskButtonLabel\" | localized}}\n            </button>\n            <!--Unmount Vsan Max disk button-->\n            <button id=\"unmount-disk-action\"\n                    class=\"btn btn-outline btn-sm\"\n                    *ngIf=\"unmountVsanMaxDiskVisible\"\n                    [disabled]=\"isDiskAndGroupActionDisabled\"\n                    [attr.title]=\"diskAndGroupActionDisabledReason\"\n                    (click)=\"unmountVsanMaxDisk()\">\n               {{\"vsan.evacuationStatus.unmountDiskgroupButtonLabel\" | localized}}\n            </button>\n         </div>\n      </div>\n      <div>\n         <form class=\"clr-form clr-form-horizontal\">\n            <div class=\"clr-form-control\">\n               <!--Evacuation report last date and summary message-->\n               <label for=\"last-report-summary-message\" class=\"clr-control-label\">\n                  {{report.reportDate | l10nDate}}\n               </label>\n               <div class=\"clr-control-container\">\n                  <clr-icon id=\"selected-decommission-mode-summary-icon\"\n                            [attr.shape]=\"statusIcon\"\n                            [ngClass]=\"getIconClasses(statusIcon)\">\n                  </clr-icon>\n                  <span id=\"last-report-summary-message\">{{getSummaryReportMessage()}}</span>\n               </div>\n            </div>\n         </form>\n         <!--Warning messages returned from backend-->\n         <ng-container *ngIf=\"report?.messages?.length\">\n            <div *ngFor=\"let message of report.messages; let i = index\" class=\"clr-row\">\n               <div id=\"report-warning-message-{{i}}\" class=\"clr-col-12\">\n                  {{message}}\n               </div>\n            </div>\n         </ng-container>\n      </div>\n      <ng-container *ngIf=\"!hasReportError; else capacityData\">\n         <clr-tabs class=\"evacuation-report-tabs display-flex-column\">\n            <!--Virtual objects tab-->\n            <clr-tab [ngClass]=\"{'display-flex-column' : isVirtualObjectsTabActive}\">\n               <button clrTabLink\n                       class=\"btn btn-link\">\n                  <span class=\"tab-label text-nowrap\"\n                        title=\"{{'vsan.evacuationStatus.report.predictedOverview.virtualObjectsTab.label' | localized}}\">\n                     {{\"vsan.evacuationStatus.report.predictedOverview.virtualObjectsTab.label\" | localized}}\n                  </span>\n                  <clr-icon *ngIf=\"!!virtualObjectsTabStatusIcon\"\n                            [attr.shape]=\"virtualObjectsTabStatusIcon\"\n                            [ngClass]=\"getIconClasses(virtualObjectsTabStatusIcon)\">\n                  </clr-icon>\n               </button>\n               <ng-template [(clrIfActive)]=\"isVirtualObjectsTabActive\">\n                  <clr-tab-content *clrIfActive class=\"display-flex-column\">\n                     <vsan-precheck-virtual-objects-tab class=\"display-flex-column\"\n                                                        [statusIcon]=\"virtualObjectsTabStatusIcon\"\n                                                        [durableVirtualObjects]=\"durableVirtualObjects\"\n                                                        [delayTimer]=\"report.clusterRepairTime\"\n                                                        [isDurabilitySupported]=\"displayDurabilityColumn()\"\n                                                        [inaccessibleObjectsCount]=\"getInaccessibleObjectsCount()\"\n                                                        [nonCompliantObjectsCount]=\"getNonCompliantObjectsCount()\"\n                                                        [noDurabilityObjectsCount]=\"getObjectsWithoutEnhancedDurabilityCount()\">\n                     </vsan-precheck-virtual-objects-tab>\n                  </clr-tab-content>\n               </ng-template>\n            </clr-tab>\n            <!--Capacity tab-->\n            <clr-tab [ngClass]=\"{'display-flex-column' : isCapacityTabActive}\">\n               <button clrTabLink\n                       class=\"btn btn-link\">\n                  <span class=\"tab-label text-nowrap\"\n                        title=\"{{'vsan.evacuationStatus.report.predictedOverview.capacityTab.label' | localized}}\">\n                     {{\"vsan.evacuationStatus.report.predictedOverview.capacityTab.label\" | localized}}\n                  </span>\n                  <clr-icon *ngIf=\"!!capacityTabStatusIcon\"\n                            [attr.shape]=\"capacityTabStatusIcon\"\n                            [ngClass]=\"getIconClasses(capacityTabStatusIcon)\">\n                  </clr-icon>\n               </button>\n               <ng-template [(clrIfActive)]=\"isCapacityTabActive\">\n                  <clr-tab-content class=\"evacuation-report-capacity-tab display-flex-column\">\n                     <ng-container *ngTemplateOutlet=\"capacityData\"></ng-container>\n                  </clr-tab-content>\n               </ng-template>\n            </clr-tab>\n            <!--Health tab-->\n            <clr-tab *ngIf=\"report?.healthSummary\" [ngClass]=\"{'display-flex-column' : isHealthTabActive}\">\n               <button clrTabLink\n                       class=\"btn btn-link\">\n                 <span class=\"tab-label text-nowrap\"\n                       title=\"{{'vsan.evacuationStatus.report.predictedOverview.healthTab.label' | localized}}\">\n                     {{\"vsan.evacuationStatus.report.predictedOverview.healthTab.label\" | localized}}\n                 </span>\n                  <clr-icon *ngIf=\"!!healthTabStatusIcon\"\n                            [attr.shape]=\"healthTabStatusIcon\"\n                            [ngClass]=\"getIconClasses(healthTabStatusIcon)\">\n                  </clr-icon>\n               </button>\n               <ng-template [(clrIfActive)]=\"isHealthTabActive\">\n                  <clr-tab-content class=\"display-flex-column\">\n                     <div>\n                        {{\"vsan.evacuationStatus.report.predictedOverview.healthTab.generalInfo\" | localized}}\n                     </div>\n                     <vsan-health-checks [isVirtualObjectsLinkShown]=\"false\"\n                                         [isDiskSpaceActionShown]=\"false\"\n                                         [vsanHealthData]=\"report?.healthSummary\"\n                                         [isFlat]=\"true\"\n                                         [includeBorderToDetails]=\"true\">\n                     </vsan-health-checks>\n                  </clr-tab-content>\n               </ng-template>\n            </clr-tab>\n            <!--Data persistence platform tab-->\n            <clr-tab [ngClass]=\"{'display-flex-column' : isPersistenceTabActive}\"\n                     *ngIf=\"report.persistenceData?.persistentInstances?.length\">\n               <button clrTabLink\n                       class=\"btn btn-link\">\n                  <span class=\"tab-label text-nowrap\"\n                        title=\"{{'vsan.evacuationStatus.report.predictedOverview.persistenceTab.label' | localized}}\">\n                     {{\"vsan.evacuationStatus.report.predictedOverview.persistenceTab.label\" | localized}}\n                  </span>\n                  <clr-icon *ngIf=\"!!persistenceTabStatusIcon\"\n                            [attr.shape]=\"persistenceTabStatusIcon\"\n                            [ngClass]=\"getIconClasses(persistenceTabStatusIcon)\">\n                  </clr-icon>\n               </button>\n               <ng-template [(clrIfActive)]=\"isPersistenceTabActive\">\n                  <clr-tab-content class=\"display-flex-column\">\n                     <vsan-precheck-persistence-tab [persistentInstances]=\"report.persistenceData?.persistentInstances\">\n                     </vsan-precheck-persistence-tab>\n                  </clr-tab-content>\n               </ng-template>\n            </clr-tab>\n         </clr-tabs>\n      </ng-container>\n   </ng-container>\n   <!--Capacity related information-->\n   <ng-template #capacityData>\n      <vsan-precheck-capacity-tab [capacityReports]=\"getCapacityReports\"\n                                  [hasPersistenceDataToRebuild]=\"hasPersistenceDataToRebuild\"\n                                  [hasError]=\"hasReportError\">\n      </vsan-precheck-capacity-tab>\n   </ng-template>\n</ng-container>\n","<!--Copyright 2020-2022 VMware, Inc. All rights reserved. -- VMware Confidential-->\n<!--Cluster capacity representation-->\n<div class=\"capacity-row\" *ngIf=\"!hasError\">\n   <label class=\"capacity-label\">\n      <div class=\"p7\">\n         {{\"vsan.evacuationStatus.report.predictedOverview.capacityTab.before\" | localized}}\n      </div>\n      <div class=\"p7\">\n         {{\"vsan.evacuationStatus.report.predictedOverview.capacityTab.after\" | localized}}\n      </div>\n   </label>\n   <vsan-precheck-capacity-bar-chart class=\"capacity-bar-chart\"\n                                     [preOperationCapacity]=\"clusterCapacity.preOperationCapacity\"\n                                     [postOperationCapacity]=\"clusterCapacity.postOperationCapacity\"\n                                     [warningThreshold]=\"clusterCapacity.warningThreshold\"\n                                     [errorThreshold]=\"clusterCapacity.errorThreshold\">\n   </vsan-precheck-capacity-bar-chart>\n</div>\n<!--Cluster capacity datagrid breakdown-->\n<clr-datagrid id=\"evacuation-report-capacity-table\" *ngIf=\"showCapacityTable()\">\n   <!-- Header columns -->\n   <clr-dg-column id=\"object-column\" class=\"primary-column\">\n      {{\"vsan.evacuationStatus.report.predictedOverview.capacityTab.table.objectHeader\" | localized}}\n   </clr-dg-column>\n   <clr-dg-column id=\"capacity-column\">{{getCapacityColumnHeader()}}</clr-dg-column>\n   <!-- Datagrid Content -->\n   <!--Fault domains-->\n   <clr-dg-row *ngFor=\"let faultDomain of clusterCapacity.faultDomains; let i = index\">\n      <clr-dg-cell id=\"fault-domain-name-cell-{{i}}\">\n         <div>\n            <clr-icon id=\"fault-domains-cell-icon-{{i}}\"\n                      aria-hidden=\"true\"\n                      [attr.shape]=\"Icon.FAULT_DOMAIN\">\n            </clr-icon>\n            <span>{{faultDomain.faultDomainName}}</span>\n         </div>\n      </clr-dg-cell>\n      <clr-dg-cell id=\"predicted-capcity-cell-{{i}}\">\n         <span *ngIf=\"hasFaultDomainErrors(faultDomain)\">\n            <clr-icon id=\"fault-domains-cell-{{i}}\"\n                      aria-hidden=\"true\"\n                      shape=\"error-standard\"\n                      class=\"is-solid is-error capacity-error-summary-icon\">\n            </clr-icon>\n            <span *ngIf=\"faultDomain.isAdditionalHostNeeded\">\n               {{\"vsan.evacuationStatus.report.predictedOverview.capacityTab.table.additionalHostNeeded\" | localized}}\n            </span>\n            <span *ngIf=\"faultDomain.hasInsufficientSpace\">\n               {{\"vsan.evacuationStatus.report.predictedOverview.capacityTab.table.insufficientSpace\" | localized}}\n            </span>\n            <span *ngIf=\"faultDomain.isComponentLimitReached\">\n               {{\"vsan.evacuationStatus.report.predictedOverview.capacityTab.table.componentLimitReached\" | localized}}\n            </span>\n         </span>\n         <div *ngIf=\"!hasFaultDomainErrors(faultDomain)\" class=\"capacity-cell\">\n            <vsan-precheck-capacity-bar-chart [preOperationCapacity]=\"faultDomain.preOperationCapacity\"\n                                              [postOperationCapacity]=\"faultDomain.postOperationCapacity\"\n                                              [warningThreshold]=\"clusterCapacity.warningThreshold\"\n                                              [errorThreshold]=\"clusterCapacity.errorThreshold\"\n                                              [isThinBar]=\"'true'\">\n            </vsan-precheck-capacity-bar-chart>\n         </div>\n      </clr-dg-cell>\n      <!--Hosts within fault domains-->\n      <!-- Inner cells -->\n      <ng-container ngProjectAs=\"clr-dg-row-detail\"\n                    *ngFor=\"let hostsCapacityData of faultDomain.hostsCapacityData; let j = index\">\n         <ng-template [clrIfExpanded]=\"hasFaultDomainErrors(faultDomain)\">\n            <clr-dg-row-detail>\n               <clr-dg-cell id=\"host-name-cell-{{j}}\">\n                  <span class=\"host-cell-indent\">\n                     <clr-icon id=\"host-cell-icon-{{j}}\" [attr.shape]=\"hostsCapacityData.iconId\">\n                     </clr-icon>\n                     <span [ngClass]=\"{'selected-entity': !!hostsCapacityData.selectedEntityType}\">\n                        {{hostsCapacityData.hostName}}\n                     </span>\n                  </span>\n               </clr-dg-cell>\n               <clr-dg-cell id=\"predicted-capcity-host-cell-{{j}}\">\n                  <ng-container *ngTemplateOutlet=\"hostCell; context: {item: hostsCapacityData, idx: j}\"></ng-container>\n               </clr-dg-cell>\n            </clr-dg-row-detail>\n         </ng-template>\n      </ng-container>\n   </clr-dg-row>\n   <!--Standalone hosts-->\n   <clr-dg-row *ngFor=\"let standaloneHost of clusterCapacity.standaloneHosts; let i = index\">\n      <clr-dg-cell id=\"host-name-cell-{{i}}\">\n         <div>\n            <clr-icon id=\"host-name-cell-icon-{{i}}\"\n                      [attr.shape]=\"standaloneHost.iconId\">\n            </clr-icon>\n            <span [ngClass]=\"{'selected-entity': !!standaloneHost.selectedEntityType}\">\n               {{standaloneHost.hostName}}\n            </span>\n         </div>\n      </clr-dg-cell>\n      <clr-dg-cell id=\"host-predicted-capcity-cell-{{i}}\">\n         <ng-container *ngTemplateOutlet=\"hostCell; context: {item: standaloneHost, idx: i}\"></ng-container>\n      </clr-dg-cell>\n   </clr-dg-row>\n   <clr-dg-footer>\n      <div class=\"color-legend-container\">\n         <div class=\"color-legend\" [style.background-color]=\"getGreenColor()\"></div>\n         <span class=\"color-legend-label\">\n            {{\"vsan.common.ok\" | localized}}\n         </span>\n         <div class=\"color-legend\" [style.background-color]=\"getYellowColor()\"></div>\n         <span class=\"color-legend-label\">\n            {{\"vsan.evacuationStatus.report.predictedOverview.capacityTab.warningThreshold\" | localized: clusterCapacity.warningThreshold}}\n         </span>\n         <div class=\"color-legend\" [style.background-color]=\"getRedColor()\"></div>\n         <span class=\"color-legend-label\">\n            {{\"vsan.evacuationStatus.report.predictedOverview.capacityTab.dangerThreshold\" | localized: clusterCapacity.errorThreshold}}\n         </span>\n         <div class=\"color-legend no-capacity-legend\"></div>\n         <span class=\"color-legend-label\">\n            {{\"vsan.evacuationStatus.report.predictedOverview.capacityTab.noCapacity\" | localized}}\n         </span>\n      </div>\n   </clr-dg-footer>\n</clr-datagrid>\n<!-- Template for the cell which holds either a recommendation or the bar charts for a given host-->\n<ng-template #hostCell let-item=\"item\" let-idx=\"idx\">\n   <div *ngIf=\"hasHostErrors(item)\">\n      <clr-icon id=\"host-cell-error-{{idx}}\"\n                aria-hidden=\"true\"\n                shape=\"error-standard\"\n                class=\"is-solid is-error capacity-error-summary-icon\">\n      </clr-icon>\n      <ng-container *ngIf=\"hasError && !!item.selectedEntityType\">\n         <span *ngIf=\"item.selectedEntityType === PrecheckEntityType.HOST\">\n            {{\"vsan.evacuationStatus.report.predictedOverview.capacityTab.table.hostDecommissionedFailure\" | localized}}\n         </span>\n         <span *ngIf=\"item.selectedEntityType === PrecheckEntityType.DISK_GROUP\">\n            {{\"vsan.evacuationStatus.report.predictedOverview.capacityTab.table.diskGroupDecommissionedFailure\" | localized}}\n         </span>\n         <span *ngIf=\"item.selectedEntityType === PrecheckEntityType.DISK\">\n            {{\"vsan.evacuationStatus.report.predictedOverview.capacityTab.table.diskDecommissionedFailure\" | localized}}\n         </span>\n      </ng-container>\n      <span *ngIf=\"item.capacityNeeded\">\n         {{getInsufficientSpaceLabel(item.capacityNeeded)}}\n      </span>\n      <span *ngIf=\"item.isComponentLimitReached\">\n         {{\"vsan.evacuationStatus.report.predictedOverview.capacityTab.table.componentLimitReachedOnHost\" | localized}}\n      </span>\n   </div>\n   <ng-container *ngIf=\"!hasHostErrors(item)\">\n      <vsan-precheck-capacity-bar-chart [preOperationCapacity]=\"item.preOperationCapacity\"\n                                        [postOperationCapacity]=\"item.postOperationCapacity\"\n                                        [selectedEntityType]=\"item.selectedEntityType\"\n                                        [warningThreshold]=\"clusterCapacity.warningThreshold\"\n                                        [errorThreshold]=\"clusterCapacity.errorThreshold\"\n                                        [isThinBar]=\"'true'\">\n      </vsan-precheck-capacity-bar-chart>\n   </ng-container>\n</ng-template>","/* Copyright 2018-2022 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, OnInit} from \"@angular/core\";\nimport ObjectInfo from \"@component/inventory/tree-view/ObjectInfo\";\nimport {TreeNode} from \"@component/inventory/tree-view/tree-node\";\nimport {UnavailableViewSpec} from \"@component/unavailable-view/unavailable-view-spec\";\nimport {DecommissionMode} from \"@generated/decommission-mode\";\nimport {DiskData} from \"@generated/disk-data\";\nimport {PermissionService} from \"@generated/permission-service\";\nimport {PrecheckData} from \"@generated/precheck-data\";\nimport {PrecheckEntity} from \"@generated/precheck-entity\";\nimport {PrecheckEntityType} from \"@generated/precheck-entity-type\";\nimport {PrecheckOperation} from \"@generated/precheck-operation\";\nimport {PrecheckService} from \"@generated/precheck-service\";\nimport {PrecheckTaskData} from \"@generated/precheck-task-data\";\nimport {PrecheckTaskType} from \"@generated/precheck-task-type\";\nimport {Privileges} from \"@generated/privileges\";\nimport {SpaceEfficiencyConfig} from \"@generated/space-efficiency-config\";\nimport {TaskInfoData} from \"@generated/task-info-data\";\nimport {TaskService} from \"@generated/task-service\";\nimport {EvacuationContext} from \"@navigation/context/evacuation.context\";\nimport {RefreshHandler} from \"@service/global-refresh.service\";\nimport {ManagedObject} from \"@service/managed-object\";\nimport {ScreenReaderAnnouncer} from \"@service/screen-reader-announcer.service\";\nimport {SpaceEfficiencyService} from \"@service/space-efficiency-service\";\nimport {TaskStatus} from \"@service/task-monitor-service\";\nimport {Logger} from \"@util/logger\";\nimport {VsanDataMigrationUtil} from \"@util/vsan-data-migration-util\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {PrecheckUtil} from \"./precheck-util\";\nimport {PrecheckReportService} from \"./report/precheck-report.service\";\n\n@Component({\n   templateUrl: \"precheck.html\",\n   styleUrls: [\"precheck.scss\"],\n   selector: \"vsan-precheck\",\n})\nexport class PrecheckComponent implements OnInit {\n   private static readonly TIMEOUT_IN_MS: number = 2000;\n\n   private static readonly NEED_REFRESH_ACTIONS: PrecheckTaskType[] = [\n      PrecheckTaskType.HOST_ENTER_MAINTENANCE_MODE,\n      PrecheckTaskType.DISKGROUP_REMOVAL,\n      PrecheckTaskType.DISKGROUP_UNMOUNT,\n      PrecheckTaskType.DISKGROUP_RECREATE,\n      PrecheckTaskType.DISK_REMOVAL,\n      PrecheckTaskType.DISK_UNMOUNT,\n   ];\n\n   clusterRef: ManagedObject = ManagedObject.contextObject;\n   loading: boolean;\n   alertMessage: string;\n   spaceEfficiencyConfig: SpaceEfficiencyConfig;\n   isHostResourcePrecheckSupported: boolean;\n   isDiskResourcePrecheckSupported: boolean;\n   precheckEntities: PrecheckEntity[];\n   precheckEntitiesTreeNodes: TreeNode[];\n   selectedPrecheckEntities: PrecheckEntity[];\n   selectedDecommissionMode: DecommissionMode;\n   diskGroupOfSelectedDisk: PrecheckEntity;\n   precheckUnsupportedLabel: string;\n   precheckTask: PrecheckTaskData;\n   taskProgress: number;\n   showReport: boolean;\n   // whether we should display information for the task progress\n   // Changed when task is started, finished and on selection change.\n   isPrecheckInProgress: boolean;\n   // If there is another operation on the cluster the \"Pre-check\" button is disabled\n   isClusterOperationInProgress: boolean;\n   // Whether the running task is for the selected entity.\n   // Changed on task started and on selection change.\n   isRunningTaskForSelectedEntity: boolean;\n   // Whether the pre-check report is refreshed, mark it to false to load report.\n   reportRefreshed: boolean = false;\n\n   unavailableView: UnavailableViewSpec;\n   hasEditPrivilege: boolean;\n   isVsanMaxEnabled: boolean;\n\n   @ScreenReaderAnnouncer()\n   srOnlyMessage: string;\n\n   get selectedPrecheckEntity(): PrecheckEntity {\n      return VsanUiUtils.isEmpty(this.selectedPrecheckEntities)\n            ? null\n            : this.selectedPrecheckEntities[0];\n   }\n\n   set selectedPrecheckEntity(entity: PrecheckEntity) {\n      this.selectedPrecheckEntities = entity\n            ? [entity]\n            : [];\n      this.precheckUnsupportedLabel = this.getPrecheckUnsupportedLabel();\n      // Update disk group if new entity is a capacity disk.\n      this.diskGroupOfSelectedDisk = !!entity && entity.type === PrecheckEntityType.DISK\n            ? PrecheckUtil.extractParentEntityByUuid(entity.uuid, this.precheckEntities)\n            : null;\n   }\n\n   constructor(private precheckService: PrecheckService,\n         private precheckReportService: PrecheckReportService,\n         private taskService: TaskService,\n         private permissionService: PermissionService,\n         private spaceEfficiencyService: SpaceEfficiencyService) {\n   }\n\n   ngOnInit(): void {\n      this.loading = true;\n      this.permissionService.hasPermissions(this.clusterRef, [Privileges.EDIT_CLUSTER()])\n            .then(result => this.hasEditPrivilege = result)\n            .catch(error => {\n               Logger.warn(\"Unable to check edit cluster privilege: \", error);\n            });\n\n      const context: EvacuationContext = VsanUiUtils.getNavigationData();\n      if (context) {\n         if (context.selectedEntity) {\n            this.selectedPrecheckEntity = PrecheckEntity.Factory.create(\n                  ManagedObject.fromUid(context.selectedEntity), null, null, null, null, true, false, null, null, null);\n            if (context.objectUuid) {\n               this.selectedPrecheckEntity.uuid = context.objectUuid;\n            }\n            if (context.selectedEvacuationType) {\n               this.selectedDecommissionMode = context.selectedEvacuationType;\n            }\n         } else {\n            Logger.error(\"Missing selected entity when context is populated for Data migration pre-check view\");\n         }\n      }\n      this.refresh();\n   }\n\n   @RefreshHandler\n   refresh(): void {\n      this.loading = true;\n      this.unavailableView = null;\n\n      this.precheckService.getPrecheckData(this.clusterRef)\n            .then(this.onPrecheckRetrieved)\n            .catch(this.onError)\n            .finally(() => this.loading = false);\n   }\n\n   onPrecheckEntityChange(entity: PrecheckEntity): void {\n      this.selectedPrecheckEntity = entity;\n      this.selectedDecommissionMode = DecommissionMode.ensureObjectAccessibility;\n      // show report only when the resource pre-check can be run for the selected entity.\n      this.showReport = this.precheckSupported;\n      this.reportRefreshed = false;\n      this.isPrecheckInProgress = false;\n      this.isRunningTaskForSelectedEntity = false;\n   }\n\n   get precheckSupported(): boolean {\n      return this.selectedPrecheckEntity && !this.precheckUnsupportedLabel;\n   }\n\n   onDecommissionModeSummaryChanged(event: DecommissionMode): void {\n      this.selectedDecommissionMode = event;\n      this.reportRefreshed = false;\n      this.showReport = true;\n      this.isPrecheckInProgress = false;\n      this.isRunningTaskForSelectedEntity = false;\n   }\n\n   onReportRefreshed(): void {\n      this.reportRefreshed = true;\n   }\n\n   // override this flag only when it is regarding another entity in the cluster\n   onHasRunningTask(event: boolean): void {\n      if (!this.isRunningTaskForSelectedEntity) {\n         this.isClusterOperationInProgress = event;\n      }\n   }\n\n   async onPrecheckClicked(): Promise<void> {\n      try {\n         let taskType: PrecheckTaskType;\n         let operation: PrecheckOperation;\n         switch (this.selectedPrecheckEntity.type) {\n            case PrecheckEntityType.HOST:\n               taskType = PrecheckTaskType.HOST_PRECHECK;\n               operation = PrecheckOperation.ENTER_MAINTENANCE_MODE;\n               break;\n            case PrecheckEntityType.DISK_GROUP:\n               taskType = PrecheckTaskType.DISKGROUP_PRECHECK;\n               operation = PrecheckOperation.DISK_DATA_EVACUATION;\n               break;\n            case PrecheckEntityType.DISK:\n               taskType = PrecheckTaskType.DISK_PRECHECK;\n               operation = PrecheckOperation.DISK_DATA_EVACUATION;\n               break;\n         }\n\n         const precheckTaskRef: ManagedObject = await this.precheckService.runDataMigrationPrecheck(\n               this.clusterRef,\n               this.selectedPrecheckEntity.uuid,\n               this.selectedDecommissionMode.toString(),\n               operation);\n         this.precheckTask = PrecheckTaskData.Factory.create(\n               precheckTaskRef, // task MoRef\n               this.selectedPrecheckEntity.name, // entity name\n               this.selectedPrecheckEntity.uuid, // enitty uuid\n               null, // host name\n               this.selectedDecommissionMode, // decommission mode\n               taskType); // pre-check type\n         await this.onPrecheckTaskStarted(this.precheckTask);\n      } catch (error) {\n         this.onError(error);\n      }\n   }\n\n   async onPrecheckTaskStarted(precheckTaskData: PrecheckTaskData): Promise<void> {\n      this.alertMessage = undefined;\n      if (!precheckTaskData) {\n         return;\n      }\n\n      this.showReport = false;\n      this.isRunningTaskForSelectedEntity = this.precheckReportService.isTaskForSelectedEntity(\n            precheckTaskData, this.selectedPrecheckEntity.uuid, this.selectedDecommissionMode);\n      this.isClusterOperationInProgress = true;\n      if (!this.isRunningTaskForSelectedEntity) {\n         // show the report if the selection is changed\n         this.showReport = true;\n         return;\n      }\n\n      this.taskProgress = 0;\n      this.isPrecheckInProgress = true;\n      this.precheckTask = precheckTaskData;\n      // Await task completion\n      try {\n         while (true) {\n            // do not track the progress if the selection is changed\n            if (!this.isPrecheckInProgress) {\n               return;\n            }\n\n            const taskInfo: TaskInfoData = await this.taskService.getInfo(this.precheckTask.taskMoRef);\n            if (!taskInfo || taskInfo.status === TaskStatus.SUCCESS) {\n               break;\n            }\n\n            if (taskInfo.status === TaskStatus.ERROR) {\n               const errorMessage: string = this.precheckReportService.getFailedTaskMessage(\n                     this.precheckTask.taskType, this.selectedPrecheckEntity.name);\n               this.onError(errorMessage);\n               return;\n            }\n\n            this.taskProgress = taskInfo.progress;\n            // repeat on every 2 seconds\n            await new Promise(resolve => setTimeout(resolve, PrecheckComponent.TIMEOUT_IN_MS));\n         }\n      } catch (error) {\n         this.onError(error);\n         return;\n      }\n\n      this.isPrecheckInProgress = false;\n      this.isClusterOperationInProgress = false;\n\n      const refreshNeeded: boolean =\n            PrecheckComponent.NEED_REFRESH_ACTIONS.indexOf(precheckTaskData.taskType) > -1;\n      if (refreshNeeded) {\n         this.selectedPrecheckEntity = undefined;\n         this.refresh();\n      } else {\n         this.showReport = true;\n         this.reportRefreshed = false;\n      }\n   }\n\n   onSelectedObjectInfosChange(objectInfos: ObjectInfo[]): void {\n      if (VsanUiUtils.isEmpty(objectInfos) ||\n            (this.selectedPrecheckEntity && objectInfos[0].uuid === this.selectedPrecheckEntity.uuid)) {\n         return;\n      }\n      this.onPrecheckEntityChange(objectInfos[0] as PrecheckEntity);\n      this.selectedPrecheckEntities = objectInfos as PrecheckEntity[];\n   }\n\n   private convertToTreeNodes(entities: PrecheckEntity[]): TreeNode[] {\n      if (VsanUiUtils.isEmpty(entities)) {\n         return [];\n      }\n      return entities.map(entity => new TreeNode(entity, this.convertToTreeNodes(entity.children)));\n   }\n\n   private getPrecheckUnsupportedLabel(): string {\n      if (!this.selectedPrecheckEntity) {\n         return \"\";\n      }\n      switch (this.selectedPrecheckEntity.type) {\n         case PrecheckEntityType.HOST:\n            if (!this.selectedPrecheckEntity.isHostConnected) {\n               return VsanUiUtils.getString(\"vsan.dataMigrationPrecheck.notSupported.host.disconnected\");\n            } else if (this.selectedPrecheckEntity.isInMaintenanceMode) {\n               return VsanUiUtils.getString(\"vsan.dataMigrationPrecheck.notSupported.host.maintenanceMode\");\n            }\n            break;\n         case PrecheckEntityType.DISK_GROUP:\n            if (this.selectedPrecheckEntity.isInMaintenanceMode) {\n               return VsanUiUtils.getString(\"vsan.dataMigrationPrecheck.notSupported.diskgroup.maintenanceMode\");\n            }\n            if (this.selectedPrecheckEntity.diskGroupData) {\n               if (this.selectedPrecheckEntity.diskGroupData.isLocked) {\n                  return VsanUiUtils.getString(\"vsan.dataMigrationPrecheck.notSupported.diskgroup.locked\");\n               } else if (!this.selectedPrecheckEntity.diskGroupData.isMounted) {\n                  return VsanUiUtils.getString(\"vsan.dataMigrationPrecheck.notSupported.diskgroup.unmounted\");\n               }\n            }\n            break;\n         case PrecheckEntityType.DISK:\n            if (this.selectedPrecheckEntity.isInMaintenanceMode) {\n               return VsanUiUtils.getString(\"vsan.dataMigrationPrecheck.notSupported.disk.maintenanceMode\");\n            }\n            if (!this.spaceEfficiencyService.isDiskPreCheckEvacuationSupported(this.spaceEfficiencyConfig)) {\n               return VsanUiUtils.getString(\"vsan.dataMigrationPrecheck.notSupported.disk.dedupEnabled\");\n            }\n            if (this.selectedPrecheckEntity.diskData) {\n               if (this.selectedPrecheckEntity.diskData.deviceState === DiskData.DeviceState.OFF) {\n                  return this.isVsanMaxEnabled\n                        ? VsanUiUtils.getString(\"vsan.dataMigrationPrecheck.notSupported.disk.unmounted\")\n                        : VsanUiUtils.getString(\"vsan.dataMigrationPrecheck.notSupported.disk.unmountedDiskGroup\");\n               } else if (this.selectedPrecheckEntity.diskData.deviceState === DiskData.DeviceState.ERROR) {\n                  return VsanUiUtils.getString(\"vsan.dataMigrationPrecheck.notSupported.disk.deadOrError\");\n               }\n            }\n            break;\n         default:\n            return \"\";\n      }\n   }\n\n   getOperationInProgressLabel(): string {\n      if (!this.precheckTask) {\n         return VsanUiUtils.getString(\"vsan.evacuationStatus.report.inProgress\", this.taskProgress);\n      }\n\n      switch (this.precheckTask.taskType) {\n         case PrecheckTaskType.HOST_ENTER_MAINTENANCE_MODE:\n            return VsanUiUtils.getString(\"vsan.evacuationStatus.report.inProgress.maintenanceMode\", this.taskProgress);\n         case PrecheckTaskType.DISKGROUP_REMOVAL:\n            return VsanUiUtils.getString(\"vsan.evacuationStatus.report.inProgress.removeGroup\", this.taskProgress);\n         case PrecheckTaskType.DISKGROUP_RECREATE:\n            return VsanUiUtils.getString(\"vsan.evacuationStatus.report.inProgress.recreateGroup\", this.taskProgress);\n         case PrecheckTaskType.DISKGROUP_UNMOUNT:\n            return VsanUiUtils.getString(\"vsan.evacuationStatus.report.inProgress.unmountGroup\", this.taskProgress);\n         case PrecheckTaskType.DISK_REMOVAL:\n            return VsanUiUtils.getString(\"vsan.evacuationStatus.report.inProgress.removeDisk\", this.taskProgress);\n         case PrecheckTaskType.DISK_UNMOUNT:\n            return VsanUiUtils.getString(\"vsan.evacuationStatus.report.inProgress.unmountDisk\", this.taskProgress);\n         default:\n            // Running data migration pre-check for host, disk group or disk.\n            return VsanUiUtils.getString(\"vsan.evacuationStatus.report.inProgress\", this.taskProgress);\n      }\n   }\n\n   getGeneralMessageLabel(): string {\n      if (this.isVsanMaxEnabled) {\n         return VsanUiUtils.getString(\"vsan.evacuationStatus.hostDisk.resourcePrecheck.generalMessage\");\n      }\n\n      return this.isDiskResourcePrecheckSupported\n            ? VsanUiUtils.getString(\"vsan.evacuationStatus.hostDiskGroupDisk.resourcePrecheck.generalMessage\")\n            : VsanUiUtils.getString(\"vsan.evacuationStatus.host.resourcePrecheck.generalMessage\");\n   }\n\n   private onPrecheckRetrieved = (result: PrecheckData) => {\n      if (!result) {\n         return;\n      }\n\n      if (!result.isHostResourcePrecheckSupported) {\n         this.unavailableView = UnavailableViewSpec.DATA_MIGRATION_PRECHECK_VIEW_OLD_HOSTS;\n         this.announceToScreenReader();\n         return;\n      }\n\n      if (VsanUiUtils.isEmpty(result.precheckEntities)) {\n         this.unavailableView = UnavailableViewSpec.DATA_MIGRATION_PRECHECK_VIEW_NO_HOSTS;\n         this.announceToScreenReader();\n         return;\n      }\n\n      this.alertMessage = result.errorMessage;\n      this.spaceEfficiencyConfig = result.spaceEfficiencyConfig;\n      this.isHostResourcePrecheckSupported = result.isHostResourcePrecheckSupported;\n      this.isDiskResourcePrecheckSupported = result.isDiskResourcePrecheckSupported;\n      this.isVsanMaxEnabled = result.isVsanMaxEnabled;\n\n      this.precheckEntities = result.precheckEntities;\n      this.precheckEntitiesTreeNodes = this.convertToTreeNodes(this.precheckEntities);\n      this.selectPrecheckEntity();\n\n      if (this.selectedDecommissionMode === undefined || this.selectedDecommissionMode === null) {\n         this.selectedDecommissionMode = DecommissionMode.ensureObjectAccessibility;\n      }\n      this.showReport = this.precheckSupported;\n      this.reportRefreshed = false;\n\n      this.announceToScreenReader();\n   };\n\n   private selectPrecheckEntity(): void {\n      if (!this.selectedPrecheckEntity || VsanUiUtils.isEmpty(this.precheckEntities)) {\n         return;\n      }\n\n      if (this.selectedPrecheckEntity.uuid) {\n         // Update selected evacuation entity based on uuid after refreshing entities.\n         this.selectedPrecheckEntity = PrecheckUtil.extractPrecheckEntityByUuid(\n               this.selectedPrecheckEntity.uuid, this.precheckEntities);\n      } else {\n         // When we navigate the user from Enter Maintenance Mode dialog to this page, it only passes hostRef,\n         // we need to use the hostRef to extract the entire host entity data.\n         this.selectedPrecheckEntity = PrecheckUtil.extractHostEntity(\n               this.selectedPrecheckEntity.hostRef, this.precheckEntities);\n      }\n   }\n\n   private announceToScreenReader(): void {\n      if (this.selectedPrecheckEntity && this.selectedDecommissionMode) {\n         this.srOnlyMessage = VsanUiUtils.getString(\"vsan.evacuationStatus.report.srMessage\",\n               this.selectedPrecheckEntity.name,\n               VsanDataMigrationUtil.getLocalizedDecommissionMode(this.selectedDecommissionMode));\n      } else {\n         this.srOnlyMessage = VsanUiUtils.getString(\"vsan.screenReader.message.page.loaded\",\n               VsanUiUtils.getString(\"vsan.monitor.evacuationStatus.label\"));\n      }\n   }\n\n   private onError = (error: any) => {\n      this.alertMessage = error;\n      this.isRunningTaskForSelectedEntity = false;\n      this.isPrecheckInProgress = false;\n      this.isClusterOperationInProgress = false;\n      // even when the task fails we want to show the last valid report\n      this.showReport = true;\n      this.reportRefreshed = false;\n   };\n}\n","/* Copyright 2018-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {ChangeDetectionStrategy, Component, Input, OnInit} from \"@angular/core\";\nimport {BarChartService} from \"@component/chart/capacity-bar-chart/bar-chart.service\";\nimport {PrecheckCapacityData} from \"@generated/precheck-capacity-data\";\nimport {PrecheckEntityType} from \"@generated/precheck-entity-type\";\nimport {PrecheckReportService} from \"../precheck-report.service\";\n\n@Component({\n   templateUrl: \"precheck-capacity-bar-chart.html\",\n   styleUrls: [\"precheck-capacity-bar-chart.scss\"],\n   selector: \"vsan-precheck-capacity-bar-chart\",\n   changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PrecheckCapacityBarChartComponent implements OnInit {\n   @Input()\n   preOperationCapacity: PrecheckCapacityData;\n\n   @Input()\n   postOperationCapacity: PrecheckCapacityData;\n\n   @Input()\n   warningThreshold: number;\n\n   @Input()\n   errorThreshold: number;\n\n   @Input()\n   isThinBar: boolean;\n\n   @Input()\n   selectedEntityType: PrecheckEntityType;\n\n   afterBarWidth: number;\n\n   beforeUsedCapacityWidth: number;\n\n   afterUsedCapacityWidth: number;\n\n   beforeBarColor: string;\n\n   afterBarColor: string;\n\n   constructor(private precheckReportService: PrecheckReportService,\n         private barChartService: BarChartService) {\n   }\n\n   ngOnInit(): void {\n      this.afterBarWidth = this.precheckReportService.getBarChartWidth(this.preOperationCapacity.totalCapacity,\n            this.postOperationCapacity.totalCapacity) || 100;\n\n      this.beforeBarColor = this.barChartService.getColorPalette(this.preOperationCapacity.usedCapacity,\n            this.preOperationCapacity.totalCapacity, this.warningThreshold, this.errorThreshold)[0];\n      this.afterBarColor = this.barChartService.getColorPalette(this.postOperationCapacity.usedCapacity,\n            this.postOperationCapacity.totalCapacity, this.warningThreshold, this.errorThreshold)[0];\n\n      this.beforeUsedCapacityWidth = this.barChartService.asPercentage(this.preOperationCapacity.usedCapacity,\n            this.preOperationCapacity.totalCapacity);\n      this.afterUsedCapacityWidth = this.barChartService.asPercentage(this.postOperationCapacity.usedCapacity,\n            this.postOperationCapacity.totalCapacity);\n   }\n\n   hasBeforeBar(): boolean {\n      return !this.selectedEntityType || !!this.preOperationCapacity.totalCapacity;\n   }\n\n   // display the after bar when either there is capacity difference, cluster level bars are displayed,\n   // or the bar is for the selected entity\n   hasAfterBar(): boolean {\n      return this.hasCapacityDifference() || !this.isThinBar || !!this.selectedEntityType;\n   }\n\n   getPreOperationCapacityLabel(): string {\n      return this.precheckReportService.getCapacityLabel(this.preOperationCapacity, this.isThinBar,\n            this.hasCapacityDifference());\n   }\n\n   getPostOperationCapacityLabel(): string {\n      return this.precheckReportService.getPostOperationCapacityLabel(this.postOperationCapacity, this.isThinBar,\n            this.selectedEntityType);\n   }\n\n   hasCapacityDifference(): boolean {\n      return this.precheckReportService.hasCapacityDifference(this.preOperationCapacity,\n            this.postOperationCapacity);\n   }\n}\n","/* Copyright 2018-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, EventEmitter, HostBinding, Input, OnInit, Output} from \"@angular/core\";\nimport {GuardRailMessageStatus} from \"@generated/guard-rail-message-status\";\nimport {GuardRailPropertyProviderAdapter} from \"@generated/guard-rail-property-provider-adapter\";\nimport {PrecheckReport} from \"@generated/precheck-report\";\nimport {PrecheckService} from \"@generated/precheck-service\";\nimport {RefreshHandler} from \"@service/global-refresh.service\";\nimport {ManagedObject} from \"@service/managed-object\";\nimport {Logger} from \"@util/logger\";\nimport {ReferenceWatcher} from \"@util/reference-watcher\";\nimport {PrecheckReportService} from \"../report/precheck-report.service\";\n\n@Component({\n   templateUrl: \"precheck-guard-rails.html\",\n   styleUrls: [\"precheck-guard-rails.scss\"],\n   selector: \"vsan-precheck-guard-rails\",\n   providers: [ReferenceWatcher],\n})\nexport class PrecheckGuardRailsComponent implements OnInit {\n   @Input()\n   isDiskResourcePrecheckSupported: boolean;\n\n   @Input()\n   isVsanMaxEnabled: boolean;\n\n   @Output()\n   hasRunningTask: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n   @HostBinding(\"class\")\n   get noContentDisplayed(): string {\n      return (this.warningMessages && this.warningMessages.length > 0) || this.runningTaskMessage || this.alertMessage ?\n            \"\" : PrecheckGuardRailsComponent.NO_BOTTOM_SPACING_CLASS;\n   }\n\n   private static readonly GUARD_RAIL_MESSAGES_PROPERTY: string = \"clusterGuardRailMessages\";\n   private static readonly NO_BOTTOM_SPACING_CLASS: string = \"no-bottom-spacing\";\n   private static readonly TIMEOUT_IN_MS: number = 5000;\n\n   warningMessages: string[] = [];\n   alertMessage: string;\n   runningTaskMessage: string;\n\n   constructor(private precheckService: PrecheckService,\n         private precheckReportService: PrecheckReportService,\n         private guardRailService: GuardRailPropertyProviderAdapter,\n         private refWatcher: ReferenceWatcher) {\n   }\n\n   async ngOnInit(): Promise<any> {\n      await this.fetch();\n      this.refWatcher.setInterval(() => this.fetch(), PrecheckGuardRailsComponent.TIMEOUT_IN_MS);\n   }\n\n   @RefreshHandler\n   private async fetch(): Promise<any> {\n      try {\n         const result: any[] = await Promise.all([\n            this.precheckService.getPrecheckReport(ManagedObject.contextObject, null, null, null),\n            this.guardRailService.getGuardRailsMessages(ManagedObject.contextObject),\n         ]);\n         if (result && result.length === 2) {\n            this.populateRunningTaskMessage(result[0]);\n            this.populateGuardRailMessages(result[1]);\n         }\n      } catch (error) {\n         Logger.error(`Unexpected error ${error} encountered while querying Cluster guard rail messages`);\n         this.warningMessages = [];\n         this.runningTaskMessage = undefined;\n         this.alertMessage = error;\n      }\n   }\n\n   private populateRunningTaskMessage = (precheckReport: PrecheckReport) => {\n      if (!precheckReport || !precheckReport.runningTask) {\n         this.hasRunningTask.emit(false);\n         this.runningTaskMessage = undefined;\n         return;\n      }\n\n      this.hasRunningTask.emit(true);\n      this.runningTaskMessage = this.precheckReportService.getRunningTaskMessage(\n            precheckReport.runningTask, this.isDiskResourcePrecheckSupported, this.isVsanMaxEnabled);\n   };\n\n   private populateGuardRailMessages = (guardRailMessages: Map<GuardRailMessageStatus, string[]>) => {\n      this.warningMessages = guardRailMessages[GuardRailMessageStatus.WARNING];\n   };\n}\n","<!--Copyright 2018-2020 VMware, Inc. All rights reserved. -- VMware Confidential-->\n<vsan-validation id=\"evacuation-status-guard-rails-error-message\"\n                 *ngIf=\"alertMessage\"\n                 [alert]=\"alertMessage\">\n</vsan-validation>\n<!--Warning messages-->\n<clr-alert *ngIf=\"warningMessages?.length || runningTaskMessage\"\n           id=\"evacuation-status-guard-rails-warning-messages\"\n           [clrAlertType]=\"'warning'\"\n           [clrAlertClosable]=\"false\">\n   <!--Warning message for running blocking task on the cluster-->\n   <clr-alert-item *ngIf=\"runningTaskMessage\"\n                   id=\"evacuation-status-guard-rails-running-task-message\">\n      <span class=\"alert-text\" role=\"alert\">{{runningTaskMessage}}</span>\n   </clr-alert-item>\n   <!--guard-rail messages-->\n   <clr-alert-item *ngFor=\"let warningMessage of warningMessages\">\n      <span class=\"alert-text\" role=\"alert\">{{warningMessage}}</span>\n   </clr-alert-item>\n</clr-alert>\n","/* Copyright 2018-2022 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, EventEmitter, Input, OnInit, Output} from \"@angular/core\";\nimport {DecommissionMode} from \"@generated/decommission-mode\";\nimport {DurabilityState} from \"@generated/durability-state\";\nimport {PermissionService} from \"@generated/permission-service\";\nimport {PrecheckClusterCapacityData} from \"@generated/precheck-cluster-capacity-data\";\nimport {PrecheckEntity} from \"@generated/precheck-entity\";\nimport {PrecheckEntityType} from \"@generated/precheck-entity-type\";\nimport {PrecheckOperation} from \"@generated/precheck-operation\";\nimport {PrecheckReport} from \"@generated/precheck-report\";\nimport {PrecheckResultStatusType} from \"@generated/precheck-result-status-type\";\nimport {PrecheckService} from \"@generated/precheck-service\";\nimport {PrecheckTaskData} from \"@generated/precheck-task-data\";\nimport {PrecheckTaskType} from \"@generated/precheck-task-type\";\nimport {Privileges} from \"@generated/privileges\";\nimport {VirtualObjectModel} from \"@generated/virtual-object-model\";\nimport {VsanCapabilityData} from \"@generated/vsan-capability-data\";\nimport {VsanCapabilityProvider} from \"@generated/vsan-capability-provider\";\nimport {VsanConfigService} from \"@generated/vsan-config-service\";\nimport {VsanConfigSpec} from \"@generated/vsan-config-spec\";\nimport {WhatIfPropertyProvider} from \"@generated/what-if-property-provider\";\nimport {DiskGroupActionData} from \"@model/disk-group-action.data\";\nimport {HostActionData} from \"@model/host-action.data\";\nimport {DeleteDisksContext} from \"@navigation/context/delete-disks-context\";\nimport {DiskGroupActionContext} from \"@navigation/context/disk-group-action-context\";\nimport {UnmountDiskContext} from \"@navigation/context/unmount-disk-context\";\nimport {ManagedObject} from \"@service/managed-object\";\nimport {Icon} from \"@util/icon\";\nimport {Logger} from \"@util/logger\";\nimport {ModalBuilder} from \"@util/modal-builder\";\nimport {VsanDiskMgmtActionsUtil} from \"@util/vsan-disk-mgmt-actions-util\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {VsanRoutes} from \"../../../vsan-routes\";\nimport {EnterMaintenanceModeDialogContext} from \"../enter-maintenance-mode-dialog-context\";\nimport {EnterMaintenanceModeDialogComponent} from \"../enter-maintenance-mode-dialog.component\";\nimport {CapacityReport} from \"./capacity/precheck-capacity-tab.component\";\nimport {PrecheckReportService} from \"./precheck-report.service\";\n\n@Component({\n   templateUrl: \"precheck-report.html\",\n   styleUrls: [\"precheck-report.scss\"],\n   selector: \"vsan-precheck-report\",\n})\nexport class PrecheckReportComponent implements OnInit {\n\n   private readonly NO_DURABILITY_STATES: DurabilityState[] = [\n      DurabilityState.EXCEEDED_COMP_LIMIT,\n      DurabilityState.NO_RESOURCE,\n      DurabilityState.NO_SPACE,\n      DurabilityState.STALE_DURABILITY_COMP,\n   ];\n\n   readonly Icon: Icon = Icon;\n   loadingReport: boolean;\n   loadingInitialInfo: boolean;\n   alertMessage: string;\n   report: PrecheckReport;\n   durableVirtualObjects: VirtualObjectModel[] = [];\n   statusIcon: string;\n   virtualObjectsTabStatusIcon: string;\n   capacityTabStatusIcon: string;\n   healthTabStatusIcon: string;\n   persistenceTabStatusIcon: string;\n   isCapacityTabActive: boolean;\n   isHealthTabActive: boolean;\n   isVirtualObjectsTabActive: boolean;\n   isPersistenceTabActive: boolean;\n   isTaskForSelectedEntity: boolean;\n\n   // Actions status\n   enterMaintenanceModeVisible: boolean;\n   enterMaintenanceModeDisabledReason: string;\n   removeDiskGroupVisible: boolean;\n   recreateDiskGroupVisible: boolean;\n   unmountDiskGroupVisible: boolean;\n   removeDiskVisible: boolean;\n   unmountVsanMaxDiskVisible: boolean;\n   isDiskAndGroupActionDisabled: boolean;\n   diskAndGroupActionDisabledReason: string;\n\n   @Input()\n   diskGroupOfSelectedDisk: PrecheckEntity;\n\n   @Output()\n   precheckTaskStarted: EventEmitter<PrecheckTaskData> = new EventEmitter<PrecheckTaskData>();\n\n   @Input()\n   precheckEntity: PrecheckEntity;\n\n   @Input()\n   decommissionMode: DecommissionMode;\n\n   @Input()\n   isVsanMaxEnabled: boolean;\n\n   private _reportRefreshed: boolean;\n\n   @Input()\n   set reportRefreshed(refreshed: boolean) {\n      this._reportRefreshed = refreshed;\n      if (!refreshed && this.isInit) {\n         this.loadReport();\n         this.updateActionsStatus();\n      }\n   }\n\n   get reportRefreshed(): boolean {\n      return this._reportRefreshed;\n   }\n\n   @Output()\n   refreshReport: EventEmitter<void> = new EventEmitter<void>();\n\n   private isInit: boolean;\n   private autoClaimMode: boolean;\n   private hasEMMPermissions: boolean;\n   private hasEditPermission: boolean;\n   private hasStoragePermission: boolean;\n   private capabilities: VsanCapabilityData;\n\n   private _hasReportError: boolean;\n\n   set hasReportError(value: boolean) {\n      if (this._hasReportError !== value) {\n         this._hasReportError = value;\n         this.updateActionsStatus();\n      }\n   }\n\n   get hasReportError(): boolean {\n      return this._hasReportError;\n   }\n\n   get getCapacityReports(): Map<CapacityReport, PrecheckClusterCapacityData> {\n      const capacityReports: Map<CapacityReport, PrecheckClusterCapacityData> =\n            new Map<CapacityReport, PrecheckClusterCapacityData>();\n      if (this.report.clusterCapacity != null) {\n         capacityReports.set(CapacityReport.VSAN, this.report.clusterCapacity);\n      }\n      if (this.report.vsanDirectClusterCapacity != null) {\n         capacityReports.set(CapacityReport.VSAN_DIRECT, this.report.vsanDirectClusterCapacity);\n      }\n\n      return capacityReports;\n   }\n\n   get hasPersistenceDataToRebuild(): boolean {\n      return this.report.persistenceData && this.report.persistenceData.dataToRebuild > 0;\n   }\n\n   get isRecreateDiskGroupSupported(): boolean {\n      return this.capabilities && this.capabilities.isRecreateDiskGroupSupported;\n   }\n\n   constructor(private precheckService: PrecheckService,\n         private precheckReportService: PrecheckReportService,\n         private whatIfPropertyProvider: WhatIfPropertyProvider,\n         private capabilityProvider: VsanCapabilityProvider,\n         private permissionService: PermissionService,\n         private vsanConfigService: VsanConfigService) {\n   }\n\n   async ngOnInit(): Promise<void> {\n      const clusterRef: ManagedObject = ManagedObject.contextObject;\n      this.loadingInitialInfo = true;\n\n      try {\n         let privileges: Map<string, boolean>;\n         let vsanConfigSpec: VsanConfigSpec;\n         [privileges, this.capabilities, vsanConfigSpec] = await Promise.all([\n            this.permissionService.queryPermissions(\n                  clusterRef, [\n                     Privileges.EDIT_CLUSTER(),\n                     Privileges.CONFIG_STORAGE(),\n                     Privileges.HOST_MAINTENANCE(),\n                  ]),\n            this.capabilityProvider.getClusterCapabilityData(clusterRef),\n            this.vsanConfigService.getVsanConfigSpec(clusterRef),\n         ]);\n\n         this.hasEditPermission = privileges[Privileges.EDIT_CLUSTER()];\n         this.hasEMMPermissions = privileges[Privileges.HOST_MAINTENANCE()];\n         this.hasStoragePermission = privileges[Privileges.CONFIG_STORAGE()];\n         this.autoClaimMode = vsanConfigSpec.autoClaimDisks;\n      } catch (error) {\n         this.hasEditPermission = true;\n         this.hasEMMPermissions = true;\n         this.hasStoragePermission = true;\n         Logger.error(\"Unable to query the permissions or basic information required for precheck report operations. \"\n               + error);\n      } finally {\n         this.loadingInitialInfo = false;\n      }\n      if (!this.reportRefreshed) {\n         await this.loadReport();\n      }\n      this.updateActionsStatus();\n      this.isInit = true;\n   }\n\n   private async loadReport(): Promise<void> {\n      this.loadingReport = true;\n      try {\n         const operation: PrecheckOperation = this.precheckEntity.type === PrecheckEntityType.HOST\n               ? PrecheckOperation.ENTER_MAINTENANCE_MODE\n               : PrecheckOperation.DISK_DATA_EVACUATION;\n         this.report = await this.precheckService.getPrecheckReport(\n               ManagedObject.contextObject, this.precheckEntity, this.decommissionMode.toString(), operation);\n      } catch (error) {\n         this.alertMessage = error;\n      }\n      this.loadingReport = false;\n      this.refreshReport.emit();\n\n      // If the report is null or it doesn't belong to the selected entity and decommission mode, return.\n      if (!this.report || this.report.uuid !== this.precheckEntity.uuid ||\n            this.report.decommissionMode !== this.decommissionMode.toString()) {\n         return;\n      }\n\n      if (this.report.runningTask) {\n         this.isTaskForSelectedEntity = this.precheckReportService.isTaskForSelectedEntity(this.report.runningTask,\n               this.precheckEntity.uuid, this.decommissionMode);\n         this.precheckTaskStarted.emit(this.report.runningTask);\n         return;\n      }\n\n      if (this.report.hasPrecheckReport) {\n         this.statusIcon = this.precheckReportService.parseReportStatusToIcon(this.report);\n         this.hasReportError = this.report.status === PrecheckResultStatusType.RED;\n         this.capacityTabStatusIcon = this.precheckReportService.getCapacityTabIcon(this.report.clusterCapacity);\n         // in case of an error we only show capacity related information\n         if (!this.hasReportError) {\n            this.virtualObjectsTabStatusIcon = this.precheckReportService.getVirtualObjectsTabIcon(this.report);\n            this.durableVirtualObjects = this.report.virtualObjects;\n            this.healthTabStatusIcon = this.precheckReportService.getHealthTabIcon(this.report.healthSummary);\n            this.persistenceTabStatusIcon = this.getPersistenceTabIcon();\n         } else {\n            this.durableVirtualObjects = [];\n         }\n      }\n   }\n\n   displayDurabilityColumn(): boolean {\n      return this.precheckEntity.type === PrecheckEntityType.HOST &&\n            this.capabilities.isEnsureDurabilitySupported &&\n            this.decommissionMode === DecommissionMode.ensureObjectAccessibility;\n   }\n\n   onEnterMaintenanceModeClicked(): void {\n      const context: EnterMaintenanceModeDialogContext = {\n         decommissionMode: this.decommissionMode,\n         precheckEntity: this.precheckEntity,\n         clusterRef: ManagedObject.contextObject,\n         isDurabilityPossible: this.report.isDurabilityPossible,\n         isDurabilityGuaranteed: this.report.isDurabilityGuaranteed,\n      };\n\n      new ModalBuilder(\"evacuationStatus/enterMaintenanceModeDialog\")\n            .setSize(EnterMaintenanceModeDialogComponent.EMM_DIALOG_WIDTH,\n                  EnterMaintenanceModeDialogComponent.EMM_DIALOG_HEIGHT)\n            .open(context)\n            .then(taskRef => {\n               this.handleTask(taskRef, PrecheckTaskType.HOST_ENTER_MAINTENANCE_MODE);\n            });\n   }\n\n   deleteDiskGroup(): void {\n      if (!this.isDiskGroupSelected()) {\n         return;\n      }\n      new ModalBuilder(`${VsanRoutes.DISK_MANAGEMENT_VIEW}/deleteDiskGroup`)\n            .setSize(VsanDiskMgmtActionsUtil.DELETE_DISK_GROUP_WIDTH,\n                  VsanDiskMgmtActionsUtil.DELETE_DISK_GROUP_HEIGHT_SMALL)\n            .open(this.getDiskGroupActionContext())\n            .then(taskRef => {\n               this.handleTask(taskRef, PrecheckTaskType.DISKGROUP_REMOVAL);\n            });\n   }\n\n   recreateDiskGroup(): void {\n      if (!this.isDiskGroupSelected()) {\n         return;\n      }\n      new ModalBuilder(`${VsanRoutes.DISK_MANAGEMENT_VIEW}/recreateDiskGroup`)\n            .setSize(VsanDiskMgmtActionsUtil.RECREATE_DIALOG_WIDTH,\n                  VsanDiskMgmtActionsUtil.RECREATE_DIALOG_HEIGHT_SMALL)\n            .open(this.getDiskGroupActionContext())\n            .then(taskRef => {\n               this.handleTask(taskRef, PrecheckTaskType.DISKGROUP_RECREATE);\n            });\n   }\n\n   unmountDiskGroup(): void {\n      if (!this.isDiskGroupSelected()) {\n         return;\n      }\n      new ModalBuilder(`${VsanRoutes.DISK_MANAGEMENT_VIEW}/unmountDiskGroup`)\n            .setSize(VsanDiskMgmtActionsUtil.UNMOUNT_DISK_GROUP_DIALOG_WIDTH,\n                  VsanDiskMgmtActionsUtil.UNMOUNT_DISK_GROUP_DIALOG_HEIGHT_SMALL)\n            .open(this.getDiskGroupActionContext())\n            .then(taskRef => {\n               this.handleTask(taskRef, PrecheckTaskType.DISKGROUP_UNMOUNT);\n            });\n   }\n\n   private isDiskGroupSelected(): boolean {\n      return this.precheckEntity.type === PrecheckEntityType.DISK_GROUP;\n   }\n\n   private getDiskGroupActionContext(): DiskGroupActionContext {\n      return {\n         decommissionMode: this.decommissionMode,\n         host: HostActionData.fromPrecheckEntity(this.precheckEntity),\n         diskGroup: DiskGroupActionData.fromPrecheckEntity(this.precheckEntity),\n      };\n   }\n\n   private handleTask(taskRef: ManagedObject, precheckTaskType: PrecheckTaskType): void {\n      const precheckTask: PrecheckTaskData = PrecheckTaskData.Factory.create(\n            taskRef, this.precheckEntity.name, this.precheckEntity.uuid,\n            null, this.decommissionMode, precheckTaskType);\n      this.precheckTaskStarted.emit(precheckTask);\n   }\n\n   private getPersistenceTabIcon(): string {\n      return this.report.persistenceData\n            ? this.precheckReportService.getPersistenceTabIcon(this.report.persistenceData.persistentInstances)\n            : \"\";\n   }\n\n   deleteDisk(): void {\n      if (this.precheckEntity.type !== PrecheckEntityType.DISK) {\n         return;\n      }\n\n      const context: DeleteDisksContext = {\n         disks: [this.precheckEntity.diskData],\n         decommissionMode: this.decommissionMode,\n         host: HostActionData.fromPrecheckEntity(this.precheckEntity),\n         diskGroups: this.getDiskGroupActionData(),\n         isVsanMaxEnabled: this.isVsanMaxEnabled,\n      };\n      new ModalBuilder(`${VsanRoutes.DISK_MANAGEMENT_VIEW}/deleteDisks`)\n            .setSize(VsanDiskMgmtActionsUtil.DELETE_DISKS_WIDTH,\n                  VsanDiskMgmtActionsUtil.DELETE_DISKS_HEIGHT_SMALL)\n            .open(context)\n            .then((taskRefs: ManagedObject[]) => {\n               this.handleTask(taskRefs[0], PrecheckTaskType.DISK_REMOVAL);\n            });\n   }\n\n   unmountVsanMaxDisk(): void {\n      if (this.precheckEntity.type !== PrecheckEntityType.DISK) {\n         return;\n      }\n\n      const context: UnmountDiskContext = {\n         disk: this.precheckEntity.diskData,\n         decommissionMode: this.decommissionMode,\n         host: HostActionData.fromPrecheckEntity(this.precheckEntity),\n      };\n      new ModalBuilder(`${VsanRoutes.DISK_MANAGEMENT_VIEW}/unmountDisk`)\n            .setSize(VsanDiskMgmtActionsUtil.UNMOUNT_DISK_DIALOG_WIDTH,\n                  VsanDiskMgmtActionsUtil.UNMOUNT_DISK_DIALOG_HEIGHT_SMALL)\n            .open(context)\n            .then((task: ManagedObject) => {\n               this.handleTask(task, PrecheckTaskType.DISK_UNMOUNT);\n            });\n   }\n\n   getSummaryReportMessage(): string {\n      const persistenceDataToRebuild: number = this.report.persistenceData && this.report.persistenceData.dataToRebuild;\n      return this.precheckReportService.getSummaryMessage(this.report.status, this.precheckEntity.type,\n            this.report.dataToMove, persistenceDataToRebuild, this.isVsanMaxEnabled);\n   }\n\n   private updateActionsStatus(): void {\n      this.enterMaintenanceModeVisible = false;\n      this.removeDiskGroupVisible = false;\n      this.recreateDiskGroupVisible = false;\n      this.unmountDiskGroupVisible = false;\n      this.removeDiskVisible = false;\n      this.unmountVsanMaxDiskVisible = false;\n      if (this.hasReportError) {\n         return;\n      }\n\n      switch (this.precheckEntity.type) {\n         case PrecheckEntityType.HOST:\n            this.enterMaintenanceModeVisible = true;\n            this.enterMaintenanceModeDisabledReason = !this.hasEditPermission || !this.hasEMMPermissions\n                  ? VsanUiUtils.getString(\"vsan.common.nopermissions\")\n                  : \"\";\n            break;\n         case PrecheckEntityType.DISK_GROUP:\n            this.removeDiskGroupVisible = !this.autoClaimMode;\n            this.recreateDiskGroupVisible = !this.autoClaimMode\n                  && this.isRecreateDiskGroupSupported\n                  && this.precheckEntity.diskGroupData.isHealthy;\n            this.unmountDiskGroupVisible = true;\n            break;\n         case PrecheckEntityType.DISK:\n            this.removeDiskVisible = !this.autoClaimMode;\n            this.unmountVsanMaxDiskVisible = this.isVsanMaxEnabled;\n            this.isDiskAndGroupActionDisabled = !this.hasEditPermission || !this.hasStoragePermission;\n            this.diskAndGroupActionDisabledReason = this.isDiskAndGroupActionDisabled\n                  ? VsanUiUtils.getString(\"vsan.common.nopermissions\")\n                  : \"\";\n            break;\n      }\n   }\n\n   getIconClasses(shape: string): string {\n      return this.precheckReportService.getIconClasses(shape);\n   }\n\n   getInaccessibleObjectsCount(): number {\n      return !this.report?.inaccessibleObjects\n            ? 0\n            : this.report.inaccessibleObjects.length;\n   }\n\n   getNonCompliantObjectsCount(): number {\n      return !this.report?.nonCompliantObjects\n            ? 0\n            : this.report.nonCompliantObjects.length;\n   }\n\n   getObjectsWithoutEnhancedDurabilityCount(): number {\n      return !this.report\n            ? 0\n            : this.countObjectsWithoutDurability(this.report.virtualObjects);\n   }\n\n   private countObjectsWithoutDurability(virtualObjects: VirtualObjectModel[]): number {\n      if (!virtualObjects?.length) {\n         return 0;\n      }\n      // 1. get count of virtual objects, for which the durability state is not guaranteed.\n      const objectsWithoutDurabilityState: VirtualObjectModel[] = virtualObjects.filter(\n            obj => this.NO_DURABILITY_STATES.find(state => state === obj.durabilityState),\n      );\n      let count: number = objectsWithoutDurabilityState.length;\n      // 2. count children of each object, for which the durability state is not guaranteed\n      virtualObjects.forEach(obj => count += this.countObjectsWithoutDurability(obj.children));\n      return count;\n   }\n\n   private getDiskGroupActionData(): DiskGroupActionData[] {\n      return this.isVsanMaxEnabled\n            ? []\n            : [DiskGroupActionData.fromPrecheckEntity(this.diskGroupOfSelectedDisk)];\n   }\n}\n","/* Copyright 2020-2022 VMware, Inc. All rights reserved. -- VMware Confidential */\nexport class VsanDialogUtil {\n   static readonly CAPACITY_MANAGEMENT_DIALOG: VsanDialogProperties = {\n      width: 800,\n      height: 700,\n   };\n\n   static readonly DELETE_VOLUME_DIALOG: VsanDialogProperties = {\n      width: 500,\n      height: 250,\n   };\n\n   static readonly MIGRATE_VOLUME_DIALOG: VsanDialogProperties = {\n      width: 1030,\n      height: 710,\n   };\n\n   static readonly REAPPLY_VOLUME_POLICY_DIALOG: VsanDialogProperties = {\n      width: 700,\n      height: 250,\n   };\n\n   static readonly DUPLICATE_PCI_ID_MODEL_SELECTION_DIALOG: VsanDialogProperties = {\n      width: 800,\n      height: 500,\n   };\n\n   static readonly HEALTH_RESTORE_ACTION_DIALOG: VsanDialogProperties = {\n      width: 550,\n      height: 250,\n   };\n\n   // Keep in sync with plugin.xml extension point\n   static readonly CLUSTER_POWER_ON_DIALOG: VsanDialogProperties = {\n      width: 600,\n      height: 230,\n   };\n\n   static readonly VM_IO_DIAGNOSTICS_METRICS_DIALOG: VsanDialogProperties = {\n      width: 900,\n      height: 700,\n   };\n\n   static readonly VM_IO_DIAGNOSTICS_LATENCY_DIALOG: VsanDialogProperties = {\n      width: 1000,\n      height: 500,\n   };\n\n   static readonly VM_IO_DIAGNOSTICS_DOM_OWNER_LATENCY_DIALOG: VsanDialogProperties = {\n      width: 1000,\n      height: 400,\n   };\n\n   static readonly PERF_SVC_EDIT_ACTION_DIALOG: VsanDialogProperties = {\n      width: 800,\n      height: 450,\n   };\n\n   static readonly PERF_SVC_ENABLE_ACTION_DIALOG: VsanDialogProperties = {\n      width: 800,\n      height: 250,\n   };\n\n   static readonly CLAIM_DISKS_ACTION_DIALOG: VsanDialogProperties = {\n      width: 1200,\n      height: 650,\n   };\n\n   static readonly VSAN_DISK_CLAIM_ACTION_DIALOG: VsanDialogProperties = {\n      width: 670,\n      height: 300,\n   };\n}\n\nexport class VsanDialogProperties {\n   width: number;\n   height: number;\n}\n","/* Copyright 2018-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, Input, OnInit} from \"@angular/core\";\nimport {Icon} from \"@util/icon\";\nimport {VirtualObjectModel} from \"@generated/virtual-object-model\";\nimport {PrecheckReportService} from \"../precheck-report.service\";\n\n@Component({\n   templateUrl: \"precheck-virtual-objects-tab.html\",\n   styleUrls: [\"precheck-virtual-objects-tab.scss\"],\n   selector: \"vsan-precheck-virtual-objects-tab\",\n})\nexport class PrecheckVirtualObjectsTabComponent implements OnInit {\n\n   @Input()\n   statusIcon: string;\n\n   @Input()\n   inaccessibleObjectsCount: number = 0;\n\n   @Input()\n   nonCompliantObjectsCount: number = 0;\n\n   @Input()\n   noDurabilityObjectsCount: number = 0;\n\n   @Input()\n   durableVirtualObjects: VirtualObjectModel[];\n\n   @Input()\n   delayTimer: number;\n\n   @Input()\n   isDurabilitySupported: boolean;\n\n   loading: boolean;\n   areAllObjectsAccessibleAndCompliant: boolean;\n   reportMessage: string;\n\n   constructor(private precheckReportService: PrecheckReportService) {\n   }\n\n   async ngOnInit(): Promise<void> {\n      this.loading = true;\n      this.reportMessage = this.precheckReportService.getObjectsMessage(this.inaccessibleObjectsCount,\n            this.nonCompliantObjectsCount, this.noDurabilityObjectsCount);\n      if (!this.statusIcon) {\n         this.areAllObjectsAccessibleAndCompliant = true;\n         this.loading = false;\n         return;\n      }\n\n      this.loading = false;\n   }\n\n   getIconClass(): string {\n      return Icon.clrIconShapeClassMap[this.statusIcon];\n   }\n}\n","/* Copyright 2021 VMware, Inc. All rights reserved. -- VMware Confidential */\n\n/**\n * This class is used internally by the @Loader decorator and the decorators related to it.\n * It encapsulates the logic for accessing internal properties needed for the decorators to work.\n * The state of this class is kept in the \"backingObject\" passed to the constructor. This allows\n * the wrapper class to be easily recreated wherever it is needed without worrying about keeping its reference.\n *\n * <pre>\n * const obj: any = {};\n *\n * // Create a new LoadingFlowWrapper over obj\n * const wrapper1: LoadingFlowWrapper = new LoadingFlowWrapper(obj);\n * // Set the error field to \"alabala\" string\n * wrapper1.error = \"alabala\";\n *\n * // Create a new LoadingFlowWrapper over obj\n * const wrapper2: LoadingFlowWrapper = new LoadingFlowWrapper(obj);\n * console.log(wrapper2.error); // Prints \"alabala\" because the backing object is the same\n * </pre>\n */\nexport class LoadingFlowWrapper {\n\n   private static readonly ERROR_HOLDER: string = \"__ex__\";\n   private static readonly ERROR_HANDLERS_REF_HOLDER: string = \"__errorHandlers__\";\n   private static readonly ERROR_MESSAGE_GETTERS_REF_HOLDER: string = \"__errorMessageGetters__\";\n   private static readonly LOADS_COUNT_HOLDER: string = \"__loadsCount__\";\n\n   private static readonly DEFAULT_NAME: string = \"default-loader\";\n\n   constructor(private _backingObject: any,\n         private loaderName: string) {\n      this.loaderName = loaderName || LoadingFlowWrapper.DEFAULT_NAME;\n\n      // Init all collections\n      this.initCollection(LoadingFlowWrapper.ERROR_HOLDER);\n      this.initCollection(LoadingFlowWrapper.ERROR_HANDLERS_REF_HOLDER);\n      this.initCollection(LoadingFlowWrapper.ERROR_MESSAGE_GETTERS_REF_HOLDER);\n      this.initCollection(LoadingFlowWrapper.LOADS_COUNT_HOLDER);\n   }\n\n   private initCollection(collectionName: string): void {\n      // Check first if the collection hasn't been initialized by another wrapper.\n      // If so, do nothing as we don't want to override the data already set.\n      if (!this.backingObject[collectionName]) {\n         this.backingObject[collectionName] = [];\n      }\n   }\n\n   /**\n    * The original object which methods/properties were decorated\n    */\n   get backingObject(): any {\n      return this._backingObject;\n   }\n\n   /**\n    * Returns the thrown error\n    */\n   get error(): any {\n      return this.backingObject[LoadingFlowWrapper.ERROR_HOLDER][this.loaderName];\n   }\n\n   /**\n    * Sets the thrown error\n    */\n   set error(val: any) {\n      this.backingObject[LoadingFlowWrapper.ERROR_HOLDER][this.loaderName] = val;\n   }\n\n   /**\n    * Returns the number of active loading operations\n    */\n   private get loadsCount(): number {\n      return this.backingObject[LoadingFlowWrapper.LOADS_COUNT_HOLDER][this.loaderName];\n   }\n\n   /**\n    * Returns true if there are running loader methods or promises.\n    */\n   get isLoading(): boolean {\n      return !!this.loadsCount;\n   }\n\n   /**\n    * Increase the number of active loading operations by one\n    */\n   incrementLoads(): void {\n      // Initialize the counter if it hasn't been initialized yet\n      if (!this.loadsCount) {\n         this.backingObject[LoadingFlowWrapper.LOADS_COUNT_HOLDER][this.loaderName] = 0;\n      }\n      this.backingObject[LoadingFlowWrapper.LOADS_COUNT_HOLDER][this.loaderName] += 1;\n   }\n\n   /**\n    * Decreases the number of active loading operations by one\n    */\n   decrementLoads(): void {\n      this.backingObject[LoadingFlowWrapper.LOADS_COUNT_HOLDER][this.loaderName] -= 1;\n   }\n\n   get errorHandler(): any {\n      return this.backingObject[LoadingFlowWrapper.ERROR_HANDLERS_REF_HOLDER][this.loaderName];\n   }\n\n   /**\n    * Registers a new error handler.\n    */\n   set errorHandler(errorHandler: any) {\n      if (!!this.errorHandler) {\n         throw new Error(`ErrorHandler for loader \"${this.loaderName}\" already registered!`);\n      }\n      this.backingObject[LoadingFlowWrapper.ERROR_HANDLERS_REF_HOLDER][this.loaderName] = errorHandler;\n   }\n\n   get errorMessageGetter(): any {\n      return this.backingObject[LoadingFlowWrapper.ERROR_MESSAGE_GETTERS_REF_HOLDER][this.loaderName];\n   }\n\n   set errorMessageGetter(getter: any) {\n      if (!!this.errorMessageGetter) {\n         throw new Error(`ErrorMessage for loader \"${this.loaderName}\" already registered!`);\n      }\n      this.backingObject[LoadingFlowWrapper.ERROR_MESSAGE_GETTERS_REF_HOLDER][this.loaderName] = getter;\n   }\n}\n","<!--Copyright 2018-2020 VMware, Inc. All rights reserved. -- VMware Confidential-->\n<h5 vsan-auto-focus>\n   {{\"vsan.monitor.evacuationStatus.label\" | localized}}\n</h5>\n<vsan-validation id=\"evacuation-status-error-message\"\n                 *ngIf=\"alertMessage\"\n                 [alert]=\"alertMessage\">\n</vsan-validation>\n\n<div *ngIf=\"loading\" class=\"spinner central-spinner\">{{\"vsan.loading\" | localized}}</div>\n\n<ng-container *ngIf=\"!loading\">\n   <vsan-unavailable-view *ngIf=\"unavailableView\"\n                          [unavailableViewSpec]=\"unavailableView\"\n                          [clusterRef]=\"clusterRef\"\n                          [hasEditPrivilege]=\"hasEditPrivilege\">\n   </vsan-unavailable-view>\n\n   <ng-container *ngIf=\"!unavailableView\">\n      <!--Guard rails component-->\n      <vsan-precheck-guard-rails [isDiskResourcePrecheckSupported]=\"isDiskResourcePrecheckSupported\"\n                                 [isVsanMaxEnabled]=\"isVsanMaxEnabled\"\n                                 (hasRunningTask)=\"onHasRunningTask($event)\">\n      </vsan-precheck-guard-rails>\n\n      <div>{{getGeneralMessageLabel()}}</div>\n\n      <!-- Entity on which to test decommissioning -->\n      <vsan-dropdown-object-selector\n            [label]=\"'vsan.evacuationStatus.decomTestOnLabel' | localized\"\n            [nodes]=\"precheckEntitiesTreeNodes\"\n            [selectedObjectInfos]=\"selectedPrecheckEntities\"\n            [searchInputAriaLabelKey]=\"'vsan.evacuationStatus.decomTestOnLabel.searchInputAriaLabel'\"\n            (selectedObjectInfosChange)=\"onSelectedObjectInfosChange($event)\">\n      </vsan-dropdown-object-selector>\n\n      <div *ngIf=\"precheckSupported\" class=\"quick-pre-check-info\">\n         <!-- vSAN Decommissioning mode select options -->\n         <vsan-pre-check-evacuation-select\n               [selectedDecommissionMode]=\"selectedDecommissionMode\"\n               (selectedDecommisionModeChange)=\"onDecommissionModeSummaryChanged($event)\">\n         </vsan-pre-check-evacuation-select>\n\n         <button class=\"btn btn-primary evacuation-status-action-button\"\n                 [disabled]=\"isClusterOperationInProgress\"\n                 title=\"{{(isClusterOperationInProgress ?\n                    'vsan.evacuationStatus.precheckButton.title.inProgress' : null) | localized}}\"\n                 (click)=\"onPrecheckClicked()\">\n            {{'vsan.evacuationStatus.precheckButtonLabel' | localized}}\n         </button>\n      </div>\n      <!--General messages shown if the host is in MM or not connected-->\n      <div *ngIf=\"precheckUnsupportedLabel\" class=\"general-message bold-no-selection\">\n         {{precheckUnsupportedLabel}}\n      </div>\n      <!--Evacuation status report loading indicator-->\n      <div *ngIf=\"isPrecheckInProgress\">\n            <span class=\"spinner spinner-sm spinner-inline\"\n                  id=\"evacuation-status-test-in-progress-spinner\">\n            </span>\n         <span id=\"evacuation-status-test-in-progress-label\">{{getOperationInProgressLabel()}}</span>\n      </div>\n      <!--Precheck report-->\n      <vsan-precheck-report #precheckReport\n                            *ngIf=\"showReport\"\n                            [precheckEntity]=\"selectedPrecheckEntity\"\n                            [diskGroupOfSelectedDisk]=\"diskGroupOfSelectedDisk\"\n                            [isVsanMaxEnabled]=\"isVsanMaxEnabled\"\n                            (precheckTaskStarted)=\"onPrecheckTaskStarted($event)\"\n                            [reportRefreshed]=\"reportRefreshed\"\n                            (refreshReport)=\"onReportRefreshed()\"\n                            [decommissionMode]=\"selectedDecommissionMode\">\n      </vsan-precheck-report>\n   </ng-container>\n</ng-container>\n","/* Copyright 2018-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, OnInit} from \"@angular/core\";\nimport {environment} from \"@env/environment\";\nimport {DecommissionMode} from \"@generated/decommission-mode\";\nimport {PrecheckService} from \"@generated/precheck-service\";\nimport {ClusterComputeResource, VirtualMachine} from \"@service/client/dataservice/data-service-property\";\nimport {DataServiceQueryResult} from \"@service/client/dataservice/data-service.data\";\nimport {DataServiceClient} from \"@service/client/dataservice/data-service.service\";\nimport {ManagedObject} from \"@service/managed-object\";\nimport {VsanDataMigrationUtil} from \"@util/vsan-data-migration-util\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {EnterMaintenanceModeDialogContext} from \"./enter-maintenance-mode-dialog-context\";\n\n@Component({\n   templateUrl: \"enter-maintenance-mode-dialog.html\",\n   styleUrls: [\"enter-maintenance-mode-dialog.scss\"],\n})\nexport class EnterMaintenanceModeDialogComponent implements OnInit {\n\n   // DataService properties\n   private static readonly CLUSTER_DRS_ENABLED_PROPERTY: string = \"configurationEx.drsConfig.enabled\";\n   private static readonly HOST_POWERED_ON_VMS_PROPERTY: string = \"poweredOnVMs\";\n\n   // Dialog size\n   static readonly EMM_DIALOG_WIDTH: number = 700;\n   static readonly EMM_DIALOG_HEIGHT: number = 320;\n   private static readonly HEIGHT_ADDITION_POWERED_ON_VMS: number = 70;\n   private static readonly HEIGHT_ADDITION_DRS: number = 50;\n   private static readonly HEIGHT_ADDITION_DURABILITY: number = 100;\n\n   // todo georgig: add KB article id when provided. Bug 2676152\n   readonly ENHANCED_DURABILITY_KB: string = \"\";\n\n   decommissionModeLocalized: string;\n   secondaryTitle: string;\n   hostRef: ManagedObject;\n   alertMessages: string[];\n   isDrsEnabled: boolean;\n   movePoweredOffVms: boolean;\n   hasPoweredOnVms: boolean;\n   loading: boolean;\n   isDurabilityPossible: boolean;\n   isDurabilityGuaranteed: boolean;\n   ensureDurability: boolean;\n\n   private decommissionMode: DecommissionMode;\n\n   constructor(private dataService: DataServiceClient,\n         private precheckService: PrecheckService) {\n   }\n\n   ngOnInit(): void {\n      this.loading = true;\n\n      const context: EnterMaintenanceModeDialogContext = VsanUiUtils.getModalContext();\n      this.secondaryTitle = context.precheckEntity.name;\n      this.decommissionMode = context.decommissionMode;\n      this.decommissionModeLocalized = VsanDataMigrationUtil.getLocalizedDecommissionMode(this.decommissionMode);\n      this.hostRef = context.precheckEntity.hostRef;\n      this.isDurabilityPossible = context.isDurabilityPossible;\n      this.isDurabilityGuaranteed = context.isDurabilityGuaranteed;\n\n      Promise\n            .all([\n               this.dataService.getProperty(ClusterComputeResource.configurationEx.drsConfig.enabled, context.clusterRef),\n               this.getNumberOfPowerOnVmsOnHost(),\n            ])\n            .then(this.onPropertiesRetrieved)\n            .catch(this.onError);\n   }\n\n   private async getNumberOfPowerOnVmsOnHost(): Promise<number> {\n      if (environment.repa) {\n         // The original \"poweredOnVMs\" property is provided by H5C so we don't have access to it\n         // through the vsperejs/APIGW interface. Hence we need to craft the query by ourselves.\n         const result: DataServiceQueryResult = await this.dataService\n               .select()\n               .fromType(VirtualMachine.type)\n               .where()\n               .propertyEqualsMoRef(VirtualMachine.runtime.host, this.hostRef)\n               .and()\n               .propertyEquals(VirtualMachine.runtime.powerState, \"poweredOn\")\n               .execute();\n         return result.resultItems.length;\n      } else {\n         // In LOCAL mode fallback to the Java DS layer\n         const result: any[] = await this.dataService\n               .getProperty(EnterMaintenanceModeDialogComponent.HOST_POWERED_ON_VMS_PROPERTY, this.hostRef);\n         return !result ? 0 : result.length;\n      }\n   }\n\n   async onConfirm(): Promise<void> {\n      this.loading = true;\n      // pass EMM task to parent component\n      let precheckTask: ManagedObject;\n      try {\n         if (this.isDurabilityGuaranteed && this.ensureDurability) {\n            this.decommissionMode = DecommissionMode.ensureEnhancedDurability;\n         }\n         precheckTask = await this.precheckService.runEnterMaintenanceMode(this.hostRef,\n               this.decommissionMode.toString(), this.movePoweredOffVms);\n      } catch (error) {\n         this.onError(error);\n      }\n\n      VsanUiUtils.closeModalDialog(precheckTask);\n   }\n\n   getDurabilityAlertType(): string {\n      if (!this.isDurabilityPossible) {\n         return;\n      }\n      return this.isDurabilityGuaranteed ? \"info\" : \"warning\";\n   }\n\n   getDurabilityAlertMessage(): string {\n      if (!this.isDurabilityPossible) {\n         return;\n      }\n      return this.isDurabilityGuaranteed ?\n            VsanUiUtils.getString(\"vsan.evacuationStatus.report.enterMaintenanceModeDialog.ensureDurabilityInfo\") :\n            VsanUiUtils.getString(\"vsan.evacuationStatus.report.enterMaintenanceModeDialog.ensureDurabilityWarn\");\n   }\n\n   private onPropertiesRetrieved = (results: any[]) => {\n      this.isDrsEnabled = !!results[0];\n      if (this.isDrsEnabled) {\n         // when DRS is enabled, the option to move powered off VMs is enabled by default\n         this.movePoweredOffVms = true;\n      }\n\n      this.hasPoweredOnVms = !!results[1];\n\n      // enlarge dialog according to the properties shown\n      let height: number = EnterMaintenanceModeDialogComponent.EMM_DIALOG_HEIGHT;\n      if (this.isDrsEnabled) {\n         height += EnterMaintenanceModeDialogComponent.HEIGHT_ADDITION_DRS;\n      }\n      if (this.hasPoweredOnVms) {\n         height += EnterMaintenanceModeDialogComponent.HEIGHT_ADDITION_POWERED_ON_VMS;\n      }\n      if (this.isDurabilityPossible) {\n         height += EnterMaintenanceModeDialogComponent.HEIGHT_ADDITION_DURABILITY;\n      }\n      VsanUiUtils.setModalDialogHeight(height);\n\n      this.loading = false;\n   };\n\n   private onError = (error: any) => {\n      this.alertMessages = [error];\n      this.loading = false;\n   };\n}\n","/* Copyright 2017-2020 VMware, Inc. All rights reserved. -- VMware Confidential */\n\nimport {Filter, TreeDatagridRow} from \"../tree-datagrid\";\nimport {ClrDatagridStringFilterInterface} from \"@clr/angular\";\n\n/**\n * Abstract filter class that needs to be extended in order to implement custom filtration.\n * The class has a single abstract method that takes an object of type T and returns its\n * string representation.\n */\nexport class BaseFilter<T> implements ClrDatagridStringFilterInterface<T>, Filter {\n\n   accepts(data: T, search: string): boolean {\n      // Handle correctly TreeDatagrid components\n      if (data instanceof TreeDatagridRow) {\n         data = data.data;\n      }\n\n      let label: string = this.stringify(data);\n      if (label) {\n         // Compare ignoring the case\n         return label.toLowerCase().indexOf(search.toLowerCase()) != -1;\n      } else {\n         return false;\n      }\n   }\n\n   match(data: T, search: string): boolean {\n      return this.accepts(data, search);\n   }\n\n   protected stringify(data: T): string  {\n      return data + \"\";\n   }\n\n}\n\n","export enum PrecheckOperation {\n   ENTER_MAINTENANCE_MODE = \"EnterMaintenanceMode\",\n   DISK_DATA_EVACUATION = \"DiskDataEvacuation\",\n}\n","<!--Copyright 2018-2022 VMware, Inc. All rights reserved. -- VMware Confidential-->\n<ng-container *ngIf=\"showCapacity()\">\n   <vsan-validation id=\"evacuation-status-vsan-direct-error-message\"\n                    *ngIf=\"capacityReports.get(CapacityReport.VSAN_DIRECT)?.errorMessages?.length\"\n                    [alertType]=\"AlertType.DANGER\"\n                    [(alerts)]=\"capacityReports.get(CapacityReport.VSAN_DIRECT).errorMessages\">\n   </vsan-validation>\n   <ng-container *ngIf=\"showVsanDirectCapacity() else vsanCapacityTemplate\">\n      <vsan-validation *ngIf=\"hasPersistenceDataToRebuild\"\n                       id=\"evacuation-status-vsan-direct-info-message\"\n                       [alertType]=\"AlertType.INFO\"\n                       [allowClose]=\"false\"\n                       [alert]=\"'vsan.evacuationStatus.report.predictedOverview.capacityTab.vSanDirectInfo' | localized\">\n         <div class=\"external-link\">\n            <a id=\"learn-more-link\"\n               class=\"alert-action\"\n               [external-link]\n               [articleId]=\"KnowledgeBaseId.PRECHECK_PCP\">\n            </a>\n         </div>\n      </vsan-validation>\n\n      <div id=\"vsan-capacity-tabs\"\n           role=\"tablist\"\n           class=\"btn-group btn-outline-primary btn-sm\"\n           [attr.aria-label]=\"'vsan.evacuationStatus.report.predictedOverview.capacityTab.tabList'|localized\">\n         <button id=\"vsan-capacity-tab\"\n                 role=\"tab\"\n                 class=\"btn\"\n                 aria-controls=\"vsan-capacity-breakdown\"\n                 (click)=\"currentCapacityReport = CapacityReport.VSAN\"\n                 [attr.aria-selected]=\"CapacityReport.VSAN === currentCapacityReport\"\n                 [ngClass]=\"{'btn-primary': CapacityReport.VSAN == currentCapacityReport}\">\n            {{\"vsan.evacuationStatus.report.predictedOverview.capacityTab.vSanButton\"|localized}}\n         </button>\n         <button id=\"vsan-direct-capacity-tab\"\n                 role=\"tab\"\n                 class=\"btn\"\n                 aria-controls=\"vsan-direct-capacity-breakdown\"\n                 (click)=\"currentCapacityReport = CapacityReport.VSAN_DIRECT\"\n                 [attr.aria-selected]=\"CapacityReport.VSAN_DIRECT === currentCapacityReport\"\n                 [ngClass]=\"{'btn-primary': CapacityReport.VSAN_DIRECT == currentCapacityReport}\">\n            {{\"vsan.evacuationStatus.report.predictedOverview.capacityTab.vSanDirectButton\"|localized}}\n         </button>\n      </div>\n\n      <ng-container *ngIf=\"currentCapacityReport === CapacityReport.VSAN\">\n         <ng-container *ngTemplateOutlet=\"vsanCapacityTemplate\"></ng-container>\n      </ng-container>\n      <vsan-precheck-capacity-breakdown id=\"vsan-direct-capacity-breakdown\"\n                                        *ngIf=\"currentCapacityReport === CapacityReport.VSAN_DIRECT\"\n                                        [clusterCapacity]=\"vsanDirectCapacity\"\n                                        [datastoreType]=\"DatastoreType.VSAN_DIRECT\">\n      </vsan-precheck-capacity-breakdown>\n   </ng-container>\n\n   <ng-template #vsanCapacityTemplate>\n      <div *ngIf=\"capacityReports.get(CapacityReport.VSAN)?.faultDomainsNeeded\">\n         <clr-icon id=\"fault-domains-needed-error-message-icon\"\n                   aria-hidden=\"true\"\n                   shape=\"error-standard\"\n                   class=\"is-solid is-error capacity-error-summary-icon\">\n         </clr-icon>\n         {{getClusterLevelErrorMessageLabel()}}\n      </div>\n\n      <vsan-precheck-capacity-breakdown id=\"vsan-capacity-breakdown\"\n                                        [clusterCapacity]=\"vsanCapacity\"\n                                        [hasError]=\"hasError\">\n      </vsan-precheck-capacity-breakdown>\n   </ng-template>\n</ng-container>\n","<div *ngIf=\"loading\" class=\"spinner central-spinner\">{{\"vsan.loading\" | localized}}</div>\n<ng-container *ngIf=\"!loading\">\n   <!--summary message where are not change in the objects's compliance status from the report-->\n   <div *ngIf=\"areAllObjectsAccessibleAndCompliant\"\n        class=\"general-message bold-no-selection\"\n        id=\"evacuation-status-virtual-objects-message\">\n      {{reportMessage}}\n   </div>\n   <!--status and table-->\n   <ng-container *ngIf=\"!areAllObjectsAccessibleAndCompliant\">\n      <!--General message-->\n      <div>\n         {{'vsan.evacuationStatus.report.predictedOverview.virtualObjectsTab.generalInfo' | localized}}\n      </div>\n      <!--Result icon and message-->\n      <div class=\"virtual-objects-summary-message\">\n         <clr-icon id=\"selected-decommission-mode-summary-icon\"\n                   [attr.shape]=\"statusIcon\"\n                   [attr.class]=\"'is-solid ' + getIconClass()\">\n         </clr-icon>\n         <label id=\"selected-decommision-mode-summary-label\" class=\"summary-label\">\n            {{reportMessage}}\n         </label>\n      </div>\n      <!--Delay timer information-->\n      <p *ngIf=\"delayTimer\" class=\"p7\">\n         {{'vsan.evacuationStatus.report.predictedOverview.virtualObjectsTab.delayTimerInfo' | localized: delayTimer}}\n      </p>\n      <!--List of objects that will become inaccessible or non-compliant-->\n      <vsan-virtual-objects-table id=\"virtual-objects-table\"\n                                  class=\"evacuation-status-virtual-objects-table\"\n                                  [isWhatIfData]=\"true\"\n                                  [isDurabilitySupported]=\"isDurabilitySupported\"\n                                  [hideRowSelection]=\"true\"\n                                  [virtualObjects]=\"durableVirtualObjects\">\n      </vsan-virtual-objects-table>\n   </ng-container>\n</ng-container>\n","/* Copyright 2018-2022 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, Input} from \"@angular/core\";\nimport {AlertType} from \"@component/validation/alert-type\";\nimport {DatastoreType} from \"@generated/datastore-type\";\nimport {PrecheckClusterCapacityData} from \"@generated/precheck-cluster-capacity-data\";\nimport {PrecheckResultStatusType} from \"@generated/precheck-result-status-type\";\nimport {KnowledgeBaseId} from \"@service/navigation/model/knowledge-base-id\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {PrecheckReportService} from \"../precheck-report.service\";\n\n@Component({\n   templateUrl: \"precheck-capacity-tab.html\",\n   styleUrls: [\"precheck-capacity-tab.scss\"],\n   selector: \"vsan-precheck-capacity-tab\",\n})\nexport class PrecheckCapacityTabComponent {\n   CapacityReport: typeof CapacityReport = CapacityReport;\n   AlertType: typeof AlertType = AlertType;\n   DatastoreType: typeof DatastoreType = DatastoreType;\n   readonly KnowledgeBaseId: typeof KnowledgeBaseId = KnowledgeBaseId;\n\n   @Input()\n   capacityReports: Map<CapacityReport, PrecheckClusterCapacityData>;\n\n   @Input()\n   hasPersistenceDataToRebuild: boolean;\n\n   @Input()\n   hasError: boolean;\n\n   currentCapacityReport: CapacityReport = CapacityReport.VSAN;\n\n   constructor(private precheckReportService: PrecheckReportService) {\n   }\n\n   get vsanCapacity(): PrecheckClusterCapacityData {\n      return this.capacityReports.get(CapacityReport.VSAN);\n   }\n\n   get vsanDirectCapacity(): PrecheckClusterCapacityData {\n      return this.capacityReports.get(CapacityReport.VSAN_DIRECT);\n   }\n\n   // Capacity information is shown when there is a vSAN capacity error with recommendations\n   // or when there is no vSAN direct capacity\n   // or there is vSAN direct capacity without an error\n   showCapacity(): boolean {\n      return this.vsanCapacity.status === PrecheckResultStatusType.RED\n            || !(this.vsanDirectCapacity && this.vsanDirectCapacity.status === PrecheckResultStatusType.RED);\n   }\n\n   showVsanDirectCapacity(): boolean {\n      return !!this.vsanDirectCapacity\n            && VsanUiUtils.isEmpty(this.vsanDirectCapacity.errorMessages)\n            && this.vsanCapacity.status !== PrecheckResultStatusType.RED;\n   }\n\n   getClusterLevelErrorMessageLabel = (): string => {\n      return this.precheckReportService.getClusterLevelCapacityErrorMessage(\n            this.capacityReports.get(CapacityReport.VSAN));\n   };\n}\n\nexport enum CapacityReport {\n   VSAN,\n   VSAN_DIRECT,\n}","/* Copyright 2020-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, EventEmitter, Input, Output} from \"@angular/core\";\nimport {PrecheckPersistentInstanceData} from \"@generated/precheck-persistent-instance-data\";\nimport {PrecheckPersistentInstanceState} from \"@generated/precheck-persistent-instance-state\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {PrecheckReportService} from \"../precheck-report.service\";\n\n@Component({\n   templateUrl: \"precheck-persistence-tab.html\",\n   styleUrls: [\"precheck-persistence-tab.scss\"],\n   selector: \"vsan-precheck-persistence-tab\",\n})\nexport class PrecheckPersistenceTabComponent {\n   @Input()\n   persistentInstances: PrecheckPersistentInstanceData[];\n\n   @Output()\n   filterChanged: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n   stateFilterValue: PrecheckPersistentInstanceData[];\n\n   readonly DEFAULT_ITEMS_PER_PAGE: number = 10;\n\n   constructor(private precheckReportService: PrecheckReportService) {\n   }\n\n   getPersistenceStateLabel = (state: PrecheckPersistentInstanceState): string => {\n      return this.precheckReportService.getPersistenceStateLabel(state);\n   };\n\n   getPersistenceStateIcon = (state: PrecheckPersistentInstanceState): string => {\n      return this.precheckReportService.getPersistenceStateIcon(state);\n   };\n\n   getPersistenceStateIconClasses = (state: PrecheckPersistentInstanceState): string => {\n      return this.precheckReportService.getPersistenceIconClass(state);\n   };\n\n   onSelectedFilterTypeChanged(value: PrecheckPersistentInstanceData[]): void {\n      this.stateFilterValue = value;\n      this.notifyFilterChange();\n   }\n\n   notifyFilterChange(): void {\n      const hasAppliedFilters: boolean = !VsanUiUtils.isEmpty(this.stateFilterValue);\n      this.filterChanged.emit(hasAppliedFilters);\n   }\n}\n","import {PrecheckTaskType} from '@generated/precheck-task-type';\nimport {DecommissionMode} from '@generated/decommission-mode';\n\nexport interface PrecheckTaskData {\n\n   taskMoRef: any;\n   name: string;\n   uuid: string;\n   hostName: string;\n   decommissionMode: DecommissionMode;\n   taskType: PrecheckTaskType;\n} //class PrecheckTaskData\n\nexport module PrecheckTaskData{\nexport class Factory {\n\n   static create = (taskMoRef: any, name: string, uuid: string, hostName: string, decommissionMode: DecommissionMode, taskType: PrecheckTaskType): PrecheckTaskData => {\n      return { taskMoRef: taskMoRef, name: name, uuid: uuid, hostName: hostName, decommissionMode: decommissionMode, taskType: taskType, };\n   }\n\n\n} //class Factory\n\n} //module PrecheckTaskData\n","/* Copyright 2016 VMware, Inc. All rights reserved. -- VMware Confidential */\n\nimport {BehaviorSubject} from \"rxjs\";\nimport {ClrDatagridFilterInterface} from \"@clr/angular\";\n\n/**\n * Hierarchical data provider.\n * This is a additional structure to the Clarity Datagrid that supports hierarchical data rendering.\n */\nexport class TreeDatagrid {\n\n   public static forChildProperty(childField: string, rowData?: any[]) {\n      return new TreeDatagrid(item => item[childField], rowData);\n   }\n\n   /**\n    * The data objects that are to be rendered as first-level rows.\n    */\n   protected roots: any[];\n\n   /**\n    * The flat row structure consisting of the root objects and their children\n    * in case the parents are expanded. Sorting and filtering are reflected here.\n    */\n   protected content: TreeDatagridRow[];\n\n   /**\n    * List of filters to be applied on the data.\n    */\n   protected filters: TreeFilter[] = [];\n\n   /**\n    * The comparator to be used to sort the items and their children.\n    */\n   public comparator: (item1: any, item2: any) => number;\n\n   /**\n    * Sorting direction.\n    */\n   public sortAscending: boolean;\n\n   /**\n    * @param childItems lambda for extracting the children of a given data object\n    * @param rootItems (optional) the initial data objects\n    */\n   constructor(private childItems: (parent: any) => any[], rootItems?: any[]) {\n      this.rootItems = rootItems;\n   }\n\n   /**\n    * Removes all items.\n    */\n   public clear = () => this.rootItems = [];\n\n   /**\n    * Sets the given data objects as content.\n    */\n   public refreshGrid = (rowData: any[]) => this.rootItems = rowData;\n\n   public set rootItems(value: any[]) {\n      this.roots = value ? value : [];\n      this.content = this.flatten(this.roots);\n   }\n\n   /**\n    * root data objects\n    */\n   public get rootItems(): any[] {\n      return this.roots;\n   }\n\n   /**\n    * The flat row structure consisting of the root objects and their children\n    * in case the parents are expanded. Sorting and filtering are reflected here.\n    */\n   public get rows(): TreeDatagridRow[] {\n      return this.content;\n   }\n\n   /**\n    * Registers a new filter in the data provider.\n    * Initially the filter will accept all items.\n    * The consumer can assign a predicate to the TreeFilter object\n    * to add filtering rule. All registered filters' predicates are\n    * evaluated using AND operator.\n    */\n   public registerFilter(): TreeFilter {\n      let filter: TreeFilter = new TreeFilter(() => this.content = this.flatten(this.rootItems));\n      this.filters.push(filter);\n      return filter;\n   }\n\n   public unregisterFilter(value: TreeFilter) {\n      let index: number = this.filters.indexOf(value);\n      if (index != -1) {\n         this.filters.splice(index, 1);\n      }\n   }\n\n   /**\n    * Applies sorting comparator and direction for the data provider.\n    */\n   public sort(comparator: (item1: any, item2: any) => number, ascending: boolean = true) {\n      this.comparator = comparator;\n      this.sortAscending = ascending;\n\n      // refresh content, will expand all nodes\n      this.content = this.flatten(this.rootItems);\n   }\n\n   public collapseAll = () => this.rows.forEach(r => this.collapse(r));\n\n   public expandAll = () => this.rows.forEach(r => this.expand(r));\n\n   protected expand(row: TreeDatagridRow) {\n      if (row.isExpanded) {\n         // already expanded\n         return;\n      }\n\n      let rowIndex = this.content.indexOf(row);\n      if (rowIndex == -1) {\n         // row is filtered out\n         return;\n      }\n\n      let flattenedChildren: TreeDatagridRow[] = this.flatten(this.childItems(row.data), row.depth + 1);\n      if (flattenedChildren.length > 0) {\n         this.content.splice(rowIndex + 1, 0, ... flattenedChildren);\n      }\n\n      row.isExpanded = true;\n   }\n\n   protected collapse(row: TreeDatagridRow) {\n      if (!row.isExpanded) {\n         // already collapsed\n         row.isExpanded = false;\n         return;\n      }\n\n      let rowIndex = this.content.indexOf(row);\n      if (rowIndex == -1) {\n         // row is filtered out\n         return;\n      }\n\n      let removeCount: number = 0;\n      for (let i = rowIndex + 1; i < this.content.length && row.depth < this.content[i].depth; i++) {\n         removeCount ++;\n      }\n\n      this.content.splice(rowIndex + 1, removeCount);\n      row.isExpanded = false;\n   }\n\n   // returns flattened list of the specified items and their children (and their children);\n   // sorting and filter are applied;\n   // items are returned in expanded state\n   protected flatten(items: any[], depth: number = 0, parent?: any): TreeDatagridRow[] {\n      if (!items) {\n         return [];\n      }\n\n      let sortedItems: any[] = [... items];\n      if (this.comparator) {\n         sortedItems.sort((item1: any, item2: any) => (this.sortAscending ? 1 : -1) * this.comparator(item1, item2));\n      }\n\n      let result: TreeDatagridRow[] = [];\n\n      for (let item of sortedItems) {\n\n         let childItems: any[] = this.childItems(item);\n\n         // flattened children, including their children\n         let children: TreeDatagridRow[] = this.flatten(childItems, depth + 1, item);\n\n         let filteredOut: boolean = false;\n         for (let filter of this.filters) {\n            // filter out items only if the filter is not applicable for the item or it's parent\n            const matchFilter: boolean = filter.predicate(item) || (!!parent && filter.predicate(parent));\n            if (!matchFilter) {\n               filteredOut = true;\n            }\n         }\n         if (!filteredOut || children.length > 0) {\n            let row: TreeDatagridRow = new TreeDatagridRow();\n            row.data = item;\n            row.toggle = () => row.isExpanded ? this.collapse(row) : this.expand(row);\n            row.depth = depth;\n            row.isExpanded = true;\n            row.isExpandable = childItems && childItems.length > 0;\n\n            result.push(row, ... children);\n         }\n      }\n\n      return result;\n   }\n\n}\n\n/**\n * Represents a single row in a flattened tree data provider.\n */\nexport class TreeDatagridRow {\n\n   /**\n    * The data object for the row\n    */\n   public data: any;\n\n   /**\n    * Will be true if the row has children\n    */\n   public isExpandable: boolean;\n\n   /**\n    * Will be true if the row is currently expanded\n    */\n   public isExpanded: boolean;\n\n   /**\n    * Will flip the row's expanded/collapsed state\n    */\n   public toggle: () => void;\n\n   /**\n    * The nesting level the row is rendered at\n    */\n   public depth: number;\n\n}\n\nexport interface Filter  {\n   match(data: any, filter:string): boolean;\n}\n\n/**\n * Allows specifying filtering predicate for the data provider.\n * @see TreeDatagrid.registerFilter\n */\nexport class TreeFilter implements ClrDatagridFilterInterface<any> {\n\n   private _predicate: (item: any) => boolean;\n   changes = new BehaviorSubject<boolean>(false);\n\n   constructor(private apply: () => void) {\n      this.clear();\n   }\n\n   public clear() {\n      this._predicate = (item: any) => true;\n      this.apply();\n   }\n\n   public set predicate(predicate: (item: any) => boolean) {\n      if (!predicate) {\n         this.clear();\n      } else {\n         this._predicate = predicate;\n         this.apply();\n      }\n   }\n\n   public get predicate(): (item: any) => boolean {\n      return this._predicate;\n   }\n\n   // Used by clarity filter\n   isActive(): boolean {\n      return this.changes.getValue();\n   }\n\n   // Used by clarity filter\n   accepts(val: any): boolean {\n      return true;\n   }\n}"],"sourceRoot":"webpack:///"}