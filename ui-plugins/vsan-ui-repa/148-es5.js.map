{"version":3,"sources":["webpack:///src/app/vsan/common/directive/clr-button-group/clr-button-base.directive.ts","webpack:///src/app/vsan/common/directive/signpost-title/signpost-title.directive.ts","webpack:///src/app/vsan/common/directive/external-link/external-link.directive.ts"],"names":["ClrButtonBaseDirective","clrButton","name","Math","random","toString","directiveHolder","directives","push","SignpostTitleDirective","el","renderer","BUTTON_TAG_NAME","CLR_ICON_TAG_NAME","TITLE_ATTRIBUTE","ARIA_EXPANDED_ATTRIBUTE","ARIA_LABEL_ATTRIBUTE","signpostTitle","signpostIcon","nativeElement","getElementsByTagName","item","setAttribute","getString","button","ExternalLinkDirective","resolver","navigationService","ASK_VMWARE_DEFAULT_TEXT_KEY","LEARN_MORE_DEFAULT_TEXT_KEY","CONTAINER_CLASS","NAVIGATION_EVENT_TYPE","LEAD_TO_NOWHERE_URL","HTML_ELEMENT_SPAN_NAME","HTML_ELEMENT_ICON_NAME","HTML_ELEMENT_ROLE_ATTR_NAME","HTML_ELEMENT_ROLE_ATTR_VALUE","ICON_SHAPE_ATTR_NAME","ICON_SHAPE_ATTR_VALUE","ICON_SIZE_ATTR_NAME","ICON_SIZE_ATTR_VALUE","ICON_CLASS_ATTR_NAME","ICON_CLASS_ATTR_VALUE","ICON_TITLE_ATTR_NAME","KB_URL","element","isLink","isButton","prepareExternalLink","index","addClass","setText","decorateLink","addLinkRole","initializeNavigationHandler","HTMLButtonElement","HTMLAnchorElement","span","createElement","innerText","getText","appendChild","icon","anchorText","key","linkElement","href","style","display","addEventListener","helpId","askVMware","articleId","navigateToAddress","url"],"mappings":"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","file":"148-es5.js","sourcesContent":["/* Copyright 2020 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {ClrButton} from \"@clr/angular\";\n\n/**\n * Use this class as base class for directive, which handles clr-button. It will help to link the rendered button with\n * the clr-button on which the directive is applied.\n */\nexport abstract class ClrButtonBaseDirective {\n\n   constructor(private clrButton: ClrButton) {\n      if (!clrButton) {\n         return;\n      }\n      // name should be set, if not provided in template - generate one. ClrButtom#name is used to generate the name\n      // attribute of the markup button. Later the name is used to match the generated markup with the directive.\n      if (!clrButton.name) {\n         clrButton.name = Math.random().toString();\n      }\n\n      const directiveHolder: DirectiveHolder = (clrButton as DirectiveHolder);\n      directiveHolder.directives = directiveHolder.directives || [];\n      directiveHolder.directives.push(this);\n   }\n\n   /**\n    * This method will be called when the actual html button is rendered.\n    */\n   abstract resolveButton(clrButton: ClrButton, button: HTMLButtonElement, index: number);\n}\n\nexport interface DirectiveHolder extends ClrButton {\n   directives: ClrButtonBaseDirective[];\n}","/* Copyright 2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {AfterViewInit, Directive, ElementRef, Input, Renderer2} from \"@angular/core\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\n\n/**\n * Attribute directive for setting a custom title to the clr-icon inside a clr-signpost.\n * It also adds aria-label with the same value and aria-expanded=\"false\" to the button, holding the icon.\n * Used for changing the title when a clr-icon is not explicitly added inside a clr-signpost.\n */\n@Directive({\n   selector: \"clr-signpost\",\n})\nexport class SignpostTitleDirective implements AfterViewInit {\n   private readonly BUTTON_TAG_NAME: string = \"button\";\n   private readonly CLR_ICON_TAG_NAME: string = \"clr-icon\";\n\n   private readonly TITLE_ATTRIBUTE: string = \"title\";\n   private readonly ARIA_EXPANDED_ATTRIBUTE: string = \"aria-expanded\";\n   private readonly ARIA_LABEL_ATTRIBUTE: string = \"aria-label\";\n\n   @Input(\"vsan-signpost-title\")\n   signpostTitle: string;\n\n   constructor(private el: ElementRef<HTMLElement>,\n         private renderer: Renderer2) {\n   }\n\n   ngAfterViewInit(): void {\n      if (!this.signpostTitle) {\n         return;\n      }\n\n      const signpostIcon: Element = this.el.nativeElement.getElementsByTagName(this.CLR_ICON_TAG_NAME).item(0);\n      if (signpostIcon) {\n         this.renderer.setAttribute(signpostIcon, this.TITLE_ATTRIBUTE, VsanUiUtils.getString(this.signpostTitle));\n      }\n      const button: Element = this.el.nativeElement.getElementsByTagName(this.BUTTON_TAG_NAME).item(0);\n      if (button) {\n         this.renderer.setAttribute(button, this.ARIA_EXPANDED_ATTRIBUTE, \"false\");\n         this.renderer.setAttribute(button, this.ARIA_LABEL_ATTRIBUTE, VsanUiUtils.getString(this.signpostTitle));\n      }\n   }\n}\n","/* Copyright 2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {\n   AfterViewInit,\n   ComponentFactoryResolver,\n   Directive,\n   ElementRef,\n   Host,\n   Input,\n   Optional,\n   Renderer2,\n   Self,\n} from \"@angular/core\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {NavigationService} from \"@navigation/navigation.service\";\nimport {ClrButtonBaseDirective} from \"@directive/clr-button-group/clr-button-base.directive\";\nimport {ClrButton} from \"@clr/angular\";\n\n/**\n * Decorates a button or an anchor as external link. Requires one of the optional parameters articleId, helpId or url.\n *\n * @param external-link: Optional. Localization key of the text label of the external link. If omitted default label\n * will be used - \"Learn more\" for anchors or \"Ask VMWare\" for buttons.\n * @param articleId - Optional. Id of article in knowledge base.\n * @param helpId - Optional. Help id which will redirect to Knowledge Base.\n * @param url - Optional. External URL.\n */\n@Directive({\n   selector: \"a[external-link], button[external-link], clr-button[external-link]\",\n})\nexport class ExternalLinkDirective extends ClrButtonBaseDirective implements AfterViewInit {\n   private readonly ASK_VMWARE_DEFAULT_TEXT_KEY: string = \"vsan.common.askVMware\";\n   private readonly LEARN_MORE_DEFAULT_TEXT_KEY: string = \"vsan.common.learnMore\";\n\n   private readonly CONTAINER_CLASS: string = \"icon-name-container\";\n   private readonly NAVIGATION_EVENT_TYPE: string = \"click\";\n   private readonly LEAD_TO_NOWHERE_URL: string = \"javascript://\";\n   private readonly HTML_ELEMENT_SPAN_NAME: string = \"span\";\n   private readonly HTML_ELEMENT_ICON_NAME: string = \"clr-icon\";\n   private readonly HTML_ELEMENT_ROLE_ATTR_NAME: string = \"role\";\n   private readonly HTML_ELEMENT_ROLE_ATTR_VALUE: string = \"link\";\n   private readonly ICON_SHAPE_ATTR_NAME: string = \"shape\";\n   private readonly ICON_SHAPE_ATTR_VALUE: string = \"pop-out\";\n   private readonly ICON_SIZE_ATTR_NAME: string = \"size\";\n   private readonly ICON_SIZE_ATTR_VALUE: string = \"16\";\n   private readonly ICON_CLASS_ATTR_NAME: string = \"class\";\n   private readonly ICON_CLASS_ATTR_VALUE: string = \"link\";\n   private readonly ICON_TITLE_ATTR_NAME: string = \"title\";\n\n   private readonly KB_URL: string = \"http://kb.vmware.com/kb/\";\n\n   @Input(\"external-link\")\n   anchorText: string;\n\n   @Input()\n   articleId: string;\n\n   @Input()\n   helpId: string;\n\n   @Input()\n   url: string;\n\n   constructor(private el: ElementRef<HTMLElement>,\n         private resolver: ComponentFactoryResolver,\n         private renderer: Renderer2,\n         private navigationService: NavigationService,\n         // this variable will be initialized only if the host is clr-button\n         @Host() @Self() @Optional() clrButton: ClrButton) {\n      super(clrButton);\n   }\n\n   ngAfterViewInit(): void {\n      const element: HTMLElement = this.el.nativeElement;\n      // continue only if element is HTML link or button\n      if (!this.isLink(element) && !this.isButton(element)) {\n         // element is clr-button, wait until html button for it is resolved - handled by resloveButton\n         return;\n      }\n      this.prepareExternalLink(element);\n   }\n\n   resolveButton(clrButton: ClrButton, button: HTMLButtonElement, index: number): void {\n      // only if element is clr-button. At this point the html button is already resolved. Apply on it.\n      this.prepareExternalLink(button);\n   }\n\n   private prepareExternalLink(element: HTMLElement): void {\n      this.renderer.addClass(element, this.CONTAINER_CLASS);\n\n      this.setText(element);\n      if (this.isLink(element)) {\n         this.decorateLink(element);\n      } else {\n         this.addLinkRole(element);\n      }\n\n      this.initializeNavigationHandler(element);\n   }\n\n   private isButton(element: HTMLElement): boolean {\n      return element instanceof HTMLButtonElement;\n   }\n\n   private isLink(element: HTMLElement): boolean {\n      return element instanceof HTMLAnchorElement;\n   }\n\n   private setText(element: HTMLElement): void {\n      const span: HTMLSpanElement = this.renderer.createElement(this.HTML_ELEMENT_SPAN_NAME);\n      span.innerText = this.getText(element);\n      this.renderer.appendChild(element, span);\n\n      const icon: HTMLSpanElement = this.renderer.createElement(this.HTML_ELEMENT_ICON_NAME);\n      icon.setAttribute(this.ICON_SHAPE_ATTR_NAME, this.ICON_SHAPE_ATTR_VALUE);\n      icon.setAttribute(this.ICON_SIZE_ATTR_NAME, this.ICON_SIZE_ATTR_VALUE);\n      icon.setAttribute(this.ICON_CLASS_ATTR_NAME, this.ICON_CLASS_ATTR_VALUE);\n      // Set title of the icon for screen readers clarity\n      icon.setAttribute(this.ICON_TITLE_ATTR_NAME, VsanUiUtils.getString(\"vsan.screenReader.label.externalLink.icon\"));\n      this.renderer.appendChild(element, icon);\n   }\n\n   private getText(element: HTMLElement): string {\n      if (this.anchorText) {\n         return this.anchorText;\n      }\n      const key: string = this.isButton(element) ? this.ASK_VMWARE_DEFAULT_TEXT_KEY : this.LEARN_MORE_DEFAULT_TEXT_KEY;\n      return VsanUiUtils.getString(key);\n   }\n\n   private decorateLink(element: HTMLElement): void {\n      const linkElement: HTMLLinkElement = element as HTMLLinkElement;\n      // don't use href attribute. If omitted, the link will be not visualized properly.\n      linkElement.href = this.LEAD_TO_NOWHERE_URL;\n      // display link on same line\n      linkElement.style.display = \"inline-flex\";\n   }\n\n   private initializeNavigationHandler(element: HTMLElement): void {\n      element.addEventListener(this.NAVIGATION_EVENT_TYPE, () => {\n         if (this.helpId) {\n            this.navigationService.askVMware(this.helpId);\n            return;\n         }\n         if (this.articleId) {\n            this.navigationService.navigateToAddress(`${this.KB_URL}${this.articleId}`);\n            return;\n         }\n         if (this.url) {\n            this.navigationService.navigateToAddress(this.url);\n         }\n      });\n   }\n\n   // Indicate external navigation by assigning \"link\" role\n   private addLinkRole(element: HTMLElement): void {\n      this.renderer.setAttribute(element, this.HTML_ELEMENT_ROLE_ATTR_NAME, this.HTML_ELEMENT_ROLE_ATTR_VALUE);\n   }\n}"]}