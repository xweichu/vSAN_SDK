{"version":3,"sources":["webpack:///src/app/vsan/common/component/general-settings/utils/default-rekey-values.ts","webpack:///src/app/vsan/common/component/general-settings/utils/rekey-interval.component.ts","webpack:///src/app/vsan/common/component/general-settings/vsan-general-config.service.ts","webpack:///src/app/vsan/common/component/general-settings/general-config.data.ts","webpack:///src/app/vsan/common/component/general-settings/service.data.ts"],"names":["DefaultRekeyValues","RekeyMode","RekeyIntervalComponent","rekeyIntervalChange","rekeyDefaultValuesMap","DEFAULT_REKEY_HELPER_TEXT","getString","CUSTOM_REKEY_HELPER_TEXT","DATA_IN_TRANSIT_REKEY_MIN","DATA_IN_TRANSIT_REKEY_MAX","getRekeyDefaultIntervals","isDataInTransitEncryptionEnabled","selectedRekeyMode","DEFAULT","resetDefaultRekeyInterval","isRekeyIntervalAmongDefaultValues","rekeyInterval","CUSTOM","isDefaultRekeyInterval","emit","Number","name","valueInMinutes","SIX_HOURS","TWELVE_HOURS","ONE_DAY","THREE_DAYS","SEVEN_DAYS","onRekeyIntervalChange","some","defaultRekeyValue","VsanGeneralConfigService","encryptionProvider","permissionService","vsanConfigService","capabilityProvider","clusterPowerService","clusterRef","Promise","all","getVsanConfigSpec","getKmipClusterData","getVcCapabilityData","getClusterCapabilityData","getPowerState","queryClusterPermissions","queryVcPermissions","vsanConfigSpec","kmipClusterData","vcCapabilitiesData","clusterCapabilitiesData","clusterPowerState","clusterPermissions","vcPermissions","queryPermissions","clusterPermissionProperties","permissions","Map","Object","entries","debug","values","permission","set","vcRef","vcRoot","serverGuid","vcPermissionProperties","keys","EDIT_CLUSTER","CONFIG_STORAGE","MANAGE_KEYS","MANAGE_ENCRYPTION_POLICIES","MANAGE_KEY_SERVERS","SHALLOW_REKEY","SHUTDOWN_CLUSTER","READ_POLICIES","GLOBAL_VCSERVER","GLOBAL_SETTINGS","GeneralConfigData","vcCapabilityData","clusterCapabilityData","availableKmipClusters","hasEncryptionPermissions","get","hasDataInTransitEncryptionPermissions","autoClaimDisks","isDeduplicationAndCompressionSupported","isCompressionOnlySupported","enableDataAtRestEncryption","eraseDisksBeforeUse","isEncryptionSupported","NOT_SUPPORTED","ENABLED","DISABLED","kmipClusterId","dataAtRestEncryptionServiceStatus","validationErrors","push","enableDataInTransitEncryption","error","deepmergeObjects","originalConfigSpec","is","spaceEfficiencyConfig","enableRdma","advancedOptions","largeClusterSupportEnabled","capacityReservationConfig","vsanOperationReservation","hostFailureReservation","ServiceStatus"],"mappings":"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","file":"50-es5.js","sourcesContent":["/* Copyright 2020 VMware, Inc. All rights reserved. -- VMware Confidential */\nexport enum DefaultRekeyValues {\n   SIX_HOURS = 6 * 60,\n   TWELVE_HOURS = 12 * 60,\n   ONE_DAY = 24 * 60,\n   THREE_DAYS = 3 * 24 * 60,\n   SEVEN_DAYS = 7 * 24 * 60\n}","/* Copyright 2019-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, EventEmitter, Input, OnInit, Output} from \"@angular/core\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {RekeyValueModel} from \"@component/general-settings/utils/rekey-value.model\";\nimport {DefaultRekeyValues} from \"@component/general-settings/utils/default-rekey-values\";\n\nenum RekeyMode {\n   DEFAULT,\n   CUSTOM,\n}\n\n@Component({\n   templateUrl: \"rekey-interval.html\",\n   styleUrls: [\"rekey-interval.scss\"],\n   selector: \"vsan-dit-rekey-interval\",\n})\nexport class RekeyIntervalComponent implements OnInit {\n\n   @Input()\n   rekeyInterval: number;\n\n   @Output()\n   rekeyIntervalChange: EventEmitter<number> = new EventEmitter(true);\n\n   @Input()\n   isDataInTransitEncryptionEnabled: boolean;\n\n   rekeyDefaultValuesMap: RekeyValueModel[] = [];\n\n   selectedRekeyMode: RekeyMode;\n\n   RekeyMode: typeof RekeyMode = RekeyMode;\n\n   readonly DEFAULT_REKEY_HELPER_TEXT: string =\n         VsanUiUtils.getString(\"configureVsan.settings.dataInTransitEncryption.rekey.mode.default.label\");\n\n   readonly CUSTOM_REKEY_HELPER_TEXT: string =\n         VsanUiUtils.getString(\"configureVsan.settings.dataInTransitEncryption.rekey.mode.custom.minutesLabel\",\n            RekeyIntervalComponent.DATA_IN_TRANSIT_REKEY_MIN,\n            RekeyIntervalComponent.DATA_IN_TRANSIT_REKEY_MAX);\n\n   // Min rekey interval is 30 minutes\n   static readonly DATA_IN_TRANSIT_REKEY_MIN: number = 30;\n\n   // Max rekey interval is 7 days\n   static readonly DATA_IN_TRANSIT_REKEY_MAX: number = DefaultRekeyValues.SEVEN_DAYS;\n\n   async ngOnInit(): Promise<void> {\n      this.rekeyDefaultValuesMap = this.getRekeyDefaultIntervals();\n\n      if (!this.isDataInTransitEncryptionEnabled) {\n         this.selectedRekeyMode = RekeyMode.DEFAULT;\n         this.resetDefaultRekeyInterval();\n         return;\n      }\n\n      this.selectedRekeyMode =\n            this.isRekeyIntervalAmongDefaultValues(this.rekeyInterval) ? RekeyMode.DEFAULT : RekeyMode.CUSTOM;\n   }\n\n   onRekeyModeChange(): void {\n      if (this.isDefaultRekeyInterval()) {\n         this.resetDefaultRekeyInterval();\n      }\n   }\n\n   onRekeyIntervalChange(): void {\n      // Parse to number because when selection comes from dropdown list then value is of type string\n      this.rekeyIntervalChange.emit(Number(this.rekeyInterval));\n   }\n\n   isDefaultRekeyInterval(): boolean {\n      return Number(this.selectedRekeyMode) === RekeyMode.DEFAULT;\n   }\n\n   isCustomRekeyInterval(): boolean {\n      return Number(this.selectedRekeyMode) === RekeyMode.CUSTOM;\n   }\n\n   private getRekeyDefaultIntervals(): RekeyValueModel[] {\n      return [\n         {\n            name: VsanUiUtils.getString(\"vsan.time.common.hours\", 6),\n            valueInMinutes: DefaultRekeyValues.SIX_HOURS,\n         },\n         {\n            name: VsanUiUtils.getString(\"vsan.time.common.hours\", 12),\n            valueInMinutes: DefaultRekeyValues.TWELVE_HOURS,\n         },\n         {\n            name: VsanUiUtils.getString(\"vsan.time.common.day\"),\n            valueInMinutes: DefaultRekeyValues.ONE_DAY,\n         },\n         {\n            name: VsanUiUtils.getString(\"vsan.time.common.days\", 3),\n            valueInMinutes: DefaultRekeyValues.THREE_DAYS,\n         },\n         {\n            name: VsanUiUtils.getString(\"vsan.time.common.days\", 7),\n            valueInMinutes: DefaultRekeyValues.SEVEN_DAYS,\n         },\n      ];\n   }\n\n   private resetDefaultRekeyInterval(): void {\n      this.rekeyInterval = DefaultRekeyValues.ONE_DAY;\n      this.onRekeyIntervalChange();\n   }\n\n   private isRekeyIntervalAmongDefaultValues(rekeyInterval: number): boolean {\n      return this.rekeyDefaultValuesMap.some(\n            defaultRekeyValue => defaultRekeyValue.valueInMinutes === rekeyInterval);\n   }\n}\n","/* Copyright 2018-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Injectable} from \"@angular/core\";\nimport {ManagedObject} from \"@service/managed-object\";\nimport {GeneralConfigData} from \"./general-config.data\";\nimport {VsanConfigService} from \"@generated/vsan-config-service\";\nimport {VsanCapabilityData} from \"@generated/vsan-capability-data\";\nimport {VsanCapabilityProvider} from \"@generated/vsan-capability-provider\";\nimport {VsanConfigSpec} from \"@generated/vsan-config-spec\";\nimport {EncryptionPropertyProvider} from \"@generated/encryption-property-provider\";\nimport {KmipClusterData} from \"@generated/kmip-cluster-data\";\nimport {Privileges} from \"@generated/privileges\";\nimport {PermissionService} from \"@generated/permission-service\";\nimport {Logger} from \"@util/logger\";\nimport {ClusterPowerState} from \"@generated/cluster-power-state\";\nimport {ClusterPowerService} from \"@generated/cluster-power-service\";\n\n@Injectable()\nexport class VsanGeneralConfigService {\n\n   constructor(private encryptionProvider: EncryptionPropertyProvider,\n         private permissionService: PermissionService,\n         private vsanConfigService: VsanConfigService,\n         private capabilityProvider: VsanCapabilityProvider,\n         private clusterPowerService: ClusterPowerService) {}\n\n   /**\n    * Fetch the vSAN config settings for the given cluster ref\n    */\n   async getVsanGeneralConfigData(clusterRef: ManagedObject): Promise<GeneralConfigData> {\n      let vsanConfigSpec: VsanConfigSpec;\n      let vcCapabilitiesData: VsanCapabilityData;\n      let clusterCapabilitiesData: VsanCapabilityData;\n      let clusterPowerState: ClusterPowerState;\n      let clusterPermissions: Map<string, boolean>;\n      let vcPermissions: Map<string, boolean>;\n      let kmipClusterData: KmipClusterData;\n\n      [\n         vsanConfigSpec,\n         kmipClusterData,\n         vcCapabilitiesData,\n         clusterCapabilitiesData,\n         clusterPowerState,\n         clusterPermissions,\n         vcPermissions,\n      ] = await Promise.all([\n                  this.vsanConfigService.getVsanConfigSpec(clusterRef),\n                  this.encryptionProvider.getKmipClusterData(clusterRef),\n                  this.capabilityProvider.getVcCapabilityData(clusterRef),\n                  this.capabilityProvider.getClusterCapabilityData(clusterRef),\n                  this.clusterPowerService.getPowerState(clusterRef),\n                  this.queryClusterPermissions(clusterRef),\n                  this.queryVcPermissions(clusterRef)]);\n\n      return new GeneralConfigData(vsanConfigSpec, vcCapabilitiesData, clusterCapabilitiesData, clusterPowerState,\n            kmipClusterData, clusterPermissions, vcPermissions);\n   }\n\n   private async queryClusterPermissions(clusterRef: ManagedObject): Promise<Map<string, boolean>> {\n      let permissions: Map<string, boolean>;\n      try {\n         let clusterPermissions: any;\n         clusterPermissions = await this.permissionService.queryPermissions(\n               clusterRef, this.clusterPermissionProperties);\n\n         permissions = new Map([\n               ...Object.entries(clusterPermissions),\n         ]) as Map<string, boolean>;\n\n      } catch (e) {\n         Logger.debug(e);\n         permissions = new Map<string, boolean>();\n         // In case of error during permissions' query, set all to true by default\n         for (const permission of Object.values(this.clusterPermissionProperties)) {\n            permissions.set(permission, true);\n         }\n      }\n      return permissions;\n   }\n\n   private async queryVcPermissions(clusterRef: ManagedObject): Promise<Map<string, boolean>> {\n      const vcRef: ManagedObject = ManagedObject.vcRoot(clusterRef.serverGuid);\n      let permissions: Map<string, boolean>;\n      try {\n         const vcPermissions: any = await this.permissionService.queryPermissions(vcRef, this.vcPermissionProperties);\n         permissions = new Map([...Object.entries(vcPermissions)]) as Map<string, boolean>;\n\n      } catch (e) {\n         Logger.debug(e);\n         permissions = new Map<string, boolean>();\n         // In case of error during permissions' query, set all to true by default\n         for (const permission of Object.keys(this.vcPermissionProperties)) {\n            permissions.set(permission, true);\n         }\n      }\n      return permissions;\n   }\n\n   private get clusterPermissionProperties(): string[] {\n      return [\n         Privileges.EDIT_CLUSTER(),\n         Privileges.CONFIG_STORAGE(),\n         Privileges.MANAGE_KEYS(),\n         Privileges.MANAGE_ENCRYPTION_POLICIES(),\n         Privileges.MANAGE_KEY_SERVERS(),\n         Privileges.SHALLOW_REKEY(),\n         Privileges.SHUTDOWN_CLUSTER(),\n      ];\n   }\n\n   private get vcPermissionProperties(): string[] {\n      return [\n         Privileges.READ_POLICIES(),\n         Privileges.GLOBAL_VCSERVER(),\n         Privileges.GLOBAL_SETTINGS(),\n      ];\n   }\n}\n","/* Copyright 2016-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {KmipClusterData} from \"@generated/kmip-cluster-data\";\nimport {ServiceStatus} from \"./service.data\";\nimport {VsanCapabilityData} from \"@generated/vsan-capability-data\";\nimport {VsanConfigSpec} from \"@generated/vsan-config-spec\";\nimport {RekeyIntervalComponent} from \"@component/general-settings/utils/rekey-interval.component\";\nimport {Privileges} from \"@generated/privileges\";\nimport {ClusterPowerState} from \"@generated/cluster-power-state\";\n\nexport class GeneralConfigData {\n\n   private readonly vsanConfigSpec: VsanConfigSpec;\n\n   vcCapabilityData: VsanCapabilityData;\n   clusterCapabilityData: VsanCapabilityData;\n   clusterPowerState: ClusterPowerState;\n\n   availableKmipClusters: string[];\n\n   clusterPermissions: Map<string, boolean>;\n   vcPermissions: Map<string, boolean>;\n   hasEncryptionPermissions: boolean;\n   hasDataInTransitEncryptionPermissions: boolean;\n\n   constructor(vsanConfigSpec: VsanConfigSpec,\n         vcCapabilityData: VsanCapabilityData,\n         clusterCapabilityData: VsanCapabilityData,\n         clusterPowerState: ClusterPowerState,\n         kmipClusterData: KmipClusterData,\n         clusterPermissions: Map<string, boolean>,\n         vcPermissions: Map<string, boolean>) {\n\n      this.vsanConfigSpec = vsanConfigSpec;\n\n      this.vcCapabilityData = vcCapabilityData;\n      this.clusterCapabilityData = clusterCapabilityData;\n      this.clusterPowerState = clusterPowerState;\n\n      if (kmipClusterData && kmipClusterData.availableKmipClusters) {\n         this.availableKmipClusters = kmipClusterData.availableKmipClusters;\n      }\n\n      this.clusterPermissions = clusterPermissions;\n      this.vcPermissions = vcPermissions;\n      this.hasEncryptionPermissions = clusterPermissions.get(Privileges.MANAGE_KEYS())\n            && clusterPermissions.get(Privileges.MANAGE_ENCRYPTION_POLICIES())\n            && clusterPermissions.get(Privileges.MANAGE_KEY_SERVERS());\n      this.hasDataInTransitEncryptionPermissions = clusterPermissions.get(Privileges.MANAGE_KEYS());\n   }\n\n   get diskClaimPolicyText(): string {\n      return this.vsanConfigSpec.autoClaimDisks ?\n         VsanUiUtils.getString(\"vsan.generalConfig.diskClaimPolicy.auto\")\n         : VsanUiUtils.getString(\"vsan.generalConfig.diskClaimPolicy.manual\");\n   }\n\n   get diskClaimPolicies(): string[] {\n      return [\n            VsanUiUtils.getString(\"vsan.generalConfig.diskClaimPolicy.auto\"),\n            VsanUiUtils.getString(\"vsan.generalConfig.diskClaimPolicy.manual\"),\n      ];\n   }\n\n   get isSpaceEfficiencySupported(): boolean {\n      return this.clusterCapabilityData.isDeduplicationAndCompressionSupported\n            || this.clusterCapabilityData.isCompressionOnlySupported;\n   }\n\n   get wipeDiskText(): string {\n      if (!this.vsanConfigSpec.enableDataAtRestEncryption) {\n         return \"\";\n      }\n      if (this.vsanConfigSpec.eraseDisksBeforeUse) {\n         return VsanUiUtils.getString(\"vsan.generalConfig.encryptionState.enabled\");\n      } else {\n         return VsanUiUtils.getString(\"vsan.generalConfig.encryptionState.disabled\");\n      }\n   }\n\n   get dataAtRestEncryptionServiceStatus(): ServiceStatus {\n      if (!this.clusterCapabilityData.isEncryptionSupported) {\n         return ServiceStatus.NOT_SUPPORTED;\n      }\n      return this.vsanConfigSpec.enableDataAtRestEncryption ? ServiceStatus.ENABLED : ServiceStatus.DISABLED;\n   }\n\n   get rekeyEnabled(): boolean {\n      return this.vsanConfigSpec.kmipClusterId\n               && this.clusterCapabilityData.isEncryptionSupported\n               && this.dataAtRestEncryptionServiceStatus === ServiceStatus.ENABLED;\n   }\n\n   validateConfig(vsanConfigSpec: VsanConfigSpec): string[] {\n      const validationErrors: string[] = [];\n\n      if (vsanConfigSpec.enableDataAtRestEncryption && this.hasEncryptionPermissions) {\n         // Validate whether encryption settings are complete\n         if (!vsanConfigSpec.kmipClusterId) {\n            validationErrors.push(VsanUiUtils.getString(\"vsan.generalConfig.kmsNotSelected.warning\"));\n         }\n      }\n\n      if (vsanConfigSpec.enableDataInTransitEncryption && this.hasDataInTransitEncryptionPermissions) {\n         const rekeyInterval: number = vsanConfigSpec.rekeyInterval;\n         if (!rekeyInterval ||\n               rekeyInterval < RekeyIntervalComponent.DATA_IN_TRANSIT_REKEY_MIN ||\n               rekeyInterval > RekeyIntervalComponent.DATA_IN_TRANSIT_REKEY_MAX) {\n            const error: string =\n                  VsanUiUtils.getString(\"configureVsan.settings.dataInTransitEncryption.rekey.rangeError\",\n                        RekeyIntervalComponent.DATA_IN_TRANSIT_REKEY_MIN,\n                        RekeyIntervalComponent.DATA_IN_TRANSIT_REKEY_MAX);\n            validationErrors.push(error);\n         }\n      }\n      return validationErrors;\n   }\n\n   clone(): GeneralConfigData {\n      return VsanUiUtils.deepmergeObjects({}, this);\n   }\n\n   isConfigChanged(originalConfigSpec: VsanConfigSpec): boolean {\n      if (!Object.is(originalConfigSpec.enableDataInTransitEncryption,\n            this.vsanConfigSpec.enableDataInTransitEncryption)\n            || !Object.is(originalConfigSpec.enableDataAtRestEncryption, this.vsanConfigSpec.enableDataAtRestEncryption)\n            || !Object.is(originalConfigSpec.spaceEfficiencyConfig, this.vsanConfigSpec.spaceEfficiencyConfig)\n            || !Object.is(originalConfigSpec.autoClaimDisks, this.vsanConfigSpec.autoClaimDisks)\n            || !Object.is(originalConfigSpec.enableRdma, this.vsanConfigSpec.enableRdma)\n            || !Object.is(originalConfigSpec.advancedOptions.largeClusterSupportEnabled,\n                  this.vsanConfigSpec.advancedOptions.largeClusterSupportEnabled)) {\n         return true;\n      }\n\n      if (originalConfigSpec.enableDataInTransitEncryption &&\n            !Object.is(originalConfigSpec.rekeyInterval, this.vsanConfigSpec.rekeyInterval)) {\n         return true;\n      }\n\n      if (originalConfigSpec.enableDataAtRestEncryption) {\n         if (!Object.is(originalConfigSpec.kmipClusterId, this.vsanConfigSpec.kmipClusterId)\n               || !Object.is(originalConfigSpec.eraseDisksBeforeUse, this.vsanConfigSpec.eraseDisksBeforeUse)) {\n            return true;\n         }\n      }\n\n      if (originalConfigSpec.advancedOptions.capacityReservationConfig !== null) {\n         if (!Object.is(originalConfigSpec.advancedOptions.capacityReservationConfig.vsanOperationReservation,\n               this.vsanConfigSpec.advancedOptions.capacityReservationConfig.vsanOperationReservation)\n               || !Object.is(originalConfigSpec.advancedOptions.capacityReservationConfig.hostFailureReservation,\n                     this.vsanConfigSpec.advancedOptions.capacityReservationConfig.hostFailureReservation)) {\n            return true;\n         }\n      }\n\n      return false;\n   }\n\n   cloneVsanConfigSpec(): VsanConfigSpec {\n      return VsanUiUtils.deepmergeObjects({}, this.vsanConfigSpec);\n   }\n}\n","/* Copyright 2017 VMware, Inc. All rights reserved. -- VMware Confidential */\n\nexport enum ServiceStatus {\n   UNKNOWN = -1,\n   ENABLED = 0,\n   DISABLED = 1,\n   NOT_SUPPORTED = 2\n}\n"]}