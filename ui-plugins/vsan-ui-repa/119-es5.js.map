{"version":3,"sources":["webpack:///src/app/vsan/common/directive/clr-button-group/clr-button-base.directive.ts","webpack:///src/app/vsan/cluster/summary/health/cluster-summary-health.component.ts","webpack:///src/app/vsan/common/service/flow/error-handler.decorator.ts","webpack:///src/app/vsan/common/service/flow/loader.decorator.ts","webpack:///src/app/vsan/common/service/navigation/model/knowledge-base-id.ts","webpack:///src/app/vsan/cluster/summary/cluster-summary.module.ts","webpack:///src/app/vsan/common/util/vsan-dialog-util.ts","webpack:///src/app/vsan/cluster/summary/health/cluster-summary-health.html","webpack:///src/app/vsan/common/service/flow/loading-flow-wrapper.data.ts","webpack:///src/app/vsan/cluster/summary/performance/cluster-summary-performance.component.ts","webpack:///src/app/vsan/cluster/summary/summary-portlet.component.ts","webpack:///src/app/vsan/cluster/summary/summary-portlet.html","webpack:///src/app/vsan/common/directive/external-link/external-link.directive.ts","webpack:///src/app/vsan/cluster/summary/performance/cluster-summary-performance.html"],"names":["ClrButtonBaseDirective","clrButton","name","Math","random","toString","directiveHolder","directives","push","ClusterSummaryHealthComponent","healthProvider","navigationService","refWatcher","changeDetector","loading","healthStatus","statusLabel","getHealthDataFailed","handleHealthData","result","testsData","length","detectChanges","warn","buildStatus","redTests","yellowTests","map","test","subtests","subtest","status","red","yellow","getString","green","onCatch","error","emit","log","onDetailsClick","navigateTo","CLUSTER_HEALTH","contextObject","watchGlobalRefreshSubscription","prototype","constructor","fetch","getVsanHealthSummaryFromCache","then","getVsanHealthStatusIconClass","getVsanHealthStatusIconShape","destroyed","ErrorHandler","props","targetClass","functionName","descriptor","errorHandler","value","Loader","params","tag","getClassName","loaderName","originalFn","loadingFlowWrapper","preExecute","undefined","incrementLoads","invoke","preLoadSrMessage","srMessage","srMessageType","LOADING","postExecute","LOADED","onError","ex","processError","rethrow","shouldRethrow","invokeErrorHandler","decrementLoads","backingObject","arguments","wrapper","handler","call","errorMessageGetter","KnowledgeBaseId","routes","path","component","ClusterSummaryModule","VsanDialogUtil","CAPACITY_MANAGEMENT_DIALOG","width","height","DELETE_VOLUME_DIALOG","MIGRATE_VOLUME_DIALOG","REAPPLY_VOLUME_POLICY_DIALOG","DUPLICATE_PCI_ID_MODEL_SELECTION_DIALOG","HEALTH_RESTORE_ACTION_DIALOG","CLUSTER_POWER_ON_DIALOG","VM_IO_DIAGNOSTICS_METRICS_DIALOG","VM_IO_DIAGNOSTICS_LATENCY_DIALOG","VM_IO_DIAGNOSTICS_DOM_OWNER_LATENCY_DIALOG","PERF_SVC_EDIT_ACTION_DIALOG","PERF_SVC_ENABLE_ACTION_DIALOG","CLAIM_DISKS_ACTION_DIALOG","VSAN_DISK_CLAIM_ACTION_DIALOG","VsanDialogProperties","LoadingFlowWrapper","_backingObject","DEFAULT_NAME","initCollection","ERROR_HOLDER","ERROR_HANDLERS_REF_HOLDER","ERROR_MESSAGE_GETTERS_REF_HOLDER","LOADS_COUNT_HOLDER","collectionName","val","loadsCount","Error","getter","ClusterSummaryPerformanceComponent","summaryService","flatData","getPerformanceDataFailed","handleError","perfServiceEnabled","perfServiceHealthy","CLUSTER_SERVICES","CLUSTER_PERFORMANCE","tooltipActionLinkClicked","data","now","roundToMinuteStart","Date","getTime","startTime","HOUR_IN_MILLISECONDS","LAST_TWO_HOURS","timePickerRange","Factory","create","selectedTimePoint","timePoint","selectedGraphId","graphId","getSummaryPerformanceData","isPerfEnabled","isPerfServiceHealthy","isTopContributorsSupported","setPerformanceUnavailableLabel","tooltipActionLink","handleChartsData","performanceUnavailableLabel","perfData","hasChartData","chartsData","graphs","clusterDomClientEntity","filter","graph","Object","values","includes","id","getGraphDefinition","graphsData","forEach","entry","entityRefId","metrics","ClusterSummaryPortletComponent","clusterPowerService","permissionService","hasEditClusterPermission","alertMessages","isInitiallyLoaded","unavailableViewSpec","SERVICES_VIEW_CLUSTER_SHUT_DOWN","clusterRef","Promise","all","checkForEditClusterPermission","queryClusterPowerState","isClusterPoweredOff","hasPermissions","EDIT_CLUSTER","getPowerState","ExternalLinkDirective","el","resolver","renderer","ASK_VMWARE_DEFAULT_TEXT_KEY","LEARN_MORE_DEFAULT_TEXT_KEY","CONTAINER_CLASS","NAVIGATION_EVENT_TYPE","LEAD_TO_NOWHERE_URL","HTML_ELEMENT_SPAN_NAME","HTML_ELEMENT_ICON_NAME","HTML_ELEMENT_ROLE_ATTR_NAME","HTML_ELEMENT_ROLE_ATTR_VALUE","ICON_SHAPE_ATTR_NAME","ICON_SHAPE_ATTR_VALUE","ICON_SIZE_ATTR_NAME","ICON_SIZE_ATTR_VALUE","ICON_CLASS_ATTR_NAME","ICON_CLASS_ATTR_VALUE","ICON_TITLE_ATTR_NAME","KB_URL","element","nativeElement","isLink","isButton","prepareExternalLink","button","index","addClass","setText","decorateLink","addLinkRole","initializeNavigationHandler","HTMLButtonElement","HTMLAnchorElement","span","createElement","innerText","getText","appendChild","icon","setAttribute","anchorText","key","linkElement","href","style","display","addEventListener","helpId","askVMware","articleId","navigateToAddress","url"],"mappings":"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","file":"119-es5.js","sourcesContent":["/* Copyright 2020 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {ClrButton} from \"@clr/angular\";\n\n/**\n * Use this class as base class for directive, which handles clr-button. It will help to link the rendered button with\n * the clr-button on which the directive is applied.\n */\nexport abstract class ClrButtonBaseDirective {\n\n   constructor(private clrButton: ClrButton) {\n      if (!clrButton) {\n         return;\n      }\n      // name should be set, if not provided in template - generate one. ClrButtom#name is used to generate the name\n      // attribute of the markup button. Later the name is used to match the generated markup with the directive.\n      if (!clrButton.name) {\n         clrButton.name = Math.random().toString();\n      }\n\n      const directiveHolder: DirectiveHolder = (clrButton as DirectiveHolder);\n      directiveHolder.directives = directiveHolder.directives || [];\n      directiveHolder.directives.push(this);\n   }\n\n   /**\n    * This method will be called when the actual html button is rendered.\n    */\n   abstract resolveButton(clrButton: ClrButton, button: HTMLButtonElement, index: number);\n}\n\nexport interface DirectiveHolder extends ClrButton {\n   directives: ClrButtonBaseDirective[];\n}","/* Copyright 2017-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {VsanHealthUtil} from \"@util/vsan-health-util\";\nimport {ChangeDetectorRef, Component, EventEmitter, OnInit, Output, ViewRef} from \"@angular/core\";\nimport {RefreshHandler} from \"@service/global-refresh.service\";\nimport {Logger} from \"@util/logger\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {ManagedObject} from \"@service/managed-object\";\nimport {VsanTestData} from \"@generated/vsan-test-data\";\nimport {VsanHealthData} from \"@generated/vsan-health-data\";\nimport {VsanHealthStatus} from \"@generated/vsan-health-status\";\nimport {VsanHealthPropertyProvider} from \"@generated/vsan-health-property-provider\";\nimport {NavigationService, PlatformExtension} from \"@navigation/navigation.service\";\nimport {ReferenceWatcher} from \"@util/reference-watcher\";\n\n@Component({\n   selector: \"vsan-cluster-summary-health\",\n   templateUrl: \"cluster-summary-health.html\",\n   styleUrls: [\"cluster-summary-health.scss\"],\n   providers: [ReferenceWatcher],\n})\nexport class ClusterSummaryHealthComponent implements OnInit {\n\n   loading: boolean = false;\n\n   healthStatus: VsanHealthStatus = null;\n\n   statusLabel: string = \"\";\n\n   @Output()\n   getHealthDataFailed: EventEmitter<string> = new EventEmitter<string>();\n\n   constructor(private healthProvider: VsanHealthPropertyProvider,\n         private navigationService: NavigationService,\n         private refWatcher: ReferenceWatcher,\n         private changeDetector: ChangeDetectorRef) {\n      this.refWatcher.watchGlobalRefreshSubscription(ClusterSummaryHealthComponent.prototype.constructor.name);\n   }\n\n   ngOnInit(): void {\n      this.fetch();\n   }\n\n   @RefreshHandler\n   fetch(): void {\n      this.loading = true;\n      this.healthStatus = null;\n      this.statusLabel = \"\";\n      this.healthProvider.getVsanHealthSummaryFromCache(ManagedObject.contextObject)\n            .then(this.handleHealthData)\n            .catch(this.onCatch);\n      this.detectChanges();\n   }\n\n   private handleHealthData = (result: VsanHealthData): void => {\n      this.loading = false;\n      if (!result || !result.testsData || !result.testsData.length) {\n         this.detectChanges();\n         Logger.warn(\"The health summary data from cache is empty.\");\n         return;\n      }\n      this.buildStatus(result.testsData);\n   };\n\n   /**\n    * In the case of red status tests, an error status icon and \"x issues\" label are displayed,\n    * In the absence of red but yellow, a warning status icon and \"x warnings\" label are displayed,\n    * When there are no red or yellow status tests show a green status icon and \"OK\" label.\n    */\n   private buildStatus = (testsData: VsanTestData[]) => {\n      let redTests: number = 0;\n      let yellowTests: number = 0;\n      testsData.map(test => {\n         const subtests: VsanTestData[] = test.subtests;\n         subtests.map(subtest => {\n            if (subtest.status === VsanHealthStatus.red) {\n               redTests += 1;\n            }\n            if (subtest.status === VsanHealthStatus.yellow) {\n               yellowTests += 1;\n            }\n         });\n      });\n\n      if (redTests > 0) {\n         this.healthStatus = VsanHealthStatus.red;\n         this.statusLabel = redTests === 1\n               ? VsanUiUtils.getString(\"vsan.cluster.health.summary.errors.label.singular\", redTests)\n               : VsanUiUtils.getString(\"vsan.cluster.health.summary.errors.label.plural\", redTests);\n         this.detectChanges();\n         return;\n      }\n      if (yellowTests > 0) {\n         this.healthStatus = VsanHealthStatus.yellow;\n         this.statusLabel = yellowTests === 1\n               ? VsanUiUtils.getString(\"vsan.cluster.health.summary.warnings.label.singular\", yellowTests)\n               : VsanUiUtils.getString(\"vsan.cluster.health.summary.warnings.label.plural\", yellowTests);\n         this.detectChanges();\n         return;\n      }\n      this.healthStatus = VsanHealthStatus.green;\n      this.statusLabel = VsanUiUtils.getString(\"vsan.cluster.health.summary.ok.label\");\n      this.detectChanges();\n   };\n\n   private onCatch = (error: any): void => {\n      this.getHealthDataFailed.emit(VsanUiUtils.getString(\"vsan.cluster.health.summary.errors.message\"));\n      this.loading = false;\n      Logger.log(\"Unable to query health summary data from cache: \" + error);\n      this.detectChanges();\n   };\n\n   onDetailsClick = (): void => {\n      this.navigationService.navigateTo(PlatformExtension.CLUSTER_HEALTH, ManagedObject.contextObject);\n   };\n\n   get statusClass(): string {\n      return VsanHealthUtil.getVsanHealthStatusIconClass(this.healthStatus);\n   }\n\n   get statusShape(): string {\n      return VsanHealthUtil.getVsanHealthStatusIconShape(this.healthStatus);\n   }\n\n   /**\n    * If the component is being marked as destroyed but we try to detect changes angular will throw exception\n    */\n   private detectChanges(): void {\n      if (!(this.changeDetector as ViewRef).destroyed) {\n         this.changeDetector.detectChanges();\n      }\n   }\n}\n","/* Copyright 2021 VMware, Inc. All rights reserved. -- VMware Confidential */\n\nimport {LoadingFlowWrapper} from \"@service/flow/loading-flow-wrapper.data\";\n\n/**\n * This property decorator is supposed to be used along with the @Loader decorator.\n * If an exception is thrown during the execution of the method decorated with @Loader\n * the ErrorHandler method will be invoked. You can define as many ErrorHandlers as you want,\n * but they must be with different names. The name can be provided as input to the decorator.\n * If a name is set to the ErrorHandler it will handle only the errors thrown by Loader functions\n * with the same name. If no name is passed to the ErrorHandler, it will handle only the errors\n * from Loader functions with no name.\n *\n * <pre>\n * // Example 1:\n * @Loader()\n * loadSyncData(): any {\n *    throw new Error(\"Failed to load sync data\");\n * }\n *\n * @ErrorHandler()\n * handleError(err: any) {\n *    // handle the error.\n * }\n *...\n *\n * // Example 2\n *\n * @Loader({name: \"data-loading-flow})\n * async loadAsyncData(): Promise<any> {\n *    return Promise.reject(\"Failed to load async data\");\n * }\n *\n * @ErrorHandler({name: \"data-loading-flow})\n * handleError(err: any) {\n *    // handle the error.\n * }\n * ...\n * </pre>\n */\nexport function ErrorHandler(props?: ErrorHandlerProperties): MethodDecorator {\n   props = props || {};\n   return (targetClass: any, functionName: string, descriptor: PropertyDescriptor): void => {\n      (new LoadingFlowWrapper(targetClass, props.name)).errorHandler = descriptor.value;\n   };\n}\n\n/**\n * Properties of the ErrorHandler decorator.\n */\nexport interface ErrorHandlerProperties {\n\n   /**\n    * Indicates which @Loder should be handled by this @ErrorHandler\n    */\n   name?: string;\n}\n","/* Copyright 2021-2022 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {ErrorContext, FunctionWrapper} from \"@service/flow/function-wrapper\";\nimport {LoadingFlowWrapper} from \"@service/flow/loading-flow-wrapper.data\";\nimport {ScreenReaderAnnouncerService, SrEvent, SrMessageType} from \"@service/screen-reader-announcer.service\";\nimport {Reflection} from \"@util/reflection\";\nimport {GlobalLogger} from \"../../../../vsan-app.module\";\n\n/**\n * Method decorator that does the following:\n *  - watches for errors and if such appear:\n *       - the error is logged in the browser's console\n *       - the error is logged in the H5C server log\n *       - the related @ErrorMessage fields are populated\n *       - the related @ErrorHandler methods are invoked\n *  - Updates the @LoadingIndicator decorated fields\n *  - Invokes the screen reader service once the loading operation completes successfully\n */\nexport function Loader(params?: LoaderParams): MethodDecorator {\n   // If no params are passed, initialize the variable in order to avoid multiple null-checks\n   params = params || {};\n   return (targetClass: any, functionName: string, descriptor: PropertyDescriptor): void => {\n      // Use the component name as tag in order easily find where the error was thrown.\n      const tag: string = Reflection.getClassName(targetClass);\n      const loaderName: string = params.name;\n      const originalFn: any = descriptor.value;\n\n      descriptor.value = function (): any {\n         const loadingFlowWrapper: LoadingFlowWrapper = new LoadingFlowWrapper(this, loaderName);\n         return (new FunctionWrapper(originalFn))\n               .preExecute(() => {\n                  loadingFlowWrapper.error = undefined;\n                  loadingFlowWrapper.incrementLoads();\n                  ScreenReaderAnnouncerService.invoke(\n                        params.preLoadSrMessage || params.srMessage,\n                        params.srMessageType, SrEvent.LOADING);\n               })\n               .postExecute(() => {\n                  ScreenReaderAnnouncerService.invoke(params.srMessage, params.srMessageType, SrEvent.LOADED);\n               })\n               .onError((ex: any) => {\n                  processError(loadingFlowWrapper, tag, ex);\n                  const rethrow: boolean = shouldRethrow(loadingFlowWrapper, params);\n                  if (!rethrow) {\n                     ex = invokeErrorHandler(loadingFlowWrapper, ex);\n                  }\n                  return new ErrorContext(rethrow, ex);\n               })\n               .finally(() => {\n                  loadingFlowWrapper.decrementLoads();\n               })\n               .invoke(loadingFlowWrapper.backingObject, arguments);\n      };\n   };\n}\n\n/**\n * Parameters for the @Loader decorator\n */\nexport interface LoaderParams {\n\n   /**\n    * The name of the loader by which will be resolved te @LoadingIndicator, @ErrorHandler and @ErrorMessage\n    */\n   name?: string;\n\n   /**\n    * Indicates if the error should be rethrown after being processed by the @ErrorHandlers\n    */\n   rethrow?: boolean;\n\n   /**\n    * Used along with srMessageType to create the screen reader message to be announced after the loading\n    * operation completes successfully.\n    * If preLoadSrMessage is not set, srMessage will also be announced when the loading operation starts.\n    */\n   srMessage?: string;\n\n   /**\n    * Used when the message in preExecute() should be different than the one in postExecute().\n    * If not set, srMessage will be used in both places.\n    * Should be given a value when the srMessageType is set to CUSTOM,\n    * because otherwise the exact same message will be announced in preExecute() and postExecute().\n    */\n   preLoadSrMessage?: string;\n\n   /**\n    * The screen reader message type. Used for creating an appropriate message.\n    */\n   srMessageType?: SrMessageType;\n}\n\n/**\n * Handles the given error by:\n *  - logging the error in the browsers console\n *  - logging the error in the H5C backend log\n *  - updates all @ErrorMessage fields\n */\nfunction processError(wrapper: LoadingFlowWrapper, tag: string, ex: any): void {\n   // Log the error to the backend\n   GlobalLogger.error(tag, ex);\n\n   // Cache the error so it can be retrieved by @ErrorMessage decorated fields\n   wrapper.error = ex;\n}\n\n/**\n * Invokes the error handler (if defined)\n */\nfunction invokeErrorHandler(wrapper: LoadingFlowWrapper, ex: any): any {\n   const handler: any = wrapper.errorHandler;\n   return !!handler\n         ? handler.call(wrapper.backingObject, ex)\n         : null;\n}\n\n/**\n * Reject the promise only if:\n * 1. there are no handlers declared\n * 2. the components has explicitly requested the error to be rethrown\n */\nfunction shouldRethrow(wrapper: LoadingFlowWrapper, params: LoaderParams): boolean {\n   return !wrapper.errorHandler && !wrapper.errorMessageGetter\n         || !!params.rethrow;\n}\n","/* Copyright 2021 VMware, Inc. All rights reserved. -- VMware Confidential */\n/**\n * IDs used in external KB link navigation\n */\nexport enum KnowledgeBaseId {\n   PRECHECK_PCP = \"83954\",\n   VIRTUAL_OBJECTS = \"2108319\",\n   UPGRADE = \"2148493\",\n   PERFORMANCE_DIAGNOSTICS = \"2148770\",\n   SUPPORT_INSIGHT = \"60206\",\n}\n","/* Copyright 2019 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {NgModule} from \"@angular/core\";\nimport {CommonModule} from \"@angular/common\";\nimport {FormsModule} from \"@angular/forms\";\nimport {RouterModule, Routes} from \"@angular/router\";\nimport {ClarityModule} from \"@clr/angular\";\nimport {VsanCommonModule} from \"app/vsan/common/vsan-common.module\";\nimport {ClusterSummaryPortletComponent} from \"./summary-portlet.component\";\nimport {ClusterSummaryPerformanceComponent} from \"./performance/cluster-summary-performance.component\";\nimport {ClusterSummaryHealthComponent} from \"./health/cluster-summary-health.component\";\nimport {CapacityCommonModule} from \"@component/capacity/capacity-common.module\";\nimport {VsanChartModule} from \"@component/chart/chart.module\";\nimport {UnavailableViewModule} from \"@component/unavailable-view/unavailable-view.module\";\n\nconst routes: Routes = [\n   {\n      path: \"\",\n      component: ClusterSummaryPortletComponent,\n   },\n];\n\n@NgModule({\n   imports: [\n      CommonModule,\n      FormsModule,\n      ClarityModule,\n      VsanCommonModule,\n      CapacityCommonModule,\n      VsanChartModule,\n      UnavailableViewModule,\n      RouterModule.forChild(routes),\n   ],\n   declarations: [\n      ClusterSummaryPortletComponent,\n      ClusterSummaryPerformanceComponent,\n      ClusterSummaryHealthComponent,\n   ],\n})\nexport class ClusterSummaryModule {\n}","/* Copyright 2020-2022 VMware, Inc. All rights reserved. -- VMware Confidential */\nexport class VsanDialogUtil {\n   static readonly CAPACITY_MANAGEMENT_DIALOG: VsanDialogProperties = {\n      width: 800,\n      height: 700,\n   };\n\n   static readonly DELETE_VOLUME_DIALOG: VsanDialogProperties = {\n      width: 500,\n      height: 250,\n   };\n\n   static readonly MIGRATE_VOLUME_DIALOG: VsanDialogProperties = {\n      width: 1030,\n      height: 710,\n   };\n\n   static readonly REAPPLY_VOLUME_POLICY_DIALOG: VsanDialogProperties = {\n      width: 700,\n      height: 250,\n   };\n\n   static readonly DUPLICATE_PCI_ID_MODEL_SELECTION_DIALOG: VsanDialogProperties = {\n      width: 800,\n      height: 500,\n   };\n\n   static readonly HEALTH_RESTORE_ACTION_DIALOG: VsanDialogProperties = {\n      width: 550,\n      height: 250,\n   };\n\n   // Keep in sync with plugin.xml extension point\n   static readonly CLUSTER_POWER_ON_DIALOG: VsanDialogProperties = {\n      width: 600,\n      height: 230,\n   };\n\n   static readonly VM_IO_DIAGNOSTICS_METRICS_DIALOG: VsanDialogProperties = {\n      width: 900,\n      height: 700,\n   };\n\n   static readonly VM_IO_DIAGNOSTICS_LATENCY_DIALOG: VsanDialogProperties = {\n      width: 1000,\n      height: 500,\n   };\n\n   static readonly VM_IO_DIAGNOSTICS_DOM_OWNER_LATENCY_DIALOG: VsanDialogProperties = {\n      width: 1000,\n      height: 400,\n   };\n\n   static readonly PERF_SVC_EDIT_ACTION_DIALOG: VsanDialogProperties = {\n      width: 800,\n      height: 450,\n   };\n\n   static readonly PERF_SVC_ENABLE_ACTION_DIALOG: VsanDialogProperties = {\n      width: 800,\n      height: 250,\n   };\n\n   static readonly CLAIM_DISKS_ACTION_DIALOG: VsanDialogProperties = {\n      width: 1200,\n      height: 650,\n   };\n\n   static readonly VSAN_DISK_CLAIM_ACTION_DIALOG: VsanDialogProperties = {\n      width: 670,\n      height: 300,\n   };\n}\n\nexport class VsanDialogProperties {\n   width: number;\n   height: number;\n}\n","<div class=\"clr-row\">\n   <label id=\"health-summary-title\" class=\"clr-col-3 clr-control-label\">\n      {{\"vsan.cluster.health.summary.title.label\" | localized}}\n   </label>\n   <div class=\"clr-col-7\">\n      <ng-container *ngIf=\"!loading  && !!healthStatus && !!statusLabel\">\n         <clr-icon size=\"18\"\n                   aria-hidden=\"true\"\n                   [attr.shape]=\"statusShape\"\n                   [attr.class]=\"'health-summary-error is-solid ' + statusClass\"></clr-icon>\n         <span>{{statusLabel}}</span>\n      </ng-container>\n      <ng-container *ngIf=\"loading\">\n         <span class=\"spinner spinner-inline\"></span>\n         <span>{{\"vsan.loading\" | localized}}</span>\n      </ng-container>\n   </div>\n   <a id=\"health-summary-details\"\n      class=\"clr-col-2 details\"\n      href=\"javascript://\"\n      (click)=\"onDetailsClick()\">\n      {{\"vsan.cluster.summary.portlet.details.label\" | localized}}\n   </a>\n</div>\n","/* Copyright 2021 VMware, Inc. All rights reserved. -- VMware Confidential */\n\n/**\n * This class is used internally by the @Loader decorator and the decorators related to it.\n * It encapsulates the logic for accessing internal properties needed for the decorators to work.\n * The state of this class is kept in the \"backingObject\" passed to the constructor. This allows\n * the wrapper class to be easily recreated wherever it is needed without worrying about keeping its reference.\n *\n * <pre>\n * const obj: any = {};\n *\n * // Create a new LoadingFlowWrapper over obj\n * const wrapper1: LoadingFlowWrapper = new LoadingFlowWrapper(obj);\n * // Set the error field to \"alabala\" string\n * wrapper1.error = \"alabala\";\n *\n * // Create a new LoadingFlowWrapper over obj\n * const wrapper2: LoadingFlowWrapper = new LoadingFlowWrapper(obj);\n * console.log(wrapper2.error); // Prints \"alabala\" because the backing object is the same\n * </pre>\n */\nexport class LoadingFlowWrapper {\n\n   private static readonly ERROR_HOLDER: string = \"__ex__\";\n   private static readonly ERROR_HANDLERS_REF_HOLDER: string = \"__errorHandlers__\";\n   private static readonly ERROR_MESSAGE_GETTERS_REF_HOLDER: string = \"__errorMessageGetters__\";\n   private static readonly LOADS_COUNT_HOLDER: string = \"__loadsCount__\";\n\n   private static readonly DEFAULT_NAME: string = \"default-loader\";\n\n   constructor(private _backingObject: any,\n         private loaderName: string) {\n      this.loaderName = loaderName || LoadingFlowWrapper.DEFAULT_NAME;\n\n      // Init all collections\n      this.initCollection(LoadingFlowWrapper.ERROR_HOLDER);\n      this.initCollection(LoadingFlowWrapper.ERROR_HANDLERS_REF_HOLDER);\n      this.initCollection(LoadingFlowWrapper.ERROR_MESSAGE_GETTERS_REF_HOLDER);\n      this.initCollection(LoadingFlowWrapper.LOADS_COUNT_HOLDER);\n   }\n\n   private initCollection(collectionName: string): void {\n      // Check first if the collection hasn't been initialized by another wrapper.\n      // If so, do nothing as we don't want to override the data already set.\n      if (!this.backingObject[collectionName]) {\n         this.backingObject[collectionName] = [];\n      }\n   }\n\n   /**\n    * The original object which methods/properties were decorated\n    */\n   get backingObject(): any {\n      return this._backingObject;\n   }\n\n   /**\n    * Returns the thrown error\n    */\n   get error(): any {\n      return this.backingObject[LoadingFlowWrapper.ERROR_HOLDER][this.loaderName];\n   }\n\n   /**\n    * Sets the thrown error\n    */\n   set error(val: any) {\n      this.backingObject[LoadingFlowWrapper.ERROR_HOLDER][this.loaderName] = val;\n   }\n\n   /**\n    * Returns the number of active loading operations\n    */\n   private get loadsCount(): number {\n      return this.backingObject[LoadingFlowWrapper.LOADS_COUNT_HOLDER][this.loaderName];\n   }\n\n   /**\n    * Returns true if there are running loader methods or promises.\n    */\n   get isLoading(): boolean {\n      return !!this.loadsCount;\n   }\n\n   /**\n    * Increase the number of active loading operations by one\n    */\n   incrementLoads(): void {\n      // Initialize the counter if it hasn't been initialized yet\n      if (!this.loadsCount) {\n         this.backingObject[LoadingFlowWrapper.LOADS_COUNT_HOLDER][this.loaderName] = 0;\n      }\n      this.backingObject[LoadingFlowWrapper.LOADS_COUNT_HOLDER][this.loaderName] += 1;\n   }\n\n   /**\n    * Decreases the number of active loading operations by one\n    */\n   decrementLoads(): void {\n      this.backingObject[LoadingFlowWrapper.LOADS_COUNT_HOLDER][this.loaderName] -= 1;\n   }\n\n   get errorHandler(): any {\n      return this.backingObject[LoadingFlowWrapper.ERROR_HANDLERS_REF_HOLDER][this.loaderName];\n   }\n\n   /**\n    * Registers a new error handler.\n    */\n   set errorHandler(errorHandler: any) {\n      if (!!this.errorHandler) {\n         throw new Error(`ErrorHandler for loader \"${this.loaderName}\" already registered!`);\n      }\n      this.backingObject[LoadingFlowWrapper.ERROR_HANDLERS_REF_HOLDER][this.loaderName] = errorHandler;\n   }\n\n   get errorMessageGetter(): any {\n      return this.backingObject[LoadingFlowWrapper.ERROR_MESSAGE_GETTERS_REF_HOLDER][this.loaderName];\n   }\n\n   set errorMessageGetter(getter: any) {\n      if (!!this.errorMessageGetter) {\n         throw new Error(`ErrorMessage for loader \"${this.loaderName}\" already registered!`);\n      }\n      this.backingObject[LoadingFlowWrapper.ERROR_MESSAGE_GETTERS_REF_HOLDER][this.loaderName] = getter;\n   }\n}\n","/* Copyright 2017-2020 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, EventEmitter, OnInit, Output} from \"@angular/core\";\nimport {RefreshHandler} from \"@service/global-refresh.service\";\nimport {ManagedObject} from \"@service/managed-object\";\nimport {GraphMetric} from \"@component/chart/performance/graph-metrics.data\";\nimport {FlatGraphMetric} from \"@component/chart/performance/flat-graph-metric\";\nimport {PerfGraph} from \"@component/chart/performance/perf-graph\";\nimport {PerfChartUtil} from \"@component/chart/performance/perf-chart-util\";\nimport {NavigationService, PlatformExtension} from \"@navigation/navigation.service\";\nimport {VsanClusterSummaryService} from \"@generated/vsan-cluster-summary-service\";\nimport {SummaryPerformanceData} from \"@generated/summary-performance-data\";\nimport {PefGraphId} from \"@component/chart/model/perf-graph-id\";\nimport {ChartPlotLineSelectionData} from \"@component/chart/model/chart-plot-line-selection.data\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {TopContributorsContext} from \"@navigation/context/top-contributors-context\";\nimport {VsanDateTimeUtils} from \"@util/vsan-dateteime-util\";\nimport {PerfTimeRangeData} from \"@generated/perf-time-range-data\";\nimport {ReferenceWatcher} from \"@util/reference-watcher\";\n\n@Component({\n   selector: \"vsan-cluster-summary-performance\",\n   templateUrl: \"cluster-summary-performance.html\",\n   styleUrls: [\"cluster-summary-performance.scss\"],\n   providers: [ReferenceWatcher],\n})\nexport class ClusterSummaryPerformanceComponent implements OnInit {\n   loading: boolean;\n   perfServiceEnabled: boolean;\n   perfServiceHealthy: boolean;\n   isTopContributorsSupported: boolean;\n   hasChartData: boolean;\n   performanceUnavailableLabel: string;\n   tooltipActionLink: string;\n   flatData: FlatGraphMetric[] = [];\n\n   @Output()\n   getPerformanceDataFailed: EventEmitter<string> = new EventEmitter<string>();\n\n   constructor(private navigationService: NavigationService,\n         private summaryService: VsanClusterSummaryService,\n         private refWatcher: ReferenceWatcher) {\n      this.refWatcher.watchGlobalRefreshSubscription(ClusterSummaryPerformanceComponent.prototype.constructor.name);\n   }\n\n   ngOnInit(): void {\n      this.fetch();\n   }\n\n   @RefreshHandler\n   fetch(): void {\n      this.loading = true;\n      this.summaryService.getSummaryPerformanceData(ManagedObject.contextObject)\n            .then((result: SummaryPerformanceData) => {\n               this.loading = false;\n               this.perfServiceEnabled = result.isPerfEnabled;\n               this.perfServiceHealthy = result.isPerfServiceHealthy;\n               this.isTopContributorsSupported = result.isTopContributorsSupported;\n\n               this.setPerformanceUnavailableLabel();\n               this.tooltipActionLink = this.isTopContributorsSupported ?\n                     VsanUiUtils.getString(\"vsan.monitor.cluster.performance.topContributors.tooltip.action.link\") : null;\n\n               if (this.perfServiceEnabled) {\n                  this.handleChartsData(result);\n               }\n            }).catch(this.handleError);\n   }\n\n   setPerformanceUnavailableLabel(): void {\n      if (!this.perfServiceEnabled) {\n         this.performanceUnavailableLabel = VsanUiUtils.getString(\"vsan.cluster.performance.summary.disabled.label\");\n      } else if (!this.perfServiceHealthy) {\n         this.performanceUnavailableLabel = VsanUiUtils.getString(\"vsan.monitor.cluster.performance.unhealthy.description\");\n      }\n   }\n\n   private handleChartsData(perfData: SummaryPerformanceData): void {\n      this.hasChartData = !!perfData.chartsData;\n      // There was no chart data when the performance service was just enabled.\n      if (!this.hasChartData) {\n         return;\n      }\n\n      let graphs: PerfGraph[] = [];\n      if (perfData && perfData.clusterDomClientEntity && perfData.clusterDomClientEntity.graphs) {\n         graphs = perfData.clusterDomClientEntity.graphs\n               .filter(graph => Object.values(PefGraphId).includes(graph.id))\n               .map(graph => PerfChartUtil.getGraphDefinition(graph));\n      }\n\n      this.flatData = [];\n      const graphsData: GraphMetric[] = [new GraphMetric(perfData.chartsData, graphs)];\n      graphsData.forEach((entry: GraphMetric) => {\n         entry.graphs.forEach(graph => {\n            this.flatData.push(new FlatGraphMetric(entry.entityRefId, entry.metrics, graph));\n         });\n      });\n   }\n\n   private handleError = (error: string) => {\n      this.loading = false;\n      this.getPerformanceDataFailed.emit(error);\n   };\n\n   onDetailsClick = () => {\n      if (!this.perfServiceEnabled || !this.perfServiceHealthy) {\n         this.navigationService.navigateTo(PlatformExtension.CLUSTER_SERVICES);\n      } else {\n         this.navigationService.navigateTo(PlatformExtension.CLUSTER_PERFORMANCE);\n      }\n   };\n\n   tooltipActionLinkClicked = (data: ChartPlotLineSelectionData) => {\n      const now: number = VsanDateTimeUtils.roundToMinuteStart(new Date().getTime());\n      // sets the start time 2 hours ago, because the perf. data is the chart is for the last two hours too\n      const startTime: number = now - VsanDateTimeUtils.HOUR_IN_MILLISECONDS * SummaryPerformanceData.LAST_TWO_HOURS();\n      const timePickerRange: PerfTimeRangeData = PerfTimeRangeData.Factory.create(\n            \"\", startTime, now, null);\n      const props: TopContributorsContext = {\n         selectedTimePoint: data.timePoint,\n         selectedGraphId: data.graphId,\n         timePickerRange: timePickerRange,\n      };\n\n      this.navigationService.navigateTo(PlatformExtension.CLUSTER_PERFORMANCE, null, props);\n   };\n}","/* Copyright 2017-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, OnInit} from \"@angular/core\";\nimport {RefreshHandler} from \"@service/global-refresh.service\";\nimport {ClusterPowerService} from \"@generated/cluster-power-service\";\nimport {ManagedObject} from \"@service/managed-object\";\nimport {ClusterPowerStateUtils} from \"@util/cluster-power-state-utils\";\nimport {ClusterPowerState} from \"@generated/cluster-power-state\";\nimport {UnavailableViewSpec} from \"@component/unavailable-view/unavailable-view-spec\";\nimport {PermissionService} from \"@generated/permission-service\";\nimport {Privileges} from \"@generated/privileges\";\nimport {Loader} from \"@service/flow/loader.decorator\";\nimport {ErrorHandler} from \"@service/flow/error-handler.decorator\";\n\n@Component({\n   templateUrl: \"summary-portlet.html\",\n   selector: \"vsan-cluster-summary\",\n   styleUrls: [\"summary-portlet.scss\"],\n})\nexport class ClusterSummaryPortletComponent implements OnInit {\n\n   clusterRef: ManagedObject;\n   hasEditClusterPermission: boolean = false;\n\n   alertMessages: string[] = [];\n\n   /**\n    * It's only used for the initial loading because the children components do the global refresh handling internally.\n    */\n   isInitiallyLoaded: boolean = false;\n\n   isClusterPoweredOff: boolean;\n   unavailableViewSpec: UnavailableViewSpec = UnavailableViewSpec.SERVICES_VIEW_CLUSTER_SHUT_DOWN;\n\n   constructor(private clusterPowerService: ClusterPowerService, private permissionService: PermissionService) {}\n\n   async ngOnInit(): Promise<void> {\n      this.clusterRef = ManagedObject.contextObject;\n      await Promise.all([\n            this.checkForEditClusterPermission(),\n            this.fetch(),\n      ]);\n      this.isInitiallyLoaded = true;\n   }\n\n   @RefreshHandler\n   async fetch(): Promise<void> {\n      this.alertMessages = [];\n      this.isClusterPoweredOff = ClusterPowerStateUtils.isClusterPoweredOff(await this.queryClusterPowerState());\n   }\n\n   async checkForEditClusterPermission(): Promise<void> {\n      this.hasEditClusterPermission = await this.permissionService.hasPermissions(\n            this.clusterRef, [Privileges.EDIT_CLUSTER()]);\n   }\n\n   /**\n    * Decorate only the API call, to have both the error handling and to be sure that we will update the\n    * cluster power state no matter what the result is gonna be.\n    */\n   @Loader()\n   async queryClusterPowerState(): Promise<ClusterPowerState> {\n      return this.clusterPowerService.getPowerState(this.clusterRef);\n   }\n\n   /**\n    * Collect errors from this and the children components\n    */\n   @ErrorHandler()\n   handleDataFailed(error: string): void {\n      this.alertMessages.push(error);\n   }\n}\n","<!-- Copyright 2021-2022 VMware, Inc. All rights reserved. VMware Confidential -->\n<span class=\"busy-backdrop\" *ngIf=\"!isInitiallyLoaded\">\n   <span class=\"spinner spinner-lg central-spinner\"></span>\n</span>\n<ng-container *ngIf=\"isInitiallyLoaded && !isClusterPoweredOff\" >\n   <vsan-validation *ngIf=\"alertMessages?.length\" [(alerts)]=\"alertMessages\"></vsan-validation>\n   <div class=\"card\">\n      <div class=\"card-block\">\n         <vsan-capacity-summary (getCapacityDataFailed)=\"handleDataFailed($event)\"></vsan-capacity-summary>\n      </div>\n      <div class=\"card-block\">\n         <vsan-cluster-summary-health (getHealthDataFailed)=\"handleDataFailed($event)\"></vsan-cluster-summary-health>\n      </div>\n      <div class=\"card-block\">\n         <vsan-cluster-summary-performance (getPerformanceDataFailed)=\"handleDataFailed($event)\"></vsan-cluster-summary-performance>\n      </div>\n   </div>\n</ng-container>\n<vsan-unavailable-view *ngIf=\"isInitiallyLoaded && isClusterPoweredOff\"\n                       [clusterRef]=\"clusterRef\"\n                       [unavailableViewSpec]=\"unavailableViewSpec\"\n                       [hasEditPrivilege]=\"hasEditClusterPermission\">\n</vsan-unavailable-view>\n\n","/* Copyright 2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {\n   AfterViewInit,\n   ComponentFactoryResolver,\n   Directive,\n   ElementRef,\n   Host,\n   Input,\n   Optional,\n   Renderer2,\n   Self,\n} from \"@angular/core\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {NavigationService} from \"@navigation/navigation.service\";\nimport {ClrButtonBaseDirective} from \"@directive/clr-button-group/clr-button-base.directive\";\nimport {ClrButton} from \"@clr/angular\";\n\n/**\n * Decorates a button or an anchor as external link. Requires one of the optional parameters articleId, helpId or url.\n *\n * @param external-link: Optional. Localization key of the text label of the external link. If omitted default label\n * will be used - \"Learn more\" for anchors or \"Ask VMWare\" for buttons.\n * @param articleId - Optional. Id of article in knowledge base.\n * @param helpId - Optional. Help id which will redirect to Knowledge Base.\n * @param url - Optional. External URL.\n */\n@Directive({\n   selector: \"a[external-link], button[external-link], clr-button[external-link]\",\n})\nexport class ExternalLinkDirective extends ClrButtonBaseDirective implements AfterViewInit {\n   private readonly ASK_VMWARE_DEFAULT_TEXT_KEY: string = \"vsan.common.askVMware\";\n   private readonly LEARN_MORE_DEFAULT_TEXT_KEY: string = \"vsan.common.learnMore\";\n\n   private readonly CONTAINER_CLASS: string = \"icon-name-container\";\n   private readonly NAVIGATION_EVENT_TYPE: string = \"click\";\n   private readonly LEAD_TO_NOWHERE_URL: string = \"javascript://\";\n   private readonly HTML_ELEMENT_SPAN_NAME: string = \"span\";\n   private readonly HTML_ELEMENT_ICON_NAME: string = \"clr-icon\";\n   private readonly HTML_ELEMENT_ROLE_ATTR_NAME: string = \"role\";\n   private readonly HTML_ELEMENT_ROLE_ATTR_VALUE: string = \"link\";\n   private readonly ICON_SHAPE_ATTR_NAME: string = \"shape\";\n   private readonly ICON_SHAPE_ATTR_VALUE: string = \"pop-out\";\n   private readonly ICON_SIZE_ATTR_NAME: string = \"size\";\n   private readonly ICON_SIZE_ATTR_VALUE: string = \"16\";\n   private readonly ICON_CLASS_ATTR_NAME: string = \"class\";\n   private readonly ICON_CLASS_ATTR_VALUE: string = \"link\";\n   private readonly ICON_TITLE_ATTR_NAME: string = \"title\";\n\n   private readonly KB_URL: string = \"http://kb.vmware.com/kb/\";\n\n   @Input(\"external-link\")\n   anchorText: string;\n\n   @Input()\n   articleId: string;\n\n   @Input()\n   helpId: string;\n\n   @Input()\n   url: string;\n\n   constructor(private el: ElementRef<HTMLElement>,\n         private resolver: ComponentFactoryResolver,\n         private renderer: Renderer2,\n         private navigationService: NavigationService,\n         // this variable will be initialized only if the host is clr-button\n         @Host() @Self() @Optional() clrButton: ClrButton) {\n      super(clrButton);\n   }\n\n   ngAfterViewInit(): void {\n      const element: HTMLElement = this.el.nativeElement;\n      // continue only if element is HTML link or button\n      if (!this.isLink(element) && !this.isButton(element)) {\n         // element is clr-button, wait until html button for it is resolved - handled by resloveButton\n         return;\n      }\n      this.prepareExternalLink(element);\n   }\n\n   resolveButton(clrButton: ClrButton, button: HTMLButtonElement, index: number): void {\n      // only if element is clr-button. At this point the html button is already resolved. Apply on it.\n      this.prepareExternalLink(button);\n   }\n\n   private prepareExternalLink(element: HTMLElement): void {\n      this.renderer.addClass(element, this.CONTAINER_CLASS);\n\n      this.setText(element);\n      if (this.isLink(element)) {\n         this.decorateLink(element);\n      } else {\n         this.addLinkRole(element);\n      }\n\n      this.initializeNavigationHandler(element);\n   }\n\n   private isButton(element: HTMLElement): boolean {\n      return element instanceof HTMLButtonElement;\n   }\n\n   private isLink(element: HTMLElement): boolean {\n      return element instanceof HTMLAnchorElement;\n   }\n\n   private setText(element: HTMLElement): void {\n      const span: HTMLSpanElement = this.renderer.createElement(this.HTML_ELEMENT_SPAN_NAME);\n      span.innerText = this.getText(element);\n      this.renderer.appendChild(element, span);\n\n      const icon: HTMLSpanElement = this.renderer.createElement(this.HTML_ELEMENT_ICON_NAME);\n      icon.setAttribute(this.ICON_SHAPE_ATTR_NAME, this.ICON_SHAPE_ATTR_VALUE);\n      icon.setAttribute(this.ICON_SIZE_ATTR_NAME, this.ICON_SIZE_ATTR_VALUE);\n      icon.setAttribute(this.ICON_CLASS_ATTR_NAME, this.ICON_CLASS_ATTR_VALUE);\n      // Set title of the icon for screen readers clarity\n      icon.setAttribute(this.ICON_TITLE_ATTR_NAME, VsanUiUtils.getString(\"vsan.screenReader.label.externalLink.icon\"));\n      this.renderer.appendChild(element, icon);\n   }\n\n   private getText(element: HTMLElement): string {\n      if (this.anchorText) {\n         return this.anchorText;\n      }\n      const key: string = this.isButton(element) ? this.ASK_VMWARE_DEFAULT_TEXT_KEY : this.LEARN_MORE_DEFAULT_TEXT_KEY;\n      return VsanUiUtils.getString(key);\n   }\n\n   private decorateLink(element: HTMLElement): void {\n      const linkElement: HTMLLinkElement = element as HTMLLinkElement;\n      // don't use href attribute. If omitted, the link will be not visualized properly.\n      linkElement.href = this.LEAD_TO_NOWHERE_URL;\n      // display link on same line\n      linkElement.style.display = \"inline-flex\";\n   }\n\n   private initializeNavigationHandler(element: HTMLElement): void {\n      element.addEventListener(this.NAVIGATION_EVENT_TYPE, () => {\n         if (this.helpId) {\n            this.navigationService.askVMware(this.helpId);\n            return;\n         }\n         if (this.articleId) {\n            this.navigationService.navigateToAddress(`${this.KB_URL}${this.articleId}`);\n            return;\n         }\n         if (this.url) {\n            this.navigationService.navigateToAddress(this.url);\n         }\n      });\n   }\n\n   // Indicate external navigation by assigning \"link\" role\n   private addLinkRole(element: HTMLElement): void {\n      this.renderer.setAttribute(element, this.HTML_ELEMENT_ROLE_ATTR_NAME, this.HTML_ELEMENT_ROLE_ATTR_VALUE);\n   }\n}","<div class=\"clr-row\">\n   <label id=\"performance-summary-title\" class=\"clr-col-3 clr-control-label\">\n      {{\"vsan.cluster.performance.summary.title.label\" | localized}}\n   </label>\n   <div class=\"clr-col-7\">\n      <ng-container *ngIf=\"loading\">\n         <span class=\"spinner spinner-inline\"></span>\n         <span>{{\"vsan.loading\" | localized}}</span>\n      </ng-container>\n      <ng-container *ngIf=\"!loading && (!perfServiceEnabled || !perfServiceHealthy)\">\n         {{performanceUnavailableLabel}}\n      </ng-container>\n   </div>\n   <a id=\"performance-summary-details\"\n      class=\"clr-col-2 details\"\n      href=\"javascript://\"\n      (click)=\"onDetailsClick()\">\n      {{\"vsan.cluster.summary.portlet.details.label\" | localized}}\n   </a>\n</div>\n\n<ng-container *ngIf=\"!loading && perfServiceHealthy\">\n   <ng-container *ngIf=\"hasChartData\">\n      {{\"vsan.cluster.performance.summary.enabled.label\" | localized}}\n   </ng-container>\n   <ng-container *ngIf=\"!hasChartData\">\n      {{\"vsan.cluster.performance.summary.noChartData.label\" | localized}}\n   </ng-container>\n   <!-- Perf charts(IOPS/Throughout/Latency) -->\n   <div *ngFor=\"let entry of flatData; let i = index\">\n      <vsan-perf-chart [graph]=\"entry.graph\"\n                       [metrics]=\"entry.metrics\"\n                       [entityRefId]=\"entry.entityRefId\"\n                       [isZoomAllowed]=\"false\"\n                       [showExpandButton]=\"false\"\n                       [index]=\"i\"\n                       [tooltipPopUpPosition]=\"'bottom-middle'\"\n                       (onTooltipActionClicked)=\"tooltipActionLinkClicked($event)\"\n                       [actionLink]=\"tooltipActionLink\">\n      </vsan-perf-chart>\n   </div>\n</ng-container>\n"]}