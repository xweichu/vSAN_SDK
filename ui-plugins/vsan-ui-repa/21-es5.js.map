{"version":3,"sources":["webpack:///src/app/vsan/common/component/chart/capacity-bar-chart/capacity-bar-chart.component.ts","webpack:///src/app/vsan/common/component/chart/capacity-bar-chart/capacity-bar-chart.html"],"names":["CapacityBarChartComponent","highchartsService","barChartService","highchartsThemeService","refWatcher","capacityService","cdRef","Icon","showFree","roundedBar","enableKeyboardNavigation","hoverBarChart","showAlertThresholds","getFreeSectionChartData","totalSectionsSize","getTotalSectionsSize","sections","getString","getFreeSectionValue","total","getFreeCapacityColor","watchSubscriptionRef","whenThemeChanged","subscribe","theme","onThemeChanged","render","placeThresholdIcons","changes","updateChartSettings","populateData","updatePlotLines","roundChartCorners","update","isSharedTooltip","highchartOptions","getBarChartOptions","mouseOutEvent","event","emit","chart","series","target","index","borderWidth","type","undefined","mouseOverEvent","borderColor","getBarChartBorder","color","chartHeight","height","barWidth","plotOptions","bar","pointWidth","tooltip","shared","tooltipOptions","deepmergeObjects","updateSectionsColors","chartSections","populateHighchartSeries","addAccessibilityDescription","colorPalette","getColorPalette","warningThresholdValue","errorThresholdValue","forEach","sectionData","customSectionColor","getSectionColor","sectionsAndFree","getSideSections","LEFT","push","RIGHT","filter","section","sectionValueInBytes","getBarchartSeriesData","text","getAccessibilityText","lang","getAccessibilityLangConfig","accessibility","getAccessibilityConfig","getCapacityAccessibilitySeriesDescription","getSeriesAccessibilityConfig","descriptionFormatter","getSectionAccessibilityText","userOptions","name","data","direction","appendDirection","isEmpty","plotLines","updatePlotLineThemeColors","yAxis","map","plotLine","getPlotLine","id","label","value","chartElement","renderTo","nativeElement","watchChartRef","seriesCount","length","borderRadiusBottomLeft","BORDER_RADIUS","borderRadiusBottomRight","borderRadiusTopLeft","borderRadiusTopRight","seriesData","toSeries","warningThreshold","basedOnTotalSpace","errorThreshold","percentage","warningThresholdIcon","errorThresholdIcon","setTimeout","positionTooltipIcon","detectChanges","elRef","thresholdValue","iconWidth","offsetWidth","iconHeight","offsetHeight","thresholdsChartContainer","style","marginTop","placement","chartWidth","plotLineWidth","left","top","basedOnTotalSpaceWithoutReservation"],"mappings":"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","file":"21-es5.js","sourcesContent":["/* Copyright 2018-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {\n   AfterViewInit,\n   ChangeDetectorRef,\n   Component,\n   ElementRef,\n   EventEmitter,\n   Input,\n   OnChanges,\n   Output,\n   SimpleChanges,\n   ViewChild,\n} from \"@angular/core\";\nimport {HighchartsPropertiesService} from \"../highcharts-properties.service\";\nimport {ChartSectionData, ChartSectionDirection, ChartSectionPlotLine} from \"../model/chart-section.data\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {BarChartService} from \"./bar-chart.service\";\nimport {HighchartsThemeService} from \"../highcharts-theme.service\";\nimport * as Highcharts from \"highcharts\";\nimport {ReferenceWatcher} from \"@util/reference-watcher\";\nimport {TooltipOptions} from \"highcharts/highcharts.src\";\nimport {VsanCapacityService} from \"@component/capacity/capacity.service\";\nimport {Icon} from \"@util/icon\";\nimport {CapacityAlertThreshold} from \"@component/chart/model/capacity-alert-threshold.model\";\n\n/**\n * Displays a capacity bar chart based on highcharts stacked bar chart.\n * - Show up to 4 sections in a given color palette.\n * - Show a tooltip for each ChartSectionData as well as the free section.\n * Free space is also calculated and added lastly in the list\n * - Determine chart color palette based on the total used capacity (all passed sections to display)\n * and a given threshold value the following way:\n *  -- Blue palette if there is no threshold value passed\n *  -- Green if the capacity is bellow the warning threshold value\n *  -- Yellow if the capacity is between warning and error threshold value\n *  -- Red if the capacity is over the error threshold value\n */\n@Component({\n   selector: \"vsan-capacity-bar-chart\",\n   templateUrl: \"capacity-bar-chart.html\",\n   styleUrls: [\"capacity-bar-chart.scss\"],\n   providers: [ReferenceWatcher],\n})\nexport class CapacityBarChartComponent implements OnChanges, AfterViewInit {\n   Icon: typeof Icon = Icon;\n\n   /**\n    * Sections to be displayed in the bar chart\n    */\n   @Input()\n   sections: ChartSectionData[];\n\n   /**\n    * Specifies any markers(a.k.a. plot lines) to be added to the bar chart.\n    * Their height is determined by the chartHeight option as they stretch as high as the chart.\n    */\n   @Input()\n   plotLines: ChartSectionPlotLine[];\n\n   /**\n    * Total size of the bar\n    */\n   @Input()\n   total: number;\n\n   /**\n    * Weather to have a free section as part of the bar chart, calculated based on the total.\n    */\n   @Input()\n   showFree: boolean = true;\n\n   /**\n    * Whether to round the bar chart's edges. Defaults to true.\n    */\n   @Input()\n   roundedBar: boolean = true;\n\n   /**\n    * Warning threshold value\n    */\n   @Input()\n   warningThreshold: CapacityAlertThreshold | number;\n\n   /**\n    * Error threshold value\n    */\n   @Input()\n   errorThreshold: CapacityAlertThreshold | number;\n\n   /**\n    * Whether to use shared tooltip for the entire chart.\n    */\n   @Input()\n   isSharedTooltip: boolean;\n\n   /**\n    * Tooltip settings for advanced styling options.\n    */\n   @Input()\n   tooltipOptions: TooltipOptions;\n\n   /**\n    * The height of the chart area in pixels. Default value is 45px.\n    * This can be increased if we want the bar chart to be displayed in a larger area for example.\n    */\n   @Input()\n   chartHeight: number;\n\n   /**\n    * The width of the bar in pixels. Applied to the pointWidth property of the chart.\n    * If increasing this, also consider increasing the chartHeight in case the tooltips get cropped.\n    */\n   @Input()\n   barWidth: number;\n\n   /**\n    * When it's enabled and the user use the keyboard to navigate to the capacity chart\n    * then Highcharts will display the tooltip and will allow user to use prev/next\n    * buttons to navigate between the sections.\n    */\n   @Input()\n   enableKeyboardNavigation: boolean = false;\n\n   /**\n    * Emit hovered series when mouse over, or null when mouse out.\n    */\n   @Output()\n   hoverBarChart: EventEmitter<any> = new EventEmitter<any>();\n\n   @Input()\n   showAlertThresholds: boolean = false;\n\n   @ViewChild(\"chart\")\n   chartElement: ElementRef;\n   chart: Highcharts.Chart;\n\n   @ViewChild(\"warningThresholdIcon\")\n   warningThresholdIcon: ElementRef;\n\n   @ViewChild(\"errorThresholdIcon\")\n   errorThresholdIcon: ElementRef;\n\n   @ViewChild(\"thresholdsChartContainer\")\n   thresholdsChartContainer: ElementRef;\n\n   private highchartOptions: any;\n   private static BORDER_RADIUS: string = \"20%\";\n\n   constructor(private highchartsService: HighchartsPropertiesService,\n         private barChartService: BarChartService,\n         private highchartsThemeService: HighchartsThemeService,\n         private refWatcher: ReferenceWatcher,\n         private capacityService: VsanCapacityService,\n         private cdRef: ChangeDetectorRef) {\n      this.refWatcher.watchSubscriptionRef(\n            this.highchartsThemeService.whenThemeChanged.subscribe(theme => this.onThemeChanged()));\n   }\n\n   ngAfterViewInit(): void {\n      this.render();\n      this.placeThresholdIcons();\n   }\n\n   ngOnChanges(changes: SimpleChanges): void {\n      this.updateChartSettings();\n      this.populateData();\n      this.updatePlotLines();\n      this.roundChartCorners();\n      this.render();\n      this.placeThresholdIcons();\n   }\n\n   private onThemeChanged(): void {\n      this.updateChartSettings();\n      this.update();\n   }\n\n   private updateChartSettings(): void {\n      if (this.isSharedTooltip) {\n         // Do not add mouse hover effects when using shared tooltip for the chart.\n         this.highchartOptions = this.highchartsService.getBarChartOptions();\n      } else {\n         const mouseOutEvent: Highcharts.SeriesMouseOutCallbackFunction = (event: any) => {\n            this.hoverBarChart.emit(null);\n            // Remove series border after mouse out.\n            this.chart.series[event.target.index].update({\n               borderWidth: 0,\n               type: undefined,\n            }, true);\n         };\n         const mouseOverEvent: Highcharts.SeriesMouseOverCallbackFunction = (event: any) => {\n            this.hoverBarChart.emit(event.target);\n\n            const borderColor: string = this.barChartService.getBarChartBorder(event.target.color);\n            // Display border when mouse over to help low vision user to distinguish the hovered series.\n            this.chart.series[event.target.index].update({\n               borderWidth: 1,\n               borderColor: borderColor,\n               type: undefined,\n            }, true);\n         };\n         // Combine the bar-chart options with the mouse hover events.\n         this.highchartOptions = this.highchartsService.getBarChartOptions(mouseOverEvent, mouseOutEvent);\n      }\n\n      if (this.chartHeight) {\n         this.highchartOptions.chart.height = this.chartHeight;\n      }\n      if (this.barWidth) {\n         this.highchartOptions.plotOptions.bar.pointWidth = this.barWidth;\n      }\n\n      this.highchartOptions.tooltip.shared = this.isSharedTooltip;\n      if (this.tooltipOptions) {\n         this.highchartOptions.tooltip = VsanUiUtils.deepmergeObjects(this.highchartOptions.tooltip,\n               this.tooltipOptions);\n      }\n   }\n\n   private populateData(): void {\n      if (!this.sections) {\n         // The sections are not always available on init. They will get set eventually.\n         return;\n      }\n      this.updateSectionsColors();\n\n      const sections: ChartSectionData[] = this.chartSections;\n      this.populateHighchartSeries(sections);\n      this.addAccessibilityDescription(sections);\n   }\n\n   private updateSectionsColors(): void {\n      // calculate total sections value\n      const totalSectionsSize: number = this.barChartService.getTotalSectionsSize(this.sections, true);\n      // assign colorPalette based on totalSectionsSize and threshold proportion\n      const colorPalette: string[] = this.barChartService.getColorPalette(\n            totalSectionsSize, this.total, this.warningThresholdValue, this.errorThresholdValue);\n\n      this.sections.forEach((sectionData: ChartSectionData, index: number) => {\n         // If the color is not specified, update it based on current color palette\n         if (!sectionData.customSectionColor) {\n            sectionData.customSectionColor = this.barChartService.getSectionColor(colorPalette, index);\n         }\n      });\n   }\n\n   private get chartSections(): ChartSectionData[] {\n      if (!this.highchartOptions) {\n         return[];\n      }\n\n      const sectionsAndFree: ChartSectionData[] = this.getSideSections(ChartSectionDirection.LEFT);\n      // Append the free space as a separate section to display it in the bar chart\n      if (this.showFree) {\n         sectionsAndFree.push(this.getFreeSectionChartData());\n      }\n      sectionsAndFree.push(...this.getSideSections(ChartSectionDirection.RIGHT));\n\n      // Remove zero valued series as they are not displayed and we don't need to apply the rounding to them.\n      return sectionsAndFree.filter((section: ChartSectionData) => section.sectionValueInBytes > 0);\n   }\n\n   private populateHighchartSeries(sections: ChartSectionData[]): void {\n      if (!this.highchartOptions) {\n         return;\n      }\n      this.highchartOptions.series = this.getBarchartSeriesData(sections);\n   }\n\n   private addAccessibilityDescription(sections: ChartSectionData[]): void {\n      if (!this.highchartOptions) {\n         return;\n      }\n\n      let text: string = \"\";\n      if (this.enableKeyboardNavigation) {\n         text = this.capacityService.getAccessibilityText(sections);\n      } else {\n         // If the chart is not interactive (keyboard navigation is not allowed),\n         // Override default announcement to exclude the word \"Interactive\".\n         this.highchartOptions.lang = this.highchartsService.getAccessibilityLangConfig();\n      }\n\n      // General accessibility settings\n      this.highchartOptions.accessibility =\n            this.highchartsService.getAccessibilityConfig(this.enableKeyboardNavigation, text);\n      // Capacity series specific description format\n      this.highchartOptions.accessibility.series = this.getCapacityAccessibilitySeriesDescription();\n      // Expose only the series element to screen readers, not its points.\n      this.highchartOptions.plotOptions.series.accessibility = this.highchartsService.getSeriesAccessibilityConfig();\n   }\n\n   private getCapacityAccessibilitySeriesDescription(): any {\n      return {\n         descriptionFormatter: (series: any) => this.capacityService.getSectionAccessibilityText(\n               series.userOptions.name, series.userOptions.data[0], this.total),\n      };\n   }\n\n   /**\n    * Gets the chart section data that should be added to a specified side of the bar-chart,\n    * e.g. left or right.\n    */\n   private getSideSections(direction: ChartSectionDirection): ChartSectionData[] {\n      return this.sections.filter(\n            section => section.appendDirection === direction);\n   }\n\n   // calculate and assign free section percentage, color and tooltip label\n   private getFreeSectionChartData = (): ChartSectionData => {\n      const totalSectionsSize: number = this.barChartService.getTotalSectionsSize(this.sections);\n      return new ChartSectionData(VsanUiUtils.getString(\"vsan.monitor.capacity.free\"),\n            this.barChartService.getFreeSectionValue(this.total, totalSectionsSize),\n            \"freeSpace\",\n            true,\n            this.barChartService.getFreeCapacityColor());\n   };\n\n   private updatePlotLines(): void {\n      if (VsanUiUtils.isEmpty(this.plotLines)) {\n         return;\n      }\n      this.barChartService.updatePlotLineThemeColors(this.plotLines);\n      this.highchartOptions.yAxis.plotLines = this.plotLines.map(plotLine => {\n         return this.highchartsService.getPlotLine(plotLine.id, plotLine.label, plotLine.value, plotLine.color);\n      });\n   }\n\n   private update(): void {\n      if (this.chart) {\n         this.chart.update(this.highchartOptions);\n      }\n   }\n\n   private render(): void {\n      if (this.chartElement) {\n         this.highchartOptions.chart.renderTo = this.chartElement.nativeElement;\n         this.chart = Highcharts.chart(this.highchartOptions);\n         this.refWatcher.watchChartRef(this.chart);\n      }\n   }\n\n   private roundChartCorners(): void {\n      const seriesCount: number = this.highchartOptions.series.length;\n      if (this.roundedBar && seriesCount > 0) {\n         // Update the first and last elements to have rounded borders if roundedBar flag is set to true\n         this.highchartOptions.series[0].borderRadiusBottomLeft = CapacityBarChartComponent.BORDER_RADIUS;\n         this.highchartOptions.series[0].borderRadiusBottomRight = CapacityBarChartComponent.BORDER_RADIUS;\n         this.highchartOptions.series[seriesCount - 1].borderRadiusTopLeft = CapacityBarChartComponent.BORDER_RADIUS;\n         this.highchartOptions.series[seriesCount - 1].borderRadiusTopRight = CapacityBarChartComponent.BORDER_RADIUS;\n      }\n   }\n\n   private getBarchartSeriesData(seriesData: ChartSectionData[]): any[] {\n      if (!seriesData) {\n         return [];\n      }\n      return seriesData.map((sectionData: ChartSectionData) => sectionData.toSeries());\n   }\n\n   get warningThresholdValue(): number {\n      return (this.warningThreshold instanceof CapacityAlertThreshold)\n            ? this.warningThreshold.basedOnTotalSpace\n            : this.warningThreshold;\n   }\n\n   get errorThresholdValue(): number {\n      return (this.errorThreshold instanceof CapacityAlertThreshold)\n            ? this.errorThreshold.basedOnTotalSpace\n            : this.errorThreshold;\n   }\n\n   getThresholdTooltipPosition(percentage: number): string {\n      return percentage >= 60 ? \"tooltip-top-left\" : \"tooltip-top-right\";\n   }\n\n   private placeThresholdIcons(): void {\n      if (!this.showAlertThresholds || !this.warningThreshold || !this.errorThreshold ||\n          !this.chart || !this.warningThresholdIcon || !this.errorThresholdIcon) {\n         return;\n      }\n\n      setTimeout(() => {\n          if (this.warningThreshold instanceof CapacityAlertThreshold &&\n              this.errorThreshold instanceof CapacityAlertThreshold) {\n              this.positionTooltipIcon(0, this.warningThresholdIcon, this.warningThresholdValue);\n              this.positionTooltipIcon(1, this.errorThresholdIcon, this.errorThresholdValue);\n              this.cdRef.detectChanges();\n          }\n      }, 0);\n   }\n\n   private positionTooltipIcon(index: number, elRef: ElementRef, thresholdValue: number): void {\n       const iconWidth: number = elRef.nativeElement.offsetWidth;\n       const iconHeight: number = elRef.nativeElement.offsetHeight;\n       this.thresholdsChartContainer.nativeElement.style.marginTop = `${iconHeight}px`;\n       let placement: number = ((this.chart.chartWidth / 100) * thresholdValue) - iconWidth / 2;\n       if (this.plotLines && this.plotLines.length) {\n          const plotLineWidth: number = 2;\n          placement -= plotLineWidth / 2 + index * plotLineWidth;\n       }\n\n       elRef.nativeElement.style.left = `${placement}px`;\n       elRef.nativeElement.style.top = `${-iconHeight}px`;\n   }\n\n   getWarningThresholdLabel(): string {\n      return VsanUiUtils.getString(\"vsan.services.enforcereservation.warningThreshold.label\",\n            (this.warningThreshold as CapacityAlertThreshold).basedOnTotalSpaceWithoutReservation);\n   }\n\n   getErrorThresholdLabel(): string {\n      return VsanUiUtils.getString(\"vsan.services.enforcereservation.errorThreshold.label\",\n            (this.errorThreshold as CapacityAlertThreshold).basedOnTotalSpaceWithoutReservation);\n   }\n}\n","<!--Copyright 2018-2020 VMware, Inc. All rights reserved. -- VMware Confidential-->\n<div class=\"chart-container\">\n   <div #thresholdsChartContainer class=\"thresholds-chart-container\" *ngIf=\"showAlertThresholds; else barChart\">\n      <!-- <a> instead of <clr-signpost> is needed\n           in order to set css styles dynamically in the component\n           if clr-tooltip is used then nativeElement.style is undefined-->\n      <a #warningThresholdIcon\n         role=\"tooltip\"\n         tabindex=\"0\"\n         aria-haspopup=\"true\"\n         class=\"tooltip\"\n         [ngClass]=\"getThresholdTooltipPosition(warningThresholdValue)\">\n         <clr-icon aria-hidden=\"true\"\n                   class=\"is-solid is-warning\"\n                   [attr.shape]=\"Icon.CLR_WARN_STANDARD_ICON_SHAPE\"></clr-icon>\n         <span class=\"tooltip-content\">\n            {{getWarningThresholdLabel()}}\n         </span>\n      </a>\n      <a #errorThresholdIcon\n         tabindex=\"0\"\n         role=\"tooltip\"\n         aria-haspopup=\"true\"\n         class=\"tooltip tooltip-md\"\n         [ngClass]=\"getThresholdTooltipPosition(errorThresholdValue)\">\n         <clr-icon aria-hidden=\"true\"\n                   class=\"is-solid is-error\"\n                   [attr.shape]=\"Icon.CLR_ERROR_STANDARD_ICON_SHAPE\"></clr-icon>\n         <span class=\"tooltip-content\">\n            {{getErrorThresholdLabel()}}\n         </span>\n      </a>\n      <ng-container *ngTemplateOutlet=\"barChart\"></ng-container>\n   </div>\n</div>\n\n<ng-template #barChart>\n   <div #chart [attr.tabindex]=\"enableKeyboardNavigation ? 0 : -1\" class=\"chart\"></div>\n</ng-template>\n"]}