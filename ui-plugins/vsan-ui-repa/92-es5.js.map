{"version":3,"sources":["webpack:///src/app/vsan/common/component/proxy-settings/proxy-settings.module.ts","webpack:///src/app/vsan/common/component/proxy-settings/proxy-inputs.html","webpack:///src/app/vsan/common/component/proxy-settings/proxy-inputs.component.ts"],"names":["ProxySettingsModule","ProxyInputsComponent","formBuilder","refWatcher","ENABLE_PROXY_CONTROL_NAME","HOSTNAME_CONTROL_NAME","PORT_CONTROL_NAME","USERNAME_CONTROL_NAME","PASSWORD_CONTROL_NAME","HOSTNAME_EMPTY_VALIDATION","HOSTNAME_VALIDATION","PORT_VALIDATION","PROXY_SETTING_VALIDATION","onChange","val","onChangeCallback","onTouchedCallback","hostnameValidator","control","disableProxySetting","getHostname","value","match","EMPTY_SPACE_PATTERN","portValidator","isInvalidPort","getPort","PORT_MIN_VALUE","PORT_MAX_VALUE","proxyForm","group","watchSubscriptionRef","valueChanges","subscribe","controlValue","password","originalProxy","ProxySetting","setValue","emitEvent","fn","ctrl","dirty","touched","invalid","enableInternet","getEnableProxy","get","getValue","enableProxy","hostname","port","username"],"mappings":"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","file":"92-es5.js","sourcesContent":["/* Copyright 2019 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {NgModule} from \"@angular/core\";\nimport {CommonModule} from \"@angular/common\";\nimport {FormsModule, ReactiveFormsModule} from \"@angular/forms\";\nimport {ClarityModule} from \"@clr/angular\";\nimport {CommonPipeModule} from \"@pipe/common-pipe.module\";\nimport {ProxyInputsComponent} from \"@component/proxy-settings/proxy-inputs.component\";\nimport {CommonDirectiveModule} from \"@directive/common-directive.module\";\n\n@NgModule({\n   imports: [\n      CommonModule,\n      FormsModule,\n      ReactiveFormsModule,\n      ClarityModule,\n      CommonPipeModule,\n      CommonDirectiveModule\n   ],\n   declarations: [\n      ProxyInputsComponent\n   ],\n   exports: [\n      ProxyInputsComponent\n   ],\n})\nexport class ProxySettingsModule {\n}\n","<!--Copyright 2018-2021 VMware, Inc. All rights reserved. -- VMware Confidential-->\n<ng-container [formGroup]=\"proxyForm\">\n   <clr-checkbox-container>\n      <clr-checkbox-wrapper>\n         <input clrCheckbox\n                id=\"proxy-checkbox\"\n                name=\"proxyCheckbox\"\n                type=\"checkbox\"\n                formControlName=\"{{ENABLE_PROXY_CONTROL_NAME}}\"\n                [vsan-disable-form-control]=\"!enableInternet\" />\n         <label id=\"proxy-checkbox-label\">\n            {{\"vsan.manage.externalProxySettings.action.edit.enableProxy\" | localized}}\n         </label>\n      </clr-checkbox-wrapper>\n   </clr-checkbox-container>\n\n   <clr-input-container>\n      <label class=\"clr-col-3\" for=\"hostname\">\n         {{\"vsan.manage.externalProxySettings.action.edit.hostName\" | localized}}\n      </label>\n      <input clrInput\n             id=\"hostname\"\n             name=\"hostname\"\n             type=\"text\"\n             class=\"clr-col-9\"\n             formControlName=\"{{HOSTNAME_CONTROL_NAME}}\"\n             [vsan-disable-form-control]=\"disableProxySetting\" />\n      <clr-control-error *clrIfError=\"HOSTNAME_EMPTY_VALIDATION\">\n         {{\"vsan.manage.externalProxySettings.action.edit.hostName.notSet\" | localized}}\n      </clr-control-error>\n      <clr-control-error *clrIfError=\"HOSTNAME_VALIDATION\">\n         {{\"vsan.manage.externalProxySettings.action.edit.hostName.invalid\" | localized}}\n      </clr-control-error>\n   </clr-input-container>\n\n   <clr-input-container>\n      <label class=\"clr-col-3\" for=\"port\">\n         {{\"vsan.manage.externalProxySettings.action.edit.port\" | localized}}\n      </label>\n      <input clrInput\n             id=\"port\"\n             name=\"port\"\n             type=\"number\"\n             class=\"clr-col-9\"\n             formControlName=\"{{PORT_CONTROL_NAME}}\"\n             [vsan-disable-form-control]=\"disableProxySetting\" />\n      <clr-control-error *clrIfError=\"PORT_VALIDATION\">\n         {{\"vsan.manage.externalProxySettings.action.edit.port.invalid\" | localized}}\n      </clr-control-error>\n   </clr-input-container>\n\n   <clr-input-container>\n      <label for=\"username\" class=\"clr-col-3\">\n         {{\"vsan.manage.externalProxySettings.action.edit.username\" | localized}}\n      </label>\n      <input clrInput\n             id=\"username\"\n             name=\"username\"\n             type=\"text\"\n             class=\"clr-col-9\"\n             formControlName=\"{{USERNAME_CONTROL_NAME}}\"\n             [vsan-disable-form-control]=\"disableProxySetting\" />\n   </clr-input-container>\n\n   <clr-input-container>\n      <label for=\"password\" class=\"clr-col-3\">\n         {{\"vsan.manage.externalProxySettings.action.edit.password\" | localized}}\n      </label>\n      <input clrInput\n             id=\"password\"\n             name=\"password\"\n             type=\"password\"\n             class=\"clr-col-9\"\n             formControlName=\"{{PASSWORD_CONTROL_NAME}}\"\n             [vsan-disable-form-control]=\"disableProxySetting\" />\n   </clr-input-container>\n</ng-container>","/* Copyright 2018-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, Input} from \"@angular/core\";\nimport {\n   AbstractControl,\n   ControlValueAccessor,\n   FormBuilder, FormControl, FormGroup,\n   NG_VALIDATORS, NG_VALUE_ACCESSOR,\n   ValidationErrors,\n   Validator, ValidatorFn,\n} from \"@angular/forms\";\nimport {ReferenceWatcher} from \"@util/reference-watcher\";\n\n@Component({\n   selector: \"vsan-proxy-inputs\",\n   templateUrl: \"proxy-inputs.html\",\n   styleUrls: [\"proxy-inputs.scss\"],\n   providers: [\n      {\n         provide: NG_VALUE_ACCESSOR,\n         multi: true,\n         useExisting: ProxyInputsComponent,\n      },\n      {\n         provide: NG_VALIDATORS,\n         multi: true,\n         useExisting: ProxyInputsComponent,\n      },\n      ReferenceWatcher,\n   ],\n})\nexport class ProxyInputsComponent implements ControlValueAccessor, Validator {\n\n   private static readonly PORT_MIN_VALUE: number  = 0;\n   private static readonly PORT_MAX_VALUE: number = 65535;\n   private static readonly EMPTY_SPACE_PATTERN: RegExp = /\\s/g;\n\n   private onChangeCallback: (value: any) => void;\n   private onTouchedCallback: any;\n\n   readonly ENABLE_PROXY_CONTROL_NAME: string = \"enableProxy\";\n   readonly HOSTNAME_CONTROL_NAME: string = \"hostname\";\n   readonly PORT_CONTROL_NAME: string = \"port\";\n   readonly USERNAME_CONTROL_NAME: string = \"username\";\n   readonly PASSWORD_CONTROL_NAME: string = \"password\";\n\n   readonly HOSTNAME_EMPTY_VALIDATION: string = \"hostnameEmptyValidation\";\n   readonly HOSTNAME_VALIDATION: string = \"hostnameValidation\";\n   readonly PORT_VALIDATION: string = \"portValidation\";\n   private readonly PROXY_SETTING_VALIDATION: string = \"invalidProxySetting\";\n\n   @Input()\n   enableInternet: boolean;\n\n   proxyForm: FormGroup;\n   originalProxy: ProxySetting;\n\n   constructor(private formBuilder: FormBuilder, private refWatcher: ReferenceWatcher) {\n      this.proxyForm = this.formBuilder.group({\n         [this.ENABLE_PROXY_CONTROL_NAME]: new FormControl(false),\n         [this.HOSTNAME_CONTROL_NAME]: new FormControl(\"\", this.hostnameValidator),\n         [this.PORT_CONTROL_NAME]: new FormControl(null, this.portValidator),\n         [this.USERNAME_CONTROL_NAME]: new FormControl(\"\"),\n         [this.PASSWORD_CONTROL_NAME]: new FormControl(\"\"),\n      });\n\n      this.refWatcher.watchSubscriptionRef(this.proxyForm.valueChanges.subscribe(this.onChange));\n   }\n\n   writeValue(controlValue: ProxySetting): void {\n      if (controlValue) {\n         // UI cannot get password from API and the backend API only accepts a new password,\n         // so here we don't display password and let user input a new one.\n         controlValue.password = null;\n         this.originalProxy = controlValue;\n      } else {\n         this.originalProxy = new ProxySetting();\n      }\n      this.proxyForm.setValue(this.originalProxy, {emitEvent: false});\n   }\n\n   registerOnChange(fn: (value: any) => void): void {\n      this.onChangeCallback = fn;\n   }\n\n   registerOnTouched(fn: any): void {\n      this.onTouchedCallback = fn;\n   }\n\n   onChange = (val: any) => {\n      // There is no onChangeCallback and onTouchedCallback when this component is used in ProxySettingsPageComponent.\n      if (this.onChangeCallback && this.onTouchedCallback) {\n         // Update the value of the component to match the expected model of type ProxySetting.\n         this.onChangeCallback(val);\n         this.onTouchedCallback();\n      }\n   };\n\n   validate(ctrl: AbstractControl = null): ValidationErrors {\n      // When clicking on checkbox, FormGroup's touched property doesn't change and dirty property changes.\n      // And when clicking on input, its touched property chagnes. So here we need to check dirty and touched property.\n      return !this.disableProxySetting && this.proxyForm && (this.proxyForm.dirty || this.proxyForm.touched) &&\n            this.proxyForm.invalid ? {[this.PROXY_SETTING_VALIDATION] : { value: ctrl.value}} : null;\n   }\n\n   private hostnameValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n      if (this.disableProxySetting) {\n         return null;\n      } else if (!this.getHostname()) {\n         return {[this.HOSTNAME_EMPTY_VALIDATION]: {value: control.value}};\n      }\n\n      return this.getHostname().match(ProxyInputsComponent.EMPTY_SPACE_PATTERN) ?\n            {[this.HOSTNAME_VALIDATION]: {value: control.value}} : null;\n   };\n\n   private portValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n      const isInvalidPort: boolean = (!this.getPort() && this.getPort() !== 0) || // 0 is a valid port number.\n            this.getPort() < ProxyInputsComponent.PORT_MIN_VALUE ||\n            this.getPort() > ProxyInputsComponent.PORT_MAX_VALUE;\n      return !this.disableProxySetting && isInvalidPort ? {[this.PORT_VALIDATION]: {value: control.value}} : null;\n   };\n\n   get disableProxySetting(): boolean {\n      return !this.enableInternet || !this.getEnableProxy();\n   }\n\n   private getEnableProxy(): boolean {\n      return this.proxyForm ? this.proxyForm.get(this.ENABLE_PROXY_CONTROL_NAME).value : false;\n   }\n\n   private getHostname(): string {\n      return this.proxyForm ? this.proxyForm.get(this.HOSTNAME_CONTROL_NAME).value : null;\n   }\n\n   private getPort(): number {\n      return this.proxyForm ? this.proxyForm.get(this.PORT_CONTROL_NAME).value : null;\n   }\n\n   value(): ProxySetting {\n      if (!this.proxyForm) {\n         return null;\n      }\n\n      return new ProxySetting(this.getValue(this.ENABLE_PROXY_CONTROL_NAME),\n            this.getValue(this.HOSTNAME_CONTROL_NAME),\n            this.getValue(this.PORT_CONTROL_NAME),\n            this.getValue(this.USERNAME_CONTROL_NAME),\n            this.getValue(this.PASSWORD_CONTROL_NAME));\n   }\n\n   private getValue(control: string): any {\n      return this.proxyForm.get(control).value;\n   }\n}\n\nexport class ProxySetting {\n   constructor(\n      public enableProxy: boolean = false,\n      public hostname: string = null,\n      public port: number = null,\n      public username: string = null,\n      public password: string = null) {\n   }\n}"]}