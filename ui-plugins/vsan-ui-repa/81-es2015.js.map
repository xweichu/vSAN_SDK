{"version":3,"sources":["./src/app/vsan/shared-witness/dialog/select-clusters-dialog.component.ts","./src/app/vsan/shared-witness/common/shared-witness-constants.ts","./src/app/vsan/shared-witness/common/compatibility-cell.component.ts","./src/app/vsan/shared-witness/common/shared-witness-route-paths.ts","./src/app/vsan/shared-witness/common/select-clusters.html","./src/app/vsan/shared-witness/dialog/select-clusters-dialog.html","./src/app/vsan/shared-witness/common/select-clusters.component.ts","./src/app/vsan/shared-witness/common/compatibility-cell.html","./src/app/vsan/shared-witness/common/shared-witness-common.module.ts"],"names":[],"mappings":"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","file":"81-es2015.js","sourcesContent":["/* Copyright 2019-2020 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, OnInit} from \"@angular/core\";\nimport {ManagedObject} from \"@service/managed-object\";\nimport {ConfigureSharedWitnessWorkflowBacking} from \"@generated/configure-shared-witness-workflow-backing\";\nimport {TwoHostClusterData} from \"@generated/two-host-cluster-data\";\nimport {AlertType} from \"@component/validation/alert-type\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {WitnessHostValidation, WitnessValidationService} from \"@service/witness-validation.service\";\nimport {WitnessHostValidationResult} from \"@generated/witness-host-validation-result\";\nimport {SharedWitnessClusterValidationData} from \"@generated/shared-witness-cluster-validation-data\";\nimport {SharedWitnessHostService} from \"@generated/shared-witness-host-service\";\nimport {SharedWitnessLimits} from \"@generated/shared-witness-limits\";\n\n@Component({\n   templateUrl: \"select-clusters-dialog.html\",\n   selector: \"vsan-select-clusters-dialog\",\n})\nexport class SelectClustersDialogComponent implements OnInit {\n\n   loading: boolean = false;\n\n   twoNodeClusters: TwoHostClusterData[];\n   clustersRefs: ManagedObject[] = [];\n   sharedWitnessLimits: SharedWitnessLimits;\n\n   infoMessage: string;\n   validationMessages: string[] = [];\n   clustersValidationData: Map<string, SharedWitnessClusterValidationData>;\n\n   witnessHostName: string = \"\";\n   private witnessHost: ManagedObject = ManagedObject.contextObject;\n   // Flag to track if currently selected host & clusters have been validated against backend\n   private skipWitnessValidation: boolean = false;\n\n   constructor(private configureSharedWitnessWorkflowBacking: ConfigureSharedWitnessWorkflowBacking,\n         private sharedWitnessHostService: SharedWitnessHostService,\n         private witnessHostService: WitnessValidationService) {\n   }\n\n   async ngOnInit(): Promise<void> {\n      try {\n         this.loading = true;\n         [this.twoNodeClusters, this.witnessHostName, this.sharedWitnessLimits] = await Promise.all([\n            this.configureSharedWitnessWorkflowBacking.getAssignedAndTwoNodeClusters(this.witnessHost),\n            this.configureSharedWitnessWorkflowBacking.getWitnessHostNode(this.witnessHost).then(r => r.name),\n            this.sharedWitnessHostService.getSharedWitnessLimits(this.witnessHost)]);\n      } catch (e) {\n         this.validationMessages = [e];\n      } finally {\n         this.loading = false;\n      }\n   }\n\n   selectionChanged(clustersRefs: ManagedObject[]): void {\n      // Upon changing the clusters selection we need to call the backend for validation\n      this.resetValidation();\n      this.clustersRefs = clustersRefs;\n   }\n\n   async validate(): Promise<void> {\n      // Don't start validation if it has already passed and cluster/host selection hasn't been changed\n      if (this.skipWitnessValidation) {\n         await this.closeDialog();\n         return;\n      }\n      await this.validateCompatibility();\n      // Don't close dialog if the selected host had validation errors\n      if (!this.hasValidationError()) {\n         await this.closeDialog();\n      }\n   }\n\n   async closeDialog(): Promise<void> {\n      this.loading = true;\n      try {\n         const task: ManagedObject = await this.configureSharedWitnessWorkflowBacking\n               .configureSharedWitnessHost(this.clustersRefs, this.witnessHost, null);\n         VsanUiUtils.closeModalDialog(task);\n      } catch (error) {\n         this.validationMessages = [error];\n      } finally {\n         this.loading = false;\n      }\n   }\n\n   async validateCompatibility(): Promise<void> {\n      this.resetValidation();\n      if (VsanUiUtils.isEmpty(this.validationMessages)) {\n         await this.validateSharedWitnessHost();\n      }\n      if (!this.hasValidationError()) {\n         this.skipWitnessValidation = true;\n      }\n   }\n\n   resetValidation(): void {\n      this.infoMessage = null;\n      this.validationMessages = [];\n      this.skipWitnessValidation = false;\n   }\n\n   private hasValidationError(): boolean {\n      return !VsanUiUtils.isEmpty(this.validationMessages);\n   }\n\n   private async validateSharedWitnessHost(): Promise<void> {\n      this.loading = true;\n      let witnessHostValidation: WitnessHostValidation;\n      try {\n         const result: WitnessHostValidationResult = await this.configureSharedWitnessWorkflowBacking\n               .getValidateCurrentWitnessHost(this.clustersRefs, this.witnessHost);\n         this.clustersValidationData = this.witnessHostService.updateClustersValidation(\n               result.witnessValidationResult, this.clustersValidationData, this.twoNodeClusters.map(i => i.cluster));\n         witnessHostValidation = this.witnessHostService.handleSharedWitnessHostValidationResult(result);\n      } catch (error) {\n         witnessHostValidation = this.witnessHostService.handleHostValidationError(error);\n      }\n      if ([AlertType.WARNING, AlertType.DANGER].includes(witnessHostValidation.validationAlertType)) {\n         this.validationMessages = witnessHostValidation.validationMessages;\n      } else if (AlertType.INFO === witnessHostValidation.validationAlertType) {\n         this.infoMessage = witnessHostValidation.validationMessages[0];\n      }\n      this.loading = false;\n   }\n}","/* Copyright 2020 VMware, Inc. All rights reserved. -- VMware Confidential */\n\nexport enum SharedWitnessConstants {\n   MAX_NUMBER_OF_SHARED_CLUSTERS = 64,\n   CLUSTER_COMPONENTS_THRESHOLD_PERC = 0.9,\n}","/* Copyright 2019-2020 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, Input} from \"@angular/core\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {Icon} from \"@util/icon\";\nimport {SharedWitnessClusterValidationData} from \"@generated/shared-witness-cluster-validation-data\";\nimport {SharedWitnessConstants} from \"./shared-witness-constants\";\n\n@Component({\n   templateUrl: \"compatibility-cell.html\",\n   styleUrls: [\"compatibility-cell.scss\"],\n   selector: \"vsan-compatibility-cell\",\n})\nexport class CompatibilityCellComponent {\n\n   @Input()\n   clusterValidationData: SharedWitnessClusterValidationData;\n\n   @Input()\n   isClusterWitnessedByCurrentHost: boolean = false;\n\n   @Input()\n   private isSelected: boolean;\n\n   showCompatibilityResult() {\n      return this.isSelected // Cluster is not selected, so validation doesn't matter\n            && this.clusterValidationData;\n   }\n\n   getClusterValidationMessage(): string {\n      if (!this.clusterValidationData.compatible) {\n         return this.clusterValidationData.validationMessage;\n      }\n      if (this.clusterValidationData.componentsCount !== null) {\n         return VsanUiUtils.getString(\n               \"vsan.host.sharedWitness.reassign.wizard.selectClusters.validation.compatibleCluster\",\n               this.clusterValidationData.componentsCount);\n      }\n      // componentsCount may not be present if SW validation is not triggered. This happens when:\n      // 1) Host is not a witness and\n      // 2) There is a single robo cluster.\n      return VsanUiUtils.getString(\n            \"vsan.host.sharedWitness.reassign.wizard.selectClusters.validation.compatibleCluster.noComponents\");\n   }\n\n   getClusterValidationClass(): string {\n      return Icon.clrIconShapeClassMap[this.getClusterValidationShape()];\n   }\n\n   getClusterValidationShape(): string {\n      if (!this.clusterValidationData.compatible) {\n         return Icon.CLR_ERROR_STANDARD_ICON_SHAPE;\n      }\n      return this.isReachingComponentsLimit() ?\n            Icon.CLR_WARN_STANDARD_ICON_SHAPE : Icon.CLR_SUCCESS_STANDARD_ICON_SHAPE;\n   }\n\n   isReachingComponentsLimit(): boolean {\n      return this.clusterValidationData.componentsCount >\n            this.clusterValidationData.componentsLimit * SharedWitnessConstants.CLUSTER_COMPONENTS_THRESHOLD_PERC;\n   }\n}","/* Copyright 2020 VMware, Inc. All rights reserved. -- VMware Confidential */\n\nexport enum SharedWitnessRoutePaths {\n   ADD_CLUSTERS_WIZARD_FULL = \"sharedWitnessWizard/addClusters\",\n   ADD_CLUSTERS_WIZARD = \"addClusters\",\n   REASSIGN_WITNESS_WIZARD_FULL = \"sharedWitnessWizard/reassignWitness\",\n   REASSIGN_WITNESS_WIZARD = \"reassignWitness\",\n   SELECT_CLUSTERS_DIALOG_FULL = \"sharedWitness/selectClusters\",\n   SELECT_CLUSTERS_DIALOG = \"selectClusters\",\n   ADD_CLUSTERS_PRECHECK_DIALOG = \"addClustersPrecheck\",\n   REASSIGN_WITNESS_PRECHECK_DIALOG = \"reassignWitnessPrecheck\",\n}","<!-- Copyright 2019-2021 VMware, Inc. All rights reserved. -- VMware Confidential -->\n<div id=\"add-clusters-desc\">\n   {{getAddClustersDescription()}}\n</div>\n<div class=\"progress-block\">\n   <label>{{\"vsan.host.sharedWitness.addClusters.wizard.selectClusters.clustersAdded.label\" | localized}}</label>\n   <div class=\"progress\"\n        [ngClass]=\"{'danger': isExceedingLimit()}\">\n      <progress [value]=\"getAllSelectedClustersCount()\" [max]=\"getMaxWitnessClusters()\"></progress>\n   </div>\n   <span>{{getSelectedClustersCountLabel()}}</span>\n</div>\n<clr-datagrid id=\"witness-host-clusters-list\"\n              class=\"datagrid-compact\"\n              [(clrDgSelected)]=\"selectedClustersAll\"\n              (clrDgSelectedChange)=\"clusterSelectionChanged($event)\">\n   <clr-dg-column id=\"cluster-name-column\" class=\"name-column\">\n      {{\"vsan.host.sharedWitness.reassign.wizard.selectClusters.cluster.name\" | localized}}\n   </clr-dg-column>\n   <clr-dg-column id=\"current-witness-column\" class=\"name-column\">\n      {{\"vsan.host.sharedWitness.addClusters.wizard.selectClusters.cluster.witness\" | localized}}\n   </clr-dg-column>\n   <clr-dg-column id=\"cluster-compatibility-column\">\n      {{\"vsan.host.sharedWitness.reassign.wizard.selectClusters.cluster.compatibility\" | localized}}\n   </clr-dg-column>\n   <clr-dg-row *clrDgItems=\"let clusterData of twoNodeClusters\" [clrDgItem]=\"clusterData\"\n               [clrDgSelectable]=\"!isClusterWitnessedByCurrentHost(clusterData)\"\n               [clrDgSelected]=\"isClusterWitnessedByCurrentHost(clusterData)\"\n               [ngClass]=\"{'disable-action': isClusterWitnessedByCurrentHost(clusterData)}\">\n      <clr-dg-cell class=\"cluster-name-cell\">\n         <vsan-icon-item [label]=\"clusterData.cluster?.name\"\n                         [shape]=\"clusterData.cluster?.primaryIconId\">\n         </vsan-icon-item>\n      </clr-dg-cell>\n      <clr-dg-cell class=\"current-witnesshost-cell\">\n         <vsan-icon-item [label]=\"clusterData.witnessHost?.name\"\n                         [shape]=\"clusterData.witnessHost?.primaryIconId\">\n         </vsan-icon-item>\n      </clr-dg-cell>\n      <!-- Grid rows's height is expanded after triggering validation due to the icon's height reaching datagrid cell padding. -->\n      <clr-dg-cell class=\"cluster-compatibility-cell no-vertical-padding\">\n         <vsan-compatibility-cell vsan-show-title [copyToClipboard]=true\n                                  [isSelected]=\"selectedClustersAll.includes(clusterData)\"\n                                  [clusterValidationData]=\"clustersValidationData &&\n                                  clustersValidationData[clusterData.cluster.moRef.value]\"\n                                  [isClusterWitnessedByCurrentHost]=\"isClusterWitnessedByCurrentHost(clusterData)\">\n         </vsan-compatibility-cell>\n      </clr-dg-cell>\n   </clr-dg-row>\n</clr-datagrid>\n<clr-button-group class=\"btn-link\">\n   <clr-button id=\"validate-clusters-compatibility\"\n               name=\"validate-clusters-compatibility\"\n               type=\"button\"\n               class=\"btn btn-sm\"\n               (click)=\"compatibilityValidate()\"\n               [disabled]=\"!selectedClusters.length\">\n      {{\"vsan.host.sharedWitness.reassign.wizard.selectClusters.validateClusters.label\" | localized}}\n   </clr-button>\n</clr-button-group>","<!-- Copyright 2019-2020 VMware, Inc. All rights reserved. -- VMware Confidential -->\n<vsan-edit-prompt\n      [title]=\"'vsan.host.sharedWitness.addClusters.dialog.title' | localized\"\n      [subtitle]=\"witnessHostName\"\n      [blockContent]=\"loading\"\n      [blockButton]=\"loading || !clustersRefs?.length\"\n      [confirmText]=\"'vsan.common.add' | localized\"\n      [(alertMessages)]=\"validationMessages\"\n      (onConfirm)=\"validate()\">\n   <vsan-validation id=\"info-message\"\n                    alertType=\"info\"\n                    *ngIf=\"infoMessage\"\n                    [alert]=\"infoMessage\"\n                    [allowClose]=\"false\"\n                    [isSmall]=\"true\">\n   </vsan-validation>\n  <vsan-select-clusters [twoNodeClusters]=\"twoNodeClusters\"\n                        [clustersValidationData]=\"clustersValidationData\"\n                        [witnessLimits]=\"sharedWitnessLimits\"\n                        (selectionChanged)=\"selectionChanged($event)\"\n                        (validateCompatibility)=\"validateCompatibility()\">\n  </vsan-select-clusters>\n</vsan-edit-prompt>\n","/* Copyright 2019-2020 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Component, EventEmitter, Input, Output} from \"@angular/core\";\nimport {ManagedObject} from \"@service/managed-object\";\nimport {TwoHostClusterData} from \"@generated/two-host-cluster-data\";\nimport {SharedWitnessClusterValidationData} from \"@generated/shared-witness-cluster-validation-data\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {SharedWitnessLimits} from \"@generated/shared-witness-limits\";\n\n@Component({\n   templateUrl: \"select-clusters.html\",\n   styleUrls: [\"select-clusters.scss\"],\n   selector: \"vsan-select-clusters\",\n})\nexport class SelectClustersComponent {\n\n   @Input()\n   witnessLimits: SharedWitnessLimits;\n\n   @Input()\n   clustersValidationData: Map<string, SharedWitnessClusterValidationData>;\n\n   @Input()\n   twoNodeClusters: TwoHostClusterData[];\n\n   @Output()\n   selectionChanged: EventEmitter<ManagedObject[]> = new EventEmitter<ManagedObject[]>();\n\n   @Output()\n   validateCompatibility: EventEmitter<void> = new EventEmitter<void>();\n\n   // Selected clusters excluding ones witnessed by the current host\n   selectedClusters: TwoHostClusterData[] = [];\n\n   // Datagrid model for selection.\n   selectedClustersAll: TwoHostClusterData[] = [];\n\n   isClusterWitnessedByCurrentHost(clusterData: TwoHostClusterData) {\n      if (clusterData.witnessHost) {\n         return ManagedObject.areEqual(clusterData.witnessHost.moRef, ManagedObject.contextObject);\n      }\n      return false;\n   }\n\n   compatibilityValidate() {\n      this.validateCompatibility.emit();\n   }\n\n   clusterSelectionChanged(clusters: TwoHostClusterData[]) {\n      // Exclude already witnessed clusters\n      this.selectedClusters = clusters.filter(c => !this.isClusterWitnessedByCurrentHost(c));\n      const clustersRefs: ManagedObject[] = this.selectedClusters.map(c => c.cluster.moRef);\n      this.selectionChanged.emit(clustersRefs);\n   }\n\n   getAllSelectedClustersCount(): number {\n      return this.selectedClustersAll.length;\n   }\n\n   getAddClustersDescription(): string {\n      const maxComponentsPerCluster: string | number =\n            (this.witnessLimits && this.witnessLimits.maxComponentsPerCluster) ?\n                  this.witnessLimits.maxComponentsPerCluster : VsanUiUtils.getString(\"vsan.na.label\");\n      return VsanUiUtils.getString(\"vsan.host.sharedWitness.addClusters.wizard.selectClusters.description\",\n            this.getMaxWitnessClustersLabel(), maxComponentsPerCluster);\n   }\n\n   getSelectedClustersCountLabel(): string {\n      const clustersCountKey: string = this.isExceedingLimit() ?\n            \"vsan.host.sharedWitness.addClusters.wizard.selectClusters.clustersAdded.count.exceeded\" :\n            \"vsan.host.sharedWitness.addClusters.wizard.selectClusters.clustersAdded.count\";\n      return VsanUiUtils.getString(\n            clustersCountKey, this.getAllSelectedClustersCount(), this.getMaxWitnessClustersLabel());\n   }\n\n   isExceedingLimit(): boolean {\n      return this.getAllSelectedClustersCount() > this.getMaxWitnessClusters();\n   }\n\n   private getMaxWitnessClustersLabel(): string | number {\n      return this.getMaxWitnessClusters() ? this.getMaxWitnessClusters() : VsanUiUtils.getString(\"vsan.na.label\");\n   }\n\n   getMaxWitnessClusters(): number {\n      return (this.witnessLimits && this.witnessLimits.maxWitnessClusters) ? this.witnessLimits.maxWitnessClusters : 0;\n   }\n}","<!-- Copyright 2019 VMware, Inc. All rights reserved. -- VMware Confidential -->\n\n<ng-container *ngIf=\"showCompatibilityResult() && !isClusterWitnessedByCurrentHost\">\n   <clr-icon *ngIf=\"getClusterValidationShape()\"\n             [attr.shape]=\"getClusterValidationShape()\"\n             class=\"is-solid {{getClusterValidationClass()}}\">\n   </clr-icon>\n   <span>\n      {{getClusterValidationMessage()}}\n   </span>\n</ng-container>\n<span *ngIf=\"isClusterWitnessedByCurrentHost\">\n   {{'vsan.host.sharedWitness.addClusters.wizard.selectClusters.validation.alreadyAdded' | localized}}\n</span>\n","/* Copyright 2019-2020 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {NgModule} from \"@angular/core\";\nimport {SelectClustersComponent} from \"./select-clusters.component\";\nimport {CompatibilityCellComponent} from \"./compatibility-cell.component\";\nimport {ClarityModule} from \"@clr/angular\";\nimport {CommonModule} from \"@angular/common\";\nimport {PromptModule} from \"@component/dialog/prompt/prompt.module\";\nimport {CommonPipeModule} from \"@pipe/common-pipe.module\";\nimport {CommonDirectiveModule} from \"@directive/common-directive.module\";\nimport {SelectClustersDialogComponent} from \"../dialog/select-clusters-dialog.component\";\nimport {CommonCellsModule} from \"@component/cell/common-cells.module\";\nimport {ValidationModule} from \"@component/validation/validation.module\";\n\n@NgModule({\n   imports: [\n      CommonModule,\n      ClarityModule,\n      PromptModule,\n      CommonPipeModule,\n      CommonDirectiveModule,\n      CommonCellsModule,\n      ValidationModule,\n   ],\n   declarations: [\n      CompatibilityCellComponent,\n      SelectClustersComponent,\n      SelectClustersDialogComponent,\n   ],\n   exports: [\n      CompatibilityCellComponent,\n      SelectClustersComponent,\n      SelectClustersDialogComponent,\n   ],\n})\n\nexport class SharedWitnessCommonModule {\n}"],"sourceRoot":"webpack:///"}