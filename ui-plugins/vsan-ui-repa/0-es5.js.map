{"version":3,"sources":["webpack:///src/app/vsan/common/component/dialog/prompt/prompt.component.ts","webpack:///src/app/vsan/common/component/dialog/prompt/prompt.module.ts","webpack:///src/app/vsan/common/directive/icon-title/icon-title.directive.ts"],"names":["PromptComponent","el","focusTrap","title","confirmText","confirmStyle","cancelText","additionalButtonText","blockAdditionalButton","_alertMessages","alertType","DANGER","allowAlertClose","alertMessagesChange","alertMessageChange","blockButton","blockContent","busyText","onConfirm","onCancel","onAdditionalAction","create","nativeElement","focusInitialElement","alertMessages","filter","message","emit","alertMessage","setAccessibilityTitle","result","observers","length","closeModalDialog","PromptModule","IconTitleDirective","SHAPE_ATTRIBUTE","TITLE_ATTRIBUTE","getAttribute","iconTitle","shape","getDefaultVsanIconTitle","setAttribute"],"mappings":"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","file":"0-es5.js","sourcesContent":["/* Copyright 2017-2021 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {FocusTrapFactory} from \"@angular/cdk/a11y\";\nimport {Component, ElementRef, EventEmitter, Input, OnInit, Output} from \"@angular/core\";\nimport {WebPlatform} from \"@util/platform\";\nimport {VsanUiUtils} from \"@util/vsan-util\";\nimport {AlertType} from \"../../validation/alert-type\";\n\n/**\n * Base dialog component providing common functionality\n * like unified dialog layout (header, footer, content area),\n * validation alerts, busy indication.\n * As the component implements its own title bar, it must\n * be opened in a headless modal - ModalBuilder.setTitle(null)\n * The content is contained in a vertical flex box.\n */\n@Component({\n   selector: \"vsan-prompt\",\n   templateUrl: \"prompt.html\",\n   styleUrls: [\"prompt.scss\"],\n})\nexport class PromptComponent implements OnInit {\n\n   /**\n    * The title of the dialog\n    */\n   @Input() title: string = \"\";\n\n   /**\n    * (Optional) The smaller font subtitle\n    */\n   @Input() subtitle: string;\n\n   /**\n    * The text on the primary button\n    */\n   @Input() confirmText: string = \"vsan.common.close\";\n\n   /**\n    * (Optional) The additional style for the primary button (e.g. \"btn-success\")\n    */\n   @Input() confirmStyle: string = \"\";\n\n   /**\n    * (Optional) The text on the close button.\n    * The button will not be visible if not assigned.\n    */\n   @Input() cancelText: string = null;\n\n   /**\n    * (Optional) The text on the additional button.\n    * The button will not be visible if not assigned.\n    */\n   @Input() additionalButtonText: string = null;\n\n   /**\n    * (Optional) When set to true, the additional button will be disabled.\n    */\n   @Input() blockAdditionalButton: boolean = false;\n\n   private _alertMessages: string[] = [];\n\n   /**\n    * External validation messages to be displayed.\n    * Always use double binding, because pushing a new element does not trigger the setter.\n    */\n   get alertMessages(): string[] {\n      return this._alertMessages;\n   }\n\n   @Input()\n   set alertMessages(alertMessages: string[]) {\n      this._alertMessages = (alertMessages || []).filter(message => !!message);\n      this.alertMessagesChange.emit(this._alertMessages);\n      this.alertMessageChange.emit(this._alertMessages?.[0]);\n   }\n\n   /**\n    * External validation message to be displayed.\n    * Use double binding to listen for user clearing alerts.\n    */\n   @Input()\n   set alertMessage(alertMessage: string) {\n      this.alertMessages = [alertMessage];\n   }\n\n   /**\n    * (Optional) External message type.\n    */\n   @Input() alertType: string = AlertType.DANGER;\n\n   /**\n    * Whether to allow the user to close the validation error message.\n    * @type {boolean}\n    */\n   @Input() allowAlertClose: boolean = true;\n\n   /**\n    * Triggered when alertMessages are cleared by the user\n    * @type {EventEmitter<string[]>}\n    */\n   @Output() alertMessagesChange: EventEmitter<string[]> = new EventEmitter<string[]>();\n\n   /**\n    * Triggered when alertMessages are cleared by the user\n    * @type {EventEmitter<string>}\n    */\n   @Output() alertMessageChange: EventEmitter<string> = new EventEmitter<string>();\n\n   /**\n    * When set to true, the primary button will be disabled.\n    */\n   @Input() blockButton: boolean = false;\n\n   /**\n    * When set to true, there will be overlay with spinner over the content\n    * of the dialog, blocking user interaction.\n    */\n   @Input() blockContent: boolean = false;\n\n   /**\n    * What loading text to show when loading is true\n    */\n   @Input()\n   busyText: string = null;\n\n   /**\n    * Triggered when the user clicks on the primary button.\n    * If no subscribers are present, the dialog will be automatically closed.\n    * Otherwise the subscriber is responsible to close the modal.\n    * @type {EventEmitter<any>}\n    */\n   @Output() onConfirm: EventEmitter<any> = new EventEmitter<any>();\n\n   @Output() onCancel: EventEmitter<void> = new EventEmitter<void>();\n\n   @Output() onAdditionalAction: EventEmitter<void> = new EventEmitter<void>();\n\n   constructor(private el: ElementRef, private focusTrap: FocusTrapFactory) {\n      // Create a focus trap region and move the focus into it.\n      focusTrap.create(el.nativeElement).focusInitialElement();\n   }\n\n   ngOnInit(): void {\n      WebPlatform.setAccessibilityTitle(this.title);\n   }\n\n   clearAlerts(): void {\n      this.alertMessages = null;\n      this.alertMessagesChange.emit(this.alertMessages);\n   }\n\n   confirm(): void {\n      const result: any = {}; // defined to trigger the modal callback\n      if (this.onConfirm.observers.length) {\n         this.onConfirm.emit(result);\n      } else {\n         VsanUiUtils.closeModalDialog(result);\n      }\n   }\n\n   cancel(): void {\n      if (this.onCancel.observers.length) {\n         this.onCancel.emit();\n      } else {\n         VsanUiUtils.closeModalDialog();\n      }\n   }\n\n   additionalAction(): void {\n      this.onAdditionalAction.emit();\n   }\n}\n","/* Copyright 2019-2020 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {NgModule} from \"@angular/core\";\nimport {CommonModule} from \"@angular/common\";\nimport {ClarityModule} from \"@clr/angular\";\nimport {A11yModule} from \"@angular/cdk/a11y\";\nimport {ValidationModule} from \"@component/validation/validation.module\";\nimport {PromptComponent} from \"@component/dialog/prompt/prompt.component\";\nimport {CreatePrompt} from \"@component/dialog/prompt/prompt-create.component\";\nimport {DeletePrompt} from \"@component/dialog/prompt/prompt-delete.component\";\nimport {EditPrompt} from \"@component/dialog/prompt/prompt-edit.component\";\nimport {InfoPrompt} from \"@component/dialog/prompt/prompt-info.component\";\nimport {QuestionPrompt} from \"@component/dialog/prompt/prompt-question.component\";\nimport {DefaultPrompt} from \"@component/dialog/prompt/prompt-default.component\";\nimport {CommonPipeModule} from \"@pipe/common-pipe.module\";\nimport {CommonDirectiveModule} from \"@directive/common-directive.module\";\nimport {LightInfoPrompt} from \"@component/dialog/prompt/prompt-light-info.component\";\n\n@NgModule({\n   imports: [\n      A11yModule,\n      CommonModule,\n      ClarityModule,\n      ValidationModule,\n      CommonPipeModule,\n      CommonDirectiveModule,\n   ],\n   declarations: [\n      PromptComponent,\n      CreatePrompt,\n      DeletePrompt,\n      EditPrompt,\n      InfoPrompt,\n      QuestionPrompt,\n      DefaultPrompt,\n      LightInfoPrompt,\n   ],\n   exports: [\n      PromptComponent,\n      CreatePrompt,\n      DeletePrompt,\n      EditPrompt,\n      InfoPrompt,\n      QuestionPrompt,\n      DefaultPrompt,\n      LightInfoPrompt\n   ],\n})\nexport class PromptModule {\n}","/* Copyright 2020 VMware, Inc. All rights reserved. -- VMware Confidential */\nimport {Directive, ElementRef, AfterViewInit, Input} from '@angular/core';\nimport {Icon} from \"@util/icon\";\n\n/**\n * Attribute directive for setting the title of clr-icon according to its shape.\n */\n@Directive({\n   selector: \"clr-icon\"\n})\nexport class IconTitleDirective implements AfterViewInit {\n\n   private readonly SHAPE_ATTRIBUTE: string = \"shape\";\n   private readonly TITLE_ATTRIBUTE: string = \"title\";\n\n   @Input(\"vsan-icon-title\")\n   iconTitle: string;\n\n   constructor(private el: ElementRef) { }\n\n   ngAfterViewInit() {\n      // Return if clr-icon already has title attribute.\n      if (this.el.nativeElement.getAttribute(this.TITLE_ATTRIBUTE)) {\n         return;\n      }\n\n      let title: string = this.iconTitle;\n      if (!title) {\n         const shape: string = this.el.nativeElement.getAttribute(this.SHAPE_ATTRIBUTE);\n         title = Icon.getDefaultVsanIconTitle(shape);\n      }\n      if (title) {\n         this.el.nativeElement.setAttribute(this.TITLE_ATTRIBUTE, title);\n      }\n   }\n}"]}